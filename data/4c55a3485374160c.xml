<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:cc="http://cyber.law.harvard.edu/rss/creativeCommonsRssModule.html">
    <channel>
        <title><![CDATA[FullStackML - Medium]]></title>
        <description><![CDATA[Data Science, Machine Learning, Coding &amp; Tools [by Dmitry Petrov] - Medium]]></description>
        <link>https://fullstackml.com?source=rss----46e065078cc1---4</link>
        <image>
            <url>https://cdn-images-1.medium.com/proxy/1*TGH72Nnw24QL3iV9IOm4VA.png</url>
            <title>FullStackML - Medium</title>
            <link>https://fullstackml.com?source=rss----46e065078cc1---4</link>
        </image>
        <generator>Medium</generator>
        <lastBuildDate>Sat, 05 Nov 2022 16:47:09 GMT</lastBuildDate>
        <atom:link href="https://fullstackml.com/feed" rel="self" type="application/rss+xml"/>
        <webMaster><![CDATA[yourfriends@medium.com]]></webMaster>
        <atom:link href="http://medium.superfeedr.com" rel="hub"/>
        <item>
            <title><![CDATA[Wavelet image hash in Python]]></title>
            <link>https://fullstackml.com/wavelet-image-hash-in-python-3504fdd282b5?source=rss----46e065078cc1---4</link>
            <guid isPermaLink="false">https://medium.com/p/3504fdd282b5</guid>
            <category><![CDATA[image-processing]]></category>
            <category><![CDATA[python]]></category>
            <category><![CDATA[machine-learning]]></category>
            <dc:creator><![CDATA[Dmitry Petrov]]></dc:creator>
            <pubDate>Sat, 02 Jul 2016 16:19:26 GMT</pubDate>
            <atom:updated>2017-11-07T06:37:01.648Z</atom:updated>
            <content:encoded><![CDATA[<p>For several weekends, I had fun playing Kaggle: <a href="http://kaggle.com/c/avito-duplicate-ads-detection/">Avito Duplicate Ads Detection problem</a>. This machine learning problem includes more than 10 million images in addition to the structured data set. In this competition, many players use image hashes instead of the actual images to optimize the model creation process.</p><p>What I found interesting is — most of the implementation of the image hashing uses a standard Discrete Cosine Transformation (CDT). I used to work with images many years back and remember that Discrete Wavelet Transformation (DWT) might give better results for images. <strong>I was unable to find any Python implementation DWT based image hashing, so I implemented one and pushed to the </strong><a href="https://github.com/JohannesBuchner/imagehash"><strong>imagehash</strong></a><strong> library</strong>. The change is available in the master branch on github and in the new version of the package. In this blogpost, I will describe how it works concisely.</p><h3>1. Imagehash Python library</h3><p>The most simple and effective library that I found was the <a href="https://github.com/JohannesBuchner/imagehash"><strong>imagehash</strong></a> library from Johannes Bucher. There were several image hashes implemented in the library: aHash, pHash, dHash. All three of the approaches scale an image into a grayscale 8x8 image first. Then the library performs some calculations for each of these 64 pixels and assigns a binary 1 or 0 value. These 64 bits form the output of algorithm. The bit computation methods are different:</p><ol><li><strong>aHash</strong> — average hash, for each of the pixels output 1 if the pixel is bigger or equal to the average and 0 otherwise.</li><li><strong>pHash</strong> — perceptive hash, does the same as aHash, but first it does a Discrete Cosine Transformation and works in the <a href="https://en.wikipedia.org/wiki/Frequency_domain">frequency domain</a>.</li><li><strong>dHash</strong> — gradient hash, calculate the difference for each of the pixel and compares the difference with the average differences.</li><li><strong>* wHash</strong> — wavelet hashing, that I added to the library a couple days back. It works in the frequency domain as pHash but it uses DWT instead of DCT.</li></ol><p>You can fine more detailed description of the hashes in <a href="http://www.hackerfactor.com/blog/index.php?/archives/529-Kind-of-Like-That.html">this blogpost</a>.</p><p>The code below shows how to use the library.</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/bce34d689cb52213c0fcdff0e4cbbbec/href">https://medium.com/media/bce34d689cb52213c0fcdff0e4cbbbec/href</a></iframe><p>The two images from the code example are definitely not equal. The 44 bits out of 64 are different. Similar images will have a difference up to 6–8 bits.</p><p>UPDATE: A typo was found by <a href="https://www.kaggle.com/c/avito-duplicate-ads-detection/forums/t/22011/precomputed-wavelet-image-hashes/126522#post126522">LIN China</a>. The hash values and the difference were changed.</p><h3>2. Calculate image hash</h3><p>For regular photos, frequency based methods like pHash usually give better results because the frequency domain is more stable for images transformations like:</p><ul><li>JPG compression</li><li>color schema change or applying image filters</li><li>size scaling</li><li>and even some minor image editing: cutting part of an image, marking an image by watermark, adding text of modifying an image .</li></ul><p>For example, let’s take a look at an image and a transformed version of the same image. This is going to be a very popular <a href="https://en.wikipedia.org/wiki/Lenna">Lenna image</a>. Many image processing researches use this picture. I remember this picture pretty well from my student days when I did some image researches more than some 10 years back.</p><figure><img alt="lenna" src="https://cdn-images-1.medium.com/max/512/0*-X0-tcEnb4Hq3NJr.png" /><figcaption>Lenna.png. Original image. Size 512x512.</figcaption></figure><p>Let’s make some basic transformations on the image and compare the hashes. First of all we will introduce size change from 512x512 to 400x400 pixels. Then we will change color schema and then compress to JPEG for the final step.</p><figure><img alt="lenna1" src="https://cdn-images-1.medium.com/max/400/0*xFkSVII_-GttrjWL.jpg" /><figcaption>Lenna1.jpg. Color schema and image size were changed. JPG compressed. Size 400x400</figcaption></figure><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/b7fac079684bbd62ae52aeb5d877eee7/href">https://medium.com/media/b7fac079684bbd62ae52aeb5d877eee7/href</a></iframe><p>Ha… not bad! No difference in the image hashes even after compression, resizing and color changing.</p><p>Let’s apply more transformations to the lenna1.jpg image (not the original one):</p><ul><li>take only the central part of the picture</li><li>add text</li><li>compress again</li></ul><figure><img alt="lenna2" src="https://cdn-images-1.medium.com/max/317/0*lHj_fOuBxDLoQ_Hv.jpg" /><figcaption>Lenna2.jpg. More image transformations. Size 317x360</figcaption></figure><p>I shared all three images: <a href="https://www.dropbox.com/s/sakmlt0qdga9slk/lenna1.jpg?dl=0">lenna.png</a>, <a href="https://www.dropbox.com/s/8ipod2szqp6hfok/lenna2.jpg?dl=0">lenna1.jpg</a>, <a href="https://www.dropbox.com/s/hfplym5br85okk3/lenna.png?dl=0">lenna2.jpg</a>.</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/29730b5245a232b9d81fa98f7405e1c7/href">https://medium.com/media/29730b5245a232b9d81fa98f7405e1c7/href</a></iframe><p>All right. Now we can see the hash difference is 20, or 31.2% per hash bit. The second metric is much better because the hash size is varies for different hashes.</p><p>aHash brings different results. Even simple transformation of lenna1.jpg shows 1.6% hash difference. More aggressive lenna2.jpg gives 29.7 % difference.</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/3becb2a1c4be3b3f589d96c9efc8bea2/href">https://medium.com/media/3becb2a1c4be3b3f589d96c9efc8bea2/href</a></iframe><h3>3. Wavelet hash</h3><p>Discrete Wavelet Transformation (DWT) is another form of frequency representation. The popular DCT and Fourier transformations use a set of sin\cos functions as a basis: sin(x), sin(2x), sin(3x), etc. In contrast, DWT uses one single function as a basis but in different forms: scaled and shifted. The basis function can be changed and this is why we can have Haar wavelet, Daubechie-4 wavelet etc. This scaling effect gives us a great “time-frequency representation” when the low frequency part looks similar to the original signal.</p><p>There is a great Python library for wavelets — <a href="http://www.pybytes.com/pywavelets/"><strong>pywt</strong></a>. I used this library to implement whash() method for the imagehash library. By default whash() computes 8x8 hash using Haar transformation. In addition, the method removes the lowest Haar frequency LL(max). The lowest frequency consists from only one data point/pixel and this point represent the contrast of the image and isn’t so useful for hashing.</p><p>wHash Python code is below:</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/bfa4b84f1e254f7ad970a2f2f8f992b9/href">https://medium.com/media/bfa4b84f1e254f7ad970a2f2f8f992b9/href</a></iframe><h3>4. Validation</h3><p>To make results cleaner, let’s compare the original image with another one. The expected hash difference should be 50%. Here is another standard image for comparison — barbara.jpg. Let’s calculate the hash difference between Lenna and Barbara using all hashes. The code a listed below:</p><figure><img alt="barbara" src="https://cdn-images-1.medium.com/max/512/0*7FbVwbM2zJsWbbjL.jpg" /><figcaption>Barbara.jpg</figcaption></figure><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/4b79f5363591801a18f601d5ee8cf60a/href">https://medium.com/media/4b79f5363591801a18f601d5ee8cf60a/href</a></iframe><p>Table with all results:</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/5eef097818d4f6a4dc7f68d97c6dcfe0/href">https://medium.com/media/5eef097818d4f6a4dc7f68d97c6dcfe0/href</a></iframe><p>In the new whash() method, we can play with different parameters. The most important thing in whash() is the hash size. It is 8 by default but you can change it by any power of 2 number less than input image size (minimum by an image dimensions). Also, you can avoid removing the lowest frequency by setting parameter <strong><em>remove_max_haar_ll</em></strong> to <strong><em>False</em></strong>. In addition, you can change the initial scaling of the image rom 64 (which is 8x8) to any power of 2 less than the image size.</p><p>The most interesting parameter is <strong><em>mode</em></strong> — wavelet families. By default the library use haar wavelet but the value can be change to any value from pywt library like ‘db4’. See <a href="http://www.pybytes.com/pywavelets/regression/wavelet.html">the library page</a>.</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/a7caca5379cd5366a6b08a66ac96aa68/href">https://medium.com/media/a7caca5379cd5366a6b08a66ac96aa68/href</a></iframe><h3>5. Known issues</h3><p>I had an issue when processed big number of small images. It looks like pywt has a memory leak. <a href="https://github.com/JohannesBuchner/imagehash/issues/25">An issue was created</a> in github. I’ll try to contact pywt creators regarding the issue.</p><p>To mitigate the issue I just split images by directories with ~50K images each and re-run processing for each directory separately.</p><h3>Conclusion</h3><p>It is hard to say which of the methods provides better results. It depends on your application and you should focus on your application or machine learning model metrics like precision\recall or AUC. For my Kaggle score the whash() brought +0.04% to AUC metric, in addition to my current ~92.9% result.</p><p>It doesn’t look like a huge difference. However, we should remember that in the modeling code, we achieved this by a one-letter change from <strong>p</strong>hash() to <strong>w</strong>hash(). It is nice to have more advanced analytical tools and I hope this method will be a good addition to your analytical toolbox. In addition, I believe that wHash has a great potential for tuning by the method parameters.</p><p>Please share your experience in using the library. Any comments, suggestions, code improvements and fixes are highly appreciated.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=3504fdd282b5" width="1" height="1" alt=""><hr><p><a href="https://fullstackml.com/wavelet-image-hash-in-python-3504fdd282b5">Wavelet image hash in Python</a> was originally published in <a href="https://fullstackml.com">FullStackML</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[How to check hypotheses with bootstrap and Apache Spark?]]></title>
            <link>https://fullstackml.com/how-to-check-hypotheses-with-bootstrap-and-apache-spark-cd750775286a?source=rss----46e065078cc1---4</link>
            <guid isPermaLink="false">https://medium.com/p/cd750775286a</guid>
            <category><![CDATA[apache-spark]]></category>
            <category><![CDATA[experimental-design]]></category>
            <category><![CDATA[analytics]]></category>
            <category><![CDATA[design-of-experiments]]></category>
            <dc:creator><![CDATA[Dmitry Petrov]]></dc:creator>
            <pubDate>Tue, 19 Jan 2016 18:19:32 GMT</pubDate>
            <atom:updated>2017-03-06T05:00:01.037Z</atom:updated>
            <content:encoded><![CDATA[<p>There is a featureI really like in Apache Spark. <strong>Spark can process data out of memory in my local machine even without a cluster.</strong> Good news for those who process data sets bigger than the memory size that currently have. From time to time, I have this issue when I work with hypothesis testing.</p><p><strong>For hypothesis testing I usually use statistical bootstrapping techniques. This method does not require any statistical knowledge and is very easy to understand.</strong> Also, this method is very simple to implement. There are no normal distributions and student distributions from your statistical courses, only some basic coding skills. Good news for those who doesn’t like statistics. Spark and bootstrapping is a very powerful combination which can help you check hypotheses in a large scale.</p><h3>1. Bootstrap methods</h3><p>The most common application with bootstrapping is calculating confidence intervals and you can use these confidence intervals as a part of the hypotheses checking process. There is a very simple idea behind bootstrapping — sample your data set size N for hundreds or even thousands times with the replacement (this is important) and calculate the estimated metrics for each of the hundreds\thousands subset. This process gives you a histogram which is an <strong>actual distribution for your data</strong>. Then, you can use this actual distribution for hypothesis testing.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/328/1*iji5ktU9zy4TvdXM6DR4Dw.jpeg" /></figure><p>The beauty of this method is the actual distribution histogram. In a classical statistical approach, you need to approximate a distribution of your data by normal distribution and calculate z-scores or student-scores based on theoretical distributions. With the actual distribution from the first step it is easy to calculate 2.5% percentile and 97.5% percentiles and this would be your actual confidence interval. That’s it! <strong>Confident interval with almost no math.</strong></p><h3>2. Choosing the right hypothesis</h3><p>Choosing right hypotheses is only the tricky part in this analytical process. This is a question you ask the data and you cannot automate that. Hypotheses testing is a part of the analytical process and isn’t usual for machine learning experts. <strong>In machine learning you ask an algorithm to build a model\structure which is sometimes called hypothesis and you are looking for the best hypotheses which correlates your data and labels.</strong></p><p><strong>In the analytics process, knowing the correlation is not enough</strong>, you should know the hypothesis from the get-go and the question is — if the hypothesis is correct and what is your level of confidence.</p><p>If you have a correct hypotheses it is easy to check the hypotheses based on the bootstrapping approach. For example let’s try to check the hypothesis in which we take an average for some feature in your dataset that is equal to 30.0. We should start with a null hypothesis H0 which we try to reject and an alternative hypothesis H1:</p><p>H0: mean(A) == 30.0</p><p>H1: meanA() != 30.0</p><p>If we fail to reject H0 we will take this hypothesis as ground truth. That’s what we need. If we don’t — then we should come up with a better hypothesis (mean(A) == 40).</p><h3>3. Checking hypotheses</h3><p>For the hypotheses checking we can simply calculate the confidence interval for dataset A by sampling and calculating 95% confidence interval. If the interval does not contain 30.0 then your hypotheses H0 was rejected.</p><p>Obviously, this confident interval starts with 2.5% and ends 97.5% which gives us 95% of the items between this interval. In the sorted array of our observations we should find 2.5% and 97.5% percentiles: p1 and p2. If p1 &lt;= 30.0 &lt;= p2, then we weren’t able to reject H0. So, we can suppose that H0 is the truth.</p><h3>4. Apache Spark code</h3><p>Implementation of bootstrapping in this particular case is straight forward.</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/f33045ce9b926f4c9946f47539a84af8/href">https://medium.com/media/f33045ce9b926f4c9946f47539a84af8/href</a></iframe><p>Because I did not find any good open datasets for the large scale hypotheses testing problem, let’s use skewdata.csv dataset from the book <a href="http://www.amazon.com/gp/product/1118941098">“Statistics: An Introduction Using R”</a>. You can find this dataset <a href="http://www.bio.ic.ac.uk/research/crawley/statistics/data/zipped.zip">in this archive</a>. It is not perfect but will work in a pinch.</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/527ccc001a336740b4034a6db759c625/href">https://medium.com/media/527ccc001a336740b4034a6db759c625/href</a></iframe><p><strong>We have to understand the difference between &quot;filed to reject H0&quot; and &quot;proof H0&quot;.</strong> A failing to reject a hypothesis gives you a pretty strong level of evidence that the hypothesis is correct and you can use this information in your decision making process but this is not an actual proof.</p><h3>5. Equal means code example</h3><p>Another type of hypotheses - check if the means of the two datasets are different. This leads us to the usual design of experiment questions - if you apply some change in your web system (user interface change for example) would your click rate change in a positive direction?</p><p>Let&#39;s create a hypothesis:</p><p><strong>H0: mean(A) == mean(B)</strong></p><p><strong>H1: mean(A) &gt; mean(B)</strong></p><p>It is not easy to find H1 for this hypothesis which we can prove. Let&#39;s change this hypothesis around a little bit:</p><p><strong>Ho&#39;: mean(A-B) == 0</strong></p><p><strong>H1&#39;: mean(A-B) &gt; 0</strong></p><p>Now we can try to reject H0&#39;.</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/6f598aa994ab7ad474b4f30eeabc9cab/href">https://medium.com/media/6f598aa994ab7ad474b4f30eeabc9cab/href</a></iframe><p>Now we can try to reject H0&#39;.</p><p>We should change 2.5% and 97.5% percentiles in the interval to 5% percentile in the left side only because of one-side (one-tailed) hypothesis testing. And an actual code as an example:</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/1e1337199076e2423a43b61f7780e848/href">https://medium.com/media/1e1337199076e2423a43b61f7780e848/href</a></iframe><h3>Conclusion</h3><p>Bootstrapping methods are very simple for understanding and implementation. They are intuitively simple and you don&#39;t need any deep knowledge of statistics. Apache Spark can help you implement these methods in a large scale.</p><p>As I mentioned previously it is not easy to find a good open large dataset for hypotheses testing. <strong>Please share with our community if you have one or come across one.</strong></p><p>My code is shared in <a href="https://www.dropbox.com/s/epxih5r152rwsl5/hypotheses.scala?dl=0">this Scala file</a>.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=cd750775286a" width="1" height="1" alt=""><hr><p><a href="https://fullstackml.com/how-to-check-hypotheses-with-bootstrap-and-apache-spark-cd750775286a">How to check hypotheses with bootstrap and Apache Spark?</a> was originally published in <a href="https://fullstackml.com">FullStackML</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[How to export data-frame from Apache Spark]]></title>
            <link>https://fullstackml.com/how-to-export-data-frame-from-apache-spark-3215274ee9d6?source=rss----46e065078cc1---4</link>
            <guid isPermaLink="false">https://medium.com/p/3215274ee9d6</guid>
            <category><![CDATA[apache-spark]]></category>
            <dc:creator><![CDATA[Dmitry Petrov]]></dc:creator>
            <pubDate>Mon, 21 Dec 2015 17:22:51 GMT</pubDate>
            <atom:updated>2017-03-06T05:08:17.219Z</atom:updated>
            <content:encoded><![CDATA[<p>Apache Spark is a great tool for working with a large amount of data like terabytes and petabytes in a cluster. It’s also very useful in local machine when gigabytes of data do not fit your memory. Normally we use Spark for preparing data and very basic analytic tasks. However, it is not advanced analytical features or even visualization. So, therefore, you have to reduce the amount of data to fit your computer memory capacity. It turns out that Apache Spark still lack the ability to export data in a simple format like CSV.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/400/1*BvVha_IZ8bB43oN3HJ1vgw.png" /><figcaption>The image was taken from <a href="http://exportgenius.blogspot.com/2016/08/india-export-data-customs-trade-data.html">this web page</a></figcaption></figure><h3>1. spark-csv library</h3><p>I was really surprised when I realized that Spark does not have a CSV exporting features from the box. It turns out that CSV library is an external project. This is must-have library for Spark and I find it funny that this appears to be a marketing plug for Databricks than an Apache Spark project.</p><p>Another surprise is this library does not create one single file. It creates several files based on the data frame partitioning. This means that for one single data-frame it creates several CSV files. I understand that this is good for optimization in a distributed environment but you don’t need this to extract data to R or Python scripts.</p><h3>2. Export from data-frame to CSV</h3><p>Let’s take a closer look to see how this library works and export CSV from data-frame.</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/12319a126523b3e49d099d017701f297/href">https://medium.com/media/12319a126523b3e49d099d017701f297/href</a></iframe><p>You should include this library in your Spark environment. From spark-shell just add — packages parameter:</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/ef0322bd5b1794b04ca716063861fcc4/href">https://medium.com/media/ef0322bd5b1794b04ca716063861fcc4/href</a></iframe><p>This code creates a directory myfile.csv with several CSV files and metadata files. If you need single CSV file, you have to implicitly create one single partition.</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/0d0bb87325b2753b2f402d2ad177ccee/href">https://medium.com/media/0d0bb87325b2753b2f402d2ad177ccee/href</a></iframe><p>We should export data the directory with Parquet data, more CSV to the correct place and remove the directory with all the files. Let’s automate this process:</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/35b8ef871aa94cb041732193bdff132f/href">https://medium.com/media/35b8ef871aa94cb041732193bdff132f/href</a></iframe><h4>Conclusion</h4><p>Apache Spark has many great aspects about it. At this time it cannot be the be-all answer. Usually, you have to pair Spark with your analytical tools like R or Python. However, improvement are constantly being made.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=3215274ee9d6" width="1" height="1" alt=""><hr><p><a href="https://fullstackml.com/how-to-export-data-frame-from-apache-spark-3215274ee9d6">How to export data-frame from Apache Spark</a> was originally published in <a href="https://fullstackml.com">FullStackML</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[How Much Memory Does A Data Scientist Need?]]></title>
            <link>https://fullstackml.com/how-much-memory-does-a-data-scientist-need-245a5e06d26d?source=rss----46e065078cc1---4</link>
            <guid isPermaLink="false">https://medium.com/p/245a5e06d26d</guid>
            <category><![CDATA[data-science]]></category>
            <category><![CDATA[in-memory]]></category>
            <category><![CDATA[analytics]]></category>
            <category><![CDATA[dataset]]></category>
            <category><![CDATA[infrastructure]]></category>
            <dc:creator><![CDATA[Dmitry Petrov]]></dc:creator>
            <pubDate>Mon, 07 Dec 2015 01:30:41 GMT</pubDate>
            <atom:updated>2017-03-06T05:27:05.053Z</atom:updated>
            <content:encoded><![CDATA[<p>Recently, I discovered an interesting blog post <a href="http://www.kdnuggets.com/2015/11/big-ram-big-data-size-datasets.html">Big RAM is eating big data — Size of datasets used for analytics</a> from Szilard Pafka. He says that “<strong>Big RAM is eating big data”</strong>. This phrase means that <strong>the growth of the memory size is much faster than the growth of the data sets</strong> that typical data scientist process. So, data scientist do not need as much data as the industry offers to them. Would you agree?</p><p>I do not agree. <strong>This result does not match my intuition. During my research I found an infrastructure bias in the data from this blogpost.</strong> I’ll show that the growth of the datasets is approximately the same as the memory growth in Amazon AWS rented machines and the Apple MacBook Pro laptops during the last 10 years.</p><h3>1. The blog post results</h3><p>According to “Big RAM is eating big data” blog post, the amount of memory in the Amazon AWS machines grow faster (50% per year) than the median datasets (20% per year) that people use for analytics. This result is based on KDNuggets survey about data sizes: <a href="http://www.kdnuggets.com/2015/08/largest-dataset-analyzed-more-gigabytes-petabytes.html">Poll Results: Where is Big Data? For most, Largest Dataset Analyzed is in laptop-size GB range</a>. You might find the most recent survey dataset <a href="https://github.com/szilard/dataset-sizes-kdnuggets/blob/master/data/dataset-sizes.csv">here in Github</a>.</p><p>Let’s take a look at the data and results more closely. The cumulative distribution of dataset sizes for a few select years is below:</p><figure><img alt="memory-size" src="https://cdn-images-1.medium.com/max/542/0*crhDh6FytdbOLlnU.jpeg" /></figure><p>I did not find a code from the post. So, I reproduced this research in R.</p><p>Below is my R code to create this graph from the dataset file.</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/81db936158075f1eb3efc02d217fd99c/href">https://medium.com/media/81db936158075f1eb3efc02d217fd99c/href</a></iframe><p>He mentioned that cumulative distribution function looks like linear in the 0.1-0.9 range (10 megabytes to 10 petabytes). By fitting the linear model for this range you might calculate the difference between these years.</p><p>My R code:</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/33b4b0934f0419b786937a659dc3ce23/href">https://medium.com/media/33b4b0934f0419b786937a659dc3ce23/href</a></iframe><p>From the model summary you might find the coefficient corresponding to the year variable which is equal to 0.08821 from my code (0.075 from the blogpost). This coefficient corresponds to log10(sizeGB). After the conversion from log10(GB) back to GB we will get 10^0.088 = 1.22 <strong>which give us 22%, or roughly 20%, growth in datasets.</strong></p><p>This 20% growth is what he compares to the AWS maximum memory instance size for the same year ranges:</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/1c459b1a0e70d9d91a9aebe2d5090b12/href">https://medium.com/media/1c459b1a0e70d9d91a9aebe2d5090b12/href</a></iframe><p>A change from 15GB in 2007 to 244GB in 2014 give us approximately<strong> 50% AWS memory growth</strong> which is much higher than the datasets growth and shows that data scientists do not need as much memory according to the blog post.</p><h3>2. An intuition about memory size</h3><p>So, we got the same result as in the blog post. However, I can’t say that I agree with this study result. <strong>My intuition tells me that more memory gives me more luxury in data processing and analytics</strong>. The ability to work with a large amount of data could simplify the analytics process. Due to the memory constraints, I feel this squeeze constantly.</p><p>Another aspect of the memory issue is the data preparation step. Today you need two set of skills — preparing “big data” (usually in-disk processing using Unix grep, awk, Python, Apache Spark in standalone mode etc..) and in-memory analytics (R, Python scipy). These two things are very different. Good data scientists will have both skills. However, if you have a large amount of memory you don’t need the first skill because you can prepare data in R or Python directly. This is especially important for text analytics where the amount of input data is huge by default. So, data processing becomes simplified with the large amount of memory in your machine.</p><p>I can’t imagine saying “Okay, I don’t need any more memory and more CPU cores”. Additianally, I can add “…and please stop parallelizing my nice sequential code!”.</p><h3>3. AWS memory growth</h3><p>It looks like the maximum amount of memory in a rented AWS instance is not the best proxy for estimating the amount of memory that data scientists use. There are three reasons for that:</p><ul><li>High performance computing (HPC) machines are a relatively new products which have been introduced in around 2010 and <strong>AWS HPC product creates a strong bias in the analytics memory v.s. the AWS memory correlation.</strong> The research jumps from regular machines in 2006 to 2010 to HPC ones from 2010 to 2015. Thereby, giving us an improvement in 50%. However, in my humble opinion, I believe that the improvement is less (perhaps closer to 20% as in the median data size).</li><li>The price of AWS HPC machines is much higher than many companies can afford ($2-$3K/month). A couple of months of using this kind of machine is more expensive than a brand new shiny MacBook Pro with 16Gb of RAM memory and 1Tb SSD disk.</li><li>It is not easy and efficient to use remote AWS machines. Not a big deal. However, I believe that many sata scientists would prefer to use their local machines, especially Apple fans :).</li></ul><p>In my mind, <strong>HPC machines create a bias in this research</strong> and we should estimate memory usage only by regular AWS machines not including HPC and memory optimized machines. Here is the AWS history for regular machines:</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/86bcc892032f4dc6d2ede6aaed46a0b0/href">https://medium.com/media/86bcc892032f4dc6d2ede6aaed46a0b0/href</a></iframe><p>From this table I’d exclude 2006 and m1.small because it was a limited beta and obviously m1.small is the m1.xlarge machine “sliced” by 8 parts. The blogger did the same - he started from 2007.</p><p>Side note: As luck would have it, my AWS experience started in that same 2007 year. For 2007, it was an amazing experience to rent a machine in one minute as apposite to days or even weeks in hosting companies previously. During this time frame, my experience was mostly in working with regular AWS machines. HPC machines were specialized and overpriced for my purposes.</p><p>So, let’s start the AWS regular machine history from 2007 with m1.xlarge then <strong>the AWS memory growth would be 35% annually</strong> during these years: 15GB*1.35^8year ~ 160GB.</p><p>Based on this result, it is closer to the growth of the datasets. As you can see the difference is 20% vs. 35%. Consequently, this cannot be agreed as strong evidence for the unimportance of RAM memory.</p><p>Let’s have more fun…</p><h3>4. Apple MacBook Pro memory growth</h3><p>I think that many people analyse data in their local machines and laptops. I think that most people are not ready to switch from their shiny laptops with a cozy local environment to a remote AWS machine for analytics. At least it is not easy for me and I’ll find a way to process a relatively large amount of data in my laptop (I suppose that a cluster is not needed).</p><p>Let’s try to use Apple MacBook Pro as a proxy for estimating memory growth. In the table (<a href="https://en.wikipedia.org/wiki/MacBook_Pro">data is based on wikipedia</a>) below is the MacBook Pro memory history:</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/a66971a4c1cedbbeb6a4d86abd05e554/href">https://medium.com/media/a66971a4c1cedbbeb6a4d86abd05e554/href</a></iframe><p><strong>Surprisingly, this MacBook Pro data gives us the same result as the AWS regular machine results - 35% growth</strong>: 1GB*1.36^9 ~ 16GB. It appears as if we removed (or at least dramatically reduced) the infrastructure bias.</p><h3>Conclusion</h3><p>This blog post shows that <strong>maximum memory in MacBook Pro laptops and regular AWS machines are unbiased proxies for estimating the amount of memory people and data scientists use</strong>.</p><p>Memory is huge. It gives us the ability to analyze data more efficiently. We are limited only by the growth of analytical methods and memory size. Given the opportunity, we can consume all the &quot;affordable&quot; memory and then some as data scientists are memory hogs, in my humble opinion (and biased as well :) ).</p><p>An update: Szilard Pafka pointed me to his code in <a href="https://github.com/szilard/dataset-sizes-kdnuggets">his Github</a>.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=245a5e06d26d" width="1" height="1" alt=""><hr><p><a href="https://fullstackml.com/how-much-memory-does-a-data-scientist-need-245a5e06d26d">How Much Memory Does A Data Scientist Need?</a> was originally published in <a href="https://fullstackml.com">FullStackML</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Where to find terabyte-size dataset for machine learning]]></title>
            <link>https://fullstackml.com/where-to-find-terabyte-size-dataset-for-machine-learning-c69ffefefd7?source=rss----46e065078cc1---4</link>
            <guid isPermaLink="false">https://medium.com/p/c69ffefefd7</guid>
            <category><![CDATA[big-data]]></category>
            <category><![CDATA[dataset]]></category>
            <category><![CDATA[apache-spark]]></category>
            <category><![CDATA[sql]]></category>
            <dc:creator><![CDATA[Dmitry Petrov]]></dc:creator>
            <pubDate>Tue, 24 Nov 2015 16:44:17 GMT</pubDate>
            <atom:updated>2017-03-06T05:32:09.768Z</atom:updated>
            <content:encoded><![CDATA[<p>In the previous blog posts we played with a large multi-gigabyte dataset. This 34 GB dataset is based on stackoverflow.com data. A couple days ago<strong> I found another great large dataset. This is a two terabyte snapshot from Reddit website.</strong> This dataset is perfect for text mining and NLP experimentation.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/425/1*xfny6pVUdsrt3quIWUEFXA.jpeg" /><figcaption>The image was taken from <a href="https://malziano.wordpress.com/2015/07/14/product-life-cycle-of-floppy-disc/">this web page</a>.</figcaption></figure><h3>1. Two terabytes data set</h3><p>The full dataset contains two terabytes of data in JSON format. Thank you for <a href="https://www.reddit.com/user/Stuck_In_the_Matrix">Stuck_In_the_Matrix</a> who created this dataset! The compressed version is 250 GB. You can find this dataset <a href="https://www.reddit.com/r/datasets/comments/3bxlg7/i_have_every_publicly_available_reddit_comment/">here in Reddit</a>. You should use torrent to download this compressed data.</p><p>Additionally, you might find a 32 gb subset of this data in Kaggle website in SQLite format <a href="https://www.kaggle.com/c/reddit-comments-may-2015">here</a>. Also, you can play with the data online through R or Python in the Kaggle competition.</p><h3>2. Easy to use 16 gigabytes subset</h3><p><strong>To simplify the process of working with this data, I created a subset of this data in plain text TSV format</strong> (tab separated values) <a href="https://www.dropbox.com/s/q857wo62184bofp/reddit-May2015_z.tsv.zip?dl=0"><strong>here in my dropbox folder</strong></a><strong> </strong>(updated, old Mac OS compatable only archive is <a href="https://www.dropbox.com/s/9ga5x7k6yacfcby/reddit-May2015.tsv.zip?dl=0">here</a>). The file contains the copy of the Kaggle subset. File size is 16GB uncompressed (yes, it is 2 times smaller than the Kaggel file because of plain text format without indexes) and 6.6GB in archive.</p><p>SQLite code for converting the Kaggle file to a plain text:</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/53a595f75913d7a3d428a77d4fdb8d11/href">https://medium.com/media/53a595f75913d7a3d428a77d4fdb8d11/href</a></iframe><p>Note that I replace all tabs (X’09&#39;) and newlines (X’0A’) to spaces for all text columns. Please let me know if you know how to combine two character replacement to one operations.</p><h3>3. Read data in Spark</h3><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/8dc37624662cbb2ee90e74a7ccff94eb/href">https://medium.com/media/8dc37624662cbb2ee90e74a7ccff94eb/href</a></iframe><h3>Conclusion</h3><p>Today is not easy to find great and interesting dataset for testing, training and research. So, let&#39;s collect some interesting datasets. <strong>Please share with the community your newly found information.</strong></p><h4>P.S.</h4><p>I looked into the licensing of this dataset. The dataset publisher <a href="https://www.reddit.com/user/Stuck_In_the_Matrix">Stuck_In_the_Matrix</a> just published the dataset and provided description and links to the torrent directly in the Reddit website. Please note that Reddit sponsors the Kaggle competition with this dataset. It appears that we may play with the dataset for non-business related purposes.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=c69ffefefd7" width="1" height="1" alt=""><hr><p><a href="https://fullstackml.com/where-to-find-terabyte-size-dataset-for-machine-learning-c69ffefefd7">Where to find terabyte-size dataset for machine learning</a> was originally published in <a href="https://fullstackml.com">FullStackML</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Beginners Guide: Apache Spark Python — Machine Learning Scenario With A Large Input Dataset]]></title>
            <link>https://fullstackml.com/beginners-guide-apache-spark-python-machine-learning-scenario-with-a-large-input-dataset-3fd1c319bbc?source=rss----46e065078cc1---4</link>
            <guid isPermaLink="false">https://medium.com/p/3fd1c319bbc</guid>
            <category><![CDATA[dataset]]></category>
            <category><![CDATA[machine-learning]]></category>
            <category><![CDATA[apache-spark]]></category>
            <category><![CDATA[python]]></category>
            <dc:creator><![CDATA[Dmitry Petrov]]></dc:creator>
            <pubDate>Tue, 10 Nov 2015 16:59:19 GMT</pubDate>
            <atom:updated>2017-03-06T05:38:09.007Z</atom:updated>
            <content:encoded><![CDATA[<p>In the previous post <a href="http://fullstackml.com/2015/10/29/beginners-guide-apache-spark-machine-learning-scenario-with-a-large-input-dataset/">“Beginners Guide: Apache Spark Machine Learning Scenario With A Large Input Dataset”</a> we discussed the process of creating predictive model with 34 gigabytes of input data using Apache Spark. I received a request for the Python code as a solution instead of Scala. This is exactly what I will do in this post.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/680/1*BlizS0SYUWuhAU5v5kkLiA.jpeg" /><figcaption>This Python image was taken from <a href="https://realpython.com/learn/python-first-steps/">this web page</a>.</figcaption></figure><h3>1. Python and Scala difference</h3><p>Python solution looks similar to the last Scala solution because when you look “under the hood” you have the same Spark library and engine. Because of this fact, I don’t anticipate any significant performance change. As there aren’t many difference between Python and Scala, I will highlight only the major ones and you can refer back to the last post for the code in it’s entirety.</p><h4>2. Sources</h4><p>The complete source code of this program could be found <a href="https://www.dropbox.com/s/zg50yhju9g1rzxe/beginner_spark_ml.py?dl=0">here</a>. Scala version from the previous post is <a href="https://www.dropbox.com/s/4ljc2jtew6fbgn2/beginner_spark_ml.scala?dl=0">here</a>. Small 128MB testing dataset is <a href="https://www.dropbox.com/s/n2skgloqoadpa30/Posts.small.xml?dl=0">here</a>.</p><p>Entire 34GB dataset is available here at <a href="https://archive.org/details/stackexchange,">https://archive.org/details/stackexchange,</a> look at file Posts.xml in stackoverflow.com folder. Copy of 34GB Posts.xml file is <a href="https://www.dropbox.com/s/ph0wi589mzlqzbe/Posts.xml.zip?dl=0">here </a>(8GB compressed). This data is licensed under the Creative Commons license (<a href="http://creativecommons.org/licenses/by-sa/2.5/">cc-by-sa</a>).</p><h3>3. Python code</h3><p>In the Python version of code (<a href="https://www.dropbox.com/s/zg50yhju9g1rzxe/beginner_spark_ml.py?dl=0">source file</a>) I create a correct Label column directly without intermediate sqlfunc\myudf function. Otherwise you should upload code of this function through intermediate python file to a Spark environment (sc.addPyFile() method). For the same reason I do not use xml libraries.</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/11ec9c23ebc27f466548f1237cc925a4/href">https://medium.com/media/11ec9c23ebc27f466548f1237cc925a4/href</a></iframe><p>One of the issues of Python version of code - we won&#39;t decode xml meta symbols like <strong>&lt;</strong>. Let&#39;s keep these symbols for now.</p><p>Python code needs couple more temporary variables in the data preparation step (negTrainTmp1 and posTrainTmp1).</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/514d72ab20d512d0121a4f702d3a9464/href">https://medium.com/media/514d72ab20d512d0121a4f702d3a9464/href</a></iframe><p>Small changes in the model validation step:</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/b54d68e4fda968371525d91f7f1e7a9a/href">https://medium.com/media/b54d68e4fda968371525d91f7f1e7a9a/href</a></iframe><p>That&#39;s all the changes that we need.</p><h3>Conclusion</h3><p>Thank you for all the great feedback to the previous post <a href="http://fullstackml.com/2015/10/29/beginners-guide-apache-spark-machine-learning-scenario-with-a-large-input-dataset/">&quot;Beginners Guide: Apache Spark Machine Learning Scenario With A Large Input Dataset&quot;</a>. The reception helped me to see where the needs and demands are in this field. I welcome all suggestions so keep the feedback coming and I&#39;ll try to address as many as I humanly can.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=3fd1c319bbc" width="1" height="1" alt=""><hr><p><a href="https://fullstackml.com/beginners-guide-apache-spark-python-machine-learning-scenario-with-a-large-input-dataset-3fd1c319bbc">Beginners Guide: Apache Spark Python — Machine Learning Scenario With A Large Input Dataset</a> was originally published in <a href="https://fullstackml.com">FullStackML</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Beginners Guide: Apache Spark Machine Learning Scenario With A Large Input Dataset]]></title>
            <link>https://fullstackml.com/beginners-guide-apache-spark-machine-learning-scenario-with-a-large-input-dataset-1f0c6bc53f8f?source=rss----46e065078cc1---4</link>
            <guid isPermaLink="false">https://medium.com/p/1f0c6bc53f8f</guid>
            <category><![CDATA[dataset]]></category>
            <category><![CDATA[machine-learning]]></category>
            <category><![CDATA[apache-spark]]></category>
            <dc:creator><![CDATA[Dmitry Petrov]]></dc:creator>
            <pubDate>Thu, 29 Oct 2015 16:43:00 GMT</pubDate>
            <atom:updated>2017-03-06T05:51:39.074Z</atom:updated>
            <content:encoded><![CDATA[<p>What if you want to create a machine learning model but realized that your input dataset doesn’t fit your computer memory? Usual you would use distributed computing tools like Hadoop and Apache Spark for that computation in a cluster with many machines. However, Apache Spark is able to process your data in local machine standalone mode and even build models when the input data set is larger than the amount of memory your computer has. In this blog post, I’ll show you an <strong>end-to-end scenario with Apache Spark where we will be creating a binary classification model using a 34.6 gigabytes of input dataset</strong>. Run this scenario in your laptop (yes, yours with its 4–8 gigabytes of memory and 50+ gigabytes of disk space) to test this.</p><figure><img alt="Choose dataset" src="https://cdn-images-1.medium.com/max/660/0*6NimKLpTiK6_8-9p." /><figcaption>Choose dataset</figcaption></figure><h3>1. Input data and expected results</h3><p>In the previous post we discussed “<a href="http://fullstackml.com/2015/10/17/how-to-find-simple-and-interesting-multi-gigabytes-data-set/">How To Find Simple And Interesting Multi-Gigabytes Data Set</a>”. The Posts.xml file from this dataset will be used in the current post. The file size is 34.6 gigabytes. This xml file contains the stackoverflow.com posts data as xml attributes:</p><ol><li>Title — post title</li><li>Body — post text</li><li>Tags — list of tags for post</li><li>10+ more xml-attributes that we won’t use.</li></ol><p><strong>The full dataset with stackoverflow.com Posts.xml file is available here at </strong><a href="https://archive.org/details/stackexchange"><strong>https://archive.org/details/stackexchange</strong></a><strong>.</strong> Additionally I created a smaller version of this file with only 10 items\posts in it. This file contains a small size of original dataset. This data is licensed under the Creative Commons license (<a href="http://creativecommons.org/licenses/by-sa/2.5/">cc-by-sa</a>).</p><p>As you might expect, this small file is not the best choice for model training. This file is only good for experimenting with your data preparation code. However, <strong>the end-to-end Spark scenario from this article works with this small file as well. Please download the file from</strong><a href="https://www.dropbox.com/s/n2skgloqoadpa30/Posts.small.xml?dl=0"><strong> here</strong></a>.</p><p>Our goal is to create a predictive model which predicts post Tags based on Body and Title. To simplify the task and reduce the amount of code, we are going to concatenate Title and Body and use that as a single text column.</p><p>It might be easy to imagine how this model should work in the stackoverflow.com web site — the user types a question and the web size automatically gives tags suggestion.</p><p>Assume that we need as many correct tags as possible and that the user would remove the unnecessary tags. Because of this assumption we are choosing recall as a high priority target for our model.</p><h3>2. Binary and multi-label classification</h3><p>The problem of stackoverflow tag prediction is a multi-label classification one because the model should predict many classes, which are not exclusive. The same text might be classified as “Java” and “Multithreading”. Note that multi-label classification is a generalization of different problems — multi-class classification problem which predict only one class from a set of classes.</p><p>To simplify our the first Apache Spark problem and reduce the amount of code, let’s simplify our problem. <strong>Instead of training a multi-label classifier, let’s train a simple binary classifier for a given tag.</strong> For instance, for the tag “Java” one classifier will be created which can predict a post that is about the Java language.</p><p>By using this simple approach, many classifiers might be created for almost all frequent labels (Java, C++, Python, multi-threading etc…). This approach is simple and good for studying. However, it is not perfect in practice because by splitting predictive models by separate classifiers, you are ignoring the correlations between classes. Another reason — training many classifiers might be computationally expensive.</p><h3>3. Setup and Run Apache Spark in a standalone mode</h3><p>If you don’t have Apache Spark in your machine you can simply download it from the Spark web page <a href="http://spark.apache.org/">http://spark.apache.org/</a>. Please use version 1.5.1. Direct link to a pre-built version — <a href="http://d3kbcqa49mib13.cloudfront.net/spark-1.5.1-bin-hadoop2.6.tgz">http://d3kbcqa49mib13.cloudfront.net/spark-1.5.1-bin-hadoop2.6.tgz</a></p><p>You are ready to run Spark in Standalone mode if Java is installed in your computer. If not — install Java.</p><p>For Unix systems and Macs, uncompress the file and copy to any directory. This is a Spark directory now.</p><p>Run spark master, slave and shell:</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/daad816521d1fe3d753dc968c0819bf5/href">https://medium.com/media/daad816521d1fe3d753dc968c0819bf5/href</a></iframe><p>Spark shell can run your Scala command in interactive mode.</p><p>Windows users can find the instruction here: <a href="http://nishutayaltech.blogspot.in/2015/04/how-to-run-apache-spark-on-windows7-in.html">http://nishutayaltech.blogspot.in/2015/04/how-to-run-apache-spark-on-windows7-in.html</a></p><p>If you are working in cluster mode in a Hadoop environment, I’m assuming you already know how to run the Spark shell.</p><h3>4. Importing libraries</h3><p>For this end-to-end scenario we are going to use Scala, the primary language for Apache Spark.</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/01c10a5581fc0255604c59c16ee4bd79/href">https://medium.com/media/01c10a5581fc0255604c59c16ee4bd79/href</a></iframe><h3>5. Parsing XML</h3><p>We need to extract Body, Text and Tags from the input xml file and create a single data-frame with these columns. First, let&#39;s remove the xml header and footer. I assume that the input file is located in the same directory where you run the spark shell command.</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/effbb5a79c939586d5f6acee867962e1/href">https://medium.com/media/effbb5a79c939586d5f6acee867962e1/href</a></iframe><p>Spark has good functions for parsing json and csv formats. For Xml we need to write several additional lines of code to create a data frame by specifying the schema programmatically.</p><p>Note, Scala language automatically converts all xml codes like “&lt;a&gt;” to actual tags “&lt;a&gt;”. Also we are going to concatenate title and body and remove all unnecessary tags and new line characters from the body and all space duplications.</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/0dc62aa5807f48c24444c1e30129080b/href">https://medium.com/media/0dc62aa5807f48c24444c1e30129080b/href</a></iframe><p>To create a data-frame, schema should be applied to RDD.</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/c89be330e3298b336c2d9d5b494f4d79/href">https://medium.com/media/c89be330e3298b336c2d9d5b494f4d79/href</a></iframe><h3>6. Preparing training and testing datasets</h3><p>The next step – creating binary labels for a binary classifier. For this code examples, we are using “java” as a label that we would like to predict by a binary classifier. All rows with the “java” label should be marked as a “1” and rows with no “java” as a “0”. Let&#39;s identify our target tag &quot;java&quot; and create binary labels based on this tag. Then dataset can be split into negative and positive subsets by using the new label.</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/9e876be8a92e69b7e5ced8528d8bb373/href">https://medium.com/media/9e876be8a92e69b7e5ced8528d8bb373/href</a></iframe><p>We are going to use 90% of our data for the model training and 10% as a testing dataset. Let&#39;s create a training dataset by sampling the positive and negative datasets separately.</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/3f26ebd754654a3cbaef0031eae16a30/href">https://medium.com/media/3f26ebd754654a3cbaef0031eae16a30/href</a></iframe><p>The testing dataset should include all rows which are not included in the training datasets. And again – positive and negative examples separately.</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/2d8bf5160d4d46bcadac41ad267907f7/href">https://medium.com/media/2d8bf5160d4d46bcadac41ad267907f7/href</a></iframe><h3>7. Training a model</h3><p>Let&#39;s identify training parameters:</p><ol><li>Number of features</li><li>Regression parameters</li><li>Number of epoch for gradient decent</li></ol><p>Spark API creates a model based on columns from the data-frame and the training parameters:</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/cecc64cd54e69139de87372baa1d8543/href">https://medium.com/media/cecc64cd54e69139de87372baa1d8543/href</a></iframe><h3>8. Testing a model</h3><p>This is our final code for the binary “Java” classifier which returns a prediction (0.0 or 1.0):</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/2cd20c957947dc3146b6de4449d81a69/href">https://medium.com/media/2cd20c957947dc3146b6de4449d81a69/href</a></iframe><p>Let&#39;s evaluate the quality of the model based on training dataset.</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/b691e6d4fae2b54f85b4cfd495558db7/href">https://medium.com/media/b691e6d4fae2b54f85b4cfd495558db7/href</a></iframe><p>If you use the small dataset then the quality of your model is probably not the best. Area under the ROC value will be very low (close to 50%) which indicates a poor quality of the model. With an entire Posts.xml dataset, the quality is no so bad. Area under the ROC is 0.64. Probably you can improve this result by playing with different transformations such as TF-IDF and normalization. Not in this blog post.</p><h3>Conclusion</h3><p>Apache Spark could be a great option for data processing and for machine learning scenarios if your dataset is larger than your computer memory can hold. It might not be easy to use Spark in a cluster mode within the Hadoop Yarn environment. However, in a local (or standalone) mode, Spark is as simple as any other analytical tool.</p><p>Please let me know if you encountered any problem or had future questions. I would really like to head your feedback.</p><p>The complete source code of this program could be found <a href="https://www.dropbox.com/s/4ljc2jtew6fbgn2/beginner_spark_ml.scala?dl=0">here</a>.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=1f0c6bc53f8f" width="1" height="1" alt=""><hr><p><a href="https://fullstackml.com/beginners-guide-apache-spark-machine-learning-scenario-with-a-large-input-dataset-1f0c6bc53f8f">Beginners Guide: Apache Spark Machine Learning Scenario With A Large Input Dataset</a> was originally published in <a href="https://fullstackml.com">FullStackML</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[How To Find Simple And Interesting Multi-Gigabytes Data Set]]></title>
            <link>https://fullstackml.com/how-to-find-simple-and-interesting-multi-gigabytes-data-set-f7d9b42f525?source=rss----46e065078cc1---4</link>
            <guid isPermaLink="false">https://medium.com/p/f7d9b42f525</guid>
            <category><![CDATA[dataset]]></category>
            <category><![CDATA[big-data]]></category>
            <dc:creator><![CDATA[Dmitry Petrov]]></dc:creator>
            <pubDate>Sun, 18 Oct 2015 01:47:00 GMT</pubDate>
            <atom:updated>2017-03-06T05:55:25.922Z</atom:updated>
            <content:encoded><![CDATA[<p>Many folks are very exited about big data. They like play, explore, work and study this frontier. Most likely these folks either work with or would like to play with large amount of data (hundreds of gigabytes or even terabytes). But here’s the thing, it’s not easy to find a multi-gigabytes dataset. Usually, these kinds of datasets are needed for experimentating with new data processing framework such as Apache Spark or data streaming tools like Apache Kafka. In this blog post I will describe and provide a link to simple and a powerful multi-gigabytes stackoverflow data set.</p><h3>1. Datasets for machine learning</h3><p>Lots of sources exist for machine learning problems. Kaggle is the best source for these problems and they offer lots of datasets presented with examples of code. <strong>Most of these data sets are clean and ready to use in your machine learning experiments.</strong></p><p>In a real data scientist’s life most likely you do not have the luxury of clean data and the size of the input data creates an additional big problem. University courses as well as online courses offer a limited viewpoint on data science and machine learning due to the fact they teach student to apply statistical and machine learning methods to a small amount of clean data. <strong>In reality, a data scientist spends the majority part of time by getting data and cleaning up that data.</strong> According to Hal Varian (Google’s chief economist) <a href="http://www.nytimes.com/2009/08/06/technology/06stats.html?_r=0">“the sexiest job of the 21st century”</a> belongs to Statisticians (and I assume to Data Scientists). However, they perform “clean up” work most of the time.</p><p>In order to experiment with new data processing or data streaming tools, you need a large (larger than your computer can hold in memory) and an uncleaned datasets.</p><p>Large and uncleanrf datasets will allow you to get actual data processing or learn analytical skills. It turns out that this is not that easy to find.</p><h3>2. Datasets for processing</h3><p>Kdnuggets and Quora have pretty good lists of open repositories:</p><ol><li><a href="http://www.kdnuggets.com/datasets/index.html">http://www.kdnuggets.com/datasets/index.html</a></li><li><a href="https://www.quora.com/What-kinds-of-large-datasets-open-to-the-public-do-you-analyze-the-mostly">https://www.quora.com/What-kinds-of-large-datasets-open-to-the-public-do-you-analyze-the-mostly</a></li></ol><p>Most of these datasets from these lists are <strong>very small in size</strong> and for the most part, <strong>you need specific knowledge from a dataset specific business domain such as physics or healthcare.</strong> However, for learning and experimentation purposes, it would be nice to have a dataset from a well known business domain that all people are familiar with.</p><p><strong>Social network data is the best because people understand these datasets and they have intuition about the data</strong> which is important in the analytic process. You might use a social network API to extract your data sets. Unfortunately, your data set is not the best for sharing your analytical results with other people. It would be great to find a common social network dataset with an open license. And I’ve found one!</p><h3>3. Stackoverflow open dataset</h3><p>Stackoverflow data set is the only social open dataset that I was able to find. Stackoverflow.com is a question and answers web site about programming. This web site is especially useful when you have to write a code in a language you are not familiar with. This well known approach is called — stackoverflow driven development or SDD. I believe all people from the high-tech industry are familiar with stackoverflow and many of them have an account for this web site.</p><p>Stack Exchange Company (owner of stackoverflow.com) publishes stackexchange dataset under an open creative common license. You might find the freshest dataset on this page:</p><p><a href="https://archive.org/details/stackexchange">Stack Exchange Data Dump : Stack Exchange, Inc. : Free Download, Borrow, and Streaming : Internet Archive</a></p><p>The dataset contains all stackexchange data including stackoverflow and the overall <strong>size of the archive is 27 gigabytes</strong>. <strong>The size of the uncompressed data is more than 1 terabyte.</strong></p><h3>4. How to download and extract the dataset?</h3><p><strong>However, this dataset is not easy to get.</strong> First, you need to upload the archive of the entire dataset. Please note that <strong>the downloading speed is very slow.</strong> They recommend using a bittorrent client to download the archive but often it has some issues. Without the bittorent, I made 3 attempts and spent 2 days to download this archive. Next, you need to<strong> unzip the large archive</strong>. Finally, you need to unzip the subset of data that you need (like stackoverflow-Posts or travel.stackexchange) using the<strong> 7z compressor</strong>. If you don’t have the 7z compressor, you need to find and install it to your machine.</p><p>After you download the archive from <a href="https://archive.org/details/stackexchange">https://archive.org/details/stackexchange</a> extract all stackoverflow related archives and uncompress each of them (all archives which starts with stackovervlow.com):</p><ul><li>stackovervlow.com-Posts.7z</li><li>stackovervlow.com-PostsHistory.7z</li><li>stackovervlow.com-Comments.7z</li><li>stackovervlow.com-Badges.7z</li><li>stackovervlow.com-PostLinks.7z</li><li>stackovervlow.com-Tags.7z</li><li>stackovervlow.com-Users.7z</li><li>stackovervlow.com-Votes.7z</li></ul><p>As a result you will see a set of xml files with the same names.</p><h3>5. How to use the dataset?</h3><p>Let’s experiment with the dataset. <strong>The most interesting file is Posts.xml. This file contains 34Gb of uncompressed data,</strong> approximately 70% is Body text which is a text of questions from the web site. This amount of data, most likely, does not fit your memory. We might use an in-disk data manipulation or machine learning technology. This is a good chance to use Apache Spark and MLLib or your custom solution.</p><p>Let’s take a look how this stackoverflow question will look like in the file.</p><figure><img alt="Stackowerflow example" src="https://cdn-images-1.medium.com/max/660/0*ZYMF7QS97u5Wuydt." /><figcaption>Stackowerflow example</figcaption></figure><p>In the file this post is presented by one single row. Note that because the text is HTML — the opening and closing p tags (&lt;p&gt; and &lt;/p&gt;) are written as &amp;lt;p&amp;gt; and &amp;lt;/p&amp;gt; respectively.</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/5afed51e539799676cf964d49a2f400a/href">https://medium.com/media/5afed51e539799676cf964d49a2f400a/href</a></iframe><p>I’ll provide Apache Spark code examples with this data set in the next blog post. My scenario will include two parts: preparing data or data manipulation and machine learning part. Both of these part I’ll use multi-gigabytes dataset as an input.</p><h3>Conclusion</h3><p>Stackoverflow dataset (<a href="https://archive.org/details/stackexchange">https://archive.org/details/stackexchange</a>) is probably the simplest and most interesting open multi-gigabytes dataset you can find which fits machine learning, data processing scenarios and data streaming. <strong>Please share if you have any information about other simple open big dataset resources.</strong> This should help the community a lot.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=f7d9b42f525" width="1" height="1" alt=""><hr><p><a href="https://fullstackml.com/how-to-find-simple-and-interesting-multi-gigabytes-data-set-f7d9b42f525">How To Find Simple And Interesting Multi-Gigabytes Data Set</a> was originally published in <a href="https://fullstackml.com">FullStackML</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Can Apache Spark process 100 terabytes of data in interactive mode?]]></title>
            <link>https://fullstackml.com/can-apache-spark-process-100-terabytes-of-data-in-interactive-mode-3f856b583e90?source=rss----46e065078cc1---4</link>
            <guid isPermaLink="false">https://medium.com/p/3f856b583e90</guid>
            <category><![CDATA[apache-spark]]></category>
            <category><![CDATA[analytics]]></category>
            <category><![CDATA[big-data]]></category>
            <category><![CDATA[data-science]]></category>
            <dc:creator><![CDATA[Dmitry Petrov]]></dc:creator>
            <pubDate>Mon, 12 Oct 2015 15:43:00 GMT</pubDate>
            <atom:updated>2017-03-06T05:56:10.083Z</atom:updated>
            <content:encoded><![CDATA[<p>Apache Spark innovates a lot of in the in-memory data processing area. With this framework, you are able to upload data to a cluster memory and work with this data extremely fast in the interactive mode (interactive mode is another important Spark feature btw…). One year back (10/10/2014) <a href="https://databricks.com/blog/2014/10/10/spark-petabyte-sort.html">Databricks announced</a> that Apache Spark was able to sort 100 terabytes of data in 23 minutes.</p><p>Here is an interesting question — what is the limit for the amount of data you can process interactively in a cluster? What if you had <strong>100 terabytes of memory in your cluster?</strong> <strong>Memory is so quick you would think!</strong> Intuition tells you can use this memory to interactively process 100 terabytes of input data or at least half of this size. However, <strong>as usual in a distributed systems world, our intuition is wrong!</strong></p><figure><img alt="Interactive Apache Spark" src="https://cdn-images-1.medium.com/max/660/0*Chky3nUkk-CGo27E." /><figcaption>Interactive Apache Spark</figcaption></figure><h3>1. Response time</h3><p>What would be a response time for a simple data processing scenario and for a more complicated one? Are we still in interactive mode? We’d like to think so but unfortunately, we are not. I saw in a practice scenario <strong>that response time for a simple scenario with a simple “where sum(), count() ” statements with 8 terabytes of data was 20–40 seconds</strong>. For a more complicated one and <strong>for more realistic scenarios (couple of “group bys” + couple of “joins”) response time was 3–5 minutes</strong>. This is definitely not what I call interactive mode!</p><p>In my daily life, I do analytics where the response time is critical. For me, I give it up to 3 or 10 seconds, okay perhaps even up to 15 seconds and still consider this interactive mode. Beyond this I would consider it actually batch mode. Several seconds or 3–5 minutes instead of 15–60 minutes might look like a incredible result compared to MapReduce-like on-disk processing. However, this is not interactive.</p><h3>2. Where the interactivity end?</h3><p>The maximum amount of memory I was able to process in the interactive mode with only a few seconds of delay<strong> was limited by 1 terabyte</strong>. With this, the efficiency was still good. However, beyond 1 Tb, I noticed that the response time was extremely delayed</p><p>My guess is that in order to improve efficiency (5–10 terrabytes with only several seconds delay) we would need to update our hardware (I’d like to try a cluster with the most powerful EC2 machines i2.8xlarge with 250 gigabytes of RAM memory) and tune software settings (Apache Spark driver settings, in-memory columnar format, and probably YARN settings)</p><p>Even with software and hardware upgrade, it is clear to me that <strong>the interactive mode limit doesn’t even come close to the 100 terabytes</strong>.</p><h3>3. Read data to memory first</h3><p>As you recall from previously, remember that it takes many seconds or even several minutes for each iteration of data processing. However, this is not the complete story. If you work in Ad Hoc analytics or create machine learning models your initial data set will most likely be stored in a cluster HDFS storage. This means that <strong>before the in-memory iterations you will be reading data from disks which takes much longer.</strong> The performance as usually depends on the hardware you have and the software settings. Most likely it will take between 15–30 minutes for an 5–8 terabytes data set. <strong>Even for 1 terabyte it might take 5 minutes or so.</strong></p><h3>Conclusion</h3><p>Before jumping into the Apache Spark in-memory processing it is worth to make a plan for your analytical scenarios and estimate response time especially if your data size is more than 1 terabyte.</p><p>Please offer feedback regarding your experience dealing with the maximum amount of memory you were able to work with in interactive mode.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=3f856b583e90" width="1" height="1" alt=""><hr><p><a href="https://fullstackml.com/can-apache-spark-process-100-terabytes-of-data-in-interactive-mode-3f856b583e90">Can Apache Spark process 100 terabytes of data in interactive mode?</a> was originally published in <a href="https://fullstackml.com">FullStackML</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[What No One Tells You About Real-Time Machine Learning]]></title>
            <link>https://fullstackml.com/what-no-one-tells-you-about-real-time-machine-learning-452ee81ac8de?source=rss----46e065078cc1---4</link>
            <guid isPermaLink="false">https://medium.com/p/452ee81ac8de</guid>
            <category><![CDATA[cybersecurity]]></category>
            <category><![CDATA[machine-learning]]></category>
            <category><![CDATA[big-data]]></category>
            <category><![CDATA[fraud-detection]]></category>
            <category><![CDATA[apache-spark]]></category>
            <dc:creator><![CDATA[Dmitry Petrov]]></dc:creator>
            <pubDate>Wed, 07 Oct 2015 22:31:00 GMT</pubDate>
            <atom:updated>2017-03-06T05:56:50.659Z</atom:updated>
            <content:encoded><![CDATA[<p>During this year, I heard and read a lot about real-time machine learning. People usually provide this appealing business scenario when discussing credit card fraud detection systems. They say that they can continuously update credit card fraud detection model in real-time (See <a href="https://www.youtube.com/watch?v=SxAxAhn-BDU">“What is Apache Spark?”,</a> <a href="https://www.mapr.com/blog/game-changing-real-time-use-cases-apache-spark-on-hadoop#.VhBoNJNVK1E">“…real-time use cases…”</a> and <a href="http://www.slideshare.net/VinothKumarKannan/real-time-machine-learning">“Real time machine learning”</a>). It looks fantastic but <strong>not realistic</strong> to me. One important detail is missing in this scenario — <strong>continuous flow of transactional data is not needed for model retraining. Instead, you need continuous flow of labeled (or pre-marked as Fraud\Not-Fraud) transactional data.</strong></p><figure><img alt="Machine learning process" src="https://cdn-images-1.medium.com/max/660/0*DBRQKzwnTwz6Hj-L." /><figcaption>Machine learning process</figcaption></figure><p>Creating labeled data is probably the slowest and the most expensive step in most of the machine learning systems. <strong>Machine learning algorithms learn to detect the fraud transactions from the people which is much like labeled data.</strong> Let’s see how it works for fraud detection scenario.</p><h3>1. Creating model</h3><p>For training credit card models, you need a lot of examples of transactions and each transaction should be labeled as Fraud or Not-Fraud. This labels has to be as accurate as possible! This is our labeled data set. This data set is an input for supervised machine learning algorithms. Based on the labeled data, the algorithm trains the fraud detection model. The model is usually presented as a binary classifier with True (Fraud) or False (Not-Fraud) classes.</p><p><strong>The labeled data set plays a central role in this process.</strong> It is very easy to change the parameters of our algorithm such as the feature normalization method or loss function. We can change the algorithm itself from logistic regression to SVM or random forest for example. However, you cannot change the labeled data set. This information is predefined and your model should predict the labels that you already have.</p><h3>2. How long does data labeling process takes?</h3><p>How can we label the freshest transactions? If customers report fraud transactions or stolen credit cards, we can immediately mark the transaction as “Fraud”. What should we do with the rest of the transactions? We can assume that non reported transactions are “Not Fraud”. How long should we wait to be sure that they are not fraud? The last time when my friend lost a credit card, she said, “I won’t report the missing credit card yet. Tomorrow I’ll go to the shop that I had last visited and I’ll ask them if they found my credit card.” Fortunately, the store found and returned her credit card. I’m not an expert in the credit card fraud field (I’m only a good card user), but from my experience, <strong>we should wait at least a couple of days before marking transactions as “Not Fraud”</strong>.</p><p>In contrast, <strong>if somebody reported a Fraud transaction, we can immediately label this transaction as “Fraud”</strong>. A guy who reports fraud probably realizes the fraud transaction only after several hours or couple days after the loss but this is the best we can do.</p><p>In that way, our “freshest” labeled data set will be limited by a few “Fraud” transactions with several hours or days delay and lot of “Not Fraud” transactions within 2–3 days delay.</p><h3>3. Let’s try to speed up the labeling process</h3><p>Our goal is to obtained the “freshest” labeled data possible. In fact, we have “fresh Fraud” labels only. For “Not Fraud” labels, we have to wait a few days. It might look like a good idea to build a model using only “Fresh Fraud” labeled data. However, we should understand that <strong>this labeled data set is biased</strong> which might lead to a lot of issues with the models.</p><p>Let’s imagine a new big shopping center opened yesterday and we got one single fraud report regarding one single transaction from this store. Our labeled data set will contain only one transaction from this shop with a “Fraud” label. All other transactions from the shop are not labeled yet. The algorithm might decide that this shop is a strong fraud predictor and <strong>all transactions from this shop will be erroneously mis-classified as “Fraud” immediately “in real-time”.</strong> Advantages of real time give us real-time problems.</p><h3>Conclusion</h3><p>As we can see, the credit card fraud detection business scenario does not look like the best scenario for real-time supervised machine learning. Also, I was unable to imagine a good scenario from another business domains. I’d love to see good scenarios of real-time machine learning. <strong>Please share if you have any information or ideas to share with the community.</strong></p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=452ee81ac8de" width="1" height="1" alt=""><hr><p><a href="https://fullstackml.com/what-no-one-tells-you-about-real-time-machine-learning-452ee81ac8de">What No One Tells You About Real-Time Machine Learning</a> was originally published in <a href="https://fullstackml.com">FullStackML</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>]]></content:encoded>
        </item>
    </channel>
</rss>