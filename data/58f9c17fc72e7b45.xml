<?xml version="1.0" encoding="UTF-8" standalone="no"?><?xml-stylesheet href="http://www.blogger.com/styles/atom.css" type="text/css"?><feed xmlns="http://www.w3.org/2005/Atom" xmlns:blogger="http://schemas.google.com/blogger/2008" xmlns:gd="http://schemas.google.com/g/2005" xmlns:georss="http://www.georss.org/georss" xmlns:openSearch="http://a9.com/-/spec/opensearchrss/1.0/" xmlns:thr="http://purl.org/syndication/thread/1.0"><id>tag:blogger.com,1999:blog-15045980</id><updated>2022-10-28T18:55:15.846-07:00</updated><category term="TotT"/><category term="GTAC"/><category term="James Whittaker"/><category term="Misko Hevery"/><category term="Anthony Vallone"/><category term="Patrick Copeland"/><category term="Jobs"/><category term="Code Health"/><category term="C++"/><category term="Andrew Trenk"/><category term="Patrik Höglund"/><category term="JavaScript"/><category term="Allen Hutchison"/><category term="George Pirocanac"/><category term="Zhanyong Wan"/><category term="Harry Robinson"/><category term="Java"/><category term="Julian Harty"/><category term="Alberto Savoia"/><category term="Ben Yu"/><category term="Erik Kuefler"/><category term="Philip Zembrod"/><category term="Shyam Seshadri"/><category term="Chrome"/><category term="John Thomas"/><category term="Lesley Katzen"/><category term="Marc Kaplan"/><category term="Markus Clermont"/><category term="Sonal Shah"/><category term="APIs"/><category term="Abhishek Arya"/><category term="Adam Bender"/><category term="Alan Myrvold"/><category term="Alek Icev"/><category term="Android"/><category term="April Fools"/><category term="Chaitali Narla"/><category term="Chris Lewis"/><category term="Chrome OS"/><category term="Diego Salas"/><category term="Dillon Bly"/><category term="Dori Reuveni"/><category term="Jason Arbon"/><category term="Jochen Wuttke"/><category term="Kostya Serebryany"/><category term="Marc Eaddy"/><category term="Marko Ivanković"/><category term="Max Kanat-Alexander"/><category term="Mobile"/><category term="Oliver Chang"/><category term="Simon Stewart"/><category term="Stefan Kennedy"/><category term="Test Flakiness"/><category term="Tony Voellm"/><category term="WebRTC"/><category term="Yvette Nameth"/><category term="Zuri Kemp"/><category term="Aaron Jacobs"/><category term="Adam Porter"/><category term="Adel Saoud"/><category term="Alan Faulkner"/><category term="Alex Eagle"/><category term="Anantha Keesara"/><category term="Antoine Picard"/><category term="App Engine"/><category term="Ari Shamash"/><category term="Arif Sukoco"/><category term="Benjamin Pick"/><category term="Bob Nystrom"/><category term="Bruce Leban"/><category term="Carlos Arguelles"/><category term="Carlos Israel Ortiz García"/><category term="Cathal Weakliam"/><category term="Christopher Semturs"/><category term="Clay Murphy"/><category term="Dan Shi"/><category term="Dan Willemsen"/><category term="Dave Chen"/><category term="Dave Gladfelter"/><category term="Derek Snyder"/><category term="Diego Cavalcanti"/><category term="Dmitry Vyukov"/><category term="Eduardo Bravo Ortiz"/><category term="Ekaterina Kamenskaya"/><category term="Elliott Karpilovsky"/><category term="Espresso"/><category term="Google+"/><category term="Goran Petrovic"/><category term="Goranka Bjedov"/><category term="Hank Duan"/><category term="Havard Rast Blok"/><category term="Hongfei Ding"/><category term="Jason Elbaum"/><category term="Jason Huggins"/><category term="Jay Han"/><category term="Jeff Listfield"/><category term="Jessica Tomechak"/><category term="Jim Reardon"/><category term="Joe Allan Muharsky"/><category term="Joel Hynoski"/><category term="John Micco"/><category term="John Penix"/><category term="Jonathan Rockway"/><category term="Jonathan Velasquez"/><category term="Josh Armour"/><category term="Julie Ralph"/><category term="Karin Lundberg"/><category term="Kaue Silveira"/><category term="Kevin Bourrillion"/><category term="Kevin Graney"/><category term="Kirkland"/><category term="Kurt Alfred Kluever"/><category term="Manjusha Parvathaneni"/><category term="Marek Kiszkis"/><category term="Mark Ivey"/><category term="Mark Striebeck"/><category term="Matt Lowrie"/><category term="Meredith Whittaker"/><category term="Michael Bachman"/><category term="Michael Klepikov"/><category term="Mike Aizatsky"/><category term="Mike Wacker"/><category term="Mona El Mahdy"/><category term="Noel Yap"/><category term="Patricia Legaspi"/><category term="Peter Arrenbrecht"/><category term="Peter Spragins"/><category term="Phil Rollet"/><category term="Pooja Gupta"/><category term="Project Showcase"/><category term="Radoslav Vasilev"/><category term="Rajat Dewan"/><category term="Rajat Jain"/><category term="Rich Martin"/><category term="Richard Bustamante"/><category term="Roshan Sembacuttiaratchy"/><category term="Ruslan Khamitov"/><category term="Sean Jordan"/><category term="Sharon Zhou"/><category term="Siddartha Janga"/><category term="Simran Basi"/><category term="Stephen Ng"/><category term="Tejas Shah"/><category term="Test Analytics"/><category term="Test Engineer"/><category term="Tom O'Neill"/><category term="Vojta Jína"/><category term="iOS"/><category term="mutation testing"/><title type="text">Google Testing Blog</title><subtitle type="html">If it ain't broke, you're not trying hard enough.</subtitle><link href="http://testing.googleblog.com/feeds/posts/default" rel="http://schemas.google.com/g/2005#feed" type="application/atom+xml"/><link href="http://www.blogger.com/feeds/15045980/posts/default?redirect=false" rel="self" type="application/atom+xml"/><link href="http://testing.googleblog.com/" rel="alternate" type="text/html"/><link href="http://pubsubhubbub.appspot.com/" rel="hub"/><link href="http://www.blogger.com/feeds/15045980/posts/default?start-index=26&amp;max-results=25&amp;redirect=false" rel="next" type="application/atom+xml"/><author><name>Asim</name><uri>http://www.blogger.com/profile/15225094984685742326</uri><email>noreply@blogger.com</email><gd:image height="16" rel="http://schemas.google.com/g/2005#thumbnail" src="https://img1.blogblog.com/img/b16-rounded.gif" width="16"/></author><generator uri="http://www.blogger.com" version="7.00">Blogger</generator><openSearch:totalResults>367</openSearch:totalResults><openSearch:startIndex>1</openSearch:startIndex><openSearch:itemsPerPage>25</openSearch:itemsPerPage><entry><id>tag:blogger.com,1999:blog-15045980.post-8583328337291032488</id><published>2022-02-07T09:03:00.000-08:00</published><updated>2022-02-07T09:03:30.372-08:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="Cathal Weakliam"/><category scheme="http://www.blogger.com/atom/ns#" term="Code Health"/><category scheme="http://www.blogger.com/atom/ns#" term="TotT"/><title type="text">Code Health: Now You're Thinking With Functions</title><content type="html">&lt;span style="background-color: white; color: #222222; font-family: times, &amp;quot;times new roman&amp;quot;, serif; font-style: italic; vertical-align: baseline; white-space: pre-wrap;"&gt;This is another post in our &lt;/span&gt;&lt;a href="https://testing.googleblog.com/2017/04/code-health-googles-internal-code.html" style="font-family: times, &amp;quot;times new roman&amp;quot;, serif; text-decoration-line: none;"&gt;&lt;span style="background-color: white; color: #1155cc; font-style: italic; vertical-align: baseline; white-space: pre-wrap;"&gt;Code Health&lt;/span&gt;&lt;/a&gt;&lt;span style="background-color: white; color: #222222; font-family: times, &amp;quot;times new roman&amp;quot;, serif; font-style: italic; vertical-align: baseline; white-space: pre-wrap;"&gt; series. A version of this post originally appeared in Google bathrooms worldwide as a Google &lt;/span&gt;&lt;a href="https://testing.googleblog.com/2007/01/introducing-testing-on-toilet.html" style="font-family: times, &amp;quot;times new roman&amp;quot;, serif; text-decoration-line: none;"&gt;&lt;span style="background-color: white; color: #1155cc; font-style: italic; vertical-align: baseline; white-space: pre-wrap;"&gt;Testing on the Toilet&lt;/span&gt;&lt;/a&gt;&lt;span style="background-color: white; color: #222222; font-family: times, &amp;quot;times new roman&amp;quot;, serif; font-style: italic; vertical-align: baseline; white-space: pre-wrap;"&gt; episode. You can download a &lt;/span&gt;&lt;a href="https://docs.google.com/document/d/1AqF96_mlhZO0xyW8noG5PA0B6p8uLshLfkiupxM-NzY/edit" rel="nofollow" style="font-family: times, &amp;quot;times new roman&amp;quot;, serif; text-decoration-line: none;"&gt;&lt;span style="background-color: white; color: #1155cc; font-style: italic; vertical-align: baseline; white-space: pre-wrap;"&gt;printer-friendly version&lt;/span&gt;&lt;/a&gt;&lt;span style="background-color: white; color: #222222; font-family: times, &amp;quot;times new roman&amp;quot;, serif; font-style: italic; vertical-align: baseline; white-space: pre-wrap;"&gt; to display in your office. &lt;/span&gt;&lt;div&gt;&lt;span style="background-color: white; color: #222222; font-family: times, &amp;quot;times new roman&amp;quot;, serif; font-style: italic; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="color: #222222; font-family: times, times new roman, serif;"&gt;&lt;span style="background-color: white; white-space: pre-wrap;"&gt;by &lt;/span&gt;&lt;span style="white-space: pre-wrap;"&gt;Cathal Weakliam&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: times, times new roman, serif;"&gt;&lt;span style="white-space: pre-wrap;"&gt;&lt;span style="color: #222222;"&gt;Loops are the standard way to process collections like arrays and lists. However, some loops implement the same patterns repeatedly, leading to duplicate code. &lt;/span&gt;&lt;a href="https://medium.com/javascript-scene/higher-order-functions-composing-software-5365cf2cbe99"&gt;&lt;i&gt;&lt;b&gt;&lt;span style="color: #2b00fe;"&gt;Higher-order functions&lt;/span&gt;&lt;/b&gt;&lt;/i&gt;&lt;/a&gt;&lt;span style="color: #800180; font-weight: bold;"&gt;—functions that use other functions as inputs or outputs—can reduce duplication by providing a simpler way to express common operations with collections.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: times, times new roman, serif;"&gt;&lt;span style="white-space: pre-wrap;"&gt;&lt;span style="color: #800180;"&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="color: #222222; font-family: times, times new roman, serif;"&gt;&lt;span style="white-space: pre-wrap;"&gt;Consider these two loops in JavaScript th&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #222222; font-family: times, &amp;quot;times new roman&amp;quot;, serif; white-space: pre-wrap;"&gt;at decide if every object in an array meets a condition:&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="color: #222222; font-family: times, times new roman, serif;"&gt;&lt;span style="white-space: pre-wrap;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt; &lt;div style="overflow-x: auto;"&gt;&lt;table class="my-bordered-table"&gt;  &lt;tbody&gt;&lt;tr&gt;    &lt;td style="background-color: #f4cccc; vertical-align: top; width: 50%;"&gt;&lt;pre style="background-color: #f4cccc; border: 0px; color: black; margin-bottom: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-top: 0px;"&gt;let everyRequestValid = true;&lt;br /&gt;for (const request of requests) {&lt;br /&gt;  if (!&lt;span style="font-weight: bold;"&gt;isValid&lt;/span&gt;(request)) {&lt;br /&gt;    everyRequestValid = false;&lt;br /&gt;    break;&lt;br /&gt;  }&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;if (everyRequestValid) {&lt;br /&gt;&lt;span style="font-style: italic;"&gt;  // do something&lt;/span&gt;&lt;br /&gt;}&lt;/pre&gt;&lt;/td&gt;    &lt;td style="background-color: #f4cccc; vertical-align: top; width: 50%;"&gt;&lt;pre style="background-color: #f4cccc; border: 0px; color: black; margin-bottom: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-top: 0px;"&gt;let everyUserEligible = true;&lt;br /&gt;for (const user of users) {&lt;br /&gt;  if (!&lt;span style="font-weight: bold;"&gt;isEligible&lt;/span&gt;(user)) {&lt;br /&gt;    everyUserEligible = false;&lt;br /&gt;    break;&lt;br /&gt;  }&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;if (everyUserEligible) {&lt;br /&gt;&lt;span style="font-style: italic;"&gt;  // do something&lt;/span&gt;&lt;br /&gt;}&lt;/pre&gt;&lt;/td&gt;   &lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="overflow-x: auto;"&gt;&lt;span style="color: #800180; font-weight: bold;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="overflow-x: auto;"&gt;&lt;span style="color: #800180; font-weight: bold;"&gt;The high similarity between the two loops violates the &lt;a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself"&gt;Don’t Repeat Yourself &lt;/a&gt;principle&lt;/span&gt; and creates an unnecessary burden on readers and maintainers of the code.&lt;/div&gt;&lt;div style="overflow-x: auto;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="overflow-x: auto;"&gt;To reduce the maintenance burden, use the &lt;span style="color: #0f9d58; font-family: &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;every&lt;/span&gt; method to replace each loop with a single expression.&amp;nbsp; (In other languages &lt;span style="color: #0f9d58; font-family: &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;every&lt;/span&gt; may have a different name, like &lt;span style="color: #0f9d58; font-family: &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;all&lt;/span&gt; or &lt;span style="color: #0f9d58; font-family: &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;allMatch&lt;/span&gt;).&lt;/div&gt;&lt;div style="overflow-x: auto;"&gt;&lt;br /&gt;&lt;/div&gt; &lt;div style="overflow-x: auto;"&gt;&lt;table class="my-bordered-table"&gt;  &lt;tbody&gt;&lt;tr&gt;    &lt;td style="background-color: #d9ead3; vertical-align: top; width: 50%;"&gt;&lt;pre style="background-color: #d9ead3; border: 0px; color: black; margin-bottom: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-top: 0px;"&gt;if (requests.&lt;span style="font-weight: bold;"&gt;every(isValid)&lt;/span&gt;) {&lt;br /&gt;&lt;span style="font-style: italic;"&gt;  // do something&lt;/span&gt;&lt;br /&gt;}&lt;/pre&gt;&lt;/td&gt;      &lt;td style="background-color: #d9ead3; vertical-align: top; width: 50%;"&gt;&lt;pre style="background-color: #d9ead3; border: 0px; color: black; margin-bottom: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-top: 0px;"&gt;if (users.&lt;span style="font-weight: bold;"&gt;every(isEligible)&lt;/span&gt;) {&lt;br /&gt;&lt;span style="font-style: italic;"&gt;  // do something&lt;/span&gt;&lt;br /&gt;}&lt;/pre&gt;&lt;/td&gt;  &lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="overflow-x: auto;"&gt;&lt;div style="overflow-x: auto;"&gt;&lt;span style="color: #800180; font-weight: bold;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="overflow-x: auto;"&gt;&lt;span style="color: #800180; font-weight: bold;"&gt;Processing collections with higher-order functions has several benefits:&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;It significantly reduces duplication by abstracting away the common looping code.&lt;/li&gt;&lt;li&gt;The resulting code is much shorter and simpler, with less opportunity for bugs.&lt;/li&gt;&lt;li&gt;A reader can quickly see the intent of the code as it is not obscured behind low-level control flow.&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;Two other common higher-order functions are &lt;span style="color: #0f9d58; font-family: &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;map&lt;/span&gt; (apply a function to each element of a collection) and &lt;span style="color: #0f9d58; font-family: &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;filter&lt;/span&gt; (select the elements of a collection that pass a predicate). While the exact syntax varies by language, here’s how they look in JavaScript (using an anonymous function as the argument):&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;  &lt;div style="overflow-x: auto;"&gt;&lt;table class="my-bordered-table"&gt;  &lt;tbody&gt;&lt;tr&gt;    &lt;td style="background-color: #d9ead3; vertical-align: top; width: 50%;"&gt;&lt;pre style="background-color: #d9ead3; border: 0px; color: black; margin-bottom: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-top: 0px;"&gt;&lt;span style="font-style: italic;"&gt;// Double each value in `ints`&lt;/span&gt;&lt;br /&gt;const doubled = ints.&lt;span style="font-weight: bold;"&gt;map(n =&amp;gt; n * 2);&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;      &lt;td style="background-color: #d9ead3; vertical-align: top; width: 50%;"&gt;&lt;pre style="background-color: #d9ead3; border: 0px; color: black; margin-bottom: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-top: 0px;"&gt;&lt;span style="font-style: italic;"&gt;// Get only the even values in `ints`&lt;/span&gt;&lt;br /&gt;const evens = ints.&lt;span style="font-weight: bold;"&gt;filter(n =&amp;gt; n % 2 === 0);&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;  &lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Just don’t overdo it! &lt;span style="color: #800180; font-weight: bold;"&gt;Don’t rewrite a loop with functions if it makes it harder to understand, or if it would be considered unidiomatic in your language&lt;/span&gt; (for example, in Python, list comprehensions are equivalent to &lt;span style="color: #0f9d58; font-family: &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;map&lt;/span&gt; and &lt;span style="color: #0f9d58; font-family: &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;filter&lt;/span&gt; but are usually preferred).&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;</content><link href="http://testing.googleblog.com/feeds/8583328337291032488/comments/default" rel="replies" title="Post Comments" type="application/atom+xml"/><link href="http://testing.googleblog.com/2022/02/code-health-now-youre-thinking-with.html#comment-form" rel="replies" title="0 Comments" type="text/html"/><link href="http://www.blogger.com/feeds/15045980/posts/default/8583328337291032488" rel="edit" type="application/atom+xml"/><link href="http://www.blogger.com/feeds/15045980/posts/default/8583328337291032488" rel="self" type="application/atom+xml"/><link href="http://testing.googleblog.com/2022/02/code-health-now-youre-thinking-with.html" rel="alternate" title="Code Health: Now You're Thinking With Functions" type="text/html"/><author><name>Google Testing Bloggers</name><uri>http://www.blogger.com/profile/03153388556673050910</uri><email>noreply@blogger.com</email><gd:image height="7" rel="http://schemas.google.com/g/2005#thumbnail" src="http://3.bp.blogspot.com/-H1YTvw0kdFA/UTf_IXv4N2I/AAAAAAAAABY/ghqaO2KBOSA/s1600/gtb3.png" width="32"/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-15045980.post-4368672883636323258</id><published>2022-02-01T10:11:00.000-08:00</published><updated>2022-02-01T10:11:01.110-08:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="George Pirocanac"/><title type="text">A Tale of Two Features</title><content type="html">&lt;h2&gt;By George Pirocanac&lt;/h2&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;I have often been asked, “What is the most memorable bug that you have encountered in your testing career?” For me, it is hands down a bug that happened quite a few years ago. I was leading an Engineering Productivity team that supported Google App Engine. At that time App Engine was still in its early stages, and there were many challenges associated with testing rapidly evolving features. Our testing frameworks and processes were also evolving, so it was an exciting time to be on the team.&amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;What makes this bug so memorable is that I spent so much time developing a comprehensive suite of test scenarios, yet a failure occurred during such an obvious use case that it left me shaking my head and wondering how I had missed it. Even with many years of testing experience it can be very humbling to construct scenarios that adequately mirror what will happen in the field.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;I’ll try to provide enough background for the reader to play along and see if they can determine the anomalous scenario. As a further hint, the problem resulted from the interaction of two App Engine features, so I like calling this story &lt;i&gt;A Tale of Two Features.&lt;/i&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h2 style="text-align: left;"&gt;Feature 1 - Datastore Admin (backup, restore, delete)&lt;/h2&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Google App Engine was released 13 years ago as Google’s first Cloud product. It allowed users to build and deploy highly scalable web applications in the Cloud. To support this, it had its own scalable database called the Datastore. An administration console allowed users to manage the application and its Datastore through a web interface. Users wrote applications that consisted of request handlers that App Engine invoked according to the URL that was specified. The handlers could call App Engine services like Datastore through a remote procedure call (RPC) mechanism. Figure 1 illustrates this flow.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://blogger.googleusercontent.com/img/a/AVvXsEh0cVtb0BQOCfEOdYOLTEzlkK6wlHKjVPjCdIUxMjMR8xH7dG2zAClwF1rdSiYZKoH9ZODmhh46bvRoZNh1m6GnBRcdO5-bJEOOBJXrH5GObECmzIKNS6w0aladuki_mY3bM1WaDl7sdTrvvbYTsJ1cY5xhWO1idwxPAnN-UrTSYyALq8JnxQ=s736" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="224" data-original-width="736" height="194" src="https://blogger.googleusercontent.com/img/a/AVvXsEh0cVtb0BQOCfEOdYOLTEzlkK6wlHKjVPjCdIUxMjMR8xH7dG2zAClwF1rdSiYZKoH9ZODmhh46bvRoZNh1m6GnBRcdO5-bJEOOBJXrH5GObECmzIKNS6w0aladuki_mY3bM1WaDl7sdTrvvbYTsJ1cY5xhWO1idwxPAnN-UrTSYyALq8JnxQ=w640-h194" width="640" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;The first feature in this &lt;i&gt;Tale of Two Features&lt;/i&gt; resided in the administration console, providing the ability to back up, restore, and delete selected or all of an application’s entities in the Datastore. It was implemented in a clever way that incorporated it directly into the application, rather than as an independent utility. As part of the application it could freely operate on the Datastore and incur the same billing charges as other datastore operations within the application. When the feature was invoked, traffic would be sent to its handler and the application would process it. Figure 2 illustrates this request flow.&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://blogger.googleusercontent.com/img/a/AVvXsEjqOeIzD2oUVRnK14nCw8j5vxEcBvN98tBirvh3sj_P3a2E29GoZTKeSvgl2ePALbtxdVRSZ2R3tIWwPL93U3ckniR0hkDQBmKyTXqfvTzOjpLcNCVlEfLSBGUfzMD2PX6a5q4zrI8hUbJbbmPWnz5HDlWSJXQ_1LK7Hy92zVGIkx7KRZuFQQ=s736" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="471" data-original-width="736" height="410" src="https://blogger.googleusercontent.com/img/a/AVvXsEjqOeIzD2oUVRnK14nCw8j5vxEcBvN98tBirvh3sj_P3a2E29GoZTKeSvgl2ePALbtxdVRSZ2R3tIWwPL93U3ckniR0hkDQBmKyTXqfvTzOjpLcNCVlEfLSBGUfzMD2PX6a5q4zrI8hUbJbbmPWnz5HDlWSJXQ_1LK7Hy92zVGIkx7KRZuFQQ=w640-h410" width="640" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;div&gt;By the time this memorable bug occurred, this Datastore administration feature was mature, well tested, and stable. No changes were being made to it.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h2 style="text-align: left;"&gt;Feature 2 - Utilities for Migrating to the HR - Datastore&lt;/h2&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The second feature (or more accurately, set of features) came at least a year after the first feature was released and stable. It helped users migrate their applications to a new High Replication (HR) Datastore. The HR Datastore was more reliable than its predecessor, but using it meant creating a new application and copying over all the data from the old Datastore. To support such migrations, App Engine developers added two new features to the administration console. The first copied all the data from the Datastore of one application to another, and the second redirected all traffic from one application to another. The latter was particularly useful because it meant the new application would seamlessly receive the traffic after a migration. This set of features was written by another team, and we in Engineering Productivity supported them by creating processes for testing various Datastore migrations. The migration-support features were thoroughly tested and released to developers. Figure 3 illustrates the request flow of the redirection feature.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://blogger.googleusercontent.com/img/a/AVvXsEhR9Tw44yOC48vvAARE70a2JNLAB5EcYPimIFeuGBNnm4Qbjf5d7W4NzZ-s-j5BU-b0-u2cFX1q9AL0e-QNkVabq3CpiTLZzVSA7fjrYTjHXofw0WErosSUgI_XHygJbMRIyuoPno0b4JNzgrXPXSPz2xLhZqKPUy8gkISvOZS_mjrhAKsprQ=s735" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="417" data-original-width="735" height="364" src="https://blogger.googleusercontent.com/img/a/AVvXsEhR9Tw44yOC48vvAARE70a2JNLAB5EcYPimIFeuGBNnm4Qbjf5d7W4NzZ-s-j5BU-b0-u2cFX1q9AL0e-QNkVabq3CpiTLZzVSA7fjrYTjHXofw0WErosSUgI_XHygJbMRIyuoPno0b4JNzgrXPXSPz2xLhZqKPUy8gkISvOZS_mjrhAKsprQ=w640-h364" width="640" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h2 style="text-align: left;"&gt;What Could Possibly Go Wrong?&lt;/h2&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;So this was the situation when we released these utilities for migrating to the new Datastore. We were very confident that they worked, as we had tested migrations of many different types and sizes of Datastore entities. We had also tested that a migration could be interrupted without data loss. All checked out fine. I was confident that this new feature would work, yet soon after we released it, we started getting problem reports.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;If you have been playing along, now is the time to ask yourself,&amp;nbsp; “What could possibly go wrong?” As an added hint, the problem reports claimed that all the data in the newly migrated application was disappearing.&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;h2 style="text-align: left;"&gt;What Did Go Wrong&lt;/h2&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;As mentioned above, developers began to report that data was disappearing from their newly migrated applications. It wasn’t at all common, yet of course it is most disconcerting when data “just disappears.” We had to investigate how this could occur. Our standard processes ensured that we had internal backups of the data, which were promptly restored. In parallel we tried to reproduce the problem, but we couldn’t—at least until we figured out what was happening. As I mentioned earlier, once we understood it, it was quite obvious, but that only made it all the more painful that we missed it.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;What was happening was that, after migrating and automatically redirecting traffic to the new application, a number of customers thought they still needed to delete the data from their old application, so they used the first Datastore admin feature to do that. As expected, the feature sent traffic to that application to delete the entities from the Datastore. But that traffic was now being automatically redirected to the new application, and voila—all the data that had been copied earlier was now deleted there. Since only a handful of developers tried to delete the data from their old applications, this explained why the problem occurred only rarely. Figure 4 illustrates this request flow.&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://blogger.googleusercontent.com/img/a/AVvXsEjRpHqaAL8XEJd2_MiESEmXnj8sqqctGvogjgRsw9Ty40zwQbmhfA9CLeECNR3dSh5PxIkN1HC3AnydKx-ef6LzkcC3E6QrKi23Y5IqZPPB9t38DIQylqsW3o-VIVhFpi0OkeX5YxkMmWk0Etiy4Php_XQWMDDeG0ZPirNEFM6Sr1Mg9Y85xg=s735" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="586" data-original-width="735" height="510" src="https://blogger.googleusercontent.com/img/a/AVvXsEjRpHqaAL8XEJd2_MiESEmXnj8sqqctGvogjgRsw9Ty40zwQbmhfA9CLeECNR3dSh5PxIkN1HC3AnydKx-ef6LzkcC3E6QrKi23Y5IqZPPB9t38DIQylqsW3o-VIVhFpi0OkeX5YxkMmWk0Etiy4Php_XQWMDDeG0ZPirNEFM6Sr1Mg9Y85xg=w640-h510" width="640" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;Obvious, isn’t it, once you know what is happening.&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;h2 style="text-align: left;"&gt;Lessons Learned&lt;/h2&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;This all occurred years ago, and App Engine is based on a far different and more robust framework today. Datastore migrations are but a memory from the past, yet this experience made a great impression on me.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The most important thing I learned from this experience is that, while it is important to test features for their functionality, it’s also important to think of them as part of workflows. In performing our testing we exercised a very limited number of steps in the migration process workflow and omitted a very reasonable step at the end: trying to delete the data from the old application. Our focus was in testing the variability of contents in the Datastore rather than different steps in the migration process. It was this focus that kept our eyes away from the relatively obvious failure case.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Another thing I learned was that this bug might have been caught if the developer of the first feature had been in the design review for the second set of migration features (particularly the feature that automatically redirects traffic). Unfortunately, that person had already joined a new team. A key step in reducing bugs can occur at the design stage if “what-if” questions are being asked.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Finally, I was enormously impressed that we were able to recover so quickly. Protecting against data loss is one of the most important aspects of Cloud management, and being able to recover from mistakes is at least as important as trying to prevent them. I have the utmost respect for my coworkers in Site Reliability Engineering (SRE).&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;h2 style="text-align: left;"&gt;References&lt;/h2&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;a href="https://cloud.google.com/appengine/docs/standard/python/an-overview-of-app-engine"&gt;An Overview of Google App Engine&lt;/a&gt;&lt;/div&gt;</content><link href="http://testing.googleblog.com/feeds/4368672883636323258/comments/default" rel="replies" title="Post Comments" type="application/atom+xml"/><link href="http://testing.googleblog.com/2022/02/a-tale-of-two-features.html#comment-form" rel="replies" title="0 Comments" type="text/html"/><link href="http://www.blogger.com/feeds/15045980/posts/default/4368672883636323258" rel="edit" type="application/atom+xml"/><link href="http://www.blogger.com/feeds/15045980/posts/default/4368672883636323258" rel="self" type="application/atom+xml"/><link href="http://testing.googleblog.com/2022/02/a-tale-of-two-features.html" rel="alternate" title="A Tale of Two Features" type="text/html"/><author><name>Google Testing Bloggers</name><uri>http://www.blogger.com/profile/03153388556673050910</uri><email>noreply@blogger.com</email><gd:image height="7" rel="http://schemas.google.com/g/2005#thumbnail" src="http://3.bp.blogspot.com/-H1YTvw0kdFA/UTf_IXv4N2I/AAAAAAAAABY/ghqaO2KBOSA/s1600/gtb3.png" width="32"/></author><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" height="72" url="https://blogger.googleusercontent.com/img/a/AVvXsEh0cVtb0BQOCfEOdYOLTEzlkK6wlHKjVPjCdIUxMjMR8xH7dG2zAClwF1rdSiYZKoH9ZODmhh46bvRoZNh1m6GnBRcdO5-bJEOOBJXrH5GObECmzIKNS6w0aladuki_mY3bM1WaDl7sdTrvvbYTsJ1cY5xhWO1idwxPAnN-UrTSYyALq8JnxQ=s72-w640-h194-c" width="72"/><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-15045980.post-2773198969790210790</id><published>2021-06-15T08:04:00.001-07:00</published><updated>2021-07-22T08:29:55.484-07:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="George Pirocanac"/><title type="text">How Much Testing is Enough?</title><content type="html">&lt;h2 style="text-align: left;"&gt;By George Pirocanac&lt;/h2&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;A familiar question every software developer and team grapples with is, “How much testing is enough to qualify a software release?” A lot depends on the type of software, its purpose, and its target audience. One would expect a far more rigorous approach to testing commercial search engine than a simple smartphone flashlight application. Yet no matter what the application, the question of how much testing is sufficient can be hard to answer in definitive terms. A better approach is to provide considerations or rules of thumb that can be used to define a qualification process and testing strategy best suited for the case at hand. The following tips provide a helpful rubric:&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Document your process or strategy.&lt;/li&gt;&lt;li&gt;Have a solid base of unit tests.&lt;/li&gt;&lt;li&gt;Don’t skimp on integration testing.&lt;/li&gt;&lt;li&gt;Perform end-to-end testing for Critical User Journeys.&lt;/li&gt;&lt;li&gt;Understand and implement the other tiers of testing.&lt;/li&gt;&lt;li&gt;Understand your coverage of code and functionality.&lt;/li&gt;&lt;li&gt;Use feedback from the field to improve your process.&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;h2 style="text-align: left;"&gt;Document your process or strategy&lt;/h2&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;If you are already testing your product, document the entire process. This is essential for being able to both repeat the test for a later release and to analyze it for further improvement. If this is your first release, it’s a good idea to have a written test plan or strategy. In fact, having a written test plan or strategy is something that should accompany any product design.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h2 style="text-align: left;"&gt;Have a solid base of unit tests&lt;/h2&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;A great place to start is writing unit tests that accompany the code. Unit tests test the code as it is written at the functional unit level. Dependencies on external services are either mocked or faked.&amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;A &lt;i&gt;mock&lt;/i&gt; has the same interface as the production dependency, but only checks that the object is used according to set expectations and/or returns test-controlled values, rather than having a full implementation of its normal functionality.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;A &lt;i&gt;fake&lt;/i&gt;, on the other hand, is a shallow implementation of the dependency but should ideally have no dependencies of it’s own. Fakes provide a wider range of functionality than mocks and should be maintained by the team providing the production version of the dependency. That way, as the dependency evolves so does the fake and the unit-test writer can be confident that the fake mirrors the functionality of the production dependency.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;At many companies, including Google, there are best practices of requiring any code change to have corresponding unit test cases that pass. As the code base expands, having a body of such tests that is executed before code is submitted is an important part of catching bugs before they creep into the code base. This saves time later both in writing integration tests, debugging, and verifying fixes to existing code.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h2 style="text-align: left;"&gt;Don’t skimp on integration testing&lt;/h2&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;As the codebase grows and reaches a point where numbers of functional units are available to test as a group, it’s time to have a solid base of integration tests. An integration test takes a small group of units, often only two units, and tests their behavior as a whole, verifying that they coherently work together.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Often developers think that integration tests can be deprioritized or even skipped in favor of full end-to-end tests. After all, the latter really tests the product as the user would exercise it. Yet, having a comprehensive set of integration tests is just as important as having a solid unit-test base (see the earlier Google Blog article, &lt;a href="https://testing.googleblog.com/2020/11/fixing-test-hourglass.html"&gt;Fixing a test hourglass&lt;/a&gt;).&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The reason lies in the fact that integration tests have less dependencies than full end-to-end tests. As a result, integration tests, with smaller environments to bring up, will be faster and more reliable than the full end-to-end tests with their full set of dependencies (see the earlier Google Blog article, &lt;a href="https://testing.googleblog.com/2020/12/test-flakiness-one-of-main-challenges.html"&gt;Test Flakiness - One of the Main Challenges of Automated Testing&lt;/a&gt;).&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h2 style="text-align: left;"&gt;Perform end-to-end testing for Critical User Journeys&lt;/h2&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The discussion thus far covers testing the product at its component level, first as individual components (unit-testing), then as groups of components and dependencies (integration testing). Now it’s time to test the product end to end as a user would use it. This is quite important because it’s not just independent features that should be tested but entire workflows incorporating a variety of features. At Google these workflows - the combination of a critical goal and the journey of tasks a user undertakes to achieve that goal - are called Critical User Journeys (CUJs). Understanding CUJs, documenting them, and then verifying them using end-to-end testing (hopefully in an automated fashion) completes the &lt;a href="https://docs.google.com/presentation/d/15gNk21rjer3xo-b1ZqyQVGebOp_aPvHU3YH7YnOMxtE/edit#slide=id.g437663ce1_53_98"&gt;Testing Pyramid&lt;/a&gt;.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h2 style="text-align: left;"&gt;Understand and implement the other tiers of testing&lt;/h2&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Unit, integration, and end-to-end testing address the functional level of your product. It is important to understand the other tiers of testing, including:&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Performance testing - Measuring the latency or throughput of your application or service.&lt;/li&gt;&lt;li&gt;Load and scalability testing - Testing your application or service under higher and higher load.&lt;/li&gt;&lt;li&gt;Fault-tolerance testing - Testing your application’s behavior as different dependencies either fail or go down entirely.&lt;/li&gt;&lt;li&gt;Security testing - Testing for known vulnerabilities in your service or application.&lt;/li&gt;&lt;li&gt;Accessibility testing - Making sure the product is accessible and usable for everyone, including people with a wide range of disabilities.&lt;/li&gt;&lt;li&gt;Localization testing - Making sure the product can be used in a particular language or region.&lt;/li&gt;&lt;li&gt;Globalization testing - Making sure the product can be used by people all over the world.&lt;/li&gt;&lt;li&gt;Privacy testing - Assessing and mitigating privacy risks in the product.&lt;/li&gt;&lt;li&gt;Usability testing - Testing for user friendliness.&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Again, it is important to have these testing processes occur as early as possible in your review cycle. Smaller performance tests can detect regressions earlier and save debugging time during the end-to-end tests.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h2 style="text-align: left;"&gt;Understand your coverage of code and functionality&lt;/h2&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;So far, the question of how much testing is enough, from a qualitative perspective, has been examined. Different types of tests were reviewed and the argument made that smaller and earlier is better than larger or later. Now the problem will be examined from a quantitative perspective, taking code coverage techniques into account.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Wikipedia has a great article on &lt;a href="https://en.wikipedia.org/wiki/Code_coverage"&gt;code coverage&lt;/a&gt; that outlines and discusses different types of coverage, including statement, edge, branch, and condition coverage. There are several open source tools available for measuring coverage for most of the popular programming languages such as Java, C++, Go and Python. A partial list is included in the table below:&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;   &lt;style&gt;  table.coverage-tools {     width: 100%;     border-collapse: collapse;   }   table.coverage-tools th,   table.coverage-tools td {     width: 50%;     border: 1px solid black;   }   table.coverage-tools td {     padding: 5px;   }   &lt;/style&gt;&lt;table class="coverage-tools"&gt;  &lt;tbody&gt;&lt;tr&gt;    &lt;th&gt;Language&lt;/th&gt;    &lt;th&gt;Tool&lt;/th&gt;  &lt;/tr&gt;  &lt;tr&gt;    &lt;td&gt;    &lt;/td&gt;    &lt;td&gt;    &lt;/td&gt;  &lt;/tr&gt;  &lt;tr&gt;    &lt;td&gt;Java     &lt;/td&gt;    &lt;td&gt;JaCoCo     &lt;/td&gt;  &lt;/tr&gt;  &lt;tr&gt;    &lt;td&gt;Java     &lt;/td&gt;    &lt;td&gt;JCov     &lt;/td&gt;  &lt;/tr&gt;  &lt;tr&gt;    &lt;td&gt;Java     &lt;/td&gt;    &lt;td&gt;OpenClover     &lt;/td&gt;  &lt;/tr&gt;  &lt;tr&gt;    &lt;td&gt;Python     &lt;/td&gt;    &lt;td&gt;Coverage.py     &lt;/td&gt;  &lt;/tr&gt;  &lt;tr&gt;    &lt;td&gt;C++     &lt;/td&gt;    &lt;td&gt;Bullseye     &lt;/td&gt;  &lt;/tr&gt;  &lt;tr&gt;    &lt;td&gt;Go     &lt;/td&gt;    &lt;td&gt;Built in coverage support (go -cover)     &lt;/td&gt;  &lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;      &lt;div&gt;Table 1 - Open source coverage tools for different languages&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Most of these tools provide a summary in percentage terms. For example, 80% code coverage means &lt;i&gt;about&lt;/i&gt; 80% of the code is covered and &lt;i&gt;about&lt;/i&gt; 20% of the code is uncovered. At the same time, It is important to understand that, just because you have coverage for a particular area of code, this code can still have bugs.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;Another concept in coverage is called changelist coverage. Changelist coverage measures the coverage in changed or added lines. It is useful for teams that have accumulated technical debt and have low coverage in their entire codebase. These teams can institute a policy where an increase in their incremental coverage will lead to overall improvement.&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;So far the coverage discussion has centered around coverage of the code by tests (functions, lines, etc.). Another type of coverage is feature coverage or behavior coverage. For feature coverage, the emphasis is on identifying the committed features in a particular release and creating tests for their implementation. For behavior coverage, the emphasis is on identifying the CUJs and creating the appropriate tests to track them. Again, understanding your “uncovered” features and behaviors can be a useful metric in your understanding of the risks.&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h2 style="text-align: left;"&gt;Use feedback from the field to improve your process&lt;/h2&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;A very important part of understanding and improving your qualification process is the feedback received from the field once the software has been released. Having a process that tracks outages and bugs and other issues, in the form of action items to improve qualification, is critical for minimizing the risks of regressions in subsequent releases. Moreover, the action items should be such that they (1) emphasize filling the testing gap as early as possible in the qualification process and (2) address strategic issues such as the lack of testing of a particular type such as load or fault tolerance testing. And again, this is why it is important to document your qualification process so that you can reevaluate it in light of the data you obtain from the field.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h2 style="text-align: left;"&gt;Summary&lt;/h2&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Creating a comprehensive qualification process and testing strategy to answer the question “How much testing is enough?” can be a complex task. Hopefully the tips given here can help you with this. In summary:&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Document your process or strategy.&lt;/li&gt;&lt;li&gt;Have a solid base of unit tests.&lt;/li&gt;&lt;li&gt;Don’t skimp on integration testing.&lt;/li&gt;&lt;li&gt;Perform end-to-end testing for Critical User Journeys.&lt;/li&gt;&lt;li&gt;Understand and implement the other tiers of testing.&lt;/li&gt;&lt;li&gt;Understand your coverage of code and functionality.&lt;/li&gt;&lt;li&gt;Use feedback from the field to improve your process.&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h2 style="text-align: left;"&gt;References&lt;/h2&gt;&lt;div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;&lt;a href="https://testing.googleblog.com/2020/11/fixing-test-hourglass.html"&gt;Fixing a test hourglass&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://docs.google.com/presentation/d/15gNk21rjer3xo-b1ZqyQVGebOp_aPvHU3YH7YnOMxtE/edit#slide=id.g437663ce1_53_98"&gt;Testing Pyramid&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://testing.googleblog.com/2016/06/the-inquiry-method-for-test-planning.html"&gt;The Inquiry Method for test Planning&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://testing.googleblog.com/2020/12/test-flakiness-one-of-main-challenges.html"&gt;Test Flakiness - One of the Main Challenges of Automated Testing&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://testing.googleblog.com/2013/07/testing-on-toilet-know-your-test-doubles.html"&gt;Testing on the Toilet: Know Your Test Doubles&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://testing.googleblog.com/2013/06/testing-on-toilet-fake-your-way-to.html"&gt;Testing on the Toilet: Fake Your Way to Better Tests&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;/div&gt;</content><link href="http://testing.googleblog.com/feeds/2773198969790210790/comments/default" rel="replies" title="Post Comments" type="application/atom+xml"/><link href="http://testing.googleblog.com/2021/06/how-much-testing-is-enough.html#comment-form" rel="replies" title="4 Comments" type="text/html"/><link href="http://www.blogger.com/feeds/15045980/posts/default/2773198969790210790" rel="edit" type="application/atom+xml"/><link href="http://www.blogger.com/feeds/15045980/posts/default/2773198969790210790" rel="self" type="application/atom+xml"/><link href="http://testing.googleblog.com/2021/06/how-much-testing-is-enough.html" rel="alternate" title="How Much Testing is Enough?" type="text/html"/><author><name>Google Testing Bloggers</name><uri>http://www.blogger.com/profile/03153388556673050910</uri><email>noreply@blogger.com</email><gd:image height="7" rel="http://schemas.google.com/g/2005#thumbnail" src="http://3.bp.blogspot.com/-H1YTvw0kdFA/UTf_IXv4N2I/AAAAAAAAABY/ghqaO2KBOSA/s1600/gtb3.png" width="32"/></author><thr:total>4</thr:total></entry><entry><id>tag:blogger.com,1999:blog-15045980.post-3647813866660315609</id><published>2021-04-12T08:16:00.001-07:00</published><updated>2021-04-13T04:29:52.199-07:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="Goran Petrovic"/><category scheme="http://www.blogger.com/atom/ns#" term="mutation testing"/><title type="text">Mutation Testing</title><content type="html">&lt;style&gt;  .code-reserved {     color: #9c27b0;   }   .code-method,   .code-attribute {     color: #3367d6;   }   .code-string {     color: #0f9d58;   }   .code-numerical {     color: #c53929;   }   .code-changed-added {     background-color: #d9ead3;     border: 1px solid green;   }   .code-changed-removed {     background-color: #f4cccc;     border: 1px solid red;   } &lt;/style&gt; By Goran Petrovic&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h2 style="text-align: left;"&gt;History  &lt;/h2&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;It’s been a long-standing tradition of my team to organize hackathons twice a year. In weeks prior to the hackathon, the team gathers and brainstorms ideas for projects, ranging from improving the testing infrastructure or an existing process, to trying out a wild idea they’ve had for some time. Just before the hackathon, the team rates the accumulated ideas on a coolness-impact scale: how much fun does a project sound vs. how impactful could it potentially be; while impact is important, for hackathons, fun is non-negotiable. Then, engineers who are excited to work on some of the proposed projects subscribe and form teams. It was no different in the cold winter of 2013, where among the plethora of cool and wild ideas, one was to prototype &lt;b&gt;Mutation testing.&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;For those who are not familiar with it, mutation testing is a method of evaluating test quality by injecting bugs into the code and seeing whether the tests detect the fault or not. The more injected bugs the tests catch, the better they are. Here’s an example:&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Negating the &lt;i&gt;if&lt;/i&gt; condition.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;  &lt;div style="overflow-x: auto;"&gt;&lt;table class="my-bordered-table" style="width: 613px;"&gt;&lt;tbody&gt;&lt;tr&gt;  &lt;td style="background-color: #e0e0e0; vertical-align: top; width: 607px;"&gt;&lt;pre style="background-color: #e0e0e0; border: 0px; color: black; margin: 0px; padding-bottom: 0px; padding-left: 0px; padding-top: 0px;"&gt;&lt;span style="font-family: consolas, &amp;quot;courier new&amp;quot;, courier, monospace;"&gt;&lt;span class="code-reserved"&gt;def&lt;/span&gt; checkout(cart):&lt;br /&gt;  &lt;span class="code-reserved"&gt;if &lt;span class="code-changed-added"&gt;not&lt;/span&gt;&lt;/span&gt; cart.items:&lt;br /&gt;    &lt;span class="code-reserved"&gt;throw&lt;/span&gt; &lt;span class="code-method"&gt;Error&lt;/span&gt;(&lt;span class="code-string"&gt;"cart empty"&lt;/span&gt;)&lt;br /&gt;  &lt;span class="code-reserved"&gt;return&lt;/span&gt; checkout_internal(cart)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;  &lt;td style="background-color: #e0e0e0; vertical-align: top; width: 607px;"&gt;&lt;pre style="background-color: #e0e0e0; border: 0px; color: black; margin: 0px; padding-bottom: 0px; padding-left: 0px; padding-top: 0px;"&gt;&lt;span style="font-family: consolas, &amp;quot;courier new&amp;quot;, courier, monospace;"&gt;&lt;span class="code-reserved"&gt;def&lt;/span&gt; checkout(cart):&lt;br /&gt;  &lt;span class="code-reserved"&gt;if&lt;/span&gt; cart.items:&lt;br /&gt;    &lt;span class="code-reserved"&gt;throw&lt;/span&gt; &lt;span class="code-method"&gt;Error&lt;/span&gt;(&lt;span class="code-string"&gt;"cart empty"&lt;/span&gt;)&lt;br /&gt;  &lt;span class="code-reserved"&gt;return&lt;/span&gt; checkout_internal(cart)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;   &lt;/tbody&gt;&lt;/table&gt;&lt;br /&gt;&lt;/div&gt;   If a test fails, we say it kills the mutant, and if no tests fail, we say that the mutant is alive.&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;By the end of the hackathon, mutagenesis was implemented for C++ and Python, and a prototype was born: a shell script that evaluates generated mutants in a diff (pull request) and textually reports live mutants in the files in the diff. A year passed with no work done on the project, before I started to work on it in my &lt;a href="https://en.wikipedia.org/wiki/20%25_Project"&gt;20% time&lt;/a&gt;. I had no idea what Mutation testing was at the time, so I researched and read papers on the topic, and collected lots of ideas on what I should focus on.&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;h2&gt;From Prototype To Launch&lt;/h2&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;I quickly realized that the hackathon crew did not calculate the Mutation score, the ratio of mutants detected by tests, which is a prominent metric in the research literature and the holy grail of evaluating test quality, but just enumerated live mutants. My first exposure to mutants was just running the tool on the mutagenesis code itself and trying to understand the report. I was immediately overwhelmed: after a long execution time, I was facing thousands of mutants in just a handful of files. I tried going through a couple, but after a few minutes I grew tired and moved on with my main project, which happened to be on Google Shopping. In the following months, I stayed away from my 20% project, but I kept thinking about it, bugging my colleagues and friends about the ideas I had to make mutation testing work for us. After many months of brainstorming and discussions, almost a year after the original hackathon project, I was ready to design the Mutation Testing Service.&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;I faced two big problems. First, I could force myself to go through lots of mutants, and maybe find a useful one that would prompt me to write a test case, but I could not force others, not even my teammates. Second, the vast majority of mutants were simply bad. Here are some examples:&lt;/div&gt;&lt;/div&gt; &lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Replacing division with subtraction, but in a logging statement.&lt;/div&gt;&lt;div style="overflow-x: auto;"&gt;&lt;table class="my-bordered-table" style="width: 613px;"&gt;&lt;tbody&gt;&lt;tr&gt;  &lt;td style="background-color: #e0e0e0; vertical-align: top; width: 607px;"&gt;&lt;pre style="background-color: #e0e0e0; border: 0px; color: black; margin: 0px; padding-bottom: 0px; padding-left: 0px; padding-top: 0px;"&gt;&lt;span style="font-family: consolas, &amp;quot;courier new&amp;quot;, courier, monospace;"&gt;log.&lt;span class="code-method"&gt;Infof&lt;/span&gt;(&lt;span class="code-string"&gt;"Found %d (%.2f %%)!"&lt;/span&gt;, e,       &lt;br /&gt;           float64(e)*&lt;span class="code-numerical"&gt;100.0&lt;/span&gt; &lt;span class="code-changed-removed"&gt;/&lt;/span&gt; total)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;  &lt;td style="background-color: #e0e0e0; vertical-align: top; width: 607px;"&gt;&lt;pre style="background-color: #e0e0e0; border: 0px; color: black; margin: 0px; padding-bottom: 0px; padding-left: 0px; padding-top: 0px;"&gt;&lt;span style="font-family: consolas, &amp;quot;courier new&amp;quot;, courier, monospace;"&gt;log.&lt;span class="code-method"&gt;Infof&lt;/span&gt;(&lt;span class="code-string"&gt;"Found %d (%.2f %%)!"&lt;/span&gt;, e,&lt;br /&gt;           float64(e)*&lt;span class="code-numerical"&gt;100.0&lt;/span&gt; &lt;span class="code-changed-added"&gt;-&lt;/span&gt; total)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;   &lt;/tbody&gt;&lt;/table&gt;&lt;br /&gt;&lt;/div&gt;  &lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Appending number 1 to an error message.&amp;nbsp;&lt;/div&gt;&lt;div style="overflow-x: auto;"&gt;&lt;table class="my-bordered-table" style="width: 613px;"&gt;&lt;tbody&gt;&lt;tr&gt;  &lt;td style="background-color: #e0e0e0; vertical-align: top; width: 607px;"&gt;&lt;pre style="background-color: #e0e0e0; border: 0px; color: black; margin: 0px; padding-bottom: 0px; padding-left: 0px; padding-top: 0px;"&gt;&lt;span style="font-family: consolas, &amp;quot;courier new&amp;quot;, courier, monospace;"&gt;&lt;span class="code-method"&gt;Error&lt;/span&gt;.create(((key + &lt;span class="code-string"&gt;" disabled"&lt;/span&gt;)));&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;  &lt;td style="background-color: #e0e0e0; vertical-align: top; width: 607px;"&gt;&lt;pre style="background-color: #e0e0e0; border: 0px; color: black; margin: 0px; padding-bottom: 0px; padding-left: 0px; padding-top: 0px;"&gt;&lt;span style="font-family: consolas, &amp;quot;courier new&amp;quot;, courier, monospace;"&gt;&lt;span class="code-method"&gt;Error&lt;/span&gt;.create(((key + &lt;span class="code-string"&gt;" disabled"&lt;/span&gt;) &lt;span class="code-changed-added"&gt;+ &lt;span class="code-numerical"&gt;1&lt;/span&gt;&lt;/span&gt;));&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;   &lt;/tbody&gt;&lt;/table&gt;&lt;br /&gt;&lt;/div&gt; &lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;Replacing &lt;i&gt;greater than with less than&lt;/i&gt; when comparing length of a collection to zero.&lt;/div&gt;&lt;/div&gt;&lt;div style="overflow-x: auto;"&gt;&lt;table class="my-bordered-table" style="width: 613px;"&gt;&lt;tbody&gt;&lt;tr&gt;  &lt;td style="background-color: #e0e0e0; vertical-align: top; width: 607px;"&gt;&lt;pre style="background-color: #e0e0e0; border: 0px; color: black; margin: 0px; padding-bottom: 0px; padding-left: 0px; padding-top: 0px;"&gt;&lt;span style="font-family: consolas, &amp;quot;courier new&amp;quot;, courier, monospace;"&gt;showCart := len(cart.GetItems()) &lt;span class="code-changed-removed"&gt;&amp;gt;&lt;/span&gt; &lt;span class="code-numerical"&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;  &lt;td style="background-color: #e0e0e0; vertical-align: top; width: 607px;"&gt;&lt;pre style="background-color: #e0e0e0; border: 0px; color: black; margin: 0px; padding-bottom: 0px; padding-left: 0px; padding-top: 0px;"&gt;&lt;span style="font-family: consolas, &amp;quot;courier new&amp;quot;, courier, monospace;"&gt;showCart := len(cart.GetItems()) &lt;span class="code-changed-added"&gt;&amp;lt;&lt;/span&gt; &lt;span class="code-numerical"&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;   &lt;/tbody&gt;&lt;/table&gt;&lt;br /&gt;&lt;/div&gt;  &lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;Replacing the idiomatic python check for whether the module is imported or executed as main.&lt;/div&gt;&lt;/div&gt;&lt;div style="overflow-x: auto;"&gt;&lt;table class="my-bordered-table" style="width: 613px;"&gt;&lt;tbody&gt;&lt;tr&gt;  &lt;td style="background-color: #e0e0e0; vertical-align: top; width: 607px;"&gt;&lt;pre style="background-color: #e0e0e0; border: 0px; color: black; margin: 0px; padding-bottom: 0px; padding-left: 0px; padding-top: 0px;"&gt;&lt;span style="font-family: consolas, &amp;quot;courier new&amp;quot;, courier, monospace;"&gt;&lt;span class="code-reserved"&gt;if&lt;/span&gt; (__name__ &lt;span class="code-changed-removed"&gt;==&lt;/span&gt; &lt;span class="code-string"&gt;'__main__'&lt;/span&gt;):&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;  &lt;td style="background-color: #e0e0e0; vertical-align: top; width: 607px;"&gt;&lt;pre style="background-color: #e0e0e0; border: 0px; color: black; margin: 0px; padding-bottom: 0px; padding-left: 0px; padding-top: 0px;"&gt;&lt;span style="font-family: consolas, &amp;quot;courier new&amp;quot;, courier, monospace;"&gt;&lt;span class="code-reserved"&gt;if&lt;/span&gt; (__name__ &lt;span class="code-changed-added"&gt;!=&lt;/span&gt; &lt;span class="code-string"&gt;'__main__'&lt;/span&gt;):&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;   &lt;/tbody&gt;&lt;/table&gt;&lt;br /&gt;&lt;/div&gt; &lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Changing python’s string concatenation (+) to string multiplication (*).&lt;/div&gt;&lt;div style="overflow-x: auto;"&gt;&lt;table class="my-bordered-table" style="width: 613px;"&gt;&lt;tbody&gt;&lt;tr&gt;  &lt;td style="background-color: #e0e0e0; vertical-align: top; width: 607px;"&gt;&lt;pre style="background-color: #e0e0e0; border: 0px; color: black; margin: 0px; padding-bottom: 0px; padding-left: 0px; padding-top: 0px;"&gt;&lt;span style="font-family: consolas, &amp;quot;courier new&amp;quot;, courier, monospace;"&gt;message = (&lt;span class="code-string"&gt;'id '&lt;/span&gt; &lt;span class="code-changed-removed"&gt;+&lt;/span&gt; run_idx)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;  &lt;td style="background-color: #e0e0e0; vertical-align: top; width: 607px;"&gt;&lt;pre style="background-color: #e0e0e0; border: 0px; color: black; margin: 0px; padding-bottom: 0px; padding-left: 0px; padding-top: 0px;"&gt;&lt;span style="font-family: consolas, &amp;quot;courier new&amp;quot;, courier, monospace;"&gt;message = (&lt;span class="code-string"&gt;'id '&lt;/span&gt; &lt;span class="code-changed-added"&gt;*&lt;/span&gt; run_idx)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;   &lt;/tbody&gt;&lt;/table&gt;&lt;br /&gt;&lt;/div&gt;  &lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Changing a tuning parameter.&lt;/div&gt;&lt;div style="overflow-x: auto;"&gt;&lt;table class="my-bordered-table" style="width: 613px;"&gt;&lt;tbody&gt;&lt;tr&gt;  &lt;td style="background-color: #e0e0e0; vertical-align: top; width: 607px;"&gt;&lt;pre style="background-color: #e0e0e0; border: 0px; color: black; margin: 0px; padding-bottom: 0px; padding-left: 0px; padding-top: 0px;"&gt;&lt;span style="font-family: consolas, &amp;quot;courier new&amp;quot;, courier, monospace;"&gt;slo = (&lt;span class="code-numerical"&gt;20&lt;/span&gt; * time.&lt;span class="code-attribute"&gt;Second&lt;/span&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;  &lt;td style="background-color: #e0e0e0; vertical-align: top; width: 607px;"&gt;&lt;pre style="background-color: #e0e0e0; border: 0px; color: black; margin: 0px; padding-bottom: 0px; padding-left: 0px; padding-top: 0px;"&gt;&lt;span style="font-family: consolas, &amp;quot;courier new&amp;quot;, courier, monospace;"&gt;slo = (&lt;span class="code-numerical"&gt;20&lt;/span&gt; * time.&lt;span class="code-attribute"&gt;Second&lt;/span&gt;) &lt;span class="code-changed-added"&gt;+ &lt;span class="code-numerical"&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;   &lt;/tbody&gt;&lt;/table&gt;&lt;br /&gt;&lt;/div&gt; &lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Changing a network timeout, but the network layer is mocked in the tests.&lt;/div&gt;&lt;div style="overflow-x: auto;"&gt;&lt;table class="my-bordered-table" style="width: 613px;"&gt;&lt;tbody&gt;&lt;tr&gt;  &lt;td style="background-color: #e0e0e0; vertical-align: top; width: 607px;"&gt;&lt;pre style="background-color: #e0e0e0; border: 0px; color: black; margin: 0px; padding-bottom: 0px; padding-left: 0px; padding-top: 0px;"&gt;&lt;span style="font-family: consolas, &amp;quot;courier new&amp;quot;, courier, monospace;"&gt;_TIMEOUT = (&lt;span class="code-numerical"&gt;60&lt;/span&gt; &lt;span class="code-changed-removed"&gt;*&lt;/span&gt; &lt;span class="code-numerical"&gt;10&lt;/span&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;  &lt;td style="background-color: #e0e0e0; vertical-align: top; width: 607px;"&gt;&lt;pre style="background-color: #e0e0e0; border: 0px; color: black; margin: 0px; padding-bottom: 0px; padding-left: 0px; padding-top: 0px;"&gt;&lt;span style="font-family: consolas, &amp;quot;courier new&amp;quot;, courier, monospace;"&gt;_TIMEOUT = (&lt;span class="code-numerical"&gt;60&lt;/span&gt; &lt;span class="code-changed-added"&gt;/&lt;/span&gt; &lt;span class="code-numerical"&gt;10&lt;/span&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;   &lt;/tbody&gt;&lt;/table&gt;&lt;br /&gt;&lt;/div&gt; &lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Subtracting from -∞.&lt;/div&gt;&lt;div style="overflow-x: auto;"&gt;&lt;table class="my-bordered-table" style="width: 613px;"&gt;&lt;tbody&gt;&lt;tr&gt;  &lt;td style="background-color: #e0e0e0; vertical-align: top; width: 607px;"&gt;&lt;pre style="background-color: #e0e0e0; border: 0px; color: black; margin: 0px; padding-bottom: 0px; padding-left: 0px; padding-top: 0px;"&gt;&lt;span style="font-family: consolas, &amp;quot;courier new&amp;quot;, courier, monospace;"&gt;df = df.replace(&lt;br /&gt;  [numpy.inf, -numpy.inf],&lt;br /&gt;  numpy.nan&lt;br /&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;  &lt;td style="background-color: #e0e0e0; vertical-align: top; width: 607px;"&gt;&lt;pre style="background-color: #e0e0e0; border: 0px; color: black; margin: 0px; padding-bottom: 0px; padding-left: 0px; padding-top: 0px;"&gt;&lt;span style="font-family: consolas, &amp;quot;courier new&amp;quot;, courier, monospace;"&gt;df = df.replace(&lt;br /&gt;  [numpy.inf, -numpy.inf &lt;span class="code-changed-added"&gt;- &lt;span class="code-numerical"&gt;1&lt;/span&gt;&lt;/span&gt;],&lt;br /&gt;  numpy.nan&lt;br /&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;   &lt;/tbody&gt;&lt;/table&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;&lt;div&gt;Yes, the tests did not detect these mutants, but we would not want such tests anyway. Many of them would produce fragile, &lt;a href="https://testing.googleblog.com/2015/01/testing-on-toilet-change-detector-tests.html"&gt;change-detector tests&lt;/a&gt;. We later settled on calling them &lt;b&gt;unproductive mutants&lt;/b&gt;: writing tests for those mutants would make the test suite worse, not better.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt; &lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;I realized that I needed to suppress these types of mutants: if I reported them, nobody would use mutation testing, myself included. Most of the mutants were not useful, and that is a waste of developer attention. The onus was on me to create a better tool. I set out to try various heuristics by looking at the report and suppressing mutants that I found unproductive. I encoded the heuristics in AST (&lt;a href="https://en.wikipedia.org/wiki/Abstract_syntax_tree"&gt;Abstract Syntax Tree&lt;/a&gt;) matching rules, and I dubbed the AST nodes which contained unproductive mutants as &lt;b&gt;arid nodes&lt;/b&gt;. In the beginning, there were only a few rules in the system, but that was enough to make me feel confident that my colleagues would give it a try.&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;The other big issue was the sheer number of mutants. With five or more in a line, hundreds in a file, it was a challenge to display them, and even if I managed that, nobody would go through them anyway. I quickly realized that they shouldn’t: it took a lot of time for me to go through the mutants, and, while some pointed me to a hole in my test suite, most were useless, and many of them, especially ones in the same line, redundant. I did not need every possible combination of operators changed to tell me that my test for that condition was insufficient; one was just fine. That was my first decision on mutation testing: to report at most one mutant in a line. This was a quick and easy decision to make, because, if you’ve ever used a Code review system, you know that having more makes the review noisy and harder to do. Another reason why it was such an easy decision was that it would have been computationally prohibitively expensive to calculate all mutants, and I could have thrown my 20% project down the drain. I call it limitation-driven development :)&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Of course, the idea was to report live mutants during &lt;a href="https://research.google/pubs/pub47025/"&gt;Code review&lt;/a&gt;. Code review is the perfect time in the engineering process to surface useful findings about the code being changed, and integrating into the existing developer process has the &lt;a href="https://research.google/pubs/pub43477/"&gt;highest chance&lt;/a&gt; that the developers will take action. This seemed like the most normal thing in the world: we had hundreds of &lt;a href="https://static.googleusercontent.com/media/research.google.com/en//pubs/archive/43322.pdf"&gt;analyzers&lt;/a&gt; and all engineers were used to receiving findings from various analyses of their code. It took an outsider to point out that this was a strange approach: mutation testing was classically run on the whole program and the mutation score calculated and used as guidance.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;This is what a Mutant finding looks like in the Code review tool:&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/--aN_4XMCTb8/YHDnTj3u-lI/AAAAAAAAAfA/_L2ZFIq3T0EcLkgg_Q_J3ywqVyV7ky_qQCLcBGAsYHQ/s607/Code%2BReview%2BImage%2Bfor%2BMutation%2BTesting%2BArticle.jpg" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="430" data-original-width="607" src="https://1.bp.blogspot.com/--aN_4XMCTb8/YHDnTj3u-lI/AAAAAAAAAfA/_L2ZFIq3T0EcLkgg_Q_J3ywqVyV7ky_qQCLcBGAsYHQ/s16000/Code%2BReview%2BImage%2Bfor%2BMutation%2BTesting%2BArticle.jpg" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;Mutation Testing at Google is a dynamic analyzer of code changes that surfaces mutants during Code review by posting code findings. In terms of infrastructure, it consists of three main parts: the &lt;i&gt;change listener&lt;/i&gt;, the &lt;i&gt;analyzer&lt;/i&gt;, and many &lt;i&gt;mutagenesis servers&lt;/i&gt;, one for each language.&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-zdEPosZhI0o/YHDn654mV9I/AAAAAAAAAfI/TiZ1Y6bJn5kcnv4JvzFdGeInr8sTk_3vwCLcBGAsYHQ/s711/Block%2BDiagram%2Bfor%2BMutation%2BTesting%2BArticle.jpg" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="466" data-original-width="711" height="421" src="https://1.bp.blogspot.com/-zdEPosZhI0o/YHDn654mV9I/AAAAAAAAAfI/TiZ1Y6bJn5kcnv4JvzFdGeInr8sTk_3vwCLcBGAsYHQ/w640-h421/Block%2BDiagram%2Bfor%2BMutation%2BTesting%2BArticle.jpg" width="640" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;Each event during the Code review is announced using a publisher-subscriber pattern, and any interested party can listen, and react, to these events. When a change is sent for Code review, many things happen: linters are run, automated tests are evaluated, coverage is calculated, and for the users of mutation testing, mutants are generated and evaluated. Listening on all events coming from the Code review system, the &lt;i&gt;listener&lt;/i&gt; schedules a mutation run on the &lt;i&gt;analyzer&lt;/i&gt;.&amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The first thing the analyzer does is get the code coverage results for the patch in question; from it, the analyzer can extrapolate which tests cover which lines of source code. This is a very useful piece of information, because running the minimum set of tests that can kill a mutant is crucial; if we just ran all tests that were linked in, or covered the project, that would be prohibitively computationally expensive&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;Next, for each covered line in each file in the patch, a &lt;i&gt;mutagenesis server&lt;/i&gt; for the language in question is asked to produce a mutant. The mutagenesis server parses the file, traverses its AST, and applies the mutators in the requested order (as per mutation context), ignoring arid nodes, nodes in uncovered lines and in lines that are not affected by the proposed patch.&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;When the &lt;i&gt;analyzer&lt;/i&gt; assembles all mutants, it patches them one by one to a version control context and then evaluates all the tests for each mutant in parallel. For mutants for which all tests pass, the &lt;i&gt;analyzer&lt;/i&gt; surfaces a finding for the code author and reviewers, and is done for the time being.&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Because the Code review is a laborious and dynamic process, with many rounds of comments from reviewers and many automated findings from hundreds of different analyzers, there can be many snapshots as the patch evolves: adoption of recommendations from reviewers or accepting proposed changes from linters yields many code states. Mutation testing first runs after coverage is available, and then it runs for each subsequent snapshot: developers like to see the fruits of their labor: when they write a test to kill a mutant, they want to see the mutant killed.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;I launched Mutation testing for the Shopping Engineering Productivity team in late 2015. Around 15 of my colleagues were subjected to Mutant findings during their Code reviews, and it was a bumpy start. Each finding has two buttons: &lt;b&gt;Please fix&lt;/b&gt; and &lt;b&gt;Not useful&lt;/b&gt;, as you can see on the Code review screenshot above. A reviewer can instruct the code author to fix some finding (e.g. a ClangTidy finding might point out that an object is being unnecessarily copied and suggest using a reference instead, or a Mutant finding might point out that code is not well tested). The author and all reviewers can give feedback to the author of the finding/analyzer that their finding is not useful. This is a source of valuable information, and I made use of it. For each mutant that was deemed not useful, I’d check it out and see whether I could generalize from it and add a new rule to my arid node heuristics. Slowly, I collected several hundred heuristics, many of them generally applicable, but many also tied to internal stuff, like monitoring frameworks. More and more, I noticed that just marking nodes as arid and suppressing mutants in them was not enough on its own; a more powerful mechanism was required to reduce this noise even further. Take a look at these motivating examples:&lt;/div&gt;   &lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Changing the condition of an if statement, but the body is arid (a logging statement).&lt;/div&gt;&lt;div style="overflow-x: auto;"&gt;&lt;table class="my-bordered-table" style="width: 613px;"&gt;&lt;tbody&gt;&lt;tr&gt;  &lt;td style="background-color: #e0e0e0; vertical-align: top; width: 607px;"&gt;&lt;pre style="background-color: #e0e0e0; border: 0px; color: black; margin: 0px; padding-bottom: 0px; padding-left: 0px; padding-top: 0px;"&gt;&lt;span style="font-family: consolas, &amp;quot;courier new&amp;quot;, courier, monospace;"&gt;&lt;span class="code-reserved"&gt;if&lt;/span&gt; _, err := &lt;span class="code-method"&gt;Del&lt;/span&gt;(req); err &lt;span class="code-changed-removed"&gt;!=&lt;/span&gt; &lt;span class="code-reserved"&gt;nil&lt;/span&gt; {&lt;br /&gt;  log.&lt;span class="code-method"&gt;Errorf&lt;/span&gt;(&lt;span class="code-string"&gt;"cleanup failed: %v”&lt;/span&gt;, cerr)&lt;br /&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;  &lt;td style="background-color: #e0e0e0; vertical-align: top; width: 607px;"&gt;&lt;pre style="background-color: #e0e0e0; border: 0px; color: black; margin: 0px; padding-bottom: 0px; padding-left: 0px; padding-top: 0px;"&gt;&lt;span style="font-family: consolas, &amp;quot;courier new&amp;quot;, courier, monospace;"&gt;&lt;span class="code-reserved"&gt;if&lt;/span&gt; _, err := c.&lt;span class="code-method"&gt;Del&lt;/span&gt;(req); err &lt;span class="code-changed-added"&gt;==&lt;/span&gt; &lt;span class="code-reserved"&gt;nil&lt;/span&gt; {&lt;br /&gt;  log.&lt;span class="code-method"&gt;Errorf&lt;/span&gt;(&lt;span class="code-string"&gt;"cleanup failed: %v”&lt;/span&gt;, cerr)&lt;br /&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;   &lt;/tbody&gt;&lt;/table&gt;&lt;br /&gt;&lt;/div&gt; &lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;Similar pattern, but in C++:&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="overflow-x: auto;"&gt;&lt;table class="my-bordered-table" style="width: 613px;"&gt;&lt;tbody&gt;&lt;tr&gt;  &lt;td style="background-color: #e0e0e0; vertical-align: top; width: 607px;"&gt;&lt;pre style="background-color: #e0e0e0; border: 0px; color: black; margin: 0px; padding-bottom: 0px; padding-left: 0px; padding-top: 0px;"&gt;&lt;span style="font-family: consolas, &amp;quot;courier new&amp;quot;, courier, monospace;"&gt;&lt;span class="code-reserved"&gt;if&lt;/span&gt; (&lt;span class="code-changed-added"&gt;!&lt;/span&gt;(!status.ok())) {&lt;br /&gt;    LOG(WARNING) &amp;lt;&amp;lt; &lt;span class="code-string"&gt;"Updating dependency graph failed"&lt;/span&gt; &amp;lt;&amp;lt; status;&lt;br /&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;   &lt;/tbody&gt;&lt;/table&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;&lt;div&gt;&lt;div&gt;I settled for a transitive rule: an AST node is arid if I say it’s arid, or if it’s a compound statement and all its body is also arid. This made sense in retrospect, but it took some looking at reported examples of unproductive mutants to crystalize. Because the logging statements are arid, the whole &lt;i&gt;if&lt;/i&gt; statement’s body is arid, and hence, the if statement itself is arid, including its condition.&amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;In the summer of 2015, my intern, Małgorzata Salawa, and I got mutagenesis implemented for C++, Go, Python, and Java, and having transitive arid node detection and surfacing at most a single mutant per line and 7 per file, we called it a v1.0 and launched. Mutation testing was always an opt-in service, and in the beginning had a few users (93 code reviews in Q1 of 2016), but over time it ramped up to 2,500 users in February 2017, to tens of thousands today. The early days were crucial to get the users’ feedback and extend the arid node heuristics ever further. In the beginning, the &lt;i&gt;Not Useful&lt;/i&gt; rate was around 80%, and this was already with some heuristics and at most a single mutant per line. With time, I got it down to around 15%. I was always aware that getting the rate to 0% was impossible, because of the nature of the mutants: sometimes, the mutant would produce an equivalent behavior as the original, and there was no way to avoid that fully.&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt; &lt;div&gt;Changing cached lookup by removing the cache and always recalculating yields functionally equivalent code, undetectable by conventional testing.&lt;/div&gt;&lt;div style="overflow-x: auto;"&gt;&lt;table class="my-bordered-table" style="width: 613px;"&gt;&lt;tbody&gt;&lt;tr&gt;  &lt;td style="background-color: #e0e0e0; vertical-align: top; width: 607px;"&gt;&lt;pre style="background-color: #e0e0e0; border: 0px; color: black; margin: 0px; padding-bottom: 0px; padding-left: 0px; padding-top: 0px;"&gt;&lt;span style="font-family: consolas, &amp;quot;courier new&amp;quot;, courier, monospace;"&gt;func (s *Serv) calculate(&lt;span class="code-reserved"&gt;in&lt;/span&gt; int32) &lt;span class="code-reserved"&gt;int&lt;/span&gt; {&lt;span class="code-changed-added"&gt;&lt;br /&gt;  &lt;span class="code-reserved"&gt;if&lt;/span&gt; val, ok := &lt;span class="code-reserved"&gt;if&lt;/span&gt; s.cache[&lt;span class="code-reserved"&gt;in&lt;/span&gt;] {&lt;br /&gt;    &lt;span class="code-reserved"&gt;return&lt;/span&gt; val  &lt;br /&gt;  }&lt;/span&gt;&lt;br /&gt;  val := s.calc(&lt;span class="code-reserved"&gt;in&lt;/span&gt;)&lt;br /&gt;  s.cache[&lt;span class="code-reserved"&gt;in&lt;/span&gt;] = val&lt;br /&gt;  &lt;span class="code-reserved"&gt;return&lt;/span&gt; val&lt;br /&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;  &lt;td style="background-color: #e0e0e0; vertical-align: top; width: 607px;"&gt;&lt;pre style="background-color: #e0e0e0; border: 0px; color: black; margin: 0px; padding-bottom: 0px; padding-left: 0px; padding-top: 0px;"&gt;&lt;span style="font-family: consolas, &amp;quot;courier new&amp;quot;, courier, monospace;"&gt;func (s *Serv) calculate(&lt;span class="code-reserved"&gt;in&lt;/span&gt; int32) &lt;span class="code-reserved"&gt;int&lt;/span&gt; {&lt;span class="code-changed-removed"&gt;&lt;br /&gt;                                &lt;br /&gt;              &lt;br /&gt;   &lt;br /&gt;&lt;/span&gt;  val := s.calc(&lt;span class="code-reserved"&gt;in&lt;/span&gt;)&lt;br /&gt;  s.cache[&lt;span class="code-reserved"&gt;in&lt;/span&gt;] = val&lt;br /&gt;  &lt;span class="code-reserved"&gt;return&lt;/span&gt; val&lt;br /&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;   &lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;I was both surprised and happy that I could lower the &lt;i&gt;Not useful&lt;/i&gt; rate to under 50%.&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;h2&gt;Mutation Context&lt;/h2&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;As time went by, I added support for more languages. In early 2017, I implemented support for JavaScript and TypeScript, and later in the year I added support for Dart. In 2018 I added support for &lt;a href="https://github.com/google/zetasql"&gt;ZetaSQL&lt;/a&gt;. And finally, in early 2020, I added support for Kotlin as it became more and more popular in the Android world.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;I kept track of various stats for all mutants: their survival rates and &lt;i&gt;Please fix/Not useful&lt;/i&gt; ratios.&amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The worst performing mutator was ABS(&lt;i&gt;Absolute Value Mutator&lt;/i&gt;) that would replace an &lt;i&gt;expression&lt;/i&gt; with &lt;i&gt;±abs(expression),&lt;/i&gt; for example:&lt;/div&gt;  &lt;div style="overflow-x: auto;"&gt;&lt;table class="my-bordered-table" style="width: 613px;"&gt;&lt;tbody&gt;&lt;tr&gt;  &lt;td style="background-color: #e0e0e0; vertical-align: top; width: 607px;"&gt;&lt;pre style="background-color: #e0e0e0; border: 0px; color: black; margin: 0px; padding-bottom: 0px; padding-left: 0px; padding-top: 0px;"&gt;&lt;span style="font-family: consolas, &amp;quot;courier new&amp;quot;, courier, monospace;"&gt;absl::&lt;span class="code-method"&gt;Minutes&lt;/span&gt;(&lt;span class="code-numerical"&gt;10&lt;/span&gt;) - elapsed;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;  &lt;td style="background-color: #e0e0e0; vertical-align: top; width: 607px;"&gt;&lt;pre style="background-color: #e0e0e0; border: 0px; color: black; margin: 0px; padding-bottom: 0px; padding-left: 0px; padding-top: 0px;"&gt;&lt;span style="font-family: consolas, &amp;quot;courier new&amp;quot;, courier, monospace;"&gt;absl::&lt;span class="code-method"&gt;Minutes&lt;/span&gt;(&lt;span class="code-changed-added"&gt;-abs&lt;/span&gt;(&lt;span class="code-numerical"&gt;10&lt;/span&gt;)) - elapsed;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;   &lt;/tbody&gt;&lt;/table&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="overflow-x: auto;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="overflow-x: auto;"&gt;Looking at the examples, I had to agree. Because the feedback was predominantly negative for this mutator, I quickly completely disabled it for all languages.&lt;/div&gt;&lt;div style="overflow-x: auto;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="overflow-x: auto;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="overflow-x: auto;"&gt;&lt;div style="overflow-x: auto;"&gt;I soon noticed that the SBR (&lt;i&gt;Statement Block Removal&lt;/i&gt;) mutator, which deletes statements or whole blocks, is the most common one, and that made sense: while mutating a logical or arithmetic operator required the existence of such an operator in the code to be mutated, any line of code was eligible for deletion. Mutants generated by code deletion, though, did not have the best reported usefulness, or productivity. In fact, almost all other mutators generated more productive mutants than the SBR, and that got me thinking: not all code is the same; a condition within an &lt;i&gt;if&lt;/i&gt; statement that contains a &lt;i&gt;return&lt;/i&gt; statement is not the same as a condition in another location.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;Out of this, an idea was born: context-based mutator selection. For each line, I would randomly shuffle mutator operators and pick one by one until one generated a mutant in that line. That was not ideal, because I knew that some operators worked better than others in some contexts. Rather than just randomly picking a mutant operator, I decided to pick the one most likely to generate a surviving mutant that is then most likely to be productive when reported, based on historical data. I had millions of mutants to learn from, I just needed to define the distance between pieces of code. Finally deciding to look for AST nodes that were in similar contexts as the node being mutated, I looked at the nodes around the node under mutation, and encoded the child-parent relationships of the near-by nodes to capture the AST context. Armed with the distance measure and with the help of my returning intern Małgorzata, it was easy to find the closest AST contexts from historic mutants and to look at their fate and pick the best one. I ordered the mutators by their productivity and tried to generate a mutant in the node, in that order, since it’s quite possible that some of the mutant operators are not applicable on some piece of code.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;This was quite an improvement. Both mutant survivability and usefulness improved significantly for all mutant operators and programming languages. You can read more about the findings in &lt;a href="https://arxiv.org/pdf/2102.11378.pdf"&gt;the upcoming paper&lt;/a&gt;.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;h2&gt;Fault Coupling&lt;/h2&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Mutation testing is only valuable if the test cases we write for mutants are valuable. &lt;a href="https://ieeexplore.ieee.org/document/6982626" rel="nofollow" target="_blank"&gt;Mutants do not resemble real bugs&lt;/a&gt;, they are simpler than bugs found in the wild. Mutation testing relies on the coupling hypothesis: &lt;a href="https://dl.acm.org/doi/abs/10.1145/2635868.2635929" rel="nofollow" target="_blank"&gt;mutants are coupled with real bugs&lt;/a&gt;&amp;nbsp;if a test suite that is sensitive enough to detect mutants is also sensitive enough to detect the more complex real bugs. Reporting mutants and writing tests to kill them only makes sense if they are coupled with real bugs.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;I instinctively thought that fault coupling was real, otherwise I would not have worked on mutation testing at all, and I’ve seen many many cases where mutants pointed to a bug; but still, I wanted to verify this hypothesis, if only for our code base. I designed an experiment: I would generate all mutants in a line for explicit bug-fixing changes, before and after the fix, and I would check whether, had mutation testing been run, it would have surfaced a mutant in the change that introduced the bug, and potentially prevented it (i.e., killed in the change that fixed the bug and added new tests cases). I ran this experiment on weekends for over a month, because we did not have the resources to run it during workdays. While I normally generate a single mutant in a line, to test the fault coupling effect, I used the classical mutation testing approach and generated all possible mutants, while still adhering to the arid node suppression. A total of 33 million test suites were executed to test hundreds of thousands of mutants, finally to conclude that, in around 70% of cases, a bug was coupled with a mutant.&amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;While I was at it, I also checked my intuition on whether a single mutant per line was enough, and found that it was overwhelmingly so: in more than 90% of cases, either all mutants were killed in a line or none was. It’s worth keeping in mind that I still applied my arid node suppression heuristics for this experiment. It was great to finally have confirmation of my intuitions.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;I also looked into the developer behavior changes after using mutation testing on a project for longer periods of time, and discovered that projects that use mutation testing get more tests over time, as developers get exposed to more and more mutants. Not only do developers write more test cases, but those test cases are more effective in killing mutants: less and less mutants get reported over time. I noticed this from personal experience too: when writing unit tests, I would see where I cut some corners in the tests, and anticipated the mutant. Now I just add the missing test cases, rather than facing a mutant in my Code review, and I rarely see mutants these days, as I’ve learned to anticipate and preempt them.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;You can read more about the findings in our&amp;nbsp;&lt;a href="https://homes.cs.washington.edu/~rjust/publ/mutation_testing_practices_icse_2021.pdf"&gt;ICSE paper&lt;/a&gt;.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;h2&gt;Conclusion&lt;/h2&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;It’s been a long road since that hackathon in the winter of 2013. Mutation testing was a lot of fun to work on. It had its challenges, and I had days where I thought that I would throw everything down the drain (I’m looking at you, clang), but I am glad I stuck with it.&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;The most interesting part of the project was getting Mutation testing to scale to such a large code base, and that required redefining the problem and adapting it to the existing ecosystem that engineers were already used to. Another interesting angle was working, and learning from, the academic community,&amp;nbsp;in particular Gordon Fraser (University of Passau) and René Just (University of Washington).&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;I would like to encourage everyone to give one of the many open source mutation testing tools a try on their projects. With some tweaks here and there, it can be a great way to keep your software well tested.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;  </content><link href="http://testing.googleblog.com/feeds/3647813866660315609/comments/default" rel="replies" title="Post Comments" type="application/atom+xml"/><link href="http://testing.googleblog.com/2021/04/mutation-testing.html#comment-form" rel="replies" title="3 Comments" type="text/html"/><link href="http://www.blogger.com/feeds/15045980/posts/default/3647813866660315609" rel="edit" type="application/atom+xml"/><link href="http://www.blogger.com/feeds/15045980/posts/default/3647813866660315609" rel="self" type="application/atom+xml"/><link href="http://testing.googleblog.com/2021/04/mutation-testing.html" rel="alternate" title="Mutation Testing" type="text/html"/><author><name>Google Testing Bloggers</name><uri>http://www.blogger.com/profile/03153388556673050910</uri><email>noreply@blogger.com</email><gd:image height="7" rel="http://schemas.google.com/g/2005#thumbnail" src="http://3.bp.blogspot.com/-H1YTvw0kdFA/UTf_IXv4N2I/AAAAAAAAABY/ghqaO2KBOSA/s1600/gtb3.png" width="32"/></author><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" height="72" url="https://1.bp.blogspot.com/--aN_4XMCTb8/YHDnTj3u-lI/AAAAAAAAAfA/_L2ZFIq3T0EcLkgg_Q_J3ywqVyV7ky_qQCLcBGAsYHQ/s72-c/Code%2BReview%2BImage%2Bfor%2BMutation%2BTesting%2BArticle.jpg" width="72"/><thr:total>3</thr:total></entry><entry><id>tag:blogger.com,1999:blog-15045980.post-8859994293759789916</id><published>2021-03-24T10:05:00.001-07:00</published><updated>2021-03-24T10:05:30.110-07:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="George Pirocanac"/><category scheme="http://www.blogger.com/atom/ns#" term="Test Flakiness"/><title type="text">Test Flakiness - One of the main challenges of automated testing (Part II)</title><content type="html">By&amp;nbsp;George Pirocanac&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;This is part two of a series on test flakiness. The &lt;a href="https://testing.googleblog.com/2020/12/test-flakiness-one-of-main-challenges.html"&gt;first article&lt;/a&gt; discussed the four components under which tests are run and the possible reasons for test flakiness. This article will discuss the triage tips and remedies for flakiness for each of these possible reasons.&lt;/div&gt;&lt;h3 style="text-align: left;"&gt;&lt;br /&gt;&lt;/h3&gt;&lt;h3 style="text-align: left;"&gt;Components&lt;/h3&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;To review, the four components where flakiness can occur include:&lt;/div&gt;&lt;div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;The tests themselves&lt;/li&gt;&lt;li&gt;The test-running framework&lt;/li&gt;&lt;li&gt;The application or system under test (SUT) and the services and libraries that the SUT and testing framework depend upon&lt;/li&gt;&lt;li&gt;The OS and hardware and network that the SUT and testing framework depend upon&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;This was captured and summarized in the following diagram.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-W47L2HOk4k4/YFkA1Mh7HXI/AAAAAAAAAes/vfKARIUF5AIIkRmNjcg8az8BU2xeud6KgCLcBGAsYHQ/s720/Copy%2Bof%2BCopy%2Bof%2BTest%2BFlakiness%2BArticle%2BII%2Bfor%2BExternal%2BTesting%2BBlog%2B%25281%2529.jpg" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="472" data-original-width="720" height="400" src="https://1.bp.blogspot.com/-W47L2HOk4k4/YFkA1Mh7HXI/AAAAAAAAAes/vfKARIUF5AIIkRmNjcg8az8BU2xeud6KgCLcBGAsYHQ/w608-h400/Copy%2Bof%2BCopy%2Bof%2BTest%2BFlakiness%2BArticle%2BII%2Bfor%2BExternal%2BTesting%2BBlog%2B%25281%2529.jpg" width="608" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;&lt;div class="separator" style="clear: both;"&gt;The reasons, triage tips, and remedies for flakiness are discussed below, by component.&lt;/div&gt;&lt;div class="separator" style="clear: both;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both;"&gt;&lt;h3 style="clear: both; text-align: left;"&gt;The tests themselves&lt;/h3&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The tests themselves can introduce flakiness. This can include test data, test workflows, initial setup of test prerequisites, and initial state of other dependencies.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;span id="docs-internal-guid-cc3386a8-7fff-514b-d1ff-2a7b704dddcd"&gt;&lt;br /&gt;&lt;div align="left" dir="ltr" style="margin-left: 0pt;"&gt;&lt;table style="border-collapse: collapse; border: none; table-layout: fixed; width: 468pt;"&gt;&lt;colgroup&gt;&lt;col&gt;&lt;/col&gt;&lt;col&gt;&lt;/col&gt;&lt;col&gt;&lt;/col&gt;&lt;/colgroup&gt;&lt;tbody&gt;&lt;tr style="height: 0pt;"&gt;&lt;td style="background-color: #cfe2f3; border-bottom: solid #000000 1pt; border-color: rgb(0, 0, 0); border-left: solid #000000 1pt; border-right: solid #000000 1pt; border-style: solid; border-top: solid #000000 1pt; border-width: 1pt; overflow-wrap: break-word; overflow: hidden; padding: 5pt; vertical-align: top;"&gt;&lt;p dir="ltr" style="line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: transparent; font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; font-weight: 700; vertical-align: baseline; white-space: pre-wrap;"&gt;Reason for Flakiness&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td style="background-color: #cfe2f3; border-bottom: solid #000000 1pt; border-color: rgb(0, 0, 0); border-left: solid #000000 1pt; border-right: solid #000000 1pt; border-style: solid; border-top: solid #000000 1pt; border-width: 1pt; overflow-wrap: break-word; overflow: hidden; padding: 5pt; vertical-align: top;"&gt;&lt;p dir="ltr" style="line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: transparent; font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; font-weight: 700; vertical-align: baseline; white-space: pre-wrap;"&gt;Tips for Triaging&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td style="background-color: #cfe2f3; border-bottom: solid #000000 1pt; border-color: rgb(0, 0, 0); border-left: solid #000000 1pt; border-right: solid #000000 1pt; border-style: solid; border-top: solid #000000 1pt; border-width: 1pt; overflow-wrap: break-word; overflow: hidden; padding: 5pt; vertical-align: top;"&gt;&lt;p dir="ltr" style="line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: transparent; font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; font-weight: 700; vertical-align: baseline; white-space: pre-wrap;"&gt;Type of Remedy&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="height: 0pt;"&gt;&lt;td style="border-bottom: solid #000000 1pt; border-color: rgb(0, 0, 0); border-left: solid #000000 1pt; border-right: solid #000000 1pt; border-style: solid; border-top: solid #000000 1pt; border-width: 1pt; overflow-wrap: break-word; overflow: hidden; padding: 5pt; vertical-align: top;"&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Improper initialization or cleanup.&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td style="border-bottom: solid #000000 1pt; border-color: rgb(0, 0, 0); border-left: solid #000000 1pt; border-right: solid #000000 1pt; border-style: solid; border-top: solid #000000 1pt; border-width: 1pt; overflow-wrap: break-word; overflow: hidden; padding: 5pt; vertical-align: top;"&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Look for compiler warnings about uninitialized variables. Inspect initialization and cleanup code. Check that the environment is set up and torn down correctly. Verify that test data is correct.&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;&lt;/td&gt;&lt;td style="border-bottom: solid #000000 1pt; border-color: rgb(0, 0, 0); border-left: solid #000000 1pt; border-right: solid #000000 1pt; border-style: solid; border-top: solid #000000 1pt; border-width: 1pt; overflow-wrap: break-word; overflow: hidden; padding: 5pt; vertical-align: top;"&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Explicitly initialize all variables with proper values before their use.&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Properly set up and tear down the testing environment. Consider an initial test that verifies the state of the environment.&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="height: 0pt;"&gt;&lt;td style="border-bottom: solid #000000 1pt; border-color: rgb(0, 0, 0); border-left: solid #000000 1pt; border-right: solid #000000 1pt; border-style: solid; border-top: solid #000000 1pt; border-width: 1pt; overflow-wrap: break-word; overflow: hidden; padding: 5pt; vertical-align: top;"&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Invalid assumptions about the state of test data.&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td style="border-bottom: solid #000000 1pt; border-color: rgb(0, 0, 0); border-left: solid #000000 1pt; border-right: solid #000000 1pt; border-style: solid; border-top: solid #000000 1pt; border-width: 1pt; overflow-wrap: break-word; overflow: hidden; padding: 5pt; vertical-align: top;"&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Rerun test(s) independently.&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td style="border-bottom: solid #000000 1pt; border-color: rgb(0, 0, 0); border-left: solid #000000 1pt; border-right: solid #000000 1pt; border-style: solid; border-top: solid #000000 1pt; border-width: 1pt; overflow-wrap: break-word; overflow: hidden; padding: 5pt; vertical-align: top;"&gt;&lt;p dir="ltr" style="line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Make tests independent of any state from other tests and previous runs.&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="height: 0pt;"&gt;&lt;td style="border-bottom: solid #000000 1pt; border-color: rgb(0, 0, 0); border-left: solid #000000 1pt; border-right: solid #000000 1pt; border-style: solid; border-top: solid #000000 1pt; border-width: 1pt; overflow-wrap: break-word; overflow: hidden; padding: 5pt; vertical-align: top;"&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Invalid assumptions about the state of the system, such as the system time.&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td style="border-bottom: solid #000000 1pt; border-color: rgb(0, 0, 0); border-left: solid #000000 1pt; border-right: solid #000000 1pt; border-style: solid; border-top: solid #000000 1pt; border-width: 1pt; overflow-wrap: break-word; overflow: hidden; padding: 5pt; vertical-align: top;"&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Explicitly check for system dependency assumptions.&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td style="border-bottom: solid #000000 1pt; border-color: rgb(0, 0, 0); border-left: solid #000000 1pt; border-right: solid #000000 1pt; border-style: solid; border-top: solid #000000 1pt; border-width: 1pt; overflow-wrap: break-word; overflow: hidden; padding: 5pt; vertical-align: top;"&gt;&lt;p dir="ltr" style="line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Remove or isolate the SUT dependencies on aspects of the environment that you do not control.&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="height: 0pt;"&gt;&lt;td style="border-bottom: solid #000000 1pt; border-color: rgb(0, 0, 0); border-left: solid #000000 1pt; border-right: solid #000000 1pt; border-style: solid; border-top: solid #000000 1pt; border-width: 1pt; overflow-wrap: break-word; overflow: hidden; padding: 5pt; vertical-align: top;"&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Dependencies on execution time, expecting asynchronous events to occur in a specific order, waiting without timeouts, or race conditions between the tests and the application.&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td style="border-bottom: solid #000000 1pt; border-color: rgb(0, 0, 0); border-left: solid #000000 1pt; border-right: solid #000000 1pt; border-style: solid; border-top: solid #000000 1pt; border-width: 1pt; overflow-wrap: break-word; overflow: hidden; padding: 5pt; vertical-align: top;"&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Log the times when accesses to the application are made.&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;As part of debugging, introduce delays in the application to check for differences in test results.&lt;/span&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td style="border-bottom: solid #000000 1pt; border-color: rgb(0, 0, 0); border-left: solid #000000 1pt; border-right: solid #000000 1pt; border-style: solid; border-top: solid #000000 1pt; border-width: 1pt; overflow-wrap: break-word; overflow: hidden; padding: 5pt; vertical-align: top;"&gt;&lt;p dir="ltr" style="line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Add synchronization elements to the tests so that they wait for specific application states. Disable unnecessary caching to have a predictable timeline for the application responses.&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Note: &lt;/span&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; font-weight: 700; vertical-align: baseline; white-space: pre-wrap;"&gt;Do&lt;/span&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt; &lt;/span&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; font-weight: 700; vertical-align: baseline; white-space: pre-wrap;"&gt;NOT &lt;/span&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;add arbitrary delays as these can become flaky again over time and slow down the test unnecessarily.&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="height: 0pt;"&gt;&lt;td style="border-bottom: solid #000000 1pt; border-color: rgb(0, 0, 0); border-left: solid #000000 1pt; border-right: solid #000000 1pt; border-style: solid; border-top: solid #000000 1pt; border-width: 1pt; overflow-wrap: break-word; overflow: hidden; padding: 5pt; vertical-align: top;"&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Dependencies on the order in which the tests are run. (Similar to the second case above.)&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td style="border-bottom: solid #000000 1pt; border-color: rgb(0, 0, 0); border-left: solid #000000 1pt; border-right: solid #000000 1pt; border-style: solid; border-top: solid #000000 1pt; border-width: 1pt; overflow-wrap: break-word; overflow: hidden; padding: 5pt; vertical-align: top;"&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Rerun test(s) independently.&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td style="border-bottom: solid #000000 1pt; border-color: rgb(0, 0, 0); border-left: solid #000000 1pt; border-right: solid #000000 1pt; border-style: solid; border-top: solid #000000 1pt; border-width: 1pt; overflow-wrap: break-word; overflow: hidden; padding: 5pt; vertical-align: top;"&gt;&lt;p dir="ltr" style="line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Make tests independent of each other and of&amp;nbsp; any state from previous runs.&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/span&gt;&lt;/div&gt;          &lt;div&gt;&lt;i&gt;&lt;span style="font-size: x-small;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/i&gt;&lt;/div&gt;&lt;div&gt;&lt;i&gt;&lt;span style="font-size: x-small;"&gt;Table 1 - Reasons, triage tips, and remedies for flakiness in the tests themselves&lt;/span&gt;&lt;/i&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3 style="text-align: left;"&gt;The test-running framework&lt;/h3&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;An unreliable test-running framework can introduce flakiness.&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;span id="docs-internal-guid-8512e193-7fff-e2f6-818d-6d28c9227926"&gt;&lt;br /&gt;&lt;div align="left" dir="ltr" style="margin-left: 0pt;"&gt;&lt;table style="border-collapse: collapse; border: none; table-layout: fixed; width: 468pt;"&gt;&lt;colgroup&gt;&lt;col&gt;&lt;/col&gt;&lt;col&gt;&lt;/col&gt;&lt;col&gt;&lt;/col&gt;&lt;/colgroup&gt;&lt;tbody&gt;&lt;tr style="height: 0pt;"&gt;&lt;td style="background-color: #cfe2f3; border-bottom: solid #000000 1pt; border-left: solid #000000 1pt; border-right: solid #000000 1pt; border-top: solid #000000 1pt; overflow-wrap: break-word; overflow: hidden; padding: 5pt 5pt 5pt 5pt; vertical-align: top;"&gt;&lt;p dir="ltr" style="line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: transparent; font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; font-weight: 700; vertical-align: baseline; white-space: pre-wrap;"&gt;Reason for Flakiness&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td style="background-color: #cfe2f3; border-bottom: solid #000000 1pt; border-left: solid #000000 1pt; border-right: solid #000000 1pt; border-top: solid #000000 1pt; overflow-wrap: break-word; overflow: hidden; padding: 5pt 5pt 5pt 5pt; vertical-align: top;"&gt;&lt;p dir="ltr" style="line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: transparent; font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; font-weight: 700; vertical-align: baseline; white-space: pre-wrap;"&gt;Tips for Triaging&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td style="background-color: #cfe2f3; border-bottom: solid #000000 1pt; border-left: solid #000000 1pt; border-right: solid #000000 1pt; border-top: solid #000000 1pt; overflow-wrap: break-word; overflow: hidden; padding: 5pt 5pt 5pt 5pt; vertical-align: top;"&gt;&lt;p dir="ltr" style="line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: transparent; font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; font-weight: 700; vertical-align: baseline; white-space: pre-wrap;"&gt;Type of Remedy&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="height: 0pt;"&gt;&lt;td style="border-bottom: solid #000000 1pt; border-left: solid #000000 1pt; border-right: solid #000000 1pt; border-top: solid #000000 1pt; overflow-wrap: break-word; overflow: hidden; padding: 5pt 5pt 5pt 5pt; vertical-align: top;"&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Failure to allocate enough resources for the SUT, thus preventing it from running.&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td style="border-bottom: solid #000000 1pt; border-left: solid #000000 1pt; border-right: solid #000000 1pt; border-top: solid #000000 1pt; overflow-wrap: break-word; overflow: hidden; padding: 5pt 5pt 5pt 5pt; vertical-align: top;"&gt;&lt;p dir="ltr" style="line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Check logs to see if SUT came up.&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td style="border-bottom: solid #000000 1pt; border-left: solid #000000 1pt; border-right: solid #000000 1pt; border-top: solid #000000 1pt; overflow-wrap: break-word; overflow: hidden; padding: 5pt 5pt 5pt 5pt; vertical-align: top;"&gt;&lt;p dir="ltr" style="line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Allocate sufficient resources.&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="height: 0pt;"&gt;&lt;td style="border-bottom: solid #000000 1pt; border-left: solid #000000 1pt; border-right: solid #000000 1pt; border-top: solid #000000 1pt; overflow-wrap: break-word; overflow: hidden; padding: 5pt 5pt 5pt 5pt; vertical-align: top;"&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Improper scheduling of the tests so they “collide” and cause each other to fail.&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td style="border-bottom: solid #000000 1pt; border-left: solid #000000 1pt; border-right: solid #000000 1pt; border-top: solid #000000 1pt; overflow-wrap: break-word; overflow: hidden; padding: 5pt 5pt 5pt 5pt; vertical-align: top;"&gt;&lt;p dir="ltr" style="line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Explicitly run tests independently in different order.&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td style="border-bottom: solid #000000 1pt; border-left: solid #000000 1pt; border-right: solid #000000 1pt; border-top: solid #000000 1pt; overflow-wrap: break-word; overflow: hidden; padding: 5pt 5pt 5pt 5pt; vertical-align: top;"&gt;&lt;p dir="ltr" style="line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Make tests runnable independently of each other.&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="height: 0pt;"&gt;&lt;td style="border-bottom: solid #000000 1pt; border-left: solid #000000 1pt; border-right: solid #000000 1pt; border-top: solid #000000 1pt; overflow-wrap: break-word; overflow: hidden; padding: 5pt 5pt 5pt 5pt; vertical-align: top;"&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Insufficient system resources to satisfy the test requirements. (Similar to the first case but here resources are consumed while running the workflow.)&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td style="border-bottom: solid #000000 1pt; border-left: solid #000000 1pt; border-right: solid #000000 1pt; border-top: solid #000000 1pt; overflow-wrap: break-word; overflow: hidden; padding: 5pt 5pt 5pt 5pt; vertical-align: top;"&gt;&lt;p dir="ltr" style="line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Check system logs to see if SUT ran out of resources.&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td style="border-bottom: solid #000000 1pt; border-left: solid #000000 1pt; border-right: solid #000000 1pt; border-top: solid #000000 1pt; overflow-wrap: break-word; overflow: hidden; padding: 5pt 5pt 5pt 5pt; vertical-align: top;"&gt;&lt;p dir="ltr" style="line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Fix memory leaks or similar resource “bleeding.”&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;&lt;p dir="ltr" style="line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Allocate sufficient resources to run tests.&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;i&gt;&lt;span style="font-size: x-small;"&gt;Table 2 - Reasons, triage tips, and remedies for flakiness in the test running framework&lt;/span&gt;&lt;/i&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3 style="text-align: left;"&gt;The application or SUT and the services and libraries that the SUT and testing framework depend upon&lt;/h3&gt;&lt;div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Of course, the application itself (or the SUT) could be the source of flakiness.&amp;nbsp;&lt;/div&gt;&lt;div&gt;An application can also have numerous dependencies on other services, and each of those services can have their own dependencies. In this chain, each of the services can introduce flakiness.&amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;span id="docs-internal-guid-09658aab-7fff-21ca-2937-a430c1039703"&gt;&lt;br /&gt;&lt;div align="left" dir="ltr" style="margin-left: 0pt;"&gt;&lt;table style="border-collapse: collapse; border: none; table-layout: fixed; width: 468pt;"&gt;&lt;colgroup&gt;&lt;col&gt;&lt;/col&gt;&lt;col&gt;&lt;/col&gt;&lt;col&gt;&lt;/col&gt;&lt;/colgroup&gt;&lt;tbody&gt;&lt;tr style="height: 0pt;"&gt;&lt;td style="background-color: #cfe2f3; border-bottom: solid #000000 1pt; border-left: solid #000000 1pt; border-right: solid #000000 1pt; border-top: solid #000000 1pt; overflow-wrap: break-word; overflow: hidden; padding: 5pt 5pt 5pt 5pt; vertical-align: top;"&gt;&lt;p dir="ltr" style="line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: transparent; font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; font-weight: 700; vertical-align: baseline; white-space: pre-wrap;"&gt;Reason for Flakiness&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td style="background-color: #cfe2f3; border-bottom: solid #000000 1pt; border-left: solid #000000 1pt; border-right: solid #000000 1pt; border-top: solid #000000 1pt; overflow-wrap: break-word; overflow: hidden; padding: 5pt 5pt 5pt 5pt; vertical-align: top;"&gt;&lt;p dir="ltr" style="line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: transparent; font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; font-weight: 700; vertical-align: baseline; white-space: pre-wrap;"&gt;Tips for Triaging&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td style="background-color: #cfe2f3; border-bottom: solid #000000 1pt; border-left: solid #000000 1pt; border-right: solid #000000 1pt; border-top: solid #000000 1pt; overflow-wrap: break-word; overflow: hidden; padding: 5pt 5pt 5pt 5pt; vertical-align: top;"&gt;&lt;p dir="ltr" style="line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: transparent; font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; font-weight: 700; vertical-align: baseline; white-space: pre-wrap;"&gt;Type of Remedy&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="height: 0pt;"&gt;&lt;td style="border-bottom: solid #000000 1pt; border-left: solid #000000 1pt; border-right: solid #000000 1pt; border-top: solid #000000 1pt; overflow-wrap: break-word; overflow: hidden; padding: 5pt 5pt 5pt 5pt; vertical-align: top;"&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Race conditions.&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td style="border-bottom: solid #000000 1pt; border-left: solid #000000 1pt; border-right: solid #000000 1pt; border-top: solid #000000 1pt; overflow-wrap: break-word; overflow: hidden; padding: 5pt 5pt 5pt 5pt; vertical-align: top;"&gt;&lt;p dir="ltr" style="line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Log accesses of shared resources.&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td style="border-bottom: solid #000000 1pt; border-left: solid #000000 1pt; border-right: solid #000000 1pt; border-top: solid #000000 1pt; overflow-wrap: break-word; overflow: hidden; padding: 5pt 5pt 5pt 5pt; vertical-align: top;"&gt;&lt;p dir="ltr" style="line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Add synchronization elements to the tests so that they wait for specific application states. Note: &lt;/span&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; font-weight: 700; vertical-align: baseline; white-space: pre-wrap;"&gt;Do&lt;/span&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt; &lt;/span&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; font-weight: 700; vertical-align: baseline; white-space: pre-wrap;"&gt;NOT &lt;/span&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;add arbitrary delays as these can become flaky again over time.&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="height: 0pt;"&gt;&lt;td style="border-bottom: solid #000000 1pt; border-left: solid #000000 1pt; border-right: solid #000000 1pt; border-top: solid #000000 1pt; overflow-wrap: break-word; overflow: hidden; padding: 5pt 5pt 5pt 5pt; vertical-align: top;"&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Uninitialized variables.&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td style="border-bottom: solid #000000 1pt; border-left: solid #000000 1pt; border-right: solid #000000 1pt; border-top: solid #000000 1pt; overflow-wrap: break-word; overflow: hidden; padding: 5pt 5pt 5pt 5pt; vertical-align: top;"&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Look for compiler warnings about uninitialized variables.&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;&lt;/td&gt;&lt;td style="border-bottom: solid #000000 1pt; border-left: solid #000000 1pt; border-right: solid #000000 1pt; border-top: solid #000000 1pt; overflow-wrap: break-word; overflow: hidden; padding: 5pt 5pt 5pt 5pt; vertical-align: top;"&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Explicitly initialize all variables with proper values before their use.&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="height: 0pt;"&gt;&lt;td style="border-bottom: solid #000000 1pt; border-left: solid #000000 1pt; border-right: solid #000000 1pt; border-top: solid #000000 1pt; overflow-wrap: break-word; overflow: hidden; padding: 5pt 5pt 5pt 5pt; vertical-align: top;"&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Being slow to respond or being unresponsive to the stimuli from the tests.&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td style="border-bottom: solid #000000 1pt; border-left: solid #000000 1pt; border-right: solid #000000 1pt; border-top: solid #000000 1pt; overflow-wrap: break-word; overflow: hidden; padding: 5pt 5pt 5pt 5pt; vertical-align: top;"&gt;&lt;p dir="ltr" style="line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Log the times when requests and responses are made.&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td style="border-bottom: solid #000000 1pt; border-left: solid #000000 1pt; border-right: solid #000000 1pt; border-top: solid #000000 1pt; overflow-wrap: break-word; overflow: hidden; padding: 5pt 5pt 5pt 5pt; vertical-align: top;"&gt;&lt;p dir="ltr" style="line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Check and remove any causes for delays.&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="height: 0pt;"&gt;&lt;td style="border-bottom: solid #000000 1pt; border-left: solid #000000 1pt; border-right: solid #000000 1pt; border-top: solid #000000 1pt; overflow-wrap: break-word; overflow: hidden; padding: 5pt 5pt 5pt 5pt; vertical-align: top;"&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Memory leaks.&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td style="border-bottom: solid #000000 1pt; border-left: solid #000000 1pt; border-right: solid #000000 1pt; border-top: solid #000000 1pt; overflow-wrap: break-word; overflow: hidden; padding: 5pt 5pt 5pt 5pt; vertical-align: top;"&gt;&lt;p dir="ltr" style="line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Look at memory consumption during test runs. Use tools such as Valgrind to detect.&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td style="border-bottom: solid #000000 1pt; border-left: solid #000000 1pt; border-right: solid #000000 1pt; border-top: solid #000000 1pt; overflow-wrap: break-word; overflow: hidden; padding: 5pt 5pt 5pt 5pt; vertical-align: top;"&gt;&lt;p dir="ltr" style="line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Fix programming error causing memory leak. This &lt;/span&gt;&lt;a href="https://en.wikipedia.org/wiki/Memory_leak" style="text-decoration-line: none;"&gt;&lt;span style="color: #1155cc; font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; text-decoration-line: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;"&gt;Wikipedia article&lt;/span&gt;&lt;/a&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt; has an excellent discussion on these types of errors.&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="height: 0pt;"&gt;&lt;td style="border-bottom: solid #000000 1pt; border-left: solid #000000 1pt; border-right: solid #000000 1pt; border-top: solid #000000 1pt; overflow-wrap: break-word; overflow: hidden; padding: 5pt 5pt 5pt 5pt; vertical-align: top;"&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Oversubscription of resources.&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td style="border-bottom: solid #000000 1pt; border-left: solid #000000 1pt; border-right: solid #000000 1pt; border-top: solid #000000 1pt; overflow-wrap: break-word; overflow: hidden; padding: 5pt 5pt 5pt 5pt; vertical-align: top;"&gt;&lt;p dir="ltr" style="line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Check system logs to see if SUT ran out of resources.&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td style="border-bottom: solid #000000 1pt; border-left: solid #000000 1pt; border-right: solid #000000 1pt; border-top: solid #000000 1pt; overflow-wrap: break-word; overflow: hidden; padding: 5pt 5pt 5pt 5pt; vertical-align: top;"&gt;&lt;p dir="ltr" style="line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Allocate sufficient resources to run tests.&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="height: 0pt;"&gt;&lt;td style="border-bottom: solid #000000 1pt; border-left: solid #000000 1pt; border-right: solid #000000 1pt; border-top: solid #000000 1pt; overflow-wrap: break-word; overflow: hidden; padding: 5pt 5pt 5pt 5pt; vertical-align: top;"&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Changes to the application (or dependent services) out of sync with the corresponding tests.&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td style="border-bottom: solid #000000 1pt; border-left: solid #000000 1pt; border-right: solid #000000 1pt; border-top: solid #000000 1pt; overflow-wrap: break-word; overflow: hidden; padding: 5pt 5pt 5pt 5pt; vertical-align: top;"&gt;&lt;p dir="ltr" style="line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Examine revision history.&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td style="border-bottom: solid #000000 1pt; border-left: solid #000000 1pt; border-right: solid #000000 1pt; border-top: solid #000000 1pt; overflow-wrap: break-word; overflow: hidden; padding: 5pt 5pt 5pt 5pt; vertical-align: top;"&gt;&lt;p dir="ltr" style="line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Institute a policy requiring code changes to be accompanied by tests.&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span id="docs-internal-guid-ac8dffbb-7fff-2802-cd50-177a19301a76"&gt;&lt;div align="left" dir="ltr" style="margin-left: 0pt;"&gt;&lt;div align="left" dir="ltr" style="margin-left: 0pt;"&gt;&lt;i&gt;&lt;span style="font-size: x-small;"&gt;Table 3 - Reasons, triage tips, and remedies for flakiness in the application or SUT&lt;/span&gt;&lt;/i&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;h3&gt;The OS and hardware that the SUT and testing framework depend upon&lt;/h3&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Finally, the underlying hardware and operating system can be sources of test flakiness.&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;i&gt;&lt;span style="font-size: x-small;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/i&gt;&lt;/div&gt;&lt;div&gt;&lt;span id="docs-internal-guid-0d6c36b5-7fff-566e-92ce-795efef74cfe"&gt;&lt;br /&gt;&lt;div align="left" dir="ltr" style="margin-left: 0pt;"&gt;&lt;table style="border-collapse: collapse; border: none; table-layout: fixed; width: 468pt;"&gt;&lt;colgroup&gt;&lt;col&gt;&lt;/col&gt;&lt;col&gt;&lt;/col&gt;&lt;col&gt;&lt;/col&gt;&lt;/colgroup&gt;&lt;tbody&gt;&lt;tr style="height: 0pt;"&gt;&lt;td style="background-color: #cfe2f3; border-bottom: solid #000000 1pt; border-left: solid #000000 1pt; border-right: solid #000000 1pt; border-top: solid #000000 1pt; overflow-wrap: break-word; overflow: hidden; padding: 5pt 5pt 5pt 5pt; vertical-align: top;"&gt;&lt;p dir="ltr" style="line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: transparent; font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; font-weight: 700; vertical-align: baseline; white-space: pre-wrap;"&gt;Reason for Flakiness&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td style="background-color: #cfe2f3; border-bottom: solid #000000 1pt; border-left: solid #000000 1pt; border-right: solid #000000 1pt; border-top: solid #000000 1pt; overflow-wrap: break-word; overflow: hidden; padding: 5pt 5pt 5pt 5pt; vertical-align: top;"&gt;&lt;p dir="ltr" style="line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: transparent; font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; font-weight: 700; vertical-align: baseline; white-space: pre-wrap;"&gt;Tips for Triaging&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td style="background-color: #cfe2f3; border-bottom: solid #000000 1pt; border-left: solid #000000 1pt; border-right: solid #000000 1pt; border-top: solid #000000 1pt; overflow-wrap: break-word; overflow: hidden; padding: 5pt 5pt 5pt 5pt; vertical-align: top;"&gt;&lt;p dir="ltr" style="line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: transparent; font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; font-weight: 700; vertical-align: baseline; white-space: pre-wrap;"&gt;Type of Remedy&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="height: 0pt;"&gt;&lt;td style="border-bottom: solid #000000 1pt; border-left: solid #000000 1pt; border-right: solid #000000 1pt; border-top: solid #000000 1pt; overflow-wrap: break-word; overflow: hidden; padding: 5pt 5pt 5pt 5pt; vertical-align: top;"&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Networking failures or instability.&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td style="border-bottom: solid #000000 1pt; border-left: solid #000000 1pt; border-right: solid #000000 1pt; border-top: solid #000000 1pt; overflow-wrap: break-word; overflow: hidden; padding: 5pt 5pt 5pt 5pt; vertical-align: top;"&gt;&lt;p dir="ltr" style="line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Check for hardware errors in system logs.&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td style="border-bottom: solid #000000 1pt; border-left: solid #000000 1pt; border-right: solid #000000 1pt; border-top: solid #000000 1pt; overflow-wrap: break-word; overflow: hidden; padding: 5pt 5pt 5pt 5pt; vertical-align: top;"&gt;&lt;p dir="ltr" style="line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Fix hardware errors or run tests on different hardware.&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="height: 0pt;"&gt;&lt;td style="border-bottom: solid #000000 1pt; border-left: solid #000000 1pt; border-right: solid #000000 1pt; border-top: solid #000000 1pt; overflow-wrap: break-word; overflow: hidden; padding: 5pt 5pt 5pt 5pt; vertical-align: top;"&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Disk errors.&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td style="border-bottom: solid #000000 1pt; border-left: solid #000000 1pt; border-right: solid #000000 1pt; border-top: solid #000000 1pt; overflow-wrap: break-word; overflow: hidden; padding: 5pt 5pt 5pt 5pt; vertical-align: top;"&gt;&lt;p dir="ltr" style="line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Check for hardware errors in system logs.&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td style="border-bottom: solid #000000 1pt; border-left: solid #000000 1pt; border-right: solid #000000 1pt; border-top: solid #000000 1pt; overflow-wrap: break-word; overflow: hidden; padding: 5pt 5pt 5pt 5pt; vertical-align: top;"&gt;&lt;p dir="ltr" style="line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Fix hardware errors or run tests on different hardware.&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="height: 0pt;"&gt;&lt;td style="border-bottom: solid #000000 1pt; border-left: solid #000000 1pt; border-right: solid #000000 1pt; border-top: solid #000000 1pt; overflow-wrap: break-word; overflow: hidden; padding: 5pt 5pt 5pt 5pt; vertical-align: top;"&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Resources being consumed by other tasks/services not related to the tests being run.&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;&lt;/td&gt;&lt;td style="border-bottom: solid #000000 1pt; border-left: solid #000000 1pt; border-right: solid #000000 1pt; border-top: solid #000000 1pt; overflow-wrap: break-word; overflow: hidden; padding: 5pt 5pt 5pt 5pt; vertical-align: top;"&gt;&lt;p dir="ltr" style="line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Examine system process activity.&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td style="border-bottom: solid #000000 1pt; border-left: solid #000000 1pt; border-right: solid #000000 1pt; border-top: solid #000000 1pt; overflow-wrap: break-word; overflow: hidden; padding: 5pt 5pt 5pt 5pt; vertical-align: top;"&gt;&lt;p dir="ltr" style="line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Reduce activity of other processes on test system(s).&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;i&gt;&lt;span style="font-size: x-small;"&gt;Table 4 - Reasons, triage tips, and remedies for flakiness in the OS and hardware of the SUT&lt;/span&gt;&lt;/i&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3&gt;Conclusion&lt;/h3&gt;&lt;div&gt;As can be seen from the wide variety of failures, having low flakiness in automated testing can be quite a challenge. This article has outlined both the components under which tests are run and the types of flakiness that can occur, and thus can serve as a cheat sheet when triaging and fixing flaky tests.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;h3&gt;References&lt;/h3&gt;&lt;/div&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://testing.googleblog.com/2017/04/where-do-our-flaky-tests-come-from.html"&gt;Where do our flaky tests come from?&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://testing.googleblog.com/2016/05/flaky-tests-at-google-and-how-we.html"&gt;Flaky Tests at Google and How We Mitigate Them&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://testing.googleblog.com/2009/06/my-selenium-tests-arent-stable.html"&gt;My Selenium Tests Aren't Stable!&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://testing.googleblog.com/2008/04/tott-avoiding-flakey-tests.html"&gt;TotT: Avoiding Flakey Tests&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://testing.googleblog.com/2020/12/test-flakiness-one-of-main-challenges.html"&gt;Test Flakiness - One of the main challenges of automated testing&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content><link href="http://testing.googleblog.com/feeds/8859994293759789916/comments/default" rel="replies" title="Post Comments" type="application/atom+xml"/><link href="http://testing.googleblog.com/2021/03/test-flakiness-one-of-main-challenges.html#comment-form" rel="replies" title="3 Comments" type="text/html"/><link href="http://www.blogger.com/feeds/15045980/posts/default/8859994293759789916" rel="edit" type="application/atom+xml"/><link href="http://www.blogger.com/feeds/15045980/posts/default/8859994293759789916" rel="self" type="application/atom+xml"/><link href="http://testing.googleblog.com/2021/03/test-flakiness-one-of-main-challenges.html" rel="alternate" title="Test Flakiness - One of the main challenges of automated testing (Part II)" type="text/html"/><author><name>Google Testing Bloggers</name><uri>http://www.blogger.com/profile/03153388556673050910</uri><email>noreply@blogger.com</email><gd:image height="7" rel="http://schemas.google.com/g/2005#thumbnail" src="http://3.bp.blogspot.com/-H1YTvw0kdFA/UTf_IXv4N2I/AAAAAAAAABY/ghqaO2KBOSA/s1600/gtb3.png" width="32"/></author><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" height="72" url="https://1.bp.blogspot.com/-W47L2HOk4k4/YFkA1Mh7HXI/AAAAAAAAAes/vfKARIUF5AIIkRmNjcg8az8BU2xeud6KgCLcBGAsYHQ/s72-w608-h400-c/Copy%2Bof%2BCopy%2Bof%2BTest%2BFlakiness%2BArticle%2BII%2Bfor%2BExternal%2BTesting%2BBlog%2B%25281%2529.jpg" width="72"/><thr:total>3</thr:total></entry><entry><id>tag:blogger.com,1999:blog-15045980.post-7086735822667839051</id><published>2020-12-16T09:32:00.001-08:00</published><updated>2020-12-16T09:32:43.777-08:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="George Pirocanac"/><category scheme="http://www.blogger.com/atom/ns#" term="Test Flakiness"/><title type="text">Test Flakiness - One of the main challenges of automated testing</title><content type="html">By&amp;nbsp;George Pirocanac&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Dealing with test flakiness is a critical skill in testing because automated tests that do not provide a consistent signal will slow down the entire development process. If you haven’t encountered flaky tests, this article is a must-read as it first tries to systematically outline the causes for flaky tests. If you have encountered flaky tests, see how many fall into the areas listed.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;A follow-up article will talk about dealing with each of the causes.&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Over the years I’ve seen a lot of reasons for flaky tests, but rather than review them one by one, let’s group the sources of flakiness by the components under which tests are run:&lt;/div&gt;&lt;div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;The tests themselves&lt;/li&gt;&lt;li&gt;The test-running framework&lt;/li&gt;&lt;li&gt;The application or system under Test (SUT) and the services and libraries that the SUT and testing framework depend upon&lt;/li&gt;&lt;li&gt;The OS and hardware that the SUT and testing framework depend upon&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;This is illustrated below. Figure 1 first shows the hardware/software stack that supports an application or system under test. At the lowest level is the hardware. The next level up is the operating system followed by the libraries that provide an interface to the system. At the highest level, is the middleware, the layer that provides application specific interfaces.&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-oo5rt4SbFJc/X9ozDMCNMpI/AAAAAAAAAdU/iBuYZjMwN50y8qLuxzPmZDE9lvDN7P7UQCLcBGAsYHQ/s460/Test%2BFlakiness%2B-%2BFigure%2B1%2B%25281%2529.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="460" data-original-width="439" height="346" src="https://1.bp.blogspot.com/-oo5rt4SbFJc/X9ozDMCNMpI/AAAAAAAAAdU/iBuYZjMwN50y8qLuxzPmZDE9lvDN7P7UQCLcBGAsYHQ/w330-h346/Test%2BFlakiness%2B-%2BFigure%2B1%2B%25281%2529.jpg" width="330" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;In a distributed system, however, each of the services of the application and the services it depends upon can reside on a different hardware / software stack as can the test running service. This is illustrated in Figure 2 as the full test running environment.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-Olp-05IL-ro/X9o0buW7izI/AAAAAAAAAdo/jKZQNlo3-V4CpYeXPYl2cBnL3Ksm9EGowCLcBGAsYHQ/s726/Test%2BFlakiness%2B-%2BFigure%2B2%2B%25281%2529.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="520" data-original-width="726" height="392" src="https://1.bp.blogspot.com/-Olp-05IL-ro/X9o0buW7izI/AAAAAAAAAdo/jKZQNlo3-V4CpYeXPYl2cBnL3Ksm9EGowCLcBGAsYHQ/w548-h392/Test%2BFlakiness%2B-%2BFigure%2B2%2B%25281%2529.jpg" width="548" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;As discussed above, each of these components is a potential area for flakiness.&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;h3 style="text-align: left;"&gt;The tests themselves&lt;/h3&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;The tests themselves can introduce flakiness. Typical causes include:&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Improper initialization or cleanup.&lt;/li&gt;&lt;li&gt;Invalid assumptions about the state of test data.&lt;/li&gt;&lt;li&gt;Invalid assumptions about the state of the system. An example can be the system time.&lt;/li&gt;&lt;li&gt;Dependencies on the timing of the application.&lt;/li&gt;&lt;li&gt;Dependencies on the order in which the tests are run. (Similar to the first case above.)&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3 style="text-align: left;"&gt;The test-running framework&lt;/h3&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;An unreliable test-running framework can introduce flakiness. Typical causes include:&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Failure to allocate enough resources for the system under test thus causing it to fail coming up.&amp;nbsp;&lt;/li&gt;&lt;li&gt;Improper scheduling of the tests so they “collide” and cause each other to fail.&lt;/li&gt;&lt;li&gt;Insufficient system resources to satisfy the test requirements.&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3 style="text-align: left;"&gt;The application or system under test and the services and libraries that the SUT and testing framework depend upon&lt;/h3&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;Of course, the application itself (or the system under test) could be the source of flakiness. An application can also have numerous dependencies on other services, and each of those services can have their own dependencies. In this chain, each of the services can introduce flakiness. Typical causes include:&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Race conditions.&lt;/li&gt;&lt;li&gt;Uninitialized variables.&lt;/li&gt;&lt;li&gt;Being slow to respond or being unresponsive to the stimuli from the tests.&lt;/li&gt;&lt;li&gt;Memory leaks.&lt;/li&gt;&lt;li&gt;Oversubscription of resources.&lt;/li&gt;&lt;li&gt;Changes to the application (or dependent services) happening at a different pace than those to the corresponding tests.&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Testing environments are called &lt;i&gt;&lt;a href="https://testing.googleblog.com/2012/10/hermetic-servers.html"&gt;hermetic&lt;/a&gt;&lt;/i&gt; when they contain everything that is needed to run the tests (i.e. no external dependencies like servers running in production). Hermetic environments, in general, are less likely to be flaky.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3 style="text-align: left;"&gt;The OS and hardware that the SUT and testing framework depend upon&lt;/h3&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Finally, the underlying hardware and operating system can be the source of test flakiness. Typical causes include:&lt;/div&gt;&lt;div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Networking failures or instability.&lt;/li&gt;&lt;li&gt;Disk errors.&lt;/li&gt;&lt;li&gt;Resources being consumed by other tasks/services not related to the tests being run.&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;As can be seen from the wide variety of failures, having low flakiness in automated testing can be quite a challenge. This article has both outlined the areas and the types of flakiness that can occur in those areas, so it can serve as a cheat sheet when triaging flaky tests.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;In the follow-up of this blog we’ll look at ways of addressing these issues.&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3 style="text-align: left;"&gt;&lt;br /&gt;&lt;/h3&gt;&lt;h3 style="text-align: left;"&gt;References&lt;/h3&gt;&lt;div&gt;&lt;div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;&lt;a href="https://testing.googleblog.com/2017/04/where-do-our-flaky-tests-come-from.html"&gt;Where do our flaky tests come from?&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://testing.googleblog.com/2016/05/flaky-tests-at-google-and-how-we.html"&gt;Flaky Tests at Google and How We Mitigate Them&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://testing.googleblog.com/2009/06/my-selenium-tests-arent-stable.html"&gt;My Selenium Tests Aren't Stable!&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://testing.googleblog.com/2008/04/tott-avoiding-flakey-tests.html"&gt;TotT: Avoiding Flakey Tests&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;</content><link href="http://testing.googleblog.com/feeds/7086735822667839051/comments/default" rel="replies" title="Post Comments" type="application/atom+xml"/><link href="http://testing.googleblog.com/2020/12/test-flakiness-one-of-main-challenges.html#comment-form" rel="replies" title="9 Comments" type="text/html"/><link href="http://www.blogger.com/feeds/15045980/posts/default/7086735822667839051" rel="edit" type="application/atom+xml"/><link href="http://www.blogger.com/feeds/15045980/posts/default/7086735822667839051" rel="self" type="application/atom+xml"/><link href="http://testing.googleblog.com/2020/12/test-flakiness-one-of-main-challenges.html" rel="alternate" title="Test Flakiness - One of the main challenges of automated testing" type="text/html"/><author><name>Google Testing Bloggers</name><uri>http://www.blogger.com/profile/03153388556673050910</uri><email>noreply@blogger.com</email><gd:image height="7" rel="http://schemas.google.com/g/2005#thumbnail" src="http://3.bp.blogspot.com/-H1YTvw0kdFA/UTf_IXv4N2I/AAAAAAAAABY/ghqaO2KBOSA/s1600/gtb3.png" width="32"/></author><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" height="72" url="https://1.bp.blogspot.com/-oo5rt4SbFJc/X9ozDMCNMpI/AAAAAAAAAdU/iBuYZjMwN50y8qLuxzPmZDE9lvDN7P7UQCLcBGAsYHQ/s72-w330-h346-c/Test%2BFlakiness%2B-%2BFigure%2B1%2B%25281%2529.jpg" width="72"/><thr:total>9</thr:total></entry><entry><id>tag:blogger.com,1999:blog-15045980.post-5619282728573005751</id><published>2020-12-09T11:05:00.002-08:00</published><updated>2020-12-09T12:35:18.810-08:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="Code Health"/><category scheme="http://www.blogger.com/atom/ns#" term="Stefan Kennedy"/><category scheme="http://www.blogger.com/atom/ns#" term="TotT"/><title type="text">Testing on the Toilet: Separation of Concerns? That's a Wrap!</title><content type="html">&lt;p&gt;&lt;i&gt;&lt;span style="font-family: times;"&gt;This article was adapted from a Google&amp;nbsp;&lt;a href="http://googletesting.blogspot.com/2007/01/introducing-testing-on-toilet.html"&gt;Testing on the Toilet&lt;/a&gt;&amp;nbsp;(TotT) episode. You can download a&amp;nbsp;&lt;a href="https://docs.google.com/document/d/16865gKSr3QXh6kRyKw8g9B6Q13L48t3lNNWfWdg21Ng/edit?usp=sharing" rel="nofollow"&gt;printer-friendly version&lt;/a&gt;&amp;nbsp;of this TotT episode and post it in your office.&lt;/span&gt;&lt;/i&gt;&lt;/p&gt;&lt;div&gt;&lt;i&gt;&lt;span style="font-family: times;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/i&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: times;"&gt;By&amp;nbsp;Stefan Kennedy&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: times;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: times;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: times;"&gt;&lt;div&gt;The following function decodes a byte array as an image using an API named SpeedyImg. What maintenance problems might arise due to referencing an API owned by a different team?&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/span&gt;&lt;/div&gt; &lt;div style="overflow-x: auto;"&gt;&lt;table class="my-bordered-table" style="width: 613px;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="background-color: #f4cccc; vertical-align: top; width: 607px;"&gt;&lt;pre style="background-color: #f4cccc; border: 0px; color: black; margin: 0px; padding-bottom: 0px; padding-left: 0px; padding-top: 0px;"&gt;&lt;span style="font-family: consolas, &amp;quot;courier new&amp;quot;, courier, monospace;"&gt;&lt;span style="font-weight: bold;"&gt;SpeedyImgImage&lt;/span&gt; decodeImage(List&amp;lt;&lt;span style="font-weight: bold;"&gt;SpeedyImgDecoder&lt;/span&gt;&amp;gt; &lt;span style="font-weight: bold;"&gt;decoders&lt;/span&gt;, byte[] data) {&lt;br /&gt;  &lt;span style="font-weight: bold;"&gt;SpeedyImgOptions options&lt;/span&gt; = getDefaultConvertOptions();&lt;br /&gt;  for (&lt;span style="font-weight: bold;"&gt;SpeedyImgDecoder decoder&lt;/span&gt; : &lt;span style="font-weight: bold;"&gt;decoders&lt;/span&gt;) {&lt;br /&gt;    &lt;span style="font-weight: bold;"&gt;SpeedyImgResult decodeResult&lt;/span&gt; = &lt;span style="font-weight: bold;"&gt;decoder&lt;/span&gt;.decode(&lt;span style="font-weight: bold;"&gt;decoder&lt;/span&gt;.formatBytes(data));&lt;br /&gt;    &lt;span style="font-weight: bold;"&gt;SpeedyImgImage image&lt;/span&gt; = &lt;span style="font-weight: bold;"&gt;decodeResult&lt;/span&gt;.getImage(&lt;span style="font-weight: bold;"&gt;options&lt;/span&gt;);&lt;br /&gt;    if (validateGoodImage(&lt;span style="font-weight: bold;"&gt;image&lt;/span&gt;)) { return &lt;span style="font-weight: bold;"&gt;image&lt;/span&gt;; }&lt;br /&gt;  }&lt;br /&gt;  throw new RuntimeException();&lt;br /&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br /&gt;&lt;/div&gt;   &lt;div style="overflow-x: auto;"&gt;&lt;span style="font-family: times;"&gt;&lt;span style="color: #800180; font-weight: bold;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="overflow-x: auto;"&gt;&lt;span style="font-family: times;"&gt;&lt;span style="color: #800180; font-weight: bold;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="overflow-x: auto;"&gt;&lt;span style="font-family: times;"&gt;&lt;span style="color: #800180; font-weight: bold;"&gt;Details about how to call the API are mixed with domain logic&lt;/span&gt;, which can make the code harder to understand. For example, the call to &lt;span style="color: #0f9d58; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;decoder.formatBytes()&lt;/span&gt; is required by the API, but how the bytes are formatted isn’t relevant to the domain logic.&lt;/span&gt;&lt;/div&gt;&lt;div style="overflow-x: auto;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="overflow-x: auto;"&gt;&lt;div style="overflow-x: auto;"&gt;&lt;span style="font-family: times;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="overflow-x: auto;"&gt;&lt;span style="font-family: times;"&gt;Additionally, if this API is used in many places across a codebase, then &lt;span style="color: #800180; font-weight: bold;"&gt;all usages may need to change if the way the API is used changes.&lt;/span&gt; For example, if the return type of this function is changed to the more generic &lt;span style="color: #0f9d58; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;SpeedyImgResult&lt;/span&gt; type, usages of &lt;span style="color: #0f9d58; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;SpeedyImgImage&lt;/span&gt; would need to be updated.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;span style="font-family: times;"&gt;To avoid these maintenance problems, &lt;span style="color: #800180; font-weight: bold;"&gt;create &lt;i&gt;wrapper types&lt;/i&gt; to hide API details behind an abstraction&lt;/span&gt;:&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;      &lt;div style="overflow-x: auto;"&gt;&lt;table class="my-bordered-table" style="width: 613px;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="background-color: #d9ead3; vertical-align: top; width: 607px;"&gt;&lt;pre style="background-color: #d9ead3; border: 0px; color: black; margin: 0px; padding-bottom: 0px; padding-left: 0px; padding-top: 0px;"&gt;&lt;span style="font-family: consolas, &amp;quot;courier new&amp;quot;, courier, monospace;"&gt;&lt;span style="font-weight: bold;"&gt;Image&lt;/span&gt; decodeImage(List&amp;lt;&lt;span style="font-weight: bold;"&gt;ImageDecoder&lt;/span&gt;&amp;gt; &lt;span style="font-weight: bold;"&gt;decoders&lt;/span&gt;, byte[] data) {&lt;br /&gt;  for (&lt;span style="font-weight: bold;"&gt;ImageDecoder&lt;/span&gt; decoder : decoders) {&lt;br /&gt;    &lt;span style="font-weight: bold;"&gt;Image decodedImage&lt;/span&gt; = decoder.decode(data);&lt;br /&gt;    if (validateGoodImage(&lt;span style="font-weight: bold;"&gt;decodedImage&lt;/span&gt;)) { return &lt;span style="font-weight: bold;"&gt;decodedImage&lt;/span&gt;; }&lt;br /&gt;  }&lt;br /&gt;  throw new RuntimeException();&lt;br /&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;            &lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: times;"&gt;&lt;span style="color: #800180; font-weight: bold;"&gt;Wrapping an external API follows the &lt;a href="https://en.wikipedia.org/wiki/Separation_of_concerns"&gt;Separation of Concerns&lt;/a&gt;&lt;/span&gt; principle, since the logic for how the API is called is separated from the domain logic. This has many benefits, including:&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;&lt;span style="font-family: times;"&gt;If the way the API is used changes, encapsulating the API in a wrapper insulates how far those changes can propagate across your codebase.&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style="font-family: times;"&gt;You can modify the interface or the implementation of types you own, but you can’t for API types.&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style="font-family: times;"&gt;It is easier to switch or add another API, since they can still be represented by the introduced types (e.g. &lt;span style="color: #0f9d58; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;ImageDecoder/Image&lt;/span&gt;).&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style="font-family: times;"&gt;Readability can improve as you don’t need to sift through API code to understand core logic.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;span style="font-family: times;"&gt;&lt;span style="color: #800180; font-weight: bold;"&gt;Not all external APIs need to be wrapped&lt;/span&gt;. For example, if an API would take a huge effort to separate or is simple enough that it doesn't pollute the codebase, it may be better not to introduce wrapper types (e.g. library types like &lt;span style="color: #0f9d58; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;List&lt;/span&gt; in Java or &lt;span style="color: #0f9d58; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;std::vector&lt;/span&gt; in C++). When in doubt, keep in mind that a wrapper should only be added if it will clearly improve the code (see the &lt;a href="https://en.wikipedia.org/wiki/You_aren%27t_gonna_need_it"&gt;YAGNI&lt;/a&gt; principle).&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;div style="overflow-x: auto;"&gt;&lt;p dir="ltr" style="font-family: times; line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: &amp;quot;Times New Roman&amp;quot;; font-size: 13pt; font-style: italic; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;“Separation of Concerns” in the context of external APIs is also described by Martin Fowler in his blog post, &lt;/span&gt;&lt;a href="https://martinfowler.com/articles/refactoring-external-service.html" style="text-decoration-line: none;"&gt;&lt;span style="color: #1155cc; font-family: &amp;quot;Times New Roman&amp;quot;; font-size: 13pt; font-style: italic; font-variant-east-asian: normal; font-variant-numeric: normal; text-decoration-line: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;"&gt;Refactoring code that accesses external services&lt;/span&gt;&lt;/a&gt;&lt;span style="font-family: &amp;quot;Times New Roman&amp;quot;; font-size: 13pt; font-style: italic; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;Times New Roman&amp;quot;; font-size: 13pt; font-style: italic; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;  &lt;/div&gt;</content><link href="http://testing.googleblog.com/feeds/5619282728573005751/comments/default" rel="replies" title="Post Comments" type="application/atom+xml"/><link href="http://testing.googleblog.com/2020/12/testing-on-toilet-separation-of.html#comment-form" rel="replies" title="2 Comments" type="text/html"/><link href="http://www.blogger.com/feeds/15045980/posts/default/5619282728573005751" rel="edit" type="application/atom+xml"/><link href="http://www.blogger.com/feeds/15045980/posts/default/5619282728573005751" rel="self" type="application/atom+xml"/><link href="http://testing.googleblog.com/2020/12/testing-on-toilet-separation-of.html" rel="alternate" title="Testing on the Toilet: Separation of Concerns? That's a Wrap!" type="text/html"/><author><name>Google Testing Bloggers</name><uri>http://www.blogger.com/profile/03153388556673050910</uri><email>noreply@blogger.com</email><gd:image height="7" rel="http://schemas.google.com/g/2005#thumbnail" src="http://3.bp.blogspot.com/-H1YTvw0kdFA/UTf_IXv4N2I/AAAAAAAAABY/ghqaO2KBOSA/s1600/gtb3.png" width="32"/></author><thr:total>2</thr:total></entry><entry><id>tag:blogger.com,1999:blog-15045980.post-5834230578622472577</id><published>2020-11-09T09:23:00.001-08:00</published><updated>2020-11-09T09:23:56.785-08:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="Alan Myrvold"/><title type="text">Fixing a Test Hourglass</title><content type="html">By Alan Myrvold&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;Automated tests make it safer and faster to create new features, fix bugs, and refactor code. When planning the automated tests, we envision a pyramid with a strong foundation of small unit tests, some well designed integration tests, and a few large end-to-end tests. From &lt;a href="https://testing.googleblog.com/2015/04/just-say-no-to-more-end-to-end-tests.html"&gt;Just Say No to More End-to-End Tests&lt;/a&gt;, tests should be fast, reliable, and specific; end-to-end tests, however, are often slow, unreliable, and difficult to debug.&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;As software projects grow, often the shape of our test distribution becomes undesirable, either top heavy (no unit or medium integration tests), or like an hourglass.&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;The hourglass test distribution has a large set of unit tests, a large set of end-to-end tests, and few or no medium integration tests.&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;img border="0" data-original-height="400" data-original-width="330" height="320" src="https://1.bp.blogspot.com/-0jbHAgLFogI/X48dTAJoekI/AAAAAAAAAbI/JV6oUPImdT8Ho5bPgOKVwVZDFVKWGwgcACLcBGAsYHQ/s320/Copy%2Bof%2BGoogle%2BTesting%2BBlog_%2BFixing%2Ba%2BTest%2BHourglass%2B-%2BEdited.jpg" /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;img border="0" data-original-height="400" data-original-width="288" height="320" src="https://1.bp.blogspot.com/-e6bsyqU1yt8/X48dcQU9uLI/AAAAAAAAAbM/Ct-p0T6Y728g_gyHYZ_DWT6Ks2MPhrgfwCLcBGAsYHQ/s320/Copy%2Bof%2BGoogle%2BTesting%2BBlog_%2BFixing%2Ba%2BTest%2BHourglass%2B%25281%2529%2B-%2BEdited.jpg" /&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;&lt;div class="separator" style="clear: both;"&gt;To transform the hourglass back into a pyramid — so that you can test the integration of components in a reliable, sustainable way — you need to figure out how to architect the system under test and test infrastructure and make system testability improvements and test-code improvements.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;I worked on a project with a web UI, a server, and many backends. There were unit tests at all levels with good coverage and a quickly increasing set of end-to-end tests.&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;The end-to-end tests found issues that the unit tests missed, but they ran slowly, and environmental issues caused spurious failures, including test data corruption. In addition, some functional areas were difficult to test because they covered more than the unit but required state within the system that was hard to set up.&lt;/div&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-X-jZgQxi8OM/X48eq3zzDEI/AAAAAAAAAbk/8qL5-YDjupIKkDeqdVJxxjVPsrCE8XPlACLcBGAsYHQ/s637/Copy%2Bof%2BGoogle%2BTesting%2BBlog_%2BFixing%2Ba%2BTest%2BHourglass%2B%25282%2529%2B-%2BEdited.jpg" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="1" data-original-height="400" data-original-width="637" src="https://1.bp.blogspot.com/-X-jZgQxi8OM/X48eq3zzDEI/AAAAAAAAAbk/8qL5-YDjupIKkDeqdVJxxjVPsrCE8XPlACLcBGAsYHQ/s16000/Copy%2Bof%2BGoogle%2BTesting%2BBlog_%2BFixing%2Ba%2BTest%2BHourglass%2B%25282%2529%2B-%2BEdited.jpg" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;&lt;br /&gt;&lt;/div&gt;We eventually found a good test architecture for faster, more reliable integration tests, but with some missteps along the way.&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;&lt;div class="separator" style="clear: both;"&gt;An example UI-level end-to-end test, written in &lt;a href="https://protractor.angular.io/"&gt;protractor&lt;/a&gt;, looked something like this:&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;  &lt;div style="overflow-x: auto;"&gt;&lt;table class="my-bordered-table" style="width: 613px;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="vertical-align: top; width: 607px;"&gt;&lt;pre style="border: 0px; color: black; margin: 0px; padding-bottom: 0px; padding-left: 0px; padding-top: 0px;"&gt;&lt;span style="font-family: consolas, &amp;quot;courier new&amp;quot;, courier, monospace;"&gt;describe('Terms of service are handled', () =&amp;gt; {&lt;br /&gt;  it('accepts terms of service', async () =&amp;gt; {&lt;br /&gt;    const user = getUser('termsNotAccepted');&lt;br /&gt;    await login(user);&lt;br /&gt;    await see(termsOfServiceDialog());&lt;br /&gt;    await click('Accept')&lt;br /&gt;    await logoff();&lt;br /&gt;    await login(user);&lt;br /&gt;    await not.see(termsOfServiceDialog());&lt;br /&gt;  });&lt;br /&gt;});&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt; &lt;div style="overflow-x: auto;"&gt;&lt;div style="overflow-x: auto;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="overflow-x: auto;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="overflow-x: auto;"&gt;This test logs on as a user, sees the terms of service dialog that the user needs to accept, accepts it, then logs off and logs back on to ensure the user is not prompted again.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;This terms of service test was a challenge to run reliably, because once an agreement was accepted, the backend server had no RPC method to reverse the operation and “un-accept” the TOS. We could create a new user with each test, but that was time consuming and hard to clean up.&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;The first attempt to make the terms of service feature testable without end-to-end testing was to hook the server RPC method and set the expectations within the test. The hook intercepts the RPC call and provides expected results instead of calling the backend API.&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;img border="1" data-original-height="389" data-original-width="595" src="https://1.bp.blogspot.com/-BGOJjqQx95I/X5BYnaZ88CI/AAAAAAAAAb0/ktnX3SyprGoPklnpLjAo8vLGMmy7GTVegCLcBGAsYHQ/s16000/Copy%2Bof%2BGoogle%2BTesting%2BBlog_%2BFixing%2Ba%2BTest%2BHourglass%2B%25283%2529%2B-%2BEdited.jpg" /&gt;&lt;/div&gt;&lt;div style="overflow-x: auto;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="overflow-x: auto;"&gt;&lt;br /&gt;&lt;/div&gt;This approach worked. The test interacted with the backend RPC without really calling it, but it cluttered the test with extra logic.&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;div style="overflow-x: auto;"&gt;&lt;br /&gt;&lt;/div&gt; &lt;div style="overflow-x: auto;"&gt;&lt;table class="my-bordered-table" style="width: 613px;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="vertical-align: top; width: 607px;"&gt;&lt;pre style="border: 0px; color: black; margin: 0px; padding-bottom: 0px; padding-left: 0px; padding-top: 0px;"&gt;&lt;span style="font-family: consolas, &amp;quot;courier new&amp;quot;, courier, monospace;"&gt;describe('Terms of service are handled', () =&amp;gt; {&lt;br /&gt;  it('accepts terms of service', async () =&amp;gt; {&lt;br /&gt;    const user = getUser('someUser');&lt;br /&gt;    await hook('TermsOfService.Get()', true);&lt;br /&gt;    await login(user);&lt;br /&gt;    await see(termsOfServiceDialog());&lt;br /&gt;    await click('Accept')&lt;br /&gt;    await logoff();&lt;br /&gt;    await hook('TermsOfService.Get()', false);&lt;br /&gt;    await login(user);&lt;br /&gt;    await not.see(termsOfServiceDialog());&lt;br /&gt;  });&lt;br /&gt;});&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;  &lt;div style="overflow-x: auto;"&gt;&lt;div style="overflow-x: auto;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="overflow-x: auto;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="overflow-x: auto;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="overflow-x: auto;"&gt;The test met the goal of testing the integration of the web UI and server, but it was unreliable. As the system scaled under load, there were several server processes and no guarantee that the UI would access the same server for all RPC calls, so the hook might be set in one server process and the UI accessed in another.&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;The hook also wasn't at a natural system boundary, which made it require more maintenance as the system evolved and code was refactored.&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The next design of the test architecture was to fake the backend that eventually processes the terms of service call.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-0tiG7Pt33G4/X5BaSNGZE4I/AAAAAAAAAcA/T7k2F4s_OPUmbP1rxXPLsqB6MjIyvdXJgCLcBGAsYHQ/s616/Copy%2Bof%2BGoogle%2BTesting%2BBlog_%2BFixing%2Ba%2BTest%2BHourglass%2B%25284%2529%2B-%2BEdited.jpg" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="1" data-original-height="400" data-original-width="616" src="https://1.bp.blogspot.com/-0tiG7Pt33G4/X5BaSNGZE4I/AAAAAAAAAcA/T7k2F4s_OPUmbP1rxXPLsqB6MjIyvdXJgCLcBGAsYHQ/s16000/Copy%2Bof%2BGoogle%2BTesting%2BBlog_%2BFixing%2Ba%2BTest%2BHourglass%2B%25284%2529%2B-%2BEdited.jpg" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div style="overflow-x: auto;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="overflow-x: auto;"&gt;The fake implementation can be quite simple:&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt; &lt;div style="overflow-x: auto;"&gt;&lt;table class="my-bordered-table" style="width: 613px;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="vertical-align: top; width: 607px;"&gt;&lt;pre style="border: 0px; color: black; margin: 0px; padding-bottom: 0px; padding-left: 0px; padding-top: 0px;"&gt;&lt;span style="font-family: consolas, &amp;quot;courier new&amp;quot;, courier, monospace;"&gt;public class FakeTermsOfService implements TermsOfService.Service {&lt;br /&gt;  private static final Map&amp;lt;String, Boolean&amp;gt; accepted = new ConcurrentHashMap&amp;lt;&amp;gt;();&lt;br /&gt;&lt;br /&gt;  @Override&lt;br /&gt;  public TosGetResponse get(TosGetRequest req) {&lt;br /&gt;    return accepted.getOrDefault(req.UserID(), Boolean.FALSE);&lt;br /&gt;  }&lt;br /&gt;&lt;br /&gt;  @Override&lt;br /&gt;  public void accept(TosAcceptRequest req) {&lt;br /&gt;    accepted.put(req.UserID(), Boolean.TRUE);&lt;br /&gt;  }&lt;br /&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt; And the test is now uncluttered by the expectations:&lt;div&gt;&lt;br /&gt;&lt;div style="overflow-x: auto;"&gt;&lt;table class="my-bordered-table" style="width: 613px;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="vertical-align: top; width: 607px;"&gt;&lt;pre style="border: 0px; color: black; margin: 0px; padding-bottom: 0px; padding-left: 0px; padding-top: 0px;"&gt;&lt;span style="font-family: consolas, &amp;quot;courier new&amp;quot;, courier, monospace;"&gt;describe('Terms of service are handled', () =&amp;gt; {&lt;br /&gt;&lt;/span&gt;&lt;/pre&gt;&lt;pre style="border: 0px; color: black; margin: 0px; padding-bottom: 0px; padding-left: 0px; padding-top: 0px;"&gt;&lt;span style="font-family: consolas, &amp;quot;courier new&amp;quot;, courier, monospace;"&gt;  it('accepts terms of service', async () =&amp;gt; {&lt;br /&gt;    const user = getUser('termsNotAccepted');&lt;br /&gt;    await login(user);&lt;br /&gt;    await see(termsOfServiceDialog());&lt;br /&gt;    await click('Accept')&lt;br /&gt;    await logoff();&lt;br /&gt;    await login(user);&lt;br /&gt;    await not.see(termsOfServiceDialog());&lt;br /&gt;  });&lt;br /&gt;});&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Because the fake stores the accepted state in memory, there is no need to reset the state for the next test iteration; it is enough just to restart the fake server.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;This worked but was problematic when there was a mix of fake and real backends. This was because there was state between the real backends that was now out of sync with the fake backend.&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;Our final, successful integration test architecture was to provide fake implementations for all except one of the backends, all sharing the same in-memory state. One real backend was included in the system under test because it was tightly coupled with the Web UI. Its dependencies were all wired to fake backends. These are integration tests over the entire system under test, but they remove the backend dependencies. These tests expand the medium size tests in the test hourglass, allowing us to have fewer end-to-end tests with real backends.&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;Note that these integration tests are not only the option. For logic in the Web UI, we can write page level unit tests, which allow the tests to run faster and more reliably. For the terms of service feature, however, we want to test the Web UI and server logic together, so integration tests are a good solution.&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-GXnIcmGOhow/X5BcZDzfURI/AAAAAAAAAcM/6ld2Xg__3V8nkXqDEnPeuibPqXU9KntcACLcBGAsYHQ/s594/Copy%2Bof%2BGoogle%2BTesting%2BBlog_%2BFixing%2Ba%2BTest%2BHourglass%2B%25285%2529%2B-%2BEdited.jpg" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="1" data-original-height="461" data-original-width="594" src="https://1.bp.blogspot.com/-GXnIcmGOhow/X5BcZDzfURI/AAAAAAAAAcM/6ld2Xg__3V8nkXqDEnPeuibPqXU9KntcACLcBGAsYHQ/s16000/Copy%2Bof%2BGoogle%2BTesting%2BBlog_%2BFixing%2Ba%2BTest%2BHourglass%2B%25285%2529%2B-%2BEdited.jpg" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;This resulted in UI tests that ran, unmodified, on both the real and fake backend systems.&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;When run with fake backends the tests were faster and more reliable. This made it easier to add test scenarios that would have been more challenging to set up with the real backends. We also deleted end-to-end tests that were well duplicated by the integration tests, resulting in more integration tests than end-to-end tests.&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-FGkMIpFMPXM/X5BcvmDCcjI/AAAAAAAAAcU/vNtCPcVc1EML3xZv5w1-7sSPlacRO9rvQCLcBGAsYHQ/s463/Copy%2Bof%2BGoogle%2BTesting%2BBlog_%2BFixing%2Ba%2BTest%2BHourglass%2B%25286%2529%2B-%2BEdited.jpg" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="463" data-original-width="380" height="320" src="https://1.bp.blogspot.com/-FGkMIpFMPXM/X5BcvmDCcjI/AAAAAAAAAcU/vNtCPcVc1EML3xZv5w1-7sSPlacRO9rvQCLcBGAsYHQ/s320/Copy%2Bof%2BGoogle%2BTesting%2BBlog_%2BFixing%2Ba%2BTest%2BHourglass%2B%25286%2529%2B-%2BEdited.jpg" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;By iterating, we arrived at a sustainable test architecture for the integration tests.&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;If you're facing a test hourglass the test architecture to devise medium tests may not be obvious. I'd recommend experimenting, dividing the system on well defined interfaces, and making sure the new tests are providing value by running faster and more reliably or by unlocking hard to test areas.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="text-align: left;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3 style="text-align: left;"&gt;References&lt;/h3&gt;&lt;div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Just Say No to More End-to-End Tests, Mike Wacker, &lt;a href="https://testing.googleblog.com/2015/04/just-say-no-to-more-end-to-end-tests.html"&gt;https://testing.googleblog.com/2015/04/just-say-no-to-more-end-to-end-tests.html&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Test Pyramid &amp;amp; Antipatterns, Khushi, &lt;a href="https://khushiy.com/2019/02/07/test-pyramid-antipatterns/"&gt;https://khushiy.com/2019/02/07/test-pyramid-antipatterns/&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Testing on the Toilet: Fake Your Way to Better Tests, Jonathan Rockway and Andrew Trenk, &lt;a href="https://testing.googleblog.com/2013/06/testing-on-toilet-fake-your-way-to.html"&gt;https://testing.googleblog.com/2013/06/testing-on-toilet-fake-your-way-to.html&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Testing on the Toilet: Know Your Test Doubles, Andrew Trenk, &lt;a href="https://testing.googleblog.com/2013/07/testing-on-toilet-know-your-test-doubles.html"&gt;https://testing.googleblog.com/2013/07/testing-on-toilet-know-your-test-doubles.html&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Hermetic Servers, Chaitali Narla and Diego Salas, &lt;a href="https://testing.googleblog.com/2012/10/hermetic-servers.html"&gt;https://testing.googleblog.com/2012/10/hermetic-servers.html&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Software Engineering at Google, Titus Winters, Tom Manshreck, Hyrum Wright, &lt;a href="https://www.oreilly.com/library/view/software-engineering-at/9781492082781/"&gt;https://www.oreilly.com/library/view/software-engineering-at/9781492082781/&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;</content><link href="http://testing.googleblog.com/feeds/5834230578622472577/comments/default" rel="replies" title="Post Comments" type="application/atom+xml"/><link href="http://testing.googleblog.com/2020/11/fixing-test-hourglass.html#comment-form" rel="replies" title="4 Comments" type="text/html"/><link href="http://www.blogger.com/feeds/15045980/posts/default/5834230578622472577" rel="edit" type="application/atom+xml"/><link href="http://www.blogger.com/feeds/15045980/posts/default/5834230578622472577" rel="self" type="application/atom+xml"/><link href="http://testing.googleblog.com/2020/11/fixing-test-hourglass.html" rel="alternate" title="Fixing a Test Hourglass" type="text/html"/><author><name>Google Testing Bloggers</name><uri>http://www.blogger.com/profile/03153388556673050910</uri><email>noreply@blogger.com</email><gd:image height="7" rel="http://schemas.google.com/g/2005#thumbnail" src="http://3.bp.blogspot.com/-H1YTvw0kdFA/UTf_IXv4N2I/AAAAAAAAABY/ghqaO2KBOSA/s1600/gtb3.png" width="32"/></author><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" height="72" url="https://1.bp.blogspot.com/-0jbHAgLFogI/X48dTAJoekI/AAAAAAAAAbI/JV6oUPImdT8Ho5bPgOKVwVZDFVKWGwgcACLcBGAsYHQ/s72-c/Copy%2Bof%2BGoogle%2BTesting%2BBlog_%2BFixing%2Ba%2BTest%2BHourglass%2B-%2BEdited.jpg" width="72"/><thr:total>4</thr:total></entry><entry><id>tag:blogger.com,1999:blog-15045980.post-7591798787317882905</id><published>2020-10-26T10:05:00.000-07:00</published><updated>2020-10-26T10:05:37.810-07:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="Carlos Israel Ortiz García"/><category scheme="http://www.blogger.com/atom/ns#" term="TotT"/><title type="text">Testing on the Toilet: Testing UI Logic? Follow the User!</title><content type="html">&lt;i&gt;&lt;span style="font-family: times;"&gt;This article was adapted from a Google&amp;nbsp;&lt;a href="http://googletesting.blogspot.com/2007/01/introducing-testing-on-toilet.html"&gt;Testing on the Toilet&lt;/a&gt;&amp;nbsp;(TotT) episode. You can download a&amp;nbsp;&lt;a href="https://docs.google.com/document/d/1j4Z_Pvr5CxqRb3kRG3hxepIoZkXN81fjDVHGZEqkhxk/edit?usp=sharing"&gt;printer-friendly version&lt;/a&gt;&amp;nbsp;of this TotT episode and post it in your office.&lt;/span&gt;&lt;/i&gt;&lt;div&gt;&lt;i&gt;&lt;span style="font-family: times;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/i&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: times;"&gt;By&amp;nbsp;Carlos Israel Ortiz García&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: times;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: times;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: times;"&gt;&lt;div&gt;After years of anticipation, you're finally able to purchase Google's hottest new product, gShoe*. But after clicking the "Buy" button, nothing happened! Inspecting the HTML, you notice the problem:&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="overflow-x: auto;"&gt;&lt;table class="my-bordered-table" style="width: 613px;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="background-color: #c9daf8; vertical-align: top; width: 607px;"&gt;&lt;pre style="background-color: #c9daf8; border: 0px; color: black; margin: 0px; padding-bottom: 0px; padding-left: 0px; padding-top: 0px;"&gt;&lt;span style="font-family: consolas, &amp;quot;courier new&amp;quot;, courier, monospace;"&gt;&amp;lt;button &lt;span style="font-weight: bold;"&gt;disabled=”true”&lt;/span&gt; click=”$handleBuyClick(data)”&amp;gt;Buy&amp;lt;/button&amp;gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;a href="https://1.bp.blogspot.com/-0OcrJkvSUYw/X5NaG4FFquI/AAAAAAAAAck/WUBHX6fJZZoOLqgzsmgjfOyAcX5x0reHACLcBGAsYHQ/s435/image1.png" style="clear: right; float: right; font-family: times; margin-bottom: 1em; margin-left: 1em; text-align: center;"&gt;&lt;img border="0" data-original-height="435" data-original-width="349" height="320" src="https://1.bp.blogspot.com/-0OcrJkvSUYw/X5NaG4FFquI/AAAAAAAAAck/WUBHX6fJZZoOLqgzsmgjfOyAcX5x0reHACLcBGAsYHQ/w258-h320/image1.png" width="258" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;span style="font-family: times;"&gt;&lt;span style="color: #800180; font-weight: bold;"&gt;Users couldn’t buy their gShoes because the “Buy” button was disabled.&lt;/span&gt; The problem was due to the unit test for &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;handleBuyClick&lt;/span&gt;, which passed &lt;i&gt;even though the user interface had a bug:&lt;/i&gt;&lt;/span&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt; &lt;div style="overflow-x: auto;"&gt;&lt;table class="my-bordered-table" style="width: 613px;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="background-color: #f4cccc; vertical-align: top; width: 607px;"&gt;&lt;pre style="background-color: #f4cccc; border: 0px; color: black; margin: 0px; padding-bottom: 0px; padding-left: 0px; padding-top: 0px;"&gt;&lt;span style="font-family: consolas, &amp;quot;courier new&amp;quot;, courier, monospace;"&gt;it('submits purchase request', () =&amp;gt; {&lt;br /&gt;  controller = new PurchasePage();&lt;br /&gt;  &lt;span style="color: #1155cc;"&gt;// Call the method that handles the "Buy" button click&lt;/span&gt;&lt;br /&gt;  &lt;span style="font-weight: bold;"&gt;controller.handleBuyClick(data);&lt;/span&gt;&lt;br /&gt;  expect(service).toHaveBeenCalledWith(expectedData);&lt;br /&gt;});&lt;br /&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;span style="font-family: times;"&gt;  In the above example, the test failed to detect the bug because it &lt;i&gt;bypassed&lt;/i&gt; the UI element and instead directly invoked the "Buy" button click handler. &lt;span style="color: #800180; font-weight: bold;"&gt;To be effective, tests for UI logic should interact with the &lt;i&gt;components&lt;/i&gt; on the page as a browser would&lt;/span&gt;, which allows testing the behavior that the end user experiences. &lt;span style="color: #800180; font-weight: bold;"&gt;Writing tests against &lt;i&gt;UI components&lt;/i&gt; rather than calling handlers directly faithfully simulates user interactions&lt;/span&gt; (e.g., add items to a shopping cart, click a purchase button, or verify an element is visible on the page), making the tests more comprehensive.&lt;/span&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: times;"&gt;&lt;span style="color: #800180; font-weight: bold;"&gt;The test for the “Buy” button should instead exercise the entire UI component by interacting with the HTML element,&lt;/span&gt; which would have caught the disabled button issue:&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt; &lt;div style="overflow-x: auto;"&gt;&lt;table class="my-bordered-table" style="width: 613px;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="background-color: #d9ead3; vertical-align: top; width: 607px;"&gt;&lt;pre style="background-color: #d9ead3; border: 0px; color: black; margin: 0px; padding-bottom: 0px; padding-left: 0px; padding-top: 0px;"&gt;&lt;span style="font-family: consolas, &amp;quot;courier new&amp;quot;, courier, monospace;"&gt;it('submits purchase request', () =&amp;gt; {&lt;br /&gt;  &lt;span style="color: #1155cc;"&gt;// Renders the page with the “Buy” button and its associated code.&lt;/span&gt;&lt;br /&gt;  render(PurchasePage);&lt;br /&gt;  &lt;span style="color: #1155cc;"&gt;// Tries to click the button, fails the test, and catches the bug!&lt;/span&gt;&lt;br /&gt;  &lt;span style="font-weight: bold;"&gt;buttonWithText('Buy').dispatchEvent(new Event(‘click’));&lt;/span&gt;&lt;br /&gt;  expect(service).toHaveBeenCalledWith(expectedData);&lt;br /&gt;});&lt;br /&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;&lt;div&gt;&lt;span style="font-family: times;"&gt;&lt;span style="color: #800180; font-weight: bold;"&gt;Why should tests be written this way?&lt;/span&gt; Unlike end-to-end tests, tests for individual UI components don’t require a backend server or the entire app to be rendered. Instead, these&amp;nbsp; tests run in the same self-contained environment and take a similar amount of time to execute as unit tests that just execute the underlying event handlers directl&lt;/span&gt;&lt;span style="font-family: times;"&gt;y. Therefore, the UI acts as the public API, leaving the business logic as an implementation detail (also known as the &lt;/span&gt;&lt;a href="http://xunitpatterns.com/Principles%20of%20Test%20Automation.html#Use%20the%20Front%20Door%20First" style="font-family: times;"&gt;"Use the Front Door First"&lt;/a&gt;&lt;span style="font-family: times;"&gt; principle), resulting in better coverage of a feature.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: times;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: times;"&gt;&lt;i&gt;&lt;span style="font-weight: bold;"&gt;Disclaimer:&lt;/span&gt; “gShoe” is not a real Google product. Unfortunately you can’t buy a pair even if the bug is fixed!&lt;/i&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;</content><link href="http://testing.googleblog.com/feeds/7591798787317882905/comments/default" rel="replies" title="Post Comments" type="application/atom+xml"/><link href="http://testing.googleblog.com/2020/10/testing-on-toilet-testing-ui-logic.html#comment-form" rel="replies" title="6 Comments" type="text/html"/><link href="http://www.blogger.com/feeds/15045980/posts/default/7591798787317882905" rel="edit" type="application/atom+xml"/><link href="http://www.blogger.com/feeds/15045980/posts/default/7591798787317882905" rel="self" type="application/atom+xml"/><link href="http://testing.googleblog.com/2020/10/testing-on-toilet-testing-ui-logic.html" rel="alternate" title="Testing on the Toilet: Testing UI Logic? Follow the User!" type="text/html"/><author><name>Google Testing Bloggers</name><uri>http://www.blogger.com/profile/03153388556673050910</uri><email>noreply@blogger.com</email><gd:image height="7" rel="http://schemas.google.com/g/2005#thumbnail" src="http://3.bp.blogspot.com/-H1YTvw0kdFA/UTf_IXv4N2I/AAAAAAAAABY/ghqaO2KBOSA/s1600/gtb3.png" width="32"/></author><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" height="72" url="https://1.bp.blogspot.com/-0OcrJkvSUYw/X5NaG4FFquI/AAAAAAAAAck/WUBHX6fJZZoOLqgzsmgjfOyAcX5x0reHACLcBGAsYHQ/s72-w258-h320-c/image1.png" width="72"/><thr:total>6</thr:total></entry><entry><id>tag:blogger.com,1999:blog-15045980.post-2440733433273689335</id><published>2020-08-19T09:04:00.000-07:00</published><updated>2020-08-19T09:04:17.279-07:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="Adel Saoud"/><category scheme="http://www.blogger.com/atom/ns#" term="TotT"/><title type="text">Testing on the Toilet: Avoid Hardcoding Values for Better Libraries</title><content type="html">&lt;i&gt;&lt;span style="font-family: times;"&gt;This article was adapted from a Google &lt;a href="http://googletesting.blogspot.com/2007/01/introducing-testing-on-toilet.html"&gt;Testing on the Toilet&lt;/a&gt; (TotT) episode. You can download a &lt;a href="https://docs.google.com/document/d/1YPg8KK1w-fsKCYupdVkE9MvDezlaSYSfASGKW46GKrw/edit?usp=sharing"&gt;printer-friendly version&lt;/a&gt; of this TotT episode and post it in your office.&lt;/span&gt;&lt;/i&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: times;"&gt;By Adel Saoud&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: times;"&gt;You may have been in a situation where you're using a value that always remains the same, so you define a constant. This can be a good practice as it removes magic values and improves code readability. But be mindful that &lt;span style="color: #800180; font-weight: bold;"&gt;hardcoding values can make usability and potential refactoring significantly harder&lt;/span&gt;.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: times;"&gt;Consider the following function that relies on hardcoded values:&lt;/span&gt;&lt;/div&gt; &lt;div style="overflow-x: auto;"&gt;&lt;table class="my-bordered-table" style="width: 613px;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="background-color: #f4cccc; vertical-align: top; width: 607px;"&gt;&lt;pre style="background-color: #f4cccc; border: 0px; color: black; margin: 0px; padding-bottom: 0px; padding-left: 0px; padding-top: 0px;"&gt;&lt;span face="" style="font-family: consolas, &amp;quot;courier new&amp;quot;, courier, monospace;"&gt;&lt;span style="color: #1155cc;"&gt;// Declared in the module.&lt;/span&gt;&lt;br /&gt;constexpr int &lt;span style="font-weight: bold;"&gt;kThumbnailSizes&lt;/span&gt;[] = {480, 576, 720};&lt;br /&gt;&lt;br /&gt;&lt;span style="color: #1155cc;"&gt;// Returns thumbnails of various sizes for the given image.&lt;/span&gt;&lt;br /&gt;std::vector&amp;lt;Image&amp;gt; GetThumbnails(const Image&amp;amp; image) {&lt;br /&gt;  std::vector&amp;lt;Image&amp;gt; thumbnails;&lt;br /&gt;  for (const int size : &lt;span style="font-weight: bold;"&gt;kThumbnailSizes&lt;/span&gt;) {&lt;br /&gt;    thumbnails.push_back(ResizeImage(image, size));&lt;br /&gt;  }&lt;br /&gt;  return thumbnails;&lt;br /&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;div&gt;&lt;span style="color: #800180; font-family: times; font-weight: bold;"&gt;Using hardcoded values can make your code:&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;&lt;span style="font-family: times;"&gt;&lt;span style="color: #800180; font-weight: bold;"&gt;Less predictable:&lt;/span&gt; The caller might not expect the function to be relying on hardcoded values outside its parameters; a user of the function shouldn’t need to read the function’s code to know that. Also, it is difficult to predict the product/resource/performance implications of changing these hardcoded values.&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style="font-family: times;"&gt;&lt;span style="color: #800180; font-weight: bold;"&gt;Less reusable:&lt;/span&gt; The caller is not able to call the function with different values and is stuck with the hardcoded values. If the caller doesn’t need all these sizes or needs a different size, the function has to be forked or refactored to avoid aforementioned complications with existing callers.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: times;"&gt;&lt;span style="color: #800180; font-weight: bold;"&gt;When designing a library, prefer to pass required values, such as through a function call or a constructor&lt;/span&gt;. The code above can be improved as follows:&lt;/span&gt;&lt;/div&gt; &lt;div style="overflow-x: auto;"&gt;&lt;table class="my-bordered-table" style="width: 613px;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="background-color: #d9ead3; vertical-align: top; width: 607px;"&gt;&lt;pre style="background-color: #d9ead3; border: 0px; color: black; margin: 0px; padding-bottom: 0px; padding-left: 0px; padding-top: 0px;"&gt;&lt;span face="" style="font-family: consolas, &amp;quot;courier new&amp;quot;, courier, monospace;"&gt;std::vector&amp;lt;Image&amp;gt; GetThumbnails(const Image&amp;amp; image, &lt;span style="font-weight: bold;"&gt;absl::Span&amp;lt;const int&amp;gt; sizes&lt;/span&gt;) {&lt;br /&gt;  std::vector&amp;lt;Image&amp;gt; thumbnails;&lt;br /&gt;  for (const int size : &lt;span style="font-weight: bold;"&gt;sizes&lt;/span&gt;) {&lt;br /&gt;    thumbnails.push_back(ResizeImage(image, size));&lt;br /&gt;  }&lt;br /&gt;  return thumbnails;&lt;br /&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="overflow-x: auto;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="overflow-x: auto;"&gt;&lt;span style="font-family: times;"&gt;&lt;span style="color: #800180; font-weight: bold;"&gt;If most of the callers use the same value for a certain parameter, make your code configurable so that this value doesn't need to be duplicated by each caller.&lt;/span&gt; For example, you can define a public constant that contains a commonly used value, or use default arguments in languages that support this feature (e.g. C++ or Python).&lt;/span&gt;&lt;/div&gt; &lt;div style="overflow-x: auto;"&gt;&lt;table class="my-bordered-table" style="width: 613px;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="background-color: #c9daf8; vertical-align: top; width: 607px;"&gt;&lt;pre style="background-color: #c9daf8; border: 0px; color: black; margin: 0px; padding-bottom: 0px; padding-left: 0px; padding-top: 0px;"&gt;&lt;span face="" style="font-family: consolas, &amp;quot;courier new&amp;quot;, courier, monospace;"&gt;&lt;span style="color: #0f9d58;"&gt;// Declared in the public header.&lt;/span&gt;&lt;br /&gt;inline constexpr int &lt;span style="font-weight: bold;"&gt;kDefaultThumbnailSizes&lt;/span&gt;[] = {480, 576, 720};&lt;br /&gt;&lt;br /&gt;&lt;span style="color: #0f9d58;"&gt;// Default argument allows the function to be used without specifying a size.&lt;/span&gt;&lt;br /&gt;std::vector&amp;lt;Image&amp;gt; GetThumbnails(const Image&amp;amp; image,&lt;br /&gt;                                 absl::Span&amp;lt;const int&amp;gt; sizes = &lt;span style="font-weight: bold;"&gt;kDefaultThumbnailSizes&lt;/span&gt;);&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;     </content><link href="http://testing.googleblog.com/feeds/2440733433273689335/comments/default" rel="replies" title="Post Comments" type="application/atom+xml"/><link href="http://testing.googleblog.com/2020/08/testing-on-toilet-avoid-hardcoding.html#comment-form" rel="replies" title="7 Comments" type="text/html"/><link href="http://www.blogger.com/feeds/15045980/posts/default/2440733433273689335" rel="edit" type="application/atom+xml"/><link href="http://www.blogger.com/feeds/15045980/posts/default/2440733433273689335" rel="self" type="application/atom+xml"/><link href="http://testing.googleblog.com/2020/08/testing-on-toilet-avoid-hardcoding.html" rel="alternate" title="Testing on the Toilet: Avoid Hardcoding Values for Better Libraries" type="text/html"/><author><name>Google Testing Bloggers</name><uri>http://www.blogger.com/profile/03153388556673050910</uri><email>noreply@blogger.com</email><gd:image height="7" rel="http://schemas.google.com/g/2005#thumbnail" src="http://3.bp.blogspot.com/-H1YTvw0kdFA/UTf_IXv4N2I/AAAAAAAAABY/ghqaO2KBOSA/s1600/gtb3.png" width="32"/></author><thr:total>7</thr:total></entry><entry><id>tag:blogger.com,1999:blog-15045980.post-8115141727768781054</id><published>2020-08-07T09:01:00.005-07:00</published><updated>2020-08-07T09:18:56.367-07:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="Adam Bender"/><category scheme="http://www.blogger.com/atom/ns#" term="Carlos Arguelles"/><category scheme="http://www.blogger.com/atom/ns#" term="Marko Ivanković"/><title type="text">Code Coverage Best Practices</title><content type="html">By Carlos Arguelles, Marko Ivanković‎, and Adam Bender&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;i&gt;We have spent several decades driving software testing initiatives in various very large software companies. One of the areas that we have consistently advocated for is the use of code coverage data to assess risk and identify gaps in testing. However, the value of code coverage is a highly debated subject with strong opinions, and a surprisingly polarizing topic. Every time code coverage is mentioned in any large group of people, seemingly endless arguments ensue. These tend to lead the conversation away from any productive progress, as people securely bunker in their respective camps. The purpose of this document is to give you tools to steer people on all ends of the spectrum to find common ground so that you can move forward and use coverage information pragmatically. We put forth best practices in the domain of code coverage to work effectively with code health.&lt;/i&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;ul style="text-align: left;"&gt;&lt;li style="padding: 15px 0px;"&gt;&lt;span style="font-weight: bold;"&gt;Code coverage provides significant benefits to the developer workflow.&lt;/span&gt; It is not a perfect measure of test quality, but it does offer a reasonable, objective, industry standard metric with actionable data. It does not require significant human interaction, it applies universally to all products, and there are ample tools available in the industry for most languages. You must treat it with the understanding that it’s a lossy and indirect metric that compresses a lot of information into a single number so it should not be your only source of truth.&amp;nbsp; Instead, use it in conjunction with other techniques to create a more holistic assessment of your testing efforts.&lt;/li&gt;&lt;li style="padding: 15px 0px;"&gt;&lt;span style="font-weight: bold;"&gt;It is an open research question whether code coverage alone reduces defects,&lt;/span&gt; but our experience shows that efforts in increasing code coverage can often lead to culture changes in engineering excellence that in the long run reduce defects. For example, teams that give code coverage priority tend to treat testing as a first class citizen, and tend to bake stronger testability into their product design, so that they can achieve their testing goals with less effort. All this in turn leads to writing higher quality code to begin with (more modular, cleaner contracts in their APIs, more manageable code reviews, etc.). They also start caring more about their overall health, and engineering and operational excellence.&lt;/li&gt;&lt;li style="padding: 15px 0px;"&gt;&lt;span style="font-weight: bold;"&gt;A &lt;u&gt;high&lt;/u&gt; code coverage percentage does not guarantee high quality in the test coverage.&lt;/span&gt; Focusing on getting the number as close as possible to 100% leads to a false sense of security. It could also be wasteful, burning machine cycles and creating technical debt from low-value tests that now need to be maintained. Bad code being pushed to production due to missing tests could happen either because (a) your tests did not cover a specific path of code, a test gap that is easy to identify with code coverage analysis, or (b) because your tests did not cover a specific edge case in an area that did have code coverage, which is difficult or impossible to catch with code coverage analysis. Code coverage does not guarantee that the covered lines or branches have been tested &lt;i&gt;correctly&lt;/i&gt;, it just guarantees that they have been executed by a test. Be mindful of copy/pasting tests just for the sake of increasing coverage, or adding tests with little actual value, to comply with the number. A better technique to assess whether you’re adequately exercising the lines your tests cover, and adequately asserting on failures, is &lt;a href="https://research.google/pubs/pub46584/"&gt;mutation&lt;/a&gt; testing.&lt;/li&gt;&lt;li style="padding: 15px 0px;"&gt;&lt;span style="font-weight: bold;"&gt;But a &lt;u&gt;low&lt;/u&gt; code coverage number does guarantee that large areas of the product are going completely untested&lt;/span&gt; by automation on every single deployment. This increases our risk of pushing bad code to production, so it should receive attention. &lt;i&gt;In fact a lot of the value of code coverage data is to highlight not what’s covered, but what’s not covered.&lt;/i&gt;&lt;/li&gt;&lt;li style="padding: 15px 0px;"&gt;&lt;span style="font-weight: bold;"&gt;There is no “ideal code coverage number” that universally applies to all products.&lt;/span&gt; The level of testing you want/need for a set of code should be a function of (a) business impact/criticality of the code; (b) how often you will need to touch/change the code; (c) how much longer you expect the code to live, its complexity, and domain variables. We cannot mandate every single team should have x% code coverage; this is a business decision best made by the owners of the product with domain-specific knowledge. Any mandate to reach x% code coverage should be accompanied by infrastructure investments to make testing easy, such as integrating tools into the developer workflow. Be mindful that engineers may start treating your target like a checkbox and avoid increasing coverage beyond the target, even if doing so would be prudent.&lt;/li&gt;&lt;li style="padding: 15px 0px;"&gt;&lt;span style="font-weight: bold;"&gt;In general code coverage of a lot of products is below the bar; we should aim at significantly improving code coverage across the board.&lt;/span&gt; Although there is no “ideal code coverage number,” at Google we offer the general guidelines of 60% as “acceptable”, 75% as “commendable” and 90% as “exemplary.” However we like to stay away from broad top-down mandates and encourage every team to select the value that makes sense for their business needs.&lt;/li&gt;&lt;li style="padding: 15px 0px;"&gt;&lt;span style="font-weight: bold;"&gt;We should not be obsessing on how to get from 90% code coverage to 95%.&lt;/span&gt; The gains of increasing code coverage beyond a certain point are logarithmic. But we should be taking concrete steps to get from 30% to 70% and always making sure new code meets our desired threshold.&lt;/li&gt;&lt;li style="padding: 15px 0px;"&gt;&lt;span style="font-weight: bold;"&gt;More important than the percentage of lines covered is human judgment over the actual lines of code (and behaviors)&amp;nbsp; that aren’t being covered&lt;/span&gt; (analyzing the gaps in testing) and whether this risk is acceptable or not. What’s not covered is more meaningful than what is covered. Pragmatic discussions over specific lines of code not covered that take place during the code review process are more valuable than over-indexing on an arbitrary target number. We have found out that embedding code coverage into your code review process makes code reviews faster and easier. Not all code is equally important, for example testing debug log lines is often not as important, so when developers can see not just the coverage number, but each covered line highlighted as part of the code review, they will make sure that the most important code is covered.&amp;nbsp;&lt;/li&gt;&lt;li style="padding: 15px 0px;"&gt;&lt;span style="font-weight: bold;"&gt;Just because your product has low code coverage doesn’t mean you can’t take concrete, incremental steps to improve it over time.&lt;/span&gt; Inheriting a legacy system with poor testing and poor testability can be daunting, and you may not feel empowered to turn it around, or even know where to start. But at the very least, you can adopt the ‘boy-scout rule’ (leave the campground cleaner than you found it). Over time, and incrementally, you will get to a healthy location.&lt;/li&gt;&lt;li style="padding: 15px 0px;"&gt;&lt;span style="font-weight: bold;"&gt;Make sure that frequently changing code is covered.&lt;/span&gt; While project wide goals above 90% are most likely not worth it, per-commit coverage goals of 99% are reasonable, and 90% is a good lower threshold. We need to ensure that our tests are not getting worse over time.&lt;/li&gt;&lt;li style="padding: 15px 0px;"&gt;&lt;span style="font-weight: bold;"&gt;Unit test code coverage is only a piece of the puzzle.&lt;/span&gt; Integration/System test code coverage is important too. And the aggregate view of the coverage of all sources in your Pipeline (unit and integration) is paramount, as it gives you the bigger picture of how much of your code is not exercised by your test automation as it makes its way in your pipeline to a production environment. One thing you should be aware of is while unit tests have high correlation between executed and evaluated code, some of the coverage from integration tests and end-to-end tests is incidental and not deliberate. But incorporating code coverage from integration tests can help you avoid situations where you have a false sense of security that even though you’re not covering code in your unit tests, you think you’re covering it in your integration tests.&lt;/li&gt;&lt;li style="padding: 15px 0px;"&gt;&lt;span style="font-weight: bold;"&gt;We should gate deployments that do not meet our code coverage standards.&lt;/span&gt; Teams should debate and decide which gating mechanism makes sense to them. You should however be careful that it doesn’t turn into being treated as a checkbox that is required to be filled, as it can backfire (pressure to 'hit the metric' almost never yields the desired outcome). There are many mechanisms available:&amp;nbsp; gate on coverage for all code vs gate on coverage to new code only; gate on a specific hard-coded code coverage number vs gate on delta from prior version, specific parts of the code to ignore or focus on. And then, commit to upholding these as a team. Drops in code coverage violating the gate should prevent the code from being checked in and reaching production.&amp;nbsp;&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;i&gt;If you would like to learn more about Google's coverage infrastructure, we welcome you to read our paper “Coverage at Google” which can be found &lt;a href="https://research.google/pubs/pub48413/"&gt;here&lt;/a&gt;.&lt;/i&gt;&lt;/div&gt;</content><link href="http://testing.googleblog.com/feeds/8115141727768781054/comments/default" rel="replies" title="Post Comments" type="application/atom+xml"/><link href="http://testing.googleblog.com/2020/08/code-coverage-best-practices.html#comment-form" rel="replies" title="3 Comments" type="text/html"/><link href="http://www.blogger.com/feeds/15045980/posts/default/8115141727768781054" rel="edit" type="application/atom+xml"/><link href="http://www.blogger.com/feeds/15045980/posts/default/8115141727768781054" rel="self" type="application/atom+xml"/><link href="http://testing.googleblog.com/2020/08/code-coverage-best-practices.html" rel="alternate" title="Code Coverage Best Practices" type="text/html"/><author><name>Google Testing Bloggers</name><uri>http://www.blogger.com/profile/03153388556673050910</uri><email>noreply@blogger.com</email><gd:image height="7" rel="http://schemas.google.com/g/2005#thumbnail" src="http://3.bp.blogspot.com/-H1YTvw0kdFA/UTf_IXv4N2I/AAAAAAAAABY/ghqaO2KBOSA/s1600/gtb3.png" width="32"/></author><thr:total>3</thr:total></entry><entry><id>tag:blogger.com,1999:blog-15045980.post-1411553411757866650</id><published>2020-07-16T09:10:00.000-07:00</published><updated>2020-07-16T09:25:06.610-07:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="Andrew Trenk"/><category scheme="http://www.blogger.com/atom/ns#" term="Stefan Kennedy"/><category scheme="http://www.blogger.com/atom/ns#" term="TotT"/><title type="text">Testing on the Toilet: Don’t Mock Types You Don’t Own</title><content type="html">&lt;span style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;"&gt;&lt;span style="font-style: italic; vertical-align: baseline; white-space: pre-wrap;"&gt;This article was adapted from a &lt;/span&gt;&lt;a href="http://googletesting.blogspot.com/2007/01/introducing-testing-on-toilet.html"&gt;&lt;span style="color: #1155cc; font-style: italic; vertical-align: baseline; white-space: pre-wrap;"&gt;Google Testing on the Toilet&lt;/span&gt;&lt;/a&gt;&lt;span style="font-style: italic; vertical-align: baseline; white-space: pre-wrap;"&gt; (TotT) episode. You can download a &lt;/span&gt;&lt;a href="https://docs.google.com/document/d/1sfN_B9MfVtRgXJ692y1G6AwwCF0duCAqS_JF_kEsEx0/edit?usp=sharing" rel="nofollow"&gt;&lt;span style="color: #1155cc; font-style: italic; vertical-align: baseline; white-space: pre-wrap;"&gt;printer-friendly version&lt;/span&gt;&lt;/a&gt;&lt;span style="font-style: italic; vertical-align: baseline; white-space: pre-wrap;"&gt; of this TotT episode and post it in your office.&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif; font-style: italic; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style="font-style: italic; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;span style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif; font-style: normal;"&gt;By Stefan Kennedy and Andrew Trenk&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;"&gt;&lt;span style="font-style: italic; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;span style="font-style: normal;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="vertical-align: baseline;"&gt;&lt;span style="white-space: pre-wrap;"&gt;The code below mocks a third-party library. What problems can arise when doing this?&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;div style="overflow-x: auto;"&gt;&lt;table class="my-bordered-table" style="width: 613px;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="background-color: #f4cccc; vertical-align: top; width: 607px;"&gt;&lt;pre style="background-color: #f4cccc; border: 0px; color: black; margin: 0px; padding-bottom: 0px; padding-left: 0px; padding-top: 0px;"&gt;&lt;span style="font-family: &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;span style="color: #1155cc;"&gt;// Mock a salary payment library&lt;/span&gt;&lt;br /&gt;@Mock &lt;span style="font-weight: bold;"&gt;SalaryProcessor mockSalaryProcessor&lt;/span&gt;;&lt;br /&gt;@Mock &lt;span style="font-weight: bold;"&gt;TransactionStrategy mockTransactionStrategy&lt;/span&gt;;&lt;br /&gt;...&lt;br /&gt;when(&lt;span style="font-weight: bold;"&gt;mockSalaryProcessor&lt;/span&gt;.addStrategy()).thenReturn(&lt;span style="font-weight: bold;"&gt;mockTransactionStrategy&lt;/span&gt;);&lt;br /&gt;when(&lt;span style="font-weight: bold;"&gt;mockSalaryProcessor&lt;/span&gt;.paySalary()).thenReturn(TransactionStrategy.SUCCESS);&lt;br /&gt;MyPaymentService myPaymentService = new MyPaymentService(&lt;span style="font-weight: bold;"&gt;mockSalaryProcessor&lt;/span&gt;);&lt;br /&gt;assertThat(myPaymentService.sendPayment()).isEqualTo(PaymentStatus.SUCCESS);&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;br /&gt;&lt;span id="docs-internal-guid-66441720-7fff-bbea-64b4-ca2576bbcdcc"&gt;&lt;span style="color: purple; font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;"&gt;&lt;span style="font-weight: 700; vertical-align: baseline; white-space: pre-wrap;"&gt;Mocking types you don’t own can make maintenance more difficult&lt;/span&gt;&lt;span style="vertical-align: baseline; white-space: pre-wrap;"&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;span style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;"&gt;&lt;i&gt;It can make it harder to upgrade the library to a new version:&lt;/i&gt; The expectations of an API hardcoded in a mock can be wrong or get out of date. This may require time-consuming work to manually update your tests when upgrading the library version. In the above example, an update that changes &lt;/span&gt;&lt;span style="color: #0f9d58; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;addStrategy()&lt;/span&gt;&lt;span style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;"&gt; to return a new type derived from&lt;/span&gt; &lt;span style="color: #0f9d58; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;TransactionStrategy&lt;/span&gt;&lt;span style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;"&gt; (e.g.&lt;/span&gt; &lt;span style="color: #0f9d58; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;SalaryStrategy&lt;/span&gt;&lt;span style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;"&gt;) requires the mock to be updated to return this type, even though the code under test doesn’t need to be changed since it can still reference &lt;/span&gt;&lt;span style="color: #0f9d58; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;TransactionStrategy&lt;/span&gt;.&lt;/li&gt;&lt;li&gt;&lt;span style="font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;span style="font-family: &amp;quot;times new roman&amp;quot;;"&gt;&lt;i&gt;It can make it harder to know whether a library update introduced a bug in your code:&lt;/i&gt; The assumptions built into mocks may get out of date as changes are made to the library, resulting in tests that pass even when the code under test has a bug. In the above example, if a library update changes &lt;span style="color: #0f9d58; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;paySalary()&lt;/span&gt; to instead return &lt;span style="color: #0f9d58; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;TransactionStrategy.SCHEDULED&lt;/span&gt;, a bug could potentially be introduced due to the code under test not handling this return value properly. However, the maintainer wouldn’t know because the mock would not return this value so the test would continue to pass.&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;span id="docs-internal-guid-db81b340-7fff-66ce-68b9-87506e05722c" style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;"&gt;&lt;span style="font-weight: 700; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;span style="color: purple;"&gt;Instead of using a mock, use the real implementation, or if that’s not feasible, use a&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #980000; font-weight: 700; vertical-align: baseline; white-space: pre-wrap;"&gt; &lt;/span&gt;&lt;a href="https://testing.googleblog.com/2013/06/testing-on-toilet-fake-your-way-to.html" style="text-decoration-line: none;"&gt;&lt;span style="color: #1155cc; font-weight: 700; vertical-align: baseline; white-space: pre-wrap;"&gt;fake implementation&lt;/span&gt;&lt;/a&gt;&lt;span style="color: #980000; font-weight: 700; vertical-align: baseline; white-space: pre-wrap;"&gt; &lt;/span&gt;&lt;span style="vertical-align: baseline; white-space: pre-wrap;"&gt;that is ideally provided by the library owner. This reduces the maintenance burden since the issues with mocks listed above don’t occur when using a real or fake implementation. For example: &lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="overflow-x: auto;"&gt;&lt;table class="my-bordered-table" style="width: 613px;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="background-color: #d9ead3; vertical-align: top; width: 607px;"&gt;&lt;pre style="background-color: #d9ead3; border: 0px; color: black; margin: 0px; padding-bottom: 0px; padding-left: 0px; padding-top: 0px;"&gt;&lt;span style="font-family: &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;span style="font-weight: bold;"&gt;FakeSalaryProcessor fakeProcessor&lt;/span&gt; = &lt;span style="font-weight: bold;"&gt;new FakeSalaryProcessor();&lt;/span&gt; &lt;span style="color: #1155cc;"&gt;// Designed for tests&lt;/span&gt;&lt;br /&gt;MyPaymentService myPaymentService = new MyPaymentService(&lt;span style="font-weight: bold;"&gt;fakeProcessor&lt;/span&gt;);&lt;br /&gt;assertThat(myPaymentService.sendPayment()).isEqualTo(PaymentStatus.SUCCESS);&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;br /&gt;&lt;span id="docs-internal-guid-3edfd492-7fff-0dc3-a7d1-3a6009a5bf5a" style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;"&gt;&lt;span style="color: purple;"&gt;&lt;span style="font-weight: 700; vertical-align: baseline; white-space: pre-wrap;"&gt;If you can’t use the real implementation and a fake implementation doesn’t exist (and library owners aren’t able to create one), &lt;/span&gt;&lt;span style="background-color: white; font-weight: 700; vertical-align: baseline; white-space: pre-wrap;"&gt;create a wrapper class that calls the type, and mock this instead&lt;/span&gt;&lt;span style="font-weight: 700; vertical-align: baseline; white-space: pre-wrap;"&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span style="vertical-align: baseline; white-space: pre-wrap;"&gt; This reduces the maintenance burden by avoiding mocks that rely on the signatures of the library API. For example:&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;times new roman&amp;quot;; font-size: 12pt; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;br /&gt;&lt;/span&gt;  &lt;br /&gt;&lt;div style="overflow-x: auto;"&gt;&lt;table class="my-bordered-table" style="width: 613px;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="background-color: #fff2cc; vertical-align: top; width: 607px;"&gt;&lt;pre style="background-color: #fff2cc; border: 0px; color: black; margin: 0px; padding-bottom: 0px; padding-left: 0px; padding-top: 0px;"&gt;&lt;span style="font-family: &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;@Mock &lt;span style="font-weight: bold;"&gt;MySalaryProcessor mockMySalaryProcessor&lt;/span&gt;; &lt;span style="color: #1155cc;"&gt;// Wraps the SalaryProcessor library&lt;/span&gt;&lt;br /&gt;...&lt;br /&gt;&lt;span style="color: #1155cc;"&gt;// Mock the wrapper class rather than the library itself&lt;/span&gt;&lt;br /&gt;when(&lt;span style="font-weight: bold;"&gt;mockMySalaryProcessor&lt;/span&gt;.sendSalary()).thenReturn(PaymentStatus.SUCCESS);&lt;br /&gt;&lt;br /&gt;MyPaymentService myPaymentService = new MyPaymentService(&lt;span style="font-weight: bold;"&gt;mockMySalaryProcessor&lt;/span&gt;);&lt;br /&gt;assertThat(myPaymentService.sendPayment()).isEqualTo(PaymentStatus.SUCCESS);&lt;br /&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;br /&gt;&lt;span id="docs-internal-guid-05127cef-7fff-4938-1a89-b28f378ad8a8"&gt;&lt;span style="font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;span style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;"&gt;To avoid the problems listed above, prefer to test the wrapper class with calls to the real implementation. The downsides of testing with the real implementation (e.g. tests taking longer to run) are limited only to the tests for this wrapper class rather than tests throughout your codebase.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style="font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;span style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;"&gt;&lt;span style="white-space: pre-wrap;"&gt;“Don’t mock types you don’t own” is also described by Steve Freeman and Nat Pryce in their book, &lt;a href="http://www.growing-object-oriented-software.com/"&gt;Growing Object Oriented Software, Guided by Tests&lt;/a&gt;.&amp;nbsp;&lt;/span&gt;&lt;span style="white-space: pre-wrap;"&gt;For more details about the downsides of overusing mocks (even for types you do own), see &lt;a href="https://testing.googleblog.com/2013/05/testing-on-toilet-dont-overuse-mocks.html"&gt;this&lt;/a&gt; Google Testing Blog post.&lt;/span&gt;&lt;/span&gt;</content><link href="http://testing.googleblog.com/feeds/1411553411757866650/comments/default" rel="replies" title="Post Comments" type="application/atom+xml"/><link href="http://testing.googleblog.com/2020/07/testing-on-toilet-dont-mock-types-you.html#comment-form" rel="replies" title="1 Comments" type="text/html"/><link href="http://www.blogger.com/feeds/15045980/posts/default/1411553411757866650" rel="edit" type="application/atom+xml"/><link href="http://www.blogger.com/feeds/15045980/posts/default/1411553411757866650" rel="self" type="application/atom+xml"/><link href="http://testing.googleblog.com/2020/07/testing-on-toilet-dont-mock-types-you.html" rel="alternate" title="Testing on the Toilet: Don’t Mock Types You Don’t Own" type="text/html"/><author><name>Google Testing Bloggers</name><uri>http://www.blogger.com/profile/03153388556673050910</uri><email>noreply@blogger.com</email><gd:image height="7" rel="http://schemas.google.com/g/2005#thumbnail" src="http://3.bp.blogspot.com/-H1YTvw0kdFA/UTf_IXv4N2I/AAAAAAAAABY/ghqaO2KBOSA/s1600/gtb3.png" width="32"/></author><thr:total>1</thr:total></entry><entry><id>tag:blogger.com,1999:blog-15045980.post-1212546976395040289</id><published>2020-05-08T09:00:00.000-07:00</published><updated>2020-05-08T14:50:55.792-07:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="Anantha Keesara"/><category scheme="http://www.blogger.com/atom/ns#" term="Jobs"/><category scheme="http://www.blogger.com/atom/ns#" term="Test Engineer"/><title type="text">COOL to be a TE @ Google</title><content type="html">&lt;span style="font-family: inherit;"&gt;By&amp;nbsp;Anantha Keesara&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style="font-family: inherit;"&gt;Test Engineers are a part of Google’s Engineering Productivity (EngProd) Group. As mentioned in a &lt;a href="https://testing.googleblog.com/2016/09/what-test-engineers-do-at-google.html"&gt;previous post&lt;/a&gt;, we advocate for our users, provide comprehensive testing solutions, and play a key role creating successful and reliable products and platforms. At Google, Test Engineers are not manual testers; we are technical engineers whose focus is on advancing product excellence and engineering productivity.&lt;/span&gt;&lt;br /&gt;&lt;div&gt;&lt;span style="font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style="font-family: inherit;"&gt;In short, it’s &lt;span style="color: blue; font-weight: bold;"&gt;COOL&lt;/span&gt; (&lt;span style="font-weight: bold;"&gt;C&lt;/span&gt;onstant learner, &lt;span style="font-weight: bold;"&gt;O&lt;/span&gt;ut-of-the-box thinker, &lt;span style="font-weight: bold;"&gt;O&lt;/span&gt;rchestrator, &lt;span style="font-weight: bold;"&gt;L&lt;/span&gt;eading-edge user) to be a Test Engineer at Google:&lt;/span&gt;&lt;/div&gt;&lt;br /&gt;&lt;span style="font-family: inherit;"&gt;&lt;span style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style="font-family: inherit;"&gt;&lt;span style="color: blue; font-size: larger; font-weight: bold;"&gt;C&lt;/span&gt;onstant learning is what keeps Google Test Engineers motivated. We understand holistically how all the pieces of the software stack are interconnected and what kind of coverage exists or is needed to test the connections between the stacks.This product knowledge makes us test experts. We work closely with Software Engineers from the very beginning of the development process to discuss the testability of the designs before the features are implemented.&amp;nbsp; We develop test strategies, methodologies, and test plans; we write scripts, design systems, and build tools and test infrastructure. We review design docs, do deep dives into Google's massive codebase, evaluate stack traces, and determine the root causes of production outages. Through this constant learning, we not only build deep technical expertise and do risk management by identifying weak spots in the code base, we also find creative ways to break software and identify potential problems. Our job ladder also gives us the flexibility and independence to explore and learn new technologies like ML concepts and Cloud computing and to build new testing solutions or improve existing ones.&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;div&gt;&lt;span style="font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: inherit;"&gt;&lt;span style="color: blue; font-size: larger; font-weight: bold;"&gt;O&lt;/span&gt;ut-of-the-box thinking, a result of constant learning, is another thing that keeps us motivated. As Google Test Engineers, we champion Engineering excellence by&amp;nbsp; providing optimized solutions to address engineering inefficiencies, testing gaps, and process gaps. We constantly think of ways to make machines do the work to increase testability and productivity. Hundreds and thousands of lines of code get checked-in every minute at Google. To maintain velocity, quality, and code health, we devise creative ways to test and debug the test failures -- like performing diff testing, building dynamic test cases from the logs, designing heuristic algorithms to identify culprits for test failures, building solutions to reduce the test run time, and implementing stubs, fakes, and mock objects and servers to help developers write stable unit and integration testing. Along with devising creative ways to test and debug the test failures, we also focus on improving engineering excellence and product excellence by defining and measuring productivity metrics and product health metrics like quality, stability, and performance. The testing of, for example, Search, Ads, Maps, YouTube, Cloud, self-driving cars, and Google Apps would not have scaled with traditional testing practices.&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;span style="font-family: inherit;"&gt;&lt;span style="color: blue; font-size: larger; font-weight: bold;"&gt;O&lt;/span&gt;rchestrating the testing efforts is a key responsibility of Google Test Engineers. As orchestrators we can collaborate with cross functional teams including Product Managers, Technical Program Managers, and Software engineers to define critical user journeys (CUJs), determine testing strategies, and ensure that the right tests are run on the right configurations/environments. With our strong communication and collaboration skills, we work with the cross-functional teams and play the role of evangelists in spreading the word on new tools, technologies, and best testing practices.&amp;nbsp; We also have the opportunity to host Hackathons and Fixits, host interns, drive college recruiting events, engage with the open source community in testing the open source products, listen to feedback, and convert that feedback into product improvements.&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;span style="font-family: inherit;"&gt;&lt;span style="color: blue; font-size: larger; font-weight: bold;"&gt;L&lt;/span&gt;eading-edge user: the fun part of being a Test Engineer! We can engage with product development, participate in the review of product designs, documentation, and prototypes, play with features and products early on, and provide informed feedback. Best of all, as early adopters we get to wear wearables, ride in self driving cars, be in our own world with AR/VR, engage with Google Assistant to get our chores done, and have multiple laptops, phones, and smart display units!&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style="font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;span style="font-family: inherit;"&gt;Stay tuned to learn more &lt;span style="color: blue; font-weight: bold;"&gt;COOL&lt;/span&gt; things about Test Engineering at Google!&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;</content><link href="http://testing.googleblog.com/feeds/1212546976395040289/comments/default" rel="replies" title="Post Comments" type="application/atom+xml"/><link href="http://testing.googleblog.com/2020/05/cool-to-be-te-google.html#comment-form" rel="replies" title="6 Comments" type="text/html"/><link href="http://www.blogger.com/feeds/15045980/posts/default/1212546976395040289" rel="edit" type="application/atom+xml"/><link href="http://www.blogger.com/feeds/15045980/posts/default/1212546976395040289" rel="self" type="application/atom+xml"/><link href="http://testing.googleblog.com/2020/05/cool-to-be-te-google.html" rel="alternate" title="COOL to be a TE @ Google" type="text/html"/><author><name>Google Testing Bloggers</name><uri>http://www.blogger.com/profile/03153388556673050910</uri><email>noreply@blogger.com</email><gd:image height="7" rel="http://schemas.google.com/g/2005#thumbnail" src="http://3.bp.blogspot.com/-H1YTvw0kdFA/UTf_IXv4N2I/AAAAAAAAABY/ghqaO2KBOSA/s1600/gtb3.png" width="32"/></author><thr:total>6</thr:total></entry><entry><id>tag:blogger.com,1999:blog-15045980.post-6878816982896642200</id><published>2019-12-03T08:22:00.000-08:00</published><updated>2019-12-11T08:25:10.618-08:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="Derek Snyder"/><category scheme="http://www.blogger.com/atom/ns#" term="Erik Kuefler"/><category scheme="http://www.blogger.com/atom/ns#" term="TotT"/><title type="text">Testing on the Toilet: Tests Too DRY? Make Them DAMP!</title><content type="html">&lt;span style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;"&gt;&lt;span style="font-style: italic; vertical-align: baseline; white-space: pre-wrap;"&gt;This article was adapted from a &lt;/span&gt;&lt;a href="http://googletesting.blogspot.com/2007/01/introducing-testing-on-toilet.html"&gt;&lt;span style="color: #1155cc; font-style: italic; vertical-align: baseline; white-space: pre-wrap;"&gt;Google Testing on the Toilet&lt;/span&gt;&lt;/a&gt;&lt;span style="font-style: italic; vertical-align: baseline; white-space: pre-wrap;"&gt; (TotT) episode. You can download a &lt;/span&gt;&lt;a href="https://docs.google.com/document/d/1mqIk9nrlySviWOP3yZfRpj6HQivXHYzeiI0bi4QdmBk/edit?usp=sharing" rel="nofollow"&gt;&lt;span style="color: #1155cc; font-style: italic; vertical-align: baseline; white-space: pre-wrap;"&gt;printer-friendly version&lt;/span&gt;&lt;/a&gt;&lt;span style="font-style: italic; vertical-align: baseline; white-space: pre-wrap;"&gt; of this TotT episode and post it in your office.&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif; font-style: italic; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style="font-style: italic; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;span style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif; font-style: normal;"&gt;By Derek Snyder and Erik Kuefler&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif; font-style: italic; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;span style="font-style: normal;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="vertical-align: baseline;"&gt;&lt;span style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif; white-space: pre-wrap;"&gt;&lt;span style="color: purple; font-weight: bold;"&gt;The test below follows the &lt;a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself"&gt;DRY principle&lt;/a&gt; (“Don’t Repeat Yourself”)&lt;/span&gt;, a best practice that encourages code reuse rather than duplication, e.g., by extracting helper methods or by using loops. But is it a well-written test?&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;div style="overflow-x: auto;"&gt;&lt;table class="my-bordered-table" style="width: 613px;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="background-color: #f4cccc; vertical-align: top; width: 607px;"&gt;&lt;pre style="background-color: #f4cccc; border: 0px; color: black; margin: 0px; padding-bottom: 0px; padding-left: 0px; padding-top: 0px;"&gt;&lt;span style="font-family: &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;def setUp(self):&lt;br /&gt;  self.users = [User('alice'), User('bob')]  # This field can be reused across tests.&lt;br /&gt;  self.forum = Forum()&lt;br /&gt;&lt;br /&gt;def &lt;span style="font-weight: bold;"&gt;testCanRegisterMultipleUsers&lt;/span&gt;(self):&lt;br /&gt;  self._RegisterAllUsers()&lt;br /&gt;  for user in self.users:  # Use a for-loop to verify that all users are registered.&lt;br /&gt;    self.assertTrue(self.forum.HasRegisteredUser(user))&lt;br /&gt;&lt;br /&gt;def _RegisterAllUsers(self):  # This method can be reused across tests.&lt;br /&gt;  for user in self.users:&lt;br /&gt;    self.forum.Register(user)&lt;br /&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;"&gt;While the test body above is concise, the reader needs to do some mental computation to understand it, e.g., by following the flow of &lt;/span&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;self.users&lt;/span&gt;&lt;span style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;"&gt; from &lt;/span&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;setUp()&lt;/span&gt;&lt;span style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;"&gt; through &lt;/span&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;_RegisterAllUsers()&lt;/span&gt;&lt;span style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;"&gt;. &lt;span style="color: purple; font-weight: bold;"&gt;Since tests don't have tests, it should be easy for humans to manually inspect them for correctness&lt;/span&gt;, even at the expense of greater code duplication. This means that the DRY principle often isn’t a good fit for unit tests, even though it is a best practice for production code.&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;"&gt;&lt;span style="color: purple; font-weight: bold;"&gt;In tests we can use the &lt;a href="https://stackoverflow.com/questions/6453235/what-does-damp-not-dry-mean-when-talking-about-unit-tests"&gt;DAMP principle&lt;/a&gt; (“Descriptive and Meaningful Phrases”), which emphasizes &lt;i&gt;readability over uniqueness&lt;/i&gt;&lt;/span&gt;&lt;/span&gt;. Applying this principle can introduce code redundancy (e.g., by repeating similar code), but it makes tests more obviously correct. Let’s add some DAMP-ness to the above test:&lt;br /&gt;&lt;br /&gt;&lt;div style="overflow-x: auto;"&gt;&lt;table class="my-bordered-table" style="width: 613px;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="background-color: #d9ead3; vertical-align: top; width: 607px;"&gt;&lt;pre style="background-color: #d9ead3; border: 0px; color: black; margin: 0px; padding-bottom: 0px; padding-left: 0px; padding-top: 0px;"&gt;&lt;span style="font-family: &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;def setUp(self):&lt;br /&gt;  self.forum = Forum()&lt;br /&gt;&lt;br /&gt;def &lt;span style="font-weight: bold;"&gt;testCanRegisterMultipleUsers&lt;/span&gt;(self):&lt;br /&gt;  &lt;span style="color: #1155cc; font-style: italic;"&gt;# Create the users in the test instead of relying on users created in setUp.&lt;/span&gt;&lt;br /&gt;  user1 = User('alice')&lt;br /&gt;  user2 = User('bob')&lt;br /&gt;&lt;br /&gt;  &lt;span style="color: #1155cc; font-style: italic;"&gt;# Register the users in the test instead of in a helper method, and don't use a for-loop.&lt;/span&gt;&lt;br /&gt;  self.forum.Register(user1)&lt;br /&gt;  self.forum.Register(user2)&lt;br /&gt;&lt;br /&gt;  &lt;span style="color: #1155cc; font-style: italic;"&gt;# Assert each user individually instead of using a for-loop.&lt;/span&gt;&lt;br /&gt;  self.assertTrue(self.forum.HasRegisteredUser(user1))&lt;br /&gt;  self.assertTrue(self.forum.HasRegisteredUser(user2))&lt;br /&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;"&gt;Note that &lt;span style="color: purple; font-weight: bold;"&gt;the DRY principle is still relevant in tests&lt;/span&gt;; for example, using a helper function for creating value objects can increase clarity by removing redundant details from the test body. Ideally, test code should be both readable and unique, but sometimes there’s a trade-off. &lt;span style="color: purple; font-weight: bold;"&gt;When writing unit tests and faced with a choice between the DRY and DAMP principles, lean more heavily toward DAMP&lt;/span&gt;.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;</content><link href="http://testing.googleblog.com/feeds/6878816982896642200/comments/default" rel="replies" title="Post Comments" type="application/atom+xml"/><link href="http://testing.googleblog.com/2019/12/testing-on-toilet-tests-too-dry-make.html#comment-form" rel="replies" title="11 Comments" type="text/html"/><link href="http://www.blogger.com/feeds/15045980/posts/default/6878816982896642200" rel="edit" type="application/atom+xml"/><link href="http://www.blogger.com/feeds/15045980/posts/default/6878816982896642200" rel="self" type="application/atom+xml"/><link href="http://testing.googleblog.com/2019/12/testing-on-toilet-tests-too-dry-make.html" rel="alternate" title="Testing on the Toilet: Tests Too DRY? Make Them DAMP!" type="text/html"/><author><name>Google Testing Bloggers</name><uri>http://www.blogger.com/profile/03153388556673050910</uri><email>noreply@blogger.com</email><gd:image height="7" rel="http://schemas.google.com/g/2005#thumbnail" src="http://3.bp.blogspot.com/-H1YTvw0kdFA/UTf_IXv4N2I/AAAAAAAAABY/ghqaO2KBOSA/s1600/gtb3.png" width="32"/></author><thr:total>11</thr:total></entry><entry><id>tag:blogger.com,1999:blog-15045980.post-3070073239211746981</id><published>2019-11-06T09:16:00.001-08:00</published><updated>2019-11-06T09:20:20.986-08:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="Code Health"/><category scheme="http://www.blogger.com/atom/ns#" term="TotT"/><title type="text">Code Health: Respectful Reviews == Useful Reviews</title><content type="html">&lt;span id="docs-internal-guid-31239969-d272-57b1-3d6f-993ac1ed4155" style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;"&gt;&lt;span style="background-color: white; color: #222222; font-style: italic; vertical-align: baseline; white-space: pre-wrap;"&gt;This is another post in our &lt;/span&gt;&lt;a href="https://testing.googleblog.com/2017/04/code-health-googles-internal-code.html" style="text-decoration-line: none;"&gt;&lt;span style="background-color: white; color: #1155cc; font-style: italic; vertical-align: baseline; white-space: pre-wrap;"&gt;Code Health&lt;/span&gt;&lt;/a&gt;&lt;span style="background-color: white; color: #222222; font-style: italic; vertical-align: baseline; white-space: pre-wrap;"&gt; series. A version of this post originally appeared in Google bathrooms worldwide as a Google &lt;/span&gt;&lt;a href="https://testing.googleblog.com/2007/01/introducing-testing-on-toilet.html" style="text-decoration-line: none;"&gt;&lt;span style="background-color: white; color: #1155cc; font-style: italic; vertical-align: baseline; white-space: pre-wrap;"&gt;Testing on the Toilet&lt;/span&gt;&lt;/a&gt;&lt;span style="background-color: white; color: #222222; font-style: italic; vertical-align: baseline; white-space: pre-wrap;"&gt; episode. You can download a &lt;/span&gt;&lt;a href="https://docs.google.com/document/d/1_Gljf1TMTV2WPsiXCdk8oIkiq6uiajN_IqGdlD7u3Mc/edit?usp=sharing" rel="nofollow" style="text-decoration-line: none;"&gt;&lt;span style="background-color: white; color: #1155cc; font-style: italic; vertical-align: baseline; white-space: pre-wrap;"&gt;printer-friendly version&lt;/span&gt;&lt;/a&gt;&lt;span style="background-color: white; color: #222222; font-style: italic; vertical-align: baseline; white-space: pre-wrap;"&gt; to display in your office. &lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;"&gt;&lt;span style="background-color: white; color: #222222; font-style: italic; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;"&gt;&lt;span style="background-color: white; color: #222222; font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif; vertical-align: baseline; white-space: pre-wrap;"&gt;By Liz Kammer (Google), Maggie Hodges (UX research consultant), and Ambar Murillo (Google)&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;"&gt;&lt;span style="background-color: white; color: #222222; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;"&gt;&lt;span style="background-color: white; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;span id="docs-internal-guid-21af0bd9-7fff-162b-bd00-eac285eda5b5" style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;"&gt;&lt;span style="background-color: transparent; color: black; vertical-align: baseline;"&gt;While code review is recognized as a &lt;/span&gt;&lt;a href="https://dl.acm.org/citation.cfm?id=3183525" style="color: #222222;"&gt;&lt;span style="background-color: transparent; color: #1155cc; vertical-align: baseline;"&gt;valuable tool&lt;/span&gt;&lt;/a&gt;&lt;span style="background-color: transparent; color: black; vertical-align: baseline;"&gt; for improving the quality of software projects, &lt;/span&gt;&lt;span style="color: purple;"&gt;&lt;span style="background-color: transparent; font-weight: 700; vertical-align: baseline;"&gt;code review comments that are perceived as being&lt;/span&gt;&lt;span style="background-color: transparent; vertical-align: baseline;"&gt; &lt;/span&gt;&lt;span style="background-color: transparent; font-weight: 700; vertical-align: baseline;"&gt;unclear or harsh can have unfavorable consequences&lt;/span&gt;&lt;/span&gt;&lt;span style="background-color: transparent; color: black; vertical-align: baseline;"&gt;: slow reviews, blocked dependent code reviews, negative emotions, or negative perceptions of other contributors or colleagues.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;"&gt;&lt;span style="background-color: white; color: #222222; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;times new roman&amp;quot;; font-size: 12pt; vertical-align: baseline;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;"&gt;&lt;span style="background-color: white; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;span id="docs-internal-guid-c7db8cea-7fff-60cc-961e-7b7698163066"&gt;&lt;span style="background-color: transparent; color: purple; font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif; font-weight: 700; vertical-align: baseline;"&gt;Consider these tips to resolve code review comments respectfully.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;"&gt;&lt;span style="background-color: white; color: #222222; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;span style="background-color: transparent; color: #980000; font-family: &amp;quot;times new roman&amp;quot;; font-size: 12pt; font-weight: 700; vertical-align: baseline;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;"&gt;&lt;span style="background-color: white; color: #222222; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;span id="docs-internal-guid-c303e636-7fff-815d-fc3e-0f7b94de78a8"&gt;&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;times new roman&amp;quot;; font-size: 13pt; font-weight: 700; vertical-align: baseline;"&gt;As a Reviewer or Author:&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;span style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;"&gt;&lt;span style="background-color: white; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;span style="background-color: transparent; font-weight: 700; vertical-align: baseline;"&gt;&lt;span id="docs-internal-guid-8a31b643-7fff-afeb-2fc1-2213b1af214f" style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif; font-weight: normal;"&gt;&lt;span style="background-color: transparent; color: purple; font-weight: 700; vertical-align: baseline;"&gt;DO: Assume competence&lt;/span&gt;&lt;span style="background-color: transparent; color: #222222; font-weight: 700; vertical-align: baseline;"&gt;.&lt;/span&gt;&lt;span style="background-color: transparent; color: #222222; vertical-align: baseline;"&gt; An author’s implementation or a reviewer’s recommendation may be due to the other party having different context than you. Start by asking questions to gain understanding.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;"&gt;&lt;span style="background-color: white; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;span style="background-color: transparent; font-weight: 700; vertical-align: baseline;"&gt;&lt;span style="font-weight: normal;"&gt;&lt;span style="background-color: transparent; vertical-align: baseline;"&gt;&lt;span id="docs-internal-guid-9472d15d-7fff-f518-ef6d-e22573eac87e" style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;"&gt;&lt;span style="color: purple;"&gt;&lt;span style="background-color: transparent; font-weight: 700; vertical-align: baseline;"&gt;DO:&lt;/span&gt;&lt;span style="background-color: transparent; vertical-align: baseline;"&gt; &lt;/span&gt;&lt;span style="background-color: transparent; font-weight: 700; vertical-align: baseline;"&gt;Provide rationale or context&lt;/span&gt;&lt;/span&gt;&lt;span style="background-color: transparent; color: #222222; font-weight: 700; vertical-align: baseline;"&gt;, &lt;/span&gt;&lt;span style="background-color: transparent; color: #222222; vertical-align: baseline;"&gt;such as a best practices document, a style guide, or a design document. This can help others understand your decision or provide mentorship. &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;"&gt;&lt;span style="background-color: white; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;span style="background-color: transparent; font-weight: 700; vertical-align: baseline;"&gt;&lt;span style="font-weight: normal;"&gt;&lt;span style="background-color: transparent; vertical-align: baseline;"&gt;&lt;span style="background-color: transparent; vertical-align: baseline;"&gt;&lt;span id="docs-internal-guid-42ad9f22-7fff-11f5-9eab-23eb1cd8e133" style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;"&gt;&lt;span style="background-color: transparent; color: purple; font-weight: 700; vertical-align: baseline;"&gt;DO: Consider how comments may be interpreted&lt;/span&gt;&lt;span style="background-color: transparent; color: #222222; font-weight: 700; vertical-align: baseline;"&gt;.&lt;/span&gt;&lt;span style="background-color: transparent; color: #222222; vertical-align: baseline;"&gt; Be mindful of the differing ways hyperbole, jokes, and emojis may be perceived.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;div style="overflow-x: auto;"&gt;&lt;table class="my-bordered-table"&gt;  &lt;tbody&gt;&lt;tr&gt;    &lt;td style="background-color: #f4cccc; vertical-align: top; width: 50%;"&gt;&lt;pre style="background-color: #f4cccc; border: 0px; color: black; margin-bottom: 0; margin-top: 0; padding-bottom: 0; padding-left: 0; padding-top: 0;"&gt;&lt;span style="font-weight: bold;"&gt;Author Don’t:&lt;/span&gt;&lt;br /&gt;I prefer short names so I’d rather&lt;/pre&gt;&lt;pre style="background-color: #f4cccc; border: 0px; color: black; margin-bottom: 0; margin-top: 0; padding-bottom: 0; padding-left: 0; padding-top: 0;"&gt;not change this. Unless you make&lt;/pre&gt;&lt;pre style="background-color: #f4cccc; border: 0px; color: black; margin-bottom: 0; margin-top: 0; padding-bottom: 0; padding-left: 0; padding-top: 0;"&gt;me? :)&lt;br /&gt;&lt;/pre&gt;&lt;/td&gt;    &lt;td style="background-color: #d9ead3; vertical-align: top; width: 50%;"&gt;&lt;pre style="background-color: #d9ead3; border: 0px; color: black; margin-bottom: 0; margin-top: 0; padding-bottom: 0; padding-left: 0; padding-top: 0;"&gt;&lt;span style="font-weight: bold;"&gt;Author Do:&lt;/span&gt;&lt;br /&gt;Best practice suggests omitting&lt;/pre&gt;&lt;pre style="background-color: #d9ead3; border: 0px; color: black; margin-bottom: 0; margin-top: 0; padding-bottom: 0; padding-left: 0; padding-top: 0;"&gt;obvious/generic terms. I’m not&lt;/pre&gt;&lt;pre style="background-color: #d9ead3; border: 0px; color: black; margin-bottom: 0; margin-top: 0; padding-bottom: 0; padding-left: 0; padding-top: 0;"&gt;sure how to reconcile that&lt;/pre&gt;&lt;pre style="background-color: #d9ead3; border: 0px; color: black; margin-bottom: 0; margin-top: 0; padding-bottom: 0; padding-left: 0; padding-top: 0;"&gt;advice with this request.&lt;/pre&gt;&lt;/td&gt;  &lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/li&gt;&lt;li&gt;&lt;span id="docs-internal-guid-a8963698-7fff-4ffa-c99a-611336a6f177" style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;"&gt;&lt;span style="color: purple; font-weight: 700; vertical-align: baseline; white-space: pre-wrap;"&gt;DON’T: Criticize the person&lt;/span&gt;&lt;span style="vertical-align: baseline; white-space: pre-wrap;"&gt;. Instead, discuss the &lt;/span&gt;&lt;span style="font-style: italic; vertical-align: baseline; white-space: pre-wrap;"&gt;code&lt;/span&gt;&lt;span style="vertical-align: baseline; white-space: pre-wrap;"&gt;. Even the perception that a comment is about a person (e.g., due to using “you” or “your”) distracts from the goal of improving the code.&lt;/span&gt;&lt;/span&gt;&lt;div style="overflow-x: auto;"&gt;&lt;table class="my-bordered-table"&gt;  &lt;tbody&gt;&lt;tr&gt;    &lt;td style="background-color: #f4cccc; vertical-align: top; width: 50%;"&gt;&lt;pre style="background-color: #f4cccc; border: 0px; color: black; margin-bottom: 0; margin-top: 0; padding-bottom: 0; padding-left: 0; padding-top: 0;"&gt;&lt;span style="font-weight: bold;"&gt;Reviewer Don’t:&lt;/span&gt;&lt;br /&gt;Why are you using this approach?&lt;/pre&gt;&lt;pre style="background-color: #f4cccc; border: 0px; color: black; margin-bottom: 0; margin-top: 0; padding-bottom: 0; padding-left: 0; padding-top: 0;"&gt;You’re adding unnecessary&lt;/pre&gt;&lt;pre style="background-color: #f4cccc; border: 0px; color: black; margin-bottom: 0; margin-top: 0; padding-bottom: 0; padding-left: 0; padding-top: 0;"&gt;complexity.&lt;br /&gt;&lt;/pre&gt;&lt;/td&gt;    &lt;td style="background-color: #d9ead3; vertical-align: top; width: 50%;"&gt;&lt;pre style="background-color: #d9ead3; border: 0px; color: black; margin-bottom: 0; margin-top: 0; padding-bottom: 0; padding-left: 0; padding-top: 0;"&gt;&lt;span style="font-weight: bold;"&gt;Reviewer Do:&lt;/span&gt;&lt;br /&gt;This concurrency model appears to&lt;/pre&gt;&lt;pre style="background-color: #d9ead3; border: 0px; color: black; margin-bottom: 0; margin-top: 0; padding-bottom: 0; padding-left: 0; padding-top: 0;"&gt;be adding complexity to the&lt;/pre&gt;&lt;pre style="background-color: #d9ead3; border: 0px; color: black; margin-bottom: 0; margin-top: 0; padding-bottom: 0; padding-left: 0; padding-top: 0;"&gt;system without any visible&lt;/pre&gt;&lt;pre style="background-color: #d9ead3; border: 0px; color: black; margin-bottom: 0; margin-top: 0; padding-bottom: 0; padding-left: 0; padding-top: 0;"&gt;performance benefit.&lt;/pre&gt;&lt;/td&gt;  &lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/li&gt;&lt;li&gt;&lt;span id="docs-internal-guid-a360fc53-7fff-0cf4-1393-da8afda543e7"&gt;&lt;span style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;"&gt;&lt;span style="color: purple; font-weight: 700; vertical-align: baseline; white-space: pre-wrap;"&gt;DON’T: Use harsh language&lt;/span&gt;&lt;span style="vertical-align: baseline; white-space: pre-wrap;"&gt;. Code review comments with a negative tone are less likely to be useful. For example, &lt;/span&gt;&lt;a href="https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/bosu2015useful.pdf" style="text-decoration-line: none;"&gt;&lt;span style="color: #1155cc; vertical-align: baseline; white-space: pre-wrap;"&gt;prior research&lt;/span&gt;&lt;/a&gt;&lt;span style="vertical-align: baseline; white-space: pre-wrap;"&gt; found very negative comments were considered useful by authors 57% of the time, while more-neutral comments were useful 79% of the time.&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;span style="font-size: 13pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;div&gt;&lt;span style="background-color: white; font-family: &amp;quot;times new roman&amp;quot;; font-size: 17.3333px; font-weight: 700; white-space: pre-wrap;"&gt;As a Reviewer:&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;span style="background-color: white; font-weight: 700; white-space: pre-wrap;"&gt;&lt;span id="docs-internal-guid-bdab575f-7fff-5c3c-3928-88877a3d6b27" style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif; font-weight: normal;"&gt;&lt;span style="color: purple;"&gt;&lt;span style="background-color: transparent; font-weight: 700; vertical-align: baseline;"&gt;DO: Provide&lt;/span&gt;&lt;span style="background-color: transparent; vertical-align: baseline;"&gt; &lt;/span&gt;&lt;span style="background-color: transparent; font-weight: 700; vertical-align: baseline;"&gt;specific and actionable feedback&lt;/span&gt;&lt;/span&gt;&lt;span style="background-color: transparent; font-weight: 700; vertical-align: baseline;"&gt;.&lt;/span&gt;&lt;span style="background-color: transparent; color: #980000; font-weight: 700; vertical-align: baseline;"&gt; &lt;/span&gt;&lt;span style="background-color: transparent; vertical-align: baseline;"&gt;If you don’t have specific advice, sometimes it’s helpful to ask for clarification on why the author made a decision. &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;div style="overflow-x: auto;"&gt;&lt;table class="my-bordered-table"&gt;  &lt;tbody&gt;&lt;tr&gt;    &lt;td style="background-color: #f4cccc; vertical-align: top; width: 50%;"&gt;&lt;pre style="background-color: #f4cccc; border: 0px; color: black; margin-bottom: 0; margin-top: 0; padding-bottom: 0; padding-left: 0; padding-top: 0;"&gt;&lt;span style="font-weight: bold;"&gt;Reviewer Don’t:&lt;/span&gt;&lt;br /&gt;I don’t understand this.&lt;br /&gt;&lt;/pre&gt;&lt;/td&gt;    &lt;td style="background-color: #d9ead3; vertical-align: top; width: 50%;"&gt;&lt;pre style="background-color: #d9ead3; border: 0px; color: black; margin-bottom: 0; margin-top: 0; padding-bottom: 0; padding-left: 0; padding-top: 0;"&gt;&lt;span style="font-weight: bold;"&gt;Reviewer Do:&lt;/span&gt;&lt;br /&gt;If this is an optimization, can you&lt;/pre&gt;&lt;pre style="background-color: #d9ead3; border: 0px; color: black; margin-bottom: 0; margin-top: 0; padding-bottom: 0; padding-left: 0; padding-top: 0;"&gt;please add comments?&lt;/pre&gt;&lt;/td&gt;  &lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/li&gt;&lt;li&gt;&lt;span id="docs-internal-guid-b54077dd-7fff-539e-7a07-a06cc3c2c9c8" style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;"&gt;&lt;span style="color: purple; font-weight: 700; vertical-align: baseline; white-space: pre-wrap;"&gt;DO: Clearly mark nitpicks and optional comments&lt;/span&gt;&lt;span style="font-weight: 700; vertical-align: baseline; white-space: pre-wrap;"&gt; &lt;/span&gt;&lt;span style="vertical-align: baseline; white-space: pre-wrap;"&gt;by using prefixes such as ‘Nit’ or ‘Optional’. This allows the author to better gauge the reviewer’s expectations.&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;span style="white-space: pre-wrap;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: white; font-family: &amp;quot;times new roman&amp;quot;; font-size: 17.3333px; font-weight: 700; white-space: pre-wrap;"&gt;As an Author:&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;span style="background-color: white; font-weight: 700; white-space: pre-wrap;"&gt;&lt;span id="docs-internal-guid-00d7b8cd-7fff-09f4-145d-db8414f49728" style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif; font-weight: normal;"&gt;&lt;span style="background-color: transparent; color: purple; font-weight: 700; vertical-align: baseline;"&gt;DO: Clarify code or reply to the reviewer’s comment&lt;/span&gt;&lt;span style="background-color: transparent; vertical-align: baseline;"&gt; in response to feedback. Failing to do so can signal a lack of receptiveness to implementing improvements to the code.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;div style="overflow-x: auto;"&gt;&lt;table class="my-bordered-table"&gt;  &lt;tbody&gt;&lt;tr&gt;    &lt;td style="background-color: #f4cccc; vertical-align: top; width: 50%;"&gt;&lt;pre style="background-color: #f4cccc; border: 0px; color: black; margin-bottom: 0; margin-top: 0; padding-bottom: 0; padding-left: 0; padding-top: 0;"&gt;&lt;span style="font-weight: bold;"&gt;Author Don’t:&lt;/span&gt;&lt;br /&gt;That makes sense in some cases but&lt;/pre&gt;&lt;pre style="background-color: #f4cccc; border: 0px; color: black; margin-bottom: 0; margin-top: 0; padding-bottom: 0; padding-left: 0; padding-top: 0;"&gt;not here.&lt;br /&gt;&lt;/pre&gt;&lt;/td&gt;    &lt;td style="background-color: #d9ead3; vertical-align: top; width: 50%;"&gt;&lt;pre style="background-color: #d9ead3; border: 0px; color: black; margin-bottom: 0; margin-top: 0; padding-bottom: 0; padding-left: 0; padding-top: 0;"&gt;&lt;span style="font-weight: bold;"&gt;Author Do:&lt;/span&gt;&lt;br /&gt;I added a comment about why&lt;/pre&gt;&lt;pre style="background-color: #d9ead3; border: 0px; color: black; margin-bottom: 0; margin-top: 0; padding-bottom: 0; padding-left: 0; padding-top: 0;"&gt;it’s implemented that way.&lt;/pre&gt;&lt;/td&gt;  &lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/li&gt;&lt;li&gt;&lt;span id="docs-internal-guid-9d70b4dc-7fff-1f5b-5d6e-2bab04f49887" style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;"&gt;&lt;span style="color: purple;"&gt;&lt;span style="font-weight: 700; vertical-align: baseline; white-space: pre-wrap;"&gt;DO: When&lt;/span&gt;&lt;span style="vertical-align: baseline; white-space: pre-wrap;"&gt; &lt;/span&gt;&lt;span style="font-weight: 700; vertical-align: baseline; white-space: pre-wrap;"&gt;disagreeing with feedback, explain the advantage of your approach&lt;/span&gt;&lt;/span&gt;&lt;span style="vertical-align: baseline; white-space: pre-wrap;"&gt;. In cases where you can’t reach consensus, follow Google’s guidance for &lt;/span&gt;&lt;a href="https://google.github.io/eng-practices/review/reviewer/standard.html#conflicts" style="text-decoration-line: none;"&gt;&lt;span style="color: #1155cc; vertical-align: baseline; white-space: pre-wrap;"&gt;resolving conflicts&lt;/span&gt;&lt;/a&gt;&lt;span style="vertical-align: baseline; white-space: pre-wrap;"&gt; in code review.&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</content><link href="http://testing.googleblog.com/feeds/3070073239211746981/comments/default" rel="replies" title="Post Comments" type="application/atom+xml"/><link href="http://testing.googleblog.com/2019/11/code-health-respectful-reviews-useful.html#comment-form" rel="replies" title="4 Comments" type="text/html"/><link href="http://www.blogger.com/feeds/15045980/posts/default/3070073239211746981" rel="edit" type="application/atom+xml"/><link href="http://www.blogger.com/feeds/15045980/posts/default/3070073239211746981" rel="self" type="application/atom+xml"/><link href="http://testing.googleblog.com/2019/11/code-health-respectful-reviews-useful.html" rel="alternate" title="Code Health: Respectful Reviews == Useful Reviews" type="text/html"/><author><name>Google Testing Bloggers</name><uri>http://www.blogger.com/profile/03153388556673050910</uri><email>noreply@blogger.com</email><gd:image height="7" rel="http://schemas.google.com/g/2005#thumbnail" src="http://3.bp.blogspot.com/-H1YTvw0kdFA/UTf_IXv4N2I/AAAAAAAAABY/ghqaO2KBOSA/s1600/gtb3.png" width="32"/></author><thr:total>4</thr:total></entry><entry><id>tag:blogger.com,1999:blog-15045980.post-2097440038165971468</id><published>2019-07-08T11:17:00.002-07:00</published><updated>2019-07-10T16:37:26.961-07:00</updated><title type="text">Truth 1.0: Fluent Assertions for Java and Android Tests</title><content type="html">By&amp;nbsp;Chris Povirk, Java Core Libraries&lt;br /&gt;&lt;br /&gt;&lt;i&gt;(originally posted to the &lt;a href="https://opensource.googleblog.com/2019/07/truth-10-fluent-assertions-for-java-and.html"&gt;Google Open Source Blog&lt;/a&gt;)&lt;/i&gt;&lt;br /&gt;&lt;br /&gt;Software testing is important—and sometimes frustrating. The frustration can come from working on innately hard domains, like concurrency, but too often it comes from a thousand small cuts:&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="overflow-x: auto;"&gt;&lt;table class="my-bordered-table" style="width: 613px;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="background-color: #e0e0e0; vertical-align: top; width: 607px;"&gt;&lt;pre style="background-color: #e0e0e0; border: 0px; color: black; margin: 0px; padding-bottom: 0px; padding-left: 0px; padding-top: 0px;"&gt;&lt;span style="font-family: &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;assertEquals("&lt;span style="color: #0f9d58;"&gt;Message has been sent&lt;/span&gt;", getString(notification, EXTRA_BIG_TEXT));&lt;br /&gt;assertTrue(&lt;br /&gt;    getString(notification, EXTRA_TEXT)&lt;br /&gt;        .contains(&lt;span style="color: #0f9d58;"&gt;"Kurt Kluever &amp;lt;kak@google.com&amp;gt;"&lt;/span&gt;));&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;The two assertions above test &lt;i&gt;almost&lt;/i&gt; the same thing, but they are structured differently. The difference in &lt;i&gt;structure&lt;/i&gt; makes it hard to identify the difference in &lt;i&gt;what's being tested&lt;/i&gt;.&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;A better way to structure these assertions is to use a &lt;a href="https://en.wikipedia.org/wiki/Fluent_interface"&gt;fluent API&lt;/a&gt;:&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="overflow-x: auto;"&gt;&lt;table class="my-bordered-table" style="width: 613px;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="background-color: #e0e0e0; vertical-align: top; width: 607px;"&gt;&lt;pre style="background-color: #e0e0e0; border: 0px; color: black; margin: 0px; padding-bottom: 0px; padding-left: 0px; padding-top: 0px;"&gt;&lt;span style="font-family: &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;assertThat(getString(notification, EXTRA_BIG_TEXT))&lt;br /&gt;    .isEqualTo(&lt;span style="color: #0f9d58;"&gt;"Message has been sent"&lt;/span&gt;);&lt;br /&gt;assertThat(getString(notification, EXTRA_TEXT))&lt;br /&gt;    .contains(&lt;span style="color: #0f9d58;"&gt;"Kurt Kluever &amp;lt;kak@google.com&amp;gt;"&lt;/span&gt;);&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;A fluent API naturally leads to other advantages:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;IDE autocompletion can suggest assertions that fit the value under test, including rich operations like &lt;span style="color: #0f9d58; font-family: &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;containsExactly(permission.SEND_SMS, permission.READ_SMS)&lt;/span&gt;.&lt;/li&gt;&lt;li&gt;Failure messages can include the value under test and the expected result. Contrast this with the &lt;span style="color: #0f9d58; font-family: &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;assertTrue&lt;/span&gt; call above, which lacks a failure message entirely.&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;Google's fluent assertion library for Java and Android is &lt;a href="https://truth.dev/"&gt;Truth&lt;/a&gt;. We're happy to announce that we've released &lt;a href="https://github.com/google/truth/releases/tag/release_1_0"&gt;Truth 1.0&lt;/a&gt;, which stabilizes our API after years of fine-tuning.&lt;br /&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-NcR5HB_0vqg/XRzbaysmsyI/AAAAAAAAAV8/4xl4AEl6_yIKYnH1_ZLNHsa8dSaxizDmQCLcBGAs/s1600/image1.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="661" data-original-width="813" height="520" src="https://1.bp.blogspot.com/-NcR5HB_0vqg/XRzbaysmsyI/AAAAAAAAAV8/4xl4AEl6_yIKYnH1_ZLNHsa8dSaxizDmQCLcBGAs/s640/image1.png" width="640" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;Truth started in 2011 as a Googler's personal open source project. Later, it was donated back to Google and cultivated by the Java Core Libraries team, the people who bring you &lt;a href="https://github.com/google/guava"&gt;Guava&lt;/a&gt;.&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;You might already be familiar with assertion libraries like &lt;a href="https://github.com/hamcrest/JavaHamcrest"&gt;Hamcrest&lt;/a&gt; and &lt;a href="https://joel-costigliola.github.io/assertj/"&gt;AssertJ&lt;/a&gt;, which provide similar features. We've designed Truth to have a simpler API and more readable failure messages. For example, here's a failure message from AssertJ:&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;div style="overflow-x: auto;"&gt;&lt;table class="my-bordered-table" style="width: 613px;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="background-color: #e0e0e0; vertical-align: top; width: 607px;"&gt;&lt;pre style="background-color: #e0e0e0; border: 0px; color: black; margin: 0px; padding-bottom: 0px; padding-left: 0px; padding-top: 0px;"&gt;&lt;span style="font-family: &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;java.lang.AssertionError:&lt;br /&gt;Expecting:&lt;br /&gt;  &amp;lt;[year: 2019&lt;br /&gt;month: 7&lt;br /&gt;day: 15&lt;br /&gt;]&amp;gt;&lt;br /&gt;to contain exactly in any order:&lt;br /&gt;  &amp;lt;[year: 2019&lt;br /&gt;month: 6&lt;br /&gt;day: 30&lt;br /&gt;]&amp;gt;&lt;br /&gt;elements not found:&lt;br /&gt;  &amp;lt;[year: 2019&lt;br /&gt;month: 6&lt;br /&gt;day: 30&lt;br /&gt;]&amp;gt;&lt;br /&gt;and elements not expected:&lt;br /&gt;  &amp;lt;[year: 2019&lt;br /&gt;month: 7&lt;br /&gt;day: 15&lt;br /&gt;]&amp;gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;div style="overflow-x: auto;"&gt;&lt;br /&gt;&lt;br /&gt;And here's the equivalent message from Truth:&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;div style="overflow-x: auto;"&gt;&lt;table class="my-bordered-table" style="width: 613px;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="background-color: #e0e0e0; vertical-align: top; width: 607px;"&gt;&lt;pre style="background-color: #e0e0e0; border: 0px; color: black; margin: 0px; padding-bottom: 0px; padding-left: 0px; padding-top: 0px;"&gt;&lt;span style="font-family: &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;value of:&lt;br /&gt;    iterable.onlyElement()&lt;br /&gt;expected:&lt;br /&gt;    year: 2019&lt;br /&gt;    month: 6&lt;br /&gt;    day: 30&lt;br /&gt;&lt;br /&gt;but was:&lt;br /&gt;    year: 2019&lt;br /&gt;    month: 7&lt;br /&gt;    day: 15&lt;br /&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;div style="overflow-x: auto;"&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="overflow-x: auto;"&gt;&lt;div style="overflow-x: auto;"&gt;For more details, read our &lt;a href="https://truth.dev/comparison"&gt;comparison of the libraries&lt;/a&gt;, and &lt;a href="https://truth.dev/#how-to-use-truth"&gt;try Truth&lt;/a&gt; for yourself.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Also, if you're developing for Android, try &lt;a href="https://developer.android.com/training/testing/fundamentals#assertions"&gt;AndroidX Test&lt;/a&gt;. It includes Truth &lt;a href="https://truth.dev/extension"&gt;extensions&lt;/a&gt; that make assertions even easier to write and failure messages even clearer:&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;div style="overflow-x: auto;"&gt;&lt;table class="my-bordered-table" style="width: 613px;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="background-color: #e0e0e0; vertical-align: top; width: 607px;"&gt;&lt;pre style="background-color: #e0e0e0; border: 0px; color: black; margin: 0px; padding-bottom: 0px; padding-left: 0px; padding-top: 0px;"&gt;&lt;span style="font-family: &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;assertThat(notification).extras().&lt;span style="color: #9c27b0;"&gt;string&lt;/span&gt;(EXTRA_BIG_TEXT)&lt;br /&gt;    .isEqualTo(&lt;span style="color: #0f9d58;"&gt;"Message has been sent"&lt;/span&gt;);&lt;br /&gt;assertThat(notification).extras().&lt;span style="color: #9c27b0;"&gt;string&lt;/span&gt;(EXTRA_TEXT)&lt;br /&gt;    .contains(&lt;span style="color: #0f9d58;"&gt;"Kurt Kluever &amp;lt;kak@google.com&amp;gt;"&lt;/span&gt;);&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;div style="overflow-x: auto;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="overflow-x: auto;"&gt;&lt;br /&gt;Coming soon: Kotlin users of Truth can look forward to &lt;a href="https://github.com/google/truth/issues/572"&gt;Kotlin-specific&lt;/a&gt; &lt;a href="https://github.com/google/truth/issues/536"&gt;enhancements&lt;/a&gt;.&lt;/div&gt;&lt;div style="overflow-x: auto;"&gt;&lt;br /&gt;&lt;/div&gt;</content><link href="http://testing.googleblog.com/feeds/2097440038165971468/comments/default" rel="replies" title="Post Comments" type="application/atom+xml"/><link href="http://testing.googleblog.com/2019/07/truth-10-fluent-assertions-for-java-and.html#comment-form" rel="replies" title="0 Comments" type="text/html"/><link href="http://www.blogger.com/feeds/15045980/posts/default/2097440038165971468" rel="edit" type="application/atom+xml"/><link href="http://www.blogger.com/feeds/15045980/posts/default/2097440038165971468" rel="self" type="application/atom+xml"/><link href="http://testing.googleblog.com/2019/07/truth-10-fluent-assertions-for-java-and.html" rel="alternate" title="Truth 1.0: Fluent Assertions for Java and Android Tests" type="text/html"/><author><name>Google Testing Bloggers</name><uri>http://www.blogger.com/profile/03153388556673050910</uri><email>noreply@blogger.com</email><gd:image height="7" rel="http://schemas.google.com/g/2005#thumbnail" src="http://3.bp.blogspot.com/-H1YTvw0kdFA/UTf_IXv4N2I/AAAAAAAAABY/ghqaO2KBOSA/s1600/gtb3.png" width="32"/></author><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" height="72" url="https://1.bp.blogspot.com/-NcR5HB_0vqg/XRzbaysmsyI/AAAAAAAAAV8/4xl4AEl6_yIKYnH1_ZLNHsa8dSaxizDmQCLcBGAs/s72-c/image1.png" width="72"/><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-15045980.post-7158856905941359039</id><published>2019-01-15T08:08:00.000-08:00</published><updated>2019-01-15T08:12:41.581-08:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="Android"/><category scheme="http://www.blogger.com/atom/ns#" term="Clay Murphy"/><category scheme="http://www.blogger.com/atom/ns#" term="Dan Shi"/><category scheme="http://www.blogger.com/atom/ns#" term="Dan Willemsen"/><category scheme="http://www.blogger.com/atom/ns#" term="Simran Basi"/><title type="text">Android Platform Testing Made Easy</title><content type="html">By Simran Basi,&amp;nbsp;Dan Shi, Dan Willemsen, and Clay Murphy&lt;br /&gt;&lt;br /&gt;Android Engineering Productivity (Android EngProd) seeks to ease development of the Android operating system for the entire ecosystem. Android EngProd creates tools, processes, and documentation aimed at Android platform development. We are now starting to push the best previously internal development infrastructure into the open for all to benefit. &lt;br /&gt;&lt;br /&gt;Although comprehensive, the &lt;a href="https://source.android.com/compatibility/cts"&gt;Android Compatibility Test Suite&lt;/a&gt; (CTS) and &lt;a href="https://source.android.com/devices/tech/test_infra/tradefed"&gt;Trade Federation Test Harness&lt;/a&gt;  can be unwieldy to configure. So we recently publicly released new tooling and associated docs that simplify device configuration and testing in the form of the &lt;a href="https://android.googlesource.com/platform/build/soong/"&gt;Soong build system&lt;/a&gt; replacing Make, &lt;a href="https://source.android.com/compatibility/tests/development/test-mapping"&gt;Test Mapping&lt;/a&gt; for easy configs, and &lt;a href="https://source.android.com/compatibility/tests/development/atest"&gt;Atest&lt;/a&gt; to run tests locally.&lt;br /&gt;&lt;h2&gt;Configuring tests in Soong builds&lt;/h2&gt;The &lt;a href="https://android.googlesource.com/platform/build/soong/"&gt;Soong build system&lt;/a&gt; was introduced in Android 8.0 (Oreo) to eventually replace the Make-based system (i.e. &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;Android.mk&lt;/span&gt; files) used in previous releases. Soong allows &lt;a href="https://source.android.com/compatibility/tests/development/blueprints"&gt;simple build configuration&lt;/a&gt; with support for &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;android_test&lt;/span&gt; declarations arriving in Android Q, now available in the Android Open Source Project (AOSP) master branch.&lt;br /&gt;&lt;br /&gt;Soong uses &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;Android.bp&lt;/span&gt; files, which are JSON-like simple declarative descriptions of modules to build. Here is an example test configuration in Soong, from: &lt;a href="https://android.googlesource.com/platform/platform_testing/+/master/tests/example/instrumentation/Android.bp"&gt;/platform_testing/tests/example/instrumentation/Android.bp&lt;/a&gt;&lt;br /&gt;&lt;div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;android_test {&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; name: "HelloWorldTests",&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; srcs: ["src/**/*.java"],&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; sdk_version: "current",&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; static_libs: ["android-support-test"],&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; certificate: "platform",&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; test_suites: ["device-tests"],&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;}&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;Note the &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;android_test&lt;/span&gt; declaration at the beginning indicates this is a test. Including &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;android_app&lt;/span&gt; instead would conversely indicate this is a build package. &lt;a href="https://source.android.com/compatibility/tests/development/test-config"&gt;Complex test configuration&lt;/a&gt; options still exist for test modules requiring customized setup and tear down that cannot be performed within the test case itself.&lt;br /&gt;&lt;h2&gt;Mapping tests in the source tree&lt;/h2&gt;&lt;a href="https://source.android.com/compatibility/tests/development/test-mapping"&gt;Test Mapping&lt;/a&gt; allows developers to create pre- and post-submit test rules directly in the Android source tree and leave the decisions of branches and devices to be tested to the test infrastructure itself. Test Mapping definitions are JSON files named &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;TEST_MAPPING&lt;/span&gt; that can be placed in any source directory.&lt;br /&gt;&lt;br /&gt;Test Mapping categorizes tests via a &lt;b&gt;test group&lt;/b&gt;. The name of a test group can be any string. For example, &lt;i&gt;&lt;a href="https://testing.googleblog.com/2018/09/efficacy-presubmit.html"&gt;presubmit&lt;/a&gt;&lt;/i&gt; can be for a group of tests to run when validating changes. And &lt;i&gt;postsubmit&lt;/i&gt; tests can be used to validate the builds after changes are merged.&lt;br /&gt;&lt;br /&gt;For the directory requiring test coverage, simply add a &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;TEST_MAPPING&lt;/span&gt; JSON file resembling the example below. These rules will ensure the tests run in presubmit checks when any files are touched in that directory or any of its subdirectories.&lt;br /&gt;&lt;br /&gt;Here is a sample &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;TEST_MAPPING&lt;/span&gt; file:&lt;br /&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;{&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; "presubmit": [&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; {&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; "name": "CtsAccessibilityServiceTestCases",&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; "options": [&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; {&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; "include-annotation": "android.platform.test.annotations.Presubmit"&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; ]&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; ],&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; "postsubmit": [&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; {&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; "name": "CtsWindowManagerDeviceTestCases"&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; ],&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; "imports": [&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; {&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; "path": "frameworks/base/services/core/java/com/android/server/am"&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; ]&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;}&lt;/span&gt;&lt;br /&gt;&lt;h2&gt;Running tests locally with Atest&lt;/h2&gt;&lt;a href="https://source.android.com/compatibility/tests/development/atest"&gt;Atest&lt;/a&gt; is a command line tool that allows developers to build, install, and run Android tests locally, greatly speeding test re-runs without requiring knowledge of &lt;a href="https://source.android.com/devices/tech/test_infra/tradefed"&gt;Trade Federation Test Harness&lt;/a&gt; command line options.&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;Atest commands take the following form:&lt;br /&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;atest [optional-arguments] test-to-run&lt;/span&gt;&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;You can run one or more tests by separating test references with spaces, like so:&lt;br /&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;atest test-to-run-1 test-to-run-2&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;br /&gt;&lt;/span&gt;To run an entire test module, use its module name. Input the name as it appears in the &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;LOCAL_MODULE&lt;/span&gt; or &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;LOCAL_PACKAGE_NAME&lt;/span&gt; variables in that test's &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;Android.mk&lt;/span&gt; or &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;Android.bp&lt;/span&gt; file.&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;For example:&lt;/div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;atest FrameworksServicesTests&lt;br /&gt;atest CtsJankDeviceTestCases&lt;/span&gt;&lt;br /&gt;&lt;h2&gt;&lt;span style="font-family: inherit;"&gt;Discovering tests with Atest and TEST MAPPING&lt;/span&gt;&lt;/h2&gt;Atest and TEST MAPPING work together to solve the problem of test discovery, i.e. what tests need to be run when a directory of code is edited. For example, to execute all presubmit test rules for a given directory locally:&lt;br /&gt;&lt;br /&gt;&lt;ol&gt;&lt;li&gt;Go to the directory containing the &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;TEST_MAPPING&lt;/span&gt; file.&lt;/li&gt;&lt;li&gt;Run the command: &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;atest&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;&lt;div&gt;&lt;span style="font-family: inherit;"&gt;All presubmit tests configured in the &lt;/span&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;TEST_MAPPING&lt;/span&gt;&lt;span style="font-family: inherit;"&gt; files of the current directory and its parent directories are run. Atest will locate and run two tests for presubmit.&lt;/span&gt;&lt;/div&gt;&lt;h2&gt;Finding more testing documentation&lt;/h2&gt;Further, introductory testing documents were published on &lt;a href="https://source.android.com/"&gt;source.android.com&lt;/a&gt; to support Soong and platform testing in general:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://source.android.com/compatibility/tests"&gt;Android Platform Testing&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://source.android.com/compatibility/tests/development"&gt;Test Development Workflow&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://source.android.com/compatibility/tests/development/blueprints"&gt;Simple Test Configuration&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://source.android.com/compatibility/tests/development/instrumentation"&gt;Instrumentation Tests&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://source.android.com/compatibility/tests/development/native"&gt;Native Tests&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://source.android.com/compatibility/tests/development/jar"&gt;JAR (Java) Host Tests&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;In addition to exposing more testing documentation, Android has recently opened up build infrastructure to monitor submissions through &lt;a href="http://ci.android.com/"&gt;ci.android.com&lt;/a&gt;. See the &lt;a href="https://android-developers.googleblog.com/2018/12/more-visibility-into-android-open-source-project.html"&gt;More visibility into the Android Open Source Project&lt;/a&gt; blog post and the &lt;a href="https://source.android.com/setup/build/dashboard"&gt;Continuous Integration Dashboard&lt;/a&gt; for instructions on viewing build status and downloading build artifacts.&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;Android EngProd endeavors to bring you more previously internal-only features to make your life easier. Watch this &lt;a href="https://testing.googleblog.com/"&gt;Google Testing Blog&lt;/a&gt;, the &lt;a href="https://android-developers.googleblog.com/"&gt;Android Developers Blog&lt;/a&gt;, and &lt;a href="https://source.android.com/"&gt;source.android.com&lt;/a&gt; for future enhancements.</content><link href="http://testing.googleblog.com/feeds/7158856905941359039/comments/default" rel="replies" title="Post Comments" type="application/atom+xml"/><link href="http://testing.googleblog.com/2019/01/android-platform-testing-made-easy.html#comment-form" rel="replies" title="2 Comments" type="text/html"/><link href="http://www.blogger.com/feeds/15045980/posts/default/7158856905941359039" rel="edit" type="application/atom+xml"/><link href="http://www.blogger.com/feeds/15045980/posts/default/7158856905941359039" rel="self" type="application/atom+xml"/><link href="http://testing.googleblog.com/2019/01/android-platform-testing-made-easy.html" rel="alternate" title="Android Platform Testing Made Easy" type="text/html"/><author><name>Google Testing Bloggers</name><uri>http://www.blogger.com/profile/03153388556673050910</uri><email>noreply@blogger.com</email><gd:image height="7" rel="http://schemas.google.com/g/2005#thumbnail" src="http://3.bp.blogspot.com/-H1YTvw0kdFA/UTf_IXv4N2I/AAAAAAAAABY/ghqaO2KBOSA/s1600/gtb3.png" width="32"/></author><thr:total>2</thr:total></entry><entry><id>tag:blogger.com,1999:blog-15045980.post-5108653381755768530</id><published>2018-11-27T12:44:00.002-08:00</published><updated>2018-11-27T12:50:56.941-08:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="Ben Yu"/><category scheme="http://www.blogger.com/atom/ns#" term="TotT"/><title type="text">Testing on the Toilet: Exercise Service Call Contracts in Tests</title><content type="html">&lt;span style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;"&gt;&lt;span style="font-style: italic; vertical-align: baseline; white-space: pre-wrap;"&gt;This article was adapted from a &lt;/span&gt;&lt;a href="http://googletesting.blogspot.com/2007/01/introducing-testing-on-toilet.html"&gt;&lt;span style="color: #1155cc; font-style: italic; vertical-align: baseline; white-space: pre-wrap;"&gt;Google Testing on the Toilet&lt;/span&gt;&lt;/a&gt;&lt;span style="font-style: italic; vertical-align: baseline; white-space: pre-wrap;"&gt; (TotT) episode. You can download a &lt;/span&gt;&lt;a href="https://docs.google.com/document/d/1MElViSQMCCl3_oL-_e5FEpul-6QKIUE6Ul5FqsOGnXA/edit?usp=sharing" rel="nofollow"&gt;&lt;span style="color: #1155cc; font-style: italic; vertical-align: baseline; white-space: pre-wrap;"&gt;printer-friendly version&lt;/span&gt;&lt;/a&gt;&lt;span style="font-style: italic; vertical-align: baseline; white-space: pre-wrap;"&gt; of this TotT episode and post it in your office.&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif; font-style: italic; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif; font-style: italic; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;span style="font-style: normal;"&gt;By Ben Yu&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;"&gt;The following test mocks out a service call to &lt;/span&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;CloudService&lt;/span&gt;&lt;span style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;"&gt;&lt;span style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;"&gt;.&amp;nbsp;&lt;/span&gt;&lt;span style="color: purple; font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;"&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;span style="font-weight: 700; white-space: pre-wrap;"&gt;&lt;span style="color: purple; font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;"&gt;Does the test provide enough confidence that the service call is likely to work?&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;div style="overflow-x: auto;"&gt;&lt;table class="my-bordered-table" style="width: 613px;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="background-color: #cee2f3; vertical-align: top; width: 607px;"&gt;&lt;pre style="background-color: #cee2f3; border: 0px; color: black; margin: 0px; padding-bottom: 0px; padding-left: 0px; padding-top: 0px;"&gt;&lt;span style="font-family: &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;@Test public void uploadFileToCloudStorage() {&lt;br /&gt;  when(&lt;span style="font-weight: bold;"&gt;mockCloudService&lt;/span&gt;.write(&lt;br /&gt;          WriteRequest.newBuilder().setUserId(“&lt;span style="font-weight: bold;"&gt;testuser&lt;/span&gt;”).setFileType(“&lt;span style="font-weight: bold;"&gt;plain/text&lt;/span&gt;”)...))&lt;br /&gt;    .thenReturn(WriteResponse.newBuilder().setUploadId(“uploadId”).build());&lt;br /&gt;&lt;br /&gt;  CloudUploader &lt;span style="font-weight: bold;"&gt;cloudUploader&lt;/span&gt; = new CloudUploader(&lt;span style="font-weight: bold;"&gt;mockCloudService&lt;/span&gt;);&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;  Uri &lt;span style="font-weight: bold;"&gt;uri&lt;/span&gt; = &lt;span style="font-weight: bold;"&gt;cloudUploader&lt;/span&gt;.uploadFile(new File(“/path/to/foo.txt”));&lt;br /&gt;  // The uploaded file URI contains the user ID, file type, and upload ID. (Or does it?)&lt;br /&gt;  assertThat(&lt;span style="font-weight: bold;"&gt;uri&lt;/span&gt;).isEqualTo(new Uri(“&lt;span style="font-weight: bold;"&gt;/testuser/text/uploadId&lt;/span&gt;.txt”));&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;"&gt;&lt;span style="background-color: white; font-weight: 700; white-space: pre-wrap;"&gt;&lt;span style="color: purple; font-family: Times, Times New Roman, serif;"&gt;Lots of things can go wrong,&lt;/span&gt;&lt;/span&gt;&lt;span style="font-family: times, times new roman, serif;"&gt;&amp;nbsp;especially when service contracts get complex. For example, &lt;/span&gt;&lt;/span&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;plain/text&lt;/span&gt;&lt;span style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;"&gt; may not be a valid file type, and you can’t verify that the URI of the uploaded file is correct.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;"&gt;&lt;span style="background-color: white; font-weight: 700; white-space: pre-wrap;"&gt;&lt;span style="color: purple; font-family: Times, Times New Roman, serif;"&gt;If the code under test relies on the contract of a service, prefer exercising the service call&lt;/span&gt;&lt;/span&gt;&lt;span style="font-family: times, times new roman, serif;"&gt;&amp;nbsp;instead of mocking it out. This gives you more confidence that you are using the service correctly:&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;div style="overflow-x: auto;"&gt;&lt;table class="my-bordered-table" style="width: 613px;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="background-color: #d9ead3; vertical-align: top; width: 607px;"&gt;&lt;pre style="background-color: #d9ead3; border: 0px; color: black; margin: 0px; padding-bottom: 0px; padding-left: 0px; padding-top: 0px;"&gt;&lt;span style="font-family: &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;@Test public void uploadFileToCloudStorage() {&lt;br /&gt;  CloudUploader &lt;span style="font-weight: bold;"&gt;cloudUploader&lt;/span&gt; = new CloudUploader(&lt;span style="font-weight: bold;"&gt;cloudService&lt;/span&gt;);&lt;br /&gt;  Uri &lt;span style="font-weight: bold;"&gt;uri&lt;/span&gt; = &lt;span style="font-weight: bold;"&gt;cloudUploader&lt;/span&gt;.uploadFile(”/path/to/foo.txt”);&lt;br /&gt;  assertThat(&lt;span style="font-weight: bold;"&gt;cloudService&lt;/span&gt;.retrieveFile(&lt;span style="font-weight: bold;"&gt;uri&lt;/span&gt;)).isEqualTo(readContent(“/path/to/foo.txt));&lt;br /&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;span style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;"&gt;How can you exercise the service call?&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;ol&gt;&lt;li&gt;&lt;span style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;"&gt;&lt;span id="docs-internal-guid-d7ce8871-7fff-90fd-33fd-d97353a64fb8"&gt;&lt;span style="background-color: white; font-variant-east-asian: normal; font-variant-numeric: normal; font-weight: 700; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;span style="color: purple; font-family: Times, Times New Roman, serif;"&gt;Use a fake&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="font-family: times, times new roman, serif;"&gt;.&amp;nbsp; A fake is a fast and lightweight implementation of the service that behaves just like the real implementation. A fake is usually maintained by the service owners; don’t create your own fake unless you can ensure its behavior will stay in sync with the real implementation.&amp;nbsp; Learn more about fakes at &lt;/span&gt;&lt;a href="http://testing.googleblog.com/2013/06/testing-on-toilet-fake-your-way-to.html" style="font-family: times, &amp;quot;times new roman&amp;quot;, serif;"&gt;testing.googleblog.com/2013/06/testing-on-toilet-fake-your-way-to.html&lt;/a&gt;&lt;span style="font-family: times, times new roman, serif;"&gt;.&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;"&gt;&lt;span id="docs-internal-guid-ad45d921-7fff-e561-02d5-1a8cf098db47"&gt;&lt;span style="background-color: white; font-variant-east-asian: normal; font-variant-numeric: normal; font-weight: 700; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;span style="color: purple; font-family: Times, Times New Roman, serif;"&gt;Use a hermetic server&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="font-family: times, times new roman, serif;"&gt;.&amp;nbsp; This is a real server that is brought up by the test and runs on the same machine that the test is running on. A downside of using a hermetic server is that starting it up and interacting with it can slow down tests.&amp;nbsp; Learn more about hermetic servers at &lt;/span&gt;&lt;a href="http://testing.googleblog.com/2012/10/hermetic-servers.html" style="font-family: times, &amp;quot;times new roman&amp;quot;, serif;"&gt;testing.googleblog.com/2012/10/hermetic-servers.html&lt;/a&gt;&lt;span style="font-family: times, times new roman, serif;"&gt;.&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;"&gt;&lt;span style="font-family: times, times new roman, serif;"&gt;If the service you are using doesn’t have a fake or hermetic server, mocks may be the only tool at your disposal. But&amp;nbsp;&lt;/span&gt;&lt;span id="docs-internal-guid-648cf637-7fff-283e-ed04-f2bd572a8e54"&gt;&lt;span style="background-color: white; font-variant-east-asian: normal; font-variant-numeric: normal; font-weight: 700; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;span style="color: purple; font-family: Times, Times New Roman, serif;"&gt;if your tests are not exercising the service call contract, you must take extra care to ensure the service call works&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="font-family: times, times new roman, serif;"&gt;, such as by having a comprehensive suite of end-to-end tests or resorting to manual QA (which can be inefficient and hard to scale).&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;</content><link href="http://testing.googleblog.com/feeds/5108653381755768530/comments/default" rel="replies" title="Post Comments" type="application/atom+xml"/><link href="http://testing.googleblog.com/2018/11/testing-on-toilet-exercise-service-call.html#comment-form" rel="replies" title="3 Comments" type="text/html"/><link href="http://www.blogger.com/feeds/15045980/posts/default/5108653381755768530" rel="edit" type="application/atom+xml"/><link href="http://www.blogger.com/feeds/15045980/posts/default/5108653381755768530" rel="self" type="application/atom+xml"/><link href="http://testing.googleblog.com/2018/11/testing-on-toilet-exercise-service-call.html" rel="alternate" title="Testing on the Toilet: Exercise Service Call Contracts in Tests" type="text/html"/><author><name>Google Testing Bloggers</name><uri>http://www.blogger.com/profile/03153388556673050910</uri><email>noreply@blogger.com</email><gd:image height="7" rel="http://schemas.google.com/g/2005#thumbnail" src="http://3.bp.blogspot.com/-H1YTvw0kdFA/UTf_IXv4N2I/AAAAAAAAABY/ghqaO2KBOSA/s1600/gtb3.png" width="32"/></author><thr:total>3</thr:total></entry><entry><id>tag:blogger.com,1999:blog-15045980.post-4326917295936432580</id><published>2018-09-17T10:33:00.001-07:00</published><updated>2020-02-25T14:12:31.065-08:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="Peter Spragins"/><category scheme="http://www.blogger.com/atom/ns#" term="Project Showcase"/><title type="text">Efficacy Presubmit</title><content type="html">&lt;span style="font-family: inherit;"&gt;By Peter Spragins&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: inherit;"&gt;with input from John Roane, Collin Johnston, Rose Rodrigues and Dave Chen&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style="font-family: inherit;"&gt;&lt;/span&gt;&lt;br /&gt;&lt;h2&gt;&lt;span style="font-family: inherit;"&gt;&lt;span style="font-family: inherit; font-size: x-large;"&gt;A Brief History of Efficacy&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;&lt;br /&gt;&lt;span style="font-family: inherit;"&gt;&lt;/span&gt;&lt;span style="font-family: inherit;"&gt;&lt;span style="font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="font-family: inherit;"&gt;&lt;span style="font-family: inherit;"&gt;Originally named "Test Efficacy", a small team was formed in 2014 to quantify the value of individual tests to the development process. Some tests were particularly valuable because they provided a reliable breakage signal for critical code. Some tests were not useful because they were non-deterministic or they never failed. Confoundingly, tests would change in value over time as well. The team’s initial intention was to present this information to developers and help them optimize the development process.&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style="font-family: inherit;"&gt;&lt;span style="font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: inherit;"&gt;&lt;span style="font-family: inherit;"&gt;To achieve the goal of informing developers about their tests, the team had to collect a huge amount of developer infrastructure/workflow data from a variety of sources across Google. Collecting all of this data in one place turned out to be incredibly valuable.&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style="font-family: inherit;"&gt;&lt;span style="font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: inherit;"&gt;&lt;span style="font-family: inherit;"&gt;In addition to collecting and processing the data, the team developed a somewhat radical philosophy towards running tests at scale: the only important results come from tests which deterministically fail. Running an additional test that you know will pass is not a valuable signal to developers, and likely a waste of resources.&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: inherit;"&gt;&lt;span style="font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;div&gt;&lt;h2&gt;&lt;span style="font-family: inherit; font-size: x-large;"&gt;Background on Google Presubmit&lt;/span&gt;&lt;/h2&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style="font-family: inherit;"&gt;The process of committing code at Google has several testing stages. Perhaps the three most important testing stages are:&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;ol&gt;&lt;li&gt;&lt;span style="font-family: inherit;"&gt;Individual ad-hoc testing&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style="font-family: inherit;"&gt;Presubmit&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style="font-family: inherit;"&gt;Continuous build/continuous integration (hereafter referred to as continuous build).&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;&lt;div&gt;&lt;div&gt;&lt;span style="font-family: inherit;"&gt;Stages 1 and 2 can actually be interleaved in any order and repeated any number of times.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: inherit;"&gt;A presubmit executes all of the tests which are known to be affected by the edited code within one user's proposed code changes. The "affected tests" are calculated with the help of a "project definition", a configuration maintained by teams. A presubmit can run at any point during the change proposal process, but most importantly it must run before a user can permanently commit their changes.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: inherit;"&gt;Continuous build, (3), is the continuous running of all tests within a project at the newest committed version of the code. Continuous build will execute tests even when they have already passed at presubmit.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: inherit;"&gt;The same test may run several times at presubmit during the development process, one last time at presubmit before a commit and then finally once again at continuous build, after being merged into the main branch of Google's huge repository. For this reason, a "missed failure" at presubmit is not a critical failure. The test will still be run at continuous build, and then rolled back if it fails.&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;h2&gt;&lt;span style="font-family: inherit; font-size: x-large;"&gt;Efficacy Presubmit Service&lt;/span&gt;&lt;/h2&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;span style="font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style="font-family: inherit;"&gt;Efficacy Presubmit Service is the fusion of "running the right tests at the right time" with one of the largest collections of test/developer data in the world. The service has one simple job: save time and resources by not running, or even compiling, tests that we are very confident will pass at Presubmit. The ideal "Efficacy Presubmit" would predict which tests will pass ahead of time and only run tests which were going to fail. Then the user can get feedback from the failing tests, and fix their mistakes with the minimal possible cost of user and CPU time.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: inherit;"&gt;To make this idea possible we have made one significant abstraction of the actual presubmit testing process. In a given presubmit there may be zero tests run, or many. In a presubmit with one test, if that test fails then the presubmit fails. In a presubmit with a thousand tests, only one failing test will still fail the presubmit. Efficacy Presubmit makes the abstraction that each of these test executions is an equivalent unit. This greatly simplifies creating a training dataset.&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;h3&gt;&lt;span style="color: #0b5394; font-family: inherit; font-size: large;"&gt;Machine Learning / Probabilistic Safety&lt;/span&gt;&lt;/h3&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="color: #0b5394; font-family: inherit; font-size: large;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;h4&gt;&lt;span style="color: black; font-family: inherit; font-size: medium;"&gt;Quick background on ML&lt;/span&gt;&lt;/h4&gt;&lt;/div&gt;&lt;div&gt;&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span id="docs-internal-guid-b7ec0cb1-7fff-cab0-2ce3-f3945d9bdc6c"&gt;&lt;span style="font-family: inherit;"&gt;&lt;span style="font-size: 12pt; vertical-align: baseline; white-space: pre-wrap;"&gt;ML techniques and processes are quite well known throughout the industry at this point. The Tensorflow tutorials are &lt;/span&gt;&lt;a href="https://www.tensorflow.org/tutorials/keras/" style="text-decoration-line: none;"&gt;&lt;span style="color: #1155cc; font-size: 12pt; vertical-align: baseline; white-space: pre-wrap;"&gt;a great introduction&lt;/span&gt;&lt;/a&gt;&lt;span style="font-size: 12pt; vertical-align: baseline; white-space: pre-wrap;"&gt;. The type of ML we use is classification. A classifier is essentially a mapping from the domain of the dataset, to the range of the classes.&lt;/span&gt;&lt;span style="color: #434343; font-size: 12pt; vertical-align: baseline; white-space: pre-wrap;"&gt; &lt;/span&gt;&lt;a href="https://en.wikipedia.org/wiki/MNIST_database" style="text-decoration-line: none;"&gt;&lt;span style="color: #1155cc; font-size: 12pt; vertical-align: baseline; white-space: pre-wrap;"&gt;Mnist&lt;/span&gt;&lt;/a&gt;&lt;span style="color: #434343; font-size: 12pt; vertical-align: baseline; white-space: pre-wrap;"&gt; &lt;/span&gt;&lt;span style="vertical-align: baseline; white-space: pre-wrap;"&gt;is a very famous example of classification. An mnist classifier maps from the domain of the input image to the range of digits {0, 1, …, 9}.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;span id="docs-internal-guid-b7ec0cb1-7fff-cab0-2ce3-f3945d9bdc6c"&gt;&lt;span style="font-family: inherit;"&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;div&gt;&lt;span id="docs-internal-guid-b7ec0cb1-7fff-cab0-2ce3-f3945d9bdc6c"&gt;&lt;span style="font-family: inherit;"&gt;&lt;span style="color: #434343; font-size: 12pt; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;span id="docs-internal-guid-b7ec0cb1-7fff-cab0-2ce3-f3945d9bdc6c"&gt;&lt;span style="font-family: inherit;"&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;div&gt;&lt;span id="docs-internal-guid-b7ec0cb1-7fff-cab0-2ce3-f3945d9bdc6c"&gt;&lt;span style="font-family: inherit;"&gt;&lt;span style="font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline;"&gt;&lt;span id="docs-internal-guid-6f9a3c4d-7fff-4fa0-52a9-ee4a5ac6286c"&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;div dir="ltr" style="font-size: 12pt; line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt; white-space: pre-wrap;"&gt;&lt;span id="docs-internal-guid-b7ec0cb1-7fff-cab0-2ce3-f3945d9bdc6c"&gt;&lt;span style="font-family: inherit;"&gt;&lt;span style="font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline;"&gt;&lt;span id="docs-internal-guid-6f9a3c4d-7fff-4fa0-52a9-ee4a5ac6286c"&gt;&lt;span style="font-size: 12pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline;"&gt;In some other classification problems, the inputs are more "&lt;/span&gt;&lt;a href="https://en.wikipedia.org/wiki/Table_(information)" style="color: #434343;"&gt;&lt;span style="color: #1155cc; font-size: 12pt; vertical-align: baseline;"&gt;tabular&lt;/span&gt;&lt;/a&gt;&lt;span style="font-size: 12pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline;"&gt;". A famous example of tabular classification is &lt;/span&gt;&lt;a href="https://www.kaggle.com/uciml/iris" style="color: #434343;"&gt;&lt;span style="color: #1155cc; font-size: 12pt; vertical-align: baseline;"&gt;Iris Species&lt;/span&gt;&lt;/a&gt;&lt;span style="font-size: 12pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline;"&gt;. This is very similar to what Efficacy does.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: inherit;"&gt;&lt;span style="font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline;"&gt;&lt;span style="font-size: 12pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;span id="docs-internal-guid-b7ec0cb1-7fff-cab0-2ce3-f3945d9bdc6c"&gt;&lt;span style="font-family: inherit;"&gt;&lt;span style="font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline;"&gt;&lt;span id="docs-internal-guid-6f9a3c4d-7fff-4fa0-52a9-ee4a5ac6286c"&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;div&gt;&lt;h4&gt;&lt;span id="docs-internal-guid-b7ec0cb1-7fff-cab0-2ce3-f3945d9bdc6c"&gt;&lt;span style="font-family: inherit;"&gt;&lt;span style="font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline;"&gt;&lt;span id="docs-internal-guid-6f9a3c4d-7fff-4fa0-52a9-ee4a5ac6286c"&gt;&lt;span style="font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;span style="color: black; font-size: medium;"&gt;Efficacy's Application of ML&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h4&gt;&lt;/div&gt;&lt;div&gt;&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt; white-space: pre-wrap;"&gt;&lt;span id="docs-internal-guid-b7ec0cb1-7fff-cab0-2ce3-f3945d9bdc6c"&gt;&lt;span style="font-family: inherit;"&gt;&lt;span style="font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline;"&gt;&lt;span id="docs-internal-guid-6f9a3c4d-7fff-4fa0-52a9-ee4a5ac6286c"&gt;&lt;span style="font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline;"&gt;&lt;span id="docs-internal-guid-d1dd62f4-7fff-9b0b-0e5a-8cc1a29d0a8c"&gt;&lt;span style="font-family: inherit; vertical-align: baseline;"&gt;Given the abstraction on the presubmit testing process described above, predicting the outcomes of automated testing at a large company is a perfect machine learning problem in many ways. You have:&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;span id="docs-internal-guid-b7ec0cb1-7fff-cab0-2ce3-f3945d9bdc6c"&gt;&lt;span style="font-family: inherit;"&gt;&lt;span style="font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline;"&gt;&lt;span id="docs-internal-guid-6f9a3c4d-7fff-4fa0-52a9-ee4a5ac6286c"&gt;&lt;span style="font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline;"&gt;&lt;span id="docs-internal-guid-d1dd62f4-7fff-9b0b-0e5a-8cc1a29d0a8c"&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;div&gt;&lt;ol&gt;&lt;span id="docs-internal-guid-b7ec0cb1-7fff-cab0-2ce3-f3945d9bdc6c"&gt;&lt;span style="font-family: inherit;"&gt;&lt;span style="font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline;"&gt;&lt;span id="docs-internal-guid-6f9a3c4d-7fff-4fa0-52a9-ee4a5ac6286c"&gt;&lt;span style="font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline;"&gt;&lt;span id="docs-internal-guid-d1dd62f4-7fff-9b0b-0e5a-8cc1a29d0a8c"&gt;&lt;span style="font-family: inherit;"&gt;&lt;/span&gt;&lt;li&gt;&lt;span style="color: #434343;"&gt;&lt;span style="font-family: inherit; white-space: pre-wrap;"&gt;The set of test executions and results is a very large labelled dataset&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style="font-family: inherit;"&gt;Copious numerical feature columns with trustworthy values&lt;/span&gt;&lt;/li&gt;&lt;ol style="list-style-type: lower-alpha;"&gt;&lt;li&gt;&lt;span style="font-family: inherit;"&gt;&amp;nbsp;Recent failure history of each test&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style="font-family: inherit;"&gt;&amp;nbsp;Various "distance" metrics from edited source files to tests - i.e. is this a test for the edited code?&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style="font-family: inherit;"&gt;Test size and runtime data&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;&lt;li&gt;&lt;span style="font-family: inherit;"&gt;Several dimensions that can be aggregated&lt;/span&gt;&lt;/li&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/ol&gt;&lt;div&gt;&lt;span id="docs-internal-guid-b7ec0cb1-7fff-cab0-2ce3-f3945d9bdc6c"&gt;&lt;span style="font-family: inherit;"&gt;&lt;span style="font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline;"&gt;&lt;span id="docs-internal-guid-6f9a3c4d-7fff-4fa0-52a9-ee4a5ac6286c"&gt;&lt;span style="font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline;"&gt;&lt;span id="docs-internal-guid-d1dd62f4-7fff-9b0b-0e5a-8cc1a29d0a8c" style="font-family: inherit;"&gt;There are some aspects of the problem which make ML difficult as well:&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span id="docs-internal-guid-b7ec0cb1-7fff-cab0-2ce3-f3945d9bdc6c"&gt;&lt;span style="font-family: inherit;"&gt;&lt;span style="font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline;"&gt;&lt;span id="docs-internal-guid-6f9a3c4d-7fff-4fa0-52a9-ee4a5ac6286c"&gt;&lt;span style="font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline;"&gt;&lt;span id="docs-internal-guid-d1dd62f4-7fff-9b0b-0e5a-8cc1a29d0a8c"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;span id="docs-internal-guid-b7ec0cb1-7fff-cab0-2ce3-f3945d9bdc6c"&gt;&lt;span style="font-family: inherit;"&gt;&lt;span style="font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline;"&gt;&lt;span id="docs-internal-guid-6f9a3c4d-7fff-4fa0-52a9-ee4a5ac6286c"&gt;&lt;span style="font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline;"&gt;&lt;span id="docs-internal-guid-d1dd62f4-7fff-9b0b-0e5a-8cc1a29d0a8c"&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;span id="docs-internal-guid-b7ec0cb1-7fff-cab0-2ce3-f3945d9bdc6c"&gt;&lt;span style="font-family: inherit;"&gt;&lt;span style="font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline;"&gt;&lt;span id="docs-internal-guid-6f9a3c4d-7fff-4fa0-52a9-ee4a5ac6286c"&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;span id="docs-internal-guid-b7ec0cb1-7fff-cab0-2ce3-f3945d9bdc6c"&gt;&lt;span style="font-family: inherit;"&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;ol&gt;&lt;li&gt;&lt;span style="font-family: inherit;"&gt;The classes are highly imbalanced with respect to labels (the vast majority of tests are going to pass, not fail)&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span id="docs-internal-guid-5189d992-7fff-1821-4e3e-94f9c16f1174"&gt;&lt;span style="font-family: inherit;"&gt;&lt;a href="https://testing.googleblog.com/2016/05/flaky-tests-at-google-and-how-we.html" style="text-decoration-line: none;"&gt;&lt;span style="color: #1155cc; font-size: 12pt; vertical-align: baseline; white-space: pre-wrap;"&gt;Flaky tests&lt;/span&gt;&lt;/a&gt;&lt;span style="font-size: 12pt; vertical-align: baseline; white-space: pre-wrap;"&gt; can mislead the model because their labels are "untrue"&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;&lt;div&gt;&lt;span style="color: #434343; font-family: inherit;"&gt;&lt;/span&gt;&lt;br /&gt;&lt;div&gt;&lt;span style="color: #434343; font-family: inherit;"&gt;&lt;span style="font-family: inherit; white-space: pre-wrap;"&gt;We chose to reduce the problem to binary classification. The model chooses whether or not to run the test. In other words, failure is the positive class, and everything else is the negative class.&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;span style="color: #434343; font-family: inherit;"&gt;&lt;/span&gt;&lt;br /&gt;&lt;div&gt;&lt;span style="color: #434343; font-family: inherit;"&gt;&lt;span style="white-space: pre-wrap;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;span style="color: #434343; font-family: inherit;"&gt;&lt;/span&gt;&lt;br /&gt;&lt;div&gt;&lt;span style="color: #434343; font-family: inherit;"&gt;&lt;span style="white-space: pre-wrap;"&gt;We pick a threshold that results in an extremely low number of false negatives - failing tests which are not run because the model thinks they would have passed. This does reduce the number of skipped tests, true negatives, in exchange for a very high margin of safety. In addition to this, tests will be run afterwards at continuous build anyway, making presubmit skipping very safe.&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;span style="color: #434343; font-family: inherit;"&gt;&lt;/span&gt;&lt;br /&gt;&lt;div style="color: #434343; white-space: pre-wrap;"&gt;&lt;span style="color: #434343; font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;span style="color: #434343; font-family: inherit;"&gt;&lt;/span&gt;&lt;br /&gt;&lt;div&gt;&lt;h3&gt;&lt;span style="color: #434343; font-family: inherit;"&gt;&lt;span style="white-space: pre-wrap;"&gt;&lt;span style="color: #0b5394; font-size: large;"&gt;Difficulties of Scale&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/div&gt;&lt;span style="color: #434343; font-family: inherit;"&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: inherit;"&gt;In addition to the problems that were natural to the "schema" of the dataset, we faced some problems due to the scale of Google's testing.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span id="docs-internal-guid-9245b746-7fff-1d3e-9a88-b7ab4fa91c9d"&gt;&lt;span style="font-family: inherit;"&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span id="docs-internal-guid-9245b746-7fff-1d3e-9a88-b7ab4fa91c9d"&gt;&lt;span style="font-family: inherit;"&gt;&lt;span style="font-size: 12pt; vertical-align: baseline; white-space: pre-wrap;"&gt;Many of these problems stem from the fact that Google works out of one large repository &lt;/span&gt;&lt;span style="background-color: white; font-size: 12pt; vertical-align: baseline; white-space: pre-wrap;"&gt;(&lt;/span&gt;&lt;a href="https://cacm.acm.org/magazines/2016/7/204032-why-google-stores-billions-of-lines-of-code-in-a-single-repository/fulltext" style="text-decoration-line: none;"&gt;&lt;span style="background-color: white; color: #1155cc; font-size: 12pt; vertical-align: baseline; white-space: pre-wrap;"&gt;paper&lt;/span&gt;&lt;/a&gt;&lt;span style="background-color: white; color: #222222; font-size: 12pt; vertical-align: baseline; white-space: pre-wrap;"&gt;, &lt;/span&gt;&lt;a href="https://www.youtube.com/watch?v=W71BTkUbdqE" style="text-decoration-line: none;"&gt;&lt;span style="background-color: white; color: #1155cc; font-size: 12pt; vertical-align: baseline; white-space: pre-wrap;"&gt;talk&lt;/span&gt;&lt;/a&gt;&lt;span style="background-color: white; font-size: 12pt; vertical-align: baseline; white-space: pre-wrap;"&gt;)&lt;/span&gt;&lt;span style="font-size: 12pt; vertical-align: baseline; white-space: pre-wrap;"&gt;. Because of this some presubmits have a very large number of tests and some commits require a large number of presubmits before they are finished. This means that the service has to make predictions for a very large number of tests all at once. If a presubmit tried to run every test at Google, then the service would have to predict each test individually. That means N times the number of columns, etc. Loading the data to generate all of these feature values uses a lot of memory.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;span id="docs-internal-guid-9245b746-7fff-1d3e-9a88-b7ab4fa91c9d"&gt;&lt;span style="font-family: inherit;"&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: inherit;"&gt;&lt;span style="font-size: 12pt; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;span id="docs-internal-guid-9245b746-7fff-1d3e-9a88-b7ab4fa91c9d"&gt;&lt;span style="font-family: inherit;"&gt;&lt;span style="font-size: 12pt; vertical-align: baseline; white-space: pre-wrap;"&gt;Another difficulty of doing this work at scale is that even with very rare false negatives, they will still happen somewhat frequently. This requires our team to be open to communication with any customer team. In some cases we may have to tell them they were the victim of a very low probability event. In other cases we may find a bug, or room for improvement.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;span id="docs-internal-guid-9245b746-7fff-1d3e-9a88-b7ab4fa91c9d"&gt;&lt;span style="font-family: inherit;"&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;span id="docs-internal-guid-9245b746-7fff-1d3e-9a88-b7ab4fa91c9d"&gt;&lt;span style="font-family: inherit;"&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;div&gt;&lt;h3&gt;&lt;span id="docs-internal-guid-9245b746-7fff-1d3e-9a88-b7ab4fa91c9d"&gt;&lt;span style="font-family: inherit;"&gt;&lt;span style="font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;span style="color: #0b5394; font-size: large;"&gt;Results&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/div&gt;&lt;span id="docs-internal-guid-9245b746-7fff-1d3e-9a88-b7ab4fa91c9d"&gt;&lt;span style="font-family: inherit;"&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;div&gt;&lt;span id="docs-internal-guid-9245b746-7fff-1d3e-9a88-b7ab4fa91c9d"&gt;&lt;span style="font-family: inherit;"&gt;&lt;span style="font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline;"&gt;&lt;span style="color: #434343;"&gt;&lt;span style="white-space: pre-wrap;"&gt;The two key numbers for the system's performance are sensitivity, the percentage of failing tests we actually execute, and specificity, the percentage of passing tests we actually skip. The two numbers go hand in hand. For a given model, requiring a higher sensitivity will result in a lower specificity, or vice versa.  We can easily tune the percentage of tests skipped, resulting in changes to the fidelity of the testing signal the developers receive.  When the system is wrong, it can have some negative impact to developers if the prediction is a false negative. Rarely, it will allow a developer to commit code that will break a test during continuous build. This results in a broken "project", which takes some time to detect, and then a roll-back of the code. This requires some developer time, and a flexible mentality towards testing. In order to achieve a positive balance from this, we must extract millions of skipped tests for every negative developer experience. The sensitivity of our system is very high, and our specificity is around 25%.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;span id="docs-internal-guid-9245b746-7fff-1d3e-9a88-b7ab4fa91c9d"&gt;&lt;span style="font-family: inherit;"&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;div&gt;&lt;span id="docs-internal-guid-9245b746-7fff-1d3e-9a88-b7ab4fa91c9d"&gt;&lt;span style="font-family: inherit;"&gt;&lt;span style="font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;span style="color: #434343;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;span id="docs-internal-guid-9245b746-7fff-1d3e-9a88-b7ab4fa91c9d"&gt;&lt;span style="font-family: inherit;"&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;</content><link href="http://testing.googleblog.com/feeds/4326917295936432580/comments/default" rel="replies" title="Post Comments" type="application/atom+xml"/><link href="http://testing.googleblog.com/2018/09/efficacy-presubmit.html#comment-form" rel="replies" title="13 Comments" type="text/html"/><link href="http://www.blogger.com/feeds/15045980/posts/default/4326917295936432580" rel="edit" type="application/atom+xml"/><link href="http://www.blogger.com/feeds/15045980/posts/default/4326917295936432580" rel="self" type="application/atom+xml"/><link href="http://testing.googleblog.com/2018/09/efficacy-presubmit.html" rel="alternate" title="Efficacy Presubmit" type="text/html"/><author><name>Google Testing Bloggers</name><uri>http://www.blogger.com/profile/03153388556673050910</uri><email>noreply@blogger.com</email><gd:image height="7" rel="http://schemas.google.com/g/2005#thumbnail" src="http://3.bp.blogspot.com/-H1YTvw0kdFA/UTf_IXv4N2I/AAAAAAAAABY/ghqaO2KBOSA/s1600/gtb3.png" width="32"/></author><thr:total>13</thr:total></entry><entry><id>tag:blogger.com,1999:blog-15045980.post-7503626774796342483</id><published>2018-07-25T10:42:00.000-07:00</published><updated>2018-07-26T21:38:09.111-07:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="Code Health"/><category scheme="http://www.blogger.com/atom/ns#" term="Marek Kiszkis"/><category scheme="http://www.blogger.com/atom/ns#" term="TotT"/><title type="text">Code Health: Make Interfaces Hard to Misuse</title><content type="html">&lt;span id="docs-internal-guid-31239969-d272-57b1-3d6f-993ac1ed4155" style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;"&gt;&lt;span style="background-color: white; color: #222222; font-style: italic; vertical-align: baseline; white-space: pre-wrap;"&gt;This is another post in our &lt;/span&gt;&lt;a href="https://testing.googleblog.com/2017/04/code-health-googles-internal-code.html" style="text-decoration-line: none;"&gt;&lt;span style="background-color: white; color: #1155cc; font-style: italic; vertical-align: baseline; white-space: pre-wrap;"&gt;Code Health&lt;/span&gt;&lt;/a&gt;&lt;span style="background-color: white; color: #222222; font-style: italic; vertical-align: baseline; white-space: pre-wrap;"&gt; series. A version of this post originally appeared in Google bathrooms worldwide as a Google &lt;/span&gt;&lt;a href="https://testing.googleblog.com/2007/01/introducing-testing-on-toilet.html" style="text-decoration-line: none;"&gt;&lt;span style="background-color: white; color: #1155cc; font-style: italic; vertical-align: baseline; white-space: pre-wrap;"&gt;Testing on the Toilet&lt;/span&gt;&lt;/a&gt;&lt;span style="background-color: white; color: #222222; font-style: italic; vertical-align: baseline; white-space: pre-wrap;"&gt; episode. You can download a &lt;/span&gt;&lt;a href="https://docs.google.com/document/d/1GaMJ4e2Z7XibnYtSkA3_WvVQ_2zoR7S_oHkW2jJpqDE/edit?usp=sharing" rel="nofollow" style="text-decoration-line: none;"&gt;&lt;span style="background-color: white; color: #1155cc; font-style: italic; vertical-align: baseline; white-space: pre-wrap;"&gt;printer-friendly version&lt;/span&gt;&lt;/a&gt;&lt;span style="background-color: white; color: #222222; font-style: italic; vertical-align: baseline; white-space: pre-wrap;"&gt; to display in your office. &lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;"&gt;&lt;span style="background-color: white; color: #222222; font-style: italic; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;"&gt;&lt;span style="background-color: white; color: #222222; vertical-align: baseline; white-space: pre-wrap;"&gt;By Marek Kiszkis&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;"&gt;&lt;span style="background-color: white; color: #222222; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;div dir="ltr" style="line-height: 1.2; margin-bottom: 8pt; margin-top: 0pt;"&gt;&lt;span style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;"&gt;&lt;span style="background-color: transparent; color: black; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"&gt;We all try to avoid errors in our code. But what about errors created by callers of your code? A good interface design can make it easy for callers to do the right thing, and hard for callers to do the wrong thing. &lt;/span&gt;&lt;span style="background-color: transparent; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;span style="color: purple;"&gt;Don't push the responsibility of maintaining invariants required by your class on to its callers.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;span id="docs-internal-guid-4df0c685-d286-1fe9-e163-7ef142e954fb"&gt;&lt;/span&gt;&lt;span style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;"&gt;&lt;span id="docs-internal-guid-e9a2f78f-d273-9b09-5695-86e07c3d6224"&gt;&lt;span style="vertical-align: baseline; white-space: pre-wrap;"&gt;Can you see the issues that can arise with this code?&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;div style="overflow-x: auto;"&gt;&lt;table class="my-bordered-table" style="width: 613px;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="background-color: #f4cccc; vertical-align: top; width: 607px;"&gt;&lt;pre style="background-color: #f4cccc; border: 0px; color: black; margin: 0px; padding-bottom: 0px; padding-left: 0px; padding-top: 0px;"&gt;&lt;span style="font-family: &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;class Vector {&lt;br /&gt;  explicit &lt;span style="font-weight: bold;"&gt;Vector&lt;/span&gt;(int num_slots);  // Creates an empty vector with `num_slots` slots.&lt;br /&gt;  int &lt;span style="font-weight: bold;"&gt;RemainingSlots&lt;/span&gt;() const;  // Returns the number of currently remaining slots.&lt;br /&gt;  void &lt;span style="font-weight: bold;"&gt;AddSlots&lt;/span&gt;(int num_slots);  // Adds `num_slots` more slots to the vector.&lt;br /&gt;  // Adds a new element at the end of the vector. Caller must ensure that RemainingSlots()  &lt;br /&gt;  // returns at least 1 before calling this, otherwise caller should call AddSlots().&lt;br /&gt;  void &lt;span style="font-weight: bold;"&gt;Insert&lt;/span&gt;(int value);&lt;br /&gt;}&lt;br /&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;span style="font-family: &amp;quot;times new roman&amp;quot;; font-size: 13pt; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif; vertical-align: baseline; white-space: pre-wrap;"&gt;If the caller forgets to call &lt;/span&gt;&lt;span style="color: #00931e; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; vertical-align: baseline; white-space: pre-wrap;"&gt;AddSlots()&lt;/span&gt;&lt;span style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif; vertical-align: baseline; white-space: pre-wrap;"&gt;, &lt;/span&gt;&lt;span style="color: purple; font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif; font-weight: 700; vertical-align: baseline; white-space: pre-wrap;"&gt;undefined behavior might be triggered&lt;/span&gt;&lt;span style="color: #980000; font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif; font-weight: 700; vertical-align: baseline; white-space: pre-wrap;"&gt; &lt;/span&gt;&lt;span style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif; vertical-align: baseline; white-space: pre-wrap;"&gt;when &lt;/span&gt;&lt;span style="color: #00931e; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; vertical-align: baseline; white-space: pre-wrap;"&gt;Insert()&lt;/span&gt;&lt;span style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif; vertical-align: baseline; white-space: pre-wrap;"&gt; is called. The interface pushes complexity onto the caller, exposing the caller to implementation details.&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;times new roman&amp;quot;; font-size: 13pt; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif; vertical-align: baseline; white-space: pre-wrap;"&gt;Since maintaining the slots is not relevant to the caller-visible behaviors of the class, don't expose them in the interface; &lt;/span&gt;&lt;span style="color: purple; font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif; font-weight: 700; vertical-align: baseline; white-space: pre-wrap;"&gt;make it impossible to trigger undefined behavior&lt;/span&gt;&lt;span style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif; vertical-align: baseline; white-space: pre-wrap;"&gt; by adding slots as needed in &lt;/span&gt;&lt;span style="color: #00931e; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; vertical-align: baseline; white-space: pre-wrap;"&gt;Insert()&lt;/span&gt;&lt;span style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif; vertical-align: baseline; white-space: pre-wrap;"&gt;.&lt;/span&gt;&lt;span id="docs-internal-guid-dbfef7ae-d27a-fe35-f91e-3e483c0c5757"&gt;&lt;/span&gt;&lt;br /&gt;&lt;div style="overflow-x: auto;"&gt;&lt;table class="my-bordered-table" style="width: 613px;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="background-color: #d9ead3; vertical-align: top; width: 607px;"&gt;&lt;pre style="background-color: #d9ead3; border: 0px; color: black; margin: 0px; padding-bottom: 0px; padding-left: 0px; padding-top: 0px;"&gt;&lt;span style="font-family: &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;class Vector {&lt;br /&gt;  explicit &lt;span style="font-weight: bold;"&gt;Vector&lt;/span&gt;(int num_slots);&lt;br /&gt;  // Adds a new element at the end of the vector. If necessary,&lt;br /&gt;  // allocates new slots to ensure that there is enough storage&lt;br /&gt;  // for the new value.&lt;br /&gt;  void &lt;span style="font-weight: bold;"&gt;Insert&lt;/span&gt;(int value);&lt;br /&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;br /&gt;&lt;span id="docs-internal-guid-1e587b0e-d27d-6aed-6be0-acff454eb88f"&gt;&lt;/span&gt;&lt;br /&gt;&lt;div dir="ltr" style="line-height: 1.2; margin-bottom: 0pt; margin-top: 8pt;"&gt;&lt;span style="background-color: transparent; color: black; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;span style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;"&gt;Contracts enforced by the compiler are usually better than contracts enforced by runtime checks, or worse, documentation-only contracts that rely on callers to do the right thing. &lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.2; margin-bottom: 0pt; margin-top: 8pt;"&gt;&lt;span style="font-weight: 700; white-space: pre-wrap;"&gt;&lt;span style="color: purple; font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;"&gt;Here are other examples that could signal that an interface is easy to misuse:&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.2; margin-bottom: 0pt; margin-top: 8pt;"&gt;&lt;/div&gt;&lt;ul&gt;&lt;li&gt;&lt;span style="white-space: pre-wrap;"&gt;&lt;b&gt;&lt;span id="docs-internal-guid-1d1a60d3-d281-2571-7a40-d9f1438328fc" style="font-weight: normal;"&gt;&lt;span style="font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline;"&gt;&lt;span style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;"&gt;Requiring callers to call an initialization function (alternative: expose factory methods that return your object fully initialized).&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/b&gt;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style="font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;span style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;"&gt;Requiring callers to perform custom cleanup (alternative: use language-specific constructs that ensure automated cleanup when your object goes out of scope).&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style="font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;span style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;"&gt;Allowing code paths that create objects without required parameters (e.g. a user without an ID).&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style="font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;span id="docs-internal-guid-9bcfb1b7-d281-e948-3630-7241750bd866"&gt;&lt;span style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif; vertical-align: baseline;"&gt;Allowing parameters for which only some values are valid, especially if it is possible to use a more appropriate type (e.g. prefer &lt;/span&gt;&lt;span style="color: #00931e; vertical-align: baseline;"&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;Duration timeout&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #00931e; font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif; vertical-align: baseline;"&gt; &lt;/span&gt;&lt;span style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif; vertical-align: baseline;"&gt;instead of &lt;/span&gt;&lt;span style="color: #00931e; vertical-align: baseline;"&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;int timeout_in_millis&lt;/span&gt;&lt;/span&gt;&lt;span style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif; vertical-align: baseline;"&gt;). &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;span id="docs-internal-guid-513985a7-d283-475f-4fce-615f7d3a6957"&gt;&lt;span style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;"&gt;&lt;span style="font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;It is not always practical to have a foolproof interface. &lt;/span&gt;&lt;span style="font-variant-east-asian: normal; font-variant-numeric: normal; font-weight: 700; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;span style="color: purple;"&gt;In certain cases, relying on static analysis or documentation is necessary&lt;/span&gt;&lt;/span&gt;&lt;span style="font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt; since some requirements are impossible to express in an interface (e.g. that a callback function needs to be thread-safe). &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;span style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span id="docs-internal-guid-e6a18413-d283-6836-7054-8b987cc12163"&gt;&lt;span style="font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;span style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;"&gt;Don’t enforce what you don’t need to enforce - avoid code that is too defensive. For example, extensive validation of function parameters can increase complexity and reduce performance.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;</content><link href="http://testing.googleblog.com/feeds/7503626774796342483/comments/default" rel="replies" title="Post Comments" type="application/atom+xml"/><link href="http://testing.googleblog.com/2018/07/code-health-make-interfaces-hard-to.html#comment-form" rel="replies" title="4 Comments" type="text/html"/><link href="http://www.blogger.com/feeds/15045980/posts/default/7503626774796342483" rel="edit" type="application/atom+xml"/><link href="http://www.blogger.com/feeds/15045980/posts/default/7503626774796342483" rel="self" type="application/atom+xml"/><link href="http://testing.googleblog.com/2018/07/code-health-make-interfaces-hard-to.html" rel="alternate" title="Code Health: Make Interfaces Hard to Misuse" type="text/html"/><author><name>Google Testing Bloggers</name><uri>http://www.blogger.com/profile/03153388556673050910</uri><email>noreply@blogger.com</email><gd:image height="7" rel="http://schemas.google.com/g/2005#thumbnail" src="http://3.bp.blogspot.com/-H1YTvw0kdFA/UTf_IXv4N2I/AAAAAAAAABY/ghqaO2KBOSA/s1600/gtb3.png" width="32"/></author><thr:total>4</thr:total></entry><entry><id>tag:blogger.com,1999:blog-15045980.post-6015182196746360165</id><published>2018-06-26T15:02:00.000-07:00</published><updated>2018-06-26T15:04:39.210-07:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="Dillon Bly"/><category scheme="http://www.blogger.com/atom/ns#" term="TotT"/><title type="text">Testing on the Toilet: Only Verify Relevant Method Arguments</title><content type="html">&lt;span id="docs-internal-guid-7e1766f2-3e0c-56eb-ab06-1655721a9901" style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;"&gt;&lt;span style="font-style: italic; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;This article was adapted from a &lt;/span&gt;&lt;a href="http://googletesting.blogspot.com/2007/01/introducing-testing-on-toilet.html" style="text-decoration-line: none;"&gt;&lt;span style="color: #1155cc; font-style: italic; vertical-align: baseline; white-space: pre-wrap;"&gt;Google Testing on the Toilet&lt;/span&gt;&lt;/a&gt;&lt;span style="font-style: italic; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt; (TotT) episode. You can download a &lt;/span&gt;&lt;a href="https://docs.google.com/document/d/1BxUCm5HuCg2_cq0iSI060iLCSMXzuudb-Ob57MhCJcw/edit" rel="nofollow" style="text-decoration-line: none;"&gt;&lt;span style="color: #1155cc; font-style: italic; vertical-align: baseline; white-space: pre-wrap;"&gt;printer-friendly version&lt;/span&gt;&lt;/a&gt;&lt;span style="font-style: italic; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt; of this TotT episode and post it in your office.&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style="font-style: italic; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style="font-family: Times, Times New Roman, serif; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;By Dillon Bly&lt;/span&gt;&lt;br /&gt;&lt;span style="font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif; vertical-align: baseline; white-space: pre-wrap;"&gt;What makes this test fragile?&lt;/span&gt;&lt;br /&gt;&lt;div style="overflow-x: auto;"&gt;&lt;table class="my-bordered-table" style="width: 613px;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="background-color: #f4cccc; vertical-align: top; width: 607px;"&gt;&lt;pre style="background-color: #f4cccc; border: 0px; margin: 0px; padding-bottom: 0px; padding-left: 0px; padding-top: 0px;"&gt;&lt;span style="color: black; font-family: &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;@Test public void &lt;span style="font-weight: bold;"&gt;displayGreeting_showSpecialGreetingOnNewYearsDay&lt;/span&gt;() {&lt;br /&gt;  fakeClock.setTime(&lt;span style="font-weight: bold;"&gt;NEW_YEARS_DAY&lt;/span&gt;);&lt;br /&gt;  fakeUser.setName("&lt;span style="font-weight: bold;"&gt;Fake User&lt;/span&gt;”);&lt;br /&gt;  userGreeter.displayGreeting();&lt;br /&gt;  // The test will fail if userGreeter.displayGreeting() didn’t call  &lt;br /&gt;  // mockUserPrompter.updatePrompt() with these exact arguments.&lt;br /&gt;  &lt;span style="font-weight: bold;"&gt;verify(mockUserPrompter).updatePrompt(&lt;br /&gt;      "Hi Fake User! Happy New Year!", TitleBar.of("2018-01-01"), PromptStyle.NORMAL);&lt;/span&gt;&lt;br /&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;br /&gt;&lt;span id="docs-internal-guid-bc84817c-3e14-e5cc-a05d-16b057db019f"&gt;&lt;span style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif; vertical-align: baseline; white-space: pre-wrap;"&gt;The test specifies exact values for all arguments to &lt;/span&gt;&lt;span style="color: #0d904f; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;mockUserPrompter&lt;/span&gt;&lt;/span&gt;&lt;span style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif; vertical-align: baseline; white-space: pre-wrap;"&gt;. &lt;/span&gt;&lt;span style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif; font-weight: 700; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;span style="color: purple;"&gt;These arguments may need to be updated when the code under test is changed, even if the changes are unrelated to the behavior being tested&lt;/span&gt;&lt;/span&gt;&lt;span style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif; vertical-align: baseline; white-space: pre-wrap;"&gt;. For example, if additional text is added to &lt;/span&gt;&lt;span style="color: #0d904f; font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif; vertical-align: baseline; white-space: pre-wrap;"&gt;TitleBar&lt;/span&gt;&lt;span style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif; vertical-align: baseline; white-space: pre-wrap;"&gt;, every test in the codebase that specifies this argument will need to be updated.&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;span id="docs-internal-guid-2bb90996-3e17-07d1-2522-8f9508921c42" style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;"&gt;&lt;span style="font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;In addition, &lt;/span&gt;&lt;span style="font-variant-east-asian: normal; font-variant-numeric: normal; font-weight: 700; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;span style="color: purple;"&gt;verifying too many arguments makes it difficult to understand what behavior is being tested&lt;/span&gt;&lt;/span&gt;&lt;span style="font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt; since it’s not obvious which arguments are important to the test and which are irrelevant.&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style="font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style="font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;span id="docs-internal-guid-f45a3252-3e17-a749-b17d-2afb4c9bacca" style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;"&gt;&lt;span style="font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline;"&gt;Instead, &lt;/span&gt;&lt;span style="font-variant-east-asian: normal; font-variant-numeric: normal; font-weight: 700; vertical-align: baseline;"&gt;&lt;span style="color: purple;"&gt;only verify arguments that affect the correctness of the specific behavior being tested&lt;/span&gt;&lt;/span&gt;&lt;span style="font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline;"&gt;. You can use argument matchers (e.g., &lt;/span&gt;&lt;span style="color: #0d904f; vertical-align: baseline;"&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;any()&lt;/span&gt;&lt;/span&gt;&lt;span style="font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline;"&gt; and &lt;/span&gt;&lt;span style="color: #0d904f; vertical-align: baseline;"&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;contains()&lt;/span&gt;&lt;/span&gt;&lt;span style="font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline;"&gt; in Mockito) to ignore arguments that don't need to be verified:&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;div style="overflow-x: auto;"&gt;&lt;table class="my-bordered-table" style="width: 613px;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="background-color: #d9ead3; vertical-align: top; width: 607px;"&gt;&lt;pre style="background-color: #d9ead3; border: 0px; color: black; margin: 0px; padding-bottom: 0px; padding-left: 0px; padding-top: 0px;"&gt;&lt;span style="font-family: &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;@Test public void &lt;span style="font-weight: bold;"&gt;displayGreeting_showSpecialGreetingOnNewYearsDay&lt;/span&gt;() {&lt;br /&gt;  fakeClock.setTime(&lt;span style="font-weight: bold;"&gt;NEW_YEARS_DAY&lt;/span&gt;);&lt;br /&gt;  userGreeter.displayGreeting();&lt;br /&gt;  &lt;span style="font-weight: bold;"&gt;verify(mockUserPrompter).updatePrompt(contains("Happy New Year!"), any(), any()));&lt;/span&gt;&lt;br /&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;br /&gt;&lt;span id="docs-internal-guid-f315adfc-3e1c-2c4c-701f-353cc666cc03" style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;"&gt;&lt;span style="font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Arguments ignored in one test can be verified in other tests. Following this pattern allows us to &lt;/span&gt;&lt;span style="font-variant-east-asian: normal; font-variant-numeric: normal; font-weight: 700; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;span style="color: purple;"&gt;verify only one behavior per test&lt;/span&gt;&lt;/span&gt;&lt;span style="font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;, which makes tests more readable and more resilient to change. For example, here is a separate test that we might write:&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;div style="overflow-x: auto;"&gt;&lt;table class="my-bordered-table" style="width: 613px;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="background-color: #d9ead3; vertical-align: top; width: 607px;"&gt;&lt;pre style="background-color: #d9ead3; border: 0px; color: black; margin: 0px; padding-bottom: 0px; padding-left: 0px; padding-top: 0px;"&gt;&lt;span style="font-family: &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;@Test public void &lt;span style="font-weight: bold;"&gt;displayGreeting_renderUserName&lt;/span&gt;() {&lt;br /&gt;  fakeUser.setName(“&lt;span style="font-weight: bold;"&gt;Fake User&lt;/span&gt;”);&lt;br /&gt;  userGreeter.displayGreeting();&lt;br /&gt;  // Focus on the argument relevant to showing the user's name.&lt;br /&gt;  &lt;span style="font-weight: bold;"&gt;verify(mockUserPrompter).updatePrompt(contains("Hi Fake User!"), any(), any());&lt;/span&gt;&lt;br /&gt;}&lt;br /&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;</content><link href="http://testing.googleblog.com/feeds/6015182196746360165/comments/default" rel="replies" title="Post Comments" type="application/atom+xml"/><link href="http://testing.googleblog.com/2018/06/testing-on-toilet-only-verify-relevant.html#comment-form" rel="replies" title="0 Comments" type="text/html"/><link href="http://www.blogger.com/feeds/15045980/posts/default/6015182196746360165" rel="edit" type="application/atom+xml"/><link href="http://www.blogger.com/feeds/15045980/posts/default/6015182196746360165" rel="self" type="application/atom+xml"/><link href="http://testing.googleblog.com/2018/06/testing-on-toilet-only-verify-relevant.html" rel="alternate" title="Testing on the Toilet: Only Verify Relevant Method Arguments" type="text/html"/><author><name>Google Testing Bloggers</name><uri>http://www.blogger.com/profile/03153388556673050910</uri><email>noreply@blogger.com</email><gd:image height="7" rel="http://schemas.google.com/g/2005#thumbnail" src="http://3.bp.blogspot.com/-H1YTvw0kdFA/UTf_IXv4N2I/AAAAAAAAABY/ghqaO2KBOSA/s1600/gtb3.png" width="32"/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-15045980.post-4941039424603171628</id><published>2018-06-11T09:20:00.000-07:00</published><updated>2018-12-13T09:47:48.992-08:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="Ben Yu"/><category scheme="http://www.blogger.com/atom/ns#" term="TotT"/><title type="text">Testing on the Toilet: Keep Tests Focused</title><content type="html">&lt;i&gt;&lt;span style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;"&gt;This article was adapted from a&amp;nbsp;&lt;a href="http://googletesting.blogspot.com/2007/01/introducing-testing-on-toilet.html"&gt;Google Testing on the Toilet&lt;/a&gt;&amp;nbsp;(TotT) episode. You can download a&amp;nbsp;&lt;a href="https://docs.google.com/document/d/1QwLg7uY7vMpWiahru76o0QdCWEeV8pO69FcwX0lCKWA/edit?usp=sharing" rel="nofollow"&gt;printer-friendly version&lt;/a&gt;&amp;nbsp;of this TotT episode and post it in your office.&lt;/span&gt;&lt;/i&gt;&lt;br /&gt;&lt;i&gt;&lt;span style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/i&gt;&lt;span style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;"&gt;By Ben Yu&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;span id="docs-internal-guid-7b9c23ee-ef94-09b4-cb1b-89c9a235a8c1"&gt;&lt;span style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif; vertical-align: baseline; white-space: pre-wrap;"&gt;What scenario does the following code test?&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;div style="overflow-x: auto;"&gt;&lt;table class="my-bordered-table" style="width: 613px;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="background-color: #cfe2f3; vertical-align: top; width: 607px;"&gt;&lt;pre style="background-color: #cfe2f3; border: 0px; margin: 0px; padding-bottom: 0px; padding-left: 0px; padding-top: 0px;"&gt;&lt;span style="color: black; font-family: &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;TEST_F(BankAccountTest, &lt;span style="font-weight: bold;"&gt;WithdrawFromAccount&lt;/span&gt;) {&lt;br /&gt;  Transaction transaction = account_.Deposit(Usd(5));&lt;br /&gt;  clock_.AdvanceTime(MIN_TIME_TO_SETTLE);&lt;br /&gt;  account_.Settle(transaction);&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;  EXPECT_THAT(&lt;span style="font-weight: bold;"&gt;account_.Withdraw&lt;/span&gt;(Usd(5)), IsOk());&lt;br /&gt;  EXPECT_THAT(&lt;span style="font-weight: bold;"&gt;account_.Withdraw&lt;/span&gt;(Usd(1)), IsRejected());&lt;br /&gt;  account_.SetOverdraftLimit(Usd(1));&lt;br /&gt;  EXPECT_THAT(&lt;span style="font-weight: bold;"&gt;account_.Withdraw&lt;/span&gt;(Usd(1)), IsOk());&lt;br /&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 10pt;"&gt;&lt;span id="docs-internal-guid-78e6ff07-ef9e-e0ec-fbd0-3db93bb4f28f" style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;"&gt;&lt;span style="background-color: white; color: #333333; vertical-align: baseline; white-space: pre-wrap;"&gt;Translated to English: “&lt;/span&gt;&lt;span style="background-color: white; color: #333333; font-style: italic; font-weight: 700; vertical-align: baseline; white-space: pre-wrap;"&gt;(1)&lt;/span&gt;&lt;span style="background-color: white; color: #333333; font-style: italic; vertical-align: baseline; white-space: pre-wrap;"&gt; I had $5 and was able to withdraw $5; &lt;/span&gt;&lt;span style="background-color: white; color: #333333; font-style: italic; font-weight: 700; vertical-align: baseline; white-space: pre-wrap;"&gt;(2)&lt;/span&gt;&lt;span style="background-color: white; color: #333333; font-style: italic; vertical-align: baseline; white-space: pre-wrap;"&gt; then got rejected when overdrawing $1;&lt;/span&gt;&lt;span style="background-color: white; color: #333333; font-style: italic; font-weight: 700; vertical-align: baseline; white-space: pre-wrap;"&gt; (3)&lt;/span&gt;&lt;span style="background-color: white; color: #333333; font-style: italic; vertical-align: baseline; white-space: pre-wrap;"&gt; but if I enable overdraft with a $1 limit, I can withdraw $1.”&lt;/span&gt;&lt;span style="background-color: white; color: #333333; vertical-align: baseline; white-space: pre-wrap;"&gt; If that sounds a little hard to track, it is: &lt;/span&gt;&lt;span style="background-color: white; color: purple; font-weight: 700; vertical-align: baseline; white-space: pre-wrap;"&gt;it is testing three scenarios, not one.&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;span id="docs-internal-guid-78e6ff07-ef9e-e0ec-fbd0-3db93bb4f28f"&gt;&lt;/span&gt;&lt;br /&gt;&lt;div&gt;&lt;span id="docs-internal-guid-78e6ff07-ef9e-e0ec-fbd0-3db93bb4f28f"&gt;&lt;span style="background-color: white; color: #980000; font-size: 13pt; font-weight: 700; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;span id="docs-internal-guid-78e6ff07-ef9e-e0ec-fbd0-3db93bb4f28f"&gt;&lt;span style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;"&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;div&gt;&lt;span id="docs-internal-guid-78e6ff07-ef9e-e0ec-fbd0-3db93bb4f28f"&gt;&lt;span style="background-color: white; font-weight: 700; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;span id="docs-internal-guid-73fc15db-ef9f-118e-1761-a33020c05953" style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif; font-weight: normal;"&gt;&lt;span style="color: #333333; vertical-align: baseline;"&gt;A better approach is to &lt;/span&gt;&lt;span style="color: purple; font-weight: 700; vertical-align: baseline;"&gt;exercise each scenario in its own test&lt;/span&gt;&lt;span style="color: #333333; vertical-align: baseline;"&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;span id="docs-internal-guid-78e6ff07-ef9e-e0ec-fbd0-3db93bb4f28f"&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="overflow-x: auto;"&gt;&lt;table class="my-bordered-table" style="width: 613px;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="background-color: #d9ead3; vertical-align: top; width: 607px;"&gt;&lt;pre style="background-color: #d9ead3; border: 0px; color: black; margin: 0px; padding-bottom: 0px; padding-left: 0px; padding-top: 0px;"&gt;&lt;span style="font-family: &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;TEST_F(BankAccountTest, &lt;span style="font-weight: bold;"&gt;CanWithdrawWithinBalance&lt;/span&gt;) {&lt;br /&gt;  DepositAndSettle(Usd(5));  // Common setup code is extracted into a helper method.&lt;br /&gt;  EXPECT_THAT(&lt;span style="font-weight: bold;"&gt;account_.Withdraw&lt;/span&gt;(Usd(5)), IsOk());&lt;br /&gt;}&lt;br /&gt;TEST_F(BankAccountTest, &lt;span style="font-weight: bold;"&gt;CannotOverdraw&lt;/span&gt;) {&lt;br /&gt;  DepositAndSettle(Usd(5));&lt;br /&gt;  EXPECT_THAT(&lt;span style="font-weight: bold;"&gt;account_.Withdraw&lt;/span&gt;(Usd(6)), IsRejected());&lt;br /&gt;}&lt;br /&gt;TEST_F(BankAccountTest, &lt;span style="font-weight: bold;"&gt;CanOverdrawUpToOverdraftLimit&lt;/span&gt;) {&lt;br /&gt;  DepositAndSettle(Usd(5));&lt;br /&gt;  account_.SetOverdraftLimit(Usd(1));&lt;br /&gt;  EXPECT_THAT(&lt;span style="font-weight: bold;"&gt;account_.Withdraw&lt;/span&gt;(Usd(6)), IsOk());&lt;br /&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;br /&gt;&lt;div dir="ltr" style="line-height: 1.2; margin-bottom: 0pt; margin-top: 10pt;"&gt;&lt;span style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;"&gt;&lt;span style="background-color: white; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;span style="color: purple;"&gt;Writing tests this way provides many benefits&lt;/span&gt;&lt;/span&gt;&lt;span style="background-color: transparent; color: black; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;span style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;"&gt;&lt;span id="docs-internal-guid-7d99b1a3-efa1-48fb-89c0-831589ed64ac"&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;ul style="margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;li dir="ltr" style="background-color: transparent; color: black; font-style: normal; font-variant: normal; font-weight: 400; list-style-type: disc; margin-left: -13.5pt; text-decoration: none; vertical-align: baseline; white-space: pre;"&gt;&lt;span style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;"&gt;Logic is easier to understand because there is less code to read in each test method.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ul style="margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;li dir="ltr" style="background-color: transparent; color: black; font-style: normal; font-variant: normal; font-weight: 400; list-style-type: disc; margin-left: -13.5pt; text-decoration: none; vertical-align: baseline; white-space: pre;"&gt;&lt;span style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;"&gt;Setup code in each test is simpler because it only needs to serve a single scenario.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ul style="margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;li dir="ltr" style="background-color: transparent; color: black; font-style: normal; font-variant: normal; font-weight: 400; list-style-type: disc; margin-left: -13.5pt; text-decoration: none; vertical-align: baseline; white-space: pre;"&gt;&lt;span style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;"&gt;Side effects of one scenario will not accidentally invalidate or mask a later scenario’s assumptions. &lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ul style="margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;li dir="ltr" style="background-color: transparent; color: black; font-style: normal; font-variant: normal; font-weight: 400; list-style-type: disc; margin-left: -13.5pt; text-decoration: none; vertical-align: baseline; white-space: pre;"&gt;&lt;span style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;"&gt;If a scenario in one test fails, other scenarios will still run since they are unaffected by the failure.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ul style="margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;li dir="ltr" style="background-color: transparent; color: black; font-style: normal; font-variant: normal; font-weight: 400; list-style-type: disc; margin-left: -13.5pt; text-decoration: none; vertical-align: baseline; white-space: pre;"&gt;&lt;span style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;"&gt;Test names clearly describe each scenario, which makes it easier to learn which scenarios exist.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;div dir="ltr" style="line-height: 1.2; margin-bottom: 0pt; margin-top: 10pt;"&gt;&lt;span id="docs-internal-guid-b1437967-efa1-7617-055d-4f63e0f47cff"&gt;&lt;span style="font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;span style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;"&gt;One sign that you might be testing more than one scenario: after asserting the output of one call to the system under test, the test makes another call to the system under test.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;span id="docs-internal-guid-b1437967-efa1-7617-055d-4f63e0f47cff"&gt;&lt;/span&gt;&lt;br /&gt;&lt;div&gt;&lt;span id="docs-internal-guid-b1437967-efa1-7617-055d-4f63e0f47cff"&gt;&lt;span style="font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;span id="docs-internal-guid-ca653e74-efa1-8e8c-1649-9423a50abeef"&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 10pt;"&gt;&lt;span id="docs-internal-guid-b1437967-efa1-7617-055d-4f63e0f47cff"&gt;&lt;span style="font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;span id="docs-internal-guid-ca653e74-efa1-8e8c-1649-9423a50abeef"&gt;&lt;span style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;"&gt;&lt;span style="font-variant-east-asian: normal; font-variant-numeric: normal; font-weight: 700; vertical-align: baseline;"&gt;&lt;span style="color: purple;"&gt;While a scenario for a unit test often consists of a single call to the system under test, its scope can be larger for integration and end-to-end tests&lt;/span&gt;&lt;/span&gt;&lt;span style="font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline;"&gt;. For example, a test that a web UI can send email might open the inbox, click the &lt;/span&gt;&lt;span style="font-style: italic; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline;"&gt;compose&lt;/span&gt;&lt;span style="font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline;"&gt; button, write some text, and press the &lt;/span&gt;&lt;span style="font-style: italic; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline;"&gt;send&lt;/span&gt;&lt;span style="font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline;"&gt; button.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;span id="docs-internal-guid-b1437967-efa1-7617-055d-4f63e0f47cff"&gt;&lt;span style="font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;span id="docs-internal-guid-ca653e74-efa1-8e8c-1649-9423a50abeef"&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;div style="font-size: 13pt;"&gt;&lt;span id="docs-internal-guid-b1437967-efa1-7617-055d-4f63e0f47cff"&gt;&lt;span style="font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;span id="docs-internal-guid-ca653e74-efa1-8e8c-1649-9423a50abeef"&gt;&lt;span style="font-size: 13pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;span id="docs-internal-guid-b1437967-efa1-7617-055d-4f63e0f47cff"&gt;&lt;span style="font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;span id="docs-internal-guid-ca653e74-efa1-8e8c-1649-9423a50abeef"&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;span id="docs-internal-guid-b1437967-efa1-7617-055d-4f63e0f47cff"&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-size: 17.3333px; white-space: pre-wrap;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;</content><link href="http://testing.googleblog.com/feeds/4941039424603171628/comments/default" rel="replies" title="Post Comments" type="application/atom+xml"/><link href="http://testing.googleblog.com/2018/06/testing-on-toilet-keep-tests-focused.html#comment-form" rel="replies" title="6 Comments" type="text/html"/><link href="http://www.blogger.com/feeds/15045980/posts/default/4941039424603171628" rel="edit" type="application/atom+xml"/><link href="http://www.blogger.com/feeds/15045980/posts/default/4941039424603171628" rel="self" type="application/atom+xml"/><link href="http://testing.googleblog.com/2018/06/testing-on-toilet-keep-tests-focused.html" rel="alternate" title="Testing on the Toilet: Keep Tests Focused" type="text/html"/><author><name>Google Testing Bloggers</name><uri>http://www.blogger.com/profile/03153388556673050910</uri><email>noreply@blogger.com</email><gd:image height="7" rel="http://schemas.google.com/g/2005#thumbnail" src="http://3.bp.blogspot.com/-H1YTvw0kdFA/UTf_IXv4N2I/AAAAAAAAABY/ghqaO2KBOSA/s1600/gtb3.png" width="32"/></author><thr:total>6</thr:total></entry><entry><id>tag:blogger.com,1999:blog-15045980.post-499881011831374904</id><published>2018-05-01T12:11:00.001-07:00</published><updated>2018-05-01T12:12:21.634-07:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="Code Health"/><category scheme="http://www.blogger.com/atom/ns#" term="Max Kanat-Alexander"/><category scheme="http://www.blogger.com/atom/ns#" term="TotT"/><title type="text">Code Health: Understanding Code In Review</title><content type="html">&lt;span id="docs-internal-guid-bda27e4f-1d0e-8d72-6e8d-b6375376fbc6"&gt;&lt;/span&gt;&lt;br /&gt;&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;"&gt;&lt;span style="background-color: white; color: #222222; font-style: italic; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"&gt;This is another post in our &lt;/span&gt;&lt;a href="https://testing.googleblog.com/2017/04/code-health-googles-internal-code.html" style="text-decoration: none;"&gt;&lt;span style="background-color: white; color: #1155cc; font-style: italic; font-variant: normal; font-weight: 400; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;"&gt;Code Health&lt;/span&gt;&lt;/a&gt;&lt;span style="background-color: white; color: #222222; font-style: italic; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"&gt; series. A version of this post originally appeared in Google bathrooms worldwide as a Google &lt;/span&gt;&lt;a href="https://testing.googleblog.com/2007/01/introducing-testing-on-toilet.html" style="text-decoration: none;"&gt;&lt;span style="background-color: white; color: #1155cc; font-style: italic; font-variant: normal; font-weight: 400; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;"&gt;Testing on the Toilet&lt;/span&gt;&lt;/a&gt;&lt;span style="background-color: white; color: #222222; font-style: italic; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"&gt; episode. You can download a &lt;/span&gt;&lt;a href="https://docs.google.com/document/d/1fhSq_bbzlS4amLlhLbHq7VYz3VySkbfy0uKlTn2rLl4/edit?usp=sharing" rel="nofollow" style="text-decoration: none;"&gt;&lt;span style="background-color: white; color: #1155cc; font-style: italic; font-variant: normal; font-weight: 400; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;"&gt;printer-friendly version&lt;/span&gt;&lt;/a&gt;&lt;span style="background-color: white; color: #222222; font-style: italic; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"&gt; to display in your office.&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: white; color: #222222; font-family: &amp;quot;arial&amp;quot;; font-size: 9.5pt; font-style: italic; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: white; color: #222222; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;span style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;"&gt;By Max Kanat-Alexander&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: white; color: #222222; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;span style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="background-color: white; color: #222222; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;span style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: white; color: #222222; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;span id="docs-internal-guid-a9eb0958-1d10-1166-426e-fc302c9fafb2"&gt;&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif; vertical-align: baseline;"&gt;It's easy to assume that a developer who sends you some code for review is smarter than you'll ever be, and that's why you don't understand their code.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: white; color: #222222; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;span style="background-color: transparent; color: black; font-size: 13pt; vertical-align: baseline;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: white; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;span id="docs-internal-guid-a9eb0958-1d10-2b95-5767-88453750d8e8" style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;"&gt;&lt;span style="background-color: transparent; color: black; vertical-align: baseline;"&gt;But in reality,&lt;/span&gt;&lt;span style="background-color: transparent; color: #7e0021; font-weight: 700; vertical-align: baseline;"&gt; &lt;/span&gt;&lt;span style="background-color: transparent; color: purple; font-weight: 700; vertical-align: baseline;"&gt;if code is hard to understand, it's probably too complex&lt;/span&gt;&lt;span style="background-color: transparent; color: black; vertical-align: baseline;"&gt;. If you're familiar with the programming language being used,&lt;/span&gt;&lt;span style="background-color: transparent; color: #7e0021; font-weight: 700; vertical-align: baseline;"&gt; &lt;/span&gt;&lt;span style="background-color: transparent; color: purple; font-weight: 700; vertical-align: baseline;"&gt;reading healthy code should be almost as easy as reading a book in your native language&lt;/span&gt;&lt;span style="background-color: transparent; color: black; vertical-align: baseline;"&gt;.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: white; color: #222222; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;span style="background-color: transparent; color: black; font-size: 13pt; vertical-align: baseline;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: white; color: #222222; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;span id="docs-internal-guid-a9eb0958-1d10-4444-dc5c-150f5bbac905"&gt;&lt;span style="color: black; font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif; vertical-align: baseline;"&gt;Pretend a developer sends you this block of Python to be reviewed:&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="overflow-x: auto;"&gt;&lt;table class="my-bordered-table" style="width: 613px;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="background-color: #f4cccc; vertical-align: top; width: 607px;"&gt;&lt;pre style="background-color: #f4cccc; border: 0px; color: black; margin: 0px; padding-bottom: 0px; padding-left: 0px; padding-top: 0px;"&gt;&lt;span style="font-family: &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;def IsOkay(n):&lt;br /&gt;  f = False&lt;br /&gt;  for i in range(2, n):&lt;br /&gt;    if n % i == 0:&lt;br /&gt;      f = True&lt;br /&gt;  return not f&lt;br /&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;br /&gt;&lt;span id="docs-internal-guid-a9eb0958-1d12-e8f0-0e06-849983bd10d9" style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;"&gt;&lt;span style="background-color: white; color: purple; font-weight: 700; vertical-align: baseline; white-space: pre-wrap;"&gt;Don't spend more than a few seconds trying to understand it&lt;/span&gt;&lt;span style="background-color: white; vertical-align: baseline; white-space: pre-wrap;"&gt;. Simply add a code review comment saying,&lt;/span&gt;&lt;span style="background-color: white; color: maroon; font-weight: 700; vertical-align: baseline; white-space: pre-wrap;"&gt; &lt;/span&gt;&lt;span style="background-color: white; vertical-align: baseline; white-space: pre-wrap;"&gt;"It's hard for me to understand this piece of code," or be more specific, and say,&lt;/span&gt;&lt;span style="background-color: white; color: #7e0021; font-weight: 700; vertical-align: baseline; white-space: pre-wrap;"&gt; &lt;/span&gt;&lt;span style="background-color: white; vertical-align: baseline; white-space: pre-wrap;"&gt;"Please use more descriptive names here."&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style="background-color: white; font-size: 13pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;span id="docs-internal-guid-a9eb0958-1d13-04a9-5d6d-ed2044db832e" style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;"&gt;&lt;span style="background-color: white; color: purple; font-weight: 700; vertical-align: baseline; white-space: pre-wrap;"&gt;The developer then clarifies the code&lt;/span&gt;&lt;span style="background-color: white; vertical-align: baseline; white-space: pre-wrap;"&gt; and sends it to you for review again:&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;div style="overflow-x: auto;"&gt;&lt;table class="my-bordered-table" style="width: 613px;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="background-color: #fff2cc; vertical-align: top; width: 607px;"&gt;&lt;pre style="background-color: #fff2cc; border: 0px; color: black; margin: 0px; padding-bottom: 0px; padding-left: 0px; padding-top: 0px;"&gt;&lt;span style="font-family: &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;def IsPrime(n):&lt;br /&gt;  for divisor in range(2, n / 2):&lt;br /&gt;    if n % divisor == 0:&lt;br /&gt;      return False&lt;br /&gt;&lt;br /&gt;  return True&lt;br /&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;br /&gt;&lt;span id="docs-internal-guid-a9eb0958-1d14-74ac-b4e9-3ae86e827efa"&gt;&lt;span style="background-color: white; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;span style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;"&gt;Now we can read it pretty easily, which is a benefit in itself.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style="background-color: white; font-size: 13pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;span id="docs-internal-guid-a9eb0958-1d14-8e8f-9ded-0a45de385efe"&gt;&lt;span style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;"&gt;&lt;span style="background-color: white; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Often, &lt;/span&gt;&lt;span style="background-color: white; font-variant-east-asian: normal; font-variant-numeric: normal; font-weight: 700; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;span style="color: purple;"&gt;just asking a developer to clarify a piece of code will result in fundamental improvements&lt;/span&gt;&lt;/span&gt;&lt;span style="background-color: white; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;. In this case,&lt;/span&gt;&lt;span style="background-color: white; color: maroon; font-weight: 700; vertical-align: baseline; white-space: pre-wrap;"&gt; &lt;/span&gt;&lt;span style="background-color: white; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;the developer noticed possible performance improvements since the code was easier to read—the function now returns earlier when the number isn't prime, and the loop only goes to&lt;/span&gt;&lt;span style="background-color: white; font-variant-east-asian: normal; font-variant-numeric: normal; font-weight: 700; vertical-align: baseline; white-space: pre-wrap;"&gt; &lt;/span&gt;&lt;/span&gt;&lt;span style="background-color: white; font-family: &amp;quot;courier new&amp;quot;; font-weight: 700; vertical-align: baseline; white-space: pre-wrap;"&gt;n/2&lt;/span&gt;&lt;span style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;"&gt;&lt;span style="background-color: white; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt; instead of&lt;/span&gt;&lt;span style="background-color: white; font-variant-east-asian: normal; font-variant-numeric: normal; font-weight: 700; vertical-align: baseline; white-space: pre-wrap;"&gt; &lt;/span&gt;&lt;/span&gt;&lt;span style="background-color: white; font-family: &amp;quot;courier new&amp;quot;; font-weight: 700; vertical-align: baseline; white-space: pre-wrap;"&gt;n&lt;/span&gt;&lt;span style="background-color: white; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;. &lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style="background-color: white; font-size: 13pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;span id="docs-internal-guid-a9eb0958-1d14-b070-4ff8-2177a8f42d0c"&gt;&lt;span style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;"&gt;&lt;span style="color: purple;"&gt;&lt;span style="background-color: white; font-variant-east-asian: normal; font-variant-numeric: normal; font-weight: 700; vertical-align: baseline; white-space: pre-wrap;"&gt;However, now that we can easily understand this code,&lt;/span&gt;&lt;span style="background-color: white; font-variant-east-asian: normal; font-variant-numeric: normal; font-weight: 700; vertical-align: baseline; white-space: pre-wrap;"&gt; &lt;/span&gt;&lt;span style="background-color: white; font-variant-east-asian: normal; font-variant-numeric: normal; font-weight: 700; vertical-align: baseline; white-space: pre-wrap;"&gt;we can see many problems with it&lt;/span&gt;&lt;/span&gt;&lt;span style="background-color: white; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;. For example, it has strange behavior with 0 and 1, and there are other problems, too. But most importantly, it is now apparent that&lt;/span&gt;&lt;span style="background-color: white; color: #980000; font-weight: 700; vertical-align: baseline; white-space: pre-wrap;"&gt; &lt;/span&gt;&lt;span style="background-color: white; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;this entire function should be removed and be replaced with a preexisting function for detecting if a number is prime. Clarifying the code helped both the developer and reviewer.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style="background-color: white; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;span style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;span id="docs-internal-guid-a9eb0958-1d14-c904-1c55-5cf152a80551"&gt;&lt;span style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;"&gt;&lt;span style="background-color: white; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;In summary,&lt;/span&gt;&lt;span style="background-color: white; color: #7e0021; font-weight: 700; vertical-align: baseline; white-space: pre-wrap;"&gt; &lt;/span&gt;&lt;span style="background-color: white; font-variant-east-asian: normal; font-variant-numeric: normal; font-weight: 700; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;span style="color: purple;"&gt;don't waste time reviewing code that is hard to understand, just ask for it to be clarified&lt;/span&gt;&lt;/span&gt;&lt;span style="background-color: white; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;. In fact, such review comments are one of the most useful and important tools a code reviewer has!&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;</content><link href="http://testing.googleblog.com/feeds/499881011831374904/comments/default" rel="replies" title="Post Comments" type="application/atom+xml"/><link href="http://testing.googleblog.com/2018/05/code-health-understanding-code-in-review.html#comment-form" rel="replies" title="1 Comments" type="text/html"/><link href="http://www.blogger.com/feeds/15045980/posts/default/499881011831374904" rel="edit" type="application/atom+xml"/><link href="http://www.blogger.com/feeds/15045980/posts/default/499881011831374904" rel="self" type="application/atom+xml"/><link href="http://testing.googleblog.com/2018/05/code-health-understanding-code-in-review.html" rel="alternate" title="Code Health: Understanding Code In Review" type="text/html"/><author><name>Google Testing Bloggers</name><uri>http://www.blogger.com/profile/03153388556673050910</uri><email>noreply@blogger.com</email><gd:image height="7" rel="http://schemas.google.com/g/2005#thumbnail" src="http://3.bp.blogspot.com/-H1YTvw0kdFA/UTf_IXv4N2I/AAAAAAAAABY/ghqaO2KBOSA/s1600/gtb3.png" width="32"/></author><thr:total>1</thr:total></entry><entry><id>tag:blogger.com,1999:blog-15045980.post-4368690219079281355</id><published>2018-02-20T14:11:00.000-08:00</published><updated>2018-02-20T15:17:39.808-08:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="Ben Yu"/><category scheme="http://www.blogger.com/atom/ns#" term="TotT"/><title type="text">Testing on the Toilet: Cleanly Create Test Data</title><content type="html">&lt;i&gt;&lt;span style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;"&gt;This article was adapted from a&amp;nbsp;&lt;a href="http://googletesting.blogspot.com/2007/01/introducing-testing-on-toilet.html"&gt;Google Testing on the Toilet&lt;/a&gt;&amp;nbsp;(TotT) episode. You can download a&amp;nbsp;&lt;a href="https://docs.google.com/document/d/1ntYzDmcBgs1uaRnLFqA96Ou1G9h-92pXujjENrbPa-8/edit?usp=sharing" rel="nofollow"&gt;printer-friendly version&lt;/a&gt;&amp;nbsp;of this TotT episode and post it in your office.&lt;/span&gt;&lt;/i&gt;&lt;br /&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;span style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;"&gt;By Ben Yu&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;"&gt;&lt;span style="color: purple; font-weight: bold;"&gt;Helper methods make it easier to create test data. But they can become difficult to read over time&lt;/span&gt; as you need more variations of the test data to satisfy constantly evolving requirements from new tests:&lt;/span&gt;&lt;br /&gt;&lt;div style="overflow-x: auto;"&gt;&lt;table class="my-bordered-table" style="width: 613px;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="background-color: #f4cccc; vertical-align: top; width: 607px;"&gt;&lt;pre style="background-color: #f4cccc; border: 0px; color: black; margin: 0px; padding-bottom: 0px; padding-left: 0px; padding-top: 0px;"&gt;&lt;span style="color: black; font-family: &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;span style="color: #006600;"&gt;// This helper method starts with just a single parameter:&lt;/span&gt;&lt;br /&gt;Company company = &lt;span style="font-weight: bold;"&gt;newCompany&lt;/span&gt;(PUBLIC);&lt;/span&gt;&lt;/pre&gt;&lt;pre style="background-color: #f4cccc; border: 0px; margin: 0px; padding-bottom: 0px; padding-left: 0px; padding-top: 0px;"&gt;&lt;span style="color: black; font-family: &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;br /&gt;&lt;span style="color: #006600;"&gt;// But soon it acquires more and more parameters.&lt;br /&gt;// Conditionals creep into the newCompany() method body to handle the nulls,&lt;br /&gt;// and the method calls become hard to read due to the long parameter lists:&lt;br /&gt;&lt;/span&gt;Company small = &lt;span style="font-weight: bold;"&gt;newCompany&lt;/span&gt;(2, 2, null, PUBLIC);&lt;br /&gt;Company privatelyOwned = &lt;span style="font-weight: bold;"&gt;newCompany&lt;/span&gt;(null, null, null, PRIVATE);&lt;br /&gt;Company bankrupt = &lt;span style="font-weight: bold;"&gt;newCompany&lt;/span&gt;(null, null, PAST_DATE, PUBLIC);&lt;br /&gt;&lt;br /&gt;&lt;span style="color: #006600;"&gt;// Or a new method is added each time a test needs a different combination of fields:&lt;br /&gt;&lt;/span&gt;Company small = &lt;span style="font-weight: bold;"&gt;newCompanyWithEmployeesAndBoardMembers&lt;/span&gt;(2, 2, PUBLIC);&lt;br /&gt;Company privatelyOwned = &lt;span style="font-weight: bold;"&gt;newCompanyWithType&lt;/span&gt;(PRIVATE);&lt;br /&gt;Company bankrupt = &lt;span style="font-weight: bold;"&gt;newCompanyWithBankruptcyDate&lt;/span&gt;(PAST_DATE, PUBLIC);&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;span style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;"&gt;Instead, &lt;span style="color: purple; font-weight: bold;"&gt;use the test data builder pattern: create a helper method that returns a partially-built object&lt;/span&gt; (e.g., a Builder in languages such as Java, or a mutable object) whose state can be overridden in tests. The helper method initializes logically-required fields to reasonable defaults, so &lt;span style="color: purple; font-weight: bold;"&gt;each test can specify only fields relevant to the case being tested&lt;/span&gt;:  &lt;/span&gt;&lt;br /&gt;&lt;div style="overflow-x: auto;"&gt;&lt;table class="my-bordered-table" style="width: 613px;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="background-color: #d9ead3; vertical-align: top; width: 607px;"&gt;&lt;pre style="background-color: #d9ead3; border: 0px; color: black; margin: 0px; padding-bottom: 0px; padding-left: 0px; padding-top: 0px;"&gt;&lt;span style="font-family: &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;Company small = &lt;span style="font-weight: bold;"&gt;newCompany&lt;/span&gt;().setEmployees(2).setBoardMembers(2).build();&lt;br /&gt;Company privatelyOwned = &lt;span style="font-weight: bold;"&gt;newCompany&lt;/span&gt;().setType(PRIVATE).build();&lt;br /&gt;Company bankrupt = &lt;span style="font-weight: bold;"&gt;newCompany&lt;/span&gt;().setBankruptcyDate(PAST_DATE).build();&lt;br /&gt;Company arbitraryCompany = &lt;span style="font-weight: bold;"&gt;newCompany&lt;/span&gt;().build();&lt;br /&gt;&lt;/span&gt;&lt;/pre&gt;&lt;pre style="background-color: #d9ead3; border: 0px; margin: 0px; padding-bottom: 0px; padding-left: 0px; padding-top: 0px;"&gt;&lt;span style="font-family: &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;span style="color: blue;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;pre style="background-color: #d9ead3; border: 0px; color: black; margin: 0px; padding-bottom: 0px; padding-left: 0px; padding-top: 0px;"&gt;&lt;span style="font-family: &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;span style="color: blue;"&gt;// Zero parameters makes this method reusable for different variations of Company.&lt;br /&gt;// It also doesn’t need conditionals to ignore parameters that aren’t set (e.g. null&lt;br /&gt;// values) since a test can simply not set a field if it doesn’t care about it.&lt;br /&gt;&lt;/span&gt;private static &lt;span style="font-weight: bold;"&gt;Company.Builder newCompany&lt;/span&gt;() {&lt;br /&gt;  return Company.newBuilder().setType(PUBLIC).setEmployees(100); &lt;span style="color: blue;"&gt;// Set required fields&lt;/span&gt;&lt;br /&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;"&gt;Also note that &lt;span style="color: purple; font-weight: bold;"&gt;tests should never rely on default values that are specified by a helper method&lt;/span&gt; since that forces readers to read the helper method’s implementation details in order to understand the test.&lt;/span&gt;&lt;br /&gt;&lt;div style="overflow-x: auto;"&gt;&lt;table class="my-bordered-table" style="width: 613px;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="background-color: #cfe2f3; vertical-align: top; width: 607px;"&gt;&lt;pre style="background-color: #cfe2f3; border: 0px; margin: 0px; padding-bottom: 0px; padding-left: 0px; padding-top: 0px;"&gt;&lt;span style="color: black; font-family: &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;span style="color: #006600;"&gt;// This test needs a public company, so explicitly set it.&lt;br /&gt;// It also needs a company with no board members, so explicitly clear it.&lt;br /&gt;&lt;/span&gt;Company publicNoBoardMembers = newCompany().&lt;span style="font-weight: bold;"&gt;setType(PUBLIC).clearBoardMembers&lt;/span&gt;().build();&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;i&gt;&lt;span style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;"&gt;You can learn more about this topic at &lt;a href="http://www.natpryce.com/articles/000714.html"&gt;http://www.natpryce.com/articles/000714.html&lt;/a&gt;&lt;/span&gt;&lt;/i&gt;</content><link href="http://testing.googleblog.com/feeds/4368690219079281355/comments/default" rel="replies" title="Post Comments" type="application/atom+xml"/><link href="http://testing.googleblog.com/2018/02/testing-on-toilet-cleanly-create-test.html#comment-form" rel="replies" title="7 Comments" type="text/html"/><link href="http://www.blogger.com/feeds/15045980/posts/default/4368690219079281355" rel="edit" type="application/atom+xml"/><link href="http://www.blogger.com/feeds/15045980/posts/default/4368690219079281355" rel="self" type="application/atom+xml"/><link href="http://testing.googleblog.com/2018/02/testing-on-toilet-cleanly-create-test.html" rel="alternate" title="Testing on the Toilet: Cleanly Create Test Data" type="text/html"/><author><name>Google Testing Bloggers</name><uri>http://www.blogger.com/profile/03153388556673050910</uri><email>noreply@blogger.com</email><gd:image height="7" rel="http://schemas.google.com/g/2005#thumbnail" src="http://3.bp.blogspot.com/-H1YTvw0kdFA/UTf_IXv4N2I/AAAAAAAAABY/ghqaO2KBOSA/s1600/gtb3.png" width="32"/></author><thr:total>7</thr:total></entry><entry><id>tag:blogger.com,1999:blog-15045980.post-3797894023961037485</id><published>2017-12-11T13:55:00.006-08:00</published><updated>2017-12-11T14:43:33.902-08:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="Andrew Trenk"/><category scheme="http://www.blogger.com/atom/ns#" term="Dillon Bly"/><category scheme="http://www.blogger.com/atom/ns#" term="TotT"/><title type="text">Testing on the Toilet: Only Verify State-Changing Method Calls</title><content type="html">&lt;i&gt;&lt;span style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;"&gt;This article was adapted from a&amp;nbsp;&lt;a href="http://googletesting.blogspot.com/2007/01/introducing-testing-on-toilet.html"&gt;Google Testing on the Toilet&lt;/a&gt;&amp;nbsp;(TotT) episode. You can download a&amp;nbsp;&lt;a href="https://docs.google.com/document/d/1A0USfjPsmS4fSpgCfunBab8azRIPDTIKi-wRZD1K58k/edit?usp=sharing" rel="nofollow"&gt;printer-friendly version&lt;/a&gt;&amp;nbsp;of this TotT episode and post it in your office.&lt;/span&gt;&lt;/i&gt;&lt;br /&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;span style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;"&gt;By&amp;nbsp;Dillon Bly and Andrew Trenk&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;"&gt;Which lines can be safely removed from this test?&lt;/span&gt;&lt;br /&gt;&lt;div style="overflow-x: auto;"&gt;&lt;table class="my-bordered-table" style="width: 613px;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="background-color: #f4cccc; vertical-align: top; width: 607px;"&gt;&lt;pre style="background-color: #f4cccc; border: 0px; color: black; margin: 0px; padding-bottom: 0px; padding-left: 0px; padding-top: 0px;"&gt;&lt;span style="font-family: &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;@Test public void addPermissionToDatabase() {&lt;br /&gt;  new UserAuthorizer(&lt;span style="font-weight: bold;"&gt;mockUserService&lt;/span&gt;, &lt;span style="font-weight: bold;"&gt;mockPermissionDb&lt;/span&gt;).grantPermission(USER, READ_ACCESS);&lt;br /&gt;&lt;/span&gt;&lt;/pre&gt;&lt;pre style="background-color: #f4cccc; border: 0px; margin: 0px; padding-bottom: 0px; padding-left: 0px; padding-top: 0px;"&gt;&lt;span style="font-family: &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/pre&gt;&lt;pre style="background-color: #f4cccc; border: 0px; margin: 0px; padding-bottom: 0px; padding-left: 0px; padding-top: 0px;"&gt;&lt;span style="color: black; font-family: &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;  &lt;span style="color: blue;"&gt;// The test will fail if any of these methods is not called.&lt;/span&gt;&lt;br /&gt;  verify(&lt;span style="font-weight: bold;"&gt;mockUserService&lt;/span&gt;).isUserActive(USER);&lt;br /&gt;  verify(&lt;span style="font-weight: bold;"&gt;mockPermissionDb&lt;/span&gt;).getPermissions(USER);&lt;br /&gt;  verify(&lt;span style="font-weight: bold;"&gt;mockPermissionDb&lt;/span&gt;).isValidPermission(READ_ACCESS);&lt;br /&gt;  verify(&lt;span style="font-weight: bold;"&gt;mockPermissionDb&lt;/span&gt;).addPermission(USER, READ_ACCESS);&lt;br /&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;span style="font-size: 12pt; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;span id="docs-internal-guid-b50ac775-4768-13da-eaac-0ee595ad284f" style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;"&gt;&lt;span style="vertical-align: baseline; white-space: pre-wrap;"&gt;The answer is that &lt;/span&gt;&lt;span style="color: purple; font-weight: 700; vertical-align: baseline; white-space: pre-wrap;"&gt;the calls to verify the non-state-changing methods can be removed&lt;/span&gt;&lt;span style="vertical-align: baseline; white-space: pre-wrap;"&gt;.&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style="font-size: 12pt; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;span id="docs-internal-guid-b50ac775-4768-4d70-7394-a597c452b64e" style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;"&gt;&lt;span style="color: purple; font-weight: 700; vertical-align: baseline; white-space: pre-wrap;"&gt;Method calls on another object fall into one of two categories&lt;/span&gt;&lt;span style="vertical-align: baseline; white-space: pre-wrap;"&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;span style="white-space: pre-wrap;"&gt;&lt;span id="docs-internal-guid-b50ac775-4768-8635-e00b-dd78588a4f61"&gt;&lt;span style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;"&gt;&lt;span style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;"&gt;&lt;span style="font-style: italic; font-weight: 700; vertical-align: baseline;"&gt;State-changing&lt;/span&gt;&lt;span style="vertical-align: baseline;"&gt;: methods that have side effects and change the world outside the code under test, &lt;/span&gt;&lt;/span&gt;&lt;span style="vertical-align: baseline;"&gt;&lt;span style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;"&gt;e.g.,&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span style="color: #00931e; vertical-align: baseline;"&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;sendEmail()&lt;/span&gt;&lt;/span&gt;&lt;span style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;"&gt;&lt;span style="vertical-align: baseline;"&gt;,&lt;/span&gt;&lt;span style="vertical-align: baseline;"&gt; &lt;/span&gt;&lt;/span&gt;&lt;span style="color: #00931e; vertical-align: baseline;"&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;saveRecord()&lt;/span&gt;&lt;/span&gt;&lt;span style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif; vertical-align: baseline;"&gt;, &lt;/span&gt;&lt;span style="color: #00931e; vertical-align: baseline;"&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;logAccess()&lt;/span&gt;&lt;/span&gt;&lt;span style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif; vertical-align: baseline;"&gt;.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style="white-space: pre-wrap;"&gt;&lt;span style="vertical-align: baseline;"&gt;&lt;span id="docs-internal-guid-b50ac775-4768-c934-c2fa-bd06b2961ff3"&gt;&lt;span style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;"&gt;&lt;span style="font-style: italic; font-weight: 700; vertical-align: baseline;"&gt;Non-state-changing&lt;/span&gt;&lt;span style="font-style: italic; vertical-align: baseline;"&gt;:&lt;/span&gt;&lt;span style="vertical-align: baseline;"&gt; methods that return information about the world outside the code under test and don't modify anything, e.g., &lt;/span&gt;&lt;/span&gt;&lt;span style="color: #00931e; vertical-align: baseline;"&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;getUser()&lt;/span&gt;&lt;/span&gt;&lt;span style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif; vertical-align: baseline;"&gt;, &lt;/span&gt;&lt;span style="color: #00931e; vertical-align: baseline;"&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;findResults()&lt;/span&gt;&lt;/span&gt;&lt;span style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif; vertical-align: baseline;"&gt;, &lt;/span&gt;&lt;span style="color: #00931e; vertical-align: baseline;"&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;readFile()&lt;/span&gt;&lt;/span&gt;&lt;span style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif; vertical-align: baseline;"&gt;.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;span id="docs-internal-guid-b50ac775-4769-cfca-bf47-888737e7a7a6" style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;"&gt;&lt;span style="vertical-align: baseline; white-space: pre-wrap;"&gt;You should usually&lt;/span&gt;&lt;span style="color: #980000; font-weight: 700; vertical-align: baseline; white-space: pre-wrap;"&gt; &lt;/span&gt;&lt;span style="color: purple; font-weight: 700; vertical-align: baseline; white-space: pre-wrap;"&gt;avoid verifying that non-state-changing methods are called&lt;/span&gt;&lt;span style="vertical-align: baseline; white-space: pre-wrap;"&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;span style="white-space: pre-wrap;"&gt;&lt;span id="docs-internal-guid-b50ac775-476a-0b38-ad94-1b29a85f5efa" style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;"&gt;&lt;span style="font-style: italic; vertical-align: baseline;"&gt;It is often redundant&lt;/span&gt;&lt;span style="vertical-align: baseline;"&gt;: &lt;/span&gt;&lt;span style="color: purple; font-weight: 700; vertical-align: baseline;"&gt;a method call that doesn't change the state of the world is meaningless on its own&lt;/span&gt;&lt;span style="vertical-align: baseline;"&gt;. The code under test will use the return value of the method call to do other work that you can assert.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style="white-space: pre-wrap;"&gt;&lt;span style="vertical-align: baseline;"&gt;&lt;span id="docs-internal-guid-b50ac775-476a-3f9e-a716-d10db0b69539"&gt;&lt;span style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;"&gt;&lt;span style="font-style: italic; vertical-align: baseline;"&gt;It makes tests brittle&lt;/span&gt;&lt;span style="vertical-align: baseline;"&gt;: tests need to be updated whenever method calls change. For example, if a test is expecting &lt;/span&gt;&lt;/span&gt;&lt;span style="color: #00931e; vertical-align: baseline;"&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;mockUserService.isUserActive(USER)&lt;/span&gt;&lt;/span&gt;&lt;span style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif; vertical-align: baseline;"&gt;&lt;span style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;"&gt; to be called, it would fail if the code under test is modified to call&lt;/span&gt; &lt;/span&gt;&lt;span style="color: #00931e; vertical-align: baseline;"&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;user.isActive()&lt;/span&gt;&lt;/span&gt;&lt;span style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif; vertical-align: baseline;"&gt; instead.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style="white-space: pre-wrap;"&gt;&lt;span style="vertical-align: baseline;"&gt;&lt;span style="vertical-align: baseline;"&gt;&lt;span id="docs-internal-guid-b50ac775-476a-600b-2bc2-7097a5926df1" style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;"&gt;&lt;span style="font-style: italic; vertical-align: baseline;"&gt;It makes tests less readable&lt;/span&gt;&lt;span style="vertical-align: baseline;"&gt;: the additional assertions in the test make it more difficult to determine which method calls actually affect the state of the world.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style="white-space: pre-wrap;"&gt;&lt;span style="vertical-align: baseline;"&gt;&lt;span style="vertical-align: baseline;"&gt;&lt;span style="vertical-align: baseline;"&gt;&lt;span id="docs-internal-guid-b50ac775-476a-88c9-7600-1e4248cd477e" style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;"&gt;&lt;span style="font-style: italic; vertical-align: baseline;"&gt;It gives a false sense of security&lt;/span&gt;&lt;span style="vertical-align: baseline;"&gt;: just because the code under test called a method does not mean the code under test did the right thing with the method’s return value.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.2; margin-bottom: 0pt; margin-top: 10pt;"&gt;&lt;span style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;"&gt;&lt;span style="background-color: transparent; color: black; font-style: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"&gt;Instead of verifying that they are called,&lt;/span&gt;&lt;span style="background-color: transparent; color: #980000; font-style: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"&gt; &lt;/span&gt;&lt;span style="background-color: transparent; color: purple; font-style: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"&gt;use non-state-changing methods to simulate different conditions in tests&lt;/span&gt;&lt;span style="background-color: transparent; color: black; font-style: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"&gt;, e.g., &lt;/span&gt;&lt;/span&gt;&lt;span style="background-color: transparent; color: #00931e; font-style: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;when(mockUserService.isUserActive(USER)).thenReturn(false)&lt;/span&gt;&lt;/span&gt;&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif; font-style: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"&gt;. Then write assertions for the return value of the code under test, or verify state-changing method calls.&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.2; margin-bottom: 0pt; margin-top: 10pt;"&gt;&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif; font-style: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"&gt;Verifying non-state-changing method calls may be useful if there is no other output you can assert. For example, if your code should be caching an RPC result, you can verify that the method that makes the RPC is called only once.&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.2; margin-bottom: 0pt; margin-top: 10pt;"&gt;&lt;span id="docs-internal-guid-b50ac775-476b-bcdb-84c9-11891429fe3d" style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;"&gt;&lt;span style="color: purple; font-weight: 700; vertical-align: baseline; white-space: pre-wrap;"&gt;With the unnecessary verifications removed, the test looks like this&lt;/span&gt;&lt;span style="vertical-align: baseline; white-space: pre-wrap;"&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="overflow-x: auto;"&gt;&lt;table class="my-bordered-table" style="width: 613px;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="background-color: #fff2cc; vertical-align: top; width: 607px;"&gt;&lt;pre style="background-color: #fff2cc; border: 0px; color: black; margin: 0px; padding-bottom: 0px; padding-left: 0px; padding-top: 0px;"&gt;&lt;span style="font-family: &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;@Test public void addPermissionToDatabase() {&lt;br /&gt;  new UserAuthorizer(&lt;span style="font-weight: bold;"&gt;mockUserService&lt;/span&gt;, &lt;span style="font-weight: bold;"&gt;mockPermissionDb&lt;/span&gt;).grantPermission(USER, READ_ACCESS);&lt;br /&gt;&lt;/span&gt;&lt;/pre&gt;&lt;pre style="background-color: #fff2cc; border: 0px; margin: 0px; padding-bottom: 0px; padding-left: 0px; padding-top: 0px;"&gt;&lt;span style="font-family: &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/pre&gt;&lt;pre style="background-color: #fff2cc; border: 0px; margin: 0px; padding-bottom: 0px; padding-left: 0px; padding-top: 0px;"&gt;&lt;span style="color: black; font-family: &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;  &lt;span style="color: blue;"&gt;// Verify only the state-changing method.&lt;/span&gt;&lt;br /&gt;  verify(&lt;span style="font-weight: bold;"&gt;mockPermissionDb&lt;/span&gt;).addPermission(USER, READ_ACCESS);&lt;br /&gt;}&lt;br /&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;br /&gt;&lt;span id="docs-internal-guid-b50ac775-476f-418d-5b05-5a504162abb7"&gt;&lt;/span&gt;&lt;br /&gt;&lt;div dir="ltr" style="line-height: 1.2; margin-bottom: 0pt; margin-top: 10pt;"&gt;&lt;span id="docs-internal-guid-b50ac775-476f-418d-5b05-5a504162abb7"&gt;&lt;span style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;"&gt;&lt;span style="vertical-align: baseline; white-space: pre-wrap;"&gt;That’s much simpler! But remember that instead of using a mock to verify that a method was called, &lt;/span&gt;&lt;span style="font-weight: 700; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;span style="color: purple;"&gt;it would be even better to use a real or&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #980000; font-weight: 700; vertical-align: baseline; white-space: pre-wrap;"&gt; &lt;/span&gt;&lt;a href="https://testing.googleblog.com/2013/06/testing-on-toilet-fake-your-way-to.html" style="text-decoration-line: none;"&gt;&lt;span style="color: #1155cc; font-weight: 700; vertical-align: baseline; white-space: pre-wrap;"&gt;fake object&lt;/span&gt;&lt;/a&gt;&lt;span style="color: #980000; font-weight: 700; vertical-align: baseline; white-space: pre-wrap;"&gt; &lt;/span&gt;&lt;span style="vertical-align: baseline; white-space: pre-wrap;"&gt;to actually execute the method and check that it works properly. For example, the above test could use a fake database to check that the permission exists in the database rather than just verifying that &lt;/span&gt;&lt;/span&gt;&lt;span style="color: #00931e; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;addPermission()&lt;/span&gt;&lt;/span&gt;&lt;span style="vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;span style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;"&gt; was called.&lt;/span&gt;&lt;span style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;"&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style="vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;span style="font-family: &amp;quot;times&amp;quot; , &amp;quot;times new roman&amp;quot; , serif;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;span style="font-family: Times, Times New Roman, serif;"&gt;&lt;span style="font-style: italic; vertical-align: baseline;"&gt;You can learn more about this topic in the book &lt;/span&gt;&lt;a class="m_5763211666182523148m_-1367602418583969106cremed m_5763211666182523148cremed" data-saferedirecturl="https://www.google.com/url?hl=en&amp;amp;q=http://www.growing-object-oriented-software.com/&amp;amp;source=gmail&amp;amp;ust=1513118358215000&amp;amp;usg=AFQjCNGL6EuV0T86ZLsLyUi4VcPIa8fIVQ" href="http://www.growing-object-oriented-software.com/" style="background-color: white; color: #1155cc; text-decoration-line: none; white-space: normal;" target="_blank"&gt;&lt;span style="background-color: transparent; font-style: italic; text-decoration-line: underline; vertical-align: baseline; white-space: pre-wrap;"&gt;Growing Object-Oriented Software, Guided by Tests&lt;/span&gt;&lt;/a&gt;&lt;span style="font-style: italic; vertical-align: baseline;"&gt;. Note that the book uses the terms “command” and “query” instead of “state-changing” and “non-state-changing”.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;span id="docs-internal-guid-b50ac775-476f-418d-5b05-5a504162abb7"&gt;&lt;/span&gt;</content><link href="http://testing.googleblog.com/feeds/3797894023961037485/comments/default" rel="replies" title="Post Comments" type="application/atom+xml"/><link href="http://testing.googleblog.com/2017/12/testing-on-toilet-only-verify-state.html#comment-form" rel="replies" title="3 Comments" type="text/html"/><link href="http://www.blogger.com/feeds/15045980/posts/default/3797894023961037485" rel="edit" type="application/atom+xml"/><link href="http://www.blogger.com/feeds/15045980/posts/default/3797894023961037485" rel="self" type="application/atom+xml"/><link href="http://testing.googleblog.com/2017/12/testing-on-toilet-only-verify-state.html" rel="alternate" title="Testing on the Toilet: Only Verify State-Changing Method Calls" type="text/html"/><author><name>Google Testing Bloggers</name><uri>http://www.blogger.com/profile/03153388556673050910</uri><email>noreply@blogger.com</email><gd:image height="7" rel="http://schemas.google.com/g/2005#thumbnail" src="http://3.bp.blogspot.com/-H1YTvw0kdFA/UTf_IXv4N2I/AAAAAAAAABY/ghqaO2KBOSA/s1600/gtb3.png" width="32"/></author><thr:total>3</thr:total></entry></feed>