<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Julia Evans]]></title>
  <link href="http://jvns.ca/atom.xml" rel="self"/>
  <link href="http://jvns.ca"/>
  <updated>2022-09-12T08:01:20+00:00</updated>
  <id>http://jvns.ca</id>
  <author>
    <name><![CDATA[Julia Evans]]></name>
  </author>
  <generator uri="http://gohugo.io/">Hugo</generator>

  
  <entry>
    <title type="html"><![CDATA[Why do domain names sometimes end with a dot?]]></title>
    <link href="https://jvns.ca/blog/2022/09/12/why-do-domain-names-end-with-a-dot-/"/>
    <updated>2022-09-12T08:01:20+00:00</updated>
    <id>https://jvns.ca/blog/2022/09/12/why-do-domain-names-end-with-a-dot-/</id>
    <content type="html"><![CDATA[

<p>Hello! When I was writing the zine <a href="https://wizardzines.com/zines/dns/">How DNS Works</a>
earlier this year, someone asked me &ndash; why do people sometimes put a dot at the
end of a domain name? For example, if you look up the IP for <code>example.com</code> by
running <code>dig example.com</code>, you&rsquo;ll see this:</p>

<pre><code>$ dig example.com
example.com.		5678	IN	A	93.184.216.34
</code></pre>

<p><code>dig</code> has put a <code>.</code> to the end of <code>example.com</code> &ndash; now it&rsquo;s <code>example.com.</code>! What&rsquo;s up with that?</p>

<p>Also, some DNS tools require domains to have a <code>&quot;.&quot;</code> at the end: if you try to pass <code>example.com</code> to <a href="https://github.com/miekg/dns">miekg/dns</a>, like this, it&rsquo;ll fail:</p>

<pre><code>// trying to send this message will return an error
m := new(dns.Msg)
m.SetQuestion(&quot;example.com&quot;, dns.TypeA)
</code></pre>

<p>Originally I thought I knew the answer to this (&ldquo;uh, the dot at the end means
the domain is fully qualified?&ldquo;). And that&rsquo;s true &ndash; a fully qualified domain
name is a domain with a &ldquo;.&rdquo; at the end!</p>

<p>But that doesn&rsquo;t explain <em>why</em> dots at the end are useful or important.</p>

<h3 id="in-a-dns-request-response-domain-names-don-t-have-a-trailing">in a DNS request/response, domain names don&rsquo;t have a trailing &ldquo;.&rdquo;</h3>

<p>I once (incorrectly) thought the answer to &ldquo;why is there a dot at the end?&rdquo;
might be &ldquo;In a DNS request/response, domain names have a &ldquo;.&rdquo; at the end, so we
put it in to match what actually gets sent/received by your computer&rdquo;. But
that&rsquo;s not true at all!</p>

<p>When a computer sends a DNS request or response, the domain names in it don&rsquo;t
have a trailing dot. Actually, the domain names don&rsquo;t have <em>any</em> dots.</p>

<p>Instead, they&rsquo;re encoded as a series of length/string pairs. For example,
the domain <code>example.com</code> is encoded as these 13 bytes:</p>

<pre><code>7example3com0
</code></pre>

<p>So there are no dots at all. Instead, an ASCII domain name (like &ldquo;example.com&rdquo;)
gets translated into the format used in a DNS request / response by various DNS
software.</p>

<p>So let&rsquo;s talk about one place where domain names are translated into DNS responses: zone files.</p>

<h3 id="the-trailing-in-zone-files">the trailing &ldquo;.&rdquo; in zone files</h3>

<p>One way that some people manage DNS records for a domain is to create a text
file called a &ldquo;zone file&rdquo; and then configure some DNS server software (like <code>nsd</code>
or <code>bind</code>) to serve the DNS records specified in that zone file.</p>

<p>Here&rsquo;s an imaginary zone file for <code>example.com</code>:</p>

<pre><code>orange  300   IN    A     1.2.3.4
fruit   300   IN    CNAME orange
grape   3000  IN    CNAME example.com.
</code></pre>

<p>In this zone file, anything that doesn&rsquo;t end in a <code>&quot;.&quot;</code> (like <code>&quot;orange&quot;</code>) gets
<code>.example.com</code> added to it. So <code>&quot;orange&quot;</code> is shorthand for
<code>&quot;orange.example.com&quot;</code>. The DNS server knows from its configuration that this
is a zone file for <code>example.com</code>, so it knows to automatically append
<code>example.com</code> at the end of any name that doesn&rsquo;t end with a dot.</p>

<p>I assume the idea here is just to save typing &ndash; you could imagine writing
this zone file by fully typing out all of the domain names:</p>

<pre><code>orange.example.com.  300   IN    A     1.2.3.4
fruit.example.com.   300   IN    CNAME orange.example.com.
grape.example.com.   3000  IN    CNAME example.com.
</code></pre>

<p>But that&rsquo;s a lot of typing.</p>

<h3 id="you-don-t-need-zone-files-to-use-dns">you don&rsquo;t need zone files to use DNS</h3>

<p>Even though the zone file format is defined in the official DNS RFC (<a href="https://www.rfc-editor.org/rfc/rfc1035#section-4.1.1">RFC 1035</a>), you don&rsquo;t have to
use zone files at all to use DNS. For example, AWS Route 53 doesn&rsquo;t use zone
files to store DNS records! Instead you create records through the web
interface or API, and I assume they store records in some kind of database and
not a bunch of text files.</p>

<p>Route 53 (like many other DNS tools) does support importing and exporting zone
files though and it can be a good way to migrate records from one DNS provider
to another.</p>

<h3 id="the-trailing-in-dig">the trailing &ldquo;.&rdquo; in dig</h3>

<p>Now, let&rsquo;s talk about <code>dig</code>&rsquo;s output:</p>

<pre><code>$ dig example.com
; &lt;&lt;&gt;&gt; DiG 9.18.1-1ubuntu1.1-Ubuntu &lt;&lt;&gt;&gt; +all example.com
;; global options: +cmd
;; Got answer:
;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 10712
;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1

;; OPT PSEUDOSECTION:
; EDNS: version: 0, flags:; udp: 65494
;; QUESTION SECTION:
;example.com.			IN	A

;; ANSWER SECTION:
example.com.		81239	IN	A	93.184.216.34

</code></pre>

<p>One weird thing about this is that almost every line starts with a <code>;;</code>. What&rsquo;s
up with that? Well <code>;</code> is the comment character in zone files!</p>

<p>So I think the reason that dig prints out its output in this weird way is so that
if you wanted, you could just paste this into a zone file and have it work
without any changes.</p>

<p>This also explains why there&rsquo;s a <code>.</code> at the end of <code>example.com.</code> &ndash; zone files
require a trailing dot at the end of a domain name (because otherwise they&rsquo;re
interpreted as being relative to the zone). So <code>dig</code> does too.</p>

<p>I really wish dig had a <code>+human</code> flag that printed out all of this information
in a more human readable way, but for now I&rsquo;m too lazy to put in the work to
actually contribute code to do that (and I&rsquo;m a pretty bad C programmer) so I&rsquo;ll
just complain about it on my blog instead :)</p>

<h3 id="the-trailing-in-curl">the trailing <code>&quot;.&quot;</code> in curl</h3>

<p>Let&rsquo;s talk about another case where the trailing <code>&quot;.&quot;</code> shows up: curl!</p>

<p>One of the computers in my house is called &ldquo;grapefruit&rdquo;, and it&rsquo;s running a
webserver. Here&rsquo;s what happens if I run <code>curl grapefruit</code>:</p>

<pre><code>$ curl grapefruit
&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;

&lt;html&gt;
&lt;head&gt;
</code></pre>

<p>It works! Cool. But what happens if I add a <code>.</code> at the end? Suddenly it doesn&rsquo;t work:</p>

<pre><code>$ curl grapefruit.
curl: (6) Could not resolve host: grapefruit.
</code></pre>

<p>What&rsquo;s going on? To understand, we need to learn about search domains:</p>

<h3 id="meet-search-domains">meet search domains</h3>

<p>When I run <code>curl grapefrult</code>, how does that get translated into a DNS request?
You might think that my computer would send a request for the domain
<code>grapefruit</code>, right? But that&rsquo;s not true.</p>

<p>Let&rsquo;s use <code>tcpdump</code> to see what domain is actually being looked up:</p>

<pre><code>$ sudo tcpdump -i any port 53
[...] A? grapefruit.lan. (32)
</code></pre>

<p>It&rsquo;s actually sending a request for <code>grapefruit.lan</code>. What&rsquo;s up with that?</p>

<p>Well, what&rsquo;s going on is that:</p>

<ol>
<li>To look up <code>grapefruit</code>, <code>curl</code> calls a function called <code>getaddrinfo</code></li>
<li><code>getaddrinfo</code> looks in a file on my computer called <code>/etc/resolv.conf</code></li>
<li><code>/etc/resolv.conf</code> contains these 2 lines:
<pre>
nameserver 127.0.0.53
search lan
</pre></li>
<li>Because it sees <code>search lan</code>, <code>getaddrinfo</code> adds a <code>lan</code> at the end of <code>grapefruit</code> and looks up <code>grapefruit.lan</code> instead</li>
</ol>

<h3 id="when-are-search-domains-used">when are search domains used?</h3>

<p>Now we know something weird: that when we look up a domain, sometimes an extra
thing (like <code>lan</code>) will be added to the end. But when does that happen?</p>

<ol>
<li>If we put a <code>&quot;.&quot;</code> at the <strong>end</strong> of the domain (like <code>curl grapefruit.</code>, then search domains aren&rsquo;t used</li>
<li>If the domain has an <code>&quot;.&quot;</code> <strong>inside</strong> it (like <code>example.com</code> has a dot in it), then by default search domains aren&rsquo;t used either. But this can be changed with configuration (see this blog post about <a href="https://pracucci.com/kubernetes-dns-resolution-ndots-options-and-why-it-may-affect-application-performances.html">ndots</a> that talks about this more)</li>
</ol>

<p>So now we know why <code>curl grapefruit.</code> has different results than <code>curl grapefruit</code> &ndash; it&rsquo;s because one looks up the domain <code>grapefruit.</code> and the other one looks up <code>grapefruit.lan.</code></p>

<h3 id="how-does-my-computer-know-what-search-domain-to-use">how does my computer know what search domain to use?</h3>

<p>When I connect to my router, it tells me that its search domain is <code>lan</code> with
DHCP &ndash; it&rsquo;s the same way that my computer gets assigned an IP address.</p>

<h3 id="so-why-do-people-put-a-dot-at-the-end-of-domain-names">so why do people put a dot at the end of domain names?</h3>

<p>Now that we know about zone files and search domains, here&rsquo;s why I think people
like to put dots at the end of a domain name.</p>

<p>There are two contexts where domain names are modified and get something else added to the end:</p>

<ul>
<li>in a zone file for <code>example.com</code>, <code>grapefruit</code> get translated to <code>grapefruit.example.com</code></li>
<li>on my local network (with my computer configured to use the search domain <code>lan</code>), <code>grapefruit</code> gets translated to <code>grapefruit.lan</code></li>
</ul>

<p>So because domain names can actually be translated to something else in some
cases, people like to put a <code>&quot;.&quot;</code> at the end to communicate &ldquo;THIS IS THE
DOMAIN NAME, NOTHING GETS ADDED AT THE END, THIS IS THE WHOLE THING&rdquo;. Because
otherwise it can get confusing.</p>

<p>The technical term for &ldquo;THIS IS THE WHOLE THING&rdquo; is <strong>&ldquo;fully qualified domain
name&rdquo;</strong> or <strong>&ldquo;FQDN&rdquo;</strong>. So <code>google.com.</code> is a fully qualified domain name, and
<code>google.com</code> isn&rsquo;t.</p>

<p>I always have to remind myself for the reasons for this because I rarely use
zone files or search domains, so I often feel like &ndash; &ldquo;of course I mean
<code>google.com</code> and not <code>google.com.something.else</code>! Why would I mean anything
else?? That&rsquo;s silly!&rdquo;</p>

<p>But some people do use zone files and search domains (search domains are used
in Kubernetes, for example!), so the &ldquo;.&rdquo; at the end is useful to make it 100%
clear that nothing else should be added.</p>

<h3 id="when-to-put-a-at-the-end">when to put a &ldquo;.&rdquo; at the end?</h3>

<p>Here are a couple of quick notes about when to put a &ldquo;.&rdquo; at the end of your domain names:</p>

<p><strong>Yes: when configuring DNS</strong></p>

<p>It&rsquo;s never bad to use fully qualified domain names when configuring DNS. You
don&rsquo;t always have to: a non-fully-qualified domain name will often work just
fine as well, but I&rsquo;ve never met a piece of DNS software that wouldn&rsquo;t accept a
fully qualified domain name.</p>

<p>And some DNS software requires it: right now the DNS server I use for <code>jvns.ca</code>
makes me put a <code>&quot;.&quot;</code> at the end of domains names (for example in CNAME records)
and warns me otherwise it&rsquo;ll append <code>.jvns.ca</code> to whatever I typed in. I don&rsquo;t
agree with this design decision but it&rsquo;s not a big deal, I just put a &ldquo;.&rdquo; at
the end.</p>

<p><strong>No: in a browser</strong></p>

<p>Confusingly, it often <em>doesn&rsquo;t</em> work to put a <code>&quot;.&quot;</code> at the end of a domain name in a
browser! For example, if I type <code>https://twitter.com.</code> into my browser, it
doesn&rsquo;t work! It gives me a 404.</p>

<p>I think what&rsquo;s going on here is that it&rsquo;s setting the HTTP Host header to
<code>Host: twitter.com.</code> and the web server on the other end is expecting <code>Host: twitter.com</code>.</p>

<p>Similarly, <code>https://jvns.ca.</code> gives me an SSL error for some reason.</p>

<h3 id="i-think-relative-domain-names-used-to-be-more-common">I think relative domain names used to be more common</h3>

<p>One last thing: I think that &ldquo;relative&rdquo; domain names (like me using
<code>grapefruit</code> to refer to the other computer in my house, <code>grapefruit.lan</code>) used
to be more commonly used, because DNS was developed in the context of
universities or other big institutions which have big internal networks.</p>

<p>On the internet today, it seems like it&rsquo;s more common to use &ldquo;absolute&rdquo; domain
names (like <code>example.com</code>).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to send raw network packets in Python with tun/tap]]></title>
    <link href="https://jvns.ca/blog/2022/09/06/send-network-packets-python-tun-tap/"/>
    <updated>2022-09-06T11:43:14+00:00</updated>
    <id>https://jvns.ca/blog/2022/09/06/send-network-packets-python-tun-tap/</id>
    <content type="html"><![CDATA[

<p>Hello!</p>

<p>Recently I&rsquo;ve been working on a project where I implement a bunch of tiny toy
working versions of computer networking protocols in Python without using any
libraries, as a way to explain how computer networking works.</p>

<p>I&rsquo;m still working on writing up that project, but today I wanted to talk about
how to do the very first step: sending network packets in Python.</p>

<p>In this post we&rsquo;re going to send a SYN packet (the first packet in a TCP
connection) from a tiny Python program, and get a reply from <code>example.com</code>. All the code from this post is in <a href="https://gist.github.com/jvns/552e6d5e6fec6c3ddf2fcd4ccdab45d5">this gist</a>.</p>

<h3 id="what-s-a-network-packet">what&rsquo;s a network packet?</h3>

<p>A network packet is a byte string. For example, here&rsquo;s the first packet in a TCP connection:</p>

<pre><code>b'E\x00\x00,\x00\x01\x00\x00@\x06\x00\xc4\xc0\x00\x02\x02&quot;\xc2\x95Cx\x0c\x00P\xf4p\x98\x8b\x00\x00\x00\x00`\x02\xff\xff\x18\xc6\x00\x00\x02\x04\x05\xb4'
</code></pre>

<p>I&rsquo;m not going to talk about the structure of this byte string in this post
(though I&rsquo;ll say that this particular byte string has two parts: the first 20
bytes are the IP address part and the rest is the TCP part)</p>

<p>The point is that to send network packets, we need to be able to send and
receive strings of bytes.</p>

<h3 id="why-tun-tap">why tun/tap?</h3>

<p>The problem with writing your own TCP implementation on Linux (or any operating
system) is &ndash; the Linux kernel already has a TCP implementation!</p>

<p>So if you send out a SYN packet on your normal network interface to a host like
example.com, here&rsquo;s what will happen:</p>

<ol>
<li>you send a SYN packet to example.com</li>
<li>example.com replies with a SYN ACK (so far so good!)</li>
<li>the Linux kernel on your machine gets the SYN ACK, thinks &ldquo;wtf?? I didn&rsquo;t make this connection??&rdquo;, and closes the connection</li>
<li>you&rsquo;re sad. no TCP connection for you.</li>
</ol>

<p>I was talking to a friend about this problem a few years ago and he said &ldquo;you
should use tun/tap!&ldquo;. It took quite a few hours to figure out how to do that
though, which is why I&rsquo;m writing this blog post :)</p>

<h3 id="tun-tap-gives-you-a-virtual-network-device">tun/tap gives you a &ldquo;virtual network device&rdquo;</h3>

<p>The way I like to think of <code>tun/tap</code> is &ndash; imagine I have a tiny computer in my
network which is sending and receiving network packets. But instead of it being
a real computer, it&rsquo;s just a Python program I wrote.</p>

<p>That explanation is honestly worse than I would like. I wish I understood
exactly how tun/tap devices interfaced with the real Linux network stack but
unfortunately I do not, so &ldquo;virtual network device&rdquo; is what you&rsquo;re getting.
Hopefully the code examples below will make all it a bit more clear.</p>

<h3 id="tun-vs-tap">tun vs tap</h3>

<p>The system called &ldquo;tun/tap&rdquo; lets you create two kinds of network interfaces:</p>

<ul>
<li>&ldquo;tun&rdquo;, which lets you set IP-layer packets</li>
<li>&ldquo;tap&rdquo;, which lets you set Ethernet-layer packets</li>
</ul>

<p>We&rsquo;re going to be using <strong>tun</strong>, because that&rsquo;s what I could figure out how to
get to work. It&rsquo;s possible that tap would work too.</p>

<h3 id="how-to-create-a-tun-interface">how to create a tun interface</h3>

<p>Here&rsquo;s how I created a tun interface with IP address 192.0.2.2.</p>

<pre><code>sudo ip tuntap add name tun0 mode tun user $USER
sudo ip link set tun0 up
sudo ip addr add 192.0.2.1 peer 192.0.2.2 dev tun0

sudo iptables -t nat -A POSTROUTING -s 192.0.2.2 -j MASQUERADE
sudo iptables -A FORWARD -i tun0 -s 192.0.2.2 -j ACCEPT
sudo iptables -A FORWARD -o tun0 -d 192.0.2.2 -j ACCEPT
</code></pre>

<p>These commands do two things:</p>

<ol>
<li>Create the <code>tun</code> device with the IP <code>192.0.2.2</code> (and give your user access to write to it)</li>
<li>set up <code>iptables</code> to proxy packets from that tun device to the internet using NAT</li>
</ol>

<p>The iptables part is very important because otherwise the packets would only
exist inside my computer and wouldn&rsquo;t be sent to the internet, and what fun
would that be?</p>

<p>I&rsquo;m not going to explain this <code>ip addr add</code> command because I don&rsquo;t understand
it, I find <code>ip</code> to be very inscrutable and for now I&rsquo;m resigned to just copying
and pasting <code>ip</code> commands without fully understanding them. It does work
though.</p>

<h3 id="how-to-connect-to-the-tun-interface-in-python">how to connect to the tun interface in Python</h3>

<p>Here&rsquo;s a function to open a tun interface, you call it like <code>openTun('tun0')</code>.
I figured out how to write it by searching through the
<a href="https://scapy.net/">scapy</a> source code for &ldquo;tun&rdquo;.</p>

<pre><code>import struct
from fcntl import ioctl

def openTun(tunName):
    tun = open(&quot;/dev/net/tun&quot;, &quot;r+b&quot;, buffering=0)
    LINUX_IFF_TUN = 0x0001
    LINUX_IFF_NO_PI = 0x1000
    LINUX_TUNSETIFF = 0x400454CA
    flags = LINUX_IFF_TUN | LINUX_IFF_NO_PI
    ifs = struct.pack(&quot;16sH22s&quot;, tunName, flags, b&quot;&quot;)
    ioctl(tun, LINUX_TUNSETIFF, ifs)
    return tun
</code></pre>

<p>All this is doing is</p>

<ol>
<li>opening <code>/dev/net/tun</code> in binary mode</li>
<li>calling an <code>ioctl</code> to tell Linux that we want a <code>tun</code> device, and that the one we want is called <code>tun0</code> (or whatever <code>tunName</code> we&rsquo;ve passed to the function).</li>
</ol>

<p>Once it&rsquo;s open, we can <code>read</code> from and <code>write</code> to it like any other file in Python.</p>

<h3 id="let-s-send-a-syn-packet">let&rsquo;s send a SYN packet!</h3>

<p>Now that we have the <code>openTun</code> function, we can send a SYN packet!</p>

<p>Here&rsquo;s what the Python code looks like, using the <code>openTun</code> function.</p>

<pre><code>syn = b'E\x00\x00,\x00\x01\x00\x00@\x06\x00\xc4\xc0\x00\x02\x02&quot;\xc2\x95Cx\x0c\x00P\xf4p\x98\x8b\x00\x00\x00\x00`\x02\xff\xff\x18\xc6\x00\x00\x02\x04\x05\xb4'
tun = openTun(b&quot;tun0&quot;)
tun.write(syn)
reply = tun.read(1024)
print(repr(reply))
</code></pre>

<p>If I run this as <code>sudo python3 syn.py</code>, it prints out the reply from <code>example.com</code>:</p>

<pre><code>b'E\x00\x00,\x00\x00@\x00&amp;\x06\xda\xc4&quot;\xc2\x95C\xc0\x00\x02\x02\x00Px\x0cyvL\x84\xf4p\x98\x8c`\x12\xfb\xe0W\xb5\x00\x00\x02\x04\x04\xd8'
</code></pre>

<p>Obviously this is a pretty silly way to send a SYN packet &ndash; a real
implementation would have actual code to generate that byte string instead of
hardcoding it, and we would parse the reply instead of just printing out the
raw byte string. But I didn&rsquo;t want to go into the structure of TCP in this post
so that&rsquo;s what we&rsquo;re doing.</p>

<h3 id="looking-at-these-packets-with-tcpdump">looking at these packets with tcpdump</h3>

<p>If we run tcpdump on the <code>tun0</code> interface, we can see the packet we sent and the answer from <code>example.com</code>:</p>

<pre><code>$ sudo tcpdump -ni tun0
12:51:01.905933 IP 192.0.2.2.30732 &gt; 34.194.149.67.80: Flags [S], seq 4101019787, win 65535, options [mss 1460], length 0
12:51:01.932178 IP 34.194.149.67.80 &gt; 192.0.2.2.30732: Flags [S.], seq 3300937416, ack 4101019788, win 64480, options [mss 1240], length 0
</code></pre>

<p><code>Flags [S]</code> is the SYN we sent, and <code>Flags [S.]</code> is the SYN ACK packet in
response! We successfully communicated! And the Linux network stack didn&rsquo;t
interfere at all!</p>

<h3 id="tcpdump-also-shows-us-how-nat-is-working">tcpdump also shows us how NAT is working</h3>

<p>We can also run <code>tcpdump</code> on my real network interface (<code>wlp3so</code>, my wireless card), to see the packets being sent and received. We&rsquo;ll pass <code>-i wlp3s0</code> instead of <code>-i tun0</code>.</p>

<pre><code>$ sudo tcpdump -ni wlp3s0 host 34.194.149.67
tcpdump: verbose output suppressed, use -v[v]... for full protocol decode
listening on wlp3s0, link-type EN10MB (Ethernet), snapshot length 262144 bytes
12:56:01.204382 IP 192.168.1.181.30732 &gt; 34.194.149.67.80: Flags [S], seq 4101019787, win 65535, options [mss 1460], length 0
12:56:01.228239 IP 34.194.149.67.80 &gt; 192.168.1.181.30732: Flags [S.], seq 144769955, ack 4101019788, win 64480, options [mss 1240], length 0
12:56:05.334427 IP 34.194.149.67.80 &gt; 192.168.1.181.30732: Flags [S.], seq 144769955, ack 4101019788, win 64480, options [mss 1240], length 0
12:56:13.524973 IP 34.194.149.67.80 &gt; 192.168.1.181.30732: Flags [S.], seq 144769955, ack 4101019788, win 64480, options [mss 1240], length 0
12:56:29.705007 IP 34.194.149.67.80 &gt; 192.168.1.181.30732: Flags [S.], seq 144769955, ack 4101019788, win 64480, options [mss 1240], length 0
</code></pre>

<p>A couple of things to notice here:</p>

<ul>
<li>The IP addresses are different &ndash; that IPtables rule from above has rewritten them from <code>192.0.2.2</code> to <code>192.168.1.181</code>. This rewriting is called &ldquo;network address translation&rdquo;, or &ldquo;NAT&rdquo;.</li>
<li>We&rsquo;re getting a bunch of replies from <code>example.com</code> &ndash; it&rsquo;s doing an
exponential backoff where it retries after 4 seconds, then 8 seconds, then 16
seconds. This is because we didn&rsquo;t finish the TCP handshake &ndash; we just sent a
SYN and left it hanging! There&rsquo;s actually a type of DDOS attack like this
called SYN flooding, but just sending one or two SYN packets isn&rsquo;t a big
deal.</li>
<li>I had to add <code>host 34.194.149.67</code> because there are a lot of TCP packets being sent on my real wifi connection so I needed to ignore those</li>
</ul>

<p>I&rsquo;m not totally sure why we see more SYN replies on <code>wlp3s0</code> than on <code>tun0</code>, my
guess is that it&rsquo;s because we only read 1 reply in our Python program.</p>

<h3 id="this-is-pretty-easy-and-really-reliable">this is pretty easy and really reliable</h3>

<p>The last time I tried to implement TCP in Python I did it with something called
&ldquo;ARP spoofing&rdquo;. I won&rsquo;t talk about that here (there are some posts about it on
this blog back in 2013), but this way is a lot more reliable.</p>

<p>And ARP spoofing is kind of a sketchy thing to do on a network you don&rsquo;t own.</p>

<h3 id="here-s-the-code">here&rsquo;s the code</h3>

<p>I put all the code from this blog post in <a href="https://gist.github.com/jvns/552e6d5e6fec6c3ddf2fcd4ccdab45d5">this gist</a>, if you want to try it yourself, you can run</p>

<pre><code>bash setup.sh # needs to run as root, has lots of `sudo` commands
python3 syn.py # runs as a regular user
</code></pre>

<p>It only works on Linux, but I think there&rsquo;s a way to set up tun/tap on Mac too.</p>

<h3 id="a-plug-for-scapy">a plug for scapy</h3>

<p>I&rsquo;ll close with a plug for <a href="https://scapy.net/">scapy</a> here: it&rsquo;s a really
great Python networking library for doing this kind of experimentation without
writing all the code yourself.</p>

<p>This post is about writing all the code yourself though so I won&rsquo;t say more
about it than that.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Some ways to get better at debugging]]></title>
    <link href="https://jvns.ca/blog/2022/08/30/a-way-to-categorize-debugging-skills/"/>
    <updated>2022-08-30T09:35:19+00:00</updated>
    <id>https://jvns.ca/blog/2022/08/30/a-way-to-categorize-debugging-skills/</id>
    <content type="html"><![CDATA[

<p>Hello! I&rsquo;ve been working on writing a zine about debugging for a while (here&rsquo;s <a href="https://twitter.com/b0rk/status/1562480240240525314?s=20&amp;t=BwKd6i0mVCTaCud2HDEUBA">an early draft of the table of contents</a>).</p>

<p>As part of that I thought it might be fun to read some academic papers about
debugging, and last week <a href="https://third-bit.com/">Greg Wilson</a> sent me some
papers about academic research into debugging.</p>

<p>One of those papers (<a href="https://dl.acm.org/doi/abs/10.1145/3286960.3286970">Towards a framework for teaching debugging
[paywalled]</a>) had a
categorization I really liked of the different kinds of knowledge/skills we
need to debug effectively. It comes from another more general paper on
troubleshooting: <a href="https://www.researchgate.net/profile/Woei-Hung/publication/225547853_Learning_to_Troubleshoot_A_New_Theory-Based_Design_Architecture/links/556f471c08aec226830a74e7/Learning-to-Troubleshoot-A-New-Theory-Based-Design-Architecture.pdf">Learning to Troubleshoot: A New Theory-Based Design Architecture</a>.</p>

<p>I thought the categorization was a very useful structure for thinking about how
to get better at debugging, so I&rsquo;ve reframed the five categories in the paper
into actions you can take to get better at debugging.</p>

<p>Here they are:</p>

<h3 id="1-learn-the-codebase">1. learn the codebase</h3>

<p>To debug some code, you need to understand the codebase you&rsquo;re working with.
This seems kind of obvious (of course you can&rsquo;t debug code without
understanding how it works!).</p>

<p>This kind of learning happens pretty naturally over time, and actually
debugging is also one of the best ways to <em>learn</em> how a new codebase works &ndash;
seeing how something breaks helps you learn a lot about how it works.</p>

<p>The paper calls this &ldquo;System Knowledge&rdquo;.</p>

<h3 id="2-learn-the-system">2. learn the system</h3>

<p>The paper mentions that you need to understand the programming language, but I
think there&rsquo;s more to it than that &ndash; to fix bugs, often you need to learn a
lot about the broader environment than just the language.</p>

<p>For example, if you&rsquo;re a backend web developer, some &ldquo;system&rdquo; knowledge you
might need includes:</p>

<ul>
<li>how HTTP caching works</li>
<li>CORS</li>
<li>how database transactions work</li>
</ul>

<p>I find that I often have to be a bit more intentional about learning systemic
things like this &ndash; I need to actually take the time to look them up and read
about them.</p>

<p>The paper calls this &ldquo;Domain Knowledge&rdquo;.</p>

<h3 id="3-learn-your-tools">3. learn your tools</h3>

<p>There are lots of debugging tools out there, for example:</p>

<ul>
<li>debuggers (gdb etc)</li>
<li>browser developer tools</li>
<li>profilers</li>
<li>strace / ltrace</li>
<li>tcpdump / wireshark</li>
<li>core dumps</li>
<li>and even basic things like error messages (how do you read them properly)</li>
</ul>

<p>I&rsquo;ve written a lot about debugging tools on this blog, and definitely
learning these tools has made a huge difference to me.</p>

<p>The paper calls this &ldquo;Procedural Knowledge&rdquo;.</p>

<h3 id="4-learn-strategies">4. learn strategies</h3>

<p>This is the fuzziest category, we all have a lot of strategies and heuristics
we pick up along the way for how to debug efficiently. For example:</p>

<ul>
<li>writing a unit test</li>
<li>writing a tiny standalone program to reproduce the bug</li>
<li>finding a working version of the code and seeing what changed</li>
<li>printing out a million things</li>
<li>adding extra logging</li>
<li>taking a break</li>
<li>explaining the bug to a friend and then figuring out what&rsquo;s wrong halfway through</li>
<li>looking through the github issues to see if anything matches</li>
</ul>

<p>I&rsquo;ve been thinking a lot about this category while writing the zine, but I want
to keep this post short so I won&rsquo;t say more about it here.</p>

<p>The paper calls this &ldquo;Strategic Knowledge&rdquo;.</p>

<h3 id="5-get-experience">5. get experience</h3>

<p>The last category is &ldquo;experience&rdquo;. The paper has a really funny comment about this:</p>

<blockquote>
<p>Their findings did not show a significant difference in the strategies
employed by the novices and experts. Experts simply formed more correct
hypotheses and were more efficient at finding the fault. The authors suspect
that this result is due to the difference in the programming experience between
novices and experts.</p>
</blockquote>

<p>This really resonated with me &ndash; I&rsquo;ve had SO MANY bugs that were really
frustrating and difficult the first time I ran into them, and very straightforward
the fifth or tenth or 20th time.</p>

<p>This also feels like one of the most straightforward categories of knowledge to
acquire to me &ndash; all you need to do is investigate a million bugs, which is our
whole life as programmers anyway :). It takes a long time but I feel like it
happens pretty naturally.</p>

<p>The paper calls this &ldquo;Experiential Knowledge&rdquo;.</p>

<h3 id="that-s-all">that&rsquo;s all!</h3>

<p>I&rsquo;m going to keep this post short, I just really liked this categorization and
wanted to share it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A toy remote login server]]></title>
    <link href="https://jvns.ca/blog/2022/07/28/toy-remote-login-server/"/>
    <updated>2022-07-28T08:00:28+00:00</updated>
    <id>https://jvns.ca/blog/2022/07/28/toy-remote-login-server/</id>
    <content type="html"><![CDATA[

<p>Hello! The other day we talked about <a href="https://jvns.ca/blog/2022/07/20/pseudoterminals/">what happened when you press a key in your terminal</a>.</p>

<p>As a followup, I thought it might be fun to implement a program that&rsquo;s like a
tiny ssh server, but without the security. You can find it <a href="https://github.com/jvns/tiny-remote-login/blob/main/server.go">on github here</a>, and I&rsquo;ll explain how it works in this blog post.</p>

<h3 id="the-goal-ssh-to-a-remote-computer">the goal: &ldquo;ssh&rdquo; to a remote computer</h3>

<p>Our goal is to be able to login to a remote computer and run commands, like you
do with SSH or telnet.</p>

<p>The biggest difference between this program and SSH is that there&rsquo;s literally
no security (not even a password) &ndash; anyone who can make a TCP connection to
the server can get a shell and run commands.</p>

<p>Obviously this is not a useful program in real life, but our goal is to learn a
little more about how terminals works, not to write a useful program.</p>

<p>(I will run a version of it on the public internet for the next week though,
you can see how to connect to it at the end of this blog post)</p>

<h3 id="let-s-start-with-the-server">let&rsquo;s start with the server!</h3>

<p>We&rsquo;re also going to write a client, but the server is the interesting part, so
let&rsquo;s start there. We&rsquo;re going to write a server that listens on a TCP port (I
picked 7777) and creates remote terminals for any client that connects to it to
use.</p>

<p>When the server receives a new connection it needs to:</p>

<ol>
<li>create a pseudoterminal for the client to use</li>
<li>start a <code>bash</code> shell process for the client to use</li>
<li>connect <code>bash</code> to the pseudoterminal</li>
<li>continuously copy information back and forth between the TCP connection and
the pseudoterminal</li>
</ol>

<p>I just said the word &ldquo;pseudoterminal&rdquo; a lot, so let&rsquo;s talk about what that
means.</p>

<h3 id="what-s-a-pseudoterminal">what&rsquo;s a pseudoterminal?</h3>

<p>Okay, what the heck is a pseudoterminal?</p>

<p>A pseudoterminal is a lot like a bidirectional pipe or a socket &ndash; you have two
ends, and they can both send and receive information. You can read more about
the information being sent and received in <a href="https://jvns.ca/blog/2022/07/20/pseudoterminals/">what happens if you press a key in your terminal</a></p>

<p>Basically the idea is that on one end, we have a TCP connection, and on the
other end, we have a <code>bash</code> shell. So we need to hook one part of the
pseudoterminal up to the TCP connection and the other end to bash.</p>

<p>The two parts of the pseudoterminal are called:</p>

<ul>
<li>the &ldquo;pseudoterminal master&rdquo;. This is the end we&rsquo;re going to hook up to the TCP connection.</li>
<li>the &ldquo;slave pseudoterminal device&rdquo;. We&rsquo;re going to set our bash shell&rsquo;s <code>stdout</code>, <code>stderr</code>, and <code>stdin</code> to this.</li>
</ul>

<p>Once they&rsquo;re conected, we can communicate with <code>bash</code> over our TCP connection
and we&rsquo;ll have a remote shell!</p>

<h3 id="why-do-we-need-this-pseudoterminal-thing-anyway">why do we need this &ldquo;pseudoterminal&rdquo; thing anyway?</h3>

<p>You might be wondering &ndash; Julia, if a pseudoterminal is kind of like a socket,
why can&rsquo;t we just set our bash shell&rsquo;s <code>stdout</code> / <code>stderr</code> / <code>stdin</code> to the TCP
socket?</p>

<p>And you can! We could write a TCP connection handler like this that does exactly that, it&rsquo;s not a lot of code (<a href="https://github.com/jvns/tiny-remote-login/blob/main/server-notty.go">server-notty.go</a>).</p>

<pre><code>
func handle(conn net.Conn) {
	tty, _ := conn.(*net.TCPConn).File()
	// start bash with tcp connection as stdin/stdout/stderr
	cmd := exec.Command(&quot;bash&quot;)
	cmd.Stdin = tty
	cmd.Stdout = tty
	cmd.Stderr = tty
	cmd.Start()
}

</code></pre>

<p>It even kind of works &ndash; if we connect to it with <code>nc localhost 7778</code>, we can
run commands and look at their output.</p>

<p>But there are a few problems. I&rsquo;m not going to list all of them, just two.</p>

<p><strong>problem 1: Ctrl + C doesn&rsquo;t work</strong></p>

<p>The way Ctrl + C works in a remote login session is</p>

<ul>
<li>you press ctrl + c</li>
<li>That gets translated to <code>0x03</code> and sent through the TCP connection</li>
<li>The terminal receives it</li>
<li>the Linux kernel on the other end notes &ldquo;hey, that was a Ctrl + C!&rdquo;</li>
<li>Linux sends a <code>SIGINT</code> to the appropriate process (more on what the &ldquo;appropriate process&rdquo; is exactly later)</li>
</ul>

<p>If the &ldquo;terminal&rdquo; is just a TCP connection, this doesn&rsquo;t work, because when you
send <code>0x04</code> to a TCP connection, Linux won&rsquo;t magically send <code>SIGINT</code> to any
process.</p>

<p><strong>problem 2: <code>top</code> doesn&rsquo;t work</strong></p>

<p>When I try to run <code>top</code> in this shell, I get the error message <code>top: failed tty get</code>. If we strace it, we see this system call:</p>

<pre><code>ioctl(2, TCGETS, 0x7ffec4e68d60)        = -1 ENOTTY (Inappropriate ioctl for device)
</code></pre>

<p>So <code>top</code> is running an <code>ioctl</code> on its output file descriptor (2) to get some
information about the terminal. But Linux is like &ldquo;hey, this isn&rsquo;t a terminal!&rdquo;
and returns an error.</p>

<p>There are a bunch of other things that go wrong, but hopefully at this point
you&rsquo;re convinced that we actually need to set bash&rsquo;s stdout/stderr to be a
terminal, not some other thing like a socket.</p>

<p>So let&rsquo;s start looking at the server code and see what creating a
pseudoterminal actually looks like.</p>

<h3 id="step-1-create-a-pseudoterminal">step 1: create a pseudoterminal</h3>

<p>Here&rsquo;s some Go code to create a pseudoterminal on Linux. This is copied from <a href="https://github.com/creack/pty/blob/7de28cee0d53510e719c1aeb1850af0fa647c343/pty_linux.go">github.com/creack/pty</a>,
but I removed some of the error handling to make the logic a bit easier to follow:</p>

<pre><code>pty, _ := os.OpenFile(&quot;/dev/ptmx&quot;, os.O_RDWR, 0)
sname := ptsname(p)
unlockpt(p)
tty, _ := os.OpenFile(sname, os.O_RDWR|syscall.O_NOCTTY, 0)
</code></pre>

<p>In English, what we&rsquo;re doing is:</p>

<ul>
<li>open <code>/dev/ptmx</code> to get the &ldquo;pseudoterminal master&rdquo; Again, that&rsquo;s the part we&rsquo;re going to hook up to the TCP connection</li>
<li>get the filename of the &ldquo;slave pseudoterminal device&rdquo;, which is going to be <code>/dev/pts/13</code> or something.</li>
<li>&ldquo;unlock&rdquo; the pseudoterminal so that we can use it. I have no idea what the point of this is (why is it locked to begin with?) but you have to do it for some reason</li>
<li>open <code>/dev/pts/13</code> (or whatever number we got from <code>ptsname</code>) to get the &ldquo;slave pseudoterminal device&rdquo;</li>
</ul>

<p>What do those <code>ptsname</code> and <code>unlockpt</code> functions do? They just make some
<code>ioctl</code> system calls to the Linux kernel. All of the communication with the
Linux kernel about terminals seems to be through various <code>ioctl</code> system calls.</p>

<p>Here&rsquo;s the code, it&rsquo;s pretty short: (again, I just copied it from <a href="https://github.com/creack/pty/blob/7de28cee0d53510e719c1aeb1850af0fa647c343/pty_linux.go#L41-L54">creack/pty</a>)</p>

<pre><code>func ptsname(f *os.File) string {
	var n uint32
	ioctl(f.Fd(), syscall.TIOCGPTN, uintptr(unsafe.Pointer(&amp;n)))
	return &quot;/dev/pts/&quot; + strconv.Itoa(int(n))
}

func unlockpt(f *os.File) {
	var u int32
	// use TIOCSPTLCK with a pointer to zero to clear the lock
	ioctl(f.Fd(), syscall.TIOCSPTLCK, uintptr(unsafe.Pointer(&amp;u)))
}
</code></pre>

<h3 id="step-2-hook-the-pseudoterminal-up-to-bash">step 2: hook the pseudoterminal up to <code>bash</code></h3>

<p>The next thing we have to do is connect the pseudoterminal to <code>bash</code>. Luckily,
that&rsquo;s really easy &ndash; here&rsquo;s the Go code for it! We just need to start a new
process and set the stdin, stdout, and stderr to <code>tty</code>.</p>

<pre><code>cmd := exec.Command(&quot;bash&quot;)
cmd.Stdin = tty
cmd.Stdout = tty
cmd.Stderr = tty
cmd.SysProcAttr = &amp;syscall.SysProcAttr{
  Setsid: true,
}
cmd.Start()
</code></pre>

<p>Easy! Though &ndash; why do we need this <code>Setsid: true</code> thing, you might ask? Well,
I tried commenting out that code to see what went wrong. It turns out that what
goes wrong is &ndash; Ctrl + C doesn&rsquo;t work anymore!</p>

<p><code>Setsid: true</code> creates a new <strong>session</strong> for the new bash process. But why does
that make <code>Ctrl + C</code> work? How does Linux know which process to send <code>SIGINT</code>
to when you press <code>Ctrl + C</code>, and what does that have to do with sessions?</p>

<h3 id="how-does-linux-know-which-process-to-send-ctrl-c-to">how does Linux know which process to send Ctrl + C to?</h3>

<p>I found this pretty confusing, so I reached for my favourite book for learning
about this kind of thing: <a href="https://man7.org/tlpi/">the linux programming interface</a>, specifically chapter 34 on process groups
and sessions.</p>

<p>That chapter contains a few key facts: (#3, #4, and #5 are direct quotes from the book)</p>

<ol>
<li>Every process has a <strong>session id</strong> and a <strong>process group id</strong> (which may or may not be the same as its PID)</li>
<li>A session is made up of multiple process groups</li>
<li>All of the processes in a session share a single controlling terminal.</li>
<li>A terminal may be the controlling terminal of at most one session.</li>
<li>At any point in time, one of the process groups in a session is the
<strong>foreground process group</strong> for the terminal, and the others are background
process groups.</li>
<li>When you press <code>Ctrl+C</code> in a terminal, SIGINT gets sent to all the processes in the foreground process group</li>
</ol>

<p>What&rsquo;s a process group? Well, my understanding is that:</p>

<ul>
<li>processes in the same pipe <code>x | y | z</code> are in the same process group</li>
<li>processes you start on the same shell line (<code>x &amp;&amp; y &amp;&amp; z</code>) are in the same process group</li>
<li>child processes are by default in the same process group, unless you explicitly decide otherwise</li>
</ul>

<p>I didn&rsquo;t know most of this (I had no idea processes had a session ID!) so this
was kind of a lot to absorb. I tried to draw a sketchy ASCII art diagram of the
situation</p>

<pre><code>(maybe)  terminal --- session --- process group --- process
                               |                 |- process
                               |                 |- process
                               |- process group 
                               |
                               |- process group 
</code></pre>

<p>So when we press Ctrl+C in a terminal, here&rsquo;s what I think happens:</p>

<ul>
<li><code>\x04</code> gets written to the &ldquo;pseudotermimal master&rdquo; of a terminal</li>
<li>Linux finds the <strong>session</strong> for that terminal (if it exists)</li>
<li>Linux find the <strong>foreground process group</strong> for that session</li>
<li>Linux sends <code>SIGINT</code></li>
</ul>

<p>If we don&rsquo;t create a new session for our new bash process, our new pseudoterminal
actually won&rsquo;t have <strong>any</strong> session associated with it, so nothing happens when
we press <code>Ctrl+C</code>. But if we do create a new session, then the new
pseudoterminal will have the new session associated with it.</p>

<h3 id="how-to-get-a-list-of-all-your-sessions">how to get a list of all your sessions</h3>

<p>As a quick aside, if you want to get a list of all the sessions on your Linux
machine, grouped by session, you can run:</p>

<pre><code>$ ps -eo user,pid,pgid,sess,cmd | sort -k3
</code></pre>

<p>This includes the PID, process group ID, and session ID. As an example of the output, here are the two processes in the pipeline:</p>

<pre><code>bork       58080   58080   57922 ps -eo user,pid,pgid,sess,cmd
bork       58081   58080   57922 sort -k3
</code></pre>

<p>You can see that they share the same process group ID and session ID, but of
course they have different PIDs.</p>

<p>That was kind of a lot but that&rsquo;s all we&rsquo;re going to say about sessions and
process groups in this post. Let&rsquo;s keep going!</p>

<h3 id="step-3-set-the-window-size">step 3: set the window size</h3>

<p>We need to tell the terminal how big to be!</p>

<p>Again, I just copied this from <code>creack/pty</code>. I decided to hardcode the size to 80x24.</p>

<pre><code>Setsize(tty, &amp;Winsize{
		Cols: 80,
		Rows: 24,
	})
</code></pre>

<p>Like with getting the terminal&rsquo;s pts filename and unlocking it, setting the
size is just one <code>ioctl</code> system call:</p>

<pre><code>func Setsize(t *os.File, ws *Winsize) {
	ioctl(t.Fd(), syscall.TIOCSWINSZ, uintptr(unsafe.Pointer(ws)))
}
</code></pre>

<p>Pretty simple! We could do something smarter and get the real window size, but
I&rsquo;m too lazy.</p>

<h3 id="step-4-copy-information-between-the-tcp-connection-and-the-pseudoterminal">step 4: copy information between the TCP connection and the pseudoterminal</h3>

<p>As a reminder, our rough steps to set up this remote login server were:</p>

<ol>
<li>create a pseudoterminal for the client to use</li>
<li>start a <code>bash</code> shell process</li>
<li>connect <code>bash</code> to the pseudoterminal</li>
<li>continuously copy information back and forth between the TCP connection and
the pseudoterminal</li>
</ol>

<p>We&rsquo;ve done 1, 2, and 3, now we just need to ferry information between the TCP
connection and the pseudoterminal.</p>

<p>There are two <code>io.Copy</code> calls, one to copy the input <em>from</em> the tcp connection, and one to copy the output <em>to</em> the TCP connection. Here&rsquo;s what the code looks like:</p>

<pre><code>	go func() {
			io.Copy(pty, conn)
	}()
  io.Copy(conn, pty)
</code></pre>

<p>The first one is in a goroutine just so they can both run in parallel.</p>

<p>Pretty simple!</p>

<h3 id="step-5-exit-when-we-re-done">step 5: exit when we&rsquo;re done</h3>

<p>I also added a little bit of code to close the TCP connection when the command exits</p>

<pre><code>go func() {
  cmd.Wait()
  conn.Close()
}()

</code></pre>

<p>And that&rsquo;s it for the server!  You can see all of the Go code here: <a href="https://github.com/jvns/tiny-remote-login/blob/main/server.go">server.go</a>.</p>

<h3 id="next-write-a-client">next: write a client</h3>

<p>Next, we have to write a client. This is a lot easier than the server because we don&rsquo;t need to do quite as much terminal setup. There are just 3 steps:</p>

<ol>
<li>Put the terminal into raw mode</li>
<li>copy stdin/stdout to the TCP connection</li>
<li>reset the terminal</li>
</ol>

<h3 id="client-step-1-put-the-terminal-into-raw-mode">client step 1: put the terminal into &ldquo;raw&rdquo; mode</h3>

<p>We need to put the client terminal into &ldquo;raw&rdquo; mode so that every time you press
a key, it gets sent to the TCP connection immediately. If we don&rsquo;t do this,
everything will only get sent when you press enter.</p>

<p>&ldquo;Raw mode&rdquo; isn&rsquo;t actually a single thing, it&rsquo;s a bunch of flags that you want
to turn off. There&rsquo;s a good tutorial explaining all the flags we have to turn
off called <a href="https://viewsourcecode.org/snaptoken/kilo/02.enteringRawMode.html">Entering raw mode</a>.</p>

<p>Like everything else with terminals, this requires <code>ioctl</code> system calls. In
this case we get the terminal&rsquo;s current settings, modify them, and save the old
settings so that we can restore them later.</p>

<p>I figured out how to do this in Go by going to <a href="https://grep.app">https://grep.app</a> and typing in
<code>syscall.TCSETS</code> to find some other Go code that was doing the same thing.</p>

<pre><code>func MakeRaw(fd uintptr) syscall.Termios {
	// from https://github.com/getlantern/lantern/blob/devel/archive/src/golang.org/x/crypto/ssh/terminal/util.go
	var oldState syscall.Termios
	ioctl(fd, syscall.TCGETS, uintptr(unsafe.Pointer(&amp;oldState)))

	newState := oldState
	newState.Iflag &amp;^= syscall.ISTRIP | syscall.INLCR | syscall.ICRNL | syscall.IGNCR | syscall.IXON | syscall.IXOFF
	newState.Lflag &amp;^= syscall.ECHO | syscall.ICANON | syscall.ISIG
	ioctl(fd, syscall.TCSETS, uintptr(unsafe.Pointer(&amp;newState)))
	return oldState
}
</code></pre>

<h3 id="client-step-2-copy-stdin-stdout-to-the-tcp-connection">client step 2: copy stdin/stdout to the TCP connection</h3>

<p>This is exactly like what we did with the server. It&rsquo;s very little code:</p>

<pre><code>go func() {
		io.Copy(conn, os.Stdin)
	}()
	io.Copy(os.Stdout, conn)
</code></pre>

<h3 id="client-step-3-restore-the-terminal-s-state">client step 3: restore the terminal&rsquo;s state</h3>

<p>We can put the terminal back into the mode it started in like this (another <code>ioctl</code>!):</p>

<pre><code>func Restore(fd uintptr, oldState syscall.Termios) {
	ioctl(fd, syscall.TCSETS, uintptr(unsafe.Pointer(&amp;oldState)))
}
</code></pre>

<h3 id="we-did-it">we did it!</h3>

<p>We have written a tiny remote login server that lets anyone log in! Hooray!</p>

<p>Obviously this has zero security so I&rsquo;m not going to talk about that aspect.</p>

<h3 id="it-s-running-on-the-public-internet-you-can-try-it-out">it&rsquo;s running on the public internet! you can try it out!</h3>

<p>For the next week or so I&rsquo;m going to run a demo of this on the internet at
<code>tetris.jvns.ca</code>. It runs tetris instead of a shell because I wanted to avoid
abuse, but if you want to try it with a shell you can run it on your own
computer :).</p>

<p>If you want to try it out, you can use <code>netcat</code> as a client instead of the
custom Go client program we wrote, because copying information to/from a TCP
connection is what netcat does. Here&rsquo;s how:</p>

<pre><code>stty raw -echo &amp;&amp; nc tetris.jvns.ca 7777 &amp;&amp; stty sane
</code></pre>

<p>This will let you play a terminal tetris game called <code>tint</code>.</p>

<p>You can also use the <a href="https://github.com/jvns/tiny-remote-login/blob/main/client.go">client.go program</a> and run <code>go run client.go tetris.jvns.ca 7777</code>.</p>

<h3 id="this-is-not-a-good-protocol">this is not a good protocol</h3>

<p>This protocol where we just copy bytes from the TCP connection to the terminal
and nothing else is not good because it doesn&rsquo;t allow us to send over
information information like the terminal or the actual window size of the
terminal.</p>

<p>I thought about implementing telnet&rsquo;s protocol so that we could use telnet as a
client, but I didn&rsquo;t feel like figuring out how telnet works so I didn&rsquo;t. (the
server 30% works with telnet as is, but a lot of things are broken, I don&rsquo;t
quite know why, and I didn&rsquo;t feel like figuring it out)</p>

<h3 id="it-ll-mess-up-your-terminal-a-bit">it&rsquo;ll mess up your terminal a bit</h3>

<p>As a warning: using this server to play tetris will probably mess up your
terminal a bit because it sets the window size to 80x24. To fix that I just
closed the terminal tab after running that command.</p>

<p>If we wanted to fix this for real, we&rsquo;d need to restore the window size after
we&rsquo;re done, but then we&rsquo;d need a slightly more real protocol  than &ldquo;just
blindly copy bytes back and forth with TCP&rdquo; and I didn&rsquo;t feel like doing that.</p>

<p>Also it sometimes takes a second to disconnect after the program exits for some
reason, I&rsquo;m not sure why that is.</p>

<h3 id="other-tiny-projects">other tiny projects</h3>

<p>That&rsquo;s all! There are a couple of other similar toy implementations of programs
I&rsquo;ve written here:</p>

<ul>
<li><a href="https://jvns.ca/blog/2022/03/23/a-toy-version-of-tls/">toy tls 1.3 implementation</a></li>
<li><a href="https://jvns.ca/blog/2022/02/01/a-dns-resolver-in-80-lines-of-go/">toy dns resolver</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What happens when you press a key in your terminal?]]></title>
    <link href="https://jvns.ca/blog/2022/07/20/pseudoterminals/"/>
    <updated>2022-07-20T20:57:15+00:00</updated>
    <id>https://jvns.ca/blog/2022/07/20/pseudoterminals/</id>
    <content type="html"><![CDATA[

<p>I&rsquo;ve been confused about what&rsquo;s going on with terminals for a long time.</p>

<p>But this past week I was using <a href="https://xtermjs.org/">xterm.js</a> to display an
interactive terminal in a browser and I finally thought to ask a pretty basic
question: when you press a key on your keyboard in a terminal (like <code>Delete</code>, or <code>Escape</code>, or <code>a</code>), which
bytes get sent?</p>

<p>As usual we&rsquo;ll answer that question by doing some experiments and seeing what happens :)</p>

<h3 id="remote-terminals-are-very-old-technology">remote terminals are very old technology</h3>

<p>First, I want to say that displaying a terminal in the browser with <code>xterm.js</code>
might seem like a New Thing, but it&rsquo;s really not. In the 70s, computers were
expensive. So many employees at an institution would share a single computer,
and each person could have their own &ldquo;terminal&rdquo; to that computer.</p>

<p>For example, here&rsquo;s a photo of a VT100 terminal from the 70s or 80s. This looks like
it could be a computer (it&rsquo;s kind of big!), but it&rsquo;s not &ndash; it just displays
whatever information the actual computer sends it.</p>

<p><a title="Jason Scott, CC BY 2.0 &lt;https://creativecommons.org/licenses/by/2.0&gt;, via Wikimedia Commons" href="https://commons.wikimedia.org/wiki/File:DEC_VT100_terminal.jpg"><img width="512" alt="DEC VT100 terminal" src="https://upload.wikimedia.org/wikipedia/commons/thumb/9/99/DEC_VT100_terminal.jpg/512px-DEC_VT100_terminal.jpg"></a></p>

<p>Of course, in the 70s they didn&rsquo;t use websockets for this, but the information
being sent back and forth is more or less the same as it was then.</p>

<p><small>
(the terminal in that photo is from the <a href="https://livingcomputers.org/">Living Computer Museum</a> in Seattle which I got to visit once and write FizzBuzz in <code>ed</code> on a very old Unix system, so it&rsquo;s possible that I&rsquo;ve actually used that machine or one of its siblings! I really hope the Living Computer Museum opens again, it&rsquo;s very cool to get to play with old computers.)
</small></p>

<h3 id="what-information-gets-sent">what information gets sent?</h3>

<p>It&rsquo;s obvious that if you want to connect to a remote computer (with <code>ssh</code> or
using <code>xterm.js</code> and a websocket, or anything else), then some information
needs to be sent between the client and the server.</p>

<p>Specifically:</p>

<ul>
<li>the <strong>client</strong> needs to send the keystrokes that the user typed in (like <code>ls -l</code>)</li>
<li>the <strong>server</strong> needs to tell the client what to display on the screen</li>
</ul>

<p>Let&rsquo;s look at a real program that&rsquo;s running a remote terminal in a browser and see what information gets sent back and forth!</p>

<h3 id="we-ll-use-goterm-to-experiment">we&rsquo;ll use <code>goterm</code> to experiment</h3>

<p>I found this tiny program on GitHub called
<a href="https://github.com/freman/goterm">goterm</a> that runs a Go server that lets you
interact with a terminal in the browser using <code>xterm.js</code>. This program is very insecure but it&rsquo;s simple and great for learning.</p>

<p>I <a href="https://github.com/jvns/goterm">forked it</a> to make it work with the latest xterm.js,
since it was last updated 6 years ago. Then I added some logging statements to
print out every time bytes are sent/received over the websocket.</p>

<p>Let&rsquo;s look at sent and received during a few different terminal interactions!</p>

<h3 id="example-ls">example: <code>ls</code></h3>

<p>First, let&rsquo;s run <code>ls</code>. Here&rsquo;s what I see on the <code>xterm.js</code> terminal:</p>

<pre><code>bork@kiwi:/play$ ls
file
bork@kiwi:/play$
</code></pre>

<p>and here&rsquo;s what gets sent and received: (in my code, I log <code>sent: [bytes]</code> every time the client sends bytes and <code>recv: [bytes]</code> every time it receives bytes from the server)</p>

<pre><code>sent: &quot;l&quot;
recv: &quot;l&quot;
sent: &quot;s&quot;
recv: &quot;s&quot;
sent: &quot;\r&quot;
recv: &quot;\r\n\x1b[?2004l\r&quot;
recv: &quot;file\r\n&quot;
recv: &quot;\x1b[?2004hbork@kiwi:/play$ &quot;
</code></pre>

<p>I noticed 3 things in this output:</p>

<ol>
<li>Echoing: The client sends <code>l</code> and then immediately receives an <code>l</code> sent
back. I guess the idea here is that the client is really dumb &ndash; it doesn&rsquo;t
know that when I type an <code>l</code>, I want an <code>l</code> to be echoed back to the screen.
It has to be told explicitly by the server process to display it.</li>
<li>The newline: when I press enter, it sends a <code>\r</code> (carriage return) symbol and not a <code>\n</code> (newline)</li>
<li>Escape sequences: <code>\x1b</code> is the ASCII escape character, so <code>\x1b[?2004h</code> is
telling the terminal to display something or other. I think this is a colour
sequence but I&rsquo;m not sure. We&rsquo;ll talk a little more about escape sequences later.</li>
</ol>

<p>Okay, now let&rsquo;s do something slightly more complicated.</p>

<h3 id="example-ctrl-c">example: <code>Ctrl+C</code></h3>

<p>Next, let&rsquo;s see what happens when we interrupt a process with <code>Ctrl+C</code>. Here&rsquo;s what I see in my terminal:</p>

<pre><code>bork@kiwi:/play$ cat
^C
bork@kiwi:/play$
</code></pre>

<p>And here&rsquo;s what the client sends and receives.</p>

<pre><code>sent: &quot;c&quot;
recv: &quot;c&quot;
sent: &quot;a&quot;
recv: &quot;a&quot;
sent: &quot;t&quot;
recv: &quot;t&quot;
sent: &quot;\r&quot;
recv: &quot;\r\n\x1b[?2004l\r&quot;
sent: &quot;\x03&quot;
recv: &quot;^C&quot;
recv: &quot;\r\n&quot;
recv: &quot;\x1b[?2004h&quot;
recv: &quot;bork@kiwi:/play$ &quot;
</code></pre>

<p>When I press <code>Ctrl+C</code>, the client sends <code>\x03</code>. If I look up an ASCII table,
<code>\x03</code> is &ldquo;End of Text&rdquo;, which seems reasonable. I thought this was really cool
because I&rsquo;ve always been a bit confused about how Ctrl+C works &ndash; it&rsquo;s good to
know that it&rsquo;s just sending an <code>\x03</code> character.</p>

<p>I believe the reason <code>cat</code> gets interrupted when we press <code>Ctrl+C</code> is that the
Linux kernel on the server side receives this <code>\x03</code> character, recognizes that
it means &ldquo;interrupt&rdquo;, and then sends a <code>SIGINT</code> to the process that owns the
pseudoterminal&rsquo;s process group. So it&rsquo;s handled in the kernel and not in
userspace.</p>

<h3 id="example-ctrl-d">example: <code>Ctrl+D</code></h3>

<p>Let&rsquo;s try the exact same thing, except with <code>Ctrl+D</code>. Here&rsquo;s what I see in my terminal:</p>

<pre><code>bork@kiwi:/play$ cat
bork@kiwi:/play$
</code></pre>

<p>And here&rsquo;s what gets sent and received:</p>

<pre><code>sent: &quot;c&quot;
recv: &quot;c&quot;
sent: &quot;a&quot;
recv: &quot;a&quot;
sent: &quot;t&quot;
recv: &quot;t&quot;
sent: &quot;\r&quot;
recv: &quot;\r\n\x1b[?2004l\r&quot;
sent: &quot;\x04&quot;
recv: &quot;\x1b[?2004h&quot;
recv: &quot;bork@kiwi:/play$ &quot;
</code></pre>

<p>It&rsquo;s very similar to <code>Ctrl+C</code>, except that <code>\x04</code> gets sent instead of <code>\x03</code>.
Cool! <code>\x04</code> corresponds to ASCII &ldquo;End of Transmission&rdquo;.</p>

<h3 id="what-about-ctrl-another-letter">what about Ctrl + another letter?</h3>

<p>Next I got curious about &ndash; if I send <code>Ctrl+e</code>, what byte gets sent?</p>

<p>It turns out that it&rsquo;s literally just the number of that letter in the alphabet, like this:</p>

<ul>
<li><code>Ctrl+a</code> =&gt; 1</li>
<li><code>Ctrl+b</code> =&gt; 2</li>
<li><code>Ctrl+c</code> =&gt; 3</li>
<li><code>Ctrl+d</code> =&gt; 4</li>
<li>&hellip;</li>
<li><code>Ctrl+z</code> =&gt; 26</li>
</ul>

<p>Also, <code>Ctrl+Shift+b</code> does the exact same thing as <code>Ctrl+b</code> (it writes <code>0x2</code>).</p>

<p>What about other keys on the keyboard? Here&rsquo;s what they map to:</p>

<ul>
<li>Tab -&gt; 0x9 (same as Ctrl+I, since I is the 9th letter)</li>
<li>Escape -&gt; <code>\x1b</code><br /></li>
<li>Backspace -&gt; <code>\x7f</code></li>
<li>Home -&gt; <code>\x1b[H</code></li>
<li>End: <code>\x1b[F</code></li>
<li>Print Screen: <code>\x1b\x5b\x31\x3b\x35\x41</code></li>
<li>Insert: <code>\x1b\x5b\x32\x7e</code></li>
<li>Delete -&gt; <code>\x1b\x5b\x33\x7e</code></li>
<li>My <code>Meta</code> key does nothing at all</li>
</ul>

<p>What about Alt? From my experimenting (and some Googling), it seems like <code>Alt</code>
is literally the same as &ldquo;Escape&rdquo;, except that pressing <code>Alt</code> by itself doesn&rsquo;t
send any characters to the terminal and pressing <code>Escape</code> by itself does. So:</p>

<ul>
<li>alt + d =&gt; <code>\x1bd</code> (and the same for every other letter)</li>
<li>alt + shift + d =&gt; <code>\x1bD</code> (and the same for every other letter)</li>
<li>etcetera</li>
</ul>

<p>Let&rsquo;s look at one more example!</p>

<h3 id="example-nano">example: <code>nano</code></h3>

<p>Here&rsquo;s what gets sent and received when I run the text editor <code>nano</code>:</p>

<pre><code>recv: &quot;\r\x1b[Kbork@kiwi:/play$ &quot;
sent: &quot;n&quot; [[]byte{0x6e}]
recv: &quot;n&quot;
sent: &quot;a&quot; [[]byte{0x61}]
recv: &quot;a&quot;
sent: &quot;n&quot; [[]byte{0x6e}]
recv: &quot;n&quot;
sent: &quot;o&quot; [[]byte{0x6f}]
recv: &quot;o&quot;
sent: &quot;\r&quot; [[]byte{0xd}]
recv: &quot;\r\n\x1b[?2004l\r&quot;
recv: &quot;\x1b[?2004h&quot;
recv: &quot;\x1b[?1049h\x1b[22;0;0t\x1b[1;16r\x1b(B\x1b[m\x1b[4l\x1b[?7h\x1b[39;49m\x1b[?1h\x1b=\x1b[?1h\x1b=\x1b[?25l&quot;
recv: &quot;\x1b[39;49m\x1b(B\x1b[m\x1b[H\x1b[2J&quot;
recv: &quot;\x1b(B\x1b[0;7m  GNU nano 6.2 \x1b[44bNew Buffer \x1b[53b \x1b[1;123H\x1b(B\x1b[m\x1b[14;38H\x1b(B\x1b[0;7m[ Welcome to nano.  For basic help, type Ctrl+G. ]\x1b(B\x1b[m\r\x1b[15d\x1b(B\x1b[0;7m^G\x1b(B\x1b[m Help\x1b[15;16H\x1b(B\x1b[0;7m^O\x1b(B\x1b[m Write Out   \x1b(B\x1b[0;7m^W\x1b(B\x1b[m Where Is    \x1b(B\x1b[0;7m^K\x1b(B\x1b[m Cut\x1b[15;61H&quot;
</code></pre>

<p>You can see some text from the UI in there like &ldquo;GNU nano 6.2&rdquo;, and these
<code>\x1b[27m</code> things are escape sequences. Let&rsquo;s talk about escape sequences a bit!</p>

<h3 id="ansi-escape-sequences">ANSI escape sequences</h3>

<p>These <code>\x1b[</code> things above that <code>nano</code> is sending the client are called &ldquo;escape sequences&rdquo; or &ldquo;escape codes&rdquo;.
This is because they all start with <code>\x1b</code>, the &ldquo;escape&rdquo; character. .  They change the
cursor&rsquo;s position, make text bold or underlined, change colours, etc. <a href="https://en.wikipedia.org/wiki/ANSI_escape_code">Wikipedia has some history</a> if you&rsquo;re interested.</p>

<p>As a simple example: if you run</p>

<pre><code>echo -e '\e[0;31mhi\e[0m there'
</code></pre>

<p>in your terminal, it&rsquo;ll print out &ldquo;hi there&rdquo; where &ldquo;hi&rdquo; is in red and &ldquo;there&rdquo;
is in black. <a href="https://misc.flogisoft.com/bash/tip_colors_and_formatting">This page</a> has some nice
examples of escape codes for colors and formatting.</p>

<p>I think there are a few different standards for escape codes, but my
understanding is that the most common set of escape codes that people use on
Unix come from the VT100 (that old terminal in the picture at the top of the
blog post), and hasn&rsquo;t really changed much in the last 40 years.</p>

<p>Escape codes are why your terminal can get messed up if you <code>cat</code> a bunch of binary to
your screen &ndash; usually you&rsquo;ll end up accidentally printing a bunch of random
escape codes which will mess up your terminal &ndash; there&rsquo;s bound to be a <code>0x1b</code>
byte in there somewhere if you <code>cat</code> enough binary to your terminal.</p>

<h3 id="can-you-type-in-escape-sequences-manually">can you type in escape sequences manually?</h3>

<p>A few sections back, we talked about how the <code>Home</code> key maps to <code>\x1b[H</code>. Those 3 bytes are <code>Escape + [ + H</code> (because Escape is
<code>\x1b</code>).</p>

<p>And if I manually type Escape, then [, then H in the
<code>xterm.js</code> terminal, I end up at the beginning of the line, exactly the same as if I&rsquo;d pressed <code>Home</code>.</p>

<p>I noticed that this didn&rsquo;t work in <code>fish</code> on my computer though &ndash; if I typed
<code>Escape</code> and then <code>[</code>, it just printed out <code>[</code> instead of letting me continue the
escape sequence. I asked my friend Jesse who has written <a href="https://github.com/doy/vt100-rust">a bunch of Rust
terminal code</a> about this and Jesse told me
that a lot of programs implement a <strong>timeout</strong> for escape codes &ndash; if you don&rsquo;t
press another key after some minimum amount of time, it&rsquo;ll decide that it&rsquo;s
actually not an escape code anymore.</p>

<p>Apparently this is configurable in fish with <code>fish_escape_delay_ms</code>, so I ran
<code>set fish_escape_delay_ms 1000</code> and then I was able to type in escape codes by
hand. Cool!</p>

<h3 id="terminal-encoding-is-kind-of-weird">terminal encoding is kind of weird</h3>

<p>I want to pause here for a minute here and say that the way the keys you get
pressed get mapped to bytes is pretty weird. Like, if we were designing
the way keys are encoded from scratch today, we would probably not set it up so
that:</p>

<ul>
<li><code>Ctrl + a</code> does the exact same thing as <code>Ctrl + Shift + a</code></li>
<li><code>Alt</code> is the same as <code>Escape</code></li>
<li>control sequences (like colours / moving the cursor around) use the same byte
as the <code>Escape</code> key, so that you need to rely on timing to determine if it
was a control sequence of the user just meant to press <code>Escape</code></li>
</ul>

<p>But all of this was designed in the 70s or 80s or something and then needed
to stay the same forever for backwards compatibility, so that&rsquo;s what we get :)</p>

<h3 id="changing-window-size">changing window size</h3>

<p>Not everything you can do in a terminal happens via sending bytes back and
forth. For example, when the terminal gets resized, we have to tell Linux that the window size has
changed in a different way.</p>

<p>Here&rsquo;s what the Go code in
<a href="https://github.com/freman/goterm/blob/a644c10e180ce8af789ea3e4e4892dcf078e97e2/main.go#L110-L115">goterm</a>
to do that looks like:</p>

<pre><code>syscall.Syscall(
    syscall.SYS_IOCTL,
    tty.Fd(),
    syscall.TIOCSWINSZ,
    uintptr(unsafe.Pointer(&amp;resizeMessage)),
)
</code></pre>

<p>This is using the <code>ioctl</code> system call. My understanding of <code>ioctl</code> is that it&rsquo;s
a system call for a bunch of random stuff that isn&rsquo;t covered by other system
calls, generally related to IO I guess.</p>

<p><code>syscall.TIOCSWINSZ</code> is an integer constant which which tells <code>ioctl</code> which
particular thing we want it to to in this case (change the window size of a
terminal).</p>

<h3 id="this-is-also-how-xterm-works">this is also how xterm works</h3>

<p>In this post we&rsquo;ve been talking about remote terminals, where the client and
the server are on different computers. But actually if you use a terminal
emulator like <code>xterm</code>, all of this works the exact same way, it&rsquo;s just harder
to notice because the bytes aren&rsquo;t being sent over a network connection.</p>

<h3 id="that-s-all-for-now">that&rsquo;s all for now!</h3>

<p>There&rsquo;s defimitely a lot more to know about terminals (we could talk more about
colours, or raw vs cooked mode, or unicode support, or the Linux pseudoterminal
interface) but I&rsquo;ll stop here because it&rsquo;s 10pm, this is getting kind of long,
and I think my brain cannot handle more new information about terminals today.</p>

<p><small>
Thanks to <a href="https://github.com/doy/">Jesse Luehrs</a> for answering a billion of my questions about terminals, all the mistakes are mine :)
</small></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Monitoring tiny web services]]></title>
    <link href="https://jvns.ca/blog/2022/07/09/monitoring-small-web-services/"/>
    <updated>2022-07-09T09:25:21+00:00</updated>
    <id>https://jvns.ca/blog/2022/07/09/monitoring-small-web-services/</id>
    <content type="html"><![CDATA[

<p>Hello! I&rsquo;ve started to run a few more servers recently
(<a href="https://nginx-playground.wizardzines.com">nginx playground</a>,
<a href="https://messwithdns.net">mess with dns</a>,
<a href="https://dns-lookup.jvns.ca">dns lookup</a>), so I&rsquo;ve been
thinking about monitoring.</p>

<p>It wasn&rsquo;t initially totally obvious to me how to monitor these websites, so I
wanted to quickly write up what how I did it.</p>

<p>I&rsquo;m not going to talk about how to monitor Big Serious Mission Critical
websites at all, only tiny unimportant websites.</p>

<h3 id="goal-spend-approximately-0-time-on-operations">goal: spend approximately 0 time on operations</h3>

<p>I want the sites to mostly work, but I also want to spend approximately 0% of
my time on the ongoing operations.</p>

<p>I was initially very wary of running servers at all because at my last job I
was on a <sup>24</sup>&frasl;<sub>7</sub> oncall rotation for some critical services, and in my mind &ldquo;being
responsible for servers&rdquo; meant &ldquo;get woken up at 2am to fix the servers&rdquo; and
&ldquo;have lots of complicated dashboards&rdquo;.</p>

<p>So for a while I only made static websites so that I wouldn&rsquo;t have to think
about servers.</p>

<p>But eventually I realized that any server I was going to write was going to be
very low stakes, if they occasionally go down for 2 hours it&rsquo;s no big deal, and
I could just set up some very simple monitoring to help keep them running.</p>

<h3 id="not-having-monitoring-sucks">not having monitoring sucks</h3>

<p>At first I didn&rsquo;t set up any monitoring for my servers at all. This had the
extremely predictable outcome of &ndash; sometimes the site broke, and I didn&rsquo;t find
out about it until somebody told me!</p>

<h3 id="step-1-an-uptime-checker">step 1: an uptime checker</h3>

<p>The first step was to set up an uptime checker. There are tons of these out
there, the ones I&rsquo;m using right now are <a href="https://updown.io/">updown.io</a> and
<a href="https://uptimerobot.com/">uptime robot</a>. I like updown&rsquo;s user interface and
<a href="https://updown.io/#pricing">pricing</a> structure more (it&rsquo;s per request instead of a monthly fee), but uptime
robot has a more generous free tier.</p>

<p>These</p>

<ol>
<li>check that the site is up</li>
<li>if it goes down, it emails me</li>
</ol>

<p>I find that email notifications are a good level for me, I&rsquo;ll find out pretty
quickly if the site goes down but it doesn&rsquo;t wake me up or anything.</p>

<h3 id="step-2-an-end-to-end-healthcheck">step 2: an end-to-end healthcheck</h3>

<p>Next, let&rsquo;s talk about what &ldquo;check that the site is up&rdquo; actually means.</p>

<p>At first I just made one of my healthcheck endpoints a function that returned
<code>200 OK</code> no matter what.</p>

<p>This is kind of useful &ndash; it told me that the server was on!</p>

<p>But unsurprisingly I ran into problems because it wasn&rsquo;t checking that the API
was actually <em>working</em> &ndash; sometimes the healthcheck succeeded even though the
rest of the service had actually gotten into a bad state.</p>

<p>So I updated it to actually make a real API request and make sure it
succeeded.</p>

<p>All of my services do very few things (the nginx playground has just 1
endpoint), so it&rsquo;s pretty easy to set up a healthcheck that actually runs
through most of the actions the service is supposed to do.</p>

<p>Here&rsquo;s what the end-to-end healthcheck handler for the nginx playground looks
like. It&rsquo;s very basic: it just makes another POST request (to itself) and
checks if that request succeeds or fails.</p>

<pre><code>func healthHandler(w http.ResponseWriter, r *http.Request) {
	// make a request to localhost:8080 with `healthcheckJSON` as the body
	// if it works, return 200
	// if it doesn't, return 500
	client := http.Client{}
	resp, err := client.Post(&quot;http://localhost:8080/&quot;, &quot;application/json&quot;, strings.NewReader(healthcheckJSON))
	if err != nil {
		log.Println(err)
		w.WriteHeader(http.StatusInternalServerError)
		return
	}
	if resp.StatusCode != http.StatusOK {
		log.Println(resp.StatusCode)
		w.WriteHeader(http.StatusInternalServerError)
		return
	}
	w.WriteHeader(http.StatusOK)
}
</code></pre>

<h3 id="healthcheck-frequency-hourly">healthcheck frequency: hourly</h3>

<p>Right now I&rsquo;m running most of my healthchecks every hour, and some every 30
minutes.</p>

<p>I run them hourly because updown.io&rsquo;s pricing is per healthcheck, I&rsquo;m
monitoring 18 different URLs, and I wanted to keep my healthcheck budget pretty
minimal at $5/year.</p>

<p>Taking an hour to find out that one of these websites has gone down seems ok to
me &ndash; if there is a problem there&rsquo;s no guarantee I&rsquo;ll get to fixing it all that
quickly anyway.</p>

<p>If it were free to run them more often I&rsquo;d probably run them every 5-10 minutes instead.</p>

<h3 id="step-3-automatically-restart-if-the-healthcheck-fails">step 3: automatically restart if the healthcheck fails</h3>

<p>Some of my websites are on fly.io, and fly has a pretty standard feature where
I can configure a HTTP healthcheck for a service and restart the service if the
healthcheck starts failing.</p>

<p>&ldquo;Restart a lot&rdquo; is a very useful strategy to paper over bugs that I haven&rsquo;t
gotten around to fixing yet &ndash; for a while the nginx playground had a process
leak where <code>nginx</code> processes weren&rsquo;t getting terminated, so the server kept
running out of RAM.</p>

<p>With the healthcheck, the result of this was that every day or so, this would happen:</p>

<ul>
<li>the server ran out of RAM</li>
<li>the healthcheck started failing</li>
<li>it get restarted</li>
<li>everything was fine again</li>
<li>repeat the whole saga again some number of hours later</li>
</ul>

<p>Eventually I got around to actually fixing the process leak, but it was nice to
have a workaround in place that could keep things running while I was
procrastinating fixing the bug.</p>

<p>These healthchecks to decide whether to restart the service run more often: every 5 minutes or so.</p>

<h3 id="this-is-not-the-best-way-to-monitor-big-services">this is not the best way to monitor Big Services</h3>

<p>This is probably obvious and I said this already at the beginning, but &ldquo;write
one HTTP healthcheck&rdquo; is not the best approach for monitoring a large complex
service. But I won&rsquo;t go into that because that&rsquo;s not what this post is about.</p>

<h3 id="it-s-been-working-well-so-far">it&rsquo;s been working well so far!</h3>

<p>I originally wrote this post 3 months ago in April, but I waited until now to
publish it to make sure that the whole setup was working.</p>

<p>It&rsquo;s made a pretty big difference &ndash; before I was having some very silly
downtime problems, and now for the last few months the sites have been up
99.95% of the time!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Notes on running containers with bubblewrap]]></title>
    <link href="https://jvns.ca/blog/2022/06/28/some-notes-on-bubblewrap/"/>
    <updated>2022-06-28T12:24:34+00:00</updated>
    <id>https://jvns.ca/blog/2022/06/28/some-notes-on-bubblewrap/</id>
    <content type="html"><![CDATA[

<p>Hello! About a year ago I got mad about Docker container startup time. This was
because I was building an <a href="https://jvns.ca/blog/2021/09/24/new-tool--an-nginx-playground/">nginx playground</a>
where I was starting a new &ldquo;container&rdquo; on every HTTP request, and so for it to
feel reasonably snappy, nginx needed to start quickly.</p>

<p>Also, I was running this project on a pretty small cloud machine (256MB RAM), a
small CPU, so I really wanted to avoid unnecessary overhead.</p>

<p>I&rsquo;ve been looking for a way to run containers faster since then, but I couldn&rsquo;t
find one until last week when I discovered
<a href="https://github.com/containers/bubblewrap">bubblewrap</a>!! It&rsquo;s very fast and I
think it&rsquo;s super cool, but I also ran into a bunch of fun problems that I
wanted to write down for my future self.</p>

<h3 id="some-disclaimers">some disclaimers</h3>

<ul>
<li>I&rsquo;m not sure if the way I&rsquo;m using bubblewrap in this post is maybe not how it&rsquo;s intended to be used</li>
<li>there are a lot of sharp edges when using bubblewrap in this way, you need to
think a lot about Linux namespaces and how containers work</li>
<li>bubblewrap is a security tool but I am not a security person and I am only
doing this for weird tiny projects. you should definitely not take security
advice from me.</li>
</ul>

<p>Okay, all of that said, let&rsquo;s talk about I&rsquo;m trying to use bubblewrap to run
containers fast and in a relatively secure way :)</p>

<h3 id="docker-containers-take-300ms-to-start-on-my-machine">Docker containers take ~300ms to start on my machine</h3>

<p>I ran a quick benchmark to see how long a Docker container takes to run a
simple command (<code>ls</code>). For both Docker and Podman, it&rsquo;s about 300ms.</p>

<pre><code>$ time docker run --network none -it ubuntu:20.04 ls / &gt; /dev/null
Executed in  378.42 millis 
$ time podman run --network none -it ubuntu:20.04 ls / &gt; /dev/null
Executed in  279.27 millis
</code></pre>

<p>Almost all of this time is overhead from docker and podman &ndash; just running <code>ls</code>
by itself takes about 3ms:</p>

<pre><code>$ time ls / &gt; /dev/null
Executed in    2.96 millis 
</code></pre>

<p>I want to stress that, while I&rsquo;m not sure exactly what the slowest part of
Docker and podman startup time is (I spent 5 minutes trying to profile them and
gave up), I&rsquo;m 100% sure it&rsquo;s something important.</p>

<p>The way we&rsquo;re going to run containers faster with bubblewrap has a lot of
limitations and it&rsquo;s a lower level interface which is a lot trickier to use.</p>

<h3 id="goal-1-containers-that-start-quickly">goal 1: containers that start quickly</h3>

<p>I felt like it <em>should</em> be possible to have containers that start essentially
instantly or at least in less than 5ms. My thought process:</p>

<ul>
<li>creating a new namespace with <code>unshare</code> is basically instant</li>
<li><a href="https://jvns.ca/blog/2016/10/10/what-even-is-a-container/">containers are basically just a bunch of namespaces</a></li>
<li>what&rsquo;s the problem?</li>
</ul>

<h3 id="container-startup-time-is-usually-not-that-important">container startup time is (usually) not that important</h3>

<p>Most of the time when people are using containers, they&rsquo;re running some
long-running process inside the container like a webserver, so it doesn&rsquo;t
really matter if it takes 300ms to start.</p>

<p>So it makes sense to me that there aren&rsquo;t a lot of container tools that
optimize for startup time. But I still wanted to optimize for startup time :)</p>

<h3 id="goal-2-run-the-containers-as-an-unprivileged-user">goal 2: run the containers as an unprivileged user</h3>

<p>Another goal I had was to be able to run my containers as an unprivileged user
instead of root.</p>

<p>I was surprised the first time I learned that Docker actually runs containers
as root &ndash; even though I run <code>docker run ubuntu:20.04</code> as an unprivileged user (<code>bork</code>), that
message is actually sent to a daemon running as root, and the Docker container
process itself also runs as root (albeit a <code>root</code> that&rsquo;s stripped of all its
capabilities).</p>

<p>That&rsquo;s fine for Docker (they have lots of very smart people making sure that
they get it right!), but if I&rsquo;m going to do container stuff <em>without</em> using
Docker (for the speed reasons mentioned above), I&rsquo;d rather not do it as root to
keep everything a bit more secure.</p>

<h3 id="podman-can-run-containers-as-an-non-root-user">podman can run containers as an non-root user</h3>

<p>Before we start talking about how to do weird stuff with bubblewrap, I want to
quickly talk about a much more normal tool to run containers: podman!</p>

<p>Podman, unlike Docker, can run containers as an unprivileged user!</p>

<p>If I run this from my normal user:</p>

<pre><code>$ podman run -it ubuntu:20.04 ls
</code></pre>

<p>it doesn&rsquo;t secretly run as root behind the scenes! It just starts the container
as my normal user, and then uses something called &ldquo;user namespaces&rdquo; so that
<em>inside the container</em> I appear to be root.</p>

<p>The other cool thing aboud podman is that it has exactly the same interface as
Docker, so you can just take a Docker command and replace <code>docker</code> with
<code>podman</code> and it&rsquo;ll Just Work. I&rsquo;ve found that sometimes I need to do some extra
work to get podman to work in practice, but it&rsquo;s still pretty nice that it has
the same command line interface.</p>

<p>This &ldquo;run containers as a non-root user&rdquo; feature is normally called &ldquo;rootless
containers&rdquo;. (I find that name kind of counterintuitive, but that&rsquo;s what people call it)</p>

<h3 id="failed-attempt-1-write-my-own-tool-using-runc">failed attempt 1: write my own tool using <code>runc</code></h3>

<p>I knew that Docker and podman use
<a href="https://github.com/opencontainers/runc">runc</a> (or maybe <code>crun</code>? I can&rsquo;t keep track honestly) under the hood, so I thought &ndash;
well, maybe I can just use <code>runc</code> directly to make my own tool that starts
containers faster than Docker does!</p>

<p>I tried to do this 6 months ago and I don&rsquo;t remember most of the details, but basically
I spent 8 hours working on it, got frustrated because I couldn&rsquo;t get anything
to work, and gave up.</p>

<p>One specific detail I remember struggling with was setting up a working <code>/dev</code>
for my programs to use.</p>

<h3 id="enter-bubblewrap">enter bubblewrap</h3>

<p>Okay, that was a very long preamble so let&rsquo;s get to the point! Last week, I
discovered a tool called <code>bubblewrap</code> that was basically exactly the thing I
was trying to build with <code>runc</code> in my failed attempt, except that it actually
works and has many more features and it&rsquo;s built by people who know things about
security! Hooray!</p>

<p>The interface to bubblewrap is pretty different than the interface to Docker &ndash;
it&rsquo;s much lower level.  There&rsquo;s no concept of a container image &ndash; instead you
map a bunch of directories on your host to directories in the container.</p>

<p>For example, here&rsquo;s how to run a container with the same root directory as your
host operating system, but with only read access to that root directory, and only write access to <code>/tmp</code>.</p>

<pre><code>bwrap \
    --ro-bind / / \
    --bind /tmp /tmp \
    --proc /proc --dev /dev \
    --unshare-pid \
    --unshare-net \
    bash
</code></pre>

<p>For example, you could imagine running some untrusted process under bubblewrap
this way and then putting all the files you want the process to be able to access in <code>/tmp</code>.</p>

<h3 id="bubblewrap-runs-containers-as-an-unprivileged-non-root-user">bubblewrap runs containers as an unprivileged (non-root) user</h3>

<p>Like podman, bubblewrap runs containers as a non-root user, using user
namespaces. It can also run containers as root, but in this post we&rsquo;re just
going to be talking about using it as an unprivileged user.</p>

<h3 id="bubblewrap-is-fast">bubblewrap is fast</h3>

<p>Let&rsquo;s see how long it takes to run <code>ls</code> in a bubblewrap container!</p>

<pre><code>$ time bwrap --ro-bind / / --proc /proc --dev /dev --unshare-pid ls /
Executed in    8.04 millis
</code></pre>

<p>That&rsquo;s a big difference! 8ms is a lot faster than 279ms.</p>

<p>Of course, like we said before, the reason bubblewrap is faster is that it does
a lot less. So let&rsquo;s talk about some things bubblewrap doesn&rsquo;t do.</p>

<h3 id="some-things-bubblewrap-doesn-t-do">some things bubblewrap doesn&rsquo;t do</h3>

<p>Here are some things that Docker/podman do that bubblewrap doesn&rsquo;t do:</p>

<ul>
<li>set up overlayfs mounts for you, so that your changes to the filesystem don&rsquo;t affect the base image</li>
<li>set up networking bridges so that you can connect to a webserver inside the container</li>
<li>probably a bunch more stuff that I&rsquo;m not thinking of</li>
</ul>

<p>In general, bubblewrap is a much lower level tool than something like Docker.</p>

<p>Also, bubblewrap seems to have pretty different goals than Docker &ndash; the README
seems to say that it&rsquo;s intended as a tool for sandboxing desktop software (I
think it comes from <a href="https://flatpak.org/">flatpak</a>).</p>

<h3 id="running-a-container-image-with-bubblewrap">running a container image with bubblewrap</h3>

<p>I couldn&rsquo;t find instructions for running a Docker container image with
bubblewrap, so here they are. Basically I just use Docker to download the
container image and put it into a directory and then run it with <code>bwrap</code>:</p>

<p>There&rsquo;s also a tool called <a href="https://github.com/projectatomic/bwrap-oci">bwrap-oci</a> which looks cool but I
couldn&rsquo;t get it to compile.</p>

<pre><code>mkdir rootfs
docker export $(docker create frapsoft/fish) | tar -C rootfs -xf -
bwrap \
    --bind $PWD/rootfs / \
    --proc /proc --dev /dev \
    --uid 0 \
    --unshare-pid \
    --unshare-net \
    fish
</code></pre>

<p>One important thing to note is that this doesn&rsquo;t create a temporary overlay
filesystem for the container&rsquo;s file writes, so it&rsquo;ll let the container edit
files in the image.</p>

<p>I wrote a post about <a href="https://jvns.ca/blog/2019/11/18/how-containers-work--overlayfs/">overlay filesystems</a> if
you want to see how you could do that yourself though.</p>

<h3 id="running-containers-with-bubblewrap-isn-t-the-same-as-with-podman">running &ldquo;containers&rdquo; with bubblewrap isn&rsquo;t the same as with podman</h3>

<p>I just gave an example of how to &ldquo;run a container&rdquo; with bubblewrap, and you
might think &ldquo;cool, this is just like podman but faster!&rdquo;. It is not, and it&rsquo;s
actually unlike using podman in even more ways than I expected.</p>

<p>I put &ldquo;container&rdquo; in scare quotes because there are two ways to define &ldquo;container&rdquo;:</p>

<ul>
<li>something that implements <a href="https://opencontainers.org/about/overview/">OCI runtime specification</a></li>
<li>any way of running a process in a way that&rsquo;s somehow isolated from the host system</li>
</ul>

<p>bubblewrap is a &ldquo;container&rdquo; tool in the second sense. It definitely provides
isolation, and it does that using the same features &ndash; Linux namespaces &ndash; as
Docker.</p>

<p>But it&rsquo;s not a container tool in the first sense. And it&rsquo;s a lower level tool
so you can get into a bunch of weird states and you really need to think about
all the weird details of how container work while using it.</p>

<p>For the rest of the post I&rsquo;m going to talk about some weird things that can
happen with bubblewrap that would not happen with podman/Docker.</p>

<h3 id="weird-thing-1-processes-that-don-t-exist">weird thing 1: processes that don&rsquo;t exist</h3>

<p>Here&rsquo;s an example of a weird situation I got into with bubblewrap that confused
me for a minute:</p>

<pre><code>$ bwrap --ro-bind / / --unshare-all bash
$ ps aux
... some processes
root      390073  0.0  0.0   2848   124 pts/9    S    14:28   0:00 bwrap --ro-bind / / --unshare-all --uid 0 bash
... some other processes
$ kill 390073
bash: kill: (390073) - No such process
$ ps aux | grep 390073
root      390073  0.0  0.0   2848   124 pts/9    S    14:28   0:00 bwrap --ro-bind / / --unshare-all --uid 0 bash
</code></pre>

<p>Here&rsquo;s what happened</p>

<ul>
<li>I started a bash shell inside bubblewrap</li>
<li>I ran <code>ps aux</code>, and saw a process with PID  <code>390073</code></li>
<li>I try to kill the process. It fails with the error <code>no such process</code>. What?</li>
<li>I ran <code>ps aux</code>, and still see the process with PID  <code>390073</code></li>
</ul>

<p>What&rsquo;s going on? Why doesn&rsquo;t the process <code>390073</code> exist, even though <code>ps</code> says it does? Isn&rsquo;t that impossible?</p>

<p>Well, the problem is that <code>ps</code> doesn&rsquo;t actually list all the processes in your
current PID namespace. Instead, it iterates through all the entries in <code>/proc</code>
and prints those out. Usually, what&rsquo;s in <code>/proc</code> is actually the same as the processes on your system.</p>

<p>But with Linux containers these things can get out of sync. What&rsquo;s happening in
this example is that we have the <code>/proc</code> from the host PID namespace, but those
aren&rsquo;t actually the processes that we have access to in our PID namespace.</p>

<p>Passing <code>--proc /proc</code> to bwrap fixes the issue &ndash; <code>ps</code> then actually lists the correct processes.</p>

<pre><code>$ bwrap --ro-bind / / --unshare-all --dev /dev --proc /proc ps aux
USER         PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
bork           1  0.0  0.0   3644   136 ?        S+   16:21   0:00 bwrap --ro-bind / / --unshare-all --dev /dev --proc /proc ps au
bork           2  0.0  0.0  21324  1552 ?        R+   16:21   0:00 ps aux
</code></pre>

<p>Just 2 processes! Everything is normal!</p>

<h3 id="weird-thing-2-trying-to-listen-on-port-80">weird thing 2: trying to listen on port 80</h3>

<p>Passing <code>--uid 0</code> to bubblewrap makes the user inside the container <code>root</code>. You
might think that this means that the root user has administrative privileges
inside the container, but that&rsquo;s not true!</p>

<p>For example, let&rsquo;s try to listen on port 80:</p>

<pre><code>$ bwrap --ro-bind / / --unshare-all --uid 0 nc -l 80
nc: Permission denied
</code></pre>

<p>What&rsquo;s going on here is that the new root user actually doesn&rsquo;t have the
<strong>capabilities</strong> it needs to listen on port 80. (you need special permissions
to listen on ports less than 1024, and 80 is less than 1024)</p>

<p>There&rsquo;s actually a capability specifically for listening on privileged ports
called <code>CAP_NET_BIND_SERVICE</code>.</p>

<p>So to fix this all we need to do is to tell bubblewrap to give our user that
capability.</p>

<pre><code>$ bwrap --ro-bind / / --unshare-all --uid 0 --cap-add cap_net_bind_service nc -l 80
(no output, success!!!)
</code></pre>

<p>This works! Hooray!</p>

<h3 id="finding-the-right-capabilities-is-pretty-annoying">finding the right capabilities is pretty annoying</h3>

<p>bubblewrap doesn&rsquo;t give out any capabilities by default, and I find that
figuring out all the right capabilities and adding them manually is kind of
annoying. Basically my process is</p>

<ul>
<li>run the thing</li>
<li>see what fails</li>
<li>read <code>man capabilities</code> to figure out what capabilities I&rsquo;m missing</li>
<li>add the capability with <code>--cap-add</code></li>
<li>repeat until everything is running</li>
</ul>

<p>But that&rsquo;s the price I pay for wanting things to be fast I guess :)</p>

<h3 id="weird-thing-2b-dev-dev-makes-listening-on-privileged-ports-not-work">weird thing 2b:  <code>--dev /dev</code> makes listening on privileged ports not work</h3>

<p>One other strange thing is that if I take the exact same command above (which
worked!) and add <code>--dev /dev</code> (to set up the <code>/dev/</code> directory), it causes it to not work again:</p>

<pre><code>$ bwrap --ro-bind / / --dev /dev --unshare-all --uid 0 --cap-add cap_net_bind_service nc -l 80
nc: Permission denied
</code></pre>

<p>I think this might be a bug in bubblewrap, but I haven&rsquo;t mustered the courage
to dive into the bubblewrap code and start investigating yet. Or maybe there&rsquo;s
something obvious I&rsquo;m missing!</p>

<h3 id="weird-thing-3-uid-mappings">weird thing 3: UID mappings</h3>

<p>Another slightly weird thing was &ndash; I tried to run <code>apt-get update</code> inside a bubblewrap Ubuntu container and everything went very poorly.</p>

<p>Here&rsquo;s how I ran <code>apt-get update</code> inside the Ubuntu container:</p>

<pre><code>mkdir rootfs
docker export $(docker create ubuntu:20.04) | tar -C rootfs -xf -
bwrap \
    --bind $PWD/rootfs / \
    --proc /proc\
    --uid 0 \
    --unshare-pid \
    apt-get update
</code></pre>

<p>And here are the error messages:</p>

<pre><code>E: setgroups 65534 failed - setgroups (1: Operation not permitted)
E: setegid 65534 failed - setegid (22: Invalid argument)
E: seteuid 100 failed - seteuid (22: Invalid argument)
E: setgroups 0 failed - setgroups (1: Operation not permitted)
.... lots more similar errors
</code></pre>

<p>At first I thought &ldquo;ok, this is a capabilities problem, I need to set
<code>CAP_SETGID</code> or something to give the container permission to change groups. But I did that and it didn&rsquo;t help at all!</p>

<p>I think what&rsquo;s going on here is a problem with UID maps. What are UID maps?
Well, every time you run a container using &ldquo;user namespaces&rdquo; (which podman is
doing), it creates a mapping of UIDs inside the container to UIDs on the host.</p>

<p>Let&rsquo;s look that the UID maps! Here&rsquo;s how to do that:</p>

<pre><code>root@kiwi:/# cat /proc/self/uid_map 
         0       1000          1
root@kiwi:/# cat /proc/self/gid_map 
      1000       1000          1
</code></pre>

<p>This is saying that user 0 in the container is mapped to user 1000 on in the
host, and group 1000 is mapped to group 1000. (My normal user&rsquo;s UID/GID is 1000, so this makes sense). You can find out
about this <code>uid_map</code> file in <code>man user_namespaces</code>.</p>

<p>All other users/groups that aren&rsquo;t 1000 are mapped to user 65534 by default, according
to <code>man user_namespaces</code>.</p>

<h3 id="what-s-going-on-non-mapped-users-can-t-be-used">what&rsquo;s going on: non-mapped users can&rsquo;t be used</h3>

<p>The only users and groups that have been mapped are <code>0</code> and <code>1000</code>. But <code>man user_namespaces</code> says:</p>

<blockquote>
<p>After the uid_map and gid_map files have been written, only the mapped values may be used in system calls that change user and group IDs.</p>
</blockquote>

<p><code>apt</code> is trying to use users 100 and 65534. Those aren&rsquo;t on the list of mapped
users! So they can&rsquo;t be used!</p>

<p>This works fine in podman, because podman sets up its UID and GID mappings differently:</p>

<pre><code>$ podman run -it ubuntu:20.04 bash
root@793d03a4d773:/# cat /proc/self/uid_map
         0       1000          1
         1     100000      65536
root@793d03a4d773:/# cat /proc/self/gid_map
         0       1000          1
         1     100000      65536
</code></pre>

<p>All the users get mapped, not just 1000.</p>

<p>I don&rsquo;t quite know how to fix this, but I think it&rsquo;s probably possible in
bubblewrap to set up the uid mappings the same way as podman does &ndash; there&rsquo;s an
<a href="https://github.com/containers/bubblewrap/issues/468">issue about it here that links to a workaround</a>.</p>

<p>But this wasn&rsquo;t an actual problem I was trying to solve so I didn&rsquo;t dig further
into it.</p>

<h3 id="a-quick-note-on-firecracker">a quick note on Firecracker</h3>

<p>Someone asked &ldquo;would Firecracker work here?&rdquo; (I <a href="https://jvns.ca/blog/2021/01/23/firecracker--start-a-vm-in-less-than-a-second/">wrote about Firecracker</a> last year).</p>

<p>My experience with Firecracker VMs is that they use kind of a lot of RAM (like
50MB?), which makes sense because they&rsquo;re VMs. And when I tried Firecracker on
a tiny machine (with ~256MB of RAM / a tiny CPU), the startup times were 2-3
seconds.</p>

<p>I&rsquo;m sure it&rsquo;s possible to optimize Firecracker to be a bit faster, but at the
end of the day I think it&rsquo;s a VM and it&rsquo;s not going to be anywhere near as low
overhead as a process &ndash; there&rsquo;s a whole operating system to start!</p>

<p>So Firecracker would add a lot more overhead than I want in this case.</p>

<h3 id="bubblewrap-works-pretty-great">bubblewrap works pretty great!</h3>

<p>I&rsquo;ve talked about a bunch of issues, but the things I&rsquo;ve been trying to do in bubblewrap
have been very constrained and it&rsquo;s actually been pretty simple. For example, I
was working on a git project where I really just want to run <code>git</code> inside a
container and map a git repository from the host.</p>

<p>That&rsquo;s very simple to get to work with bubblewrap! There were basically no weird problems!
It&rsquo;s really fast!</p>

<p>So I&rsquo;m pretty excited about this tool and I might use it for more stuff in the
future.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[sqlite-utils: a nice way to import data into SQLite for analysis]]></title>
    <link href="https://jvns.ca/blog/2022/05/12/sqlite-utils--a-nice-way-to-import-data-into-sqlite/"/>
    <updated>2022-05-12T09:35:06+00:00</updated>
    <id>https://jvns.ca/blog/2022/05/12/sqlite-utils--a-nice-way-to-import-data-into-sqlite/</id>
    <content type="html"><![CDATA[

<p>Hello! This is a quick post about a nice tool I found recently called <a href="https://sqlite-utils.datasette.io">sqlite-utils</a>, from the <a href="https://jvns.ca/#cool-computer-tools---features---ideas">tools category</a>.</p>

<p>Recently I wanted to do some basic data analysis using data from my Shopify
store. So I figured I&rsquo;d query the Shopify API and import my data into SQLite,
and then I could make queries to get the graphs I want.</p>

<p>But this seemed like a lot of boring work, like I&rsquo;d have to write a
schema and write a Python program. So I hunted around for a solution, and I
found <code>sqlite-utils</code>, a tool designed to make it easy to import arbitrary data
into SQLite to do data analysis on the data.</p>

<h3 id="sqlite-utils-automatically-generates-a-schema">sqlite-utils automatically generates a schema</h3>

<p>The Shopify data has about a billion fields and I really did not want to type
out a schema for it. <code>sqlite-utils</code> solves this problem: if I have an array of
JSON orders, I can create a new SQLite table with that data in it like this:</p>

<pre><code>import sqlite_utils

orders = ... # (some code to get the `orders` array here)

db = sqlite_utils.Database('orders.db')
db['shopify_orders'].insert_all(orders)
</code></pre>

<h3 id="you-can-alter-the-schema-if-there-are-new-fields-with-alter">you can alter the schema if there are new fields (with <code>alter</code>)</h3>

<p>Next, I ran into a problem where on the 5th page of downloads, the JSON
contained a new field that I hadn&rsquo;t seen before.</p>

<p>Luckily, <code>sqlite-utils</code> thought of that: there&rsquo;s an <code>alter</code> flag which will
update the table&rsquo;s schema to include the new fields.  ```</p>

<p>Here&rsquo;s what the code for that looks like</p>

<pre><code>db['shopify_orders'].insert_all(orders, alter=True)
</code></pre>

<h3 id="you-can-deduplicate-existing-rows-with-upsert">you can deduplicate existing rows (with <code>upsert</code>)</h3>

<p>Next I ran into a problem where sometimes when doing a sync, I&rsquo;d download data
from the API where some of it was new and some wasn&rsquo;t.</p>

<p>So I wanted to do an &ldquo;upsert&rdquo; where it only created new rows if the item didn&rsquo;t
already exist. <code>sqlite-utils</code> also thought of this, and there&rsquo;s an <code>upsert</code>
method.</p>

<p>For this to work you have to specify the primary key. For me that was
<code>pk=&quot;id&quot;</code>. Here&rsquo;s what my final code looks like:</p>

<pre><code>db['shopify_orders'].upsert_all(
    orders,
    pk=&quot;id&quot;,
    alter=True
)
</code></pre>

<h3 id="there-s-also-a-command-line-tool">there&rsquo;s also a command line tool</h3>

<p>I&rsquo;ve talked about using <code>sqlite-utils</code> as a library so far, but there&rsquo;s also a
command line tool which is really useful.</p>

<p>For example, this inserts the data from a <code>plants.csv</code> into a <code>plants</code> table:</p>

<pre><code>sqlite-utils insert plants.db plants plants.csv --csv
</code></pre>

<h3 id="format-conversions">format conversions</h3>

<p>I haven&rsquo;t tried this yet, but here&rsquo;s a cool example from the help docs of how
you can do format conversions, like converting a string to a float:</p>

<pre><code>sqlite-utils insert plants.db plants plants.csv --csv --convert '
return {
  &quot;name&quot;: row[&quot;name&quot;].upper(),
  &quot;latitude&quot;: float(row[&quot;latitude&quot;]),
  &quot;longitude&quot;: float(row[&quot;longitude&quot;]),
}'
</code></pre>

<p>This seems really useful for CSVs, where by default it&rsquo;ll often interpret numeric
data as strings if you don&rsquo;t do this conversions.</p>

<h3 id="metabase-seems-nice-too">metabase seems nice too</h3>

<p>Once I had all the data in SQLite, I needed a way to draw graphs with it. I
wanted some dashboards, so I ended up using <a href="https://www.metabase.com/">Metabase</a>, an open source business
intelligence tool. I found it very straightforward and it seems like a really
easy way to turn SQL queries into graphs.</p>

<p>This whole setup (sqlite-utils + metabase + SQL) feels a lot easier to use than
my previous setup, where I had a custom Flask website that used plotly and
pandas to draw graphs.</p>

<h3 id="that-s-all">that&rsquo;s all!</h3>

<p>I was really delighted by <code>sqlite-utils</code>, it was super easy to use and it did
everything I wanted.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pages that didn't make it into "How DNS Works"]]></title>
    <link href="https://jvns.ca/blog/2022/05/10/pages-that-didn-t-make-it-into--how-dns-works-/"/>
    <updated>2022-05-10T14:44:24+00:00</updated>
    <id>https://jvns.ca/blog/2022/05/10/pages-that-didn-t-make-it-into--how-dns-works-/</id>
    <content type="html"><![CDATA[

<p>Hello! A couple weeks ago I released a new zine called <a href="https://wizardzines.com/zines/dns/">How DNS Works</a>.</p>

<p>When I started writing that zine (in, uh, January 2021), I originally had in
mind a broader zine on &ldquo;everything you need to know to own a domain&rdquo;. So it had
a bunch of pages on domain registration, TLS, and email.</p>

<p>At the time I thought &ldquo;I can just explain DNS in like 5 pages, it&rsquo;s not
that complicated, there will be lots of space for other topics about domains&rdquo;.
I was extremely wrong about that and it turned out I needed all 28 pages to
explain DNS. So I ended up deciding to just focus the zine on DNS and all those
other topics didn&rsquo;t make it into the final zine.</p>

<p>This morning it occurred to me that instead of letting all of the old draft
pages languish in purgatory on my hard drive, I could post those extra pages
here all together on my blog. So here they are!</p>

<h3 id="disclaimer-not-super-cohesive">disclaimer: not super cohesive</h3>

<p>I will say (as a disclaimer) that these pages aren&rsquo;t as cohesive as I usually
like my zines to be and they definitely do not tell you everything you need to
need to know to own a domain.</p>

<h3 id="domain-registration">domain registration</h3>

<p><img src="https://jvns.ca/images/domain-extras/buying-domain.png">
<img src="https://jvns.ca/images/domain-extras/registrar.png">
<img src="https://jvns.ca/images/domain-extras/domain-expiry.png">
<img src="https://jvns.ca/images/domain-extras/transfers.png">
<img src="https://jvns.ca/images/domain-extras/domain-privacy.png">
<img src="https://jvns.ca/images/domain-extras/tld.png"></p>

<h3 id="email">email</h3>

<p><img src="https://jvns.ca/images/domain-extras/receiving-email.png">
<img src="https://jvns.ca/images/domain-extras/sending-email.png"></p>

<p>I should say that these 2 pages don&rsquo;t really do email justice &ndash; email security
is a HUGE topic that honestly I don&rsquo;t know a lot about.</p>

<h3 id="tls">TLS</h3>

<p><img src="https://jvns.ca/images/domain-extras/why-tls-matters.png">
<img src="https://jvns.ca/images/domain-extras/tls-certificates.png"></p>

<p>These two pages also don&rsquo;t remotely cover TLS, it&rsquo;s possible I&rsquo;ll write more in
depth about TLS at some point. Who knows!</p>

<h3 id="that-s-all">that&rsquo;s all!</h3>

<p>though I will say: if you liked these, you might be interested in buying <a href="https://wizardzines.com/zines/dns/">How DNS Works</a> :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[New zine: How DNS Works!]]></title>
    <link href="https://jvns.ca/blog/2022/04/26/new-zine--how-dns-works-/"/>
    <updated>2022-04-26T07:28:10+00:00</updated>
    <id>https://jvns.ca/blog/2022/04/26/new-zine--how-dns-works-/</id>
    <content type="html"><![CDATA[

<p>Hello! On Thursday we released a new zine about one of my favourite computer systems: DNS!</p>

<p>You can get it for $12 here:
<a href="https://wizardzines.com/zines/dns">https://wizardzines.com/zines/dns</a>, or get
an <a href="https://wizardzines.com/zines/all-the-zines/">11-pack of all my zines here</a>.</p>

<p>Here&rsquo;s the cover and table of contents:</p>

<div align="center">
<a href="https://wizardzines.com/zines/dns"><img width="400px" src="https://jvns.ca/images/dns-cover.png"></a>
<a href="https://jvns.ca/images/dns-toc.png"><img width="400px" src="https://jvns.ca/images/dns-toc.png"></a>
</div>

<h3 id="why-dns">why DNS?</h3>

<p>I wanted to write about DNS for three reasons:</p>

<ol>
<li><strong>DNS is everywhere!</strong> You basically can’t use the internet without using
DNS — nobody is going to memorize all the IP addresses for every domain they
use. You need to look them up with DNS!</li>
<li><strong>DNS has a really cool decentralized design!</strong> I love that it gives you
control of your own little corner of the internet (it just costs ~$12/year to
own a domain!), I love that the basic design is relatively straightforward,
and I love that it’s worked basically the same way for 40 years and scaled
relatively well over time</li>
<li><strong>DNS is very frustrating!</strong> I’ve run into some VERY weird DNS problems over
the years, and it can feel magical and incomprehensible if you don’t know
how it works. But once you learn how DNS works, these problems all become
totally possible to understand.</li>
</ol>

<p>And I&rsquo;ve never seen a clear explanation of DNS that included all of the
technical details I wanted to know, so I decided to write one.</p>

<h3 id="a-dns-playground">a DNS playground!</h3>

<p>I find the most fun way to learn is by experimenting and breaking things! So back in December,
<a href="https://marieflanagan.com/">Marie</a> and I built a playground where you can do
weird DNS experiments with no consequences if you mess something up.</p>

<p>It’s called <a href="https://messwithdns.net">Mess With DNS</a>. It has examples of
experiments you can try, and you’ve very encouraged to come up with your own
experiments.</p>

<p>There&rsquo;s also <a href="https://jvns.ca/blog/2021/12/15/mess-with-dns/">a blog post</a> from when we released it in December.</p>

<h3 id="a-simple-dns-lookup-tool">a simple DNS lookup tool</h3>

<p>I also built a little DNS lookup tool at <a href="https://dns-lookup.jvns.ca">https://dns-lookup.jvns.ca</a> to provide
an easy way to do DNS queries without using the command line. Even though I
love the command line I actually find myself using it all the time.</p>

<h3 id="what-we-left-out-dns-security">what we left out: DNS security</h3>

<p>The main thing that <em>isn&rsquo;t</em> in the zine is DNS security (DNS over HTTPS, DNS
over TLS, DNSSEC).  This is because the DNS security landscape still seems to
be evolving, and I didn&rsquo;t feel confident that we could write something that
would still be true in 5-10 years.</p>

<p>I think I&rsquo;ll try to write a blog post about DNS security at some point though.</p>

<h3 id="identifying-common-points-of-confusion-is-amazing">identifying common points of confusion is amazing</h3>

<p>I mentioned earlier that my friend <a href="https://marieflanagan.com/">Marie Claire LeBlanc Flanagan</a> and I built
Mess With DNS together in December. That was really fun, so Marie and I decided
to work together on this zine too &ndash; we paired on it for about an hour every
weekday for almost 4 months. I&rsquo;m pretty sure I wouldn&rsquo;t have finished the zine
without her.</p>

<p>She was incredibly helpful with everything to do with the zine (editing!
character design! marketing! rewriting the NS records page 5 times!), but one
of the biggest things she improved for this zine was <em>feedback</em>.</p>

<p>Usually I only get feedback from maybe 10 beta readers, but this time we wanted
to hear from more people and get better at identifying common points of confusion.</p>

<p>We did this by building a small custom feedback website where people could
click on a page and leave feedback (&ldquo;I have a question! This is confusing! I
learned something! I have a suggestion! I love this!&ldquo;).</p>

<p>Building a custom website let us organize the feedback way more easily and hear
from more people &ndash; in the end we got ~1200 feedback items from ~60 people and
all of the feedback made the zine a LOT better.</p>

<p>I might write a longer meta post about all of this later.</p>

<h3 id="some-blog-posts-leading-up-to-this-zine">some blog posts leading up to this zine</h3>

<p>I wrote a bunch of blog posts about DNS over the last year or so while thinking
about this zine. Here they all are:</p>

<ul>
<li><a href="https://jvns.ca/blog/how-updating-dns-works/">What happens when you update your DNS?</a></li>
<li><a href="https://jvns.ca/blog/2021/02/24/a-little-tool-to-make-dns-queries/">A little tool to make DNS queries</a></li>
<li><a href="https://jvns.ca/blog/2021/03/31/dnspeep-tool/">A tool to spy on your DNS queries: dnspeep</a></li>
<li><a href="https://jvns.ca/blog/2021/11/04/how-do-you-tell-if-a-problem-is-caused-by-dns/">How do you tell if a problem is caused by DNS?</a></li>
<li><a href="https://jvns.ca/blog/2021/12/06/dns-doesn-t-propagate/">DNS &ldquo;propagation&rdquo; is actually caches expiring</a></li>
<li><a href="https://jvns.ca/blog/2022/01/05/why-might-you-run-your-own-dns-server-/">Why might you run your own DNS server?</a></li>
<li><a href="https://jvns.ca/blog/2022/01/15/some-ways-dns-can-break/">Some ways DNS can break</a></li>
<li><a href="https://jvns.ca/blog/2022/02/01/a-dns-resolver-in-80-lines-of-go/">A toy DNS resolver</a></li>
<li><a href="https://jvns.ca/blog/2022/02/14/some-dns-terminology/">The multiple meanings of &ldquo;nameserver&rdquo; and &ldquo;DNS resolver&rdquo;</a></li>
</ul>

<h3 id="you-can-get-a-print-copy-shipped-to-you">you can get a print copy shipped to you!</h3>

<p>There&rsquo;s always been the option to print the zines yourself on your home printer.</p>

<p>But this time there&rsquo;s a new option too: you can get a print copy shipped to
you! (just click on the &ldquo;print version&rdquo; link on <a href="https://wizardzines.com/zines/dns/">this
page</a>)</p>

<p>The only caveat is that the international shipping costs are unreasonably high,
so if you&rsquo;re outside the US it probably doesn&rsquo;t make sense to get just 1 zine
shipped to you. I&rsquo;m still trying to find a workaround for that. Orders of $60+
do include free international shipping though.</p>

<p>Here&rsquo;s the link to get the zine again:
<a href="https://wizardzines.com/zines/dns/">https://wizardzines.com/zines/dns/</a></p>

<h3 id="thank-you">thank you</h3>

<p>If you&rsquo;ve bought zines in the past, thanks so much for all your support over
the years. None of this would be possible without you.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A list of new(ish) command line tools]]></title>
    <link href="https://jvns.ca/blog/2022/04/12/a-list-of-new-ish--command-line-tools/"/>
    <updated>2022-04-12T15:30:07+00:00</updated>
    <id>https://jvns.ca/blog/2022/04/12/a-list-of-new-ish--command-line-tools/</id>
    <content type="html"><![CDATA[

<p>Hello! Today I asked <a href="https://twitter.com/b0rk/status/1513903221466664962">on twitter</a> about newer
command line tools, like <code>ripgrep</code> and <code>fd</code> and <code>fzf</code> and <code>exa</code> and <code>bat</code>.</p>

<p>I got a bunch of replies with tools I hadn&rsquo;t heard of, so I thought I&rsquo;d make a
list here. A lot of people also pointed at the <a href="https://github.com/ibraheemdev/modern-unix">modern-unix</a> list.</p>

<h3 id="replacements-for-standard-tools">replacements for standard tools</h3>

<ul>
<li><a href="https://github.com/BurntSushi/ripgrep/">ripgrep</a>, <a href="https://github.com/ggreer/the_silver_searcher">ag</a>, <a href="https://github.com/beyondgrep/ack3">ack</a> (grep)</li>
<li><a href="https://github.com/ogham/exa">exa</a>, <a href="https://github.com/Peltoche/lsd">lsd</a> (ls)</li>
<li><a href="https://mosh.org/">mosh</a> (ssh)</li>
<li><a href="https://github.com/sharkdp/bat">bat</a> (cat)</li>
<li><a href="https://github.com/dandavison/delta">delta</a> (a pager for git)</li>
<li><a href="https://github.com/sharkdp/fd">fd</a> (find)</li>
<li><a href="https://www.nlnetlabs.nl/projects/ldns/about/">drill</a>, <a href="https://github.com/ogham/dog">dog</a> (dig)</li>
<li><a href="https://github.com/muesli/duf">duf</a> (df)</li>
<li><a href="https://github.com/bootandy/dust">dust</a>, ncdu (du)</li>
<li><a href="https://www.pgcli.com/">pgcli</a> (psql)</li>
<li><a href="https://github.com/ClementTsang/bottom">btm</a>, <a href="https://github.com/aristocratos/btop">btop</a>, <a href="https://github.com/nicolargo/glances">glances</a>, <a href="https://github.com/aksakalli/gtop">gtop</a>, <a href="https://github.com/bvaisvil/zenith">zenith</a> (top)</li>
<li><a href="https://tldr.sh/">tldr</a> (man, sort of)</li>
<li><a href="https://github.com/chmln/sd">sd</a> (sed)</li>
<li><a href="https://github.com/Wilfred/difftastic">difftastic</a> (diff)</li>
<li>mtr (traceroute)</li>
<li><a href="https://plocate.sesse.net/">plocate</a> (locate)</li>
<li>xxd, <a href="https://github.com/sharkdp/hexyl">hexyl</a> (hexdump)</li>
</ul>

<h3 id="new-inventions">new inventions</h3>

<p>Here are some tools that are not exactly replacements for standard tools:</p>

<ul>
<li><a href="https://github.com/rupa/z">z</a>, <a href="https://github.com/clvv/fasd">fasd</a>, <a href="https://github.com/wting/autojump">autojump</a>, <a href="https://github.com/ajeetdsouza/zoxide">zoxide</a> (tools to make it easier to find files / change directories)</li>
<li><a href="https://github.com/Canop/broot">broot</a>, <a href="https://github.com/jarun/nnn">nnn</a>, <a href="https://github.com/ranger/ranger">ranger</a> (file manager)</li>
<li><a href="https://github.com/direnv/direnv">direnv</a> (load environment variables depending on the current directory)</li>
<li><a href="https://github.com/junegunn/fzf">fzf</a>, <a href="https://github.com/peco/peco">peco</a> (&ldquo;fuzzy finder&rdquo;)</li>
<li><a href="https://github.com/schollz/croc">croc</a> and <a href="https://github.com/magic-wormhole/magic-wormhole">magic-wormhole</a> (send files from one computer to another)</li>
<li><a href="https://github.com/sharkdp/hyperfine">hyperfine</a> (benchmarking)</li>
<li><a href="https://httpie.io/">httpie</a>, <a href="https://github.com/rs/curlie">curlie</a>, <a href="https://github.com/ducaale/xh">xh</a> (for making HTTP requests)</li>
<li><a href="https://github.com/eradman/entr">entr</a> (run arbitrary commands when files change)</li>
<li><a href="https://github.com/asdf-vm/asdf">asdf</a> (version manager for multiple languages)</li>
<li><a href="https://github.com/jonas/tig">tig</a>, <a href="https://github.com/jesseduffield/lazygit">lazygit</a> (interactive interfaces for git)</li>
<li><a href="https://github.com/jesseduffield/lazydocker">lazydocker</a> (interactive interface for docker)</li>
<li><a href="https://github.com/theryangeary/choose">choose</a> (the basics of awk/cut)</li>
<li><a href="https://github.com/bcicen/ctop">ctop</a> (top for containers)</li>
<li><a href="https://github.com/nvbn/thefuck">fuck</a> (autocorrect command line errors)</li>
<li><a href="https://tmate.io/">tmate</a> (share your terminal with a friend)</li>
<li><a href="https://github.com/tstack/lnav">lnav</a>, <a href="https://github.com/rcoh/angle-grinder">angle-grinder</a> (tools for managing logs)</li>
<li><a href="https://github.com/visit1985/mdp">mdp</a>, <a href="https://github.com/charmbracelet/glow">glow</a> (ways to display markdown in the terminal)</li>
<li>pbcopy/pbpaste (for clipboard &lt;&gt; stdin/stdout) maybe aren&rsquo;t &ldquo;new&rdquo; but were mentioned a lot. You can <a href="https://stackoverflow.com/questions/5130968/how-can-i-copy-the-output-of-a-command-directly-into-my-clipboard/41843618#41843618">use xclip</a> to do the same thing on Linux.</li>
</ul>

<p><strong>JSON/YAML/CSV things:</strong></p>

<ul>
<li><a href="https://stedolan.github.io/jq/">jq</a> (a great JSON-wrangling tool)</li>
<li><a href="https://github.com/kellyjonbrazil/jc">jc</a> (convert various tools&rsquo; output into JSON)</li>
<li><a href="https://github.com/jpmens/jo">jo</a> (create JSON objects)</li>
<li><a href="https://github.com/mikefarah/yq">yq</a>  (like <code>jq</code>, but for YAML). there&rsquo;s also <a href="https://github.com/kislyuk/yq">another yq</a></li>
<li><a href="https://github.com/wader/fq">fq</a> (like <code>jq</code>, but for binary)</li>
<li><a href="https://github.com/mgdm/htmlq">htmlq</a> (like <code>jq</code>, but for HTML)</li>
<li><a href="https://github.com/antonmedv/fx">fx</a> (interactive json tool)</li>
<li><a href="https://github.com/PaulJuliusMartinez/jless">jless</a> (json pager)</li>
<li><a href="https://github.com/BurntSushi/xsv">xsv</a> (a command line tool for csv files, from burntsushi)</li>
<li><a href="https://www.visidata.org/">visidata</a> (&ldquo;an interactive multitool for tabular data&rdquo;)</li>
<li><a href="https://github.com/johnkerl/miller">miller</a> (&ldquo;like awk/sed/cut/join/sort for CSV/TSV/JSON/JSON lines&rdquo;)</li>
</ul>

<p><strong>grep things:</strong></p>

<ul>
<li><a href="https://pdfgrep.org/">pdfgrep</a> (grep for PDF)</li>
<li><a href="https://github.com/tomnomnom/gron">gron</a> (make JSON greppable)</li>
<li><a href="https://github.com/phiresky/ripgrep-all">ripgrep-all</a> (ripgrep, but also PDF, zip, ebooks, etc)</li>
</ul>

<h3 id="less-new-tools">less-new tools</h3>

<p>Here are a few of not-so-new tools folks mentioned aren&rsquo;t that well known:</p>

<ul>
<li>pv (&ldquo;pipe viewer&rdquo;, gives you a progress bar for a pipe)</li>
<li>vidir (from <a href="https://joeyh.name/code/moreutils">moreutils</a>, lets you batch rename/delete files in vim)</li>
<li>sponge, ts, parallel (also from moreutils)</li>
</ul>

<h3 id="some-of-my-favourites">some of my favourites</h3>

<p>My favourites of these that I use already are <code>entr</code>, <code>ripgrep</code>, <code>git-delta</code>,
<code>httpie</code>, <code>plocate</code>, and <code>jq</code>.</p>

<p>I&rsquo;m interested in trying out <code>direnv</code>, <code>btm</code>, <code>z</code>, <code>xsv</code>, and <code>duf</code>, but I
think the most exciting tool I learned about is <code>vidir</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Implementing a toy version of TLS 1.3]]></title>
    <link href="https://jvns.ca/blog/2022/03/23/a-toy-version-of-tls/"/>
    <updated>2022-03-23T12:25:30+00:00</updated>
    <id>https://jvns.ca/blog/2022/03/23/a-toy-version-of-tls/</id>
    <content type="html"><![CDATA[

<p>Hello! Recently I&rsquo;ve been thinking about how I find it fun to learn computer
networking by implementing working versions of real network protocols.</p>

<p>And it made me wonder &ndash; I&rsquo;ve implemented toy versions of
<a href="https://jvns.ca/blog/2013/10/31/day-20-scapy-and-traceroute/">traceroute</a>, <a href="https://jvns.ca/blog/2014/08/12/what-happens-if-you-write-a-tcp-stack-in-python/">TCP</a> and <a href="https://jvns.ca/blog/2022/02/01/a-dns-resolver-in-80-lines-of-go/">DNS</a>.
What about TLS? Could I implement a toy version of that to learn more about how it works?</p>

<p>I asked on Twitter if this would be hard, got <a href="https://twitter.com/Lukasaoz/status/1505593360521777157">some encouragement and pointers for where to start</a>, so I decided to go for it.</p>

<p>This was really fun and I learned a little more about how involved real
cryptography is &ndash; thanks to <a href="https://cryptopals.com/">cryptopals</a>, I already 100% believed that I should not invent my own
crypto implementations, and seeing how the crypto in TLS 1.3 works gave me even more of
an appreciation for why I shouldn&rsquo;t :)</p>

<p>As a warning: I am really not a cryptography person, I will probably say some
incorrect things about cryptography in this post and I absolutely do not know
the history of past TLS vulnerabilities that informed TLS 1.3&rsquo;s design.</p>

<p>All of that said, let&rsquo;s go implement some cryptography! All of my hacky code is <a href="https://github.com/jvns/tiny-tls/">on github</a>. I decided to use Go because I heard that Go has good crypto libraries.</p>

<h3 id="the-simplifications">the simplifications</h3>

<p>I only wanted to work on this for a few days at most, so I needed to make some
pretty dramatic simplifications to make it possible to get it done quickly.</p>

<p>I decided my goal was going to be to download this blog&rsquo;s homepage with TLS. So I
don&rsquo;t need to implement a fully general TLS implementation, I just need to
successfully connect to one website.</p>

<p>Specifically, this means that:</p>

<ul>
<li>I only support one cipher suite</li>
<li>I don&rsquo;t verify the server&rsquo;s certificate at all, I just ignore it</li>
<li>my parsing and message formatting can be extremely janky and fragile because I only need to be able to talk to one specific TLS implementation (and believe me, they are)</li>
</ul>

<h3 id="an-amazing-tls-resource-tls13-ulfheim-net">an amazing TLS resource: tls13.ulfheim.net</h3>

<p>Luckily, before starting this I remembered vaguely that I&rsquo;d seen a website that
explained every single byte in a TLS 1.3 connection, with detailed code examples to
reproduce every part. Some googling revealed that it was <a href="https://tls13.ulfheim.net">The New Illustrated TLS Connection</a>.</p>

<p>I can&rsquo;t stress enough how helpful this was, I looked at probably more than a
hundred times and I only looked at the TLS 1.3 RFC for a few small things.</p>

<h3 id="some-cryptography-basics">some cryptography basics</h3>

<p>Before I started working on this, my understanding of TLS was:</p>

<ol>
<li>at the beginning there&rsquo;s some sort of Diffie-Hellman key exchange</li>
<li>you use the key exchange to somehow (how???) get an AES symmetric key and encrypt the rest of the connection with AES</li>
</ol>

<p>This was sort of right, but it turns out it&rsquo;s more complicated than that.</p>

<p>Okay, let&rsquo;s get into my hacky toy TLS implementation. It hopefully goes without saying that you should absolutely not use this code for anything.</p>

<h3 id="step-1-say-hello">step 1: say hello</h3>

<p>First we need to send a &ldquo;Client Hello&rdquo; message. For my purposes this has just 4 pieces of information in it:</p>

<ol>
<li>A randomly generated public key</li>
<li>32 bytes of random data (the &ldquo;Client Random&rdquo;)</li>
<li>The domain name I want to connect to (<code>jvns.ca</code>)</li>
<li>The cipher suites/signature algorithms we want to use (which I just copied
from tls.ulfheim.net). This negotiation process is pretty important in
general but I&rsquo;m ignoring it because I only support one signature algorithm /
cipher suite.</li>
</ol>

<p>The most interesting part of this to me was part 1 &ndash; how do I generate the public key?</p>

<p>I was confused about this for a while but it ended up being just 2 lines of code.</p>

<pre><code>privateKey := random(32)
publicKey, err := curve25519.X25519(privateKey, curve25519.Basepoint)
</code></pre>

<p>You can see the rest of the code to generate the <a href="https://github.com/jvns/tiny-tls/blob/cb5a3665c3487ad1f1d5f917ad069c93dd44967e/format.go#L41">client hello message here</a>
but it&rsquo;s very boring, it&rsquo;s just a lot of bit fiddling.</p>

<h3 id="elliptic-curve-cryptography-is-cool">elliptic curve cryptography is cool</h3>

<p>I am not going to give an explanation of elliptic curve cryptography here,  but I just want to say how point out how cool it is that you can:</p>

<ul>
<li>generate a random 32-byte string as a private key</li>
<li>&ldquo;multiply&rdquo; the private key by the curve&rsquo;s base point to get the public key (this is elliptic curve &ldquo;multiplication&rdquo;, where <code>n * P</code> means &ldquo;add P to itself n times&rdquo;)</li>
<li>that&rsquo;s it!!</li>
</ul>

<p>I wrote &ldquo;multiply&rdquo; in scare quotes because this &ldquo;multiplication&rdquo; doesn&rsquo;t let you
multiply points on the elliptic curve by <em>each other</em>. You can only multiply a
point by an integer.</p>

<p>Here&rsquo;s the function signature  of the <code>X25519</code> function we use to do the
&ldquo;multiplication&rdquo;. You can see one of the arguments is called <code>scalar</code> and one
is called <code>point</code>. And the order of the arguments matters! If you switch them it
won&rsquo;t do the right thing.</p>

<pre><code>func X25519(scalar, point []byte) ([]byte, error)
</code></pre>

<p>I am not going to say more about elliptic curve cryptography here but I love how
simple this is to use &ndash; it seems a lot straightforward than RSA where your
private keys have to be prime numbers.</p>

<p>I don&rsquo;t know if &ldquo;you can use any 32-byte string as a private key&rdquo; is true
for all elliptic curves or just for this specific elliptic curve (<a href="https://en.wikipedia.org/wiki/Curve25519">Curve25519</a>).</p>

<h3 id="step-2-parse-the-server-hello">step 2: parse the server hello</h3>

<p>Next the server says hello. This is very boring, basically we just need to
parse it to get the server&rsquo;s public key which is 32 bytes. <a href="https://github.com/jvns/tiny-tls/blob/cb5a3665c3487ad1f1d5f917ad069c93dd44967e/format.go#L98-L131">Here&rsquo;s the code though</a>.</p>

<h3 id="step-3-calculate-the-keys-to-encrypt-the-handshake">step 3: calculate the keys to encrypt the handshake</h3>

<p>Now that we have the server&rsquo;s public key and we&rsquo;ve sent the server our public
key, we can start to calculate the keys we&rsquo;re going to use to actually encrypt
data.</p>

<p>I was surprised to learn that there are at least 4 different symmetric keys involved in TLS:</p>

<ul>
<li>client handshake key/iv (for the data the client sends in the handshake)</li>
<li>server handshake key/iv (for the data the server sends in the handshaek)</li>
<li>client application key/iv (for the rest of the data the client sends)</li>
<li>server application key/iv (for the rest of the data the server sends)</li>
<li>I think also another key for session resumption, but I didn&rsquo;t implement that</li>
</ul>

<p>We start out by combining the server&rsquo;s public key and our private key to get a
shared secret. This is called &ldquo;elliptic curve diffie hellman&rdquo; or ECDH and it&rsquo;s
pretty simple: &ldquo;multiply&rdquo; the server&rsquo;s private key by our public key:</p>

<pre><code>sharedSecret, err := curve25519.X25519(session.Keys.Private, session.ServerHello.PublicKey)
</code></pre>

<p>This gives us a 32-byte secret key that both the client and the server has. Yay!</p>

<p>But we need 96 bytes (16 + 12) * 4 of keys in total. That&rsquo;s more than 32 bytes!</p>

<h3 id="time-for-key-derivation">time for key derivation</h3>

<p>Apparently the way you turn a small key into more keys is called &ldquo;key
derivation&rdquo;, and TLS 1.3 uses an algorithm called &ldquo;HKDF&rdquo; to do this. I honestly do not
understand this but here is what my code to do it looks like.</p>

<p>It seems to involve alternately calling <code>hkdf.Expand</code> and <code>hkdf.Extract</code> over and
over again a bunch of times.</p>

<pre><code>func (session *Session) MakeHandshakeKeys() {
	zeros := make([]byte, 32)
	psk := make([]byte, 32)
	// ok so far
	if err != nil {
		panic(err)
	}
	earlySecret := hkdf.Extract(sha256.New, psk, zeros) // TODO: psk might be wrong
	derivedSecret := deriveSecret(earlySecret, &quot;derived&quot;, []byte{})
	session.Keys.HandshakeSecret = hkdf.Extract(sha256.New, sharedSecret, derivedSecret)
	handshakeMessages := concatenate(session.Messages.ClientHello.Contents(), session.Messages.ServerHello.Contents())

	cHsSecret := deriveSecret(session.Keys.HandshakeSecret, &quot;c hs traffic&quot;, handshakeMessages)
	session.Keys.ClientHandshakeSecret = cHsSecret
	session.Keys.ClientHandshakeKey = hkdfExpandLabel(cHsSecret, &quot;key&quot;, []byte{}, 16)
	session.Keys.ClientHandshakeIV = hkdfExpandLabel(cHsSecret, &quot;iv&quot;, []byte{}, 12)

	sHsSecret := deriveSecret(session.Keys.HandshakeSecret, &quot;s hs traffic&quot;, handshakeMessages)
	session.Keys.ServerHandshakeKey = hkdfExpandLabel(sHsSecret, &quot;key&quot;, []byte{}, 16)
	session.Keys.ServerHandshakeIV = hkdfExpandLabel(sHsSecret, &quot;iv&quot;, []byte{}, 12)
}
</code></pre>

<p>This was pretty annoying to get working because I kept passing the wrong
arguments to things. The only reason I managed it was because
<a href="https://tls13.ulfheim.net">https://tls13.ulfheim.net</a> provided a bunch of example inputs and outputs and
example code so I was able to write some unit tests and check my code against
the site&rsquo;s example implementation.</p>

<p>Anyway, eventually I got all my keys calculated and it was time to start decrypting!</p>

<h3 id="an-aside-on-ivs">an aside on IVs</h3>

<p>For each key there&rsquo;s also an &ldquo;IV&rdquo; which stands for &ldquo;initialization vector&rdquo;. The
idea seems to be to use a different initialization vector for every message we
encrypt/decrypt, for More Security &trade;.</p>

<p>In this implementation the way we get a different IV for each message is by
xoring the IV with the number of messages sent/received so far.</p>

<h3 id="step-4-write-some-decryption-code">step 4: write some decryption code</h3>

<p>Now that we have all these keys and IVs, we can write a <code>decrypt</code> function.</p>

<p>I thought that TLS just used AES, but apparently it uses something called
&ldquo;authentication encryption&rdquo; on top of AES that I hadn&rsquo;t heard of before.</p>

<p>The wikipedia article explanation of authenticated encryption is actually pretty clear:</p>

<blockquote>
<p>&hellip; authenticated encryption can provide security against <strong>chosen ciphertext</strong> attack. In these attacks, an adversary attempts to gain an advantage against a cryptosystem (e.g., information about the secret decryption key) by submitting carefully chosen ciphertexts to some &ldquo;decryption oracle&rdquo; and analyzing the decrypted results. Authenticated encryption schemes can recognize improperly-constructed ciphertexts and refuse to decrypt them. This, in turn, prevents the attacker from requesting the decryption of any ciphertext unless it was generated correctly using the encryption algorithm</p>
</blockquote>

<p>This makes sense to me because I did some of the cryptopals challenges and there&rsquo;s an attack a bit like this in <a href="https://cryptopals.com/sets/2/challenges/14">cryptopals set 2</a> (I don&rsquo;t know if it&rsquo;s the exact same thing).</p>

<p>Anyway, here&rsquo;s some code that uses authenticated encryption the way the TLS 1.3
spec says it should. I think GCM is an authenticated encryption algorithm.</p>

<pre><code>func decrypt(key, iv, wrapper []byte) []byte {

	block, err := aes.NewCipher(key)
	if err != nil {
		panic(err.Error())
	}

	aesgcm, err := cipher.NewGCM(block)
	if err != nil {
		panic(err.Error())
	}

	additional := wrapper[:5]
	ciphertext := wrapper[5:]

	plaintext, err := aesgcm.Open(nil, iv, ciphertext, additional)
	if err != nil {
		panic(err.Error())
	}
	return plaintext
}
</code></pre>

<h3 id="step-5-decrypt-the-server-handshake">step 5: decrypt the server handshake</h3>

<p>Next the server sends some more handshake data. This contains the certificate
and some other stuff.</p>

<p>Here&rsquo;s my code for decrypting the handshake. Basically it just reads the
encrypted data from the network, decrypts it, and saves it.</p>

<pre><code>record := readRecord(session.Conn)
if record.Type() != 0x17 {
    panic(&quot;expected wrapper&quot;)
}
session.Messages.ServerHandshake = decrypt(session.Keys.ServerHandshakeKey, session.Keys.ServerHandshakeIV, record)
</code></pre>

<p>You might notice that we don&rsquo;t actually <em>parse</em> this data at all &ndash; that&rsquo;s
because we don&rsquo;t need the contents, since we&rsquo;re not verifying the server&rsquo;s
certificate.</p>

<p>I was surprised that you don&rsquo;t technically need to look at the server&rsquo;s
certificate at all to make a TLS connection (though obviously you should verify it!). I thought you would need to at least parse it to get a
key out of it or something.</p>

<p>We do need to be able to hash the handshake for the next step though, so we
have to store it.</p>

<h3 id="step-6-derive-more-keys">step 6: derive more keys</h3>

<p>We use a hash of the SHA256 handshake data we just got from the server to
generate even more symmetric keys. This is almost the last step!</p>

<p>This is almost exactly the same as the key derivation code from before, but I&rsquo;m
including it because I was surprised by how much work needed to be done to generate all these keys.</p>

<pre><code>func (session *Session) MakeApplicationKeys() {
    handshakeMessages := concatenate(
        session.Messages.ClientHello.Contents(),
        session.Messages.ServerHello.Contents(),
        session.Messages.ServerHandshake.Contents())

    zeros := make([]byte, 32)
    derivedSecret := deriveSecret(session.Keys.HandshakeSecret, &quot;derived&quot;, []byte{})
    masterSecret := hkdf.Extract(sha256.New, zeros, derivedSecret)

    cApSecret := deriveSecret(masterSecret, &quot;c ap traffic&quot;, handshakeMessages)
    session.Keys.ClientApplicationKey = hkdfExpandLabel(cApSecret, &quot;key&quot;, []byte{}, 16)
    session.Keys.ClientApplicationIV = hkdfExpandLabel(cApSecret, &quot;iv&quot;, []byte{}, 12)

    sApSecret := deriveSecret(masterSecret, &quot;s ap traffic&quot;, handshakeMessages)
    session.Keys.ServerApplicationKey = hkdfExpandLabel(sApSecret, &quot;key&quot;, []byte{}, 16)
    session.Keys.ServerApplicationIV = hkdfExpandLabel(sApSecret, &quot;iv&quot;, []byte{}, 12)
}
</code></pre>

<h3 id="step-7-finish-the-handshake">step 7: finish the handshake</h3>

<p>Next we need to send a &ldquo;handshake finished&rdquo; message to the server to verify that everything is done. That code is <a href="https://github.com/jvns/tiny-tls/blob/cb5a3665c3487ad1f1d5f917ad069c93dd44967e/crypto.go#L177-L183">here</a>.</p>

<p>And now we&rsquo;re done the handshake! That was the hard part, sending and receiving
the data is relatively easy.</p>

<h3 id="step-8-make-a-http-request">step 8: make a HTTP request</h3>

<p>I wrote a <code>SendData</code> function that encrypts and sends data using our keys. This time we&rsquo;re using the &ldquo;application&rdquo; keys and not the handshake keys. This made making a HTTP request pretty simple:</p>

<pre><code>req := fmt.Sprintf(&quot;GET / HTTP/1.1\r\nHost: %s\r\n\r\n&quot;, domain)
session.SendData([]byte(req))
</code></pre>

<h3 id="step-9-we-can-actually-decrypt-the-response">step 9: we can actually decrypt the response!!!</h3>

<p>Now comes the moment I&rsquo;d been waiting for &mdash; actually decrypting the response
from the server!!! But here I needed to learn something else about TLS.</p>

<h3 id="tls-data-comes-in-blocks">TLS data comes in blocks</h3>

<p>I previously thought that once you established the connection, encrypted TLS
data was just a stream. But that&rsquo;s not how it works &ndash; instead, it&rsquo;s
transmitted in blocks. Like, you&rsquo;ll get a chunk of ~1400 bytes to decrypt, and
then another chunk, and then another chunk.</p>

<p>I&rsquo;m not sure why the blocks have the size they do (maybe it&rsquo;s so that each one will fit inside a TCP
packet ???), but in theory I think they could be up to 65535 bytes, since their
size field is 2 bytes. The blocks I got were all 1386 bytes each.</p>

<p>Every time we get a block, we have to:</p>

<ul>
<li>calculate a new IV as <code>old_iv xor num_records_received</code></li>
<li>decrypt it using the key and the new IV</li>
<li>increment the count of records received</li>
</ul>

<p>Here&rsquo;s what the <code>ReceiveData()</code> function I wrote looks like.</p>

<p>The most interesting part of this is the <code>iv[11] ^= session.RecordsReceived</code> &ndash;
that&rsquo;s the part that adjusts the IV for each block.</p>

<pre><code>func (session *Session) ReceiveData() []byte {
	record := readRecord(session.Conn)
	iv := make([]byte, 12)
	copy(iv, session.Keys.ServerApplicationIV)
	iv[11] ^= session.RecordsReceived
	plaintext := decrypt(session.Keys.ServerApplicationKey, iv, record)
	session.RecordsReceived += 1
	return plaintext
}
</code></pre>

<p>This <code>iv[11]</code> thing assumes that there are less than 255 blocks which obviously
is not true in general in TLS, but I was lazy and to download my blog&rsquo;s
homepage I only needed 82 blocks.</p>

<p>We actually have to do this when we send data too, but I didn&rsquo;t implement it
because we only sent 1 packet.</p>

<h3 id="problem-getting-the-whole-block-of-tls-data">problem: getting the whole block of tLS data</h3>

<p>I ran into one problem with TCP where sometimes I&rsquo;d try to read a block of TLS
data (~1386 bytes), but I wouldn&rsquo;t get the whole thing. I guess the TLS blocks
can be split up across multiple TCP packets.</p>

<p>I fixed this in a really dumb way, by just polling the TCP connection in a loop
until it gave me the data I wanted. Here&rsquo;s my code to do that:</p>

<pre><code>func read(length int, reader io.Reader) []byte {
	var buf []byte
	for len(buf) != length {
		buf = append(buf, readUpto(length-len(buf), reader)...)
	}
	return buf
}
</code></pre>

<p>I assume a real TLS implementation would use a thread pool or coroutines or
something to manage this.</p>

<h3 id="step-10-knowing-when-we-re-done">step 10: knowing when we&rsquo;re done</h3>

<p>When the HTTP response is done, we get these bytes: <code>[]byte{48, 13, 10, 13, 10, 23}</code>.
This seems to be because my HTTP server is using chunked transfer encoding, so
there&rsquo;s no <code>Content-Length</code> header and I need to watch for those bytes at the
end instead.</p>

<p>So here&rsquo;s the code to receive the HTTP response. Basically we just loop until
we see those bytes, then we stop.</p>

<pre><code>func (session *Session) ReceiveHTTPResponse() []byte {
	var response []byte
	for {
		pt := session.ReceiveData()
		if string(pt) == string([]byte{48, 13, 10, 13, 10, 23}) {
			break
		}
		response = append(response, pt...)
	}
	return response
}
</code></pre>

<h3 id="that-s-it">that&rsquo;s it!</h3>

<p>Finally, I ran the program and I downloaded my blog&rsquo;s homepage! It worked! Here&rsquo;s what the results look like:</p>

<pre><code>$ go build; ./tiny-tls
HTTP/1.1 200 OK
Date: Wed, 23 Mar 2022 19:37:47 GMT
Content-Type: text/html
Transfer-Encoding: chunked
Connection: keep-alive
... lots more headers and HTML follow...
</code></pre>

<p>Okay, the results are kind of anticlimactic, it&rsquo;s just the same as what you&rsquo;d
see if you ran <code>curl -i https://jvns.ca</code> except with no formatting. But I was
extremely excited when I saw it.</p>

<h3 id="unit-tests-are-great">unit tests are great</h3>

<p>Every time I write networking code like this, I forget that unit testing is
good, and I thrash around with a bunch of parsing / formatting code that does
not work and just getting NOPE messages back from the server on the other end.</p>

<p>And then I remember unit tests. In this case, I copied a bunch of the data from
the <a href="https://tls13.ulfheim.net">https://tls13.ulfheim.net</a> example and put it into my unit tests so that I
could quickly make sure that my parsing and crypto were working correctly.
It made everything about 10 times easier and faster.</p>

<h3 id="some-things-i-learned">some things I learned</h3>

<p>This was really fun! I learned that</p>

<ul>
<li>elliptic curve diffie-hellman is very cool, and at least with Curve25519 you can use literally any 32-byte string as a private key</li>
<li>there are a LOT of different symmetric keys involved in TLS and the key derivation process is pretty complicated</li>
<li>TLS uses AES with some extra &ldquo;authenticated encryption&rdquo; algorithms on top</li>
<li>TLS data is sent/received as a bunch of blocks, not as a stream</li>
</ul>

<p>My code truly is terrible, it can connect to my site (<code>jvns.ca</code>) and I think literally no other sites.</p>

<p>I won&rsquo;t pretend to understand all the reasons TLS is designed this way, but it
was a fun way to spend a couple of days, I feel a little more informed, and I
think it&rsquo;ll be easier for me to understand things I read about TLS in the
future.</p>

<h3 id="a-plug-for-cryptopals">a plug for cryptopals</h3>

<p>If you want to learn about cryptography and you haven&rsquo;t tried the
<a href="https://cryptopals.com/">cryptopals</a> challenges, I really recommend them &ndash; you
get to implement a lot of attacks on crypto systems and it&rsquo;s very fun.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Celebrate tiny learning milestones]]></title>
    <link href="https://jvns.ca/blog/2022/03/13/celebrate-tiny-learning-milestones/"/>
    <updated>2022-03-13T09:27:58+00:00</updated>
    <id>https://jvns.ca/blog/2022/03/13/celebrate-tiny-learning-milestones/</id>
    <content type="html"><![CDATA[

<p>Hello! Today I want to talk about &ndash; how do you know you&rsquo;re getting better at programming?</p>

<p>One obvious approach is:</p>

<ol>
<li>make goals</li>
<li>periodically check if you achieved those goals</li>
<li>if you did, celebrate</li>
</ol>

<h3 id="i-kind-of-hate-goals">I kind of hate goals</h3>

<p>Goals can be useful, but a lot of the time I actually find them stressful and
not that helpful. For example, here are a few goals I wrote down for myself 9
years ago:</p>

<ul>
<li>write a nontrivial amount of C code that works and is used by actual people</li>
<li>contribute to an open source project in C</li>
<li>learn C++</li>
</ul>

<p>9 years later, I have done 0 of those things. With the &ldquo;goal&rdquo; framing, it&rsquo;s to
think of this as a bad thing! Like, I wanted to learn C++ and I didn&rsquo;t! I still
can&rsquo;t write C comfortably! Oh no! I guess I failed!</p>

<p>I find this framing depressing and unhelpful. In reality, I didn&rsquo;t have any real
reason to learn C++ then and I still don&rsquo;t now. So it makes sense that I
haven&rsquo;t learned it.</p>

<p>Instead of goals, I like to think about <strong>tiny milestones</strong>.</p>

<h3 id="what-s-a-milestone">what&rsquo;s a milestone?</h3>

<p>Usually when we talk about milestones we mean something big that only happens every few years, like &ldquo;I graduated from university&rdquo;.</p>

<p>But in this post I want to talk about milestones in the sense of its etymology
&ndash; <strong>stones</strong> placed every <strong>mile</strong> on a highway, so that you can track your
progress along a path.</p>

<p>These happen much more often &ndash; maybe you used a new tool for the first time,
or you fixed a new type of bug that you&rsquo;ve never seen before, or you learned
about a new concept!</p>

<h3 id="a-few-of-my-tiny-c-milestones">a few of my tiny C milestones</h3>

<p>Here are a few examples of tiny milestones from the last 9 years that are
spiritually related to my original &ldquo;learn C/C++&rdquo; goals.</p>

<p>I&rsquo;m pretty sure that each of these individually took less than a week, though
all together they took many years and a lot of them would have been impossible
for me at the beginning.</p>

<ul>
<li>wrote a tiny Linux kernel module that does almost nothing</li>
<li>learned about <code>strace</code></li>
<li>wrote a very basic shell in C with a friend</li>
<li>learned how ELF binaries are organized (symbols, sections, etc)</li>
<li>learned how to use <code>gdb</code> to inspect a C program&rsquo;s memory</li>
<li>learned a little about how how <code>gdb</code> actually works internally (using DWARF)</li>
<li>learned the diffence between static and dynamic linking</li>
<li>learned how to look at how a program is linked with <code>ldd</code> or <code>file</code></li>
<li>(years later) debugged a problem that was caused by dynamic linking</li>
<li>implemented a buffer overflow exploit using <code>gdb</code> and <code>strace</code> (for a CTF)</li>
<li>got a core dump for a crashing C++ program and managed to get a stack trace out of it</li>
<li>learned about the RAII pattern (though in Rust, not C++)</li>
<li>learned what a few basic x86 assembly instructions mean (<code>mov</code>, etc)</li>
<li>pair programmed with a friend who already knew x86 assembly on implementing one Advent of Code problem (Day 1) in x86 assembly</li>
<li>in general I&rsquo;m comfortable writing very basic C programs as long as they
don&rsquo;t have to do anything fancy like &ldquo;memory management&rdquo;</li>
</ul>

<p>And there were even some major milestones, like I wrote a <a href="https://github.com/rbspy/rbspy">Ruby profiler</a> in Rust in 2018.</p>

<p>When I think about it this way, I feel really good about my skills! I&rsquo;ve
learned all kinds of stuff related to systems programming, it just happened in
a different way than I originally expected.</p>

<h3 id="fixing-a-bug-can-be-a-milestone">fixing a bug can be a milestone</h3>

<p>Every time I solve a bug that I couldn&rsquo;t have solved before, I think of it as a
tiny milestone. For example, I&rsquo;ve been trying to get better at CSS. One big
part of that for me is diving deeper into CSS bugs I encounter instead of
giving up.</p>

<p>Last year, I was having a problem with a flexbox. It was something that I
vaguely felt had happened to me before but that I&rsquo;d never been able to fix, and
it made me feel like I didn&rsquo;t understand how flexbox worked.</p>

<p>But instead of just finding a workaround, I decided to try to understand what was actually happening. And I
ended up finding a blog post that explained what was happening &ndash; <a href="https://weblog.west-wind.com/posts/2016/feb/15/flexbox-containers-pre-tags-and-managing-overflow">Flexbox Containers, PRE tags and managing Overflow</a>.
And that was really the cause of my bug!</p>

<h3 id="changing-goals-isn-t-a-bad-thing">changing goals isn&rsquo;t a bad thing</h3>

<p>The reason I still haven&rsquo;t learned C isn&rsquo;t that I suck or that C is impossible
to learn. It&rsquo;s just that learning how to write C well was never actually
something I had a real reason to do.</p>

<p>Instead I learned Rust and Go and <code>strace</code> and <code>gdb</code> and about C structs and
symbols and the call stack and the heap and lots of other things. (as an aside, I loved this paper <a href="https://www.humprog.org/~stephen/research/papers/kell17some-preprint.pdf">Some were meant for C</a>
about how why C is still so important)</p>

<p>And that worked great! So I think it&rsquo;s much more healthy to be flexible about
your goals and to celebrate the milestones you do end up getting to instead of
feeling bad about goals that you &ldquo;failed&rdquo; at.</p>

<h3 id="you-can-learn-a-lot-by-accident">you can learn a lot by &ldquo;accident&rdquo;</h3>

<p>Most of my tiny milestones came up naturally because I had a project I wanted
to do or a bug I needed to solve. So I didn&rsquo;t need to explicitly plan for them,
they just kind of happened along the way because I kept doing projects that
challenged me.</p>

<h3 id="celebrate-your-tiny-milestones">celebrate your tiny milestones</h3>

<p>It&rsquo;s really helpful for me to <strong>celebrate</strong> tiny milestones like this. I celebrate
a lot by writing blog posts &ndash; I wrote the above list mostly by looking at my
list of old blog posts for things I&rsquo;d written about related to C.</p>

<p>If you don&rsquo;t blog (it&rsquo;s definitely not for everyone!), it can be helpful to write down
this kind of thing in your <a href="https://jvns.ca/blog/brag-documents/">brag document</a> instead.</p>

<p>But I do think it&rsquo;s important to celebrate these milestones <em>somewhere</em>. It
gives me a real sense that I&rsquo;m making progress and it helps me stay motivated
to keep learning about the thing.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to use undocumented web APIs]]></title>
    <link href="https://jvns.ca/blog/2022/03/10/how-to-use-undocumented-web-apis/"/>
    <updated>2022-03-10T09:03:51+00:00</updated>
    <id>https://jvns.ca/blog/2022/03/10/how-to-use-undocumented-web-apis/</id>
    <content type="html"><![CDATA[

<p>Hello! A couple of days I wrote about <a href="https://jvns.ca/blog/2022/03/08/tiny-programs/">tiny personal programs</a>, and I mentioned that
it can be fun to use &ldquo;secret&rdquo; undocumented APIs where you need to copy your
cookies out of the browser to get access to them.</p>

<p>A couple of people asked how to do this, so I wanted to explain how because
it&rsquo;s pretty straightforward. We&rsquo;ll also talk a tiny bit about what can go
wrong, ethical issues, and how this applies to your undocumented APIs.</p>

<p>As an example, let&rsquo;s use Google Hangouts. I&rsquo;m picking this not because it&rsquo;s the
most useful example (I think there&rsquo;s an official API which would be much more
practical to use), but because many sites where this is actually useful are
smaller sites that are more vulnerable to abuse. So we&rsquo;re just going to use
Google Hangouts because I&rsquo;m 100% sure that the Google Hangouts backend is
designed to be resilient to this kind of poking around.</p>

<p>Let&rsquo;s get started!</p>

<h3 id="step-1-look-in-developer-tools-for-a-promising-json-response">step 1: look in developer tools for a promising JSON response</h3>

<p>I start out by going to <a href="https://hangouts.google.com">https://hangouts.google.com</a>, opening the network tab in
Firefox developer tools and looking for JSON responses. You can use Chrome developer tools too.</p>

<p>Here&rsquo;s what that looks like</p>

<p><img src="https://jvns.ca/images/network-tab.png"></p>

<p>The request is a good candidate if it says &ldquo;json&rdquo; in the &ldquo;Type&rdquo; column&rdquo;</p>

<p>I had to look around for a while until I found something interesting, but
eventually I found a &ldquo;people&rdquo; endpoint that seems to return information about
my contacts. Sounds fun, let&rsquo;s take a look at that.</p>

<h3 id="step-2-copy-as-curl">step 2: copy as cURL</h3>

<p>Next, I right click on the request I&rsquo;m interested in, and click &ldquo;Copy&rdquo; -&gt; &ldquo;Copy as cURL&rdquo;.</p>

<p>Then I paste the <code>curl</code> command in my terminal and run it. Here&rsquo;s what happens.</p>

<pre><code>$ curl 'https://people-pa.clients6.google.com/v2/people/?key=REDACTED' -X POST ........ (a bunch of headers removed)
Warning: Binary output can mess up your terminal. Use &quot;--output -&quot; to tell 
Warning: curl to output it to your terminal anyway, or consider &quot;--output 
Warning: &lt;FILE&gt;&quot; to save to a file.
</code></pre>

<p>You might be thinking &ndash; that&rsquo;s weird, what&rsquo;s this &ldquo;binary output can mess up
your terminal&rdquo; error?  That&rsquo;s because by default, browsers send an
<code>Accept-Encoding: gzip, deflate</code> header to the server, to get compressed
output.</p>

<p>We could decompress it by piping the output to <code>gunzip</code>, but I find it simpler
to just not send that header. So let&rsquo;s remove some irrelevant headers.</p>

<h3 id="step-3-remove-irrelevant-headers">step 3: remove irrelevant headers</h3>

<p>Here&rsquo;s the full <code>curl</code> command line that I got from the browser. There&rsquo;s a lot here!
I start out by splitting up the request with backslashes (<code>\</code>) so that each header is on a different line to make it easier to work with:</p>

<pre><code>curl 'https://people-pa.clients6.google.com/v2/people/?key=REDACTED' \
-X POST \
-H 'User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:96.0) Gecko/20100101 Firefox/96.0' \
-H 'Accept: */*' \
-H 'Accept-Language: en' \
-H 'Accept-Encoding: gzip, deflate' \
-H 'X-HTTP-Method-Override: GET' \
-H 'Authorization: SAPISIDHASH REDACTED' \
-H 'Cookie: REDACTED'
-H 'Content-Type: application/x-www-form-urlencoded' \
-H 'X-Goog-AuthUser: 0' \
-H 'Origin: https://hangouts.google.com' \
-H 'Connection: keep-alive' \
-H 'Referer: https://hangouts.google.com/' \
-H 'Sec-Fetch-Dest: empty' \
-H 'Sec-Fetch-Mode: cors' \
-H 'Sec-Fetch-Site: same-site' \
-H 'Sec-GPC: 1' \
-H 'DNT: 1' \
-H 'Pragma: no-cache' \
-H 'Cache-Control: no-cache' \
-H 'TE: trailers' \
--data-raw 'personId=101777723309&amp;personId=1175339043204&amp;personId=1115266537043&amp;personId=116731406166&amp;extensionSet.extensionNames=HANGOUTS_ADDITIONAL_DATA&amp;extensionSet.extensionNames=HANGOUTS_OFF_NETWORK_GAIA_GET&amp;extensionSet.extensionNames=HANGOUTS_PHONE_DATA&amp;includedProfileStates=ADMIN_BLOCKED&amp;includedProfileStates=DELETED&amp;includedProfileStates=PRIVATE_PROFILE&amp;mergedPersonSourceOptions.includeAffinity=CHAT_AUTOCOMPLETE&amp;coreIdParams.useRealtimeNotificationExpandedAcls=true&amp;requestMask.includeField.paths=person.email&amp;requestMask.includeField.paths=person.gender&amp;requestMask.includeField.paths=person.in_app_reachability&amp;requestMask.includeField.paths=person.metadata&amp;requestMask.includeField.paths=person.name&amp;requestMask.includeField.paths=person.phone&amp;requestMask.includeField.paths=person.photo&amp;requestMask.includeField.paths=person.read_only_profile_info&amp;requestMask.includeField.paths=person.organization&amp;requestMask.includeField.paths=person.location&amp;requestMask.includeField.paths=person.cover_photo&amp;requestMask.includeContainer=PROFILE&amp;requestMask.includeContainer=DOMAIN_PROFILE&amp;requestMask.includeContainer=CONTACT&amp;key=REDACTED'
</code></pre>

<p>This can seem like an overwhelming amount of stuff at first, but you don&rsquo;t need
to think about what any of it means at this stage. You just need to delete
irrelevant lines.</p>

<p>I usually just figure out which headers I can delete with trial and error &ndash; I
keep removing headers until the request starts failing. In general you probably
don&rsquo;t need <code>Accept*</code>, <code>Referer</code>, <code>Sec-*</code>, <code>DNT</code>, <code>User-Agent</code>, and caching
headers though.</p>

<p>In this example, I was able to cut the request down to this:</p>

<pre><code>curl 'https://people-pa.clients6.google.com/v2/people/?key=REDACTED' \
-X POST \
-H 'Authorization: SAPISIDHASH REDACTED' \
-H 'Content-Type: application/x-www-form-urlencoded' \
-H 'Origin: https://hangouts.google.com' \
-H 'Cookie: REDACTED'\
--data-raw 'personId=101777723309&amp;personId=1175339043204&amp;personId=1115266537043&amp;personId=116731406166&amp;extensionSet.extensionNames=HANGOUTS_ADDITIONAL_DATA&amp;extensionSet.extensionNames=HANGOUTS_OFF_NETWORK_GAIA_GET&amp;extensionSet.extensionNames=HANGOUTS_PHONE_DATA&amp;includedProfileStates=ADMIN_BLOCKED&amp;includedProfileStates=DELETED&amp;includedProfileStates=PRIVATE_PROFILE&amp;mergedPersonSourceOptions.includeAffinity=CHAT_AUTOCOMPLETE&amp;coreIdParams.useRealtimeNotificationExpandedAcls=true&amp;requestMask.includeField.paths=person.email&amp;requestMask.includeField.paths=person.gender&amp;requestMask.includeField.paths=person.in_app_reachability&amp;requestMask.includeField.paths=person.metadata&amp;requestMask.includeField.paths=person.name&amp;requestMask.includeField.paths=person.phone&amp;requestMask.includeField.paths=person.photo&amp;requestMask.includeField.paths=person.read_only_profile_info&amp;requestMask.includeField.paths=person.organization&amp;requestMask.includeField.paths=person.location&amp;requestMask.includeField.paths=person.cover_photo&amp;requestMask.includeContainer=PROFILE&amp;requestMask.includeContainer=DOMAIN_PROFILE&amp;requestMask.includeContainer=CONTACT&amp;key=REDACTED'
</code></pre>

<p>So I just need 4 headers: <code>Authorization</code>, <code>Content-Type</code>, <code>Origin</code>, and <code>Cookie</code>. That&rsquo;s a lot more manageable.</p>

<h3 id="step-4-translate-it-into-python">step 4: translate it into Python</h3>

<p>Now that we know what headers we need, we can translate our <code>curl</code> command into a Python program!
This part is also a pretty mechanical process, the goal is just to send exactly the same data with Python as we were with curl.</p>

<p>Here&rsquo;s what that looks like. This is exactly the same as the previous <code>curl</code>
command, but using Python&rsquo;s <code>requests</code>. I also broke up the very long request body
string into an array of tuples to make it easier to work with
programmmatically.</p>

<pre><code>import requests
import urllib

data = [
    ('personId','101777723'), # I redacted these IDs a bit too
    ('personId','117533904'),
    ('personId','111526653'),
    ('personId','116731406'),
    ('extensionSet.extensionNames','HANGOUTS_ADDITIONAL_DATA'),
    ('extensionSet.extensionNames','HANGOUTS_OFF_NETWORK_GAIA_GET'),
    ('extensionSet.extensionNames','HANGOUTS_PHONE_DATA'),
    ('includedProfileStates','ADMIN_BLOCKED'),
    ('includedProfileStates','DELETED'),
    ('includedProfileStates','PRIVATE_PROFILE'),
    ('mergedPersonSourceOptions.includeAffinity','CHAT_AUTOCOMPLETE'),
    ('coreIdParams.useRealtimeNotificationExpandedAcls','true'),
    ('requestMask.includeField.paths','person.email'),
    ('requestMask.includeField.paths','person.gender'),
    ('requestMask.includeField.paths','person.in_app_reachability'),
    ('requestMask.includeField.paths','person.metadata'),
    ('requestMask.includeField.paths','person.name'),
    ('requestMask.includeField.paths','person.phone'),
    ('requestMask.includeField.paths','person.photo'),
    ('requestMask.includeField.paths','person.read_only_profile_info'),
    ('requestMask.includeField.paths','person.organization'),
    ('requestMask.includeField.paths','person.location'),
    ('requestMask.includeField.paths','person.cover_photo'),
    ('requestMask.includeContainer','PROFILE'),
    ('requestMask.includeContainer','DOMAIN_PROFILE'),
    ('requestMask.includeContainer','CONTACT'),
    ('key','REDACTED')
]
response = requests.post('https://people-pa.clients6.google.com/v2/people/?key=REDACTED',
    headers={
        'X-HTTP-Method-Override': 'GET',
        'Authorization': 'SAPISIDHASH REDACTED',
        'Content-Type': 'application/x-www-form-urlencoded',
        'Origin': 'https://hangouts.google.com',
        'Cookie': 'REDACTED',
    },
    data=urllib.parse.urlencode(data),
)

print(response.text)
</code></pre>

<p>I ran this program and it works &ndash; it prints out a bunch of JSON! Hooray!</p>

<p>You&rsquo;ll notice that I replaced a bunch of things with <code>REDACTED</code>, that&rsquo;s because
if I included those values you could access the Google Hangouts API for my
account which would be no good.</p>

<h3 id="and-we-re-done">and we&rsquo;re done!</h3>

<p>Now I can modify the Python program to do whatever I want, like passing
different parameters or parsing the output.</p>

<p>I&rsquo;m not going to do anything interesting with it because I&rsquo;m not actually
interested in using this API at all, I just wanted to show what the process looks like.</p>

<p>But we get back a bunch of JSON that you could definitely do something with.</p>

<h3 id="curlconverter-looks-great">curlconverter looks great</h3>

<p>Someone commented that you can translate curl to Python (and a bunch of other
languages!) automatically with <a href="https://curlconverter.com/">https://curlconverter.com/</a> which looks amazing
&ndash; I&rsquo;ve always done it manually.  I tried it out on this example and it seems
to work great.</p>

<h3 id="figuring-out-how-the-api-works-is-nontrivial">figuring out how the API works is nontrivial</h3>

<p>I don&rsquo;t want to undersell how difficult it can be to figure out how an unknown
API works &ndash; it&rsquo;s not obvious! I have no idea what a lot of the parameters to
this Google Hangouts API do!</p>

<p>But a lot of the time there are some parameters that seem pretty straightforward,
like <code>requestMask.includeField.paths=person.email</code> probably means &ldquo;include each
person&rsquo;s email address&rdquo;. So I try to focus on the parameters I <em>do</em> understand
more than the ones I <em>don&rsquo;t</em> understand.</p>

<h3 id="this-always-works-in-theory">this always works (in theory)</h3>

<p>Some of you might be wondering &ndash; can you always do this?</p>

<p>The answer is sort of yes &ndash; browsers aren&rsquo;t magic! All the information
browsers send to your backend is just HTTP requests. So if I copy all of the
HTTP headers that my browser is sending, I think there&rsquo;s literally no way for
the backend to tell that the request <em>isn&rsquo;t</em> sent by my browser and is actually
being sent by a random Python program.</p>

<p>Of course, we removed a bunch of the headers the browser sent so theoretically
the backend <em>could</em> tell, but usually they won&rsquo;t check.</p>

<p>There are some caveats though &ndash; for example a lot of Google services have
backends that communicate with the frontend in a totally inscrutable (to me)
way, so even though in theory you could mimic what they&rsquo;re doing, in practice
it might be almost impossible. And bigger APIs that encounter more abuse
will have more protections.</p>

<p>Now that we&rsquo;ve seen how to use undocumented APIs like this, let&rsquo;s talk about
some things that can go wrong.</p>

<h3 id="problem-1-expiring-session-cookies">problem 1: expiring session cookies</h3>

<p>One big problem here is that I&rsquo;m using my Google session cookie for
authentication, so this script will stop working whenever my browser session
expires.</p>

<p>That means that this approach wouldn&rsquo;t work for a long running program (I&rsquo;d
want to use a real API), but if I just need to quickly grab a little bit of data as a
1-time thing, it can work great!</p>

<h3 id="problem-2-abuse">problem 2: abuse</h3>

<p>If I&rsquo;m using a small website, there&rsquo;s a chance that my little Python script
could take down their service because it&rsquo;s doing way more requests than they&rsquo;re
able to handle. So when I&rsquo;m doing this I try to be respectful and not make too
many requests too quickly.</p>

<p>This is especially important because a lot of sites which don&rsquo;t have official
APIs are smaller sites with less resources.</p>

<p>In this example obviously this isn&rsquo;t a problem &ndash; I think I made 20 requests
total to the Google Hangouts backend while writing this blog post, which they
can definitely handle.</p>

<p>Also if you&rsquo;re using your account credentials to access the API in a excessive
way and you cause problems, you might (very reasonably) get your account
suspended.</p>

<p>I also stick to downloading data that&rsquo;s either mine or that&rsquo;s intended to be
publicly accessible &ndash; I&rsquo;m not searching for vulnerabilities.</p>

<h3 id="remember-that-anyone-can-use-your-undocumented-apis">remember that anyone can use your undocumented APIs</h3>

<p>I think the most important thing to know about this isn&rsquo;t actually how to use <em>other
people&rsquo;s</em> undocumented APIs. It&rsquo;s fun to do, but it has a lot
of limitations and I don&rsquo;t actually do it that often.</p>

<p>It&rsquo;s much more important to understand that anyone can do this to <em>your</em>
backend API!  Everyone has developer tools and the network tab, and it&rsquo;s pretty
easy to see which parameters you&rsquo;re passing to the backend and to change them.</p>

<p>So if anyone can just change some parameters to get another user&rsquo;s information,
that&rsquo;s no good. I think most developers building publicly availble APIs know
this, but I&rsquo;m mentioning it because everyone needs to learn it for the first
time at some point :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Some tiny personal programs I've written]]></title>
    <link href="https://jvns.ca/blog/2022/03/08/tiny-programs/"/>
    <updated>2022-03-08T08:35:56+00:00</updated>
    <id>https://jvns.ca/blog/2022/03/08/tiny-programs/</id>
    <content type="html"><![CDATA[

<p>I was talking to a friend last summer about what resources might be helpful for
folks learning to program. My friend said they thought some people might
benefit from a list of small and fun programming projects &ndash; the kind of thing
you can do in an evening or weekend.</p>

<p>So let&rsquo;s talk about that! I like to write small programs that have some
marginal utility in my life. Kind of like this:</p>

<ul>
<li>ah! A minor problem in my life!</li>
<li>I know, I bet I can solve this problem with CODE. YAY.</li>
<li><em>4 hours of happy programming ensues</em></li>
</ul>

<p>This isn&rsquo;t always the most <em>practical</em> (many of the problems I&rsquo;ve
solved with programming could have been solved in less time in other ways), but
as long as your goal is actually to have fun programming and your programs
don&rsquo;t hurt anyone else, I think this is a great approach :)</p>

<p>So here are a few examples of small personal programming projects
I&rsquo;ve done. I&rsquo;m not going to talk about &ldquo;learning projects&rdquo; where my goal was
to learn something specific because I&rsquo;ve already written a billion blog posts
about that.</p>

<p>These are more about just doing something fun with no specific learning goal.</p>

<h3 id="a-theatre-festival-didn-t-have-a-calendar">a theatre festival didn&rsquo;t have a calendar</h3>

<p>The local Fringe Festival had a bunch of shows, but there was no place I could
see a calendar all one one page. So I wrote a Python script to scrape their
website and generate a calendar. Here&rsquo;s <a href="https://gist.github.com/jvns/a552895b6f9b523276e88d7e7506ee86">the code</a> and <a href="https://jvns.ca/fringe-2021.html">the output</a>.</p>

<h3 id="printing-out-covers-for-tiny-books">printing out covers for tiny books</h3>

<p>I saw a <a href="https://www.tiktok.com/@stevieandjohn/video/7063929340836334895">TikTok video</a> recently where someone made miniature physical versions of the
ebooks they read. I decided to try it out, so I needed to print tiny versions
of a bunch of book covers. I could have resized all of them manually, but I
decided to do it with programming instead.</p>

<p>So I wrote a little bit of HTML and CSS
(<a href="https://gist.github.com/jvns/de0671d09f5752d36cbe6082d4fb2af2">tinybooks.html</a>), converted it to a PDF, and printed it out.</p>

<h3 id="getting-my-scanner-to-work-better">getting my scanner to work better</h3>

<p>This is barely &ldquo;programming&rdquo;, but I needed to scan a bunch of documents for a
family member, and I didn&rsquo;t like the available software. So I wrote a <a href="https://gist.github.com/jvns/b5651fd6272eddcd935e5e30874a935f">tiny shell script wrapper for <code>scanimage</code></a> to
make the process simpler. This one actually helped me a lot and I still use it when
scanning.</p>

<h3 id="getting-a-vaccine-appointment">getting a vaccine appointment</h3>

<p>When the second COVID vaccine doses opened up, all of the slots were full. It
turned out that the website&rsquo;s backend had an API, so I wrote a script to poll
the API every 60 seconds or so and watch for cancellations and notify me so
that I could get an earlier appointment.</p>

<p>This didn&rsquo;t turn out to be necessary (more appointments opened up pretty soon
anyway and there were enough for everyone), but it was fun.</p>

<p>In general I try to be careful when using APIs like this in a way the
developers didn&rsquo;t intend to avoid overloading the site.</p>

<h3 id="looking-at-housing-market-data">looking at housing market data</h3>

<p>We were thinking of buying a condo a few years ago and I was mad that I
couldn&rsquo;t get any information about historical prices, so I wrote an iPython
notebook that queried the API of a local real estate website to scrape some
information and calculate some statistics like price per square foot over time.</p>

<p>I don&rsquo;t think this actually helped us at all with buying a condo but it was fun.</p>

<p>(&ldquo;using the API of local services&rdquo; seems to be an ongoing theme, one of my
favourite things is to use secret undocumented APIs where you need to copy your
cookies out of the browser to get access to them)</p>

<h3 id="crossword-business-cards">crossword business cards</h3>

<p>in 2013, I thought it might be fun to have a business card that was a crossword
with some of my interests. So I wrote general software to <a href="https://github.com/jvns/svg_crossworder">generate crosswords from a text file</a>. I&rsquo;m pretty sure
never printed the business cards but it was fun to write.</p>

<h3 id="generating-envelopes">generating envelopes</h3>

<p>I was mailing some zines a while ago, and I decided I wanted to print custom
labels on every envelope &ndash; sort of a &ldquo;mail merge&rdquo; situation. So I wrote a
Python program to go through all of the mailing address and generate some HTML
and CSS. Then I turned the HTML/CSS into a PDF and printed the envelopes. This
worked great.</p>

<h3 id="investigating-dice-rolling-patterns">investigating dice rolling patterns</h3>

<p>A friend showed me a dice rolling game where you roll a bunch of dice and add
up the values. I mentioned that if you roll enough dice and add up all the
values, at some point it gets a lot less &ldquo;random&rdquo;.</p>

<p>But then I wanted to see exactly how much less random it gets. So I wrote a
tiny program to roll 2500 dice and add up the resulting sums a bunch of times
to see how it works. (presumably you could calculate the same thing with math,
but it&rsquo;s easier with code)</p>

<p>This was so little code I&rsquo;ll just inline it here. (it&rsquo;s Python). Here&rsquo;s [the output](<a href="https://gist.github.com/jvns/e4a35ca2bad90c1a0fcaf578a803b456">https://gist.github.com/jvns/e4a35ca2bad90c1a0fcaf578a803b456</a></p>

<pre><code>import random

def roll():
    return sum(random.randint(1, 6) for i in range(2500))

while True:
    print(roll())
</code></pre>

<h3 id="getting-drawings-into-the-notability-app">getting drawings into the Notability app</h3>

<p>I was using an app called Squid to do drawing, and I was switching to
Notability and wanted to get my old drawings into Notability. So I <a href="https://jvns.ca/blog/2018/03/31/reverse-engineering-notability-format/">reverse engineered the Notability file format</a>.</p>

<p>I don&rsquo;t think this was ultimately that useful (I ultimately ended up switching
to a different drawing app which had a real SVG import), but I had fun.</p>

<h3 id="turning-off-retweets">turning off retweets</h3>

<p>This is a slightly less tiny project (it took more than one day), but I decided I didn&rsquo;t want to see retweets
on Twitter anymore so I
wrote a <a href="https://turn-off-retweets.glitch.me/">small website</a> so I could turn off retweets.</p>

<h3 id="i-really-love-tiny-projects">I really love tiny projects</h3>

<p>All of these examples are more recent, but I think that when I was starting to learn to
program tiny low-stakes projects like this really helped me. I love that</p>

<ul>
<li>they&rsquo;re just for me (if it goes wrong, it doesn&rsquo;t matter!)</li>
<li>I can finish them in an evening or weekend (it&rsquo;s not a Huge Giant Thing hanging over my head)</li>
<li>if it works, there&rsquo;s some tangible output in my life (like some envelopes or miniature books or a schedule a business card or a better Twitter experience)</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Some things about getaddrinfo that surprised me]]></title>
    <link href="https://jvns.ca/blog/2022/02/23/getaddrinfo-is-kind-of-weird/"/>
    <updated>2022-02-23T08:33:56+00:00</updated>
    <id>https://jvns.ca/blog/2022/02/23/getaddrinfo-is-kind-of-weird/</id>
    <content type="html"><![CDATA[

<p>Hello! Here are some things you may or may not have noticed about DNS:</p>

<ul>
<li>when you resolve a DNS name in a Python program, it checks <code>/etc/hosts</code>, but when you use <code>dig</code>, it doesn&rsquo;t.</li>
<li>switching Linux distributions can sometimes change how your DNS works, for example if you use Alpine Linux instead of Ubuntu it can cause problems.</li>
<li>Mac OS has DNS caching, but Linux doesn&rsquo;t necessarily unless you use <code>systemd-resolved</code> or something</li>
</ul>

<p>To understand all of these, we need to learn about a function called
<code>getaddrinfo</code> which is responsible for doing DNS lookups.</p>

<p>There are a bunch of surprising-to-me things about <code>getaddrinfo</code>, and once I
learned about them, it explained a bunch of the confusing DNS behaviour I&rsquo;d
seen in the past.</p>

<h3 id="where-does-getaddrinfo-come-from">where does <code>getaddrinfo</code> come from?</h3>

<p><code>getaddrinfo</code> is part of a library called <code>libc</code> which is the standard C
library. There are at least 3 versions of libc:</p>

<ol>
<li>glibc (GNU libc)</li>
<li>musl libc</li>
<li>the Mac OS version of libc (I don&rsquo;t know if this has a name)</li>
</ol>

<p>There are definitely more (I assume FreeBSD and OpenBSD each have their own
version for example), but those are the 3 I know about.</p>

<p>Each of those have their own version of <code>getaddrinfo</code>.</p>

<h3 id="not-all-programs-use-getaddrinfo-for-dns">not all programs use <code>getaddrinfo</code> for DNS</h3>

<p>The first thing I found surprising is that <code>getaddrinfo</code> is very widely used
but not universally used.</p>

<p>Every program has basically 2 options:</p>

<ol>
<li>use <code>getaddrinfo</code>. I think that Python, Ruby, and Node use <code>getaddrinfo</code>, as well as Go sometimes. Probably many more languages too but I did not have the time to go hunting through every language&rsquo;s DNS library.</li>
<li>use a custom DNS resolver function. Examples of this:

<ul>
<li>dig. I think this is because dig needs more control over the DNS query
than <code>getaddrinfo</code> supports so it implements its own DNS logic.</li>
<li>Go also has a pure-Go DNS resolver if you don&rsquo;t want to use CGo</li>
<li>There&rsquo;s a Ruby gem with a <a href="https://ruby-doc.org/stdlib-2.5.1/libdoc/resolv/rdoc/Resolv.html">custom DNS resolver</a> that you can use to replace <code>getaddrinfo</code>.</li>
<li><code>getaddrinfo</code> doesn&rsquo;t support DNS over HTTPS, so I assume that browsers
that use DoH are not using <code>getaddrinfo</code> for those DNS lookups</li>
<li>probably lots more that I&rsquo;m not aware of</li>
</ul></li>
</ol>

<h3 id="you-ll-sometimes-see-getaddrinfo-in-your-dns-error-messages">you&rsquo;ll sometimes see <code>getaddrinfo</code> in your DNS error messages</h3>

<p>Because <code>getaddrinfo</code> is so widely used, you&rsquo;ll often see it in error messages related to DNS.</p>

<p>For example if I run this Python program which looks up nonexistent domain name:</p>

<pre><code>import requests

requests.get(&quot;http://xyxqqx.com&quot;)
</code></pre>

<p>I get this error message:</p>

<pre><code>Traceback (most recent call last):
  File &quot;/usr/lib/python3.10/site-packages/urllib3/connection.py&quot;, line 174, in _new_conn
    conn = connection.create_connection(
  File &quot;/usr/lib/python3.10/site-packages/urllib3/util/connection.py&quot;, line 72, in create_connection
    for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):
  File &quot;/usr/lib/python3.10/socket.py&quot;, line 955, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno -2] Name or service not known
</code></pre>

<p>I think <code>socket.getaddrinfo</code> is calling libc <code>getaddrinfo</code> somewhere under the
hood, though I did not read all of the source code to check.</p>

<p>Before you learn what <code>getaddrinfo</code> is, it&rsquo;s not at all obvious that
<code>socket.gaierror: [Errno -2] Name or service not known</code> means &ldquo;that domain
doesn&rsquo;t exist&rdquo;. It doesn&rsquo;t even say the words &ldquo;DNS&rdquo; or &ldquo;domain&rdquo; in it
anywhere!</p>

<h3 id="getaddrinfo-on-mac-doesn-t-use-etc-resolv-conf"><code>getaddrinfo</code> on Mac doesn&rsquo;t use <code>/etc/resolv.conf</code></h3>

<p>I used to use a Mac for work, and I always felt vaguely unsettled by DNS on
Mac. I could tell that <strong>something</strong> was different from how it worked on my
Linux machine, but I couldn&rsquo;t figure out what it was.</p>

<p>I still don&rsquo;t totally understand this and it&rsquo;s hard for me to investigate
because I don&rsquo;t currently have access to a Mac but here&rsquo;s what I&rsquo;ve gathered
so far.</p>

<p>On Linux systems, <code>getaddrinfo</code> decides which DNS resolver to talk to using a
file called <code>/etc/resolv.conf</code>. <small>(there&rsquo;s apparently some additional
complexity with <code>/etc/nsswitch.conf</code> but I have never looked at
<code>/etc/nsswitch.conf</code> so I&rsquo;m going to ignore it).</small></p>

<p>For example, this is the contents of my <code>/etc/resolv.conf</code> right now:</p>

<pre><code># Generated by NetworkManager
nameserver 192.168.1.1
nameserver fd13:d987:748a::1
</code></pre>

<p>This means that to make DNS queries, <code>getaddrinfo</code> makes a request to
<code>192.168.1.1</code> on port 53. That&rsquo;s my router&rsquo;s DNS resolver.</p>

<p>I assumed this was <code>getaddrinfo</code> on Mac also just used <code>/etc/resolv.conf</code> but I was wrong.
Instead, <code>getaddrinfo</code> makes a request to a program called <code>mDNSResponder</code>
which is a Mac thing.</p>

<p>I don&rsquo;t know much about <code>mDNSResponder</code> except that it does DNS caching and
that apparently you can clear the cache with <code>dscacheutil</code>. This explains one
of the mysteries at the beginning of the post &ndash; why Macs have DNS caching and
Linux machines don&rsquo;t always.</p>

<h3 id="musl-libc-getaddrinfo-is-different-from-glibc-s-version">musl libc <code>getaddrinfo</code> is different from glibc&rsquo;s version</h3>

<p>You might think ok, Mac OS <code>getaddrinfo</code> is different, but the two versions of
<code>getaddrinfo</code> in glibc and musl libc must be mostly the same, right?</p>

<p>But they have some pretty significant differences. The main difference I know
about is that musl libc does not support TCP DNS. I couldn&rsquo;t find anything in
the documentation about it but it&rsquo;s mentioned in <a href="https://twitter.com/RichFelker/status/994667677112156161">this tweet</a>)</p>

<p>I talked a bit more about this TCP DNS thing in <a href="https://jvns.ca/blog/2022/01/15/some-ways-dns-can-break/">ways DNS can break</a>.</p>

<p>Some more differences:</p>

<ul>
<li>the way search domains (in <code>/etc/resolv.conf</code>) are handled is slightly different (<a href="https://wiki.musl-libc.org/functional-differences-from-glibc.html#Name-Resolver/DNS">discussed here</a>)</li>
<li>this post mentions that <a href="https://utcc.utoronto.ca/~cks/space/blog/linux/GlibcAndLinuxAPI">musl doesn&rsquo;t support nsswitch.conf</a>.
I have never used nsswitch.conf and I&rsquo;m not sure why it&rsquo;s useful but I think
there are reasons I don&rsquo;t know about.</li>
</ul>

<h3 id="more-weird-things-nscd">more weird things: nscd?</h3>

<p>When looking up getaddrinfo I also found this interesting <a href="https://jameshfisher.com/2018/02/03/what-does-getaddrinfo-do/">post about getaddrinfo from James Fisher</a> that
straces glibc <code>getaddrinfo</code> and discovers that apparently calls some
program called <code>nscd</code> which is supposed to do DNS caching. That blog post
describes nscd as &ldquo;unstable&rdquo; and &ldquo;badly designed&rdquo; and it&rsquo;s not clear to me how
widely used it is.</p>

<p>I don&rsquo;t know anything about nscd but I checked and apparently it&rsquo;s on my
computer. I tried it out and this is what happened:</p>

<pre><code>$ nscd 
child exited with status 4
</code></pre>

<p>My impression is that people who want to do DNS caching on Linux are more
likely to use a DNS forwarder like <code>dnsmasq</code> or <code>systemd-resolved</code> instead of
something like <code>nscd</code> &ndash; that&rsquo;s what I&rsquo;ve seen in the past.</p>

<h3 id="that-s-all">that&rsquo;s all!</h3>

<p>When I first learned about all of this I found it really surprising that such
a widely used library function has such different behaviour on different
platforms.</p>

<p>I mean, it makes sense that the people who built Mac OS would want to handle
DNS caching in a different way than it&rsquo;s handled on Linux, so it&rsquo;s reasonable
that they implemented <code>getaddrinfo</code> differently.  And it makes sense that some
programs choose not to use <code>getaddrinfo</code> to make DNS queries.</p>

<p>But it definitely makes DNS a bit more difficult to reason about.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Things that used to be hard and are now easy]]></title>
    <link href="https://jvns.ca/blog/2022/02/20/things-that-used-to-be-hard-and-are-now-easy/"/>
    <updated>2022-02-20T09:00:36+00:00</updated>
    <id>https://jvns.ca/blog/2022/02/20/things-that-used-to-be-hard-and-are-now-easy/</id>
    <content type="html"><![CDATA[

<p>Hello! I was talking to some friends the other day about the types of
conference talks we enjoyed.</p>

<p>One category we came up with was &ldquo;you know this thing that used to be super
hard? Turns out now it&rsquo;s WAY EASIER and maybe you can do it now!&ldquo;.</p>

<p>So I asked on Twitter about <a href="https://twitter.com/b0rk/status/1494301227533967369?s=20&amp;t=M_RYvWzEOymZ--YjE9jvpQ">programming things that used to be hard and are now easy</a></p>

<p>Here are some of the answers I got. Not all of them are equally &ldquo;easy&rdquo;, but I
found reading the list really fun and it gave me some ideas for things to
learn. Maybe it&rsquo;ll give you some ideas too.</p>

<ul>
<li>SSL certificates, with Let&rsquo;s Encrypt</li>
<li>Concurrency, with async/await (in several languages)</li>
<li>Centering in CSS, with flexbox/grid</li>
<li>Building fast programs, with Go</li>
<li>Image recognition, with <a href="https://simonwillison.net/2018/Oct/29/transfer-learning/">transfer learning</a> (someone pointed out that the joke in <a href="https://xkcd.com/1425/">this XKCD</a> doesn&rsquo;t make sense anymore)</li>
<li>Building cross-platform GUIs, with Electron</li>
<li>VPNs, with Wireguard</li>
<li>Running your own code inside the Linux kernel, with eBPF</li>
<li>Cross-compilation (Go and Rust ship with cross-compilation support out of the box)</li>
<li>Configuring cloud infrastructure, with Terraform</li>
<li>Setting up a dev environment, with Docker</li>
<li>Sharing memory safely with threads, with Rust</li>
</ul>

<p>Things that involve hosted services:</p>

<ul>
<li>CI/CD, with GitHub Actions/CircleCI/GitLab etc</li>
<li>Making useful websites by only writing frontend code, with a variety of &ldquo;serverless&rdquo; backend services</li>
<li>Training neural networks, with Colab</li>
<li>Deploying a website to a server, with Netlify/Heroku etc</li>
<li>Running a database, with hosted services like RDS</li>
<li>Realtime web applications, with Firebase</li>
<li>Image recognition, with hosted ML services like Teachable Machine</li>
</ul>

<p>Things that I haven&rsquo;t done myself but that sound cool:</p>

<ul>
<li>Cryptography, with opinionated crypto primitives like libsodium</li>
<li>Live updates to web pages pushed by the web server, with LiveView/Hotwire</li>
<li>Embedded programming, with MicroPython</li>
<li>Building videogames, with Roblox / Unity</li>
<li>Writing code that runs on GPU in the browser (maybe with Unity?)</li>
<li>Building IDE tooling with LSP (the language server protocol)</li>
<li>Interactive theorem provers (not sure with what)</li>
<li>NLP, with HuggingFace</li>
<li>Parsing, with PEG or parser combinator libraries</li>
<li>ESP microcontrollers</li>
<li>Batch data processing, with Spark</li>
</ul>

<p>Language specific things people mentioned:</p>

<ul>
<li>Rust, with non-lexical lifetimes</li>
<li>IE support for CSS/JS</li>
</ul>

<h3 id="what-else">what else?</h3>

<p>I&rsquo;d love more examples of things that have become easier over the years.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The multiple meanings of "nameserver" and "DNS resolver"]]></title>
    <link href="https://jvns.ca/blog/2022/02/14/some-dns-terminology/"/>
    <updated>2022-02-14T12:31:34+00:00</updated>
    <id>https://jvns.ca/blog/2022/02/14/some-dns-terminology/</id>
    <content type="html"><![CDATA[

<p>I&rsquo;m working on a zine about DNS right now, so I&rsquo;ve been thinking about DNS
terminology a lot more than a normal person. Here&rsquo;s something slightly
confusing I&rsquo;ve noticed about DNS terminology!</p>

<p>Two of the most common DNS server terms (&ldquo;nameserver&rdquo; and &ldquo;DNS resolver&rdquo;)
have different meanings depending on the situation.</p>

<p>Now this isn&rsquo;t a problem if you already understand how DNS works &ndash; I can
easily figure out what type of &ldquo;nameserver&rdquo; is being discussed based on
context.</p>

<p>But it can be a problem if you&rsquo;re trying to learn how DNS works and you don&rsquo;t
realize that those words might refer to different things depending on the
context &ndash; it&rsquo;s confusing! So I&rsquo;m going to explain the different possible
meanings and how to figure out which meaning is intended.</p>

<h3 id="the-2-meanings-of-nameserver">the 2 meanings of &ldquo;nameserver&rdquo;</h3>

<p>There are 2 types of nameservers, and which one the term &ldquo;nameserver&rdquo; means
depends on the context.</p>

<p><strong>Meaning 1: &ldquo;authoritative&rdquo; nameservers</strong></p>

<p>When you update the DNS records for a domain, those records are stored on a
server called an <strong>authoritative nameserver</strong>.</p>

<p>This is what &ldquo;nameserver&rdquo; means in the context of a <strong>specific domain</strong>. Here are a few examples:</p>

<ul>
<li>&ldquo;Connect a domain you already own to Wix by changing its <em>name servers</em>.&rdquo;</li>
<li>&ldquo;Almost all domains rely on multiple <em>nameservers</em> to increase reliability:
if one nameserver goes down or is unavailable, DNS queries can go to
another one.&rdquo;</li>
<li>&ldquo;You can update the <em>nameserver</em> records yourself by following the steps
your domain registrar may provide in the help content at their website&rdquo;</li>
</ul>

<p><strong>Meaning 2. &ldquo;recursive&rdquo; nameservers, also known as &ldquo;DNS resolvers&rdquo;</strong></p>

<p>These servers cache DNS records. Your browser doesn&rsquo;t make a request to an
authoritative nameserver directly. Instead it makes a request to a DNS resolver (aka recursive nameserver)
which figures out what the right authoritative nameserver to talk to is, gets
the record, and caches the result.</p>

<p>This is what &ldquo;nameserver&rdquo; means in the context of <strong>you browsing the internet</strong>.
(&ldquo;your computer&rsquo;s nameservers&rdquo;). Here are a few examples:</p>

<ul>
<li>&ldquo;Changing <em>nameservers</em> can be a pain on some devices and require multiple
clicks through a user interface. On Windows 10, for example&hellip;&rdquo;</li>
<li>&ldquo;Are your DNS <em>nameservers</em> impeding your Internet experience? NEW RELEASE
adds nameservers  1.1.1.1,  1.0.0.1  and  9.9.9.9&rdquo;</li>
<li>&ldquo;Configure your network settings to use the IP addresses 8.8.8.8 and 8.8.4.4 as your DNS servers&rdquo;</li>
</ul>

<p>I prefer to use the term &ldquo;DNS resolver&rdquo; even though it has 2 meanings because
it&rsquo;s much more commonly used than &ldquo;recursive nameserver&rdquo;.</p>

<h3 id="meanings-of-dns-resolver">meanings of &ldquo;DNS resolver&rdquo;</h3>

<p>A DNS resolver can either be a library or a server. (I&rsquo;m sorry, I know I said
that a DNS resolver is a server earlier. But sometimes it&rsquo;s a library.)</p>

<p><strong>Meaning 1a: &ldquo;stub resolver&rdquo; (library version)</strong></p>

<p>A &ldquo;stub resolver&rdquo; is something (it can be either a library or a DNS server)
which doesn&rsquo;t know how to resolve DNS names itself, it&rsquo;s just in charge of
forwarding DNS queries to the &ldquo;real&rdquo; DNS resolver. Let&rsquo;s talk about stub resolvers that are libraries first.</p>

<p>For example, the <code>getaddrinfo</code> function from libc doesn&rsquo;t know how to look up
DNS records itself, it just knows to look in <code>/etc/resolv.conf</code> and forward the
query to whatever DNS server(s) it finds there.</p>

<p>How you can tell if this is what&rsquo;s meant: if it&rsquo;s part of your computer&rsquo;s
operating system and/or if it&rsquo;s a library, it&rsquo;s a stub resolver.</p>

<p>Examples of this meaning of &ldquo;DNS resolver&rdquo;:</p>

<ul>
<li>&ldquo;The <em>resolver</em> is a set of routines in the C library that provide access to
the Internet Domain Name System (DNS)&rdquo;</li>
<li>&ldquo;These are the DNS servers used to resolve web addresses. You can list up to
three, and the <em>resolver</em> tries each of them, one by one, until it finds one
that works.&rdquo;</li>
<li>&ldquo;If the command succeeds, you will receive the following message &ldquo;Successfully flushed the <em>DNS Resolver</em> Cache.&ldquo;&rdquo;</li>
</ul>

<p><strong>Meaning 1b: &ldquo;stub resolver&rdquo; (server version)</strong></p>

<p>Stub resolvers aren&rsquo;t always libraries though, like <code>systemd-resolved</code> and
<code>dnsmasq</code> are stub resolvers but they&rsquo;re servers. Your router might be running
<code>dnsmasq</code>.</p>

<p>This is also known as a &ldquo;DNS forwarder&rdquo;.</p>

<p>How you can tell if this is what&rsquo;s meant: if your router is running it or it&rsquo;s
part of your OS, it&rsquo;s probably a stub resolver.</p>

<p><strong>Meaning 2: a recursive nameserver (a server)</strong></p>

<p>A &ldquo;recursive nameserver&rdquo; (like we talked about before) is a server that knows
how to find the authoritative nameservers for a domain. This is the kind of DNS resolver I was talking about in this <a href="https://jvns.ca/blog/2022/02/01/a-dns-resolver-in-80-lines-of-go/">A toy DNS resolver</a>
post a couple of weeks ago (though mine wasn&rsquo;t a server).</p>

<p>How to tell if this is what&rsquo;s meant: if it&rsquo;s <code>unbound</code>, <code>bind</code>, 8.8.8.8,
1.1.1.1, or run by your ISP, then it&rsquo;s a recursive nameserver.</p>

<p>Examples of this meaning of &ldquo;DNS resolver&rdquo;:</p>

<ul>
<li>&ldquo;The DNS Resolver in pfSense® software utilizes unbound, which is a
validating, recursive, caching <em>DNS resolver</em>&hellip;&rdquo;</li>
<li>&ldquo;We invite you to try Google Public DNS as your primary or secondary <em>DNS resolver</em>&hellip;&rdquo;</li>
<li>&ldquo;I work for a reasonably large mobile service provider and we are in the process of implementing our own <em>DNS resolver</em>&hellip;&rdquo;</li>
</ul>

<h3 id="the-most-popular-dns-server-words">the most popular DNS server words</h3>

<p>I also did a quick unscientific survey of which terms to refer to DNS servers
were the most common by counting Google results. Here&rsquo;s what I found:</p>

<ul>
<li>dns server: 8,000,000</li>
<li>nameserver: 4,200,000</li>
<li>dns resolver: 933,000</li>
<li>public DNS server: 204,000</li>
<li>root nameserver: 42,000</li>
<li>recursive resolver: 38,500</li>
<li>stub resolver: 26,100</li>
<li>authoritative nameserver: 17,000</li>
<li>dns resolution service: 9,450</li>
<li>TLD nameserver: 7,500</li>
<li>dns recursor: 5,300</li>
<li>recursive nameserver: 5,060</li>
</ul>

<p>Basically what this tells me is that by a pretty big margin, the most popular
words used when talking about DNS serves are &ldquo;nameserver&rdquo;, and &ldquo;DNS resolver&rdquo;.</p>

<p>The more specific terms like &ldquo;recursive nameserver&rdquo;, &ldquo;authoritative
nameserver&rdquo;, and &ldquo;stub resolver&rdquo; are much less common.</p>

<h3 id="that-s-all">that&rsquo;s all!</h3>

<p>I hope this helps some folks understand what these words mean! The terminology
is a bit messier than I&rsquo;d like, but it seems better to me to explain it than to
use less-ambiguous language that isn&rsquo;t as commonly used in practice.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A toy DNS resolver]]></title>
    <link href="https://jvns.ca/blog/2022/02/01/a-dns-resolver-in-80-lines-of-go/"/>
    <updated>2022-02-01T09:15:14+00:00</updated>
    <id>https://jvns.ca/blog/2022/02/01/a-dns-resolver-in-80-lines-of-go/</id>
    <content type="html"><![CDATA[

<p>Hello! I wrote a comic last week called &ldquo;life of a DNS query&rdquo; that explains how
DNS resolvers work.</p>

<p>In this post, I want to explain how DNS resolvers work in a different way &ndash;
with a short Go program that does the same thing described in the comic.
The main function (<code>resolve</code>) is actually just 20 lines, including comments.</p>

<p>I usually find it easier to understand things work when they come in the form
of programs that I can run and modify and poke at, so hopefully this program
will be helpful to some of you.</p>

<p>The program is here: <a href="https://github.com/jvns/tiny-resolver/blob/main/resolve.go">https://github.com/jvns/tiny-resolver/blob/main/resolve.go</a></p>

<h3 id="what-s-a-dns-resolver">what&rsquo;s a DNS resolver?</h3>

<p>When your browser needs to make a DNS query, it asks a <strong>DNS resolvers</strong>. When
they start, DNS resolvers don&rsquo;t know any DNS records (except the IP addresses
of the root nameservers). But they <em>do</em> know how to find DNS records for you.</p>

<p>Here&rsquo;s the &ldquo;life of a DNS query&rdquo; comic, which explains how DNS resolvers find DNS records for you.</p>

<p><a href="https://wizardzines.com/comics/life-of-a-dns-query/">
<img src="https://wizardzines.com/comics/life-of-a-dns-query/life-of-a-dns-query.png">
</a></p>

<h3 id="we-ll-use-a-library-for-parsing-dns-packets">we&rsquo;ll use a library for parsing DNS packets.</h3>

<p>I&rsquo;m not going to write this completely from scratch &ndash; I think parsing DNS
packets is really interesting, but it&rsquo;s definitely more than 80 lines of
code, and I find that it kind of distracts from the algorithm.</p>

<p>I really recommend writing a toy DNS resolver that actually does the parsing of
DNS packets if you want to learn about binary protocols though, it&rsquo;s really fun
and it&rsquo;s a totally doable to get something basic working in a weekend.</p>

<p>So I&rsquo;ve used <a href="https://github.com/miekg/dns">https://github.com/miekg/dns</a> for creating and parsing the DNS packets.</p>

<h3 id="dns-responses-contain-4-sections">DNS responses contain 4 sections</h3>

<p>You might think of DNS queries as just being a question and an answer (&ldquo;what&rsquo;s
the IP for <code>example.com</code>? it&rsquo;s <code>93.184.216.34</code>!). But actually DNS responses
contain 4 sections, and we need to use all 4 sections to write our DNS
resolver. So let&rsquo;s explain what they are.</p>

<p>Here&rsquo;s the <code>Msg</code> struct from the <code>miekg/dns</code> library, which lists the sections.</p>

<pre><code>type Msg struct {
        MsgHdr
        Compress bool       `json:&quot;-&quot;` // If true, the message will be compressed when converted to wire format.
        Question []Question // Holds the RR(s) of the question section.
        Answer   []RR       // Holds the RR(s) of the answer section.
        Ns       []RR       // Holds the RR(s) of the authority section.
        Extra    []RR       // Holds the RR(s) of the additional section.
}
</code></pre>

<p><strong>Section 1: Question</strong>. This is the section you use when you&rsquo;re creating a
query. There&rsquo;s not much to it &ndash; it just has a query name (like <code>jvns.ca.</code>), a
type (like <code>A</code>, but encoded as an integer), and a class (which is always the
same these days, &ldquo;internet&rdquo;).</p>

<p>Here&rsquo;s what the Question struct <code>miekg/dns</code> looks like:</p>

<pre><code>type Question struct {
        Name   string `dns:&quot;cdomain-name&quot;` // &quot;cdomain-name&quot; specifies encoding (and may be compressed)
        Qtype  uint16
        Qclass uint16
}
</code></pre>

<p><strong>Section 2: Answer</strong>. When you make a request like this:</p>

<pre><code>$ dig +short google.com
93.184.216.34
</code></pre>

<p>the IP address <code>93.184.216.34</code> comes from the <strong>Answer</strong> section.</p>

<p>The Answer, Authority, and Additional sections all contain <strong>DNS records</strong>.
Different types of records have different formats, but they all contain a <strong>name</strong>, <strong>type</strong>, <strong>class</strong>, and <strong>TTL</strong></p>

<p>Here&rsquo;s what the shared header looks like in <code>miekg/dns</code>:</p>

<pre><code>type RR_Header struct {
        Name     string `dns:&quot;cdomain-name&quot;`
        Rrtype   uint16
        Class    uint16
        Ttl      uint32
        Rdlength uint16 // Length of data after header.
}
</code></pre>

<p>&ldquo;RR&rdquo; stands for &ldquo;Resource Record&rdquo;.</p>

<p><strong>Section 3: Authority</strong>. When a nameserver redirects you to another server
(&ldquo;ask <code>a.iana-servers.net</code> instead!&ldquo;), this is the section it uses. <code>miekg/dns</code>
calls this section <code>Ns</code> instead of <code>Authority</code>, I guess because it contains
<code>NS</code> records.</p>

<p>Here&rsquo;s an example of an record in the Authority section of a DNS response.</p>

<pre><code>$ dig +noall +authority @h.root-servers.net example.com 
com.			172800	IN	NS	a.gtld-servers.net.
com.			172800	IN	NS	b.gtld-servers.net.
</code></pre>

<p>The Authority section can also contain SOA records but that&rsquo;s not relevant to
this post so I&rsquo;m not going to talk about that.</p>

<p><strong>Section 4: Additional</strong>. This is where &ldquo;glue records&rdquo; live. What&rsquo;s a glue
record? Well, basically when a nameserver redirects you to another server,
often it&rsquo;ll include the IP address of that server as well.</p>

<p>Here are the glue records from the same query above.</p>

<pre><code>$ dig +noall +additional @h.root-servers.net example.com 
a.gtld-servers.net.	172800	IN	A	192.5.6.30
b.gtld-servers.net.	172800	IN	A	192.33.14.30
</code></pre>

<p>There are other things in the Additional section as well, not just glue
records, but they&rsquo;re not relevant to this blog post so I&rsquo;m not going to talk
about them.</p>

<h3 id="the-basic-resolve-function-is-pretty-short">the basic <code>resolve</code> function is pretty short</h3>

<p>Now that we&rsquo;ve talked about the different sections in a DNS response, I can explain the resolver code.</p>

<p>Let&rsquo;s jump into the main function for resolving a name to an IP address.</p>

<p><code>name</code> here is a domain name, like <code>example.com.</code>`</p>

<pre><code>func resolve(name string) net.IP {
   // We always start with a root nameserver
   nameserver := net.ParseIP(&quot;198.41.0.4&quot;)
   for {
      reply := dnsQuery(name, nameserver)
      if ip := getAnswer(reply); ip != nil { // look in the &quot;Answer&quot; section
         // Best case: we get an answer to our query  and we're done
         return ip
      } else if nsIP := getGlue(reply); nsIP != nil { // look in the &quot;Additional&quot; section
            // Second best: we get a &quot;glue record&quot; with the *IP address* of
            // another nameserver to query 
         nameserver = nsIP
      } else if domain := getNS(reply); domain != &quot;&quot; { // look in the &quot;Authority&quot; section
            // Third best: we get the *domain name* of another nameserver to
            // query, which we can look up the IP for
         nameserver = resolve(domain)
      } else {
         // If there's no A record we just panic, this is not a very good
         // resolver :)
         panic(&quot;something went wrong&quot;)
      }
   }
}
</code></pre>

<p>Here&rsquo;s what that <code>resolve</code> function is doing:
1. We start with the root nameserver
2. Then we do a loop:
    a. Query the nameserver and parse the response
    a. Look in the &ldquo;Answer&rdquo; section for a response. If we find one, we&rsquo;re done
    a. Look in the &ldquo;Additional&rdquo; section for a glue record. If we find one, use that as the nameserver for the next query
    a. Look in the &ldquo;Authority&rdquo; section for a nameserver domain. If we find one, look up its IP and then use that IP as the nameserver for the next query</p>

<p>That&rsquo;s basically the whole program. There are a few helper functions to get
records out of the DNS response and to make DNS queries but I don&rsquo;t think
they&rsquo;re that interesting so I won&rsquo;t explain them.</p>

<h3 id="the-output">the output</h3>

<p>The resolver prints out all DNS queries it made, and the record it used to figure out what query to make it next.</p>

<p>It prints out <code>dig -r @SERVER DOMAIN</code> for each query even though it&rsquo;s not
actually using <code>dig</code> to make the query because I liked being able to run
the same query myself from the command line to see the response myself, for
debugging purposes.</p>

<p><code>-r</code> just means &ldquo;ignore what&rsquo;s in <code>.digrc</code>&rdquo;, it&rsquo;s there because I have some
options in my <code>.digrc</code>  (<code>+noall +answer</code>) that I wanted to disable when
debugging.</p>

<p>Let&rsquo;s look at 3 examples of the output.</p>

<h3 id="example-1-jvns-ca">example 1: jvns.ca</h3>

<pre><code>$ go run resolve.go jvns.ca.
dig -r @198.41.0.4 jvns.ca.
   any.ca-servers.ca.	172800	IN	A	199.4.144.2
dig -r @199.4.144.2 jvns.ca.
   jvns.ca.	86400	IN	NS	art.ns.cloudflare.com.
dig -r @198.41.0.4 art.ns.cloudflare.com.
   a.gtld-servers.net.	172800	IN	A	192.5.6.30
dig -r @192.5.6.30 art.ns.cloudflare.com.
   ns3.cloudflare.com.	172800	IN	A	162.159.0.33
dig -r @162.159.0.33 art.ns.cloudflare.com.
   art.ns.cloudflare.com.	900	IN	A	173.245.59.102
dig -r @173.245.59.102 jvns.ca.
   jvns.ca.	256	IN	A	172.64.80.1
</code></pre>

<p>We can see it had to make 6 DNS queries, 3 to look up <code>jvns.ca</code> and 3 to look up <code>jvns.ca</code>&rsquo;s nameserver, <code>art.ns.cloudflare.com</code></p>

<h3 id="example-2-archive-org">example 2: archive.org</h3>

<pre><code>$ go run resolve.go archive.org.
dig -r @198.41.0.4 archive.org.
   a0.org.afilias-nst.info.	172800	IN	A	199.19.56.1
dig -r @199.19.56.1 archive.org.
   ns1.archive.org.	86400	IN	A	208.70.31.236
dig -r @208.70.31.236 archive.org.
   archive.org.	300	IN	A	207.241.224.2
Result: 207.241.224.2
</code></pre>

<p>This one only had to make 3 DNS queries. This is because there was a glue
record available for archive.org&rsquo;s nameserver (<code>ns1.archive.org.</code>).</p>

<h3 id="example-3-www-maths-ox-ac-uk">example 3: www.maths.ox.ac.uk</h3>

<p>One last example: let&rsquo;s look up <code>www.maths.ox.ac.uk</code>. There&rsquo;s a reason for this one, I promise!</p>

<pre><code>dig -r @198.41.0.4 www.maths.ox.ac.uk.
   dns1.nic.uk.	172800	IN	A	213.248.216.1
dig -r @213.248.216.1 www.maths.ox.ac.uk.
   ac.uk.	172800	IN	NS	ns0.ja.net.
dig -r @198.41.0.4 ns0.ja.net.
   e.gtld-servers.net.	172800	IN	A	192.12.94.30
dig -r @192.12.94.30 ns0.ja.net.
   ns0.ja.net.	172800	IN	A	128.86.1.20
dig -r @128.86.1.20 ns0.ja.net.
   ns0.ja.net.	86400	IN	A	128.86.1.20
dig -r @128.86.1.20 www.maths.ox.ac.uk.
   ns2.ja.net.	86400	IN	A	193.63.105.17
dig -r @193.63.105.17 www.maths.ox.ac.uk.
   www.maths.ox.ac.uk.	300	IN	A	129.67.184.128
Result: 129.67.184.128
</code></pre>

<p>This makes <strong>7</strong> DNS queries, which is more than <code>jvns.ca</code>, which only needed
6. Why does it make 7 DNS queries instead of 6?</p>

<p>Well, it&rsquo;s because there are 4 nameservers involved in resolving <code>www.maths.ox.ac.uk</code> instead of 3. They are:</p>

<ul>
<li>the <code>.</code> nameserver</li>
<li>the <code>uk.</code> nameserver</li>
<li>the <code>ac.uk.</code> nameserver</li>
<li>the <code>ox.ac.uk.</code> nameserver</li>
</ul>

<p>You could even imagine there being a 5th one (a <code>maths.ox.ac.uk.</code> nameserver), but there isn&rsquo;t in this case.</p>

<p>jvns.ca only involves 3 nameservers:</p>

<ul>
<li>the <code>.</code> nameserver</li>
<li>the <code>ca.</code> nameserver</li>
<li>the <code>jvns.ca.</code> nameserver</li>
</ul>

<h3 id="real-dns-resolvers-actually-make-more-queries-than-this">real DNS resolvers actually make more queries than this</h3>

<p>When my resolver resolves <code>reddit.com.</code>, it only makes 3 DNS queries.</p>

<pre><code>$ go run resolve.go reddit.com.
dig -r @198.41.0.4 reddit.com.
   e.gtld-servers.net.	172800	IN	A	192.12.94.30
dig -r @192.12.94.30 reddit.com.
   ns-378.awsdns-47.com.	172800	IN	A	205.251.193.122
dig -r @205.251.193.122 reddit.com.
   reddit.com.	300	IN	A	151.101.129.140
Result: 151.101.129.140
</code></pre>

<p>But when <code>unbound</code> (the actual DNS resolver that I have running on my laptop)
resolves reddit.com, it makes more DNS queries. I captured them with <code>tcpdump</code>
to see what they were.</p>

<p>This <code>tcpdump</code> output might be a little illegible because well, that&rsquo;s how
tcpdump is, but hopefully it makes some sense.</p>

<p>Unbound skips the first step, because it has the address of the <code>com.</code>
nameserver cached.  Then the next 2 queries <code>unbound</code> makes are exactly the
same as my tiny Go resolver, except that it sends its first query to
<code>k.gtld-servers.net</code> instead of <code>e.gtld-servers.net</code>:</p>

<pre><code>12:38:35.479222 wlp3s0 Out IP pomegranate.19946 &gt; k.gtld-servers.net.domain: 51686% [1au] A? reddit.com. (39)
12:38:35.757033 wlp3s0 Out IP pomegranate.29111 &gt; ns-378.awsdns-47.com.domain: 8859% [1au] A? reddit.com. (39)
</code></pre>

<p>But then it keeps making DNS queries, even after it&rsquo;s done resolving <code>reddit.com</code>:</p>

<pre><code>12:38:35.757033 wlp3s0 Out IP pomegranate.29111 &gt; ns-378.awsdns-47.com.domain: 8859% [1au] A? reddit.com. (39)
12:38:35.757396 wlp3s0 Out IP pomegranate.31913 &gt; ns-1775.awsdns-29.co.uk.domain: 54236% [1au] A? ns-378.awsdns-47.com. (49)
12:38:35.757761 wlp3s0 Out IP pomegranate.62059 &gt; g.gtld-servers.net.domain: 28793% [1au] A? awsdns-05.net. (42)
12:38:35.757955 wlp3s0 Out IP pomegranate.34743 &gt; b0.org.afilias-nst.org.domain: 24975% [1au] A? awsdns-00.org. (42)
12:38:35.758051 wlp3s0 Out IP pomegranate.8977 &gt; a0.org.afilias-nst.info.domain: 53387% [1au] A? awsdns-00.org. (42)
12:38:35.758285 wlp3s0 Out IP pomegranate.11376 &gt; j.gtld-servers.net.domain: 41181% [1au] A? awsdns-05.net. (42)
12:38:35.775497 wlp3s0 In  IP ns-378.awsdns-47.com.domain &gt; pomegranate.29111: 8859*-$ 4/4/1 A 151.101.1.140, A 151.101.129.140, A 151.101.65.140, A 151.101.193.140 (240)
12:38:35.775948 lo    In  IP localhost.domain &gt; localhost.34429: 4033 4/0/1 A 151.101.1.140, A 151.101.129.140, A 151.101.65.140, A 151.101.193.140 (103)
# now it's done -- it returned its DNS response!
# but it keeps making queries about reddit.com's nameservers...
12:38:35.843811 wlp3s0 Out IP pomegranate.44738 &gt; ns-706.awsdns-24.net.domain: 14817% [1au] A? ns-1029.awsdns-00.org. (50)
12:38:35.845563 wlp3s0 Out IP pomegranate.55655 &gt; ns-1027.awsdns-00.org.domain: 3120% [1au] A? ns-1029.awsdns-00.org. (50)
12:38:36.017618 wlp3s0 Out IP pomegranate.53397 &gt; ns-775.awsdns-32.net.domain: 32671% [1au] A? ns-557.awsdns-05.net. (49)
12:38:36.045151 wlp3s0 Out IP pomegranate.40525 &gt; ns-454.awsdns-56.com.domain: 20823% [1au] A? ns-557.awsdns-05.net. (49)
</code></pre>

<p>So that&rsquo;s kind of interesting. I guess it makes sense that unbound would want
to cache more nameserver addresses in case it needs them in the future. Or
maybe that&rsquo;s what the DNS specification says to do?</p>

<h3 id="is-this-a-recursive-program">is this a &ldquo;recursive&rdquo; program?</h3>

<p>DNS resolvers are often called &ldquo;recursive nameservers&rdquo;. I&rsquo;ve stopped using that
terminology myself in explanations, but as far as I can tell, this is because
the <code>resolve</code> function is often a recursive function.</p>

<p>And the <code>resolve</code> function I wrote is definitely recursive! But I ran this
program on 500 different domains, and these are the number of times it
recursed:</p>

<ol>
<li>Sometimes 0 times (the function never calls itself)</li>
<li>Sometimes 1 time (the function calls itself once, to look up the IP address of one nameserver)</li>
<li>Very rarely 2 times (like for example to resolve <code>abc.net.au.</code> right now it needs to look up <code>r.au.</code>, then <code>eur2.akam.net.</code> then <code>abc.net.au.</code>)</li>
<li>So far, never 3 times</li>
</ol>

<p>Maybe there&rsquo;s a domain that this function would recurse more than 2 times on, but I don&rsquo;t know.</p>

<p>You definitely <em>could</em> write this program in a way that recurses more, by
replacing the loop with more recursion. And then it would recurse 3 or 6 or 7
or 9 times, depending on the domain. But to me the loop feels easier to read so
I wrote it with a loop instead.</p>

<h3 id="a-bash-version-of-this-resolver">a bash version of this resolver</h3>

<p>I wanted to see if it was possible to write a DNS resolver in 10-15 lines of bash, similarly to <a href="https://gist.github.com/jvns/ea2e4d572b4e2285148b8e87f70eed73">this short &ldquo;run a container&rdquo; script</a></p>

<p>The program I came up with was kind of too long in the end (it&rsquo;s about 36 lines), but here it is anyway. It uses the exact same algorithm as the Go program.</p>

<p><a href="https://github.com/jvns/tiny-resolver/blob/main/resolver.sh">https://github.com/jvns/tiny-resolver/blob/main/resolver.sh</a></p>

<p>The bash version is even more janky and uses <code>grep</code> in very questionable ways
but it did resolve every domain I tried which is cool.</p>

<p>It actually helped me write the Go resolver (which I actually started back in
November but got stuck on) because bash&rsquo;s limitations forced me to simplify the
design and simplifying it fixed a bug I was running into.</p>

<h3 id="how-is-this-different-from-a-real-dns-resolver">how is this different from a &ldquo;real&rdquo; DNS resolver?</h3>

<p>Obviously this is only 80 lines so there are a lot of differences between this
an a &ldquo;real&rdquo; DNS resolver. Here are a few:</p>

<ul>
<li>it only handles A records, not other record types</li>
<li>specifically it doesn&rsquo;t handle CNAME records (though you can easily add CNAME support with just <a href="https://github.com/jvns/tiny-resolver/commit/8a2dada63ec214ecf01046e3f57eb5406706b302">another 12 lines of code</a>)</li>
<li>it always only returns one A record even if there are more</li>
<li>it has absolutely no ability to handle errors like &ldquo;there were no A records&rdquo; (the Go program just panics)</li>
<li>the way it handles the glue records is a bit sketchy, probably it should
check that they match the nameservers in the &ldquo;Authority&rdquo; section or
something.  It seems to work though.</li>
<li>DNS resolvers are usually servers, this is a command line program</li>
<li>it doesn&rsquo;t validate DNSSEC or whatever</li>
<li>it doesn&rsquo;t do caching</li>
<li>it doesn&rsquo;t try a different nameserver if one of the domain&rsquo;s nameservers isn&rsquo;t working and times out the DNS query</li>
<li>like we mentioned above, unbound seems to look up the addresses of all the nameservers for a domain</li>
<li>probably there are other bugs and ways it violates the DNS spec that I don&rsquo;t know about</li>
</ul>

<h3 id="tiny-versions-of-real-programs-are-fun">tiny versions of real programs are fun</h3>

<p>As usual I always learn something from writing tiny versions of real programs.
I&rsquo;ve written this program before but I think this version is better than the
first version I wrote.</p>

<p>In 2020 I ran a 2-day workshop with my friend Allison called &ldquo;Domain Name
Saturday&rdquo; where all the participants wrote DNS resolvers. Basically the idea
was that you implement the algorithm described in this post, as well as the
binary parsing pieces that the <code>miekg/dns</code> library handles here. At some point
I want to write up that workshop so that other people could run it, because it
was really fun.</p>

<p>One question I still have is &ndash; are there domains where the <code>resolve</code> function
would recurse 3 times or more on? Obviously you could manufacture such a domain
by making it intentionally have to go through a bunch of hoops, but.. do they
exist in the real world?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reasons for servers to support IPv6]]></title>
    <link href="https://jvns.ca/blog/2022/01/29/reasons-for-servers-to-support-ipv6/"/>
    <updated>2022-01-29T07:44:38+00:00</updated>
    <id>https://jvns.ca/blog/2022/01/29/reasons-for-servers-to-support-ipv6/</id>
    <content type="html"><![CDATA[

<p>I&rsquo;ve been having a hard time understanding IPv6. On one hand, the basics initially seem pretty
straightforward (there aren&rsquo;t enough IPv4 addresses for all the devices on the
internet, so people invented IPv6! There are enough IPv6 addresses for
everyone!)</p>

<p>But when I try to actually understand it, I run into a lot of questions. One
question is: <code>twitter.com</code> does not support IPv6. Presumably it can&rsquo;t be causing
them THAT many issues to not support it. So why <em>do</em> websites support IPv6?</p>

<p>I asked people on Twitter <a href="https://twitter.com/b0rk/status/1487156306884636672">why their servers support IPv6</a>
and I got a lot of great answers, which I&rsquo;ll summarize here. These all come
with the disclaimer that I have basically 0 experience with IPv6 so I can&rsquo;t evaluate these reasons very well.</p>

<p>First though, I want to explain why it&rsquo;s possible for <code>twitter.com</code> to not
support IPv6 because I didn&rsquo;t understand that initially.</p>

<h3 id="how-can-you-tell-twitter-com-doesn-t-support-ipv6">how can you tell <code>twitter.com</code> doesn&rsquo;t support IPv6?</h3>

<p>You can tell they don&rsquo;t support IPv6 is because if you look up their AAAA
record (which contains their IPv6 address), there isn&rsquo;t one. Some other big
sites like <code>github.com</code> and <code>stripe.com</code> also don&rsquo;t support IPv6.</p>

<pre><code>$ dig AAAA twitter.com
(empty response)
$ dig AAAA github.com
(empty response)
$ dig AAAA stripe.com
(empty response)
</code></pre>

<h3 id="why-does-twitter-com-still-work-for-ipv6-users">why does <code>twitter.com</code> still work for IPv6 users?</h3>

<p>I found this really confusing, because I&rsquo;ve always heard that lots of internet
users are forced to use IPv6 because we&rsquo;ve run out of IPv4 addresses. But if
that&rsquo;s true, how could twitter.com continue to work for those people without
IPv6 support? Here&rsquo;s what I learned from the Twitter thread yesterday.</p>

<p>There are two kinds of internet service providers (ISPs):</p>

<ol>
<li>ISPs who own enough IPv4 address for all of their customers</li>
<li>ISPs who don&rsquo;t</li>
</ol>

<p>My ISP is in category 1 &ndash; my computer gets its own IPv4 address, and actually
my ISP doesn&rsquo;t even support IPv6 at all.</p>

<p>But lots of ISPs (especially outside of North America) are in category 2: they
don&rsquo;t have enough IPv4 addresses for all their customers. Those ISPs handle the problem by:</p>

<ul>
<li>giving all of their customers a unique IPv6 address, so they can access IPv6 sites directly</li>
<li>making large groups of their customers <em>share</em> IPv4 addresses. This can either be with CGNAT (&rdquo;<a href="https://en.wikipedia.org/wiki/Carrier-grade_NAT">carrier-grade NAT</a>&rdquo;) or &ldquo;464XLAT&rdquo; or maybe something else.</li>
</ul>

<p>All ISPs need <em>some</em> IPv4 addresses, otherwise it would be impossible for their
customers to access IPv4-only sites like twitter.com.</p>

<h3 id="what-are-the-reasons-to-support-ipv6">what are the reasons to support IPv6?</h3>

<p>Now we&rsquo;ve explained why it&rsquo;s possible to <em>not</em> support IPv6. So why support it?
There were a lot of reasons.</p>

<h3 id="reason-cgnat-is-a-bottleneck">reason: CGNAT is a bottleneck</h3>

<p>The argument that was most compelling to me was: CGNAT (carrier-grade NAT) is a
bottleneck and it causes performance issues, and it&rsquo;s going to continue to get
worse over time as access to IPv4 addresses becomes more and more restricted.</p>

<p>Someone also mentioned that because CGNAT is a bottleneck, it&rsquo;s an attractive
DDoS target because you can ruin lots of people&rsquo;s internet experience just by
attacking 1 server.</p>

<p>Servers supporting IPv6 reduces the need for CGNAT (IPv6 users can just connect
directly!) which makes the internet work better for everyone.</p>

<p>I thought this argument was interesting because it&rsquo;s a &ldquo;public commons&rdquo; /
community argument &ndash; it&rsquo;s less that supporting IPv6 will make your site
specifically work better, and more that if <em>almost everyone</em> supports IPv6 then
it&rsquo;ll make the experience of the internet better for everyone, especially in
countries where people don&rsquo;t have easy access to IPv4 addresses.</p>

<p>I don&rsquo;t actually know how much of an issue this is in practice.</p>

<p>There were lots of more selfish arguments to use IPv6 too though, so let&rsquo;s get
into those.</p>

<h3 id="reason-so-ipv6-only-servers-can-access-your-site">reason: so IPv6-only servers can access your site</h3>

<p>I said before that most IPv6 users still have access to IPv4 through some kind
of NAT. But apparently that&rsquo;s not true for everyone &ndash; some people mentioned
that they run some servers which only have IPv6 addresses and which aren&rsquo;t
behind any kind of NAT. So those servers are actually totally unable to access
IPv4-only sites.</p>

<p>I imagine that those servers aren&rsquo;t connecting to arbitrary machines that much
&ndash; maybe they only need to connect to a few hosts with IPv6 support.</p>

<p>But it makes sense to me that a machine should be able to access my site even
if it doesn&rsquo;t have an IPv4 address.</p>

<h3 id="reason-better-performance">reason: better performance</h3>

<p>For users who are using both IPv4 and IPv6 (with a dedicated IPv6 address and a
shared IPv4 address), apparently IPv6 is often faster because it doesn&rsquo;t need
to go through an extra translation layer.</p>

<p>So supporting IPv6 can make the site faster for users sometimes.</p>

<p>In practice clients use an algorithm called &ldquo;Happy Eyeballs&rdquo; which tries to
figure out whether IPv4 or IPv6 will be faster and then uses whichever seems
faster.</p>

<p>Some other performance benefits people mentioned:</p>

<ul>
<li>maybe sometimes using IPv6 can get you a SEO boost because of the better performance.</li>
<li>maybe using IPv6 causes you to go through better (faster) network hardware because it&rsquo;s a newer protocol</li>
</ul>

<h3 id="reason-resilience-against-ipv4-internet-outages">reason: resilience against IPv4 internet outages</h3>

<p>One person said that they&rsquo;ve run into issues where there was an internet outage
that only affected IPv4 traffic, because of accidental BGP poisoining.</p>

<p>So supporting IPv6 means that their site can still stay partially online during
those outages.</p>

<h3 id="reason-to-avoid-nat-issues-with-home-servers">reason: to avoid NAT issues with home servers</h3>

<p>A few people mentioned that it&rsquo;s much easier to use IPv6 with home servers &ndash;
instead of having to do port forwarding through your router, you can just give
every server a unique IPv6 address and then access it directly.</p>

<p>Of course, for this to work the client needs to have IPv6 support, but more and
more clients these days have IPv6 support too.</p>

<h3 id="reason-to-learn-about-ipv6">reason: to learn about IPv6</h3>

<p>One person said they work in security and in security it&rsquo;s very important to
understand how internet protocols work (attackers are using internet
protocols!). So running an IPv6 server helps them learn how it works.</p>

<h3 id="reason-to-push-ipv6-forward-ipv4-is-legacy">reason: to push IPv6 forward / IPv4 is &ldquo;legacy&rdquo;</h3>

<p>A couple of people said that they support IPv6 because it&rsquo;s the current
standard, and so they want to contribute to the success of IPv6 by supporting
it.</p>

<p>A lot of people also said that they support IPv6 because they think sites that only
support IPv4 are &ldquo;behind&rdquo; or &ldquo;legacy&rdquo;.</p>

<h3 id="reason-it-s-easy">reason: it&rsquo;s easy</h3>

<p>I got a bunch of answers along the lines of &ldquo;it&rsquo;s easy, why not&rdquo;. Obviously
adding IPv6 support is not easy in all situations, but a couple of reasons it
might be easy in some cases:</p>

<ul>
<li>you automatically got an IPv6 address from your hosting company, so all you need to do is add an <code>AAAA</code> record pointing to that address</li>
<li>your site is behind a CDN that supports IPv6, so you don&rsquo;t need to do anything extra</li>
</ul>

<h3 id="reason-safer-networking-experimentation">reason: safer networking experimentation</h3>

<p>Because the address space is so big, if you want to try something out you can
just grab an IPv6 subnet, try out some things in it, and then literally never
use that subnet again.</p>

<h3 id="reason-to-run-your-own-autonomous-system-as">reason: to run your own autonomous system (AS)</h3>

<p>A few people said they were running their own autonomous system (I talked about what an AS is a bit in this <a href="https://jvns.ca/blog/2021/10/05/tools-to-look-at-bgp-routes/">BGP post</a>). IPv4 addresses are too expensive so they bought IPv6 addresses for their AS instead.</p>

<h3 id="reason-security-by-obscurity">reason: security by obscurity</h3>

<p>If your server <em>only</em> has a public IPv6 address, attackers can&rsquo;t easily find it
by scanning the whole internet. The IPv6 address space is too big to scan!</p>

<p>Obviously this shouldn&rsquo;t be your only security measure, but it seems like a
nice bonus &ndash; any time I run an IPv4 public server I&rsquo;m always a tiny bit
surprised by how it&rsquo;s constantly being scanned for vulnerabilities (like old versions of WordPress, etc).</p>

<h3 id="very-silly-reason-you-can-put-easter-eggs-in-your-ipv6-address">very silly reason: you can put easter eggs in your IPv6 address</h3>

<p>IPv6 addresses have a lot of extra bits in them that you can do frivolous
things with. For example one of Facebook&rsquo;s IPv6 addresses is
&ldquo;2a03:2880:f10e:83:face:b00c:0:25de&rdquo; (it has <code>face:b00c</code> in it).</p>

<h3 id="there-are-more-reasons-than-i-thought">there are more reasons than I thought</h3>

<p>That&rsquo;s all I&rsquo;ve learned about the &ldquo;why support IPv6?&rdquo; question so far.</p>

<p>I came away from this conversation more motivated to support IPv6 on my
(very small) servers than I had been before. But that&rsquo;s because I think
supporting IPv6 will require very little effort for me. (right now I&rsquo;m using a
CDN that supports IPv6 so it comes basically for free)</p>

<p>I know very little about IPv6 still but my impression is that IPv6 support
often isn&rsquo;t zero-effort and actually can be a lot of work. For example, I have
no idea how much work it would actually be for Twitter to add IPv6 support on
their edge servers.</p>

<h3 id="supporting-ipv6-can-also-cause-problems">supporting IPv6 can also cause problems</h3>

<p>A friend who runs a large service told me that their service has tried to add
IPv6 support multiple times over the last 7 years, but each time it&rsquo;s caused
them problems. What happened to them was:</p>

<ul>
<li>they advertised an AAAA record</li>
<li>users would get the AAAA record and try to connect to them over IPv6</li>
<li>some network equipment in the user&rsquo;s ISP/internal network somewhere was broken, so the IPv6 connection failed</li>
<li>as a result those users were unable to use their service</li>
</ul>

<p>I thought it was interesting and surprising that supporting IPv6 can actually
in some cases make things <em>worse</em> for people on dual stack (IPv4 + IPv6)
networks.</p>

<h3 id="some-more-ipv6-questions">some more IPv6 questions</h3>

<p>Here are some more IPv6 questions I have that maybe I&rsquo;ll explore later:</p>

<ul>
<li>what are the <em>disadvantages</em> to supporting IPv6? what goes somehow wrong? (here&rsquo;s one <a href="https://support.fastly.com/hc/en-us/community/posts/360040169531-I-often-can-t-access-Fastly-servers-using-HTTPS-IPv6-RST-packets-received">example of an IPv6 problem</a> someone linked me to, for example)</li>
<li>what are the incentives for ISPs that own enough IPv4 addresses for their customers to support IPv6? (another way of asking: is it likely that my ISP will move to supporting IPv6 in the next few years? or are they just not incentivized to do it so it&rsquo;s unlikely?)</li>
<li><a href="https://docs.digitalocean.com/products/networking/floating-ips/">digital ocean</a> seems to only support IPv4 floating IPs, not IPv6 floating IPs. Why not? Shouldn&rsquo;t it be
<em>easier</em> to give out IPv6 floating IPs since there are more of them?</li>
<li>when I try to ping an IPv6 address (like example.com&rsquo;s IP <code>2606:2800:220:1:248:1893:25c8:1946</code> for example) I get the error <code>ping: connect: Network is unreachable</code>. Why? (answer: it&rsquo;s because my ISP doesn&rsquo;t support IPv6 so my computer doesn&rsquo;t have a public IPv6 address)</li>
</ul>

<p>This <a href="https://tailscale.com/kb/1134/ipv6-faq/">IPv4 vs IPv6 article from Tailscale</a> looks interesting and answers some of these questions.</p>
]]></content>
  </entry>
  
</feed>
