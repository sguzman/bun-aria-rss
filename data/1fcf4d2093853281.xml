<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	xmlns:georss="http://www.georss.org/georss" xmlns:geo="http://www.w3.org/2003/01/geo/wgs84_pos#" xmlns:media="http://search.yahoo.com/mrss/"
	>

<channel>
	<title>Keeping Up With The Latest Techniques</title>
	<atom:link href="https://colinpriest.com/feed/" rel="self" type="application/rss+xml" />
	<link>https://colinpriest.com</link>
	<description>brief insights</description>
	<lastBuildDate>Thu, 06 Aug 2020 08:37:02 +0000</lastBuildDate>
	<language>en</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>http://wordpress.com/</generator>
<cloud domain='colinpriest.com' port='80' path='/?rsscloud=notify' registerProcedure='' protocol='http-post' />
<image>
		<url>https://s0.wp.com/i/buttonw-com.png</url>
		<title>Keeping Up With The Latest Techniques</title>
		<link>https://colinpriest.com</link>
	</image>
	<atom:link rel="search" type="application/opensearchdescription+xml" href="https://colinpriest.com/osd.xml" title="Keeping Up With The Latest Techniques" />
	<atom:link rel='hub' href='https://colinpriest.com/?pushpress=hub'/>
	<item>
		<title>How Humble is Your Automation System?</title>
		<link>https://colinpriest.com/2020/08/06/how-humble-is-your-automation-system/</link>
					<comments>https://colinpriest.com/2020/08/06/how-humble-is-your-automation-system/#respond</comments>
		
		<dc:creator><![CDATA[Colin Priest]]></dc:creator>
		<pubDate>Thu, 06 Aug 2020 08:37:02 +0000</pubDate>
				<category><![CDATA[Uncategorized]]></category>
		<category><![CDATA[ai]]></category>
		<category><![CDATA[humble ai]]></category>
		<category><![CDATA[intelligent automation]]></category>
		<guid isPermaLink="false">http://colinpriest.com/?p=1173</guid>

					<description><![CDATA[Last year I flew from Singapore to Sydney, Australia. As is my habit, soon after the aircraft landed, I switched &#8230;<p><a href="https://colinpriest.com/2020/08/06/how-humble-is-your-automation-system/">Continue reading <span class="meta-nav">&#8594;</span></a></p>]]></description>
										<content:encoded><![CDATA[
<figure class="wp-block-image size-large"><img data-attachment-id="1177" data-permalink="https://colinpriest.com/image/" data-orig-file="https://colinpriestdotcom.files.wordpress.com/2020/08/image.png" data-orig-size="1445,2075" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://colinpriestdotcom.files.wordpress.com/2020/08/image.png?w=209" data-large-file="https://colinpriestdotcom.files.wordpress.com/2020/08/image.png?w=529" src="https://colinpriestdotcom.files.wordpress.com/2020/08/image.png?w=713" alt="" class="wp-image-1177" srcset="https://colinpriestdotcom.files.wordpress.com/2020/08/image.png?w=713 713w, https://colinpriestdotcom.files.wordpress.com/2020/08/image.png?w=1426 1426w, https://colinpriestdotcom.files.wordpress.com/2020/08/image.png?w=104 104w, https://colinpriestdotcom.files.wordpress.com/2020/08/image.png?w=209 209w, https://colinpriestdotcom.files.wordpress.com/2020/08/image.png?w=768 768w" sizes="(max-width: 713px) 100vw, 713px" /></figure>



<p>Last year I flew from Singapore to Sydney, Australia. As is my habit, soon after the aircraft landed, I switched on my phone to check my messages and emails. In less than a minute, I received an alert from my telco that I had run up more than $50 in data costs. Twenty seconds later, I received a second alert, telling me that my data costs now exceeded $75!</p>



<p><br>&#8220;Hmm,&#8221; I thought, &#8220;I must have forgotten to sign up for a data-roaming plan.&#8221; So I went to the telco app on my phone and went to the data roaming plans on offer. All of the buttons were greyed out. It wouldn&#8217;t let me sign up for any of the data roaming plans. Meanwhile, I&#8217;d received a third alert from my telco, informing me that my data bill now exceeded $100!</p>



<p><br>I had no option but to phone back to the telco&#8217;s customer service centre in Singapore, with the associated international call charges. Imagine how I felt when instead of a friendly customer service operator, I heard an automated attendant begin with &#8220;Press 1 to change your password. Press 2 to order a new phone…&#8221;. None of the options were relevant to my problem, and it took a few minutes before I found a way to get through to a human. Thank goodness, the customer service operator was helpful and proactive. She manually overrode the system to subscribe me to a data roaming plan.<br></p>



<p>We&#8217;ve probably all heard stories of automated systems that aren&#8217;t intelligent enough to help customers, but what about automated systems that aren&#8217;t humble?<br></p>



<p>Too many automation systems have been designed to be arrogant. They have been designed to stop customers from accessing staff. They have been designed to confidently execute a small number of straightforward tasks.<br>Humble automation knows when to triage an issue to a human expert. It</p>



<ul><li>recognises when it doesn&#8217;t know enough to solve the problem,</li><li>identifies when an unusual situation occurs that needs out-of-the-box thinking, and</li><li>realizes when the customer has become emotional or confused and needs a human touch.</li></ul>



<p><br>Humble automation requires more than rules-based decisions. It is powered by artificial intelligence (AI) that has been trained to do more than merely make decisions. AI can learn to recognise anomalies, identify confused customers, and quantify the certainty and safety of a decision. Humble AI can triage an issue to a human expert, and tell that expert why the AI needed help.<br></p>



<p>How humble is your automation system? How humble is your AI system?</p>



<p></p>
]]></content:encoded>
					
					<wfw:commentRss>https://colinpriest.com/2020/08/06/how-humble-is-your-automation-system/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
		
		<media:content url="https://2.gravatar.com/avatar/883de1a12d42422f2643d6ee75c2b746?s=96&#38;d=identicon&#38;r=G" medium="image">
			<media:title type="html">colinpriest1966</media:title>
		</media:content>

		<media:content url="https://colinpriestdotcom.files.wordpress.com/2020/08/image.png?w=713" medium="image" />
	</item>
		<item>
		<title>Tutorial: Sentiment Analysis of Airlines Using the syuzhet Package and Twitter</title>
		<link>https://colinpriest.com/2017/04/30/tutorial-sentiment-analysis-of-airlines-using-the-syuzhet-package-and-twitter/</link>
					<comments>https://colinpriest.com/2017/04/30/tutorial-sentiment-analysis-of-airlines-using-the-syuzhet-package-and-twitter/#comments</comments>
		
		<dc:creator><![CDATA[Colin Priest]]></dc:creator>
		<pubDate>Sun, 30 Apr 2017 14:35:31 +0000</pubDate>
				<category><![CDATA[R]]></category>
		<category><![CDATA[Sentiment Analysis]]></category>
		<category><![CDATA[Social Media]]></category>
		<category><![CDATA[Text Mining]]></category>
		<category><![CDATA[Twitter]]></category>
		<guid isPermaLink="false">http://colinpriest.com/?p=996</guid>

					<description><![CDATA[In my last job, I was a frequent flyer. Each week I flew between 2 or 3 countries, briefly returning &#8230;<p><a href="https://colinpriest.com/2017/04/30/tutorial-sentiment-analysis-of-airlines-using-the-syuzhet-package-and-twitter/">Continue reading <span class="meta-nav">&#8594;</span></a></p>]]></description>
										<content:encoded><![CDATA[<p>In my last job, I was a frequent flyer. Each week I flew between 2 or 3 countries, briefly returning for 24 hours on the weekend to get a change of clothes. My favourite airlines were <a href="https://www.cathaypacific.com">Cathay Pacific</a>, <a href="https://www.emirates.com">Emirates</a> and <a href="http://www.singaporeair.com">Singapore Air</a>. Now, unless you have been living in a cave, you&#8217;d be well aware of the recent news story of how <a href="https://www.united.com">United Airlines</a> <a href="http://edition.cnn.com/2017/04/28/opinions/united-airlines-settlement-cevallos/index.html">removed David Dao from an aircraft</a>. I wondered how that incident had affected United&#8217;s brand value, and being a data scientist I decided to do sentiment analysis of United versus my favourite airlines.</p>
<p>Way back on 4th July 2015, almost two years ago, I wrote a blog entitled <a href="https://colinpriest.com/2015/07/04/tutorial-using-r-and-twitter-to-analyse-consumer-sentiment/" target="_blank" rel="noopener noreferrer">Tutorial: Using R and Twitter to Analyse Consumer Sentiment</a>. Even though that blog post is one of my earliest, it continues to be the most popular, attracting just as many readers per day as when I first wrote it.</p>
<p>Since the <a href="https://cran.r-project.org/web/packages/RSentiment/index.html" target="_blank" rel="noopener noreferrer">sentiment package</a>, upon which that blog was based, is no longer supported by CRAN, and many readers have problems with the manual and technical process of installing an obsolete package from an archive, I have written a new blog using a different, live CRAN package. The <a href="https://cran.r-project.org/web/packages/syuzhet/index.html">syuzhet package</a> was published only several weeks ago, and offers a range of different sentiment analysis models. So I&#8217;ve started to try it out.</p>
<p>I have collected tweets for 4 airlines:</p>
<ol>
<li>Cathay Pacific</li>
<li>Emirates</li>
<li>Singapore Air</li>
<li>United Airlines</li>
</ol>
<p>The tweet data starts at 01-Jan-2015 and go up to mid-April 2017.</p>
<p><strong>Step 1:</strong> Load the tweets and load the relevant packages</p>
<pre class="brush: r; title: ; notranslate">
library(foreign)
library(syuzhet)
library(lubridate)
library(plyr)
library(ggplot2)
library(tm)
library(wordcloud)

# get the data for the tweets
dataURL = 'https://s3-ap-southeast-1.amazonaws.com/colinpriest/tweets.zip'
if (! file.exists('tweets.zip')) download.file(dataURL, 'tweets.zip')
if (! file.exists('tweets.dbf')) unzip('tweets.zip')
tweets = read.dbf('tweets.dbf', as.is = TRUE)
</pre>
<p>&nbsp;</p>
<p>I&#8217;ve stored the tweets in a dbf file and zipped it. The zip file is 68MB in size, and the dbf file is 353MB. The code shown above downloads the zip file, extracts the dbf and then reads the dbf file into a data.frame.</p>
<p><strong>Step 2:</strong> Do Sentiment Scoring using the syuzhet package</p>
<pre class="brush: r; title: ; notranslate">

# function to get various sentiment scores, using the syuzhet package
scoreSentiment = function(tab)
{
 tab$syuzhet = get_sentiment(tab$Text, method=&quot;syuzhet&quot;)
 tab$bing = get_sentiment(tab$Text, method=&quot;bing&quot;)
 tab$afinn = get_sentiment(tab$Text, method=&quot;afinn&quot;)
 tab$nrc = get_sentiment(tab$Text, method=&quot;nrc&quot;)
 emotions = get_nrc_sentiment(tab$Text)
 n = names(emotions)
 for (nn in n) tab[, nn] = emotions[nn]
 return(tab)
}

# get the sentiment scores for the tweets
tweets = scoreSentiment(tweets)
tweets = tweets[tweets$TimeStamp &lt; as.Date('19-04-2017', format = '%d-%m-%Y'),]

</pre>
<p>The syuzhet package offers a few different algorithms, each taking a different approach to sentiment scoring. It also does emotion scoring based upon the nrc algorithm. The code above calculates scores using the syuzhet, bing, afinn and nrc algorithms, adding columns with the scores from each algorithm.</p>
<p><strong>Step 3:</strong> Visualise the Sentiment Scores</p>
<pre class="brush: r; title: ; notranslate">

# function to find the week in which a date occurs
round_weeks &lt;- function(x)
{
require(data.table)
dt = data.table(i = 1:length(x), day = x, weekday = weekdays(x))
offset = data.table(weekday = c('Sunday', 'Monday', 'Tuesday', 'Wednesday',
'Thursday', 'Friday', 'Saturday'),
offset = -(0:6))
dt = merge(dt, offset, by=&quot;weekday&quot;)
dt[ , day_adj := day + offset]
setkey(dt, i)
return(dt[ , day_adj])
}
# get daily summaries of the results
daily = ddply(tweets, ~ Airline + TimeStamp, summarize, num_tweets = length(positive), ave_sentiment = mean(bing),
 ave_negative = mean(negative), ave_positive = mean(positive), ave_anger = mean(anger))

# plot the daily sentiment
ggplot(daily, aes(x=TimeStamp, y=ave_sentiment, colour=Airline)) + geom_line() +
 ggtitle(&quot;Airline Sentiment&quot;) + xlab(&quot;Date&quot;) + ylab(&quot;Sentiment&quot;) + scale_x_date(date_labels = '%d-%b-%y')

# get weekly summaries of the results
weekly = ddply(tweets, ~ Airline + week, summarize, num_tweets = length(positive), ave_sentiment = mean(bing),
 ave_negative = mean(negative), ave_positive = mean(positive), ave_anger = mean(anger))

# plot the weekly sentiment
ggplot(weekly, aes(x=week, y=ave_sentiment, colour=Airline)) + geom_line() +
 ggtitle(&quot;Airline Sentiment&quot;) + xlab(&quot;Date&quot;) + ylab(&quot;Sentiment&quot;) + scale_x_date(date_labels = '%d-%b-%y')
</pre>
<p>The code above summarises the sentiment for each airline across time. The first plot shows the daily sentiment values for each airline:</p>
<p><img loading="lazy" data-attachment-id="1060" data-permalink="https://colinpriest.com/2017/04/30/tutorial-sentiment-analysis-of-airlines-using-the-syuzhet-package-and-twitter/20170429-plot-01-daily-sentiment/" data-orig-file="https://colinpriestdotcom.files.wordpress.com/2017/04/20170429-plot-01-daily-sentiment.png" data-orig-size="695,531" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="20170429 plot 01 daily sentiment" data-image-description="" data-image-caption="" data-medium-file="https://colinpriestdotcom.files.wordpress.com/2017/04/20170429-plot-01-daily-sentiment.png?w=300" data-large-file="https://colinpriestdotcom.files.wordpress.com/2017/04/20170429-plot-01-daily-sentiment.png?w=529" class="alignnone size-full wp-image-1060" src="https://colinpriestdotcom.files.wordpress.com/2017/04/20170429-plot-01-daily-sentiment.png" alt="20170429 plot 01 daily sentiment" width="695" height="531" srcset="https://colinpriestdotcom.files.wordpress.com/2017/04/20170429-plot-01-daily-sentiment.png 695w, https://colinpriestdotcom.files.wordpress.com/2017/04/20170429-plot-01-daily-sentiment.png?w=150&amp;h=115 150w, https://colinpriestdotcom.files.wordpress.com/2017/04/20170429-plot-01-daily-sentiment.png?w=300&amp;h=229 300w" sizes="(max-width: 695px) 100vw, 695px" /></p>
<p>Based upon the bing sentiment algorithm, United has the poorest sentiment, and Singapore has the best sentiment. United usually has negative sentiment. Daily to day random fluctuations in sentiment make this a cluttered graph, so I decided to summarise the sentiment weekly instead of daily:</p>
<p><img loading="lazy" data-attachment-id="1061" data-permalink="https://colinpriest.com/2017/04/30/tutorial-sentiment-analysis-of-airlines-using-the-syuzhet-package-and-twitter/20170429-plot-02-weekly-sentiment/" data-orig-file="https://colinpriestdotcom.files.wordpress.com/2017/04/20170429-plot-02-weekly-sentiment.png" data-orig-size="695,531" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="20170429 plot 02 weekly sentiment" data-image-description="" data-image-caption="" data-medium-file="https://colinpriestdotcom.files.wordpress.com/2017/04/20170429-plot-02-weekly-sentiment.png?w=300" data-large-file="https://colinpriestdotcom.files.wordpress.com/2017/04/20170429-plot-02-weekly-sentiment.png?w=529" class="alignnone size-full wp-image-1061" src="https://colinpriestdotcom.files.wordpress.com/2017/04/20170429-plot-02-weekly-sentiment.png" alt="20170429 plot 02 weekly sentiment" width="695" height="531" srcset="https://colinpriestdotcom.files.wordpress.com/2017/04/20170429-plot-02-weekly-sentiment.png 695w, https://colinpriestdotcom.files.wordpress.com/2017/04/20170429-plot-02-weekly-sentiment.png?w=150&amp;h=115 150w, https://colinpriestdotcom.files.wordpress.com/2017/04/20170429-plot-02-weekly-sentiment.png?w=300&amp;h=229 300w" sizes="(max-width: 695px) 100vw, 695px" /></p>
<p>Now it&#8217;s easier to see the differences in sentiment between the four airlines. While Emirates and Cathay Pacific have similar levels of sentiment, the values for Emirates are more stable. This, however, may be due to the sheer volume of tweets about Emirates versus the smaller number of tweets about Cathay Pacific.</p>
<p><img loading="lazy" data-attachment-id="1062" data-permalink="https://colinpriest.com/2017/04/30/tutorial-sentiment-analysis-of-airlines-using-the-syuzhet-package-and-twitter/20170429-plot-03-positive-sentiment/" data-orig-file="https://colinpriestdotcom.files.wordpress.com/2017/04/20170429-plot-03-positive-sentiment.png" data-orig-size="695,531" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="20170429 plot 03 positive sentiment" data-image-description="" data-image-caption="" data-medium-file="https://colinpriestdotcom.files.wordpress.com/2017/04/20170429-plot-03-positive-sentiment.png?w=300" data-large-file="https://colinpriestdotcom.files.wordpress.com/2017/04/20170429-plot-03-positive-sentiment.png?w=529" class="alignnone size-full wp-image-1062" src="https://colinpriestdotcom.files.wordpress.com/2017/04/20170429-plot-03-positive-sentiment.png" alt="20170429 plot 03 positive sentiment" width="695" height="531" srcset="https://colinpriestdotcom.files.wordpress.com/2017/04/20170429-plot-03-positive-sentiment.png 695w, https://colinpriestdotcom.files.wordpress.com/2017/04/20170429-plot-03-positive-sentiment.png?w=150&amp;h=115 150w, https://colinpriestdotcom.files.wordpress.com/2017/04/20170429-plot-03-positive-sentiment.png?w=300&amp;h=229 300w" sizes="(max-width: 695px) 100vw, 695px" /></p>
<p><strong>Step 4:</strong> Compare the Sentiment Algorithms</p>
<p>The sentiment scores above use the bing algorithm, but we should check whether the different algorithms produce different results.</p>
<pre class="brush: r; title: ; notranslate">

# compare the sentiment for across the algorithms
algorithms = tweets[rep(1, nrow(tweets) * 4), c(&quot;week&quot;, &quot;syuzhet&quot;, &quot;Airline&quot;, &quot;Airline&quot;)]
names(algorithms) = c(&quot;TimeStamp&quot;, &quot;Sentiment&quot;, &quot;Algorithm&quot;, &quot;Airline&quot;)
algorithms$Algorithm = &quot;syuzhet&quot;
algorithms[seq_len(nrow(tweets)), c(&quot;TimeStamp&quot;, &quot;Sentiment&quot;, &quot;Airline&quot;)] = tweets[,c(&quot;TimeStamp&quot;, &quot;syuzhet&quot;, &quot;Airline&quot;)]
algorithms[nrow(tweets) + seq_len(nrow(tweets)), c(&quot;TimeStamp&quot;, &quot;Sentiment&quot;, &quot;Airline&quot;)] = tweets[,c(&quot;TimeStamp&quot;, &quot;bing&quot;, &quot;Airline&quot;)]
algorithms$Algorithm[nrow(tweets) + seq_len(nrow(tweets))] = &quot;bing&quot;
algorithms[2 * nrow(tweets) + seq_len(nrow(tweets)), c(&quot;TimeStamp&quot;, &quot;Sentiment&quot;, &quot;Airline&quot;)] = tweets[,c(&quot;TimeStamp&quot;, &quot;afinn&quot;, &quot;Airline&quot;)]
algorithms$Algorithm[2 * nrow(tweets) + seq_len(nrow(tweets))] = &quot;afinn&quot;
algorithms[3 * nrow(tweets) + seq_len(nrow(tweets)), c(&quot;TimeStamp&quot;, &quot;Sentiment&quot;, &quot;Airline&quot;)] = tweets[,c(&quot;TimeStamp&quot;, &quot;nrc&quot;, &quot;Airline&quot;)]
algorithms$Algorithm[3 * nrow(tweets) + seq_len(nrow(tweets))] = &quot;nrc&quot;

# get the algorithm averages for each airline
averages = ddply(algorithms, ~ Airline + Algorithm, summarize, ave_sentiment = mean(Sentiment))
averages$ranking = 1
for (alg in c(&quot;syuzhet&quot;, &quot;bing&quot;, &quot;afinn&quot;, &quot;nrc&quot;)) averages$ranking[averages$Algorithm == alg] = 5 - rank(averages$ave_sentiment[averages$Algorithm == alg])
averages = averages[order(averages$Airline, averages$Algorithm), ]

</pre>
<p>The code above was a bit clumsy &#8211; I probably should have used reshape.</p>
<p><img loading="lazy" data-attachment-id="1089" data-permalink="https://colinpriest.com/2017/04/30/tutorial-sentiment-analysis-of-airlines-using-the-syuzhet-package-and-twitter/20170429-plot-08-sentiment-algorithm-comparisons/" data-orig-file="https://colinpriestdotcom.files.wordpress.com/2017/04/20170429-plot-08-sentiment-algorithm-comparisons.png" data-orig-size="310,391" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="20170429 plot 08 sentiment algorithm comparisons" data-image-description="" data-image-caption="" data-medium-file="https://colinpriestdotcom.files.wordpress.com/2017/04/20170429-plot-08-sentiment-algorithm-comparisons.png?w=238" data-large-file="https://colinpriestdotcom.files.wordpress.com/2017/04/20170429-plot-08-sentiment-algorithm-comparisons.png?w=310" class="alignnone size-full wp-image-1089" src="https://colinpriestdotcom.files.wordpress.com/2017/04/20170429-plot-08-sentiment-algorithm-comparisons.png" alt="20170429 plot 08 sentiment algorithm comparisons" width="310" height="391" srcset="https://colinpriestdotcom.files.wordpress.com/2017/04/20170429-plot-08-sentiment-algorithm-comparisons.png 310w, https://colinpriestdotcom.files.wordpress.com/2017/04/20170429-plot-08-sentiment-algorithm-comparisons.png?w=119&amp;h=150 119w, https://colinpriestdotcom.files.wordpress.com/2017/04/20170429-plot-08-sentiment-algorithm-comparisons.png?w=238&amp;h=300 238w" sizes="(max-width: 310px) 100vw, 310px" /></p>
<p>The different algorithms give similar rankings between the airlines with one big exception: the nrc algorithm is surprisingly positive about United and unusually negative about Singapore Air compared to the other algorithms. This goes to show that sentiment analysis isn&#8217;t just a plug and play technique and also means that a warning should be applied to the emotion analysis shown in Step 5 below, as it is based upon the nrc algorithm!</p>
<p><strong>Step 5:</strong> Emotion Analysis</p>
<p>Noting the warning, from the previous section, let&#8217;s compare the emotions between the airlines and between tweets, using the nrc algorithm.</p>
<pre class="brush: r; title: ; notranslate">

ggplot(weekly, aes(x=week, y=ave_negative, colour=Airline)) + geom_line() +
ggtitle(&quot;Airline Sentiment (Positive Only)&quot;) + xlab(&quot;Date&quot;) + ylab(&quot;Sentiment&quot;) + scale_x_date(date_labels = '%d-%b-%y')

ggplot(weekly, aes(x=week, y=ave_positive, colour=Airline)) + geom_line() +
ggtitle(&quot;Airline Sentiment (Negative Only)&quot;) + xlab(&quot;Date&quot;) + ylab(&quot;Sentiment&quot;) + scale_x_date(date_labels = '%d-%b-%y')

ggplot(weekly, aes(x=week, y=ave_anger, colour=Airline)) + geom_line() +
ggtitle(&quot;Airline Sentiment (Anger Only)&quot;) + xlab(&quot;Date&quot;) + ylab(&quot;Sentiment&quot;) + scale_x_date(date_labels = '%d-%b-%y')

# function to make the text suitable for analysis
clean.text = function(x)
{
# tolower
x = tolower(x)
# remove rt
x = gsub(&quot;rt&quot;, &quot;&quot;, x)
# remove at
x = gsub(&quot;@\\w+&quot;, &quot;&quot;, x)
# remove punctuation
x = gsub(&quot;[[:punct:]]&quot;, &quot;&quot;, x)
# remove numbers
x = gsub(&quot;[[:digit:]]&quot;, &quot;&quot;, x)
# remove links http
x = gsub(&quot;http\\w+&quot;, &quot;&quot;, x)
# remove tabs
x = gsub(&quot;[ |\t]{2,}&quot;, &quot;&quot;, x)
# remove blank spaces at the beginning
x = gsub(&quot;^ &quot;, &quot;&quot;, x)
# remove blank spaces at the end
x = gsub(&quot; $&quot;, &quot;&quot;, x)
return(x)
}

# emotion analysis: anger, anticipation, disgust, fear, joy, sadness, surprise, trust
# put everything in a single vector
all = c(
paste(tweets$Text[tweets$anger &gt; 0], collapse=&quot; &quot;),
paste(tweets$Text[tweets$anticipation &gt; 0], collapse=&quot; &quot;),
paste(tweets$Text[tweets$disgust &gt; 0], collapse=&quot; &quot;),
paste(tweets$Text[tweets$fear &gt; 0], collapse=&quot; &quot;),
paste(tweets$Text[tweets$joy &gt; 0], collapse=&quot; &quot;),
paste(tweets$Text[tweets$sadness &gt; 0], collapse=&quot; &quot;),
paste(tweets$Text[tweets$surprise &gt; 0], collapse=&quot; &quot;),
paste(tweets$Text[tweets$trust &gt; 0], collapse=&quot; &quot;)
)
# clean the text
all = clean.text(all)
# remove stop-words
# adding extra domain specific stop words
all = removeWords(all, c(stopwords(&quot;english&quot;), 'singapore', 'singaporeair',
'emirates', 'united', 'airlines', 'unitedairlines',
'cathay', 'pacific', 'cathaypacific', 'airline',
'airlinesunited', 'emiratesemirates', 'pacifics'))
#
# create corpus
corpus = Corpus(VectorSource(all))
#
# create term-document matrix
tdm = TermDocumentMatrix(corpus)
#
# convert as matrix
tdm = as.matrix(tdm)
#
# add column names
colnames(tdm) = c('anger', 'anticipation', 'disgust', 'fear', 'joy', 'sadness', 'surprise', 'trust')
#
# Plot comparison wordcloud
layout(matrix(c(1, 2), nrow=2), heights=c(1, 4))
par(mar=rep(0, 4))
plot.new()
text(x=0.5, y=0.5, 'Emotion Comparison Word Cloud')
comparison.cloud(tdm, random.order=FALSE,
colors = c(&quot;#00B2FF&quot;, &quot;red&quot;, &quot;#FF0099&quot;, &quot;#6600CC&quot;, &quot;green&quot;, &quot;orange&quot;, &quot;blue&quot;, &quot;brown&quot;),
title.size=1.5, max.words=250)

&amp;nbsp;

</pre>
<p>The code above plots the emotions across time for each airline.</p>
<p>
<a href='https://colinpriest.com/2017/04/30/tutorial-sentiment-analysis-of-airlines-using-the-syuzhet-package-and-twitter/20170429-plot-05-anger/'><img width="150" height="115" src="https://colinpriestdotcom.files.wordpress.com/2017/04/20170429-plot-05-anger.png?w=150" class="attachment-thumbnail size-thumbnail" alt="" loading="lazy" srcset="https://colinpriestdotcom.files.wordpress.com/2017/04/20170429-plot-05-anger.png?w=150 150w, https://colinpriestdotcom.files.wordpress.com/2017/04/20170429-plot-05-anger.png?w=300 300w" sizes="(max-width: 150px) 100vw, 150px" data-attachment-id="1064" data-permalink="https://colinpriest.com/2017/04/30/tutorial-sentiment-analysis-of-airlines-using-the-syuzhet-package-and-twitter/20170429-plot-05-anger/" data-orig-file="https://colinpriestdotcom.files.wordpress.com/2017/04/20170429-plot-05-anger.png" data-orig-size="695,531" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="20170429 plot 05 anger" data-image-description="" data-image-caption="" data-medium-file="https://colinpriestdotcom.files.wordpress.com/2017/04/20170429-plot-05-anger.png?w=300" data-large-file="https://colinpriestdotcom.files.wordpress.com/2017/04/20170429-plot-05-anger.png?w=529" /></a>
<a href='https://colinpriest.com/2017/04/30/tutorial-sentiment-analysis-of-airlines-using-the-syuzhet-package-and-twitter/20170429-plot-03-positive-sentiment/'><img width="150" height="115" src="https://colinpriestdotcom.files.wordpress.com/2017/04/20170429-plot-03-positive-sentiment.png?w=150" class="attachment-thumbnail size-thumbnail" alt="" loading="lazy" srcset="https://colinpriestdotcom.files.wordpress.com/2017/04/20170429-plot-03-positive-sentiment.png?w=150 150w, https://colinpriestdotcom.files.wordpress.com/2017/04/20170429-plot-03-positive-sentiment.png?w=300 300w" sizes="(max-width: 150px) 100vw, 150px" data-attachment-id="1062" data-permalink="https://colinpriest.com/2017/04/30/tutorial-sentiment-analysis-of-airlines-using-the-syuzhet-package-and-twitter/20170429-plot-03-positive-sentiment/" data-orig-file="https://colinpriestdotcom.files.wordpress.com/2017/04/20170429-plot-03-positive-sentiment.png" data-orig-size="695,531" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="20170429 plot 03 positive sentiment" data-image-description="" data-image-caption="" data-medium-file="https://colinpriestdotcom.files.wordpress.com/2017/04/20170429-plot-03-positive-sentiment.png?w=300" data-large-file="https://colinpriestdotcom.files.wordpress.com/2017/04/20170429-plot-03-positive-sentiment.png?w=529" /></a>
<a href='https://colinpriest.com/2017/04/30/tutorial-sentiment-analysis-of-airlines-using-the-syuzhet-package-and-twitter/20170429-plot-04-negative-sentiment/'><img width="150" height="115" src="https://colinpriestdotcom.files.wordpress.com/2017/04/20170429-plot-04-negative-sentiment.png?w=150" class="attachment-thumbnail size-thumbnail" alt="" loading="lazy" srcset="https://colinpriestdotcom.files.wordpress.com/2017/04/20170429-plot-04-negative-sentiment.png?w=150 150w, https://colinpriestdotcom.files.wordpress.com/2017/04/20170429-plot-04-negative-sentiment.png?w=300 300w" sizes="(max-width: 150px) 100vw, 150px" data-attachment-id="1063" data-permalink="https://colinpriest.com/2017/04/30/tutorial-sentiment-analysis-of-airlines-using-the-syuzhet-package-and-twitter/20170429-plot-04-negative-sentiment/" data-orig-file="https://colinpriestdotcom.files.wordpress.com/2017/04/20170429-plot-04-negative-sentiment.png" data-orig-size="695,531" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="20170429 plot 04 negative sentiment" data-image-description="" data-image-caption="" data-medium-file="https://colinpriestdotcom.files.wordpress.com/2017/04/20170429-plot-04-negative-sentiment.png?w=300" data-large-file="https://colinpriestdotcom.files.wordpress.com/2017/04/20170429-plot-04-negative-sentiment.png?w=529" /></a>
</p>
<p>United Airlines attracts more angry tweets, and this has spiked in April 2017 following the David Dao incident. But United Airlines also attracts more positive tweets than the other airlines. This might explain the ranking differences between the algorithms &#8211; maybe the algorithms weight positive tweets differently to negative tweets.</p>
<p>Then the code creates a comparison word cloud, to show the different words in airline tweets that are associated with each emotion.</p>
<p><img loading="lazy" data-attachment-id="1141" data-permalink="https://colinpriest.com/2017/04/30/tutorial-sentiment-analysis-of-airlines-using-the-syuzhet-package-and-twitter/20170429-plot-09-emotions/" data-orig-file="https://colinpriestdotcom.files.wordpress.com/2017/04/20170429-plot-09-emotions.png" data-orig-size="695,531" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="20170429 plot 09 emotions" data-image-description="" data-image-caption="" data-medium-file="https://colinpriestdotcom.files.wordpress.com/2017/04/20170429-plot-09-emotions.png?w=300" data-large-file="https://colinpriestdotcom.files.wordpress.com/2017/04/20170429-plot-09-emotions.png?w=529" class="alignnone size-full wp-image-1141" src="https://colinpriestdotcom.files.wordpress.com/2017/04/20170429-plot-09-emotions.png" alt="20170429 plot 09 emotions" width="695" height="531" srcset="https://colinpriestdotcom.files.wordpress.com/2017/04/20170429-plot-09-emotions.png 695w, https://colinpriestdotcom.files.wordpress.com/2017/04/20170429-plot-09-emotions.png?w=150&amp;h=115 150w, https://colinpriestdotcom.files.wordpress.com/2017/04/20170429-plot-09-emotions.png?w=300&amp;h=229 300w" sizes="(max-width: 695px) 100vw, 695px" /></p>
<p><strong>Step 6:</strong> Compare the Different Tweeting Behaviour of Different Twitter Users</p>
<p>Are some users more positive than others? Is this user behaviour different between the airlines? Do people who tweet more have a different sentiment to those who tweet about airlines less frequently? Are particular users dragging the average up or down? To answer these questions, I have tracked the 100 users who tweeted the most about these airlines.</p>
<pre class="brush: r; title: ; notranslate">

# get the user summaries of the results
users = ddply(tweets, ~ Airline + UserName, summarize, num_tweets = length(positive), ave_sentiment = mean(bing),
ave_negative = mean(negative), ave_positive = mean(positive), ave_anger = mean(anger))
sizeSentiment = ddply(users, ~ num_tweets, summarize, ave_sentiment = mean(ave_sentiment),
ave_negative = mean(ave_negative), ave_positive = mean(ave_positive), ave_anger = mean(ave_anger))
sizeSentiment$num_tweets = as.numeric(sizeSentiment$num_tweets)

# plot users positive versus negative with bubble plot
cutoff = sort(users$num_tweets, decreasing = TRUE)[100]
ggplot(users[users$num_tweets &gt; cutoff,], aes(x = ave_positive, y = ave_negative, size = num_tweets, fill = Airline)) +
geom_point(shape = 21) +
ggtitle(&quot;100 Most Prolific Tweeters About Airlines&quot;) +
labs(x = &quot;Positive Sentiment&quot;, y = &quot;Negative Sentiment&quot;)
#
ggplot(sizeSentiment, aes(x = num_tweets, y = ave_sentiment)) + geom_point() + stat_smooth(method = &quot;loess&quot;, size = 1, span = 0.35) +
ggtitle(&quot;Number of Tweets versus Sentiment&quot;) + scale_x_log10() +
labs(x = &quot;Positive Sentiment&quot;, y = &quot;Negative Sentiment&quot;)

</pre>
<p>Firstly let&#8217;s look at the behaviour of individual users:</p>
<p><img loading="lazy" data-attachment-id="1065" data-permalink="https://colinpriest.com/2017/04/30/tutorial-sentiment-analysis-of-airlines-using-the-syuzhet-package-and-twitter/20170429-plot-06-top-100-tweeters/" data-orig-file="https://colinpriestdotcom.files.wordpress.com/2017/04/20170429-plot-06-top-100-tweeters.png" data-orig-size="695,531" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="20170429 plot 06 top 100 tweeters" data-image-description="" data-image-caption="" data-medium-file="https://colinpriestdotcom.files.wordpress.com/2017/04/20170429-plot-06-top-100-tweeters.png?w=300" data-large-file="https://colinpriestdotcom.files.wordpress.com/2017/04/20170429-plot-06-top-100-tweeters.png?w=529" class="alignnone size-full wp-image-1065" src="https://colinpriestdotcom.files.wordpress.com/2017/04/20170429-plot-06-top-100-tweeters.png" alt="20170429 plot 06 top 100 tweeters" width="695" height="531" srcset="https://colinpriestdotcom.files.wordpress.com/2017/04/20170429-plot-06-top-100-tweeters.png 695w, https://colinpriestdotcom.files.wordpress.com/2017/04/20170429-plot-06-top-100-tweeters.png?w=150&amp;h=115 150w, https://colinpriestdotcom.files.wordpress.com/2017/04/20170429-plot-06-top-100-tweeters.png?w=300&amp;h=229 300w" sizes="(max-width: 695px) 100vw, 695px" /></p>
<p>Top user sentiment is quite different by airline. Emirates has a number of frequent tweeters who are unemotional, who on average post neither positive nor negative sentiment. United Airlines attracts more emotional posts. Singapore Air and Cathay Pacific have big users that post a lot of tweets about them.</p>
<p><img loading="lazy" data-attachment-id="1066" data-permalink="https://colinpriest.com/2017/04/30/tutorial-sentiment-analysis-of-airlines-using-the-syuzhet-package-and-twitter/20170429-plot-07-sentiment-versus-tweet-count/" data-orig-file="https://colinpriestdotcom.files.wordpress.com/2017/04/20170429-plot-07-sentiment-versus-tweet-count.png" data-orig-size="695,531" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="20170429 plot 07 sentiment versus tweet count" data-image-description="" data-image-caption="" data-medium-file="https://colinpriestdotcom.files.wordpress.com/2017/04/20170429-plot-07-sentiment-versus-tweet-count.png?w=300" data-large-file="https://colinpriestdotcom.files.wordpress.com/2017/04/20170429-plot-07-sentiment-versus-tweet-count.png?w=529" class="alignnone size-full wp-image-1066" src="https://colinpriestdotcom.files.wordpress.com/2017/04/20170429-plot-07-sentiment-versus-tweet-count.png" alt="20170429 plot 07 sentiment versus tweet count" width="695" height="531" srcset="https://colinpriestdotcom.files.wordpress.com/2017/04/20170429-plot-07-sentiment-versus-tweet-count.png 695w, https://colinpriestdotcom.files.wordpress.com/2017/04/20170429-plot-07-sentiment-versus-tweet-count.png?w=150&amp;h=115 150w, https://colinpriestdotcom.files.wordpress.com/2017/04/20170429-plot-07-sentiment-versus-tweet-count.png?w=300&amp;h=229 300w" sizes="(max-width: 695px) 100vw, 695px" /></p>
<p>However, on average bigger frequent tweeters post a similar balance of positive and negative content to smaller users who tweet infrequently.</p>
<p><strong>Step 7:</strong> Compare The Words Used to Describe Each Airline</p>
<p>In order to explain the differences in sentiment, we can create a word cloud that contrasts the words used in posts about each airline.</p>
<pre class="brush: r; title: ; notranslate">

# Join texts in a vector for each company
txt1 = paste(tweets$Text[tweets$Airline == 'United'], collapse=&quot; &quot;)
txt2 = paste(tweets$Text[tweets$Airline == 'SingaporeAir'], collapse=&quot; &quot;)
txt3 = paste(tweets$Text[tweets$Airline == 'Emirates'], collapse=&quot; &quot;)
txt4 = paste(tweets$Text[tweets$Airline == 'Cathay Pacific'], collapse=&quot; &quot;)
#
# put everything in a single vector
all = c(clean.text(txt1), clean.text(txt2), clean.text(txt3), clean.text(txt4))
#
# remove stop-words
# adding extra domain specific stop words
all = removeWords(all, c(stopwords(&quot;english&quot;), 'singapore', 'singaporeair',
'emirates', 'united', 'airlines', 'unitedairlines',
'cathay', 'pacific', 'cathaypacific', 'airline',
'airlinesunited', 'emiratesemirates', 'pacifics'))
#
# create corpus
corpus = Corpus(VectorSource(all))
#
# create term-document matrix
tdm = TermDocumentMatrix(corpus)
#
# convert as matrix
tdm = as.matrix(tdm)
#
# add column names
colnames(tdm) = c('United', 'Singapore Air', 'Emirates', 'Cathay Pacific')
#
# Plot comparison wordcloud
layout(matrix(c(1, 2), nrow=2), heights=c(1, 4))
par(mar=rep(0, 4))
plot.new()
text(x=0.5, y=0.5, 'Word Comparison by Airline')
comparison.cloud(tdm, random.order=FALSE,
colors = c(&quot;#00B2FF&quot;, &quot;red&quot;, &quot;#FF0099&quot;, &quot;#6600CC&quot;),
title.size=1.5, max.words=250)
#
# Plot commonality cloud
layout(matrix(c(1, 2), nrow=2), heights=c(1, 4))
par(mar=rep(0, 4))
plot.new()
text(x=0.5, y=0.5, 'Word Commonality by Airline')
commonality.cloud(tdm, random.order=FALSE,
colors = brewer.pal(8, &quot;Dark2&quot;),
title.size=1.5, max.words=250)

</pre>
<p>The code above is quite similar to that in the previous step, except that this time we are comparing airlines instead of emotions.</p>
<p>
<a href='https://colinpriest.com/2017/04/30/tutorial-sentiment-analysis-of-airlines-using-the-syuzhet-package-and-twitter/20170429-plot-10-airline-word-contrast/'><img width="150" height="115" src="https://colinpriestdotcom.files.wordpress.com/2017/04/20170429-plot-10-airline-word-contrast.png?w=150" class="attachment-thumbnail size-thumbnail" alt="" loading="lazy" srcset="https://colinpriestdotcom.files.wordpress.com/2017/04/20170429-plot-10-airline-word-contrast.png?w=150 150w, https://colinpriestdotcom.files.wordpress.com/2017/04/20170429-plot-10-airline-word-contrast.png?w=300 300w" sizes="(max-width: 150px) 100vw, 150px" data-attachment-id="1151" data-permalink="https://colinpriest.com/2017/04/30/tutorial-sentiment-analysis-of-airlines-using-the-syuzhet-package-and-twitter/20170429-plot-10-airline-word-contrast/" data-orig-file="https://colinpriestdotcom.files.wordpress.com/2017/04/20170429-plot-10-airline-word-contrast.png" data-orig-size="695,531" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="20170429 plot 10 airline word contrast" data-image-description="" data-image-caption="" data-medium-file="https://colinpriestdotcom.files.wordpress.com/2017/04/20170429-plot-10-airline-word-contrast.png?w=300" data-large-file="https://colinpriestdotcom.files.wordpress.com/2017/04/20170429-plot-10-airline-word-contrast.png?w=529" /></a>
<a href='https://colinpriest.com/2017/04/30/tutorial-sentiment-analysis-of-airlines-using-the-syuzhet-package-and-twitter/20170429-plot-11-airline-word-commonality/'><img width="150" height="115" src="https://colinpriestdotcom.files.wordpress.com/2017/04/20170429-plot-11-airline-word-commonality.png?w=150" class="attachment-thumbnail size-thumbnail" alt="" loading="lazy" srcset="https://colinpriestdotcom.files.wordpress.com/2017/04/20170429-plot-11-airline-word-commonality.png?w=150 150w, https://colinpriestdotcom.files.wordpress.com/2017/04/20170429-plot-11-airline-word-commonality.png?w=300 300w" sizes="(max-width: 150px) 100vw, 150px" data-attachment-id="1152" data-permalink="https://colinpriest.com/2017/04/30/tutorial-sentiment-analysis-of-airlines-using-the-syuzhet-package-and-twitter/20170429-plot-11-airline-word-commonality/" data-orig-file="https://colinpriestdotcom.files.wordpress.com/2017/04/20170429-plot-11-airline-word-commonality.png" data-orig-size="695,531" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="20170429 plot 11 airline word commonality" data-image-description="" data-image-caption="" data-medium-file="https://colinpriestdotcom.files.wordpress.com/2017/04/20170429-plot-11-airline-word-commonality.png?w=300" data-large-file="https://colinpriestdotcom.files.wordpress.com/2017/04/20170429-plot-11-airline-word-commonality.png?w=529" /></a>
</p>
<p>Emirates includes &#8220;aniston&#8221;, presumably in reference to the <a href="https://youtu.be/yz_qZQbiZuA" target="_blank" rel="noopener noreferrer">marketing campaign involving Jennifer Aniston</a>, while United includes &#8220;CEO&#8221; due to a number of news stories about United CEO&#8217;s including a <a href="https://www.forbes.com/sites/maggiemcgrath/2015/09/08/united-airlines-ceo-resigns-in-wake-of-federal-investigation/#4f72e1c23dcf" target="_blank" rel="noopener noreferrer">resignation</a> and a <a href="http://fortune.com/united-airlines-ceo-oscar-munoz/" target="_blank" rel="noopener noreferrer">heart transplant</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
]]></content:encoded>
					
					<wfw:commentRss>https://colinpriest.com/2017/04/30/tutorial-sentiment-analysis-of-airlines-using-the-syuzhet-package-and-twitter/feed/</wfw:commentRss>
			<slash:comments>32</slash:comments>
		
		
		
		<media:thumbnail url="https://colinpriestdotcom.files.wordpress.com/2017/04/airplane-clipart-1336.jpg" />
		<media:content url="https://colinpriestdotcom.files.wordpress.com/2017/04/airplane-clipart-1336.jpg" medium="image">
			<media:title type="html">Airplane Clipart 1336</media:title>
		</media:content>

		<media:content url="https://2.gravatar.com/avatar/883de1a12d42422f2643d6ee75c2b746?s=96&#38;d=identicon&#38;r=G" medium="image">
			<media:title type="html">colinpriest1966</media:title>
		</media:content>

		<media:content url="https://colinpriestdotcom.files.wordpress.com/2017/04/20170429-plot-01-daily-sentiment.png" medium="image">
			<media:title type="html">20170429 plot 01 daily sentiment</media:title>
		</media:content>

		<media:content url="https://colinpriestdotcom.files.wordpress.com/2017/04/20170429-plot-02-weekly-sentiment.png" medium="image">
			<media:title type="html">20170429 plot 02 weekly sentiment</media:title>
		</media:content>

		<media:content url="https://colinpriestdotcom.files.wordpress.com/2017/04/20170429-plot-03-positive-sentiment.png" medium="image">
			<media:title type="html">20170429 plot 03 positive sentiment</media:title>
		</media:content>

		<media:content url="https://colinpriestdotcom.files.wordpress.com/2017/04/20170429-plot-08-sentiment-algorithm-comparisons.png" medium="image">
			<media:title type="html">20170429 plot 08 sentiment algorithm comparisons</media:title>
		</media:content>

		<media:content url="https://colinpriestdotcom.files.wordpress.com/2017/04/20170429-plot-05-anger.png?w=150" medium="image" />

		<media:content url="https://colinpriestdotcom.files.wordpress.com/2017/04/20170429-plot-03-positive-sentiment.png?w=150" medium="image" />

		<media:content url="https://colinpriestdotcom.files.wordpress.com/2017/04/20170429-plot-04-negative-sentiment.png?w=150" medium="image" />

		<media:content url="https://colinpriestdotcom.files.wordpress.com/2017/04/20170429-plot-09-emotions.png" medium="image">
			<media:title type="html">20170429 plot 09 emotions</media:title>
		</media:content>

		<media:content url="https://colinpriestdotcom.files.wordpress.com/2017/04/20170429-plot-06-top-100-tweeters.png" medium="image">
			<media:title type="html">20170429 plot 06 top 100 tweeters</media:title>
		</media:content>

		<media:content url="https://colinpriestdotcom.files.wordpress.com/2017/04/20170429-plot-07-sentiment-versus-tweet-count.png" medium="image">
			<media:title type="html">20170429 plot 07 sentiment versus tweet count</media:title>
		</media:content>

		<media:content url="https://colinpriestdotcom.files.wordpress.com/2017/04/20170429-plot-10-airline-word-contrast.png?w=150" medium="image" />

		<media:content url="https://colinpriestdotcom.files.wordpress.com/2017/04/20170429-plot-11-airline-word-commonality.png?w=150" medium="image" />
	</item>
		<item>
		<title>Second Annual Data Science Bowl &#8211; Part 3 &#8211; Automatically Finding the Heart Location in an MRI Image</title>
		<link>https://colinpriest.com/2016/03/08/second-annual-data-science-bowl-part-3-automatically-finding-the-heart-location-in-an-mri-image/</link>
					<comments>https://colinpriest.com/2016/03/08/second-annual-data-science-bowl-part-3-automatically-finding-the-heart-location-in-an-mri-image/#comments</comments>
		
		<dc:creator><![CDATA[Colin Priest]]></dc:creator>
		<pubDate>Tue, 08 Mar 2016 06:24:24 +0000</pubDate>
				<category><![CDATA[Automation]]></category>
		<category><![CDATA[Convolutional Neural Networks]]></category>
		<category><![CDATA[Deep Learning]]></category>
		<category><![CDATA[Image Processing]]></category>
		<category><![CDATA[Kaggle]]></category>
		<category><![CDATA[Machine Learning]]></category>
		<category><![CDATA[Medical Imaging]]></category>
		<category><![CDATA[Python]]></category>
		<guid isPermaLink="false">http://colinpriest.com/?p=799</guid>

					<description><![CDATA[My last blog wasn't so sexy, what with all the data cleansing, and no predictive modelling. But in this blog I do something really cool - I train a machine learning model to find the left ventricle of the heart in an MRI image. And I couldn't have done it without all of that boring data cleansing. #kaggle @kaggle<p><a href="https://colinpriest.com/2016/03/08/second-annual-data-science-bowl-part-3-automatically-finding-the-heart-location-in-an-mri-image/">Continue reading <span class="meta-nav">&#8594;</span></a></p>]]></description>
										<content:encoded><![CDATA[<p>My <a href="https://colinpriest.com/2016/03/07/second-annual-data-science-bowl-part-2/" target="_blank">last blog</a> wasn&#8217;t so sexy, what with all the data cleansing, and no predictive modelling. But in this blog I do something really cool &#8211; I train a machine learning model to find the left ventricle of the heart in an MRI image. And I couldn&#8217;t have done it without all of that boring data cleansing. #kaggle @kaggle</p>
<p>Aside from being a really cool thing to do, there is a purpose to this modelling. I want to find the boundaries of the heart chamber, and that is much easier and faster to do when I remove distractions. Once I have found the location of the heart chamber, I can crop the image to a much smaller square.</p>
<p>The input to the model will be a set of images. In order to simply what the model learns, I only gave it training images from sax locations near the centre of the heart.</p>
<p>
<a href='https://colinpriest.com/2016/03/08/second-annual-data-science-bowl-part-3-automatically-finding-the-heart-location-in-an-mri-image/20160308-image01/'><img width="113" height="150" src="https://colinpriestdotcom.files.wordpress.com/2016/03/20160308-image01.png?w=113" class="attachment-thumbnail size-thumbnail" alt="" loading="lazy" srcset="https://colinpriestdotcom.files.wordpress.com/2016/03/20160308-image01.png?w=113 113w, https://colinpriestdotcom.files.wordpress.com/2016/03/20160308-image01.png 192w" sizes="(max-width: 113px) 100vw, 113px" data-attachment-id="823" data-permalink="https://colinpriest.com/2016/03/08/second-annual-data-science-bowl-part-3-automatically-finding-the-heart-location-in-an-mri-image/20160308-image01/" data-orig-file="https://colinpriestdotcom.files.wordpress.com/2016/03/20160308-image01.png" data-orig-size="192,256" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="20160308-image01" data-image-description="" data-image-caption="" data-medium-file="https://colinpriestdotcom.files.wordpress.com/2016/03/20160308-image01.png?w=192" data-large-file="https://colinpriestdotcom.files.wordpress.com/2016/03/20160308-image01.png?w=192" /></a>
<a href='https://colinpriest.com/2016/03/08/second-annual-data-science-bowl-part-3-automatically-finding-the-heart-location-in-an-mri-image/20160308-image02/'><img width="113" height="150" src="https://colinpriestdotcom.files.wordpress.com/2016/03/20160308-image02.png?w=113" class="attachment-thumbnail size-thumbnail" alt="" loading="lazy" srcset="https://colinpriestdotcom.files.wordpress.com/2016/03/20160308-image02.png?w=113 113w, https://colinpriestdotcom.files.wordpress.com/2016/03/20160308-image02.png 192w" sizes="(max-width: 113px) 100vw, 113px" data-attachment-id="825" data-permalink="https://colinpriest.com/2016/03/08/second-annual-data-science-bowl-part-3-automatically-finding-the-heart-location-in-an-mri-image/20160308-image02/" data-orig-file="https://colinpriestdotcom.files.wordpress.com/2016/03/20160308-image02.png" data-orig-size="192,256" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="20160308-image02" data-image-description="" data-image-caption="" data-medium-file="https://colinpriestdotcom.files.wordpress.com/2016/03/20160308-image02.png?w=192" data-large-file="https://colinpriestdotcom.files.wordpress.com/2016/03/20160308-image02.png?w=192" /></a>
<a href='https://colinpriest.com/2016/03/08/second-annual-data-science-bowl-part-3-automatically-finding-the-heart-location-in-an-mri-image/20160308-image03/'><img width="113" height="150" src="https://colinpriestdotcom.files.wordpress.com/2016/03/20160308-image03.png?w=113" class="attachment-thumbnail size-thumbnail" alt="" loading="lazy" srcset="https://colinpriestdotcom.files.wordpress.com/2016/03/20160308-image03.png?w=113 113w, https://colinpriestdotcom.files.wordpress.com/2016/03/20160308-image03.png 192w" sizes="(max-width: 113px) 100vw, 113px" data-attachment-id="822" data-permalink="https://colinpriest.com/2016/03/08/second-annual-data-science-bowl-part-3-automatically-finding-the-heart-location-in-an-mri-image/20160308-image03/" data-orig-file="https://colinpriestdotcom.files.wordpress.com/2016/03/20160308-image03.png" data-orig-size="192,256" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="20160308-image03" data-image-description="" data-image-caption="" data-medium-file="https://colinpriestdotcom.files.wordpress.com/2016/03/20160308-image03.png?w=192" data-large-file="https://colinpriestdotcom.files.wordpress.com/2016/03/20160308-image03.png?w=192" /></a>
<a href='https://colinpriest.com/2016/03/08/second-annual-data-science-bowl-part-3-automatically-finding-the-heart-location-in-an-mri-image/20160308-image04/'><img width="113" height="150" src="https://colinpriestdotcom.files.wordpress.com/2016/03/20160308-image04.png?w=113" class="attachment-thumbnail size-thumbnail" alt="" loading="lazy" srcset="https://colinpriestdotcom.files.wordpress.com/2016/03/20160308-image04.png?w=113 113w, https://colinpriestdotcom.files.wordpress.com/2016/03/20160308-image04.png 192w" sizes="(max-width: 113px) 100vw, 113px" data-attachment-id="824" data-permalink="https://colinpriest.com/2016/03/08/second-annual-data-science-bowl-part-3-automatically-finding-the-heart-location-in-an-mri-image/20160308-image04/" data-orig-file="https://colinpriestdotcom.files.wordpress.com/2016/03/20160308-image04.png" data-orig-size="192,256" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="20160308-image04" data-image-description="" data-image-caption="" data-medium-file="https://colinpriestdotcom.files.wordpress.com/2016/03/20160308-image04.png?w=192" data-large-file="https://colinpriestdotcom.files.wordpress.com/2016/03/20160308-image04.png?w=192" /></a>
</p>
<p>The output from the model will be the row number and column number of the centroid of the left ventricle heart chamber (the red dot in the images above).</p>
<p>I had to manually define those centroid locations for a training set of a few hundred of the images. This was laborious and time consuming, even after I automated some of the process. But it needed to be done, because otherwise the machine learning algorithm has no way of knowing what the true answers should be.</p>
<p>Even though I am much more comfortable coding in R than in Python, I used Python for this step because I wanted to use <a href="http://danielnouri.org/" target="_blank">Daniel Nouri</a>&#8216;s <a href="https://pypi.python.org/pypi/nolearn" target="_blank">nolearn</a> library, which sits above <a href="http://lasagne.readthedocs.org/en/latest/" target="_blank">lasagne</a> and <a href="http://deeplearning.net/software/theano/" target="_blank">theano</a>, and these libraries are not available in R. The convolution neural network architecture was based upon the architecture in <a href="http://danielnouri.org/notes/2014/12/17/using-convolutional-neural-nets-to-detect-facial-keypoints-tutorial/" target="_blank">Daniel Nouri&#8217;s tutorial</a> for the <a href="https://www.kaggle.com/c/facial-keypoints-detection" target="_blank">Facial Keypoints Detection competition in Kaggle</a>.</p>
<h1>Step 1: Importing of all the Required Libraries</h1>
<p>OK, so this part isn&#8217;t all that sexy either. But it&#8217;s the engine for all the cool modelling that is about to be done.</p>
<pre class="brush: python; title: ; notranslate">

import numpy as np
import csv
import random
import math
import os
import cv2
import itertools
import math
import matplotlib.pyplot as plt
import pandas as pd
import itertools

from lasagne import layers
from lasagne.updates import nesterov_momentum
from lasagne.nonlinearities import softmax
from lasagne.nonlinearities import sigmoid
from nolearn.lasagne import BatchIterator
from nolearn.lasagne import NeuralNet
from nolearn.lasagne import TrainSplit
from nolearn.lasagne import PrintLayerInfo
from nolearn.lasagne.visualize import plot_loss
from nolearn.lasagne.visualize import plot_conv_weights
from nolearn.lasagne.visualize import plot_conv_activity
from nolearn.lasagne.visualize import plot_occlusion

%pylab inline
from lasagne.layers import DenseLayer
from lasagne.layers import InputLayer
from lasagne.layers import DropoutLayer
from lasagne.layers import Conv2DLayer
from lasagne.layers import MaxPool2DLayer
from lasagne.nonlinearities import softmax
from lasagne.updates import adam
from lasagne.layers import get_all_params
from nolearn.lasagne import NeuralNet
from nolearn.lasagne import TrainSplit
from nolearn.lasagne import objective

import theano
import theano.tensor as T

</pre>
<p>&nbsp;</p>
<h1>Step 2: Defining the Helper Functions</h1>
<p>I used <a href="http://jupyter.org/" target="_blank">jupyter notebook</a> as the development environment to set up and run my Python scripts. While there&#8217;s a lot to like about jupyter, one thing that annoys me is that print commands run in jupyter don&#8217;t immediately show text on the screen. But here&#8217;s a trick to work around that:</p>
<pre class="brush: python; title: ; notranslate">

def printQ(s):
 print(s)
 sys.stdout.flush()

</pre>
<p>Using this helper function instead of the print function results in text immediately appearing in the output. This is particular helpful for progress messages on long training runs.</p>
<p>I like to use R&#8217;s <a href="https://stat.ethz.ch/R-manual/R-devel/library/base/html/expand.grid.html" target="_blank">expand.grid</a> function, but it isn&#8217;t built in to Python. So I wrote my own helper function in Python that mimics the functionality:</p>
<pre class="brush: python; title: ; notranslate">

def product2(*args, repeat=1):
 # product('ABCD', 'xy') --&gt; Ax Ay Bx By Cx Cy Dx Dy
 # product(range(2), repeat=3) -&gt; 000 001 010 011 100 101 110 111
 pools = [tuple(pool) for pool in args] * repeat
 result = [[]]
 for pool in pools:
 result = [x+[y] for x in result for y in pool]
 for prod in result:
 yield tuple(prod)

def expand_grid(dictionary):
 return pd.DataFrame([row for row in product2(*dictionary.values())],
 columns=dictionary.keys())

</pre>
<p>This next function reads a cleaned up image, checking that it has the correct aspect ratio, then resizing it to 96 x 96 pixels. The resizing is done to reduce memory usage in my GPU, and to speed up the training and scoring.</p>
<pre class="brush: python; title: ; notranslate">

def load_image(path):
 # check that the file exists
 if not os.path.isfile(path):
   printQ('BAD PATH: ' + path)
 image = cv2.imread(path, cv2.IMREAD_GRAYSCALE)
 # ensure portrait aspect ratio
 if (image.shape[0] &lt; image.shape[1]):
   image = cv2.transpose(image)
 # resize to 96x96
 resized_image = cv2.resize(image, (96, 96))
 # check that the image isn't empty
 s = sum(sum(resized_image))
 if np.isnan(s):
   print(path)
 return resized_image

</pre>
<p>My initial models were not performing as well as I would like. So to force the the model to generalise, I added some image transformations (rotation and reflection) to the training data. This required helper functions:</p>
<pre class="brush: python; title: ; notranslate">

def rotate_image(img, degrees):
 rows,cols = img.shape
 M = cv2.getRotationMatrix2D((cols/2,rows/2),degrees,1)
 dst = cv2.warpAffine(img,M,(cols,rows))
 return dst

def transform_image(img, equalise, gammaAdjust, reflection, rotation):
 if equalise == 1:
   img = cv2.equalizeHist(img)
 if gammaAdjust != 1:
   img = pow(img / 255.0, gammaAdjust) * 255.0
 if reflection == 0 or reflection == 1:
   img = cv2.flip(img, int(reflection))
 if rotation != 0:
   img = rotate_image(img, rotation)
 return img

def transform_xy(x, y, equalise, gammaAdjust, reflection, rotation):
 # if equalise, then no change to x and y
 # if gamma adjustment, then no change to x and y
 # reflection
 if reflection == 0:
   y = 1.0 - y
 if reflection == 1:
   x = 1.0 - x
 if rotation == 180:
   x = 1.0 - x
   y = 1.0 - y
 if rotation != 0 and rotation != 180:
   x1 = x - 0.5
   y1 = y - 0.5
   theta = rotation / 180 * pi
   x2 = x1 * cos(theta) + y1 * sin(theta)
   y2 = -x1 * sin(theta) + y1 * cos(theta)
   x = x2 + 0.5
   y = y2 + 0.5
 return numpy.array([x, y])

# set up the image adjustments
#equalise, gammaAdjust, reflection
dAdjustShort = { 'equalise': [0],
 'gammaAdjust': [1],
 'reflection': [-1],
 'rotation': [0]}
dAdjust = { 'equalise': [0, 1],
 'gammaAdjust': [1, 0.75, 1.5],
 'reflection': [-1, 0, 1],
 'rotation': [0, 180, 3, -3]}
# 'rotation': [0, 180, 3, -3, 10, -10]}
imgAdj = expand_grid(dAdjust)
#imgAdj = expand_grid(dAdjustShort)
print (imgAdj.shape)
# can't have both reflection AND rotation by 180 degrees
imgAdj = imgAdj.query('not (reflection &gt; -1 and rotation == 180)')
# can't have equalise AND gamma adjust
imgAdj = imgAdj.query('not (equalise == 1 and gammaAdjust != 1)')
</pre>
<p>There are two feature sets that enable the machine learning model to find the heart:</p>
<ol>
<li>shape in the image &#8211; by looking at shape in the image it can find the heart</li>
<li>movement between images at different points of time &#8211; the heart is moving but most of the chest is stationary</li>
</ol>
<p>So I set up the network architecture to use two channels. The first channel is the image, and the second channel is the difference between the image at this point of time and the image 8 time periods in the future.</p>
<pre class="brush: python; title: ; notranslate">

def load_train_set():
 #numTimes = 8 # how many time periods to use
 plusTime = 5 # gaps between time periods for comparison
 xs = []
 ys = []
 ids = []
 all_y = '/home/colin/data/Second-Annual-Data-Science-Bowl/working/centroids-20160218-R.csv'
 with open(all_y) as f:
   rows = csv.reader(f, delimiter=',', quotechar='&quot;')
   iRow = 1
   for line in rows:
     # first line is column headers, so ignore it
     if iRow &gt; 1:
       # parse the line
       patient = line[0]
       x = float(line[1])
       y = float(line[2])
       sax = int(line[4])
       firstTime = int(line[5])
       if int(patient) % 25 == 0 and firstTime == 1:
         printQ(patient)
       # enhance the training data with rotations, reflections, NOT histogram equalisation
       for index, row in imgAdj.iterrows():
         # append the target values
         xy = transform_xy(x, y, row['equalise'], row['gammaAdjust'], row['reflection'], row['rotation'])
         ys.append(xy.astype('float32').reshape((1, 2)))
         #
         # read the images
         folder = '/home/colin/data/Second-Annual-Data-Science-Bowl/train-cleaned/' + patient + '/study/sax_0' + str(sax) + '/'
         xm = np.zeros([1, 2, 96, 96])
         #
         #
         # current frame
         path = folder + 'image-' + ('%0*d' % (2, firstTime)) + '.png'
         img = load_image(path)
         # transform the image - rotation, reflection etc
         img = transform_image(img, row['equalise'], row['gammaAdjust'], row['reflection'], row['rotation'])
         # get the pixels into the range [-1, 1]
         img = (img / 128.0 - 1.0).astype('float32').reshape((96, 96))
         xm[0, 0, :, :] = img
         #
         #
         # find movement of current frame to future frame
         path = folder + 'image-' + ('%0*d' % (2, firstTime + plusTime)) + '.png'
         img = load_image(path)
         # transform the image - rotation, reflection etc
         img = transform_image(img, row['equalise'], row['gammaAdjust'], row['reflection'], row['rotation'])
         # get the pixels into the range [-1, 1]
         img = (img / 128.0 - 1.0).astype('float32').reshape((96, 96))
         # first time is the complete image at time 1
         # subsequent frames are the differences between frames
         xm[0, 1, :, :] = img - xm[0, 0, :, :]
         xs.append(xm.astype('float32').reshape((1, 2, 96, 96)))
         ids.append(patient)

     iRow = iRow + 1
 return np.vstack(xs), np.vstack(ys), np.vstack(ids)

</pre>
<p>I used early stopping to help reduce overfitting:</p>
<pre class="brush: python; title: ; notranslate">

class EarlyStopping(object):
 def __init__(self, patience=100):
   self.patience = patience
   self.best_valid = np.inf
   self.best_valid_epoch = 0
   self.best_weights = None

def __call__(self, nn, train_history):
 current_valid = train_history[-1]['valid_loss']
 current_epoch = train_history[-1]['epoch']
 if current_valid &lt; self.best_valid:
   self.best_valid = current_valid
   self.best_valid_epoch = current_epoch
   self.best_weights = nn.get_all_params_values()
 elif self.best_valid_epoch + self.patience &lt; current_epoch:
   print('Early stopping')
   print('Best valid loss was {:.6f} at epoch {}.'.format(
   self.best_valid, self.best_valid_epoch))
   nn.load_params_from(self.best_weights)
   raise StopIteration()

</pre>
<h1>Step 3: Read the Training Data</h1>
<p>As well as reading the training data, I shuffled the order of the data. This allowed me to use batch training.</p>
<pre class="brush: python; title: ; notranslate">

# read the training data

printQ('reading the training data')
train_x, train_y, train_id = load_train_set()

printQ ('shuffling training rows')
random.seed(1234)
rows = random.choice(arange(0, train_x.shape[0]), train_x.shape[0])
t_x = train_x[rows,:,:,:]
t_y = train_y[rows,:]
t_id = train_id[rows]

printQ('finished')

</pre>
<h1>Step 4: Train the Model</h1>
<p>The network architecture used deep convolutional layers to find features in the image, then fully connected layers to convert these features into the centroid location:</p>
<p><img loading="lazy" data-attachment-id="925" data-permalink="https://colinpriest.com/2016/03/08/second-annual-data-science-bowl-part-3-automatically-finding-the-heart-location-in-an-mri-image/20160308-image05/" data-orig-file="https://colinpriestdotcom.files.wordpress.com/2016/03/20160308-image05.png" data-orig-size="220,346" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="20160308-image05" data-image-description="" data-image-caption="" data-medium-file="https://colinpriestdotcom.files.wordpress.com/2016/03/20160308-image05.png?w=191" data-large-file="https://colinpriestdotcom.files.wordpress.com/2016/03/20160308-image05.png?w=220" class="alignnone size-full wp-image-925" src="https://colinpriestdotcom.files.wordpress.com/2016/03/20160308-image05.png" alt="20160308-image05" width="220" height="346" srcset="https://colinpriestdotcom.files.wordpress.com/2016/03/20160308-image05.png 220w, https://colinpriestdotcom.files.wordpress.com/2016/03/20160308-image05.png?w=95&amp;h=150 95w" sizes="(max-width: 220px) 100vw, 220px" /></p>
<pre class="brush: python; title: ; notranslate">

# fit the models

# set up the model
printQ ('setting up the model structure')
layers0 = [
 # layer dealing with the input data
 (InputLayer, {'shape': (None, 2, 96, 96)}),

# first stage of our convolutional layers
 (Conv2DLayer, {'num_filters': 32, 'filter_size': 5}),
 #(DropoutLayer, {'p': 0.2}),
 (Conv2DLayer, {'num_filters': 32, 'filter_size': 3}),
 #(DropoutLayer, {'p': 0.2}),
 (Conv2DLayer, {'num_filters': 32, 'filter_size': 3}),
 #(DropoutLayer, {'p': 0.2}),
 (Conv2DLayer, {'num_filters': 32, 'filter_size': 3}),
 #(DropoutLayer, {'p': 0.2}),
 (Conv2DLayer, {'num_filters': 32, 'filter_size': 3}),
 (MaxPool2DLayer, {'pool_size': 2}),
 (DropoutLayer, {'p': 0.2}),

# second stage of our convolutional layers
 (Conv2DLayer, {'num_filters': 64, 'filter_size': 3}),
 #(DropoutLayer, {'p': 0.3}),
 (Conv2DLayer, {'num_filters': 64, 'filter_size': 3}),
 #(DropoutLayer, {'p': 0.3}),
 (Conv2DLayer, {'num_filters': 64, 'filter_size': 3}),
 (MaxPool2DLayer, {'pool_size': 2}),
 (DropoutLayer, {'p': 0.3}),

# two dense layers with dropout
 (DenseLayer, {'num_units': 128}),
 (DropoutLayer, {'p': 0.5}),
 (DenseLayer, {'num_units': 128}),

# the output layer
 (DenseLayer, {'num_units': 2, 'nonlinearity': sigmoid}),
]

printQ ('creating and training the networks architectures')
numNets = 1
NNs = list()
for iNet in arange(numNets):
 nn = NeuralNet(
 layers = layers0,
 max_epochs = 2000,
 update=adam,
 update_learning_rate=0.0002,
 regression=True, # flag to indicate we're dealing with regression problem
 batch_iterator_train=BatchIterator(batch_size=100),
 on_epoch_finished=[EarlyStopping(patience=10),],
 train_split=TrainSplit(eval_size=0.25),
 verbose=1,
 )
 result = nn.fit(t_x, t_y)
 NNs.append(nn)

printQ('finished')

</pre>
<p>Based upon how quickly the training converged, the network could possibly have been simplified, reducing the number of layers, or using fewer neurons in the fully connected layers. But I didn&#8217;t have time to experiment with different architectures.</p>
<p><img loading="lazy" data-attachment-id="931" data-permalink="https://colinpriest.com/2016/03/08/second-annual-data-science-bowl-part-3-automatically-finding-the-heart-location-in-an-mri-image/20160308-image06/" data-orig-file="https://colinpriestdotcom.files.wordpress.com/2016/03/20160308-image06.png" data-orig-size="469,276" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="20160308-image06" data-image-description="" data-image-caption="" data-medium-file="https://colinpriestdotcom.files.wordpress.com/2016/03/20160308-image06.png?w=300" data-large-file="https://colinpriestdotcom.files.wordpress.com/2016/03/20160308-image06.png?w=469" class="alignnone size-full wp-image-931" src="https://colinpriestdotcom.files.wordpress.com/2016/03/20160308-image06.png" alt="20160308-image06" width="469" height="276" srcset="https://colinpriestdotcom.files.wordpress.com/2016/03/20160308-image06.png 469w, https://colinpriestdotcom.files.wordpress.com/2016/03/20160308-image06.png?w=150&amp;h=88 150w, https://colinpriestdotcom.files.wordpress.com/2016/03/20160308-image06.png?w=300&amp;h=177 300w" sizes="(max-width: 469px) 100vw, 469px" /></p>
<p>The GPU quickly ran out of RAM unless I used the batch iterator. I found the batch size via trial and error. Large batch sizes caused the GPU to run out of RAM. Small batch sizes ran much slower.</p>
<h1>Step 5: Review the Training Errors</h1>
<p>Just like humans, all models make mistakes. The heart chamber segmentation algorithms I used later in this project were sensitive to how well the heart chamber was centred in the image. But as long as the model output was a centroid that was inside the heart chamber, things usually went OK. Early versions of my model made mistakes that placed the centroid outside the heart chamber, sometimes even far away from the heart.Tweaks to the training data (especially enhancing the data with rotation and reflection) and the architecture (especially dropout layers) improved the performance.</p>
<pre class="brush: python; title: ; notranslate">

def getHeartLocation(trainX):
  # get the heart locations from each network
  heartLocs = zeros(numNets * trainX.shape[0] * 2).reshape((numNets, trainX.shape[0], 2))
  for j in arange(numNets):
    nn = NNs[j]
    heartLocs[j, :, :] = nn.predict(trainX)

    # use median as an ensembler
    heartLocsMedian = zeros(trainX.shape[0] * 2).reshape((trainX.shape[0], 2))
    heartLocsMedian[:,0] = median(heartLocs[:,:,0], axis = 0)
    heartLocsMedian[:,1] = median(heartLocs[:,:,1], axis = 0)

    # use a 'max distance from centre' ensembler
    heartLocsDist = zeros(trainX.shape[0] * 2).reshape((trainX.shape[0], 2))
    distance = abs(heartLocs - 0.5)
    am0 = distance[:,:,0].argmax(0)
    am1 = distance[:,:,1].argmax(0)
    heartLocsDist[:,0] = heartLocs[am0, arange(trainX.shape[0]), 0]
    heartLocsDist[:,1] = heartLocs[am1, arange(trainX.shape[0]), 1]

    # combine the two using an arithmetic average
    heartLocations = 0.5 * heartLocsMedian + 0.5 * heartLocsDist

    return heartLocations

heartLocations = getHeartLocation(train_x)

# review the training errors to check for model improvements
def plot_sample(x, y, predicted, axis):
  img = x[0, :, :].reshape(96, 96)
  axis.imshow(img, cmap='gray')
  axis.scatter(y[0::2] * 96, y[1::2] * 96, marker='x', s=10)
  axis.scatter(predicted[0::2] * 96, predicted[1::2] * 96, marker='x', s=10, color='red')

nTrain = train_x.shape[0]
errors = np.zeros(nTrain)

for i in arange(0, nTrain):
  errors[i] = sqrt( square(heartLocations[i, 0] - train_y[i, 0]) + square(heartLocations[i, 1] - train_y[i, 1]) )

print('Prob(error &gt; 0.05)' + str(mean(errors &gt; 0.05)))
print('Mean: ' + str(mean(errors)))
print('Percentiles: ' + str(percentile(errors, [50, 75, 90, 95, 99, 100])))

for i in arange(0, nTrain):
  error = sqrt( square(heartLocations[i, 0] - train_y[i, 0]) + square(heartLocations[i, 1] - train_y[i, 1]) )
  if (error &gt; 0.04):
    if train_id[i] != train_id[i-1]:
      #print(i)
      print(train_id[i]) # only errors on the original images - not the altered images
      fig = pyplot.figure(figsize=(6, 3))
      ax = fig.add_subplot(1, 2, 1, xticks=[], yticks=[])
      plot_sample(train_x[i,:,:,:], train_y[i, :], heartLocations[i, :], ax)
      pyplot.show()

print('error review completed')

</pre>
<p><img loading="lazy" data-attachment-id="951" data-permalink="https://colinpriest.com/2016/03/08/second-annual-data-science-bowl-part-3-automatically-finding-the-heart-location-in-an-mri-image/20160308-image07/" data-orig-file="https://colinpriestdotcom.files.wordpress.com/2016/03/20160308-image07.png" data-orig-size="701,432" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="20160308-image07" data-image-description="" data-image-caption="" data-medium-file="https://colinpriestdotcom.files.wordpress.com/2016/03/20160308-image07.png?w=300" data-large-file="https://colinpriestdotcom.files.wordpress.com/2016/03/20160308-image07.png?w=529" class="alignnone size-full wp-image-951" src="https://colinpriestdotcom.files.wordpress.com/2016/03/20160308-image07.png" alt="20160308-image07" width="701" height="432" srcset="https://colinpriestdotcom.files.wordpress.com/2016/03/20160308-image07.png 701w, https://colinpriestdotcom.files.wordpress.com/2016/03/20160308-image07.png?w=150&amp;h=92 150w, https://colinpriestdotcom.files.wordpress.com/2016/03/20160308-image07.png?w=300&amp;h=185 300w" sizes="(max-width: 701px) 100vw, 701px" /></p>
<p>After many failed models, I was excited when the two worst training errors were still close to the centre of the heart chamber <img src="https://s0.wp.com/wp-content/mu-plugins/wpcom-smileys/twemoji/2/72x72/1f642.png" alt="🙂" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>
<h1>Step 6: Find the Left Ventricle Locations for the Submission Data</h1>
<p>The main point of building a heart finder machine learning model is to automate the process of finding the left ventricle in the test images that will be used as part of the competition submission. These are images that the model has never seen before.</p>
<pre class="brush: python; title: ; notranslate">

def load_submission_set():
  numTimes = 2 # how many time periods to use
  plusTime = 5
  xs = []
  ys = []
  ids = []
  paths = []
  times = []
  saxes = []
  all_y = '/home/colin/data/Second-Annual-Data-Science-Bowl/working/centroids-submission-R.csv'
  with open(all_y) as f:
    rows = csv.reader(f, delimiter=',', quotechar='&quot;')
    iRow = 1
    for line in rows:
      # first line is column headers
      if iRow &gt; 1:
        # parse the line
        patient = line[0]
        x = 0
        y = 0
        sax = int(line[1])
        firstTime = int(line[2])
        # save the targets
        xy = np.asarray([x, y])
        ys.append(xy.astype('float32').reshape((1, 2)))
        # read the images
        folder = '/home/colin/data/Second-Annual-Data-Science-Bowl/validate-cleaned/' + patient + '/study/sax_0' + str(sax) + '/'
        xm = np.zeros([1, 2, 96, 96])
        #
        #
        # current frame
        path0 = folder + 'image-' + ('%0*d' % (2, firstTime)) + '.png'
        img = load_image(path0)
        # transform the image - rotation, reflection etc
        #img = transform_image(img, row['equalise'], row['gammaAdjust'], row['reflection'], row['rotation'])
        # get the pixels into the range [-1, 1]
        img = (img / 128.0 - 1.0).astype('float32').reshape((96, 96))
        xm[0, 0, :, :] = img
        #
        #
        # find movement of current frame to future frame
        path5 = folder + 'image-' + ('%0*d' % (2, firstTime + plusTime)) + '.png'
        img = load_image(path5)
        # transform the image - rotation, reflection etc
        #img = transform_image(img, row['equalise'], row['gammaAdjust'], row['reflection'], row['rotation'])
        # get the pixels into the range [-1, 1]
        img = (img / 128.0 - 1.0).astype('float32').reshape((96, 96))
        # first time is the complete image at time 1
        # subsequent frames are the differences between frames
        xm[0, 1, :, :] = img - xm[0, 0, :, :]
        xs.append(xm.astype('float32').reshape((1, numTimes, 96, 96)))
        ids.append(patient)
        paths.append(path0)
        times.append(firstTime)
        saxes.append(sax)
      iRow = iRow + 1
  return np.vstack(xs), np.vstack(ids), np.vstack(paths), np.vstack(times), np.vstack(saxes)

printQ('reading the submission data')
test_x, test_ids, test_paths, test_times, test_sax = load_submission_set()

printQ('quot;getting the predictions')
predicted_y = getHeartLocation(test_x)

printQ('creating the output table')
fullIDs = []
fullPaths = []
fullX = []
fullY = []
fullSax = []
fullTime = []
nTest = test_x.shape[0]
iTime = 1
for i in arange(0, nTest):
  patient = (test_ids[i])[0]
  sax = int((test_sax[i])[0])
  path = (test_paths[i])[0]
  iTime = int((test_times[i])[0])
  fullIDs.append(patient)
  fullPaths.append(path)
  fullX.append(predicted_y[i, 0])
  fullY.append(predicted_y[i, 1])
  fullSax.append(sax)
  fullTime.append(iTime)
  outPath = '/home/colin/data/Second-Annual-Data-Science-Bowl/predicted-heart-location-submission/'
  outPath = outPath + patient
  outPath = outPath + '-' + str(sax)
  outPath = outPath + '-' + str(iTime) + '.png'
  img = load_image256x192(path)
  x = int(round(predicted_y[i, 0] * 192))
  y = int(round(predicted_y[i, 1] * 256))
  img[y, x] = 255
  img[y-1, x-1] = 255
  img[y-1, x+1] = 255
  img[y+1, x-1] = 255
  img[y+1, x+1] = 255
  write_image(img, outPath)

fullIDs = array(fullIDs)
fullPaths = array(fullPaths)
fullX = array(fullX)
fullY = array(fullY)
fullSax = array(fullSax)
fullTime = array(fullTime)

printQ('saving results table')
d = { 'patient': fullIDs, 'path' : fullPaths, 'x' : fullX, 'y' : fullY, 'iTime' : fullTime, 'sax' : fullSax}
import pandas as pd
d = pd.DataFrame(d)
d.to_csv('/home/colin/data/Second-Annual-Data-Science-Bowl/working/heartfinderV4b-centroids-submission.csv', index = False)

</pre>
<p>In the animated gif below, you can see the left ventricle centroid location that has been automatically fitted, displayed as a dark rectangle moving around near the centre of the heart chamber. The machine learning algorithm was not trained on this patient&#8217;s images &#8211; so what you see here is artificial intelligence in action!</p>
<p><img loading="lazy" data-attachment-id="965" data-permalink="https://colinpriest.com/2016/03/08/second-annual-data-science-bowl-part-3-automatically-finding-the-heart-location-in-an-mri-image/20160308-submission-images/" data-orig-file="https://colinpriestdotcom.files.wordpress.com/2016/03/20160308-submission-images.gif" data-orig-size="384,512" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="20160308-submission-images" data-image-description="" data-image-caption="" data-medium-file="https://colinpriestdotcom.files.wordpress.com/2016/03/20160308-submission-images.gif?w=225" data-large-file="https://colinpriestdotcom.files.wordpress.com/2016/03/20160308-submission-images.gif?w=384" class="alignnone size-full wp-image-965" src="https://colinpriestdotcom.files.wordpress.com/2016/03/20160308-submission-images.gif" alt="20160308-submission-images" width="384" height="512" /></p>
]]></content:encoded>
					
					<wfw:commentRss>https://colinpriest.com/2016/03/08/second-annual-data-science-bowl-part-3-automatically-finding-the-heart-location-in-an-mri-image/feed/</wfw:commentRss>
			<slash:comments>10</slash:comments>
		
		
		
		<media:thumbnail url="https://colinpriestdotcom.files.wordpress.com/2016/03/20160308-submission-images.gif" />
		<media:content url="https://colinpriestdotcom.files.wordpress.com/2016/03/20160308-submission-images.gif" medium="image">
			<media:title type="html">20160308-submission-images</media:title>
		</media:content>

		<media:content url="https://2.gravatar.com/avatar/883de1a12d42422f2643d6ee75c2b746?s=96&#38;d=identicon&#38;r=G" medium="image">
			<media:title type="html">colinpriest1966</media:title>
		</media:content>

		<media:content url="https://colinpriestdotcom.files.wordpress.com/2016/03/20160308-image01.png?w=113" medium="image" />

		<media:content url="https://colinpriestdotcom.files.wordpress.com/2016/03/20160308-image02.png?w=113" medium="image" />

		<media:content url="https://colinpriestdotcom.files.wordpress.com/2016/03/20160308-image03.png?w=113" medium="image" />

		<media:content url="https://colinpriestdotcom.files.wordpress.com/2016/03/20160308-image04.png?w=113" medium="image" />

		<media:content url="https://colinpriestdotcom.files.wordpress.com/2016/03/20160308-image05.png" medium="image">
			<media:title type="html">20160308-image05</media:title>
		</media:content>

		<media:content url="https://colinpriestdotcom.files.wordpress.com/2016/03/20160308-image06.png" medium="image">
			<media:title type="html">20160308-image06</media:title>
		</media:content>

		<media:content url="https://colinpriestdotcom.files.wordpress.com/2016/03/20160308-image07.png" medium="image">
			<media:title type="html">20160308-image07</media:title>
		</media:content>
	</item>
		<item>
		<title>Second Annual Data Science Bowl &#8211; Part 2</title>
		<link>https://colinpriest.com/2016/03/07/second-annual-data-science-bowl-part-2/</link>
					<comments>https://colinpriest.com/2016/03/07/second-annual-data-science-bowl-part-2/#comments</comments>
		
		<dc:creator><![CDATA[Colin Priest]]></dc:creator>
		<pubDate>Mon, 07 Mar 2016 00:27:23 +0000</pubDate>
				<category><![CDATA[Automation]]></category>
		<category><![CDATA[Image Processing]]></category>
		<category><![CDATA[Kaggle]]></category>
		<category><![CDATA[Medical Imaging]]></category>
		<category><![CDATA[R]]></category>
		<guid isPermaLink="false">http://colinpriest.com/?p=723</guid>

					<description><![CDATA[In Part 1 of this blog series, I described how to fix the brightness and contrast of the MRI images. In this blog I finish cleaning up the input data. Once we have done these steps, the data is ready to go into a convolutional neural network (to be described in my next blog).<p><a href="https://colinpriest.com/2016/03/07/second-annual-data-science-bowl-part-2/">Continue reading <span class="meta-nav">&#8594;</span></a></p>]]></description>
										<content:encoded><![CDATA[<p>In <a href="https://colinpriest.com/2016/03/06/second-annual-data-science-bowl-part-1/" target="_blank">Part 1</a> of this blog series, I described how to fix the brightness and contrast of the MRI images. In this blog we finish cleaning up the input data.</p>
<p>Other than brightness and contrast, we need to fix up the following problems:</p>
<ul>
<li>different image sizes</li>
<li>different image rotations &#8211; portrait versus landscape</li>
<li>different pixel spacing</li>
<li>different short axis slice spacing</li>
<li>image sets from duplicate locations</li>
<li>sax sets aren&#8217;t in the same order as their locations</li>
<li>some sax image sets have multiple locations</li>
</ul>
<h1>Different Image Sizes and Rotations</h1>
<p>There are approximately a dozen different image sizes, include rotated images. Not all of the image sizes scale to the same 4:3 aspect ratio that is the most common across the training set. Some of the machine learning algorithms I used later need fixed dimension images, so I compromised and decided to use a standard sizing of 256 x 192 pixels portrait aspect ratio. This meant that I wasn&#8217;t always scaling the x-axis and the y-axis by the same amount, and occasionally I was even upscaling an image.</p>
<pre class="brush: r; title: ; notranslate">

library(pacman)
pacman::p_load(EBImage)
rescaleImage = function(img)
{
 imgOut = img
 # check for landscape aspect ratio and correct
 if (nrow(img) &gt; ncol(img)) imgOut = t(img)
 imgOut = resize(imgOut, 256, 192) # standardise image size to 256 x 192
 return (imgOut)
}

</pre>
<p><img loading="lazy" data-attachment-id="778" data-permalink="https://colinpriest.com/2016/03/07/second-annual-data-science-bowl-part-2/20160307image01/" data-orig-file="https://colinpriestdotcom.files.wordpress.com/2016/03/20160307image01.png" data-orig-size="256,192" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="20160307image01" data-image-description="" data-image-caption="" data-medium-file="https://colinpriestdotcom.files.wordpress.com/2016/03/20160307image01.png?w=256" data-large-file="https://colinpriestdotcom.files.wordpress.com/2016/03/20160307image01.png?w=256" class="alignnone size-full wp-image-778" src="https://colinpriestdotcom.files.wordpress.com/2016/03/20160307image01.png" alt="20160307image01" width="256" height="192" srcset="https://colinpriestdotcom.files.wordpress.com/2016/03/20160307image01.png 256w, https://colinpriestdotcom.files.wordpress.com/2016/03/20160307image01.png?w=150&amp;h=113 150w" sizes="(max-width: 256px) 100vw, 256px" /><img loading="lazy" data-attachment-id="779" data-permalink="https://colinpriest.com/2016/03/07/second-annual-data-science-bowl-part-2/20160307image02/" data-orig-file="https://colinpriestdotcom.files.wordpress.com/2016/03/20160307image02.png" data-orig-size="192,256" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="20160307image02" data-image-description="" data-image-caption="" data-medium-file="https://colinpriestdotcom.files.wordpress.com/2016/03/20160307image02.png?w=192" data-large-file="https://colinpriestdotcom.files.wordpress.com/2016/03/20160307image02.png?w=192" class="alignnone size-full wp-image-779" src="https://colinpriestdotcom.files.wordpress.com/2016/03/20160307image02.png" alt="20160307image02" width="192" height="256" srcset="https://colinpriestdotcom.files.wordpress.com/2016/03/20160307image02.png 192w, https://colinpriestdotcom.files.wordpress.com/2016/03/20160307image02.png?w=113&amp;h=150 113w" sizes="(max-width: 192px) 100vw, 192px" /></p>
<p>Note that I used matrix transpose to rotate the image 90 degrees. I could also have used the rotate function in EBImage. Either way could work, but I felt that matrix transpose would be a faster operation.</p>
<h1>Image Locations and Spacing</h1>
<p>The DICOM images contain information about image slice location, pixel spacing (how far apart are adjacent pixel centroids), and slice spacing (how far apart are adjacent sax slices).</p>
<pre class="brush: r; title: ; notranslate">

library(pacman)
pacman::p_load(oro.dicom)

# function to extract the dicom header info
getDicomHeaderInfo = function(path)
{
 img = readDICOMFile(path)
 width = ncol(img$img)
 height = nrow(img$img)
 headers = img$hdr
 patientID = extractHeader(img$hdr, 'PatientID', numeric = TRUE)
 patientAge = as.integer(substr(extractHeader(img$hdr, 'PatientsAge', numeric = FALSE), 1, 3))
 patientGender = as.character(extractHeader(img$hdr, 'PatientsSex', numeric = FALSE))
 ps = extractHeader(img$hdr, 'PixelSpacin', numeric = FALSE)
 pixelSpacingX = as.numeric(unlist(strsplit(ps, ' '))[1])
 pixelSpacingY = as.numeric(unlist(strsplit(ps, ' '))[2])
 seriesNum = extractHeader(img$hdr, 'SeriesNumber', numeric = TRUE)
 location = round(extractHeader(img$hdr, 'SliceLocation', numeric = TRUE), digits = 1)
 pathSplit = unlist(strsplit(path, '/&amp;amp;amp;', fixed = TRUE))
 filename = pathSplit[length(pathSplit)]
 prefix = unlist(strsplit(filename, '.', fixed = TRUE))[1]
 frame = as.integer(unlist(strsplit(prefix, '-'))[3])
 sliceNum = 0
 if (length(unlist(strsplit(prefix, '-'))) &amp;amp;gt; 3) sliceNum = as.integer(unlist(strsplit(prefix, '-'))[4])
 time = extractHeader(img$hdr, 'InstanceCreationTime', numeric = FALSE)
 #
 return (list(
 id = patientID,
 age = patientAge,
 gender = patientGender,
 pixelSpacingX = pixelSpacingX,
 pixelSpacingY = pixelSpacingY,
 width = width,
 height = height,
 series = seriesNum,
 location = location,
 frame = frame,
 sliceNum = sliceNum,
 time = time,
 path = path
 ))
}
</pre>
<p>I&#8217;m not a medical expert. So when there are images from duplicate locations, I don&#8217;t know which image sets are the best to use. Therefore I just assumed that the medical specialist repeated the MRI scans until the image quality was adequate. This meant that I chose the image set with the latest time stamps (from the header information inside the DICOM files, not the file system date).</p>
<p>Then I just</p>
<ol>
<li>searched for DICOM images in all of the subfolders for each patient</li>
<li>filtered to use only sax slices, ignoring those images that did not come from a folder that contained the substring &#8220;sax&#8221;</li>
<li>read the DICOM header information from each image to find its location and time</li>
<li>searched for the high time stamp for each location and kept that image</li>
<li>wrote out a new folder structure where sax_01, sax_02, &#8230; were the sax slice image sets for that patient, order by their location along the long axis of the heart</li>
</ol>
<p>The R script to do this isn&#8217;t too difficult. I&#8217;ve pasted it below:</p>
<pre class="brush: r; title: ; notranslate">

# this script creates a cleaner version of the image data
# plus an extract of the file headers
# 1) removes duplicate images
# 2) reorders images by location

# read a poor image and translate the pixel brightnesses
rebalanceImage = function(badImage)
{
v = matrix(badImage, nrow(badImage) * ncol(badImage))
o2 = order(v)
vIn = sample(vAll, nrow(badImage) * ncol(badImage))
vIn = vIn[order(vIn)]
v2 = v
v2[o2] = vIn
cleanImage = matrix(v2, nrow(badImage), ncol(badImage))
return (cleanImage)
}

# check whether a folder exists and make it if it doesn't exist
checkFolder = function(mainDir, subDir)
{
if(!dir.exists(file.path(mainDir, subDir)))
dir.create(file.path(mainDir, subDir))
}

# function to extract the dicom header info
getDicomHeaderInfo = function(path)
{
img = readDICOMFile(path)
width = ncol(img$img)
height = nrow(img$img)
headers = img$hdr
patientID = extractHeader(img$hdr, 'PatientID', numeric = TRUE)
patientAge = as.integer(substr(extractHeader(img$hdr, 'PatientsAge', numeric = FALSE), 1, 3))
patientGender = as.character(extractHeader(img$hdr, 'PatientsSex', numeric = FALSE))
ps = extractHeader(img$hdr, 'PixelSpacing', numeric = FALSE)
pixelSpacingX = as.numeric(unlist(strsplit(ps, ' '))[1])
pixelSpacingY = as.numeric(unlist(strsplit(ps, ' '))[2])
seriesNum = extractHeader(img$hdr, 'SeriesNumber', numeric = TRUE)
location = round(extractHeader(img$hdr, 'SliceLocation', numeric = TRUE), digits = 1)
pathSplit = unlist(strsplit(path, '/', fixed = TRUE))
filename = pathSplit[length(pathSplit)]
prefix = unlist(strsplit(filename, '.', fixed = TRUE))[1]
frame = as.integer(unlist(strsplit(prefix, '-'))[3])
sliceNum = 0
if (length(unlist(strsplit(prefix, '-'))) &amp;amp;gt; 3) sliceNum = as.integer(unlist(strsplit(prefix, '-'))[4])
time = extractHeader(img$hdr, 'InstanceCreationTime', numeric = FALSE)
#
return (list(
id = patientID,
age = patientAge,
gender = patientGender,
pixelSpacingX = pixelSpacingX,
pixelSpacingY = pixelSpacingY,
width = width,
height = height,
series = seriesNum,
location = location,
frame = frame,
sliceNum = sliceNum,
time = time,
path = path
))
}
############################################################################################################################

library(pacman)
pacman::p_load(oro.dicom, raster, data.table, png, flexclust, foreach, doParallel, snowfall)

# whether this run is for the training set (FALSE) or the validation set (TRUE)
useValidation = FALSE
#useValidation = TRUE

# create a benchmark histogram from an exemplar image
dicomBenchmark = readDICOM('/home/colin/data/Second-Annual-Data-Science-Bowl/train/1/study/sax_13')
images = dicomBenchmark[[2]]
img = images[[1]]
vAll = unname(unlist(images))
vAll = vAll[order(vAll)]

# loop through all of the patients
rootFolder = '/home/colin/data/Second-Annual-Data-Science-Bowl/train'
outFolder = '/home/colin/data/Second-Annual-Data-Science-Bowl/train-cleaned'
if (useValidation)
{
rootFolder = '/home/colin/data/Second-Annual-Data-Science-Bowl/validate'
outFolder = '/home/colin/data/Second-Annual-Data-Science-Bowl/validate-cleaned'
}
cases = list.dirs(rootFolder, recursive=FALSE)
#cases = cases[grep('123', cases)]
simpleData = matrix(0, 500, 3)
simpleFeatures = data.frame(id = rep(0, 500), age = rep(0, 500), gender = rep('U', 500),
pixelSpacingX = integer(500), pixelSpacingY = integer(500),
width = integer(500), height = integer(500),
numSlices = rep(0, 500), stringsAsFactors = FALSE)
allImages = NULL

sfInit(parallel=TRUE, cpus=14)
sfLibrary(oro.dicom)

for (patient in cases)
{
patientFolder = paste0(patient, '/study')
imgSequences = list.dirs(patientFolder, recursive=FALSE)
# filter for 'sax' folders
imgSequences = imgSequences[grep('sax', imgSequences, fixed = TRUE)]
nMax = 10000
imgTable = data.table(id = integer(nMax), age = integer(nMax), gender = character(nMax),
pixelSpacingX = integer(nMax), pixelSpacingY = integer(nMax),
width = integer(nMax), height = integer(nMax),
location = numeric(nMax), frame = integer(nMax), series = integer(nMax),
sliceNum = integer(nMax), time = numeric(nMax),
path = character(nMax))
for (imgFolder in imgSequences)
{
# find the first file in imgs
imgFiles = list.files(imgFolder)
if (length(imgFiles) &amp;lt; 30)
{
print(paste0('length = ', length(imgFiles), '! in ', imgFolder))
} else {
if (length(imgFiles) %% 30 != 0)
{
print(paste0('length = ', length(imgFiles), '! in ', imgFolder))
}
}
# do the next part regardless of the number of images
paths = unlist(lapply(imgFiles, function(x) return (paste0(imgFolder, '/', x))))
result &lt;- sfLapply(paths, getDicomHeaderInfo)
for (row in result)
{
n = sum(imgTable$id &gt; 0) + 1
imgTable$id[n] = row$id
imgTable$age[n] = row$age
imgTable$gender[n] = row$gender
imgTable$pixelSpacingX[n] = row$pixelSpacingX
imgTable$pixelSpacingY[n] = row$pixelSpacingY
imgTable$width[n] = row$width
imgTable$height[n] = row$height
imgTable$series[n] = row$series
imgTable$location[n] = row$location
imgTable$frame[n] = row$frame
imgTable$sliceNum[n] = row$sliceNum
imgTable$time[n] = row$time
imgTable$path[n] = row$path
}
}
# remove surplus records from table
imgTable= imgTable[imgTable$id &gt; 0]
# grab the latest image for each location and frame
latestImages = imgTable[order(id, age, gender, pixelSpacingX, pixelSpacingY, width, height, location, frame, time, sliceNum, series), .SD[c(.N)], by=c(&amp;amp;amp;amp;quot;id&amp;amp;amp;amp;quot;, &amp;amp;amp;amp;quot;age&amp;amp;amp;amp;quot;, &amp;amp;amp;amp;quot;gender&amp;amp;amp;amp;quot;, &amp;amp;amp;amp;quot;pixelSpacingX&amp;amp;amp;amp;quot;, &amp;amp;amp;amp;quot;pixelSpacingY&amp;amp;amp;amp;quot;, &amp;amp;amp;amp;quot;width&amp;amp;amp;amp;quot;, &amp;amp;amp;amp;quot;height&amp;amp;amp;amp;quot;, &amp;amp;amp;amp;quot;location&amp;amp;amp;amp;quot;, &amp;amp;amp;amp;quot;frame&amp;amp;amp;amp;quot;)]
#
print(paste0('Patient: ', latestImages$id[1]))
uniqueLocs = sort(unique(latestImages$location[abs(latestImages$location) &gt; 0.000001]))
simpleFeatures[latestImages$id[1], ] = list(latestImages$id[1], latestImages$age[1], latestImages$gender[1],
latestImages$pixelSpacingX[1], latestImages$pixelSpacingY[1],
latestImages$width[1], latestImages$height[1],
length(uniqueLocs))
# create the cleaned-up images for CNN training
imgTable$cleanPath = '---'
iSax = 1
patientID = latestImages$id[1]
for (loc in uniqueLocs)
{
imgset = latestImages$path[latestImages$location == loc]
iImage = 1
for (imgPath in imgset)
{
dicomImage = readDICOMFile(imgPath)
# fix the contrast and brightness
fixedImage = rebalanceImage(dicomImage$img)
# get the details of this image
###patientID = extractHeader(dicomImage$hdr, 'PatientID', numeric = TRUE)
sliceID = iSax
imageID = iImage
outPath = paste0(outFolder, '/', patientID, '/study/sax_', formatC(sliceID, width=2, flag='0'), '/image-', formatC(imageID, width=2, flag='0'), '.png')
#print(outPath)
#plot(raster(fixedImage))
checkFolder(outFolder, as.character(patientID))
checkFolder(paste0(outFolder, '/', patientID), 'study')
checkFolder(paste0(outFolder, '/', patientID, '/study'), paste0('sax_', formatC(sliceID, width=2, flag='0')))
writePNG(fixedImage / max(fixedImage), outPath)
imgTable$cleanPath[imgTable$path == imgPath] = outPath
#
iImage = iImage + 1
}
iSax = iSax + 1
}

if (patient == cases[1])
{
allImages = imgTable
} else
{
allImages = data.frame(rbind(allImages, imgTable))
}
}

sfStop()

</pre>
<p>I stored all of the DICOM header information in a table. Some of this will be required later, when calculating the volume of the left ventricle chamber.</p>
<p>The next step, which will be described in my next blog, is to design a convolutional neural network that will automatically find the left ventricle in an image.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://colinpriest.com/2016/03/07/second-annual-data-science-bowl-part-2/feed/</wfw:commentRss>
			<slash:comments>3</slash:comments>
		
		
		
		<media:thumbnail url="https://colinpriestdotcom.files.wordpress.com/2016/03/20160307image01.png" />
		<media:content url="https://colinpriestdotcom.files.wordpress.com/2016/03/20160307image01.png" medium="image">
			<media:title type="html">20160307image01</media:title>
		</media:content>

		<media:content url="https://2.gravatar.com/avatar/883de1a12d42422f2643d6ee75c2b746?s=96&#38;d=identicon&#38;r=G" medium="image">
			<media:title type="html">colinpriest1966</media:title>
		</media:content>

		<media:content url="https://colinpriestdotcom.files.wordpress.com/2016/03/20160307image02.png" medium="image">
			<media:title type="html">20160307image02</media:title>
		</media:content>
	</item>
		<item>
		<title>Second Annual Data Science Bowl &#8211; Part 1</title>
		<link>https://colinpriest.com/2016/03/06/second-annual-data-science-bowl-part-1/</link>
					<comments>https://colinpriest.com/2016/03/06/second-annual-data-science-bowl-part-1/#comments</comments>
		
		<dc:creator><![CDATA[Colin Priest]]></dc:creator>
		<pubDate>Sun, 06 Mar 2016 07:50:55 +0000</pubDate>
				<category><![CDATA[Automation]]></category>
		<category><![CDATA[Image Processing]]></category>
		<category><![CDATA[Kaggle]]></category>
		<category><![CDATA[Medical Imaging]]></category>
		<category><![CDATA[R]]></category>
		<guid isPermaLink="false">http://colinpriest.com/?p=611</guid>

					<description><![CDATA[I&#8217;m currently competing in the Second Annual Data Science Bowl at Kaggle. This is by far the most difficult competition that &#8230;<p><a href="https://colinpriest.com/2016/03/06/second-annual-data-science-bowl-part-1/">Continue reading <span class="meta-nav">&#8594;</span></a></p>]]></description>
										<content:encoded><![CDATA[<p>I&#8217;m currently competing in the <a href="https://www.kaggle.com/c/second-annual-data-science-bowl" target="_blank">Second Annual Data Science Bowl</a> at <a href="http://www.kaggle.com">Kaggle</a>. This is by far the most difficult competition that I have entered to date. At the time of writing I am placed 62nd out of 755 entries, with only a day remaining to lock down my methodology. There&#8217;s a lot more I&#8217;d like to do to improve my model, but alas, I don&#8217;t have the time!</p>
<p>Here&#8217;s the problem that we are solving:</p>
<ol>
<li>We are given a set of medical images taken by MRI, across 30 time periods, and a variable number of location slices through the body.</li>
<li>We are also given the volume of the left ventricle of the heart at times of <a href="https://en.wikipedia.org/wiki/Diastole" target="_blank">diastole</a> and <a href="https://en.wikipedia.org/wiki/Systole" target="_blank">systole</a>.</li>
<li>Our task is to design an automatic algorithm that inputs DICOM images and outputs a cumulative density function of the likelihood of different volumes at both diastole and systole.</li>
</ol>
<p>The medical image files are in <a href="https://en.wikipedia.org/wiki/DICOM" target="_blank">DICOM</a> format, containing information about the patient (e.g. age and gender) and a set of monochrome images for each patient giving a 4 dimensional view of that patient&#8217;s chest. The key images are the &#8220;sax&#8221; (short axis) images, a set of slices perpendicular to the line that passes through the length of the heart (a heart isn&#8217;t circular, but more ovoid in shape), and there are typically 30 images for each sax, each being 1/30th the time period of a heartbeat, showing one complete cycle of the heart. There are a varying number of sax images for each patient, depending upon the length of the patient&#8217;s heart, and sometimes there are also repeated sax sets, where the scanning was repeated in an attempt to improve the image quality.</p>
<p>The image quality varies greatly between patients, with differing image resolutions, brightness, contrast and aspect ratio / rotation.</p>
<p>
<a href='https://colinpriest.com/2016/03/06/second-annual-data-science-bowl-part-1/sax_8/'><img width="135" height="150" src="https://colinpriestdotcom.files.wordpress.com/2016/03/sax_8.gif?w=135" class="attachment-thumbnail size-thumbnail" alt="" loading="lazy" srcset="https://colinpriestdotcom.files.wordpress.com/2016/03/sax_8.gif?w=135 135w, https://colinpriestdotcom.files.wordpress.com/2016/03/sax_8.gif 230w" sizes="(max-width: 135px) 100vw, 135px" data-attachment-id="671" data-permalink="https://colinpriest.com/2016/03/06/second-annual-data-science-bowl-part-1/sax_8/" data-orig-file="https://colinpriestdotcom.files.wordpress.com/2016/03/sax_8.gif" data-orig-size="230,256" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="sax_8" data-image-description="" data-image-caption="" data-medium-file="https://colinpriestdotcom.files.wordpress.com/2016/03/sax_8.gif?w=230" data-large-file="https://colinpriestdotcom.files.wordpress.com/2016/03/sax_8.gif?w=230" /></a>
<a href='https://colinpriest.com/2016/03/06/second-annual-data-science-bowl-part-1/sax_8-2/'><img width="113" height="150" src="https://colinpriestdotcom.files.wordpress.com/2016/03/sax_81.gif?w=113" class="attachment-thumbnail size-thumbnail" alt="" loading="lazy" srcset="https://colinpriestdotcom.files.wordpress.com/2016/03/sax_81.gif?w=113 113w, https://colinpriestdotcom.files.wordpress.com/2016/03/sax_81.gif 192w" sizes="(max-width: 113px) 100vw, 113px" data-attachment-id="672" data-permalink="https://colinpriest.com/2016/03/06/second-annual-data-science-bowl-part-1/sax_8-2/" data-orig-file="https://colinpriestdotcom.files.wordpress.com/2016/03/sax_81.gif" data-orig-size="192,256" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="sax_8" data-image-description="" data-image-caption="" data-medium-file="https://colinpriestdotcom.files.wordpress.com/2016/03/sax_81.gif?w=192" data-large-file="https://colinpriestdotcom.files.wordpress.com/2016/03/sax_81.gif?w=192" /></a>
</p>
<p>As you can see in the animated gifs above, some of the images are such poor quality that it is difficult for the human eye to discern the details. So my first challenge was to improve the brightness and contrast. One way to do this is to do a linear transformation on each image so that its pixels have a preset mean and standard deviation.</p>
<p>
<a href='https://colinpriest.com/2016/03/06/second-annual-data-science-bowl-part-1/20160306image01/'><img width="135" height="150" src="https://colinpriestdotcom.files.wordpress.com/2016/03/20160306image01.png?w=135" class="attachment-thumbnail size-thumbnail" alt="" loading="lazy" srcset="https://colinpriestdotcom.files.wordpress.com/2016/03/20160306image01.png?w=135 135w, https://colinpriestdotcom.files.wordpress.com/2016/03/20160306image01.png 230w" sizes="(max-width: 135px) 100vw, 135px" data-attachment-id="677" data-permalink="https://colinpriest.com/2016/03/06/second-annual-data-science-bowl-part-1/20160306image01/" data-orig-file="https://colinpriestdotcom.files.wordpress.com/2016/03/20160306image01.png" data-orig-size="230,256" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="20160306image01" data-image-description="" data-image-caption="" data-medium-file="https://colinpriestdotcom.files.wordpress.com/2016/03/20160306image01.png?w=230" data-large-file="https://colinpriestdotcom.files.wordpress.com/2016/03/20160306image01.png?w=230" /></a>
<a href='https://colinpriest.com/2016/03/06/second-annual-data-science-bowl-part-1/20160306image02/'><img width="135" height="150" src="https://colinpriestdotcom.files.wordpress.com/2016/03/20160306image02.png?w=135" class="attachment-thumbnail size-thumbnail" alt="" loading="lazy" srcset="https://colinpriestdotcom.files.wordpress.com/2016/03/20160306image02.png?w=135 135w, https://colinpriestdotcom.files.wordpress.com/2016/03/20160306image02.png 230w" sizes="(max-width: 135px) 100vw, 135px" data-attachment-id="679" data-permalink="https://colinpriest.com/2016/03/06/second-annual-data-science-bowl-part-1/20160306image02/" data-orig-file="https://colinpriestdotcom.files.wordpress.com/2016/03/20160306image02.png" data-orig-size="230,256" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="20160306image02" data-image-description="" data-image-caption="" data-medium-file="https://colinpriestdotcom.files.wordpress.com/2016/03/20160306image02.png?w=230" data-large-file="https://colinpriestdotcom.files.wordpress.com/2016/03/20160306image02.png?w=230" /></a>
<a href='https://colinpriest.com/2016/03/06/second-annual-data-science-bowl-part-1/20160306image03/'><img width="113" height="150" src="https://colinpriestdotcom.files.wordpress.com/2016/03/20160306image03.png?w=113" class="attachment-thumbnail size-thumbnail" alt="" loading="lazy" srcset="https://colinpriestdotcom.files.wordpress.com/2016/03/20160306image03.png?w=113 113w, https://colinpriestdotcom.files.wordpress.com/2016/03/20160306image03.png 192w" sizes="(max-width: 113px) 100vw, 113px" data-attachment-id="680" data-permalink="https://colinpriest.com/2016/03/06/second-annual-data-science-bowl-part-1/20160306image03/" data-orig-file="https://colinpriestdotcom.files.wordpress.com/2016/03/20160306image03.png" data-orig-size="192,256" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="20160306image03" data-image-description="" data-image-caption="" data-medium-file="https://colinpriestdotcom.files.wordpress.com/2016/03/20160306image03.png?w=192" data-large-file="https://colinpriestdotcom.files.wordpress.com/2016/03/20160306image03.png?w=192" /></a>
<a href='https://colinpriest.com/2016/03/06/second-annual-data-science-bowl-part-1/20160306image04/'><img width="113" height="150" src="https://colinpriestdotcom.files.wordpress.com/2016/03/20160306image04.png?w=113" class="attachment-thumbnail size-thumbnail" alt="" loading="lazy" srcset="https://colinpriestdotcom.files.wordpress.com/2016/03/20160306image04.png?w=113 113w, https://colinpriestdotcom.files.wordpress.com/2016/03/20160306image04.png 192w" sizes="(max-width: 113px) 100vw, 113px" data-attachment-id="678" data-permalink="https://colinpriest.com/2016/03/06/second-annual-data-science-bowl-part-1/20160306image04/" data-orig-file="https://colinpriestdotcom.files.wordpress.com/2016/03/20160306image04.png" data-orig-size="192,256" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="20160306image04" data-image-description="" data-image-caption="" data-medium-file="https://colinpriestdotcom.files.wordpress.com/2016/03/20160306image04.png?w=192" data-large-file="https://colinpriestdotcom.files.wordpress.com/2016/03/20160306image04.png?w=192" /></a>
</p>
<p>As you can see, while this approach helped, it did not work well enough for the problem images. I also tried non-linear transformations without much more success. No transformation function was flexible enough for the wide range of image qualities. Frequently part of the problem image gets washed out.</p>
<p>At the <a href="http://www.nhcs.com.sg/Pages/Home.aspx" target="_blank">National Heart Centre Singapore</a>, I spoke with <a href="https://www.nhcs.com.sg/DoctorProfile/Pages/view.aspx?_id=FBC3F5F3-4B10-4C82-9119-44AE8E43E822&amp;name=Chin+Woon+Loong+Calvin&amp;institution=National+Heart+Centre+Singapore" target="_blank">Assistant Professor Calvin Chin</a> about how doctors use imaging to assess heart volume. He explained that the very bright, washed out sections in some of the images are the result of fat deposits within the patient&#8217;s body. He also explained how to find the left ventricle chamber in an image (it is round with a thick lining surrounding it) and what to do about the dark patches inside the chamber (include them in the area of the chamber because they are blood vessels). This was really helpful. It pays to bring in some domain knowledge to a machine learning problem.</p>
<p>
<a href='https://colinpriest.com/2016/03/06/second-annual-data-science-bowl-part-1/20060306image05/'><img width="150" height="125" src="https://colinpriestdotcom.files.wordpress.com/2016/03/20060306image05.png?w=150" class="attachment-thumbnail size-thumbnail" alt="" loading="lazy" srcset="https://colinpriestdotcom.files.wordpress.com/2016/03/20060306image05.png?w=150 150w, https://colinpriestdotcom.files.wordpress.com/2016/03/20060306image05.png?w=300 300w" sizes="(max-width: 150px) 100vw, 150px" data-attachment-id="689" data-permalink="https://colinpriest.com/2016/03/06/second-annual-data-science-bowl-part-1/20060306image05/" data-orig-file="https://colinpriestdotcom.files.wordpress.com/2016/03/20060306image05.png" data-orig-size="662,553" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="20060306image05" data-image-description="" data-image-caption="" data-medium-file="https://colinpriestdotcom.files.wordpress.com/2016/03/20060306image05.png?w=300" data-large-file="https://colinpriestdotcom.files.wordpress.com/2016/03/20060306image05.png?w=529" /></a>
<a href='https://colinpriest.com/2016/03/06/second-annual-data-science-bowl-part-1/20060306image06/'><img width="150" height="125" src="https://colinpriestdotcom.files.wordpress.com/2016/03/20060306image06.png?w=150" class="attachment-thumbnail size-thumbnail" alt="" loading="lazy" srcset="https://colinpriestdotcom.files.wordpress.com/2016/03/20060306image06.png?w=150 150w, https://colinpriestdotcom.files.wordpress.com/2016/03/20060306image06.png?w=300 300w" sizes="(max-width: 150px) 100vw, 150px" data-attachment-id="688" data-permalink="https://colinpriest.com/2016/03/06/second-annual-data-science-bowl-part-1/20060306image06/" data-orig-file="https://colinpriestdotcom.files.wordpress.com/2016/03/20060306image06.png" data-orig-size="662,553" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="20060306image06" data-image-description="" data-image-caption="" data-medium-file="https://colinpriestdotcom.files.wordpress.com/2016/03/20060306image06.png?w=300" data-large-file="https://colinpriestdotcom.files.wordpress.com/2016/03/20060306image06.png?w=529" /></a>
</p>
<p>What I wanted was for all images to have similar brightness histograms. After much experimentation, I couldn&#8217;t find a transformation function that achieved this for me. But then I realised that I didn&#8217;t need to use a function &#8211; I could just use empirical histograms as my target function, mapped to my original image via the brightness ranking of each pixel. All I needed to do was select an exemplar image (or multiple exemplar images) and then order the pixel brightnesses, then map across. Here&#8217;s how I did it using R:</p>
<pre class="brush: r; title: ; notranslate">

library(pacman)
pacman::p_load(oro.dicom)

# a function to turn the image into a vector
img2vec = function(img)
{
return (matrix(img, nrow(img) * ncol(img), 1))
}

# read a poor image and translate the pixel brightnesses
rebalanceImage = function(badImage)
{
# get the pixel brightnesses and get an index that sorts them
v = img2vec(badImage)
o2 = order(v)

# get a target histogram, allowing for the size of the bad image
vIn = sample(vAll, nrow(badImage) * ncol(badImage))
vIn = vIn[order(vIn)]

#
v2 = v
v2[o2] = vIn

# turn the piuxel vector back into an image
cleanImage = matrix(v2, nrow(badImage), ncol(badImage))

return (cleanImage)
}
# create a benchmark histogram from an exemplar image
dicomBenchmark = readDICOM('C:/Users/Colin/Dropbox/blogging/20160306 Second Annual Data Science Bowl Part 1/SADSB/1/study/sax_13')
images = dicomBenchmark[[2]]
img = images[[1]]
vAll = unname(unlist(images))
vAll = vAll[order(vAll)]

# read the raw image
dicomImage = readDICOMFile('C:/Users/Colin/Dropbox/blogging/20160306 Second Annual Data Science Bowl Part 1/SADSB/1/study/sax_8/IM-4560-0001.dcm')
# fix the contrast and brightness
fixedImage = rebalanceImage(dicomImage$img)
# read the raw image
dicomImage2 = readDICOMFile('C:/Users/Colin/Dropbox/blogging/20160306 Second Annual Data Science Bowl Part 1/SADSB/6/study/sax_8/IM-9548-0001.dcm')
# fix the contrast and brightness
fixedImage2 = rebalanceImage(dicomImage2$img)

</pre>
<p>This gave me fairly consistent brightnesses and contrast, regardless of the quality of the original images, and also prevented washed out regions. You can see the results below:</p>
<p>
<a href='https://colinpriest.com/2016/03/06/second-annual-data-science-bowl-part-1/20160306image07/'><img width="135" height="150" src="https://colinpriestdotcom.files.wordpress.com/2016/03/20160306image07.png?w=135" class="attachment-thumbnail size-thumbnail" alt="" loading="lazy" srcset="https://colinpriestdotcom.files.wordpress.com/2016/03/20160306image07.png?w=135 135w, https://colinpriestdotcom.files.wordpress.com/2016/03/20160306image07.png 230w" sizes="(max-width: 135px) 100vw, 135px" data-attachment-id="708" data-permalink="https://colinpriest.com/2016/03/06/second-annual-data-science-bowl-part-1/20160306image07/" data-orig-file="https://colinpriestdotcom.files.wordpress.com/2016/03/20160306image07.png" data-orig-size="230,256" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="20160306image07" data-image-description="" data-image-caption="" data-medium-file="https://colinpriestdotcom.files.wordpress.com/2016/03/20160306image07.png?w=230" data-large-file="https://colinpriestdotcom.files.wordpress.com/2016/03/20160306image07.png?w=230" /></a>
<a href='https://colinpriest.com/2016/03/06/second-annual-data-science-bowl-part-1/20160306image08/'><img width="135" height="150" src="https://colinpriestdotcom.files.wordpress.com/2016/03/20160306image08.png?w=135" class="attachment-thumbnail size-thumbnail" alt="" loading="lazy" srcset="https://colinpriestdotcom.files.wordpress.com/2016/03/20160306image08.png?w=135 135w, https://colinpriestdotcom.files.wordpress.com/2016/03/20160306image08.png 230w" sizes="(max-width: 135px) 100vw, 135px" data-attachment-id="709" data-permalink="https://colinpriest.com/2016/03/06/second-annual-data-science-bowl-part-1/20160306image08/" data-orig-file="https://colinpriestdotcom.files.wordpress.com/2016/03/20160306image08.png" data-orig-size="230,256" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="20160306image08" data-image-description="" data-image-caption="" data-medium-file="https://colinpriestdotcom.files.wordpress.com/2016/03/20160306image08.png?w=230" data-large-file="https://colinpriestdotcom.files.wordpress.com/2016/03/20160306image08.png?w=230" /></a>
<a href='https://colinpriest.com/2016/03/06/second-annual-data-science-bowl-part-1/20160306image09/'><img width="113" height="150" src="https://colinpriestdotcom.files.wordpress.com/2016/03/20160306image09.png?w=113" class="attachment-thumbnail size-thumbnail" alt="" loading="lazy" srcset="https://colinpriestdotcom.files.wordpress.com/2016/03/20160306image09.png?w=113 113w, https://colinpriestdotcom.files.wordpress.com/2016/03/20160306image09.png 192w" sizes="(max-width: 113px) 100vw, 113px" data-attachment-id="710" data-permalink="https://colinpriest.com/2016/03/06/second-annual-data-science-bowl-part-1/20160306image09/" data-orig-file="https://colinpriestdotcom.files.wordpress.com/2016/03/20160306image09.png" data-orig-size="192,256" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="20160306image09" data-image-description="" data-image-caption="" data-medium-file="https://colinpriestdotcom.files.wordpress.com/2016/03/20160306image09.png?w=192" data-large-file="https://colinpriestdotcom.files.wordpress.com/2016/03/20160306image09.png?w=192" /></a>
<a href='https://colinpriest.com/2016/03/06/second-annual-data-science-bowl-part-1/20160306image10/'><img width="113" height="150" src="https://colinpriestdotcom.files.wordpress.com/2016/03/20160306image10.png?w=113" class="attachment-thumbnail size-thumbnail" alt="" loading="lazy" srcset="https://colinpriestdotcom.files.wordpress.com/2016/03/20160306image10.png?w=113 113w, https://colinpriestdotcom.files.wordpress.com/2016/03/20160306image10.png 192w" sizes="(max-width: 113px) 100vw, 113px" data-attachment-id="707" data-permalink="https://colinpriest.com/2016/03/06/second-annual-data-science-bowl-part-1/20160306image10/" data-orig-file="https://colinpriestdotcom.files.wordpress.com/2016/03/20160306image10.png" data-orig-size="192,256" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="20160306image10" data-image-description="" data-image-caption="" data-medium-file="https://colinpriestdotcom.files.wordpress.com/2016/03/20160306image10.png?w=192" data-large-file="https://colinpriestdotcom.files.wordpress.com/2016/03/20160306image10.png?w=192" /></a>
</p>
<p>Standardising the input data helps machine learning algorithms perform better because they don&#8217;t have to waste resources figuring out how to adjust for varying inputs where that variation is not a predictive feature.</p>
<p>In my next blog I will describe how I used the DICOM header information to further improve the model inputs, and to create extra features for my final model.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://colinpriest.com/2016/03/06/second-annual-data-science-bowl-part-1/feed/</wfw:commentRss>
			<slash:comments>3</slash:comments>
		
		
		
		<media:thumbnail url="https://colinpriestdotcom.files.wordpress.com/2016/03/sax_8.gif" />
		<media:content url="https://colinpriestdotcom.files.wordpress.com/2016/03/sax_8.gif" medium="image">
			<media:title type="html">sax_8</media:title>
		</media:content>

		<media:content url="https://2.gravatar.com/avatar/883de1a12d42422f2643d6ee75c2b746?s=96&#38;d=identicon&#38;r=G" medium="image">
			<media:title type="html">colinpriest1966</media:title>
		</media:content>

		<media:content url="https://colinpriestdotcom.files.wordpress.com/2016/03/sax_8.gif?w=135" medium="image" />

		<media:content url="https://colinpriestdotcom.files.wordpress.com/2016/03/sax_81.gif?w=113" medium="image" />

		<media:content url="https://colinpriestdotcom.files.wordpress.com/2016/03/20160306image01.png?w=135" medium="image" />

		<media:content url="https://colinpriestdotcom.files.wordpress.com/2016/03/20160306image02.png?w=135" medium="image" />

		<media:content url="https://colinpriestdotcom.files.wordpress.com/2016/03/20160306image03.png?w=113" medium="image" />

		<media:content url="https://colinpriestdotcom.files.wordpress.com/2016/03/20160306image04.png?w=113" medium="image" />

		<media:content url="https://colinpriestdotcom.files.wordpress.com/2016/03/20060306image05.png?w=150" medium="image" />

		<media:content url="https://colinpriestdotcom.files.wordpress.com/2016/03/20060306image06.png?w=150" medium="image" />

		<media:content url="https://colinpriestdotcom.files.wordpress.com/2016/03/20160306image07.png?w=135" medium="image" />

		<media:content url="https://colinpriestdotcom.files.wordpress.com/2016/03/20160306image08.png?w=135" medium="image" />

		<media:content url="https://colinpriestdotcom.files.wordpress.com/2016/03/20160306image09.png?w=113" medium="image" />

		<media:content url="https://colinpriestdotcom.files.wordpress.com/2016/03/20160306image10.png?w=113" medium="image" />
	</item>
		<item>
		<title>An Even Dozen &#8211; Denoising Dirty Documents: Part 12</title>
		<link>https://colinpriest.com/2015/11/15/an-even-dozen-denoising-dirty-documents-part-12/</link>
					<comments>https://colinpriest.com/2015/11/15/an-even-dozen-denoising-dirty-documents-part-12/#comments</comments>
		
		<dc:creator><![CDATA[Colin Priest]]></dc:creator>
		<pubDate>Sun, 15 Nov 2015 03:52:38 +0000</pubDate>
				<category><![CDATA[Image Processing]]></category>
		<category><![CDATA[Kaggle]]></category>
		<category><![CDATA[Machine Learning]]></category>
		<category><![CDATA[R]]></category>
		<category><![CDATA[Stacking]]></category>
		<category><![CDATA[XGBoost]]></category>
		<guid isPermaLink="false">http://colinpriest.com/?p=593</guid>

					<description><![CDATA[Over the past 11 blogs in this series, I have discussed how to build machine learning models for Kaggle&#8217;s Denoising &#8230;<p><a href="https://colinpriest.com/2015/11/15/an-even-dozen-denoising-dirty-documents-part-12/">Continue reading <span class="meta-nav">&#8594;</span></a></p>]]></description>
										<content:encoded><![CDATA[<p>Over the past 11 blogs in this series, I have discussed how to build machine learning models for Kaggle&#8217;s <a href="https://www.kaggle.com/c/denoising-dirty-documents" target="_blank">Denoising Dirty Documents competition</a>.</p>
<p><a href="https://colinpriestdotcom.files.wordpress.com/2015/11/dozeneggs.jpg"><img loading="lazy" data-attachment-id="595" data-permalink="https://colinpriest.com/2015/11/15/an-even-dozen-denoising-dirty-documents-part-12/dozeneggs/" data-orig-file="https://colinpriestdotcom.files.wordpress.com/2015/11/dozeneggs.jpg" data-orig-size="1200,829" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="dozeneggs" data-image-description="" data-image-caption="" data-medium-file="https://colinpriestdotcom.files.wordpress.com/2015/11/dozeneggs.jpg?w=300" data-large-file="https://colinpriestdotcom.files.wordpress.com/2015/11/dozeneggs.jpg?w=529" class="alignnone size-medium wp-image-595" src="https://colinpriestdotcom.files.wordpress.com/2015/11/dozeneggs.jpg?w=300" alt="dozeneggs" width="300" height="207" srcset="https://colinpriestdotcom.files.wordpress.com/2015/11/dozeneggs.jpg?w=300 300w, https://colinpriestdotcom.files.wordpress.com/2015/11/dozeneggs.jpg?w=600 600w, https://colinpriestdotcom.files.wordpress.com/2015/11/dozeneggs.jpg?w=150 150w" sizes="(max-width: 300px) 100vw, 300px" /></a></p>
<p>The final blog in this series brings the count to an even dozen, and will achieve two aims:</p>
<ol>
<li>ensemble the models that we have built</li>
<li>take advantage of the second information leakage in the competition</li>
</ol>
<p>Ensembling, the combining of individual models into a single model, performs best when the individual models have errors that are not strongly correlated. For example, if each model has statistically independent errors, and each model performs with similar accuracy, then the average prediction across the 4 models will have half the RMSE score of the individual models. One way to increase the statistical independence of the models is to use different feature sets and / or types of models on each. I therefore chose the following combination of models:</p>
<ol>
<li>deep learning &#8211; thresholding based features</li>
<li>deep learning &#8211; edge based features</li>
<li>deep learning &#8211; median based features</li>
<li>images with backgrounds removed using information leakage</li>
<li>xgboost &#8211; wide selection of features</li>
<li>convolutional neural network &#8211; using raw images without background removal pre-processing</li>
<li>convolutional neural network &#8211; using images with backgrounds removed using information leakage</li>
<li>deep convolutional neural network &#8211; using raw images without background removal pre-processing</li>
<li>deep convolutional neural network &#8211; using images with backgrounds removed using information leakage</li>
</ol>
<p><a href="https://colinpriestdotcom.files.wordpress.com/2015/11/20151115-ensemble-structure.png"><img loading="lazy" data-attachment-id="599" data-permalink="https://colinpriest.com/2015/11/15/an-even-dozen-denoising-dirty-documents-part-12/20151115-ensemble-structure/" data-orig-file="https://colinpriestdotcom.files.wordpress.com/2015/11/20151115-ensemble-structure.png" data-orig-size="805,445" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="20151115 ensemble structure" data-image-description="" data-image-caption="" data-medium-file="https://colinpriestdotcom.files.wordpress.com/2015/11/20151115-ensemble-structure.png?w=300" data-large-file="https://colinpriestdotcom.files.wordpress.com/2015/11/20151115-ensemble-structure.png?w=529" class="alignnone size-medium wp-image-599" src="https://colinpriestdotcom.files.wordpress.com/2015/11/20151115-ensemble-structure.png?w=300" alt="20151115 ensemble structure" width="300" height="166" srcset="https://colinpriestdotcom.files.wordpress.com/2015/11/20151115-ensemble-structure.png?w=300 300w, https://colinpriestdotcom.files.wordpress.com/2015/11/20151115-ensemble-structure.png?w=600 600w, https://colinpriestdotcom.files.wordpress.com/2015/11/20151115-ensemble-structure.png?w=150 150w" sizes="(max-width: 300px) 100vw, 300px" /></a></p>
<p>It turned out that some of these models had errors that weren&#8217;t strongly independent to other models. But I was rushing to improve my leaderboard score in the final 48 hours of the competition, so I didn&#8217;t have time to experiment.</p>
<p>I didn&#8217;t experiment much with different ensemble models. However I did test xgboost versus a simple average or a least square linear regression, and it outperformed both. Maybe an <a href="http://web.stanford.edu/~hastie/TALKS/enet_talk.pdf" target="_blank">elastic net</a> could have done a good job.</p>
<p>Here is the R code for my ensemble:</p>
<pre class="brush: r; title: ; notranslate">

.libPaths(c(.libPaths(), &quot;./rlibs&quot;))
library(png)
library(data.table)
library(xgboost)

# a function to turn a matrix image into a vector
img2vec = function(img)
{
return (matrix(img, nrow(img) * ncol(img), 1))
}

cleanFolder = &quot;./data/train_cleaned&quot;
inFolder1 = &quot;./threshold based model/training data&quot;
inFolder2 = &quot;./edge based model/training data&quot;
inFolder3 = &quot;./median based model/training data&quot;
inFolder4 = &quot;./foreground/train foreground&quot;
inFolder5 = &quot;./submission 11/train_postprocessed&quot;
inFolder6 = &quot;./convnet/train_predicted&quot;
inFolder7 = &quot;./cnn_leakage/train_predicted&quot;
inFolder8 = &quot;./CNN based model/training&quot;
inFolder9 = &quot;./deep CNN/train_predicted&quot;

outPath = &quot;./stacked/stacking.csv&quot;

filenames = list.files(cleanFolder)
for (f in filenames)
{
print(f)
imgX1 = readPNG(file.path(inFolder1, f))
imgX2 = readPNG(file.path(inFolder2, f))
imgX3 = readPNG(file.path(inFolder3, f))
imgX4 = readPNG(file.path(inFolder4, f))
imgX5 = readPNG(file.path(inFolder5, f))
imgX6 = readPNG(file.path(inFolder6, f))
imgX7 = readPNG(file.path(inFolder7, f))
imgX8 = readPNG(file.path(inFolder8, f))
imgX9 = readPNG(file.path(inFolder9, f))
imgY = readPNG(file.path(cleanFolder, f))

# turn the images into vectors
y = img2vec(imgY)
x1 = img2vec(imgX1)
x2 = img2vec(imgX2)
x3 = img2vec(imgX3)
x4 = img2vec(imgX4)
x5 = img2vec(imgX5)
x6 = img2vec(imgX6)
x7 = img2vec(imgX7)
x8 = img2vec(imgX8)
x9 = img2vec(imgX9)

dat = data.table(cbind(y, x1, x2, x3, x4, x5, x6, x7, x8, x9))
setnames(dat,c(&quot;y&quot;, &quot;threshold&quot;, &quot;edge&quot;, &quot;median&quot;, &quot;foreground&quot;, &quot;submission11&quot;, &quot;convnet&quot;, &quot;cnn_leakage&quot;, &quot;CNN&quot;, &quot;deepCNN&quot;))
write.table(dat, file=outPath, append=(f != filenames[1]), sep=&quot;,&quot;, row.names=FALSE, col.names=(f == filenames[1]), quote=FALSE)
}

# read in the full data table
dat = read.csv(outPath)

# fit an xgboost model to a subset of the data
set.seed(1)
#rows = sample(nrow(dat), 15000000)
dat[is.na(dat)] = 0
#dtrain &lt;- xgb.DMatrix(as.matrix(dat[rows,-1]), label = as.matrix(dat[rows,1]))
dtrain &lt;- xgb.DMatrix(as.matrix(dat[,-1]), label = as.matrix(dat[,1]))
#
nThreads = 30
# do cross validation first
#xgb.tab = xgb.cv(data = dtrain, nthread = nThreads, eval_metric = &quot;rmse&quot;, nrounds = 1000, early.stop.round = 15, nfold = 4, print.every.n = 10)
# what is the best number of rounds?
#min.error.idx = which.min(xgb.tab[, test.rmse.mean])
# now fit an xgboost model
min.error.idx = 300 # was 268
xgb.mod = xgboost(data = dtrain, nthread = nThreads, eval_metric = &quot;rmse&quot;, nrounds = min.error.idx, print.every.n = 10)

dat_predicted = predict(xgb.mod, newdata=as.matrix(dat[,-1]))
sqrt( mean( (dat$y - dat_predicted) ^ 2 )) # 0.00759027

save (xgb.mod, file = &quot;./model/xgb.rData&quot;)

#####################################################################################################################################

imgFolder = &quot;./data/test&quot;
inFolder1 = &quot;./threshold based model/test data&quot;
inFolder2 = &quot;./edge based model/test data&quot;
inFolder3 = &quot;./median based model/test data&quot;
inFolder4 = &quot;./foreground/test foreground&quot;
inFolder5 = &quot;./submission 11/test_postprocessed&quot;
inFolder6 = &quot;./convnet/test_predicted&quot;
inFolder7 = &quot;./cnn_leakage/test_predicted&quot;
inFolder8 = &quot;./CNN based model/test&quot;
inFolder9 = &quot;./deep CNN/test_predicted&quot;

outFolder = &quot;./stacked/test data&quot;
outFolder2 = &quot;./stacked/test images&quot;

filenames = list.files(imgFolder)
for (f in filenames)
{
print(f)
imgX1 = readPNG(file.path(inFolder1, f))
imgX2 = readPNG(file.path(inFolder2, f))
imgX3 = readPNG(file.path(inFolder3, f))
imgX4 = readPNG(file.path(inFolder4, f))
imgX5 = readPNG(file.path(inFolder5, f))
imgX6 = readPNG(file.path(inFolder6, f))
imgX7 = readPNG(file.path(inFolder7, f))
imgX8 = readPNG(file.path(inFolder8, f))
imgX9 = readPNG(file.path(inFolder9, f))

# turn the images into vectors
x1 = img2vec(imgX1)
x2 = img2vec(imgX2)
x3 = img2vec(imgX3)
x4 = img2vec(imgX4)
x5 = img2vec(imgX5)
x6 = img2vec(imgX6)
x7 = img2vec(imgX7)
x8 = img2vec(imgX8)
x9 = img2vec(imgX9)

dat = data.table(cbind(x1, x2, x3, x4, x5, x6, x7, x8, x9))
setnames(dat,c(&quot;threshold&quot;, &quot;edge&quot;, &quot;median&quot;, &quot;foreground&quot;, &quot;submission11&quot;, &quot;convnet&quot;, &quot;cnn_leakage&quot;, &quot;CNN&quot;, &quot;deepCNN&quot;))
yHat = predict(xgb.mod, newdata=as.matrix(dat))
yHat[yHat &lt; 0] = 0
yHat[yHat &gt; 1] = 1
imgY = matrix(yHat, nrow(imgX1), ncol(imgX1))
writePNG(imgY, file.path(outFolder2, f))
save(imgY, file = file.path(outFolder, gsub(&quot;.png&quot;, &quot;.rData&quot;, f)))
}

</pre>
<p>Ensembling materially improved my leaderboard score versus any of the individual models. I feel that was due to the use of different features across my 3 deep learning models. So now I had a set of images that looked quite good:</p>
<p><a href="https://colinpriestdotcom.files.wordpress.com/2015/11/20151115-output-1.png"><img loading="lazy" data-attachment-id="606" data-permalink="https://colinpriest.com/2015/11/15/an-even-dozen-denoising-dirty-documents-part-12/20151115-output-1/" data-orig-file="https://colinpriestdotcom.files.wordpress.com/2015/11/20151115-output-1.png" data-orig-size="1302,684" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="20151115 output 1" data-image-description="" data-image-caption="" data-medium-file="https://colinpriestdotcom.files.wordpress.com/2015/11/20151115-output-1.png?w=300" data-large-file="https://colinpriestdotcom.files.wordpress.com/2015/11/20151115-output-1.png?w=529" class="alignnone size-medium wp-image-606" src="https://colinpriestdotcom.files.wordpress.com/2015/11/20151115-output-1.png?w=300" alt="20151115 output 1" width="300" height="158" srcset="https://colinpriestdotcom.files.wordpress.com/2015/11/20151115-output-1.png?w=300 300w, https://colinpriestdotcom.files.wordpress.com/2015/11/20151115-output-1.png?w=600 600w, https://colinpriestdotcom.files.wordpress.com/2015/11/20151115-output-1.png?w=150 150w" sizes="(max-width: 300px) 100vw, 300px" /></a></p>
<p><a href="https://colinpriestdotcom.files.wordpress.com/2015/11/20151115-output-2.png"><img loading="lazy" data-attachment-id="607" data-permalink="https://colinpriest.com/2015/11/15/an-even-dozen-denoising-dirty-documents-part-12/20151115-output-2/" data-orig-file="https://colinpriestdotcom.files.wordpress.com/2015/11/20151115-output-2.png" data-orig-size="540,420" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="20151115 output 2" data-image-description="" data-image-caption="" data-medium-file="https://colinpriestdotcom.files.wordpress.com/2015/11/20151115-output-2.png?w=300" data-large-file="https://colinpriestdotcom.files.wordpress.com/2015/11/20151115-output-2.png?w=529" class="alignnone size-medium wp-image-607" src="https://colinpriestdotcom.files.wordpress.com/2015/11/20151115-output-2.png?w=300" alt="20151115 output 2" width="300" height="233" srcset="https://colinpriestdotcom.files.wordpress.com/2015/11/20151115-output-2.png?w=300 300w, https://colinpriestdotcom.files.wordpress.com/2015/11/20151115-output-2.png?w=150 150w, https://colinpriestdotcom.files.wordpress.com/2015/11/20151115-output-2.png 540w" sizes="(max-width: 300px) 100vw, 300px" /></a></p>
<p>To my eyes, my predicted images were indistinguishable from the clean images in the training data. In a real world situation I would have stopped model development here, because the image quality exceeds the minimum requirements for OCR. However, since this was a competition, I wanted the best score I could get.</p>
<p>So I took advantage of the second data leakage in the competition &#8211; the fact that the cleaned images were repeated across the dataset. This meant that I could compare a cleaned images to other cleaned images that appeared to have the same text and the same font, and clean up any pixels that were different across the set of images. I experimented with using the mean of the pixel brightness across the images, but using the median performed better.</p>
<pre class="brush: r; title: ; notranslate">

library(png)
library(data.table)

inFolder = &quot;./stacked/test data&quot;
outFolder = &quot;./information leakage/data&quot;
outFolder2 = &quot;./information leakage/images&quot;

# a function to turn a matrix image into a vector
img2vec = function(img)
{
return (matrix(img, nrow(img) * ncol(img), 1))
}

filenames = list.files(inFolder, pattern = &quot;\\.rData$&quot;)
for (f in filenames)
{
print(f)

load(file.path(inFolder, f))
imgX = imgY

# look for the closest matched images
scores = matrix(1, length(filenames))
for (i in 1:length(filenames))
{
load(file.path(inFolder, filenames[i]))
rmse = 1
if (nrow(imgY) &gt;= nrow(imgX) &amp;&amp; ncol(imgY) &gt;= ncol(imgX))
{
imgY = imgY[1:nrow(imgX), 1:ncol(imgX)]
rmse = sqrt(mean( (imgX - imgY)^2 ))
}
scores[i] = rmse
}

dat = matrix(1, ncol(imgX) * nrow(imgX), 4)
for (i in 1:4)
{
f2 = filenames[order(scores)][i]
load(file.path(inFolder, f2))
dat[,i] = img2vec(imgY)
}

dat2 = apply(dat, 1, median)
#dat2 = apply(dat, 1, mean)

imgOut = matrix(dat2, nrow(imgX), ncol(imgX))
writePNG(imgOut, file.path(outFolder2, gsub(&quot;.rData&quot;, &quot;.png&quot;, f)))
save(imgOut, file = file.path(outFolder, f))
}

</pre>
<p>This information leakage halved the RMSE, and I suspect that it was what allowed the top two competitors to obtain RMSE scores less than 1%.</p>
<p>So that&#8217;s it for this series of blogs. I learned a lot from my first Kaggle competition. Competing against others, and sharing ideas is a fun way to learn.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://colinpriest.com/2015/11/15/an-even-dozen-denoising-dirty-documents-part-12/feed/</wfw:commentRss>
			<slash:comments>3</slash:comments>
		
		
		
		<media:thumbnail url="https://colinpriestdotcom.files.wordpress.com/2015/11/dozeneggs.jpg" />
		<media:content url="https://colinpriestdotcom.files.wordpress.com/2015/11/dozeneggs.jpg" medium="image">
			<media:title type="html">dozeneggs</media:title>
		</media:content>

		<media:content url="https://2.gravatar.com/avatar/883de1a12d42422f2643d6ee75c2b746?s=96&#38;d=identicon&#38;r=G" medium="image">
			<media:title type="html">colinpriest1966</media:title>
		</media:content>

		<media:content url="https://colinpriestdotcom.files.wordpress.com/2015/11/dozeneggs.jpg?w=300" medium="image">
			<media:title type="html">dozeneggs</media:title>
		</media:content>

		<media:content url="https://colinpriestdotcom.files.wordpress.com/2015/11/20151115-ensemble-structure.png?w=300" medium="image">
			<media:title type="html">20151115 ensemble structure</media:title>
		</media:content>

		<media:content url="https://colinpriestdotcom.files.wordpress.com/2015/11/20151115-output-1.png?w=300" medium="image">
			<media:title type="html">20151115 output 1</media:title>
		</media:content>

		<media:content url="https://colinpriestdotcom.files.wordpress.com/2015/11/20151115-output-2.png?w=300" medium="image">
			<media:title type="html">20151115 output 2</media:title>
		</media:content>
	</item>
		<item>
		<title>Denoising Dirty Documents: Part 11</title>
		<link>https://colinpriest.com/2015/11/08/denoising-dirty-documents-part-11/</link>
					<comments>https://colinpriest.com/2015/11/08/denoising-dirty-documents-part-11/#comments</comments>
		
		<dc:creator><![CDATA[Colin Priest]]></dc:creator>
		<pubDate>Sun, 08 Nov 2015 09:45:18 +0000</pubDate>
				<category><![CDATA[Adaptive Thresholding]]></category>
		<category><![CDATA[Background Removal]]></category>
		<category><![CDATA[Deep Learning]]></category>
		<category><![CDATA[Edge Detection]]></category>
		<category><![CDATA[h2o]]></category>
		<category><![CDATA[Image Processing]]></category>
		<category><![CDATA[Kaggle]]></category>
		<category><![CDATA[Machine Learning]]></category>
		<category><![CDATA[Median Filter]]></category>
		<category><![CDATA[Morphology]]></category>
		<category><![CDATA[R]]></category>
		<guid isPermaLink="false">http://colinpriest.com/?p=578</guid>

					<description><![CDATA[In my last blog I showed how to use convolutional neural networks to build a model that removed stains from &#8230;<p><a href="https://colinpriest.com/2015/11/08/denoising-dirty-documents-part-11/">Continue reading <span class="meta-nav">&#8594;</span></a></p>]]></description>
										<content:encoded><![CDATA[<p>In my <a href="https://colinpriest.com/2015/11/01/denoising-dirty-documents-part-10/" target="_blank">last blog</a> I showed how to use convolutional neural networks to build a model that removed stains from an image. While convolutional neural networks seem to be well suited for image processing, in this competition I found that deep neural networks performed better. In this blog I show how to build these models.</p>
<p><a href="https://colinpriestdotcom.files.wordpress.com/2015/11/warnh022-deep-water.png"><img loading="lazy" data-attachment-id="579" data-permalink="https://colinpriest.com/2015/11/08/denoising-dirty-documents-part-11/warnh022-deep-water/" data-orig-file="https://colinpriestdotcom.files.wordpress.com/2015/11/warnh022-deep-water.png" data-orig-size="3046,2095" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="warnH022 &#8211; deep water" data-image-description="" data-image-caption="" data-medium-file="https://colinpriestdotcom.files.wordpress.com/2015/11/warnh022-deep-water.png?w=300" data-large-file="https://colinpriestdotcom.files.wordpress.com/2015/11/warnh022-deep-water.png?w=529" class="alignnone size-medium wp-image-579" src="https://colinpriestdotcom.files.wordpress.com/2015/11/warnh022-deep-water.png?w=300" alt="warnH022 - deep water" width="300" height="206" srcset="https://colinpriestdotcom.files.wordpress.com/2015/11/warnh022-deep-water.png?w=300 300w, https://colinpriestdotcom.files.wordpress.com/2015/11/warnh022-deep-water.png?w=600 600w, https://colinpriestdotcom.files.wordpress.com/2015/11/warnh022-deep-water.png?w=150 150w" sizes="(max-width: 300px) 100vw, 300px" /></a></p>
<p>Since I wanted to use R, have limited RAM and I don&#8217;t have a powerful GPU, I chose to use <a href="http://h2o.ai/" target="_blank">h2o</a> to build the models. That way I could do the feature engineering in R, pass the data to h2o, let h2o build a model, then get the predicted values back in R. The memory management would be done in h2o, which uses deep learning algorithms that adjust the RAM constraints. So I guess this combination of deep learning and h2o could be called &#8220;deep water&#8221; <img src="https://s0.wp.com/wp-content/mu-plugins/wpcom-smileys/twemoji/2/72x72/1f609.png" alt="😉" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>
<p>For my final competition submission I used an ensemble of models, including 3 deep learning models built with R and h2o. Each of the 3 deep learning models used different feature engineering:</p>
<ul>
<li>median based feature engineering</li>
<li>edge based feature engineering</li>
<li>threshold based feature engineering</li>
</ul>
<p>This blog shows the details of the median based model. I leave it to the reader to implement the edge based and threshold based models using the image processing scripts from my earlier blogs in this series.</p>
<p>If you don&#8217;t already have h2o installed on your computer, then you can install it directly from R. At the time of writing this blog, you could install h2o using the following script:</p>
<pre class="brush: r; title: ; notranslate">

# The following two commands remove any previously installed H2O packages for R.
if (&quot;package:h2o&quot; %in% search()) { detach(&quot;package:h2o&quot;, unload=TRUE) }
if (&quot;h2o&quot; %in% rownames(installed.packages())) { remove.packages(&quot;h2o&quot;) }

# Next, we download packages that H2O depends on.
if (! (&quot;methods&quot; %in% rownames(installed.packages()))) { install.packages(&quot;methods&quot;) }
if (! (&quot;statmod&quot; %in% rownames(installed.packages()))) { install.packages(&quot;statmod&quot;) }
if (! (&quot;stats&quot; %in% rownames(installed.packages()))) { install.packages(&quot;stats&quot;) }
if (! (&quot;graphics&quot; %in% rownames(installed.packages()))) { install.packages(&quot;graphics&quot;) }
if (! (&quot;RCurl&quot; %in% rownames(installed.packages()))) { install.packages(&quot;RCurl&quot;) }
if (! (&quot;jsonlite&quot; %in% rownames(installed.packages()))) { install.packages(&quot;jsonlite&quot;) }
if (! (&quot;tools&quot; %in% rownames(installed.packages()))) { install.packages(&quot;tools&quot;) }
if (! (&quot;utils&quot; %in% rownames(installed.packages()))) { install.packages(&quot;utils&quot;) }

# Now we download, install and initialize the H2O package for R.
install.packages(&quot;h2o&quot;, type=&quot;source&quot;, repos=(c(&quot;http://h2o-release.s3.amazonaws.com/h2o/rel-tibshirani/3/R&quot;)))
</pre>
<p>That script will need to be changed as new versions of h2o are released. So use the latest instructions shown <a href="http://h2o-release.s3.amazonaws.com/h2o/rel-tibshirani/3/index.html" target="_blank">here</a>.</p>
<p>Once h2o is installed, you can interface with h2o from R using the CRAN package.</p>
<pre class="brush: r; title: ; notranslate">

install.packages(&quot;h2o&quot;)
library(h2o)

</pre>
<p>Median based image processing is used for feature engineering in this example, but you could use any combination of image processing techniques for your feature engineering. I got better performance using separate deep learning models for different types of image processing, but that may be because I had limited computing resources. If you have more computing resources than me, then maybe you will be successful with a single large model that uses all of the image processing techniques to create features.</p>
<pre class="brush: r; title: ; notranslate">

# a function to turn a matrix image into a vector
img2vec = function(img)
{
 return (matrix(img, nrow(img) * ncol(img), 1))
}
 
median_Filter = function(img, filterWidth)
{
 pad = floor(filterWidth / 2)
 padded = matrix(NA, nrow(img) + 2 * pad, ncol(img) + 2 * pad)
 padded[pad + seq_len(nrow(img)), pad + seq_len(ncol(img))] = img
 
 tab = matrix(0, nrow(img) * ncol(img), filterWidth * filterWidth)
 k = 1
 for (i in seq_len(filterWidth))
 {
 for (j in seq_len(filterWidth))
 {
 tab[,k] = img2vec(padded[i - 1 + seq_len(nrow(img)), j - 1 + seq_len(ncol(img))])
 k = k + 1
 }
 }
 
 filtered = unlist(apply(tab, 1, function(x) median(x[!is.na(x)])))
 return (matrix(filtered, nrow(img), ncol(img)))
}
 
# a function that uses median filter to get the background then finds the dark foreground
background_Removal = function(img)
{
 w = 5
 p = 1.39
 th = 240
 
 # the background is found via a median filter
 background = median_Filter(img, w)
 
 # the foreground is darker than the background
 foreground = img / background
 foreground[foreground &gt; 1] = 1
 
 foreground2 = foreground ^ p
 foreground2[foreground2 &gt;= (th / 255)] = 1
 
 return (matrix(foreground2, nrow(img), ncol(img)))
} 

img2tab = function(imgX, f)
{
 median5 = img2vec(median_Filter(imgX, 5))
 median17 = img2vec(median_Filter(imgX, 17))
 median25 = img2vec(median_Filter(imgX, 25))
 backgroundRemoval = img2vec(background_Removal(imgX))
 foreground = readPNG(file.path(foregroundFolder, f))
 
 # pad out imgX
 padded = matrix(0, nrow(imgX) + padding * 2, ncol(imgX) + padding * 2)
 offsets = expand.grid(seq_len(2*padding+1), seq_len(2*padding+1))
 
 # raw pixels window
 padded[padding + seq_len(nrow(imgX)), padding + seq_len(ncol(imgX))] = imgX
 x = sapply(seq_len((2*padding+1)^2), function(x) img2vec(padded[offsets[x, 2] - 1 + seq_len(nrow(imgX)), offsets[x, 1] - 1 + seq_len(ncol(imgX))]))
 
 # x2 window
 padded[padding + seq_len(nrow(imgX)), padding + seq_len(ncol(imgX))] = median5
 x2 = sapply(seq_len((2*padding+1)^2), function(x) img2vec(padded[offsets[x, 2] - 1 + seq_len(nrow(imgX)), offsets[x, 1] - 1 + seq_len(ncol(imgX))]))
 
 # x3 window
 padded[padding + seq_len(nrow(imgX)), padding + seq_len(ncol(imgX))] = median17
 x3 = sapply(seq_len((2*padding+1)^2), function(x) img2vec(padded[offsets[x, 2] - 1 + seq_len(nrow(imgX)), offsets[x, 1] - 1 + seq_len(ncol(imgX))]))
 
 # x4 window
 padded[padding + seq_len(nrow(imgX)), padding + seq_len(ncol(imgX))] = median25
 x4 = sapply(seq_len((2*padding+1)^2), function(x) img2vec(padded[offsets[x, 2] - 1 + seq_len(nrow(imgX)), offsets[x, 1] - 1 + seq_len(ncol(imgX))]))
 
 # x5 window
 padded[padding + seq_len(nrow(imgX)), padding + seq_len(ncol(imgX))] = backgroundRemoval
 x5 = sapply(seq_len((2*padding+1)^2), function(x) img2vec(padded[offsets[x, 2] - 1 + seq_len(nrow(imgX)), offsets[x, 1] - 1 + seq_len(ncol(imgX))]))
 
 # x6 window
 padded[padding + seq_len(nrow(imgX)), padding + seq_len(ncol(imgX))] = foreground
 x6 = sapply(seq_len((2*padding+1)^2), function(x) img2vec(padded[offsets[x, 2] - 1 + seq_len(nrow(imgX)), offsets[x, 1] - 1 + seq_len(ncol(imgX))]))

 dat = data.table(cbind(x, x2, x3, x4, x5, x6))
 setnames(dat,c(
 paste(&quot;x&quot;, seq_len((2*padding+1)^2), sep=&quot;&quot;), 
 paste(&quot;median5&quot;, seq_len((2*padding+1)^2), sep=&quot;&quot;),
 paste(&quot;median17&quot;, seq_len((2*padding+1)^2), sep=&quot;&quot;),
 paste(&quot;median25&quot;, seq_len((2*padding+1)^2), sep=&quot;&quot;),
 paste(&quot;backgroundRemoval&quot;, seq_len((2*padding+1)^2), sep=&quot;&quot;),
 paste(&quot;foreground&quot;, seq_len((2*padding+1)^2), sep=&quot;&quot;)
 ))
 
 return (dat)
}
</pre>
<p>If you&#8217;ve been following my blog, then you will see that there&#8217;s nothing new in the two image processing functions shown above.</p>
<p>To build the model you will need to start h2o, import the data and tell h2o to create a deep learning model.</p>
<pre class="brush: r; title: ; notranslate">
h2oServer = h2o.init(nthreads = 6, max_mem_size = &quot;10G&quot;)

trainData = h2o.importFile(h2oServer, path = outPath)
testData = h2o.importFile(h2oServer, path = outPath2)

model.dl.median &lt;- h2o.deeplearning(x = 2:ncol(trainData), y = 1, training_frame = trainData, validation_frame = testData,
 score_training_samples = 0, 
 overwrite_with_best_model = TRUE,
 activation = &quot;Rectifier&quot;, seed = 1,
 hidden = c(200, 200,200), epochs = 15,
 adaptive_rate = TRUE, initial_weight_distribution = &quot;UniformAdaptive&quot;, loss = &quot;MeanSquare&quot;,
 fast_mode = T, diagnostics = T, ignore_const_cols = T,
 force_load_balance = T)


</pre>
<p>You should change the h2o.init parameters according to the hardware on your computer. I&#8217;m running my model on a PC with 8 CPUs and 16GB of RAM, so I left a couple of CPUs free to do the user interface and core operating system functionality, plus some RAM for the operating system. Scale these parameters up or down if your PC specifications are more or less powerful than mine.</p>
<p>The model may take a few hours to fit. During that time R will not do anything. So if you want to see how the model is progressing, then point your browser to your localhost (port 54321 on my PC, but maybe a different port on yours) and use the h2o web interface to see what is happening.</p>
<p>You can get the predicted values using the following script:</p>
<pre class="brush: r; title: ; notranslate">

filenames = list.files(dirtyFolder)
for (f in filenames)
{
 print(f)
 imgX = readPNG(file.path(dirtyFolder, f))

dat = img2tab(imgX, f)

x.h2o = as.h2o(h2oServer, dat)
 predict.dl = as.data.frame(h2o.predict(model.dl.median, newdata = x.h2o))
 imgOut = matrix(as.numeric(predict.dl$predict), nrow(imgX), ncol(imgX))
 
 # correct the pixel brightnesses that are out of bounds
 imgOut[imgOut &gt; 1] = 1
 imgOut[imgOut &lt; 0] = 0

writePNG(imgOut, file.path(outFolder, f))
}

h2o.shutdown()

</pre>
<p>Running predictions is as simple as creating a data file, importing it to h2o, and then asking h2o to give you the predicted values from your already fitted model. I found that some of the raw predicted values were out of the [0, 1] range, and improved my leaderboard score by limiting the predicted values to lie within this range.</p>
<p>You do not need to shut down h2o after you finish running a model. In fact you may wish to leave it running so that you can do model diagnostics or run more predictions.</p>
<p>If you wish to save a copy of your model, for later reuse, then you can use the following syntax:</p>
<pre class="brush: r; title: ; notranslate">

modelPath = h2o.saveModel(model.dl.median, dir = &quot;./model&quot;, name = &quot;model_dnn_median&quot;, force = TRUE)

</pre>
<p>Just remember that h2o needs to be running when you save models or load previously saved models.</p>
<p>In my next, and final, blog in this series, I will show how to take advantage of the second information leakage in the competition.</p>
<p>For those who want the entire R script to try out for themselves, here it is:</p>
<pre class="brush: r; title: ; notranslate">

install.packages(&quot;h2o&quot;)
library(h2o)
library(png)
library(data.table)

# a function to turn a matrix image into a vector
img2vec = function(img)
{
return (matrix(img, nrow(img) * ncol(img), 1))
}

median_Filter = function(img, filterWidth)
{
pad = floor(filterWidth / 2)
padded = matrix(NA, nrow(img) + 2 * pad, ncol(img) + 2 * pad)
padded[pad + seq_len(nrow(img)), pad + seq_len(ncol(img))] = img

tab = matrix(0, nrow(img) * ncol(img), filterWidth * filterWidth)
k = 1
for (i in seq_len(filterWidth))
{
for (j in seq_len(filterWidth))
{
tab[,k] = img2vec(padded[i - 1 + seq_len(nrow(img)), j - 1 + seq_len(ncol(img))])
k = k + 1
}
}

filtered = unlist(apply(tab, 1, function(x) median(x[!is.na(x)])))
return (matrix(filtered, nrow(img), ncol(img)))
}

# a function that uses median filter to get the background then finds the dark foreground
background_Removal = function(img)
{
w = 5
p = 1.39
th = 240

# the background is found via a median filter
background = median_Filter(img, w)

# the foreground is darker than the background
foreground = img / background
foreground[foreground &gt; 1] = 1

foreground2 = foreground ^ p
foreground2[foreground2 &gt;= (th / 255)] = 1

return (matrix(foreground2, nrow(img), ncol(img)))
}

dirtyFolder = &quot;./data/train&quot;
cleanFolder = &quot;./data/train_cleaned&quot;
outFolder = &quot;./model&quot;
foregroundFolder = &quot;./foreground/train foreground&quot;

outPath = file.path(outFolder, &quot;trainingdata.csv&quot;)
outPath2 = file.path(outFolder, &quot;testdata.csv&quot;)
filenames = list.files(dirtyFolder)
padding = 2
set.seed(1)
library(h2o)
h2oServer = h2o.init(nthreads = 15, max_mem_size = &quot;110G&quot;)

trainData = h2o.importFile(h2oServer, path = outPath)
testData = h2o.importFile(h2oServer, path = outPath2)

model.dl.median &lt;- h2o.deeplearning(x = 2:ncol(trainData), y = 1, training_frame = trainData, validation_frame = testData,
score_training_samples = 0,
overwrite_with_best_model = TRUE,
activation = &quot;Rectifier&quot;, seed = 1,
hidden = c(200, 200,200), epochs = 15,
adaptive_rate = TRUE, initial_weight_distribution = &quot;UniformAdaptive&quot;, loss = &quot;MeanSquare&quot;,
fast_mode = T, diagnostics = T, ignore_const_cols = T,
force_load_balance = T)

summary(model.dl)

modelPath = h2o.saveModel(model.dl.median, dir = &quot;./model&quot;, name = &quot;model_dnn_median&quot;, force = TRUE)

outFolder = &quot;./model/training data&quot;

img2tab = function(imgX, f)
{
median5 = img2vec(median_Filter(imgX, 5))
median17 = img2vec(median_Filter(imgX, 17))
median25 = img2vec(median_Filter(imgX, 25))
backgroundRemoval = img2vec(background_Removal(imgX))
foreground = readPNG(file.path(foregroundFolder, f))

# pad out imgX
padded = matrix(0, nrow(imgX) + padding * 2, ncol(imgX) + padding * 2)
offsets = expand.grid(seq_len(2*padding+1), seq_len(2*padding+1))

# raw pixels window
padded[padding + seq_len(nrow(imgX)), padding + seq_len(ncol(imgX))] = imgX
x = sapply(seq_len((2*padding+1)^2), function(x) img2vec(padded[offsets[x, 2] - 1 + seq_len(nrow(imgX)), offsets[x, 1] - 1 + seq_len(ncol(imgX))]))

# x2 window
padded[padding + seq_len(nrow(imgX)), padding + seq_len(ncol(imgX))] = median5
x2 = sapply(seq_len((2*padding+1)^2), function(x) img2vec(padded[offsets[x, 2] - 1 + seq_len(nrow(imgX)), offsets[x, 1] - 1 + seq_len(ncol(imgX))]))

# x3 window
padded[padding + seq_len(nrow(imgX)), padding + seq_len(ncol(imgX))] = median17
x3 = sapply(seq_len((2*padding+1)^2), function(x) img2vec(padded[offsets[x, 2] - 1 + seq_len(nrow(imgX)), offsets[x, 1] - 1 + seq_len(ncol(imgX))]))

# x4 window
padded[padding + seq_len(nrow(imgX)), padding + seq_len(ncol(imgX))] = median25
x4 = sapply(seq_len((2*padding+1)^2), function(x) img2vec(padded[offsets[x, 2] - 1 + seq_len(nrow(imgX)), offsets[x, 1] - 1 + seq_len(ncol(imgX))]))

# x5 window
padded[padding + seq_len(nrow(imgX)), padding + seq_len(ncol(imgX))] = backgroundRemoval
x5 = sapply(seq_len((2*padding+1)^2), function(x) img2vec(padded[offsets[x, 2] - 1 + seq_len(nrow(imgX)), offsets[x, 1] - 1 + seq_len(ncol(imgX))]))

# x6 window
padded[padding + seq_len(nrow(imgX)), padding + seq_len(ncol(imgX))] = foreground
x6 = sapply(seq_len((2*padding+1)^2), function(x) img2vec(padded[offsets[x, 2] - 1 + seq_len(nrow(imgX)), offsets[x, 1] - 1 + seq_len(ncol(imgX))]))

dat = data.table(cbind(x, x2, x3, x4, x5, x6))
setnames(dat,c(
paste(&quot;x&quot;, seq_len((2*padding+1)^2), sep=&quot;&quot;),
paste(&quot;median5&quot;, seq_len((2*padding+1)^2), sep=&quot;&quot;),
paste(&quot;median17&quot;, seq_len((2*padding+1)^2), sep=&quot;&quot;),
paste(&quot;median25&quot;, seq_len((2*padding+1)^2), sep=&quot;&quot;),
paste(&quot;backgroundRemoval&quot;, seq_len((2*padding+1)^2), sep=&quot;&quot;),
paste(&quot;foreground&quot;, seq_len((2*padding+1)^2), sep=&quot;&quot;)
))

return (dat)
}

dirtyFolder = &quot;./data/test&quot;
outFolder = &quot;./model/test data&quot;
foregroundFolder = &quot;./foreground/test foreground&quot;
filenames = list.files(dirtyFolder)
for (f in filenames)
{
print(f)
imgX = readPNG(file.path(dirtyFolder, f))

dat = img2tab(imgX, f)

x.h2o = as.h2o(h2oServer, dat)
predict.dl = as.data.frame(h2o.predict(model.dl.median, newdata = x.h2o))
imgOut = matrix(as.numeric(predict.dl$predict), nrow(imgX), ncol(imgX))

# correct the pixel brightnesses that are out of bounds
imgOut[imgOut &gt; 1] = 1
imgOut[imgOut &lt; 0] = 0

writePNG(imgOut, file.path(outFolder, f))
}

h2o.shutdown()

</pre>
]]></content:encoded>
					
					<wfw:commentRss>https://colinpriest.com/2015/11/08/denoising-dirty-documents-part-11/feed/</wfw:commentRss>
			<slash:comments>1</slash:comments>
		
		
		
		<media:thumbnail url="https://colinpriestdotcom.files.wordpress.com/2015/11/warnh022-deep-water.png" />
		<media:content url="https://colinpriestdotcom.files.wordpress.com/2015/11/warnh022-deep-water.png" medium="image">
			<media:title type="html">warnH022 - deep water</media:title>
		</media:content>

		<media:content url="https://2.gravatar.com/avatar/883de1a12d42422f2643d6ee75c2b746?s=96&#38;d=identicon&#38;r=G" medium="image">
			<media:title type="html">colinpriest1966</media:title>
		</media:content>

		<media:content url="https://colinpriestdotcom.files.wordpress.com/2015/11/warnh022-deep-water.png?w=300" medium="image">
			<media:title type="html">warnH022 - deep water</media:title>
		</media:content>
	</item>
		<item>
		<title>Denoising Dirty Documents &#8211; Part 10</title>
		<link>https://colinpriest.com/2015/11/01/denoising-dirty-documents-part-10/</link>
					<comments>https://colinpriest.com/2015/11/01/denoising-dirty-documents-part-10/#comments</comments>
		
		<dc:creator><![CDATA[Colin Priest]]></dc:creator>
		<pubDate>Sun, 01 Nov 2015 08:57:30 +0000</pubDate>
				<category><![CDATA[Convolutional Neural Networks]]></category>
		<category><![CDATA[Deep Learning]]></category>
		<category><![CDATA[Image Processing]]></category>
		<category><![CDATA[Kaggle]]></category>
		<category><![CDATA[Machine Learning]]></category>
		<category><![CDATA[Python]]></category>
		<guid isPermaLink="false">http://colinpriest.com/?p=562</guid>

					<description><![CDATA[In my last blog, I explained how to take advantage of an information leakage regarding the repeated backgrounds in Kaggle&#8217;s &#8230;<p><a href="https://colinpriest.com/2015/11/01/denoising-dirty-documents-part-10/">Continue reading <span class="meta-nav">&#8594;</span></a></p>]]></description>
										<content:encoded><![CDATA[<p>In my <a href="https://colinpriest.com/2015/10/15/denoising-dirty-documents-part-9/" target="_blank">last blog</a>, I explained how to take advantage of an information leakage regarding the repeated backgrounds in Kaggle&#8217;s Denoising Dirty Documents competition. The result of that process was that we had done a fairly good job of removing the background. But the score from doing this was not good enough to get a good placing. We need to do some processing on the image to improve the score.</p>
<p>Today we will use an approach that does not require me to do any feature engineering &#8211; <a href="https://en.wikipedia.org/wiki/Convolutional_neural_network" target="_blank">convolutional neural networks</a>, which are neural networks where the first few layers repeatedly apply the same weights across overlapping regions of the input data. One intuitive way of thinking about this is that it is like applying an edge detection filter (much like I described <a href="https://colinpriest.com/2015/08/21/denoising-dirty-documents-part-4/">here</a>) where the algorithm finds the appropriate weights for several different edge filters.</p>
<p><img src="https://i0.wp.com/deeplearning.net/tutorial/_images/mylenet.png" alt="_images/mylenet.png" /></p>
<p>I&#8217;m told that convolutional neural networks are inspired by how vision works in the natural world. So if I test whether convolutional neural networks work well, am I giving them a robot eye test?</p>
<p><a href="https://colinpriestdotcom.files.wordpress.com/2015/11/robot-eye-test.jpg"><img loading="lazy" data-attachment-id="576" data-permalink="https://colinpriest.com/2015/11/01/denoising-dirty-documents-part-10/robot-eye-test/" data-orig-file="https://colinpriestdotcom.files.wordpress.com/2015/11/robot-eye-test.jpg" data-orig-size="591,591" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;1&quot;}" data-image-title="robot eye test" data-image-description="" data-image-caption="" data-medium-file="https://colinpriestdotcom.files.wordpress.com/2015/11/robot-eye-test.jpg?w=300" data-large-file="https://colinpriestdotcom.files.wordpress.com/2015/11/robot-eye-test.jpg?w=529" class="alignnone size-medium wp-image-576" src="https://colinpriestdotcom.files.wordpress.com/2015/11/robot-eye-test.jpg?w=300" alt="robot eye test" width="300" height="300" srcset="https://colinpriestdotcom.files.wordpress.com/2015/11/robot-eye-test.jpg?w=300 300w, https://colinpriestdotcom.files.wordpress.com/2015/11/robot-eye-test.jpg?w=150 150w, https://colinpriestdotcom.files.wordpress.com/2015/11/robot-eye-test.jpg 591w" sizes="(max-width: 300px) 100vw, 300px" /></a></p>
<p>While I am comfortable coding in R, there is little support for convolutional neural networks in R, and I had to code this in Python, using the <a href="http://deeplearning.net/software/theano/" target="_blank">Theano</a> library. The reason that I chose Theano is because neural network model fitting can be quite time consuming, and Theano supports GPU based processing, which can be orders of magnitude faster than CPU based calculations. To simply the code, I am using Daniel Nouri&#8217;s <a href="https://github.com/dnouri/nolearn" target="_blank">nolearn</a> library, which sits over the <a href="https://github.com/Lasagne/Lasagne" target="_blank">lasagne</a> library, which sits over the Theano library. This is the first time I have coded in Python and the first time I have used convolutional neural networks, so it was a good learning experience.</p>
<p>Since my PCs don&#8217;t have top of the line graphics cards with GPU processing support, I decided to run my code in a cloud on a virtual machine with GPU support. And since I didn&#8217;t want go through the effort of setting up a Linux machine and installing all of the libraries and compilers, I used <a href="https://www.dominodatalab.com/" target="_blank">Domino Data Labs</a> to host my analysis. You can find my project <a href="https://app.dominodatalab.com/colinpriest/cnn_leakage" target="_blank">here</a>.</p>
<p>Before I progress to coding the model, I have to set up the environment.</p>
<pre class="brush: python; collapse: false; title: ; wrap-lines: false; notranslate">
import os
import shutil
 
def setup_theano():
	destfile = &quot;/home/ubuntu/.theanorc&quot;
	open(destfile, 'a').close()
	shutil.copyfile(&quot;/mnt/.theanorc&quot;, destfile)
 
	print &quot;Finished setting up Theano&quot;
</pre>
<p>The Python script shown above creates a function that copies the Theano settings file into the appropriate folder in the virtual machine, so that Theano knows to use GPU processing rather than CPU processing. This function gets called from my main script.</p>
<p>In order to reduce the number of calculations, I used a network architecture that inputs an image and outputs an image. The <a href="https://www.kaggle.com/c/denoising-dirty-documents/forums/t/16298/background-removal-deep-convolutional-networks-1-232" target="_blank">suggestion</a> for this architecture comes from <a href="https://www.kaggle.com/ironbar" target="_blank">ironbar</a>, a great guy who placed third in the competition. This is unlike all of the examples I found online, which have just one or two outputs, usually because the online example is a classification problem identifying objects appearing within the image. But there are two issues with this architecture:</p>
<ol>
<li>it doesn&#8217;t allow for fully connected layers before the output, and</li>
<li>the target images are different sizes.</li>
</ol>
<p>I chose to ignore the first problem, although if I had time I would have tried out a more traditional architecture that included fully connected layers but which only models one target pixel at a time.</p>
<pre class="brush: python; collapse: false; title: ; wrap-lines: false; notranslate">
def image_matrix(img):
 &quot;&quot;&quot;
 The output value has shape (&lt;number of pixels&gt;, &lt;number of rows&gt;, &lt;number of columns&gt;)
 &quot;&quot;&quot;
 # 420 x 540 or 258 x 540?
 if img.shape[0] == 258:
 return (img[0:258, 0:540] / 255.0).astype('float32').reshape((1, 1, 258, 540))
 if img.shape[0] == 420:
 result = []
 result.append((img[0:258, 0:540] / 255.0).astype('float32').reshape((1, 1, 258, 540)))
 result.append((img[162:420, 0:540] / 255.0).astype('float32').reshape((1, 1, 258, 540)))
 result = np.vstack(result).astype('float32').reshape((2, 1, 258, 540))
 return result
</pre>
<p>For the second problem, I used the script shown above to split the larger images into two smaller images that were the same size as the other small images in the data, thereby standardising the output dimensions.</p>
<pre class="brush: python; collapse: false; title: ; wrap-lines: false; notranslate">
def load_train_set(file_list):
 xs = []
 ys = []
 for fname in file_list:
 x = image_matrix(load_image(os.path.join('./train_foreground/', fname)))
 y = image_matrix(load_image(os.path.join('./train_cleaned/', fname)))
 for i in range(0, x.shape[0]):
 xs.append(x[i, :, :, :].reshape((1, 1, 258, 540)))
 ys.append(y[i, :, :, :].reshape((1, 1, 258, 540)))
 return np.vstack(xs), np.vstack(ys)
</pre>
<p>Theano uses tensors (multi-dimensional matrices) to store the training data and outputs. The first dimension is the index of the training data item. The second dimension is the colourspace information e.g. RGB would be 3 dimensions. Since our images are greyscale, this dimension has a size of only 1. The remaining dimensions are the dimensions of the input data / output data. The script shown above reshapes the data to meet this criteria.<br />
The nolearn library simplifes the process of defining the architecture of a neural network. I used 3 hidden convolutional layers, each with 25 image filters. The script below shows how this was achieved.</p>
<pre class="brush: python; collapse: false; title: ; wrap-lines: false; notranslate">
net2 = NeuralNet(
layers = [
('input', layers.InputLayer),
('conv1', layers.Conv2DLayer),
('conv2', layers.Conv2DLayer),
('conv3', layers.Conv2DLayer),
('output', layers.FeaturePoolLayer),
],
#layer parameters:
input_shape = (None, 1, 258, 540),
conv1_num_filters = 25, conv1_filter_size = (7, 7), conv1_pad = 'same',
conv2_num_filters = 25, conv2_filter_size = (7, 7), conv2_pad = 'same',
conv3_num_filters = 25, conv3_filter_size = (7, 7), conv3_pad = 'same',
output_pool_size = 25,
output_pool_function = T.sum,
y_tensor_type=T.tensor4,

#optimization parameters:
update = nesterov_momentum,
update_learning_rate = 0.005,
update_momentum = 0.9,
regression = True,
max_epochs = 200,
verbose = 1,
batch_iterator_train=BatchIterator(batch_size=25),
on_epoch_finished=[EarlyStopping(patience=20),],
train_split=TrainSplit(eval_size=0.25)
)
</pre>
<p>Due to the unique nature of the problem versus the online examples, my first attempt at this script was not successful. Here are the key changes that I needed to make:</p>
<ul>
<li>set <strong>y_tensor_type=T.tensor4</strong> because the target is 2 dimensional</li>
<li>your graphics card almost certainly doesn&#8217;t have enough RAM to process all of the images at once, so you need to use a batch iterator and experiment to find a suitable batch size e.g. <strong>batch_iterator_train=BatchIterator(batch_size=25)</strong></li>
</ul>
<pre class="brush: python; collapse: false; title: ; wrap-lines: false; notranslate">

plot_loss(net2)
plt.savefig(&quot;./results/plotloss.png&quot;)

</pre>
<p>I also wanted to plot the loss across the iterations. So I added the two lines above, giving me the graph below.</p>
<p><img src="https://app.dominodatalab.com/colinpriest/cnn_leakage/raw/f9964bb023d2f7d33673ed5689e4b87e1a29a852/results/plotloss.png?inline=true" alt="" /></p>
<p>During the first several iterations, the neural network is balancing out the weights so that the pixels are the correct magnitude, and after that the serious work of image processing begins.</p>
<pre class="brush: python; collapse: false; title: ; wrap-lines: false; notranslate">

plot_conv_weights(net2.layers_[1], figsize=(4, 4))
plt.savefig(&quot;./results/convweights.png&quot;)

</pre>
<p>I wanted to see what some of the convolutional filters looked like. So I added the two lines shown above, giving me the set of images below.</p>
<p><img src="https://app.dominodatalab.com/colinpriest/cnn_leakage/raw/f9964bb023d2f7d33673ed5689e4b87e1a29a852/results/convweights.png?inline=true" alt="" /></p>
<p>These filters look like small parts of images of letters, which makes some sense because we are trying to identify whether a pixel sits on the stroke of a letter.</p>
<p><img src="https://app.dominodatalab.com/colinpriest/cnn_leakage/raw/f9964bb023d2f7d33673ed5689e4b87e1a29a852/test_predicted/1.png?inline=true" alt="" /></p>
<p>The output looks reasonable, although not as good as what I achieve using a combination of image processing techniques and deep learning.</p>
<p><img src="https://app.dominodatalab.com/colinpriest/cnn_leakage/raw/f9964bb023d2f7d33673ed5689e4b87e1a29a852/test_predicted/106.png?inline=true" alt="" /></p>
<p>In the output image above you can see some imperfections.</p>
<p>I think that if I had changed the network architecture to include fully connected layers then I would have achieved a better result. Maybe one day when I have enough time I will experiment with that architecture.</p>
<p>The full Python script is shown below:</p>
<pre class="brush: python; collapse: false; title: ; wrap-lines: false; notranslate">

import random
import numpy as np
import cv2
import os
import itertools
import math
import matplotlib.pyplot as plt

from setup_GPU import setup_theano
setup_theano()

from lasagne import layers
from lasagne.updates import nesterov_momentum
from lasagne.nonlinearities import softmax
from lasagne.nonlinearities import sigmoid
from nolearn.lasagne import BatchIterator
from nolearn.lasagne import NeuralNet
from nolearn.lasagne import TrainSplit
from nolearn.lasagne import PrintLayerInfo
from nolearn.lasagne.visualize import plot_loss
from nolearn.lasagne.visualize import plot_conv_weights
from nolearn.lasagne.visualize import plot_conv_activity
from nolearn.lasagne.visualize import plot_occlusion

import theano.tensor as T

def load_image(path):
return cv2.imread(path, cv2.IMREAD_GRAYSCALE)

def write_image(img, path):
return cv2.imwrite(path, img)

def image_matrix(img):
&quot;&quot;&quot;
The output value has shape (&lt;number of pixels&gt;, &lt;number of rows&gt;, &lt;number of columns&gt;)
&quot;&quot;&quot;
# 420 x 540 or 258 x 540?
if img.shape[0] == 258:
return (img[0:258, 0:540] / 255.0).astype('float32').reshape((1, 1, 258, 540))
if img.shape[0] == 420:
result = []
result.append((img[0:258, 0:540] / 255.0).astype('float32').reshape((1, 1, 258, 540)))
result.append((img[162:420, 0:540] / 255.0).astype('float32').reshape((1, 1, 258, 540)))
result = np.vstack(result).astype('float32').reshape((2, 1, 258, 540))
return result

def load_train_set(file_list):
xs = []
ys = []
for fname in file_list:
x = image_matrix(load_image(os.path.join('./train_foreground/', fname)))
y = image_matrix(load_image(os.path.join('./train_cleaned/', fname)))
for i in range(0, x.shape[0]):
xs.append(x[i, :, :, :].reshape((1, 1, 258, 540)))
ys.append(y[i, :, :, :].reshape((1, 1, 258, 540)))
return np.vstack(xs), np.vstack(ys)

def load_test_file(fname, folder):
xs = []
x = image_matrix(load_image(os.path.join(folder, fname)))
for i in range(0, x.shape[0]):
xs.append(x[i, :, :, :].reshape((1, 1, 258, 540)))
return np.vstack(xs)

def list_images(folder):
included_extentions = ['jpg','bmp','png','gif' ]
results = [fn for fn in os.listdir(folder) if any([fn.endswith(ext) for ext in included_extentions])]
return results

def do_test(inFolder, outFolder, nn):
test_images = list_images(inFolder)
nTest = len(test_images)
for x in range(0, nTest):
fname = test_images[x]
x1 = load_test_file(fname, inFolder)
x1 = x1 - 0.5
pred_y = nn.predict(x1)
tempImg = []
if pred_y.shape[0] == 1:
tempImg = pred_y[0, 0, :, :].reshape(258, 540)
if pred_y.shape[0] == 2:
tempImg1 = pred_y[0, 0, :, :].reshape(258, 540)
tempImg2 = pred_y[1, 0, :, :].reshape(258, 540)
tempImg = np.empty((420, 540))
tempImg[0:258, 0:540] = tempImg1
tempImg[162:420, 0:540] = tempImg2
tempImg[tempImg &lt; 0] = 0
tempImg[tempImg &gt; 1] = 1
tempImg = np.asarray(tempImg*255.0, dtype=np.uint8)
write_image(tempImg, (os.path.join(outFolder, fname)))

class EarlyStopping(object):
def __init__(self, patience=100):
self.patience = patience
self.best_valid = np.inf
self.best_valid_epoch = 0
self.best_weights = None

def __call__(self, nn, train_history):
current_valid = train_history[-1]['valid_loss']
current_epoch = train_history[-1]['epoch']
if current_valid &lt; self.best_valid:
self.best_valid = current_valid
self.best_valid_epoch = current_epoch
self.best_weights = nn.get_all_params_values()
elif self.best_valid_epoch + self.patience &lt; current_epoch:
print(&quot;Early stopping.&quot;)
print(&quot;Best valid loss was {:.6f} at epoch {}.&quot;.format(
self.best_valid, self.best_valid_epoch))
nn.load_params_from(self.best_weights)
raise StopIteration()

def main():
random.seed(1234)

training_images = list_images(&quot;./train_foreground/&quot;)
random.shuffle(training_images)
nTraining = len(training_images)
TRAIN_IMAGES = training_images

train_x, train_y = load_train_set(TRAIN_IMAGES)
test_x = train_x
test_y = train_y

# centre on zero - has already been divided by 255
train_x = train_x - 0.5

net2 = NeuralNet(
layers = [
('input', layers.InputLayer),
('conv1', layers.Conv2DLayer),
('conv2', layers.Conv2DLayer),
('conv3', layers.Conv2DLayer),
('output', layers.FeaturePoolLayer),
],
#layer parameters:
input_shape = (None, 1, 258, 540),
conv1_num_filters = 25, conv1_filter_size = (7, 7), conv1_pad = 'same',
conv2_num_filters = 25, conv2_filter_size = (7, 7), conv2_pad = 'same',
conv3_num_filters = 25, conv3_filter_size = (7, 7), conv3_pad = 'same',
output_pool_size = 25,
output_pool_function = T.sum,
y_tensor_type=T.tensor4,

#optimization parameters:
update = nesterov_momentum,
update_learning_rate = 0.005,
update_momentum = 0.9,
regression = True,
max_epochs = 200,
verbose = 1,
batch_iterator_train=BatchIterator(batch_size=25),
on_epoch_finished=[EarlyStopping(patience=20),],
train_split=TrainSplit(eval_size=0.25)
)

net2.fit(train_x, train_y)

plot_loss(net2)
plt.savefig(&quot;./results/plotloss.png&quot;)
plot_conv_weights(net2.layers_[1], figsize=(4, 4))
plt.savefig(&quot;./results/convweights.png&quot;)

#layer_info = PrintLayerInfo()
#layer_info(net2)

import cPickle as pickle
with open('results/net2.pickle', 'wb') as f:
pickle.dump(net2, f, -1)

y_pred2 = net2.predict(test_x)
print &quot;The accuracy of this network is: %0.2f&quot; % (abs(y_pred2 - test_y)).mean()

do_test(&quot;./train_foreground/&quot;, './train_predicted/', net2)
do_test(&quot;./test_foreground/&quot;, './test_predicted/', net2)

if __name__ == '__main__':
main()

</pre>
]]></content:encoded>
					
					<wfw:commentRss>https://colinpriest.com/2015/11/01/denoising-dirty-documents-part-10/feed/</wfw:commentRss>
			<slash:comments>27</slash:comments>
		
		
		
		<media:thumbnail url="https://colinpriestdotcom.files.wordpress.com/2015/11/robot-eye-test.jpg" />
		<media:content url="https://colinpriestdotcom.files.wordpress.com/2015/11/robot-eye-test.jpg" medium="image">
			<media:title type="html">robot eye test</media:title>
		</media:content>

		<media:content url="https://2.gravatar.com/avatar/883de1a12d42422f2643d6ee75c2b746?s=96&#38;d=identicon&#38;r=G" medium="image">
			<media:title type="html">colinpriest1966</media:title>
		</media:content>

		<media:content url="http://deeplearning.net/tutorial/_images/mylenet.png" medium="image">
			<media:title type="html">_images/mylenet.png</media:title>
		</media:content>

		<media:content url="https://colinpriestdotcom.files.wordpress.com/2015/11/robot-eye-test.jpg?w=300" medium="image">
			<media:title type="html">robot eye test</media:title>
		</media:content>

		<media:content url="https://app.dominodatalab.com/colinpriest/cnn_leakage/raw/f9964bb023d2f7d33673ed5689e4b87e1a29a852/results/plotloss.png?inline=true" medium="image" />

		<media:content url="https://app.dominodatalab.com/colinpriest/cnn_leakage/raw/f9964bb023d2f7d33673ed5689e4b87e1a29a852/results/convweights.png?inline=true" medium="image" />

		<media:content url="https://app.dominodatalab.com/colinpriest/cnn_leakage/raw/f9964bb023d2f7d33673ed5689e4b87e1a29a852/test_predicted/1.png?inline=true" medium="image" />

		<media:content url="https://app.dominodatalab.com/colinpriest/cnn_leakage/raw/f9964bb023d2f7d33673ed5689e4b87e1a29a852/test_predicted/106.png?inline=true" medium="image" />
	</item>
		<item>
		<title>Denoising Dirty Documents: Part 9</title>
		<link>https://colinpriest.com/2015/10/15/denoising-dirty-documents-part-9/</link>
					<comments>https://colinpriest.com/2015/10/15/denoising-dirty-documents-part-9/#comments</comments>
		
		<dc:creator><![CDATA[Colin Priest]]></dc:creator>
		<pubDate>Thu, 15 Oct 2015 10:12:58 +0000</pubDate>
				<category><![CDATA[Background Removal]]></category>
		<category><![CDATA[Image Processing]]></category>
		<category><![CDATA[Kaggle]]></category>
		<category><![CDATA[R]]></category>
		<guid isPermaLink="false">http://colinpriest.com/?p=546</guid>

					<description><![CDATA[Now that Kaggle&#8217;s Denoising Dirty Documents Competition has closed, it&#8217;s time to start posting the secrets to getting a very &#8230;<p><a href="https://colinpriest.com/2015/10/15/denoising-dirty-documents-part-9/">Continue reading <span class="meta-nav">&#8594;</span></a></p>]]></description>
										<content:encoded><![CDATA[<p>Now that Kaggle&#8217;s Denoising Dirty Documents Competition has closed, it&#8217;s time to start posting the secrets to getting a very good score in this competition. In this blog, I describe how to take advantage of the first of two information leakages that I used.</p>
<p><a href="https://colinpriestdotcom.files.wordpress.com/2015/10/512px-broken-water-pipe-clip-art-380417.gif"><img loading="lazy" data-attachment-id="548" data-permalink="https://colinpriest.com/2015/10/15/denoising-dirty-documents-part-9/512px-broken-water-pipe-clip-art-380417/" data-orig-file="https://colinpriestdotcom.files.wordpress.com/2015/10/512px-broken-water-pipe-clip-art-380417.gif" data-orig-size="512,673" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="512px-broken-water-pipe-clip-art-380417" data-image-description="" data-image-caption="" data-medium-file="https://colinpriestdotcom.files.wordpress.com/2015/10/512px-broken-water-pipe-clip-art-380417.gif?w=228" data-large-file="https://colinpriestdotcom.files.wordpress.com/2015/10/512px-broken-water-pipe-clip-art-380417.gif?w=512" class="alignnone size-medium wp-image-548" src="https://colinpriestdotcom.files.wordpress.com/2015/10/512px-broken-water-pipe-clip-art-380417.gif?w=228" alt="512px-broken-water-pipe-clip-art-380417" width="228" height="300" /></a></p>
<p>Information leakage occurs in predictive modelling when the training and test data includes values that would not be known at the time a prediction was being made. For example, I once worked on a direct marketing sales propensity modelling project where our predictive model fitted the training data far too well, making us suspicious. We eventually tracked it down to an incorrectly designed data extract that used status values as at the data extraction date, instead of as at the date at which a prediction would have been run. The sale of the product to the customer changed the value of that data field, so the data needed to be the value of the data field before the sale occurred. In real life projects, information leakage is a bad thing because it overstates the model accuracy. Therefore you need to ensure that it does not occur; otherwise your predictive model will not perform well. In data science competitions, information leakage is something to be taken advantage of. It enables you to obtain a higher score.</p>
<p>The first information leakage in this competition comes from how the training data was created. There are only 8 different page backgrounds. There are 2 coffee cup stains, 2 folded pages, 2 watermarks and 2 crumpled pages.</p>
<p><a href="https://colinpriestdotcom.files.wordpress.com/2015/10/20151015-output-1.png"><img loading="lazy" data-attachment-id="550" data-permalink="https://colinpriest.com/2015/10/15/denoising-dirty-documents-part-9/20151015-output-1/" data-orig-file="https://colinpriestdotcom.files.wordpress.com/2015/10/20151015-output-1.png" data-orig-size="855,663" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="20151015 output 1" data-image-description="" data-image-caption="" data-medium-file="https://colinpriestdotcom.files.wordpress.com/2015/10/20151015-output-1.png?w=300" data-large-file="https://colinpriestdotcom.files.wordpress.com/2015/10/20151015-output-1.png?w=529" class="alignnone size-medium wp-image-550" src="https://colinpriestdotcom.files.wordpress.com/2015/10/20151015-output-1.png?w=300" alt="20151015 output 1" width="300" height="233" srcset="https://colinpriestdotcom.files.wordpress.com/2015/10/20151015-output-1.png?w=300 300w, https://colinpriestdotcom.files.wordpress.com/2015/10/20151015-output-1.png?w=600 600w, https://colinpriestdotcom.files.wordpress.com/2015/10/20151015-output-1.png?w=150 150w" sizes="(max-width: 300px) 100vw, 300px" /></a></p>
<p>This gives us a huge advantage in removing the background and the stains. Instead of using an uncertain estimate based upon only a single image, we can group together the images so that each group has the same background. Then, for each pixel location, calculate the brightest pixel across all of the images in that group, and use the brightest value as the pixel brightness in the background. You can find a couple of scripts on Kaggle that do this.</p>
<p>The problem is that you can&#8217;t do the same for the test images because they have different backgrounds, and they have only four different backgrounds. You can&#8217;t have known this without manually looking at the test images, and that break the rules prohibiting manual processing of the test images.</p>
<p><a href="https://colinpriestdotcom.files.wordpress.com/2015/10/20151015-output-2.png"><img loading="lazy" data-attachment-id="551" data-permalink="https://colinpriest.com/2015/10/15/denoising-dirty-documents-part-9/20151015-output-2/" data-orig-file="https://colinpriestdotcom.files.wordpress.com/2015/10/20151015-output-2.png" data-orig-size="856,666" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="20151015 output 2" data-image-description="" data-image-caption="" data-medium-file="https://colinpriestdotcom.files.wordpress.com/2015/10/20151015-output-2.png?w=300" data-large-file="https://colinpriestdotcom.files.wordpress.com/2015/10/20151015-output-2.png?w=529" class="alignnone size-medium wp-image-551" src="https://colinpriestdotcom.files.wordpress.com/2015/10/20151015-output-2.png?w=300" alt="20151015 output 2" width="300" height="233" srcset="https://colinpriestdotcom.files.wordpress.com/2015/10/20151015-output-2.png?w=300 300w, https://colinpriestdotcom.files.wordpress.com/2015/10/20151015-output-2.png?w=600 600w, https://colinpriestdotcom.files.wordpress.com/2015/10/20151015-output-2.png?w=150 150w" sizes="(max-width: 300px) 100vw, 300px" /></a></p>
<p>You can also run into troubles if your model just assumes that the test images are arranged so that there are 8 different background images that repeat every 8 images.</p>
<p>A better solution is to let your model decide which images can be grouped together, and let your model decide which background belongs with each image. The way to do this is to apply a median filter to each image, to obtain an estimate of the background of each image, and then group the median images together according to similarity.</p>
<pre class="brush: r; title: ; notranslate">

library(png)
library(raster)
library(data.table)

median_Filter = function(img, filterWidth)
{
pad = floor(filterWidth / 2)
padded = matrix(NA, nrow(img) + 2 * pad, ncol(img) + 2 * pad)
padded[pad + seq_len(nrow(img)), pad + seq_len(ncol(img))] = img

tab = matrix(0, nrow(img) * ncol(img), filterWidth * filterWidth)
k = 1
for (i in seq_len(filterWidth))
{
for (j in seq_len(filterWidth))
{
tab[,k] = img2vec(padded[i - 1 + seq_len(nrow(img)), j - 1 + seq_len(ncol(img))])
k = k + 1
}
}

filtered = unlist(apply(tab, 1, function(x) median(x[!is.na(x)])))
return (matrix(filtered, nrow(img), ncol(img)))
}

# a function to turn a matrix image into a vector
img2vec = function(img)
{
return (matrix(img, nrow(img) * ncol(img), 1))
}

# training data
dirtyFolder = &quot;C:/Users/Colin/dropbox/Kaggle/Denoising Dirty Documents/data/train&quot;
outPath = &quot;D:/CNN with background removal/train median25&quot;
filenames = list.files(dirtyFolder)
# use a 25x25 median filter to get the background
for (f in filenames)
{
print(f)
imgX = readPNG(file.path(dirtyFolder, f))

median25 = median_Filter(imgX, 25)

outFile = file.path(outPath, f)
writePNG(median25, outFile)
}

</pre>
<p>The script above calculates the median filter for each image and stores it in a folder. I have used a filter size of 25 pixels because I want broad patterns of the background, and I want the text removed.</p>
<p>Now that I have the median images, I can iterate through each training image and link it to other images that have similar median images. I have used RMSE as a measure of similarity. The cutoff RMSE of 2.5% was determined by looking at the range of RMSE values and looking for a natural break.</p>
<p><a href="https://colinpriestdotcom.files.wordpress.com/2015/10/20151015-output-3.png"><img loading="lazy" data-attachment-id="554" data-permalink="https://colinpriest.com/2015/10/15/denoising-dirty-documents-part-9/20151015-output-3/" data-orig-file="https://colinpriestdotcom.files.wordpress.com/2015/10/20151015-output-3.png" data-orig-size="619,200" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="20151015 output 3" data-image-description="" data-image-caption="" data-medium-file="https://colinpriestdotcom.files.wordpress.com/2015/10/20151015-output-3.png?w=300" data-large-file="https://colinpriestdotcom.files.wordpress.com/2015/10/20151015-output-3.png?w=529" class="alignnone size-medium wp-image-554" src="https://colinpriestdotcom.files.wordpress.com/2015/10/20151015-output-3.png?w=300" alt="20151015 output 3" width="300" height="97" srcset="https://colinpriestdotcom.files.wordpress.com/2015/10/20151015-output-3.png?w=300 300w, https://colinpriestdotcom.files.wordpress.com/2015/10/20151015-output-3.png?w=600 600w, https://colinpriestdotcom.files.wordpress.com/2015/10/20151015-output-3.png?w=150 150w" sizes="(max-width: 300px) 100vw, 300px" /></a></p>
<pre class="brush: r; title: ; notranslate">

# find the images with matching background
outPath2 = &quot;D:/CNN with background removal/train background&quot;
outPath3 = &quot;D:/CNN with background removal/train foreground&quot;
for (i in 1:length(filenames))
{
f = filenames[i]
print(f)

imgX = readPNG(file.path(outPath, f))

scores = matrix(1, length(filenames))
for (j in 1:length(filenames))
{
imgY = readPNG(file.path(outPath, filenames[j]))
rmse = 1
if (nrow(imgY) &gt;= nrow(imgX) &amp; ncol(imgY) &gt;= ncol(imgX)) rmse = sqrt(mean((imgX - imgY[1:nrow(imgX), 1:ncol(imgX)]) ^ 2))
scores[j] = rmse
}

sameStains = filenames[scores &lt;= 0.025]
nImages = length(sameStains)

rawData = matrix(0, ncol(imgX) * nrow(imgX), nImages)
for (j in 1:nImages)
{
imgY = readPNG(file.path(dirtyFolder, sameStains[j]))
rawData[,j] = img2vec(imgY[1:nrow(imgX), 1:ncol(imgX)])
}

background = matrix(unlist(apply(rawData,1,max)), nrow(imgX), ncol(imgX)) # background is defined as the lightest pixel of images with similar median transformations
plot(raster(background))
writePNG(background, file.path(outPath2, f))

imgX = readPNG(file.path(dirtyFolder, f))
foreground = (imgX - background) / background
r = range(foreground)
foreground = (foreground - r[1]) * (r[2] - r[1])
#plot(raster(foreground))
writePNG(foreground, file.path(outPath3, f))
}

</pre>
<p>One of the tricks in the script above was that I didn&#8217;t simply subtract the background from the image. If I had done that, then the result would not be consistent in areas where the stains occur:</p>
<p><a href="https://colinpriestdotcom.files.wordpress.com/2015/10/20151015-output-4.png"><img loading="lazy" data-attachment-id="557" data-permalink="https://colinpriest.com/2015/10/15/denoising-dirty-documents-part-9/20151015-output-4/" data-orig-file="https://colinpriestdotcom.files.wordpress.com/2015/10/20151015-output-4.png" data-orig-size="540,420" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="20151015 output 4" data-image-description="" data-image-caption="" data-medium-file="https://colinpriestdotcom.files.wordpress.com/2015/10/20151015-output-4.png?w=300" data-large-file="https://colinpriestdotcom.files.wordpress.com/2015/10/20151015-output-4.png?w=529" class="alignnone size-medium wp-image-557" src="https://colinpriestdotcom.files.wordpress.com/2015/10/20151015-output-4.png?w=300" alt="20151015 output 4" width="300" height="233" srcset="https://colinpriestdotcom.files.wordpress.com/2015/10/20151015-output-4.png?w=300 300w, https://colinpriestdotcom.files.wordpress.com/2015/10/20151015-output-4.png?w=150 150w, https://colinpriestdotcom.files.wordpress.com/2015/10/20151015-output-4.png 540w" sizes="(max-width: 300px) 100vw, 300px" /></a></p>
<p><a href="https://colinpriestdotcom.files.wordpress.com/2015/10/20151015-foreground-bad.png"><img loading="lazy" data-attachment-id="556" data-permalink="https://colinpriest.com/2015/10/15/denoising-dirty-documents-part-9/20151015-foreground-bad/" data-orig-file="https://colinpriestdotcom.files.wordpress.com/2015/10/20151015-foreground-bad.png" data-orig-size="540,420" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="20151015 foreground-bad" data-image-description="" data-image-caption="" data-medium-file="https://colinpriestdotcom.files.wordpress.com/2015/10/20151015-foreground-bad.png?w=300" data-large-file="https://colinpriestdotcom.files.wordpress.com/2015/10/20151015-foreground-bad.png?w=529" class="alignnone size-medium wp-image-556" src="https://colinpriestdotcom.files.wordpress.com/2015/10/20151015-foreground-bad.png?w=300" alt="20151015 foreground-bad" width="300" height="233" srcset="https://colinpriestdotcom.files.wordpress.com/2015/10/20151015-foreground-bad.png?w=300 300w, https://colinpriestdotcom.files.wordpress.com/2015/10/20151015-foreground-bad.png?w=150 150w, https://colinpriestdotcom.files.wordpress.com/2015/10/20151015-foreground-bad.png 540w" sizes="(max-width: 300px) 100vw, 300px" /></a></p>
<p>Notice that in the image above, the writing is faded where the stain was dark. That&#8217;s because it was created with the code:</p>
<pre class="brush: r; title: ; notranslate">

foreground = (imgX - background)
r = range(foreground)
foreground = (foreground - r[1]) * (r[2] - r[1])

</pre>
<p>Where the background is dark, there is less opportunity for the writing to contrast against the background. To fix this, I changed the above script to be:</p>
<pre class="brush: r; title: ; notranslate">

foreground = (imgX - background) / background
r = range(foreground)
foreground = (foreground - r[1]) * (r[2] - r[1])

</pre>
<p>By dividing the difference by the background brightness, I have rescaled the contrast to allow for the limitation on the maximum contrast at this location. The result is shown below:<br />
<a href="https://colinpriestdotcom.files.wordpress.com/2015/10/20151015-foreground-good.png"><img loading="lazy" data-attachment-id="558" data-permalink="https://colinpriest.com/2015/10/15/denoising-dirty-documents-part-9/20151015-foreground-good/" data-orig-file="https://colinpriestdotcom.files.wordpress.com/2015/10/20151015-foreground-good.png" data-orig-size="540,420" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="20151015 foreground-good" data-image-description="" data-image-caption="" data-medium-file="https://colinpriestdotcom.files.wordpress.com/2015/10/20151015-foreground-good.png?w=300" data-large-file="https://colinpriestdotcom.files.wordpress.com/2015/10/20151015-foreground-good.png?w=529" class="alignnone size-medium wp-image-558" src="https://colinpriestdotcom.files.wordpress.com/2015/10/20151015-foreground-good.png?w=300" alt="20151015 foreground-good" width="300" height="233" srcset="https://colinpriestdotcom.files.wordpress.com/2015/10/20151015-foreground-good.png?w=300 300w, https://colinpriestdotcom.files.wordpress.com/2015/10/20151015-foreground-good.png?w=150 150w, https://colinpriestdotcom.files.wordpress.com/2015/10/20151015-foreground-good.png 540w" sizes="(max-width: 300px) 100vw, 300px" /></a><br />
This time the writing has consistent darkness across the entire image, regardless of the brightness of the background pixels.</p>
<p>My competition submission consisted of 4 stages, and this leakage-based background removal was the first stage. The final stage also took advantage of an information leakage. But you will have to wait for a couple of blogs to see what that was&#8230;</p>
]]></content:encoded>
					
					<wfw:commentRss>https://colinpriest.com/2015/10/15/denoising-dirty-documents-part-9/feed/</wfw:commentRss>
			<slash:comments>3</slash:comments>
		
		
		
		<media:thumbnail url="https://colinpriestdotcom.files.wordpress.com/2015/10/512px-broken-water-pipe-clip-art-380417.gif" />
		<media:content url="https://colinpriestdotcom.files.wordpress.com/2015/10/512px-broken-water-pipe-clip-art-380417.gif" medium="image">
			<media:title type="html">512px-broken-water-pipe-clip-art-380417</media:title>
		</media:content>

		<media:content url="https://2.gravatar.com/avatar/883de1a12d42422f2643d6ee75c2b746?s=96&#38;d=identicon&#38;r=G" medium="image">
			<media:title type="html">colinpriest1966</media:title>
		</media:content>

		<media:content url="https://colinpriestdotcom.files.wordpress.com/2015/10/512px-broken-water-pipe-clip-art-380417.gif?w=228" medium="image">
			<media:title type="html">512px-broken-water-pipe-clip-art-380417</media:title>
		</media:content>

		<media:content url="https://colinpriestdotcom.files.wordpress.com/2015/10/20151015-output-1.png?w=300" medium="image">
			<media:title type="html">20151015 output 1</media:title>
		</media:content>

		<media:content url="https://colinpriestdotcom.files.wordpress.com/2015/10/20151015-output-2.png?w=300" medium="image">
			<media:title type="html">20151015 output 2</media:title>
		</media:content>

		<media:content url="https://colinpriestdotcom.files.wordpress.com/2015/10/20151015-output-3.png?w=300" medium="image">
			<media:title type="html">20151015 output 3</media:title>
		</media:content>

		<media:content url="https://colinpriestdotcom.files.wordpress.com/2015/10/20151015-output-4.png?w=300" medium="image">
			<media:title type="html">20151015 output 4</media:title>
		</media:content>

		<media:content url="https://colinpriestdotcom.files.wordpress.com/2015/10/20151015-foreground-bad.png?w=300" medium="image">
			<media:title type="html">20151015 foreground-bad</media:title>
		</media:content>

		<media:content url="https://colinpriestdotcom.files.wordpress.com/2015/10/20151015-foreground-good.png?w=300" medium="image">
			<media:title type="html">20151015 foreground-good</media:title>
		</media:content>
	</item>
		<item>
		<title>Denoising Dirty Documents: Part 8</title>
		<link>https://colinpriest.com/2015/10/02/denoising-dirty-documents-part-8/</link>
					<comments>https://colinpriest.com/2015/10/02/denoising-dirty-documents-part-8/#comments</comments>
		
		<dc:creator><![CDATA[Colin Priest]]></dc:creator>
		<pubDate>Fri, 02 Oct 2015 13:58:47 +0000</pubDate>
				<category><![CDATA[Image Processing]]></category>
		<category><![CDATA[Kaggle]]></category>
		<category><![CDATA[Machine Learning]]></category>
		<category><![CDATA[R]]></category>
		<guid isPermaLink="false">http://colinpriest.com/?p=528</guid>

					<description><![CDATA[In this blog we will engineer a new feature to go into our model. So far we have predominantly been &#8230;<p><a href="https://colinpriest.com/2015/10/02/denoising-dirty-documents-part-8/">Continue reading <span class="meta-nav">&#8594;</span></a></p>]]></description>
										<content:encoded><![CDATA[<p>In this blog we will engineer a new feature to go into our model. So far we have predominantly been using localised features &#8211; information about pixels that are located nearby the pixel whose brightness we are predicting. In this blog we will consider the structure of a document, and use that to improve our model.</p>
<p><a href="https://colinpriestdotcom.files.wordpress.com/2015/08/20150801-after.png"><img loading="lazy" data-attachment-id="232" data-permalink="https://colinpriest.com/2015/08/01/denoising-dirty-documents-part-1/20150801-after/" data-orig-file="https://colinpriestdotcom.files.wordpress.com/2015/08/20150801-after.png" data-orig-size="540,258" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="20150801 &#8211; after" data-image-description="" data-image-caption="" data-medium-file="https://colinpriestdotcom.files.wordpress.com/2015/08/20150801-after.png?w=300" data-large-file="https://colinpriestdotcom.files.wordpress.com/2015/08/20150801-after.png?w=529" class="alignnone size-medium wp-image-232" src="https://colinpriestdotcom.files.wordpress.com/2015/08/20150801-after.png?w=300" alt="20150801 - after" width="300" height="143" srcset="https://colinpriestdotcom.files.wordpress.com/2015/08/20150801-after.png?w=300 300w, https://colinpriestdotcom.files.wordpress.com/2015/08/20150801-after.png?w=150 150w, https://colinpriestdotcom.files.wordpress.com/2015/08/20150801-after.png 540w" sizes="(max-width: 300px) 100vw, 300px" /></a></p>
<p>The image consists of multiple lines of text, arranged into one or more paragraphs with multiple sentences in each paragraph.</p>
<p><a href="https://colinpriestdotcom.files.wordpress.com/2015/09/ducks-lined-up.jpg"><img loading="lazy" data-attachment-id="529" data-permalink="https://colinpriest.com/2015/10/02/denoising-dirty-documents-part-8/ducks-lined-up/" data-orig-file="https://colinpriestdotcom.files.wordpress.com/2015/09/ducks-lined-up.jpg" data-orig-size="1600,731" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="ducks lined up" data-image-description="" data-image-caption="" data-medium-file="https://colinpriestdotcom.files.wordpress.com/2015/09/ducks-lined-up.jpg?w=300" data-large-file="https://colinpriestdotcom.files.wordpress.com/2015/09/ducks-lined-up.jpg?w=529" class="alignnone size-medium wp-image-529" src="https://colinpriestdotcom.files.wordpress.com/2015/09/ducks-lined-up.jpg?w=300" alt="ducks lined up" width="300" height="137" srcset="https://colinpriestdotcom.files.wordpress.com/2015/09/ducks-lined-up.jpg?w=300 300w, https://colinpriestdotcom.files.wordpress.com/2015/09/ducks-lined-up.jpg?w=600 600w, https://colinpriestdotcom.files.wordpress.com/2015/09/ducks-lined-up.jpg?w=150 150w" sizes="(max-width: 300px) 100vw, 300px" /></a></p>
<p>If we get our ducks in a row, we can use the fact that the text (like our metaphorical ducks) is arranged into lines, and that there are gaps between those lines of text. In particular, if we can find the gaps between the lines, we can ensure that the predicted value within those gaps is always the background colour.</p>
<p>Let&#8217;s look at the horizontal profile of a sample input image:</p>
<pre class="brush: r; title: ; notranslate">

# libraries
if (!require(&quot;pacman&quot;)) install.packages(&quot;pacman&quot;)
pacman::p_load(png)

dirtyFolder = &quot;C:\\Users\\Colin\\dropbox\\Kaggle\\Denoising Dirty Documents\\data\\train&quot;

f = &quot;135.png&quot;
imgX = readPNG(file.path(dirtyFolder, f))

hProfileX = unlist(apply(imgX, 1, mean))
hProfileY = unlist(apply(imgY, 1, mean))

x = 1:nrow(imgX)
plot(x, hProfileX, col=&quot;red&quot;, type=&quot;l&quot;, xlab = &quot;row&quot;, ylab = &quot;brightness&quot;)

</pre>
<p><a href="https://colinpriestdotcom.files.wordpress.com/2015/09/20150930-output-01.png"><img loading="lazy" data-attachment-id="532" data-permalink="https://colinpriest.com/2015/10/02/denoising-dirty-documents-part-8/20150930-output-01/" data-orig-file="https://colinpriestdotcom.files.wordpress.com/2015/09/20150930-output-01.png" data-orig-size="672,672" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="20150930 output 01" data-image-description="" data-image-caption="" data-medium-file="https://colinpriestdotcom.files.wordpress.com/2015/09/20150930-output-01.png?w=300" data-large-file="https://colinpriestdotcom.files.wordpress.com/2015/09/20150930-output-01.png?w=529" class="alignnone size-medium wp-image-532" src="https://colinpriestdotcom.files.wordpress.com/2015/09/20150930-output-01.png?w=300" alt="20150930 output 01" width="300" height="300" srcset="https://colinpriestdotcom.files.wordpress.com/2015/09/20150930-output-01.png?w=300 300w, https://colinpriestdotcom.files.wordpress.com/2015/09/20150930-output-01.png?w=600 600w, https://colinpriestdotcom.files.wordpress.com/2015/09/20150930-output-01.png?w=150 150w" sizes="(max-width: 300px) 100vw, 300px" /></a></p>
<p>The rows with low brightness show where text occurs at regular intervals. But the absolute level of the row brightness varies, according to the noise and stains, so much that sometimes the gaps between the lines of text are darker than the rows in which text occurs. This will make it more difficult to determine which rows are which.</p>
<p>But what if we used the predicted images from our <a href="https://colinpriest.com/2015/09/23/denoising-dirty-documents-part-7/" target="_blank">stacked model from the last blog</a> as the inputs to this predictor?</p>
<pre class="brush: r; title: ; notranslate">

# libraries
if (!require(&quot;pacman&quot;)) install.packages(&quot;pacman&quot;)
pacman::p_load(png)

dirtyFolder = &quot;C:\\Users\\Colin\\dropbox\\Kaggle\\Denoising Dirty Documents\\stacking\\stacked&quot;

f = &quot;135.png&quot;
imgX = readPNG(file.path(dirtyFolder, f))

hProfileX = unlist(apply(imgX, 1, mean))
hProfileY = unlist(apply(imgY, 1, mean))

x = 1:nrow(imgX)
plot(x, hProfileX, col=&quot;red&quot;, type=&quot;l&quot;, xlab = &quot;row&quot;, ylab = &quot;brightness&quot;)

</pre>
<p><a href="https://colinpriestdotcom.files.wordpress.com/2015/09/20150930-output-02.png"><img loading="lazy" data-attachment-id="533" data-permalink="https://colinpriest.com/2015/10/02/denoising-dirty-documents-part-8/20150930-output-02/" data-orig-file="https://colinpriestdotcom.files.wordpress.com/2015/09/20150930-output-02.png" data-orig-size="672,672" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="20150930 output 02" data-image-description="" data-image-caption="" data-medium-file="https://colinpriestdotcom.files.wordpress.com/2015/09/20150930-output-02.png?w=300" data-large-file="https://colinpriestdotcom.files.wordpress.com/2015/09/20150930-output-02.png?w=529" class="alignnone size-medium wp-image-533" src="https://colinpriestdotcom.files.wordpress.com/2015/09/20150930-output-02.png?w=300" alt="20150930 output 02" width="300" height="300" srcset="https://colinpriestdotcom.files.wordpress.com/2015/09/20150930-output-02.png?w=300 300w, https://colinpriestdotcom.files.wordpress.com/2015/09/20150930-output-02.png?w=600 600w, https://colinpriestdotcom.files.wordpress.com/2015/09/20150930-output-02.png?w=150 150w" sizes="(max-width: 300px) 100vw, 300px" /></a></p>
<p>Now it&#8217;s much easier to find the gaps between the lines of text. To do this we need estimate three parameters:</p>
<ol>
<li>cycle length: the number of rows from one line of text to the next line of text</li>
<li>gap length: the height of the gap between lines of text</li>
<li>starting location of the first cycle</li>
</ol>
<p>The constraints that we can use for determining these parameters are:</p>
<ul>
<li>cycle length is a positive number</li>
<li>gap length is a positive number</li>
<li>gap length is less than cycle length</li>
<li>gap rows are white</li>
<li>most letters (e.g. weruioaszxcvnm) are short and these letters are located in the darkest rows, which we will call the &#8220;core rows&#8221;</li>
<li>some letters are taller (e.g. tdfhklb) and create slightly darker rows above the core rows</li>
<li>some letters are taller (e.g. qypgj) and create slightly darker rows below the core rows</li>
<li>if we cluster the values, the darker cluster contains the core of the letters (the core rows), but these rows may be lighter when a paragraph starts or ends</li>
<li>the in-between valued rows next to the white rows are possibly where the taller letters are located and their darkness will vary according to the number of tall letters</li>
</ul>
<p>Let&#8217;s start by clustering the row brightnesses, and checking where the rows switch from one cluster to another, and using this to estimate cycle length.</p>
<pre class="brush: r; title: ; notranslate">

km = kmeans(hProfileX, 2)
cutoff = (max(hProfileX[km$cluster == which.min(km$centers)]) + min(hProfileX[km$cluster == which.max(km$centers)])) / 2
plot(hProfileX, type=&quot;l&quot;)
lines(hProfileX * 0 + cutoff, col=&quot;red&quot;)

starts = (2:length(hProfileX))[sapply(2:length(hProfileX), function(x) hProfileX[x] &lt; cutoff &amp; hProfileX[x-1] &gt; cutoff)]
cycleLength = mean(diff(starts))

</pre>
<p><a href="https://colinpriestdotcom.files.wordpress.com/2015/10/20150930-output-03.png"><img loading="lazy" data-attachment-id="539" data-permalink="https://colinpriest.com/2015/10/02/denoising-dirty-documents-part-8/20150930-output-03/" data-orig-file="https://colinpriestdotcom.files.wordpress.com/2015/10/20150930-output-03.png" data-orig-size="672,672" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="20150930 output 03" data-image-description="" data-image-caption="" data-medium-file="https://colinpriestdotcom.files.wordpress.com/2015/10/20150930-output-03.png?w=300" data-large-file="https://colinpriestdotcom.files.wordpress.com/2015/10/20150930-output-03.png?w=529" class="alignnone size-medium wp-image-539" src="https://colinpriestdotcom.files.wordpress.com/2015/10/20150930-output-03.png?w=300" alt="20150930 output 03" width="300" height="300" srcset="https://colinpriestdotcom.files.wordpress.com/2015/10/20150930-output-03.png?w=300 300w, https://colinpriestdotcom.files.wordpress.com/2015/10/20150930-output-03.png?w=600 600w, https://colinpriestdotcom.files.wordpress.com/2015/10/20150930-output-03.png?w=150 150w" sizes="(max-width: 300px) 100vw, 300px" /></a></p>
<p><a href="https://colinpriestdotcom.files.wordpress.com/2015/10/20150930-output-04.png"><img loading="lazy" data-attachment-id="540" data-permalink="https://colinpriest.com/2015/10/02/denoising-dirty-documents-part-8/20150930-output-04/" data-orig-file="https://colinpriestdotcom.files.wordpress.com/2015/10/20150930-output-04.png" data-orig-size="393,72" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="20150930 output 04" data-image-description="" data-image-caption="" data-medium-file="https://colinpriestdotcom.files.wordpress.com/2015/10/20150930-output-04.png?w=300" data-large-file="https://colinpriestdotcom.files.wordpress.com/2015/10/20150930-output-04.png?w=393" class="alignnone size-medium wp-image-540" src="https://colinpriestdotcom.files.wordpress.com/2015/10/20150930-output-04.png?w=300" alt="20150930 output 04" width="300" height="55" srcset="https://colinpriestdotcom.files.wordpress.com/2015/10/20150930-output-04.png?w=300 300w, https://colinpriestdotcom.files.wordpress.com/2015/10/20150930-output-04.png?w=150 150w, https://colinpriestdotcom.files.wordpress.com/2015/10/20150930-output-04.png 393w" sizes="(max-width: 300px) 100vw, 300px" /></a></p>
<p>Next we will estimate the starting location of the first cycle. But before we do that, we need to define the &#8220;start&#8221; of the cycle. Let&#8217;s define the cycle as starting at the row in which the first letter starts. That would be the first non-white row before the first core rows.</p>
<p>cycleStarts = starts[1]<br />
while (hProfileX[cycleStarts] &lt; 0.99)<br />
 cycleStarts = cycleStarts &#8211; 1</p>
<p>The first cycle starts at row 3.</p>
<p>To estimate the gap length, we should measure the number of white rows before each cycle starts.</p>
<pre class="brush: r; title: ; notranslate">

gaps = matrix(0, length(starts) - 1)
for (i in 2:length(starts))
{
 cycleStarts = starts[i]
 while (hProfileX[cycleStarts] &lt; 0.99)
 cycleStarts = cycleStarts - 1
 gapStarts = cycleStarts - 1
 while (hProfileX[gapStarts] &gt; 0.99)
 gapStarts = gapStarts - 1
 gapLength = cycleStarts - gapStarts
 gaps[i - 1] = gapLength
}
gaps

</pre>
<p>The gaps are (13, 12, 17, 13, 12, 11, 12, 18, 12, 12). The two outliers occur after rows of text that do not contain any of the characters (q, y, p, g, j). After removing these two outliers, the gaps do not exceed 13 rows. So we can write code to allow for this as follows:</p>
<pre class="brush: r; title: ; notranslate">

mGaps = median(gaps)
gapLength = mean(gaps[abs(gaps - mGaps) &lt;= 2])

</pre>
<p>This gives us a gap length estimate of 13.125 and completes our line location model for this image. The quick way to use this model is to white out the gap rows. A more complex model could use the newly estimated row types (core, gap, other) as predictors.</p>
<pre class="brush: r; title: ; notranslate">

imgCleaned = imgX
numCycles = length(starts)
for (i in 1:numCycles)
{
cycleStart = starts[i] - min(gaps[abs(gaps - mGaps) &lt;= 2])
imgCleaned[cycleStart:(starts[i]-1)] = 1
}

</pre>
<p>The script above would clean up any minor image blemishes that exist between the lines of text.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://colinpriest.com/2015/10/02/denoising-dirty-documents-part-8/feed/</wfw:commentRss>
			<slash:comments>4</slash:comments>
		
		
		
		<media:thumbnail url="https://colinpriestdotcom.files.wordpress.com/2015/09/ducks-lined-up.jpg" />
		<media:content url="https://colinpriestdotcom.files.wordpress.com/2015/09/ducks-lined-up.jpg" medium="image">
			<media:title type="html">ducks lined up</media:title>
		</media:content>

		<media:content url="https://2.gravatar.com/avatar/883de1a12d42422f2643d6ee75c2b746?s=96&#38;d=identicon&#38;r=G" medium="image">
			<media:title type="html">colinpriest1966</media:title>
		</media:content>

		<media:content url="https://colinpriestdotcom.files.wordpress.com/2015/08/20150801-after.png?w=300" medium="image">
			<media:title type="html">20150801 - after</media:title>
		</media:content>

		<media:content url="https://colinpriestdotcom.files.wordpress.com/2015/09/ducks-lined-up.jpg?w=300" medium="image">
			<media:title type="html">ducks lined up</media:title>
		</media:content>

		<media:content url="https://colinpriestdotcom.files.wordpress.com/2015/09/20150930-output-01.png?w=300" medium="image">
			<media:title type="html">20150930 output 01</media:title>
		</media:content>

		<media:content url="https://colinpriestdotcom.files.wordpress.com/2015/09/20150930-output-02.png?w=300" medium="image">
			<media:title type="html">20150930 output 02</media:title>
		</media:content>

		<media:content url="https://colinpriestdotcom.files.wordpress.com/2015/10/20150930-output-03.png?w=300" medium="image">
			<media:title type="html">20150930 output 03</media:title>
		</media:content>

		<media:content url="https://colinpriestdotcom.files.wordpress.com/2015/10/20150930-output-04.png?w=300" medium="image">
			<media:title type="html">20150930 output 04</media:title>
		</media:content>
	</item>
	</channel>
</rss>
