<?xml version="1.0" encoding="UTF-8"?>
<feed xml:lang="en-US" xmlns="http://www.w3.org/2005/Atom">
  <id>tag:drsimonj.svbtle.com,2014:/feed</id>
  <link rel="alternate" type="text/html" href="https://drsimonj.svbtle.com"/>
  <link rel="self" type="application/atom+xml" href="https://drsimonj.svbtle.com/feed"/>
  <title>blogR</title>
  <updated>2018-09-25T11:45:41-07:00</updated>
  <author>
    <name>Simon Jackson</name>
    <uri>https://drsimonj.svbtle.com</uri>
    <email>drsimonjackson@gmail.com</email>
  </author>
  <generator>Svbtle.com</generator>
  <entry>
    <id>tag:drsimonj.svbtle.com,2014:Post/label-line-ends-in-time-series-with-ggplot2</id>
    <published>2018-09-25T11:45:41-07:00</published>
    <updated>2018-09-25T11:45:41-07:00</updated>
    <link rel="alternate" type="text/html" href="https://drsimonj.svbtle.com/label-line-ends-in-time-series-with-ggplot2"/>
    <title>Label line ends in time series with ggplot2</title>
    <content type="html">&lt;p&gt;&lt;a href="https://twitter.com/drsimonj" rel="nofollow"&gt;@drsimonj&lt;/a&gt; here with a quick share on making great use of the secondary y axis with ggplot2 – super helpful if you’re plotting groups of time series!&lt;/p&gt;

&lt;p&gt;Here’s an example of what I want to show you how to create (pay attention to the numbers of the right):&lt;/p&gt;

&lt;p&gt;&lt;a href="https://svbtleusercontent.com/a3LT3yKxA29K3Vc1aXnDsA0xspap.png" rel="nofollow"&gt;&lt;img src="https://svbtleusercontent.com/a3LT3yKxA29K3Vc1aXnDsA0xspap_small.png" alt="init-example-1.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="setup_2"&gt;Setup &lt;a class="head_anchor" href="#setup_2" rel="nofollow"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;To setup we’ll need the tidyverse package and the &lt;code class="prettyprint"&gt;Orange&lt;/code&gt; data set that comes with R. This tracks the circumference growth of five orange trees over time.&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;library(tidyverse)

d &amp;lt;- Orange

head(d)
#&amp;gt; Grouped Data: circumference ~ age | Tree
#&amp;gt;   Tree  age circumference
#&amp;gt; 1    1  118            30
#&amp;gt; 2    1  484            58
#&amp;gt; 3    1  664            87
#&amp;gt; 4    1 1004           115
#&amp;gt; 5    1 1231           120
#&amp;gt; 6    1 1372           142
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="template-code_2"&gt;Template code &lt;a class="head_anchor" href="#template-code_2" rel="nofollow"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;To create the basic case where the numbers appear at the end of your time series lines, your code might look something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;# You have a data set with:
# - GROUP colum
# - X colum (say time)
# - Y column (the values of interest)
DATA_SET

# Create a vector of the last (furthest right) y-axis values for each group
DATA_SET_ENDS &amp;lt;- DATA_SET %&amp;gt;% 
  group_by(GROUP) %&amp;gt;% 
  top_n(1, X) %&amp;gt;% 
  pull(Y)

# Create plot with `sec.axis`
ggplot(DATA_SET, aes(X, Y, color = GROUP)) +
    geom_line() +
    scale_x_continuous(expand = c(0, 0)) +
    scale_y_continuous(sec.axis = sec_axis(~ ., breaks = DATA_SET_ENDS))
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="let39s-see-it_2"&gt;Let’s see it! &lt;a class="head_anchor" href="#let39s-see-it_2" rel="nofollow"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Let’s break it down a bit. We already have our data set where the group colum is &lt;code class="prettyprint"&gt;Tree&lt;/code&gt;, the X value is &lt;code class="prettyprint"&gt;age&lt;/code&gt;, and the Y value is &lt;code class="prettyprint"&gt;circumference&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So first get a vector of the last (furthest right) values for each group:&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;d_ends &amp;lt;- d %&amp;gt;% 
  group_by(Tree) %&amp;gt;% 
  top_n(1, age) %&amp;gt;% 
  pull(circumference)

d_ends
#&amp;gt; [1] 145 203 140 214 177
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, let’s set up the basic plot without the numbers to see how each layer adds up.&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;ggplot(d, aes(age, circumference, color = Tree)) +
      geom_line()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href="https://svbtleusercontent.com/4zKSnhW3JDUzwHbmKGBMAo0xspap.png" rel="nofollow"&gt;&lt;img src="https://svbtleusercontent.com/4zKSnhW3JDUzwHbmKGBMAo0xspap_small.png" alt="unnamed-chunk-5-1.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we can use &lt;code class="prettyprint"&gt;scale_y_*&lt;/code&gt;, with the argument &lt;code class="prettyprint"&gt;sec.axis&lt;/code&gt; to create a second axis on the right, with numbers to be displayed at &lt;code class="prettyprint"&gt;breaks&lt;/code&gt;, defined by our vector of line ends:&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;ggplot(d, aes(age, circumference, color = Tree)) +
      geom_line() +
      scale_y_continuous(sec.axis = sec_axis(~ ., breaks = d_ends))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href="https://svbtleusercontent.com/xfnR83uEfJP9nEz7ZToAkt0xspap.png" rel="nofollow"&gt;&lt;img src="https://svbtleusercontent.com/xfnR83uEfJP9nEz7ZToAkt0xspap_small.png" alt="unnamed-chunk-6-1.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is a great start, The only major addition I suggest is expanding the margins of the x-axis so the gap disappears. You do this with &lt;code class="prettyprint"&gt;scale_x_*&lt;/code&gt; and the &lt;code class="prettyprint"&gt;expand&lt;/code&gt; argument:&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;ggplot(d, aes(age, circumference, color = Tree)) +
      geom_line() +
      scale_y_continuous(sec.axis = sec_axis(~ ., breaks = d_ends)) +
      scale_x_continuous(expand = c(0, 0))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href="https://svbtleusercontent.com/65yGdKt3cRfnBpJegdYRC0xspap.png" rel="nofollow"&gt;&lt;img src="https://svbtleusercontent.com/65yGdKt3cRfnBpJegdYRC0xspap_small.png" alt="unnamed-chunk-7-1.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="polishing-it-up_2"&gt;Polishing it up &lt;a class="head_anchor" href="#polishing-it-up_2" rel="nofollow"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Like it? Here’s the code to recreate the first polished plot:&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;library(tidyverse)

d &amp;lt;- Orange %&amp;gt;% 
  as_tibble()

d_ends &amp;lt;- d %&amp;gt;% 
  group_by(Tree) %&amp;gt;% 
  top_n(1, age) %&amp;gt;% 
  pull(circumference)

d %&amp;gt;% 
  ggplot(aes(age, circumference, color = Tree)) +
    geom_line(size = 2, alpha = .8) +
    theme_minimal() +
    scale_x_continuous(expand = c(0, 0)) +
    scale_y_continuous(sec.axis = sec_axis(~ ., breaks = d_ends)) +
    ggtitle("Orange trees getting bigger with age",
            subtitle = "Based on the Orange data set in R") +
    labs(x = "Days old", y = "Circumference (mm)", caption = "Plot by @drsimonj")
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href="https://svbtleusercontent.com/a3LT3yKxA29K3Vc1aXnDsA0xspap.png" rel="nofollow"&gt;&lt;img src="https://svbtleusercontent.com/a3LT3yKxA29K3Vc1aXnDsA0xspap_small.png" alt="init-example-8.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="sign-off_2"&gt;Sign off &lt;a class="head_anchor" href="#sign-off_2" rel="nofollow"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Thanks for reading and I hope this was useful for you.&lt;/p&gt;

&lt;p&gt;For updates of recent blog posts, follow &lt;a href="https://twitter.com/drsimonj" rel="nofollow"&gt;@drsimonj&lt;/a&gt; on Twitter, or email me at &lt;a href="mailto:drsimonjackson@gmail.com" rel="nofollow"&gt;drsimonjackson@gmail.com&lt;/a&gt; to get in touch.&lt;/p&gt;

&lt;p&gt;If you’d like the code that produced this blog, check out the &lt;a href="https://github.com/drsimonj/blogR" rel="nofollow"&gt;blogR GitHub repository&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>tag:drsimonj.svbtle.com,2014:Post/exploring-correlations-in-r-with-corrr</id>
    <published>2018-08-21T00:53:40-07:00</published>
    <updated>2018-08-21T00:53:40-07:00</updated>
    <link rel="alternate" type="text/html" href="https://drsimonj.svbtle.com/exploring-correlations-in-r-with-corrr"/>
    <title>Exploring correlations in R with corrr</title>
    <content type="html">&lt;p&gt;&lt;a href="https://twitter.com/drsimonj" rel="nofollow"&gt;@drsimonj&lt;/a&gt; here to share a (sort of) readable version of &lt;a href="https://www.meetup.com/en-AU/amst-R-dam/events/251102944/" rel="nofollow"&gt;my presentation at the amst-R-dam meetup&lt;/a&gt; on 14 August, 2018: “Exploring correlations in R with corrr”.&lt;/p&gt;

&lt;p&gt;Those who attended will know that I changed the topic of the talk, originally advertised as “R from academia to commerical business”. For anyone who’s interested, I gave that talk at useR! 2018 and, thanks to the R consortium, you can watch it &lt;a href="https://www.youtube.com/embed/3eqJj7mj7lA" rel="nofollow"&gt;here&lt;/a&gt;. I also gave a “Wrangling data in the Tidyverse” tutorial that you can follow at &lt;a href="https://www.youtube.com/embed/E-Vvg8uzcVM" rel="nofollow"&gt;Part 1&lt;/a&gt; and &lt;a href="https://www.youtube.com/embed/DwWH1mTerOc" rel="nofollow"&gt;Part 2&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="the-story-of-corrr_1"&gt;The story of corrr &lt;a class="head_anchor" href="#the-story-of-corrr_1" rel="nofollow"&gt;#&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;Moving to corrr — the first package I ever created. It started when I was a postgrad student studying individual differences in decision making. My research data was responses to test batteries. My statistical bread and butter was regression-based techniques like multiple regression, path analysis, factor analysis (EFA and CFA), and structural equation modelling.&lt;/p&gt;

&lt;p&gt;I spent a lot of time exploring correlation matrices to make model decisions, and diagnose poor fits or unexpected results! If you need proof, check out some of the correlations tables published in my academic papers like &lt;a href="https://onlinelibrary.wiley.com/doi/abs/10.1002/bdm.1939" rel="nofollow"&gt;“Individual Differences in Decision Making Depend on Cognitive Abilities, Monitoring and Control”&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="how-to-explore-correlations_1"&gt;How to explore correlations? &lt;a class="head_anchor" href="#how-to-explore-correlations_1" rel="nofollow"&gt;#&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;To illustrate some of the challenges I was facing, let’s try explore some correlations with some very fancy data:&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;d &amp;lt;- mtcars
d$hp[3] &amp;lt;- NA
head(d)
#&amp;gt;                    mpg cyl disp  hp drat    wt  qsec vs am gear carb
#&amp;gt; Mazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4
#&amp;gt; Mazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4
#&amp;gt; Datsun 710        22.8   4  108  NA 3.85 2.320 18.61  1  1    4    1
#&amp;gt; Hornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1
#&amp;gt; Hornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2
#&amp;gt; Valiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We could be motivated by &lt;a href="https://en.wikipedia.org/wiki/Multicollinearity" rel="nofollow"&gt;multicollinearity&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;fit_1 &amp;lt;- lm(mpg ~ hp,        data = d)
fit_2 &amp;lt;- lm(mpg ~ hp + disp, data = d)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;summary(fit_1)
#&amp;gt; 
#&amp;gt; Call:
#&amp;gt; lm(formula = mpg ~ hp, data = d)
#&amp;gt; 
#&amp;gt; Residuals:
#&amp;gt;     Min      1Q  Median      3Q     Max 
#&amp;gt; -5.7219 -2.2887 -0.8677  1.5815  8.1743 
#&amp;gt; 
#&amp;gt; Coefficients:
#&amp;gt;             Estimate Std. Error t value Pr(&amp;gt;|t|)    
#&amp;gt; (Intercept) 30.18457    1.69527  17.805  &amp;lt; 2e-16 ***
#&amp;gt; hp          -0.06860    0.01039  -6.604 3.08e-07 ***
#&amp;gt; ---
#&amp;gt; Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
#&amp;gt; 
#&amp;gt; Residual standard error: 3.925 on 29 degrees of freedom
#&amp;gt;   (1 observation deleted due to missingness)
#&amp;gt; Multiple R-squared:  0.6006, Adjusted R-squared:  0.5868 
#&amp;gt; F-statistic: 43.61 on 1 and 29 DF,  p-value: 3.085e-07
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;summary(fit_2)
#&amp;gt; 
#&amp;gt; Call:
#&amp;gt; lm(formula = mpg ~ hp + disp, data = d)
#&amp;gt; 
#&amp;gt; Residuals:
#&amp;gt;     Min      1Q  Median      3Q     Max 
#&amp;gt; -4.9136 -2.3472 -0.7302  1.9798  6.7549 
#&amp;gt; 
#&amp;gt; Coefficients:
#&amp;gt;              Estimate Std. Error t value Pr(&amp;gt;|t|)    
#&amp;gt; (Intercept) 30.963202   1.373067  22.550  &amp;lt; 2e-16 ***
#&amp;gt; hp          -0.024840   0.013480  -1.843 0.075991 .  
#&amp;gt; disp        -0.030992   0.007504  -4.130 0.000296 ***
#&amp;gt; ---
#&amp;gt; Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
#&amp;gt; 
#&amp;gt; Residual standard error: 3.149 on 28 degrees of freedom
#&amp;gt;   (1 observation deleted due to missingness)
#&amp;gt; Multiple R-squared:  0.7518, Adjusted R-squared:  0.7341 
#&amp;gt; F-statistic: 42.41 on 2 and 28 DF,  p-value: 3.368e-09
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Strange result. Let’s check the correlations between &lt;code class="prettyprint"&gt;mpg&lt;/code&gt;, &lt;code class="prettyprint"&gt;hp&lt;/code&gt;, and &lt;code class="prettyprint"&gt;disp&lt;/code&gt; to try and diagnose this problem. It should be simple using the base R function, &lt;code class="prettyprint"&gt;cor()&lt;/code&gt;. Right?&lt;/p&gt;

&lt;p&gt;Err, what is with all the &lt;code class="prettyprint"&gt;NA&lt;/code&gt;‘s ?&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;rs &amp;lt;- cor(d)
rs
#&amp;gt;             mpg        cyl       disp hp        drat         wt
#&amp;gt; mpg   1.0000000 -0.8521620 -0.8475514 NA  0.68117191 -0.8676594
#&amp;gt; cyl  -0.8521620  1.0000000  0.9020329 NA -0.69993811  0.7824958
#&amp;gt; disp -0.8475514  0.9020329  1.0000000 NA -0.71021393  0.8879799
#&amp;gt; hp           NA         NA         NA  1          NA         NA
#&amp;gt; drat  0.6811719 -0.6999381 -0.7102139 NA  1.00000000 -0.7124406
#&amp;gt; wt   -0.8676594  0.7824958  0.8879799 NA -0.71244065  1.0000000
#&amp;gt; qsec  0.4186840 -0.5912421 -0.4336979 NA  0.09120476 -0.1747159
#&amp;gt; vs    0.6640389 -0.8108118 -0.7104159 NA  0.44027846 -0.5549157
#&amp;gt; am    0.5998324 -0.5226070 -0.5912270 NA  0.71271113 -0.6924953
#&amp;gt; gear  0.4802848 -0.4926866 -0.5555692 NA  0.69961013 -0.5832870
#&amp;gt; carb -0.5509251  0.5269883  0.3949769 NA -0.09078980  0.4276059
#&amp;gt;             qsec         vs          am       gear        carb
#&amp;gt; mpg   0.41868403  0.6640389  0.59983243  0.4802848 -0.55092507
#&amp;gt; cyl  -0.59124207 -0.8108118 -0.52260705 -0.4926866  0.52698829
#&amp;gt; disp -0.43369788 -0.7104159 -0.59122704 -0.5555692  0.39497686
#&amp;gt; hp            NA         NA          NA         NA          NA
#&amp;gt; drat  0.09120476  0.4402785  0.71271113  0.6996101 -0.09078980
#&amp;gt; wt   -0.17471588 -0.5549157 -0.69249526 -0.5832870  0.42760594
#&amp;gt; qsec  1.00000000  0.7445354 -0.22986086 -0.2126822 -0.65624923
#&amp;gt; vs    0.74453544  1.0000000  0.16834512  0.2060233 -0.56960714
#&amp;gt; am   -0.22986086  0.1683451  1.00000000  0.7940588  0.05753435
#&amp;gt; gear -0.21268223  0.2060233  0.79405876  1.0000000  0.27407284
#&amp;gt; carb -0.65624923 -0.5696071  0.05753435  0.2740728  1.00000000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Check the help page &lt;a href="https://stat.ethz.ch/R-manual/R-devel/library/stats/html/cor.html" rel="nofollow"&gt;&lt;code class="prettyprint"&gt;?cor&lt;/code&gt;&lt;/a&gt;. Not so obvious. Default is &lt;code class="prettyprint"&gt;use = "everything"&lt;/code&gt;, and buried down in the details:&lt;/p&gt;
&lt;blockquote class="short"&gt;
&lt;p&gt;If use is “everything”, NAs will propagate conceptually, i.e., a resulting value will be NA whenever one of its contributing observations is NA.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Have to handle missing values with &lt;code class="prettyprint"&gt;use&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;rs &amp;lt;- cor(d, use = "pairwise.complete.obs")
rs
#&amp;gt;             mpg        cyl       disp         hp        drat         wt
#&amp;gt; mpg   1.0000000 -0.8521620 -0.8475514 -0.7749843  0.68117191 -0.8676594
#&amp;gt; cyl  -0.8521620  1.0000000  0.9020329  0.8298025 -0.69993811  0.7824958
#&amp;gt; disp -0.8475514  0.9020329  1.0000000  0.7860001 -0.71021393  0.8879799
#&amp;gt; hp   -0.7749843  0.8298025  0.7860001  1.0000000 -0.44258306  0.6505927
#&amp;gt; drat  0.6811719 -0.6999381 -0.7102139 -0.4425831  1.00000000 -0.7124406
#&amp;gt; wt   -0.8676594  0.7824958  0.8879799  0.6505927 -0.71244065  1.0000000
#&amp;gt; qsec  0.4186840 -0.5912421 -0.4336979 -0.7064809  0.09120476 -0.1747159
#&amp;gt; vs    0.6640389 -0.8108118 -0.7104159 -0.7162015  0.44027846 -0.5549157
#&amp;gt; am    0.5998324 -0.5226070 -0.5912270 -0.2196179  0.71271113 -0.6924953
#&amp;gt; gear  0.4802848 -0.4926866 -0.5555692 -0.1161968  0.69961013 -0.5832870
#&amp;gt; carb -0.5509251  0.5269883  0.3949769  0.7437843 -0.09078980  0.4276059
#&amp;gt;             qsec         vs          am       gear        carb
#&amp;gt; mpg   0.41868403  0.6640389  0.59983243  0.4802848 -0.55092507
#&amp;gt; cyl  -0.59124207 -0.8108118 -0.52260705 -0.4926866  0.52698829
#&amp;gt; disp -0.43369788 -0.7104159 -0.59122704 -0.5555692  0.39497686
#&amp;gt; hp   -0.70648093 -0.7162015 -0.21961793 -0.1161968  0.74378428
#&amp;gt; drat  0.09120476  0.4402785  0.71271113  0.6996101 -0.09078980
#&amp;gt; wt   -0.17471588 -0.5549157 -0.69249526 -0.5832870  0.42760594
#&amp;gt; qsec  1.00000000  0.7445354 -0.22986086 -0.2126822 -0.65624923
#&amp;gt; vs    0.74453544  1.0000000  0.16834512  0.2060233 -0.56960714
#&amp;gt; am   -0.22986086  0.1683451  1.00000000  0.7940588  0.05753435
#&amp;gt; gear -0.21268223  0.2060233  0.79405876  1.0000000  0.27407284
#&amp;gt; carb -0.65624923 -0.5696071  0.05753435  0.2740728  1.00000000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Can we focus on subset with dplyr? Nope.&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;dplyr::select(rs, mpg, hp, disp)
#&amp;gt; Error in UseMethod("select_"): no applicable method for 'select_' applied to an object of class "c('matrix', 'double', 'numeric')"
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Riiiiiight! It’s a matrix and dplyr is for data frames.&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;class(rs)
#&amp;gt; [1] "matrix"
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So we can use square brackets with matrices? Or not…&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;vars &amp;lt;- c("mpg", "hp", "disp")
rs[rownames(rs) %in% vars]
#&amp;gt;  [1]  1.0000000 -0.8475514 -0.7749843 -0.8521620  0.9020329  0.8298025
#&amp;gt;  [7] -0.8475514  1.0000000  0.7860001 -0.7749843  0.7860001  1.0000000
#&amp;gt; [13]  0.6811719 -0.7102139 -0.4425831 -0.8676594  0.8879799  0.6505927
#&amp;gt; [19]  0.4186840 -0.4336979 -0.7064809  0.6640389 -0.7104159 -0.7162015
#&amp;gt; [25]  0.5998324 -0.5912270 -0.2196179  0.4802848 -0.5555692 -0.1161968
#&amp;gt; [31] -0.5509251  0.3949769  0.7437843
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Mm, square brackets can take on different functions with matrices. Without a comma, it’s treated like a vector. With a comma, we can separately specify the dimensions.&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;vars &amp;lt;- c("mpg", "hp", "disp")
rs[rownames(rs) %in% vars, colnames(rs) %in% vars]
#&amp;gt;             mpg       disp         hp
#&amp;gt; mpg   1.0000000 -0.8475514 -0.7749843
#&amp;gt; disp -0.8475514  1.0000000  0.7860001
#&amp;gt; hp   -0.7749843  0.7860001  1.0000000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Aha! High correlation between input variables (multicollinearity).&lt;/p&gt;

&lt;p&gt;But seriously, this syntax is pretty ugly.&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;vars &amp;lt;- c("mpg", "hp", "disp")
rs[rownames(rs) %in% vars, colnames(rs) %in% vars]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We diagnosed our multicollinearity problem. What if we want to something a bit more complex like exploring clustering of variables in high dimensional space? Could use exploratory factor analysis.&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;factanal(na.omit(d), factors = 2)
#&amp;gt; 
#&amp;gt; Call:
#&amp;gt; factanal(x = na.omit(d), factors = 2)
#&amp;gt; 
#&amp;gt; Uniquenesses:
#&amp;gt;   mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb 
#&amp;gt; 0.155 0.072 0.101 0.145 0.295 0.174 0.154 0.264 0.160 0.245 0.387 
#&amp;gt; 
#&amp;gt; Loadings:
#&amp;gt;      Factor1 Factor2
#&amp;gt; mpg   0.694  -0.603 
#&amp;gt; cyl  -0.629   0.729 
#&amp;gt; disp -0.730   0.605 
#&amp;gt; hp   -0.335   0.862 
#&amp;gt; drat  0.810  -0.221 
#&amp;gt; wt   -0.809   0.414 
#&amp;gt; qsec -0.162  -0.905 
#&amp;gt; vs    0.280  -0.811 
#&amp;gt; am    0.910   0.110 
#&amp;gt; gear  0.859   0.133 
#&amp;gt; carb          0.781 
#&amp;gt; 
#&amp;gt;                Factor1 Factor2
#&amp;gt; SS loadings      4.506   4.342
#&amp;gt; Proportion Var   0.410   0.395
#&amp;gt; Cumulative Var   0.410   0.804
#&amp;gt; 
#&amp;gt; Test of the hypothesis that 2 factors are sufficient.
#&amp;gt; The chi square statistic is 68.49 on 34 degrees of freedom.
#&amp;gt; The p-value is 0.000414
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;factanal(na.omit(d), factors = 5)
#&amp;gt; 
#&amp;gt; Call:
#&amp;gt; factanal(x = na.omit(d), factors = 5)
#&amp;gt; 
#&amp;gt; Uniquenesses:
#&amp;gt;   mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb 
#&amp;gt; 0.112 0.044 0.012 0.066 0.275 0.005 0.091 0.128 0.136 0.143 0.045 
#&amp;gt; 
#&amp;gt; Loadings:
#&amp;gt;      Factor1 Factor2 Factor3 Factor4 Factor5
#&amp;gt; mpg   0.647  -0.441  -0.483  -0.203         
#&amp;gt; cyl  -0.604   0.694   0.293   0.128         
#&amp;gt; disp -0.645   0.543   0.202   0.451   0.182 
#&amp;gt; hp   -0.264   0.659   0.544   0.205   0.305 
#&amp;gt; drat  0.806  -0.250                         
#&amp;gt; wt   -0.725   0.226   0.420   0.488         
#&amp;gt; qsec -0.184  -0.890  -0.269                 
#&amp;gt; vs    0.242  -0.848  -0.209  -0.155   0.163 
#&amp;gt; am    0.916   0.118                         
#&amp;gt; gear  0.892           0.237                 
#&amp;gt; carb  0.119   0.458   0.853                 
#&amp;gt; 
#&amp;gt;                Factor1 Factor2 Factor3 Factor4 Factor5
#&amp;gt; SS loadings      4.186   3.255   1.739   0.582   0.180
#&amp;gt; Proportion Var   0.381   0.296   0.158   0.053   0.016
#&amp;gt; Cumulative Var   0.381   0.676   0.835   0.887   0.904
#&amp;gt; 
#&amp;gt; Test of the hypothesis that 5 factors are sufficient.
#&amp;gt; The chi square statistic is 2.17 on 10 degrees of freedom.
#&amp;gt; The p-value is 0.995
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So many questions! I’d much rather explore the correlations.&lt;/p&gt;

&lt;p&gt;Let’s try to find all variables with a correlation greater than 0.90. Why doesn’t this work?!&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;col_has_over_90 &amp;lt;- apply(rs, 2, function(x) any(x &amp;gt; .9))
rs[, col_has_over_90]
#&amp;gt;             mpg        cyl       disp         hp        drat         wt
#&amp;gt; mpg   1.0000000 -0.8521620 -0.8475514 -0.7749843  0.68117191 -0.8676594
#&amp;gt; cyl  -0.8521620  1.0000000  0.9020329  0.8298025 -0.69993811  0.7824958
#&amp;gt; disp -0.8475514  0.9020329  1.0000000  0.7860001 -0.71021393  0.8879799
#&amp;gt; hp   -0.7749843  0.8298025  0.7860001  1.0000000 -0.44258306  0.6505927
#&amp;gt; drat  0.6811719 -0.6999381 -0.7102139 -0.4425831  1.00000000 -0.7124406
#&amp;gt; wt   -0.8676594  0.7824958  0.8879799  0.6505927 -0.71244065  1.0000000
#&amp;gt; qsec  0.4186840 -0.5912421 -0.4336979 -0.7064809  0.09120476 -0.1747159
#&amp;gt; vs    0.6640389 -0.8108118 -0.7104159 -0.7162015  0.44027846 -0.5549157
#&amp;gt; am    0.5998324 -0.5226070 -0.5912270 -0.2196179  0.71271113 -0.6924953
#&amp;gt; gear  0.4802848 -0.4926866 -0.5555692 -0.1161968  0.69961013 -0.5832870
#&amp;gt; carb -0.5509251  0.5269883  0.3949769  0.7437843 -0.09078980  0.4276059
#&amp;gt;             qsec         vs          am       gear        carb
#&amp;gt; mpg   0.41868403  0.6640389  0.59983243  0.4802848 -0.55092507
#&amp;gt; cyl  -0.59124207 -0.8108118 -0.52260705 -0.4926866  0.52698829
#&amp;gt; disp -0.43369788 -0.7104159 -0.59122704 -0.5555692  0.39497686
#&amp;gt; hp   -0.70648093 -0.7162015 -0.21961793 -0.1161968  0.74378428
#&amp;gt; drat  0.09120476  0.4402785  0.71271113  0.6996101 -0.09078980
#&amp;gt; wt   -0.17471588 -0.5549157 -0.69249526 -0.5832870  0.42760594
#&amp;gt; qsec  1.00000000  0.7445354 -0.22986086 -0.2126822 -0.65624923
#&amp;gt; vs    0.74453544  1.0000000  0.16834512  0.2060233 -0.56960714
#&amp;gt; am   -0.22986086  0.1683451  1.00000000  0.7940588  0.05753435
#&amp;gt; gear -0.21268223  0.2060233  0.79405876  1.0000000  0.27407284
#&amp;gt; carb -0.65624923 -0.5696071  0.05753435  0.2740728  1.00000000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The diagonal is 1. All cols have a value greater than .90!&lt;/p&gt;

&lt;p&gt;Exclude diagonal:&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;diag(rs) &amp;lt;- NA
col_has_over_90 &amp;lt;- apply(rs, 2, function(x) any(x &amp;gt; .9, na.rm = TRUE))
rs[, col_has_over_90]
#&amp;gt;             cyl       disp
#&amp;gt; mpg  -0.8521620 -0.8475514
#&amp;gt; cyl          NA  0.9020329
#&amp;gt; disp  0.9020329         NA
#&amp;gt; hp    0.8298025  0.7860001
#&amp;gt; drat -0.6999381 -0.7102139
#&amp;gt; wt    0.7824958  0.8879799
#&amp;gt; qsec -0.5912421 -0.4336979
#&amp;gt; vs   -0.8108118 -0.7104159
#&amp;gt; am   -0.5226070 -0.5912270
#&amp;gt; gear -0.4926866 -0.5555692
#&amp;gt; carb  0.5269883  0.3949769
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Again, this syntax is pretty gross. Imagine showing this to a beginner and asking them to write down as much as they remember. Probably not much would be my guess.&lt;/p&gt;

&lt;p&gt;What about vizualising correlations? I’d suggest giving up at this point.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://svbtleusercontent.com/vCAdmmx28nbzoKYcGVrh210xspap.gif" rel="nofollow"&gt;&lt;img src="https://svbtleusercontent.com/vCAdmmx28nbzoKYcGVrh210xspap_small.gif" alt="depressed.gif"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="exploring-data-with-the-tidyverse_2"&gt;Exploring data with the tidyverse &lt;a class="head_anchor" href="#exploring-data-with-the-tidyverse_2" rel="nofollow"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Remember me as postgrad? I’d discovered the tidyverse and really liked it, because &lt;em&gt;exploring&lt;/em&gt; data with the tidyverse is easy.&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;library(tidyverse)
d %&amp;gt;% 
  select(mpg:drat) %&amp;gt;% 
  gather() %&amp;gt;% 
  ggplot(aes(value)) +
    geom_histogram() +
    facet_wrap(~key, scales = "free")
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href="https://svbtleusercontent.com/v8a6SMH3qEUWDAnK2fbtr60xspap.png" rel="nofollow"&gt;&lt;img src="https://svbtleusercontent.com/v8a6SMH3qEUWDAnK2fbtr60xspap_small.png" alt="unnamed-chunk-17-1.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Can’t we have this for correlations? I don’t want to do any crazy mathematical operations or statistical tests. I just want to quickly explore the value. It’s not a big ask.&lt;/p&gt;

&lt;p&gt;Good news! This is why I developed corrr as a tidyverse-style package for exploring correlations in R.&lt;/p&gt;
&lt;h1 id="a-hrefhttpgithubcomdrsimonjcorrrcorrra_1"&gt;
&lt;a href="http://github.com/drsimonj/corrr/" rel="nofollow"&gt;corrr&lt;/a&gt; &lt;a class="head_anchor" href="#a-hrefhttpgithubcomdrsimonjcorrrcorrra_1" rel="nofollow"&gt;#&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://svbtleusercontent.com/oDU6kAGErMQCpLiuDJoTRX0xspap.png" rel="nofollow"&gt;&lt;img src="https://svbtleusercontent.com/oDU6kAGErMQCpLiuDJoTRX0xspap_small.png" alt="corrr_logo.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here’s a quick example to get a feel for the syntax:&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;library(corrr)
d %&amp;gt;% 
  correlate() %&amp;gt;% 
  focus(mpg:drat, mirror = TRUE) %&amp;gt;% 
  network_plot()
#&amp;gt; 
#&amp;gt; Correlation method: 'pearson'
#&amp;gt; Missing treated using: 'pairwise.complete.obs'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href="https://svbtleusercontent.com/u5EHjmYYpN2zSdm5i3ZTri0xspap.png" rel="nofollow"&gt;&lt;img src="https://svbtleusercontent.com/u5EHjmYYpN2zSdm5i3ZTri0xspap_small.png" alt="unnamed-chunk-18-1.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The first objective of corrr was to write a new function that uses &lt;code class="prettyprint"&gt;cor()&lt;/code&gt; but:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Handles missing by default with &lt;code class="prettyprint"&gt;use = "pairwise.complete.obs"&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;  Stops diagonal from getting in the way by setting it to &lt;code class="prettyprint"&gt;NA&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;  Makes it possible to use tidyverse tools by returning a &lt;code class="prettyprint"&gt;data.frame&lt;/code&gt; instead of a &lt;code class="prettyprint"&gt;matrix&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, meet &lt;code class="prettyprint"&gt;correlate()&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;rs &amp;lt;- correlate(d)
#&amp;gt; 
#&amp;gt; Correlation method: 'pearson'
#&amp;gt; Missing treated using: 'pairwise.complete.obs'
rs
#&amp;gt; # A tibble: 11 x 12
#&amp;gt;    rowname     mpg     cyl    disp      hp     drat      wt     qsec
#&amp;gt;    &amp;lt;chr&amp;gt;     &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;
#&amp;gt;  1 mpg      NA      -0.852  -0.848  -0.775   0.681   -0.868   0.419 
#&amp;gt;  2 cyl      -0.852  NA       0.902   0.830  -0.700    0.782  -0.591 
#&amp;gt;  3 disp     -0.848   0.902  NA       0.786  -0.710    0.888  -0.434 
#&amp;gt;  4 hp       -0.775   0.830   0.786  NA      -0.443    0.651  -0.706 
#&amp;gt;  5 drat      0.681  -0.700  -0.710  -0.443  NA       -0.712   0.0912
#&amp;gt;  6 wt       -0.868   0.782   0.888   0.651  -0.712   NA      -0.175 
#&amp;gt;  7 qsec      0.419  -0.591  -0.434  -0.706   0.0912  -0.175  NA     
#&amp;gt;  8 vs        0.664  -0.811  -0.710  -0.716   0.440   -0.555   0.745 
#&amp;gt;  9 am        0.600  -0.523  -0.591  -0.220   0.713   -0.692  -0.230 
#&amp;gt; 10 gear      0.480  -0.493  -0.556  -0.116   0.700   -0.583  -0.213 
#&amp;gt; 11 carb     -0.551   0.527   0.395   0.744  -0.0908   0.428  -0.656 
#&amp;gt; # ... with 4 more variables: vs &amp;lt;dbl&amp;gt;, am &amp;lt;dbl&amp;gt;, gear &amp;lt;dbl&amp;gt;, carb &amp;lt;dbl&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Same args as &lt;code class="prettyprint"&gt;cor()&lt;/code&gt; with some extras&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;correlate(d, method = "spearman", diagonal = 1)
#&amp;gt; 
#&amp;gt; Correlation method: 'spearman'
#&amp;gt; Missing treated using: 'pairwise.complete.obs'
#&amp;gt; # A tibble: 11 x 12
#&amp;gt;    rowname    mpg    cyl   disp     hp    drat     wt    qsec     vs
#&amp;gt;    &amp;lt;chr&amp;gt;    &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;
#&amp;gt;  1 mpg      1.00  -0.911 -0.909 -0.889  0.651  -0.886  0.467   0.707
#&amp;gt;  2 cyl     -0.911  1.00   0.928  0.899 -0.679   0.858 -0.572  -0.814
#&amp;gt;  3 disp    -0.909  0.928  1.00   0.845 -0.684   0.898 -0.460  -0.724
#&amp;gt;  4 hp      -0.889  0.899  0.845  1.00  -0.504   0.763 -0.660  -0.747
#&amp;gt;  5 drat     0.651 -0.679 -0.684 -0.504  1.00   -0.750  0.0919  0.447
#&amp;gt;  6 wt      -0.886  0.858  0.898  0.763 -0.750   1.00  -0.225  -0.587
#&amp;gt;  7 qsec     0.467 -0.572 -0.460 -0.660  0.0919 -0.225  1.00    0.792
#&amp;gt;  8 vs       0.707 -0.814 -0.724 -0.747  0.447  -0.587  0.792   1.00 
#&amp;gt;  9 am       0.562 -0.522 -0.624 -0.326  0.687  -0.738 -0.203   0.168
#&amp;gt; 10 gear     0.543 -0.564 -0.594 -0.316  0.745  -0.676 -0.148   0.283
#&amp;gt; 11 carb    -0.657  0.580  0.540  0.723 -0.125   0.500 -0.659  -0.634
#&amp;gt; # ... with 3 more variables: am &amp;lt;dbl&amp;gt;, gear &amp;lt;dbl&amp;gt;, carb &amp;lt;dbl&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The output of &lt;code class="prettyprint"&gt;correlate()&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  A helpful message to remind us of what’s happening (turned off with &lt;code class="prettyprint"&gt;quiet = TRUE&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;  A correlation data frame (tibble) with class &lt;code class="prettyprint"&gt;cor_df&lt;/code&gt; and:

&lt;ul&gt;
&lt;li&gt;  Diagonals set to &lt;code class="prettyprint"&gt;NA&lt;/code&gt; (adjusted via &lt;code class="prettyprint"&gt;diagonal = NA&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;  A &lt;code class="prettyprint"&gt;"rowname"&lt;/code&gt; colum rather than rownames (more &lt;a href="https://adv-r.hadley.nz/vectors-chap.html#rownames" rel="nofollow"&gt;here&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It’s now super easy to pipe straight into tidyverse functions that work with data frames. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;rs %&amp;gt;% 
  select(mpg:drat) %&amp;gt;% 
  gather() %&amp;gt;% 
  ggplot(aes(value)) +
    geom_histogram() +
    facet_wrap(~key)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href="https://svbtleusercontent.com/tJ2drcGTPLtBBpks6AkPBP0xspap.png" rel="nofollow"&gt;&lt;img src="https://svbtleusercontent.com/tJ2drcGTPLtBBpks6AkPBP0xspap_small.png" alt="unnamed-chunk-21-1.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;How about that challenge to find cols with a correlation greater than .9?&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;any_over_90 &amp;lt;- function(x) any(x &amp;gt; .9, na.rm = TRUE)
rs %&amp;gt;% select_if(any_over_90)
#&amp;gt; # A tibble: 11 x 3
#&amp;gt;    rowname     cyl    disp
#&amp;gt;    &amp;lt;chr&amp;gt;     &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;
#&amp;gt;  1 mpg      -0.852  -0.848
#&amp;gt;  2 cyl      NA       0.902
#&amp;gt;  3 disp      0.902  NA    
#&amp;gt;  4 hp        0.830   0.786
#&amp;gt;  5 drat     -0.700  -0.710
#&amp;gt;  6 wt        0.782   0.888
#&amp;gt;  7 qsec     -0.591  -0.434
#&amp;gt;  8 vs       -0.811  -0.710
#&amp;gt;  9 am       -0.523  -0.591
#&amp;gt; 10 gear     -0.493  -0.556
#&amp;gt; 11 carb      0.527   0.395
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href="https://svbtleusercontent.com/mf3pUQeQCFNio3s5ur5hJD0xspap.gif" rel="nofollow"&gt;&lt;img src="https://svbtleusercontent.com/mf3pUQeQCFNio3s5ur5hJD0xspap_small.gif" alt="self_five.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here’s a diagram to get you started after &lt;code class="prettyprint"&gt;library(corrr)&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://svbtleusercontent.com/jCGEz9c5hotdLGYy9ewnHP0xspap.png" rel="nofollow"&gt;&lt;img src="https://svbtleusercontent.com/jCGEz9c5hotdLGYy9ewnHP0xspap_small.png" alt="corrr_flow.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="correlation-data-frames-are-not-tidy_2"&gt;Correlation data frames are not tidy &lt;a class="head_anchor" href="#correlation-data-frames-are-not-tidy_2" rel="nofollow"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Tidy data functions target columns OR rows, but I found myself frequently wanting to make changes to both. So next came the ability to &lt;code class="prettyprint"&gt;focus()&lt;/code&gt; on columns and rows. This function acts just like dplyr’s &lt;code class="prettyprint"&gt;select()&lt;/code&gt;, but also excludes the selected colums from the rows (or everything else with the &lt;code class="prettyprint"&gt;mirror&lt;/code&gt; argument).&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;rs %&amp;gt;% 
  focus(mpg, disp, hp)
#&amp;gt; # A tibble: 8 x 4
#&amp;gt;   rowname    mpg   disp     hp
#&amp;gt;   &amp;lt;chr&amp;gt;    &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;
#&amp;gt; 1 cyl     -0.852  0.902  0.830
#&amp;gt; 2 drat     0.681 -0.710 -0.443
#&amp;gt; 3 wt      -0.868  0.888  0.651
#&amp;gt; 4 qsec     0.419 -0.434 -0.706
#&amp;gt; 5 vs       0.664 -0.710 -0.716
#&amp;gt; 6 am       0.600 -0.591 -0.220
#&amp;gt; 7 gear     0.480 -0.556 -0.116
#&amp;gt; 8 carb    -0.551  0.395  0.744
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;rs %&amp;gt;% 
  focus(-mpg, -disp, -hp)
#&amp;gt; # A tibble: 3 x 9
#&amp;gt;   rowname    cyl   drat     wt   qsec     vs     am   gear   carb
#&amp;gt;   &amp;lt;chr&amp;gt;    &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;
#&amp;gt; 1 mpg     -0.852  0.681 -0.868  0.419  0.664  0.600  0.480 -0.551
#&amp;gt; 2 disp     0.902 -0.710  0.888 -0.434 -0.710 -0.591 -0.556  0.395
#&amp;gt; 3 hp       0.830 -0.443  0.651 -0.706 -0.716 -0.220 -0.116  0.744
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;rs %&amp;gt;% 
  focus(mpg, disp, hp, mirror = TRUE)
#&amp;gt; # A tibble: 3 x 4
#&amp;gt;   rowname     mpg    disp      hp
#&amp;gt;   &amp;lt;chr&amp;gt;     &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;
#&amp;gt; 1 mpg      NA      -0.848  -0.775
#&amp;gt; 2 disp     -0.848  NA       0.786
#&amp;gt; 3 hp       -0.775   0.786  NA
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;rs %&amp;gt;% 
  focus(matches("^d"))
#&amp;gt; # A tibble: 9 x 3
#&amp;gt;   rowname   disp    drat
#&amp;gt;   &amp;lt;chr&amp;gt;    &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;
#&amp;gt; 1 mpg     -0.848  0.681 
#&amp;gt; 2 cyl      0.902 -0.700 
#&amp;gt; 3 hp       0.786 -0.443 
#&amp;gt; 4 wt       0.888 -0.712 
#&amp;gt; 5 qsec    -0.434  0.0912
#&amp;gt; 6 vs      -0.710  0.440 
#&amp;gt; 7 am      -0.591  0.713 
#&amp;gt; 8 gear    -0.556  0.700 
#&amp;gt; 9 carb     0.395 -0.0908
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;rs %&amp;gt;% 
  focus_if(any_over_90, mirror = TRUE)
#&amp;gt; # A tibble: 2 x 3
#&amp;gt;   rowname    cyl   disp
#&amp;gt;   &amp;lt;chr&amp;gt;    &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;
#&amp;gt; 1 cyl     NA      0.902
#&amp;gt; 2 disp     0.902 NA
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One of my favourite uses is to &lt;code class="prettyprint"&gt;focus()&lt;/code&gt; on correlations of one variable with all others and plot the results.&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;rs %&amp;gt;% 
  focus(mpg)
#&amp;gt; # A tibble: 10 x 2
#&amp;gt;    rowname    mpg
#&amp;gt;    &amp;lt;chr&amp;gt;    &amp;lt;dbl&amp;gt;
#&amp;gt;  1 cyl     -0.852
#&amp;gt;  2 disp    -0.848
#&amp;gt;  3 hp      -0.775
#&amp;gt;  4 drat     0.681
#&amp;gt;  5 wt      -0.868
#&amp;gt;  6 qsec     0.419
#&amp;gt;  7 vs       0.664
#&amp;gt;  8 am       0.600
#&amp;gt;  9 gear     0.480
#&amp;gt; 10 carb    -0.551
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;rs %&amp;gt;%
  focus(mpg) %&amp;gt;%
  mutate(rowname = reorder(rowname, mpg)) %&amp;gt;%
  ggplot(aes(rowname, mpg)) +
    geom_col() + coord_flip()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href="https://svbtleusercontent.com/iNTqBGjoFnZCbxPnRhHhF40xspap.png" rel="nofollow"&gt;&lt;img src="https://svbtleusercontent.com/iNTqBGjoFnZCbxPnRhHhF40xspap_small.png" alt="unnamed-chunk-29-1.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also &lt;code class="prettyprint"&gt;rearrange()&lt;/code&gt; the entire data frame based on clustering algorithms:&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;rs %&amp;gt;% rearrange()
#&amp;gt; # A tibble: 11 x 12
#&amp;gt;    rowname       am    gear     drat      wt    disp     mpg     cyl
#&amp;gt;    &amp;lt;chr&amp;gt;      &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;
#&amp;gt;  1 am       NA        0.794   0.713   -0.692  -0.591   0.600  -0.523
#&amp;gt;  2 gear      0.794   NA       0.700   -0.583  -0.556   0.480  -0.493
#&amp;gt;  3 drat      0.713    0.700  NA       -0.712  -0.710   0.681  -0.700
#&amp;gt;  4 wt       -0.692   -0.583  -0.712   NA       0.888  -0.868   0.782
#&amp;gt;  5 disp     -0.591   -0.556  -0.710    0.888  NA      -0.848   0.902
#&amp;gt;  6 mpg       0.600    0.480   0.681   -0.868  -0.848  NA      -0.852
#&amp;gt;  7 cyl      -0.523   -0.493  -0.700    0.782   0.902  -0.852  NA    
#&amp;gt;  8 vs        0.168    0.206   0.440   -0.555  -0.710   0.664  -0.811
#&amp;gt;  9 hp       -0.220   -0.116  -0.443    0.651   0.786  -0.775   0.830
#&amp;gt; 10 carb      0.0575   0.274  -0.0908   0.428   0.395  -0.551   0.527
#&amp;gt; 11 qsec     -0.230   -0.213   0.0912  -0.175  -0.434   0.419  -0.591
#&amp;gt; # ... with 4 more variables: vs &amp;lt;dbl&amp;gt;, hp &amp;lt;dbl&amp;gt;, carb &amp;lt;dbl&amp;gt;, qsec &amp;lt;dbl&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or &lt;code class="prettyprint"&gt;shave()&lt;/code&gt; the upper/lower triangle to missing values&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;rs %&amp;gt;% shave()
#&amp;gt; # A tibble: 11 x 12
#&amp;gt;    rowname     mpg     cyl    disp      hp     drat      wt    qsec
#&amp;gt;    &amp;lt;chr&amp;gt;     &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;
#&amp;gt;  1 mpg      NA      NA      NA      NA      NA       NA      NA    
#&amp;gt;  2 cyl      -0.852  NA      NA      NA      NA       NA      NA    
#&amp;gt;  3 disp     -0.848   0.902  NA      NA      NA       NA      NA    
#&amp;gt;  4 hp       -0.775   0.830   0.786  NA      NA       NA      NA    
#&amp;gt;  5 drat      0.681  -0.700  -0.710  -0.443  NA       NA      NA    
#&amp;gt;  6 wt       -0.868   0.782   0.888   0.651  -0.712   NA      NA    
#&amp;gt;  7 qsec      0.419  -0.591  -0.434  -0.706   0.0912  -0.175  NA    
#&amp;gt;  8 vs        0.664  -0.811  -0.710  -0.716   0.440   -0.555   0.745
#&amp;gt;  9 am        0.600  -0.523  -0.591  -0.220   0.713   -0.692  -0.230
#&amp;gt; 10 gear      0.480  -0.493  -0.556  -0.116   0.700   -0.583  -0.213
#&amp;gt; 11 carb     -0.551   0.527   0.395   0.744  -0.0908   0.428  -0.656
#&amp;gt; # ... with 4 more variables: vs &amp;lt;dbl&amp;gt;, am &amp;lt;dbl&amp;gt;, gear &amp;lt;dbl&amp;gt;, carb &amp;lt;dbl&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or &lt;code class="prettyprint"&gt;stretch()&lt;/code&gt; into a more tidy format&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;rs %&amp;gt;% stretch()
#&amp;gt; # A tibble: 121 x 3
#&amp;gt;    x     y           r
#&amp;gt;    &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;   &amp;lt;dbl&amp;gt;
#&amp;gt;  1 mpg   mpg    NA    
#&amp;gt;  2 mpg   cyl    -0.852
#&amp;gt;  3 mpg   disp   -0.848
#&amp;gt;  4 mpg   hp     -0.775
#&amp;gt;  5 mpg   drat    0.681
#&amp;gt;  6 mpg   wt     -0.868
#&amp;gt;  7 mpg   qsec    0.419
#&amp;gt;  8 mpg   vs      0.664
#&amp;gt;  9 mpg   am      0.600
#&amp;gt; 10 mpg   gear    0.480
#&amp;gt; # ... with 111 more rows
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And combine with tidyverse to do things like get a histogram of all correlations:&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;rs %&amp;gt;%
  shave() %&amp;gt;% 
  stretch(na.rm = FALSE) %&amp;gt;% 
  ggplot(aes(r)) +
    geom_histogram()
#&amp;gt; `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
#&amp;gt; Warning: Removed 66 rows containing non-finite values (stat_bin).
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href="https://svbtleusercontent.com/pA7uBfAFLB6dF3YTyL8RmF0xspap.png" rel="nofollow"&gt;&lt;img src="https://svbtleusercontent.com/pA7uBfAFLB6dF3YTyL8RmF0xspap_small.png" alt="unnamed-chunk-33-1.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As a tidyverse-style package, it’s important that the functions take a &lt;strong&gt;&lt;code class="prettyprint"&gt;data.frame&lt;/code&gt; in, &lt;code class="prettyprint"&gt;data.frame&lt;/code&gt; out&lt;/strong&gt; principle. This let’s you flow through pipelines and intermix functions from many packages with ease.&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;rs %&amp;gt;%
  focus(mpg:drat, mirror = TRUE) %&amp;gt;% 
  rearrange() %&amp;gt;% 
  shave(upper = FALSE) %&amp;gt;% 
  select(-hp) %&amp;gt;% 
  filter(rowname != "drat")
#&amp;gt; # A tibble: 4 x 5
#&amp;gt;   rowname    cyl     mpg    disp   drat
#&amp;gt;   &amp;lt;chr&amp;gt;    &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;
#&amp;gt; 1 hp       0.830  -0.775   0.786 -0.443
#&amp;gt; 2 cyl     NA      -0.852   0.902 -0.700
#&amp;gt; 3 mpg     NA      NA      -0.848  0.681
#&amp;gt; 4 disp    NA      NA      NA     -0.710
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="seems-cool-but-it39s-still-hard-to-get-quick_2"&gt;Seems cool, but it’s still hard to get quick insights &lt;a class="head_anchor" href="#seems-cool-but-it39s-still-hard-to-get-quick_2" rel="nofollow"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;corrr also provides some helpful methods to interpret/visualize the correlations. You can get &lt;code class="prettyprint"&gt;fashion&lt;/code&gt;able:&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;rs %&amp;gt;% fashion()
#&amp;gt;    rowname  mpg  cyl disp   hp drat   wt qsec   vs   am gear carb
#&amp;gt; 1      mpg      -.85 -.85 -.77  .68 -.87  .42  .66  .60  .48 -.55
#&amp;gt; 2      cyl -.85       .90  .83 -.70  .78 -.59 -.81 -.52 -.49  .53
#&amp;gt; 3     disp -.85  .90       .79 -.71  .89 -.43 -.71 -.59 -.56  .39
#&amp;gt; 4       hp -.77  .83  .79      -.44  .65 -.71 -.72 -.22 -.12  .74
#&amp;gt; 5     drat  .68 -.70 -.71 -.44      -.71  .09  .44  .71  .70 -.09
#&amp;gt; 6       wt -.87  .78  .89  .65 -.71      -.17 -.55 -.69 -.58  .43
#&amp;gt; 7     qsec  .42 -.59 -.43 -.71  .09 -.17       .74 -.23 -.21 -.66
#&amp;gt; 8       vs  .66 -.81 -.71 -.72  .44 -.55  .74       .17  .21 -.57
#&amp;gt; 9       am  .60 -.52 -.59 -.22  .71 -.69 -.23  .17       .79  .06
#&amp;gt; 10    gear  .48 -.49 -.56 -.12  .70 -.58 -.21  .21  .79       .27
#&amp;gt; 11    carb -.55  .53  .39  .74 -.09  .43 -.66 -.57  .06  .27
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;rs %&amp;gt;%
  focus(mpg:drat, mirror = TRUE) %&amp;gt;% 
  rearrange() %&amp;gt;% 
  shave(upper = FALSE) %&amp;gt;% 
  select(-hp) %&amp;gt;% 
  filter(rowname != "drat") %&amp;gt;% 
  fashion()
#&amp;gt;   rowname  cyl  mpg disp drat
#&amp;gt; 1      hp  .83 -.77  .79 -.44
#&amp;gt; 2     cyl      -.85  .90 -.70
#&amp;gt; 3     mpg           -.85  .68
#&amp;gt; 4    disp                -.71
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Make an &lt;code class="prettyprint"&gt;rplot()&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;rs %&amp;gt;% rplot()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href="https://svbtleusercontent.com/vSUUWL5Ur8piZsWQRoqNAb0xspap.png" rel="nofollow"&gt;&lt;img src="https://svbtleusercontent.com/vSUUWL5Ur8piZsWQRoqNAb0xspap_small.png" alt="unnamed-chunk-37-1.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;rs %&amp;gt;%
  rearrange(method = "MDS", absolute = FALSE) %&amp;gt;%
  shave() %&amp;gt;% 
  rplot(shape = 15, colors = c("red", "green"))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href="https://svbtleusercontent.com/tWqQrSjZDakStTWqhuVNk60xspap.png" rel="nofollow"&gt;&lt;img src="https://svbtleusercontent.com/tWqQrSjZDakStTWqhuVNk60xspap_small.png" alt="unnamed-chunk-38-1.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Or make a &lt;code class="prettyprint"&gt;network_plot()&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;rs %&amp;gt;% network_plot(min_cor = .6)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href="https://svbtleusercontent.com/rhRX4PHzybDmmtXi2tfwYY0xspap.png" rel="nofollow"&gt;&lt;img src="https://svbtleusercontent.com/rhRX4PHzybDmmtXi2tfwYY0xspap_small.png" alt="unnamed-chunk-39-1.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But if you want to get custom, check out &lt;a href="https://drsimonj.svbtle.com/how-to-create-correlation-network-plots-with-corrr-and-ggraph" rel="nofollow"&gt;my blog post combining corrr with ggraph&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="latest-addition-by-a-hrefhttpsgithubcomedgara_2"&gt;Latest addition by &lt;a href="https://github.com/edgararuiz" rel="nofollow"&gt;Edgar Ruiz&lt;/a&gt; &lt;a class="head_anchor" href="#latest-addition-by-a-hrefhttpsgithubcomedgara_2" rel="nofollow"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;So corrr was starting to look pretty good, but these days it’s not all me. There are &lt;a href="https://github.com/drsimonj/corrr/graphs/contributors" rel="nofollow"&gt;three official contributors&lt;/a&gt;, and many others who took the time to raise &lt;a href="https://github.com/drsimonj/corrr/issues?utf8=%E2%9C%93&amp;amp;q=is%3Aissue" rel="nofollow"&gt;issues that identified bugs or suggested features&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;One of the latest editions by Edgar Ruiz lets you &lt;code class="prettyprint"&gt;correlate()&lt;/code&gt; data frames in databases. To demonstrate (copying Edgar’s vignette), here’s a simple SQLite database with data pointer, &lt;code class="prettyprint"&gt;db_mtcars&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;con &amp;lt;- DBI::dbConnect(RSQLite::SQLite(), path = ":dbname:")
db_mtcars &amp;lt;- copy_to(con, mtcars)
class(db_mtcars)
#&amp;gt; [1] "tbl_dbi"  "tbl_sql"  "tbl_lazy" "tbl"
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code class="prettyprint"&gt;correlate()&lt;/code&gt; detects DB backend, uses &lt;code class="prettyprint"&gt;tidyeval&lt;/code&gt; to calculate correlations in the database, and returns correlation data frame.&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;db_mtcars %&amp;gt;% correlate(use = "complete.obs")
#&amp;gt; 
#&amp;gt; Correlation method: 'pearson'
#&amp;gt; Missing treated using: 'complete.obs'
#&amp;gt; # A tibble: 11 x 12
#&amp;gt;    rowname     mpg     cyl    disp      hp     drat      wt     qsec
#&amp;gt;    &amp;lt;chr&amp;gt;     &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;
#&amp;gt;  1 mpg      NA      -0.852  -0.848  -0.776   0.681   -0.868   0.419 
#&amp;gt;  2 cyl      -0.852  NA       0.902   0.832  -0.700    0.782  -0.591 
#&amp;gt;  3 disp     -0.848   0.902  NA       0.791  -0.710    0.888  -0.434 
#&amp;gt;  4 hp       -0.776   0.832   0.791  NA      -0.449    0.659  -0.708 
#&amp;gt;  5 drat      0.681  -0.700  -0.710  -0.449  NA       -0.712   0.0912
#&amp;gt;  6 wt       -0.868   0.782   0.888   0.659  -0.712   NA      -0.175 
#&amp;gt;  7 qsec      0.419  -0.591  -0.434  -0.708   0.0912  -0.175  NA     
#&amp;gt;  8 vs        0.664  -0.811  -0.710  -0.723   0.440   -0.555   0.745 
#&amp;gt;  9 am        0.600  -0.523  -0.591  -0.243   0.713   -0.692  -0.230 
#&amp;gt; 10 gear      0.480  -0.493  -0.556  -0.126   0.700   -0.583  -0.213 
#&amp;gt; 11 carb     -0.551   0.527   0.395   0.750  -0.0908   0.428  -0.656 
#&amp;gt; # ... with 4 more variables: vs &amp;lt;dbl&amp;gt;, am &amp;lt;dbl&amp;gt;, gear &amp;lt;dbl&amp;gt;, carb &amp;lt;dbl&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here’s another example using spark:&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;sc &amp;lt;- sparklyr::spark_connect(master = "local")
#&amp;gt; * Using Spark: 2.1.0
mtcars_tbl &amp;lt;- copy_to(sc, mtcars)
correlate(mtcars_tbl, use = "complete.obs")
#&amp;gt; 
#&amp;gt; Correlation method: 'pearson'
#&amp;gt; Missing treated using: 'complete.obs'
#&amp;gt; # A tibble: 11 x 12
#&amp;gt;    rowname     mpg     cyl    disp      hp     drat      wt     qsec
#&amp;gt;    &amp;lt;chr&amp;gt;     &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;
#&amp;gt;  1 mpg      NA      -0.852  -0.848  -0.776   0.681   -0.868   0.419 
#&amp;gt;  2 cyl      -0.852  NA       0.902   0.832  -0.700    0.782  -0.591 
#&amp;gt;  3 disp     -0.848   0.902  NA       0.791  -0.710    0.888  -0.434 
#&amp;gt;  4 hp       -0.776   0.832   0.791  NA      -0.449    0.659  -0.708 
#&amp;gt;  5 drat      0.681  -0.700  -0.710  -0.449  NA       -0.712   0.0912
#&amp;gt;  6 wt       -0.868   0.782   0.888   0.659  -0.712   NA      -0.175 
#&amp;gt;  7 qsec      0.419  -0.591  -0.434  -0.708   0.0912  -0.175  NA     
#&amp;gt;  8 vs        0.664  -0.811  -0.710  -0.723   0.440   -0.555   0.745 
#&amp;gt;  9 am        0.600  -0.523  -0.591  -0.243   0.713   -0.692  -0.230 
#&amp;gt; 10 gear      0.480  -0.493  -0.556  -0.126   0.700   -0.583  -0.213 
#&amp;gt; 11 carb     -0.551   0.527   0.395   0.750  -0.0908   0.428  -0.656 
#&amp;gt; # ... with 4 more variables: vs &amp;lt;dbl&amp;gt;, am &amp;lt;dbl&amp;gt;, gear &amp;lt;dbl&amp;gt;, carb &amp;lt;dbl&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So no data is too big for corrr now! This opens up some nice possibilities. For example, most regression-based modelling packages (like &lt;a href="http://lavaan.ugent.be/" rel="nofollow"&gt;lavaan&lt;/a&gt;) cannot operate on large data sets in a database. However, they typically accept a correlation matrix as input. So you can use corrr to extract correlations from large data sets and do more complex modelling in memory.&lt;/p&gt;
&lt;h2 id="thanks-simon-but-i39m-not-interested_2"&gt;Thanks Simon, but I’m not interested. &lt;a class="head_anchor" href="#thanks-simon-but-i39m-not-interested_2" rel="nofollow"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;In case corrr doesn’t float your boat, some other packages you might be interested in are &lt;a href="https://cran.r-project.org/web/packages/corrplot/vignettes/corrplot-intro.html" rel="nofollow"&gt;corrplot&lt;/a&gt; for &lt;code class="prettyprint"&gt;rplot()&lt;/code&gt; style viz, and &lt;a href="https://github.com/dgrtwo/widyr" rel="nofollow"&gt;widyr&lt;/a&gt; for a more general way to handle relational data sets in a tidy framework.&lt;/p&gt;
&lt;h2 id="sign-off_2"&gt;Sign off &lt;a class="head_anchor" href="#sign-off_2" rel="nofollow"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Thanks for reading and I hope this was useful for you.&lt;/p&gt;

&lt;p&gt;For updates of recent blog posts, follow &lt;a href="https://twitter.com/drsimonj" rel="nofollow"&gt;@drsimonj&lt;/a&gt; on Twitter, or email me at &lt;a href="mailto:drsimonjackson@gmail.com" rel="nofollow"&gt;drsimonjackson@gmail.com&lt;/a&gt; to get in touch.&lt;/p&gt;

&lt;p&gt;If you’d like the code that produced this blog, check out the &lt;a href="https://github.com/drsimonj/blogR" rel="nofollow"&gt;blogR GitHub repository&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>tag:drsimonj.svbtle.com,2014:Post/does-financial-support-in-australia-favour-residents-born-elsewhere-responding-to-racism-with-data</id>
    <published>2018-05-30T08:09:45-07:00</published>
    <updated>2018-05-30T08:09:45-07:00</updated>
    <link rel="alternate" type="text/html" href="https://drsimonj.svbtle.com/does-financial-support-in-australia-favour-residents-born-elsewhere-responding-to-racism-with-data"/>
    <title>Does financial support in Australia favour residents born elsewhere? Responding to racism with data</title>
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Seeing a racist outburst made me wonder whether the Australian Government unfairly supports people based on their background. Using data from the Australian Government and Bureau of Statistics, I couldn’t find compelling evidence of this being true. Don’t believe me? Read on and see what you make of the data.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;&lt;h2 id="australian-racism-goes-viral-again_2"&gt;Australian racism goes viral, again &lt;a class="head_anchor" href="#australian-racism-goes-viral-again_2" rel="nofollow"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Australian racism went viral again this year when a man was filmed abusing staff at &lt;a href="https://www.humanservices.gov.au/individuals/centrelink" rel="nofollow"&gt;Centrelink&lt;/a&gt;, which delivers social security payments and services to Australians (&lt;a href="http://www.news.com.au/national/south-australia/centrelink-to-boost-security-after-racist-rant/news-story/78ed767ca1722691dacaf5257d327cd3" rel="nofollow"&gt;see story here&lt;/a&gt;). The man yells that he didn’t vote for multiculturalism and that Centrelink is supporting everyone except “Australians”. It is distressing to watch, especially as someone whose ancestors found a home in Australia having escaped persecution. He can’t take it back, but the man did publically apologise and may be suffering from mental illness (&lt;a href="http://www.newshub.co.nz/home/world/2018/03/australian-man-apologises-for-racist-tirade-at-centrelink.html" rel="nofollow"&gt;see story here&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;This topic is still polarising. Many of us want to vilify this man while others may applaud him. But hate begets hate, and fighting fire with fire makes things worse. As a data scientist, the best way I know to respond to the assumptions and stereotypes that fuel racism is with evidence. So, without prejudice, let us investigate the data and uncover to whom the Australian government provides support through Centrelink.&lt;/p&gt;
&lt;h2 id="centrelink-supports-australians-so-who-are-we_2"&gt;Centrelink supports Australians, so who are we talking about? &lt;a class="head_anchor" href="#centrelink-supports-australians-so-who-are-we_2" rel="nofollow"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;With rare exceptions, &lt;strong&gt;Centrelink supports Australian Residents living in Australia&lt;/strong&gt; (see &lt;a href="https://www.humanservices.gov.au/individuals/subjects/payments-visa-holders#a3" rel="nofollow"&gt;here&lt;/a&gt; and &lt;a href="https://www.humanservices.gov.au/individuals/enablers/residence-descriptions" rel="nofollow"&gt;here&lt;/a&gt;). So, the claim that Centrelink supports everyone but Australians in misguided. Perhaps the reference to “&lt;a href="https://en.wikipedia.org/wiki/Multiculturalism" rel="nofollow"&gt;multiculturalism&lt;/a&gt;” can direct us to a more testable question. Centrelink offers support to Australian &lt;em&gt;residents&lt;/em&gt; who can be born anywhere in the world. So in this article, I’ll use publically accessible data to investigate differences in support given to residents born in Australia or elsewhere.&lt;/p&gt;
&lt;h2 id="estimated-residential-population_2"&gt;Estimated Residential Population &lt;a class="head_anchor" href="#estimated-residential-population_2" rel="nofollow"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;The Figure below shows changes in Australia’s &lt;a href="http://www.abs.gov.au/websitedbs/censushome.nsf/home/factsheetspm?opendocument&amp;amp;navpos=450" rel="nofollow"&gt;Estimated Residential Population&lt;/a&gt;, which is an official value published by the &lt;a href="http://www.abs.gov.au/" rel="nofollow"&gt;Australian Bureau of Statistics&lt;/a&gt; and used for policy formation and decision making.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://svbtleusercontent.com/xpMF9Qmbwx2hx1xgPKYuMX0xspap.png" rel="nofollow"&gt;&lt;img src="https://svbtleusercontent.com/xpMF9Qmbwx2hx1xgPKYuMX0xspap_small.png" alt="erp_over_time-1.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The residential population has been increasing from about 17 million in 1992 to over 24 million in 2016. In contrast, the percentage of residents who are Australian-born has decreased from 76.9% to 71.5%. This will guide our sense of whether Centrelink payments are unbiased.&lt;/p&gt;

&lt;p&gt;As a side note, &lt;a href="http://www.censusdata.abs.gov.au/CensusOutput/copsub2016.nsf/All%20docs%20by%20catNo/Data-in-pictures/%24FILE/australiaER.html" rel="nofollow"&gt;Census statistics&lt;/a&gt; reported that the percentage of Australian-born residents in 2016 was 66.7% (4.8% lower than the official estimate above). This discrepancy is the result of the the Australian Bureau of Statistics making adjustments that you can learn about &lt;a href="http://www.abs.gov.au/websitedbs/censushome.nsf/home/factsheetspm?opendocument&amp;amp;navpos=450" rel="nofollow"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="all-centrelink-payments_2"&gt;All Centrelink Payments &lt;a class="head_anchor" href="#all-centrelink-payments_2" rel="nofollow"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Centrelink data is published quarterly and has included country-of-birth breakdowns since December 2016 (which aligns with the last available population data reported above). At this time, Centrelink made 15 million payments to Australian residents.&lt;/p&gt;
&lt;blockquote class="short"&gt;
&lt;p&gt;In December 2016, 71.5% of Australia’s Estimated Residential population was Australian-born. Comparably, 68.8% of all Centrelink payments went to Australian-born residents.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The data shows that Centrelink payments are made to residents born in Australia or elsewhere in approximately the same proportions as these groups are represented in the population. The difference of a couple of percent indicates that slightly fewer payments were going to Australian-born residents than we’d expect. As we’ll see in the following section, this difference can be almost wholly accounted for by the Age Pension. Still, the difference is small enough to negate the claim that Centrelink substantially favours residents born outside Australia.&lt;/p&gt;
&lt;h2 id="breakdown-by-type_2"&gt;Breakdown by Type &lt;a class="head_anchor" href="#breakdown-by-type_2" rel="nofollow"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;It’s also possible to break down these total numbers into the specific payment types shown below (&lt;a href="https://www.humanservices.gov.au/organisations/about-us/publications-and-resources/guide-australian-government-payments" rel="nofollow"&gt;detailed list here&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://svbtleusercontent.com/wKaqsBGqFW2bEDHVDeWD8U0xspap.png" rel="nofollow"&gt;&lt;img src="https://svbtleusercontent.com/wKaqsBGqFW2bEDHVDeWD8U0xspap_small.png" alt="payment_type_total-1.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It’s expected that these payment types, which support specific needs, will show biases in favour of certain groups. For example, &lt;a href="https://www.humanservices.gov.au/individuals/services/centrelink/abstudy" rel="nofollow"&gt;ABSTUDY&lt;/a&gt; supports study costs and housing for Aboriginal or Torres Strait Islander residents. This should mostly go to Australian-born residents. To investigate, we can extend the Figure above to include the number of Australian-born recipients:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://svbtleusercontent.com/chfxRBXwKbRh3EWEvaP4630xspap.png" rel="nofollow"&gt;&lt;img src="https://svbtleusercontent.com/chfxRBXwKbRh3EWEvaP4630xspap_small.png" alt="payment_type_total_v_aus-1.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Looking at this Figure, most Centrelink payments fall along the dotted line, which is what we’d expect from a fair system (if 71.5% of the recipients were Australian-born).&lt;/p&gt;

&lt;p&gt;The outlier is the &lt;a href="https://www.humanservices.gov.au/individuals/services/centrelink/age-pension" rel="nofollow"&gt;Age Pension&lt;/a&gt;, which falls below the line. More recipients of the Age Pension are born outside Australia than is reflected in the total population. I cannot say from this data alone why there is some bias in the Age Pension and perhaps a knowledgeable reader can comment. Nonetheless, this discrepancy is large enough that removing the Age Pension from consideration results in 70.5% of all other Centrelink payments going to Australian-born residents – almost exactly the proportion in the population.&lt;/p&gt;
&lt;h2 id="ignoring-total-numbers_2"&gt;Ignoring Total Numbers &lt;a class="head_anchor" href="#ignoring-total-numbers_2" rel="nofollow"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;The Figure below shows the percentage of Australian-born recipients for each payment type, ignoring totals.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://svbtleusercontent.com/6UKgQsAEeG9zBhbRFCgRJA0xspap.png" rel="nofollow"&gt;&lt;img src="https://svbtleusercontent.com/6UKgQsAEeG9zBhbRFCgRJA0xspap_small.png" alt="payment_type_p_aus-1.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At the upper end of the scale, we can see Australian-born recipients being over-represented for &lt;a href="https://www.humanservices.gov.au/individuals/services/centrelink/abstudy" rel="nofollow"&gt;ABSTUDY&lt;/a&gt; and &lt;a href="https://www.humanservices.gov.au/individuals/services/centrelink/youth-allowance" rel="nofollow"&gt;Youth Allowance&lt;/a&gt; payments. At the lower end, residents who are born outside Australia are over-represented for &lt;a href="https://www.humanservices.gov.au/individuals/services/centrelink/wife-pension" rel="nofollow"&gt;Wife&lt;/a&gt; and Widow &lt;a href="https://www.humanservices.gov.au/individuals/services/centrelink/widow-b-pension" rel="nofollow"&gt;pension&lt;/a&gt; and &lt;a href="https://www.humanservices.gov.au/individuals/services/centrelink/widow-allowance" rel="nofollow"&gt;allowance&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;These payments with large biases (in either direction) have some common features. They have very specific eligibility criteria and are among the least-awarded services (shown in earlier Figures). Furthermore, the granting of payments to new recipients has been stopped in some cases such as the &lt;a href="https://www.humanservices.gov.au/individuals/services/centrelink/wife-pension" rel="nofollow"&gt;Wife Pension&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;These findings are consistent with the expectation that specific types of payments &lt;em&gt;should&lt;/em&gt; be biased in specific ways. It also shows that substantial biases only arise for specific payments that are awarded to very few individuals.&lt;/p&gt;
&lt;h2 id="concluding-remarks_2"&gt;Concluding remarks &lt;a class="head_anchor" href="#concluding-remarks_2" rel="nofollow"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;In response to a racist outburst, I sought out publically available data to investigate whether there was evidence that the Australian Government unfairly supported residents based on their country of origin. I found that the percentage of residents born outside Australia has increased over time. However, with the minor exception of the Age pension (which the outraged man was not eligible for), residents born in Australia or elsewhere were fairly represented in the total number of Centrelink payments.&lt;/p&gt;

&lt;p&gt;I’d like to thank the Australian Government and Australian Bureau of Statistics for publicising this data and making it possible for me to respond to racism with evidence. If you’d like to reproduce this work or dig into the data yourself, everything from explaining where I got the data to create this article is freely available on &lt;a href="https://github.com/drsimonj/analysis-responding_to_australian_racism_with_data" rel="nofollow"&gt;GitHub&lt;/a&gt;. You can also keep in touch with me on &lt;a href="https://www.linkedin.com/in/drsimonj" rel="nofollow"&gt;LinkedIn&lt;/a&gt; or by following &lt;a href="https://twitter.com/drsimonj" rel="nofollow"&gt;@drsimonj&lt;/a&gt; on Twitter.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>tag:drsimonj.svbtle.com,2014:Post/embarking-on-a-tidy-git-analysis</id>
    <published>2018-03-26T04:56:52-07:00</published>
    <updated>2018-03-26T04:56:52-07:00</updated>
    <link rel="alternate" type="text/html" href="https://drsimonj.svbtle.com/embarking-on-a-tidy-git-analysis"/>
    <title>Guide to tidy git analysis</title>
    <content type="html">&lt;p&gt;&lt;a href="https://twitter.com/drsimonj" rel="nofollow"&gt;@drsimonj&lt;/a&gt; here to help you embark on git repo analyses!&lt;/p&gt;

&lt;p&gt;Ever wondered who contributes to git repos? How their contributions have changed over time? What sort of conventions different authors use in their commit messages? Maybe you were inspired by &lt;a href="https://twitter.com/dataandme" rel="nofollow"&gt;Mara Averick&lt;/a&gt; to &lt;a href="https://www.rstudio.com/resources/videos/contributing-to-tidyverse-packages/" rel="nofollow"&gt;contribute to tidyverse packages&lt;/a&gt; and wonder how you fit in?&lt;/p&gt;

&lt;p&gt;This post – intended for intermediate R users – will help you answer these sorts of questions using tidy R tools.&lt;/p&gt;

&lt;p&gt;Install and load these packages to follow along:&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;# Parts 1 and 2
library(tidyverse)
library(glue)
library(stringr)
library(forcats)

# Part 3
library(tidygraph)
library(ggraph)
library(tidytext)
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id="part-1-git-repo-to-a-tidy-data-frame_1"&gt;Part 1: Git repo to a tidy data frame &lt;a class="head_anchor" href="#part-1-git-repo-to-a-tidy-data-frame_1" rel="nofollow"&gt;#&lt;/a&gt;
&lt;/h1&gt;&lt;h2 id="get-a-git-repo_2"&gt;Get a git repo &lt;a class="head_anchor" href="#get-a-git-repo_2" rel="nofollow"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;We’ll explore the open-source &lt;a href="https://github.com/tidyverse/ggplot2" rel="nofollow"&gt;ggplot2 repo&lt;/a&gt; by copying it to our local machine with &lt;a href="https://git-scm.com/docs/git-clone" rel="nofollow"&gt;&lt;code class="prettyprint"&gt;git clone&lt;/code&gt;&lt;/a&gt;, typically run on a command-line like:&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-bash"&gt;git clone &amp;lt;repository_url&amp;gt; &amp;lt;directory&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Find the &lt;code class="prettyprint"&gt;&amp;lt;repository_url&amp;gt;&lt;/code&gt; for &lt;a href="https://github.com/" rel="nofollow"&gt;github.com&lt;/a&gt; projects by clicking “Clone or download”.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://svbtleusercontent.com/m4hctxlk1schvq.png" rel="nofollow"&gt;&lt;img src="https://svbtleusercontent.com/m4hctxlk1schvq_small.png" alt="ggplot2_gitclone.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class="prettyprint"&gt;&amp;lt;directory&amp;gt;&lt;/code&gt; is optional but useful for us to clone into a specific location.&lt;/p&gt;

&lt;p&gt;The R code below clones the ggplot2 git repo into a temporary directory called &lt;code class="prettyprint"&gt;"git_repo"&lt;/code&gt; (let &lt;a href="https://twitter.com/matrunich" rel="nofollow"&gt;Alexander Matrunich&lt;/a&gt; teach you more about temp directories and files &lt;a href="http://rstat.consulting/blog/temporary-dir-and-files-in-r/?utm_content=buffer0d542&amp;amp;utm_medium=social&amp;amp;utm_source=twitter.com&amp;amp;utm_campaign=buffer" rel="nofollow"&gt;here&lt;/a&gt;). &lt;code class="prettyprint"&gt;system()&lt;/code&gt; invokes these commands from R (instead of using a command-line directly) and the &lt;a href="http://glue.tidyverse.org/" rel="nofollow"&gt;glue package&lt;/a&gt; beautifully handles the strings for us.&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;# Remote repository URL
repo_url &amp;lt;- "https://github.com/tidyverse/ggplot2.git"

# Directory into which git repo will be cloned
clone_dir &amp;lt;- file.path(tempdir(), "git_repo")

# Create command
clone_cmd &amp;lt;- glue("git clone {repo_url} {clone_dir}")

# Invoke command
system(clone_cmd)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Check the directory contents:&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;list.files(clone_dir)
#&amp;gt;  [1] "_pkgdown.yml"      "appveyor.yml"      "codecov.yml"      
#&amp;gt;  [4] "CONTRIBUTING.md"   "cran-comments.md"  "data"             
#&amp;gt;  [7] "data-raw"          "DESCRIPTION"       "ggplot2.Rproj"    
#&amp;gt; [10] "icons"             "inst"              "ISSUE_TEMPLATE.md"
#&amp;gt; [13] "LICENSE"           "man"               "NAMESPACE"        
#&amp;gt; [16] "NEWS"              "NEWS.md"           "R"                
#&amp;gt; [19] "README.md"         "README.Rmd"        "revdep"           
#&amp;gt; [22] "tests"             "vignettes"
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="get-tidy-git-history_2"&gt;Get tidy git history &lt;a class="head_anchor" href="#get-tidy-git-history_2" rel="nofollow"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;You can now access the git history of the local repo using &lt;a href="https://git-scm.com/docs/git-log" rel="nofollow"&gt;&lt;code class="prettyprint"&gt;git log&lt;/code&gt;&lt;/a&gt; (making sure to target the right directory with &lt;code class="prettyprint"&gt;-C&lt;/code&gt;). Examine the last few commits via:&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;system(glue('git -C {clone_dir} log -3'))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class="prettyprint"&gt;#&amp;gt; commit 3c9c504fdb2f2c6b70a98d5a02f6cdf2c8cc62c9
#&amp;gt; Merge: cab8a54e 449bc039
#&amp;gt; Author: Lionel Henry &amp;lt;lionel.hry@gmail.com&amp;gt;
#&amp;gt; Date:   Thu Mar 22 18:42:25 2018 +0100
#&amp;gt; 
#&amp;gt;     Merge pull request #2491 from tidyverse/tidyeval-facets
#&amp;gt;     
#&amp;gt;     Port facets to tidy eval
#&amp;gt; 
#&amp;gt; commit 449bc039a75dd06e0ff52233c5d747f81b4d7c30
#&amp;gt; Author: Lionel Henry &amp;lt;lionel.hry@gmail.com&amp;gt;
#&amp;gt; Date:   Thu Mar 22 17:54:12 2018 +0100
#&amp;gt; 
#&amp;gt;     Remove dependency on plyr::as.quoted()
#&amp;gt; 
#&amp;gt; commit dc3c9855fd18f78ba8ef14d7e485334ac47e3b16
#&amp;gt; Author: Lionel Henry &amp;lt;lionel.hry@gmail.com&amp;gt;
#&amp;gt; Date:   Thu Mar 22 16:39:12 2018 +0100
#&amp;gt; 
#&amp;gt;     Call formula interface classic instead of historical
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This default output is nice but difficult to parse. Fortunately, &lt;code class="prettyprint"&gt;git log&lt;/code&gt; has the &lt;code class="prettyprint"&gt;--pretty&lt;/code&gt; option, which the code below uses to create a command to return nicely formatted logs (learn more about log formatting &lt;a href="https://git-scm.com/book/en/v2/Git-Basics-Viewing-the-Commit-History" rel="nofollow"&gt;here&lt;/a&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;log_format_options &amp;lt;- c(datetime = "cd", commit = "h", parents = "p", author = "an", subject = "s")
option_delim &amp;lt;- "\t"
log_format   &amp;lt;- glue("%{log_format_options}") %&amp;gt;% collapse(option_delim)
log_options  &amp;lt;- glue('--pretty=format:"{log_format}" --date=format:"%Y-%m-%d %H:%M:%S"')
log_cmd      &amp;lt;- glue('git -C {clone_dir} log {log_options}')
log_cmd
#&amp;gt; git -C /var/folders/f3/0qlt4tvx7lld3r1wx8q6z9gnrc2yg8/T//RtmpHj21yK/git_repo log --pretty=format:"%cd    %h  %p  %an %s" --date=format:"%Y-%m-%d %H:%M:%S"
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This outputs each commit as a string of tab-separated values:&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;system(glue('{log_cmd} -3'))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class="prettyprint"&gt;#&amp;gt; 2018-03-22 18:42:25  3c9c504f    cab8a54e 449bc039   Lionel Henry    Merge pull request #2491 from tidyverse/tidyeval-facets
#&amp;gt; 2018-03-22 17:55:23  449bc039    dc3c9855    Lionel Henry    Remove dependency on plyr::as.quoted()
#&amp;gt; 2018-03-22 17:55:23  dc3c9855    1182b9f3    Lionel Henry    Call formula interface classic instead of historical
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The R code below executes this for the entire repo, captures the output (via &lt;code class="prettyprint"&gt;intern = TRUE&lt;/code&gt;), splits commit strings into vectors of values (thanks to &lt;a href="http://stringr.tidyverse.org/" rel="nofollow"&gt;stringr&lt;/a&gt;), and converts them to a named &lt;a href="http://tibble.tidyverse.org/" rel="nofollow"&gt;tibble&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;history_logs &amp;lt;- system(log_cmd, intern = TRUE) %&amp;gt;% 
  str_split_fixed(option_delim, length(log_format_options)) %&amp;gt;% 
  as_tibble() %&amp;gt;% 
  setNames(names(log_format_options))

history_logs
#&amp;gt; # A tibble: 3,946 x 5
#&amp;gt;    datetime            commit   parents           author       subject    
#&amp;gt;    &amp;lt;chr&amp;gt;               &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;             &amp;lt;chr&amp;gt;        &amp;lt;chr&amp;gt;      
#&amp;gt;  1 2018-03-22 18:42:25 3c9c504f cab8a54e 449bc039 Lionel Henry Merge pull…
#&amp;gt;  2 2018-03-22 17:55:23 449bc039 dc3c9855          Lionel Henry Remove dep…
#&amp;gt;  3 2018-03-22 17:55:23 dc3c9855 1182b9f3          Lionel Henry Call formu…
#&amp;gt;  4 2018-03-22 17:55:23 1182b9f3 b2144a8e          Lionel Henry Document t…
#&amp;gt;  5 2018-03-22 17:55:23 b2144a8e 13db76d2          Lionel Henry Mention ti…
#&amp;gt;  6 2018-03-22 17:55:23 13db76d2 95253c66          Lionel Henry Accept var…
#&amp;gt;  7 2018-03-22 17:55:23 95253c66 2983aa0d          Lionel Henry Accept var…
#&amp;gt;  8 2018-03-22 17:55:23 2983aa0d 64a00c7d          Lionel Henry Rename as_…
#&amp;gt;  9 2018-03-22 17:55:23 64a00c7d f186615a          Lionel Henry Use proper…
#&amp;gt; 10 2018-03-22 17:55:23 f186615a cab8a54e          Lionel Henry Support qu…
#&amp;gt; # ... with 3,936 more rows
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The entire git commit history is now a tidy data frame (tibble)! We’ll finish this section with two minor additions.&lt;/p&gt;

&lt;p&gt;First, the &lt;code class="prettyprint"&gt;parents&lt;/code&gt; column can contain space-separated strings when a commit was a merge of multiple, for example. The code below converts this to a list-column of character vectors (let &lt;a href="https://twitter.com/JennyBryan" rel="nofollow"&gt;Jenny Bryan&lt;/a&gt; teach you more about this &lt;a href="https://www.rstudio.com/resources/videos/using-list-cols-in-your-dataframe/" rel="nofollow"&gt;here&lt;/a&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;history_logs &amp;lt;- history_logs %&amp;gt;% 
  mutate(parents = str_split(parents, " "))

history_logs
#&amp;gt; # A tibble: 3,946 x 5
#&amp;gt;    datetime            commit   parents   author       subject            
#&amp;gt;    &amp;lt;chr&amp;gt;               &amp;lt;chr&amp;gt;    &amp;lt;list&amp;gt;    &amp;lt;chr&amp;gt;        &amp;lt;chr&amp;gt;              
#&amp;gt;  1 2018-03-22 18:42:25 3c9c504f &amp;lt;chr [2]&amp;gt; Lionel Henry Merge pull request…
#&amp;gt;  2 2018-03-22 17:55:23 449bc039 &amp;lt;chr [1]&amp;gt; Lionel Henry Remove dependency …
#&amp;gt;  3 2018-03-22 17:55:23 dc3c9855 &amp;lt;chr [1]&amp;gt; Lionel Henry Call formula inter…
#&amp;gt;  4 2018-03-22 17:55:23 1182b9f3 &amp;lt;chr [1]&amp;gt; Lionel Henry Document tidy eval…
#&amp;gt;  5 2018-03-22 17:55:23 b2144a8e &amp;lt;chr [1]&amp;gt; Lionel Henry Mention tidy eval …
#&amp;gt;  6 2018-03-22 17:55:23 13db76d2 &amp;lt;chr [1]&amp;gt; Lionel Henry Accept vars() spec…
#&amp;gt;  7 2018-03-22 17:55:23 95253c66 &amp;lt;chr [1]&amp;gt; Lionel Henry Accept vars() spec…
#&amp;gt;  8 2018-03-22 17:55:23 2983aa0d &amp;lt;chr [1]&amp;gt; Lionel Henry Rename as_facets_s…
#&amp;gt;  9 2018-03-22 17:55:23 64a00c7d &amp;lt;chr [1]&amp;gt; Lionel Henry Use proper quosure…
#&amp;gt; 10 2018-03-22 17:55:23 f186615a &amp;lt;chr [1]&amp;gt; Lionel Henry Support quosures i…
#&amp;gt; # ... with 3,936 more rows
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, be sure to assign branch numbers to commits. There’s surely a better way to do this, but here’s one (very untidy) method:&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;# Start with NA
history_logs &amp;lt;- history_logs %&amp;gt;% mutate(branch = NA_integer_)

# Create a boolean vector to represent free columns (1000 should be plenty!)
free_col &amp;lt;- rep(TRUE, 1000)

for (i in seq_len(nrow(history_logs) - 1)) { # - 1 to ignore root
  # Check current branch col and assign open col if NA
  branch &amp;lt;- history_logs$branch[i]

  if (is.na(branch)) {
    branch &amp;lt;- which.max(free_col)
    free_col[branch] &amp;lt;- FALSE
    history_logs$branch[i] &amp;lt;- branch
  }

  # Go through parents
  parents &amp;lt;- history_logs$parents[[i]]

  for (p in parents) {
    parent_col &amp;lt;- history_logs$branch[history_logs$commit == p]

    # If col is missing, assign it to same branch (if first parent) or new
    # branch (if other)
    if (is.na(parent_col)) {
      parent_col &amp;lt;- if_else(p == parents[1], branch, which.max(free_col))

    # If NOT missing this means a split has occurred. Assign parent the lowest
    # and re-open both cols (parent closed at the end)
    } else {
      free_col[c(branch, parent_col)] &amp;lt;- TRUE
      parent_col &amp;lt;- min(branch, parent_col)

    }

    # Close parent col and assign
    free_col[parent_col] &amp;lt;- FALSE
    history_logs$branch[history_logs$commit == p] &amp;lt;- parent_col
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We now also have branch values with &lt;code class="prettyprint"&gt;1&lt;/code&gt; being the root.&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;history_logs
#&amp;gt; # A tibble: 3,946 x 6
#&amp;gt;    datetime            commit   parents   author       subject      branch
#&amp;gt;    &amp;lt;chr&amp;gt;               &amp;lt;chr&amp;gt;    &amp;lt;list&amp;gt;    &amp;lt;chr&amp;gt;        &amp;lt;chr&amp;gt;         &amp;lt;int&amp;gt;
#&amp;gt;  1 2018-03-22 18:42:25 3c9c504f &amp;lt;chr [2]&amp;gt; Lionel Henry Merge pull …      1
#&amp;gt;  2 2018-03-22 17:55:23 449bc039 &amp;lt;chr [1]&amp;gt; Lionel Henry Remove depe…      2
#&amp;gt;  3 2018-03-22 17:55:23 dc3c9855 &amp;lt;chr [1]&amp;gt; Lionel Henry Call formul…      2
#&amp;gt;  4 2018-03-22 17:55:23 1182b9f3 &amp;lt;chr [1]&amp;gt; Lionel Henry Document ti…      2
#&amp;gt;  5 2018-03-22 17:55:23 b2144a8e &amp;lt;chr [1]&amp;gt; Lionel Henry Mention tid…      2
#&amp;gt;  6 2018-03-22 17:55:23 13db76d2 &amp;lt;chr [1]&amp;gt; Lionel Henry Accept vars…      2
#&amp;gt;  7 2018-03-22 17:55:23 95253c66 &amp;lt;chr [1]&amp;gt; Lionel Henry Accept vars…      2
#&amp;gt;  8 2018-03-22 17:55:23 2983aa0d &amp;lt;chr [1]&amp;gt; Lionel Henry Rename as_f…      2
#&amp;gt;  9 2018-03-22 17:55:23 64a00c7d &amp;lt;chr [1]&amp;gt; Lionel Henry Use proper …      2
#&amp;gt; 10 2018-03-22 17:55:23 f186615a &amp;lt;chr [1]&amp;gt; Lionel Henry Support quo…      2
#&amp;gt; # ... with 3,936 more rows
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This rounds off the section on getting a git commit history into a tidy data frame. Remove the local git repo, which is no longer needed:&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;unlink(clone_dir, recursive = TRUE)
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id="part-2-tidy-analysis_1"&gt;Part 2: Tidy Analysis &lt;a class="head_anchor" href="#part-2-tidy-analysis_1" rel="nofollow"&gt;#&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;You’re now ready to embark on a tidy git repo analysis! For example, which authors make the most commits?&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;history_logs %&amp;gt;% 
  count(author, sort = TRUE)
#&amp;gt; # A tibble: 165 x 2
#&amp;gt;    author                         n
#&amp;gt;    &amp;lt;chr&amp;gt;                      &amp;lt;int&amp;gt;
#&amp;gt;  1 hadley                      2285
#&amp;gt;  2 Winston Chang                650
#&amp;gt;  3 Hadley Wickham               104
#&amp;gt;  4 Kohske Takahashi @ jurina    103
#&amp;gt;  5 Kohske Takahashi at Haruna    70
#&amp;gt;  6 hadley wickham                69
#&amp;gt;  7 Jean-Olivier Irisson          63
#&amp;gt;  8 Lionel Henry                  50
#&amp;gt;  9 Thomas Lin Pedersen           47
#&amp;gt; 10 Kirill Müller                 40
#&amp;gt; # ... with 155 more rows
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Some authors appear under different names, which we can quickly correct based on these top cases:&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;history_logs &amp;lt;- history_logs %&amp;gt;% 
  mutate(author = case_when(
    str_detect(tolower(author), "hadley") ~ "Hadley Wickham",
    str_detect(tolower(author), "kohske takahashi") ~ "Kohske Takahashi",
    TRUE ~ str_to_title(author)
  ))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, again, authors by commit frequency:&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;history_logs %&amp;gt;% 
  count(author) %&amp;gt;% 
  arrange(desc(n))
#&amp;gt; # A tibble: 157 x 2
#&amp;gt;    author                   n
#&amp;gt;    &amp;lt;chr&amp;gt;                &amp;lt;int&amp;gt;
#&amp;gt;  1 Hadley Wickham        2458
#&amp;gt;  2 Winston Chang          650
#&amp;gt;  3 Kohske Takahashi       232
#&amp;gt;  4 Jean-Olivier Irisson    63
#&amp;gt;  5 Lionel Henry            50
#&amp;gt;  6 Thomas Lin Pedersen     47
#&amp;gt;  7 Kirill Müller           40
#&amp;gt;  8 Kara Woo                36
#&amp;gt;  9 Brian Diggs             27
#&amp;gt; 10 Jake Russ               20
#&amp;gt; # ... with 147 more rows
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And top-ten visualized with &lt;a href="http://ggplot2.tidyverse.org/reference/" rel="nofollow"&gt;ggplot2&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;history_logs %&amp;gt;% 
  count(author) %&amp;gt;% 
  top_n(10, n) %&amp;gt;% 
  mutate(author = fct_reorder(author, n)) %&amp;gt;% 
  ggplot(aes(author, n)) +
    geom_col(aes(fill = n), show.legend = FALSE) +
    coord_flip() +
    theme_minimal() +
    ggtitle("ggplot2 authors with most commits") +
    labs(x = NULL, y = "Number of commits", caption = "Post by @drsimonj")
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href="https://svbtleusercontent.com/ysvukrswqvmvma.png" rel="nofollow"&gt;&lt;img src="https://svbtleusercontent.com/ysvukrswqvmvma_small.png" alt="unnamed-chunk-18-1.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Not surprising to see &lt;a href="https://twitter.com/hadleywickham" rel="nofollow"&gt;Hadley Wikham&lt;/a&gt; topping the charts. Otherwise, the analysis options are pretty endless from here!&lt;/p&gt;
&lt;h1 id="part-3-advanced-topics_1"&gt;Part 3: Advanced Topics &lt;a class="head_anchor" href="#part-3-advanced-topics_1" rel="nofollow"&gt;#&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;I’d like to touch on two advanced topics before leaving you to embark on astounding git repo analyses.&lt;/p&gt;
&lt;h2 id="git-repo-as-a-relational-graph_2"&gt;Git repo as a relational graph &lt;a class="head_anchor" href="#git-repo-as-a-relational-graph_2" rel="nofollow"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;A git history is a relational structure where commits are nodes and connections between them are directed edges (from parent to child).&lt;/p&gt;

&lt;p&gt;The code below converts our tidy data frame into a tidy relational structure made up of two data frames (nodes and edges) thanks to &lt;a href="https://github.com/thomasp85/tidygraph" rel="nofollow"&gt;tidygraph&lt;/a&gt; (learn more from the package creator, &lt;a href="https://twitter.com/thomasp85" rel="nofollow"&gt;Thomas Lin Pedersen&lt;/a&gt;, in &lt;a href="https://www.data-imaginist.com/2017/introducing-tidygraph/" rel="nofollow"&gt;blog posts like this&lt;/a&gt;).&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;# Convert commit to a factor (for ordering nodes)
history_logs &amp;lt;- history_logs %&amp;gt;% 
  mutate(commit = factor(commit))

# Nodes are the commits (keeping relevant info)
nodes &amp;lt;- history_logs %&amp;gt;% 
  select(-parents) %&amp;gt;% 
  arrange(commit)

# Edges are connections between commits and their parents
edges &amp;lt;- history_logs %&amp;gt;% 
  select(commit, parents) %&amp;gt;% 
  unnest(parents) %&amp;gt;% 
  mutate(parents = factor(parents, levels = levels(commit))) %&amp;gt;% 
  transmute(from = as.integer(parents), to = as.integer(commit)) %&amp;gt;% 
  drop_na()

# Create tidy directed graph object
git_graph &amp;lt;- tbl_graph(nodes = nodes, edges = edges, directed = TRUE)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;git_graph
#&amp;gt; # A tbl_graph: 3946 nodes and 4371 edges
#&amp;gt; #
#&amp;gt; # A directed acyclic simple graph with 1 component
#&amp;gt; #
#&amp;gt; # Node Data: 3,946 x 5 (active)
#&amp;gt;   datetime            commit   author           subject             branch
#&amp;gt;   &amp;lt;chr&amp;gt;               &amp;lt;fct&amp;gt;    &amp;lt;chr&amp;gt;            &amp;lt;chr&amp;gt;                &amp;lt;int&amp;gt;
#&amp;gt; 1 2011-07-19 22:40:33 002e510d Kohske Takahashi remove style param…      4
#&amp;gt; 2 2008-07-05 20:00:50 0036ad7f Hadley Wickham   HAcks to get tile …      1
#&amp;gt; 3 2010-02-05 10:25:26 0072cf4c Hadley Wickham   Fix bug with empty…      1
#&amp;gt; 4 2013-12-02 13:51:05 008018cc Josef Fruehwald  added stat_ellipse       9
#&amp;gt; 5 2010-12-23 10:22:36 00821913 Hadley Wickham   Fix doc name             1
#&amp;gt; 6 2011-12-23 06:24:28 008312c0 Hadley Wickham   Merge pull request…      1
#&amp;gt; # ... with 3,940 more rows
#&amp;gt; #
#&amp;gt; # Edge Data: 4,371 x 2
#&amp;gt;    from    to
#&amp;gt;   &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;
#&amp;gt; 1  3070   968
#&amp;gt; 2  1071   968
#&amp;gt; 3  3370  1071
#&amp;gt; # ... with 4,368 more rows
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using &lt;a href="https://github.com/thomasp85/ggraph" rel="nofollow"&gt;ggraph&lt;/a&gt; (another of Thomas’ awesome packages with more detailed info in &lt;a href="https://www.data-imaginist.com/2017/ggraph-introduction-layouts/" rel="nofollow"&gt;posts like this&lt;/a&gt;) a default visualization could look something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;git_graph %&amp;gt;% 
  ggraph() +
    geom_edge_link(alpha = .1) +
    geom_node_point(aes(color = factor(branch)), alpha = .3) +
    theme_graph() +
    theme(legend.position = "none")
#&amp;gt; Using `nicely` as default layout
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href="https://svbtleusercontent.com/u3np4yfpxvlrq.png" rel="nofollow"&gt;&lt;img src="https://svbtleusercontent.com/u3np4yfpxvlrq_small.png" alt="unnamed-chunk-21-1.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This looks cool but not right! A &lt;code class="prettyprint"&gt;"manual"&lt;/code&gt; layout is needed for a linear visualisation of the git history (see the &lt;a href="https://github.com/tidyverse/dplyr/network" rel="nofollow"&gt;dplyr network&lt;/a&gt; for example).&lt;/p&gt;

&lt;p&gt;For convenience, this is a template pipeline that will take the tidy graph object, ensure the proper layout is used, and create the basic plot:&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;ggraph_git &amp;lt;- . %&amp;gt;%
  # Set node x,y coordinates
  activate(nodes) %&amp;gt;% 
  mutate(x = datetime, y = branch) %&amp;gt;% 
  # Plot with correct layout
  create_layout(layout = "manual", node.positions = as_tibble(activate(., nodes))) %&amp;gt;% 
  {ggraph(., layout = "manual") + theme_graph() + labs(caption = "Post by @drsimonj")}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using this pipeline:&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;git_graph %&amp;gt;% 
  ggraph_git() +
    geom_edge_link(alpha = .1) +
    geom_node_point(aes(color = factor(branch)), alpha = .3) +
    theme(legend.position = "none") +
    ggtitle("Commit history of ggplot2")
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href="https://svbtleusercontent.com/2sdczckaimxuhw.png" rel="nofollow"&gt;&lt;img src="https://svbtleusercontent.com/2sdczckaimxuhw_small.png" alt="unnamed-chunk-23-1.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Much better! You can go crazy with how you’d like to visualise the repo. For example, here we filter on a specific date range:&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;git_graph %&amp;gt;% 
  activate(nodes) %&amp;gt;% 
  filter(datetime &amp;gt; "2015-11-01", datetime &amp;lt; "2016-08-01") %&amp;gt;% 
  ggraph_git() +
    geom_edge_link(alpha = .1) +
    geom_node_point(aes(color = factor(branch)), alpha = .3) +
    theme(legend.position = "none") +
    ggtitle("Git history of ggplot2",
            subtitle = "2015-11 to 2016-08")
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href="https://svbtleusercontent.com/hks3lk75atbbyw.png" rel="nofollow"&gt;&lt;img src="https://svbtleusercontent.com/hks3lk75atbbyw_small.png" alt="unnamed-chunk-24-1.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here commits are highlighted for the top authors:&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;# 10 most-common authors
top_authors &amp;lt;- git_graph %&amp;gt;% 
  activate(nodes) %&amp;gt;% 
  as_tibble() %&amp;gt;% 
  count(author, sort = TRUE) %&amp;gt;% 
  top_n(10, n) %&amp;gt;% 
  pull(author)

# Plot
git_graph %&amp;gt;% 
  activate(nodes) %&amp;gt;%
  filter(datetime &amp;gt; "2015-11-01", datetime &amp;lt; "2016-08-01") %&amp;gt;% 
  mutate(author = factor(author, levels = top_authors),
         author = fct_explicit_na(author, na_level = "Other")) %&amp;gt;% 
  ggraph_git() +
    geom_edge_link(alpha = .1) +
    geom_node_point(aes(color = author), alpha = .3) +
    theme(legend.position = "bottom") +
    ggtitle("ggplot2 commits by author",
            subtitle = "2015-11 to 2016-08")
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href="https://svbtleusercontent.com/ruisfywffoekw.png" rel="nofollow"&gt;&lt;img src="https://svbtleusercontent.com/ruisfywffoekw_small.png" alt="unnamed-chunk-25-1.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I hope this gives you enough to start having fun with these sorts of visualisations!&lt;/p&gt;
&lt;h2 id="text-mining-commit-messages_2"&gt;Text Mining Commit Messages &lt;a class="head_anchor" href="#text-mining-commit-messages_2" rel="nofollow"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Commit messages are simple but great material for tidy text-mining tools like the brilliant &lt;a href="https://github.com/juliasilge/tidytext" rel="nofollow"&gt;tidytext package&lt;/a&gt;, best learned from &lt;a href="https://www.tidytextmining.com/" rel="nofollow"&gt;Text Mining with R: A Tidy Approach&lt;/a&gt;, by &lt;a href="https://twitter.com/juliasilge" rel="nofollow"&gt;Julia Silge&lt;/a&gt; and &lt;a href="https://twitter.com/drob" rel="nofollow"&gt;David Robinson&lt;/a&gt;. Here are some examples using commit subjects to get you started.&lt;/p&gt;

&lt;p&gt;Get commit subjects into a tidy format and remove stop words.&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;data(stop_words)

tidy_subjects &amp;lt;- history_logs %&amp;gt;%
  unnest_tokens(word, subject) %&amp;gt;% 
  anti_join(stop_words)
#&amp;gt; Joining, by = "word"

tidy_subjects
#&amp;gt; # A tibble: 16,477 x 6
#&amp;gt;    datetime            commit   parents   author       branch word      
#&amp;gt;    &amp;lt;chr&amp;gt;               &amp;lt;fct&amp;gt;    &amp;lt;list&amp;gt;    &amp;lt;chr&amp;gt;         &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;     
#&amp;gt;  1 2018-03-22 18:42:25 3c9c504f &amp;lt;chr [2]&amp;gt; Lionel Henry      1 merge     
#&amp;gt;  2 2018-03-22 18:42:25 3c9c504f &amp;lt;chr [2]&amp;gt; Lionel Henry      1 pull      
#&amp;gt;  3 2018-03-22 18:42:25 3c9c504f &amp;lt;chr [2]&amp;gt; Lionel Henry      1 request   
#&amp;gt;  4 2018-03-22 18:42:25 3c9c504f &amp;lt;chr [2]&amp;gt; Lionel Henry      1 2491      
#&amp;gt;  5 2018-03-22 18:42:25 3c9c504f &amp;lt;chr [2]&amp;gt; Lionel Henry      1 tidyverse 
#&amp;gt;  6 2018-03-22 18:42:25 3c9c504f &amp;lt;chr [2]&amp;gt; Lionel Henry      1 tidyeval  
#&amp;gt;  7 2018-03-22 18:42:25 3c9c504f &amp;lt;chr [2]&amp;gt; Lionel Henry      1 facets    
#&amp;gt;  8 2018-03-22 17:55:23 449bc039 &amp;lt;chr [1]&amp;gt; Lionel Henry      2 remove    
#&amp;gt;  9 2018-03-22 17:55:23 449bc039 &amp;lt;chr [1]&amp;gt; Lionel Henry      2 dependency
#&amp;gt; 10 2018-03-22 17:55:23 449bc039 &amp;lt;chr [1]&amp;gt; Lionel Henry      2 plyr      
#&amp;gt; # ... with 16,467 more rows
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What are the ten most frequently used words?&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;tidy_subjects %&amp;gt;%
  count(word) %&amp;gt;% 
  top_n(10, n) %&amp;gt;% 
  mutate(word = fct_reorder(word, n)) %&amp;gt;% 
  ggplot(aes(word, n)) +
    geom_col(aes(fill = n), show.legend = FALSE) +
    coord_flip() +
    theme_minimal() +
    ggtitle("Most-used words in ggplot2 commit subjects") +
    labs(x = NULL, y = "Word frequency", caption = "Post by @drsimonj")
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href="https://svbtleusercontent.com/9xew9hfr9irfg.png" rel="nofollow"&gt;&lt;img src="https://svbtleusercontent.com/9xew9hfr9irfg_small.png" alt="unnamed-chunk-27-1.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Or how about the words that most-frequently follow “fix”, the most-used word:&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;history_logs %&amp;gt;% 
  select(commit, author, subject) %&amp;gt;% 
  unnest_tokens(bigram, subject, token = "ngrams", n = 2) %&amp;gt;% 
  separate(bigram, c("word1", "word2"), sep = " ") %&amp;gt;% 
  filter(word1 == "fix") %&amp;gt;%
  anti_join(stop_words, by = c("word2" = "word")) %&amp;gt;% 
  count(word2, sort = TRUE)
#&amp;gt; # A tibble: 223 x 2
#&amp;gt;    word2             n
#&amp;gt;    &amp;lt;chr&amp;gt;         &amp;lt;int&amp;gt;
#&amp;gt;  1 bug              57
#&amp;gt;  2 typo             37
#&amp;gt;  3 geom             11
#&amp;gt;  4 guides           11
#&amp;gt;  5 bugs              7
#&amp;gt;  6 doc               7
#&amp;gt;  7 boxplot           6
#&amp;gt;  8 axis              5
#&amp;gt;  9 documentation     5
#&amp;gt; 10 dumb              5
#&amp;gt; # ... with 213 more rows
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Unsurprisingly, it seems like many of the commits involve fixing bugs and typos, as well as challenges with geoms and guides.&lt;/p&gt;

&lt;p&gt;We’ve now covered more than enough for you to explore and analyse git repos in a tidy R framework. Don’t forget to share your findings with the world and let me know about it!&lt;/p&gt;
&lt;h2 id="sign-off_2"&gt;Sign off &lt;a class="head_anchor" href="#sign-off_2" rel="nofollow"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Thanks for reading and I hope this was useful for you.&lt;/p&gt;

&lt;p&gt;For updates of recent blog posts, follow &lt;a href="https://twitter.com/drsimonj" rel="nofollow"&gt;@drsimonj&lt;/a&gt; on Twitter, or email me at &lt;a href="mailto:drsimonjackson@gmail.com" rel="nofollow"&gt;drsimonjackson@gmail.com&lt;/a&gt; to get in touch.&lt;/p&gt;

&lt;p&gt;If you’d like the code that produced this blog, check out the &lt;a href="https://github.com/drsimonj/blogR" rel="nofollow"&gt;blogR GitHub repository&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>tag:drsimonj.svbtle.com,2014:Post/creating-corporate-colour-palettes-for-ggplot2</id>
    <published>2018-02-26T04:57:12-08:00</published>
    <updated>2018-02-26T04:57:12-08:00</updated>
    <link rel="alternate" type="text/html" href="https://drsimonj.svbtle.com/creating-corporate-colour-palettes-for-ggplot2"/>
    <title>Creating corporate colour palettes for ggplot2</title>
    <content type="html">&lt;p&gt;&lt;a href="https://twitter.com/drsimonj" rel="nofollow"&gt;@drsimonj&lt;/a&gt; here to share how I create and reuse corporate color palettes for ggplot2.&lt;/p&gt;

&lt;p&gt;You’ve started work as a data scientist at “drsimonj Inc” (congratulations, by the way) and PR have asked that all your Figures use the corporate colours. They send you the image below (coincidentally the &lt;a href="http://www.color-hex.com/color-palette/700" rel="nofollow"&gt;Metro UI colors on color-hex.com&lt;/a&gt;):&lt;/p&gt;

&lt;p&gt;&lt;a href="https://svbtleusercontent.com/zxequdizcj5apg.png" rel="nofollow"&gt;&lt;img src="https://svbtleusercontent.com/zxequdizcj5apg_small.png" alt="corporate_swatch-1.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You want to use these colours with ggplot2 while also making your code reusable and flexible.&lt;/p&gt;
&lt;h2 id="outline-and-setup_2"&gt;Outline and setup &lt;a class="head_anchor" href="#outline-and-setup_2" rel="nofollow"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;We’re going to create the following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; Named vector of hex codes for the corporate colors&lt;/li&gt;
&lt;li&gt; Function to access hex codes (in 1)&lt;/li&gt;
&lt;li&gt; Named list of corporate color palettes (combinations of colors via 2)&lt;/li&gt;
&lt;li&gt; Function to access palettes (in 3)&lt;/li&gt;
&lt;li&gt; ggplot2-compatible scale functions that use the corporate palettes (via 4)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Load the ggplot2 package and set a default theme to setup:&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;library(ggplot2)

theme_set(theme_minimal())
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="start-with-color_2"&gt;Start with color &lt;a class="head_anchor" href="#start-with-color_2" rel="nofollow"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Everything starts with colors. I like to first create a named vector of corporate colors like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;# drsimonj corporate colors
drsimonj_colors &amp;lt;- c(
  `red`        = "#d11141",
  `green`      = "#00b159",
  `blue`       = "#00aedb",
  `orange`     = "#f37735",
  `yellow`     = "#ffc425",
  `light grey` = "#cccccc",
  `dark grey`  = "#8c8c8c")
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Any changes to these colors, or addition of new colors, are done in this vector.&lt;/p&gt;

&lt;p&gt;Tip: use back ticks to remove naming restrictions (e.g., to include spaces for `light grey` and `dark grey`).&lt;/p&gt;

&lt;p&gt;Next, write a function that extracts the hex codes from this vector by name.&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;#' Function to extract drsimonj colors as hex codes
#'
#' @param ... Character names of drsimonj_colors 
#'
drsimonj_cols &amp;lt;- function(...) {
  cols &amp;lt;- c(...)

  if (is.null(cols))
    return (drsimonj_colors)

  drsimonj_colors[cols]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This allows us to get hex colors in a robust and flexible way. For example, you can have all colors returned as they are, specify certain colors, in a particular order, add additional function arguments and checks, and so on:&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;drsimonj_cols()
#&amp;gt;        red      green       blue     orange     yellow light grey 
#&amp;gt;  "#d11141"  "#00b159"  "#00aedb"  "#f37735"  "#ffc425"  "#cccccc" 
#&amp;gt;  dark grey 
#&amp;gt;  "#8c8c8c"

drsimonj_cols("red")
#&amp;gt;       red 
#&amp;gt; "#d11141"

drsimonj_cols("red", "blue")
#&amp;gt;       red      blue 
#&amp;gt; "#d11141" "#00aedb"

drsimonj_cols("blue", "red")
#&amp;gt;      blue       red 
#&amp;gt; "#00aedb" "#d11141"
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It’s already possible to use these manually in plots like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;ggplot(mtcars, aes(hp, mpg)) +
    geom_point(color = drsimonj_cols("red"),
               size = 4, alpha = .8)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href="https://svbtleusercontent.com/ork4qlkmzn9sag.png" rel="nofollow"&gt;&lt;img src="https://svbtleusercontent.com/ork4qlkmzn9sag_small.png" alt="unnamed-chunk-6-1.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="combine-colors-into-palettes_2"&gt;Combine colors into palettes &lt;a class="head_anchor" href="#combine-colors-into-palettes_2" rel="nofollow"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Like all great organisations, drsimonj Inc has a few main colors (let’s say blue, green, and yellow), but the full list (above) includes other official colors used for a variety of purposes. So we can now create palettes (various combinations) of these colors. Similar to how we deal with colors, first define a list like such:&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;drsimonj_palettes &amp;lt;- list(
  `main`  = drsimonj_cols("blue", "green", "yellow"),

  `cool`  = drsimonj_cols("blue", "green"),

  `hot`   = drsimonj_cols("yellow", "orange", "red"),

  `mixed` = drsimonj_cols("blue", "green", "yellow", "orange", "red"),

  `grey`  = drsimonj_cols("light grey", "dark grey")
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Changes or new color palettes are added in this list. We write a function to access and interpolate them like so:&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;#' Return function to interpolate a drsimonj color palette
#'
#' @param palette Character name of palette in drsimonj_palettes
#' @param reverse Boolean indicating whether the palette should be reversed
#' @param ... Additional arguments to pass to colorRampPalette()
#'
drsimonj_pal &amp;lt;- function(palette = "main", reverse = FALSE, ...) {
  pal &amp;lt;- drsimonj_palettes[[palette]]

  if (reverse) pal &amp;lt;- rev(pal)

  colorRampPalette(pal, ...)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This function gets a pallete by name from the list (&lt;code class="prettyprint"&gt;"main"&lt;/code&gt; by default), has a boolean condition determining whether to reverse the order or not, and additional arguments to pass on to &lt;code class="prettyprint"&gt;colorRampPallete()&lt;/code&gt; (such as an &lt;code class="prettyprint"&gt;alpha&lt;/code&gt; value). This returns another function:&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;drsimonj_pal("cool")
#&amp;gt; function (n) 
#&amp;gt; {
#&amp;gt;     x &amp;lt;- ramp(seq.int(0, 1, length.out = n))
#&amp;gt;     if (ncol(x) == 4L) 
#&amp;gt;         rgb(x[, 1L], x[, 2L], x[, 3L], x[, 4L], maxColorValue = 255)
#&amp;gt;     else rgb(x[, 1L], x[, 2L], x[, 3L], maxColorValue = 255)
#&amp;gt; }
#&amp;gt; &amp;lt;bytecode: 0x7fd7e497ba38&amp;gt;
#&amp;gt; &amp;lt;environment: 0x7fd7e497af78&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This returned function will interpolate the palette colors for a certain number of levels, making it possible to create shades between our original colors. To demonstrate, we can interpolate the &lt;code class="prettyprint"&gt;"cool"&lt;/code&gt; palette (which only includes two colors, green and blue) to a length of 10:&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;drsimonj_pal("cool")(10)
#&amp;gt;  [1] "#00AEDB" "#00AECC" "#00AEBE" "#00AFAF" "#00AFA1" "#00AF92" "#00B084"
#&amp;gt;  [8] "#00B075" "#00B067" "#00B159"
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;These hex codes correspond to the following:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://svbtleusercontent.com/gzaibhxxvzc6w.png" rel="nofollow"&gt;&lt;img src="https://svbtleusercontent.com/gzaibhxxvzc6w_small.png" alt="palette_fun_example-1.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is what we need to create custom ggplot2 scales.&lt;/p&gt;
&lt;h2 id="scales-for-ggplot2_2"&gt;Scales for ggplot2 &lt;a class="head_anchor" href="#scales-for-ggplot2_2" rel="nofollow"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;We’ve now got the essentials to create custom &lt;code class="prettyprint"&gt;color&lt;/code&gt; and &lt;code class="prettyprint"&gt;fill&lt;/code&gt; scale functions for ggplot2. There are many ways to do this. I like the approach taken in packages like &lt;a href="https://github.com/ropenscilabs/ochRe" rel="nofollow"&gt;&lt;code class="prettyprint"&gt;ochRe&lt;/code&gt;&lt;/a&gt;. One function is created for color and another for fill, and each contains a boolean argument for the relevant aesthetic being discrete or not. Here are my versions:&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;#' Color scale constructor for drsimonj colors
#'
#' @param palette Character name of palette in drsimonj_palettes
#' @param discrete Boolean indicating whether color aesthetic is discrete or not
#' @param reverse Boolean indicating whether the palette should be reversed
#' @param ... Additional arguments passed to discrete_scale() or
#'            scale_color_gradientn(), used respectively when discrete is TRUE or FALSE
#'
scale_color_drsimonj &amp;lt;- function(palette = "main", discrete = TRUE, reverse = FALSE, ...) {
  pal &amp;lt;- drsimonj_pal(palette = palette, reverse = reverse)

  if (discrete) {
    discrete_scale("colour", paste0("drsimonj_", palette), palette = pal, ...)
  } else {
    scale_color_gradientn(colours = pal(256), ...)
  }
}

#' Fill scale constructor for drsimonj colors
#'
#' @param palette Character name of palette in drsimonj_palettes
#' @param discrete Boolean indicating whether color aesthetic is discrete or not
#' @param reverse Boolean indicating whether the palette should be reversed
#' @param ... Additional arguments passed to discrete_scale() or
#'            scale_fill_gradientn(), used respectively when discrete is TRUE or FALSE
#'
scale_fill_drsimonj &amp;lt;- function(palette = "main", discrete = TRUE, reverse = FALSE, ...) {
  pal &amp;lt;- drsimonj_pal(palette = palette, reverse = reverse)

  if (discrete) {
    discrete_scale("fill", paste0("drsimonj_", palette), palette = pal, ...)
  } else {
    scale_fill_gradientn(colours = pal(256), ...)
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Each of these functions specifies a palette, whether the palette is being applied based on a discrete or numeric variable, whether to reverse the palette colors, and additional arguments to pass to the relevant ggplot2 function (which differs for discrete or numeric mapping).&lt;/p&gt;

&lt;p&gt;Let’s see them in action.&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;# Color by discrete variable using default palette
ggplot(iris, aes(Sepal.Width, Sepal.Length, color = Species)) +
    geom_point(size = 4) +
    scale_color_drsimonj()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href="https://svbtleusercontent.com/fcdmt2exddtq.png" rel="nofollow"&gt;&lt;img src="https://svbtleusercontent.com/fcdmt2exddtq_small.png" alt="unnamed-chunk-12-1.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;# Color by numeric variable with cool palette
ggplot(iris, aes(Sepal.Width, Sepal.Length, color = Sepal.Length)) +
    geom_point(size = 4, alpha = .6) +
    scale_color_drsimonj(discrete = FALSE, palette = "cool")
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href="https://svbtleusercontent.com/uqy9lvwx8wr7g.png" rel="nofollow"&gt;&lt;img src="https://svbtleusercontent.com/uqy9lvwx8wr7g_small.png" alt="unnamed-chunk-12-2.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;# Fill by discrete variable with different palette + remove legend (guide)
ggplot(mpg, aes(manufacturer, fill = manufacturer)) +
    geom_bar() +
    theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
    scale_fill_drsimonj(palette = "mixed", guide = "none")
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href="https://svbtleusercontent.com/utbqhlxgjkelbw.png" rel="nofollow"&gt;&lt;img src="https://svbtleusercontent.com/utbqhlxgjkelbw_small.png" alt="unnamed-chunk-12-3.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="package-your-work_2"&gt;Package your work &lt;a class="head_anchor" href="#package-your-work_2" rel="nofollow"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;A really wonderful next step would be to put all this wonderful code into a package for easy access by you and others. If you’re new to package development, I can’t think of a better resource to get you started than &lt;a href="https://twitter.com/hadleywickham" rel="nofollow"&gt;Hadley Wickham&lt;/a&gt;’s book, &lt;a href="http://r-pkgs.had.co.nz/" rel="nofollow"&gt;R Packages&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="sign-off_2"&gt;Sign off &lt;a class="head_anchor" href="#sign-off_2" rel="nofollow"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Thanks for reading and I hope this was useful for you.&lt;/p&gt;

&lt;p&gt;For updates of recent blog posts, follow &lt;a href="https://twitter.com/drsimonj" rel="nofollow"&gt;@drsimonj&lt;/a&gt; on Twitter, or email me at &lt;a href="mailto:drsimonjackson@gmail.com" rel="nofollow"&gt;drsimonjackson@gmail.com&lt;/a&gt; to get in touch.&lt;/p&gt;

&lt;p&gt;If you’d like the code that produced this blog, check out the &lt;a href="https://github.com/drsimonj/blogR" rel="nofollow"&gt;blogR GitHub repository&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>tag:drsimonj.svbtle.com,2014:Post/five-simple-tricks-to-improve-your-r-code</id>
    <published>2017-12-30T00:00:19-08:00</published>
    <updated>2017-12-30T00:00:19-08:00</updated>
    <link rel="alternate" type="text/html" href="https://drsimonj.svbtle.com/five-simple-tricks-to-improve-your-r-code"/>
    <title>Five tips to improve your R code</title>
    <content type="html">&lt;p&gt;&lt;a href="https://twitter.com/drsimonj" rel="nofollow"&gt;@drsimonj&lt;/a&gt; here with five simple tricks I find myself sharing all the time with fellow R users to improve their code!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;This post was originally published on &lt;a href="https://www.datacamp.com/community/tutorials/five-tips-r-code-improve" rel="nofollow"&gt;DataCamp’s community&lt;/a&gt; as one of their top 10 articles in 2017&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id="1-more-fun-to-sequence-from-1_2"&gt;1. More fun to sequence from 1 &lt;a class="head_anchor" href="#1-more-fun-to-sequence-from-1_2" rel="nofollow"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Next time you use the colon operator to create a sequence from 1 like &lt;code class="prettyprint"&gt;1:n&lt;/code&gt;, try &lt;code class="prettyprint"&gt;seq()&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;# Sequence a vector
x &amp;lt;- runif(10)
seq(x)
#&amp;gt;  [1]  1  2  3  4  5  6  7  8  9 10

# Sequence an integer
seq(nrow(mtcars))
#&amp;gt;  [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23
#&amp;gt; [24] 24 25 26 27 28 29 30 31 32
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The colon operator can produce unexpected results that can create all sorts of problems without you noticing! Take a look at what happens when you want to sequence the length of an empty vector:&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;# Empty vector
x &amp;lt;- c()

1:length(x)
#&amp;gt; [1] 1 0

seq(x)
#&amp;gt; integer(0)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You’ll also notice that this saves you from using functions like &lt;code class="prettyprint"&gt;length()&lt;/code&gt;. When applied to an object of a certain length, &lt;code class="prettyprint"&gt;seq()&lt;/code&gt; will automatically create a sequence from 1 to the length of the object.&lt;/p&gt;
&lt;h2 id="2-code-classprettyprintvectorcode-what-you-co_2"&gt;2. &lt;code class="prettyprint"&gt;vector()&lt;/code&gt; what you &lt;code class="prettyprint"&gt;c()&lt;/code&gt; &lt;a class="head_anchor" href="#2-code-classprettyprintvectorcode-what-you-co_2" rel="nofollow"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Next time you create an empty vector with &lt;code class="prettyprint"&gt;c()&lt;/code&gt;, try to replace it with &lt;code class="prettyprint"&gt;vector("type", length)&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;# A numeric vector with 5 elements
vector("numeric", 5)
#&amp;gt; [1] 0 0 0 0 0

# A character vector with 3 elements
vector("character", 3)
#&amp;gt; [1] "" "" ""
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Doing this improves memory usage and increases speed! You often know upfront what type of values will go into a vector, and how long the vector will be. Using &lt;code class="prettyprint"&gt;c()&lt;/code&gt; means R has to &lt;strong&gt;slowly&lt;/strong&gt; work both of these things out. So help give it a boost with &lt;code class="prettyprint"&gt;vector()&lt;/code&gt;!&lt;/p&gt;

&lt;p&gt;A good example of this value is in a for loop. People often write loops by declaring an empty vector and growing it with &lt;code class="prettyprint"&gt;c()&lt;/code&gt; like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;x &amp;lt;- c()
for (i in seq(5)) {
  x &amp;lt;- c(x, i)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class="prettyprint"&gt;#&amp;gt; x at step 1 : 1
#&amp;gt; x at step 2 : 1, 2
#&amp;gt; x at step 3 : 1, 2, 3
#&amp;gt; x at step 4 : 1, 2, 3, 4
#&amp;gt; x at step 5 : 1, 2, 3, 4, 5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Instead, pre-define the type and length with &lt;code class="prettyprint"&gt;vector()&lt;/code&gt;, and reference positions by index, like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;n &amp;lt;- 5
x &amp;lt;- vector("integer", n)
for (i in seq(n)) {
  x[i] &amp;lt;- i
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class="prettyprint"&gt;#&amp;gt; x at step 1 : 1, 0, 0, 0, 0
#&amp;gt; x at step 2 : 1, 2, 0, 0, 0
#&amp;gt; x at step 3 : 1, 2, 3, 0, 0
#&amp;gt; x at step 4 : 1, 2, 3, 4, 0
#&amp;gt; x at step 5 : 1, 2, 3, 4, 5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here’s a quick speed comparison:&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;n &amp;lt;- 1e5

x_empty &amp;lt;- c()
system.time(for(i in seq(n)) x_empty &amp;lt;- c(x_empty, i))
#&amp;gt;    user  system elapsed 
#&amp;gt;  16.147   2.402  20.158

x_zeros &amp;lt;- vector("integer", n)
system.time(for(i in seq(n)) x_zeros[i] &amp;lt;- i)
#&amp;gt;    user  system elapsed 
#&amp;gt;   0.008   0.000   0.009
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That should be convincing enough!&lt;/p&gt;
&lt;h2 id="3-ditch-the-code-classprettyprintwhichcode_2"&gt;3. Ditch the &lt;code class="prettyprint"&gt;which()&lt;/code&gt; &lt;a class="head_anchor" href="#3-ditch-the-code-classprettyprintwhichcode_2" rel="nofollow"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Next time you use &lt;code class="prettyprint"&gt;which()&lt;/code&gt;, try to ditch it! People often use &lt;code class="prettyprint"&gt;which()&lt;/code&gt; to get indices from some boolean condition, and then select values at those indices. This is not necessary.&lt;/p&gt;

&lt;p&gt;Getting vector elements greater than 5:&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;x &amp;lt;- 3:7

# Using which (not necessary)
x[which(x &amp;gt; 5)]
#&amp;gt; [1] 6 7

# No which
x[x &amp;gt; 5]
#&amp;gt; [1] 6 7
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or counting number of values greater than 5:&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;# Using which
length(which(x &amp;gt; 5))
#&amp;gt; [1] 2

# Without which
sum(x &amp;gt; 5)
#&amp;gt; [1] 2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Why should you ditch &lt;code class="prettyprint"&gt;which()&lt;/code&gt;? It’s often unnecessary and boolean vectors are all you need.&lt;/p&gt;

&lt;p&gt;For example, R lets you select elements flagged as &lt;code class="prettyprint"&gt;TRUE&lt;/code&gt; in a boolean vector:&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;condition &amp;lt;- x &amp;gt; 5
condition
#&amp;gt; [1] FALSE FALSE FALSE  TRUE  TRUE
x[condition]
#&amp;gt; [1] 6 7
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Also, when combined with &lt;code class="prettyprint"&gt;sum()&lt;/code&gt; or &lt;code class="prettyprint"&gt;mean()&lt;/code&gt;, boolean vectors can be used to get the count or proportion of values meeting a condition:&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;sum(condition)
#&amp;gt; [1] 2
mean(condition)
#&amp;gt; [1] 0.4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code class="prettyprint"&gt;which()&lt;/code&gt; tells you the indices of TRUE values:&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;which(condition)
#&amp;gt; [1] 4 5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And while the results are not wrong, it’s just not necessary. For example, I often see people combining &lt;code class="prettyprint"&gt;which()&lt;/code&gt; and &lt;code class="prettyprint"&gt;length()&lt;/code&gt; to test whether any or all values are TRUE. Instead, you just need &lt;code class="prettyprint"&gt;any()&lt;/code&gt; or &lt;code class="prettyprint"&gt;all()&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;x &amp;lt;- c(1, 2, 12)

# Using `which()` and `length()` to test if any values are greater than 10
if (length(which(x &amp;gt; 10)) &amp;gt; 0)
  print("At least one value is greater than 10")
#&amp;gt; [1] "At least one value is greater than 10"

# Wrapping a boolean vector with `any()`
if (any(x &amp;gt; 10))
  print("At least one value is greater than 10")
#&amp;gt; [1] "At least one value is greater than 10"

# Using `which()` and `length()` to test if all values are positive
if (length(which(x &amp;gt; 0)) == length(x))
  print("All values are positive")
#&amp;gt; [1] "All values are positive"

# Wrapping a boolean vector with `all()`
if (all(x &amp;gt; 0))
  print("All values are positive")
#&amp;gt; [1] "All values are positive"
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Oh, and it saves you a little time…&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;x &amp;lt;- runif(1e8)

system.time(x[which(x &amp;gt; .5)])
#&amp;gt;    user  system elapsed 
#&amp;gt;   1.245   0.486   1.856

system.time(x[x &amp;gt; .5])
#&amp;gt;    user  system elapsed 
#&amp;gt;   1.085   0.395   1.541
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="4-code-classprettyprintfactorcode-that-factor_2"&gt;4. &lt;code class="prettyprint"&gt;factor&lt;/code&gt; that factor! &lt;a class="head_anchor" href="#4-code-classprettyprintfactorcode-that-factor_2" rel="nofollow"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Ever removed values from a factor and found you’re stuck with old levels that don’t exist anymore? I see all sorts of creative ways to deal with this. The simplest solution is often just to wrap it in &lt;code class="prettyprint"&gt;factor()&lt;/code&gt; again.&lt;/p&gt;

&lt;p&gt;This example creates a factor with four levels (&lt;code class="prettyprint"&gt;"a"&lt;/code&gt;, &lt;code class="prettyprint"&gt;"b"&lt;/code&gt;, &lt;code class="prettyprint"&gt;"c"&lt;/code&gt; and &lt;code class="prettyprint"&gt;"d"&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;# A factor with four levels
x &amp;lt;- factor(c("a", "b", "c", "d"))
x
#&amp;gt; [1] a b c d
#&amp;gt; Levels: a b c d

plot(x)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href="https://svbtleusercontent.com/jzrk7zvnpyaquq.png" rel="nofollow"&gt;&lt;img src="https://svbtleusercontent.com/jzrk7zvnpyaquq_small.png" alt="factor-1-1.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you drop all cases of one level (&lt;code class="prettyprint"&gt;"d"&lt;/code&gt;), the level is still recorded in the factor:&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;# Drop all values for one level
x &amp;lt;- x[x != "d"]

# But we still have this level!
x
#&amp;gt; [1] a b c
#&amp;gt; Levels: a b c d

plot(x)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href="https://svbtleusercontent.com/1e9acxfzvls3mq.png" rel="nofollow"&gt;&lt;img src="https://svbtleusercontent.com/1e9acxfzvls3mq_small.png" alt="factor-2-1.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A super simple method for removing it is to use &lt;code class="prettyprint"&gt;factor()&lt;/code&gt; again:&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;x &amp;lt;- factor(x)
x
#&amp;gt; [1] a b c
#&amp;gt; Levels: a b c

plot(x)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href="https://svbtleusercontent.com/yk6esbvbbbxm0q.png" rel="nofollow"&gt;&lt;img src="https://svbtleusercontent.com/yk6esbvbbbxm0q_small.png" alt="factor-3-1.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is typically a good solution to a problem that gets a lot of people mad. So save yourself a headache and &lt;code class="prettyprint"&gt;factor&lt;/code&gt; that factor!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Aside, thanks to Amy Szczepanski who contacted me after the original publication of this article and mentioned &lt;code class="prettyprint"&gt;droplevels()&lt;/code&gt;. Check it out if this is a problem for you!&lt;/p&gt;
&lt;/blockquote&gt;&lt;h2 id="5-first-you-get-the-code-classprettyprintcode_2"&gt;5. First you get the &lt;code class="prettyprint"&gt;$&lt;/code&gt;, then you get the power &lt;a class="head_anchor" href="#5-first-you-get-the-code-classprettyprintcode_2" rel="nofollow"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Next time you want to extract values from a &lt;code class="prettyprint"&gt;data.frame&lt;/code&gt; column where the rows meet a condition, specify the column with &lt;code class="prettyprint"&gt;$&lt;/code&gt; before the rows with &lt;code class="prettyprint"&gt;[&lt;/code&gt;.&lt;/p&gt;
&lt;h4 id="examples_4"&gt;Examples &lt;a class="head_anchor" href="#examples_4" rel="nofollow"&gt;#&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;Say you want the horsepower (&lt;code class="prettyprint"&gt;hp&lt;/code&gt;) for cars with 4 cylinders (&lt;code class="prettyprint"&gt;cyl&lt;/code&gt;), using the &lt;code class="prettyprint"&gt;mtcars&lt;/code&gt; data set. You can write either of these:&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;# rows first, column second - not ideal
mtcars[mtcars$cyl == 4, ]$hp
#&amp;gt;  [1]  93  62  95  66  52  65  97  66  91 113 109

# column first, rows second - much better
mtcars$hp[mtcars$cyl == 4]
#&amp;gt;  [1]  93  62  95  66  52  65  97  66  91 113 109
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The tip here is to use the second approach.&lt;/p&gt;

&lt;p&gt;But why is that?&lt;/p&gt;

&lt;p&gt;First reason: do away with that pesky comma! When you specify rows before the column, you need to remember the comma: &lt;code class="prettyprint"&gt;mtcars[mtcars$cyl == 4&lt;/code&gt;&lt;strong&gt;,&lt;/strong&gt;&lt;code class="prettyprint"&gt;]$hp&lt;/code&gt;. When you specify column first, this means that you’re now referring to a vector, and don’t need the comma!&lt;/p&gt;

&lt;p&gt;Second reason: speed! Let’s test it out on a larger data frame:&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;# Simulate a data frame...
n &amp;lt;- 1e7
d &amp;lt;- data.frame(
  a = seq(n),
  b = runif(n)
)

# rows first, column second - not ideal
system.time(d[d$b &amp;gt; .5, ]$a)
#&amp;gt;    user  system elapsed 
#&amp;gt;   0.559   0.152   0.758

# column first, rows second - much better
system.time(d$a[d$b &amp;gt; .5])
#&amp;gt;    user  system elapsed 
#&amp;gt;   0.093   0.013   0.107
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Worth it, right?&lt;/p&gt;

&lt;p&gt;Still, if you want to hone your skills as an R data frame ninja, I suggest learning &lt;code class="prettyprint"&gt;dplyr&lt;/code&gt;. You can get a good overview on the &lt;a href="http://dplyr.tidyverse.org/" rel="nofollow"&gt;&lt;code class="prettyprint"&gt;dplyr&lt;/code&gt; website&lt;/a&gt; or really learn the ropes with online courses like DataCamp’s &lt;a href="https://www.datacamp.com/courses/dplyr-data-manipulation-r-tutorial" rel="nofollow"&gt;Data Manipulation in R with &lt;code class="prettyprint"&gt;dplyr&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="sign-off_2"&gt;Sign off &lt;a class="head_anchor" href="#sign-off_2" rel="nofollow"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Thanks for reading and I hope this was useful for you.&lt;/p&gt;

&lt;p&gt;For updates of recent blog posts, follow &lt;a href="https://twitter.com/drsimonj" rel="nofollow"&gt;@drsimonj&lt;/a&gt; on Twitter, or email me at &lt;a href="mailto:drsimonjackson@gmail.com" rel="nofollow"&gt;drsimonjackson@gmail.com&lt;/a&gt; to get in touch.&lt;/p&gt;

&lt;p&gt;If you’d like the code that produced this blog, check out the &lt;a href="https://github.com/drsimonj/blogR" rel="nofollow"&gt;blogR GitHub repository&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>tag:drsimonj.svbtle.com,2014:Post/ggsem-plot-sem-models-with-ggplot2</id>
    <published>2017-10-02T04:13:26-07:00</published>
    <updated>2017-10-02T04:13:26-07:00</updated>
    <link rel="alternate" type="text/html" href="https://drsimonj.svbtle.com/ggsem-plot-sem-models-with-ggplot2"/>
    <title>ggplot2 SEM models with tidygraph and ggraph</title>
    <content type="html">&lt;p&gt;&lt;a href="https://twitter.com/drsimonj" rel="nofollow"&gt;@drsimonj&lt;/a&gt; here to share a ggplot2-based function for plotting path analysis/structural equation models (SEM) fitted with &lt;a href="http://lavaan.ugent.be/index.html" rel="nofollow"&gt;Yves Rosseel’s lavaan package&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="background_2"&gt;Background &lt;a class="head_anchor" href="#background_2" rel="nofollow"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;SEM and its related methods (path analysis, confirmatory factor analysis, etc.) can be visualized as Directed Acyclic Graphs with nodes representing variables (observed or latent), and edges representing the specified relationships between them. For this reason, we will use &lt;a href="https://twitter.com/thomasp85" rel="nofollow"&gt;Thomas Lin Pedersen’s&lt;/a&gt; &lt;a href="https://github.com/thomasp85/tidygraph" rel="nofollow"&gt;tidygraph&lt;/a&gt; and &lt;a href="https://github.com/thomasp85/ggraph" rel="nofollow"&gt;ggraph&lt;/a&gt; packages. These packages work together to work with relational structures in a tidy format and plot them using ggplot2.&lt;/p&gt;
&lt;h2 id="the-function_2"&gt;The function &lt;a class="head_anchor" href="#the-function_2" rel="nofollow"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Below is a function &lt;code class="prettyprint"&gt;ggsem()&lt;/code&gt;, which takes a fitted lavaan object and returns a ggplot2 object representing the nodes, edges, and parameter values. It handles regression paths, correlations, latent factors, and factor loadings.&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;library(tidyverse)
library(tidygraph)
library(ggraph)
library(lavaan)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;# Plot a fitted lavaan object
ggsem &amp;lt;- function(fit, layout = "sugiyama") {

  # Extract standardized parameters
  params &amp;lt;- lavaan::standardizedSolution(fit)

  # Edge properties
  param_edges &amp;lt;- params %&amp;gt;% 
    filter(op %in% c("=~", "~", "~~"), lhs != rhs, pvalue &amp;lt; .10) %&amp;gt;%
    transmute(to = lhs,
              from = rhs,
              val = est.std,
              type = dplyr::case_when(
                op == "=~" ~ "loading",
                op == "~"  ~ "regression",
                op == "~~" ~ "correlation",
                TRUE ~ NA_character_))

  # Identify latent variables for nodes
  latent_nodes &amp;lt;- param_edges %&amp;gt;% 
    filter(type == "loading") %&amp;gt;% 
    distinct(to) %&amp;gt;% 
    transmute(metric = to, latent = TRUE)

  # Node properties
  param_nodes &amp;lt;- params %&amp;gt;% 
    filter(lhs == rhs) %&amp;gt;% 
    transmute(metric = lhs, e = est.std) %&amp;gt;% 
    left_join(latent_nodes) %&amp;gt;% 
    mutate(latent = if_else(is.na(latent), FALSE, latent))

  # Complete Graph Object
  param_graph &amp;lt;- tidygraph::tbl_graph(param_nodes, param_edges)

  # Plot
  ggraph(param_graph, layout = layout) +
    # Latent factor Nodes
    geom_node_point(aes(alpha = as.numeric(latent)),
                                     shape = 16, size = 5) +
    geom_node_point(aes(alpha = as.numeric(latent)),
                                     shape = 16, size = 4, color = "white") +
    # Observed Nodes
    geom_node_point(aes(alpha = as.numeric(!latent)),
                                     shape = 15, size = 5) +
    geom_node_point(aes(alpha = as.numeric(!latent)),
                                     shape = 15, size = 4, color = "white") +
    # Regression Paths (and text)
    geom_edge_link(aes(color = val, label = round(val, 2),
                       alpha = as.numeric(type == "regression")),
                   linetype = 1, angle_calc = "along", vjust = -.5,
                   arrow = arrow(20, unit(.3, "cm"), type = "closed")) +
    # Factor Loadings (no text)
    geom_edge_link(aes(color = val, alpha = as.numeric(type == "loading")),
                   linetype = 3, angle_calc = "along",
                   arrow = arrow(20, unit(.3, "cm"), ends = "first", type = "closed")) +
    # Correlation Paths (no text)
    geom_edge_link(aes(color = val, alpha = as.numeric(type == "correlation")),
                   linetype = 2, angle_calc = "along",
                   arrow = arrow(20, unit(.3, "cm"), type = "closed", ends = "both")) +
    # Node names
    geom_node_text(aes(label = metric),
                   nudge_y = .25, hjust = "inward") +
    # Node residual error
    geom_node_text(aes(label = sprintf("%.2f", e)),
                   nudge_y = -.1, size = 3) +
    # Scales and themes
    scale_alpha(guide = FALSE, range = c(0, 1)) +
    scale_edge_alpha(guide = FALSE, range = c(0, 1)) +
    scale_edge_colour_gradient2(guide = FALSE, low = "red", mid = "darkgray", high = "green") +
    scale_edge_linetype(guide = FALSE) +
    scale_size(guide = FALSE) +
    theme_graph()
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To test this function, we’ll use the five, standardized variables from the &lt;code class="prettyprint"&gt;diamonds&lt;/code&gt; data set:&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;d &amp;lt;- ggplot2::diamonds %&amp;gt;% 
  select(x, y, z, carat, price) %&amp;gt;% 
  mutate_all(funs((. - mean(.)) / sd(.)))
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="path-analysis_2"&gt;Path Analysis &lt;a class="head_anchor" href="#path-analysis_2" rel="nofollow"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Let’s define a simple path model where diamond price is predicted by its carats, in turn, predicted by its x-axis length.&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;model &amp;lt;- ({"
    price ~ carat
    carat ~ x
"})

fit &amp;lt;- sem(model, data = d)

ggsem(fit)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href="https://svbtleusercontent.com/de9ti6iymjqha.png" rel="nofollow"&gt;&lt;img src="https://svbtleusercontent.com/de9ti6iymjqha_small.png" alt="init-example-1.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="correlations_2"&gt;Correlations &lt;a class="head_anchor" href="#correlations_2" rel="nofollow"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;We can also extend the model to include the y-axis length, which we assume to correlate with the x-axis length.&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;model &amp;lt;- ({"
    price ~ carat
    carat ~ x + y
    x ~~ y
"})

fit &amp;lt;- sem(model, data = d)

ggsem(fit)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href="https://svbtleusercontent.com/ioveug8ncip9w.png" rel="nofollow"&gt;&lt;img src="https://svbtleusercontent.com/ioveug8ncip9w_small.png" alt="unnamed-chunk-6-1.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="latent-factors_2"&gt;Latent Factors &lt;a class="head_anchor" href="#latent-factors_2" rel="nofollow"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;We will now model the x, y, and z lengths as a latent “size” factor, which predicts carat&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;model &amp;lt;- ({"
    size =~ x + y + z

    price ~ carat
    carat ~ size
"})

fit &amp;lt;- sem(model, data = d)

ggsem(fit)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href="https://svbtleusercontent.com/zdsiogcd3wuh8q.png" rel="nofollow"&gt;&lt;img src="https://svbtleusercontent.com/zdsiogcd3wuh8q_small.png" alt="unnamed-chunk-7-1.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To compare, here we model “size” as a common underlying factor of carat and price:&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;model &amp;lt;- ({"
    size =~ x + y + z

    carat ~ size
    price ~ size

    price ~~ 0*carat
"})

fit &amp;lt;- sem(model, data = d)

ggsem(fit)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href="https://svbtleusercontent.com/mvqrwty6plzg7q.png" rel="nofollow"&gt;&lt;img src="https://svbtleusercontent.com/mvqrwty6plzg7q_small.png" alt="unnamed-chunk-8-1.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="color-for-strength-and-sign_2"&gt;Color for strength and sign &lt;a class="head_anchor" href="#color-for-strength-and-sign_2" rel="nofollow"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Edges are also colored based on parameter strength and sign. For example, let’s reverse score price and see how this appears:&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;d_rev &amp;lt;- d %&amp;gt;% 
  mutate(price = max(price) - price)

fit &amp;lt;- sem(model, data = d_rev)

ggsem(fit)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href="https://svbtleusercontent.com/4iwnacvdus3jew.png" rel="nofollow"&gt;&lt;img src="https://svbtleusercontent.com/4iwnacvdus3jew_small.png" alt="unnamed-chunk-9-1.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="back-to-ggplot2_2"&gt;Back to ggplot2 &lt;a class="head_anchor" href="#back-to-ggplot2_2" rel="nofollow"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;By using ggraph, we can extend &lt;code class="prettyprint"&gt;ggsem()&lt;/code&gt; with any ggplot2 syntax. For example, it’s easy to add a title:&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;ggsem(fit) +
    ggtitle("SEM of the diamond data set",
            subtitle = "Latent variable size as common cause of carat and price")
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href="https://svbtleusercontent.com/b3ixk5eig3ayg.png" rel="nofollow"&gt;&lt;img src="https://svbtleusercontent.com/b3ixk5eig3ayg_small.png" alt="unnamed-chunk-11-1.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And, of course, you can always tweak the &lt;code class="prettyprint"&gt;ggsem()&lt;/code&gt; function itself to achieve the desired result!&lt;/p&gt;
&lt;h2 id="a-note-about-semplot_2"&gt;A note about semPlot &lt;a class="head_anchor" href="#a-note-about-semplot_2" rel="nofollow"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;For those who know about it, you might be asking why all this is necessary when we have &lt;a href="http://sachaepskamp.com/semPlot" rel="nofollow"&gt;Sacha Epskamp’s&lt;/a&gt; awesome &lt;a href="http://sachaepskamp.com/semPlot" rel="nofollow"&gt;semPlot&lt;/a&gt; package? There are likely many cases where semPlot will do a better job of laying out the nodes and edges.&lt;/p&gt;

&lt;p&gt;For me, there were two reasons. One was a practical business reason. In my work, we operate using a shared R package library. Compared to semPlot, tidygraph and ggraph solve a broader range of relevant problems for us and are, therefore, available in our shared library. I can use semPlot locally, but prefer to work with packages that help me to collaborate faster at work. The other reason was control over aesthetics. semPlot is amazing, but it doesn’t allow for the sort of control over the graph aesthetics that tidygraph and ggraph provide.&lt;/p&gt;
&lt;h2 id="sign-off_2"&gt;Sign off &lt;a class="head_anchor" href="#sign-off_2" rel="nofollow"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Thanks for reading and I hope this was useful for you.&lt;/p&gt;

&lt;p&gt;For updates of recent blog posts, follow &lt;a href="https://twitter.com/drsimonj" rel="nofollow"&gt;@drsimonj&lt;/a&gt; on Twitter, or email me at &lt;a href="mailto:drsimonjackson@gmail.com" rel="nofollow"&gt;drsimonjackson@gmail.com&lt;/a&gt; to get in touch.&lt;/p&gt;

&lt;p&gt;If you’d like the code that produced this blog, check out the &lt;a href="https://github.com/drsimonj/blogR" rel="nofollow"&gt;blogR GitHub repository&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>tag:drsimonj.svbtle.com,2014:Post/big-data-solutions-a-b-t-test</id>
    <published>2017-08-14T09:03:18-07:00</published>
    <updated>2017-08-14T09:03:18-07:00</updated>
    <link rel="alternate" type="text/html" href="https://drsimonj.svbtle.com/big-data-solutions-a-b-t-test"/>
    <title>Big Data Solutions: A/B t test</title>
    <content type="html">&lt;p&gt;&lt;a href="https://twitter.com/drsimonj" rel="nofollow"&gt;@drsimonj&lt;/a&gt; here to share my code for using &lt;a href="https://en.wikipedia.org/wiki/Welch%27s_t-test" rel="nofollow"&gt;Welch’s &lt;em&gt;t&lt;/em&gt;-test&lt;/a&gt; to compare group means using summary statistics.&lt;/p&gt;
&lt;h2 id="motivation_2"&gt;Motivation &lt;a class="head_anchor" href="#motivation_2" rel="nofollow"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;I’ve just started working with A/B tests that use big data. Where once I’d whimsically run &lt;code class="prettyprint"&gt;t.test()&lt;/code&gt;, now my data won’t fit into memory!&lt;/p&gt;

&lt;p&gt;I’m sharing my solution here in the hope that it might help others.&lt;/p&gt;
&lt;h2 id="inmemory-data_2"&gt;In-memory data &lt;a class="head_anchor" href="#inmemory-data_2" rel="nofollow"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;As a baseline, let’s start with an in-memory case by comparing whether automatic and manual cars have different Miles Per Gallon ratings on average (using the &lt;code class="prettyprint"&gt;mtcars&lt;/code&gt; data set).&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;t.test(mpg ~ am, data = mtcars)
#&amp;gt; 
#&amp;gt;  Welch Two Sample t-test
#&amp;gt; 
#&amp;gt; data:  mpg by am
#&amp;gt; t = -3.7671, df = 18.332, p-value = 0.001374
#&amp;gt; alternative hypothesis: true difference in means is not equal to 0
#&amp;gt; 95 percent confidence interval:
#&amp;gt;  -11.280194  -3.209684
#&amp;gt; sample estimates:
#&amp;gt; mean in group 0 mean in group 1 
#&amp;gt;        17.14737        24.39231
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Well… that was easy!&lt;/p&gt;
&lt;h2 id="big-data_2"&gt;Big Data &lt;a class="head_anchor" href="#big-data_2" rel="nofollow"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;The problem with big data is that we can’t pull it into memory and work with R.&lt;/p&gt;

&lt;p&gt;Fortunately, we don’t need the raw data to run Welch’s &lt;em&gt;t&lt;/em&gt;-test. All we need is the mean, variance, and sample size of each group. So our raw data might have billions of rows, but we only need six numbers.&lt;/p&gt;

&lt;p&gt;Here are the numbers we need for the previous example:&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;library(dplyr)

grp_summary &amp;lt;- mtcars %&amp;gt;% 
  group_by(am) %&amp;gt;% 
  summarise(
    mpg_mean = mean(mpg),
    mpg_var  = var(mpg),
    n        = n()
  )

grp_summary
#&amp;gt; # A tibble: 2 x 4
#&amp;gt;      am mpg_mean  mpg_var     n
#&amp;gt;   &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt; &amp;lt;int&amp;gt;
#&amp;gt; 1     0 17.14737 14.69930    19
#&amp;gt; 2     1 24.39231 38.02577    13
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is everything we need to obtain a &lt;em&gt;t&lt;/em&gt; value, degrees of freedom, and a &lt;em&gt;p&lt;/em&gt; value.&lt;/p&gt;
&lt;h3 id="emtem-value_3"&gt;
&lt;em&gt;t&lt;/em&gt; value &lt;a class="head_anchor" href="#emtem-value_3" rel="nofollow"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;Here we use the means, varianes, and sample sizes to compute Welch’s &lt;em&gt;t&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;welch_t &amp;lt;- diff(grp_summary$mpg_mean) / sqrt(sum(grp_summary$mpg_var/grp_summary$n))

cat("Welch's t value of the mean difference is", welch_t)
#&amp;gt; Welch's t value of the mean difference is 3.767123
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is the same value returned by &lt;code class="prettyprint"&gt;t.test()&lt;/code&gt;, apart from the sign (which is unimportant).&lt;/p&gt;
&lt;h3 id="degrees-of-freedom_3"&gt;Degrees of Freedom &lt;a class="head_anchor" href="#degrees-of-freedom_3" rel="nofollow"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;Here, we use the variances and sample sizes to compute the degrees of freedom, which is estimated by the &lt;a href="https://en.wikipedia.org/wiki/Welch%E2%80%93Satterthwaite_equation" rel="nofollow"&gt;Welch–Satterthwaite equation&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;welch_df &amp;lt;- ((sum(grp_summary$mpg_var/grp_summary$n))^2) /
            sum(grp_summary$mpg_var^2/(grp_summary$n^2 * (grp_summary$n - 1)))

cat("Degrees of Freedom for Welch's t is", welch_df)
#&amp;gt; Degrees of Freedom for Welch's t is 18.33225
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Again, same as &lt;code class="prettyprint"&gt;t.test()&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id="empem-value_3"&gt;
&lt;em&gt;p&lt;/em&gt; value &lt;a class="head_anchor" href="#empem-value_3" rel="nofollow"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;We can now calculate the &lt;em&gt;p&lt;/em&gt; value thanks to R’s &lt;code class="prettyprint"&gt;pt()&lt;/code&gt;. Assuming we want to conduct a two-tailed test, here’s what we need to do:&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;welch_p &amp;lt;- 2 * pt(abs(welch_t), welch_df, lower.tail = FALSE)

cat("p-value for Welch's t is", welch_p)
#&amp;gt; p-value for Welch's t is 0.001373638
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Same as &lt;code class="prettyprint"&gt;t.test()&lt;/code&gt; again!&lt;/p&gt;
&lt;h2 id="allinone-function_2"&gt;All-in-one Function &lt;a class="head_anchor" href="#allinone-function_2" rel="nofollow"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Now we know the math, let’s write a function that takes 2-element vectors of means, variances, and sample sizes, and returns the results in a data frame:&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;welch_t_test &amp;lt;- function(sample_means, sample_vars, sample_ns) {
  t_val &amp;lt;- diff(sample_means) / sqrt(sum(sample_vars/sample_ns))

  df    &amp;lt;- ((sum(sample_vars/sample_ns))^2) /
            sum(sample_vars^2/(sample_ns^2 * (sample_ns - 1)))

  p_val &amp;lt;- 2 * pt(abs(t_val), df, lower.tail = FALSE)

  data.frame(t_val = t_val,
             df    = df,
             p_val = p_val)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;welch_t_test(grp_summary$mpg_mean,
             grp_summary$mpg_var,
             grp_summary$n)
#&amp;gt;      t_val       df       p_val
#&amp;gt; 1 3.767123 18.33225 0.001373638
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Excellent!&lt;/p&gt;
&lt;h2 id="back-to-big-data_2"&gt;Back to Big Data &lt;a class="head_anchor" href="#back-to-big-data_2" rel="nofollow"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;The point of all this was to help me conduct an A/B test with big data. Has it?&lt;/p&gt;

&lt;p&gt;Of course! I don’t pull billions of rows from my data base into memory. Instead, I create a table of the summary statistics within my big data ecosystem. These are easy to pull into memory.&lt;/p&gt;

&lt;p&gt;How you create this summary table will vary depending on your setup, but here’s a mock Hive/SQL query to demonstrate the idea:&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-sql"&gt;CREATE TABLE summary_tbl AS

SELECT
    group_var
  , AVG(outcome)      AS outcome_mean
  , VARIANCE(outcome) AS outcome_variance
  , COUNT(*)          AS n

FROM
  raw_tbl

GROUP BY
  group_var
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Happy testing!&lt;/p&gt;
&lt;h2 id="sign-off_2"&gt;Sign off &lt;a class="head_anchor" href="#sign-off_2" rel="nofollow"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Thanks for reading and I hope this was useful for you.&lt;/p&gt;

&lt;p&gt;For updates of recent blog posts, follow &lt;a href="https://twitter.com/drsimonj" rel="nofollow"&gt;@drsimonj&lt;/a&gt; on Twitter, or email me at &lt;a href="mailto:drsimonjackson@gmail.com" rel="nofollow"&gt;drsimonjackson@gmail.com&lt;/a&gt; to get in touch.&lt;/p&gt;

&lt;p&gt;If you’d like the code that produced this blog, check out the &lt;a href="https://github.com/drsimonj/blogR" rel="nofollow"&gt;blogR GitHub repository&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>tag:drsimonj.svbtle.com,2014:Post/a-tidy-model-pipeline-with-twidlr-and-broom</id>
    <published>2017-06-01T05:00:31-07:00</published>
    <updated>2017-06-01T05:00:31-07:00</updated>
    <link rel="alternate" type="text/html" href="https://drsimonj.svbtle.com/a-tidy-model-pipeline-with-twidlr-and-broom"/>
    <title>A tidy model pipeline with twidlr and broom</title>
    <content type="html">&lt;p&gt;&lt;a href="https://twitter.com/drsimonj" rel="nofollow"&gt;@drsimonj&lt;/a&gt; here to show you how to go from data in a data.frame to a tidy data.frame of model output by combining twidlr and broom in a single, tidy model pipeline.&lt;/p&gt;
&lt;h2 id="the-problem_2"&gt;The problem &lt;a class="head_anchor" href="#the-problem_2" rel="nofollow"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Different model functions take different types of inputs (data.frames, matrices, etc) and produce different types of output! Thus, we’re often confronted with the very untidy challenge presented in this Figure:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://svbtleusercontent.com/nkij0xvi6r4qkg.png" rel="nofollow"&gt;&lt;img src="https://svbtleusercontent.com/nkij0xvi6r4qkg_small.png" alt="problem.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thus, different models may need very different code.&lt;/p&gt;

&lt;p&gt;However, it’s possible to create a consistent, tidy pipeline by combining the &lt;a href="https://github.com/drsimonj/twidlr" rel="nofollow"&gt;twidlr&lt;/a&gt; and &lt;a href="https://github.com/tidyverse/broom" rel="nofollow"&gt;broom&lt;/a&gt; packages. Let’s see how this works.&lt;/p&gt;
&lt;h2 id="twostep-modelling_2"&gt;Two-step modelling &lt;a class="head_anchor" href="#twostep-modelling_2" rel="nofollow"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;To understand the solution, think of the problem as a two-step process, depicted in this Figure:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://svbtleusercontent.com/rmss2tcgpa12ua.png" rel="nofollow"&gt;&lt;img src="https://svbtleusercontent.com/rmss2tcgpa12ua_small.png" alt="two-step.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="step-1-from-data-to-fitted-model_3"&gt;Step 1: from data to fitted model &lt;a class="head_anchor" href="#step-1-from-data-to-fitted-model_3" rel="nofollow"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;Step 1 must take data in a data.frame as input and return a fitted model object. twidlr exposes model functions that do just this!&lt;/p&gt;

&lt;p&gt;To demonstrate:&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;#devtools::install_github("drsimonj/twidlr")  # To install
library(twidlr)

lm(mtcars, hp ~ .)
#&amp;gt; 
#&amp;gt; Call:
#&amp;gt; stats::lm(formula = formula, data = data)
#&amp;gt; 
#&amp;gt; Coefficients:
#&amp;gt; (Intercept)          mpg          cyl         disp         drat  
#&amp;gt;      79.048       -2.063        8.204        0.439       -4.619  
#&amp;gt;          wt         qsec           vs           am         gear  
#&amp;gt;     -27.660       -1.784       25.813        9.486        7.216  
#&amp;gt;        carb  
#&amp;gt;      18.749
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This means we can pipe data.frames into any model function exposed by twidlr. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;library(dplyr)

mtcars %&amp;gt;% lm(hp ~ .)
#&amp;gt; 
#&amp;gt; Call:
#&amp;gt; stats::lm(formula = formula, data = data)
#&amp;gt; 
#&amp;gt; Coefficients:
#&amp;gt; (Intercept)          mpg          cyl         disp         drat  
#&amp;gt;      79.048       -2.063        8.204        0.439       -4.619  
#&amp;gt;          wt         qsec           vs           am         gear  
#&amp;gt;     -27.660       -1.784       25.813        9.486        7.216  
#&amp;gt;        carb  
#&amp;gt;      18.749
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="step2-fitted-model-to-tidy-results_3"&gt;Step2: fitted model to tidy results &lt;a class="head_anchor" href="#step2-fitted-model-to-tidy-results_3" rel="nofollow"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;Step 2 must take a fitted model object as its input and return a tidy data frame of results. This is precisely what the broom package does via three functions: &lt;code class="prettyprint"&gt;glance&lt;/code&gt;, &lt;code class="prettyprint"&gt;tidy&lt;/code&gt;, and &lt;code class="prettyprint"&gt;augment&lt;/code&gt;! To demonstrate:&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;#install.packages("broom")  # To install
library(broom)

fit &amp;lt;- mtcars %&amp;gt;% lm(hp ~ .)

glance(fit)
#&amp;gt;   r.squared adj.r.squared    sigma statistic     p.value df    logLik
#&amp;gt; 1 0.9027993     0.8565132 25.97138  19.50477 1.89833e-08 11 -142.8905
#&amp;gt;        AIC      BIC deviance df.residual
#&amp;gt; 1 309.7809 327.3697 14164.76          21

tidy(fit)
#&amp;gt;           term    estimate   std.error  statistic     p.value
#&amp;gt; 1  (Intercept)  79.0483879 184.5040756  0.4284371 0.672695339
#&amp;gt; 2          mpg  -2.0630545   2.0905650 -0.9868407 0.334955314
#&amp;gt; 3          cyl   8.2037204  10.0861425  0.8133655 0.425134929
#&amp;gt; 4         disp   0.4390024   0.1492007  2.9423609 0.007779725
#&amp;gt; 5         drat  -4.6185488  16.0829171 -0.2871711 0.776795845
#&amp;gt; 6           wt -27.6600472  19.2703681 -1.4353668 0.165910518
#&amp;gt; 7         qsec  -1.7843654   7.3639133 -0.2423121 0.810889101
#&amp;gt; 8           vs  25.8128774  19.8512410  1.3003156 0.207583411
#&amp;gt; 9           am   9.4862914  20.7599371  0.4569518 0.652397317
#&amp;gt; 10        gear   7.2164047  14.6160152  0.4937327 0.626619355
#&amp;gt; 11        carb  18.7486691   7.0287674  2.6674192 0.014412403

augment(fit) %&amp;gt;% head()
#&amp;gt;           .rownames  hp  mpg cyl disp drat    wt  qsec vs am gear carb
#&amp;gt; 1         Mazda RX4 110 21.0   6  160 3.90 2.620 16.46  0  1    4    4
#&amp;gt; 2     Mazda RX4 Wag 110 21.0   6  160 3.90 2.875 17.02  0  1    4    4
#&amp;gt; 3        Datsun 710  93 22.8   4  108 3.85 2.320 18.61  1  1    4    1
#&amp;gt; 4    Hornet 4 Drive 110 21.4   6  258 3.08 3.215 19.44  1  0    3    1
#&amp;gt; 5 Hornet Sportabout 175 18.7   8  360 3.15 3.440 17.02  0  0    3    2
#&amp;gt; 6           Valiant 105 18.1   6  225 2.76 3.460 20.22  1  0    3    1
#&amp;gt;     .fitted     .resid      .hat   .sigma     .cooksd .std.resid
#&amp;gt; 1 148.68122 -38.681220 0.2142214 24.75946 0.069964902 -1.6801773
#&amp;gt; 2 140.62866 -30.628664 0.2323739 25.43881 0.049861042 -1.3460408
#&amp;gt; 3  79.99158  13.008418 0.3075987 26.38216 0.014633059  0.6019364
#&amp;gt; 4 125.75448 -15.754483 0.2103960 26.31579 0.011288712 -0.6826601
#&amp;gt; 5 183.21756  -8.217565 0.2016137 26.53317 0.002878707 -0.3541128
#&amp;gt; 6 111.38490  -6.384902 0.3147448 26.55680 0.003682813 -0.2969840
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="a-single-tidy-pipeline_2"&gt;A single, tidy pipeline &lt;a class="head_anchor" href="#a-single-tidy-pipeline_2" rel="nofollow"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;So twidlr and broom functions can be combined into a single, tidy pipeline to go from data.frame to tidy output:&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;library(twidlr)
library(broom)

mtcars %&amp;gt;% 
  lm(hp ~ .)  %&amp;gt;% 
  glance()
#&amp;gt;   r.squared adj.r.squared    sigma statistic     p.value df    logLik
#&amp;gt; 1 0.9027993     0.8565132 25.97138  19.50477 1.89833e-08 11 -142.8905
#&amp;gt;        AIC      BIC deviance df.residual
#&amp;gt; 1 309.7809 327.3697 14164.76          21
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Any model included in twidlr and broom can be used in this same way. Here’s a &lt;code class="prettyprint"&gt;kmeans&lt;/code&gt; example:&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;iris %&amp;gt;%
  select(-Species) %&amp;gt;% 
  kmeans(centers = 3) %&amp;gt;% 
  tidy()
#&amp;gt;         x1       x2       x3       x4 size withinss cluster
#&amp;gt; 1 5.901613 2.748387 4.393548 1.433871   62 39.82097       1
#&amp;gt; 2 5.006000 3.428000 1.462000 0.246000   50 15.15100       2
#&amp;gt; 3 6.850000 3.073684 5.742105 2.071053   38 23.87947       3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And a ridge regression with cross-fold validation example:&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;mtcars %&amp;gt;% 
  cv.glmnet(am ~ ., alpha = 0) %&amp;gt;% 
  glance()
#&amp;gt;   lambda.min lambda.1se
#&amp;gt; 1  0.2284167  0.8402035
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So next time you want to do some tidy modelling, keep this pipeline in mind:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://svbtleusercontent.com/ywuyoz88foebwa.png" rel="nofollow"&gt;&lt;img src="https://svbtleusercontent.com/ywuyoz88foebwa_small.png" alt="pipeline.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="limitations_2"&gt;Limitations &lt;a class="head_anchor" href="#limitations_2" rel="nofollow"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Currently, the major limitation for this approach is that a model must be covered by twidlr and broom. For example, you can’t use &lt;code class="prettyprint"&gt;randomForest&lt;/code&gt; in this pipeline because, although twidlr exposes a data.frame friendly version of it, broom doesn’t provide tidying methods for it. So if you want to write tidy code for a model that isn’t covered by these packages, have a go at helping out by contributing to these open source projects! To get started creating and contributing to R packages, take a look at Hadley Wickham’s free book, “&lt;a href="http://r-pkgs.had.co.nz/" rel="nofollow"&gt;R Packages&lt;/a&gt;”.&lt;/p&gt;
&lt;h2 id="sign-off_2"&gt;Sign off &lt;a class="head_anchor" href="#sign-off_2" rel="nofollow"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Thanks for reading and I hope this was useful for you.&lt;/p&gt;

&lt;p&gt;For updates of recent blog posts, follow &lt;a href="https://twitter.com/drsimonj" rel="nofollow"&gt;@drsimonj&lt;/a&gt; on Twitter, or email me at &lt;a href="mailto:drsimonjackson@gmail.com" rel="nofollow"&gt;drsimonjackson@gmail.com&lt;/a&gt; to get in touch.&lt;/p&gt;

&lt;p&gt;If you’d like the code that produced this blog, check out the &lt;a href="https://github.com/drsimonj/blogR" rel="nofollow"&gt;blogR GitHub repository&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>tag:drsimonj.svbtle.com,2014:Post/pretty-scatter-plots-with-ggplot2</id>
    <published>2017-05-15T05:04:05-07:00</published>
    <updated>2017-05-15T05:04:05-07:00</updated>
    <link rel="alternate" type="text/html" href="https://drsimonj.svbtle.com/pretty-scatter-plots-with-ggplot2"/>
    <title>Pretty scatter plots with ggplot2</title>
    <content type="html">&lt;p&gt;&lt;a href="https://twitter.com/drsimonj" rel="nofollow"&gt;@drsimonj&lt;/a&gt; here to make pretty scatter plots of correlated variables with ggplot2!&lt;/p&gt;

&lt;p&gt;We’ll learn how to create plots that look like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://svbtleusercontent.com/nvvxuthhlzemg.png" rel="nofollow"&gt;&lt;img src="https://svbtleusercontent.com/nvvxuthhlzemg_small.png" alt="init-example-1.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="data_2"&gt;Data &lt;a class="head_anchor" href="#data_2" rel="nofollow"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;In a data.frame &lt;code class="prettyprint"&gt;d&lt;/code&gt;, we’ll simulate two correlated variables &lt;code class="prettyprint"&gt;a&lt;/code&gt; and &lt;code class="prettyprint"&gt;b&lt;/code&gt; of length &lt;code class="prettyprint"&gt;n&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;set.seed(170513)
n &amp;lt;- 200
d &amp;lt;- data.frame(a = rnorm(n))
d$b &amp;lt;- .4 * (d$a + rnorm(n))

head(d)
#&amp;gt;            a           b
#&amp;gt; 1 -0.9279965 -0.03795339
#&amp;gt; 2  0.9133158  0.21116682
#&amp;gt; 3  1.4516084  0.69060249
#&amp;gt; 4  0.5264596  0.22471694
#&amp;gt; 5 -1.9412516 -1.70890512
#&amp;gt; 6  1.4198574  0.30805526
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="basic-scatter-plot_2"&gt;Basic scatter plot &lt;a class="head_anchor" href="#basic-scatter-plot_2" rel="nofollow"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Using ggplot2, the basic scatter plot (with &lt;code class="prettyprint"&gt;theme_minimal&lt;/code&gt;) is created via:&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;library(ggplot2)

ggplot(d, aes(a, b)) +
  geom_point() +
  theme_minimal()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href="https://svbtleusercontent.com/hbhsdeonvjlvw.jpeg" rel="nofollow"&gt;&lt;img src="https://svbtleusercontent.com/hbhsdeonvjlvw_small.jpeg" alt="unnamed-chunk-3-1.JPEG"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="shape-and-size_2"&gt;Shape and size &lt;a class="head_anchor" href="#shape-and-size_2" rel="nofollow"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;There are many ways to tweak the &lt;code class="prettyprint"&gt;shape&lt;/code&gt; and &lt;code class="prettyprint"&gt;size&lt;/code&gt; of the points. Here’s the combination I settled on for this post:&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;ggplot(d, aes(a, b)) +
  geom_point(shape = 16, size = 5) +
  theme_minimal()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href="https://svbtleusercontent.com/prd80u5fwjacw.jpeg" rel="nofollow"&gt;&lt;img src="https://svbtleusercontent.com/prd80u5fwjacw_small.jpeg" alt="unnamed-chunk-4-1.JPEG"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="color_2"&gt;Color &lt;a class="head_anchor" href="#color_2" rel="nofollow"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;We want to color the points in a way that helps to visualise the correlation between them.&lt;/p&gt;

&lt;p&gt;One option is to &lt;code class="prettyprint"&gt;color&lt;/code&gt; by one of the variables. For example, color by &lt;code class="prettyprint"&gt;a&lt;/code&gt; (and hide legend):&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;ggplot(d, aes(a, b, color = a)) +
  geom_point(shape = 16, size = 5, show.legend = FALSE) +
  theme_minimal()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href="https://svbtleusercontent.com/iijlkiihme6rlw.jpeg" rel="nofollow"&gt;&lt;img src="https://svbtleusercontent.com/iijlkiihme6rlw_small.jpeg" alt="unnamed-chunk-5-1.JPEG"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Although it’s subtle in this plot, the problem is that the color is changing as the points go from left to right. Instead, we want the color to change in a direction that characterises the correlation - diagonally in this case.&lt;/p&gt;

&lt;p&gt;To do this, we can color points by the &lt;strong&gt;first&lt;/strong&gt; principal component. Add it to the data frame as a variable &lt;code class="prettyprint"&gt;pc&lt;/code&gt; and use it to color like so:&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;d$pc &amp;lt;- predict(prcomp(~a+b, d))[,1]

ggplot(d, aes(a, b, color = pc)) +
  geom_point(shape = 16, size = 5, show.legend = FALSE) +
  theme_minimal()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href="https://svbtleusercontent.com/acgkiogvjxz9w.jpeg" rel="nofollow"&gt;&lt;img src="https://svbtleusercontent.com/acgkiogvjxz9w_small.jpeg" alt="unnamed-chunk-6-1.JPEG"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we can add color, let’s pick something nice with the help of the &lt;code class="prettyprint"&gt;scale_color_gradient&lt;/code&gt; functions and some nice hex codes (check out &lt;a href="http://www.color-hex.com/" rel="nofollow"&gt;color-hex&lt;/a&gt; for inspriation). For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;ggplot(d, aes(a, b, color = pc)) +
  geom_point(shape = 16, size = 5, show.legend = FALSE) +
  theme_minimal() +
  scale_color_gradient(low = "#0091ff", high = "#f0650e")
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href="https://svbtleusercontent.com/y3ffjbkmsdmr8w.jpeg" rel="nofollow"&gt;&lt;img src="https://svbtleusercontent.com/y3ffjbkmsdmr8w_small.jpeg" alt="unnamed-chunk-7-1.JPEG"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="transparency_2"&gt;Transparency &lt;a class="head_anchor" href="#transparency_2" rel="nofollow"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Now it’s time to get rid of those offensive mushes by adjusting the transparency with &lt;code class="prettyprint"&gt;alpha&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We could adjust it to be the same for every point:&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;ggplot(d, aes(a, b, color = pc)) +
  geom_point(shape = 16, size = 5, show.legend = FALSE, alpha = .4) +
  theme_minimal() +
  scale_color_gradient(low = "#0091ff", high = "#f0650e")
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href="https://svbtleusercontent.com/s7ukxd5q8lttqa.jpeg" rel="nofollow"&gt;&lt;img src="https://svbtleusercontent.com/s7ukxd5q8lttqa_small.jpeg" alt="unnamed-chunk-8-1.JPEG"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is fine most of the time. However, what if you have many points? Let’s try with 5,000 points:&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;# Simulate data
set.seed(170513)
n &amp;lt;- 5000
d &amp;lt;- data.frame(a = rnorm(n))
d$b &amp;lt;- .4 * (d$a + rnorm(n))

# Compute first principal component
d$pc &amp;lt;- predict(prcomp(~a+b, d))[,1]

# Plot
ggplot(d, aes(a, b, color = pc)) +
  geom_point(shape = 16, size = 5, show.legend = FALSE, alpha = .4) +
  theme_minimal() +
  scale_color_gradient(low = "#0091ff", high = "#f0650e")
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href="https://svbtleusercontent.com/gqbax0bvlmxqyq.jpeg" rel="nofollow"&gt;&lt;img src="https://svbtleusercontent.com/gqbax0bvlmxqyq_small.jpeg" alt="unnamed-chunk-9-1.JPEG"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We’ve got another big mush. What if we take &lt;code class="prettyprint"&gt;alpha&lt;/code&gt; down really low to .05?&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;ggplot(d, aes(a, b, color = pc)) +
  geom_point(shape = 16, size = 5, show.legend = FALSE, alpha = .05) +
  theme_minimal() +
  scale_color_gradient(low = "#0091ff", high = "#f0650e")
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href="https://svbtleusercontent.com/zliuy0syanmwow.jpeg" rel="nofollow"&gt;&lt;img src="https://svbtleusercontent.com/zliuy0syanmwow_small.jpeg" alt="unnamed-chunk-10-1.JPEG"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Better, except it’s now hard to see extreme points that are alone in space.&lt;/p&gt;

&lt;p&gt;To solve this, we’ll map &lt;code class="prettyprint"&gt;alpha&lt;/code&gt; to the &lt;strong&gt;inverse&lt;/strong&gt; point density. That is, turn down &lt;code class="prettyprint"&gt;alpha&lt;/code&gt; wherever there are lots of points! The trick is to use bivariate density, which can be added as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;# Add bivariate density for each point
d$density &amp;lt;- fields::interp.surface(
  MASS::kde2d(d$a, d$b), d[,c("a", "b")])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now plot with &lt;code class="prettyprint"&gt;alpha&lt;/code&gt; mapped to &lt;code class="prettyprint"&gt;1/density&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;ggplot(d, aes(a, b, color = pc, alpha = 1/density)) +
  geom_point(shape = 16, size = 5, show.legend = FALSE) +
  theme_minimal() +
  scale_color_gradient(low = "#0091ff", high = "#f0650e")
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href="https://svbtleusercontent.com/cez6zj7g3gnpfa.jpeg" rel="nofollow"&gt;&lt;img src="https://svbtleusercontent.com/cez6zj7g3gnpfa_small.jpeg" alt="unnamed-chunk-12-1.JPEG"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can see that distant points are now too vibrant. Our final fix is to use &lt;code class="prettyprint"&gt;scale_alpha&lt;/code&gt; to tweak the alpha range. By default, this range is 0 to 1, making the most distant points have an alpha close to 1. Let’s restrict it to something better:&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;ggplot(d, aes(a, b, color = pc, alpha = 1/density)) +
  geom_point(shape = 16, size = 5, show.legend = FALSE) +
  theme_minimal() +
  scale_color_gradient(low = "#0091ff", high = "#f0650e") +
  scale_alpha(range = c(.05, .25))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href="https://svbtleusercontent.com/hlqpu7p0exdqg.jpeg" rel="nofollow"&gt;&lt;img src="https://svbtleusercontent.com/hlqpu7p0exdqg_small.jpeg" alt="unnamed-chunk-13-1.JPEG"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Much better! No more mushy patches or lost points.&lt;/p&gt;
&lt;h2 id="bringing-it-together_2"&gt;Bringing it together &lt;a class="head_anchor" href="#bringing-it-together_2" rel="nofollow"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Here’s a complete example with new data and colors:&lt;/p&gt;

&lt;pre&gt;&lt;code class="prettyprint lang-r"&gt;# Simulate data
set.seed(170513)
n &amp;lt;- 2000
d &amp;lt;- data.frame(a = rnorm(n))
d$b &amp;lt;- -(d$a + rnorm(n, sd = 2))

# Add first principal component
d$pc &amp;lt;- predict(prcomp(~a+b, d))[,1]

# Add density for each point
d$density &amp;lt;- fields::interp.surface(
  MASS::kde2d(d$a, d$b), d[,c("a", "b")])

# Plot
ggplot(d, aes(a, b, color = pc, alpha = 1/density)) +
  geom_point(shape = 16, size = 5, show.legend = FALSE) +
  theme_minimal() +
  scale_color_gradient(low = "#32aeff", high = "#f2aeff") +
  scale_alpha(range = c(.25, .6))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href="https://svbtleusercontent.com/3svtcqfu4ynitg.png" rel="nofollow"&gt;&lt;img src="https://svbtleusercontent.com/3svtcqfu4ynitg_small.png" alt="unnamed-chunk-14-1.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="sign-off_2"&gt;Sign off &lt;a class="head_anchor" href="#sign-off_2" rel="nofollow"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Thanks for reading and I hope this was useful for you.&lt;/p&gt;

&lt;p&gt;For updates of recent blog posts, follow &lt;a href="https://twitter.com/drsimonj" rel="nofollow"&gt;@drsimonj&lt;/a&gt; on Twitter, or email me at &lt;a href="mailto:drsimonjackson@gmail.com" rel="nofollow"&gt;drsimonjackson@gmail.com&lt;/a&gt; to get in touch.&lt;/p&gt;

&lt;p&gt;If you’d like the code that produced this blog, check out the &lt;a href="https://github.com/drsimonj/blogR" rel="nofollow"&gt;blogR GitHub repository&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
</feed>
