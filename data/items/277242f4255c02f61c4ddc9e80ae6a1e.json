{
  "title": "Machine Learning Canvas v1.1: change log",
  "dc:creator": "Louis Dorard",
  "pubDate": "Wed, 28 Apr 2021 17:06:04 +0000",
  "link": "https://www.ownml.co/blog/machine-learning-canvas-v11-change-log",
  "guid": "5206b718e4b0bdc26006bae2:5206b959e4b0bdc26006be4a:60887386ac36b74a3cde84e3",
  "description": "<p class=\"\">Earlier this month (April 2021), I released version&nbsp;v1.1&nbsp;of the Machine Learning Canvas. It’s grown more stable in the last couple of years, so last November, instead of updating from&nbsp;v0.4&nbsp;to v0.5, I decided to go straight to v1.0. After a couple of months of experience with it, coaching a few companies in their usage of MLC v1.0, I made a couple of tweaks and ended up with v1.1.</p><p class=\"\">Let's have a look at all those changes since v0.4. I’ve changed the ordering of some of the boxes, in a way that makes the structure of the MLC easier to understand (and memorize). I’ve also refined the boxes’ headers and prompts, to help fill the MLC in the right way.</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n    \n  \n    \n\n      \n\n      \n        <figure class=\"\n              sqs-block-image-figure\n              intrinsic\n            \"\n        >\n          \n        \n        \n\n        \n          <a class=\"\n                sqs-block-image-link\n                \n          \n        \n              \" href=\"https://www.ownml.co/machine-learning-canvas\"\n              \n          >\n            \n          \n            \n              <img class=\"thumb-image\" data-image=\"https://images.squarespace-cdn.com/content/v1/5206b718e4b0bdc26006bae2/1619556468841-1PPJRP1JTKXNR5JQ50BS/MLC_v0.4_v1.1.jpeg\" data-image-dimensions=\"1920x1080\" data-image-focal-point=\"0.5,0.5\" alt=\"MLC_v0.4_v1.1.jpeg\" data-load=\"false\" data-image-id=\"6088787138903865432d5dc8\" data-type=\"image\" src=\"https://images.squarespace-cdn.com/content/v1/5206b718e4b0bdc26006bae2/1619556468841-1PPJRP1JTKXNR5JQ50BS/MLC_v0.4_v1.1.jpeg?format=1000w\" />\n            \n          \n        \n          </a>\n        \n\n        \n      \n        </figure>\n      \n\n    \n  \n\n\n  \n\n\n<hr />\n\n<p class=\"\"><a href=\"https://www.ownml.co/machine-learning-canvas\"><strong>Get the latest version of the Machine Learning Canvas</strong></a></p>\n\n\n<hr />\n\n<p class=\"\">These changes have a slight impact on the scope of the MLC. Since v0.4, it's become increasingly important to adopt a user-centered and responsible approach when designing intelligent systems that are based on ML: .</p><ul data-rte-list=\"default\"><li><p class=\"\">User-centered design → there is now more emphasis on the end-user, their workflow, and the interface with the system, under <em>Value Proposition</em>.</p></li><li><p class=\"\">Responsible ML/AI:</p><ul data-rte-list=\"default\"><li><p class=\"\"><em>Offline Evaluation</em> now mentions fairness constraint</p></li><li><p class=\"\"><em>Building Models</em> now mentions their “analysis”, which should include global model explanations</p></li><li><p class=\"\"><em>Making Predictions</em> now mentions the post-processing of predictions, which can include single prediction explanations.</p></li></ul></li></ul><h2><strong>Changes to the layout: reordering</strong></h2><ul data-rte-list=\"default\"><li><p class=\"\"><em>Decisions</em> and <em>Data Collection</em> relate to the integration of the ML system in the domain of application. They were brought closer to the center of the MLC, next to <em>Value Proposition</em>. This also makes sense because the left-most box is <em>ML Task</em>, then followed by <em>Decisions</em>, which makes the connection with how value is provided.</p></li><li><p class=\"\"><em>Making Predictions</em> and <em>Building Models</em> relate to the predictive engine which is at the core of the ML system. Same story here, they were also brought closer to the center. Doing this also gives more space for a long list of <em>Features</em>, and for <em>Offline Evaluation</em>, which typically contains a lot of information; you can also end that block with information on the minimum performance value, for metrics that can be computed offline, but could also be monitored live (and <em>Live Monitoring</em> is right next to the bottom of that box!).</p></li></ul><h2><strong>Changes to the headers and prompts</strong></h2><p class=\"\">Here is a review of the 10 boxes of the MLC, highlighting changes to the headers and prompts.</p><ul data-rte-list=\"default\"><li><p class=\"\"><strong>Value Proposition:</strong></p><ul data-rte-list=\"default\"><li><p class=\"\">Before (v0.4): <em>What are we trying to do for the end-user(s) of the predictive system? What objectives are we serving?</em></p></li><li><p class=\"\">After (v1.0 onwards): <em>Who is the end-user? What are their objectives? </em><strong><em>How will they benefit from the ML system? Mention workflow/interfaces.</em></strong></p></li></ul></li><li><p class=\"\"><strong>Live Monitoring → Monitoring:</strong></p><ul data-rte-list=\"default\"><li><p class=\"\">Before: <em>Methods and metrics to evaluate the system after deployment, and to quantify value creation.</em></p></li><li><p class=\"\">After: <em>Metrics to quantify value creation and measure the ML system’s </em><strong><em>impact in production (on end-users and business)</em></strong></p></li></ul></li><li><p class=\"\"><strong>ML Task </strong>→<strong> Prediction Task: </strong>Changed the terminology. \"Input\" was interpreted by some as values manipulated by the machine, whereas what was meant was the real-world object, or \"entity\", on which predictions are to be made. \"Output\" was replaced by \"outcome\", which also sounds less technical and closer to something that's observed in the real world. Chose to focus on prediction tasks, instead of covering all ML tasks (including unsupervised learning). ML-powered predictions is how most of the value is created with \"AI\" today. This focus allows to highlight the time dimension of things, and the need to wait: from the moment an entity is observed and a prediction is requested, to the moment an outcome of interest can be observed.</p><ul data-rte-list=\"default\"><li><p class=\"\">Before (v0.4): <em>Input, output to predict, type of problem.</em></p></li><li><p class=\"\">v1.0: <em>Type of task? Input object? </em><strong><em>Output: definition, parameters (e.g. prediction horizon), possible values?</em></strong></p></li><li><p class=\"\">After (v1.1): <em>Type of task? </em><strong><em>Entity on which predictions are made? Possible outcomes? Wait time before observation?</em></strong></p></li></ul></li><li><p class=\"\"><strong>Features:</strong> Emphasized that they should be <strong>available at prediction time</strong>.</p></li><li><p class=\"\"><strong>Data sources: </strong>Made it a bit more specific by making a distinction between input data (aka \"entities\" in Prediction Task) and output data (aka \"observed outcomes\"), and suggesting to mention databases and tables, or APIs and methods of interest.</p><ul data-rte-list=\"default\"><li><p class=\"\">Before (v0.4): <em>Which raw data sources can we use (internal and external)?</em></p></li><li><p class=\"\">v1.0: <em>Which raw data sources can we use (internal, external)? Mention databases and tables, or APIs and methods of interest.</em></p></li><li><p class=\"\">After (v1.1): <em>Where can we get </em><strong><em>(raw) information on entities and observed outcomes</em></strong><em>? Mention </em><strong><em>database tables, API methods, websites to scrape, etc.</em></strong></p></li></ul></li><li><p class=\"\"><strong>Data collection (brand new prompt!): </strong>Added a focus on continuous data collection (not just initial train set). Highlighted the differences in input and output collection (aka occurence of new entities and observation of outcomes), the cost of the latter, and finally, holding production entities out of the decision process (to deal with feedback loops).</p><ul data-rte-list=\"default\"><li><p class=\"\">Before (v0.4): <em>How do we get new data to learn from (inputs and outputs)?</em></p></li><li><p class=\"\">v1.0: <strong><em>Strategy for initial train set, and continuous update. Collection rate?</em></strong><em> Holdout on prod inputs? Output acquisition cost?</em></p></li><li><p class=\"\">After (v1.1): <em>Strategy for initial train set and continuous update. Mention collection rate, </em><strong><em>holdout on production entities, cost/constraints to observe outcomes</em></strong><em>.</em></p></li></ul></li><li><p class=\"\"><strong>Making Predictions: </strong>This was already mentioning the featurization that needs to happen before predictions, and now it also mentions the post-processing, which could include prediction explanations, or preparing predictions for usage in the decision-making process. I’ve also added a focus on the compute target (which leads to considering things such as memory constraints, in addition to latency constraints)</p><ul data-rte-list=\"default\"><li><p class=\"\">Before: <em>When do we make predictions on new inputs? How long do we have to featurize a new input and make a prediction?</em></p></li><li><p class=\"\">After: <em>When do we make </em><strong><em>real-time / batch</em></strong><em> predictions? Time available for this + featurization + </em><strong><em>post-processing</em></strong><em>? </em><strong><em>Compute target</em></strong><em>?</em></p></li></ul></li><li><p class=\"\"><strong>Building Models: </strong>Clarified so that you get to think about how many models are needed, e.g. 1 per end-user, 1 per locality, etc. Similarly to <em>Making Predictions</em>, there was a mention of the featurization that needs to happen before model building, and now there’s also a mention of the analysis of the model that needs to happen afterwards. This includes things such as computing global model explanations, and testing the model to see if it can be safely deployed. The compute target is not mentioned here, because it’s likely to be more flexible than for making predictions, and less of a bottleneck.</p><ul data-rte-list=\"default\"><li><p class=\"\">Before: <em>When do we create/update models with new training data? How long do we have to featurize training inputs and create a model?</em></p></li><li><p class=\"\">After: <strong><em>How many production models are needed?</em></strong><em> When would we update? Time available for this (including featurization and </em><strong><em>analysis</em></strong><em>)?</em></p></li></ul></li><li><p class=\"\"><strong>Offline Evaluation → Impact Simulation (+ brand new prompt!): </strong>This wasn’t specific enough, but the new version now highlights that this is about decide whether it’s ok to deploy in production or not, and simulating the impact of predictions + decisions. Note that we want to evaluate decisions, not just predictions. This simulation is described via the test data on which predictions will be made (how is it collected? over which period of time?) and via the cost and gain values associated to (in)correct decisions (it’s best to avoid “abstract” metrics and to focus instead on domain-specific ones).</p><ul data-rte-list=\"default\"><li><p class=\"\">Before (v0.4): <em>Methods and metrics to evaluate the system before deployment.</em></p></li><li><p class=\"\">v1.0: <em>Simulation of the impact of decisions/predictions? Which test data? Cost/gain values? Deployment criteria (min performance value, fairness)?</em></p></li><li><p class=\"\">After (v1.1): <em>Can models be deployed? Which test data to assess performance? Cost/gain values for (in)correct predictions? </em><a href=\"https://developers.google.com/machine-learning/glossary#fairness-constraint\" target=\"_blank\"><em>Fairness constraint</em></a><em>?</em></p></li></ul></li></ul><p class=\"\">Looking forward to seeing you make the best use of this new version of the MLC!</p>\n\n\n<hr />\n\n<p class=\"\"><a href=\"https://www.ownml.co/machine-learning-canvas\"><strong>Get the latest version of the Machine Learning Canvas</strong></a></p>\n\n\n&nbsp;"
}