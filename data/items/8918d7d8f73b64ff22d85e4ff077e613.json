{
  "title": "Digit Classification using KNN",
  "link": "",
  "published": "2015-03-01T00:00:00+00:00",
  "updated": "2015-03-01T00:00:00+00:00",
  "id": "/clatern/2015/03/01/digit-classification-knn",
  "content": "<p>This is a tutorial on classifying handwritten digits with KNN algorithm using Clatern. <a href=\"https://github.com/rinuboney/clatern\">Clatern</a> is a machine learning library for Clojure, in the works.</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-clojure\" data-lang=\"clojure\"><span class=\"p\">(</span><span class=\"nf\">use</span><span class=\"w\"> </span><span class=\"ss\">'clojure.core.matrix</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"p\">(</span><span class=\"nf\">use</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"p\">(</span><span class=\"nf\">clatern</span><span class=\"w\"> </span><span class=\"n\">io</span><span class=\"w\"> </span><span class=\"n\">knn</span><span class=\"p\">))</span></code></pre></figure>\n\n<h3 id=\"dataset\">Dataset</h3>\n\n<p>This tutorial uses a stripped down version of handwritten digits dataset available <a href=\"http://archive.ics.uci.edu/ml/datasets/Pen-Based+Recognition+of+Handwritten+Digits\">here</a>. The stripped down version(taken from the sklearn library) is available <a href=\"https://github.com/scikit-learn/scikit-learn/raw/master/sklearn/datasets/data/digits.csv.gz\">here</a>.</p>\n\n<p>The dataset consists of 1797 samples of 8x8 pixels and the target labels. The first 64 columns are the 8x8 pixels and the 65th column is the label target. Let’s have a look at a sample,</p>\n\n<p><img src=\"/img/plot_digit.png\" alt=\"digit\" /></p>\n\n<p>Let’s load the data,</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-clojure\" data-lang=\"clojure\"><span class=\"p\">(</span><span class=\"k\">def</span><span class=\"w\"> </span><span class=\"n\">digits</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nf\">load-data</span><span class=\"w\"> </span><span class=\"s\">\"digits.csv\"</span><span class=\"p\">))</span></code></pre></figure>\n\n<p>Splitting the data into training and test sets,</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-clojure\" data-lang=\"clojure\"><span class=\"p\">(</span><span class=\"k\">def</span><span class=\"w\"> </span><span class=\"n\">digits</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nf\">order</span><span class=\"w\"> </span><span class=\"n\">digits</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nf\">shuffle</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"w\"> </span><span class=\"mi\">1797</span><span class=\"p\">))))</span><span class=\"w\">\n</span><span class=\"p\">(</span><span class=\"k\">def</span><span class=\"w\"> </span><span class=\"n\">train-mat</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\">take</span><span class=\"w\"> </span><span class=\"mi\">1400</span><span class=\"w\"> </span><span class=\"n\">digits</span><span class=\"o\">'</span><span class=\"p\">))</span><span class=\"w\">\n</span><span class=\"p\">(</span><span class=\"k\">def</span><span class=\"w\"> </span><span class=\"n\">test-mat</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\">drop</span><span class=\"w\"> </span><span class=\"mi\">1400</span><span class=\"w\"> </span><span class=\"n\">digits</span><span class=\"o\">'</span><span class=\"p\">))</span></code></pre></figure>\n\n<p>Splitting the training and test set into features and labels,</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-clojure\" data-lang=\"clojure\"><span class=\"p\">(</span><span class=\"k\">def</span><span class=\"w\"> </span><span class=\"n\">X-train</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\">select</span><span class=\"w\"> </span><span class=\"n\">train-mat</span><span class=\"w\"> </span><span class=\"no\">:all</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"w\"> </span><span class=\"mi\">64</span><span class=\"p\">)))</span><span class=\"w\">\n</span><span class=\"p\">(</span><span class=\"k\">def</span><span class=\"w\"> </span><span class=\"n\">y-train</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nf\">get-column</span><span class=\"w\"> </span><span class=\"n\">train-mat</span><span class=\"w\"> </span><span class=\"mi\">64</span><span class=\"p\">))</span><span class=\"w\">\n</span><span class=\"p\">(</span><span class=\"k\">def</span><span class=\"w\"> </span><span class=\"n\">X-test</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\">select</span><span class=\"w\"> </span><span class=\"n\">test-mat</span><span class=\"w\"> </span><span class=\"no\">:all</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"w\"> </span><span class=\"mi\">64</span><span class=\"p\">)))</span><span class=\"w\">\n</span><span class=\"p\">(</span><span class=\"k\">def</span><span class=\"w\"> </span><span class=\"n\">y-test</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nf\">get-column</span><span class=\"w\"> </span><span class=\"n\">test-mat</span><span class=\"w\"> </span><span class=\"mi\">64</span><span class=\"p\">))</span></code></pre></figure>\n\n<h3 id=\"training\">Training</h3>\n\n<p>Here, we use the KNN model for classifying the digits. The syntax for KNN is,</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-clojure\" data-lang=\"clojure\"><span class=\"p\">(</span><span class=\"nf\">knn</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"no\">:k</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"p\">)</span></code></pre></figure>\n\n<p>where,<br />\n<em>X</em> is input data,<br />\n<em>y</em> is target data,<br />\n<em>v</em> is new input to be classified, and<br />\n<em>k</em> is the number of neighbours(optional, default = 3)</p>\n\n<p>Let’s define a function to perform kNN on our dataset.</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-clojure\" data-lang=\"clojure\"><span class=\"p\">(</span><span class=\"k\">def</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"o\">#</span><span class=\"p\">(</span><span class=\"nf\">knn</span><span class=\"w\"> </span><span class=\"n\">X-train</span><span class=\"w\"> </span><span class=\"n\">y-train</span><span class=\"w\"> </span><span class=\"n\">%</span><span class=\"p\">))</span></code></pre></figure>\n\n<p>Now, <strong>h</strong> can be used to classify the training set.</p>\n\n<h3 id=\"testing\">Testing</h3>\n\n<p>Let’s test the KNN model. Classifying the data in the testing set,</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-clojure\" data-lang=\"clojure\"><span class=\"p\">(</span><span class=\"k\">def</span><span class=\"w\"> </span><span class=\"n\">preds</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\">map</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nf\">rows</span><span class=\"w\"> </span><span class=\"n\">X-test</span><span class=\"p\">)))</span></code></pre></figure>\n\n<p>Now let’s check the accuracy of the model.</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-clojure\" data-lang=\"clojure\"><span class=\"p\">(</span><span class=\"nb\">*</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\">/</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\">apply</span><span class=\"w\"> </span><span class=\"nb\">+</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\">map</span><span class=\"w\"> </span><span class=\"o\">#</span><span class=\"p\">(</span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\">=</span><span class=\"w\"> </span><span class=\"n\">%1</span><span class=\"w\"> </span><span class=\"n\">%2</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">y-test</span><span class=\"w\"> </span><span class=\"n\">preds</span><span class=\"p\">))</span><span class=\"w\"> \n      </span><span class=\"p\">(</span><span class=\"nf\">row-count</span><span class=\"w\"> </span><span class=\"n\">y-test</span><span class=\"p\">))</span><span class=\"w\">\n   </span><span class=\"mf\">100.0</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"c1\">; 99.74</span></code></pre></figure>\n\n<p>The model has a 99.74% accuracy on the test set! The accuracy of the model could vary highly depending on the shuffling of the dataset.</p>\n\n<h3 id=\"conclusion\">Conclusion</h3>\n\n<p>The KNN model has a really good accuracy for the digit classification dataset used here. The problem with KNN is it’s inefficiency. It requires  computation involving all samples in the dataset to classify a new sample. The <a href=\"http://yann.lecun.com/exdb/mnist/\">MNIST</a> dataset is a large dataset of handwritten digits - 50,000 training set and 10,000 test set samples. A more complex model such as SVM or MLP(Multi Layer Perceptron) may be used for better efficiency and classification accuracy for such datasets. That’s it! more work on Clatern to follow soon. So, keep an eye out :-)</p>",
  "author": {
    "name": ""
  },
  "category": "",
  "summary": "This is a tutorial on classifying handwritten digits with KNN algorithm using Clatern. Clatern is a machine learning library for Clojure, in the works."
}