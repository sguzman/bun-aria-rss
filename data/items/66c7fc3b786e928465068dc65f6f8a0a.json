{
  "title": "Adobe Analytics Clickstream Data Feed: Calculations and Outlier Analysis",
  "description": "<p>In a previous post, I outlined how to load <a href=\"http://randyzwitch.com/adobe-analytics-clickstream-data-feed-relational-database/\">daily Adobe Analytics Clickstream data feeds</a> into a PostgreSQL database. While this isn’t a long-term scalable solution for large e-commerce companies doing millions of page views per day, for exploratory analysis a relational database structure can work well until a more robust solution is put into place (such as Hadoop/Spark).</p>",
  "pubDate": "Tue, 24 May 2016 11:11:20 +0000",
  "link": "http://randyzwitch.com/adobe-analytics-clickstream-data-feed-calculations/",
  "guid": "http://randyzwitch.com/adobe-analytics-clickstream-data-feed-calculations/",
  "content": "<p>In a previous post, I outlined how to load <a href=\"http://randyzwitch.com/adobe-analytics-clickstream-data-feed-relational-database/\">daily Adobe Analytics Clickstream data feeds</a> into a PostgreSQL database. While this isn’t a long-term scalable solution for large e-commerce companies doing millions of page views per day, for exploratory analysis a relational database structure can work well until a more robust solution is put into place (such as Hadoop/Spark).</p>\n\n<h2 id=\"data-validation-\">Data Validation <groan></groan></h2>\n\n<p>Before digging too deeply into the data, we should validate that data from the data feed in our database (<a href=\"https://gist.github.com/randyzwitch/7a9c48e7132e6ed9dfb0d02ec906961c\">custom database view code</a>) matches what we observe from other sources (mainly, the Adobe Analytics interface and/or <a href=\"http://randyzwitch.com/tags/#rsitecatalyst\">RSiteCatalyst</a>). Given the Adobe Analytics data feed represents an export of the underlying data, and Adobe provides the formulas in the <a href=\"https://marketing.adobe.com/resources/help/en_US/sc/clickstream/datafeeds_calculate.html\">data feed documentation</a>, <em>in theory</em> you should be able to replicate the numbers exactly:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-r\" data-lang=\"r\"><table class=\"rouge-table\"><tbody><tr><td class=\"gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n</pre></td><td class=\"code\"><pre><span class=\"c1\"># \"Source 1\": Pull data from the API using RSiteCatalyst</span><span class=\"w\">\n</span><span class=\"n\">library</span><span class=\"p\">(</span><span class=\"s2\">\"RSiteCatalyst\"</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"n\">SCAuth</span><span class=\"p\">(</span><span class=\"n\">Sys.getenv</span><span class=\"p\">(</span><span class=\"s2\">\"USER\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">\"\"</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">Sys.getenv</span><span class=\"p\">(</span><span class=\"s2\">\"SECRET\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">\"\"</span><span class=\"p\">))</span><span class=\"w\">\n</span><span class=\"n\">overtime</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">QueueOvertime</span><span class=\"p\">(</span><span class=\"s2\">\"zwitchdev\"</span><span class=\"p\">,</span><span class=\"w\">\n                           </span><span class=\"n\">date.from</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"2016-04-01\"</span><span class=\"p\">,</span><span class=\"w\">\n                           </span><span class=\"n\">date.to</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"2016-05-17\"</span><span class=\"p\">,</span><span class=\"w\">\n                           </span><span class=\"n\">metrics</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nf\">c</span><span class=\"p\">(</span><span class=\"s2\">\"pageviews\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">\"visits\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">\"visitors\"</span><span class=\"p\">),</span><span class=\"w\">\n                           </span><span class=\"n\">date.granularity</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"day\"</span><span class=\"p\">)</span><span class=\"w\">\n\n</span><span class=\"c1\"># \"Source 2\": Pull data from Postgres database</span><span class=\"w\">\n</span><span class=\"n\">library</span><span class=\"p\">(</span><span class=\"n\">RPostgreSQL</span><span class=\"p\">)</span><span class=\"w\">\n\n</span><span class=\"c1\"># Connect to database</span><span class=\"w\">\n</span><span class=\"n\">conn</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">dbConnect</span><span class=\"p\">(</span><span class=\"n\">dbDriver</span><span class=\"p\">(</span><span class=\"s2\">\"PostgreSQL\"</span><span class=\"p\">),</span><span class=\"w\">\n                 </span><span class=\"n\">user</span><span class=\"o\">=</span><span class=\"s2\">\"postgres\"</span><span class=\"p\">,</span><span class=\"w\">\n                 </span><span class=\"n\">password</span><span class=\"o\">=</span><span class=\"s2\">\"\"</span><span class=\"p\">,</span><span class=\"w\">\n                 </span><span class=\"n\">host</span><span class=\"o\">=</span><span class=\"s2\">\"localhost\"</span><span class=\"p\">,</span><span class=\"w\">\n                 </span><span class=\"n\">port</span><span class=\"o\">=</span><span class=\"m\">5432</span><span class=\"p\">,</span><span class=\"w\">\n                 </span><span class=\"n\">dbname</span><span class=\"o\">=</span><span class=\"s2\">\"adobe\"</span><span class=\"p\">)</span><span class=\"w\">\n\n</span><span class=\"n\">dbdata</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">dbGetQuery</span><span class=\"p\">(</span><span class=\"n\">conn</span><span class=\"p\">,</span><span class=\"w\">\n                     </span><span class=\"s2\">\"select\n                     date(date_time) as date_localtime,\n                     sum(CASE WHEN post_page_event = '0' THEN 1 END) as pageviews,\n                     count(distinct ARRAY_TO_STRING(ARRAY[post_visid_high::text, post_visid_low::text, visit_num::text], '')) as visits,\n                     count(distinct ARRAY_TO_STRING(ARRAY[post_visid_high::text, post_visid_low::text], '')) as visitors\n                     from usefuldata\n                     where date_time between '2016-04-01' and '2016-05-18' and exclude_hit = '0'\n                     group by 1\n                     order by 1;\"</span><span class=\"p\">)</span><span class=\"w\">\n\n</span><span class=\"c1\"># Compare data sources</span><span class=\"w\">\n</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">diff_pv</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">table</span><span class=\"p\">(</span><span class=\"n\">overtime</span><span class=\"o\">$</span><span class=\"n\">pageviews</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">dbdata</span><span class=\"o\">$</span><span class=\"n\">pageviews</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">diff_pv</span><span class=\"w\">\n\n</span><span class=\"m\">0</span><span class=\"w\">\n</span><span class=\"m\">47</span><span class=\"w\">\n\n</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">diff_visits</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">table</span><span class=\"p\">(</span><span class=\"n\">overtime</span><span class=\"o\">$</span><span class=\"n\">visits</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">dbdata</span><span class=\"o\">$</span><span class=\"n\">visits</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">diff_visits</span><span class=\"w\">\n\n</span><span class=\"m\">0</span><span class=\"w\">\n</span><span class=\"m\">47</span><span class=\"w\">\n\n</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">diff_visitors</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">table</span><span class=\"p\">(</span><span class=\"n\">overtime</span><span class=\"o\">$</span><span class=\"n\">visitors</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">dbdata</span><span class=\"o\">$</span><span class=\"n\">visitors</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">diff_visitors</span><span class=\"w\">\n\n</span><span class=\"m\">0</span><span class=\"w\">\n</span><span class=\"m\">47</span>\n</pre></td></tr></tbody></table></code></pre></figure>\n\n<p>The code snippet above shows the validation, and sure enough, the “two different sources” show the same exact values (i.e. differences are 0), so everything has been loaded properly into the PostgreSQL database.</p>\n\n<h2 id=\"finding-anomalies-for-creating-bot-rules\">Finding Anomalies For Creating Bot Rules</h2>\n\n<p>With the data validated, we can now start digging deeper into the data. As an example, although I have <a href=\"https://marketing.adobe.com/resources/help/en_US/reference/bot_rules.html\">bot filtering</a> enabled, this only handles bots on the <a href=\"http://www.iab.com/guidelines/iab-abc-international-spiders-bots-list/\">IAB bot list</a> but not necessarily people trying to scrape my site (or worse).</p>\n\n<p>To create a <a href=\"https://marketing.adobe.com/resources/help/en_US/reference/t_create_bot_rules.html\">custom bot rule in Adobe Analytics</a>, you can use IP address(es) and/or User-Agent string. However, as part of data exploration we are not limited to just these features (assuming, of course, that you can map your feature set back to an IP/User-Agent combo). To identify outlier behavior, I’m going to use a technique called ‘<a href=\"http://www.dbs.ifi.lmu.de/Publikationen/Papers/LOF.pdf\">local outlier factors</a>’ using the <a href=\"https://cran.r-project.org/web/packages/Rlof/index.html\">Rlof</a> package in R with the following data features:</p>\n\n<ul>\n  <li>Distinct Days Visited</li>\n  <li>Total Pageviews</li>\n  <li>Total Visits</li>\n  <li>Distinct Pages Viewed</li>\n  <li>Pageviews Per Visit</li>\n  <li>Average Views Per Page</li>\n</ul>\n\n<p>These aren’t the only features I could’ve used, but it should be pretty easy to view bot/scraper traffic using these metrics. Here’s the code:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-r\" data-lang=\"r\"><table class=\"rouge-table\"><tbody><tr><td class=\"gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n</pre></td><td class=\"code\"><pre><span class=\"c1\"># Local outlier factor calculation</span><span class=\"w\">\n</span><span class=\"n\">library</span><span class=\"p\">(</span><span class=\"n\">RPostgreSQL</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"n\">library</span><span class=\"p\">(</span><span class=\"n\">Rlof</span><span class=\"p\">)</span><span class=\"w\">\n\n</span><span class=\"n\">conn</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">dbConnect</span><span class=\"p\">(</span><span class=\"n\">dbDriver</span><span class=\"p\">(</span><span class=\"s2\">\"PostgreSQL\"</span><span class=\"p\">),</span><span class=\"w\">\n                  </span><span class=\"n\">user</span><span class=\"o\">=</span><span class=\"s2\">\"postgres\"</span><span class=\"p\">,</span><span class=\"w\">\n                  </span><span class=\"n\">password</span><span class=\"o\">=</span><span class=\"s2\">\"\"</span><span class=\"p\">,</span><span class=\"w\">\n                  </span><span class=\"n\">host</span><span class=\"o\">=</span><span class=\"s2\">\"localhost\"</span><span class=\"p\">,</span><span class=\"w\">\n                  </span><span class=\"n\">port</span><span class=\"o\">=</span><span class=\"m\">5432</span><span class=\"p\">,</span><span class=\"w\">\n                  </span><span class=\"n\">dbname</span><span class=\"o\">=</span><span class=\"s2\">\"adobe\"</span><span class=\"p\">)</span><span class=\"w\">\n\n</span><span class=\"n\">metrics_lof</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">dbGetQuery</span><span class=\"p\">(</span><span class=\"n\">conn</span><span class=\"p\">,</span><span class=\"w\">\n                          </span><span class=\"s2\">\"select\n                          ip,\n                          distinct_days_visited,\n                          pageviews,\n                          visits,\n                          distinct_pages_viewed,\n                          pageviews/visits::double precision as pv_per_visit,\n                          pageviews/distinct_pages_viewed::double precision as avg_views_per_page\n                          from\n                          (\n                          select\n                          ip,\n                          sum(CASE WHEN post_page_event = '0' THEN 1 END) as pageviews,\n                          count(distinct ARRAY_TO_STRING(ARRAY[post_visid_high::text, post_visid_low::text, visit_num::text, visit_start_time_gmt::text], '')) as visits,\n                          count(distinct post_pagename) as distinct_pages_viewed,\n                          count(distinct date(date_time)) as distinct_days_visited\n                          from usefuldata\n                          where exclude_hit = '0'\n                          group by 1\n                          ) a\n                          where visits &gt; 1 and pageviews &gt; 1;\"</span><span class=\"p\">)</span><span class=\"w\">\n\n\n</span><span class=\"c1\"># The higher the value of k, the more likely lof will be calculated...</span><span class=\"w\">\n</span><span class=\"c1\"># ...but more generic the clusters</span><span class=\"w\">\n</span><span class=\"c1\"># NaN/Inf occurs with points on top of one another/div by zero, which is likely...</span><span class=\"w\">\n</span><span class=\"c1\"># ...with web data when most visitors have 1-2 sessions</span><span class=\"w\">\n</span><span class=\"n\">df_lof</span><span class=\"o\">&lt;-</span><span class=\"n\">lof</span><span class=\"p\">(</span><span class=\"n\">metrics_lof</span><span class=\"p\">[,</span><span class=\"w\"> </span><span class=\"m\">2</span><span class=\"o\">:</span><span class=\"m\">7</span><span class=\"p\">],</span><span class=\"n\">k</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"m\">20</span><span class=\"p\">)</span><span class=\"w\">\n\n</span><span class=\"c1\"># Append results, get top 500 worst scoring IP addresses</span><span class=\"w\">\n</span><span class=\"n\">results</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">cbind</span><span class=\"p\">(</span><span class=\"n\">metrics_lof</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">df_lof</span><span class=\"p\">)[</span><span class=\"n\">order</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">df_lof</span><span class=\"p\">),]</span><span class=\"w\">\n</span><span class=\"n\">worst500</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">head</span><span class=\"p\">(</span><span class=\"n\">subset</span><span class=\"p\">(</span><span class=\"n\">results</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"nf\">is.infinite</span><span class=\"p\">(</span><span class=\"n\">df_lof</span><span class=\"p\">)),</span><span class=\"w\"> </span><span class=\"m\">500</span><span class=\"p\">)</span>\n</pre></td></tr></tbody></table></code></pre></figure>\n\n<p>A local outlier factor greater than 1 is classified as a potential outlier. Here’s a visual of the lof scores for the top 500 <em>worst</em> scoring IP addresses <a href=\"https://gist.github.com/randyzwitch/178d72e01e30943f6af82c48a47c4478\">(vegalite R graph code)</a>:</p>\n\n<div id=\"vis\"></div>\n\n<p>We can see from the graph that there are at least 500 IP addresses that are potential outliers (since the line doesn’t go below a lof value of 1). These points are now a good starting place to go back to our overall table and inspect the entire datafeed records by IP address.</p>\n\n<h2 id=\"but-what-about-business-value\">But what about business value?</h2>\n\n<p>The example above just scratches the surface on what’s possible when you have access to the raw data from Adobe Analytics. It’s possible to do these calculations on my laptop using R because I only have a few hundred-thousand records and IP addresses. But this kind of ops work is pretty low-value, since unless you are trying to detect system hacking, trying to find hidden scrapers/spiders in your data to filter out just modifies the denominator of your KPIs it doesn’t lead to real money per se.</p>\n\n<p>In the last post of this series, I’ll cover how to work with the datafeed using Spark, and provide an example of using <a href=\"http://spark.apache.org/docs/latest/mllib-guide.html\">Spark MLLib</a> to increase site engagement.</p>"
}