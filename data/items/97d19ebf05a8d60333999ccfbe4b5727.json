{
  "title": "A web application for forecasting in Python, R, Ruby, C#, JavaScript, PHP, Go, Rust, Java, MATLAB, etc.",
  "link": "https://www.r-bloggers.com/2022/11/a-web-application-for-forecasting-in-python-r-ruby-c-javascript-php-go-rust-java-matlab-etc/",
  "dc:creator": "T. Moudiki",
  "pubDate": "Wed, 02 Nov 2022 00:00:00 +0000",
  "category": "R bloggers",
  "guid": "https://thierrymoudiki.github.io//blog/2022/11/02/python/r/forecasting/misc/forecasting-api",
  "description": "<div style = \"width:60%; display: inline-block; float:left; \"> A Forecasting API, with examples</div>\n<div style = \"width: 40%; display: inline-block; float:right;\"></div>\n<div style=\"clear: both;\"></div>\n<strong>Continue reading</strong>: <a href=\"https://www.r-bloggers.com/2022/11/a-web-application-for-forecasting-in-python-r-ruby-c-javascript-php-go-rust-java-matlab-etc/\">A web application for forecasting in Python, R, Ruby, C#, JavaScript, PHP, Go, Rust, Java, MATLAB, etc.</a>",
  "content:encoded": "<!-- \n<div style=\"min-height: 30px;\">\n[social4i size=\"small\" align=\"align-left\"]\n</div>\n-->\n\n<div style=\"border: 1px solid; background: none repeat scroll 0 0 #EDEDED; margin: 1px; font-size: 12px;\">\n[This article was first published on  <strong><a href=\"https://thierrymoudiki.github.io//blog/2022/11/02/python/r/forecasting/misc/forecasting-api\"> T. Moudiki's Webpage - R</a></strong>, and kindly contributed to <a href=\"https://www.r-bloggers.com/\" rel=\"nofollow\">R-bloggers</a>].  (You can report issue about the content on this page <a href=\"https://www.r-bloggers.com/contact-us/\">here</a>)\n<hr>Want to share your content on R-bloggers?<a href=\"https://www.r-bloggers.com/add-your-blog/\" rel=\"nofollow\"> click here</a> if you have a blog, or <a href=\"http://r-posts.com/\" rel=\"nofollow\"> here</a> if you don't.\n</div>\n<p><strong>Content</strong></p>\n\n<ul>\n  <li> 0 &#8211; Intro </li>\n  <li> 1 &#8211; Create an account </li>\n  <li> 2 &#8211; Get a token for authentication </li>\n  <li> 3 &#8211; Requests for forecasts </li>\n  <li> 4 &#8211; On model calibration and cross-validation </li>\n</ul>\n\n<h2 id=\"0---intro\">0 &#8211; Intro</h2>\n\n<p>In this post, I’ll describe an (work-in-progress) Application Programming Interface (API) for time series forecasting. An API is a system that can receive requests from your computer, to carry out given tasks on given resources, and return a response. This type of system is programming-language-agnostic. That means: it can be used with Python, JavaScript, PHP, R, Go, C#, Ruby, Rust, Java, MATLAB, Julia, and any other programming language speaking http. And therefore, it could be relatively easily integrated into existing workflows for uncertainty forecasting. I’ve used the following tools for building it:</p>\n\n<ul>\n  <li> Python&#8217;s <a href=\"https://flask.palletsprojects.com/en/2.2.x/\" rel=\"nofollow\" target=\"_blank\">Flask</a> for backend development </li>\n  <li>  <a href=\"https://bootswatch.com/\" rel=\"nofollow\" target=\"_blank\">Bootswatch</a> for the HTML/CSS theme </li>\n  <li>  <a href=\"https://plotly.com/python/\" rel=\"nofollow\" target=\"_blank\">Plotly</a> for interactive graphs </li>\n  <li>  <a href=\"https://www.sqlalchemy.org/\" rel=\"nofollow\" target=\"_blank\">SQLAlchemy</a>| <a href=\"https://www.postgresql.org/\" rel=\"nofollow\" target=\"_blank\">PostgreSQL</a>  for database management </li>\n  <li>  <a href=\"https://swagger.io/\" rel=\"nofollow\" target=\"_blank\">Swagger</a> for API documentation </li>\n  <li>  Salesforce&#8217;s <a href=\"https://www.heroku.com/\" rel=\"nofollow\" target=\"_blank\">Heroku</a> (Cloud Application Platform) for deploying the application </li>\n</ul>\n\n<p><strong>The application is here:</strong></p>\n\n<p><a href=\"https://techtonique2.herokuapp.com/\" rel=\"nofollow\" target=\"_blank\">https://techtonique2.herokuapp.com/</a></p>\n\n<p><img src=\"https://i1.wp.com/thierrymoudiki.github.io/images/2022-11-02/2022-11-02-image1.png?w=578&#038;ssl=1\" alt=\"app's homepage\" class=\"img-responsive\" data-recalc-dims=\"1\" /></p>\n\n<p>In the homepage (“/”), you can plot a time series by uploading a csv file, and pushing the button “Plot!”. Some examples of input files are stored on GitHub, at <a href=\"https://github.com/Techtonique/datasets/tree/main/time_series/univariate\" rel=\"nofollow\" target=\"_blank\">https://github.com/Techtonique/datasets/tree/main/time_series/univariate</a>. Hover your cursor over the graph to see the options available, like downloading as png, zooming in and out, etc. Let’s describe the API now.</p>\n\n<h2 id=\"1---create-an-account\">1 &#8211; Create an account:</h2>\n\n<p>In order to sign up, you can use your username or an email address. A valid email address is preferable, because usernames  duplicates aren’t authorized in the database. You don’t want to spend your precious time trying to figure out which username hasn’t been registered yet! In addition, without a valid email address, you won’t be notified for changes and improvements in the API (e.g new forecasting models added, bugs fixes…).</p>\n\n<p><strong>Using  <code>curl</code></strong></p>\n\n<pre>curl -X POST -H \"Content-Type: application/json\" -d '{\"username\":\"tester_curl@example.com\",\"password\":\"pwd\"}' https://techtonique2.herokuapp.com/api/users\n</pre>\n\n<p>If you want to translate these commands from <code>curl</code> to your favorite programming language (Python, JavaScript, PHP, R, Go, C#, Ruby, Rust, Elixir, Java, MATLAB, Dart, CFML, Ansible URI, Strest), you can simply use the following website: <a href=\"https://curlconverter.com/\" rel=\"nofollow\" target=\"_blank\">https://curlconverter.com/</a>. Of course, it’s important to <a href=\"https://www.lifewire.com/strong-password-examples-2483118\" rel=\"nofollow\" target=\"_blank\">choose a better password</a>!</p>\n\n<p><strong>Using  Python</strong></p>\n\n<p>In the near future, there will be a user-friendly Python package encapsulating these steps.</p>\n\n<pre>import requests\n\nheaders = {\n    # Already added when you pass json=\n    # 'Content-Type': 'application/json',\n}\n\njson_data = {\n    'username': 'tester_py@example.com',\n    'password': 'pwd',\n}\n\nresponse = requests.post('https://techtonique2.herokuapp.com/api/users', headers=headers, json=json_data)\n</pre>\n\n<p><strong>Using  R</strong></p>\n\n<p>In the near future, there will be a user-friendly R package encapsulating these steps.</p>\n\n<pre>require(httr)\n\nheaders = c(\n  `Content-Type` = 'application/json'\n)\n\ndata = '{\"username\":\"tester_r@example.com\",\"password\":\"pwd\"}'\n\nres <- httr::POST(url = 'https://techtonique2.herokuapp.com/api/users', \n                  httr::add_headers(.headers=headers), body = data)\n\nprint(res)\n</pre>\n\n<p>Now that you have an account, you’ll need a token to obtain time series forecasts. \nThe username and password could be used for that purpose, but it’s better to avoid \nsending them in every request. In any case, make sure that you’re always sending \nrequests to <code>https://</code> and not <code>http://</code>.</p>\n\n<h2 id=\"2---get-a-token-for-authentication\">2 - Get a token for authentication</h2>\n\n<p><strong>Using  <code>curl</code></strong></p>\n\n<pre>curl -u tester_curl@example.com:pwd -X GET https://techtonique2.herokuapp.com/api/token \n</pre>\n\n<p>If you want to translate these commands from <code>curl</code> to your favorite programming language (Python, JavaScript, PHP, R, Go, C#, Ruby, Rust, Elixir, Java, MATLAB, Dart, CFML, Ansible URI, Strest), you can simply use the following website: <a href=\"https://curlconverter.com/\" rel=\"nofollow\" target=\"_blank\">https://curlconverter.com/</a>.</p>\n\n<p><strong>Using  Python</strong></p>\n\n<p>In the near future, there will be a user-friendly Python package encapsulating these steps.</p>\n\n<pre>response_token = requests.get('https://techtonique2.herokuapp.com/api/token', \nauth=('tester_py@example.com', 'pwd'))\n\ntoken = response_token.json()['token']\n\nprint(\"\\n\")\nprint(f\"token: {token}\")\n</pre>\n\n<p><strong>Using  R</strong></p>\n\n<p>In the near future, there will be a user-friendly R package encapsulating these steps.</p>\n\n<pre>res_token <- httr::GET(url = 'https://techtonique2.herokuapp.com/api/token', \n                 httr::authenticate('tester_r@example.com', 'python22orpython33'))\n\nprint(res_token)\n\n(token <- httr::content(res_token)$token)\n</pre>\n\n<h2 id=\"3---requests-for-forecasts\">3 - Requests for forecasts</h2>\n\n<p>We want to obtain 10 months-ahead forecasts \nfor the number of accidental Deaths in the US from 1973 to 1978\n, and \na confidence level of 95% for prediction intervals. The forecasting method is \nTheta from [1] and [2], winner of the M3 competition.</p>\n\n<p>The token from section 2 (valid for 5 minutes)\nwill be used here for authentication. You should read <a href=\"https://techtonique2.herokuapp.com/apidocs/\" rel=\"nofollow\" target=\"_blank\">the API’s  documentation</a> to understand each forecasting model’s parameters.</p>\n\n<p><strong>Using  <code>curl</code></strong></p>\n\n<pre>curl -u eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpOCsOC8-I:x -F 'file=@/Users/t/Documents/datasets/time_series/univariate/USAccDeaths.csv' \"https://techtonique2.herokuapp.com/api/theta?h=10&level=95\"\n</pre>\n<p>If you want to translate these commands from <code>curl</code> to your favorite programming language (Python, JavaScript, PHP, R, Go, C#, Ruby, Rust, Elixir, Java, MATLAB, Dart, CFML, Ansible URI, Strest), you can simply use the following website: <a href=\"https://curlconverter.com/\" rel=\"nofollow\" target=\"_blank\">https://curlconverter.com/</a>.</p>\n\n<p><code>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpOCsOC8-I</code> is a simplified example of the type of token which can be obtained in step 2. The csv file sent in the request must be stored on your computer. Examples of such files can be found <a href=\"https://github.com/Techtonique/datasets/tree/main/time_series/univariate\" rel=\"nofollow\" target=\"_blank\">here</a>.</p>\n\n<p><strong>Using  Python</strong></p>\n\n<p>In the near future, there will be a user-friendly Python package encapsulating these steps.</p>\n\n<pre>params = {\n    'h': '10',\n    'level': '95',\n}\n\n\nfiles = {\n    'file': open('./USAccDeaths.csv', 'rb') # File available at https://github.com/Techtonique/datasets/tree/main/time_series/univariate\n}\n\nresponse_forecast = requests.post('https://techtonique2.herokuapp.com/api/theta', \nfiles=files, params=params, auth=(token, 'x'))\n\nprint(response_forecast.json())\n\n</pre>\n\n<p><strong>Using  R</strong></p>\n\n<p>In the near future, there will be a user-friendly R package encapsulating these steps.</p>\n\n<pre>params = list(\n  `h` = '10', # horizon\n  `level` = '95' # level of confidence for prediction intervals\n)\n\nfiles = list(\n  `file` = upload_file('./USAccDeaths.csv') # File available at https://github.com/Techtonique/datasets/tree/main/time_series/univariate\n)\n\nptm <- proc.time()[3]\nres_forecast <- httr::POST(url = 'https://techtonique2.herokuapp.com/api/theta', \n                           query = params, body = files, encode = 'multipart', \n                           httr::authenticate(token, 'x'))\nproc.time()[3] - ptm\n\nlist_res <- httr::content(res_forecast)\n\n# Plot results\n\n# 1 - Results From R package forecast -----\n\nrequire(forecast)\n\n(forecast_object_R <- forecast::thetaf(USAccDeaths, h=10, level = 95))\n\n\n# 2 - Results From a Python implementation (in the API) -----\n\nh <- length(list_res$ranges)\n\nforecast_object_api <- list()\nforecast_object_api$mean <- forecast_object_api$upper <- forecast_object_api$lower <- ts(rep(0, h), \n                                                                             start = start(forecast_object_R$mean),\n                                                                             frequency = frequency(forecast_object_R$x))\n\nfor (i in 1:h)\n{\n  forecast_object_api$mean[i] <- list_res$averages[[i]][[2]]\n  forecast_object_api$lower[i] <- list_res$ranges[[i]][[2]]\n  forecast_object_api$upper[i] <- list_res$ranges[[i]][[3]]\n}\n\nforecast_object_api$x <- forecast_object_R$x\nforecast_object_api$method <- paste0(forecast_object_R$method, \" (API)\")\nforecast_object_api$level <- forecast_object_R$level\nforecast_object_api <- structure(forecast_object_api, class = \"forecast\")\n\nprint(forecast_object_api)\nprint(forecast_object_R)\n\n# graphs\n\npar(mfrow=c(1, 2))\nplot(forecast_object_R)\nplot(forecast_object_api)\n</pre>\n<p><img src=\"https://i2.wp.com/thierrymoudiki.github.io/images/2022-11-02/2022-11-02-image2.png?w=578&#038;ssl=1\" alt=\"api responses\" class=\"img-responsive\" data-recalc-dims=\"1\" /></p>\n\n<h2 id=\"4---on-model-calibration-and-cross-validation\">4 - On model calibration and cross-validation</h2>\n\n<p>Each model <a href=\"https://techtonique2.herokuapp.com/apidocs/\" rel=\"nofollow\" target=\"_blank\">in the API</a> has 2 additional parameters that we haven’t discussed yet:</p>\n\n<ul>\n  <li><code>start_training</code>: Start training index for cross-validation</li>\n  <li><code>n_training</code>: Size of training set window for cross-validation</li>\n</ul>\n\n<p>Both of these parameters are to be used in a loop, in your favorite programming language, \nwhen you want to compare models’ performance, or tune their hyperparameters (model calibration). \nYou’d code a loop (with 3-seconds delays between each API call in the loop, because you’re nice!) in which:</p>\n\n<ul>\n  <li><code>start_training</code> is incremented of 1 at each iteration, and <code>n_training</code>\n  remains constant. \n  </li>\n  <li> <code>n_training</code> is incremented of 1 at each iteration, and <code>start_training</code>\n  remains constant. \n  </li>\n</ul>\n\n<p>More on this (cross-validation and model calibration) in a future post. Stay tuned.</p>\n\n<hr />\n\n<p>[1] Assimakopoulos, V., & Nikolopoulos, K. (2000). The theta model: a decomposition approach to forecasting. International journal of forecasting, 16(4), 521-530.</p>\n\n<p>[2] Hyndman, R. J., & Billah, B. (2003). Unmasking the Theta method. International Journal of Forecasting, 19(2), 287-290.</p>\n\n\n<div style=\"border: 1px solid; background: none repeat scroll 0 0 #EDEDED; margin: 1px; font-size: 13px;\">\n<div style=\"text-align: center;\">To <strong>leave a comment</strong> for the author, please follow the link and comment on their blog: <strong><a href=\"https://thierrymoudiki.github.io//blog/2022/11/02/python/r/forecasting/misc/forecasting-api\"> T. Moudiki's Webpage - R</a></strong>.</div>\n<hr />\n<a href=\"https://www.r-bloggers.com/\" rel=\"nofollow\">R-bloggers.com</a> offers <strong><a href=\"https://feedburner.google.com/fb/a/mailverify?uri=RBloggers\" rel=\"nofollow\">daily e-mail updates</a></strong> about <a title=\"The R Project for Statistical Computing\" href=\"https://www.r-project.org/\" rel=\"nofollow\">R</a> news and tutorials about <a title=\"R tutorials\" href=\"https://www.r-bloggers.com/how-to-learn-r-2/\" rel=\"nofollow\">learning R</a> and many other topics. <a title=\"Data science jobs\" href=\"https://www.r-users.com/\" rel=\"nofollow\">Click here if you're looking to post or find an R/data-science job</a>.\n\n<hr>Want to share your content on R-bloggers?<a href=\"https://www.r-bloggers.com/add-your-blog/\" rel=\"nofollow\"> click here</a> if you have a blog, or <a href=\"http://r-posts.com/\" rel=\"nofollow\"> here</a> if you don't.\n</div><strong>Continue reading</strong>: <a href=\"https://www.r-bloggers.com/2022/11/a-web-application-for-forecasting-in-python-r-ruby-c-javascript-php-go-rust-java-matlab-etc/\">A web application for forecasting in Python, R, Ruby, C#, JavaScript, PHP, Go, Rust, Java, MATLAB, etc.</a>",
  "enclosure": "",
  "post-id": 334188
}