{
  "title": "&#8216;CGAL&#8217; meets &#8216;R6&#8217;: the &#8216;cgalMeshes&#8217; package",
  "link": "https://www.r-bloggers.com/2022/11/cgal-meets-r6-the-cgalmeshes-package/",
  "dc:creator": "Stéphane Laurent",
  "pubDate": "Thu, 03 Nov 2022 00:00:00 +0000",
  "category": "R bloggers",
  "guid": "https://laustep.github.io/stlahblog/posts/cgalMeshes.html",
  "description": "<p>My new package<br />\n        cgalMeshes (not on CRAN<br />\n        yet) deals with 3D meshes. All algorithms implemented in this package<br />\n        are performed by the C++ library<br />\n        CGAL.</p>\n<p>        I already wrapped some CGA...</p>\n<strong>Continue reading</strong>: <a href=\"https://www.r-bloggers.com/2022/11/cgal-meets-r6-the-cgalmeshes-package/\">‘CGAL’ meets ‘R6’: the ‘cgalMeshes’ package</a>",
  "content:encoded": "<!-- \n<div style=\"min-height: 30px;\">\n[social4i size=\"small\" align=\"align-left\"]\n</div>\n-->\n\n<div style=\"border: 1px solid; background: none repeat scroll 0 0 #EDEDED; margin: 1px; font-size: 12px;\">\n[This article was first published on  <strong><a href=\"https://laustep.github.io/stlahblog/posts/cgalMeshes.html\"> Saturn Elephant</a></strong>, and kindly contributed to <a href=\"https://www.r-bloggers.com/\" rel=\"nofollow\">R-bloggers</a>].  (You can report issue about the content on this page <a href=\"https://www.r-bloggers.com/contact-us/\">here</a>)\n<hr>Want to share your content on R-bloggers?<a href=\"https://www.r-bloggers.com/add-your-blog/\" rel=\"nofollow\"> click here</a> if you have a blog, or <a href=\"http://r-posts.com/\" rel=\"nofollow\"> here</a> if you don't.\n</div>\n<div class=\"container-fluid\">\n  <div class=\"main col-sm-12\">\n    <div class=\"content\">\n      <p>\n        My new package\n        <a href=\"https://github.com/stla/cgalMeshes\" rel=\"nofollow\" target=\"_blank\">cgalMeshes</a> (not on CRAN\n        yet) deals with 3D meshes. All algorithms implemented in this package\n        are performed by the C++ library\n        <a href=\"https://www.cgal.org/\" rel=\"nofollow\" target=\"_blank\">CGAL</a>.\n      </p>\n      <p>\n        I already wrapped some <strong>CGAL</strong> stuff in some other\n        packages. But these packages have been archived by CRAN because there\n        were some warnings from the <strong>CGAL</strong> library, and I can’t\n        fix them. So I didn’t implement the algorithms which throw some\n        CRAN-unacceptable warnings in <strong>cgalMeshes</strong>, and hopefully\n        this package will remain on CRAN.\n      </p>\n      <p>\n        Moreover this package is different: the meshes are represented by a\n        <strong>R6</strong> class, called <code>cgalMesh</code>. This is more\n        convenient for the user, and once a mesh is instantiated, it stays in\n        memory, whereas the mesh was reprocessed at each operation with the\n        other packages.\n      </p>\n      <p>\n        Let’s have a quick look at <strong>cgalMeshes</strong>. Recall that the\n        <strong>R6</strong> class representing a mesh is called\n        <code>cgalMesh</code>. So to create a <strong>R6</strong> object from\n        this class, one has to use the <code>new</code> method. This method\n        allows to instantiate a mesh from a file, a <strong>rgl</strong> mesh,\n        or from a matrix of vertices and a list of faces.\n      </p>\n      <p>\n        I have the Stanford dragon in a mesh file. Let’s create a new\n        <code>cgalMesh</code> object from this file:\n      </p>\n      <div class=\"sourceCode\" id=\"cb1\">\n        <pre>library(cgalMeshes)\ndragon <- cgalMesh$new(\"StanfordDragon.off\")\ndragon\n## Mesh with 100239 vertices and 200379 faces.</pre>\n      </div>\n      <p>\n        Let’s plot it. We first do a <strong>rgl</strong> mesh from\n        <code>dragon</code> with the <code>getMesh</code> method:\n      </p>\n      <div class=\"sourceCode\" id=\"cb2\">\n        <pre>rglDragon <- dragon$getMesh()</pre>\n      </div>\n      <p>And now we plot the Stanford dragon:</p>\n      <div class=\"sourceCode\" id=\"cb3\">\n        <pre>library(rgl)\nopen3d(windowRect = 50 + c(0, 0, 512, 512))\nview3d(-30, 0, zoom = 0.7)\nshade3d(rglDragon, color = \"darkgreen\")</pre>\n      </div>\n      <p>\n        <img\n          src=\"https://i0.wp.com/laustep.github.io/stlahblog/posts/figures/StanfordDragon.png?w=578&#038;ssl=1\"\n          style=\"width: 75%\"\n        data-recalc-dims=\"1\" />\n      </p>\n      <p>We can check whether the mesh is triangle and closed:</p>\n      <div class=\"sourceCode\" id=\"cb4\">\n        <pre>dragon$isTriangle()\n## [1] TRUE\ndragon$isClosed()\n## [1] FALSE</pre>\n      </div>\n      <p>\n        I don’t know why this mesh is not closed. If it were closed, we could\n        get its volume by running <code>dragon$volume</code>:\n      </p>\n      <div class=\"sourceCode\" id=\"cb5\">\n        <pre>dragon$volume()\n## Error in .CppObject$volume(...): The mesh is not closed.</pre>\n      </div>\n      <p>\n        Let’s do something more funny now. We will compute the geodesic\n        distances between a source vertex on the mesh and all other vertices,\n        and we will plot the dragon after assigning to each vertex a color\n        corresponding to its geodesic distance from the source vertex. The\n        geodesic distance between two vertices is the length of the shortest\n        path between these two vertices which lies on the surface of the mesh.\n      </p>\n      <p>We will take the rightmost vertex for the source vertex:</p>\n      <div class=\"sourceCode\" id=\"cb6\">\n        <pre>vertices <- dragon$vertices()\nindex <- which.max(vertices[, 1L])</pre>\n      </div>\n      <p>\n        And we call the <code>geoDists</code> method to get the estimated\n        geodesic distances:\n      </p>\n      <div class=\"sourceCode\" id=\"cb7\">\n        <pre>geoDists <- dragon$geoDists(index)</pre>\n      </div>\n      <p>\n        Now we define a coloring function, which associates a color of the\n        <code>viridisLite::plasma</code> palette to each number in\n        <span class=\"math inline\">\\((0, 1)\\)</span>:\n      </p>\n      <div class=\"sourceCode\" id=\"cb8\">\n        <pre>fcolor <- colorRamp(viridisLite::plasma(200L))</pre>\n      </div>\n      <p>Then we associate a color to each vertex:</p>\n      <div class=\"sourceCode\" id=\"cb9\">\n        <pre>colors <- fcolor(geoDists / max(geoDists))</pre>\n      </div>\n      <p>\n        The <code>colors</code> object is a matrix, one row for each vertex, and\n        the columns provide the RGB coding of the color. We use the\n        <code>rgb</code> function to get hexadecimal colors:\n      </p>\n      <div class=\"sourceCode\" id=\"cb10\">\n        <pre>colors <- rgb(\n  colors[, 1L], colors[, 2L], colors[, 3L], maxColorValue = 255\n)</pre>\n      </div>\n      <p>Now we can add these colors to the <strong>rgl</strong> mesh:</p>\n      <div class=\"sourceCode\" id=\"cb11\">\n        <pre>rglDragon[[\"material\"]] <- list(\"color\" = colors)</pre>\n      </div>\n      <p>And here is the result:</p>\n      <div class=\"sourceCode\" id=\"cb12\">\n        <pre>open3d(windowRect = 50 + c(0, 0, 512, 512))\nview3d(-30, 0, zoom = 0.7)\nshade3d(rglDragon)</pre>\n      </div>\n      <p>\n        <img\n          src=\"https://i1.wp.com/laustep.github.io/stlahblog/posts/figures/StanfordDragon_colors.png?w=578&#038;ssl=1\"\n          style=\"width: 75%\"\n        data-recalc-dims=\"1\" />\n      </p>\n      <p>\n        More images on\n        <a href=\"https://github.com/stla/cgalMeshes\" rel=\"nofollow\" target=\"_blank\">the Github repo</a>.\n      </p>\n    </div>\n  </div>\n</div>\n\n<div style=\"border: 1px solid; background: none repeat scroll 0 0 #EDEDED; margin: 1px; font-size: 13px;\">\n<div style=\"text-align: center;\">To <strong>leave a comment</strong> for the author, please follow the link and comment on their blog: <strong><a href=\"https://laustep.github.io/stlahblog/posts/cgalMeshes.html\"> Saturn Elephant</a></strong>.</div>\n<hr />\n<a href=\"https://www.r-bloggers.com/\" rel=\"nofollow\">R-bloggers.com</a> offers <strong><a href=\"https://feedburner.google.com/fb/a/mailverify?uri=RBloggers\" rel=\"nofollow\">daily e-mail updates</a></strong> about <a title=\"The R Project for Statistical Computing\" href=\"https://www.r-project.org/\" rel=\"nofollow\">R</a> news and tutorials about <a title=\"R tutorials\" href=\"https://www.r-bloggers.com/how-to-learn-r-2/\" rel=\"nofollow\">learning R</a> and many other topics. <a title=\"Data science jobs\" href=\"https://www.r-users.com/\" rel=\"nofollow\">Click here if you're looking to post or find an R/data-science job</a>.\n\n<hr>Want to share your content on R-bloggers?<a href=\"https://www.r-bloggers.com/add-your-blog/\" rel=\"nofollow\"> click here</a> if you have a blog, or <a href=\"http://r-posts.com/\" rel=\"nofollow\"> here</a> if you don't.\n</div><strong>Continue reading</strong>: <a href=\"https://www.r-bloggers.com/2022/11/cgal-meets-r6-the-cgalmeshes-package/\">‘CGAL’ meets ‘R6’: the ‘cgalMeshes’ package</a>",
  "enclosure": "",
  "post-id": 334242
}