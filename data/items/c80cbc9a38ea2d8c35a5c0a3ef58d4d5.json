{
  "title": "How to Build Your Own Blockchain Part 4.2 &#8212; Ethereum Proof of Work Difficulty Explained",
  "link": "https://bigishdata.com/2017/11/21/how-to-build-your-own-blockchain-part-4-2-ethereum-proof-of-work-difficulty-explained/",
  "comments": "https://bigishdata.com/2017/11/21/how-to-build-your-own-blockchain-part-4-2-ethereum-proof-of-work-difficulty-explained/#respond",
  "dc:creator": "Jack Schultz",
  "pubDate": "Tue, 21 Nov 2017 04:00:08 +0000",
  "category": [
    "Blockchains",
    "General",
    "How To",
    "Python",
    "Bitcoin",
    "blockchain",
    "Ethereum"
  ],
  "guid": "http://bigishdata.com/?p=915",
  "description": "We&#8217;re back at it in the Proof of Work difficulty spectrum, this time going through how Ethereum&#8217;s difficulty changes over time. This is part 4.2 of the part 4 series, where part 4.1 was about Bitcoin&#8217;s PoW difficulty, and the &#8230; <a href=\"https://bigishdata.com/2017/11/21/how-to-build-your-own-blockchain-part-4-2-ethereum-proof-of-work-difficulty-explained/\">Continue reading <span class=\"meta-nav\">&#8594;</span></a>",
  "content:encoded": "<p>We&#8217;re back at it in the Proof of Work difficulty spectrum, this time going through how Ethereum&#8217;s difficulty changes over time. This is part 4.2 of the part 4 series, where part 4.1 was about Bitcoin&#8217;s PoW difficulty, and the following 4.3 will be about jbc&#8217;s PoW difficulty.</p>\n<p><strong>TL;DR</strong></p>\n<p>To calculate the difficulty for the next Ethereum block, you calculate the time it took to mine the previous block, and if that time difference was greater than the goal time, then the difficulty goes down to make mining the next block quicker. If it was less than the time goal, then difficulty goes up to attempt to mine the next block quicker.</p>\n<p>There are three parts to determining the new difficulty: <code>offset</code>, which determines the standard amount of change from one difficulty to the next; <code>sign</code>, which determines if the difficulty should go up or down; and <code>bomb</code>, which adds on extra difficulty depending on the block&#8217;s number.</p>\n<p>These numbers are calculated slightly differently for the different forks, Frontier, Homestead, and Metropolis, but the overall formula for calculating the next difficulty is</p>\n<pre>target = parent.difficulty + (offset * sign) + bomb</pre>\n<h3>Other Posts in This Series</h3>\n<ul>\n<li><a href=\"https://bigishdata.com/2017/10/17/write-your-own-blockchain-part-1-creating-storing-syncing-displaying-mining-and-proving-work/\">Part 1 — Creating, Storing, Syncing, Displaying, Mining, and Proving Work</a></li>\n<li><a href=\"https://bigishdata.com/2017/10/27/build-your-own-blockchain-part-2-syncing-chains-from-different-nodes/\">Part 2 — Syncing Chains From Different Nodes</a></li>\n<li><a href=\"https://bigishdata.com/2017/11/02/build-your-own-blockchain-part-3-writing-nodes-that-mine/\">Part 3 — Nodes that Mine</a></li>\n<li><a href=\"https://bigishdata.com/2017/11/13/how-to-build-a-blockchain-part-4-1-bitcoin-proof-of-work-difficulty-explained/\">Part 4.1 &#8212; Bitcoin Proof of Work Difficulty Explained</a></li>\n</ul>\n<h3>Pre notes</h3>\n<p>For the following code examples, this will be the class of the block.</p>\n<pre>class Block():\n  def __init__(self, number, timestamp, difficulty, uncles=None):\n    self.number = number\n    self.timestamp = timestamp\n    self.difficulty = difficulty\n    self.uncles = uncles</pre>\n<p>The data I use to show the code is correct was grabbed from <a href=\"https://etherscan.io\">Etherscan</a>.</p>\n<p><span id=\"more-915\"></span></p>\n<p>The code doesn&#8217;t include edge cases in calculating the difficulty either. For the most part, edge cases aren&#8217;t involved in calculating the difficulty target. By not including them, it makes the following code much easier to understand.<span style=\"font-size:1rem;\"> I&#8217;ll talk about the edge cases at the end to make sure they&#8217;re not completely ignored.</span></p>\n<p>Finally, for the beginning fork, I talk about what the different variables and functions perform. For later forks, Homestead and Metropolis, I only talk about the changes.</p>\n<p>Also, <a href=\"https://github.com/jackschultz/ethana\">here&#8217;s all the code I threw in a Github repo</a>! If you don&#8217;t want to write all the code yourself, you should at least clone it locally and run it yourself. 1000% feel free to make pull requests if you want to add more parts to it or think I formatted the code wrong.</p>\n<h3>The Beginning &#8212; Frontier</h3>\n<p>In the beginning, there was Frontier. I&#8217;ll jump right in by giving a bullet point section going over the config variables.</p>\n<ul>\n<li><code>DIFF_ADJUSTMENT_CUTOFF</code> &#8212; Represents the seconds that Ethereum is aiming to mine a block at.</li>\n<li><code>BLOCK_DIFF_FACTOR</code> &#8212; Helps calculate how much the current difficulty can change.</li>\n<li><code>EXPDIFF_PERIOD</code> &#8212; Denotes after how many blocks the bomb amount is updated.</li>\n<li><code>EXPDIFF_FREE_PERIODS</code> &#8212; How many <code>EXPDIFF_PERIODS</code> are ignored before including the bomb in difficulty calculation.</li>\n</ul>\n<p>And now descriptions of the functions.</p>\n<p><strong><code>calc_frontier_sign</code></strong> &#8212; Calculates whether the next difficulty value should go up or down. In the case of Frontier, if the previous block was mined quicker than the 13 seconds <code>DIFF_ADJUSTMENT_CUTOFF</code>, then the sign will be 1, meaning we want the difficulty to be higher to make it more difficult with the goal that the next block be mined more slow. If the previous block was mined longer than 13 seconds, then the sign will be -1 and the next difficulty will be lower. The overall point of this is that the goal for block mining time is ~12.5 seconds. Take a look at Vitalik Buterin&#8217;s <a href=\"https://blog.ethereum.org/2014/07/11/toward-a-12-second-block-time/\">post where he talks about choosing 12 seconds at the minimum average block mining time</a>.</p>\n<p><strong><code>calc_frontier_offset</code></strong> &#8212; Offset is the value that determines how much or how little the difficulty will change. In the Frontier, this is the parent&#8217;s difficulty integer devided by the <code>BLOCK_DIFF_FACTOR</code>. Since it&#8217;s devided by 2048, which is 2^11, <code>offset</code> can also be calculated by <code>parent_difficulty >> 11</code> if you want to look at it in terms of shifting bits. Since <code>1.0 / 2048 == 0.00048828125</code>, it means that the offset will only change the difficulty by <code>0.0488%</code> per change. Not that much, which is good because we don&#8217;t want the difficulty to change a ton with each different mined block. But if the time becomes consistently under the 13 seconds cutoff, the difficulty will slowly grow to compensate.</p>\n<p><strong><code>calc_frontier_bomb</code></strong> &#8212; The bomb. The bomb adds an amount of difficulty that doubles after every <code>EXPDIFF_PERIOD</code> block is mined. In the Frontier world, this value is incredibly small. For example, at block 1500000, the bomb is <code>2 ** ((1500000 // 100000) - 2) == 2 ** 15 == 32768</code>. The difficulty of the block is 34982465665323. That&#8217;s a huge difference meaning that the bomb took on zero affect. This will change later.</p>\n<p><code><strong>calc_frontier_difficulty</strong></code> &#8212; Once you have the values for sign, offset, and bomb, the new difficulty is <code>(parent.difficulty + offset * sign) + bomb</code>. Let&#8217;s say that the the time it took to mine the parent&#8217;s block was 15 seconds. In this case, the difficulty will go down by <code>offset * -1</code>, and then add the small amount of the <code>bomb</code> at the end. If the time to mine the parent&#8217;s block was 8 seconds, the difficulty will increase by <code>offset + bomb</code>.</p>\n<p>In order to understand it fully, go through the code that follows and look at the calculations.</p>\n<pre>config = dict(\n  DIFF_ADJUSTMENT_CUTOFF=13,\n  BLOCK_DIFF_FACTOR=2048,\n  EXPDIFF_PERIOD=100000,\n  EXPDIFF_FREE_PERIODS=2,\n)\n\ndef calc_frontier_offset(parent_difficulty):\n  offset = parent_difficulty // config['BLOCK_DIFF_FACTOR']\n  return offset\n\ndef calc_frontier_sign(parent_timestamp, child_timestamp):\n  time_diff = child_timestamp - parent_timestamp\n  if time_diff < config['DIFF_ADJUSTMENT_CUTOFF']:\n    sign = 1\n  else:\n    sign = -1\n  return sign\n\ndef calc_frontier_bomb(parent_number):\n  period_count = (parent.number + 1) // config['EXPDIFF_PERIOD']\n  period_count -= config['EXPDIFF_FREE_PERIODS']\n  bomb = 2**(period_count)\n  return bomb\n\ndef calc_frontier_difficulty(parent, child_timestamp):\n  offset = calc_frontier_offset(parent.difficulty)\n  sign = calc_frontier_sign(parent.timestamp, child_timestamp)\n  bomb = calc_frontier_bomb(parent.number)\n  target = (parent.difficulty + offset * sign) + bomb\n  return offset, sign, bomb, target</pre>\n<h3>The Middle &#8212; Homestead</h3>\n<p>The Homestead fork, which took place at <a href=\"https://etherscan.io/block/1150000\">block number 1150000</a> in March of 2016, has a couple big changes with calculating the <code>sign</code>.</p>\n<p><strong><code>calc_homestead_sign</code></strong> &#8212; Instead of having a single number, DIFF_ADJUSTMENT_CUTOFF which is different for the Homestead fork, that makes the difficulty go up or down, Homestead takes a slightly different approach. If you look at the code, you&#8217;ll see that that there are groupings of the sign rather than either 1 or -1. If the time_diff between grandparent and parent is in [0,9],  sign will be 1, meaning that difficulty needs to increase. If the time_diff is [10,19], the sign will be 0 meaning that the difficulty should stay as it is. If the time_diff is in the range [20, 29], then the sign becomes -1. If time_diff is in the range [30,39], then the sign is -2, etc.</p>\n<p>This does two things. First, Homestead doesn&#8217;t want to equate a block that took 50 seconds to mine as being the same as a block that took 15 seconds to mine. If it took a block 50 seconds, then the next difficulty in fact does need to be easier. Secondly, instead of DIFF_ADJUSTMENT_CUTOFF representing the goal time, this switches the aim point to be the mid point of the range of <code>time_diff</code>s with a sign of 0. [10, 11, 12, 13, 14, 15, 16, 17, 18, 19]. Meaning ~14.5 seconds, not including the bomb.</p>\n<pre>config = dict(\n  HOMESTEAD_DIFF_ADJUSTMENT_CUTOFF=10,\n  BLOCK_DIFF_FACTOR=2048,\n  EXPDIFF_PERIOD=100000,\n  EXPDIFF_FREE_PERIODS=2,\n)\n\ndef calc_homestead_offset(parent_difficulty):\n  offset = parent_difficulty // config['BLOCK_DIFF_FACTOR']\n  return offset\n\ndef calc_homestead_sign(parent_timestamp, child_timestamp):\n  time_diff = child_timestamp - parent_timestamp\n  sign = 1 - (time_diff // config['HOMESTEAD_DIFF_ADJUSTMENT_CUTOFF'])\n  return sign\n\ndef calc_homestead_bomb(parent_number):\n  period_count = (parent_number + 1) // config['EXPDIFF_PERIOD'] # or parent.number + 1 >> 11 if you like bit notation\n  period_count -= config['EXPDIFF_FREE_PERIODS']\n  bomb = 2**(period_count)\n  return bomb\n\ndef calc_homestead_difficulty(parent, child_timestamp):\n  offset = calc_homestead_offset(parent.difficulty)\n  sign = calc_homestead_sign(parent.timestamp, child_timestamp)\n  bomb = calc_homestead_bomb(parent.number)\n  target = (parent.difficulty + offset * sign) + bomb\n  return offset, sign, bomb, target</pre>\n<h3>The Current &#8212; Metropolis</h3>\n<p>There are a couple differences from Homestead. First is that the <code>DIFF_ADJUSTMENT_CUTOFF</code> is now 9, which means that, without uncles, the target block time is midpoint of [9, 10, 11, 12, 13, 14, 15, 16, 17] or ~13 seconds.</p>\n<p>The second takes into account whether or not there are uncles included in the block. And uncle in Ethereum language refers to a point in time where two nodes mine a child block from the same grandparent. So if you&#8217;re mining a child block from a parent that has a &#8220;sibling&#8221;, you&#8217;re able to pick one of the siblings to mine from, but also include that you noticed the other block. In that case, Ethereum wants to make the new difficulty larger, buy another offset, to make sure that there is a less likely chance for two natural forks to get much longer.</p>\n<p>Now the biggest difference is dissolving the impact of the bombs. Check out the code for <code>calc_metropolis_bomb</code> where not only do we subtract the value of <code>EXPDIFF_FREE_PERIODS</code>, but also <code>METROPOLIS_DELAY_PERIODS</code> which is 30 time periods. A huge number. Instead of talking about the bombs here, I&#8217;ll have a section devoted to that after this.</p>\n<pre>config = dict(\n  METROPOLIS_DIFF_ADJUSTMENT_CUTOFF=9,\n  BLOCK_DIFF_FACTOR=2048,\n  EXPDIFF_PERIOD=100000,\n  EXPDIFF_FREE_PERIODS=2,\n  METROPOLIS_DELAY_PERIODS=30,\n)\n\ndef calc_metropolis_offset(parent_difficulty):\n  offset = parent_difficulty // config['BLOCK_DIFF_FACTOR']\n  return offset\n\ndef calc_metropolis_sign(parent_timestamp, child_timestamp):\n  if parent.uncles:\n    uncles = 2\n  else:\n    uncles = 1\n  time_diff = child_timestamp - parent_timestamp\n  sign = uncles - (time_diff // config['METROPOLIS_DIFF_ADJUSTMENT_CUTOFF'])\n  return sign\n\ndef calc_metropolis_bomb(parent_number):\n  period_count = (parent_number + 1) // config['EXPDIFF_PERIOD']\n  period_count -= config['METROPOLIS_DELAY_PERIODS'] #chop off 30, meaning go back 3M blocks in time\n  period_count -= config['EXPDIFF_FREE_PERIODS'] #chop off 2 more for good measure\n  bomb = 2**(period_count)\n  return bomb\n\ndef calc_metropolis_difficulty(parent, child_timestamp):\n  offset = calc_metropolis_offset(parent.difficulty)\n  sign = calc_metropolis_sign(parent_timestamp, child_timestamp)\n  bomb = calc_metropolis_bomb(parent.number)\n  target = (parent.difficulty + offset * sign) + bomb\n  return offset, sign, bomb, target</pre>\n<h3>Going Deeper with the Bombs</h3>\n<p>If you look at <a href=\"https://www.coinwarz.com/difficulty-charts/ethereum-difficulty-chart\">one of the difficulty charts</a> from online, you&#8217;ll see a recent amount of huge increasing jumps every 100000 blocks, and then a giant drop off about a month ago. Screenshot time for those not wanting to click the link:</p>\n<div data-shortcode=\"caption\" id=\"attachment_952\" style=\"width: 583px\" class=\"wp-caption alignnone\"><a href=\"https://bigishdata.files.wordpress.com/2017/11/ethereum_time_screenshot.png\"><img loading=\"lazy\" aria-describedby=\"caption-attachment-952\" data-attachment-id=\"952\" data-permalink=\"https://bigishdata.com/2017/11/21/how-to-build-your-own-blockchain-part-4-2-ethereum-proof-of-work-difficulty-explained/ethereum_time_screenshot/\" data-orig-file=\"https://bigishdata.files.wordpress.com/2017/11/ethereum_time_screenshot.png\" data-orig-size=\"1146,638\" data-comments-opened=\"1\" data-image-meta=\"{\"aperture\":\"0\",\"credit\":\"\",\"camera\":\"\",\"caption\":\"\",\"created_timestamp\":\"0\",\"copyright\":\"\",\"focal_length\":\"0\",\"iso\":\"0\",\"shutter_speed\":\"0\",\"title\":\"\",\"orientation\":\"0\"}\" data-image-title=\"ethereum_time_screenshot\" data-image-description=\"\" data-image-caption=\"<p>Each horizontal line indicates a 3 second change in time it takes to mine a block.</p>\n\" data-medium-file=\"https://bigishdata.files.wordpress.com/2017/11/ethereum_time_screenshot.png?w=300\" data-large-file=\"https://bigishdata.files.wordpress.com/2017/11/ethereum_time_screenshot.png?w=584\" class=\" wp-image-952\" src=\"https://bigishdata.files.wordpress.com/2017/11/ethereum_time_screenshot.png?w=573&#038;h=319\" alt=\"\" width=\"573\" height=\"319\" srcset=\"https://bigishdata.files.wordpress.com/2017/11/ethereum_time_screenshot.png?w=573&h=319 573w, https://bigishdata.files.wordpress.com/2017/11/ethereum_time_screenshot.png?w=150&h=84 150w, https://bigishdata.files.wordpress.com/2017/11/ethereum_time_screenshot.png?w=300&h=167 300w, https://bigishdata.files.wordpress.com/2017/11/ethereum_time_screenshot.png?w=768&h=428 768w, https://bigishdata.files.wordpress.com/2017/11/ethereum_time_screenshot.png?w=1024&h=570 1024w, https://bigishdata.files.wordpress.com/2017/11/ethereum_time_screenshot.png 1146w\" sizes=\"(max-width: 573px) 100vw, 573px\" /></a><p id=\"caption-attachment-952\" class=\"wp-caption-text\">Each horizontal line indicates a 3 second change in time it takes to mine a block.</p></div>\n<p>What&#8217;s the point of having a bomb like this? A big goal of Ethereum is to get rid of Proof of Work, which requires energy and time to create and validate a new block, into Proof of Stake, which is <a href=\"https://github.com/ethereum/wiki/wiki/Proof-of-Stake-FAQ\">described in the Ethereum Wiki</a>. In order to force nodes to move to the Proof of Stake implementation, a &#8220;<code>bomb</code>&#8221; that doubles its impact on the difficulty every 100000 blocks would soon make it take so long to mine a new block, the nodes running on the old fork won&#8217;t be able to run anymore. This is where the term &#8220;Ice Age&#8221; comes from; the block chain would be frozen in time.</p>\n<p>This is a good way to manage future changes, but also we run into the issue that the new Proof of Stake implementation, called Casper, wasn&#8217;t ready in time before the giant difficulty spikes seen in that graph. That&#8217;s where the Metropolis fork came into play &#8212; it eliminated the effect the <code>bomb</code> has on the difficulty, but in a few years it will come back into play, where the switch to Casper will (hopefully) be ready to roll. That being said, predicting when features like this fork are ready for production and adoption is difficult, so if Casper isn&#8217;t ready to be pushed quick enough, you can create another fork that moves the bomb back in time again.</p>\n<p><strong>Bomb Math</strong></p>\n<p>Besides the description of what the bombs do to the difficulty as seen on those graphs, it&#8217;s worth it to show the math behind why the difficulty is rising to those levels, and what that means for how long it takes to mine a block.</p>\n<p>Going back, remember that <code>offset</code> is an indicator of how much it takes a node to mine a block.</p>\n<p>For example, if the previous time difference between blocks was [18-26], we say that if we decrease difficulty by an <code>offset</code>, we&#8217;ll be able to move the time to mine a block back to the [9-17] range, or <code>DIFF_ADJUSTMENT_CUTOFF</code> seconds lower.</p>\n<p>So if we increase the difficulty by <code>offset</code>, we expect the time it takes to mine a block to increase by <code>DIFF_ADJUSTMENT_CUTOFF</code>. If we increase the difficulty by half of an <code>offset</code>, the mining time should increase by about <code>DIFF_ADJUSTMENT_CUTOFF</code> / 2.</p>\n<p>So if we want to see how much a bomb will influence the change in mining time, we want the ratio of bomb and offset.</p>\n<p><code>(bomb / offset) * DIFF_ADJUSTMENT_CUTOFF</code></p>\n<p>Here&#8217;s the code that shows how we can calculate the time it takes to mine and compare to the actual average time, where actual average mining time was gathered from <a href=\"https://bitinfocharts.com/comparison/ethereum-confirmationtime.html\">this chart</a> by hovering the cursor around where in time these blocks were mined.</p>\n<pre>def calc_mining_time(block_number, difficulty, actual_average_mining_time, calc_bomb, calc_offset):\n  homestead_goal_mining_time = 14.5 #about that.\n  bomb = calc_bomb(block_number)\n  offset = calc_offset(difficulty)\n  bomb_offset_ratio = bomb / float(offset)\n  seconds_adjustment = bomb_offset_ratio * config['HOMESTEAD_DIFF_ADJUSTMENT_CUTOFF']\n  average_mining_time = 0.4 * 60\n  calculated_average_mining_time = homestead_goal_mining_time + seconds_adjustment\n  print \"Bomb: %s\" % bomb\n  print \"Offset: %s\" % offset\n  print \"Bomb Offset Ratio: %s\" % bomb_offset_ratio\n  print \"Seconds Adjustment: %s\" % seconds_adjustment\n  print \"Actual Avg Mining Time: %s\" % actual_average_mining_time\n  print \"Calculated Mining Time: %s\" % calculated_average_mining_time\n  print\n\n\nblock_number = 4150000\ndifficulty = 1711391947807191\nactual_average_mining_time = 0.35 * 60\ncalc_mining_time(block_number, difficulty, actual_average_mining_time, calc_homestead_bomb, calc_homestead_offset)\n\nblock_number = 4250000\ndifficulty = 2297313428231280\nactual_average_mining_time = 0.4 * 60\ncalc_mining_time(block_number, difficulty, actual_average_mining_time, calc_homestead_bomb, calc_homestead_offset)\n\nblock_number = 4350000\ndifficulty = 2885956744389112\nactual_average_mining_time = 0.5 * 60\ncalc_mining_time(block_number, difficulty, actual_average_mining_time, calc_homestead_bomb, calc_homestead_offset)\n\nblock_number = 4546050\ndifficulty = 1436507601685486\nactual_average_mining_time = 0.23 * 60\ncalc_mining_time(block_number, difficulty, actual_average_mining_time, calc_metropolis_bomb, calc_metropolis_offset)</pre>\n<p>When run:</p>\n<pre>Bomb: 549755813888\nOffset: 835640599515\nBomb Offset Ratio: 0.657885476372\nSeconds Adjustment: 6.57885476372\nActual Avg Mining Time: 21.0\nCalculated Mining Time: 21.0788547637\n\nBomb: 1099511627776\nOffset: 1121735072378\nBomb Offset Ratio: 0.980188330427\nSeconds Adjustment: 9.80188330427\nActual Avg Mining Time: 24.0\nCalculated Mining Time: 24.3018833043\n\nBomb: 2199023255552\nOffset: 1409158566596\nBomb Offset Ratio: 1.56052222062\nSeconds Adjustment: 15.6052222062\nActual Avg Mining Time: 30.0\nCalculated Mining Time: 30.1052222062\n\nBomb: 8192\nOffset: 701419727385\nBomb Offset Ratio: 1.16791696614e-08\nSeconds Adjustment: 1.16791696614e-07\nActual Avg Mining Time: 13.8\nCalculated Mining Time: 14.5000001168</pre>\n<p>Look how large the bomb offset ratio is for the later Homestead blocks, and how tiny it becomes after the Metropolis block! With the loss of the bomb&#8217;s impact, the time difference drops a crap ton.</p>\n<p>As of now, the bomb doesn&#8217;t affect the difficulty by pretty much any amount. It&#8217;ll be back though. If Ethereum continues to mine blocks at the rate of ~14.5 seconds, they&#8217;ll have 100,000 mine blocks in around 17 days. Multiply that time by 30, which accounts for the <code>METROPOLIS_DELAY_PERIODS</code>, we&#8217;ll be back in a state where the bomb makes a difference in around a year and a half, no matter how much the hash power increases.</p>\n<p><strong>Bomb Equilibrium</strong></p>\n<p>The last part of bomb dealing is to quickly explain why a slight increase in the <code>bomb</code> will make the overall difficulty be raised to a much higher value compared to how large the <code>bomb</code> value is.</p>\n<p>The thought on how this works is by taking the calculated expecting mining time and from there calculating the difficulty required by the current hash rate to mine blocks in that time period. When the <code>bomb</code> amount changes, the difficulty will continue to rise or fall to get to the difficulty for that time, and then hover in that equilibrium. If you look at the blocks right after the bomb change, you&#8217;ll see it takes more than a few blocks to get to the new level.</p>\n<h3>The Edge Cases</h3>\n<p>There are a couple edge cases here not mentioned in the code above.</p>\n<ul>\n<li>MIN_DIFF=131072, which is the minimum difficulty a block can have. Considering the difficulty is incredibly larger than that, it&#8217;s pointless to think about that. But when Ethereum was gerenerated, it was probably useful to have a minimum difficulty. Also can be refered to as 2 ** 17.</li>\n<li>Smallest sign = -99. Imagine a situation where, for some reason, the sign for calculating the next block is -1000. The sign for the next block&#8217;s difficulty will drop by an incredible amount which would mean it&#8217;d take something like 1000 blocks to get back to the desired ~14 second mining time since the largest difficulty increasing sign is 1 (or two if it includes an uncle). Odds are very very very unlikely that any thing lower than -99 would happen, but still needs to covered.</li>\n</ul>\n<h3>Final Questions</h3>\n<p>Like before, here&#8217;s a list of questions I had when writing this that didn&#8217;t get put in the main post.</p>\n<p><strong>What&#8217;s in the header?</strong></p>\n<p>I&#8217;m sure this question will come up a lot when only talking about Proof of Work difficulty. It&#8217;s great that we know how difficulty is calculated, but how to validate a block has a valid header is beyond this post.</p>\n<p>I&#8217;m not going to explain it here, but probably in a future post when I decide how jbc&#8217;s header should be calculated after I implement transactions.</p>\n<p>I will note that Bitcoin&#8217;s header is incredibly simple where the values are smashed together (making sure that the way the bits are combined have the right endian). Ethereum&#8217;s is much more complicated by dealing with transactions using a cash method rather than a Merkel tree.</p>\n<p><strong>How do you go through and figure this out?</strong></p>\n<p>There are tons of posts out there like this one, but frankly, most are very high level with either descriptions, numbers, but not many showing code that calculates those numbers. My goal is to do all of those.</p>\n<p>That means that to get to complete understanding to talk about them all, I go through and look at the code bases. Here&#8217;s the calc_difficulty function from the Python repo, calcDifficulty from c++, and calcDifficulty from Go. Another bigger point that I keep talking about is that looking at the code doesn&#8217;t do much at all, what you need to do is implement similar code yourself.</p>\n<p><strong>All of those time estimations include a ~ before a number. Why is that necessary?</strong></p>\n<p>That&#8217;s a really good question. And the main answer is uncertainty in how many nodes are trying to mine blocks, as well as randomness. If you look at the <a href=\"https://www.coinwarz.com/difficulty-charts/ethereum-difficulty-chart\">difficulty chart</a> and zoom in to a timespan of a couple days, you&#8217;ll see how random it gets. It&#8217;s the same with <a href=\"https://bitinfocharts.com/comparison/ethereum-confirmationtime.html#3m\">the average mining time</a> for a specific day. They fluctuate, and so we can&#8217;t say exactly what time we expect.</p>\n<p><strong>Proof of Work is all I hear people talk about, but it isn&#8217;t universal, right?</strong></p>\n<p>Correct! I mentioned it above, and I&#8217;m betting that if you&#8217;re reading this much about Ethereum and you&#8217;re all the way at the bottom of this post that you&#8217;ve heard of the term <a href=\"https://github.com/ethereum/wiki/wiki/Proof-of-Stake-FAQ#what-are-the-benefits-of-proof-of-stake-as-opposed-to-proof-of-work\">Proof of Stake</a>. This is the new option that a major cryptocurrency blockchain hasn&#8217;t implemented yet. There are other types of block validation out there. The big upcoming Enterprise versions of blockchains probably won&#8217;t be completely based in Proof of Work at all.</p>\n<p>The biggest indicator of what type of validation blockchains will use depends on the use cases. Cryptocurrencies need something completely un-fraudable. Same with a blockchain that might store information on who owns what piece of land. We don&#8217;t want people to be able to change ownership. But a blockchain that&#8217;s used to store something less insanely valuable doesn&#8217;t need to waste all that energy. I know some of these other Proofs of validity will come into play in the next few years.</p>\n<p><strong>You wrote something confusing / didn&#8217;t explain it well enough. What should I do</strong>?</p>\n<p>Get in freaking contact. Seriously, tons of posts out there that talk about results but don&#8217;t say how they calculated it and assume that everyone is as smart as them and know what&#8217;s going on. I&#8217;m trying to be the opposite where I don&#8217;t say something without fully explaining. So if there&#8217;s something confusing or wrong, <a href=\"https://bigishdata.com/contact/\">contact</a> me and I&#8217;ll make sure to fix the issue.</p>\n<p><strong>Can I DM you on Twitter?</strong></p>\n<p><a href=\"https://twitter.com/jack_schultz\">@jack_schultz</a></p>\n<p><strong>Do you like cats or dogs better?</strong></p>\n<p>Cats.</p>\n",
  "wfw:commentRss": "https://bigishdata.com/2017/11/21/how-to-build-your-own-blockchain-part-4-2-ethereum-proof-of-work-difficulty-explained/feed/",
  "slash:comments": 0,
  "media:content": [
    {
      "media:title": "jackschultz23"
    },
    ""
  ]
}