{
  "title": "Towards Out-of-core ND-Arrays",
  "link": "",
  "updated": "2014-12-27T00:00:00+00:00",
  "id": "https://mrocklin.github.io/blog/work/2014/12/27/Towards-OOC",
  "content": "<p><em>This work is supported by <a href=\"http://continuum.io\">Continuum Analytics</a>\nand the <a href=\"http://www.darpa.mil/program/XDATA\">XDATA Program</a>\nas part of the <a href=\"http://blaze.pydata.org\">Blaze Project</a></em></p>\n\n<p><strong>tl;dr</strong> We propose a system for task-centered computation, show an example\nwith out-of-core nd-arrays, and ask for comments.</p>\n\n<p><em>Note: This post is not user-focused.  It is intended for library writers.</em></p>\n\n<h2 id=\"motivation\">Motivation</h2>\n\n<p>Recent notebooks (links\n<a href=\"http://nbviewer.ipython.org/url/blaze.pydata.org/en/latest/_static/notebooks/timings-csv.ipynb\">1</a>,\n<a href=\"http://nbviewer.ipython.org/url/blaze.pydata.org/en/latest/_static/notebooks/timings-bcolz.ipynb\">2</a>)\ndescribe how Blaze handles out-of-core single-dataset tabular computations in\nthe following stages.</p>\n\n<ol>\n  <li>Partition the dataset into chunks</li>\n  <li>Apply some computation on each chunk</li>\n  <li>Concatenate the results (hopefully smaller)</li>\n  <li>Apply another computation into the concatenated result</li>\n</ol>\n\n<p>Steps 2 and 4 require symbolic analysis of <em>what</em> work should be done; Blaze\ndoes this well.  Steps 1 and 3 are more about coordinating <em>where</em> data goes\nand <em>when</em> computation executes.</p>\n\n<p>This setup is effective for a broad class of single-dataset tabular\ncomputations.  It fails for more complex cases.  Blaze doesn’t currently have a\ngood target for describing complex inter-block data dependencies.  The model\nfor breaking apart data and arranging computations (1 and 3) is too simple.</p>\n\n<p>A good example of a complex case is an nd-array matrix-matrix multiply / dot\nproduct / tensor contraction.  In this case a blocked approach has a more\ncomplex communication pattern.  This post is about finding a simple framework\nthat allows us to express these patterns.  It’s about finding a replacement for\nsteps 1 and 3 above.</p>\n\n<h2 id=\"task-scheduling\">Task Scheduling</h2>\n\n<p>The common solution to this problem is to describe the computation as a\nbipartite directed acyclic graph where nodes are computations and data and\nedges indicate which pieces of data a computation takes as input and delivers\nas output.</p>\n\n<p>Many solutions to this problem exist, both theoretical algorithms and\nimplemented software.  Forgive me for describing yet-another system.</p>\n\n<h2 id=\"dask\"><code class=\"language-plaintext highlighter-rouge\">dask</code></h2>\n\n<p><img src=\"https://mrocklin.github.io/blog/images/dask-simple.png\" align=\"right\" /></p>\n\n<p>We use a low-tech representation of a task dependency graph.\nWe use a dictionary of key-value pairs where keys are any hashable identifier\nand values are one of the following:</p>\n\n<ol>\n  <li>A value, like <code class=\"language-plaintext highlighter-rouge\">1</code></li>\n  <li>A tuple containing a function and arguments, like <code class=\"language-plaintext highlighter-rouge\">(inc, 1)</code>.  This is like\nan s-expression and should be interpreted as an unevaluated <code class=\"language-plaintext highlighter-rouge\">inc(1)</code></li>\n  <li>A tuple containing a function and arguments. Arguments may include other\nkeys, <code class=\"language-plaintext highlighter-rouge\">(inc, 'my_key')</code></li>\n</ol>\n\n<p>This is more clear with an example.  We show this example on the right.</p>\n\n<figure class=\"highlight\">\n  <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s\">'x'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n     <span class=\"s\">'y'</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"n\">inc</span><span class=\"p\">,</span> <span class=\"s\">'x'</span><span class=\"p\">),</span>\n     <span class=\"s\">'z'</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"n\">add</span><span class=\"p\">,</span> <span class=\"s\">'y'</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)}</span></code></pre>\n</figure>\n\n<p>The <a href=\"http://github.com/mrocklin/dask\"><code class=\"language-plaintext highlighter-rouge\">dask</code> library</a> contains a small\nreference implementation to get values associated to keys in this task graph.</p>\n\n<figure class=\"highlight\">\n  <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">dask</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">dask</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"s\">'x'</span><span class=\"p\">)</span>\n<span class=\"mi\">1</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">dask</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"s\">'y'</span><span class=\"p\">)</span>  <span class=\"c1\"># Triggers computation\n</span><span class=\"mi\">2</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">dask</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"s\">'z'</span><span class=\"p\">)</span>  <span class=\"c1\"># Triggers computation\n</span><span class=\"mi\">12</span></code></pre>\n</figure>\n\n<p>In principle this could be executed by a variety of different implementations\neach with different solutions for distributed computing, caching, etc..</p>\n\n<p>Dask also includes convenience functions to help build this graph.</p>\n\n<figure class=\"highlight\">\n  <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">dask</span><span class=\"p\">.</span><span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"s\">'a'</span><span class=\"p\">,</span> <span class=\"n\">add</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s\">'x'</span><span class=\"p\">,</span> <span class=\"s\">'y'</span><span class=\"p\">])</span></code></pre>\n</figure>\n\n<p>Although this is mainly to help those who feel uncomfortable putting the\nparenthesis on the left side of a function call to avoid immediate execution</p>\n\n<figure class=\"highlight\">\n  <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># d['a'] =  add( 'x', 'y')  # intend this\n</span><span class=\"o\">&gt;&gt;&gt;</span>   <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"s\">'a'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">add</span><span class=\"p\">,</span> <span class=\"s\">'x'</span><span class=\"p\">,</span> <span class=\"s\">'y'</span><span class=\"p\">)</span>  <span class=\"c1\"># but write this to avoid immediate execution</span></code></pre>\n</figure>\n\n<h2 id=\"why-low-tech\">Why low tech?</h2>\n\n<p>These “graphs” are just dictionaries of tuples.  Notably, we imported <code class=\"language-plaintext highlighter-rouge\">dask</code>\n<em>after</em> we built our graph.  The framework investment is very light.</p>\n\n<ul>\n  <li><strong>Q</strong>: Why don’t we build <code class=\"language-plaintext highlighter-rouge\">Task</code> and <code class=\"language-plaintext highlighter-rouge\">Data</code> classes and construct a Python\nframework to represent these things formally?</li>\n  <li><strong>A</strong>: Because people have to learn and buy in to that framework and that’s\nhard to sell.  Dictionaries are easier to sell.  They’re also easy to translate\ninto other systems.   Additionally, I was able to write a reference\nimplementation in <a href=\"https://github.com/mrocklin/dask/blob/master/dask/core.py#L36-L68\">a couple dozen lines</a>.</li>\n</ul>\n\n<p>It’s easy to build functions that create <code class=\"language-plaintext highlighter-rouge\">dict</code>s like this for various\napplications.  There is a decent chance that, if you’ve made it this far in\nthis blogpost, you already understand the spec.</p>\n\n<h2 id=\"nd-arrays\">ND-Arrays</h2>\n\n<p>I want to encode out-of-core ND-Array algorithms as data.\nI’ve written a few functions that create dask-style dictionaries to help me\ndescribe a decent class of blocked nd-array computations.</p>\n\n<p>The following section is a specific example applying these ideas to the domain\nof array computing.  This is just one application and not core to the idea\nof task scheduling.  The core ideas to task scheduling and the dask\nimplementation have already been covered above.</p>\n\n<h3 id=\"getting-blocks-from-an-array\">Getting blocks from an array</h3>\n\n<p>First, we break apart a large possibly out-of-core array into blocks.\nFor convenience in these examples we work in in-memory numpy arrays rather than\non-disk arrays.   Jump to the end if you’d like to see a real OOC dot product\non on-disk data.</p>\n\n<p>We make a function <code class=\"language-plaintext highlighter-rouge\">ndget</code> to pull out a single block</p>\n\n<figure class=\"highlight\">\n  <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"n\">arange</span><span class=\"p\">(</span><span class=\"mi\">24</span><span class=\"p\">).</span><span class=\"n\">reshape</span><span class=\"p\">((</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">))</span>\n<span class=\"n\">array</span><span class=\"p\">([[</span> <span class=\"mi\">0</span><span class=\"p\">,</span>  <span class=\"mi\">1</span><span class=\"p\">,</span>  <span class=\"mi\">2</span><span class=\"p\">,</span>  <span class=\"mi\">3</span><span class=\"p\">,</span>  <span class=\"mi\">4</span><span class=\"p\">,</span>  <span class=\"mi\">5</span><span class=\"p\">],</span>\n       <span class=\"p\">[</span> <span class=\"mi\">6</span><span class=\"p\">,</span>  <span class=\"mi\">7</span><span class=\"p\">,</span>  <span class=\"mi\">8</span><span class=\"p\">,</span>  <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">],</span>\n       <span class=\"p\">[</span><span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">13</span><span class=\"p\">,</span> <span class=\"mi\">14</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"mi\">16</span><span class=\"p\">,</span> <span class=\"mi\">17</span><span class=\"p\">],</span>\n       <span class=\"p\">[</span><span class=\"mi\">18</span><span class=\"p\">,</span> <span class=\"mi\">19</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">21</span><span class=\"p\">,</span> <span class=\"mi\">22</span><span class=\"p\">,</span> <span class=\"mi\">23</span><span class=\"p\">]])</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># Cutting into (2, 3) shaped blocks, get the (0, 0)th block\n</span><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">ndget</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">array</span><span class=\"p\">([[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span>\n       <span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">]])</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># Cutting into (2, 3) shaped blocks, get the (1, 0)th block\n</span><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">ndget</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">array</span><span class=\"p\">([[</span><span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">13</span><span class=\"p\">,</span> <span class=\"mi\">14</span><span class=\"p\">],</span>\n       <span class=\"p\">[</span><span class=\"mi\">18</span><span class=\"p\">,</span> <span class=\"mi\">19</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">]])</span></code></pre>\n</figure>\n\n<p>We now make a function <code class=\"language-plaintext highlighter-rouge\">getem</code> that makes a <code class=\"language-plaintext highlighter-rouge\">dict</code> that uses this <code class=\"language-plaintext highlighter-rouge\">ndget</code>\nfunction to pull out all of the blocks.  This creates more <code class=\"language-plaintext highlighter-rouge\">keys</code> in our\ndictionary, one for each block.  We name each key by the key of the array\nfollowed by a block-index.</p>\n\n<ul>\n  <li><code class=\"language-plaintext highlighter-rouge\">getem</code>: Given a large possibly out-of-core array and a blocksize, pull\n apart that array into many small blocks</li>\n</ul>\n\n<figure class=\"highlight\">\n  <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s\">'X'</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"p\">}</span>  <span class=\"c1\"># map the key 'X' to the data x\n</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">getem</span><span class=\"p\">(</span><span class=\"s\">'X'</span><span class=\"p\">,</span> <span class=\"n\">blocksize</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"n\">shape</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">))</span>\n<span class=\"p\">{(</span><span class=\"s\">'X'</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">):</span> <span class=\"p\">(</span><span class=\"n\">ndget</span><span class=\"p\">,</span> <span class=\"s\">'X'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span>\n <span class=\"p\">(</span><span class=\"s\">'X'</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">):</span> <span class=\"p\">(</span><span class=\"n\">ndget</span><span class=\"p\">,</span> <span class=\"s\">'X'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span>\n <span class=\"p\">(</span><span class=\"s\">'X'</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">):</span> <span class=\"p\">(</span><span class=\"n\">ndget</span><span class=\"p\">,</span> <span class=\"s\">'X'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span>\n <span class=\"p\">(</span><span class=\"s\">'X'</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">):</span> <span class=\"p\">(</span><span class=\"n\">ndget</span><span class=\"p\">,</span> <span class=\"s\">'X'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)}</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">d</span><span class=\"p\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">)</span>  <span class=\"c1\"># dump in getem dict</span></code></pre>\n</figure>\n\n<p>So we have a single original array, <code class=\"language-plaintext highlighter-rouge\">x</code> and using <code class=\"language-plaintext highlighter-rouge\">getem</code> we describe how to\nget many blocks out of <code class=\"language-plaintext highlighter-rouge\">x</code> using the function <code class=\"language-plaintext highlighter-rouge\">ndget</code> for on each block.</p>\n\n<ul>\n  <li><code class=\"language-plaintext highlighter-rouge\">ndget</code> actually does work on data</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">getem</code> creates dask dict that describes on what ndget should operate</li>\n</ul>\n\n<p>We haven’t done work yet.  We only do work when we finally call <code class=\"language-plaintext highlighter-rouge\">dask.get</code> on\nthe appropriate key for one of the blocks.</p>\n\n<figure class=\"highlight\">\n  <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">dask</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"s\">'X'</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">))</span>  <span class=\"c1\"># Get block corresponding to key ('X' ,1, 0)\n</span><span class=\"n\">array</span><span class=\"p\">([[</span><span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">13</span><span class=\"p\">,</span> <span class=\"mi\">14</span><span class=\"p\">],</span>\n       <span class=\"p\">[</span><span class=\"mi\">18</span><span class=\"p\">,</span> <span class=\"mi\">19</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">]])</span></code></pre>\n</figure>\n\n<p>We use <code class=\"language-plaintext highlighter-rouge\">numpy.ndarrays</code> for convenience.  This would have worked with anything\nthat supports numpy-style indexing, including out-of-core structures like\n<code class=\"language-plaintext highlighter-rouge\">h5py.Dataset</code>, <code class=\"language-plaintext highlighter-rouge\">tables.Array</code>, or <code class=\"language-plaintext highlighter-rouge\">bcolz.carray</code>.</p>\n\n<h3 id=\"example-embarrassingly-parallel-computation\">Example: Embarrassingly Parallel Computation</h3>\n\n<p>If we have a simple function</p>\n\n<figure class=\"highlight\">\n  <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"k\">def</span> <span class=\"nf\">inc</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"mi\">1</span></code></pre>\n</figure>\n\n<p>That we want to apply to all blocks of the dataset we could, in principle,\nadd the following to our dictionary.</p>\n\n<figure class=\"highlight\">\n  <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">d</span><span class=\"p\">.</span><span class=\"n\">update</span><span class=\"p\">({(</span><span class=\"s\">'X-plus-1'</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">):</span> <span class=\"p\">(</span><span class=\"n\">inc</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"s\">'X'</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">))</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n                                                     <span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)})</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">dask</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"s\">'X-plus-1'</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n<span class=\"n\">array</span><span class=\"p\">([[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span>\n       <span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">]])</span></code></pre>\n</figure>\n\n<p>Our use of keys like <code class=\"language-plaintext highlighter-rouge\">('name', i, j)</code> to refer to the <code class=\"language-plaintext highlighter-rouge\">i,jth</code> block of an array is\nan incidental convention and not intrinsic to <code class=\"language-plaintext highlighter-rouge\">dask</code> itself.  This use of\ntuples as keys should not be confused with the use of tuples in values to\nencode unevaluated functions.</p>\n\n<h3 id=\"index-expressions\">Index expressions</h3>\n\n<p>A broad class of array computations can be written with index expressions</p>\n\n<p>\\(Z_{ij} = X_{ji} \\;\\;\\)  – Matrix transpose</p>\n\n<p>\\(Z_{ik} = \\sum_j X_{ij} Y_{jk} \\;\\;\\)  – Matrix-matrix multiply</p>\n\n<p>Fortunately, the blocked versions of these algorithms look pretty much the\nsame.  To leverage this structure we made the function <code class=\"language-plaintext highlighter-rouge\">top</code> for <code class=\"language-plaintext highlighter-rouge\">t</code>ensor\n<code class=\"language-plaintext highlighter-rouge\">op</code>erations (ideas for a better name welcome).  This writes index operations\nlike the following for blocked transpose:</p>\n\n<figure class=\"highlight\">\n  <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">top</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"p\">.</span><span class=\"n\">transpose</span><span class=\"p\">,</span> <span class=\"s\">'Z'</span><span class=\"p\">,</span> <span class=\"s\">'ji'</span><span class=\"p\">,</span> <span class=\"s\">'X'</span><span class=\"p\">,</span> <span class=\"s\">'ij'</span><span class=\"p\">,</span> <span class=\"n\">numblocks</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s\">'X'</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)})</span>\n<span class=\"p\">{(</span><span class=\"s\">'Z'</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">):</span> <span class=\"p\">(</span><span class=\"n\">numpy</span><span class=\"p\">.</span><span class=\"n\">transpose</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"s\">'X'</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)),</span>\n <span class=\"p\">(</span><span class=\"s\">'Z'</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">):</span> <span class=\"p\">(</span><span class=\"n\">numpy</span><span class=\"p\">.</span><span class=\"n\">transpose</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"s\">'X'</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)),</span>\n <span class=\"p\">(</span><span class=\"s\">'Z'</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">):</span> <span class=\"p\">(</span><span class=\"n\">numpy</span><span class=\"p\">.</span><span class=\"n\">transpose</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"s\">'X'</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)),</span>\n <span class=\"p\">(</span><span class=\"s\">'Z'</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">):</span> <span class=\"p\">(</span><span class=\"n\">numpy</span><span class=\"p\">.</span><span class=\"n\">transpose</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"s\">'X'</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">))}</span></code></pre>\n</figure>\n\n<p>The first argument <code class=\"language-plaintext highlighter-rouge\">np.transpose</code> is the function to apply to each block.\nThe second and third arguments are the name and index pattern of the output.\nThe succeeding arguments are the key and index pattern of the inputs.  In this\ncase the index pattern is the reverse.  We map the <code class=\"language-plaintext highlighter-rouge\">ij</code>th block to the <code class=\"language-plaintext highlighter-rouge\">ji</code>th\nblock of the output after we call the function <code class=\"language-plaintext highlighter-rouge\">np.transpose</code>.\nFinally we have the numblocks keyword arguments that give the block structure\nof the inputs.  Index structure can be any iterable.</p>\n\n<h3 id=\"matrix-multiply\">Matrix Multiply</h3>\n\n<p>We represent tensor contractions like matrix-matrix multiply with indices that\nare repeated in the inputs and missing in the output like the following.  In\nthe following example the index <code class=\"language-plaintext highlighter-rouge\">'j'</code> is a contracted dummy index.</p>\n\n<figure class=\"highlight\">\n  <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">top</span><span class=\"p\">(...,</span> <span class=\"n\">Z</span><span class=\"p\">,</span> <span class=\"s\">'ik'</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"s\">'ij'</span><span class=\"p\">,</span> <span class=\"n\">Y</span><span class=\"p\">,</span> <span class=\"s\">'jk'</span><span class=\"p\">,</span> <span class=\"n\">numblocks</span><span class=\"o\">=</span><span class=\"p\">...)</span></code></pre>\n</figure>\n\n<p>In this case the function receives an iterator of blocks of data that iterate\nover the dummy index, <code class=\"language-plaintext highlighter-rouge\">j</code>.  We make such a function to take iterators of square\narray blocks, dot product the pairs, and then sum the results.  This is the\ninner-most loop of a conventional blocked-matrix-matrix multiply algorithm.</p>\n\n<figure class=\"highlight\">\n  <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"k\">def</span> <span class=\"nf\">dotmany</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">B</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"nb\">sum</span><span class=\"p\">(</span><span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"p\">.</span><span class=\"n\">dot</span><span class=\"p\">,</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">B</span><span class=\"p\">))</span></code></pre>\n</figure>\n\n<p>By combining this per-block function with <code class=\"language-plaintext highlighter-rouge\">top</code> we get an out-of-core dot\nproduct.</p>\n\n<figure class=\"highlight\">\n  <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">top</span><span class=\"p\">(</span><span class=\"n\">dotmany</span><span class=\"p\">,</span> <span class=\"s\">'Z'</span><span class=\"p\">,</span> <span class=\"s\">'ik'</span><span class=\"p\">,</span> <span class=\"s\">'X'</span><span class=\"p\">,</span> <span class=\"s\">'ij'</span><span class=\"p\">,</span> <span class=\"s\">'Y'</span><span class=\"p\">,</span> <span class=\"s\">'jk'</span><span class=\"p\">,</span>  <span class=\"n\">numblocks</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s\">'X'</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span>\n                                                              <span class=\"s\">'Y'</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)})</span>\n<span class=\"p\">{(</span><span class=\"s\">'Z'</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">):</span> <span class=\"p\">(</span><span class=\"n\">dotmany</span><span class=\"p\">,</span> <span class=\"p\">[(</span><span class=\"s\">'X'</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">'X'</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)],</span>\n                        <span class=\"p\">[(</span><span class=\"s\">'Y'</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">'Y'</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)]),</span>\n <span class=\"p\">(</span><span class=\"s\">'Z'</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">):</span> <span class=\"p\">(</span><span class=\"n\">dotmany</span><span class=\"p\">,</span> <span class=\"p\">[(</span><span class=\"s\">'X'</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">'X'</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)],</span>\n                        <span class=\"p\">[(</span><span class=\"s\">'Y'</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">'Y'</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)]),</span>\n <span class=\"p\">(</span><span class=\"s\">'Z'</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">):</span> <span class=\"p\">(</span><span class=\"n\">dotmany</span><span class=\"p\">,</span> <span class=\"p\">[(</span><span class=\"s\">'X'</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">'X'</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)],</span>\n                        <span class=\"p\">[(</span><span class=\"s\">'Y'</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">'Y'</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)]),</span>\n <span class=\"p\">(</span><span class=\"s\">'Z'</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">):</span> <span class=\"p\">(</span><span class=\"n\">dotmany</span><span class=\"p\">,</span> <span class=\"p\">[(</span><span class=\"s\">'X'</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">'X'</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)],</span>\n                        <span class=\"p\">[(</span><span class=\"s\">'Y'</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">'Y'</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)])}</span></code></pre>\n</figure>\n\n<p>The <code class=\"language-plaintext highlighter-rouge\">top</code> function inspects the index structure of the inputs and outputs and\nconstructs dictionaries that reflect this structure, matching indices between\nkeys and creating lists of keys over dummy indices like <code class=\"language-plaintext highlighter-rouge\">j</code>.</p>\n\n<p>And that was it, we have an out-of-core dot product.  Calling dask.get on these\nkeys results in out-of-core execution.</p>\n\n<h2 id=\"full-example\">Full example</h2>\n\n<p>Here is a tiny proof of concept for an out-of-core dot product.  I wouldn’t\nexpect users to write this.  I would expect libraries like Blaze to write this.</p>\n\n<h3 id=\"create-random-array-on-disk\">Create random array on disk</h3>\n\n<figure class=\"highlight\">\n  <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"kn\">import</span> <span class=\"nn\">bcolz</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"n\">np</span>\n<span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">bcolz</span><span class=\"p\">.</span><span class=\"n\">carray</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"p\">.</span><span class=\"n\">empty</span><span class=\"p\">(</span><span class=\"n\">shape</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1000</span><span class=\"p\">),</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"s\">'f8'</span><span class=\"p\">),</span>\n                 <span class=\"n\">rootdir</span><span class=\"o\">=</span><span class=\"s\">'A.bcolz'</span><span class=\"p\">,</span> <span class=\"n\">chunklen</span><span class=\"o\">=</span><span class=\"mi\">1000</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1000</span><span class=\"p\">):</span>\n    <span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"p\">.</span><span class=\"n\">random</span><span class=\"p\">.</span><span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"mi\">1000</span><span class=\"p\">,</span> <span class=\"mi\">1000</span><span class=\"p\">))</span>\n<span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">flush</span><span class=\"p\">()</span></code></pre>\n</figure>\n\n<h3 id=\"define-computation-at--a\">Define computation <code class=\"language-plaintext highlighter-rouge\">A.T * A</code></h3>\n\n<figure class=\"highlight\">\n  <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s\">'A'</span><span class=\"p\">:</span> <span class=\"n\">b</span><span class=\"p\">}</span>\n<span class=\"n\">d</span><span class=\"p\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">getem</span><span class=\"p\">(</span><span class=\"s\">'A'</span><span class=\"p\">,</span> <span class=\"n\">blocksize</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1000</span><span class=\"p\">,</span> <span class=\"mi\">1000</span><span class=\"p\">),</span> <span class=\"n\">shape</span><span class=\"o\">=</span><span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">shape</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># Add A.T into the mix\n</span><span class=\"n\">d</span><span class=\"p\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">top</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"p\">.</span><span class=\"n\">transpose</span><span class=\"p\">,</span> <span class=\"s\">'At'</span><span class=\"p\">,</span> <span class=\"s\">'ij'</span><span class=\"p\">,</span> <span class=\"s\">'A'</span><span class=\"p\">,</span> <span class=\"s\">'ji'</span><span class=\"p\">,</span> <span class=\"n\">numblocks</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s\">'A'</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"mi\">1000</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)}))</span>\n\n<span class=\"c1\"># Dot product A.T * A\n</span><span class=\"n\">d</span><span class=\"p\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">top</span><span class=\"p\">(</span><span class=\"n\">dotmany</span><span class=\"p\">,</span> <span class=\"s\">'AtA'</span><span class=\"p\">,</span> <span class=\"s\">'ik'</span><span class=\"p\">,</span> <span class=\"s\">'At'</span><span class=\"p\">,</span> <span class=\"s\">'ij'</span><span class=\"p\">,</span> <span class=\"s\">'A'</span><span class=\"p\">,</span> <span class=\"s\">'jk'</span><span class=\"p\">,</span>\n         <span class=\"n\">numblocks</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s\">'A'</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"mi\">1000</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"s\">'At'</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1000</span><span class=\"p\">)}))</span></code></pre>\n</figure>\n\n<h3 id=\"do-work\">Do work</h3>\n\n<figure class=\"highlight\">\n  <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">dask</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"s\">'AtA'</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n<span class=\"n\">CPU</span> <span class=\"n\">times</span><span class=\"p\">:</span> <span class=\"n\">user</span> <span class=\"mi\">2</span><span class=\"nb\">min</span> <span class=\"mi\">57</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">sys</span><span class=\"p\">:</span> <span class=\"mf\">6.59</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">total</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"nb\">min</span> <span class=\"mi\">4</span><span class=\"n\">s</span>\n<span class=\"n\">Wall</span> <span class=\"n\">time</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"nb\">min</span> <span class=\"mi\">49</span><span class=\"n\">s</span>\n<span class=\"n\">array</span><span class=\"p\">([[</span> <span class=\"mf\">334071.93541158</span><span class=\"p\">,</span>  <span class=\"mf\">250297.16968262</span><span class=\"p\">,</span>  <span class=\"mf\">250404.87729587</span><span class=\"p\">,</span> <span class=\"p\">...,</span>\n         <span class=\"mf\">250436.85274716</span><span class=\"p\">,</span>  <span class=\"mf\">250330.64262904</span><span class=\"p\">,</span>  <span class=\"mf\">250590.98832611</span><span class=\"p\">],</span>\n       <span class=\"p\">[</span> <span class=\"mf\">250297.16968262</span><span class=\"p\">,</span>  <span class=\"mf\">333451.72293343</span><span class=\"p\">,</span>  <span class=\"mf\">249978.2751824</span> <span class=\"p\">,</span> <span class=\"p\">...,</span>\n         <span class=\"mf\">250103.20601281</span><span class=\"p\">,</span>  <span class=\"mf\">250014.96660956</span><span class=\"p\">,</span>  <span class=\"mf\">250251.0146828</span> <span class=\"p\">],</span>\n       <span class=\"p\">[</span> <span class=\"mf\">250404.87729587</span><span class=\"p\">,</span>  <span class=\"mf\">249978.2751824</span> <span class=\"p\">,</span>  <span class=\"mf\">333279.76376277</span><span class=\"p\">,</span> <span class=\"p\">...,</span>\n         <span class=\"mf\">249961.44796719</span><span class=\"p\">,</span>  <span class=\"mf\">250061.8068036</span> <span class=\"p\">,</span>  <span class=\"mf\">250125.80971858</span><span class=\"p\">],</span>\n       <span class=\"p\">...,</span>\n       <span class=\"p\">[</span> <span class=\"mf\">250436.85274716</span><span class=\"p\">,</span>  <span class=\"mf\">250103.20601281</span><span class=\"p\">,</span>  <span class=\"mf\">249961.44796719</span><span class=\"p\">,</span> <span class=\"p\">...,</span>\n         <span class=\"mf\">333444.797894</span>  <span class=\"p\">,</span>  <span class=\"mf\">250021.78528189</span><span class=\"p\">,</span>  <span class=\"mf\">250147.12015207</span><span class=\"p\">],</span>\n       <span class=\"p\">[</span> <span class=\"mf\">250330.64262904</span><span class=\"p\">,</span>  <span class=\"mf\">250014.96660956</span><span class=\"p\">,</span>  <span class=\"mf\">250061.8068036</span> <span class=\"p\">,</span> <span class=\"p\">...,</span>\n         <span class=\"mf\">250021.78528189</span><span class=\"p\">,</span>  <span class=\"mf\">333240.10323875</span><span class=\"p\">,</span>  <span class=\"mf\">250307.86236815</span><span class=\"p\">],</span>\n       <span class=\"p\">[</span> <span class=\"mf\">250590.98832611</span><span class=\"p\">,</span>  <span class=\"mf\">250251.0146828</span> <span class=\"p\">,</span>  <span class=\"mf\">250125.80971858</span><span class=\"p\">,</span> <span class=\"p\">...,</span>\n         <span class=\"mf\">250147.12015207</span><span class=\"p\">,</span>  <span class=\"mf\">250307.86236815</span><span class=\"p\">,</span>  <span class=\"mf\">333467.87105673</span><span class=\"p\">]])</span></code></pre>\n</figure>\n\n<p>Three minutes for a 7GB dot product.  This runs at about half the FLOPS of a\nnormal in-memory matmul.  I’m not sure yet why the discrepancy.  Also, this\nisn’t using an optimized BLAS; we have yet to leverage multiple cores.</p>\n\n<p>This isn’t trivial to write, but it’s not bad either.</p>\n\n<h2 id=\"complexity-and-usability\">Complexity and Usability</h2>\n\n<p>This system is not appropriate for users; it’s unPythonic, low-level, and\nLISP-y.  However I believe that something like this would be an appropriate\nstandard for infrastructural libraries.  It’s a simple and easy standard for\ncode to target.</p>\n\n<p>Using projects like <code class=\"language-plaintext highlighter-rouge\">into</code> and <code class=\"language-plaintext highlighter-rouge\">blaze</code> we can build a usable high-level\nfront-end onto <code class=\"language-plaintext highlighter-rouge\">dask</code> for the subproblems of arrays and tables. Blaze could\ngenerate these dictionaries and then hand them off to other systems to execute.</p>\n\n<h2 id=\"execution\">Execution</h2>\n\n<p>Using the reference implementation, multithreading, HDF5/BColz, and out-of-core\ncaching systems like <code class=\"language-plaintext highlighter-rouge\">chest</code> I think that we can build a decent out-of-core\n<code class=\"language-plaintext highlighter-rouge\">ndarray</code> solution that fully leverages a large workstation.</p>\n\n<p>Ideally other people come along and build better execution engines / task\nschedulers.  This might be an appropriate application for IPython parallel.</p>\n\n<h2 id=\"help\">Help</h2>\n\n<p>This could use design and technical feedback.\nWhat would encourage community buy-in to a system like this?</p>"
}