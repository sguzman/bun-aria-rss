{
  "title": "Should you use \"dot notation\" or \"bracket notation\" with pandas?",
  "description": "There are two ways to select a Series from a DataFrame: \"dot notation\" and \"bracket notation\" (square brackets). Find out which one you should use, and why!",
  "link": "https://www.dataschool.io/pandas-dot-notation-vs-brackets/",
  "guid": "5d7a51f9e8a9710038a9ae58",
  "category": "Python",
  "dc:creator": "Kevin Markham",
  "pubDate": "Fri, 13 Sep 2019 13:16:32 GMT",
  "content:encoded": "<!--kg-card-begin: markdown--><p>If you've ever used the pandas library in Python, you probably know that there are <strong>two ways to select a Series</strong> (meaning a column) from a DataFrame:</p>\n<pre><code class=\"language-python\"># dot notation\ndf.col_name\n\n# bracket notation\ndf['col_name']\n</code></pre>\n<p><strong>Which method should you use?</strong> I'll make the case for each, and then you can decide...</p>\n<h2 id=\"whyusebracketnotation\">Why use bracket notation?</h2>\n<p>The case for bracket notation is simple: <strong>It always works.</strong></p>\n<p>Here are the <strong>specific cases in which you must use bracket notation</strong>, because dot notation would fail:</p>\n<pre><code class=\"language-python\"># column name includes a space\ndf['col name']\n\n# column name matches a DataFrame method\ndf['count']\n\n# column name matches a Python keyword\ndf['class']\n\n# column name is stored in a variable\nvar = 'col_name'\ndf[var]\n\n# column name is an integer\ndf[0]\n\n# new column is created through assignment\ndf['new'] = 0\n</code></pre>\n<p>In other words, <strong>bracket notation always works, whereas dot notation only works under certain circumstances.</strong> That's a pretty compelling case for bracket notation!</p>\n<p>As stated in the <a href=\"https://www.python.org/dev/peps/pep-0020/\">Zen of Python</a>:</p>\n<blockquote>\n<p>There should be one-- and preferably only one --obvious way to do it.</p>\n</blockquote>\n<h2 id=\"whyusedotnotation\">Why use dot notation?</h2>\n<p>If you've watched any of my <a href=\"https://www.dataschool.io/easier-data-analysis-with-pandas/\">pandas videos</a>, you may have noticed that <strong>I use dot notation.</strong> Here are four reasons why:</p>\n<h3 id=\"reason1dotnotationiseasiertotype\">Reason 1: Dot notation is easier to type</h3>\n<p>Dot notation is three fewer characters to type than bracket notation. And in terms of finger movement, typing a single period is much more convenient than typing brackets and quotes.</p>\n<p>This might sound like a trivial reason, but if you're selecting columns dozens (or hundreds) of times a day, it makes a real difference!</p>\n<h3 id=\"reason2dotnotationiseasiertoread\">Reason 2: Dot notation is easier to read</h3>\n<p>Most of my pandas code is a made up of chains of selections and methods. By using dot notation, my code is mostly adorned with periods and parentheses (plus an occasional quotation mark):</p>\n<pre><code class=\"language-python\"># dot notation\ndf.col_one.sum()\ndf.col_one.isna().sum()\ndf.groupby('col_two').col_one.sum()\n</code></pre>\n<p>If you instead use bracket notation, your code is adorned with periods and parentheses <strong>plus</strong> lots of brackets and quotation marks:</p>\n<pre><code class=\"language-python\"># bracket notation\ndf['col_one'].sum()\ndf['col_one'].isna().sum()\ndf.groupby('col_two')['col_one'].sum()\n</code></pre>\n<p>I find the dot notation code easier to read, as well as more aesthetically pleasing.</p>\n<h3 id=\"reason3dotnotationiseasiertoremember\">Reason 3: Dot notation is easier to remember</h3>\n<p>With dot notation, <strong>every component in a chain is separated by a period on both sides.</strong> For example, this line of code has 4 components, and thus there are 3 periods separating the individual components:</p>\n<pre><code class=\"language-python\"># dot notation\ndf.groupby('col_two').col_one.sum()\n</code></pre>\n<p>If you instead use bracket notation, some of your components are separated by periods, and some are not:</p>\n<pre><code class=\"language-python\"># bracket notation\ndf.groupby('col_two')['col_one'].sum()\n</code></pre>\n<p>With bracket notation, I often forget whether there's supposed to be a period <strong>before</strong> <code>['col_one']</code>, <strong>after</strong> <code>['col_one']</code>, or <strong>both before and after</strong> <code>['col_one']</code>.</p>\n<p>With dot notation, it's easier for me to remember the correct syntax.</p>\n<h3 id=\"reason4dotnotationlimitstheusageofbrackets\">Reason 4: Dot notation limits the usage of brackets</h3>\n<p>Brackets can be used for many purposes in pandas:</p>\n<pre><code class=\"language-python\">df[['col_one', 'col_two']]\ndf.iloc[4, 2]\ndf.loc['row_label', 'col_one':'col_three']\ndf.col_one['row_label']\ndf[(df.col_one > 5) & (df.col_two == 'value')]\n</code></pre>\n<p>If you <strong>also</strong> use bracket notation for Series selection, you end up with <strong>even more brackets in your code:</strong></p>\n<pre><code class=\"language-python\">df['col_one']['row_label']\ndf[(df['col_one'] > 5) & (df['col_two'] == 'value')]\n</code></pre>\n<p>As you use more brackets, <strong>each bracket becomes slightly more ambiguous as to its purpose</strong>, imposing a higher mental burden on the person reading the code. By using dot notation for Series selection, you reduce bracket usage to only the essential cases.</p>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p><strong>If you prefer bracket notation</strong>, then you can use it all of the time! However, you still have to be familiar with dot notation in order to read other people's code.</p>\n<p><strong>If you prefer dot notation</strong>, then you can use it most of the time, as long as you are diligent about <a href=\"https://www.youtube.com/watch?v=0uBirYFhizE&list=PL5-da3qGB5ICCsgW1MxlZ0Hq8LL5U3u9y&index=5\">renaming columns</a> when they contains spaces or collide with DataFrame methods. However, you still have to use bracket notation when creating new columns.</p>\n<p><strong>Which do you prefer?</strong> Let me know in the comments below!</p>\n<blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">When selecting a Series (meaning a column) from a <a href=\"https://twitter.com/hashtag/pandas?src=hash&ref_src=twsrc%5Etfw\">#pandas</a> DataFrame, do you generally use \"dot notation\" or \"bracket notation\"?<br><br>&#x27A1;&#xFE0F; dot notation: df.col_name<br>&#x27A1;&#xFE0F; bracket notation: df['col_name']<a href=\"https://twitter.com/hashtag/Python?src=hash&ref_src=twsrc%5Etfw\">#Python</a> <a href=\"https://twitter.com/hashtag/DataScience?src=hash&ref_src=twsrc%5Etfw\">#DataScience</a></p>&#x2014; Kevin Markham (@justmarkham) <a href=\"https://twitter.com/justmarkham/status/1172502167552503810?ref_src=twsrc%5Etfw\">September 13, 2019</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<h2 id=\"addendum\">Addendum</h2>\n<p>There were some thoughtful comments about this issue on Twitter, mostly <strong>in favor of bracket notation:</strong></p>\n<!--\n<blockquote class=\"twitter-tweet\" data-conversation=\"none\"><p lang=\"en\" dir=\"ltr\">dot notation always looked/felt wrong to me and hope it gets removed. It's somehow conceptually/aesthetically unpleasing to see that contents of a data structure lumped into the same notation used to access the class attributes and methods. Very unintuitive when coming from NumPy</p>&mdash; Sebastian Raschka (@rasbt) <a href=\"https://twitter.com/rasbt/status/1172509288343977985?ref_src=twsrc%5Etfw\">September 13, 2019</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n-->\n<blockquote class=\"twitter-tweet\" data-conversation=\"none\"><p lang=\"en\" dir=\"ltr\">Dot notation is a strict subset of the brackets. The brackets are also the canonical way to \"select subsets of data\" from all objects in python. strings, tuples, lists, dictionaries, numpy arrays all use brackets to select subsets of data. <a href=\"https://t.co/AUMwSl0Wmn\">https://t.co/AUMwSl0Wmn</a></p>&#x2014; Ted Petrou (@TedPetrou) <a href=\"https://twitter.com/TedPetrou/status/1172507299308552192?ref_src=twsrc%5Etfw\">September 13, 2019</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<blockquote class=\"twitter-tweet\" data-conversation=\"none\"><p lang=\"en\" dir=\"ltr\">Bracket notation for the clarity spaces allow, for the ability to use f-strings in column references and for the syntax highlighting.<br>I've never seen any point in dot notation.</p>&#x2014; SupineCabbage (@SublimeKarnage) <a href=\"https://twitter.com/SublimeKarnage/status/1172510780912103425?ref_src=twsrc%5Etfw\">September 13, 2019</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<blockquote class=\"twitter-tweet\" data-conversation=\"none\"><p lang=\"en\" dir=\"ltr\">I like the dot notation because tab-completion is usually available and I'm lazy, but in certain cases using it is not wise or not possible and I end up with inconsistent notation, so I switched to using brackets everywhere.</p>&#x2014; Na&#xEF;ve Bayesian (@naivebayesian) <a href=\"https://twitter.com/naivebayesian/status/1172512257508429826?ref_src=twsrc%5Etfw\">September 13, 2019</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<blockquote class=\"twitter-tweet\" data-conversation=\"none\"><p lang=\"en\" dir=\"ltr\">When I first learned Pandas I used [] notation. Recently I've been using '.' notation out of pure laziness (call it \"path of least resistance\"). The issue is that IDEs will autocomplete the right column name after the dot, but rarely after the brackets. It's just faster.</p>&#x2014; Pablo C&#xE1;ceres (@PabloCceres) <a href=\"https://twitter.com/PabloCceres/status/1172518311051051008?ref_src=twsrc%5Etfw\">September 13, 2019</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<script async data-uid=\"d6d0f53c0f\" src=\"https://dataschool.ck.page/d6d0f53c0f/index.js\"></script><!--kg-card-end: markdown-->"
}