{
  "title": "R XML: How to Work With XML Files in R",
  "link": "https://www.r-bloggers.com/2022/11/r-xml-how-to-work-with-xml-files-in-r/",
  "dc:creator": "Dario Radečić",
  "pubDate": "Wed, 02 Nov 2022 15:30:49 +0000",
  "category": "R bloggers",
  "guid": "https://wordpress.appsilon.com/?p=14406",
  "description": "<div style = \"width:60%; display: inline-block; float:left; \">\nR programming language can read all sorts of data, and XML is no exception. There are many ways to read, parse, and manipulate these markup language files in R, and today we’ll explore two. By the end of the article, you’ll know how to use two R packages ...</div>\n<div style = \"width: 40%; display: inline-block; float:right;\"></div>\n<div style=\"clear: both;\"></div>\n<strong>Continue reading</strong>: <a href=\"https://www.r-bloggers.com/2022/11/r-xml-how-to-work-with-xml-files-in-r/\">R XML: How to Work With XML Files in R</a>",
  "content:encoded": "<!-- \n<div style=\"min-height: 30px;\">\n[social4i size=\"small\" align=\"align-left\"]\n</div>\n-->\n\n<div style=\"border: 1px solid; background: none repeat scroll 0 0 #EDEDED; margin: 1px; font-size: 12px;\">\n[This article was first published on  <strong><a href=\"https://appsilon.com/r-xml/\"> Tag: r - Appsilon | Enterprise R Shiny Dashboards</a></strong>, and kindly contributed to <a href=\"https://www.r-bloggers.com/\" rel=\"nofollow\">R-bloggers</a>].  (You can report issue about the content on this page <a href=\"https://www.r-bloggers.com/contact-us/\">here</a>)\n<hr>Want to share your content on R-bloggers?<a href=\"https://www.r-bloggers.com/add-your-blog/\" rel=\"nofollow\"> click here</a> if you have a blog, or <a href=\"http://r-posts.com/\" rel=\"nofollow\"> here</a> if you don't.\n</div>\n<div><img src=\"https://i2.wp.com/wordpress.appsilon.com/wp-content/uploads/2022/07/Thumbnail-1.jpg?w=450&#038;ssl=1\" class=\"attachment-medium size-medium wp-post-image\" alt=\"R XML Article Thumbnail\" decoding=\"async\" loading=\"lazy\" style=\"margin-bottom: 15px;\" data-recalc-dims=\"1\" /></div><p>R programming language can read all sorts of data, and <strong>XML</strong> is no exception. There are many ways to <strong>read</strong>, <strong>parse</strong>, and <strong>manipulate</strong> these <strong>markup language files in R</strong>, and today we’ll explore two. By the end of the article, you’ll know how to use two <strong>R packages to work with XML</strong>.</p>\n<p>We’ll kick things off with an R XML introduction – you’ll get a sense of what XML is, and we’ll also write an XML dataset from scratch. Then, you’ll learn how to access individual elements, convert XML files to an R <code>tibble</code> and a <code>data.frame</code>, and much more.</p>\n<blockquote><p>Are you a complete beginner in R? <a href=\"https://appsilon.com/oop-in-r-with-r6/\" rel=\"nofollow\" target=\"_blank\">See how R handles Object-Oriented Programming (OOP) with R6</a>.</p></blockquote>\n<p>Table of contents:</p>\n<ul>\n<li><a href=\"https://appsilon.com/r-xml/#introduction\" rel=\"nofollow\" target=\"_blank\">Introduction to R XML</a></li>\n<li><a href=\"https://appsilon.com/r-xml/#basics\" rel=\"nofollow\" target=\"_blank\">R XML Basics – How to Read and Parse XML Files</a></li>\n<li><a href=\"https://appsilon.com/r-xml/#dataframes\" rel=\"nofollow\" target=\"_blank\">How to Convert XML Data to tibble and data.frame</a></li>\n<li><a href=\"https://appsilon.com/r-xml/#summary\" rel=\"nofollow\" target=\"_blank\">Summary of R XML</a></li>\n</ul>\n<hr />\n<h2 id=\"introduction\">Introduction to R XML</h2>\n<p>First, let’s answer one important question: <b>What is XML?</b> The acronym stands for <i>Extensible Markup Language</i>. It’s similar to HTML since they’re both markup languages, but XML is used for storing and transmitting data over the internet. As you would assume, all XML files have an <code>.xml</code> file extension.</p>\n<blockquote><p>Building an interactive map with R and Shiny? See if you should be <a href=\"https://appsilon.com/leaflet-vs-tmap-build-interactive-maps-with-r-shiny/\" rel=\"nofollow\" target=\"_blank\">using Leaflet vs Tmap</a>.</p></blockquote>\n<p>When you first start working with XML files you’ll immediately appreciate the structure. It’s human-readable, and there aren’t a gazillion of brackets as with JSON. There are no predefined tags, as in HTML. You can name your tags however you want, but it’s best to name them around the business logic.</p>\n<p>All XML documents start with the following – the XML prolog:</p>\n<pre><?xml version=\"1.0\" encoding=\"UTF-8\"?></pre>\n<p>Each XML file also must have a root element that can have one or many child notes. All child nodes may have sub-childs.</p>\n<p>Let’s see this in action! The following code snippet declares an XML dataset containing employees. There’s one root element – <code><records></code>, and each <code><employee></code> child has sub-childs, such as <code><last_name></code>:</p>\n<pre><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<records>\n    <employee>\n        <id>1</id>\n        <first_name>John</first_name>\n        <last_name>Smith</last_name>\n        <position>CEO</position>\n        <salary>10000</salary>\n        <hire_date>2022-1-1</hire_date>\n        <department>Management</department>\n    </employee>\n    <employee>\n        <id>2</id>\n        <first_name>Jane</first_name>\n        <last_name>Sense</last_name>\n        <position>Marketing Associate</position>\n        <salary>3500</salary>\n        <hire_date>2022-1-15</hire_date>\n        <department>Marketing</department>\n    </employee>\n    <employee>\n        <id>3</id>\n        <first_name>Frank</first_name>\n        <last_name>Brown</last_name>\n        <position>R Developer</position>\n        <salary>6000</salary>\n        <hire_date>2022-1-15</hire_date>\n        <department>IT</department>\n    </employee>\n    <employee>\n        <id>4</id>\n        <first_name>Judith</first_name>\n        <last_name>Rollers</last_name>\n        <position>Data Scientist</position>\n        <salary>6500</salary>\n        <hire_date>2022-3-1</hire_date>\n        <department>IT</department>\n    </employee>\n    <employee>\n        <id>5</id>\n        <first_name>Karen</first_name>\n        <last_name>Switch</last_name>\n        <position>Accountant</position>\n        <salary>4000</salary>\n        <hire_date>2022-1-10</hire_date>\n        <department>Accounting</department>\n    </employee>\n</records></pre>\n<p>Copy this file and save it locally – we’ve named it <code>data.xml</code>. You’ll need it in the following section when we’ll work with XML in R.</p>\n<p>But before we can do that, you’ll have to install two R packages:</p>\n<pre>install.packages(\"xml2\")\ninstall.packages(\"XML\")</pre>\n<p>Both are used to work with XML, and you can pretty much get around by using only the first. The second one has a couple of convenient functions for converting XML files, which we’ll cover later.</p>\n<blockquote><p>Want to add a Google Map to Shiny? <a href=\"https://appsilon.com/interactive-google-maps-with-r-shiny/\" rel=\"nofollow\" target=\"_blank\">Check out our guide to building interactive Google Maps with R Shiny!</a></p></blockquote>\n<p>First things first, let’s see how you can read and parse XML files in R.</p>\n<h2 id=\"basics\">R XML Basics – How to Read and Parse XML Files</h2>\n<p>By now you should have the dataset downloaded and R packages installed. Create a new R script and use the following code to load in the packages and read the XML file:</p>\n<pre>library(xml2)\nlibrary(XML)\n\nemployee_data <- read_xml(\"data.xml\")\nemployee_data\n</pre>\n<p>Here’s what it looks like:</p>\n<div id=\"attachment_14388\" style=\"width: 1934px\" class=\"wp-caption alignnone\"><img aria-describedby=\"caption-attachment-14388\" decoding=\"async\" loading=\"lazy\" class=\"size-full wp-image-14388\" src=\"https://i0.wp.com/wordpress.appsilon.com/wp-content/uploads/2022/07/1-1.png?w=450&#038;ssl=1\" alt=\"Image 1 - Contents of an XML document loaded into R\" data-recalc-dims=\"1\" /><p id=\"caption-attachment-14388\" class=\"wp-caption-text\">Image 1 – Contents of an XML document loaded into R</p></div>\n<p>The data is all there, but it’s unusable. You can make it usable by parsing the entire document or reading individual elements.</p>\n<p>Let’s explore the parsing option first. Call the <code>xmlParse()</code> function and pass in <code>employee_data</code>:</p>\n<pre>employee_xml <- xmlParse(employee_data)\nemployee_xml</pre>\n<p>The contents now look like our source file:</p>\n<div id=\"attachment_14390\" style=\"width: 686px\" class=\"wp-caption alignnone\"><img aria-describedby=\"caption-attachment-14390\" decoding=\"async\" loading=\"lazy\" class=\"size-full wp-image-14390\" src=\"https://i2.wp.com/wordpress.appsilon.com/wp-content/uploads/2022/07/2-1.png?w=450&#038;ssl=1\" alt=\"Image 2 - Parsed XML document\" data-recalc-dims=\"1\" /><p id=\"caption-attachment-14390\" class=\"wp-caption-text\">Image 2 – Parsed XML document</p></div>\n<p><b>Pro tip:</b> if you don’t care about the data, you can print the structure only. That’s done with the <code>xml_structure()</code> function:</p>\n<pre>xml_structure(employee_data)</pre>\n<div id=\"attachment_14392\" style=\"width: 358px\" class=\"wp-caption alignnone\"><img aria-describedby=\"caption-attachment-14392\" decoding=\"async\" loading=\"lazy\" class=\"size-full wp-image-14392\" src=\"https://i1.wp.com/wordpress.appsilon.com/wp-content/uploads/2022/07/3.png?resize=348%2C372&#038;ssl=1\" alt=\"Image 3 - Structure of an XML document\" width=\"348\" height=\"372\" data-recalc-dims=\"1\" /><p id=\"caption-attachment-14392\" class=\"wp-caption-text\">Image 3 – Structure of an XML document</p></div>\n<p>If you want to access all elements with the same tag, you can use the <code>xml_find_all()</code> function. It returns both the opening and closing tags and any content that’s between them:</p>\n<pre>xml_find_all(employee_data, \".//position\")</pre>\n<div id=\"attachment_14394\" style=\"width: 740px\" class=\"wp-caption alignnone\"><img aria-describedby=\"caption-attachment-14394\" decoding=\"async\" loading=\"lazy\" class=\"size-full wp-image-14394\" src=\"https://i2.wp.com/wordpress.appsilon.com/wp-content/uploads/2022/07/4-1.png?w=450&#038;ssl=1\" alt=\"Image 4 - Accessing individual nodes\" data-recalc-dims=\"1\" /><p id=\"caption-attachment-14394\" class=\"wp-caption-text\">Image 4 – Accessing individual nodes</p></div>\n<p>In the case you only want the content, use either <code>xml_text()</code>, <code>xml_integer()</code>, or <code>xml_double()</code> function – depending on the underlying data type. The first one makes the most sense here:</p>\n<pre>xml_text(xml_find_all(employee_data, \".//position\"))</pre>\n<div id=\"attachment_14396\" style=\"width: 1674px\" class=\"wp-caption alignnone\"><img aria-describedby=\"caption-attachment-14396\" decoding=\"async\" loading=\"lazy\" class=\"size-full wp-image-14396\" src=\"https://i0.wp.com/wordpress.appsilon.com/wp-content/uploads/2022/07/5-1.png?w=450&#038;ssl=1\" alt=\"Image 5 - Getting values from individual nodes\" data-recalc-dims=\"1\" /><p id=\"caption-attachment-14396\" class=\"wp-caption-text\">Image 5 – Getting values from individual nodes</p></div>\n<p>You now know how to do some basic R XML operations, but most of the time you want to convert these files to either a tibble or a data frame for easier access and manipulation. Let’s see how to do that next.</p>\n<h2 id=\"dataframes\">How to Convert XML Data to tibble and data.frame</h2>\n<p>Most of the time with R and XML you’ll want to extract either all or a couple of features and turn them into a more readable format. We’ve already shown you how to use <code>xml_text()</code> to extract text from a specific element, and now we’ll do a similar thing with integers. Then, we’ll format these two attributes as a tibble.</p>\n<p>Here’s the entire code snippet:</p>\n<pre>library(tibble)\n\n# Extract department and salary info\ndept <- xml_text(xml_find_all(employee_data, \".//department\"))\nsalary <- xml_integer(xml_find_all(employee_data, \".//salary\"))\n\n# Format as a tibble\ndf_dept_salary <- tibble(department = dept, salary = salary)\ndf_dept_salary</pre>\n<div id=\"attachment_14398\" style=\"width: 336px\" class=\"wp-caption alignnone\"><img aria-describedby=\"caption-attachment-14398\" decoding=\"async\" loading=\"lazy\" class=\"size-full wp-image-14398\" src=\"https://i0.wp.com/wordpress.appsilon.com/wp-content/uploads/2022/07/6-1.png?resize=326%2C312&#038;ssl=1\" alt=\"Image 6 - Converting an XML document to an R tibble\" width=\"326\" height=\"312\" data-recalc-dims=\"1\" /><p id=\"caption-attachment-14398\" class=\"wp-caption-text\">Image 6 – Converting an XML document to an R tibble</p></div>\n<p>Now we have the department names and salaries for all employees. From here, it’s easy to calculate the average salary per department (note that only the IT department occurs twice):</p>\n<pre>library(dplyr)\n\n# Group by department name to get average salary by department\ndf_dept_salary %>% \n  group_by(department) %>%\n  summarise(salary = mean(salary))</pre>\n<div id=\"attachment_14400\" style=\"width: 332px\" class=\"wp-caption alignnone\"><img aria-describedby=\"caption-attachment-14400\" decoding=\"async\" loading=\"lazy\" class=\"size-full wp-image-14400\" src=\"https://i1.wp.com/wordpress.appsilon.com/wp-content/uploads/2022/07/7.png?resize=322%2C272&#038;ssl=1\" alt=\"Image 7 - Aggregations on an R tibble\" width=\"322\" height=\"272\" data-recalc-dims=\"1\" /><p id=\"caption-attachment-14400\" class=\"wp-caption-text\">Image 7 – Aggregations on an R tibble</p></div>\n<p>In case you want to convert the entire XML document to an R data.frame, look no further than the <code>XML</code> package. It has a convenient <code>xmlToDataFrame()</code> method that does the job perfectly:</p>\n<pre>df_employees <- xmlToDataFrame(nodes = getNodeSet(employee_xml, \"//employee\"))\ndf_employees</pre>\n<div id=\"attachment_14402\" style=\"width: 1180px\" class=\"wp-caption alignnone\"><img aria-describedby=\"caption-attachment-14402\" decoding=\"async\" loading=\"lazy\" class=\"size-full wp-image-14402\" src=\"https://i0.wp.com/wordpress.appsilon.com/wp-content/uploads/2022/07/8.png?w=450&#038;ssl=1\" alt=\"Image 8 - Converting an XML document to an R data.frame\" data-recalc-dims=\"1\" /><p id=\"caption-attachment-14402\" class=\"wp-caption-text\">Image 8 – Converting an XML document to an R data.frame</p></div>\n<p>That’s all the loading and preprocessing needed before you can start analyzing and visualizing datasets. It’s also the most common pipeline you’ll have for loading XML files, so we’ll end today’s article here.</p>\n<hr />\n<h2 id=\"summary\">Summary of R XML</h2>\n<p>XML files are common in 2022 and you as a data professional must know how to work with them. Almost all R XML-related work you’ll do boils down to loading and parsing XML documents and converting them to an analysis-friendly format. Today you’ve learned how to do that with two excellent R packages.</p>\n<p>For a homework assignment, try to read only the <code><hire_date></code> attribute, and make sure to parse it as a date. Is there a built-in function, or do you need to take an extra step? Make sure to let us know in the comment section below.</p>\n<blockquote><p>Excel power user? <a href=\"https://appsilon.com/r-and-excel/\" rel=\"nofollow\" target=\"_blank\">You can combine R and Excel with these two packages</a>.</p></blockquote>\n<p>The post <a rel=\"nofollow\" href=\"https://wordpress.appsilon.com/r-xml/\" target=\"_blank\">R XML: How to Work With XML Files in R</a> appeared first on <a rel=\"nofollow\" href=\"https://wordpress.appsilon.com/\" target=\"_blank\">Appsilon | Enterprise R Shiny Dashboards</a>.</p>\n\n<div style=\"border: 1px solid; background: none repeat scroll 0 0 #EDEDED; margin: 1px; font-size: 13px;\">\n<div style=\"text-align: center;\">To <strong>leave a comment</strong> for the author, please follow the link and comment on their blog: <strong><a href=\"https://appsilon.com/r-xml/\"> Tag: r - Appsilon | Enterprise R Shiny Dashboards</a></strong>.</div>\n<hr />\n<a href=\"https://www.r-bloggers.com/\" rel=\"nofollow\">R-bloggers.com</a> offers <strong><a href=\"https://feedburner.google.com/fb/a/mailverify?uri=RBloggers\" rel=\"nofollow\">daily e-mail updates</a></strong> about <a title=\"The R Project for Statistical Computing\" href=\"https://www.r-project.org/\" rel=\"nofollow\">R</a> news and tutorials about <a title=\"R tutorials\" href=\"https://www.r-bloggers.com/how-to-learn-r-2/\" rel=\"nofollow\">learning R</a> and many other topics. <a title=\"Data science jobs\" href=\"https://www.r-users.com/\" rel=\"nofollow\">Click here if you're looking to post or find an R/data-science job</a>.\n\n<hr>Want to share your content on R-bloggers?<a href=\"https://www.r-bloggers.com/add-your-blog/\" rel=\"nofollow\"> click here</a> if you have a blog, or <a href=\"http://r-posts.com/\" rel=\"nofollow\"> here</a> if you don't.\n</div><strong>Continue reading</strong>: <a href=\"https://www.r-bloggers.com/2022/11/r-xml-how-to-work-with-xml-files-in-r/\">R XML: How to Work With XML Files in R</a>",
  "enclosure": "",
  "post-id": 334375
}