{
  "title": "21st Century C: Error 64 on OSX When Using Make",
  "description": "<p>To end 2015, I decided to finally learn C, instead of making it a 2016 resolution! I had previously done the <a href=\"http://c.learncodethehardway.org/book/\">‚ÄòLearn C The Hard Way‚Äô</a> tutorials, taken about a year off, and thus forgotten everything.</p>",
  "pubDate": "Thu, 31 Dec 2015 13:17:30 +0000",
  "link": "http://randyzwitch.com/21st-century-c-error-64-osx/",
  "guid": "http://randyzwitch.com/21st-century-c-error-64-osx/",
  "content": "<p>To end 2015, I decided to finally learn C, instead of making it a 2016 resolution! I had previously done the <a href=\"http://c.learncodethehardway.org/book/\">‚ÄòLearn C The Hard Way‚Äô</a> tutorials, taken about a year off, and thus forgotten everything.</p>\n\n<p>Rather than re-do the same material, I decided to get <a href=\"http://shop.oreilly.com/product/0636920033677.do\">‚Äô21st Century C‚Äô</a> from O‚ÄôReilly and work through that. Unfortunately, there is an error/misprint in the very beginning chapters that makes doing the exercises near impossible on OSX. This error manifests itself as <code class=\"language-plaintext highlighter-rouge\">c99: invalid argument 'all' to -W¬†Error 64</code>.¬†If you encounter this error on OSX (I‚Äôm using OSX 10.11.2 El Capitan as of writing this post), here are three methods for fixing the issue.</p>\n\n<h2 id=\"error-64\">Error 64!</h2>\n\n<p>When the discussion of using <a href=\"https://www.gnu.org/software/make/\">Makefiles</a>¬†begins on page 15, there is a discussion of the ‚Äúsmallest practicable makefile‚Äù, which is just six lines long:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-shell\" data-lang=\"shell\"><table class=\"rouge-table\"><tbody><tr><td class=\"gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n</pre></td><td class=\"code\"><pre><span class=\"nv\">P</span><span class=\"o\">=</span>program_name\n<span class=\"nv\">OBJECTS</span><span class=\"o\">=</span>\n<span class=\"nv\">CFLAGS</span><span class=\"o\">=</span> <span class=\"nt\">-g</span> <span class=\"nt\">-Wall</span> <span class=\"nt\">-O3</span>\n<span class=\"nv\">LDLIBS</span><span class=\"o\">=</span>\n<span class=\"nv\">CC</span><span class=\"o\">=</span>c99\n\n<span class=\"si\">$(</span>P<span class=\"si\">)</span>: <span class=\"si\">$(</span>OBJECTS<span class=\"si\">)</span>\n</pre></td></tr></tbody></table></code></pre></figure>\n\n<p>Unfortunately, this doesn‚Äôt <em>quite</em> work on OSX. Page 11 in the book sort-of references that a fix is needed, but the directions aren‚Äôt so clear‚Ä¶</p>\n\n<h2 id=\"error-64-solution-1-book-fix-updated\">Error 64, solution 1: Book Fix, updated</h2>\n\n<p>To use the book fix, you are supposed to:</p>\n\n<ol>\n  <li>Create a file named <em>c99</em></li>\n  <li>Put the lines <code class=\"language-plaintext highlighter-rouge\">gcc -std=c99 $\\*</code> OR <code class=\"language-plaintext highlighter-rouge\">clang $\\*</code> in the <em>c99</em> file</li>\n  <li>Add the file to your PATH in Terminal (such as <code class=\"language-plaintext highlighter-rouge\">export PATH=\"/Users/computeruser:$PATH\"</code> if the <code class=\"language-plaintext highlighter-rouge\">c99</code> file were located in <code class=\"language-plaintext highlighter-rouge\">/Users/computeruser</code> directory)</li>\n  <li>Run <code class=\"language-plaintext highlighter-rouge\">chmod +x c99</code> on the file to make it executable</li>\n</ol>\n\n<p>Once you add this work-around to your PATH, then open a fresh Terminal window (or run <code class=\"language-plaintext highlighter-rouge\">source .bash_profile</code> to refresh the Bash settings), you should be able to use Make to compile your C code.</p>\n\n<p>But to be honest, this seems like a really weird ‚Äúfix‚Äù to me, as it overrides the C compiler settings for any program run via Terminal. I prefer one of two alternate solutions.</p>\n\n<h2 id=\"error-64-solution-2-makefile-change\">Error 64, solution 2: Makefile Change</h2>\n\n<p>As I was researching this, a helpful Twitter user noted:</p>\n\n<blockquote class=\"twitter-tweet\" lang=\"en\" data-conversation=\"none\">\n  <p>\n    <a href=\"https://twitter.com/randyzwitch\">@randyzwitch</a> Remove space between CFLAGS and =, and replace c99 with cc. See man c99, -W is not -Wwarnings.\n  </p>\n\n  <p>\n    ‚Äî Eugene Teo (@datajottings) <a href=\"https://twitter.com/datajottings/status/682214537341190145\">December 30, 2015</a>\n  </p>\n</blockquote>\n\n<p>When you switch the ‚Äòc99‚Äô reference to just ‚Äòcc‚Äô in the Makefile, everything works fine. Here‚Äôs the subtlety different, corrected Makefile:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-shell\" data-lang=\"shell\"><table class=\"rouge-table\"><tbody><tr><td class=\"gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n</pre></td><td class=\"code\"><pre><span class=\"nv\">P</span><span class=\"o\">=</span>program_name\n<span class=\"nv\">OBJECTS</span><span class=\"o\">=</span>\n<span class=\"nv\">CFLAGS</span><span class=\"o\">=</span> <span class=\"nt\">-g</span> <span class=\"nt\">-Wall</span> <span class=\"nt\">-O3</span>\n<span class=\"nv\">LDLIBS</span><span class=\"o\">=</span>\n<span class=\"nv\">CC</span><span class=\"o\">=</span>cc\n\n<span class=\"si\">$(</span>P<span class=\"si\">)</span>: <span class=\"si\">$(</span>OBJECTS<span class=\"si\">)</span>\n</pre></td></tr></tbody></table></code></pre></figure>\n\n<h2 id=\"error-64-solution-3-switch-to-clang\">Error 64, solution 3: Switch to Clang</h2>\n\n<p>The final solution I came across is rather than using the GCC compiler, you can use an alternate compiler called Clang, which is also generally available on OSX (especially with XCode installed). Like solution 2 above, the Makefile is just subtlety different:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-shell\" data-lang=\"shell\"><table class=\"rouge-table\"><tbody><tr><td class=\"gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n</pre></td><td class=\"code\"><pre><span class=\"nv\">P</span><span class=\"o\">=</span>program_name\n<span class=\"nv\">OBJECTS</span><span class=\"o\">=</span>\n<span class=\"nv\">CFLAGS</span><span class=\"o\">=</span> <span class=\"nt\">-g</span> <span class=\"nt\">-Wall</span> <span class=\"nt\">-O3</span>\n<span class=\"nv\">LDLIBS</span><span class=\"o\">=</span>\n<span class=\"nv\">CC</span><span class=\"o\">=</span>clang\n\n<span class=\"si\">$(</span>P<span class=\"si\">)</span>: <span class=\"si\">$(</span>OBJECTS<span class=\"si\">)</span>\n</pre></td></tr></tbody></table></code></pre></figure>\n\n<p>Whether to use GCC or Clang as your compiler is really beyond the scope of this blog post; as <em>21st Century C</em> discusses, it really shouldn‚Äôt matter (especially when you are just learning the mechanics of the language).</p>\n\n<h2 id=\"error-64-be-gone\">Error 64, Be Gone!</h2>\n\n<p>There‚Äôs not really much more to say at this point; this blog post is mainly documentation for anyone who comes across this error in the future. I‚Äôve continued on through the book using Clang, but suffice to say, it‚Äôs not the compiler that writes poor-quality, non-compiling code, it‚Äôs the user. Ah, the fun of learning üôÇ</p>"
}