{
  "id": "tag:blogger.com,1999:blog-6755709643044947179.post-1233487935615753230",
  "published": "2022-10-24T09:30:00.001-07:00",
  "updated": "2022-10-24T09:55:43.952-07:00",
  "category": [
    "",
    "",
    ""
  ],
  "title": "Android Dev Summit ‘22: What’s new in Jetpack",
  "content": "<meta content=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhKuG3pZKvsbM-kUpZA9fJF5BTED9YxJuHWfcUONNrA9hYvp0UeTjvfYlSvjANimdnsgZ0NeP5namasvB8ifJzHFFMVn3LoVjDWq-Ui0ZIOX0tdP4hd1vgS-Ls2Z7C36le-lTwlpXYknLZcmEHzpSoNW9mL1-u5Y3ycsDCeRnWbJA6go1js5NQaCWGc/s1600/ADS22%20-%20What_s%20new%20in%20Jetpack%20-%20App%20Architecture,%20Performance%20Libraries_1024x512.png\" name=\"twitter:image\"></meta>\n<img src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhKuG3pZKvsbM-kUpZA9fJF5BTED9YxJuHWfcUONNrA9hYvp0UeTjvfYlSvjANimdnsgZ0NeP5namasvB8ifJzHFFMVn3LoVjDWq-Ui0ZIOX0tdP4hd1vgS-Ls2Z7C36le-lTwlpXYknLZcmEHzpSoNW9mL1-u5Y3ycsDCeRnWbJA6go1js5NQaCWGc/s1600/ADS22%20-%20What_s%20new%20in%20Jetpack%20-%20App%20Architecture,%20Performance%20Libraries_1024x512.png\" style=\"display: none;\" />\n\n<p><em>Posted by Amanda Alexander, Product Manager</em></p><p>\n  \n<a href=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgCzC-3CS0NeTAR1ZOCHwJ6IvdNBCdIey2290oWnQWNAn9Db1lJroBP4uDSYYDbEhRf-G1nCy1uc8yII1xNPL2stcvf_S9mx1fZqRXOWAeZGwpqjw-sVQ10-OZDxy6yDuH3U64851_AxHPytlrANamHZtr9MIp4nH3E-W7MDkO2QZS65s8cuyqeAJMJ/s1600/ADS22%20-%20What_s%20new%20in%20Jetpack%20-%20App%20Architecture,%20Performance%20Libraries_4209x1253.png\"><img border=\"0\" data-original-height=\"800\" data-original-width=\"1058\" height=\"199\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgCzC-3CS0NeTAR1ZOCHwJ6IvdNBCdIey2290oWnQWNAn9Db1lJroBP4uDSYYDbEhRf-G1nCy1uc8yII1xNPL2stcvf_S9mx1fZqRXOWAeZGwpqjw-sVQ10-OZDxy6yDuH3U64851_AxHPytlrANamHZtr9MIp4nH3E-W7MDkO2QZS65s8cuyqeAJMJ/w667-h199/ADS22%20-%20What_s%20new%20in%20Jetpack%20-%20App%20Architecture,%20Performance%20Libraries_4209x1253.png\" width=\"667\" /></a>\n\n</p><p><a href=\"https://developer.android.com/jetpack\" target=\"_blank\">Android Jetpack</a> is a key component of&nbsp;<a href=\"https://developer.android.com/modern-android-development\" target=\"_blank\">Modern Android Development</a>. It is a suite of over 100 libraries, tools and guidance to help developers follow best practices, reduce boilerplate code, and write code that works consistently across Android versions and devices. By using Android Jetpack to improve your productivity, you can focus on building unique features for your app.&nbsp;</p>\n<p>Most apps on Google Play use Jetpack as a key component of their app architecture, in fact&nbsp;over 90% of the top 1000 apps use Android Jetpack.</p>\n<p>At ADS this week we released updates to three major areas of Jetpack:</p>\n<p style=\"text-align: left;\"></p><ol style=\"text-align: left;\">\n  <li><a href=\"#Architecture Libraries and Guidance\">Architecture Libraries and Guidance</a></li>\n  <li><a href=\"#Application Performance\">Application Performance</a></li>\n  <li><a href=\"#User Interface Libraries and Guidance\">User Interface Libraries and Guidance</a></li></ol><p></p><ol>\n</ol>\n<p>We’ll take a moment to expand on each of these areas and then conclude with some additional updates that we also shipped.</p>\n<p>Let’s go…</p>\n<p><br /></p>\n<u><h2 id=\"Architecture Libraries and Guidance\">Architecture Libraries and Guidance</h2></u>\n<p>App architecture libraries and components ensure that apps are robust, testable, and maintainable.</p>\n<h3 style=\"text-align: left;\">Managing tasks with WorkManager</h3>\n<p>The&nbsp;<a href=\"https://developer.android.com/jetpack/androidx/releases/work\" target=\"_blank\">WorkManager</a> library makes it easy to schedule deferrable, asynchronous tasks that must be run reliably for instance uploading backups or analytics. These APIs let you create a task and hand it off to WorkManager to run when the work constraints are met.</p>\n<p>WorkManager&nbsp;<a href=\"https://developer.android.com/jetpack/androidx/releases/work#2.8.0-alpha04\" target=\"_blank\">2.8.0-alpha04</a> has been updated with the ability to&nbsp;<a href=\"https://developer.android.com/reference/androidx/work/WorkManager#updateWork(androidx.work.WorkRequest)\" target=\"_blank\">update WorkRequests</a> in a non-intrusive way, preserving original enqueue time, chaining and more. It makes changes to Worker’s constraints much easier, e.g. if constraints need to be changed from one version of an application to another or via configuration set by server-side. Previously, it was possible to achieve only by canceling already scheduled workers and rescheduling them again. However, this approach was very disruptive: already running workers could have been canceled, cadence of periodic workers could have been broken, and the whole chains of workers required reconstruction if one of them needed an update. Now using the&nbsp;<span id=\"docs-internal-guid-380c1e82-7fff-b2b7-bdb6-b5ba0ee13a28\"><span style=\"background-color: #f0f0f0; color: #444444; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;\"><span style=\"font-family: courier;\">update</span></span></span>&nbsp;method or&nbsp;<span style=\"font-family: courier;\"><span id=\"docs-internal-guid-bfb26fcb-7fff-0b56-022c-0f624dc661ec\"><span style=\"background-color: #f0f0f0; color: #444444; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;\">ExistingPeriodicWorkPolicy</span><span style=\"background-color: #f0f0f0; color: #880000; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;\">.UPDATE</span></span>&nbsp;</span>developers don’t have to worry about any of these issues.&nbsp;</p>\n<p><br /></p>\n<h3>Data Persistence</h3>\n<p>Most applications need to persist local state - whether it be caching results, managing local lists of user enter data, or powering data returned in the UI. &nbsp;<a href=\"https://developer.android.com/jetpack/androidx/releases/room\" target=\"_blank\">Room</a> is the recommended data persistence layer which provides an abstraction layer over SQLite, allowing for increased usability and safety over the platform.</p>\n<p>In Room 2.5.0-alpha03, we added a new shortcut annotation,&nbsp;<span id=\"docs-internal-guid-a991f455-7fff-60dd-b36c-ced41af9f1c9\"><span style=\"background-color: #f0f0f0; color: #1f7199; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;\"><span style=\"font-family: courier;\">@Upsert</span></span></span>, which attempts to insert an entity when there is no uniqueness conflict or update the entity if there is a conflict. Moreover, all of Room runtime APIs along with androidx.sqlite have been converted to Kotlin, creating a better experience for Kotlin users such as strict nullability and opening the door to support other Kotlin language features.&nbsp;</p><p><br /></p>\n<h3>Android 13 Activity APIs, now backward compatible</h3>\n<p>The&nbsp;<a href=\"https://developer.android.com/jetpack/androidx/releases/activity#version_160_3\" target=\"_blank\">Activity</a> library includes the&nbsp;<span id=\"docs-internal-guid-e2e64e2d-7fff-2b6e-03d8-d2f2e0a1de53\"><span style=\"background-color: #f0f0f0; color: #444444; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;\"><span style=\"font-family: courier;\">ComponentActivity</span></span></span>&nbsp;class, a base class built on top of the Android framework’s Activity class which provides APIs that enable Jetpack Compose, other Architecture Components, and support for backporting new features introduced in Android 13 with Activity 1.6.1.</p>\n<p>By using&nbsp;<span style=\"background-color: #f0f0f0; color: #444444; font-family: courier; white-space: pre-wrap;\">ComponentActivity</span>&nbsp;directly, or either of its subclasses of&nbsp;<span id=\"docs-internal-guid-069da072-7fff-c3ae-b426-f0e89d352433\"><span style=\"background-color: #f0f0f0; color: #444444; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;\"><span style=\"font-family: courier;\">FragmentActivity</span></span></span>&nbsp;or&nbsp;<span id=\"docs-internal-guid-0476ed4e-7fff-132f-d061-f58a1c841e1d\"><span style=\"background-color: #f0f0f0; color: #444444; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;\"><span style=\"font-family: courier;\">AppCompatActivity</span></span></span>, you can use a single API to pick images via the&nbsp;<a href=\"https://developer.android.com/training/data-storage/shared/photopicker\" target=\"_blank\">Photo Picker</a> when it is available with an automatic fallback to the Storage Access Framework to allow support back to Android 4.4 (API 19).</p>\n<p>You’ll also be set up for the future with support for the&nbsp;<a href=\"https://developer.android.com/guide/navigation/predictive-back-gesture\" target=\"_blank\">Predictive back gesture</a> introduced in Android 13 simply by upgrading to Activity 1.6.1. The Activity APIs provide a single API for&nbsp;<a href=\"https://developer.android.com/guide/navigation/navigation-custom-back\" target=\"_blank\">custom back navigation</a> that works back to API 14 and is fully compatible with opting in to predictive back gestures.</p><p><br /></p>\n<h3>Testing Pagination with the Paging Testing library</h3>\n<p>The&nbsp;<a href=\"https://developer.android.com/topic/libraries/architecture/paging/v3-overview\" target=\"_blank\">Paging</a> library provides support for loading very large data sets. To get the most of Paging, the integration includes multiple layers of your application - your repository layer, ViewModel layer, and your UI.</p>\n\n<div><table align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: center;\"><tbody><tr><td style=\"text-align: center;\"><center><img alt=\"Paged data flows from the PagingSource or RemoteMediator components in the repository layer to the Pager component in the ViewModel layer. Then the Pager component exposes a Flow of PagingData to the PagingDataAdapter in the UI layer.\" border=\"0\" data-original-height=\"1504\" data-original-width=\"720\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgPc6SyA5vcme5S79W3_N3t3XbjN--CpcvyEiJZ7ndLT6DxDn2fNMRznhL8j2mxEL_TtK98bwJgj-1KCNEdbiGny8TEpxQqu6VYnduU7BolEEoRviviqRTGkKY4guDD-JT-CbobkX1Sr_ibztjfBPvYCgPguOfRC9bB__GKcJpVh_0wrsTzSM5fK8Ha/s1600/image4.png\" style=\"width: 100%;\" td=\"\" /></center></td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\"></td></tr></tbody></table></div>\n<div style=\"text-align: left;\">To make it easier to test that integration,&nbsp;<a href=\"https://developer.android.com/jetpack/androidx/releases/paging#3.2.0-alpha03\" target=\"_blank\">Paging 3.2.0-alpha03</a> introduces a new paging-testing artifact with test specific APIs to make it possible to test each layer in isolation. This first release focuses on the repository layer and specifically around testing a custom PagingSource via the new TestPager APIs to ensure you can test your paging sources in different scenarios that are harder to reproduce with integration tests.</div><p style=\"text-align: left;\"><br /></p>\n<h3>New Architecture Documentation</h3>\n<p>Investing in Architecture is important to improve the quality of your app by making it more robust, testable, maintainable, and scalable. That's why our recommendations on Architecture keep growing! In fact, they've grown so much we released a&nbsp;<a href=\"https://developer.android.com/topic/architecture/recommendations\" target=\"_blank\">new Architecture recommendations page</a> that consolidates and centralizes important best practices you can find in our docs.</p>\n<p>The team recently released new guidance on&nbsp;modularization. The guide is split into two parts:&nbsp;</p>\n<p style=\"text-align: left;\"></p><ul style=\"text-align: left;\"><li>The&nbsp;<a href=\"https://developer.android.com/topic/modularization\" target=\"_blank\">overview page</a> gives you a high level, theoretical overview of the matter.&nbsp;</li><li>The&nbsp;<a href=\"https://developer.android.com/topic/modularization/patterns\" target=\"_blank\">common modularization patterns page</a> dives deep into practical examples in the context of the modern Android architecture.</li></ul><p></p><ul>\n</ul>\n<p>The&nbsp;<a href=\"https://developer.android.com/topic/architecture/ui-layer\" target=\"_blank\">UI layer docs</a> got two new pages:</p>\n<p style=\"text-align: left;\"></p><ul style=\"text-align: left;\"><li>The&nbsp;<a href=\"https://developer.android.com/topic/architecture/ui-layer/stateholders\" target=\"_blank\">state holders and UI state page</a> explains the different types of state holders you can find in the UI layer and which implementation you should use depending on the type of logic to perform.&nbsp;</li><li>The&nbsp;<a href=\"https://developer.android.com/topic/architecture/ui-layer/state-production\" target=\"_blank\">state production page</a> that shows best practices about how to model and expose UI state depending on the sources of state change.&nbsp;</li></ul><p></p><ul>\n</ul>\n<p>Due to popular demand, the&nbsp;<a href=\"https://developer.android.com/topic/architecture/ui-layer/events\" target=\"_blank\">UI events page</a> has been updated with examples of&nbsp;<a href=\"https://developer.android.com/topic/architecture/ui-layer/events#navigation-events\" target=\"_blank\">Navigation UI events</a>. We also released new Navigation guidance about&nbsp;<a href=\"http://goo.gle/navigation-type-safety\" target=\"_blank\">providing runtime type safety to the Kotlin DSL and Navigation Compose</a>.</p>\n<p>Lastly, if you need to make your app work offline, we got you covered. The&nbsp;<a href=\"https://developer.android.com/topic/architecture/data-layer/offline-first\" target=\"_blank\">build an offline-first app guide</a> helps you design your app to properly handle reads and writes, and deal with sync and conflict resolution in a device with no Internet connectivity.</p><p style=\"text-align: left;\"><br /></p>\n<h3>New ViewModel Documentation</h3>\n<p></p><ul style=\"text-align: left;\"><li><a href=\"https://developer.android.com/topic/libraries/architecture/viewmodel\" target=\"_blank\">ViewModels</a> provide an implementation of the&nbsp;<a href=\"https://developer.android.com/topic/architecture/ui-layer/stateholders\" target=\"_blank\">state holder pattern</a> as part of your UI layer. We’ve recently updated the documentation to provide:</li><li><a href=\"https://developer.android.com/topic/libraries/architecture/viewmodel\" target=\"_blank\">An overview</a> of how ViewModels work and the scope they provide.</li><li>How to&nbsp;<a href=\"https://developer.android.com/topic/libraries/architecture/viewmodel/viewmodel-factories\" target=\"_blank\">Create ViewModels with dependencies</a> when not using the prebuilt support for&nbsp;<a href=\"https://developer.android.com/training/dependency-injection/hilt-jetpack#viewmodels\" target=\"_blank\">Injecting ViewModel objects with Hilt</a>.</li><li>Details on the&nbsp;<a href=\"https://developer.android.com/topic/libraries/architecture/viewmodel/viewmodel-apis\" target=\"_blank\">available scopes for a ViewModel</a> and the APIs that enable that support.</li><li>How ViewModels can save their state across process death and recreation via the&nbsp;<a href=\"https://developer.android.com/topic/libraries/architecture/viewmodel/viewmodel-savedstate\" target=\"_blank\">Saved State module for ViewModel</a>.</li></ul><p></p>\n\n        <ul>\n</ul>\n<p>This updated guidance is designed to make it easier to understand when ViewModels are the right tool to reach for when building your UI layer.</p>\n<p><br /></p>\n<u><h2 id=\"Application Performance\">Application Performance</h2></u>\n<p>Using performance libraries allows you to build performant apps and identify optimizations to maintain high performance, resulting in better end-user experiences.&nbsp;</p>\n<p style=\"text-align: left;\"><br /></p>\n<h3>Improving Start-up Times</h3>\n<p>App speed can have a big impact on a user’s experience, particularly when using apps right after installation. To improve that first time experience, we are continuing to enhance&nbsp;<a href=\"https://developer.android.com/studio/profile/baselineprofiles\" target=\"_blank\">Baseline Profiles</a>. Baseline Profiles allow apps and libraries to provide the Android run-time with metadata about code path usage, which it uses to prioritize ahead-of-time compilation. This profile data is aggregated across libraries and lands in an app’s APK as a baseline.prof file, which is then used at install time to partially pre-compile the app and its statically-linked library code. This can make your apps load faster and reduce dropped frames the first time a user interacts with an app.&nbsp;</p>\n<p>With AGP 7.3, baseline profile tooling is fully stable, so you don't need alpha dependencies to get a 30%+ performance boost to your app's initial launch and scroll after each app update.&nbsp;</p>\n<p>In profileinstaller:1.3.0-alpha01,&nbsp;<a href=\"https://developer.android.com/reference/androidx/profileinstaller/ProfileVerifier\" target=\"_blank\">ProfileVerifier</a> allows you to inspect profile compilation in the field, and starting in Android Studio Flamingo Canary 6, the Studio APK Inspector now shows the contents of your APK's baseline profiles.</p><p><br /></p>\n<h3>Accurate reporting of startup metrics</h3>\n<p>Startup metrics are an important part of measuring your app’s performance, but the system (and the Benchmark libraries!) need a signal that marks the completion of the startup phase. That signal is the Activity’s call to&nbsp;<span id=\"docs-internal-guid-50759439-7fff-3ef0-11b9-a28f866059ae\"><span style=\"background-color: #f0f0f0; color: #444444; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;\"><span style=\"font-family: courier;\">reportFullyDrawn()</span></span></span>.&nbsp;<a href=\"https://developer.android.com/jetpack/androidx/releases/activity\" target=\"_blank\">Activity</a> 1.7.0-alpha01 added new APIs in the form of the FullyDrawnReporter APIs that allows multiple components to report when they are ready for interaction. ComponentActivity will wait for all components to complete before calling&nbsp;<span style=\"background-color: #f0f0f0; color: #444444; font-family: courier; white-space: pre-wrap;\">reportFullyDrawn()</span>&nbsp;on your behalf.</p>\n<p>These APIs are encouraged to enable:</p>\n\n        <p style=\"text-align: left;\"></p><ul style=\"text-align: left;\"><li>Signaling the Android Runtime when startup completes, to ensure all of the code run during a multi-frame startup sequence is included and prioritized for background compilation.</li><li>Signaling Macrobenchmark and Play Vitals when your application should be considered fully drawn for startup metrics, so you can track performance.</li></ul><p></p><ul>\n</ul>\n<p>Two Activity Compose APIs,&nbsp;<span id=\"docs-internal-guid-1ea01b8e-7fff-d61b-9ea9-3fbfeba2ba1a\"><span style=\"background-color: #f0f0f0; color: #444444; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;\"><span style=\"font-family: courier;\">ReportDrawnWhen</span></span></span>&nbsp;and&nbsp;<span id=\"docs-internal-guid-655e3243-7fff-047a-ce29-142be775abf1\"><span style=\"background-color: #f0f0f0; color: #444444; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;\"><span style=\"font-family: courier;\">ReportDrawnAfter</span></span></span>, have been added to make it more convenient to use the&nbsp;<span id=\"docs-internal-guid-33b888ef-7fff-3929-6b37-d4d3096b2ac8\"><span style=\"background-color: #f0f0f0; color: #444444; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;\"><span style=\"font-family: courier;\">FullyDrawnReporter</span></span></span>&nbsp;from individual composables.</p><p><br /></p>\n<h3>Recomposition Tracing</h3>\n<div style=\"text-align: left;\">We recently launched the first alpha of Jetpack Compose Composition Tracing, a tool that allows you to see composable functions in the Android Studio system trace profiler. This feature combines the benefits of low intrusiveness from system tracing with method tracing levels of detail in your compositions. By adding a dependency on Compose Runtime Tracing, you will be able to see traces of your recomposition call stack in Android Studio Flamingo Canary 5 system traces and click on them to navigate straight to the code! You can read more about the feature and how to set it up in your project&nbsp;<a href=\"https://medium.com/androiddevelopers/jetpack-compose-composition-tracing-9ec2b3aea535\" target=\"_blank\">here</a>.</div>\n\n<div><table align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: center;\"><tbody><tr><td style=\"text-align: center;\"><center><img alt=\"UI screenshot of composables in the system trace\" border=\"0\" data-original-height=\"1504\" data-original-width=\"720\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEivoJUJchRtmFJ4yYz9sNPdVtLr6VfjJ7yAPekv068YGiUdZiitEn3bhSeX9IuBxkkrxhS0pQ_KtHYxrw3rj95YGPLyli4MF2WSBzQDPSgCM7SOWA7ZQQf_l6kThd2YqNwf4BJOZAJRqFAYlSyNB8GjobfrlpAwpnh7AYatjFLA7YP_gd84UqCclYTV/s1600/image2.png\" style=\"width: 100%;\" td=\"\" /></center></td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\"><i>Composables in the system trace</i></td></tr></tbody></table></div>\n\n<h2 id=\"User Interface Libraries and Guidance\"><u>User Interface Libraries and Guidance</u></h2>\n<p><br /></p>\n<h3>Jetpack Compose</h3>\n<div style=\"text-align: left;\">Jetpack Compose, Android’s modern toolkit for building native UI, has launched the Compose October ‘22 release which includes many performance improvements and adds support for staggered grids, drawing text directly to canvas, and pull to refresh. We also published our first Bill of Materials (BOM) to simplify the process of adding Compose library versions to your Gradle dependencies. Check out the&nbsp;<a href=\"https://android-developers.googleblog.com/2022/10/whats-new-in-jetpack-compose.html\" target=\"_blank\">What’s New in Jetpack Compose</a> blog post to learn more.</div>\n<p><br /></p>\n<h3>Wear Tiles Material Library</h3>\n<p>Tiles for Wear OS give users glanceable access to information and actions. To help you create tiles, we launched the Tiles Material library, which includes built-in support for Material Design for Wear OS.</p>\n<p>The included components are:</p>\n\n        <p style=\"text-align: left;\"></p><ul style=\"text-align: left;\"><li><a href=\"https://developer.android.com/reference/androidx/wear/tiles/material/Button\" target=\"_blank\">Button</a> - a clickable, circular-shaped object, with either icon, text or image with 3 predefined sizes.</li><li><a href=\"https://developer.android.com/reference/androidx/wear/tiles/material/Chip\" target=\"_blank\">Chip</a> - a clickable, stadium-shaped object that can contain an icon, primary and secondary labels, and has fixed height and customizable width.</li><li><a href=\"https://developer.android.com/reference/androidx/wear/tiles/material/CompactChip\" target=\"_blank\">CompactChip</a> &amp;&nbsp;<a href=\"https://developer.android.com/reference/androidx/wear/tiles/material/TitleChip\" target=\"_blank\">TitleChip</a> - two variations of the standard Chip that have smaller and larger heights, respectively, and can contain one line of text.</li><li><a href=\"https://developer.android.com/reference/androidx/wear/tiles/material/CircularProgressIndicator\" target=\"_blank\">CircularProgressIndicator</a> - a colored arc around the edge of the screen with the given start and end angles, which can describe a full or partial circle with the full progress arc behind it.</li><li><a href=\"https://developer.android.com/reference/androidx/wear/tiles/material/Text\" target=\"_blank\">Text</a> - a text element which uses the recommended Wear Material typography styles.</li></ul><p></p><div><table align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: center;\"><tbody><tr><td style=\"text-align: center;\"><center><img alt=\"common tile components. a round icon with a pencil labelled 'button'. a full width rectangle with rounded corners and text labelled 'chip'. similar components, one larger and one smaller, labelled 'title chip' and 'compact chip' respectively. a circle path filled 75% clockwise labelled 'circular progress indicator' and finally text labelled 'text with recommended typography pre-set'\" border=\"0\" data-original-height=\"1504\" data-original-width=\"720\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEj-gKpK28YmUhVJ7UMldu2hdOmIQysunbkBlGCGChfkzV2PDz0M_lxQBU-xxyw-g17hIcXak_JrFW206C7xDERI7fOxvBPt6AD3ym1kFow6NQsxwZ3g8RiIw7JH4EWMLP4_LbgZPAT2lCSkdYkN8YP2dNpIVnJ0rBATT4VsZLoyo7AwDTC-lM0_c9E3/s1600/image3.png\" style=\"width: 100%;\" td=\"\" /></center></td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\"><i></i></td></tr></tbody></table></div>\n\n<p>In addition to components, there are several recommended tile layouts within Material guidelines.&nbsp;Read more about Wear OS Tiles Material Library in this&nbsp;<a href=\"https://android-developers.googleblog.com/2022/08/wear-os-tiles-material-library-build-tiles-fast.html\" target=\"_blank\">blog</a>.</p>\n<p>&nbsp;</p>\n<h3>Add Splash Screen to more devices</h3>\n<p>The core&nbsp;<a href=\"https://developer.android.com/jetpack/androidx/releases/core#core-splashscreen-1.0.0\" target=\"_blank\">SplashScreen</a> library brings the new Android 12 splash screen to all devices from API 23. Using the splash screen library, your application doesn't need any custom SplashScreen Activity and leverages the right APIs for a fast launch of your application. To use it, simply follow the steps outlined in our&nbsp;<a href=\"https://developer.android.com/guide/topics/ui/splash-screen/migrate#migrate_your_splash_screen_implementation\" target=\"_blank\">guide</a>. For more information about the Android 12 splash screen, visit the&nbsp;<a href=\"https://developer.android.com/guide/topics/ui/splash-screen\" target=\"_blank\">official documentation</a>.</p>\n<p>&nbsp;</p>\n<h2><u>Other key updates</u></h2>\n<p style=\"text-align: left;\"><br /></p><h3>Camera&nbsp;</h3>\n<p>The&nbsp;<a href=\"https://developer.android.com/jetpack/androidx/releases/camera\" target=\"_blank\">CameraX</a> library makes it easier to add camera capabilities to your app. In 1.2.0-beta01, a&nbsp;new library camera-mlkit-vision was added. It enables an easy integration of CameraX with many MLKit features, including barcode scanning, face detection, text detection, etc. You can find the sample code&nbsp;<a href=\"https://github.com/androidx/androidx/blob/androidx-main/camera/integration-tests/viewtestapp/src/main/java/androidx/camera/integration/view/MlKitFragment.kt\" target=\"_blank\">here</a>. We also added a new experimental&nbsp;<a href=\"https://developer.android.com/reference/androidx/camera/core/ImageCapture#CAPTURE_MODE_ZERO_SHUTTER_LAG\" target=\"_blank\">Zero-Shutter Lag API</a> which optimizes capture pipeline to have better latency while keeping good image quality.&nbsp;</p>\n<p><br /></p>\n<h3>Annotation</h3>\n<div style=\"text-align: left;\">The&nbsp;<a href=\"https://developer.android.com/jetpack/androidx/releases/annotation\" target=\"_blank\">Annotation</a> library exposes metadata that helps tools and other developers understand your app's code. It provides familiar annotations like @NonNull that pair with lint checks to improve the correctness and usability of your code.</div>\n<p>Annotation 1.5 stable release has been fully migrated to Kotlin sources, resulting in support for Kotlin-specific target use sites and other Kotlin-compatible annotation features.</p>\n<p><br /></p>\n<h3>Kotlin Multiplatform</h3>\n<p>We have been experimenting with Kotlin Multiplatform Mobile from Jetbrains to enable code sharing across platforms. We have experimental previews of the&nbsp;<a href=\"https://developer.android.com/jetpack/androidx/releases/collection\" target=\"_blank\">Collections</a> and&nbsp;<a href=\"https://developer.android.com/topic/libraries/architecture/datastore\" target=\"_blank\">DataStore</a> libraries for apps targeting Android and iOS and we would like your feedback! Read more&nbsp;<a href=\"https://android-developers.googleblog.com/2022/10/announcing-experimental-preview-of-jetpack-multiplatform-libraries.html\" target=\"_blank\">here</a>.&nbsp;</p>\n<h2>\n    <hr />\n</h2>\n<p><br /></p>\n<p>This was a brief tour of all the key changes in Jetpack over the past few months. For more details on each Jetpack library, check out the AndroidX&nbsp;<a href=\"https://developer.android.com/jetpack/androidx/versions\" target=\"_blank\">release notes</a>, quickly find relevant libraries with the&nbsp;<a href=\"https://developer.android.com/jetpack/androidx/explorer?case=popular\" target=\"_blank\">API picker</a> and watch the&nbsp;<a href=\"https://goo.gle/ADS-MAD\" target=\"_blank\">Google ADS talks</a> for additional highlights.</p>\n\n<p></p>",
  "link": [
    "",
    "",
    ""
  ],
  "author": {
    "name": "Android Developers",
    "uri": "http://www.blogger.com/profile/08588467489110681140",
    "email": "noreply@blogger.com",
    "gd:image": ""
  },
  "media:thumbnail": ""
}