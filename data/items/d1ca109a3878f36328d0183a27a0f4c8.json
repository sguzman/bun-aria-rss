{
  "title": "Operation Ordering in MatLab",
  "link": "",
  "updated": "2013-02-26T00:00:00+00:00",
  "id": "https://mrocklin.github.io/blog/work/2013/02/26/MatLabOrdering",
  "content": "<p>Consider the following MatLab code</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>&gt;&gt; x = ones(10000, 1);\n&gt;&gt; tic; (x*x')*x; toc\nElapsed time is 0.337711 seconds.\n&gt;&gt; tic; x*(x'*x); toc\nElapsed time is 0.000956 seconds.\n</code></pre></div></div>\n\n<p>Depending on where the parentheses are placed one either creates <code class=\"language-plaintext highlighter-rouge\">x*x'</code>, a large 10000 by 10000 rank 1 matrix, or <code class=\"language-plaintext highlighter-rouge\">x'*x</code>, a 1 by 1 rank 1 matrix.  Either way the result is the same.  The difference in runtimes however spans several orders of magnitude.</p>\n\n<p>Graphically the operation looks something like the following</p>\n\n<p><img src=\"https://mrocklin.github.io/blog/images/xxtrans.png\" width=\"50%\" align=\"right\" /></p>\n\n<p>This is a common lesson that the order of matrix operations matters.  Do computers know this lesson?  It is difficult to implement this optimization in compiler for C or Fortran.  They would have to inspect sets of nested for loopsto realize the larger picture.  A hosted library like <code class=\"language-plaintext highlighter-rouge\">numpy</code> is also unlikely to make this optimization; operation ordering is determined by the Python language.  With MatLab it is uncertain.  MatLab is interpreted and so generally doesnâ€™t compile.  However it inspect each line statement before execution.</p>\n\n<p>Does Matlab choose wisely?</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>&gt;&gt; tic; x*x'*x; toc\nElapsed time is 0.317499 seconds.\n</code></pre></div></div>\n\n<p>no.</p>"
}