{
  "title": "Dadmfers Background Mfers Contract Review",
  "link": "https://streamhacker.com/2022/03/30/dadmfers-background-mfers-contract-review/#utm_source=feed&#038;utm_medium=feed&#038;utm_campaign=feed",
  "comments": "https://streamhacker.com/2022/03/30/dadmfers-background-mfers-contract-review/#respond",
  "dc:creator": "Jacob",
  "pubDate": "Thu, 31 Mar 2022 03:43:01 +0000",
  "category": [
    "contracts",
    "erc721",
    "eth",
    "mfers",
    "mint",
    "nft",
    "slither",
    "solidity",
    "token"
  ],
  "guid": "https://streamhacker.com/?p=2181",
  "description": "Contract review of BackgroundMfers, a new project from the creators of dadmfers, the first mfers derivative NFT.",
  "content:encoded": "\n<p><a href=\"https://dadmfers.com/\">dadmfers</a> is the first <a href=\"https://mirror.xyz/sartoshi.eth/QukjtL1076-1SEoNJuqyc-x4Ut2v8_TocKkszo-S_nU\">mfers</a> derivative project, and they just recently released <a href=\"https://dadmfers.com/\">BackgroundMfers</a>, a series of dadmfers inspired banner images. This required a new contract, with some additional complexity because of the number of mint options. The contract provides 5 separate minting functions for getting your background mfers NFTs:</p>\n\n\n\n<ol><li>Public mint for anyone</li><li>Mfer mint, for anyone that has mfers, at a reduced price</li><li>Whitelist mint, free anyone on their list</li><li>Dadmfers v1 mint for free</li><li>Dadmfers v2 mint for free</li></ol>\n\n\n\n<p>Why some many minting options? It does add complexity, but there are good reasons, such as more favorable pricing for mfers holders, or free mints for dadmfers holders, while still allowing anyone to participate with the public option. There are two dadmfers options, v1 & v2, because the original <a href=\"https://opensea.io/collection/dadmfers-experiment\">v1 contract for dadmfers</a> had very high gas fees. This turned a lot of people away, but the team quickly responded with a much more gas optimized contract. However, since the original contract had already been deployed, a new one was needed, because smart contracts cannot be upgraded once deployed (unless you use a proxy contract). So a <a href=\"https://opensea.io/collection/dadmfers\">v2 gas optimized contract</a> was deployed, and everyone that minted on v1 was given free airdrops for v2. Ok, enough backstory, lets look at the <a href=\"https://etherscan.io/address/0xc0a5393aA132DE6a66369Fe6e490cAc768991Ea5#code\">background mfers contract code</a>, available on etherscan.</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-solidity\">  function mintPublic(uint256 _mintAmount) public payable mintCompliance(_mintAmount) {\n    require(msg.value >= publicCost * _mintAmount, \"Not enough eth sent!\");\n    require(_mintAmount < maxMintAmountPlusOne, \"trying to mint too many!\");\n    _mintLoop(msg.sender, _mintAmount);\n  }</code></pre>\n\n\n\n<h2>Public Mint</h2>\n\n\n\n<p>This <code>mintPublic</code> function is very simple at first glance, but has a lot of dependencies to go into. It takes a <code>_mintAmount</code>, checks it with <code>mintCompliance</code>, then does 2 more checks before minting. Let&#8217;s look at <code>mintCompliance</code> since it&#8217;s also used by the other mint functions.</p>\n\n\n\n<h3>mintCompliance</h3>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-solidity\">  modifier mintCompliance(uint256 _mintAmount) {\n    require(_mintAmount > 0, \"Invalid mint amount!\");\n    require(supply.current() + _mintAmount < maxSupplyPlusOne, \"Max supply exceeded!\");\n    require (saleIsActive, \"Public sale inactive\");\n    _;\n  }</code></pre>\n\n\n\n<p>Here we can see 3 requirements:</p>\n\n\n\n<ol><li><code>_mintAmount</code> must be a positive integer</li><li>You can&#8217;t mint more than is available</li><li>Minting must be active</li></ol>\n\n\n\n<p>These have some implications:</p>\n\n\n\n<ul><li>There is a max supply</li><li>Minting can be de-activated or re-activated</li></ul>\n\n\n\n<p>The max supply is defined by <code>uint256 public maxSupplyPlusOne = 10_001</code> at the top of the contract. However, there&#8217;s also the following function at the bottom of the contract, which allows the contract owner to lower the supply.</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-solidity\">  function lowerSupply(uint256 newSupply) public onlyOwner {\n      if (newSupply < maxSupplyPlusOne) {\n          maxSupplyPlusOne = newSupply;\n      }\n  }</code></pre>\n\n\n\n<p>Supply lowering can be a good thing to do if the collection doesn&#8217;t mint out in a certain period of time. By lowering the supply, you can preserve the current rarities and NFT values, potentially making the existing NFTs more valuable. Dadmfers v2 also lowered the supply after some time passed and it hadn&#8217;t sold out.</p>\n\n\n\n<p>The contract owner can also disable or enable minting with the <code>setSale</code> function, which sets the <code>salesIsActive</code> variable.</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-solidity\">  function setSale(bool newState) public onlyOwner {\n    saleIsActive = newState;\n  }</code></pre>\n\n\n\n<h3>_mintLoop</h3>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-solidity\">  function _mintLoop(address _receiver, uint256 _mintAmount) internal {\n    for (uint256 i = 0; i < _mintAmount; i++) {\n      supply.increment();\n      _safeMint(_receiver, supply.current());\n    }\n  }</code></pre>\n\n\n\n<p>This function is called with <code>msg.sender</code> (i.e. your wallet address) and the amount you want to mint. It does a simple for loop to increment the used supply, then mints a token. <code>_safeMint</code> is a standard function in OpenZeppelin&#8217;s ERC721, so we won&#8217;t go into that here.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://etherscan.io/tx/0xcfbd9d662aa13aabb2cb68c861e5a3c1e3db8c8f7f2f162d953b676cbfd740ab\"><img decoding=\"async\" loading=\"lazy\" width=\"474\" height=\"208\" src=\"https://i0.wp.com/streamhacker.com/wp-content/uploads/2022/03/Screen-Shot-2022-03-29-at-9.14.50-PM.png?resize=474%2C208&#038;ssl=1\" alt=\"\" class=\"wp-image-2207\" srcset=\"https://i0.wp.com/streamhacker.com/wp-content/uploads/2022/03/Screen-Shot-2022-03-29-at-9.14.50-PM.png?resize=1024%2C450&ssl=1 1024w, https://i0.wp.com/streamhacker.com/wp-content/uploads/2022/03/Screen-Shot-2022-03-29-at-9.14.50-PM.png?resize=300%2C132&ssl=1 300w, https://i0.wp.com/streamhacker.com/wp-content/uploads/2022/03/Screen-Shot-2022-03-29-at-9.14.50-PM.png?resize=768%2C338&ssl=1 768w, https://i0.wp.com/streamhacker.com/wp-content/uploads/2022/03/Screen-Shot-2022-03-29-at-9.14.50-PM.png?resize=1536%2C676&ssl=1 1536w, https://i0.wp.com/streamhacker.com/wp-content/uploads/2022/03/Screen-Shot-2022-03-29-at-9.14.50-PM.png?w=1914&ssl=1 1914w, https://i0.wp.com/streamhacker.com/wp-content/uploads/2022/03/Screen-Shot-2022-03-29-at-9.14.50-PM.png?w=948&ssl=1 948w, https://i0.wp.com/streamhacker.com/wp-content/uploads/2022/03/Screen-Shot-2022-03-29-at-9.14.50-PM.png?w=1422&ssl=1 1422w\" sizes=\"(max-width: 474px) 100vw, 474px\" data-recalc-dims=\"1\" /></a><figcaption>Here&#8217;s a sample transaction for <a href=\"https://etherscan.io/tx/0xcfbd9d662aa13aabb2cb68c861e5a3c1e3db8c8f7f2f162d953b676cbfd740ab\">mintPublic</a>, which transfers 1 token for 0.0169 Ether.</figcaption></figure>\n\n\n\n<h2>Mfers Mint</h2>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-solidity\">  function mintWithMfers(uint256 [] memory nftIds) public payable mintCompliance(nftIds.length) {\n    require(msg.value >= mferCost * nftIds.length, \"Not enough eth sent!\");\n    \n    for (uint256 i = 0; i < nftIds.length; i++) {\n      require(mfersContract.ownerOf(nftIds[i]) == msg.sender, \"You must own all the mfers!\");\n      require(usedMferIds[nftIds[i]] == false, \"One of the mfer IDs has already been used!\");\n      supply.increment();\n      _safeMint(msg.sender, supply.current());\n      usedMferIds[nftIds[i]] = true;\n    }\n  }</code></pre>\n\n\n\n<p>For this minting function, it expects a list of mfers tokens. These come from the selectors on the website. After checking <code>mintCompliance</code> and amount of eth sent, it loops through the tokens. If any token is not owned by you, or has already been used to mint, this function will fail. But if you are the owner of all the mfers tokens, it will do a mint for each one, and record the mfers token as used.</p>\n\n\n\n<p>If you&#8217;re wondering why you have to check token ownership in the contract, when it&#8217;s already done on the website, that&#8217;s because smart contracts can be called directly, without going through the website. For example, you could go to the <a href=\"https://etherscan.io/address/0xc0a5393aA132DE6a66369Fe6e490cAc768991Ea5#writeContract\">Write Contract</a> section on etherscan, find the <code>mintWithMfers</code> function, and enter values directly there. This is something that all smart contract developers need to be aware of &#8211; you can&#8217;t assume people will only interact with the contract through your website.</p>\n\n\n\n<p>Let&#8217;s dig into <code>require(mfersContract.ownerOf(nftIds[i]) == msg.sender</code> a bit more. <code>mfersContract</code> is defined at the top of the contract as <code>nftInterface mfersContract = nftInterface(0x79FCDEF22feeD20eDDacbB2587640e45491b757f);</code>.</p>\n\n\n\n<p>So what&#8217;s <code>nftInterface</code>?</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-solidity\">interface nftInterface {\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n    function balanceOf(address owner) external view returns (uint256);\n    function totalSupply() external view returns (uint256);\n}</code></pre>\n\n\n\n<p>This is defined outside the contract, and provides a way to interact with another contract, by defining some functions that the contract should support. So <code>mfersContract</code> is an <a href=\"https://solidity-by-example.org/interface/\">interface</a> to the smart contract behind mfers (which you can see at this address on etherscan: <a href=\"https://etherscan.io/address/0x79FCDEF22feeD20eDDacbB2587640e45491b757f#code\">0x79FCDEF22feeD20eDDacbB2587640e45491b757f</a>), and the background mfers contract is calling the mfers contract to check token ownership. These 3 functions (<code>ownerOf</code>, <code>balanceOf</code>, and <code>totalSupply</code>) are all standard ERC721 functions.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://etherscan.io/tx/0xd5aae5428776350af68f3388ba211e505defef809891fc9749de9e4127c0712c\"><img decoding=\"async\" loading=\"lazy\" width=\"474\" height=\"209\" src=\"https://i0.wp.com/streamhacker.com/wp-content/uploads/2022/03/Screen-Shot-2022-03-29-at-9.18.59-PM.png?resize=474%2C209&#038;ssl=1\" alt=\"\" class=\"wp-image-2211\" srcset=\"https://i0.wp.com/streamhacker.com/wp-content/uploads/2022/03/Screen-Shot-2022-03-29-at-9.18.59-PM.png?resize=1024%2C452&ssl=1 1024w, https://i0.wp.com/streamhacker.com/wp-content/uploads/2022/03/Screen-Shot-2022-03-29-at-9.18.59-PM.png?resize=300%2C132&ssl=1 300w, https://i0.wp.com/streamhacker.com/wp-content/uploads/2022/03/Screen-Shot-2022-03-29-at-9.18.59-PM.png?resize=768%2C339&ssl=1 768w, https://i0.wp.com/streamhacker.com/wp-content/uploads/2022/03/Screen-Shot-2022-03-29-at-9.18.59-PM.png?resize=1536%2C678&ssl=1 1536w, https://i0.wp.com/streamhacker.com/wp-content/uploads/2022/03/Screen-Shot-2022-03-29-at-9.18.59-PM.png?w=1922&ssl=1 1922w, https://i0.wp.com/streamhacker.com/wp-content/uploads/2022/03/Screen-Shot-2022-03-29-at-9.18.59-PM.png?w=948&ssl=1 948w, https://i0.wp.com/streamhacker.com/wp-content/uploads/2022/03/Screen-Shot-2022-03-29-at-9.18.59-PM.png?w=1422&ssl=1 1422w\" sizes=\"(max-width: 474px) 100vw, 474px\" data-recalc-dims=\"1\" /></a><figcaption>Here&#8217;s a sample transaction for <a href=\"https://etherscan.io/tx/0xd5aae5428776350af68f3388ba211e505defef809891fc9749de9e4127c0712c\">mintWithMfers</a>, which transfers 1 token for 0.0069 Ether.</figcaption></figure>\n\n\n\n<h2>Dadmfer v1 & v2 Mint</h2>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-solidity\">  function mintWithDadmfersV1(uint256 [] memory nftIds) public mintCompliance(nftIds.length) {\n    for (uint256 i = 0; i < nftIds.length; i++) {\n      require(dadmfersV1Contract.ownerOf(nftIds[i]) == msg.sender, \"You must own all the dadmfer V1s!\");\n      require(usedV1Ids[nftIds[i]] == false, \"One of the dadmfer IDs has already been used!\");\n      supply.increment();\n      _safeMint(msg.sender, supply.current());\n      usedV1Ids[nftIds[i]] = true;\n    }\n  }\n\n  function mintWithDadmfersV2(uint256 [] memory nftIds) public mintCompliance(nftIds.length) {\n    for (uint256 i = 0; i < nftIds.length; i++) {\n      require(dadmfersV2Contract.ownerOf(nftIds[i]) == msg.sender, \"You must own all the dadmfer V2s!\");\n      require(usedV2Ids[nftIds[i]] == false, \"One of the dadmfer IDs has already been used!\");\n      supply.increment();\n      _safeMint(msg.sender, supply.current());\n      usedV2Ids[nftIds[i]] = true;\n    }\n  }</code></pre>\n\n\n\n<p>Both of these functions are very similar to each other and the <code>mintWithMfers</code> function. The main difference is <code>dadmfersV1Contract</code> vs <code>dadmfersV2Contract</code>. Just like with <code>mfersContract</code>, these are interfaces to the dadmfers contracts. The difference with <code>mintWithMfers</code> is that the initial requirement check for eth sent is gone, because these are free mints.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://etherscan.io/tx/0x7fe07587997fbd68de72d2161273c288748338c88bc05c1b4731f7b79d643690\"><img decoding=\"async\" loading=\"lazy\" width=\"474\" height=\"293\" src=\"https://i0.wp.com/streamhacker.com/wp-content/uploads/2022/03/Screen-Shot-2022-03-29-at-9.20.36-PM.png?resize=474%2C293&#038;ssl=1\" alt=\"\" class=\"wp-image-2212\" srcset=\"https://i0.wp.com/streamhacker.com/wp-content/uploads/2022/03/Screen-Shot-2022-03-29-at-9.20.36-PM.png?resize=1024%2C632&ssl=1 1024w, https://i0.wp.com/streamhacker.com/wp-content/uploads/2022/03/Screen-Shot-2022-03-29-at-9.20.36-PM.png?resize=300%2C185&ssl=1 300w, https://i0.wp.com/streamhacker.com/wp-content/uploads/2022/03/Screen-Shot-2022-03-29-at-9.20.36-PM.png?resize=768%2C474&ssl=1 768w, https://i0.wp.com/streamhacker.com/wp-content/uploads/2022/03/Screen-Shot-2022-03-29-at-9.20.36-PM.png?resize=1536%2C948&ssl=1 1536w, https://i0.wp.com/streamhacker.com/wp-content/uploads/2022/03/Screen-Shot-2022-03-29-at-9.20.36-PM.png?w=1886&ssl=1 1886w, https://i0.wp.com/streamhacker.com/wp-content/uploads/2022/03/Screen-Shot-2022-03-29-at-9.20.36-PM.png?w=948&ssl=1 948w, https://i0.wp.com/streamhacker.com/wp-content/uploads/2022/03/Screen-Shot-2022-03-29-at-9.20.36-PM.png?w=1422&ssl=1 1422w\" sizes=\"(max-width: 474px) 100vw, 474px\" data-recalc-dims=\"1\" /></a><figcaption>Here&#8217;s an example transaction for <a href=\"https://etherscan.io/tx/0x7fe07587997fbd68de72d2161273c288748338c88bc05c1b4731f7b79d643690\">mintWithDadmfersV2</a>, getting 3 tokens for 0 Ether.</figcaption></figure>\n\n\n\n<h2>Slither Analysis</h2>\n\n\n\n<p><a href=\"https://github.com/crytic/slither\">Slither</a> is a python tool for static analysis of Solidity contracts. You can use it to get a quick summary of the contract code, and then look for any deeper issues.</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-bash\">$ slither 0xc0a5393aA132DE6a66369Fe6e490cAc768991Ea5 --print human-summary</code></pre>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://i0.wp.com/streamhacker.com/wp-content/uploads/2022/03/Screen-Shot-2022-03-27-at-10.11.13-PM.png?ssl=1\"><img decoding=\"async\" loading=\"lazy\" width=\"474\" height=\"363\" src=\"https://i0.wp.com/streamhacker.com/wp-content/uploads/2022/03/Screen-Shot-2022-03-27-at-10.11.13-PM.png?resize=474%2C363&#038;ssl=1\" alt=\"\" class=\"wp-image-2190\" srcset=\"https://i0.wp.com/streamhacker.com/wp-content/uploads/2022/03/Screen-Shot-2022-03-27-at-10.11.13-PM.png?resize=1024%2C785&ssl=1 1024w, https://i0.wp.com/streamhacker.com/wp-content/uploads/2022/03/Screen-Shot-2022-03-27-at-10.11.13-PM.png?resize=300%2C230&ssl=1 300w, https://i0.wp.com/streamhacker.com/wp-content/uploads/2022/03/Screen-Shot-2022-03-27-at-10.11.13-PM.png?resize=768%2C588&ssl=1 768w, https://i0.wp.com/streamhacker.com/wp-content/uploads/2022/03/Screen-Shot-2022-03-27-at-10.11.13-PM.png?w=1394&ssl=1 1394w, https://i0.wp.com/streamhacker.com/wp-content/uploads/2022/03/Screen-Shot-2022-03-27-at-10.11.13-PM.png?w=948&ssl=1 948w\" sizes=\"(max-width: 474px) 100vw, 474px\" data-recalc-dims=\"1\" /></a></figure>\n\n\n\n<p>This fits with what we&#8217;ve seen above, the BackgroundMfers contract is complex code for minting ERC721 NFTs. The 11 <strong>medium issues</strong> are very technical to describe, but reduce down to &#8220;not a problem&#8221;. The contract does not implement <code>onERC721Received</code>, so there&#8217;s no real <a href=\"https://docs.soliditylang.org/en/v0.4.21/security-considerations.html#re-entrancy\">reentrency</a> concerns, and the other issues look more like syntax & style choices in <code>foreignNftsForWallet</code>, which is a read-only function that is not used for minting.</p>\n\n\n\n<h2>Conclusion</h2>\n\n\n\n<p>While somewhat complicated, the <a href=\"https://etherscan.io/address/0xc0a5393aA132DE6a66369Fe6e490cAc768991Ea5#code\">background mfers contract</a> looks quite safe for minting, and appears to be gas optimized. It allows batch minting to receive multiple tokens, which usually saves in gas fees. And there&#8217;s nothing in the minting functions that seems unnecessary. If you have any questions about the project, you can ask in the <a href=\"https://discord.gg/CTJXEXNuZN\">dadmfers discord</a>; everyone is very friendly. As of publish time, they have not revealed the images yet, but when they do, you&#8217;ll be able to see the <a href=\"https://looksrare.org/collections/0xc0a5393aA132DE6a66369Fe6e490cAc768991Ea5\">background mfers on looksrare</a> or <a href=\"https://opensea.io/collection/background-mfers\">opensea</a>.</p>\n\n\n\n<p>I didn&#8217;t cover the <code>whitelistMint</code> because most people won&#8217;t be using that one. There&#8217;s also a complicated looking function <code>foreignNftsForWallet</code> that returns all the token IDs owned by a wallet, for a given contract. You can test this for yourself in the <a href=\"https://etherscan.io/address/0xc0a5393aA132DE6a66369Fe6e490cAc768991Ea5#readContract\">Read Contract</a> section on etherscan, if you know a wallet address that owns one or more of mfers, dadmfers v1 or v2. For example, the address <code>0x4873f1768e1833fa6fb720b183715c7f57ecf953</code> is the wallet of the contract creator, so if you enter that and <code>input 1</code>, you can see it owns token 908 for dadmfers v2. Use <code>input 0</code> for dadmfers v1 or <code>input 2</code> for mfers.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><a href=\"https://i0.wp.com/streamhacker.com/wp-content/uploads/2022/03/Screen-Shot-2022-03-29-at-9.25.46-PM.png?ssl=1\"><img decoding=\"async\" loading=\"lazy\" width=\"474\" height=\"482\" src=\"https://i0.wp.com/streamhacker.com/wp-content/uploads/2022/03/Screen-Shot-2022-03-29-at-9.25.46-PM.png?resize=474%2C482&#038;ssl=1\" alt=\"\" class=\"wp-image-2215\" srcset=\"https://i0.wp.com/streamhacker.com/wp-content/uploads/2022/03/Screen-Shot-2022-03-29-at-9.25.46-PM.png?w=846&ssl=1 846w, https://i0.wp.com/streamhacker.com/wp-content/uploads/2022/03/Screen-Shot-2022-03-29-at-9.25.46-PM.png?resize=295%2C300&ssl=1 295w, https://i0.wp.com/streamhacker.com/wp-content/uploads/2022/03/Screen-Shot-2022-03-29-at-9.25.46-PM.png?resize=768%2C781&ssl=1 768w\" sizes=\"(max-width: 474px) 100vw, 474px\" data-recalc-dims=\"1\" /></a></figure>\n",
  "wfw:commentRss": "https://streamhacker.com/2022/03/30/dadmfers-background-mfers-contract-review/feed/",
  "slash:comments": 0,
  "post-id": 2181
}