{
  "title": "Spying on instance methods with Python's mock module",
  "link": "",
  "published": "2015-10-29T00:00:00-07:00",
  "updated": "2015-10-29T00:00:00-07:00",
  "author": {
    "name": "Wes McKinney"
  },
  "id": "tag:wesmckinney.com,2015-10-29:/blog/spying-with-python-mocks/",
  "summary": "<p>Python's <code>mock</code> module (<code>unittest.mock</code> in Python 3.3 and higher) allows you to\nobserve parameters passed to functions.</p>",
  "content": "<p>Python's <code>mock</code> module (<code>unittest.mock</code> in Python 3.3 and higher) allows you to\nobserve parameters passed to functions.</p>\n\n\n<p>I'm a little slow, so I had to dig around to figure out how to do this.</p>\n<p>Let's say you have a class:</p>\n<div class=\"github\"><pre><span></span><code><span class=\"k\">class</span> <span class=\"nc\">ProductionClass</span><span class=\"p\">:</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">user_api</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">b</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_internal_api_one</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_internal_api_two</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_internal_api_one</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Do something necessary with a</span>\n        <span class=\"k\">pass</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_internal_api_two</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Do something necessary with a</span>\n        <span class=\"k\">pass</span>\n</code></pre></div>\n\n<p>Now, let's suppose you are testing the functionality of <code>ProductionClass</code>, but\nyou want to observe the parameters passed to your internal methods but still\ninvoke those internal methods. I didn't find a lot of examples of this from my\nGoogle searches, so here is the solution using <code>unittest.mock</code> (or <code>mock</code> from\nPyPI if you're on Legacy Python 2.x):</p>\n<div class=\"github\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">unittest.mock</span> <span class=\"k\">as</span> <span class=\"nn\">mock</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">test_user_api</span><span class=\"p\">():</span>\n    <span class=\"n\">inst</span> <span class=\"o\">=</span> <span class=\"n\">ProductionClass</span><span class=\"p\">()</span>\n\n    <span class=\"k\">with</span> <span class=\"n\">mock</span><span class=\"o\">.</span><span class=\"n\">patch</span><span class=\"o\">.</span><span class=\"n\">object</span><span class=\"p\">(</span><span class=\"n\">inst</span><span class=\"p\">,</span> <span class=\"s1\">&#39;_internal_api_one&#39;</span><span class=\"p\">,</span>\n                           <span class=\"n\">wraps</span><span class=\"o\">=</span><span class=\"n\">inst</span><span class=\"o\">.</span><span class=\"n\">_internal_api_one</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">monkey</span><span class=\"p\">:</span>\n         <span class=\"n\">inst</span><span class=\"o\">.</span><span class=\"n\">user_api</span><span class=\"p\">(</span><span class=\"s1\">&#39;foo&#39;</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n         <span class=\"n\">monkey</span><span class=\"o\">.</span><span class=\"n\">assert_called_with</span><span class=\"p\">(</span><span class=\"s1\">&#39;foo&#39;</span><span class=\"p\">)</span>\n\n    <span class=\"k\">with</span> <span class=\"n\">mock</span><span class=\"o\">.</span><span class=\"n\">patch</span><span class=\"o\">.</span><span class=\"n\">object</span><span class=\"p\">(</span><span class=\"n\">inst</span><span class=\"p\">,</span> <span class=\"s1\">&#39;_internal_api_two&#39;</span><span class=\"p\">,</span>\n                           <span class=\"n\">wraps</span><span class=\"o\">=</span><span class=\"n\">inst</span><span class=\"o\">.</span><span class=\"n\">_internal_api_two</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">monkey</span><span class=\"p\">:</span>\n         <span class=\"n\">inst</span><span class=\"o\">.</span><span class=\"n\">user_api</span><span class=\"p\">(</span><span class=\"s1\">&#39;bar&#39;</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n         <span class=\"n\">monkey</span><span class=\"o\">.</span><span class=\"n\">assert_called_with</span><span class=\"p\">(</span><span class=\"s1\">&#39;bar&#39;</span><span class=\"p\">)</span>\n</code></pre></div>\n\n<p>Happy hunting.</p>"
}