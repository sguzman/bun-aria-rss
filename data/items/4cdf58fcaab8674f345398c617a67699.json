{
  "title": "Quantum Python: Animating the Schrodinger Equation",
  "link": "",
  "published": "2012-09-05T20:12:00-07:00",
  "updated": "2012-09-05T20:12:00-07:00",
  "author": {
    "name": "Jake VanderPlas"
  },
  "id": "tag:jakevdp.github.io,2012-09-05:blog/2012/09/05/quantum-python/",
  "summary": "<p><em>Update: a reader contributed some improvements to the Python code presented\n below.  Please see the\n<a href=\"https://github.com/jakevdp/pySchrodinger\">pySchrodinger</a> github repository\nfor updated code</em></p>\n<p>In a <a href=\"/blog/2012/08/18/matplotlib-animation-tutorial/\">previous post</a>\nI explored the new animation capabilities of the latest\n<a href=\"http://matplotlib.sourceforge.net\">matplotlib</a> release.\nIt got me wondering whether it would be possible to simulate more complicated\nphysical systems in real time in python.  Quantum Mechanics was the first\nthing that came to mind.  It turns out that by mixing a bit of Physics\nknowledge with a bit of computing knowledge, it's quite straightforward\nto simulate and animate a simple quantum mechanical system with python.</p>\n<h2>The Schrodinger Equation</h2>\n<p>The dynamics of a one-dimensional quantum system are governed by the\ntime-dependent Schrodinger equation:</p>\n<p>$$\ni\\hbar\\frac{\\partial \\psi}{\\partial t}\n  = \\frac{-\\hbar^2}{2m} \\frac{\\partial^2 \\psi}{\\partial x^2} + V \\psi\n$$</p>",
  "category": [
    "",
    "",
    ""
  ]
}