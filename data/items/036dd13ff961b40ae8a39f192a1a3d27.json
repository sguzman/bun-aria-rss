{
  "title": "Streaming Log-sum-exp Computation",
  "link": "",
  "published": "2016-05-08T21:30:00+01:00",
  "updated": "2016-05-08T21:30:00+01:00",
  "author": {
    "name": "Sebastian Nowozin"
  },
  "id": "tag:www.nowozin.net,2016-05-08:/sebastian/blog/streaming-log-sum-exp-computation.html",
  "summary": "<p>A common numerical operation in statistical computing is to compute</p>\n<div class=\"math\">$$\\log \\sum_{i=1}^n \\exp x_i,$$</div>\n<p>where <span class=\"math\">\\(x_i \\in \\mathbb{R}\\)</span>, and <span class=\"math\">\\(n\\)</span> is potentially very large.</p>\n<p>We can implement the above computation by exponentiating each number, then\nsumming â€¦</p>",
  "content": "<p>A common numerical operation in statistical computing is to compute</p>\n<div class=\"math\">$$\\log \\sum_{i=1}^n \\exp x_i,$$</div>\n<p>where <span class=\"math\">\\(x_i \\in \\mathbb{R}\\)</span>, and <span class=\"math\">\\(n\\)</span> is potentially very large.</p>\n<p>We can implement the above computation by exponentiating each number, then\nsumming them, then taking a logarithm as follows (written in\n<a href=\"http://julialang.org/\">Julia</a>).</p>\n<div class=\"highlight\"><pre><span></span><code><span class=\"n\">logsumexp_naive</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">log</span><span class=\"p\">(</span><span class=\"n\">sum</span><span class=\"p\">(</span><span class=\"n\">exp</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">)))</span>\n</code></pre></div>\n\n<p>When the above function returns a finite number then it is numerically\naccurate.  However, the above computation is not robust if one of the elements is very large (say, larger than 710 for double precision IEEE floating point).\nThen <span class=\"math\">\\(\\exp(x_i)\\)</span> returns a floating point infinity and the entire computation\nreturns a floating point infinity as well.</p>\n<h2>Standard Batch Solution</h2>\n<p>The standard solution to this problem is to use the mathematical identity</p>\n<div class=\"math\">$$\\log \\sum_{i=1}^n \\exp x_i = \\alpha + \\log \\sum_{i=1}^n \\exp (x_i - \\alpha),$$</div>\n<p>which holds for any <span class=\"math\">\\(\\alpha \\in \\mathbb{R}\\)</span>.\nBy selecting <span class=\"math\">\\(\\alpha = \\max_{i=1,\\dots,n} x_i\\)</span> no argument to the\n<span class=\"math\">\\(\\exp\\)</span>-function will be larger than zero and the above naive computation can\nbe applied on the transformed numbers.\nThe code is as follows.</p>\n<div class=\"highlight\"><pre><span></span><code><span class=\"k\">function</span> <span class=\"n\">logsumexp_batch</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">)</span>\n    <span class=\"n\">alpha</span> <span class=\"o\">=</span> <span class=\"n\">maximum</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">)</span>  <span class=\"c\"># Find maximum value in X</span>\n    <span class=\"n\">log</span><span class=\"p\">(</span><span class=\"n\">sum</span><span class=\"p\">(</span><span class=\"n\">exp</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"o\">-</span><span class=\"n\">alpha</span><span class=\"p\">)))</span> <span class=\"o\">+</span> <span class=\"n\">alpha</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n\n<p>Code such as the above is used in almost all packages for performing\nstatistical computation and is described as the standard solution, see e.g.\n<a href=\"https://hips.seas.harvard.edu/blog/2013/01/09/computing-log-sum-exp/\">here</a>\nand <a href=\"https://en.wikipedia.org/wiki/LogSumExp\">here</a>.</p>\n<p>However, there are the following problems:</p>\n<ol>\n<li>It requires two scans over the data array, one to find the maximum, one to\n   compute the summation.  For modern systems and large input arrays the above\n   computation is memory-bandwidth limited so two memory scans mean twice the\n   runtime.</li>\n<li>It requires knowledge of the number of elements in the sum prior to\n   computation.</li>\n</ol>\n<h2>Streaming log-sum-exp Computation</h2>\n<p>The solution is to also compute the maximum element in a streaming manner and\nto correct a running estimate whenever a new maximum is found.\nI have not seen this solution elsewhere, but I hope you may find it useful.</p>\n<p>First, here is the code.</p>\n<div class=\"highlight\"><pre><span></span><code><span class=\"k\">function</span> <span class=\"n\">logsumexp_stream</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">)</span>\n    <span class=\"n\">alpha</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"nb\">Inf</span>\n    <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>\n    <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">X</span>\n        <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"o\">&lt;=</span> <span class=\"n\">alpha</span>\n            <span class=\"n\">r</span> <span class=\"o\">+=</span> <span class=\"n\">exp</span><span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">-</span> <span class=\"n\">alpha</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span>\n            <span class=\"n\">r</span> <span class=\"o\">*=</span> <span class=\"n\">exp</span><span class=\"p\">(</span><span class=\"n\">alpha</span> <span class=\"o\">-</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n            <span class=\"n\">r</span> <span class=\"o\">+=</span> <span class=\"mf\">1.0</span>\n            <span class=\"n\">alpha</span> <span class=\"o\">=</span> <span class=\"n\">x</span>\n        <span class=\"k\">end</span>\n    <span class=\"k\">end</span>\n    <span class=\"n\">log</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">alpha</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n\n<p>As you can see by glancing over the code, only one linear access over the\ninput is required and we do not need to know the number of elements.</p>\n<p>To understand how the code works, assume we maintain two quantities.\nThe first is the largest value seen after <span class=\"math\">\\(i\\)</span> elements,</p>\n<div class=\"math\">$$\\alpha_i := \\max_{j = 1,\\dots,i} x_i.$$</div>\n<p>The second is the accumulated sum so far with the current maximum subtracted,</p>\n<div class=\"math\">$$r_i := \\sum_{j=1}^i \\exp(x_j - \\alpha_i).$$</div>\n<p>Now when we visit a new element <span class=\"math\">\\(x_{i+1}\\)</span> there are two cases that can happen.\nIf <span class=\"math\">\\(x_{i+1} \\leq \\alpha_i\\)</span> then <span class=\"math\">\\(\\alpha_{i+1} = \\alpha_i\\)</span> and we simply update</p>\n<div class=\"math\">$$r_{i+1} = r_i + \\exp(x_{i+1} - \\alpha_{i+1}).$$</div>\n<p>However, if we see a new largest element, we can write <span class=\"math\">\\(r_i\\)</span> as</p>\n<div class=\"math\">$$r_i := \\sum_{j=1}^i \\exp(x_j - \\alpha_i) = \\exp(-\\alpha_i) \\sum_{j=1}^i \\exp(x_j).$$</div>\n<p>We correct this estimate in order to use the new maximum <span class=\"math\">\\(x_{i+1}\\)</span> and\ncancelling the old maximum <span class=\"math\">\\(\\alpha_i\\)</span>,</p>\n<div class=\"math\">$$r'_{i+1} = \\exp(\\alpha_i - x_{i+1}) \\, r_i.$$</div>\n<p>The factor is always smaller than one.\nThen we proceed to accumulate as normal to obtain</p>\n<div class=\"math\">$$r_{i+1} = r'_{i+1} + \\exp(x_{i+1} - \\alpha_{i+1}) = r'_{i+1} + 1.$$</div>\n<p>The above code is as numerically robust as the commonly used batch version and\nfor large arrays can be twice as fast.</p>\n<h2>Example</h2>\n<p>Running</p>\n<div class=\"highlight\"><pre><span></span><code><span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"mi\">10_000_000</span>\n<span class=\"n\">X</span> <span class=\"o\">=</span> <span class=\"mf\">500.0</span><span class=\"o\">*</span><span class=\"n\">randn</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span>\n\n<span class=\"n\">logsumexp_naive</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">),</span> <span class=\"n\">logsumexp_batch</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">),</span> <span class=\"n\">logsumexp_stream</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">)</span>\n</code></pre></div>\n\n<p>gives the following output</p>\n<div class=\"highlight\"><pre><span></span><code><span class=\"p\">(</span><span class=\"nb\">Inf</span><span class=\"p\">,</span><span class=\"mf\">2686.7659554831052</span><span class=\"p\">,</span><span class=\"mf\">2686.7659554831052</span><span class=\"p\">)</span>\n</code></pre></div>\n\n<script type=\"text/javascript\">if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {\n    var align = \"center\",\n        indent = \"0em\",\n        linebreak = \"false\";\n\n    if (false) {\n        align = (screen.width < 768) ? \"left\" : align;\n        indent = (screen.width < 768) ? \"0em\" : indent;\n        linebreak = (screen.width < 768) ? 'true' : linebreak;\n    }\n\n    var mathjaxscript = document.createElement('script');\n    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';\n    mathjaxscript.type = 'text/javascript';\n    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';\n\n    var configscript = document.createElement('script');\n    configscript.type = 'text/x-mathjax-config';\n    configscript[(window.opera ? \"innerHTML\" : \"text\")] =\n        \"MathJax.Hub.Config({\" +\n        \"    config: ['MMLorHTML.js'],\" +\n        \"    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" +\n        \"    jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" +\n        \"    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" +\n        \"    displayAlign: '\"+ align +\"',\" +\n        \"    displayIndent: '\"+ indent +\"',\" +\n        \"    showMathMenu: true,\" +\n        \"    messageStyle: 'normal',\" +\n        \"    tex2jax: { \" +\n        \"        inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" +\n        \"        displayMath: [ ['$$','$$'] ],\" +\n        \"        processEscapes: true,\" +\n        \"        preview: 'TeX',\" +\n        \"    }, \" +\n        \"    'HTML-CSS': { \" +\n        \"        availableFonts: ['STIX', 'TeX'],\" +\n        \"        preferredFont: 'STIX',\" +\n        \"        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" +\n        \"        linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" +\n        \"    }, \" +\n        \"}); \" +\n        \"if ('default' !== 'default') {\" +\n            \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" +\n                \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" +\n                \"VARIANT['normal'].fonts.unshift('MathJax_default');\" +\n                \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" +\n                \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" +\n                \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" +\n            \"});\" +\n            \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" +\n                \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" +\n                \"VARIANT['normal'].fonts.unshift('MathJax_default');\" +\n                \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" +\n                \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" +\n                \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" +\n            \"});\" +\n        \"}\";\n\n    (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript);\n    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);\n}\n</script>",
  "category": ""
}