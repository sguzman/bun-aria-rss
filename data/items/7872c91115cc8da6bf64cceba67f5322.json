{
  "title": "Development update: High speed Apache Parquet in Python with Apache Arrow",
  "link": "",
  "published": "2017-01-25T10:00:00-08:00",
  "updated": "2017-01-25T10:00:00-08:00",
  "author": {
    "name": "Wes McKinney"
  },
  "id": "tag:wesmckinney.com,2017-01-25:/blog/python-parquet-update/",
  "summary": "<p>Over the last year, I have been working with the Apache Parquet community to\nbuild out <a href=\"https://github.com/apache/parquet-cpp\">parquet-cpp</a>, a first class C++ Parquet file reader/writer\nimplementation suitable for use in Python and other data applications. <a href=\"https://github.com/xhochy\">Uwe\nKorn</a> and I have built the Python interface and integration with pandas\nwithin the Python codebase (<code>pyarrow</code>) in Apache Arrow.</p>\n<p>This blog is a follow up to my <a href=\"https://wesmckinney.com/blog/outlook-for-2017/\">2017 Roadmap</a> post.</p>",
  "content": "<p>Over the last year, I have been working with the Apache Parquet community to\nbuild out <a href=\"https://github.com/apache/parquet-cpp\">parquet-cpp</a>, a first class C++ Parquet file reader/writer\nimplementation suitable for use in Python and other data applications. <a href=\"https://github.com/xhochy\">Uwe\nKorn</a> and I have built the Python interface and integration with pandas\nwithin the Python codebase (<code>pyarrow</code>) in Apache Arrow.</p>\n<p>This blog is a follow up to my <a href=\"https://wesmckinney.com/blog/outlook-for-2017/\">2017 Roadmap</a> post.</p>\n\n\n<h2>Design: High performance columnar data in Python</h2>\n<p>The <a href=\"https://github.com/apache/arrow\">Apache Arrow</a> and Parquet C++ libraries are complementary technologies\nthat we've been engineering to work well together.</p>\n<ul>\n<li>\n<p>Arrow C++ libraries provide memory management, <a href=\"https://wesmckinney.com/blog/python-hdfs-interfaces/\">efficient IO</a> (files,\n  memory maps, HDFS), in-memory columnar array containers, and extremely fast\n  messaging (IPC / RPC). I will write more about Arrow's messaging layer in\n  another blog post.</p>\n</li>\n<li>\n<p>The Parquet C++ libraries are responsible for encoding and decoding the\n  Parquet file format. We have implemented a <code>libparquet_arrow</code> library that\n  handles transport between in-memory Arrow data and the low-level Parquet\n  reader/writer tools</p>\n</li>\n<li>\n<p>PyArrow provides a Python interface to all of this, and handles <a href=\"https://wesmckinney.com/blog/high-perf-arrow-to-pandas/\">fast\n  conversions to pandas.DataFrame</a>.</p>\n</li>\n</ul>\n<p>One of the primary goals of Apache Arrow is to be an efficient, interoperable\ncolumnar memory transport layer.</p>\n<p>You can read about the Parquet user API <a href=\"https://github.com/apache/arrow/blob/master/python/pyarrow/parquet.py\">in the PyArrow codebase</a>. The\nlibraries are available from <a href=\"https://conda-forge.github.io/\">conda-forge</a> at:</p>\n<div class=\"github\"><pre><span></span><code>conda install pyarrow arrow-cpp parquet-cpp -c conda-forge\n</code></pre></div>\n\n<h2>Performance Benchmarks: PyArrow and fastparquet</h2>\n<p>To get an idea of PyArrow's performance, I generated a 512 megabyte dataset of\nnumerical data that exhibits different Parquet use cases. I generated two\nvariants of the dataset:</p>\n<ul>\n<li>\n<p><strong>High entropy</strong>: all of the data values in the file (with the exception of\n  null values) are distinct. This dataset occupies 469 MB on disk.</p>\n</li>\n<li>\n<p><strong>Low entropy</strong>: the data exhibits a high degree of repetition. This data\n  encodes and compresses to a very small size: only 23 MB with Snappy\n  compression. If you write the file with dictionary encoding, it is even\n  smaller. Because decoding such files become more CPU bound than IO bound, you\n  can typically expect higher data throughput from low entropy data files.</p>\n</li>\n</ul>\n<p>I wrote these files for the 3 main compression styles in use: uncompressed,\nsnappy, and gzip. I then compute the wall clock time to obtain a pandas\nDataFrame from disk.</p>\n<p><a href=\"https://github.com/dask/fastparquet\">fastparquet</a> is a newer Parquet file reader/writer implementation for\nPython users created for use in the Dask project. It is implemented in Python\nand uses the Numba Python-to-LLVM compiler to accelerate the Parquet decoding\nroutines. I also installed that to compare with alternative implementations.</p>\n<p>The code to read a file as a pandas.DataFrame is similar:</p>\n<div class=\"github\"><pre><span></span><code><span class=\"c1\"># PyArrow</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pyarrow.parquet</span> <span class=\"k\">as</span> <span class=\"nn\">pq</span>\n<span class=\"n\">df1</span> <span class=\"o\">=</span> <span class=\"n\">pq</span><span class=\"o\">.</span><span class=\"n\">read_table</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to_pandas</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># fastparquet</span>\n<span class=\"kn\">import</span> <span class=\"nn\">fastparquet</span>\n<span class=\"n\">df2</span> <span class=\"o\">=</span> <span class=\"n\">fastparquet</span><span class=\"o\">.</span><span class=\"n\">ParquetFile</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to_pandas</span><span class=\"p\">()</span>\n</code></pre></div>\n\n<p>The green bars are the PyArrow timings: longer bars indicate faster performance\n/ higher data throughput. Hardware is a Xeon E3-1505 laptop.</p>\n<blockquote>\n<p>I just updated these benchmarks on February 1, 2017 against the latest\n  codebases.</p>\n</blockquote>\n<p><center>\n<img src=\"../../images/parquet_benchmarks.png\" alt=\"Parquet Python performance\"/>\n</center></p>\n<h2>Development status</h2>\n<p>We are in need of help on Windows builds and packaging. Also, keeping the\nconda-forge packages up to date is very time consuming. Of course, we're\nlooking for both C++ and Python developers to contribute to the codebases in\ngeneral.</p>\n<p>So far, we have focused on having a production-quality implementation of the\nfile format with strong performance reading and writing flat datasets. We are\nstarting to move onto handling nested JSON-like data natively in parquet-cpp\nusing Arrow as the container for the nested columnar data.</p>\n<p>Recently <a href=\"https://github.com/xhochy\">Uwe Korn</a> has just implemented some support for the <code>List</code> Arrow\ntype in conversions to pandas:</p>\n<div class=\"github\"><pre><span></span><code><span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">9</span><span class=\"p\">]:</span> <span class=\"n\">arr</span> <span class=\"o\">=</span> <span class=\"n\">pa</span><span class=\"o\">.</span><span class=\"n\">from_pylist</span><span class=\"p\">([[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"p\">[],</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]])</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">]:</span> <span class=\"n\">arr</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">]:</span>\n<span class=\"o\">&lt;</span><span class=\"n\">pyarrow</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"o\">.</span><span class=\"n\">ListArray</span> <span class=\"nb\">object</span> <span class=\"n\">at</span> <span class=\"mh\">0x7f562d551818</span><span class=\"o\">&gt;</span>\n<span class=\"p\">[</span>\n  <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n   <span class=\"mi\">2</span><span class=\"p\">,</span>\n   <span class=\"mi\">3</span><span class=\"p\">],</span>\n  <span class=\"n\">NA</span><span class=\"p\">,</span>\n  <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n   <span class=\"mi\">2</span><span class=\"p\">],</span>\n  <span class=\"p\">[],</span>\n  <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">11</span><span class=\"p\">]:</span> <span class=\"n\">arr</span><span class=\"o\">.</span><span class=\"n\">type</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">11</span><span class=\"p\">]:</span> <span class=\"n\">DataType</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"o\">&lt;</span><span class=\"n\">item</span><span class=\"p\">:</span> <span class=\"n\">int64</span><span class=\"o\">&gt;</span><span class=\"p\">)</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">12</span><span class=\"p\">]:</span> <span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">pa</span><span class=\"o\">.</span><span class=\"n\">Table</span><span class=\"o\">.</span><span class=\"n\">from_arrays</span><span class=\"p\">([</span><span class=\"n\">arr</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"s1\">&#39;col&#39;</span><span class=\"p\">])</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">13</span><span class=\"p\">]:</span> <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">to_pandas</span><span class=\"p\">()</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">13</span><span class=\"p\">]:</span>\n         <span class=\"n\">col</span>\n<span class=\"mi\">0</span>  <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"mi\">1</span>       <span class=\"kc\">None</span>\n<span class=\"mi\">2</span>     <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span>\n<span class=\"mi\">3</span>         <span class=\"p\">[]</span>\n<span class=\"mi\">4</span>        <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]</span>\n</code></pre></div>\n\n<h3>Benchmarking code</h3>\n<p>Here is the code</p>\n<div class=\"github\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">import</span> <span class=\"nn\">time</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pandas</span> <span class=\"k\">as</span> <span class=\"nn\">pd</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyarrow.compat</span> <span class=\"kn\">import</span> <span class=\"n\">guid</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pyarrow</span> <span class=\"k\">as</span> <span class=\"nn\">pa</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pyarrow.parquet</span> <span class=\"k\">as</span> <span class=\"nn\">pq</span>\n<span class=\"kn\">import</span> <span class=\"nn\">fastparquet</span> <span class=\"k\">as</span> <span class=\"nn\">fp</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">generate_floats</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">pct_null</span><span class=\"p\">,</span> <span class=\"n\">repeats</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n    <span class=\"n\">nunique</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">/</span> <span class=\"n\">repeats</span><span class=\"p\">)</span>\n    <span class=\"n\">unique_values</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">randn</span><span class=\"p\">(</span><span class=\"n\">nunique</span><span class=\"p\">)</span>\n\n    <span class=\"n\">num_nulls</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">nunique</span> <span class=\"o\">*</span> <span class=\"n\">pct_null</span><span class=\"p\">)</span>\n    <span class=\"n\">null_indices</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">choice</span><span class=\"p\">(</span><span class=\"n\">nunique</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"n\">num_nulls</span><span class=\"p\">,</span> <span class=\"n\">replace</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n    <span class=\"n\">unique_values</span><span class=\"p\">[</span><span class=\"n\">null_indices</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">unique_values</span><span class=\"o\">.</span><span class=\"n\">repeat</span><span class=\"p\">(</span><span class=\"n\">repeats</span><span class=\"p\">)</span>\n\n<span class=\"n\">DATA_GENERATORS</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">&#39;float64&#39;</span><span class=\"p\">:</span> <span class=\"n\">generate_floats</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">generate_data</span><span class=\"p\">(</span><span class=\"n\">total_size</span><span class=\"p\">,</span> <span class=\"n\">ncols</span><span class=\"p\">,</span> <span class=\"n\">pct_null</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"n\">repeats</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"s1\">&#39;float64&#39;</span><span class=\"p\">):</span>\n    <span class=\"n\">type_</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">(</span><span class=\"s1\">&#39;float64&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">nrows</span> <span class=\"o\">=</span> <span class=\"n\">total_size</span> <span class=\"o\">/</span> <span class=\"n\">ncols</span> <span class=\"o\">/</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">(</span><span class=\"n\">type_</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">itemsize</span>\n\n    <span class=\"n\">datagen_func</span> <span class=\"o\">=</span> <span class=\"n\">DATA_GENERATORS</span><span class=\"p\">[</span><span class=\"n\">dtype</span><span class=\"p\">]</span>\n\n    <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s1\">&#39;c&#39;</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">):</span> <span class=\"n\">datagen_func</span><span class=\"p\">(</span><span class=\"n\">nrows</span><span class=\"p\">,</span> <span class=\"n\">pct_null</span><span class=\"p\">,</span> <span class=\"n\">repeats</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">ncols</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">write_to_parquet</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">,</span> <span class=\"n\">out_path</span><span class=\"p\">,</span> <span class=\"n\">compression</span><span class=\"o\">=</span><span class=\"s1\">&#39;SNAPPY&#39;</span><span class=\"p\">):</span>\n    <span class=\"n\">arrow_table</span> <span class=\"o\">=</span> <span class=\"n\">pa</span><span class=\"o\">.</span><span class=\"n\">Table</span><span class=\"o\">.</span><span class=\"n\">from_pandas</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">compression</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;UNCOMPRESSED&#39;</span><span class=\"p\">:</span>\n        <span class=\"n\">compression</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n    <span class=\"n\">pq</span><span class=\"o\">.</span><span class=\"n\">write_table</span><span class=\"p\">(</span><span class=\"n\">arrow_table</span><span class=\"p\">,</span> <span class=\"n\">out_path</span><span class=\"p\">,</span> <span class=\"n\">use_dictionary</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n                   <span class=\"n\">compression</span><span class=\"o\">=</span><span class=\"n\">compression</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">read_fastparquet</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">fp</span><span class=\"o\">.</span><span class=\"n\">ParquetFile</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to_pandas</span><span class=\"p\">()</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">read_pyarrow</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"n\">nthreads</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">pq</span><span class=\"o\">.</span><span class=\"n\">read_table</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"n\">nthreads</span><span class=\"o\">=</span><span class=\"n\">nthreads</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to_pandas</span><span class=\"p\">()</span>\n\n<span class=\"n\">MEGABYTE</span> <span class=\"o\">=</span> <span class=\"mi\">1</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">20</span>\n<span class=\"n\">DATA_SIZE</span> <span class=\"o\">=</span> <span class=\"mi\">512</span> <span class=\"o\">*</span> <span class=\"n\">MEGABYTE</span>\n<span class=\"n\">NCOLS</span> <span class=\"o\">=</span> <span class=\"mi\">16</span>\n\n<span class=\"n\">cases</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">&#39;high_entropy&#39;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">&#39;pct_null&#39;</span><span class=\"p\">:</span> <span class=\"mf\">0.1</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;repeats&#39;</span><span class=\"p\">:</span> <span class=\"mi\">1</span>\n    <span class=\"p\">},</span>\n    <span class=\"s1\">&#39;low_entropy&#39;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">&#39;pct_null&#39;</span><span class=\"p\">:</span> <span class=\"mf\">0.1</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;repeats&#39;</span><span class=\"p\">:</span> <span class=\"mi\">1000</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">get_timing</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"n\">niter</span><span class=\"p\">):</span>\n    <span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">clock_gettime</span><span class=\"p\">(</span><span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">CLOCK_MONOTONIC</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">niter</span><span class=\"p\">):</span>\n        <span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">)</span>\n    <span class=\"n\">elapsed</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">clock_gettime</span><span class=\"p\">(</span><span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">CLOCK_MONOTONIC</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"n\">start</span>\n    <span class=\"k\">return</span> <span class=\"n\">elapsed</span>\n\n<span class=\"n\">NITER</span> <span class=\"o\">=</span> <span class=\"mi\">5</span>\n\n<span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n<span class=\"n\">readers</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">(</span><span class=\"s1\">&#39;fastparquet&#39;</span><span class=\"p\">,</span> <span class=\"k\">lambda</span> <span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"n\">read_fastparquet</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">)),</span>\n    <span class=\"p\">(</span><span class=\"s1\">&#39;pyarrow&#39;</span><span class=\"p\">,</span> <span class=\"k\">lambda</span> <span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"n\">read_pyarrow</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">)),</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">case_files</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n\n<span class=\"k\">for</span> <span class=\"n\">case</span><span class=\"p\">,</span> <span class=\"n\">params</span> <span class=\"ow\">in</span> <span class=\"n\">cases</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n    <span class=\"k\">for</span> <span class=\"n\">compression</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"s1\">&#39;UNCOMPRESSED&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;SNAPPY&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;GZIP&#39;</span><span class=\"p\">]:</span>\n        <span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;</span><span class=\"si\">{0}</span><span class=\"s1\">_</span><span class=\"si\">{1}</span><span class=\"s1\">.parquet&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">case</span><span class=\"p\">,</span> <span class=\"n\">compression</span><span class=\"p\">)</span>\n        <span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">generate_data</span><span class=\"p\">(</span><span class=\"n\">DATA_SIZE</span><span class=\"p\">,</span> <span class=\"n\">NCOLS</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">params</span><span class=\"p\">)</span>\n        <span class=\"n\">write_to_parquet</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"n\">compression</span><span class=\"o\">=</span><span class=\"n\">compression</span><span class=\"p\">)</span>\n        <span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"n\">case_files</span><span class=\"p\">[</span><span class=\"n\">case</span><span class=\"p\">,</span> <span class=\"n\">compression</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">path</span>\n\n<span class=\"k\">for</span> <span class=\"n\">case</span><span class=\"p\">,</span> <span class=\"n\">params</span> <span class=\"ow\">in</span> <span class=\"n\">cases</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n    <span class=\"k\">for</span> <span class=\"n\">compression</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"s1\">&#39;UNCOMPRESSED&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;SNAPPY&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;GZIP&#39;</span><span class=\"p\">]:</span>\n        <span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"n\">case_files</span><span class=\"p\">[</span><span class=\"n\">case</span><span class=\"p\">,</span> <span class=\"n\">compression</span><span class=\"p\">]</span>\n\n        <span class=\"c1\"># prime the file cache</span>\n        <span class=\"n\">read_pyarrow</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">)</span>\n        <span class=\"n\">read_pyarrow</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">)</span>\n\n        <span class=\"k\">for</span> <span class=\"n\">reader_name</span><span class=\"p\">,</span> <span class=\"n\">f</span> <span class=\"ow\">in</span> <span class=\"n\">readers</span><span class=\"p\">:</span>\n            <span class=\"n\">elapsed</span> <span class=\"o\">=</span> <span class=\"n\">get_timing</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"n\">NITER</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"n\">NITER</span>\n            <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">case</span><span class=\"p\">,</span> <span class=\"n\">compression</span><span class=\"p\">,</span> <span class=\"n\">reader_name</span><span class=\"p\">,</span> <span class=\"n\">elapsed</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span>\n            <span class=\"n\">results</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span>\n</code></pre></div>"
}