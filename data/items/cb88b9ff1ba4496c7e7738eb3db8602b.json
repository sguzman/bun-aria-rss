{
  "guid": "http://blog.districtdatalabs.com/data-exploration-with-python-2#28902",
  "pubDate": "Tue, 07 Feb 2017 03:04:00 -0500",
  "link": "http://blog.districtdatalabs.com/data-exploration-with-python-2",
  "title": "Data Exploration with Python, Part 2",
  "description": "Preparing Your Data to be Explored",
  "content:encoded": "<p><em>This is the second post in our Data Exploration with Python series. Before reading this post, make sure to check out <a href=\"http://blog.districtdatalabs.com/data-exploration-with-python-1\">Data Exploration with Python, Part 1</a>!</em></p>\n\n<blockquote>\n<p>Mise en place (noun): In a professional kitchen, the disciplined organization and preparation of equipment and food before service begins.</p>\n</blockquote>\n\n<p>When performing exploratory data analysis (EDA), it is important to not only prepare yourself (the analyst) but to prepare your data as well. As we discussed in the previous post, a small amount of preparation will often save you a significant amount of time later on. So let's review where we should be at this point and then continue our exploration process with data preparation.</p>\n\n<p>In <a href=\"http://blog.districtdatalabs.com/data-exploration-with-python-1\">Part 1</a> of this series, we were introduced to the data exploration framework we will be using. As a reminder, here is what that framework looks like.</p>\n\n<p><img alt=\"Exploratory Data Analysis Framework\" src=\"https://silvrback.s3.amazonaws.com/uploads/774cd15b-faa2-447f-86e2-7a099e79f8b5/framework_large.png\" /></p>\n\n<p>We also introduced the example data set we are going to be using to illustrate the different phases and stages of the framework. Here is what that looks like.</p>\n\n<p><img alt=\"EPA Vehicle Fuel Economy Data\" src=\"https://silvrback.s3.amazonaws.com/uploads/c170f837-017b-4ada-aa7f-03036632abb4/data_set_large.png\" /></p>\n\n<p>We then familiarized ourselves with our data set by identifying the types of information and entities encoded within it. We also reviewed several data transformation and visualization methods that we will use later to explore and analyze it. Now we are at the last stage of the framework's <em>Prep Phase</em>, the <em>Create</em> stage, where our goal will be to create additional categorical fields that will make our data easier to explore and allow us to view it from new perspectives.</p>\n\n<h2 id=\"renaming-columns-to-be-more-intuitive\">Renaming Columns to be More Intuitive</h2>\n\n<p>Before we dive in and start creating categories, however, we have an opportunity to improve our categorization efforts by examining the columns in our data and making sure their labels intuitively convey what they represent. Just as with the other aspects of preparation, changing them now will save us from having to remember what <code>displ</code> or <code>co2TailpipeGpm</code> mean when they show up on a chart later. In my experience, these small, detail-oriented enhancements to the beginning of your process usually compound and preserve cognitive cycles that you can later apply to extracting insights.</p>\n\n<p>We can use the code below to rename the columns in our vehicles data frame.</p>\n<div class=\"highlight\"><pre><span></span><span class=\"n\">vehicles</span><span class=\"o\">.</span><span class=\"n\">columns</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'Make'</span><span class=\"p\">,</span><span class=\"s1\">'Model'</span><span class=\"p\">,</span><span class=\"s1\">'Year'</span><span class=\"p\">,</span><span class=\"s1\">'Engine Displacement'</span><span class=\"p\">,</span><span class=\"s1\">'Cylinders'</span><span class=\"p\">,</span>\n                    <span class=\"s1\">'Transmission'</span><span class=\"p\">,</span><span class=\"s1\">'Drivetrain'</span><span class=\"p\">,</span><span class=\"s1\">'Vehicle Class'</span><span class=\"p\">,</span><span class=\"s1\">'Fuel Type'</span><span class=\"p\">,</span>\n                    <span class=\"s1\">'Fuel Barrels/Year'</span><span class=\"p\">,</span><span class=\"s1\">'City MPG'</span><span class=\"p\">,</span><span class=\"s1\">'Highway MPG'</span><span class=\"p\">,</span><span class=\"s1\">'Combined MPG'</span><span class=\"p\">,</span>\n                    <span class=\"s1\">'CO2 Emission Grams/Mile'</span><span class=\"p\">,</span><span class=\"s1\">'Fuel Cost/Year'</span><span class=\"p\">]</span>\n</pre></div>\n<h2 id=\"thinking-about-categorization\">Thinking About Categorization</h2>\n\n<p>Now that we have changed our column names to be more intuitive, let's take a moment to think about what categorization is and examine the categories that currently exist in our data set. At the most basic level, categorization is just a way that humans structure information &mdash; how we hierarchically create order out of complexity. Categories are formed based on attributes that entities have in common, and they present us with different perspectives from which we can view and think about our data.</p>\n\n<p>Our primary objective in this stage is to create additional categories that will help us further organize our data. This will prove beneficial not only for the exploratory analysis we will conduct but also for any <a href=\"http://blog.districtdatalabs.com/an-introduction-to-machine-learning-with-python\">supervised machine learning</a> or modeling that may happen further down the <a href=\"http://blog.districtdatalabs.com/the-age-of-the-data-product\">data science pipeline</a>. Seasoned data scientists know that the better your data is organized, the better downstream analyses you will be able to perform and the more informative features you will have to feed into your machine learning models.</p>\n\n<p>In this stage of the framework, we are going to create additional categories in 3 distinct ways:</p>\n\n<ul>\n<li>Category Aggregations</li>\n<li>Binning Continuous Variables</li>\n<li>Clustering</li>\n</ul>\n\n<p>Now that we have a better idea of what we are doing and why, let's get started.</p>\n\n<h3 id=\"aggregating-to-higher-level-categories\">Aggregating to Higher-Level Categories</h3>\n\n<p>The first way we are going to create additional categories is by identifying opportunities to create higher-level categories out of the variables we already have in our data set. In order to do this, we need to get a sense of what categories currently exist in the data. We can do this by iterating through our columns and printing out the name, the number of unique values, and the data type for each.</p>\n<div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">unique_col_values</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">):</span>\n    <span class=\"k\">for</span> <span class=\"n\">column</span> <span class=\"ow\">in</span> <span class=\"n\">df</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s2\">\"{} | {} | {}\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span>\n            <span class=\"n\">df</span><span class=\"p\">[</span><span class=\"n\">column</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">[</span><span class=\"n\">column</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">unique</span><span class=\"p\">()),</span> <span class=\"n\">df</span><span class=\"p\">[</span><span class=\"n\">column</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">dtype</span>\n        <span class=\"p\">))</span>\n\n<span class=\"n\">unique_col_values</span><span class=\"p\">(</span><span class=\"n\">vehicles</span><span class=\"p\">)</span>\n</pre></div><div class=\"highlight\"><pre><span></span>Make | 126 | object\nModel | 3491 | object\nYear | 33 | int64\nEngine Displacement | 65 | float64\nCylinders | 9 | float64\nTransmission | 43 | object\nDrivetrain | 7 | object\nVehicle Class | 34 | object\nFuel Type | 13 | object\nFuel Barrels/Year | 116 | float64\nCity MPG | 48 | int64\nHighway MPG | 49 | int64\nCombined MPG | 45 | int64\nCO2 Emission Grams/Mile | 550 | float64\nFuel Cost/Year | 58 | int64\n</pre></div>\n<p>From looking at the output, it is clear that we have some numeric columns (<em>int64</em> and <em>float64</em>) and some categorical columns (<em>object</em>). For now, let's focus on the six categorical columns in our data set.</p>\n\n<ul>\n<li>Make: 126 unique values</li>\n<li>Model: 3,491 unique values</li>\n<li>Transmission: 43 unique values</li>\n<li>Drivetrain: 7 unique values</li>\n<li>Vehicle Class: 34 unique values</li>\n<li>Fuel Type: 13 unique values</li>\n</ul>\n\n<p>When aggregating and summarizing data, having too many categories can be problematic. The average human is said to have the ability to hold <a href=\"https://en.wikipedia.org/wiki/The_Magical_Number_Seven,_Plus_or_Minus_Two\">7 objects</a> at a time in their short-term working memory. Accordingly, I have noticed that once you exceed 8-10 discrete values in a category, it becomes increasingly difficult to get a holistic picture of how the entire data set is divided up.</p>\n\n<p>What we want to do is examine the values in each of our categorical variables to determine where opportunities exist to aggregate them into higher-level categories. The way this is typically done is by using a combination of clues from the current categories and any domain knowledge you may have (or be able to acquire).</p>\n\n<p>For example, imagine aggregating by <em>Transmission</em>, which has 43 discrete values in our data set. It is going to be difficult to derive insights due to the fact that any aggregated metrics are going to be distributed across more categories than you can hold in short-term memory. However, if we examine the different transmission categories with the goal of finding common features that we can group on, we would find that all 43 values fall into one of two transmission types, <em>Automatic</em> or <em>Manual</em>.</p>\n\n<p><img alt=\"Category Aggregations - Transmission \" src=\"https://silvrback.s3.amazonaws.com/uploads/4e6e18d2-4a00-4bf5-9744-181deff30659/transmission.png\" /></p>\n\n<p>Let's create a new <em>Transmission Type</em> column in our data frame and, with the help of the <code>loc</code> method in pandas, assign it a value of <em>Automatic</em> where the first character of <em>Transmission</em> is the letter A and a value of <em>Manual</em> where the first character is the letter M.</p>\n<div class=\"highlight\"><pre><span></span><span class=\"n\">AUTOMATIC</span> <span class=\"o\">=</span> <span class=\"s2\">\"Automatic\"</span>\n<span class=\"n\">MANUAL</span> <span class=\"o\">=</span> <span class=\"s2\">\"Manual\"</span>\n\n<span class=\"n\">vehicles</span><span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"n\">vehicles</span><span class=\"p\">[</span><span class=\"s1\">'Transmission'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">str</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"s1\">'A'</span><span class=\"p\">),</span>\n             <span class=\"s1\">'Transmission Type'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">AUTOMATIC</span>\n\n<span class=\"n\">vehicles</span><span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"n\">vehicles</span><span class=\"p\">[</span><span class=\"s1\">'Transmission'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">str</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"s1\">'M'</span><span class=\"p\">),</span>\n             <span class=\"s1\">'Transmission Type'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">MANUAL</span>\n</pre></div>\n<p>We can apply the same logic to the <em>Vehicle Class</em> field. We originally have 34 vehicle classes, but we can distill those down into 8 vehicle categories, which are much easier to remember.</p>\n\n<p><img alt=\"Category Aggregations - Vehicle Class\" src=\"https://silvrback.s3.amazonaws.com/uploads/4cafec85-6fe9-4527-be2b-6f17622cfd07/vehicle_class.png\" /></p>\n<div class=\"highlight\"><pre><span></span><span class=\"n\">small</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'Compact Cars'</span><span class=\"p\">,</span><span class=\"s1\">'Subcompact Cars'</span><span class=\"p\">,</span><span class=\"s1\">'Two Seaters'</span><span class=\"p\">,</span><span class=\"s1\">'Minicompact Cars'</span><span class=\"p\">]</span>\n<span class=\"n\">midsize</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'Midsize Cars'</span><span class=\"p\">]</span>\n<span class=\"n\">large</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'Large Cars'</span><span class=\"p\">]</span>\n\n<span class=\"n\">vehicles</span><span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"n\">vehicles</span><span class=\"p\">[</span><span class=\"s1\">'Vehicle Class'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">isin</span><span class=\"p\">(</span><span class=\"n\">small</span><span class=\"p\">),</span> \n             <span class=\"s1\">'Vehicle Category'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'Small Cars'</span>\n\n<span class=\"n\">vehicles</span><span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"n\">vehicles</span><span class=\"p\">[</span><span class=\"s1\">'Vehicle Class'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">isin</span><span class=\"p\">(</span><span class=\"n\">midsize</span><span class=\"p\">),</span> \n             <span class=\"s1\">'Vehicle Category'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'Midsize Cars'</span>\n\n<span class=\"n\">vehicles</span><span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"n\">vehicles</span><span class=\"p\">[</span><span class=\"s1\">'Vehicle Class'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">isin</span><span class=\"p\">(</span><span class=\"n\">large</span><span class=\"p\">),</span> \n             <span class=\"s1\">'Vehicle Category'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'Large Cars'</span>\n\n<span class=\"n\">vehicles</span><span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"n\">vehicles</span><span class=\"p\">[</span><span class=\"s1\">'Vehicle Class'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">str</span><span class=\"o\">.</span><span class=\"n\">contains</span><span class=\"p\">(</span><span class=\"s1\">'Station'</span><span class=\"p\">),</span> \n             <span class=\"s1\">'Vehicle Category'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'Station Wagons'</span>\n\n<span class=\"n\">vehicles</span><span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"n\">vehicles</span><span class=\"p\">[</span><span class=\"s1\">'Vehicle Class'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">str</span><span class=\"o\">.</span><span class=\"n\">contains</span><span class=\"p\">(</span><span class=\"s1\">'Truck'</span><span class=\"p\">),</span> \n             <span class=\"s1\">'Vehicle Category'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'Pickup Trucks'</span>\n\n<span class=\"n\">vehicles</span><span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"n\">vehicles</span><span class=\"p\">[</span><span class=\"s1\">'Vehicle Class'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">str</span><span class=\"o\">.</span><span class=\"n\">contains</span><span class=\"p\">(</span><span class=\"s1\">'Special Purpose'</span><span class=\"p\">),</span> \n             <span class=\"s1\">'Vehicle Category'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'Special Purpose'</span>\n\n<span class=\"n\">vehicles</span><span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"n\">vehicles</span><span class=\"p\">[</span><span class=\"s1\">'Vehicle Class'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">str</span><span class=\"o\">.</span><span class=\"n\">contains</span><span class=\"p\">(</span><span class=\"s1\">'Sport Utility'</span><span class=\"p\">),</span> \n             <span class=\"s1\">'Vehicle Category'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'Sport Utility'</span>\n\n<span class=\"n\">vehicles</span><span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[(</span><span class=\"n\">vehicles</span><span class=\"p\">[</span><span class=\"s1\">'Vehicle Class'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">str</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">str</span><span class=\"o\">.</span><span class=\"n\">contains</span><span class=\"p\">(</span><span class=\"s1\">'van'</span><span class=\"p\">)),</span>\n             <span class=\"s1\">'Vehicle Category'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'Vans & Minivans'</span>\n</pre></div>\n<p>Next, let's look at the <em>Make</em> and <em>Model</em> fields, which have 126 and 3,491 unique values respectively. While I can't think of a way to get either of those down to 8-10 categories, we can create another potentially informative field by concatenating <em>Make</em> and the first word of the <em>Model</em> field together into a new <em>Model Type</em> field. This would allow us to, for example, categorize all <em>Chevrolet Suburban C1500 2WD</em> vehicles and all <em>Chevrolet Suburban K1500 4WD</em> vehicles as simply <em>Chevrolet Suburbans</em>.</p>\n<div class=\"highlight\"><pre><span></span><span class=\"n\">vehicles</span><span class=\"p\">[</span><span class=\"s1\">'Model Type'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">vehicles</span><span class=\"p\">[</span><span class=\"s1\">'Make'</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"s2\">\" \"</span> <span class=\"o\">+</span>\n                          <span class=\"n\">vehicles</span><span class=\"p\">[</span><span class=\"s1\">'Model'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">str</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">str</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">))</span>\n</pre></div>\n<p>Finally, let's look at the <em>Fuel Type</em> field, which has 13 unique values. On the surface, that doesn't seem too bad, but upon further inspection, you'll notice some complexity embedded in the categories that could probably be organized more intuitively.</p>\n<div class=\"highlight\"><pre><span></span><span class=\"n\">vehicles</span><span class=\"p\">[</span><span class=\"s1\">'Fuel Type'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">unique</span><span class=\"p\">()</span>\n</pre></div><div class=\"highlight\"><pre><span></span>array(['Regular', 'Premium', 'Diesel', 'Premium and Electricity',\n       'Premium or E85', 'Premium Gas or Electricity', 'Gasoline or E85',\n       'Gasoline or natural gas', 'CNG', 'Regular Gas or Electricity',\n       'Midgrade', 'Regular Gas and Electricity', 'Gasoline or propane'],\n        dtype=object)\n</pre></div>\n<p>This is interesting and a little tricky because there are some categories that contain a single fuel type and others that contain multiple fuel types. In order to organize this better, we will create two sets of categories from these fuel types. The first will be a set of columns that will be able to represent the different combinations, while still preserving the individual fuel types.</p>\n<div class=\"highlight\"><pre><span></span><span class=\"n\">vehicles</span><span class=\"p\">[</span><span class=\"s1\">'Gas'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"n\">vehicles</span><span class=\"p\">[</span><span class=\"s1\">'Ethanol'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"n\">vehicles</span><span class=\"p\">[</span><span class=\"s1\">'Electric'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"n\">vehicles</span><span class=\"p\">[</span><span class=\"s1\">'Propane'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"n\">vehicles</span><span class=\"p\">[</span><span class=\"s1\">'Natural Gas'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\n<span class=\"n\">vehicles</span><span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"n\">vehicles</span><span class=\"p\">[</span><span class=\"s1\">'Fuel Type'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">str</span><span class=\"o\">.</span><span class=\"n\">contains</span><span class=\"p\">(</span>\n        <span class=\"s1\">'Regular|Gasoline|Midgrade|Premium|Diesel'</span><span class=\"p\">),</span><span class=\"s1\">'Gas'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n\n<span class=\"n\">vehicles</span><span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"n\">vehicles</span><span class=\"p\">[</span><span class=\"s1\">'Fuel Type'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">str</span><span class=\"o\">.</span><span class=\"n\">contains</span><span class=\"p\">(</span><span class=\"s1\">'E85'</span><span class=\"p\">),</span><span class=\"s1\">'Ethanol'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n\n<span class=\"n\">vehicles</span><span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"n\">vehicles</span><span class=\"p\">[</span><span class=\"s1\">'Fuel Type'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">str</span><span class=\"o\">.</span><span class=\"n\">contains</span><span class=\"p\">(</span><span class=\"s1\">'Electricity'</span><span class=\"p\">),</span><span class=\"s1\">'Electric'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n\n<span class=\"n\">vehicles</span><span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"n\">vehicles</span><span class=\"p\">[</span><span class=\"s1\">'Fuel Type'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">str</span><span class=\"o\">.</span><span class=\"n\">contains</span><span class=\"p\">(</span><span class=\"s1\">'propane'</span><span class=\"p\">),</span><span class=\"s1\">'Propane'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n\n<span class=\"n\">vehicles</span><span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"n\">vehicles</span><span class=\"p\">[</span><span class=\"s1\">'Fuel Type'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">str</span><span class=\"o\">.</span><span class=\"n\">contains</span><span class=\"p\">(</span><span class=\"s1\">'natural|CNG'</span><span class=\"p\">),</span><span class=\"s1\">'Natural Gas'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n</pre></div>\n<p>As it turns out, 99% of the vehicles in our database have gas as a fuel type, either by itself or combined with another fuel type. Since that is the case, let's create a second set of categories - specifically, a new <em>Gas Type</em> field that extracts the type of gas (Regular, Midgrade, Premium, Diesel, or Natural) each vehicle accepts.</p>\n<div class=\"highlight\"><pre><span></span><span class=\"n\">vehicles</span><span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"n\">vehicles</span><span class=\"p\">[</span><span class=\"s1\">'Fuel Type'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">str</span><span class=\"o\">.</span><span class=\"n\">contains</span><span class=\"p\">(</span>\n        <span class=\"s1\">'Regular|Gasoline'</span><span class=\"p\">),</span><span class=\"s1\">'Gas Type'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'Regular'</span>\n\n<span class=\"n\">vehicles</span><span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"n\">vehicles</span><span class=\"p\">[</span><span class=\"s1\">'Fuel Type'</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s1\">'Midgrade'</span><span class=\"p\">,</span>\n             <span class=\"s1\">'Gas Type'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'Midgrade'</span>\n\n<span class=\"n\">vehicles</span><span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"n\">vehicles</span><span class=\"p\">[</span><span class=\"s1\">'Fuel Type'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">str</span><span class=\"o\">.</span><span class=\"n\">contains</span><span class=\"p\">(</span><span class=\"s1\">'Premium'</span><span class=\"p\">),</span>\n             <span class=\"s1\">'Gas Type'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'Premium'</span>\n\n<span class=\"n\">vehicles</span><span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"n\">vehicles</span><span class=\"p\">[</span><span class=\"s1\">'Fuel Type'</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s1\">'Diesel'</span><span class=\"p\">,</span>\n             <span class=\"s1\">'Gas Type'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'Diesel'</span>\n\n<span class=\"n\">vehicles</span><span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"n\">vehicles</span><span class=\"p\">[</span><span class=\"s1\">'Fuel Type'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">str</span><span class=\"o\">.</span><span class=\"n\">contains</span><span class=\"p\">(</span><span class=\"s1\">'natural|CNG'</span><span class=\"p\">),</span>\n             <span class=\"s1\">'Gas Type'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'Natural'</span>\n</pre></div>\n<p>An important thing to note about what we have done with all of the categorical fields in this section is that, while we created new categories, we did not overwrite the original ones. We created additional fields that will allow us to view the information contained within the data set at different (often higher) levels. If you need to drill down to the more granular original categories, you can always do that. However, now we have a choice whereas before we performed these category aggregations, we did not.</p>\n\n<h3 id=\"creating-categories-from-continuous-variables\">Creating Categories from Continuous Variables</h3>\n\n<p>The next way we can create additional categories in our data is by binning some of our continuous variables - breaking them up into different categories based on a threshold or distribution. There are multiple ways you can do this, but I like to use quintiles because it gives me one middle category, two categories outside of that which are moderately higher and lower, and then two extreme categories at the ends. I find that this is a very intuitive way to break things up and provides some consistency across categories. In our data set, I've identified 4 fields that we can bin this way.</p>\n\n<p><img alt=\"Silvrback blog image \" src=\"https://silvrback.s3.amazonaws.com/uploads/3ca61771-8114-4ee7-a262-361f2ed31fd1/binning.png\" /></p>\n\n<p>Binning essentially looks at how the data is distributed, creates the necessary number of bins by splitting up the range of values (either equally or based on explicit boundaries), and then categorizes records into the appropriate bin that their continuous value falls into. Pandas has a <code>qcut</code> method that makes binning extremely easy, so let's use that to create our quintiles for each of the continuous variables we identified.</p>\n<div class=\"highlight\"><pre><span></span><span class=\"n\">efficiency_categories</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'Very Low Efficiency'</span><span class=\"p\">,</span> <span class=\"s1\">'Low Efficiency'</span><span class=\"p\">,</span>\n                         <span class=\"s1\">'Moderate Efficiency'</span><span class=\"p\">,</span><span class=\"s1\">'High Efficiency'</span><span class=\"p\">,</span>\n                         <span class=\"s1\">'Very High Efficiency'</span><span class=\"p\">]</span>\n\n<span class=\"n\">vehicles</span><span class=\"p\">[</span><span class=\"s1\">'Fuel Efficiency'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">qcut</span><span class=\"p\">(</span><span class=\"n\">vehicles</span><span class=\"p\">[</span><span class=\"s1\">'Combined MPG'</span><span class=\"p\">],</span>\n                                      <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">efficiency_categories</span><span class=\"p\">)</span>\n</pre></div><div class=\"highlight\"><pre><span></span><span class=\"n\">engine_categories</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'Very Small Engine'</span><span class=\"p\">,</span> <span class=\"s1\">'Small Engine'</span><span class=\"p\">,</span><span class=\"s1\">'Moderate Engine'</span><span class=\"p\">,</span>\n                     <span class=\"s1\">'Large Engine'</span><span class=\"p\">,</span> <span class=\"s1\">'Very Large Engine'</span><span class=\"p\">]</span>\n\n<span class=\"n\">vehicles</span><span class=\"p\">[</span><span class=\"s1\">'Engine Size'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">qcut</span><span class=\"p\">(</span><span class=\"n\">vehicles</span><span class=\"p\">[</span><span class=\"s1\">'Engine Displacement'</span><span class=\"p\">],</span>\n                                  <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">engine_categories</span><span class=\"p\">)</span>\n</pre></div><div class=\"highlight\"><pre><span></span><span class=\"n\">emission_categories</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'Very Low Emissions'</span><span class=\"p\">,</span> <span class=\"s1\">'Low Emissions'</span><span class=\"p\">,</span>\n                        <span class=\"s1\">'Moderate Emissions'</span><span class=\"p\">,</span><span class=\"s1\">'High Emissions'</span><span class=\"p\">,</span>\n                        <span class=\"s1\">'Very High Emissions'</span><span class=\"p\">]</span>\n\n<span class=\"n\">vehicles</span><span class=\"p\">[</span><span class=\"s1\">'Emissions'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">qcut</span><span class=\"p\">(</span><span class=\"n\">vehicles</span><span class=\"p\">[</span><span class=\"s1\">'CO2 Emission Grams/Mile'</span><span class=\"p\">],</span>\n                                 <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">emission_categories</span><span class=\"p\">)</span>\n</pre></div><div class=\"highlight\"><pre><span></span><span class=\"n\">fuelcost_categories</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'Very Low Fuel Cost'</span><span class=\"p\">,</span> <span class=\"s1\">'Low Fuel Cost'</span><span class=\"p\">,</span>\n                       <span class=\"s1\">'Moderate Fuel Cost'</span><span class=\"p\">,</span><span class=\"s1\">'High Fuel Cost'</span><span class=\"p\">,</span>\n                       <span class=\"s1\">'Very High Fuel Cost'</span><span class=\"p\">]</span>\n\n<span class=\"n\">vehicles</span><span class=\"p\">[</span><span class=\"s1\">'Fuel Cost'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">qcut</span><span class=\"p\">(</span><span class=\"n\">vehicles</span><span class=\"p\">[</span><span class=\"s1\">'Fuel Cost/Year'</span><span class=\"p\">],</span>\n                                <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">fuelcost_categories</span><span class=\"p\">)</span>\n</pre></div>\n<h3 id=\"clustering-to-create-additional-categories\">Clustering to Create Additional Categories</h3>\n\n<p>The final way we are going to prepare our data is by clustering to create additional categories. There are a few reasons why I like to use clustering for this. First, it takes multiple fields into consideration <em>together at the same time</em>, whereas the other categorization methods only consider one field at a time. This will allow you to categorize together entities that are similar across a variety of attributes, but might not be close enough in each individual attribute to get grouped together.</p>\n\n<p>Clustering also creates new categories for you automatically, which takes much less time than having to comb through the data yourself identifying patterns across attributes that you can form categories on. It will automatically group similar items together for you.</p>\n\n<p>The third reason I like to use clustering is because it will sometimes group things in ways that you, as a human, may not have thought of. I'm a big fan of humans and machines working together to optimize analytical processes, and this is a good example of value that machines bring to the table that can be helpful to humans. I'll write more about my thoughts on that in future posts, but for now, let's move on to clustering our data.</p>\n\n<p>The first thing we are going to do is isolate the columns we want to use for clustering. These are going to be columns with numeric values, as the clustering algorithm will need to compute distances in order to group similar vehicles together.</p>\n<div class=\"highlight\"><pre><span></span><span class=\"n\">cluster_columns</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'Engine Displacement'</span><span class=\"p\">,</span><span class=\"s1\">'Cylinders'</span><span class=\"p\">,</span><span class=\"s1\">'Fuel Barrels/Year'</span><span class=\"p\">,</span>\n                   <span class=\"s1\">'City MPG'</span><span class=\"p\">,</span><span class=\"s1\">'Highway MPG'</span><span class=\"p\">,</span><span class=\"s1\">'Combined MPG'</span><span class=\"p\">,</span>\n                   <span class=\"s1\">'CO2 Emission Grams/Mile'</span><span class=\"p\">,</span> <span class=\"s1\">'Fuel Cost/Year'</span><span class=\"p\">]</span>\n</pre></div>\n<p>Next, we want to scale the features we are going to cluster on. There are a variety of ways to <a href=\"http://scikit-learn.org/stable/modules/preprocessing.html\">normalize and scale variables</a>, but I'm going to keep things relatively simple and just use Scikit-Learn's <code>MaxAbsScaler</code>, which will divide each value by the max absolute value for that feature. This will preserve the distributions in the data and convert the values in each field to a number between 0 and 1 (technically -1 and 1, but we don't have any negatives).</p>\n<div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">sklearn</span> <span class=\"kn\">import</span> <span class=\"n\">preprocessing</span>\n<span class=\"n\">scaler</span> <span class=\"o\">=</span> <span class=\"n\">preprocessing</span><span class=\"o\">.</span><span class=\"n\">MaxAbsScaler</span><span class=\"p\">()</span>\n\n<span class=\"n\">vehicle_clusters</span> <span class=\"o\">=</span> <span class=\"n\">scaler</span><span class=\"o\">.</span><span class=\"n\">fit_transform</span><span class=\"p\">(</span><span class=\"n\">vehicles</span><span class=\"p\">[</span><span class=\"n\">cluster_columns</span><span class=\"p\">])</span>\n<span class=\"n\">vehicle_clusters</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">vehicle_clusters</span><span class=\"p\">,</span> <span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"n\">cluster_columns</span><span class=\"p\">)</span>\n</pre></div>\n<p>Now that our features are scaled, let's write a couple of functions. The first function we are going to write is a <code>kmeans_cluster</code> function that will k-means cluster a given data frame into a specified number of clusters. It will then return a copy of the original data frame with those clusters appended in a column named <em>Cluster</em>.</p>\n<div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">sklearn.cluster</span> <span class=\"kn\">import</span> <span class=\"n\">KMeans</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">kmeans_cluster</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">,</span> <span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">):</span>\n    <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">KMeans</span><span class=\"p\">(</span><span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"n\">n_clusters</span><span class=\"p\">,</span> <span class=\"n\">random_state</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"n\">clusters</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">fit_predict</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">)</span>\n    <span class=\"n\">cluster_results</span> <span class=\"o\">=</span> <span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>\n    <span class=\"n\">cluster_results</span><span class=\"p\">[</span><span class=\"s1\">'Cluster'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">clusters</span>\n    <span class=\"k\">return</span> <span class=\"n\">cluster_results</span>\n</pre></div>\n<p>Our second function, called <code>summarize_clustering</code> is going to count the number of vehicles that fall into each cluster and calculate the cluster means for each feature. It is going to merge the counts and means into a single data frame and then return that summary to us.</p>\n<div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">summarize_clustering</span><span class=\"p\">(</span><span class=\"n\">results</span><span class=\"p\">):</span>\n    <span class=\"n\">cluster_size</span> <span class=\"o\">=</span> <span class=\"n\">results</span><span class=\"o\">.</span><span class=\"n\">groupby</span><span class=\"p\">([</span><span class=\"s1\">'Cluster'</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">size</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">reset_index</span><span class=\"p\">()</span>\n    <span class=\"n\">cluster_size</span><span class=\"o\">.</span><span class=\"n\">columns</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'Cluster'</span><span class=\"p\">,</span> <span class=\"s1\">'Count'</span><span class=\"p\">]</span>\n    <span class=\"n\">cluster_means</span> <span class=\"o\">=</span> <span class=\"n\">results</span><span class=\"o\">.</span><span class=\"n\">groupby</span><span class=\"p\">([</span><span class=\"s1\">'Cluster'</span><span class=\"p\">],</span> <span class=\"n\">as_index</span><span class=\"o\">=</span><span class=\"bp\">False</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">()</span>\n    <span class=\"n\">cluster_summary</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">merge</span><span class=\"p\">(</span><span class=\"n\">cluster_size</span><span class=\"p\">,</span> <span class=\"n\">cluster_means</span><span class=\"p\">,</span> <span class=\"n\">on</span><span class=\"o\">=</span><span class=\"s1\">'Cluster'</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">cluster_summary</span>\n</pre></div>\n<p>We now have functions for what we need to do, so the next step is to actually cluster our data. But wait, our <code>kmeans_cluster</code> function is supposed to accept a number of clusters. How do we determine how many clusters we want? </p>\n\n<p>There are a <a href=\"https://en.wikipedia.org/wiki/Determining_the_number_of_clusters_in_a_data_set\">number of approaches</a> for figuring this out, but for the sake of simplicity, we are just going to plug in a couple of numbers and visualize the results to arrive at a good enough estimate. Remember earlier in this post where we were trying to aggregate our categorical variables to less than 8-10 discrete values? We are going to apply the same logic here. Let's start out with 8 clusters and see what kind of results we get.</p>\n<div class=\"highlight\"><pre><span></span><span class=\"n\">cluster_results</span> <span class=\"o\">=</span> <span class=\"n\">kmeans_cluster</span><span class=\"p\">(</span><span class=\"n\">vehicle_clusters</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">)</span>\n<span class=\"n\">cluster_summary</span> <span class=\"o\">=</span> <span class=\"n\">summarize_clustering</span><span class=\"p\">(</span><span class=\"n\">cluster_results</span><span class=\"p\">)</span>\n</pre></div>\n<p>After running the couple of lines of code above, your <code>cluster_summary</code> should look similar to the following.</p>\n\n<p><img alt=\"Silvrback blog image\" class=\"sb_float_center\" src=\"https://silvrback.s3.amazonaws.com/uploads/5a920c7e-789b-4923-bdc9-8c98a10e4a0f/8_clusters.png\" /></p>\n\n<p>By looking at the Count column, you can tell that there are some clusters that have significantly more records in them (ex. Cluster 7) and others that have significantly fewer (ex. Cluster 3). Other than that, though, it is difficult to notice anything informative about the summary. I don't know about you, but to me, the rest of the summary just looks like a bunch of decimals in a table.</p>\n\n<p>This is a prime opportunity to use a visualization to discover insights faster. With just a couple import statements and a single line of code, we can light this summary up in a heatmap so that we can see the contrast between all those decimals and between the different clusters.</p>\n<div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">matplotlib.pyplot</span> <span class=\"kn\">as</span> <span class=\"nn\">plt</span>\n<span class=\"kn\">import</span> <span class=\"nn\">seaborn</span> <span class=\"kn\">as</span> <span class=\"nn\">sns</span>\n\n<span class=\"n\">sns</span><span class=\"o\">.</span><span class=\"n\">heatmap</span><span class=\"p\">(</span><span class=\"n\">cluster_summary</span><span class=\"p\">[</span><span class=\"n\">cluster_columns</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">transpose</span><span class=\"p\">(),</span> <span class=\"n\">annot</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n</pre></div>\n<p><img alt=\"Silvrback blog image\" class=\"sb_float_center\" src=\"https://silvrback.s3.amazonaws.com/uploads/005f29c0-88cc-4bf4-bfa6-d227b8157498/8_cluster_heatmap.png\" /></p>\n\n<p>In this heatmap, the rows represent the features and the columns represent the clusters, so we can compare how similar or differently columns look to each other. Our goal for clustering these features is to ultimately create meaningful categories out of the clusters, so we want to get to the point where we can clearly distinguish one from the others. This heatmap allows us to do this quickly and visually.</p>\n\n<p>With this goal in mind, it is apparent that we probably have too many clusters because:</p>\n\n<ul>\n<li> Clusters 3, 4, and 7 look pretty similar</li>\n<li>Clusters 2 and 5 look similar as well</li>\n<li>Clusters 0 and 6 are also a little close for comfort</li>\n</ul>\n\n<p>From the way our heatmap currently looks, I'm willing to bet that we can cut the number of clusters in half and get clearer boundaries. Let's re-run the clustering, summary, and heatmap code for 4 clusters and see what kind of results we get.</p>\n<div class=\"highlight\"><pre><span></span><span class=\"n\">cluster_results</span> <span class=\"o\">=</span> <span class=\"n\">kmeans_cluster</span><span class=\"p\">(</span><span class=\"n\">vehicle_clusters</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"n\">cluster_summary</span> <span class=\"o\">=</span> <span class=\"n\">summarize_clustering</span><span class=\"p\">(</span><span class=\"n\">cluster_results</span><span class=\"p\">)</span>\n\n<span class=\"n\">sns</span><span class=\"o\">.</span><span class=\"n\">heatmap</span><span class=\"p\">(</span><span class=\"n\">cluster_summary</span><span class=\"p\">[</span><span class=\"n\">cluster_columns</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">transpose</span><span class=\"p\">(),</span> <span class=\"n\">annot</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n</pre></div>\n<p><img alt=\"Silvrback blog image\" class=\"sb_float_center\" src=\"https://silvrback.s3.amazonaws.com/uploads/4fe18749-0d32-45b7-a192-32c568177352/4_cluster_heatmap.png\" /></p>\n\n<p>These clusters look more distinct, don't they? Clusters 1 and 3 look like they are polar opposites of each other, cluster 0 looks like it’s pretty well balanced across all the features, and cluster 2 looks like it’s about half-way between Cluster 0 and Cluster 1.</p>\n\n<p>We now have a good number of clusters, but we still have a problem. It is difficult to remember what clusters 0, 1, 2, and 3 <em>mean</em>, so as a next step, I like to assign descriptive names to the clusters based on their properties. In order to do this, we need to look at the levels of each feature for each cluster and come up with intuitive natural language descriptions for them. You can have some fun and can get as creative as you want here, but just keep in mind that the objective is for you to be able to remember the characteristics of whatever label you assign to the clusters.</p>\n\n<ul>\n<li>Cluster 1 vehicles seem to have large engines that consume a lot of fuel, process it inefficiently, produce a lot of emissions, and cost a lot to fill up. I'm going to label them <em>Large Inefficient</em>.</li>\n<li>Cluster 3 vehicles have small, fuel efficient engines that don't produce a lot of emissions and are relatively inexpensive to fill up. I'm going to label them <em>Small Very Efficient</em>.</li>\n<li>Cluster 0 vehicles are fairly balanced across every category, so I'm going to label them <em>Midsized Balanced</em>.</li>\n<li>Cluster 2 vehicles have large engines but are more moderately efficient than the vehicles in Cluster 1, so I'm going to label them <em>Large Moderately Efficient</em>.</li>\n</ul>\n\n<p>Now that we have come up with these descriptive names for our clusters, let's add a <em>Cluster Name</em> column to our <code>cluster_results</code> data frame, and then copy the cluster names over to our original <code>vehicles</code> data frame.</p>\n<div class=\"highlight\"><pre><span></span><span class=\"n\">cluster_results</span><span class=\"p\">[</span><span class=\"s1\">'Cluster Name'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">''</span>\n<span class=\"n\">cluster_results</span><span class=\"p\">[</span><span class=\"s1\">'Cluster Name'</span><span class=\"p\">][</span><span class=\"n\">cluster_results</span><span class=\"p\">[</span><span class=\"s1\">'Cluster'</span><span class=\"p\">]</span><span class=\"o\">==</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'Midsized Balanced'</span>\n<span class=\"n\">cluster_results</span><span class=\"p\">[</span><span class=\"s1\">'Cluster Name'</span><span class=\"p\">][</span><span class=\"n\">cluster_results</span><span class=\"p\">[</span><span class=\"s1\">'Cluster'</span><span class=\"p\">]</span><span class=\"o\">==</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'Large Inefficient'</span>\n<span class=\"n\">cluster_results</span><span class=\"p\">[</span><span class=\"s1\">'Cluster Name'</span><span class=\"p\">][</span><span class=\"n\">cluster_results</span><span class=\"p\">[</span><span class=\"s1\">'Cluster'</span><span class=\"p\">]</span><span class=\"o\">==</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'Large Moderately Efficient'</span>\n<span class=\"n\">cluster_results</span><span class=\"p\">[</span><span class=\"s1\">'Cluster Name'</span><span class=\"p\">][</span><span class=\"n\">cluster_results</span><span class=\"p\">[</span><span class=\"s1\">'Cluster'</span><span class=\"p\">]</span><span class=\"o\">==</span><span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'Small Very Efficient'</span>\n\n<span class=\"n\">vehicles</span> <span class=\"o\">=</span> <span class=\"n\">vehicles</span><span class=\"o\">.</span><span class=\"n\">reset_index</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">drop</span><span class=\"p\">(</span><span class=\"s1\">'index'</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">vehicles</span><span class=\"p\">[</span><span class=\"s1\">'Cluster Name'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">cluster_results</span><span class=\"p\">[</span><span class=\"s1\">'Cluster Name'</span><span class=\"p\">]</span>\n</pre></div>\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>In this post, we examined several ways to prepare a data set for exploratory analysis. First, we looked at the categorical variables we had and attempted to find opportunities to roll them up into higher-level categories. After that, we converted some of our continuous variables into categorical ones by binning them into quintiles based on how relatively high or low their values were. Finally, we used clustering to efficiently create categories that automatically take multiple fields into consideration. The result of all this preparation is that we now have several columns containing meaningful categories that will provide different perspectives of our data and allow us to acquire as many insights as possible.</p>\n\n<p>Now that we have these meaningful categories, our data set is in really good shape, which means that we can move on to the next phase of our data exploration framework. In the next post, we will cover the first two stages of the Explore Phase and demonstrate various ways to visually aggregate, pivot, and identify relationships between fields in our data. Make sure to subscribe to the DDL blog so that you get notified when we publish it!</p>\n\n<p><em>District Data Labs provides data science <a href=\"http://www.districtdatalabs.com/consulting/\">consulting</a> and <a href=\"http://www.districtdatalabs.com/training/\">corporate training</a> services. We work with companies and teams of all sizes, helping them make their operations more data-driven and enhancing the analytical abilities of their employees. Interested in working with us? <a href=\"mailto:contact@districtdatalabs.com?subject=Consulting%20and%20Corporate%20Training%20Services&body=Hello!%20I'm%20interested%20in%20learning%20more%20about%20your%20data%20science%20consulting%20and%20corporate%20training%20offerings.\">Let us know</a>!</em></p>\n"
}