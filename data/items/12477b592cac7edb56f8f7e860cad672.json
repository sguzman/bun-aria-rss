{
  "title": "Science Flask is released",
  "link": "",
  "published": "2017-04-30T22:16:00+01:00",
  "updated": "2017-04-30T22:16:00+01:00",
  "id": "https://danielhomola.com/phd/science-flask-is-released",
  "content": "<h2 id=\"why-use-scienceflask\">Why use ScienceFlask?</h2>\n\n<p>Building <a href=\"/corrmapper\">CorrMapper</a> was one of the hardest things I’ve ever done. I had no idea how many pieces I will need to fit together to turn my my bioinformatics pipeline into a functioning web-app.</p>\n\n<p>I learned a lot from it, and I wanted to save the pain and the steep learning curve for my fellow scientist colleagues, who might not want to spend a full week of their life on trying to get an upload form to work properly. Yeah.. those were fun times..</p>\n\n<p>Here’s the simple idea behind Science Flask:</p>\n\n<p><a href=\"/assets/images/science_flask_pipeline.png\"><img src=\"/assets/images/science_flask_pipeline.png\" alt=\"Science Flask flowchart\" /></a></p>\n\n<p>Notice how everything in blue is non-specific to any scientific app. So then why are we keep re-developing it? Ideally, scientists need not to work on anything else than the green bit. Then they can plug that into Science Flask with a few hours of work and have their tool online in a day or two, instead of weeks.</p>\n\n<p>Here’s the <a href=\"https://github.com/danielhomola/science_flask\">GitHub repo</a> with some <a href=\"https://github.com/danielhomola/science_flask/blob/master/README.md\">lengthy docs</a> about the structure of the project. I also wrote a <a href=\"https://github.com/danielhomola/science_flask/blob/master/deployment.md\">step-by-step guide to deploy your Science Flask app on an AWS</a>.</p>\n\n<h2 id=\"features\">Features</h2>\n\n<p>Science Flask comes batteries included.</p>\n<h3 id=\"user-management\">User management</h3>\n\n<p>User’s are only allowed to register with a valid academic email address. This is to ensure that your tool is mainly used for academic and research purposes and not for commercial uses. Furthermore it comes with all the rest of it: email addresses are confirmed, users can change passwords, get password reset request if they forgot it, etc.</p>\n\n<p>Thanks Flask-Security, you can also assign roles to different users and easily build custom user management logic. For example you might decide that certain users can only use a part of the application, while other users can access all features.</p>\n\n<h3 id=\"sql-database\">SQL database</h3>\n\n<p>All user, study and analysis data is stored in an SQLite by defaul. This can be changed to MySQL or Postgre SQL easily and the same code will work, thanks to <code>SQLAlchemy</code>. Thanks to Flask-Migrate if you change your app’s model, you can easily upgrade your database even when your app is deployed.</p>\n\n<h3 id=\"admin-panel\">Admin panel</h3>\n\n<p>The model (database tables and relations between them) of your app can be easily edited online, from anywhere using CRUD operations. Thanks to Flask-Admin, setting up an admin user who can edit users, and other databases is as simple as modifying 2 lines in the config file.</p>\n\n<h3 id=\"upload-form\">Upload form</h3>\n\n<p>Getting the data from the user sounds super simple but you’d be surprised how long does it take to get a decent upload page. Also it’s very easy to build complex form logic from the bricks Science- Flask provides.</p>\n\n<h3 id=\"profile-page\">Profile page</h3>\n\n<p>This collects the uploaded studies of each user and let’s them submit analysis on their data.</p>\n\n<h3 id=\"analysis-form\">Analysis form</h3>\n\n<p>Just like with the upload form, you can build custom logic to ensure you get the parameters from the user just right. The analysis job is then submitted to the backend. This uses <code>Celery</code>. Once the analysis is ready, the user is notified in email. Then they can download or check out their results online.</p>\n\n<h3 id=\"logging\">Logging</h3>\n\n<p>All errors and warning messages are sent to the admins via email. All analysis exceptions and errors could be catched so that the program crashes gracefully, letting the user know what happened.</p>\n\n<h3 id=\"runs-on-bootstrapcss\">Runs on Bootstrap.css</h3>\n\n<p>Modern, mobile friendly, responsive. Bootstrap makes writing good looking HTML pages dead easy.</p>\n\n<h3 id=\"tool-tips-and-tours\">Tool tips and tours</h3>\n\n<p>Explain to the user how your application works with interactive tours (available on all the above listed pages) and tooltips.</p>\n\n<h3 id=\"python3\">Python3</h3>\n\n<p>The whole project is written in Python3.5 (because it’s 2017).</p>\n\n<h2 id=\"feedback\">Feedback</h2>\n\n<p>I hope it’ll be useful for someone. I definitely would have loved something like this when I started develop CorrMapper. Also if you have an idea to improve it, then please contribute to the project!</p>",
  "author": {
    "name": "danielhomola"
  },
  "category": [
    "",
    "",
    "",
    ""
  ],
  "summary": "An extensible modular web-app template for online scientific research tools"
}