{
  "title": "ReIntroducing Into",
  "link": "",
  "updated": "2015-02-03T00:00:00+00:00",
  "id": "https://mrocklin.github.io/blog/work/2015/02/03/Into",
  "content": "<p><em>This work is supported by <a href=\"http://continuum.io\">Continuum Analytics</a>\nand the <a href=\"http://www.darpa.mil/program/XDATA\">XDATA Program</a>\nas part of the <a href=\"http://blaze.pydata.org\">Blaze Project</a></em></p>\n\n<p><strong>tl;dr <code class=\"language-plaintext highlighter-rouge\">into</code> efficiently migrates data between formats.</strong></p>\n\n<h2 id=\"motivation\">Motivation</h2>\n\n<p>We spend a lot of time migrating data from common interchange formats, like\n<code class=\"language-plaintext highlighter-rouge\">CSV</code>, to efficient computation formats like an array, a database or binary\nstore.  Worse, many don’t migrate data to efficient formats because they don’t\nknow how or can’t manage the particular migration process for their tools.</p>\n\n<p>Your choice of data format is important.  It strongly impacts performance (10x\nis a good rule of thumb) and who can easily use and interpret your data.</p>\n\n<p>When advocating for <a href=\"http://continuum.io/open-source/blaze\">Blaze</a> I often say\n“Blaze can help you query your data in a variety of formats.”  This assumes\nthat you’re able to actually get it in to that format.</p>\n\n<h2 id=\"enter-the-into-project\">Enter the <code class=\"language-plaintext highlighter-rouge\">into</code> project</h2>\n\n<p>The <code class=\"language-plaintext highlighter-rouge\">into</code> function efficiently migrates data between formats.\nThese formats include both in-memory data structures like the following:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>list, set, tuple, Iterator\nnumpy.ndarray, pandas.DataFrame, dynd.array\nStreaming Sequences of any of the above\n</code></pre></div></div>\n\n<p>as well as persistent data living outside of Python like the following:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>CSV, JSON, line-delimited-JSON\nRemote versions of the above\nHDF5 (both standard and Pandas formatting), BColz, SAS\nSQL databases (anything supported by SQLAlchemy), Mongo\n</code></pre></div></div>\n\n<p>The <code class=\"language-plaintext highlighter-rouge\">into</code> project migrates data between any pair of these formats efficiently\nby using a network of pairwise conversions.  (visualized towards the bottom of\nthis post)</p>\n\n<h2 id=\"how-to-use-it\">How to use it</h2>\n\n<p>The <code class=\"language-plaintext highlighter-rouge\">into</code> function takes two arguments, a source and a target.  It moves data\nin the source to the target.  The source and target can take the following\nforms</p>\n\n<table>\n    <thead>\n    <tr>\n        <td> Target </td>\n        <td> Source </td>\n        <td> Example </td>\n    </tr>\n    </thead>\n    <tr>\n        <td> Object </td>\n        <td> Object </td>\n        <td> A particular DataFrame or list </td>\n    </tr>\n    <tr>\n        <td> String </td>\n        <td> String </td>\n        <td> 'file.csv', 'postgresql://hostname::tablename' </td>\n    </tr>\n    <tr>\n        <td> Type </td>\n        <td>        </td>\n        <td> Like list or pd.DataFrame </td>\n    </tr>\n</table>\n\n<p>So the following would be valid calls to <code class=\"language-plaintext highlighter-rouge\">into</code></p>\n\n<figure class=\"highlight\">\n  <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">into</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">,</span> <span class=\"n\">df</span><span class=\"p\">)</span>  <span class=\"c1\"># create new list from Pandas DataFrame\n</span><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">into</span><span class=\"p\">([],</span> <span class=\"n\">df</span><span class=\"p\">)</span>  <span class=\"c1\"># append onto existing list\n</span><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">into</span><span class=\"p\">(</span><span class=\"s\">'myfile.json'</span><span class=\"p\">,</span> <span class=\"n\">df</span><span class=\"p\">)</span>  <span class=\"c1\"># Dump dataframe to line-delimited JSON\n</span><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">into</span><span class=\"p\">(</span><span class=\"n\">Iterator</span><span class=\"p\">,</span> <span class=\"s\">'myfiles.*.csv'</span><span class=\"p\">)</span> <span class=\"c1\"># Stream through many CSV files\n</span><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">into</span><span class=\"p\">(</span><span class=\"s\">'postgresql://hostname::tablename'</span><span class=\"p\">,</span> <span class=\"n\">df</span><span class=\"p\">)</span>  <span class=\"c1\"># Migrate dataframe to Postgres\n</span><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">into</span><span class=\"p\">(</span><span class=\"s\">'postgresql://hostname::tablename'</span><span class=\"p\">,</span> <span class=\"s\">'myfile.*.csv'</span><span class=\"p\">)</span>  <span class=\"c1\"># Load CSVs to Postgres\n</span><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">into</span><span class=\"p\">(</span><span class=\"s\">'myfile.json'</span><span class=\"p\">,</span> <span class=\"s\">'postgresql://hostname::tablename'</span><span class=\"p\">)</span> <span class=\"c1\"># Dump Postgres to JSON\n</span><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">into</span><span class=\"p\">(</span><span class=\"n\">pd</span><span class=\"p\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">,</span> <span class=\"s\">'mongodb://hostname/db::collection'</span><span class=\"p\">)</span> <span class=\"c1\"># Dump Mongo to DataFrame</span></code></pre>\n</figure>\n\n<p>Note that <code class=\"language-plaintext highlighter-rouge\">into</code> is a single function.  We’re used to doing this with various\n<code class=\"language-plaintext highlighter-rouge\">to_csv</code>, <code class=\"language-plaintext highlighter-rouge\">from_sql</code> methods on various types.  The <code class=\"language-plaintext highlighter-rouge\">into</code> api is very small;\nHere is what you need in order to get started:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>$ pip install into\n</code></pre></div></div>\n\n<figure class=\"highlight\">\n  <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">into</span> <span class=\"kn\">import</span> <span class=\"n\">into</span></code></pre>\n</figure>\n\n<p><a href=\"https://github.com/ContinuumIO/into/\">See into on <code class=\"language-plaintext highlighter-rouge\">github</code></a></p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<p>We now show some of those same examples in more depth.</p>\n\n<p>Turn list into numpy array</p>\n\n<figure class=\"highlight\">\n  <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"n\">np</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">into</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"p\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">])</span>\n<span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">])</span></code></pre>\n</figure>\n\n<p>Load CSV file into Python list</p>\n\n<figure class=\"highlight\">\n  <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">into</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">,</span> <span class=\"s\">'accounts.csv'</span><span class=\"p\">)</span>\n<span class=\"p\">[(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s\">'Alice'</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">),</span>\n <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s\">'Bob'</span><span class=\"p\">,</span> <span class=\"mi\">200</span><span class=\"p\">),</span>\n <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s\">'Charlie'</span><span class=\"p\">,</span> <span class=\"mi\">300</span><span class=\"p\">),</span>\n <span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"s\">'Denis'</span><span class=\"p\">,</span> <span class=\"mi\">400</span><span class=\"p\">),</span>\n <span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"s\">'Edith'</span><span class=\"p\">,</span> <span class=\"mi\">500</span><span class=\"p\">)]</span></code></pre>\n</figure>\n\n<p>Translate CSV file into JSON</p>\n\n<figure class=\"highlight\">\n  <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">into</span><span class=\"p\">(</span><span class=\"s\">'accounts.json'</span><span class=\"p\">,</span> <span class=\"s\">'accounts.csv'</span><span class=\"p\">)</span></code></pre>\n</figure>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>$ head accounts.json\n{\"balance\": 100, \"id\": 1, \"name\": \"Alice\"}\n{\"balance\": 200, \"id\": 2, \"name\": \"Bob\"}\n{\"balance\": 300, \"id\": 3, \"name\": \"Charlie\"}\n{\"balance\": 400, \"id\": 4, \"name\": \"Denis\"}\n{\"balance\": 500, \"id\": 5, \"name\": \"Edith\"}\n</code></pre></div></div>\n\n<p>Translate line-delimited JSON into a Pandas DataFrame</p>\n\n<figure class=\"highlight\">\n  <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">pandas</span> <span class=\"k\">as</span> <span class=\"n\">pd</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">into</span><span class=\"p\">(</span><span class=\"n\">pd</span><span class=\"p\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">,</span> <span class=\"s\">'accounts.json'</span><span class=\"p\">)</span>\n   <span class=\"n\">balance</span>  <span class=\"nb\">id</span>      <span class=\"n\">name</span>\n<span class=\"mi\">0</span>      <span class=\"mi\">100</span>   <span class=\"mi\">1</span>     <span class=\"n\">Alice</span>\n<span class=\"mi\">1</span>      <span class=\"mi\">200</span>   <span class=\"mi\">2</span>       <span class=\"n\">Bob</span>\n<span class=\"mi\">2</span>      <span class=\"mi\">300</span>   <span class=\"mi\">3</span>   <span class=\"n\">Charlie</span>\n<span class=\"mi\">3</span>      <span class=\"mi\">400</span>   <span class=\"mi\">4</span>     <span class=\"n\">Denis</span>\n<span class=\"mi\">4</span>      <span class=\"mi\">500</span>   <span class=\"mi\">5</span>     <span class=\"n\">Edith</span></code></pre>\n</figure>\n\n<h2 id=\"how-does-it-work\">How does it work?</h2>\n\n<p><img src=\"https://mrocklin.github.io/blog/images/star.png\" align=\"right\" width=\"300px\" /></p>\n\n<p>This is challenging.  Robust and efficient conversions between any two pairs of\nformats is fraught with special cases and bizarre libraries.  The common\nsolution is to convert through a common format like a DataFrame, or streaming\nin-memory lists, dicts, etc. (see <a href=\"http://dat-data.com/\"><code class=\"language-plaintext highlighter-rouge\">dat</code></a>)\nor through a serialization format like\n<a href=\"https://developers.google.com/protocol-buffers/\">ProtoBuf</a> or\n<a href=\"https://thrift.apache.org/\">Thrift</a>.  These are excellent options and often\nwhat you want.  Sometimes however this can be slow, particularly when dealing\nwith live computational systems or with finicky storage solutions.</p>\n\n<p>Consider for example, migrating between a <code class=\"language-plaintext highlighter-rouge\">numpy.recarray</code> and a\n<code class=\"language-plaintext highlighter-rouge\">pandas.DataFrame</code>.  We can migrate this data very quickly in place.  The bytes\nof data don’t need to change, only the metadata surrounding them.  We don’t\nneed to serialize to an interchange format or translate to intermediate\npure Python objects.</p>\n\n<p>Consider migrating data from a CSV file to a PostgreSQL database.  Using\nPython iterators through SQLAlchemy we rarely exceed migration speeds greater\nthan 2000 records per second.  However using direct CSV loaders native to\nPostgreSQL we can achieve speeds greater than 50000 records per second.  This\nis the difference between an overnight job and a cup of coffee.  However this\nrequires that we’re flexible enough to use special code in special situations.</p>\n\n<p><em>Expert pairwise interactions are often an order of magnitude faster than\ngeneric solutions.</em></p>\n\n<p>Into is a network of these pairwise migrations.  We visualize that network\nbelow:</p>\n\n<figure>\n  <p><a href=\"https://raw.githubusercontent.com/ContinuumIO/into/master/docs/images/conversions.png\">\n    <img src=\"https://raw.githubusercontent.com/ContinuumIO/into/master/docs/images/conversions.png\" />\n</a></p>\n  <figcaption>\n    <p>Into’s decentralized migration scheme.  Complex but powerful&lt;/figcaption&gt;\n&lt;/figure&gt;</p>\n\n    <p>Each node is a data format.  Each directed edge is a function that transforms\ndata between two formats.  A single call to <code class=\"language-plaintext highlighter-rouge\">into</code> may traverse multiple edges\nand multiple intermediate formats.  For example, we when migrate a CSV file to\na Mongo database we might take the following route:</p>\n\n    <ul>\n      <li>Load in to a <code class=\"language-plaintext highlighter-rouge\">DataFrame</code> (<code class=\"language-plaintext highlighter-rouge\">pandas.read_csv</code>)</li>\n      <li>Convert to <code class=\"language-plaintext highlighter-rouge\">np.recarray</code> (<code class=\"language-plaintext highlighter-rouge\">DataFrame.to_records</code>)</li>\n      <li>Then to a Python <code class=\"language-plaintext highlighter-rouge\">Iterator</code> (<code class=\"language-plaintext highlighter-rouge\">np.ndarray.tolist</code>)</li>\n      <li>Finally to Mongo (<code class=\"language-plaintext highlighter-rouge\">pymongo.Collection.insert</code>)</li>\n    </ul>\n\n    <p>Alternatively we could write a special function that uses MongoDB’s native CSV\nloader and shortcut this entire process with a direct edge <code class=\"language-plaintext highlighter-rouge\">CSV -&gt; Mongo</code>.</p>\n\n    <p>To find the most efficient route we weight the edges of this network with\nrelative costs (measured ad-hoc.)  We use <code class=\"language-plaintext highlighter-rouge\">networkx</code> to find the shortest path\nbefore we start the migration.  If for some reason an edge fails (raises\n<code class=\"language-plaintext highlighter-rouge\">NotImplementedError</code>) we can reroute automatically.  In this way we’re both\nefficient and robust to failure.</p>\n\n    <p>Note that we color some nodes <em>red</em>.  These nodes can be <em>larger than memory</em>.\nWhen we migrate between two red nodes (both the input and output may be larger\nthan memory) then we limit our path to the red subgraph to ensure that we don’t\nblow up mid-migration.  One format to note is <code class=\"language-plaintext highlighter-rouge\">chunks(...)</code> like\n<code class=\"language-plaintext highlighter-rouge\">chunks(DataFrame)</code> which is an iterable of in-memory <code class=\"language-plaintext highlighter-rouge\">DataFrames</code>.  This\nconvenient meta-format allows us to use compact data structures like numpy\narrays and pandas DataFrames on large data while keeping only a few tens of\nmegabytes in memory at a time.</p>\n\n    <p>The networked approach allows developers to write specialized code for special\nsituations and know that this code will only be used in the right situation.\nThis approach allows us to handle a very complex problem in an isolated and\nseparable manner.  The central dispatching system keeps us sane.</p>\n\n    <h2 id=\"history\">History</h2>\n\n    <p>I wrote about into <a href=\"https://mrocklin.github.io/blog/work/2014-09-01-Blaze-into/\">long ago</a> in\nconnection to Blaze.  I then promptly shut up about it.  This was because the\nold implementation (before the network approach) was difficult to\nextend/maintain and wasn’t ready for prime-time.</p>\n\n    <p>I am <em>very happy</em> with this network.  Unexpected applications very often <em>just\nwork</em> and into is now ready for prime-time.  It’s also available independently\nfrom Blaze, both via <a href=\"http://continuum.io/open-source/conda\"><code class=\"language-plaintext highlighter-rouge\">conda</code></a> and via <code class=\"language-plaintext highlighter-rouge\">pip</code>.  The\nmajor dependencies are NumPy, Pandas, and NetworkX so it’s relatively\nlightweight for most people who read my blog.  If you want to take advantage of\nsome of the higher performing formats, like <code class=\"language-plaintext highlighter-rouge\">HDF5</code>, you’ll need to install\nthose libraries as well (pro-tip, use <a href=\"http://continuum.io/open-source/conda\"><code class=\"language-plaintext highlighter-rouge\">conda</code></a>).</p>\n\n    <h2 id=\"how-do-i-get-started\">How do I get started?</h2>\n\n    <p>You should download a recent version.</p>\n\n    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>$ pip install --upgrade git+https://github.com/ContinuumIO/into\nor\n$ conda install into --channel blaze\n</code></pre></div>    </div>\n\n    <p>You then might want to go through the first half of\n<a href=\"https://github.com/ContinuumIO/blaze-tutorial#into\">this tutorial</a></p>\n\n    <p>Or <a href=\"http://into.readthedocs.org/en/latest/\">read the docs</a>.</p>\n\n    <p>Or just give it a shot without reading anything.  My hope is that the interface\nis simple enough (just one function!) that users can pick it up naturally.  If\nyou run in to issues then I’d love to hear about them at\n<code class=\"language-plaintext highlighter-rouge\">blaze-dev@continuum.io</code></p>\n  </figcaption>\n</figure>"
}