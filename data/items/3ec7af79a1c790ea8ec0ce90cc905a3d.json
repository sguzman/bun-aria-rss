{
  "title": "Streaming Analytics",
  "link": "",
  "updated": "2014-07-04T00:00:00+00:00",
  "id": "https://mrocklin.github.io/blog/work/2014/07/04/Streaming-Analytics",
  "content": "<p><strong>tl;dr: We demonstrate data workflows with Python data structures and PyToolz.\nWe also introduce <code class=\"language-plaintext highlighter-rouge\">join</code>, a new operation in <code class=\"language-plaintext highlighter-rouge\">toolz</code>.</strong></p>\n\n<h2 id=\"prelude\">Prelude</h2>\n\n<p>In my last two posts I show that <a href=\"http://mrocklin.github.com/blog/work/2014/05/01/Fast-Data-Structures\">Python data structures are\nfast</a> and\nthat\n<a href=\"http://mrocklin.github.com/blog/work/2014/05/01/Introducing-CyToolz\">CyToolz</a>,\nan implementation of <a href=\"http://toolz.readthedocs.org\"><code class=\"language-plaintext highlighter-rouge\">toolz</code></a> in Cython,\nachieves Java speeds on standard Python core data structures like <code class=\"language-plaintext highlighter-rouge\">dict</code>s,\n<code class=\"language-plaintext highlighter-rouge\">list</code>s, and <code class=\"language-plaintext highlighter-rouge\">tuple</code>s.  As a reminder, <code class=\"language-plaintext highlighter-rouge\">toolz</code> provides functions like\n<code class=\"language-plaintext highlighter-rouge\">groupby</code></p>\n\n<figure class=\"highlight\">\n  <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">toolz</span> <span class=\"kn\">import</span> <span class=\"n\">groupby</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">names</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">'Alice'</span><span class=\"p\">,</span> <span class=\"s\">'Bob'</span><span class=\"p\">,</span> <span class=\"s\">'Charlie'</span><span class=\"p\">,</span> <span class=\"s\">'Dan'</span><span class=\"p\">,</span> <span class=\"s\">'Edith'</span><span class=\"p\">,</span> <span class=\"s\">'Frank'</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">groupby</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">,</span> <span class=\"n\">names</span><span class=\"p\">)</span>\n<span class=\"p\">{</span><span class=\"mi\">3</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">'Bob'</span><span class=\"p\">,</span> <span class=\"s\">'Dan'</span><span class=\"p\">],</span>\n <span class=\"mi\">5</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">'Alice'</span><span class=\"p\">,</span> <span class=\"s\">'Edith'</span><span class=\"p\">,</span> <span class=\"s\">'Frank'</span><span class=\"p\">],</span>\n <span class=\"mi\">7</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">'Charlie'</span><span class=\"p\">]}</span></code></pre>\n</figure>\n\n<p>I always give this example when talking about <code class=\"language-plaintext highlighter-rouge\">toolz</code>.  It often spurs the\nfollowing question:</p>\n\n<p><em>That looks like <code class=\"language-plaintext highlighter-rouge\">GROUP BY</code> from SQL.  In what other ways does <code class=\"language-plaintext highlighter-rouge\">toolz</code> let me\ndo SQL-like operations in Python?</em></p>\n\n<p>My answer for this is to <em>go look at Pandas</em> which really does a wonderful job\nat in-memory data analytics.  Toolz targets functional programming more than it\ntargets data analytics.  Still this question is common enough to warrant a\nblogpost.  The following is my stock answer on how to use pure Python and\n<code class=\"language-plaintext highlighter-rouge\">toolz</code> (or <code class=\"language-plaintext highlighter-rouge\">cytoolz</code>) for streaming data analytic workflows like selections,\nsplit-apply-combine, and joins.  I’ll note throughout when operations are\nstreaming (can support datasets bigger than memory) or not.  This is one of the\nfew ways in which analysis with <code class=\"language-plaintext highlighter-rouge\">toolz</code> might be preferred over <code class=\"language-plaintext highlighter-rouge\">pandas</code>.</p>\n\n<h1 id=\"streaming-analytics\">Streaming Analytics</h1>\n\n<p>The toolz functions can be composed to analyze large streaming datasets.\nToolz supports common analytics patterns like the selection, grouping,\nreduction, and joining of data through pure composable functions. These\nfunctions often have analogs to familiar operations in other data\nanalytics platforms like SQL or Pandas.</p>\n\n<p>Throughout this post we’ll use this simple dataset of accounts.</p>\n\n<figure class=\"highlight\">\n  <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\">#           id, name, balance, gender\n</span><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">accounts</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s\">'Alice'</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"s\">'F'</span><span class=\"p\">),</span>\n<span class=\"p\">...</span>             <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s\">'Bob'</span><span class=\"p\">,</span> <span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"s\">'M'</span><span class=\"p\">),</span>\n<span class=\"p\">...</span>             <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s\">'Charlie'</span><span class=\"p\">,</span> <span class=\"mi\">150</span><span class=\"p\">,</span> <span class=\"s\">'M'</span><span class=\"p\">),</span>\n<span class=\"p\">...</span>             <span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"s\">'Dennis'</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"s\">'M'</span><span class=\"p\">),</span>\n<span class=\"p\">...</span>             <span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"s\">'Edith'</span><span class=\"p\">,</span> <span class=\"mi\">300</span><span class=\"p\">,</span> <span class=\"s\">'F'</span><span class=\"p\">)]</span></code></pre>\n</figure>\n\n<h2 id=\"selecting-with-map-and-filter\">Selecting with <code class=\"language-plaintext highlighter-rouge\">map</code> and <code class=\"language-plaintext highlighter-rouge\">filter</code></h2>\n\n<p>Simple projection and linear selection from a sequence is achieved\nthrough the standard functions <code class=\"language-plaintext highlighter-rouge\">map</code> and <code class=\"language-plaintext highlighter-rouge\">filter</code>.</p>\n\n<figure class=\"highlight\">\n  <pre><code class=\"language-sql\" data-lang=\"sql\"><span class=\"k\">SELECT</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">balance</span>\n<span class=\"k\">FROM</span> <span class=\"n\">accounts</span>\n<span class=\"k\">WHERE</span> <span class=\"n\">balance</span> <span class=\"o\">&gt;</span> <span class=\"mi\">150</span><span class=\"p\">;</span></code></pre>\n</figure>\n\n<p>These functions correspond to the SQL commands <code class=\"language-plaintext highlighter-rouge\">SELECT</code> and <code class=\"language-plaintext highlighter-rouge\">WHERE</code>.</p>\n\n<figure class=\"highlight\">\n  <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">toolz.curried</span> <span class=\"kn\">import</span> <span class=\"n\">pipe</span><span class=\"p\">,</span> <span class=\"nb\">map</span><span class=\"p\">,</span> <span class=\"nb\">filter</span><span class=\"p\">,</span> <span class=\"n\">get</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">pipe</span><span class=\"p\">(</span><span class=\"n\">accounts</span><span class=\"p\">,</span> <span class=\"nb\">filter</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">balance</span><span class=\"p\">,</span> <span class=\"n\">gender</span><span class=\"p\">):</span> <span class=\"n\">balance</span> <span class=\"o\">&gt;</span> <span class=\"mi\">150</span><span class=\"p\">),</span>\n<span class=\"p\">...</span>                <span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"n\">get</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">])),</span>\n<span class=\"p\">...</span>                <span class=\"nb\">list</span><span class=\"p\">)</span></code></pre>\n</figure>\n\n<p><em>note: this uses the <a href=\"http://toolz.readthedocs.org/en/latest/curry.html\">curried</a> versions of <code class=\"language-plaintext highlighter-rouge\">map</code> and <code class=\"language-plaintext highlighter-rouge\">reduce</code>.</em></p>\n\n<p>Of course, these operations are also well supported with standard\nlist/generator comprehension syntax. This syntax is more often used and\ngenerally considered to be more Pythonic.</p>\n\n<figure class=\"highlight\">\n  <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"p\">[(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">balance</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">balance</span><span class=\"p\">,</span> <span class=\"n\">gender</span><span class=\"p\">)</span> <span class=\"ow\">in</span> <span class=\"n\">accounts</span>\n<span class=\"p\">...</span>                  <span class=\"k\">if</span> <span class=\"n\">balance</span> <span class=\"o\">&gt;</span> <span class=\"mi\">150</span><span class=\"p\">]</span></code></pre>\n</figure>\n\n<h2 id=\"split-apply-combine-with-groupby-and-reduceby\">Split-apply-combine with <code class=\"language-plaintext highlighter-rouge\">groupby</code> and <code class=\"language-plaintext highlighter-rouge\">reduceby</code></h2>\n\n<p>We separate split-apply-combine operations into the following two\nconcepts</p>\n\n<ol>\n  <li>Split the dataset into groups by some property</li>\n  <li>Reduce each of the groups with some aggregation function</li>\n</ol>\n\n<p>Toolz supports this common workflow with</p>\n\n<ol>\n  <li>a simple in-memory solution</li>\n  <li>a more sophisticated streaming solution.</li>\n</ol>\n\n<h3 id=\"in-memory-split-apply-combine\">In Memory Split-Apply-Combine</h3>\n\n<p>The in-memory solution depends on the functions\n<a href=\"http://toolz.readthedocs.org/en/latest/api.html#toolz.itertoolz.groupby\"><code class=\"language-plaintext highlighter-rouge\">groupby</code></a>\nto split, and\n<a href=\"http://toolz.readthedocs.org/en/latest/api.html#toolz.itertoolz.valmap\"><code class=\"language-plaintext highlighter-rouge\">valmap</code></a>\nto apply/combine.</p>\n\n<figure class=\"highlight\">\n  <pre><code class=\"language-sql\" data-lang=\"sql\"><span class=\"k\">SELECT</span> <span class=\"n\">gender</span><span class=\"p\">,</span> <span class=\"k\">SUM</span><span class=\"p\">(</span><span class=\"n\">balance</span><span class=\"p\">)</span>\n<span class=\"k\">FROM</span> <span class=\"n\">accounts</span>\n<span class=\"k\">GROUP</span> <span class=\"k\">BY</span> <span class=\"n\">gender</span><span class=\"p\">;</span></code></pre>\n</figure>\n\n<p>We first show <code class=\"language-plaintext highlighter-rouge\">groupby</code> and <code class=\"language-plaintext highlighter-rouge\">valmap</code> separately to show the intermediate\ngroups.</p>\n\n<figure class=\"highlight\">\n  <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">toolz</span> <span class=\"kn\">import</span> <span class=\"n\">groupby</span><span class=\"p\">,</span> <span class=\"n\">valmap</span><span class=\"p\">,</span> <span class=\"n\">compose</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">toolz.curried</span> <span class=\"kn\">import</span> <span class=\"n\">get</span><span class=\"p\">,</span> <span class=\"n\">pluck</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">groupby</span><span class=\"p\">(</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"n\">accounts</span><span class=\"p\">)</span>\n<span class=\"p\">{</span><span class=\"s\">'F'</span><span class=\"p\">:</span> <span class=\"p\">[(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s\">'Alice'</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"s\">'F'</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"s\">'Edith'</span><span class=\"p\">,</span> <span class=\"mi\">300</span><span class=\"p\">,</span> <span class=\"s\">'F'</span><span class=\"p\">)],</span>\n <span class=\"s\">'M'</span><span class=\"p\">:</span> <span class=\"p\">[(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s\">'Bob'</span><span class=\"p\">,</span> <span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"s\">'M'</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s\">'Charlie'</span><span class=\"p\">,</span> <span class=\"mi\">150</span><span class=\"p\">,</span> <span class=\"s\">'M'</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"s\">'Dennis'</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"s\">'M'</span><span class=\"p\">)]}</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">valmap</span><span class=\"p\">(</span><span class=\"n\">compose</span><span class=\"p\">(</span><span class=\"nb\">sum</span><span class=\"p\">,</span> <span class=\"n\">pluck</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)),</span>\n<span class=\"p\">...</span>        <span class=\"n\">_</span><span class=\"p\">)</span>\n<span class=\"p\">{</span><span class=\"s\">'F'</span><span class=\"p\">:</span> <span class=\"mi\">400</span><span class=\"p\">,</span> <span class=\"s\">'M'</span><span class=\"p\">:</span> <span class=\"mi\">400</span><span class=\"p\">}</span></code></pre>\n</figure>\n\n<p>Then we chain them together into a single computation</p>\n\n<figure class=\"highlight\">\n  <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">pipe</span><span class=\"p\">(</span><span class=\"n\">accounts</span><span class=\"p\">,</span> <span class=\"n\">groupby</span><span class=\"p\">(</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)),</span>\n<span class=\"p\">...</span>                <span class=\"n\">valmap</span><span class=\"p\">(</span><span class=\"n\">compose</span><span class=\"p\">(</span><span class=\"nb\">sum</span><span class=\"p\">,</span> <span class=\"n\">pluck</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">))))</span>\n<span class=\"p\">{</span><span class=\"s\">'F'</span><span class=\"p\">:</span> <span class=\"mi\">400</span><span class=\"p\">,</span> <span class=\"s\">'M'</span><span class=\"p\">:</span> <span class=\"mi\">400</span><span class=\"p\">}</span></code></pre>\n</figure>\n\n<h3 id=\"streaming-split-apply-combine\">Streaming Split-Apply-Combine</h3>\n\n<p>The <code class=\"language-plaintext highlighter-rouge\">groupby</code> function collects the entire dataset in memory into a\ndictionary. While convenient, the <code class=\"language-plaintext highlighter-rouge\">groupby</code> operation is <em>not streaming</em>\nand so this approach is limited to datasets that can fit comfortably\ninto memory.</p>\n\n<p>Toolz achieves streaming split-apply-combine with\n<a href=\"http://toolz.readthedocs.org/en/latest/api.html#toolz.itertoolz.reduceby\">reduceby</a>,\na function that performs a simultaneous reduction on each group as the\nelements stream in. To understand this section you should first be\nfamiliar with the builtin function <code class=\"language-plaintext highlighter-rouge\">reduce</code>.</p>\n\n<p>The <code class=\"language-plaintext highlighter-rouge\">reduceby</code> operation takes a key function, like <code class=\"language-plaintext highlighter-rouge\">get(3)</code> or <code class=\"language-plaintext highlighter-rouge\">lambda x:\nx[3]</code>, and a binary operator like <code class=\"language-plaintext highlighter-rouge\">add</code> or <code class=\"language-plaintext highlighter-rouge\">lesser = lambda acc, x: acc if acc\n&lt; x else x</code>. It successively applies the key function to each item in\nsuccession, accumulating running totals for each key by combining each new\nvalue with the previous total using the binary operator. It can’t accept full\nreduction operations like <code class=\"language-plaintext highlighter-rouge\">sum</code> or <code class=\"language-plaintext highlighter-rouge\">min</code> as these require access to the entire\ngroup at once. Here is a simple example:</p>\n\n<figure class=\"highlight\">\n  <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">toolz</span> <span class=\"kn\">import</span> <span class=\"n\">reduceby</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">def</span> <span class=\"nf\">iseven</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n<span class=\"p\">...</span>     <span class=\"k\">return</span> <span class=\"n\">n</span> <span class=\"o\">%</span> <span class=\"mi\">2</span> <span class=\"o\">==</span> <span class=\"mi\">0</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">def</span> <span class=\"nf\">add</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">):</span>\n<span class=\"p\">...</span>     <span class=\"k\">return</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"n\">y</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">reduceby</span><span class=\"p\">(</span><span class=\"n\">iseven</span><span class=\"p\">,</span> <span class=\"n\">add</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">])</span>\n<span class=\"p\">{</span><span class=\"bp\">True</span><span class=\"p\">:</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"bp\">False</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"p\">}</span></code></pre>\n</figure>\n\n<p>The even numbers are added together <code class=\"language-plaintext highlighter-rouge\">(2 + 4 = 6)</code> into group <code class=\"language-plaintext highlighter-rouge\">True</code>, and\nthe odd numbers are added together <code class=\"language-plaintext highlighter-rouge\">(1 + 3 = 4)</code> into group <code class=\"language-plaintext highlighter-rouge\">False</code>.</p>\n\n<p>Note that we have to replace the reduction <code class=\"language-plaintext highlighter-rouge\">sum</code> with the binary operator\n<code class=\"language-plaintext highlighter-rouge\">add</code>.  The incremental nature of <code class=\"language-plaintext highlighter-rouge\">add</code> allows us to do the summation work as\nnew data comes in.  The use of binary operators like <code class=\"language-plaintext highlighter-rouge\">add</code> over full reductions\nlike <code class=\"language-plaintext highlighter-rouge\">sum</code> enables computation on very large streaming datasets.</p>\n\n<p>The challenge to using <code class=\"language-plaintext highlighter-rouge\">reduceby</code> often lies in the construction of a\nsuitable binary operator. Here is the solution for our accounts example\nthat adds up the balances for each group:</p>\n\n<figure class=\"highlight\">\n  <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">binop</span> <span class=\"o\">=</span> <span class=\"k\">lambda</span> <span class=\"n\">total</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">bal</span><span class=\"p\">,</span> <span class=\"n\">gend</span><span class=\"p\">):</span> <span class=\"n\">total</span> <span class=\"o\">+</span> <span class=\"n\">bal</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">reduceby</span><span class=\"p\">(</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"n\">binop</span><span class=\"p\">,</span> <span class=\"n\">accounts</span><span class=\"p\">)</span>\n<span class=\"p\">{</span><span class=\"s\">'F'</span><span class=\"p\">:</span> <span class=\"mi\">400</span><span class=\"p\">,</span> <span class=\"s\">'M'</span><span class=\"p\">:</span> <span class=\"mi\">400</span><span class=\"p\">}</span></code></pre>\n</figure>\n\n<p>This construction supports datasets that are much larger than available\nmemory. Only the output must be able to fit comfortably in memory and\nthis is rarely an issue, even for very large split-apply-combine\ncomputations.</p>\n\n<h2 id=\"semi-streaming-join\">Semi-Streaming <code class=\"language-plaintext highlighter-rouge\">join</code></h2>\n\n<p>We register multiple datasets together with\n<a href=\"http://toolz.readthedocs.org/en/latest/api.html#toolz.itertoolz.join\">join</a>.\nConsider a second dataset that stores addresses by ID:</p>\n\n<figure class=\"highlight\">\n  <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">addresses</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s\">'123 Main Street'</span><span class=\"p\">),</span>  <span class=\"c1\"># id, address\n</span><span class=\"p\">...</span>              <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s\">'5 Adams Way'</span><span class=\"p\">),</span>\n<span class=\"p\">...</span>              <span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"s\">'34 Rue St Michel'</span><span class=\"p\">)]</span></code></pre>\n</figure>\n\n<p>We can join this dataset against our accounts dataset by specifying\nattributes which register different elements with each other; in this\ncase they share a common first column, id.</p>\n\n<figure class=\"highlight\">\n  <pre><code class=\"language-sql\" data-lang=\"sql\"><span class=\"k\">SELECT</span> <span class=\"n\">accounts</span><span class=\"p\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">addresses</span><span class=\"p\">.</span><span class=\"n\">address</span>\n<span class=\"k\">FROM</span> <span class=\"n\">accounts</span><span class=\"p\">,</span> <span class=\"n\">addresses</span>\n<span class=\"k\">WHERE</span> <span class=\"n\">accounts</span><span class=\"p\">.</span><span class=\"n\">id</span> <span class=\"o\">=</span> <span class=\"n\">addresses</span><span class=\"p\">.</span><span class=\"n\">id</span><span class=\"p\">;</span></code></pre>\n</figure>\n\n<figure class=\"highlight\">\n  <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">toolz</span> <span class=\"kn\">import</span> <span class=\"n\">join</span><span class=\"p\">,</span> <span class=\"n\">first</span><span class=\"p\">,</span> <span class=\"n\">second</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">first</span><span class=\"p\">,</span> <span class=\"n\">accounts</span><span class=\"p\">,</span>\n<span class=\"p\">...</span>               <span class=\"n\">first</span><span class=\"p\">,</span> <span class=\"n\">addresses</span><span class=\"p\">)</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">for</span> <span class=\"p\">((</span><span class=\"nb\">id</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">bal</span><span class=\"p\">,</span> <span class=\"n\">gender</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"p\">,</span> <span class=\"n\">address</span><span class=\"p\">))</span> <span class=\"ow\">in</span> <span class=\"n\">result</span><span class=\"p\">:</span>\n<span class=\"p\">...</span>     <span class=\"k\">print</span><span class=\"p\">((</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">address</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"s\">'Alice'</span><span class=\"p\">,</span> <span class=\"s\">'123 Main Street'</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"s\">'Bob'</span><span class=\"p\">,</span> <span class=\"s\">'5 Adams Way'</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"s\">'Edith'</span><span class=\"p\">,</span> <span class=\"s\">'34 Rue St Michel'</span><span class=\"p\">)</span></code></pre>\n</figure>\n\n<p>Join takes four main arguments, a left and right key function and a left\nand right sequence. It returns a sequence of pairs of matching items. In our\ncase the return value of <code class=\"language-plaintext highlighter-rouge\">join</code> is a sequence of pairs of tuples such that the\nfirst element of each tuple (the ID) is the same.  In the example above we\nunpack this pair of tuples to get the fields that we want (<code class=\"language-plaintext highlighter-rouge\">name</code> and\n<code class=\"language-plaintext highlighter-rouge\">address</code>) from the result.</p>\n\n<h3 id=\"join-on-arbitrary-functions--data\">Join on arbitrary functions / data</h3>\n\n<p>Those familiar with SQL are accustomed to this kind of join on columns.\nHowever a functional join is more general than this; it doesn’t need to\noperate on tuples, and key functions do not need to get particular\ncolumns. In the example below we match numbers from two collections so\nthat exactly one is even and one is odd.</p>\n\n<figure class=\"highlight\">\n  <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">def</span> <span class=\"nf\">iseven</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n<span class=\"p\">...</span>     <span class=\"k\">return</span> <span class=\"n\">n</span> <span class=\"o\">%</span> <span class=\"mi\">2</span> <span class=\"o\">==</span> <span class=\"mi\">0</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">def</span> <span class=\"nf\">isodd</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n<span class=\"p\">...</span>     <span class=\"k\">return</span> <span class=\"n\">n</span> <span class=\"o\">%</span> <span class=\"mi\">2</span> <span class=\"o\">==</span> <span class=\"mi\">1</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">iseven</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">],</span>\n<span class=\"p\">...</span>           <span class=\"n\">isodd</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">]))</span>\n<span class=\"p\">[(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">)]</span></code></pre>\n</figure>\n\n<h3 id=\"semi-streaming-join-1\">Semi-Streaming Join</h3>\n\n<p>The Toolz Join operation fully evaluates the <em>left</em> sequence and streams\nthe <em>right</em> sequence through memory. Thus, if streaming support is\ndesired the larger of the two sequences should always occupy the right\nside of the join.</p>\n\n<h3 id=\"algorithmic-details\">Algorithmic Details</h3>\n\n<p>The semi-streaming join operation in <code class=\"language-plaintext highlighter-rouge\">toolz</code> is asymptotically optimal.\nComputationally it is linear in the size of the input + output. In terms\nof storage the left sequence must fit in memory but the right sequence\nis free to stream.</p>\n\n<p>The results are not normalized, as in SQL, in that they permit repeated\nvalues. If normalization is desired, consider composing with the\nfunction <code class=\"language-plaintext highlighter-rouge\">unique</code> (note that <code class=\"language-plaintext highlighter-rouge\">unique</code> is not fully streaming.)</p>\n\n<h3 id=\"more-complex-example\">More Complex Example</h3>\n\n<p>The accounts example above connects two one-to-one relationships, <code class=\"language-plaintext highlighter-rouge\">accounts</code>\nand <code class=\"language-plaintext highlighter-rouge\">addresses</code>; there was exactly one name per ID and one address per ID. This\nneed not be the case. The join abstraction is sufficiently flexible to join\none-to-many or even many-to-many relationships. The following example finds\ncity/person pairs where that person has a friend who has a residence in that\ncity. This is an example of joining two many-to-many relationships because a\nperson may have many friends and because a friend may have many residences.</p>\n\n<figure class=\"highlight\">\n  <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">friends</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"s\">'Alice'</span><span class=\"p\">,</span> <span class=\"s\">'Edith'</span><span class=\"p\">),</span>\n<span class=\"p\">...</span>            <span class=\"p\">(</span><span class=\"s\">'Alice'</span><span class=\"p\">,</span> <span class=\"s\">'Zhao'</span><span class=\"p\">),</span>\n<span class=\"p\">...</span>            <span class=\"p\">(</span><span class=\"s\">'Edith'</span><span class=\"p\">,</span> <span class=\"s\">'Alice'</span><span class=\"p\">),</span>\n<span class=\"p\">...</span>            <span class=\"p\">(</span><span class=\"s\">'Zhao'</span><span class=\"p\">,</span> <span class=\"s\">'Alice'</span><span class=\"p\">),</span>\n<span class=\"p\">...</span>            <span class=\"p\">(</span><span class=\"s\">'Zhao'</span><span class=\"p\">,</span> <span class=\"s\">'Edith'</span><span class=\"p\">)]</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cities</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"s\">'Alice'</span><span class=\"p\">,</span> <span class=\"s\">'NYC'</span><span class=\"p\">),</span>\n<span class=\"p\">...</span>           <span class=\"p\">(</span><span class=\"s\">'Alice'</span><span class=\"p\">,</span> <span class=\"s\">'Chicago'</span><span class=\"p\">),</span>\n<span class=\"p\">...</span>           <span class=\"p\">(</span><span class=\"s\">'Dan'</span><span class=\"p\">,</span> <span class=\"s\">'Syndey'</span><span class=\"p\">),</span>\n<span class=\"p\">...</span>           <span class=\"p\">(</span><span class=\"s\">'Edith'</span><span class=\"p\">,</span> <span class=\"s\">'Paris'</span><span class=\"p\">),</span>\n<span class=\"p\">...</span>           <span class=\"p\">(</span><span class=\"s\">'Edith'</span><span class=\"p\">,</span> <span class=\"s\">'Berlin'</span><span class=\"p\">),</span>\n<span class=\"p\">...</span>           <span class=\"p\">(</span><span class=\"s\">'Zhao'</span><span class=\"p\">,</span> <span class=\"s\">'Shanghai'</span><span class=\"p\">)]</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># Vacation opportunities\n</span><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># In what cities do people have friends?\n</span><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">second</span><span class=\"p\">,</span> <span class=\"n\">friends</span><span class=\"p\">,</span>\n<span class=\"p\">...</span>               <span class=\"n\">first</span><span class=\"p\">,</span> <span class=\"n\">cities</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">for</span> <span class=\"p\">((</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">friend</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"n\">friend</span><span class=\"p\">,</span> <span class=\"n\">city</span><span class=\"p\">))</span> <span class=\"ow\">in</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">unique</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)):</span>\n<span class=\"p\">...</span>     <span class=\"k\">print</span><span class=\"p\">((</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">city</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"s\">'Alice'</span><span class=\"p\">,</span> <span class=\"s\">'Berlin'</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"s\">'Alice'</span><span class=\"p\">,</span> <span class=\"s\">'Paris'</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"s\">'Alice'</span><span class=\"p\">,</span> <span class=\"s\">'Shanghai'</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"s\">'Edith'</span><span class=\"p\">,</span> <span class=\"s\">'Chicago'</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"s\">'Edith'</span><span class=\"p\">,</span> <span class=\"s\">'NYC'</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"s\">'Zhao'</span><span class=\"p\">,</span> <span class=\"s\">'Chicago'</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"s\">'Zhao'</span><span class=\"p\">,</span> <span class=\"s\">'NYC'</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"s\">'Zhao'</span><span class=\"p\">,</span> <span class=\"s\">'Berlin'</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"s\">'Zhao'</span><span class=\"p\">,</span> <span class=\"s\">'Paris'</span><span class=\"p\">)</span></code></pre>\n</figure>\n\n<p>Join is computationally powerful:</p>\n\n<ul>\n  <li>It is expressive enough to cover a wide set of analytics operations</li>\n  <li>It runs in linear time relative to the size of the input and output</li>\n  <li>Only the left sequence must fit in memory</li>\n</ul>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>Toolz gives a compact set of primitives for data analysis on plain Python data\nstructures.  CyToolz accelerates those workflows through Cython.  This approach\nis both low-tech and supports uncomfortably big data through streaming.</p>\n\n<p>At the same time, Toolz is a general purpose functional standard library, and\nis not specifically dedicated to data analysis. While there are obvious\nbenefits (streaming, composition, etc.) users interested in data analysis might\nbe better served by using projects dedicated projects like Pandas or\nSQLAlchemy.</p>\n\n<p>This post is also part of the\n<a href=\"http://toolz.readthedocs.org/en/latest/\"><code class=\"language-plaintext highlighter-rouge\">toolz</code> docs</a>.\nThanks to\n<a href=\"http://johnj.com\">John Jacobsen</a>,\n<a href=\"https://github.com/clarkfitzg\">Clark Fitzgerald</a>, and\n<a href=\"https://github.com/eriknw/\">Erik Welch</a>\nfor their help with this post.</p>"
}