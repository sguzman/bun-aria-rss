{
  "title": "Sentiment Analysis model deployed!",
  "link": "http://shichaoji.com/2017/04/17/sentiment-analysis-deployed/",
  "comments": "http://shichaoji.com/2017/04/17/sentiment-analysis-deployed/#respond",
  "dc:creator": "iridescent",
  "pubDate": "Mon, 17 Apr 2017 21:34:15 +0000",
  "category": [
    "data retrieve",
    "deep learning",
    "Deploy on Linux",
    "fun",
    "jupyter notebook",
    "machine learning",
    "project",
    "text mining",
    "product"
  ],
  "guid": "http://shichaoji.com/?p=2733",
  "description": "<p>I&#8217;ve trained a sentiment analysis on simple data set: Amazon Reviews: Unlocked Mobile Phones based on the amazon phone purchase reviews. Simple linear SVM classifier using scikit-learn. The code is down below, please scroll down Yet I&#8217;ve successful deployed the model on an AWS server!  original deployment page Model building Supervised model: Sentiment Analysis Tool [&#8230;]</p>\n<p>The post <a href=\"http://shichaoji.com/2017/04/17/sentiment-analysis-deployed/\">Sentiment Analysis model deployed!</a> first appeared on <a href=\"http://shichaoji.com\">Data Science Notebook</a>.</p>",
  "content:encoded": "<div id=\"dslc-theme-content\"><div id=\"dslc-theme-content-inner\">\n<!-- iframe plugin v.4.5 wordpress.org/plugins/iframe/ -->\n<iframe src=\"http://www.iridescent.date:10086\" width=\"100%\" height=\"750\" scrolling=\"yes\" class=\"iframe-class\" frameborder=\"0\"></iframe>\n\n<p>I&#8217;ve trained a sentiment analysis on simple data set:</p>\n<p><a href=\"https://www.kaggle.com/PromptCloudHQ/amazon-reviews-unlocked-mobile-phones\">Amazon Reviews: Unlocked Mobile Phones</a></p>\n<p>based on the amazon phone purchase reviews. Simple linear SVM classifier using scikit-learn. <span style=\"font-size: 14pt;\"><strong><em><span style=\"color: #004e00;\">The code is down below, please scroll down</span></em></strong></span></p>\n<p>Yet I&#8217;ve successful deployed the model on an AWS server!  <span style=\"font-size: 12pt;\"><em><strong><a href=\"http://jishichao.com/sentiment\">original deployment page</a></strong></em></span></p>\n<p><span style=\"font-size: 16pt;\"><em>Model building</em></span></p>\n<p><span id=\"more-2733\"></span></p>\n<p><strong><em>Supervised model: Sentiment Analysis</em></strong></p>\n<p>Tool used: Python; Main library: Scikit-learn: <a href=\"http://scikit-learn.org\">http://scikit-learn.org</a></p>\n<p>Code: attachment: “sup_demo.html”, “sup_demo.ipnb”</p>\n<p><strong>Summary</strong></p>\n<p>Ways of labeling data: Arbitrarily treat 1-3 star reviews as “negative” and 5 star reviews as “positive”. This is the highlight of this model and lead to the success. By and large, rating views are really subjective since there is not an universal rating criteria. In my opinion, building a model that trains and predicts reviews into 5 categories (1 to 5 stars) is not only unrealistic but lack of business values.</p>\n<p>From the perspective of technical implementation, this sentiment analysis supervised model is fairly simple, which is mainly due to the way of labeling the data and intrinsic attributes of the dataset entail a high accuracy (over 90%) of the prediction power of the trained model. So I did not implement more complex methods to improve the accuracy since it is already satisfactory.</p>\n<p>From the perspective of model deployment, a more complex model generally takes more storage space, more time to train & predict new data. Moreover, data preprocessing instances will take extra storage & time, for example, to predict new inputs, new inputs have to go through data preprocessing instances before trained model. Imagine you want to predict a new review, you have to wait 5 seconds until the model can give you the result. More importantly, all the program  instances in deployment have to be active in the RAM, so more sophisticated model & preprocessing will be a burden to the deployment server which entails higher probability of errors & disconnections. Since a simple model can achieve over 90% prediction rate, therefore, it is no worth to build a more complex model.</p>\n<p><strong>Methodology </strong></p>\n<ol>\n<li>Stopwords implementation: prepared a txt document of customized stop words list</li>\n</ol>\n<ul>\n<li>Important: keep negative stop words! Many stop word lists will filter words like “dont”,”isnt”, etc. Yet since we are building a sentiment analysis model, negative words are very important. So the first thing should do is to delete stop words that have positive/negative emotions.</li>\n<li>Customizing Add more stop words to stop.txt, as well as directly in Python code</li>\n</ul>\n<ol start=\"2\">\n<li>Stemming and Lemmatization: not used</li>\n</ol>\n<ul>\n<li>For some really after implementing stemming and lemmatization, the model results in lower accuracy.</li>\n</ul>\n<ol start=\"3\">\n<li>Tokenization: HashingVectorizer with over 1 million features (words & phases)</li>\n</ol>\n<ul>\n<li>N-grams: trigram , simulations of n from 1 to 5, n=3 works the best (highest accuracy) <a href=\"https://en.wikipedia.org/wiki/N-gram\">https://en.wikipedia.org/wiki/N-gram</a></li>\n<li>TfidfVectorizer: no signs of improvement of accuracy, actually will be less accurate</li>\n<li>CountVecorizer: <a href=\"http://stackoverflow.com/questions/30024122/what-is-the-difference-between-hashing-vectorizer-and-count-vectorizer-when-eac\">difference between Hashing vectorizer and Count vectorizer</a>\n<ul>\n<li>Practical: in implantation, Trained CountVecorizer can be as large as 500 MB, whereas trained Hashing vectorizer is 7 KB, the difference is hug (up to 100000 times). Especially the vectorizer has to be active in RAM,  so CountVecorizer will be too costly and more unstable.</li>\n</ul>\n</li>\n</ul>\n<ol start=\"4\">\n<li>Filter out tokens appears only once & most frequently appeared : Not implement</li>\n</ol>\n<ul>\n<li>If apply, result in significantly reduced accuracy, this methods is useful with extremely large dataset, in my experience, text data over 1 GB can be benefit from.</li>\n</ul>\n<ol start=\"5\">\n<li>Modeling</li>\n</ol>\n<ul>\n<li>Splitting the data, train: validation = 0.75: 0.25</li>\n<li>Since we have over 1 million features and over 300 thousand reviews, I choose models with stochastic & linear features / algorithms good with scaled data.</li>\n<li>Implemented models: LogisticRegression, SGDClassifier, PassiveAggressiveClassifier, LinearSVC, RidgeClassifier, etc.</li>\n<li>Cross validation: to ensure the models are unbiased after train-test splitting\n<ul>\n<li>10 fold testing (PassiveAggressiveClassifier takes less time)\n<ul>\n<li>90% accuracy!</li>\n</ul>\n</li>\n<li></li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>Best model: LinearSVC with over 95% accuracy on 25% validate dataset</li>\n</ul>\n<ol start=\"6\">\n<li>Extra methods: generally should be implemented in order to build a really good Machine Learning application.</li>\n</ol>\n<ul>\n<li>Dimensional reduction: we have over 1 million features, impossible to use models such as SVM, neural networks, trees, etc.\n<ul>\n<li>Feature selection: e.g. Kbest features</li>\n<li>Decomposition : e.g. PCA, SVD, NMF, Isomap</li>\n<li>Normalization: e.g. maxabs_scale, normalize, StandardScaler\n<ul>\n<li>Tried normalization, did not improve in our scenario</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<ol start=\"7\">\n<li>Other Machine Learning models: popular models generally with good accuracy on categorical data, such as neural networks, trees & forests, ensembles</li>\n</ol>\n<ul>\n<li>Time & computation expansive: With 1 million features and 300 thousand instances, for example, a SVM may take hours/ days to converge. Yet after reducing features to e.g. 50000, a, neural network model can achieve 97% accuracy (but more time & difficult to deploy).</li>\n</ul>\n<ol start=\"8\">\n<li>Further\n<ul>\n<li>Parameter tuning: yet most machine learning models in scikit-learn preform satisfactory with default parameters, yet a good application always involve customized parameter tuning. Methods: GridsearchCV, or writing simulation codes directly in Python.</li>\n<li>Stacking: combine different models & features & methods.\n<ul>\n<li>g. build topic models first and perform random forest on topics</li>\n</ul>\n</li>\n<li>Other Python tools\n<ul>\n<li>XGboost is always a winning tool\n<ul>\n<li>Require too much time on feature wrangling, parameter tunning.\n<ul>\n<li>Without above, XGboost performs worse than general scikit-learn models</li>\n</ul>\n</li>\n<li>Deep learning\n<ul>\n<li>Similar to XGboost, require time & energy</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<p><strong>Product</strong></p>\n<p>Deployment page alive online:  <a href=\"http://jishichao.com:10086/\"><strong>Click here</strong></a></p>\n<p><strong> </strong></p>\n<p>In Python, to predict new inputs, example:</p>\n<ul>\n<li>token is the trained tokenizer such as Hashvectorizer</li>\n<li>model is the trained model</li>\n</ul>\n<p><span style=\"font-size: 16pt; color: #004e00;\"><em>code is here:</em></span></p>\n\n<!-- iframe plugin v.4.5 wordpress.org/plugins/iframe/ -->\n<iframe src=\"/wp-content/uploads/2017/07/sup_demo.html\" width=\"100%\" height=\"700\" scrolling=\"yes\" class=\"iframe-class\" frameborder=\"0\"></iframe>\n\n<p><a class=\"a2a_button_facebook\" href=\"https://www.addtoany.com/add_to/facebook?linkurl=http%3A%2F%2Fshichaoji.com%2F2017%2F04%2F17%2Fsentiment-analysis-deployed%2F&linkname=Sentiment%20Analysis%20model%20deployed%21\" title=\"Facebook\" rel=\"nofollow noopener\" target=\"_blank\"></a><a class=\"a2a_button_twitter\" href=\"https://www.addtoany.com/add_to/twitter?linkurl=http%3A%2F%2Fshichaoji.com%2F2017%2F04%2F17%2Fsentiment-analysis-deployed%2F&linkname=Sentiment%20Analysis%20model%20deployed%21\" title=\"Twitter\" rel=\"nofollow noopener\" target=\"_blank\"></a><a class=\"a2a_button_linkedin\" href=\"https://www.addtoany.com/add_to/linkedin?linkurl=http%3A%2F%2Fshichaoji.com%2F2017%2F04%2F17%2Fsentiment-analysis-deployed%2F&linkname=Sentiment%20Analysis%20model%20deployed%21\" title=\"LinkedIn\" rel=\"nofollow noopener\" target=\"_blank\"></a><a class=\"a2a_dd addtoany_share_save addtoany_share\" href=\"https://www.addtoany.com/share#url=http%3A%2F%2Fshichaoji.com%2F2017%2F04%2F17%2Fsentiment-analysis-deployed%2F&#038;title=Sentiment%20Analysis%20model%20deployed%21\" data-a2a-url=\"http://shichaoji.com/2017/04/17/sentiment-analysis-deployed/\" data-a2a-title=\"Sentiment Analysis model deployed!\"></a></p></div></div><p>The post <a href=\"http://shichaoji.com/2017/04/17/sentiment-analysis-deployed/\">Sentiment Analysis model deployed!</a> first appeared on <a href=\"http://shichaoji.com\">Data Science Notebook</a>.</p>",
  "wfw:commentRss": "http://shichaoji.com/2017/04/17/sentiment-analysis-deployed/feed/",
  "slash:comments": 0
}