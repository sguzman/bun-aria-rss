{
  "title": "Scraping with Selenium",
  "link": "",
  "id": "http://brooksandrew.github.io/simpleblog/articles/scraping-with-selenium",
  "published": "2014-12-11T00:00:00+00:00",
  "updated": "2014-12-11T00:00:00+00:00",
  "author": {
    "name": "andrew brooks",
    "uri": "http://brooksandrew.github.io/simpleblog",
    "email": "andrewbrooksct@gmail.com"
  },
  "content": "<h3 id=\"if-youve-ever\">If you’ve ever…</h3>\n\n<p>felt like you’re playing Simon Says with mouse clicks when repeatedly extracting data in chunks from a\nfront-end interface to a database on the web, well, you probably are.\nThere’s probably a better solution – <a href=\"http://www.seleniumhq.org/\">Selenium</a>.</p>\n\n<p>ever used XML or httr in R or urllib2 in Python, you’ve probably encountered the situation where \nthe source code you’ve scraped for a website doesn’t contain all the information you see in your browser.\n<a href=\"http://www.seleniumhq.org/\">Selenium</a> can probably help.</p>\n\n<h3 id=\"how-it-works\">How it works</h3>\n<p>Selenium is a web automation tool.\nWhile not developed specifically for web scraping, Selenium does it pretty dang well.\nSelenium literally “drives” your browser, so it can see anything you see when you right click and inspect element in Chrome or Firefox.\nThis vastly widens the universe of content that can be extracted from automation, but can be slow \nas all content must be rendered in the browser.</p>\n\n<p>There are headless (invisible browsers with no GUI) such as <a href=\"http://phantomjs.org/\">phantomjs</a> that \nspeed some of this up.  That said, I’ve found that Selenium works best for targeted extraction where the user knows exactly\nwhat they want.</p>\n\n<h3 id=\"example\">Example</h3>\n\n<p>I set out to collect tickers for all mutual funds in the asset allocation fund type.  Fidelity provides a list\nof all these funds <a href=\"https://www.fidelity.com/fund-screener/evaluator.shtml#!&amp;ntf=N&amp;ft=BAL_all&amp;msrV=advanced&amp;sortBy=FUND_MST_MSTAR_CTGY_NM&amp;pgNo=1\">here</a>.\n1,586 funds as of today in 80 conveniently paginated URLs.  Each URL ends in <code class=\"highlighter-rouge\">&amp;pgNo=5</code> to indicate you want page 5 (or whatever number between 1 and 80).</p>\n\n<p>In my browser, when I hover my mouse over one of the fund names in the table, I see the 5 character ticker I’m looking for.\nI also see the tickers directly on the webpage when I click the link to each fund. \n<a href=\"https://fundresearch.fidelity.com/mutual-funds/summary/72201F433\">Here</a> for example, where it says PSLDX in the top left.\nHowever, if possible I’d like to scrape the tickers from the table rather than the individual fund pages.\nThis would mean 80 pages to scrape rather than 1,586.</p>\n\n<h3 id=\"take-1-traditional-http-request\">Take 1: traditional http request</h3>\n<p>When possible, it makes sense to use the simple traditional methods.  So I first tried to extract these tickers with the popular <code class=\"highlighter-rouge\">httr</code> R package \nby making standard http requests.</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-r\" data-lang=\"r\"><span class=\"n\">library</span><span class=\"p\">(</span><span class=\"s1\">'httr'</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"n\">url</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"s1\">'https://www.fidelity.com/fund-screener/evaluator.shtml#!&amp;ft=BAL_all&amp;ntf=N&amp;expand=%24FundType&amp;rsk=5'</span><span class=\"w\">\n</span><span class=\"n\">page</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">GET</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">)</span></code></pre></figure>\n\n<p>Success…</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-r\" data-lang=\"r\"><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"n\">http_status</span><span class=\"p\">(</span><span class=\"n\">page</span><span class=\"p\">))</span><span class=\"w\"> </span></code></pre></figure>\n\n<figure class=\"highlight\"><pre><code class=\"language-text\" data-lang=\"text\">## $category\n## [1] \"success\"\n## \n## $message\n## [1] \"success: (200) OK\"</code></pre></figure>\n\n<p>But did our http request return the information we want?</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-r\" data-lang=\"r\"><span class=\"n\">page_text</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">content</span><span class=\"p\">(</span><span class=\"n\">page</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">as</span><span class=\"o\">=</span><span class=\"s1\">'text'</span><span class=\"p\">)</span></code></pre></figure>\n\n<p>Nope – can’t find the tickers (one of them anyway).</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-r\" data-lang=\"r\"><span class=\"n\">grepl</span><span class=\"p\">(</span><span class=\"s1\">'GMMAX'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">page_text</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ignore.case</span><span class=\"o\">=</span><span class=\"nb\">T</span><span class=\"p\">)</span></code></pre></figure>\n\n<figure class=\"highlight\"><pre><code class=\"language-text\" data-lang=\"text\">## [1] FALSE</code></pre></figure>\n\n<p>Nope – can’t even find the fund name that I see in the table from the webpage in my browser.</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-r\" data-lang=\"r\"><span class=\"n\">grepl</span><span class=\"p\">(</span><span class=\"s1\">'Aberdeen'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">page_text</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ignore.case</span><span class=\"o\">=</span><span class=\"nb\">T</span><span class=\"p\">)</span></code></pre></figure>\n\n<figure class=\"highlight\"><pre><code class=\"language-text\" data-lang=\"text\">## [1] FALSE</code></pre></figure>\n\n<p>It appears that the content of interest is being generated dynamically with Javascript and Ajax on this webpage.\nSo the raw HTML of this page doesn’t help us much.</p>\n\n<p>My plan B was to grab the url for each fund from the table, navigate to that fund’s page, and extract the ticker from there.\nHowever these links weren’t in our http response.  I noticed that the URLs for each fund followed a simple consistent structure.  <br />\n<a href=\"https://fundresearch.fidelity.com/mutual-funds/summary/72201F433\">https://fundresearch.fidelity.com/mutual-funds/summary/72201F433</a> for example.\nI thought maybe I could find 72201F433 which looks like some sort of fund ID in a list with all fund IDs in the http response.\nNo dice.  Plan C – Selenium.</p>\n\n<h3 id=\"take-2-selenium\">Take 2: Selenium</h3>\n\n<p>I used the <a href=\"http://www.github.com/ropensci/RSelenium/\">RSelenium</a> R package for this mini project.  There are also Selenium bindings for Python, Java, C#, Javascript and Ruby\nwhich make replicating this process in your programming language of choice relatively straightforward.</p>\n\n<p><strong>Step 1: Fire up Selenium</strong></p>\n\n<figure class=\"highlight\"><pre><code class=\"language-r\" data-lang=\"r\"><span class=\"n\">library</span><span class=\"p\">(</span><span class=\"s1\">'RSelenium'</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"n\">checkForServer</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"c1\"># search for and download Selenium Server java binary.  Only need to run once.</span><span class=\"w\">\n</span><span class=\"n\">startServer</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"c1\"># run Selenium Server binary</span><span class=\"w\">\n</span><span class=\"n\">remDr</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">remoteDriver</span><span class=\"p\">(</span><span class=\"n\">browserName</span><span class=\"o\">=</span><span class=\"s2\">\"firefox\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">port</span><span class=\"o\">=</span><span class=\"m\">4444</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"c1\"># instantiate remote driver to connect to Selenium Server</span><span class=\"w\">\n</span><span class=\"n\">remDr</span><span class=\"o\">$</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"n\">silent</span><span class=\"o\">=</span><span class=\"nb\">T</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"c1\"># open web browser</span></code></pre></figure>\n\n<p><strong>Step 2: Start scraping</strong></p>\n\n<p>To figure which DOM elements I wanted Selenium extract, I used the Chrome Developer Tools which can be invoked by right clicking a fund in the table and selecting Inspect Element.  The HTML displayed here contains exactly what we want, what we didn’t see with our http request.</p>\n\n<p>Since I want to grab all the funds at once, I tell Selenium to select the whole table.  Going a few levels up from the individual cell in the table I’ve selected, I see that <code class=\"highlighter-rouge\">&lt;tbody id=\"tbody\"&gt;</code> is the HTML tag that contains the entire table, so I tell Selenium to find this element.  I use the nifty <code class=\"highlighter-rouge\">highlightElement</code> function to confirm graphically in the browser that this is what I think it is.</p>\n\n<p>Then it’s business as usual.  I parse the string output from Selenium into an HTML tree and use XPath to parse the table for just the fund name and ticker.</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-r\" data-lang=\"r\"><span class=\"n\">library</span><span class=\"p\">(</span><span class=\"s1\">'XML'</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"n\">master</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"nf\">c</span><span class=\"p\">()</span><span class=\"w\">\n</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"m\">5</span><span class=\"w\"> </span><span class=\"c1\"># number of pages to scrape.  80 pages in total.  I just scraped 5 pages for this example.</span><span class=\"w\">\n</span><span class=\"k\">for</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"m\">1</span><span class=\"o\">:</span><span class=\"n\">n</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"n\">site</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">paste0</span><span class=\"p\">(</span><span class=\"s2\">\"https://www.fidelity.com/fund-screener/evaluator.shtml#!&amp;ntf=N&amp;ft=BAL_all&amp;msrV=advanced&amp;sortBy=FUND_MST_MSTAR_CTGY_NM&amp;pgNo=\"</span><span class=\"p\">,</span><span class=\"n\">i</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"c1\"># create URL for each page to scrape</span><span class=\"w\">\n  </span><span class=\"n\">remDr</span><span class=\"o\">$</span><span class=\"n\">navigate</span><span class=\"p\">(</span><span class=\"n\">site</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"c1\"># navigates to webpage</span><span class=\"w\">\n  \n  </span><span class=\"n\">elem</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">remDr</span><span class=\"o\">$</span><span class=\"n\">findElement</span><span class=\"p\">(</span><span class=\"n\">using</span><span class=\"o\">=</span><span class=\"s2\">\"id\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"o\">=</span><span class=\"s2\">\"tbody\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"c1\"># get big table in text string</span><span class=\"w\">\n  </span><span class=\"n\">elem</span><span class=\"o\">$</span><span class=\"n\">highlightElement</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"c1\"># just for interactive use in browser.  not necessary.</span><span class=\"w\">\n  </span><span class=\"n\">elemtxt</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">elem</span><span class=\"o\">$</span><span class=\"n\">getElementAttribute</span><span class=\"p\">(</span><span class=\"s2\">\"outerHTML\"</span><span class=\"p\">)[[</span><span class=\"m\">1</span><span class=\"p\">]]</span><span class=\"w\"> </span><span class=\"c1\"># gets us the HTML</span><span class=\"w\">\n  </span><span class=\"n\">elemxml</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">htmlTreeParse</span><span class=\"p\">(</span><span class=\"n\">elemtxt</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">useInternalNodes</span><span class=\"o\">=</span><span class=\"nb\">T</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"c1\"># parse string into HTML tree to allow for querying with XPath</span><span class=\"w\">\n  </span><span class=\"n\">fundList</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">unlist</span><span class=\"p\">(</span><span class=\"n\">xpathApply</span><span class=\"p\">(</span><span class=\"n\">elemxml</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s1\">'//input[@title]'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">xmlGetAttr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s1\">'title'</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"c1\"># parses out just the fund name and ticker using XPath</span><span class=\"w\">\n  </span><span class=\"n\">master</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"nf\">c</span><span class=\"p\">(</span><span class=\"n\">master</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">fundList</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"c1\"># append fund lists from each page together</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n\n</span><span class=\"n\">head</span><span class=\"p\">(</span><span class=\"n\">master</span><span class=\"p\">)</span></code></pre></figure>\n\n<figure class=\"highlight\"><pre><code class=\"language-text\" data-lang=\"text\">## [1] \"FidelityAA Global Balanced Fund (FGBLX)\"                    \n## [2] \"FidelityAA Global Strategies Fund (FDYSX)\"                  \n## [3] \"Fidelity FreedomA 2055 Fund (FDEEX)\"                       \n## [4] \"Aberdeen Dynamic Allocation Fund Class A (GMMAX)\"           \n## [5] \"Aberdeen Dynamic Allocation Fund Class C (GMMCX)\"           \n## [6] \"AllianceBernstein Real Asset Strategy Advisor Class (AMTYX)\"</code></pre></figure>\n\n<p><strong>Step 3: Extract ticker</strong></p>\n\n<p>Nothing fancy here – just separating the ticker from the fund name.</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-r\" data-lang=\"r\"><span class=\"n\">master2</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">data.frame</span><span class=\"p\">(</span><span class=\"n\">sapply</span><span class=\"p\">(</span><span class=\"n\">master</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">function</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">substr</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">nchar</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"m\">-5</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">nchar</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"m\">-1</span><span class=\"p\">)))</span><span class=\"w\">\n</span><span class=\"n\">master2</span><span class=\"o\">$</span><span class=\"n\">name</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">sapply</span><span class=\"p\">(</span><span class=\"n\">master</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">function</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">substr</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"m\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">nchar</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"m\">-8</span><span class=\"p\">))</span><span class=\"w\">\n</span><span class=\"nf\">names</span><span class=\"p\">(</span><span class=\"n\">master2</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"nf\">c</span><span class=\"p\">(</span><span class=\"s1\">'ticker'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s1\">'name'</span><span class=\"p\">)</span><span class=\"w\">\n\n</span><span class=\"n\">head</span><span class=\"p\">(</span><span class=\"n\">master2</span><span class=\"p\">)</span></code></pre></figure>\n\n<figure class=\"highlight\"><pre><code class=\"language-text\" data-lang=\"text\">##   ticker                                                name\n## 1  FGBLX                     FidelityAA Global Balanced Fund\n## 2  FDYSX                   FidelityAA Global Strategies Fund\n## 3  FDEEX                        Fidelity FreedomAA 2055 Fund\n## 4  GMMAX            Aberdeen Dynamic Allocation Fund Class A\n## 5  GMMCX            Aberdeen Dynamic Allocation Fund Class C\n## 6  AMTYX AllianceBernstein Real Asset Strategy Advisor Class</code></pre></figure>\n\n<h3 id=\"what-else-can-selenium-do\">What else can Selenium do?</h3>\n\n<p>My little example makes use of the simple functionality provided by Selenium for web scraping – rendering HTML that is dynamically generated with Javascript or Ajax.  Since Selenium is actually a web automation tool, one can be much more sophisticated by using it to automate a human navigating a webpage with mouse clicks and writing and submitting forms.  This can be a huge time saver for researchers that rely on front-end interfaces on the web to extract data in chunks.</p>\n\n<p><a href=\"http://thiagomarzagao.com/2013/11/12/webscraping-with-selenium-part-1/\">Here’s</a> a basic example using Python.<br />\n<a href=\"http://cran.r-project.org/web/packages/RSelenium/vignettes/RSelenium-basics.html\">Here’s</a> a basic example using R.</p>\n\n<h3 id=\"getting-setup\">Getting setup</h3>\n\n<p>On the several computers I use, I’ve found setup ranging from seamless to frustrating.</p>\n\n<p>The most frustrating issue I encountered while setting up on my Mac was this error message:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-r\" data-lang=\"r\"><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">remDr</span><span class=\"o\">$</span><span class=\"n\">open</span><span class=\"p\">()</span><span class=\"w\">\n\n</span><span class=\"p\">[</span><span class=\"m\">1</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"s2\">\"Connecting to remote server\"</span><span class=\"w\">\n</span><span class=\"n\">Error</span><span class=\"o\">:</span><span class=\"w\">    </span><span class=\"n\">Summary</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">UnknownError</span><span class=\"w\">\n \t </span><span class=\"n\">Detail</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">An</span><span class=\"w\"> </span><span class=\"n\">unknown</span><span class=\"w\"> </span><span class=\"n\">server</span><span class=\"o\">-</span><span class=\"n\">side</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"w\"> </span><span class=\"n\">occurred</span><span class=\"w\"> </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"n\">processing</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">command.</span><span class=\"w\">\n \t </span><span class=\"n\">class</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">java.lang.IllegalStateException</span></code></pre></figure>\n\n<p>I was able to resolve it by killing all processes running on port 4444 and trying again.</p>\n\n<p>At the terminal:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-r\" data-lang=\"r\"><span class=\"n\">lsof</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"m\">4444</span></code></pre></figure>\n\n<p>Kill PIDs of any processes listed.  For example:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-r\" data-lang=\"r\"><span class=\"n\">kill</span><span class=\"w\"> </span><span class=\"m\">30681</span></code></pre></figure>\n\n\n  <p><a href=\"http://brooksandrew.github.io/simpleblog/articles/scraping-with-selenium/\">Scraping with Selenium</a> was originally published by andrew brooks at <a href=\"http://brooksandrew.github.io/simpleblog\">andrew brooks</a> on December 11, 2014.</p>"
}