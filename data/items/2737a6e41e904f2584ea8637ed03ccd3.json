{
  "title": "Introducing LogPy",
  "link": "",
  "updated": "2013-01-14T00:00:00+00:00",
  "id": "https://mrocklin.github.io/blog/work/2013/01/14/LogPy-Introduction",
  "content": "<p><a href=\"http://github.com/logpy/logpy\">LogPy</a> is a library for logic and relational programming in Python.  This post contains some introductory examples.</p>\n\n<h2 id=\"informative-examples\">Informative Examples</h2>\n\n<p>LogPy enables the expression of relations and the search for values which satisfy them.  The following code is the “Hello, world!” of logic programming.  It asks for <code class=\"language-plaintext highlighter-rouge\">1</code> number, <code class=\"language-plaintext highlighter-rouge\">x</code>, such that <code class=\"language-plaintext highlighter-rouge\">x == 5</code></p>\n\n<figure class=\"highlight\">\n  <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">logpy</span> <span class=\"kn\">import</span> <span class=\"n\">run</span><span class=\"p\">,</span> <span class=\"n\">eq</span><span class=\"p\">,</span> <span class=\"n\">membero</span><span class=\"p\">,</span> <span class=\"n\">var</span><span class=\"p\">,</span> <span class=\"n\">conde</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">var</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">run</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">eq</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,)</span></code></pre>\n</figure>\n\n<p>Multiple variables and multiple goals can be used simultaneously.  The\nfollowing code asks for a number x such that <code class=\"language-plaintext highlighter-rouge\">x == z</code> and <code class=\"language-plaintext highlighter-rouge\">z == 3</code></p>\n\n<figure class=\"highlight\">\n  <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">z</span> <span class=\"o\">=</span> <span class=\"n\">var</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">run</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">eq</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">),</span>\n              <span class=\"n\">eq</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,)</span></code></pre>\n</figure>\n\n<p>LogPy uses <a href=\"http://en.wikipedia.org/wiki/Unification_%28computer_science%29\">unification</a>, an advanced form of pattern matching, to match within expression trees.\nThe following code asks for a number, x, such that <code class=\"language-plaintext highlighter-rouge\">(1, 2) == (1, x)</code> holds.</p>\n\n<figure class=\"highlight\">\n  <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">run</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">eq</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)))</span>\n<span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,)</span></code></pre>\n</figure>\n\n<p>The above examples use <code class=\"language-plaintext highlighter-rouge\">eq</code>, a <em>goal</em> to state that two expressions are equal.  Other goals exist.  <code class=\"language-plaintext highlighter-rouge\">membero(item, coll)</code>, a goal, states that <code class=\"language-plaintext highlighter-rouge\">item</code>\nis a member of <code class=\"language-plaintext highlighter-rouge\">coll</code>, a collection.</p>\n\n<p>The following example uses <code class=\"language-plaintext highlighter-rouge\">membero</code> twice to ask for 2 values of x, such that x is a member of <code class=\"language-plaintext highlighter-rouge\">(1, 2, 3)</code> <em>and</em> that x is a member of <code class=\"language-plaintext highlighter-rouge\">(2, 3, 4)</code>.</p>\n\n<figure class=\"highlight\">\n  <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">run</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">membero</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)),</span>  <span class=\"c1\"># x is a member of (1, 2, 3)\n</span>              <span class=\"n\">membero</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)))</span>  <span class=\"c1\"># x is a member of (2, 3, 4)\n</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span></code></pre>\n</figure>\n\n<p>We can write other fancier goals too.  Here is a list of all prime numbers\nwithin <code class=\"language-plaintext highlighter-rouge\">1..10</code>.  <code class=\"language-plaintext highlighter-rouge\">primo</code> depends on the traditional <code class=\"language-plaintext highlighter-rouge\">prime</code> and <code class=\"language-plaintext highlighter-rouge\">isprime</code> functions found in <code class=\"language-plaintext highlighter-rouge\">sympy</code>.</p>\n\n<figure class=\"highlight\">\n  <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">logpy.math</span> <span class=\"kn\">import</span> <span class=\"n\">primo</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">run</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">membero</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"p\">,</span><span class=\"mi\">7</span><span class=\"p\">,</span><span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"mi\">9</span><span class=\"p\">,</span><span class=\"mi\">10</span><span class=\"p\">)),</span>\n              <span class=\"p\">(</span><span class=\"n\">primo</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)</span></code></pre>\n</figure>\n\n<p>Want just a few primes?  Here are five numbers that satisfy the <code class=\"language-plaintext highlighter-rouge\">primo</code> goal</p>\n\n<figure class=\"highlight\">\n  <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">run</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">primo</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">)</span></code></pre>\n</figure>\n\n<h2 id=\"relations\">Relations</h2>\n\n<p>We often want to state and then query data.  Logic programming represents data a set of facts and represents queries with logical goals.  In the following examples we assert some facts about the Simpsons family, construct queries through logical goals and then run the queries to obtain results.</p>\n\n<p>The following code defines a <code class=\"language-plaintext highlighter-rouge\">parent</code> relation and uses it to state who fathered whom.</p>\n\n<figure class=\"highlight\">\n  <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">logpy</span> <span class=\"kn\">import</span> <span class=\"n\">Relation</span><span class=\"p\">,</span> <span class=\"n\">facts</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">parent</span> <span class=\"o\">=</span> <span class=\"n\">Relation</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">facts</span><span class=\"p\">(</span><span class=\"n\">parent</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"s\">'Homer'</span><span class=\"p\">,</span> <span class=\"s\">'Bart'</span><span class=\"p\">),</span>\n<span class=\"p\">...</span>               <span class=\"p\">(</span><span class=\"s\">'Homer'</span><span class=\"p\">,</span> <span class=\"s\">'Lisa'</span><span class=\"p\">),</span>\n<span class=\"p\">...</span>               <span class=\"p\">(</span><span class=\"s\">'Abe'</span><span class=\"p\">,</span>  <span class=\"s\">'Homer'</span><span class=\"p\">))</span></code></pre>\n</figure>\n\n<p>We ask some questions using the <code class=\"language-plaintext highlighter-rouge\">parent</code> relation as a goal constructor.  Who is Bart’s father?</p>\n\n<figure class=\"highlight\">\n  <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">run</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">parent</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"s\">'Bart'</span><span class=\"p\">))</span>  <span class=\"c1\"># one x such that x is a parent of Bart\n</span><span class=\"p\">(</span><span class=\"s\">'Homer'</span><span class=\"p\">,)</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">run</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">parent</span><span class=\"p\">(</span><span class=\"s\">'Homer'</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">))</span> <span class=\"c1\"># two xs such that Homer is a parent of x\n</span><span class=\"p\">(</span><span class=\"s\">'Lisa'</span><span class=\"p\">,</span> <span class=\"s\">'Bart'</span><span class=\"p\">)</span></code></pre>\n</figure>\n\n<p>We can use intermediate variables for more complex queries.  Who is Bart’s grandfather?</p>\n\n<figure class=\"highlight\">\n  <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">var</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">run</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">parent</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">),</span>\n              <span class=\"n\">parent</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"s\">'Bart'</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"s\">'Abe'</span><span class=\"p\">,)</span></code></pre>\n</figure>\n\n<p>We can express the grandfather relationship separately.  In this example we use <code class=\"language-plaintext highlighter-rouge\">conde</code>, a goal constructor for logical <em>and</em> and <em>or</em>.</p>\n\n<figure class=\"highlight\">\n  <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">def</span> <span class=\"nf\">grandparent</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">):</span>\n<span class=\"p\">...</span>     <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">var</span><span class=\"p\">()</span>\n<span class=\"p\">...</span>     <span class=\"k\">return</span> <span class=\"n\">conde</span><span class=\"p\">((</span><span class=\"n\">parent</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">),</span> <span class=\"n\">parent</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">)))</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">run</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">grandparent</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"s\">'Bart'</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"s\">'Abe,'</span><span class=\"p\">)</span></code></pre>\n</figure>\n\n<p><code class=\"language-plaintext highlighter-rouge\">grandparent</code> demonstrates that we can construct complex relations programmatically.  How would you define sibling?  How about uncle or aunt?  How about descendant?</p>\n\n<p>If you’d like to play with LogPy you can install it with pip or easy_install using</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>pip install logic\n</code></pre></div></div>\n\n<p>or clone it directly from github</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>git clone git@github.com:logpy/logpy.git\n</code></pre></div></div>\n\n<p>Source is available at <a href=\"http://github.com/logpy/logpy/\">http://github.com/logpy/logpy/</a>, design input and contributions are much appreciated.</p>\n\n<h2 id=\"logic-programming-in-general\">Logic Programming in General</h2>\n\n<p>Logic and relational programming are making a comeback.  They were popular in the 80s, died during the AI dark ages, and have recently begun a resurgence in the functional programming community.  Logic programs write music, search databases, write numeric algorithms, and build testing frameworks.  It is expressive for a wide class of problems.</p>\n\n<p>The design of LogPy is based off of <code class=\"language-plaintext highlighter-rouge\">miniKanren</code>, a simple and powerful implementation in Scheme popularized through the <code class=\"language-plaintext highlighter-rouge\">core.logic</code> Clojure library.</p>\n\n<h2 id=\"references\">References</h2>\n\n<ol>\n  <li><a href=\"http://kanren.sourceforge.net/\">miniKanren</a></li>\n  <li><a href=\"https://github.com/clojure/core.logic\">core.logic</a></li>\n  <li><a href=\"http://en.wikipedia.org/wiki/Logic_programming\">Wikipedia article on Logic Programming</a></li>\n  <li><a href=\"https://github.com/clojure/core.logic/wiki/A-Core.logic-Primer\">core.logic primer</a></li>\n</ol>"
}