{
  "title": "R ggmap – How to Visualize Spatial Data in R",
  "link": "https://www.r-bloggers.com/2022/11/r-ggmap-how-to-visualize-spatial-data-in-r/",
  "dc:creator": "Dario Radečić",
  "pubDate": "Thu, 03 Nov 2022 14:45:59 +0000",
  "category": "R bloggers",
  "guid": "https://wordpress.appsilon.com/?p=14486",
  "description": "<div style = \"width:60%; display: inline-block; float:left; \">\nSpatial data is always tougher to visualize than it seems at first. Well, not anymore. R ggmap is an amazing package you can start using almost instantly, after some light configuration. It won’t take you more than a couple of minutes to configure everything and have your first map ...</div>\n<div style = \"width: 40%; display: inline-block; float:right;\"></div>\n<div style=\"clear: both;\"></div>\n<strong>Continue reading</strong>: <a href=\"https://www.r-bloggers.com/2022/11/r-ggmap-how-to-visualize-spatial-data-in-r/\">R ggmap – How to Visualize Spatial Data in R</a>",
  "content:encoded": "<!-- \n<div style=\"min-height: 30px;\">\n[social4i size=\"small\" align=\"align-left\"]\n</div>\n-->\n\n<div style=\"border: 1px solid; background: none repeat scroll 0 0 #EDEDED; margin: 1px; font-size: 12px;\">\n[This article was first published on  <strong><a href=\"https://appsilon.com/r-ggmap/\"> Tag: r - Appsilon | Enterprise R Shiny Dashboards</a></strong>, and kindly contributed to <a href=\"https://www.r-bloggers.com/\" rel=\"nofollow\">R-bloggers</a>].  (You can report issue about the content on this page <a href=\"https://www.r-bloggers.com/contact-us/\">here</a>)\n<hr>Want to share your content on R-bloggers?<a href=\"https://www.r-bloggers.com/add-your-blog/\" rel=\"nofollow\"> click here</a> if you have a blog, or <a href=\"http://r-posts.com/\" rel=\"nofollow\"> here</a> if you don't.\n</div>\n<div><img src=\"https://i1.wp.com/wordpress.appsilon.com/wp-content/uploads/2022/07/r-ggmap-package-2022-Blog-Hero.png?w=450&#038;ssl=1\" class=\"attachment-medium size-medium wp-post-image\" alt=\"Visualizing spatial data in R with the ggmap R package\" decoding=\"async\" loading=\"lazy\" style=\"margin-bottom: 15px;\" data-recalc-dims=\"1\" /></div><p><strong>Spatial data</strong> is always tougher to <strong>visualize</strong> than it seems at first. Well, not anymore. <strong>R ggmap</strong> is an amazing package you can start using almost instantly, after some light configuration. It won’t take you more than a couple of minutes to configure everything and have your first map ready.</p>\n<p>Today you’ll learn how to use the <code>ggmap</code> package to do almost everything <strong>geodata-related</strong>. We’ll kick things off by <strong>plotting</strong> basic maps, markers, and paths, and then dive into changing map themes. Once that’s under our belt, we’ll focus on advanced topics, including<strong> geocoding</strong>, <strong>reverse geocoding</strong>, <strong>drawing routes</strong>, and <strong>calculating distance</strong> between locations.</p>\n<blockquote><p>Want to build interactive Google Maps? <a href=\"https://appsilon.com/interactive-google-maps-with-r-shiny/\" rel=\"nofollow\" target=\"_blank\">Here’s a complete guide for interactive Google Maps in Shiny</a>.</p></blockquote>\n<p>Table of contents:</p>\n<ul>\n<li><a href=\"https://appsilon.com/r-ggmap/#introduction\" rel=\"nofollow\" target=\"_blank\">Introduction to R ggmap Package</a></li>\n<li><a href=\"https://appsilon.com/r-ggmap/#points-and-paths\" rel=\"nofollow\" target=\"_blank\">Plot Points and Paths with R ggmap</a></li>\n<li><a href=\"https://appsilon.com/r-ggmap/#map-type\" rel=\"nofollow\" target=\"_blank\">How to Change the Map Type</a></li>\n<li><a href=\"https://appsilon.com/r-ggmap/#advanced-1\" rel=\"nofollow\" target=\"_blank\">Advanced #1 – Geocoding and Reverse Geocoding with ggmap</a></li>\n<li><a href=\"https://appsilon.com/r-ggmap/#advanced-2\" rel=\"nofollow\" target=\"_blank\">Advanced #2 – Drawing Routes with ggmap</a></li>\n<li><a href=\"https://appsilon.com/r-ggmap/#advanced-3\" rel=\"nofollow\" target=\"_blank\">Advanced #3 – Calculating Distances Between Locations</a></li>\n<li><a href=\"https://appsilon.com/r-ggmap/#summary\" rel=\"nofollow\" target=\"_blank\">Summary of R ggmap</a></li>\n</ul>\n<hr />\n<h2 id=\"introduction\">Introduction to R ggmap Package</h2>\n<p>First things first, there’s a bit of setup we have to go over. <code>ggmap</code> uses Google Maps behind the scenes, so you’ll need an active <a href=\"https://cloud.google.com/\" rel=\"nofollow\" target=\"_blank\">Google Cloud Platform</a> account. You’ll also have to set up billing, as it’s required for their mapping APIs. Don’t worry, GCP won’t charge you a penny without your knowledge.</p>\n<p>Is the account ready? Great, now enable the following APIs under <i>APIs &#038; Services – Library</i>:</p>\n<ul>\n<li>Maps JavaScript API</li>\n<li>Maps Static API</li>\n<li>Geocoding API</li>\n</ul>\n<p>These are required to establish a connection between R and Google Maps. The final step is to create a new API key. Go under <i>Credentials</i> and click on <i>+ Create credentials</i> to get a new API key. Ours looks like this:</p>\n<div id=\"attachment_14456\" style=\"width: 1824px\" class=\"wp-caption alignnone\"><img aria-describedby=\"caption-attachment-14456\" decoding=\"async\" loading=\"lazy\" class=\"size-full wp-image-14456\" src=\"https://i0.wp.com/wordpress.appsilon.com/wp-content/uploads/2022/07/1-2.png?w=450&#038;ssl=1\" alt=\"Image 1 - Google Cloud Platform Maps API key\" data-recalc-dims=\"1\" /><p id=\"caption-attachment-14456\" class=\"wp-caption-text\">Image 1 – Google Cloud Platform Maps API key</p></div>\n<p>That’s all you need from GCP. Now head over to RStudio and install <code>ggmap</code> with the following command:</p>\n<pre>install.packages(\"ggmap\")</pre>\n<p>The last step in the configuration process is to connect R and Google Maps. That’s done with the API key you’ve just created. Make sure to specify <code>write = TRUE</code> so you don’t have to call this function ever again:</p>\n<pre>ggmap::register_google(key = \"<your-api-key>\", write = TRUE)</pre>\n<div id=\"attachment_14458\" style=\"width: 1412px\" class=\"wp-caption alignnone\"><img aria-describedby=\"caption-attachment-14458\" decoding=\"async\" loading=\"lazy\" class=\"size-full wp-image-14458\" src=\"https://i0.wp.com/wordpress.appsilon.com/wp-content/uploads/2022/07/2-2.png?w=450&#038;ssl=1\" alt=\"Image 2 - Registering R ggmap with GCP\" data-recalc-dims=\"1\" /><p id=\"caption-attachment-14458\" class=\"wp-caption-text\">Image 2 – Registering R ggmap with GCP</p></div>\n<p>That’s it! Let’s verify the configuration succeeded. The following code snippet uses the <code>get_googlemap()</code> function to draw a map at a specific location. No latitude/longitude pairs are required (but you can use them), just specify the location string:</p>\n<pre>library(ggmap)\n\nget_googlemap(center = \"New York\") %>% ggmap()</pre>\n<p>The map looks familiar, at least if you’ve used Google Maps in the past:</p>\n<div id=\"attachment_14460\" style=\"width: 1680px\" class=\"wp-caption alignnone\"><img aria-describedby=\"caption-attachment-14460\" decoding=\"async\" loading=\"lazy\" class=\"size-full wp-image-14460\" src=\"https://i0.wp.com/wordpress.appsilon.com/wp-content/uploads/2022/07/3-1.png?w=450&#038;ssl=1\" alt=\"Image 3 - Basic ggmap map of New York City\" data-recalc-dims=\"1\" /><p id=\"caption-attachment-14460\" class=\"wp-caption-text\">Image 3 – Basic ggmap map of New York City</p></div>\n<p>To get a satellite view instead, add an additional <code>maptype</code> argument and set it to <code>satellite</code>:</p>\n<pre>get_googlemap(\"New York\", zoom = 12, maptype = \"satellite\") %>% ggmap()</pre>\n<div id=\"attachment_14462\" style=\"width: 1536px\" class=\"wp-caption alignnone\"><img aria-describedby=\"caption-attachment-14462\" decoding=\"async\" loading=\"lazy\" class=\"size-full wp-image-14462\" src=\"https://i0.wp.com/wordpress.appsilon.com/wp-content/uploads/2022/07/4-2.png?w=450&#038;ssl=1\" alt=\"Image 4 - Satellite map of New York City\" data-recalc-dims=\"1\" /><p id=\"caption-attachment-14462\" class=\"wp-caption-text\">Image 4 – Satellite map of New York City</p></div>\n<p>There’s also a <code>hybrid</code> option available, which will show a satellite view with roads, labels, and points of interest.</p>\n<p>You have to admit – drawing a basic map was pretty easy. Let’s complicate things slightly next.</p>\n<h2 id=\"points-and-paths\">Plot Points and Paths with R ggmap</h2>\n<p>Most of the time, you want to display markers or paths on your spatial visualizations. Maybe you want to map out school locations in a specific city or draw a line from one point to the other. Whatever the case might be, this section has you covered.</p>\n<blockquote><p>Working with GPX files? <a href=\"https://appsilon.com/r-gpx-files/\" rel=\"nofollow\" target=\"_blank\">Learn how to read and visualize GPX files in R.</a></p></blockquote>\n<p>To avoid downloading any datasets, we’ll create a <code>data.frame</code> of 50 points scattered around (-74, 40.74) geolocation, which should be right around NYC. That’s done by combining <code>jitter()</code> and <code>rep()</code> functions:</p>\n<pre>set.seed(42)\n\npoint_df <- round(data.frame(\n  x = jitter(rep(-74, 50), amount = 0.05),\n  y = jitter(rep(40.74, 50), amount = 0.05)\n), digits = 2)\nhead(point_df)</pre>\n<p>Here’s what the dataset looks like:</p>\n<div id=\"attachment_14464\" style=\"width: 296px\" class=\"wp-caption alignnone\"><img aria-describedby=\"caption-attachment-14464\" decoding=\"async\" loading=\"lazy\" class=\"size-full wp-image-14464\" src=\"https://i2.wp.com/wordpress.appsilon.com/wp-content/uploads/2022/07/5-2.png?resize=286%2C300&#038;ssl=1\" alt=\"Image 5 - Creating a data.frame of random data points\" width=\"286\" height=\"300\" data-recalc-dims=\"1\" /><p id=\"caption-attachment-14464\" class=\"wp-caption-text\">Image 5 – Creating a data.frame of random data points</p></div>\n<p>Those are the coordinates at which we’ll draw markers first. To do so, simply add another argument in a call to <code>get_googlemap()</code> – <code>markers</code>, and pass the dataset as a value. It will automatically infer what’s what, so you don’t have to lift a finger:</p>\n<pre>get_googlemap(center = \"New York\", zoom = 12, markers = point_df, scale = 2) %>% ggmap()</pre>\n<div id=\"attachment_14466\" style=\"width: 1752px\" class=\"wp-caption alignnone\"><img aria-describedby=\"caption-attachment-14466\" decoding=\"async\" loading=\"lazy\" class=\"size-full wp-image-14466\" src=\"https://i0.wp.com/wordpress.appsilon.com/wp-content/uploads/2022/07/6-2.png?w=450&#038;ssl=1\" alt=\"Image 6 - Random data points as markers on the map\" data-recalc-dims=\"1\" /><p id=\"caption-attachment-14466\" class=\"wp-caption-text\">Image 6 – Random data points as markers on the map</p></div>\n<p>The story is similar if you want to draw lines (path). For simplicity’s sake, let’s connect all the points instead of showing markers. Swap the <code>markers</code> attribute for <code>path</code>:</p>\n<pre>get_googlemap(center = \"New York\", zoom = 12, path = point_df, scale = 2) %>% ggmap()</pre>\n<div id=\"attachment_14468\" style=\"width: 1594px\" class=\"wp-caption alignnone\"><img aria-describedby=\"caption-attachment-14468\" decoding=\"async\" loading=\"lazy\" class=\"size-full wp-image-14468\" src=\"https://i1.wp.com/wordpress.appsilon.com/wp-content/uploads/2022/07/7-1.png?w=450&#038;ssl=1\" alt=\"Image 7 - Random data points as a path on the map\" data-recalc-dims=\"1\" /><p id=\"caption-attachment-14468\" class=\"wp-caption-text\">Image 7 – Random data points as a path on the map</p></div>\n<p>The resulting map is messy, but you get the point. You can also use both <code>markers</code> and <code>path</code> in a single function call if you want to display both markers and lines.</p>\n<p>With the basics out of the way, let’s see how we can spice the looks of the map.</p>\n<h2 id=\"map-type\">How to Change the Map Type</h2>\n<p>The default map options (terrain, satellite, hybrid) aren’t the best fit for every use case. R and <code>ggmap</code> allow you to use several options for free. These are:</p>\n<ul>\n<li><code>stamen.toner</code></li>\n<li><code>stamen.watercolor</code></li>\n<li><code>stamen.terrain-background</code></li>\n<li><code>stamen.toner-lite</code></li>\n</ul>\n<p>We’ll show you what the first two look like. You have to use a different function this time – <code>qmap()</code> – it serves as a wrapper for <code>ggmap</code> and <code>get_map</code>. Two new parameters are needed, <code>source</code> and <code>maptype</code>. These represent the values shown in the above list.</p>\n<p>Here’s an example of a map that uses <code>stamen.toner</code> map type:</p>\n<pre>qmap(\"New York\", zoom = 12, scale = 2, source = \"stamen\", maptype = \"toner\")</pre>\n<div id=\"attachment_14470\" style=\"width: 1434px\" class=\"wp-caption alignnone\"><img aria-describedby=\"caption-attachment-14470\" decoding=\"async\" loading=\"lazy\" class=\"size-full wp-image-14470\" src=\"https://i0.wp.com/wordpress.appsilon.com/wp-content/uploads/2022/07/8-1.png?w=450&#038;ssl=1\" alt=\"Image 8 - Stamen Toner map type\" data-recalc-dims=\"1\" /><p id=\"caption-attachment-14470\" class=\"wp-caption-text\">Image 8 – Stamen Toner map type</p></div>\n<p>It’s a neat black-and-white theme that definitely has its place on some reports and dashboards.</p>\n<p>If you’re more interested in colorful options, look no further than <code>stamen.watercolor</code>:</p>\n<pre>qmap(\"New York\", zoom = 12, scale = 2, source = \"stamen\", maptype = \"watercolor\")</pre>\n<div id=\"attachment_14472\" style=\"width: 1300px\" class=\"wp-caption alignnone\"><img aria-describedby=\"caption-attachment-14472\" decoding=\"async\" loading=\"lazy\" class=\"size-full wp-image-14472\" src=\"https://i1.wp.com/wordpress.appsilon.com/wp-content/uploads/2022/07/9.png?w=450&#038;ssl=1\" alt=\"Image 9 - Stamen Watercolor map type\" data-recalc-dims=\"1\" /><p id=\"caption-attachment-14472\" class=\"wp-caption-text\">Image 9 – Stamen Watercolor map type</p></div>\n<p>This one’s best used when there’s a lot of water on a map because it colors it with a beautiful shade of blue.</p>\n<p>As for the other two options – feel free to explore them on your own.</p>\n<h2 id=\"advanced-1\">Advanced #1 – Geocoding and Reverse Geocoding with ggmap</h2>\n<p>Let’s dive into more advanced use cases of the R ggmap package. The first one isn’t at all tied to data visualization, but can come in handy in the right circumstances.</p>\n<p>We’ll show you how you can use <code>ggmap</code> for <b>geocoding</b> and <code>reverse geocoding</code> operations. Put simply, geocoding returns geolocation (latitude and longitude) when given an address. Reverse geocoding goes from geolocation to an address.</p>\n<p>In R, it boils down to a single function call:</p>\n<ul>\n<li><code>ggmap::geocode()</code> will convert an address into a latitude and longitude pair.</li>\n<li><code>ggmap::revgeocode()</code> will convert a vector of latitude and longitude values into one or multiple addresses, depending on how many decimal places you specify.</li>\n</ul>\n<p>Let’s take a look at a geocoding example first:</p>\n<pre>geocode(\"20 W 34th St., New York\")</pre>\n<div id=\"attachment_14474\" style=\"width: 654px\" class=\"wp-caption alignnone\"><img aria-describedby=\"caption-attachment-14474\" decoding=\"async\" loading=\"lazy\" class=\"size-full wp-image-14474\" src=\"https://i2.wp.com/wordpress.appsilon.com/wp-content/uploads/2022/07/10.png?w=450&#038;ssl=1\" alt=\"Image 10 - Geocoding - from address to latitude and longitude\" data-recalc-dims=\"1\" /><p id=\"caption-attachment-14474\" class=\"wp-caption-text\">Image 10 – Geocoding – from address to latitude and longitude</p></div>\n<p>Both latitude and longitude are returned but aren’t precise. These coordinates point to NYC, but without more decimal places you won’t be able to pinpoint the address.</p>\n<p>As for reverse geocoding, <code>ggmap</code> tends to return multiple values when many objects of interest are nearby:</p>\n<pre>revgeocode(c(lon = -73.985428, lat = 40.748817))</pre>\n<div id=\"attachment_14476\" style=\"width: 830px\" class=\"wp-caption alignnone\"><img aria-describedby=\"caption-attachment-14476\" decoding=\"async\" loading=\"lazy\" class=\"size-full wp-image-14476\" src=\"https://i2.wp.com/wordpress.appsilon.com/wp-content/uploads/2022/07/11.png?w=450&#038;ssl=1\" alt=\"Image 11 - Reverse geocoding - from latitude and longitude to address\" data-recalc-dims=\"1\" /><p id=\"caption-attachment-14476\" class=\"wp-caption-text\">Image 11 – Reverse geocoding – from latitude and longitude to address</p></div>\n<p>The address of the Empire State Building should have been returned if you’re wondering.</p>\n<h2 id=\"advanced-2\">Advanced #2 – Drawing Routes with ggmap</h2>\n<p>The second advanced <code>ggmap</code> use case has to do with drawing routes. What this package does for you is amazing – you can specify starting and ending points as strings, and use the <code>trek()</code> function to construct a route data frame. It will contain data points that when plotted will show an optimal driving route from one place to the other.</p>\n<p>To start, we’ll create a route from Miami, FL to Austin, TX:</p>\n<pre>trek_df <- trek(\"miami, florida\", \"austin, texas\", structure = \"route\")\nhead(trek_df)</pre>\n<p>Here’s what it looks like:</p>\n<div id=\"attachment_14478\" style=\"width: 384px\" class=\"wp-caption alignnone\"><img aria-describedby=\"caption-attachment-14478\" decoding=\"async\" loading=\"lazy\" class=\"size-full wp-image-14478\" src=\"https://i0.wp.com/wordpress.appsilon.com/wp-content/uploads/2022/07/12.png?resize=374%2C378&#038;ssl=1\" alt=\"Image 12 - Creating a route dataset\" width=\"374\" height=\"378\" data-recalc-dims=\"1\" /><p id=\"caption-attachment-14478\" class=\"wp-caption-text\">Image 12 – Creating a route dataset</p></div>\n<p>To draw a route, we’ll use the <code>geom_path()</code> function that acts just like any familiar method from <code>2</code> package. After all, <code>ggmap</code> was built on top of that package.</p>\n<p>Here’s the entire code:</p>\n<pre>qmap(zoom = 4) + \n  geom_path(\n    aes(x = lon, y = lat), color = \"blue\", size = 1, data = trek_df\n  )</pre>\n<div id=\"attachment_14480\" style=\"width: 1680px\" class=\"wp-caption alignnone\"><img aria-describedby=\"caption-attachment-14480\" decoding=\"async\" loading=\"lazy\" class=\"size-full wp-image-14480\" src=\"https://i1.wp.com/wordpress.appsilon.com/wp-content/uploads/2022/07/13.png?w=450&#038;ssl=1\" alt=\"Image 13 - Plotting a route with ggmap\" data-recalc-dims=\"1\" /><p id=\"caption-attachment-14480\" class=\"wp-caption-text\">Image 13 – Plotting a route with ggmap</p></div>\n<p>And there you have it – routing doesn’t get much easier.</p>\n<h2 id=\"advanced-3\">Advanced #3 – Calculating Distances Between Locations</h2>\n<p>For the final advanced use case, we’ll take a look at distance calculation. The <code>ggmap</code> package has a <code>mapdist()</code> function which accepts at least two parameters:</p>\n<ul>\n<li><code>from</code> – a vector of strings, where each string represents a location (e.g., “miami, florida”).</li>\n<li><code>to</code>– a string that represents the destination (same format as above).</li>\n</ul>\n<p>We’ll use this function to calculate distances from three locations to Austin, TX:</p>\n<pre>mapdist(c(\"miami, florida\", \"los angeles, california\", \"boulder, colorado\"), \"austin, texas\")</pre>\n<p>The function returns a data frame that looks as follows:</p>\n<div id=\"attachment_14482\" style=\"width: 1444px\" class=\"wp-caption alignnone\"><img aria-describedby=\"caption-attachment-14482\" decoding=\"async\" loading=\"lazy\" class=\"size-full wp-image-14482\" src=\"https://i0.wp.com/wordpress.appsilon.com/wp-content/uploads/2022/07/14.png?w=450&#038;ssl=1\" alt=\"Image 14 - Calculating distances between locations with ggmap\" data-recalc-dims=\"1\" /><p id=\"caption-attachment-14482\" class=\"wp-caption-text\">Image 14 – Calculating distances between locations with ggmap</p></div>\n<p>You get absolutely everything you could ask for and more with this function – from meters, kilometers, and miles, to even estimated time of driving.</p>\n<blockquote><p>Starting to get a feel for R? Be sure you know these<a href=\"https://appsilon.com/r-for-programmers/\" rel=\"nofollow\" target=\"_blank\"> 7 essential R packages</a>.</p></blockquote>\n<p>We’ve explored a lot of functionalities <code>ggmap</code> has to offer, so let’s make a short recap next.</p>\n<hr />\n<h2 id=\"summary\">Summary of R ggmap</h2>\n<p>In short, <code>ggmap</code> can easily become a central place for anything mapping related in R. It has everything you could ask for and more – from visualization options to geocoding, reverse geocoding, routing, and distance calculation. The only gotcha is that you need an active GCP account with billing enabled. You won’t get charged to a certain point, but Google APIs are nowhere near free for heavy usage. For personal projects, you should be able to manage in the free tier.</p>\n<blockquote><p>Ready to take your remote sensing game to the next level? <a href=\"https://appsilon.com/using-ai-to-detect-solar-panels-part-1/\" rel=\"nofollow\" target=\"_blank\">Build your own solar panel detection app using AI and streamlit</a>.</p></blockquote>\n<p>What’s your favorite <code>ggmap</code> feature that we haven’t covered? Is it your default mapping package, or have you opted for something else? Please let us know in the comment section below.</p>\n<blockquote><p>Want to visualize spatial data without a GCP account? <a href=\"https://appsilon.com/leaflet-geomaps/\" rel=\"nofollow\" target=\"_blank\">Try Leaflet with our complete guide</a>.</p></blockquote>\n<p>The post <a rel=\"nofollow\" href=\"https://wordpress.appsilon.com/r-ggmap/\" target=\"_blank\">R ggmap – How to Visualize Spatial Data in R</a> appeared first on <a rel=\"nofollow\" href=\"https://wordpress.appsilon.com/\" target=\"_blank\">Appsilon | Enterprise R Shiny Dashboards</a>.</p>\n\n<div style=\"border: 1px solid; background: none repeat scroll 0 0 #EDEDED; margin: 1px; font-size: 13px;\">\n<div style=\"text-align: center;\">To <strong>leave a comment</strong> for the author, please follow the link and comment on their blog: <strong><a href=\"https://appsilon.com/r-ggmap/\"> Tag: r - Appsilon | Enterprise R Shiny Dashboards</a></strong>.</div>\n<hr />\n<a href=\"https://www.r-bloggers.com/\" rel=\"nofollow\">R-bloggers.com</a> offers <strong><a href=\"https://feedburner.google.com/fb/a/mailverify?uri=RBloggers\" rel=\"nofollow\">daily e-mail updates</a></strong> about <a title=\"The R Project for Statistical Computing\" href=\"https://www.r-project.org/\" rel=\"nofollow\">R</a> news and tutorials about <a title=\"R tutorials\" href=\"https://www.r-bloggers.com/how-to-learn-r-2/\" rel=\"nofollow\">learning R</a> and many other topics. <a title=\"Data science jobs\" href=\"https://www.r-users.com/\" rel=\"nofollow\">Click here if you're looking to post or find an R/data-science job</a>.\n\n<hr>Want to share your content on R-bloggers?<a href=\"https://www.r-bloggers.com/add-your-blog/\" rel=\"nofollow\"> click here</a> if you have a blog, or <a href=\"http://r-posts.com/\" rel=\"nofollow\"> here</a> if you don't.\n</div><strong>Continue reading</strong>: <a href=\"https://www.r-bloggers.com/2022/11/r-ggmap-how-to-visualize-spatial-data-in-r/\">R ggmap – How to Visualize Spatial Data in R</a>",
  "enclosure": "",
  "post-id": 334361
}