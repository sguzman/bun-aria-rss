{
  "title": "Monotonicity constraints in machine learning",
  "link": "http://blog.datadive.net/monotonicity-constraints-in-machine-learning/",
  "comments": "http://blog.datadive.net/monotonicity-constraints-in-machine-learning/#comments",
  "dc:creator": "ando",
  "pubDate": "Sun, 16 Sep 2018 10:01:42 +0000",
  "category": [
    "Data science",
    "Machine learning"
  ],
  "guid": "http://blog.datadive.net/?p=4721",
  "description": "In practical machine learning and data science tasks, an ML model is often used to quantify a global, semantically meaningful relationship between two or more values. For example, a hotel chain might want to use ML to optimize their pricing &#8230; <a href=\"http://blog.datadive.net/monotonicity-constraints-in-machine-learning/\">Continue reading <span class=\"meta-nav\">&#8594;</span></a>",
  "content:encoded": "<p>In practical machine learning and data science tasks, an ML model is often used to quantify a global, semantically meaningful relationship between two or more values. For example, a hotel chain might want to use ML to optimize their pricing strategy and use a model to estimate the likelihood of a room being booked at a given price and day of the week. For a relationship like this the assumption is that, all other things being equal, a cheaper price is preferred by a user, so demand is higher at a lower price. However what might easily happen is that upon building the model, the data scientist discovers that the model is behaving unexpectedly: for example the model predicts that on Tuesdays, the clients would rather pay $110 than $100 for a room! The reason is that while there is an expected monotonic relationship between price and the likelihood of booking, the model is unable to (fully) capture it, due to noisiness of the data and confounds in it.</p><p>Too often, such constraints  are ignored by practitioners, especially when non-linear models such as random forests, gradient boosted trees or neural networks are used. And while monotonicity constraints have been a topic of academic research for a long time (see a <a href=\"http://www.kdd.org/exploration_files/potharst.pdf\">survey paper</a> on monotonocity constraints for tree based methods), there has been lack of support from libraries, making the problem hard to tackle for practitioners.</p><p>Luckily, in recent years there has been a lot of progress in various ML libraries to allow setting monotonicity constraints for the models, including in <a href=\"https://github.com/Microsoft/LightGBM\">LightGBM</a> and <a href=\"https://github.com/dmlc/xgboost\">XGBoost</a>, two of the most popular libraries for gradient boosted trees. Monotonicity constraints have also been built into <a href=\"https://github.com/tensorflow/lattice\">Tensorflow Lattice</a>, a library that implements a novel method for creating interpolated lookup tables.</p>\n<h2>Monotonicity constraints in LighGBM and XGBoost</h2><p>For tree based methods (decision trees, random forests, gradient boosted trees), monotonicity can be forced during the model learning phase by not creating splits on monotonic features that would break the monotonicity constraint. </p><p>In the following example, let&#8217;s train too models using LightGBM on a toy dataset where we know the relationship between X and Y to be monotonic (but noisy) and compare the default and monotonic model.</p>\n<pre class=\"brush: python; collapse: false; title: ; wrap-lines: false; notranslate\">\nimport numpy as np\nsize = 100\nx = np.linspace(0, 10, size) \ny = x**2 + 10 - (20 * np.random.random(size))\n</pre><p><a href=\"http://blog.datadive.net/wp-content/uploads/2018/09/data_plot.png\"><img loading=\"lazy\" class=\"alignnone size-full wp-image-4729\" src=\"http://blog.datadive.net/wp-content/uploads/2018/09/data_plot.png\" alt=\"\" width=\"393\" height=\"261\" srcset=\"http://blog.datadive.net/wp-content/uploads/2018/09/data_plot.png 393w, http://blog.datadive.net/wp-content/uploads/2018/09/data_plot-300x199.png 300w\" sizes=\"(max-width: 393px) 100vw, 393px\" /></a><br />\nLet&#8217;s fit a fit a gradient boosted model on this data, setting <code>min_child_samples</code> to 5. </p>\n<pre class=\"brush: python; collapse: false; title: ; wrap-lines: false; notranslate\">\nimport lightgbm as lgb\noverfit_model = lgb.LGBMRegressor(silent=False, min_child_samples=5)\noverfit_model.fit(x.reshape(-1,1), y)\n\n#predicted output from the model from the same input\nprediction = overfit_model.predict(x.reshape(-1,1))\n</pre><p>The model will slightly overfit (due to small <code>min_child_samples</code>), which we can see from plotting the values of X against the predicted values of Y: the red line is not monotonic as we&#8217;d like it to be.</p><p><a href=\"http://blog.datadive.net/wp-content/uploads/2018/09/model_fit.png\"><img loading=\"lazy\" class=\"alignnone size-full wp-image-4730\" src=\"http://blog.datadive.net/wp-content/uploads/2018/09/model_fit.png\" alt=\"\" width=\"380\" height=\"274\" srcset=\"http://blog.datadive.net/wp-content/uploads/2018/09/model_fit.png 380w, http://blog.datadive.net/wp-content/uploads/2018/09/model_fit-300x216.png 300w\" sizes=\"(max-width: 380px) 100vw, 380px\" /></a></p><p>Since we know that that the relationship between X and Y should be monotonic, we can set this constraint when specifying the model.</p>\n<pre class=\"brush: python; collapse: false; title: ; wrap-lines: false; notranslate\">\nmonotone_model = lgb.LGBMRegressor(min_child_samples=5, \n                                   monotone_constraints=\"1\")\nmonotone_model.fit(x.reshape(-1,1), y)\n</pre><p>The parameter monotone_constraints=&#8221;1&#8243; states that the output should be monotonically increasing wrt. the first features (which in our case happens to be the only feature). After training the monotone model, we can see that the relationship is now strictly monotone.<br />\n<a href=\"http://blog.datadive.net/wp-content/uploads/2018/09/monotone_model_fit.png\"><img loading=\"lazy\" class=\"alignnone size-full wp-image-4731\" src=\"http://blog.datadive.net/wp-content/uploads/2018/09/monotone_model_fit.png\" alt=\"\" width=\"401\" height=\"256\" srcset=\"http://blog.datadive.net/wp-content/uploads/2018/09/monotone_model_fit.png 401w, http://blog.datadive.net/wp-content/uploads/2018/09/monotone_model_fit-300x192.png 300w\" sizes=\"(max-width: 401px) 100vw, 401px\" /></a></p><p>And if we check the model performance, we can see that not only does the monotonicity constraint provide a more natural fit, but the model generalizes better as well (as expected). Measuring the mean squared error on new test data, we see that error is smaller for the monotone model.</p>\n<pre class=\"brush: python; collapse: false; title: ; wrap-lines: false; notranslate\">\nfrom sklearn.metrics import mean_squared_error as mse\n\nsize = 1000000\nx = np.linspace(0, 10, size) \ny = x**2  -10 + (20 * np.random.random(size))\n\nprint (\"Default model mse\", mse(y, overfit_model.predict(x.reshape(-1,1))))\nprint (\"Monotone model mse\", mse(y, monotone_model.predict(x.reshape(-1,1))))\n</pre><p><code><br />\nDefault model mse 37.61501106522855<br />\nMonotone model mse 32.283051723268265<br />\n</code></p>\n<h2>Other methods for enforcing monotonicity</h2><p>Tree based methods are not the only option for setting monotonicity constraint in the data. One recent development in the field is <a href= \"https://github.com/tensorflow/lattice\"> Tensorflow Lattice</a>, which implements lattice based models that are essentially interpolated look-up tables that can approximate arbitrary input-output relationships in the data and which can optionally be monotonic. There is a thorough <a href=\"https://github.com/tensorflow/lattice/blob/master/g3doc/tutorial/index.md\">tutorial</a> on it in Tensorflow Github.</p><p>If a curve is already given, monotonic spline can be fit on the data, for example using the <a href=\"https://stat.ethz.ch/R-manual/R-devel/library/stats/html/splinefun.html\">splinefun</a> package.</p>\n<div style=\"padding-top:0px;\t\npadding-right:0px;\npadding-bottom:0px;\npadding-left:0px;\nmargin-top:0px;\nmargin-right:0px;\nmargin-bottom:0px;\nmargin-left:0px;\"><a href=\"https://twitter.com/crossentropy\" class=\"twitter-follow-button\" \n\t\t\t\t\t\tdata-show-count=\"false\"\n\t\t\t\t\t\tdata-lang=\"autoLANGauto\"\n\t\t\t\t\t\tdata-width=\"250px\"\n\t\t\t\t\t\tdata-align=\"left\"\n\t\t\t\t\t\tdata-show-screen-name=\"true\"\n\t\t\t\t\t\tdata-size=\"medium\"\n\t\t\t\t\t\tdata-dnt=\"false\">\n\t\t\t\t\t\tFollow @crossentropy </a> </div>\n\t\t\t\t\t\t<script>\n\t\t\t\t\t\t!function(d,s,id) {\n\t\t\t\t\t\t  var js,fjs=d.getElementsByTagName(s)[0];\n\t\t\t\t\t\t  if(!d.getElementById(id)) {\n\t\t\t\t\t\t   js=d.createElement(s);\n\t\t\t\t\t\t   js.id=id;js.src=\"//platform.twitter.com/widgets.js\";\n\t\t\t\t\t\t   fjs.parentNode.insertBefore(js,fjs);\n\t\t\t\t\t\t  }\n\t\t\t\t\t\t}\n\t\t\t\t\t\t(document,\"script\",\"twitter-wjs\");\n\t\t\t\t\t\t</script><div style=\"padding-top:0px;\t\npadding-right:0px;\npadding-bottom:0px;\npadding-left:0px;\nmargin-top:0px;\nmargin-right:0px;\nmargin-bottom:0px;\nmargin-left:0px;\"><a href=\"https://twitter.com/share\" class=\"twitter-share-button\" \n\t\t\t\t        data-url=\"http://blog.datadive.net/monotonicity-constraints-in-machine-learning/\" \n\t\t\t\t        data-via=\"crossentropy\"\n\t\t\t\t\t    data-text=\"Monotonicity constraints in machine learning\"\n\t\t\t\t\t    data-related=\"\"\n\t\t\t\t\t    data-count=\"horizontal\"\n\t\t\t\t\t    data-hashtags=\"\"\n\t\t\t\t\t    data-lang=\"autoLANGauto\"\n\t\t\t\t\t    data-counturl=\"\"\n\t\t\t\t\t    data-size=\"medium\"\n\t\t\t\t\t    data-dnt=\"false\"\t> Tweet </a> </div>\n\t\t                <script>\n\t\t\t\t\t    !function(d,s,id) {\n\t\t\t\t\t      var js,fjs=d.getElementsByTagName(s)[0];\n\t\t\t\t\t      if(!d.getElementById(id)) {\n\t\t\t\t\t       js=d.createElement(s);js.id=id;js.src=\"https://platform.twitter.com/widgets.js\";fjs.parentNode.insertBefore(js,fjs);\n\t\t\t\t\t      }\n\t\t\t\t\t    }\n\t\t\t\t\t   (document,\"script\",\"twitter-wjs\");\n\t\t\t\t\t    </script>",
  "wfw:commentRss": "http://blog.datadive.net/monotonicity-constraints-in-machine-learning/feed/",
  "slash:comments": 19
}