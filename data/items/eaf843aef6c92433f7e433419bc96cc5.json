{
  "id": "tag:drsimonj.svbtle.com,2014:Post/a-tidy-model-pipeline-with-twidlr-and-broom",
  "published": "2017-06-01T05:00:31-07:00",
  "updated": "2017-06-01T05:00:31-07:00",
  "link": "",
  "title": "A tidy model pipeline with twidlr and broom",
  "content": "<p><a href=\"https://twitter.com/drsimonj\" rel=\"nofollow\">@drsimonj</a> here to show you how to go from data in a data.frame to a tidy data.frame of model output by combining twidlr and broom in a single, tidy model pipeline.</p>\n<h2 id=\"the-problem_2\">The problem <a class=\"head_anchor\" href=\"#the-problem_2\" rel=\"nofollow\">#</a>\n</h2>\n<p>Different model functions take different types of inputs (data.frames, matrices, etc) and produce different types of output! Thus, we’re often confronted with the very untidy challenge presented in this Figure:</p>\n\n<p><a href=\"https://svbtleusercontent.com/nkij0xvi6r4qkg.png\" rel=\"nofollow\"><img src=\"https://svbtleusercontent.com/nkij0xvi6r4qkg_small.png\" alt=\"problem.png\"></a></p>\n\n<p>Thus, different models may need very different code.</p>\n\n<p>However, it’s possible to create a consistent, tidy pipeline by combining the <a href=\"https://github.com/drsimonj/twidlr\" rel=\"nofollow\">twidlr</a> and <a href=\"https://github.com/tidyverse/broom\" rel=\"nofollow\">broom</a> packages. Let’s see how this works.</p>\n<h2 id=\"twostep-modelling_2\">Two-step modelling <a class=\"head_anchor\" href=\"#twostep-modelling_2\" rel=\"nofollow\">#</a>\n</h2>\n<p>To understand the solution, think of the problem as a two-step process, depicted in this Figure:</p>\n\n<p><a href=\"https://svbtleusercontent.com/rmss2tcgpa12ua.png\" rel=\"nofollow\"><img src=\"https://svbtleusercontent.com/rmss2tcgpa12ua_small.png\" alt=\"two-step.png\"></a></p>\n<h3 id=\"step-1-from-data-to-fitted-model_3\">Step 1: from data to fitted model <a class=\"head_anchor\" href=\"#step-1-from-data-to-fitted-model_3\" rel=\"nofollow\">#</a>\n</h3>\n<p>Step 1 must take data in a data.frame as input and return a fitted model object. twidlr exposes model functions that do just this!</p>\n\n<p>To demonstrate:</p>\n\n<pre><code class=\"prettyprint lang-r\">#devtools::install_github(\"drsimonj/twidlr\")  # To install\nlibrary(twidlr)\n\nlm(mtcars, hp ~ .)\n#&gt; \n#&gt; Call:\n#&gt; stats::lm(formula = formula, data = data)\n#&gt; \n#&gt; Coefficients:\n#&gt; (Intercept)          mpg          cyl         disp         drat  \n#&gt;      79.048       -2.063        8.204        0.439       -4.619  \n#&gt;          wt         qsec           vs           am         gear  \n#&gt;     -27.660       -1.784       25.813        9.486        7.216  \n#&gt;        carb  \n#&gt;      18.749\n</code></pre>\n\n<p>This means we can pipe data.frames into any model function exposed by twidlr. For example:</p>\n\n<pre><code class=\"prettyprint lang-r\">library(dplyr)\n\nmtcars %&gt;% lm(hp ~ .)\n#&gt; \n#&gt; Call:\n#&gt; stats::lm(formula = formula, data = data)\n#&gt; \n#&gt; Coefficients:\n#&gt; (Intercept)          mpg          cyl         disp         drat  \n#&gt;      79.048       -2.063        8.204        0.439       -4.619  \n#&gt;          wt         qsec           vs           am         gear  \n#&gt;     -27.660       -1.784       25.813        9.486        7.216  \n#&gt;        carb  \n#&gt;      18.749\n</code></pre>\n<h3 id=\"step2-fitted-model-to-tidy-results_3\">Step2: fitted model to tidy results <a class=\"head_anchor\" href=\"#step2-fitted-model-to-tidy-results_3\" rel=\"nofollow\">#</a>\n</h3>\n<p>Step 2 must take a fitted model object as its input and return a tidy data frame of results. This is precisely what the broom package does via three functions: <code class=\"prettyprint\">glance</code>, <code class=\"prettyprint\">tidy</code>, and <code class=\"prettyprint\">augment</code>! To demonstrate:</p>\n\n<pre><code class=\"prettyprint lang-r\">#install.packages(\"broom\")  # To install\nlibrary(broom)\n\nfit &lt;- mtcars %&gt;% lm(hp ~ .)\n\nglance(fit)\n#&gt;   r.squared adj.r.squared    sigma statistic     p.value df    logLik\n#&gt; 1 0.9027993     0.8565132 25.97138  19.50477 1.89833e-08 11 -142.8905\n#&gt;        AIC      BIC deviance df.residual\n#&gt; 1 309.7809 327.3697 14164.76          21\n\ntidy(fit)\n#&gt;           term    estimate   std.error  statistic     p.value\n#&gt; 1  (Intercept)  79.0483879 184.5040756  0.4284371 0.672695339\n#&gt; 2          mpg  -2.0630545   2.0905650 -0.9868407 0.334955314\n#&gt; 3          cyl   8.2037204  10.0861425  0.8133655 0.425134929\n#&gt; 4         disp   0.4390024   0.1492007  2.9423609 0.007779725\n#&gt; 5         drat  -4.6185488  16.0829171 -0.2871711 0.776795845\n#&gt; 6           wt -27.6600472  19.2703681 -1.4353668 0.165910518\n#&gt; 7         qsec  -1.7843654   7.3639133 -0.2423121 0.810889101\n#&gt; 8           vs  25.8128774  19.8512410  1.3003156 0.207583411\n#&gt; 9           am   9.4862914  20.7599371  0.4569518 0.652397317\n#&gt; 10        gear   7.2164047  14.6160152  0.4937327 0.626619355\n#&gt; 11        carb  18.7486691   7.0287674  2.6674192 0.014412403\n\naugment(fit) %&gt;% head()\n#&gt;           .rownames  hp  mpg cyl disp drat    wt  qsec vs am gear carb\n#&gt; 1         Mazda RX4 110 21.0   6  160 3.90 2.620 16.46  0  1    4    4\n#&gt; 2     Mazda RX4 Wag 110 21.0   6  160 3.90 2.875 17.02  0  1    4    4\n#&gt; 3        Datsun 710  93 22.8   4  108 3.85 2.320 18.61  1  1    4    1\n#&gt; 4    Hornet 4 Drive 110 21.4   6  258 3.08 3.215 19.44  1  0    3    1\n#&gt; 5 Hornet Sportabout 175 18.7   8  360 3.15 3.440 17.02  0  0    3    2\n#&gt; 6           Valiant 105 18.1   6  225 2.76 3.460 20.22  1  0    3    1\n#&gt;     .fitted     .resid      .hat   .sigma     .cooksd .std.resid\n#&gt; 1 148.68122 -38.681220 0.2142214 24.75946 0.069964902 -1.6801773\n#&gt; 2 140.62866 -30.628664 0.2323739 25.43881 0.049861042 -1.3460408\n#&gt; 3  79.99158  13.008418 0.3075987 26.38216 0.014633059  0.6019364\n#&gt; 4 125.75448 -15.754483 0.2103960 26.31579 0.011288712 -0.6826601\n#&gt; 5 183.21756  -8.217565 0.2016137 26.53317 0.002878707 -0.3541128\n#&gt; 6 111.38490  -6.384902 0.3147448 26.55680 0.003682813 -0.2969840\n</code></pre>\n<h2 id=\"a-single-tidy-pipeline_2\">A single, tidy pipeline <a class=\"head_anchor\" href=\"#a-single-tidy-pipeline_2\" rel=\"nofollow\">#</a>\n</h2>\n<p>So twidlr and broom functions can be combined into a single, tidy pipeline to go from data.frame to tidy output:</p>\n\n<pre><code class=\"prettyprint lang-r\">library(twidlr)\nlibrary(broom)\n\nmtcars %&gt;% \n  lm(hp ~ .)  %&gt;% \n  glance()\n#&gt;   r.squared adj.r.squared    sigma statistic     p.value df    logLik\n#&gt; 1 0.9027993     0.8565132 25.97138  19.50477 1.89833e-08 11 -142.8905\n#&gt;        AIC      BIC deviance df.residual\n#&gt; 1 309.7809 327.3697 14164.76          21\n</code></pre>\n\n<p>Any model included in twidlr and broom can be used in this same way. Here’s a <code class=\"prettyprint\">kmeans</code> example:</p>\n\n<pre><code class=\"prettyprint lang-r\">iris %&gt;%\n  select(-Species) %&gt;% \n  kmeans(centers = 3) %&gt;% \n  tidy()\n#&gt;         x1       x2       x3       x4 size withinss cluster\n#&gt; 1 5.901613 2.748387 4.393548 1.433871   62 39.82097       1\n#&gt; 2 5.006000 3.428000 1.462000 0.246000   50 15.15100       2\n#&gt; 3 6.850000 3.073684 5.742105 2.071053   38 23.87947       3\n</code></pre>\n\n<p>And a ridge regression with cross-fold validation example:</p>\n\n<pre><code class=\"prettyprint lang-r\">mtcars %&gt;% \n  cv.glmnet(am ~ ., alpha = 0) %&gt;% \n  glance()\n#&gt;   lambda.min lambda.1se\n#&gt; 1  0.2284167  0.8402035\n</code></pre>\n\n<p>So next time you want to do some tidy modelling, keep this pipeline in mind:</p>\n\n<p><a href=\"https://svbtleusercontent.com/ywuyoz88foebwa.png\" rel=\"nofollow\"><img src=\"https://svbtleusercontent.com/ywuyoz88foebwa_small.png\" alt=\"pipeline.png\"></a></p>\n<h2 id=\"limitations_2\">Limitations <a class=\"head_anchor\" href=\"#limitations_2\" rel=\"nofollow\">#</a>\n</h2>\n<p>Currently, the major limitation for this approach is that a model must be covered by twidlr and broom. For example, you can’t use <code class=\"prettyprint\">randomForest</code> in this pipeline because, although twidlr exposes a data.frame friendly version of it, broom doesn’t provide tidying methods for it. So if you want to write tidy code for a model that isn’t covered by these packages, have a go at helping out by contributing to these open source projects! To get started creating and contributing to R packages, take a look at Hadley Wickham’s free book, “<a href=\"http://r-pkgs.had.co.nz/\" rel=\"nofollow\">R Packages</a>”.</p>\n<h2 id=\"sign-off_2\">Sign off <a class=\"head_anchor\" href=\"#sign-off_2\" rel=\"nofollow\">#</a>\n</h2>\n<p>Thanks for reading and I hope this was useful for you.</p>\n\n<p>For updates of recent blog posts, follow <a href=\"https://twitter.com/drsimonj\" rel=\"nofollow\">@drsimonj</a> on Twitter, or email me at <a href=\"mailto:drsimonjackson@gmail.com\" rel=\"nofollow\">drsimonjackson@gmail.com</a> to get in touch.</p>\n\n<p>If you’d like the code that produced this blog, check out the <a href=\"https://github.com/drsimonj/blogR\" rel=\"nofollow\">blogR GitHub repository</a>.</p>"
}