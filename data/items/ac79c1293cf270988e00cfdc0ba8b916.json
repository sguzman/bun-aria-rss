{
  "title": "Why Python needs to be paused during profiling - but Ruby doesn't always",
  "link": "",
  "updated": "2021-11-09T00:00:00-08:00",
  "id": "http://www.benfrederickson.com/why-python-needs-paused-during-profiling/",
  "content": "\n        \n            <img src=\"http://www.benfrederickson.com/images/python-ruby-pausing/flame_nonblocking.png\" width=\"100%\" style=\"max-width:500px\">\n        \n        <p>One of the cool things about the <a href=\"https://github.com/rbspy/rbspy\">rbspy profiler</a> is that it\ncan profile any running Ruby program, without even pausing the Ruby program that is being profiled. Rbspy is a sampling profiler, and\nwhen the <code class=\"language-plaintext highlighter-rouge\">--nonblocking</code> argument is passed to it, it will collect each stack trace from the\nprofiled program without pausing it or doing any synchronization. This has the advantage of not slowing down the\nprofiled program at all, but has the disadvantage of leading to a data race between the rbspy\nprofiler and the Ruby program being profiled. In the nonblocking mode, rbspy tries to get an accurate stack\ntrace from the Ruby program while the Ruby program is actively changing the stack by running the\ncode - and since there is no locking happening there is potential\nfor a data race. Amazingly, rbspy still manages to get good results even without doing any\nsynchronization.</p>\n\n<p>Julia Evans wrote an excellent post\nabout <a href=\"https://jvns.ca/blog/2018/01/15/should-i-pause-a-ruby-process-to-collect-its-stack/\">whether to pause Ruby during\nprofiling</a> -\nand concluded that pausing the Ruby program wasn’t always necessary. While running in the\nnonblocking mode <a href=\"https://github.com/rbspy/rbspy/pull/316\">can cause some minor errors</a> and isn’t\nthe default anymore, the profiles generated in the nonblocking mode are still fairly accurate.</p>\n\n<p>This isn’t the case with <a href=\"https://github.com/benfred/py-spy\">py-spy</a>, which is a similar sampling profiler for Python programs. When you run\npy-spy in the nonblocking mode, the profiles generated can be wildly misleading and nonsensical.</p>\n\n<p>This post is talking about what the effects of a data race look like when profiling with py-spy,\nwhy this happens with py-spy much more frequently than in rbspy due to differences in the CPython and CRuby interpreter\nimplementations, and why you still might want to consider using the nonblocking in some conditions\ndespite the potential for inaccurate profiles being generated.</p>\n\n<p class='more'><a href='http://www.benfrederickson.com/why-python-needs-paused-during-profiling/'>Read more ...</a></p>\n     "
}