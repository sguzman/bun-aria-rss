{
  "guid": "tag:blogger.com,1999:blog-6300367579216018061.post-4401667510940730909",
  "pubDate": "Mon, 15 Sep 2014 19:14:00 +0000",
  "atom:updated": "2015-02-05T21:36:03.374-08:00",
  "category": [
    "deep learning",
    "graph data modeling",
    "graph database",
    "graphify",
    "machine learning",
    "natural language processing",
    "neo4j",
    "sentiment analysis",
    "text classification"
  ],
  "title": "Deep Learning Sentiment Analysis for Movie Reviews using Neo4j",
  "description": "<p><i>While the title of this article references Deep Learning, it's important to note that the process described below is more of a deep learning metaphor into a graph-based machine learning algorithm. No neural networks are used.</i></p> <p><a href=\"http://en.wikipedia.org/wiki/Sentiment_analysis\">Sentiment analysis</a> uses natural language processing to <a href=\"http://en.wikipedia.org/wiki/Feature_selection\">extract features</a> of a text that relate to subjective information found in source materials.</p> <h3>Movie Review Sentiment Analysis</h3> <p>A movie review website allows users to submit reviews describing what they either liked or disliked about a particular movie. Being able to mine these reviews and generate valuable meta data that describes its content provides an opportunity to understand the general sentiment around that movie in a democratized way. That’s a pretty cool thing if you think about it. Using machine learning we can democratize subjectivity about anything in the world. We can make an objective analysis of subjective content, giving us the ability to better understand trends around products and services that we can use to make better decisions as consumers.</p> <a name='more'></a> <h3>Sentiment Analysis Data Model</h3> <p>One of the major barriers to unlocking this ability is in the way we structure and transform our data. The current state-of-the-art methods include approaches such as <a href=\"http://en.wikipedia.org/wiki/Naive_Bayes_classifier\">Naive Bayes</a>, <a href=\"http://en.wikipedia.org/wiki/Support_vector_machine\">Support Vector Machines</a>, and <a href=\"http://en.wikipedia.org/wiki/Multinomial_logistic_regression\">Maximum Entropy</a>. The challenges imposed by these approaches still remains in how features are extracted from a text and structured as data in a way that is least costly in terms of performance. I decided to focus on solving the problem of performance, in the way features are selected and extracted, and the availability of that data as the number of features grow over time.</p>  <p>Using a <a href=\"http://en.wikipedia.org/wiki/Feature_selection\">feature selection</a> algorithm I describe <a href=\"http://www.kennybastani.com/2014/06/hierchical-pattern-recognition.html\">here</a>, I used the <a href=\"http://www.neo4j.com\">Graph Database Neo4j</a> to solve the challenge of data transformation and availability. While the <a href=\"http://nlp.stanford.edu/sentiment/\">state of the art natural language parsing algorithms</a> are focused on sentence structure, I’ve decided to pursue a statistical approach to <a href=\"http://en.wikipedia.org/wiki/Grammar_induction\">natural language grammar induction</a>. My approach focuses on generalizations across a vast corpus of text, generating new features using a method inspired by <a href=\"http://en.wikipedia.org/wiki/Deep_learning\">deep learning</a>, which predicts features with the highest probability of being present to the left or right of a new feature.</p>  <h3>Graph-based NLP Example</h3>  <p>Let's assume that the phrase “<b>one of the worst</b>” has been extracted as a feature of a set of texts. The reason that this phrase was extracted was that a phrase that it was descended from had determined that this particular phrase was the most statistically relevant, meaning that the phrase had the best chance of being matched after the parent phrase. Using Neo4j we can determine the line of inheritance that produced this phrase as a feature.</p>  <div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"http://3.bp.blogspot.com/-chxX9JlvqE8/VBc12JXqrPI/AAAAAAAAA78/gvzXro5PedA/s1600/movie-sentiment-1.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" src=\"http://3.bp.blogspot.com/-chxX9JlvqE8/VBc12JXqrPI/AAAAAAAAA78/gvzXro5PedA/s640/movie-sentiment-1.png\" /></a></div>  <p>Starting at the root node, which is captioned as “<b>{0} {1}</b>”, the path in which the phrase “<b>one of the worst</b>” will be parsed is <b>(the)->(of the)->(one of the)->(one of the worst)</b>.</p> <p>The hierarchy reveals more possibilities as you move deeper from “<b>one of the worst</b>”. Expanding the path seen in the image above to include all possible features that descend from the phrase “<b>one of the worst</b>” reveals the following:</p> <div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"http://4.bp.blogspot.com/-8XMgLdZIF-w/VBc2Usjz4rI/AAAAAAAAA8E/LF9kzt1eDlM/s1600/movie-sentiment-2.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" src=\"http://4.bp.blogspot.com/-8XMgLdZIF-w/VBc2Usjz4rI/AAAAAAAAA8E/LF9kzt1eDlM/s640/movie-sentiment-2.png\" /></a></div> <p>This feature selection algorithm can select on the most statistically relevant features and phrases extracted from a corpus of text in less than a second. The reason an approach like this is extremely relevant to sentiment analysis is that these pattern nodes can be connected to the label of the text they were trained from, as seen below.</p> <div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"http://4.bp.blogspot.com/-6QFCfAxSfcc/VBc2rRhA6rI/AAAAAAAAA8M/eW37Ie6lOe4/s1600/movie-sentiment-3.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" src=\"http://4.bp.blogspot.com/-6QFCfAxSfcc/VBc2rRhA6rI/AAAAAAAAA8M/eW37Ie6lOe4/s640/movie-sentiment-3.png\" /></a></div> <p>The result of this algorithm, and largely thanks to Neo4j’s graph traversals, is that any natural language text can be parsed with sub second performance and generate a subgraph to be used for whichever classification algorithm makes the most sense for your dataset.</p> <h3>Open Source Demo</h3> <p>For the movie review example I took 500 movie reviews for both negative and positive labels and trained a natural language parsing model in Neo4j using <a href=\"https://github.com/kbastani/graphify\">Graphify</a>. In the next blog post in this series I will introduce you to a demo that can perform better at classifying movie reviews than a human. The <a href=\"http://en.wikipedia.org/wiki/Sentiment_analysis#Evaluation\">human classification error being 0.3, or 70% success</a>.</p> <p>If you’re looking to get your feet wet before then, take a look at the finished demo here: <a href=\"https://github.com/kbastani/graphify/tree/master/src/examples/graphify-examples-sentiment-analysis\">Graphify Sentiment Analysis for Movie Reviews</a></p> <h3>Notes</h3> <p><a href=\"http://www.neo4j.com\">Neo4j</a> is an open source graph database.</p><p><a href=\"https://github.com/kbastani/graphify\">Graphify</a> is an open source extension to Neo4j that extends Neo4j to include classification-based algorithms for natural language processing.</p><a href=\"https://news.ycombinator.com/submit\" class=\"hn-button\" data-title=\"Deep Learning Sentiment Analysis for Movie Reviews using Neo4j \" data-url=\"http://www.kennybastani.com/2014/09/deep-learning-sentiment-analysis-for.html\" data-count=\"horizontal\">Vote on Hacker News</a><script type=\"text/javascript\">var HN=[];HN.factory=function(e){return function(){HN.push([e].concat(Array.prototype.slice.call(arguments,0)))};},HN.on=HN.factory(\"on\"),HN.once=HN.factory(\"once\"),HN.off=HN.factory(\"off\"),HN.emit=HN.factory(\"emit\"),HN.load=function(){var e=\"hn-button.js\";if(document.getElementById(e))return;var t=document.createElement(\"script\");t.id=e,t.src=\"//hn-button.herokuapp.com/hn-button.js\";var n=document.getElementsByTagName(\"script\")[0];n.parentNode.insertBefore(t,n)},HN.load();</script>",
  "link": "https://www.kennybastani.com/2014/09/deep-learning-sentiment-analysis-for.html",
  "author": "noreply@blogger.com (Kenny Bastani)",
  "media:thumbnail": "",
  "thr:total": 0
}