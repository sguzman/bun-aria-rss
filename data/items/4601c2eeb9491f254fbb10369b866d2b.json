{
  "title": "Linear chain CRFs",
  "link": "",
  "published": "2015-12-17T00:00:00+00:00",
  "updated": "2015-12-17T00:00:00+00:00",
  "id": "https://wcbeard.github.io/blog/2015/12/17/linear-chain-crfs",
  "content": "<script src=\"//ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js\"></script>\n\n<link href=\"https://fonts.googleapis.com/css?family=Source+Sans+Pro\" rel=\"stylesheet\" type=\"text/css\" />\n\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({\n    tex2jax: {inlineMath: [[\"$\",\"$\"],[\"\\\\(\",\"\\\\)\"]]}\n  });\n</script>\n\n<!-- <script type=\"text/javascript\" src=\"/MathJax/MathJax.js?config=TeX-AMS_HTML-full\"></script> -->\n<script type=\"text/javascript\" src=\"https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML-full\"> </script>\n\n<style type=\"text/css\">\n  .input_hidden {\n    display: none;\n    //  margin-top: 5px;\n  }\n  .container {\n    /*width:140%; //!important;*/\n    width: none; //!important;\n    border: none !important;\n  }\n  div.prompt {\n    display: none;\n  }\n  .CodeMirror{\n    /*font-family: \"Consolas\", sans-serif;*/\n    font-size:18px;\n    line-height: 30px;\n  }\n  pre, kbd, samp {\n    /*font-family: 'Source Sans Pro', Helvetica, Arial, sans-serif;*/\n    /*line-height: 30px;*/\n    font-size:18px;\n  }\n  pre.code {\n    font-family: Consolas, monospace;\n    font-size: 12px;\n  }*/\n  /*p {\n    font-size:20px;\n    font-family: 'Source Sans Pro', Helvetica, Arial, sans-serif;\n    line-height: 30px;\n    text-align: left;\n  }*/\n  div.cell{\n    max-width:100%;\n    margin-left:auto;\n    margin-right:auto;\n  }\n  div.text_cell_render{\n    max-width:100%;\n    margin-left:auto;\n    margin-right:auto;\n  }\n  h2,h3,h4{\n    text-align: left;\n  }\n  </style>\n\n<script>\n  $(document).ready(function(){\n    $(\".output_wrapper\").click(function(){\n      $(this).prev('.input_hidden').slideToggle();\n    });\n  })\n  </script>\n\n<div class=\"cell border-box-sizing text_cell rendered\">\n<div class=\"prompt input_prompt\">\n</div>\n<div class=\"inner_cell\">\n<div class=\"text_cell_render border-box-sizing rendered_html\">\n<p>This is less of a blog post, and more of my annotated progress in implementing CRF's based on Charles Elkan's very excellent <a href=\"http://videolectures.net/cikm08_elkan_llmacrf/\">video</a> and <a href=\"http://cseweb.ucsd.edu/~elkan/250Bwinter2012/loglinearCRFs.pdf\">pdf</a> tutorials to get a better understanding of log-linear models.</p>\n<p>This notebook contains a bunch of the core functions, though there are also some in <code>crf.py</code>. The full repo is <a href=\"https://github.com/d10genes/crf-edu\">here</a>.</p>\n\n</div>\n</div>\n</div>\n<div class=\"cell border-box-sizing code_cell rendered\">\n<div class=\"input\">\n<div class=\"prompt input_prompt\">In&nbsp;[1]:</div>\n<div class=\"inner_cell\">\n    <div class=\"input_area\">\n<div class=\" highlight hl-ipython3\"><pre><span class=\"kn\">import</span> <span class=\"nn\">warnings</span><span class=\"p\">;</span> <span class=\"n\">warnings</span><span class=\"o\">.</span><span class=\"n\">filterwarnings</span><span class=\"p\">(</span><span class=\"s\">&#39;ignore&#39;</span><span class=\"p\">)</span>\n<span class=\"kn\">from</span> <span class=\"nn\">py3k_imports</span> <span class=\"k\">import</span> <span class=\"o\">*</span> \n<span class=\"kn\">from</span> <span class=\"nn\">project_imports3</span> <span class=\"k\">import</span> <span class=\"o\">*</span>\n\n<span class=\"n\">pu</span><span class=\"o\">.</span><span class=\"n\">psettings</span><span class=\"p\">(</span><span class=\"n\">pd</span><span class=\"p\">)</span>\n<span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">options</span><span class=\"o\">.</span><span class=\"n\">display</span><span class=\"o\">.</span><span class=\"n\">width</span> <span class=\"o\">=</span> <span class=\"mi\">150</span>   <span class=\"c\"># 200</span>\n<span class=\"o\">%</span><span class=\"k\">matplotlib</span> inline\n</pre></div>\n\n</div>\n</div>\n</div>\n\n</div>\n<div class=\"cell border-box-sizing code_cell rendered\">\n<div class=\"input\">\n<div class=\"prompt input_prompt\">In&nbsp;[2]:</div>\n<div class=\"inner_cell\">\n    <div class=\"input_area\">\n<div class=\" highlight hl-ipython3\"><pre><span class=\"o\">%%</span><span class=\"nx\">javascript</span>\n<span class=\"nx\">IPython</span><span class=\"p\">.</span><span class=\"nx\">keyboard_manager</span><span class=\"p\">.</span><span class=\"nx\">command_shortcuts</span><span class=\"p\">.</span><span class=\"nx\">add_shortcut</span><span class=\"p\">(</span><span class=\"s1\">&#39;Ctrl-k&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;ipython.move-selected-cell-up&#39;</span><span class=\"p\">)</span>\n<span class=\"nx\">IPython</span><span class=\"p\">.</span><span class=\"nx\">keyboard_manager</span><span class=\"p\">.</span><span class=\"nx\">command_shortcuts</span><span class=\"p\">.</span><span class=\"nx\">add_shortcut</span><span class=\"p\">(</span><span class=\"s1\">&#39;Ctrl-j&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;ipython.move-selected-cell-down&#39;</span><span class=\"p\">)</span>\n<span class=\"nx\">IPython</span><span class=\"p\">.</span><span class=\"nx\">keyboard_manager</span><span class=\"p\">.</span><span class=\"nx\">command_shortcuts</span><span class=\"p\">.</span><span class=\"nx\">add_shortcut</span><span class=\"p\">(</span><span class=\"s1\">&#39;Shift-m&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;ipython.merge-selected-cell-with-cell-after&#39;</span><span class=\"p\">)</span>\n</pre></div>\n\n</div>\n</div>\n</div>\n\n<div class=\"output_wrapper\">\n<div class=\"output\">\n\n\n<div class=\"output_area\"><div class=\"prompt\"></div>\n\n\n<div class=\"output_subarea output_javascript \">\n<script type=\"text/javascript\">\nIPython.keyboard_manager.command_shortcuts.add_shortcut('Ctrl-k','ipython.move-selected-cell-up')\nIPython.keyboard_manager.command_shortcuts.add_shortcut('Ctrl-j','ipython.move-selected-cell-down')\nIPython.keyboard_manager.command_shortcuts.add_shortcut('Shift-m','ipython.merge-selected-cell-with-cell-after')\n</script>\n</div>\n\n</div>\n\n</div>\n</div>\n\n</div>\n<div class=\"cell border-box-sizing code_cell rendered\">\n<div class=\"input\">\n<div class=\"prompt input_prompt\">In&nbsp;[3]:</div>\n<div class=\"inner_cell\">\n    <div class=\"input_area\">\n<div class=\" highlight hl-ipython3\"><pre><span class=\"kn\">from</span> <span class=\"nn\">collections</span> <span class=\"k\">import</span> <span class=\"n\">defaultdict</span><span class=\"p\">,</span> <span class=\"n\">Counter</span>\n<span class=\"kn\">import</span> <span class=\"nn\">inspect</span>\n<span class=\"kn\">from</span> <span class=\"nn\">typing</span> <span class=\"k\">import</span> <span class=\"n\">List</span><span class=\"p\">,</span> <span class=\"n\">Dict</span><span class=\"p\">,</span> <span class=\"n\">Tuple</span>\n<span class=\"n\">Df</span> <span class=\"o\">=</span> <span class=\"n\">Dict</span>\n<span class=\"n\">Y</span> <span class=\"o\">=</span> <span class=\"nb\">str</span>\n\n<span class=\"k\">if</span> <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">version_info</span><span class=\"o\">.</span><span class=\"n\">major</span> <span class=\"o\">&gt;</span> <span class=\"mi\">2</span><span class=\"p\">:</span>\n    <span class=\"n\">unicode</span> <span class=\"o\">=</span> <span class=\"nb\">str</span>\n</pre></div>\n\n</div>\n</div>\n</div>\n\n</div>\n<div class=\"cell border-box-sizing code_cell rendered\">\n<div class=\"input\">\n<div class=\"prompt input_prompt\">In&nbsp;[4]:</div>\n<div class=\"inner_cell\">\n    <div class=\"input_area\">\n<div class=\" highlight hl-ipython3\"><pre><span class=\"kn\">import</span> <span class=\"nn\">utils</span><span class=\"p\">;</span> <span class=\"kn\">from</span> <span class=\"nn\">utils</span> <span class=\"k\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">import</span> <span class=\"nn\">crf</span><span class=\"p\">;</span> <span class=\"kn\">from</span> <span class=\"nn\">crf</span> <span class=\"k\">import</span> <span class=\"o\">*</span>\n<span class=\"n\">FeatUtils</span><span class=\"o\">.</span><span class=\"n\">bookend</span> <span class=\"o\">=</span> <span class=\"k\">False</span>\n</pre></div>\n\n</div>\n</div>\n</div>\n\n</div>\n<div class=\"cell border-box-sizing code_cell rendered\">\n<div class=\"input\">\n<div class=\"prompt input_prompt\">In&nbsp;[5]:</div>\n<div class=\"inner_cell\">\n    <div class=\"input_area\">\n<div class=\" highlight hl-ipython3\"><pre><span class=\"n\">Series</span><span class=\"o\">.</span><span class=\"n\">__matmul__</span> <span class=\"o\">=</span> <span class=\"n\">Series</span><span class=\"o\">.</span><span class=\"n\">dot</span>\n<span class=\"n\">DataFrame</span><span class=\"o\">.</span><span class=\"n\">__matmul__</span> <span class=\"o\">=</span> <span class=\"n\">DataFrame</span><span class=\"o\">.</span><span class=\"n\">dot</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">matmul_new</span> <span class=\"k\">import</span> <span class=\"n\">test_matmul</span>\n<span class=\"n\">test_matmul</span><span class=\"p\">()</span>\n</pre></div>\n\n</div>\n</div>\n</div>\n\n</div>\n<div class=\"cell border-box-sizing text_cell rendered\">\n<div class=\"prompt input_prompt\">\n</div>\n<div class=\"inner_cell\">\n<div class=\"text_cell_render border-box-sizing rendered_html\">\n<h2 id=\"Probabilistic-model\">Probabilistic model<a class=\"anchor-link\" href=\"#Probabilistic-model\">&#182;</a></h2><p>Given a sequence $\\bar x$, the linear chain CRF model gives the probability of a corresponding sequence $\\bar y$ as follows, for feature functions $F_j$, where each $F_j$ is a sum of a corresponding lower level feature function $f_j$ over every element of the sequence:</p>\n$$\np(\\bar y | \\bar x;w) =\n\\frac {1} {Z(\\bar x, w)}\n\\exp \\sum_j w_j F_j(\\bar x, \\bar y)\n$$$$\nF_j(\\bar x, \\bar y) = \n\\sum_{i=1}^n f_j(y_{i-1}, y_i, \\bar x, i)\n$$<p>$Z(\\bar x, w)$ is the partition function, that sums the probabilities of all possible sequences to normalize it to a proper probability:</p>\n$$\nZ(x, w) = \\sum_{y' \\in Y} \\exp \\sum_{j=1} ^J w_j F_j (x, y').\n$$<p>This way of summing feature functions along a sequence can be seen as a way of extending logistic regression from a single (or multiclass) output to a model that outputs sequences.</p>\n\n</div>\n</div>\n</div>\n<div class=\"cell border-box-sizing text_cell rendered\">\n<div class=\"prompt input_prompt\">\n</div>\n<div class=\"inner_cell\">\n<div class=\"text_cell_render border-box-sizing rendered_html\">\n<h3 id=\"Argmax\">Argmax<a class=\"anchor-link\" href=\"#Argmax\">&#182;</a></h3><p>Computing the most likely sequence $\\text{argmax}_{\\bar y} p(\\bar y | \\bar x;w)$ naively involves iterating through the exponentially large space of every possible sequence that can be built from the tag vocabulary, rendering the computation impractical for even medium sized tag-spaces.</p>\n<p>Since the scoring function only depends on 2 (consecutive in this situation) elements of $\\bar y$, argmax can be computed in polynomial time with a table ($\\in ℝ^{|Y| \\times |y|}$). $U_{ij}$ is the highest score for sequences ending in $y_i$ at position $y_j$. It is useful to compute the most likely sequence in terms of $g_i$, which sums over all lower level functions $f_j$ evaluated at position $i$:</p>\n\n</div>\n</div>\n</div>\n<div class=\"cell border-box-sizing text_cell rendered\">\n<div class=\"prompt input_prompt\">\n</div>\n<div class=\"inner_cell\">\n<div class=\"text_cell_render border-box-sizing rendered_html\">\n$$\ng_i(y_ {i-1}, y_i) = \\sum^J_{j=1} w_j f_j (y_ {i-1}, y_i, \\bar x, i)\n$$\n</div>\n</div>\n</div>\n<div class=\"cell border-box-sizing text_cell rendered\">\n<div class=\"prompt input_prompt\">\n</div>\n<div class=\"inner_cell\">\n<div class=\"text_cell_render border-box-sizing rendered_html\">\n<h3 id=\"Generate-maximum-score-matrix-U\">Generate maximum score matrix U<a class=\"anchor-link\" href=\"#Generate-maximum-score-matrix-U\">&#182;</a></h3>$$U(k, v) = \\max_u [U(k-1, u) + g_k(u,v)]$$$$U(1, vec) = \\max_{y_0} [U(0, y_0) + g_k(y_0,vec)]$$<p>This implementation is pretty slow, because every low level feature function is evaluated at each $i, y_{i-1}$ and $y_i$, for each feature function $f_j$ ($\\mathcal{O}(m^2 n J )$ where $J=$ number of feature functions, $m=$ number of possible tags and $n=$ length of sequence $\\bar y$). Also, using python functions in the inner-loop is slow. This could be significantly reduced if the feature functions could be arranged such that they would only be evaluated for the relevant combinations of $x_i, y_{i-1}$ and $y_i$. I started arranging them in this way in <code>dependency.py</code>, but the complexity got a bit too unwieldy for a toy educational project.</p>\n\n</div>\n</div>\n</div>\n<div class=\"cell border-box-sizing code_cell rendered\">\n<div class=\"input\">\n<div class=\"prompt input_prompt\">In&nbsp;[6]:</div>\n<div class=\"inner_cell\">\n    <div class=\"input_area\">\n<div class=\" highlight hl-ipython3\"><pre><span class=\"k\">def</span> <span class=\"nf\">init_score</span><span class=\"p\">(</span><span class=\"n\">tags</span><span class=\"p\">,</span> <span class=\"n\">tag</span><span class=\"o\">=</span><span class=\"n\">START</span><span class=\"p\">,</span> <span class=\"n\">sort</span><span class=\"o\">=</span><span class=\"k\">True</span><span class=\"p\">):</span>\n    <span class=\"s\">&quot;Base case for recurrent score calculation U&quot;</span>\n    <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">Series</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">tags</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"n\">sort</span> <span class=\"k\">else</span> <span class=\"n\">tags</span><span class=\"p\">)</span>\n    <span class=\"n\">i</span><span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"n\">tag</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n    <span class=\"k\">return</span> <span class=\"n\">i</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">get_u</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"o\">=</span><span class=\"k\">None</span><span class=\"p\">,</span> <span class=\"n\">gf</span><span class=\"p\">:</span> <span class=\"s\">&quot;int -&gt; (Y, Y&#39;) -&gt; float&quot;</span><span class=\"o\">=</span><span class=\"k\">None</span><span class=\"p\">,</span> <span class=\"n\">collect</span><span class=\"o\">=</span><span class=\"k\">True</span><span class=\"p\">,</span>\n          <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"k\">False</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"s\">&#39;([max score], [max ix])&#39;</span><span class=\"p\">:</span>\n    <span class=\"sd\">&quot;&quot;&quot;Recursively build up g_i matrices bottom up, adding y-1 score</span>\n<span class=\"sd\">    to get max y score. Returns score.</span>\n<span class=\"sd\">    - k is in terms of y vector, which is augmented with beginning</span>\n<span class=\"sd\">        and end tags</span>\n<span class=\"sd\">    - also returns indices yprev that maximize y at each level to</span>\n<span class=\"sd\">        help reconstruct tmost likely sequence</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"n\">pt</span> <span class=\"o\">=</span> <span class=\"n\">testprint</span><span class=\"p\">(</span><span class=\"n\">verbose</span><span class=\"p\">)</span>\n    <span class=\"n\">imx</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">gf</span><span class=\"o\">.</span><span class=\"n\">xbar</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n    <span class=\"k\">if</span> <span class=\"n\">k</span> <span class=\"ow\">is</span> <span class=\"k\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">pt</span><span class=\"p\">(</span><span class=\"n\">gf</span><span class=\"o\">.</span><span class=\"n\">xbar</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">get_u</span><span class=\"p\">(</span><span class=\"n\">imx</span><span class=\"p\">,</span> <span class=\"n\">gf</span><span class=\"o\">=</span><span class=\"n\">gf</span><span class=\"p\">,</span> <span class=\"n\">collect</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"n\">verbose</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">k</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"n\">init_score</span><span class=\"p\">(</span><span class=\"n\">gf</span><span class=\"o\">.</span><span class=\"n\">tags</span><span class=\"p\">,</span> <span class=\"n\">START</span><span class=\"p\">)],</span> <span class=\"p\">[]</span>\n\n    <span class=\"n\">uprevs</span><span class=\"p\">,</span> <span class=\"n\">ixprevs</span> <span class=\"o\">=</span> <span class=\"n\">get_u</span><span class=\"p\">(</span><span class=\"n\">k</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">gf</span><span class=\"o\">=</span><span class=\"n\">gf</span><span class=\"p\">,</span> <span class=\"n\">collect</span><span class=\"o\">=</span><span class=\"k\">False</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"n\">verbose</span><span class=\"p\">)</span>\n    <span class=\"n\">gmat</span> <span class=\"o\">=</span> <span class=\"n\">getmat</span><span class=\"p\">(</span><span class=\"n\">gf</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">))</span>\n    <span class=\"n\">uadd</span> <span class=\"o\">=</span> <span class=\"n\">gmat</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">uprevs</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"s\">&#39;index&#39;</span><span class=\"p\">)</span>\n    \n    <span class=\"k\">if</span> <span class=\"n\">k</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n        <span class=\"c\"># START tag only possible at beginning.</span>\n        <span class=\"c\"># There should be a better way of imposing these constraints</span>\n        <span class=\"n\">uadd</span><span class=\"p\">[</span><span class=\"n\">START</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span>\n    <span class=\"k\">if</span> <span class=\"n\">k</span> <span class=\"o\">&lt;</span> <span class=\"n\">imx</span><span class=\"p\">:</span>\n        <span class=\"n\">uadd</span><span class=\"p\">[</span><span class=\"n\">END</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span>  <span class=\"c\"># END only possible at the...end</span>\n    \n    <span class=\"k\">if</span> <span class=\"n\">k</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n        <span class=\"n\">idxmax</span> <span class=\"o\">=</span> <span class=\"n\">Series</span><span class=\"p\">(</span><span class=\"n\">START</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"n\">gf</span><span class=\"o\">.</span><span class=\"n\">tags</span><span class=\"p\">)</span>  <span class=\"c\"># uadd.ix[START].idxmax()</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">idxmax</span> <span class=\"o\">=</span> <span class=\"n\">uadd</span><span class=\"o\">.</span><span class=\"n\">idxmax</span><span class=\"p\">()</span>\n    <span class=\"n\">pt</span><span class=\"p\">(</span><span class=\"s\">&#39;idxmax:&#39;</span><span class=\"p\">,</span> <span class=\"n\">idxmax</span><span class=\"p\">,</span> <span class=\"n\">sep</span><span class=\"o\">=</span><span class=\"s\">&#39;</span><span class=\"se\">\\n</span><span class=\"s\">&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">retu</span><span class=\"p\">,</span> <span class=\"n\">reti</span> <span class=\"o\">=</span> <span class=\"n\">uprevs</span> <span class=\"o\">+</span> <span class=\"p\">[</span><span class=\"n\">uadd</span><span class=\"o\">.</span><span class=\"n\">max</span><span class=\"p\">()],</span> <span class=\"n\">ixprevs</span> <span class=\"o\">+</span> <span class=\"p\">[</span><span class=\"n\">idxmax</span><span class=\"p\">]</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">collect</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">retu</span><span class=\"p\">,</span> <span class=\"n\">reti</span>\n    <span class=\"k\">return</span> <span class=\"n\">s2df</span><span class=\"p\">(</span><span class=\"n\">retu</span><span class=\"p\">),</span> <span class=\"n\">s2df</span><span class=\"p\">(</span><span class=\"n\">reti</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">mlp</span><span class=\"p\">(</span><span class=\"n\">idxs</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"o\">=</span><span class=\"k\">None</span><span class=\"p\">,</span> <span class=\"n\">tagsrev</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Y</span><span class=\"p\">]</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">END</span><span class=\"p\">])</span> <span class=\"o\">-&gt;</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Y</span><span class=\"p\">]:</span>\n    <span class=\"s\">&quot;Most likely sequence&quot;</span>\n    <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"ow\">is</span> <span class=\"k\">None</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">mlp</span><span class=\"p\">(</span><span class=\"n\">idxs</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"o\">=</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">idxs</span><span class=\"o\">.</span><span class=\"n\">columns</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]),</span> <span class=\"n\">tagsrev</span><span class=\"o\">=</span><span class=\"n\">tagsrev</span><span class=\"p\">)</span>\n    <span class=\"k\">elif</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">tagsrev</span><span class=\"p\">[::</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n    <span class=\"n\">tag</span> <span class=\"o\">=</span> <span class=\"n\">tagsrev</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n    <span class=\"n\">yprev</span> <span class=\"o\">=</span> <span class=\"n\">idxs</span><span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"n\">tag</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">]</span>\n    <span class=\"k\">return</span> <span class=\"n\">mlp</span><span class=\"p\">(</span><span class=\"n\">idxs</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"o\">=</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">tagsrev</span><span class=\"o\">=</span><span class=\"n\">tagsrev</span> <span class=\"o\">+</span> <span class=\"p\">[</span><span class=\"n\">yprev</span><span class=\"p\">])</span>\n</pre></div>\n\n</div>\n</div>\n</div>\n\n</div>\n<div class=\"cell border-box-sizing code_cell rendered\">\n<div class=\"input\">\n<div class=\"prompt input_prompt\">In&nbsp;[7]:</div>\n<div class=\"inner_cell\">\n    <div class=\"input_area\">\n<div class=\" highlight hl-ipython3\"><pre><span class=\"k\">def</span> <span class=\"nf\">predict</span><span class=\"p\">(</span><span class=\"n\">xbar</span><span class=\"o\">=</span><span class=\"k\">None</span><span class=\"p\">,</span> <span class=\"n\">fs</span><span class=\"o\">=</span><span class=\"k\">None</span><span class=\"p\">,</span> <span class=\"n\">tags</span><span class=\"o\">=</span><span class=\"k\">None</span><span class=\"p\">,</span> <span class=\"n\">ws</span><span class=\"o\">=</span><span class=\"k\">None</span><span class=\"p\">,</span> <span class=\"n\">gf</span><span class=\"o\">=</span><span class=\"k\">None</span><span class=\"p\">):</span>\n    <span class=\"s\">&quot;Return argmax_y with corresponding score&quot;</span>\n    <span class=\"k\">if</span> <span class=\"n\">gf</span> <span class=\"ow\">is</span> <span class=\"k\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">ws</span> <span class=\"o\">=</span> <span class=\"n\">ws</span> <span class=\"ow\">or</span> <span class=\"n\">mkwts1</span><span class=\"p\">(</span><span class=\"n\">fs</span><span class=\"p\">)</span>\n        <span class=\"n\">gf</span> <span class=\"o\">=</span> <span class=\"n\">G</span><span class=\"p\">(</span><span class=\"n\">ws</span><span class=\"o\">=</span><span class=\"n\">ws</span><span class=\"p\">,</span> <span class=\"n\">fs</span><span class=\"o\">=</span><span class=\"n\">fs</span><span class=\"p\">,</span> <span class=\"n\">tags</span><span class=\"o\">=</span><span class=\"n\">tags</span><span class=\"p\">,</span> <span class=\"n\">xbar</span><span class=\"o\">=</span><span class=\"n\">xbar</span><span class=\"p\">)</span>\n    <span class=\"n\">u</span><span class=\"p\">,</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">get_u</span><span class=\"p\">(</span><span class=\"n\">gf</span><span class=\"o\">=</span><span class=\"n\">gf</span><span class=\"p\">,</span> <span class=\"n\">collect</span><span class=\"o\">=</span><span class=\"k\">True</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n    <span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"n\">mlp</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"n\">u</span><span class=\"o\">.</span><span class=\"n\">ix</span><span class=\"p\">[</span><span class=\"n\">END</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">iloc</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n    \n<span class=\"c\"># path2, score2 = predict(xbar=EasyList([&#39;wd1&#39;, &#39;pre-end&#39;, &#39;whatevs&#39;]),</span>\n<span class=\"c\">#                         fs=no_test_getu3.fs,</span>\n<span class=\"c\">#                         tags=[START, &#39;TAG1&#39;, &#39;PENULTAG&#39;, END])</span>\n</pre></div>\n\n</div>\n</div>\n</div>\n\n</div>\n<div class=\"cell border-box-sizing code_cell rendered\">\n<div class=\"input\">\n<div class=\"prompt input_prompt\">In&nbsp;[8]:</div>\n<div class=\"inner_cell\">\n    <div class=\"input_area\">\n<div class=\" highlight hl-ipython3\"><pre><span class=\"kn\">import</span> <span class=\"nn\">test</span><span class=\"p\">;</span> <span class=\"n\">reload</span><span class=\"p\">(</span><span class=\"n\">test</span><span class=\"p\">);</span> <span class=\"kn\">from</span> <span class=\"nn\">test</span> <span class=\"k\">import</span> <span class=\"o\">*</span>\n \n<span class=\"n\">no_test_getu1</span><span class=\"p\">(</span><span class=\"n\">get_u</span><span class=\"p\">,</span> <span class=\"n\">mlp</span><span class=\"p\">)</span>\n<span class=\"n\">no_test_getu2</span><span class=\"p\">(</span><span class=\"n\">get_u</span><span class=\"p\">,</span> <span class=\"n\">mlp</span><span class=\"p\">)</span>\n<span class=\"n\">no_test_getu3</span><span class=\"p\">(</span><span class=\"n\">get_u</span><span class=\"p\">,</span> <span class=\"n\">mlp</span><span class=\"p\">)</span>\n\n<span class=\"n\">test_corp</span><span class=\"p\">()</span>\n</pre></div>\n\n</div>\n</div>\n</div>\n\n</div>\n<div class=\"cell border-box-sizing text_cell rendered\">\n<div class=\"prompt input_prompt\">\n</div>\n<div class=\"inner_cell\">\n<div class=\"text_cell_render border-box-sizing rendered_html\">\n<h2 id=\"Gradient\">Gradient<a class=\"anchor-link\" href=\"#Gradient\">&#182;</a></h2>$$\\frac{\\partial}{\\partial w_j} \\log p(y | x;w) = F_j (x, y) - \\frac1 {Z(x, w)} \\sum_{y'} F_j (x, y') [\\exp \\sum_{j'} w_{j'} F_{j'} (x, y')]$$$$= F_j (x, y) - E_{y' \\sim  p(y | x;w) } [F_j(x,y')]$$<h3 id=\"Forward-backward-algorithm\">Forward-backward algorithm<a class=\"anchor-link\" href=\"#Forward-backward-algorithm\">&#182;</a></h3><ul>\n<li>Partition function $Z(\\bar x, w) = \\sum_{\\bar y} \\exp \\sum _{j=1} ^ J w_j F_j (\\bar x, \\bar y) $ can be intractible if calculated naively (similar to argmax); forward-backward vectors can make it easier to compute</li>\n</ul>\n$$\\alpha (k + 1,v) = \\sum_u \\alpha (k,u)[\\exp g_{k+1}(u,v)] \\in ℝ^m$$$$\\alpha (0,y) = I(y=START)$$$$\\beta (u, k) = \\sum_v [\\exp g_{k+1} (u, v)] \\beta(v, k+1) $$$$\\beta (u, n+1) = I(u= END) $$<p>Compute partition function $Z$ from either forward or backward vectors</p>\n$$ Z(\\bar x, w) = \\beta(START, 0) $$$$ Z(\\bar x, w) = \\alpha(n+1, END) $$<p>[It seems there could be an error in the notes, which state that $Z(\\bar x, w) = \\sum_v \\alpha(n, v) $. If this is the case, $Z$ calculated with $\\alpha$ will never get a contribution from $g_{n+1}$, while $Z$ calculated with $\\beta$ will in the $\\beta(u, n)$ step.]</p>\n\n</div>\n</div>\n</div>\n<div class=\"cell border-box-sizing text_cell rendered\">\n<div class=\"prompt input_prompt\">\n</div>\n<div class=\"inner_cell\">\n<div class=\"text_cell_render border-box-sizing rendered_html\">\n<p>Check correctness of forward and backward vectors.</p>\n<ul>\n<li>$ Z(\\bar x, w) = \\beta(START, 0) = \\alpha(n+1, END) $</li>\n<li>For all positions $k=0...n+1$, $\\sum_u \\alpha(k, u) \\beta(u, k) = Z(\\bar x, w)$</li>\n</ul>\n\n</div>\n</div>\n</div>\n<div class=\"cell border-box-sizing code_cell rendered\">\n<div class=\"input\">\n<div class=\"prompt input_prompt\">In&nbsp;[9]:</div>\n<div class=\"inner_cell\">\n    <div class=\"input_area\">\n<div class=\" highlight hl-ipython3\"><pre><span class=\"k\">def</span> <span class=\"nf\">mk_asum</span><span class=\"p\">(</span><span class=\"n\">gf</span><span class=\"p\">,</span> <span class=\"n\">vb</span><span class=\"o\">=</span><span class=\"k\">False</span><span class=\"p\">):</span>\n    <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">gf</span><span class=\"o\">.</span><span class=\"n\">xbar</span><span class=\"p\">)</span>\n    <span class=\"n\">tags</span> <span class=\"o\">=</span> <span class=\"n\">gf</span><span class=\"o\">.</span><span class=\"n\">tags</span>\n    <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">testprint</span><span class=\"p\">(</span><span class=\"n\">vb</span><span class=\"p\">)</span>\n    \n    <span class=\"nd\">@memoize</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_asum</span><span class=\"p\">(</span><span class=\"n\">knext</span><span class=\"o\">=</span><span class=\"k\">None</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">knext</span> <span class=\"ow\">is</span> <span class=\"k\">None</span><span class=\"p\">:</span>\n            <span class=\"c\"># The first use of the forward vectors is to write</span>\n            <span class=\"k\">return</span> <span class=\"n\">get_asum</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">knext</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s\">&#39;k ({}) cannot be negative&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">))</span>\n        <span class=\"k\">if</span> <span class=\"n\">knext</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">init_score</span><span class=\"p\">(</span><span class=\"n\">tags</span><span class=\"p\">,</span> <span class=\"n\">tag</span><span class=\"o\">=</span><span class=\"n\">START</span><span class=\"p\">)</span>\n        <span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"n\">knext</span> <span class=\"o\">-</span> <span class=\"mi\">1</span>\n        <span class=\"n\">gnext</span> <span class=\"o\">=</span> <span class=\"n\">gf</span><span class=\"p\">(</span><span class=\"n\">knext</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">mat</span>\n        <span class=\"n\">ak</span> <span class=\"o\">=</span> <span class=\"n\">get_asum</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">vb</span><span class=\"p\">:</span>\n            <span class=\"n\">names</span> <span class=\"o\">=</span> <span class=\"s\">&#39;exp[g{k1}] g{k1} a_{k}&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">k1</span><span class=\"o\">=</span><span class=\"n\">knext</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"o\">=</span><span class=\"n\">k</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">()</span>\n            <span class=\"n\">p</span><span class=\"p\">(</span><span class=\"n\">side_by_side</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">exp</span><span class=\"p\">(</span><span class=\"n\">gnext</span><span class=\"p\">),</span> <span class=\"n\">gnext</span><span class=\"p\">,</span> <span class=\"n\">ak</span><span class=\"p\">,</span> <span class=\"n\">names</span><span class=\"o\">=</span><span class=\"n\">names</span><span class=\"p\">))</span>\n        <span class=\"c\"># expsum = Series([sum([ak[u] * np.exp(gnext.loc[u, v])</span>\n        <span class=\"c\">#            for u in tags]) for v in tags], index=tags)</span>\n        <span class=\"c\"># vectorizing is much faster:</span>\n        <span class=\"n\">expsum</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">exp</span><span class=\"p\">(</span><span class=\"n\">gnext</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">mul</span><span class=\"p\">(</span><span class=\"n\">ak</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">(</span><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">expsum</span>\n    <span class=\"k\">return</span> <span class=\"n\">get_asum</span>  <span class=\"c\">#(knext, vb=vb)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">mk_bsum</span><span class=\"p\">(</span><span class=\"n\">gf</span><span class=\"p\">,</span> <span class=\"n\">vb</span><span class=\"o\">=</span><span class=\"k\">False</span><span class=\"p\">):</span>\n    <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">testprint</span><span class=\"p\">(</span><span class=\"n\">vb</span><span class=\"p\">)</span>\n    <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">gf</span><span class=\"o\">.</span><span class=\"n\">xbar</span><span class=\"p\">)</span>\n    <span class=\"n\">tags</span> <span class=\"o\">=</span> <span class=\"n\">gf</span><span class=\"o\">.</span><span class=\"n\">tags</span>\n    \n    <span class=\"nd\">@memoize</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_bsum</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"o\">=</span><span class=\"k\">None</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">k</span> <span class=\"ow\">is</span> <span class=\"k\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">get_bsum</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">k</span> <span class=\"o\">&gt;</span> <span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s\">&#39;{} &gt; length of x {} + 1&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">))</span>\n        <span class=\"k\">if</span> <span class=\"n\">k</span> <span class=\"o\">==</span> <span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">init_score</span><span class=\"p\">(</span><span class=\"n\">gf</span><span class=\"o\">.</span><span class=\"n\">tags</span><span class=\"p\">,</span> <span class=\"n\">tag</span><span class=\"o\">=</span><span class=\"n\">END</span><span class=\"p\">)</span>\n        <span class=\"n\">gnext</span> <span class=\"o\">=</span> <span class=\"n\">gf</span><span class=\"p\">(</span><span class=\"n\">k</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">mat</span>\n        <span class=\"n\">bnext</span> <span class=\"o\">=</span> <span class=\"n\">get_bsum</span><span class=\"p\">(</span><span class=\"n\">k</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">vb</span><span class=\"p\">:</span>\n            <span class=\"n\">names</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">&#39;exp[g{}]&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">),</span><span class=\"s\">&#39;g{}&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">),</span>\n                     <span class=\"s\">&#39;b_{}&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)]</span>\n            <span class=\"n\">p</span><span class=\"p\">(</span><span class=\"n\">side_by_side</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">exp</span><span class=\"p\">(</span><span class=\"n\">gnext</span><span class=\"p\">),</span> <span class=\"n\">gnext</span><span class=\"p\">,</span> <span class=\"n\">bnext</span><span class=\"p\">,</span> <span class=\"n\">names</span><span class=\"o\">=</span><span class=\"n\">names</span><span class=\"p\">))</span>\n        <span class=\"c\"># expsum = Series([sum([np.exp(gnext.loc[u, v]) * bnext[v]</span>\n        <span class=\"c\"># for v in tags]) for u in tags], index=tags)</span>\n        <span class=\"n\">expsum</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">exp</span><span class=\"p\">(</span><span class=\"n\">gnext</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">mul</span><span class=\"p\">(</span><span class=\"n\">bnext</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">(</span><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">expsum</span>\n    <span class=\"k\">return</span> <span class=\"n\">get_bsum</span>\n</pre></div>\n\n</div>\n</div>\n</div>\n\n</div>\n<div class=\"cell border-box-sizing code_cell rendered\">\n<div class=\"input\">\n<div class=\"prompt input_prompt\">In&nbsp;[10]:</div>\n<div class=\"inner_cell\">\n    <div class=\"input_area\">\n<div class=\" highlight hl-ipython3\"><pre><span class=\"k\">def</span> <span class=\"nf\">test_fwd_bkwd</span><span class=\"p\">():</span>\n    <span class=\"n\">tgs</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">START</span><span class=\"p\">,</span> <span class=\"s\">&#39;TAG1&#39;</span><span class=\"p\">,</span> <span class=\"n\">END</span><span class=\"p\">]</span>\n    <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">EasyList</span><span class=\"p\">([</span><span class=\"s\">&#39;wd1&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;pre-end&#39;</span><span class=\"p\">])</span>\n    <span class=\"n\">fs</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"c\"># &#39;eq_wd1&#39;: mk_word_tag(&#39;wd1&#39;, &#39;TAG1&#39;),</span>\n        <span class=\"s\">&#39;pre_endx&#39;</span><span class=\"p\">:</span> <span class=\"k\">lambda</span> <span class=\"n\">yp</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">:</span> <span class=\"p\">((</span><span class=\"n\">x</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s\">&#39;pre-end&#39;</span><span class=\"p\">)</span>\n                                         <span class=\"ow\">and</span> <span class=\"p\">(</span><span class=\"n\">y</span> <span class=\"o\">==</span> <span class=\"n\">END</span><span class=\"p\">))</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">ws</span> <span class=\"o\">=</span> <span class=\"n\">z</span><span class=\"o\">.</span><span class=\"n\">merge</span><span class=\"p\">(</span><span class=\"n\">mkwts1</span><span class=\"p\">(</span><span class=\"n\">fs</span><span class=\"p\">),</span> <span class=\"p\">{</span><span class=\"s\">&#39;pre_endx&#39;</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">})</span>\n    <span class=\"n\">gf</span> <span class=\"o\">=</span> <span class=\"n\">G</span><span class=\"p\">(</span><span class=\"n\">fs</span><span class=\"o\">=</span><span class=\"n\">fs</span><span class=\"p\">,</span> <span class=\"n\">tags</span><span class=\"o\">=</span><span class=\"n\">tgs</span><span class=\"p\">,</span> <span class=\"n\">xbar</span><span class=\"o\">=</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">ws</span><span class=\"o\">=</span><span class=\"n\">ws</span><span class=\"p\">)</span>\n\n    <span class=\"n\">amkr</span> <span class=\"o\">=</span> <span class=\"n\">mk_asum</span><span class=\"p\">(</span><span class=\"n\">gf</span><span class=\"p\">)</span>\n    <span class=\"n\">bmkr</span> <span class=\"o\">=</span> <span class=\"n\">mk_bsum</span><span class=\"p\">(</span><span class=\"n\">gf</span><span class=\"p\">)</span>\n    <span class=\"n\">za</span> <span class=\"o\">=</span> <span class=\"n\">amkr</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">END</span>\n    <span class=\"n\">zb</span> <span class=\"o\">=</span> <span class=\"n\">bmkr</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">START</span>\n    <span class=\"k\">assert</span> <span class=\"n\">za</span> <span class=\"o\">==</span> <span class=\"n\">zb</span>\n    \n    <span class=\"k\">for</span> <span class=\"n\">k</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">2</span><span class=\"p\">):</span>\n        <span class=\"k\">assert</span> <span class=\"n\">amkr</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">)</span> <span class=\"err\">@</span> <span class=\"n\">bmkr</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">za</span>\n    <span class=\"k\">return</span> <span class=\"n\">za</span>\n    \n<span class=\"n\">test_fwd_bkwd</span><span class=\"p\">()</span>\n</pre></div>\n\n</div>\n</div>\n</div>\n\n<div class=\"output_wrapper\">\n<div class=\"output\">\n\n\n<div class=\"output_area\"><div class=\"prompt output_prompt\">Out[10]:</div>\n\n\n<div class=\"output_text output_subarea output_execute_result\">\n<pre>24.464536456131405</pre>\n</div>\n\n</div>\n\n</div>\n</div>\n\n</div>\n<div class=\"cell border-box-sizing text_cell rendered\">\n<div class=\"prompt input_prompt\">\n</div>\n<div class=\"inner_cell\">\n<div class=\"text_cell_render border-box-sizing rendered_html\">\n<h3 id=\"Calculate-expected-value-of-feature-function\">Calculate expected value of feature function<a class=\"anchor-link\" href=\"#Calculate-expected-value-of-feature-function\">&#182;</a></h3><p>Weighted by conditional probability of $y'$ given $x$</p>\n$$\nE_{\\bar y \\sim  p(\\bar y | \\bar x;w) } [F_j(\\bar  x, \\bar y)] =\n\\sum _{i=1} ^n \\sum _{y_{i-1}} \\sum _{y_i}\n    f_j(y_{i-1}, y_i, \\bar x, i)\n    \\frac {\\alpha (i-1, y_{i-1})\n    [\\exp g_i(y_{i-1}, y_i)]\n    \\beta(y_i, i)\n    }\n    {Z(\\bar x, w)}\n$$\n</div>\n</div>\n</div>\n<div class=\"cell border-box-sizing code_cell rendered\">\n<div class=\"input\">\n<div class=\"prompt input_prompt\">In&nbsp;[11]:</div>\n<div class=\"inner_cell\">\n    <div class=\"input_area\">\n<div class=\" highlight hl-ipython3\"><pre><span class=\"k\">def</span> <span class=\"nf\">sdot</span><span class=\"p\">(</span><span class=\"n\">s1</span><span class=\"p\">:</span> <span class=\"n\">Series</span><span class=\"p\">,</span> <span class=\"n\">s2</span><span class=\"p\">:</span> <span class=\"n\">Series</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;It&#39;s quite a bit faster to get the dot product</span>\n<span class=\"sd\">    of raw numpy arrays rather than of the Series&quot;&quot;&quot;</span>\n    <span class=\"n\">d1</span><span class=\"p\">,</span> <span class=\"n\">d2</span> <span class=\"o\">=</span> <span class=\"n\">s1</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">[:,</span> <span class=\"k\">None</span><span class=\"p\">],</span> <span class=\"n\">s2</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">[:,</span> <span class=\"k\">None</span><span class=\"p\">]</span>\n    <span class=\"k\">return</span> <span class=\"n\">d1</span> <span class=\"err\">@</span> <span class=\"n\">d2</span><span class=\"o\">.</span><span class=\"n\">T</span>\n</pre></div>\n\n</div>\n</div>\n</div>\n\n</div>\n<div class=\"cell border-box-sizing code_cell rendered\">\n<div class=\"input\">\n<div class=\"prompt input_prompt\">In&nbsp;[12]:</div>\n<div class=\"inner_cell\">\n    <div class=\"input_area\">\n<div class=\" highlight hl-ipython3\"><pre><span class=\"k\">def</span> <span class=\"nf\">expectation2</span><span class=\"p\">(</span><span class=\"n\">gf</span><span class=\"p\">,</span> <span class=\"n\">fj</span><span class=\"p\">):</span>\n    <span class=\"s\">&quot;Faster matrix multiplication version&quot;</span>\n    <span class=\"n\">tags</span> <span class=\"o\">=</span> <span class=\"n\">gf</span><span class=\"o\">.</span><span class=\"n\">tags</span>\n    <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">gf</span><span class=\"o\">.</span><span class=\"n\">xbar</span><span class=\"p\">)</span>\n    <span class=\"n\">ss</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n    <span class=\"n\">ss2</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n    <span class=\"n\">asummer</span> <span class=\"o\">=</span> <span class=\"n\">mk_asum</span><span class=\"p\">(</span><span class=\"n\">gf</span><span class=\"p\">)</span>\n    <span class=\"n\">bsummer</span> <span class=\"o\">=</span> <span class=\"n\">mk_bsum</span><span class=\"p\">(</span><span class=\"n\">gf</span><span class=\"p\">)</span>\n    \n    <span class=\"n\">za</span> <span class=\"o\">=</span> <span class=\"n\">partition</span><span class=\"p\">(</span><span class=\"n\">asummer</span><span class=\"o\">=</span><span class=\"n\">asummer</span><span class=\"p\">)</span>\n    <span class=\"k\">global</span> <span class=\"n\">α</span><span class=\"p\">,</span> <span class=\"n\">β</span><span class=\"p\">,</span> <span class=\"n\">alpha_vec</span><span class=\"p\">,</span> <span class=\"n\">beta_vec</span><span class=\"p\">,</span> <span class=\"n\">gfix</span><span class=\"p\">,</span> <span class=\"n\">smat</span>\n    \n    <span class=\"k\">def</span> <span class=\"nf\">sumi</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">):</span>\n        <span class=\"n\">gfix</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">exp</span><span class=\"p\">(</span><span class=\"n\">gf</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">mat</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">)</span>\n        <span class=\"n\">alpha_vec</span> <span class=\"o\">=</span> <span class=\"n\">asummer</span><span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"n\">beta_vec</span> <span class=\"o\">=</span> <span class=\"n\">bsummer</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span>\n        <span class=\"n\">fmat</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([[</span><span class=\"n\">fj</span><span class=\"p\">(</span><span class=\"n\">yprev</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">gf</span><span class=\"o\">.</span><span class=\"n\">xbar</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">y</span> <span class=\"ow\">in</span> <span class=\"n\">tags</span><span class=\"p\">]</span>\n                         <span class=\"k\">for</span> <span class=\"n\">yprev</span> <span class=\"ow\">in</span> <span class=\"n\">tags</span><span class=\"p\">])</span>\n        <span class=\"n\">smat</span> <span class=\"o\">=</span> <span class=\"n\">sdot</span><span class=\"p\">(</span><span class=\"n\">alpha_vec</span><span class=\"p\">,</span> <span class=\"n\">beta_vec</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">gfix</span> <span class=\"o\">*</span> <span class=\"n\">fmat</span>\n        <span class=\"k\">return</span> <span class=\"n\">smat</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">()</span> <span class=\"c\">#.sum()</span>\n    \n    <span class=\"k\">return</span> <span class=\"nb\">sum</span><span class=\"p\">([</span><span class=\"n\">sumi</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"mi\">2</span><span class=\"p\">)])</span> <span class=\"o\">/</span> <span class=\"n\">za</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">expectation_</span><span class=\"p\">(</span><span class=\"n\">gf</span><span class=\"p\">,</span> <span class=\"n\">fj</span><span class=\"p\">):</span>\n    <span class=\"s\">&quot;Slow, looping version&quot;</span>\n    <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">gf</span><span class=\"o\">.</span><span class=\"n\">xbar</span><span class=\"p\">)</span>\n    <span class=\"n\">ss</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n    <span class=\"n\">za</span> <span class=\"o\">=</span> <span class=\"n\">get_asum</span><span class=\"p\">(</span><span class=\"n\">gf</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">END</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"mi\">2</span><span class=\"p\">):</span>\n        <span class=\"n\">gfix</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">exp</span><span class=\"p\">(</span><span class=\"n\">gf</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">mat</span><span class=\"p\">)</span>\n        <span class=\"n\">alpha_vec</span> <span class=\"o\">=</span> <span class=\"n\">get_asum</span><span class=\"p\">(</span><span class=\"n\">gf</span><span class=\"p\">,</span> <span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"n\">beta_vec</span> <span class=\"o\">=</span> <span class=\"n\">get_bsum</span><span class=\"p\">(</span><span class=\"n\">gf</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">)</span>\n        <span class=\"n\">ss</span> <span class=\"o\">+=</span> <span class=\"nb\">sum</span><span class=\"p\">(</span>\n                <span class=\"p\">[</span><span class=\"n\">fj</span><span class=\"p\">(</span><span class=\"n\">yprev</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">gf</span><span class=\"o\">.</span><span class=\"n\">xbar</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">alpha_vec</span><span class=\"p\">[</span><span class=\"n\">yprev</span><span class=\"p\">]</span>\n                 <span class=\"o\">*</span> <span class=\"n\">gfix</span><span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"n\">yprev</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"n\">beta_vec</span><span class=\"p\">[</span><span class=\"n\">y</span><span class=\"p\">]</span>\n                <span class=\"k\">for</span> <span class=\"n\">yprev</span> <span class=\"ow\">in</span> <span class=\"n\">tgs</span>\n            <span class=\"k\">for</span> <span class=\"n\">y</span> <span class=\"ow\">in</span> <span class=\"n\">tgs</span><span class=\"p\">])</span>\n    <span class=\"k\">return</span> <span class=\"n\">ss</span> <span class=\"o\">/</span> <span class=\"n\">za</span>\n</pre></div>\n\n</div>\n</div>\n</div>\n\n</div>\n<div class=\"cell border-box-sizing text_cell rendered\">\n<div class=\"prompt input_prompt\">\n</div>\n<div class=\"inner_cell\">\n<div class=\"text_cell_render border-box-sizing rendered_html\">\n<h2 id=\"Partial-derivative\">Partial derivative<a class=\"anchor-link\" href=\"#Partial-derivative\">&#182;</a></h2><h3 id=\"Probability-function\">Probability function<a class=\"anchor-link\" href=\"#Probability-function\">&#182;</a></h3>\n</div>\n</div>\n</div>\n<div class=\"cell border-box-sizing code_cell rendered\">\n<div class=\"input\">\n<div class=\"prompt input_prompt\">In&nbsp;[13]:</div>\n<div class=\"inner_cell\">\n    <div class=\"input_area\">\n<div class=\" highlight hl-ipython3\"><pre><span class=\"k\">def</span> <span class=\"nf\">partial_d</span><span class=\"p\">(</span><span class=\"n\">gf</span><span class=\"p\">,</span> <span class=\"n\">fj</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">Fj</span><span class=\"o\">=</span><span class=\"k\">None</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">float</span><span class=\"p\">:</span>\n    <span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"n\">fj</span> <span class=\"k\">if</span> <span class=\"n\">callable</span><span class=\"p\">(</span><span class=\"n\">fj</span><span class=\"p\">)</span> <span class=\"k\">else</span> <span class=\"n\">gf</span><span class=\"o\">.</span><span class=\"n\">fs</span><span class=\"p\">[</span><span class=\"n\">fj</span><span class=\"p\">]</span>\n    <span class=\"k\">if</span> <span class=\"n\">Fj</span> <span class=\"ow\">is</span> <span class=\"k\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">Fj</span> <span class=\"o\">=</span> <span class=\"n\">FeatUtils</span><span class=\"o\">.</span><span class=\"n\">mk_sum</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span>\n    <span class=\"c\">#ex1 = expectation(gf, f)</span>\n    <span class=\"n\">ex2</span> <span class=\"o\">=</span> <span class=\"n\">expectation2</span><span class=\"p\">(</span><span class=\"n\">gf</span><span class=\"p\">,</span> <span class=\"n\">f</span><span class=\"p\">)</span>\n    <span class=\"c\">#assert np.allclose(ex1, ex2)</span>\n    <span class=\"k\">return</span> <span class=\"n\">Fj</span><span class=\"p\">(</span><span class=\"n\">gf</span><span class=\"o\">.</span><span class=\"n\">xbar</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"n\">ex2</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">prob</span><span class=\"p\">(</span><span class=\"n\">gf</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">norm</span><span class=\"o\">=</span><span class=\"k\">True</span><span class=\"p\">):</span>\n    <span class=\"n\">Fs</span> <span class=\"o\">=</span> <span class=\"n\">z</span><span class=\"o\">.</span><span class=\"n\">valmap</span><span class=\"p\">(</span><span class=\"n\">FeatUtils</span><span class=\"o\">.</span><span class=\"n\">mk_sum</span><span class=\"p\">,</span> <span class=\"n\">gf</span><span class=\"o\">.</span><span class=\"n\">fs</span><span class=\"p\">)</span>\n    <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">exp</span><span class=\"p\">(</span><span class=\"nb\">sum</span><span class=\"p\">([</span><span class=\"n\">Fj</span><span class=\"p\">(</span><span class=\"n\">gf</span><span class=\"o\">.</span><span class=\"n\">xbar</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">gf</span><span class=\"o\">.</span><span class=\"n\">ws</span><span class=\"p\">[</span><span class=\"n\">fname</span><span class=\"p\">]</span>\n                    <span class=\"k\">for</span> <span class=\"n\">fname</span><span class=\"p\">,</span> <span class=\"n\">Fj</span> <span class=\"ow\">in</span> <span class=\"n\">Fs</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">()]))</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">norm</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">p</span>\n    <span class=\"n\">za</span> <span class=\"o\">=</span> <span class=\"n\">partition</span><span class=\"p\">(</span><span class=\"n\">gf</span><span class=\"o\">=</span><span class=\"n\">gf</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">p</span> <span class=\"o\">/</span> <span class=\"n\">za</span>\n     \n\n<span class=\"k\">def</span> <span class=\"nf\">partition</span><span class=\"p\">(</span><span class=\"n\">gf</span><span class=\"o\">=</span><span class=\"k\">None</span><span class=\"p\">,</span> <span class=\"n\">asummer</span><span class=\"o\">=</span><span class=\"k\">None</span><span class=\"p\">):</span>\n    <span class=\"k\">assert</span> <span class=\"n\">asummer</span> <span class=\"ow\">or</span> <span class=\"n\">gf</span><span class=\"p\">,</span> <span class=\"s\">&#39;Supply at least one argument&#39;</span>\n    <span class=\"n\">asummer</span> <span class=\"o\">=</span> <span class=\"n\">asummer</span> <span class=\"ow\">or</span> <span class=\"n\">mk_asum</span><span class=\"p\">(</span><span class=\"n\">gf</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">asummer</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">END</span>\n</pre></div>\n\n</div>\n</div>\n</div>\n\n</div>\n<div class=\"cell border-box-sizing text_cell rendered\">\n<div class=\"prompt input_prompt\">\n</div>\n<div class=\"inner_cell\">\n<div class=\"text_cell_render border-box-sizing rendered_html\">\n<h2 id=\"Test-Partial\">Test Partial<a class=\"anchor-link\" href=\"#Test-Partial\">&#182;</a></h2>\n</div>\n</div>\n</div>\n<div class=\"cell border-box-sizing text_cell rendered\">\n<div class=\"prompt input_prompt\">\n</div>\n<div class=\"inner_cell\">\n<div class=\"text_cell_render border-box-sizing rendered_html\">\n<h3 id=\"Train\">Train<a class=\"anchor-link\" href=\"#Train\">&#182;</a></h3>\n</div>\n</div>\n</div>\n<div class=\"cell border-box-sizing code_cell rendered\">\n<div class=\"input\">\n<div class=\"prompt input_prompt\">In&nbsp;[14]:</div>\n<div class=\"inner_cell\">\n    <div class=\"input_area\">\n<div class=\" highlight hl-ipython3\"><pre><span class=\"n\">λ</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">train_</span><span class=\"p\">(</span><span class=\"n\">zs</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">EasyList</span><span class=\"p\">,</span> <span class=\"n\">AugmentY</span><span class=\"p\">]],</span>\n          <span class=\"n\">fjid</span><span class=\"o\">=</span><span class=\"s\">&#39;ly_VBZ&#39;</span><span class=\"p\">,</span> <span class=\"n\">fs</span><span class=\"o\">=</span><span class=\"k\">None</span><span class=\"p\">,</span> <span class=\"n\">ws</span><span class=\"o\">=</span><span class=\"k\">None</span><span class=\"p\">,</span> <span class=\"n\">vb</span><span class=\"o\">=</span><span class=\"k\">True</span><span class=\"p\">,</span> <span class=\"n\">tgs</span><span class=\"o\">=</span><span class=\"k\">None</span><span class=\"p\">,</span> <span class=\"n\">rand</span><span class=\"o\">=</span><span class=\"k\">None</span><span class=\"p\">):</span>\n    <span class=\"n\">fj</span> <span class=\"o\">=</span> <span class=\"n\">fs</span><span class=\"p\">[</span><span class=\"n\">fjid</span><span class=\"p\">]</span>\n    <span class=\"n\">Fj</span> <span class=\"o\">=</span> <span class=\"n\">FeatUtils</span><span class=\"o\">.</span><span class=\"n\">mk_sum</span><span class=\"p\">(</span><span class=\"n\">fj</span><span class=\"p\">)</span>\n    <span class=\"n\">pt</span> <span class=\"o\">=</span> <span class=\"n\">testprint</span><span class=\"p\">(</span><span class=\"n\">vb</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span> <span class=\"ow\">in</span> <span class=\"n\">zs</span><span class=\"p\">:</span>\n        <span class=\"n\">gf_</span> <span class=\"o\">=</span> <span class=\"n\">G</span><span class=\"p\">(</span><span class=\"n\">fs</span><span class=\"o\">=</span><span class=\"n\">fs</span><span class=\"p\">,</span> <span class=\"n\">tags</span><span class=\"o\">=</span><span class=\"n\">tgs</span><span class=\"p\">,</span> <span class=\"n\">xbar</span><span class=\"o\">=</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">ws</span><span class=\"o\">=</span><span class=\"n\">ws</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">Fj</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">):</span>  <span class=\"c\"># TODO: is this always right?</span>\n            <span class=\"k\">continue</span>\n        <span class=\"n\">pder</span> <span class=\"o\">=</span> <span class=\"n\">partial_d</span><span class=\"p\">(</span><span class=\"n\">gf_</span><span class=\"p\">,</span> <span class=\"n\">fj</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">Fj</span><span class=\"o\">=</span><span class=\"n\">Fj</span><span class=\"p\">)</span>\n        <span class=\"n\">wj0</span> <span class=\"o\">=</span> <span class=\"n\">ws</span><span class=\"p\">[</span><span class=\"n\">fjid</span><span class=\"p\">]</span>\n        <span class=\"n\">ws</span><span class=\"p\">[</span><span class=\"n\">fjid</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"n\">λ</span> <span class=\"o\">*</span> <span class=\"n\">pder</span>\n        <span class=\"n\">pt</span><span class=\"p\">(</span><span class=\"s\">&#39;wj: {} -&gt; {}&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">wj0</span><span class=\"p\">,</span> <span class=\"n\">ws</span><span class=\"p\">[</span><span class=\"n\">fjid</span><span class=\"p\">]))</span>\n        <span class=\"n\">pt</span><span class=\"p\">(</span><span class=\"s\">&#39;pder: {:.2f}&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">pder</span><span class=\"p\">),</span> <span class=\"n\">Fj</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">))</span>\n    <span class=\"k\">return</span> <span class=\"n\">ws</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">train_j</span><span class=\"p\">(</span><span class=\"n\">zs</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">EasyList</span><span class=\"p\">,</span> <span class=\"n\">AugmentY</span><span class=\"p\">]],</span> <span class=\"n\">fjid</span><span class=\"o\">=</span><span class=\"s\">&#39;ly_VBZ&#39;</span><span class=\"p\">,</span>\n            <span class=\"n\">fs</span><span class=\"o\">=</span><span class=\"k\">None</span><span class=\"p\">,</span> <span class=\"n\">ws</span><span class=\"o\">=</span><span class=\"k\">None</span><span class=\"p\">,</span> <span class=\"n\">tol</span><span class=\"o\">=.</span><span class=\"mi\">01</span><span class=\"p\">,</span> <span class=\"n\">maxiter</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"n\">vb</span><span class=\"o\">=</span><span class=\"k\">True</span><span class=\"p\">,</span>\n            <span class=\"n\">tgs</span><span class=\"o\">=</span><span class=\"k\">None</span><span class=\"p\">,</span> <span class=\"n\">sec</span><span class=\"o\">=</span><span class=\"k\">None</span><span class=\"p\">):</span>\n    <span class=\"n\">ws1</span> <span class=\"o\">=</span> <span class=\"n\">ws</span>\n    <span class=\"n\">pt</span> <span class=\"o\">=</span> <span class=\"n\">testprint</span><span class=\"p\">(</span><span class=\"n\">vb</span><span class=\"p\">)</span>\n    <span class=\"n\">st</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">count</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n        <span class=\"n\">nr</span><span class=\"o\">.</span><span class=\"n\">shuffle</span><span class=\"p\">(</span><span class=\"n\">zs</span><span class=\"p\">)</span>\n        <span class=\"n\">pt</span><span class=\"p\">(</span><span class=\"s\">&#39;Iter&#39;</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">)</span>\n        <span class=\"n\">wj1</span> <span class=\"o\">=</span> <span class=\"n\">ws1</span><span class=\"p\">[</span><span class=\"n\">fjid</span><span class=\"p\">]</span>\n        <span class=\"n\">ws2</span> <span class=\"o\">=</span> <span class=\"n\">train_</span><span class=\"p\">(</span><span class=\"n\">zs</span><span class=\"p\">,</span> <span class=\"n\">fjid</span><span class=\"o\">=</span><span class=\"n\">fjid</span><span class=\"p\">,</span> <span class=\"n\">fs</span><span class=\"o\">=</span><span class=\"n\">fs</span><span class=\"p\">,</span> <span class=\"n\">ws</span><span class=\"o\">=</span><span class=\"n\">ws1</span><span class=\"p\">,</span> <span class=\"n\">vb</span><span class=\"o\">=</span><span class=\"n\">vb</span><span class=\"p\">,</span> <span class=\"n\">tgs</span><span class=\"o\">=</span><span class=\"n\">tgs</span><span class=\"p\">)</span>\n        <span class=\"n\">wj2</span> <span class=\"o\">=</span> <span class=\"n\">ws2</span><span class=\"p\">[</span><span class=\"n\">fjid</span><span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"nb\">abs</span><span class=\"p\">((</span><span class=\"n\">wj2</span> <span class=\"o\">-</span> <span class=\"n\">wj1</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"n\">wj1</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"n\">tol</span> \\\n            <span class=\"ow\">or</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">&gt;=</span> <span class=\"n\">maxiter</span><span class=\"p\">)</span> \\\n            <span class=\"ow\">or</span> <span class=\"p\">(</span><span class=\"n\">sec</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"k\">None</span> <span class=\"ow\">and</span> <span class=\"p\">(</span><span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"n\">st</span> <span class=\"o\">&gt;</span> <span class=\"n\">sec</span><span class=\"p\">)):</span>\n            <span class=\"k\">return</span> <span class=\"n\">ws</span><span class=\"p\">,</span> <span class=\"n\">i</span>\n        <span class=\"n\">ws1</span> <span class=\"o\">=</span> <span class=\"n\">ws2</span>\n        \n<span class=\"k\">def</span> <span class=\"nf\">train</span><span class=\"p\">(</span><span class=\"n\">zs_</span><span class=\"p\">,</span> <span class=\"n\">gf</span><span class=\"p\">,</span> <span class=\"n\">ws</span><span class=\"o\">=</span><span class=\"k\">None</span><span class=\"p\">,</span> <span class=\"n\">tol</span><span class=\"o\">=.</span><span class=\"mi\">001</span><span class=\"p\">,</span> <span class=\"n\">maxiter</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">vb</span><span class=\"o\">=</span><span class=\"k\">False</span><span class=\"p\">,</span>\n          <span class=\"n\">sec</span><span class=\"o\">=</span><span class=\"k\">None</span><span class=\"p\">,</span> <span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n    <span class=\"n\">wst</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">ws</span> <span class=\"ow\">or</span> <span class=\"n\">gf</span><span class=\"o\">.</span><span class=\"n\">ws</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>\n    <span class=\"n\">nr</span><span class=\"o\">.</span><span class=\"n\">seed</span><span class=\"p\">(</span><span class=\"n\">seed</span><span class=\"p\">)</span>\n    <span class=\"n\">zs</span> <span class=\"o\">=</span> <span class=\"n\">zs_</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>\n\n\n    <span class=\"k\">for</span> <span class=\"n\">fname</span><span class=\"p\">,</span> <span class=\"n\">f</span> <span class=\"ow\">in</span> <span class=\"n\">gf</span><span class=\"o\">.</span><span class=\"n\">fs</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n        <span class=\"n\">itime</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span>\n        <span class=\"n\">wst</span><span class=\"p\">,</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">train_j</span><span class=\"p\">(</span><span class=\"n\">zs</span><span class=\"p\">,</span> <span class=\"n\">fjid</span><span class=\"o\">=</span><span class=\"n\">fname</span><span class=\"p\">,</span> <span class=\"n\">fs</span><span class=\"o\">=</span><span class=\"n\">gf</span><span class=\"o\">.</span><span class=\"n\">fs</span><span class=\"p\">,</span> <span class=\"n\">ws</span><span class=\"o\">=</span><span class=\"n\">wst</span><span class=\"p\">,</span> <span class=\"n\">tol</span><span class=\"o\">=</span><span class=\"n\">tol</span><span class=\"p\">,</span>\n                         <span class=\"n\">maxiter</span><span class=\"o\">=</span><span class=\"n\">maxiter</span><span class=\"p\">,</span> <span class=\"n\">vb</span><span class=\"o\">=</span><span class=\"n\">vb</span><span class=\"p\">,</span> <span class=\"n\">tgs</span><span class=\"o\">=</span><span class=\"n\">gf</span><span class=\"o\">.</span><span class=\"n\">tags</span><span class=\"p\">,</span> <span class=\"n\">sec</span><span class=\"o\">=</span><span class=\"n\">sec</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">fname</span><span class=\"p\">,</span> <span class=\"s\">&#39;trained in&#39;</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"s\">&#39;iters: {:.2f} ({:.2f}s)&#39;</span>\n              <span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">wst</span><span class=\"p\">[</span><span class=\"n\">fname</span><span class=\"p\">],</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"n\">itime</span><span class=\"p\">))</span>\n        <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">stdout</span><span class=\"o\">.</span><span class=\"n\">flush</span><span class=\"p\">()</span>\n    <span class=\"k\">return</span> <span class=\"n\">wst</span>\n\n<span class=\"c\"># %time ws1c = train(zs, gf, mkwts1(gf.fs, 1), maxiter=100, tol=.005)</span>\n</pre></div>\n\n</div>\n</div>\n</div>\n\n</div>\n<div class=\"cell border-box-sizing text_cell rendered\">\n<div class=\"prompt input_prompt\">\n</div>\n<div class=\"inner_cell\">\n<div class=\"text_cell_render border-box-sizing rendered_html\">\n<h2 id=\"Evaluation\">Evaluation<a class=\"anchor-link\" href=\"#Evaluation\">&#182;</a></h2><p>Since I'm maximizing the log-likelihood during testing, that would seem a natural measure to evaluate improvement. I'm a bit suspicious about bugs in my implementation, so I'd like to evaluate Hamming distance between actual $y$ and the predicted sequence see how much the predictions improve.</p>\n<h3 id=\"Load-data\">Load data<a class=\"anchor-link\" href=\"#Load-data\">&#182;</a></h3>\n</div>\n</div>\n</div>\n<div class=\"cell border-box-sizing code_cell rendered\">\n<div class=\"input\">\n<div class=\"prompt input_prompt\">In&nbsp;[15]:</div>\n<div class=\"inner_cell\">\n    <div class=\"input_area\">\n<div class=\" highlight hl-ipython3\"><pre><span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s\">&#39;data/pos.train.txt&#39;</span><span class=\"p\">,</span><span class=\"s\">&#39;r&#39;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n    <span class=\"n\">txt</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span>\n    \n<span class=\"n\">sents</span> <span class=\"o\">=</span> <span class=\"nb\">filter</span><span class=\"p\">(</span><span class=\"k\">None</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"p\">[</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">()</span> <span class=\"k\">for</span> <span class=\"n\">e</span> <span class=\"ow\">in</span> <span class=\"n\">sent</span><span class=\"o\">.</span><span class=\"n\">splitlines</span><span class=\"p\">()])</span>\n                      <span class=\"k\">for</span> <span class=\"n\">sent</span> <span class=\"ow\">in</span> <span class=\"n\">txt</span><span class=\"p\">[:]</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s\">&#39;</span><span class=\"se\">\\n\\n</span><span class=\"s\">&#39;</span><span class=\"p\">)])</span>\n<span class=\"n\">X</span> <span class=\"o\">=</span> <span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"n\">itg</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"n\">sents</span><span class=\"p\">)</span>\n<span class=\"n\">Y_</span> <span class=\"o\">=</span> <span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"n\">itg</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">sents</span><span class=\"p\">)</span>\n<span class=\"n\">Xa</span> <span class=\"o\">=</span> <span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"n\">EasyList</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">)</span>\n<span class=\"n\">Ya</span> <span class=\"o\">=</span> <span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"n\">AugmentY</span><span class=\"p\">,</span> <span class=\"n\">Y_</span><span class=\"p\">)</span>\n\n<span class=\"n\">tags</span> <span class=\"o\">=</span> <span class=\"nb\">sorted</span><span class=\"p\">({</span><span class=\"n\">tag</span> <span class=\"k\">for</span> <span class=\"n\">y</span> <span class=\"ow\">in</span> <span class=\"n\">Y_</span> <span class=\"k\">for</span> <span class=\"n\">tag</span> <span class=\"ow\">in</span> <span class=\"n\">y</span> <span class=\"k\">if</span> <span class=\"n\">tag</span><span class=\"o\">.</span><span class=\"n\">isalpha</span><span class=\"p\">()})</span>\n</pre></div>\n\n</div>\n</div>\n</div>\n\n</div>\n<div class=\"cell border-box-sizing code_cell rendered\">\n<div class=\"input\">\n<div class=\"prompt input_prompt\">In&nbsp;[16]:</div>\n<div class=\"inner_cell\">\n    <div class=\"input_area\">\n<div class=\" highlight hl-ipython3\"><pre><span class=\"c\"># common bigrams</span>\n<span class=\"n\">bigs</span> <span class=\"o\">=</span> <span class=\"n\">defaultdict</span><span class=\"p\">(</span><span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"n\">defaultdict</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">))</span>\n\n<span class=\"k\">for</span> <span class=\"n\">y</span> <span class=\"ow\">in</span> <span class=\"n\">Y_</span><span class=\"p\">:</span>\n    <span class=\"k\">for</span> <span class=\"n\">t1</span><span class=\"p\">,</span> <span class=\"n\">t2</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">[:</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">y</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:]):</span>\n        <span class=\"n\">bigs</span><span class=\"p\">[</span><span class=\"n\">t1</span><span class=\"p\">][</span><span class=\"n\">t2</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n<span class=\"n\">bigd</span> <span class=\"o\">=</span> <span class=\"n\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">bigs</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">fillna</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)[</span><span class=\"n\">tags</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">ix</span><span class=\"p\">[</span><span class=\"n\">tags</span><span class=\"p\">]</span>\n\n<span class=\"n\">wcts_all</span> <span class=\"o\">=</span> <span class=\"n\">defaultdict</span><span class=\"p\">(</span><span class=\"n\">Counter</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">xi</span><span class=\"p\">,</span> <span class=\"n\">yi</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">Y_</span><span class=\"p\">):</span>\n    <span class=\"k\">for</span> <span class=\"n\">xw</span><span class=\"p\">,</span> <span class=\"n\">yw</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">xi</span><span class=\"p\">,</span> <span class=\"n\">yi</span><span class=\"p\">):</span>\n        <span class=\"n\">wcts_all</span><span class=\"p\">[</span><span class=\"n\">xw</span><span class=\"p\">][</span><span class=\"n\">yw</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n</pre></div>\n\n</div>\n</div>\n</div>\n\n</div>\n<div class=\"cell border-box-sizing code_cell rendered\">\n<div class=\"input\">\n<div class=\"prompt input_prompt\">In&nbsp;[17]:</div>\n<div class=\"inner_cell\">\n    <div class=\"input_area\">\n<div class=\" highlight hl-ipython3\"><pre><span class=\"c\"># Split training and testing examples</span>\n<span class=\"n\">Zs</span> <span class=\"o\">=</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">Xa</span><span class=\"p\">,</span> <span class=\"n\">Ya</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">Zs</span><span class=\"p\">),</span> <span class=\"s\">&#39;examples&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">Zstrn</span> <span class=\"o\">=</span> <span class=\"n\">Zs</span><span class=\"p\">[:</span><span class=\"mi\">100</span><span class=\"p\">]</span>\n<span class=\"n\">Ztst</span> <span class=\"o\">=</span> <span class=\"n\">Zs</span><span class=\"p\">[</span><span class=\"mi\">100</span><span class=\"p\">:</span><span class=\"mi\">201</span><span class=\"p\">]</span>  <span class=\"c\"># it&#39;s too slow right now,</span>\n                    <span class=\"c\"># so 100 examples in each set should do</span>\n</pre></div>\n\n</div>\n</div>\n</div>\n\n<div class=\"output_wrapper\">\n<div class=\"output\">\n\n\n<div class=\"output_area\"><div class=\"prompt\"></div>\n<div class=\"output_subarea output_stream output_stdout output_text\">\n<pre>8936 examples\n</pre>\n</div>\n</div>\n\n</div>\n</div>\n\n</div>\n<div class=\"cell border-box-sizing code_cell rendered\">\n<div class=\"input\">\n<div class=\"prompt input_prompt\">In&nbsp;[18]:</div>\n<div class=\"inner_cell\">\n    <div class=\"input_area\">\n<div class=\" highlight hl-ipython3\"><pre><span class=\"k\">def</span> <span class=\"nf\">hamming</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">ypred</span><span class=\"p\">,</span> <span class=\"n\">norm</span><span class=\"o\">=</span><span class=\"k\">True</span><span class=\"p\">):</span>\n    <span class=\"n\">sm</span> <span class=\"o\">=</span> <span class=\"nb\">sum</span><span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"o\">!=</span> <span class=\"n\">b</span> <span class=\"k\">for</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">ypred</span><span class=\"p\">))</span>\n    <span class=\"k\">return</span> <span class=\"n\">sm</span> <span class=\"o\">/</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"n\">norm</span> <span class=\"k\">else</span> <span class=\"n\">sm</span>\n</pre></div>\n\n</div>\n</div>\n</div>\n\n</div>\n<div class=\"cell border-box-sizing code_cell rendered\">\n<div class=\"input\">\n<div class=\"prompt input_prompt\">In&nbsp;[21]:</div>\n<div class=\"inner_cell\">\n    <div class=\"input_area\">\n<div class=\" highlight hl-ipython3\"><pre><span class=\"o\">%%</span><span class=\"k\">time</span>\nfs0 = crf.fs\nws0 = rand_weights(fs, seed=0)\ngf0 = G(fs=fs0, tags=sorted([START, END] + tags),\n        xbar=EasyList([&#39;&#39;]), ws=ws0)\n\nhams0 = [\n    hamming(y.aug[1:-2], predict(gf=gf0._replace(xbar=x))[0][1:-2])\n    for x, y in Ztst[:]]\nprint(&#39;Initial error rate with random weights: {:.2%}&#39;\n      .format(np.mean(hams0)))\n</pre></div>\n\n</div>\n</div>\n</div>\n\n<div class=\"output_wrapper\">\n<div class=\"output\">\n\n\n<div class=\"output_area\"><div class=\"prompt\"></div>\n<div class=\"output_subarea output_stream output_stdout output_text\">\n<pre>Initial error rate with random weights: 77.69%\nCPU times: user 1min 46s, sys: 277 ms, total: 1min 46s\nWall time: 1min 48s\n</pre>\n</div>\n</div>\n\n</div>\n</div>\n\n</div>\n<div class=\"cell border-box-sizing text_cell rendered\">\n<div class=\"prompt input_prompt\">\n</div>\n<div class=\"inner_cell\">\n<div class=\"text_cell_render border-box-sizing rendered_html\">\n<p>This training takes forever...not recommended</p>\n\n<pre><code>%time ws_trn = train(Zstrn[:], gf, ws1e, maxiter=100, tol=.0005, sec=None, seed=3)</code></pre>\n\n</div>\n</div>\n</div>\n<div class=\"cell border-box-sizing code_cell rendered\">\n<div class=\"input\">\n<div class=\"prompt input_prompt\">In&nbsp;[22]:</div>\n<div class=\"inner_cell\">\n    <div class=\"input_area\">\n<div class=\" highlight hl-ipython3\"><pre><span class=\"n\">ws_trn</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s\">&#39;cap_nnp&#39;</span><span class=\"p\">:</span> <span class=\"mf\">5.42</span><span class=\"p\">,</span> <span class=\"s\">&#39;dig_cd&#39;</span><span class=\"p\">:</span> <span class=\"mf\">6.2</span><span class=\"p\">,</span> <span class=\"s\">&#39;dt_in&#39;</span><span class=\"p\">:</span> <span class=\"mf\">3.26</span><span class=\"p\">,</span>\n <span class=\"s\">&#39;fst_dt&#39;</span><span class=\"p\">:</span> <span class=\"mf\">4.44</span><span class=\"p\">,</span> <span class=\"s\">&#39;fst_nnp&#39;</span><span class=\"p\">:</span> <span class=\"mf\">1.49</span><span class=\"p\">,</span> <span class=\"s\">&#39;last_nn&#39;</span><span class=\"p\">:</span> <span class=\"mf\">7.34</span><span class=\"p\">,</span>\n <span class=\"s\">&#39;post_mr&#39;</span><span class=\"p\">:</span> <span class=\"mf\">6.68</span><span class=\"p\">,</span> <span class=\"s\">&#39;wd_a&#39;</span><span class=\"p\">:</span> <span class=\"mf\">10.17</span><span class=\"p\">,</span> <span class=\"s\">&#39;wd_and&#39;</span><span class=\"p\">:</span> <span class=\"mf\">10.64</span><span class=\"p\">,</span>\n <span class=\"s\">&#39;wd_for&#39;</span><span class=\"p\">:</span> <span class=\"mf\">10.51</span><span class=\"p\">,</span> <span class=\"s\">&#39;wd_in&#39;</span><span class=\"p\">:</span> <span class=\"mf\">10.50</span><span class=\"p\">,</span> <span class=\"s\">&#39;wd_of&#39;</span><span class=\"p\">:</span> <span class=\"mf\">10.64</span><span class=\"p\">,</span>\n <span class=\"s\">&#39;wd_the&#39;</span><span class=\"p\">:</span> <span class=\"mf\">12.9</span><span class=\"p\">,</span> <span class=\"s\">&#39;wd_to&#39;</span><span class=\"p\">:</span> <span class=\"mf\">11.18</span><span class=\"p\">}</span>\n</pre></div>\n\n</div>\n</div>\n</div>\n\n</div>\n<div class=\"cell border-box-sizing code_cell rendered\">\n<div class=\"input\">\n<div class=\"prompt input_prompt\">In&nbsp;[23]:</div>\n<div class=\"inner_cell\">\n    <div class=\"input_area\">\n<div class=\" highlight hl-ipython3\"><pre><span class=\"o\">%%</span><span class=\"k\">time</span>\ngf_trn = gf0._replace(ws=ws_trn)\nhams_trn = [hamming(y.aug[1:-2],\n                    predict(gf=gf_trn._replace(xbar=x))[0][1:-2])\n            for x, y in Ztst[:]]\nprint(&#39;Error rate after training weights: {:.2%}&#39;\n      .format(np.mean(hams_trn)))\n</pre></div>\n\n</div>\n</div>\n</div>\n\n<div class=\"output_wrapper\">\n<div class=\"output\">\n\n\n<div class=\"output_area\"><div class=\"prompt\"></div>\n<div class=\"output_subarea output_stream output_stdout output_text\">\n<pre>Error rate after training weights: 64.34%\nCPU times: user 41.2 s, sys: 104 ms, total: 41.3 s\nWall time: 41.9 s\n</pre>\n</div>\n</div>\n\n</div>\n</div>\n\n</div>\n<div class=\"cell border-box-sizing text_cell rendered\">\n<div class=\"prompt input_prompt\">\n</div>\n<div class=\"inner_cell\">\n<div class=\"text_cell_render border-box-sizing rendered_html\">\n<p>The 78% to 64% error rate decrease seems to be a decent improvement, considering the small number of feature functions.</p>\n\n</div>\n</div>\n</div>\n<div class=\"cell border-box-sizing code_cell rendered\">\n<div class=\"input\">\n<div class=\"prompt input_prompt\">In&nbsp;[24]:</div>\n<div class=\"inner_cell\">\n    <div class=\"input_area\">\n<div class=\" highlight hl-ipython3\"><pre><span class=\"o\">!</span>osascript -e beep\n</pre></div>\n\n</div>\n</div>\n</div>\n\n</div>",
  "author": {
    "name": ""
  },
  "category": "",
  "summary": "This is less of a blog post, and more of my annotated progress in implementing CRF's based on Charles Elkan's very excellent video and pdf tutorials to get a better understanding of log-linear models. This notebook contains a bunch of the core functions, though there are also some in crf.py. The full repo is here. In&nbsp;[1]: import warnings; warnings.filterwarnings(&#39;ignore&#39;) from py3k_imports import * from project_imports3 import * pu.psettings(pd) pd.options.display.width = 150 # 200 %matplotlib inline In&nbsp;[2]: %%javascript IPython.keyboard_manager.command_shortcuts.add_shortcut(&#39;Ctrl-k&#39;,&#39;ipython.move-selected-cell-up&#39;) IPython.keyboard_manager.command_shortcuts.add_shortcut(&#39;Ctrl-j&#39;,&#39;ipython.move-selected-cell-down&#39;) IPython.keyboard_manager.command_shortcuts.add_shortcut(&#39;Shift-m&#39;,&#39;ipython.merge-selected-cell-with-cell-after&#39;) In&nbsp;[3]: from collections import defaultdict, Counter import inspect from typing import List, Dict, Tuple Df = Dict Y = str if sys.version_info.major &gt; 2: unicode = str In&nbsp;[4]: import utils; from utils import * import crf; from crf import * FeatUtils.bookend = False In&nbsp;[5]: Series.__matmul__ = Series.dot DataFrame.__matmul__ = DataFrame.dot from matmul_new import test_matmul test_matmul() Probabilistic model&#182;Given a sequence $\\bar x$, the linear chain CRF model gives the probability of a corresponding sequence $\\bar y$ as follows, for feature functions $F_j$, where each $F_j$ is a sum of a corresponding lower level feature function $f_j$ over every element of the sequence: $$ p(\\bar y | \\bar x;w) = \\frac {1} {Z(\\bar x, w)} \\exp \\sum_j w_j F_j(\\bar x, \\bar y) $$$$ F_j(\\bar x, \\bar y) = \\sum_{i=1}^n f_j(y_{i-1}, y_i, \\bar x, i) $$$Z(\\bar x, w)$ is the partition function, that sums the probabilities of all possible sequences to normalize it to a proper probability: $$ Z(x, w) = \\sum_{y' \\in Y} \\exp \\sum_{j=1} ^J w_j F_j (x, y'). $$This way of summing feature functions along a sequence can be seen as a way of extending logistic regression from a single (or multiclass) output to a model that outputs sequences. Argmax&#182;Computing the most likely sequence $\\text{argmax}_{\\bar y} p(\\bar y | \\bar x;w)$ naively involves iterating through the exponentially large space of every possible sequence that can be built from the tag vocabulary, rendering the computation impractical for even medium sized tag-spaces. Since the scoring function only depends on 2 (consecutive in this situation) elements of $\\bar y$, argmax can be computed in polynomial time with a table ($\\in ℝ^{|Y| \\times |y|}$). $U_{ij}$ is the highest score for sequences ending in $y_i$ at position $y_j$. It is useful to compute the most likely sequence in terms of $g_i$, which sums over all lower level functions $f_j$ evaluated at position $i$: $$ g_i(y_ {i-1}, y_i) = \\sum^J_{j=1} w_j f_j (y_ {i-1}, y_i, \\bar x, i) $$ Generate maximum score matrix U&#182;$$U(k, v) = \\max_u [U(k-1, u) + g_k(u,v)]$$$$U(1, vec) = \\max_{y_0} [U(0, y_0) + g_k(y_0,vec)]$$This implementation is pretty slow, because every low level feature function is evaluated at each $i, y_{i-1}$ and $y_i$, for each feature function $f_j$ ($\\mathcal{O}(m^2 n J )$ where $J=$ number of feature functions, $m=$ number of possible tags and $n=$ length of sequence $\\bar y$). Also, using python functions in the inner-loop is slow. This could be significantly reduced if the feature functions could be arranged such that they would only be evaluated for the relevant combinations of $x_i, y_{i-1}$ and $y_i$. I started arranging them in this way in dependency.py, but the complexity got a bit too unwieldy for a toy educational project. In&nbsp;[6]: def init_score(tags, tag=START, sort=True): &quot;Base case for recurrent score calculation U&quot; i = Series(0, index=sorted(tags) if sort else tags) i.loc[tag] = 1 return i def get_u(k: int=None, gf: &quot;int -&gt; (Y, Y&#39;) -&gt; float&quot;=None, collect=True, verbose=False) -&gt; &#39;([max score], [max ix])&#39;: &quot;&quot;&quot;Recursively build up g_i matrices bottom up, adding y-1 score to get max y score. Returns score. - k is in terms of y vector, which is augmented with beginning and end tags - also returns indices yprev that maximize y at each level to help reconstruct tmost likely sequence &quot;&quot;&quot; pt = testprint(verbose) imx = len(gf.xbar) + 1 if k is None: pt(gf.xbar) return get_u(imx, gf=gf, collect=1, verbose=verbose) if k == 0: return [init_score(gf.tags, START)], [] uprevs, ixprevs = get_u(k - 1, gf=gf, collect=False, verbose=verbose) gmat = getmat(gf(k)) uadd = gmat.add(uprevs[-1], axis=&#39;index&#39;) if k &gt; 0: # START tag only possible at beginning. # There should be a better way of imposing these constraints uadd[START] = -1 if k &lt; imx: uadd[END] = -1 # END only possible at the...end if k == 1: idxmax = Series(START, index=gf.tags) # uadd.ix[START].idxmax() else: idxmax = uadd.idxmax() pt(&#39;idxmax:&#39;, idxmax, sep=&#39;\\n&#39;) retu, reti = uprevs + [uadd.max()], ixprevs + [idxmax] if not collect: return retu, reti return s2df(retu), s2df(reti) def mlp(idxs, i: int=None, tagsrev: List[Y]=[END]) -&gt; List[Y]: &quot;Most likely sequence&quot; if i is None: return mlp(idxs, i=int(idxs.columns[-1]), tagsrev=tagsrev) elif i &lt; 0: return tagsrev[::-1] tag = tagsrev[-1] yprev = idxs.loc[tag, i] return mlp(idxs, i=i - 1, tagsrev=tagsrev + [yprev]) In&nbsp;[7]: def predict(xbar=None, fs=None, tags=None, ws=None, gf=None): &quot;Return argmax_y with corresponding score&quot; if gf is None: ws = ws or mkwts1(fs) gf = G(ws=ws, fs=fs, tags=tags, xbar=xbar) u, i = get_u(gf=gf, collect=True, verbose=0) path = mlp(i) return path, u.ix[END].iloc[-1] # path2, score2 = predict(xbar=EasyList([&#39;wd1&#39;, &#39;pre-end&#39;, &#39;whatevs&#39;]), # fs=no_test_getu3.fs, # tags=[START, &#39;TAG1&#39;, &#39;PENULTAG&#39;, END]) In&nbsp;[8]: import test; reload(test); from test import * no_test_getu1(get_u, mlp) no_test_getu2(get_u, mlp) no_test_getu3(get_u, mlp) test_corp() Gradient&#182;$$\\frac{\\partial}{\\partial w_j} \\log p(y | x;w) = F_j (x, y) - \\frac1 {Z(x, w)} \\sum_{y'} F_j (x, y') [\\exp \\sum_{j'} w_{j'} F_{j'} (x, y')]$$$$= F_j (x, y) - E_{y' \\sim p(y | x;w) } [F_j(x,y')]$$Forward-backward algorithm&#182; Partition function $Z(\\bar x, w) = \\sum_{\\bar y} \\exp \\sum _{j=1} ^ J w_j F_j (\\bar x, \\bar y) $ can be intractible if calculated naively (similar to argmax); forward-backward vectors can make it easier to compute $$\\alpha (k + 1,v) = \\sum_u \\alpha (k,u)[\\exp g_{k+1}(u,v)] \\in ℝ^m$$$$\\alpha (0,y) = I(y=START)$$$$\\beta (u, k) = \\sum_v [\\exp g_{k+1} (u, v)] \\beta(v, k+1) $$$$\\beta (u, n+1) = I(u= END) $$Compute partition function $Z$ from either forward or backward vectors $$ Z(\\bar x, w) = \\beta(START, 0) $$$$ Z(\\bar x, w) = \\alpha(n+1, END) $$[It seems there could be an error in the notes, which state that $Z(\\bar x, w) = \\sum_v \\alpha(n, v) $. If this is the case, $Z$ calculated with $\\alpha$ will never get a contribution from $g_{n+1}$, while $Z$ calculated with $\\beta$ will in the $\\beta(u, n)$ step.] Check correctness of forward and backward vectors. $ Z(\\bar x, w) = \\beta(START, 0) = \\alpha(n+1, END) $ For all positions $k=0...n+1$, $\\sum_u \\alpha(k, u) \\beta(u, k) = Z(\\bar x, w)$ In&nbsp;[9]: def mk_asum(gf, vb=False): n = len(gf.xbar) tags = gf.tags p = testprint(vb) @memoize def get_asum(knext=None): if knext is None: # The first use of the forward vectors is to write return get_asum(n+1) if knext &lt; 0: raise ValueError(&#39;k ({}) cannot be negative&#39;.format(k)) if knext == 0: return init_score(tags, tag=START) k = knext - 1 gnext = gf(knext).mat ak = get_asum(k) if vb: names = &#39;exp[g{k1}] g{k1} a_{k}&#39;.format(k1=knext, k=k).split() p(side_by_side(np.exp(gnext), gnext, ak, names=names)) # expsum = Series([sum([ak[u] * np.exp(gnext.loc[u, v]) # for u in tags]) for v in tags], index=tags) # vectorizing is much faster: expsum = np.exp(gnext).mul(ak, axis=0).sum(axis=0) return expsum return get_asum #(knext, vb=vb) def mk_bsum(gf, vb=False): p = testprint(vb) n = len(gf.xbar) tags = gf.tags @memoize def get_bsum(k=None): if k is None: return get_bsum(0) if k &gt; n + 1: raise ValueError(&#39;{} &gt; length of x {} + 1&#39;.format(k, n)) if k == n + 1: return init_score(gf.tags, tag=END) gnext = gf(k + 1).mat bnext = get_bsum(k + 1) if vb: names = [&#39;exp[g{}]&#39;.format(k+1),&#39;g{}&#39;.format(k+1), &#39;b_{}&#39;.format(k+1)] p(side_by_side(np.exp(gnext), gnext, bnext, names=names)) # expsum = Series([sum([np.exp(gnext.loc[u, v]) * bnext[v] # for v in tags]) for u in tags], index=tags) expsum = np.exp(gnext).mul(bnext, axis=1).sum(axis=1) return expsum return get_bsum In&nbsp;[10]: def test_fwd_bkwd(): tgs = [START, &#39;TAG1&#39;, END] x = EasyList([&#39;wd1&#39;, &#39;pre-end&#39;]) fs = { # &#39;eq_wd1&#39;: mk_word_tag(&#39;wd1&#39;, &#39;TAG1&#39;), &#39;pre_endx&#39;: lambda yp, y, x, i: ((x[i - 1] == &#39;pre-end&#39;) and (y == END)) } ws = z.merge(mkwts1(fs), {&#39;pre_endx&#39;: 1}) gf = G(fs=fs, tags=tgs, xbar=x, ws=ws) amkr = mk_asum(gf) bmkr = mk_bsum(gf) za = amkr().END zb = bmkr().START assert za == zb for k in range(len(x) + 2): assert amkr(k) @ bmkr(k) == za return za test_fwd_bkwd() Out[10]: 24.464536456131405 Calculate expected value of feature function&#182;Weighted by conditional probability of $y'$ given $x$ $$ E_{\\bar y \\sim p(\\bar y | \\bar x;w) } [F_j(\\bar x, \\bar y)] = \\sum _{i=1} ^n \\sum _{y_{i-1}} \\sum _{y_i} f_j(y_{i-1}, y_i, \\bar x, i) \\frac {\\alpha (i-1, y_{i-1}) [\\exp g_i(y_{i-1}, y_i)] \\beta(y_i, i) } {Z(\\bar x, w)} $$ In&nbsp;[11]: def sdot(s1: Series, s2: Series): &quot;&quot;&quot;It&#39;s quite a bit faster to get the dot product of raw numpy arrays rather than of the Series&quot;&quot;&quot; d1, d2 = s1.values[:, None], s2.values[:, None] return d1 @ d2.T In&nbsp;[12]: def expectation2(gf, fj): &quot;Faster matrix multiplication version&quot; tags = gf.tags n = len(gf.xbar) ss = 0 ss2 = 0 asummer = mk_asum(gf) bsummer = mk_bsum(gf) za = partition(asummer=asummer) global α, β, alpha_vec, beta_vec, gfix, smat def sumi(i): gfix = np.exp(gf(i).mat.values) alpha_vec = asummer(i - 1) beta_vec = bsummer(i) fmat = np.array([[fj(yprev, y, gf.xbar, i) for y in tags] for yprev in tags]) smat = sdot(alpha_vec, beta_vec) * gfix * fmat return smat.sum() #.sum() return sum([sumi(i) for i in range(1, n + 2)]) / za def expectation_(gf, fj): &quot;Slow, looping version&quot; n = len(gf.xbar) ss = 0 za = get_asum(gf).END for i in range(1, n + 2): gfix = np.exp(gf(i).mat) alpha_vec = get_asum(gf, i - 1) beta_vec = get_bsum(gf, i) ss += sum( [fj(yprev, y, gf.xbar, i) * alpha_vec[yprev] * gfix.loc[yprev, y] * beta_vec[y] for yprev in tgs for y in tgs]) return ss / za Partial derivative&#182;Probability function&#182; In&nbsp;[13]: def partial_d(gf, fj, y, Fj=None) -&gt; float: f = fj if callable(fj) else gf.fs[fj] if Fj is None: Fj = FeatUtils.mk_sum(f) #ex1 = expectation(gf, f) ex2 = expectation2(gf, f) #assert np.allclose(ex1, ex2) return Fj(gf.xbar, y) - ex2 def prob(gf, y, norm=True): Fs = z.valmap(FeatUtils.mk_sum, gf.fs) p = np.exp(sum([Fj(gf.xbar, y) * gf.ws[fname] for fname, Fj in Fs.items()])) if not norm: return p za = partition(gf=gf) return p / za def partition(gf=None, asummer=None): assert asummer or gf, &#39;Supply at least one argument&#39; asummer = asummer or mk_asum(gf) return asummer().END Test Partial&#182; Train&#182; In&nbsp;[14]: λ = 1 def train_(zs: List[Tuple[EasyList, AugmentY]], fjid=&#39;ly_VBZ&#39;, fs=None, ws=None, vb=True, tgs=None, rand=None): fj = fs[fjid] Fj = FeatUtils.mk_sum(fj) pt = testprint(vb) for x, y in zs: gf_ = G(fs=fs, tags=tgs, xbar=x, ws=ws) if not Fj(x, y): # TODO: is this always right? continue pder = partial_d(gf_, fj, y, Fj=Fj) wj0 = ws[fjid] ws[fjid] += λ * pder pt(&#39;wj: {} -&gt; {}&#39;.format(wj0, ws[fjid])) pt(&#39;pder: {:.2f}&#39;.format(pder), Fj(x, y)) return ws def train_j(zs: List[Tuple[EasyList, AugmentY]], fjid=&#39;ly_VBZ&#39;, fs=None, ws=None, tol=.01, maxiter=10,vb=True, tgs=None, sec=None): ws1 = ws pt = testprint(vb) st = time.time() for i in count(1): nr.shuffle(zs) pt(&#39;Iter&#39;, i) wj1 = ws1[fjid] ws2 = train_(zs, fjid=fjid, fs=fs, ws=ws1, vb=vb, tgs=tgs) wj2 = ws2[fjid] if abs((wj2 - wj1) / wj1) &lt; tol \\ or (i &gt;= maxiter) \\ or (sec is not None and (time.time() - st &gt; sec)): return ws, i ws1 = ws2 def train(zs_, gf, ws=None, tol=.001, maxiter=10, vb=False, sec=None, seed=1): wst = (ws or gf.ws).copy() nr.seed(seed) zs = zs_.copy() for fname, f in gf.fs.items(): itime = time.time() wst, i = train_j(zs, fjid=fname, fs=gf.fs, ws=wst, tol=tol, maxiter=maxiter, vb=vb, tgs=gf.tags, sec=sec) print(fname, &#39;trained in&#39;, i, &#39;iters: {:.2f} ({:.2f}s)&#39; .format(wst[fname], time.time() - itime)) sys.stdout.flush() return wst # %time ws1c = train(zs, gf, mkwts1(gf.fs, 1), maxiter=100, tol=.005) Evaluation&#182;Since I'm maximizing the log-likelihood during testing, that would seem a natural measure to evaluate improvement. I'm a bit suspicious about bugs in my implementation, so I'd like to evaluate Hamming distance between actual $y$ and the predicted sequence see how much the predictions improve. Load data&#182; In&nbsp;[15]: with open(&#39;data/pos.train.txt&#39;,&#39;r&#39;) as f: txt = f.read() sents = filter(None, [zip(*[e.split() for e in sent.splitlines()]) for sent in txt[:].split(&#39;\\n\\n&#39;)]) X = map(itg(0), sents) Y_ = map(itg(1), sents) Xa = map(EasyList, X) Ya = map(AugmentY, Y_) tags = sorted({tag for y in Y_ for tag in y if tag.isalpha()}) In&nbsp;[16]: # common bigrams bigs = defaultdict(lambda: defaultdict(int)) for y in Y_: for t1, t2 in zip(y[:-1], y[1:]): bigs[t1][t2] += 1 bigd = DataFrame(bigs).fillna(0)[tags].ix[tags] wcts_all = defaultdict(Counter) for xi, yi in zip(X, Y_): for xw, yw in zip(xi, yi): wcts_all[xw][yw] += 1 In&nbsp;[17]: # Split training and testing examples Zs = zip(Xa, Ya) print(len(Zs), &#39;examples&#39;) Zstrn = Zs[:100] Ztst = Zs[100:201] # it&#39;s too slow right now, # so 100 examples in each set should do 8936 examples In&nbsp;[18]: def hamming(y, ypred, norm=True): sm = sum(a != b for a, b in zip(y, ypred)) return sm / len(y) if norm else sm In&nbsp;[21]: %%time fs0 = crf.fs ws0 = rand_weights(fs, seed=0) gf0 = G(fs=fs0, tags=sorted([START, END] + tags), xbar=EasyList([&#39;&#39;]), ws=ws0) hams0 = [ hamming(y.aug[1:-2], predict(gf=gf0._replace(xbar=x))[0][1:-2]) for x, y in Ztst[:]] print(&#39;Initial error rate with random weights: {:.2%}&#39; .format(np.mean(hams0))) Initial error rate with random weights: 77.69% CPU times: user 1min 46s, sys: 277 ms, total: 1min 46s Wall time: 1min 48s This training takes forever...not recommended %time ws_trn = train(Zstrn[:], gf, ws1e, maxiter=100, tol=.0005, sec=None, seed=3) In&nbsp;[22]: ws_trn = {&#39;cap_nnp&#39;: 5.42, &#39;dig_cd&#39;: 6.2, &#39;dt_in&#39;: 3.26, &#39;fst_dt&#39;: 4.44, &#39;fst_nnp&#39;: 1.49, &#39;last_nn&#39;: 7.34, &#39;post_mr&#39;: 6.68, &#39;wd_a&#39;: 10.17, &#39;wd_and&#39;: 10.64, &#39;wd_for&#39;: 10.51, &#39;wd_in&#39;: 10.50, &#39;wd_of&#39;: 10.64, &#39;wd_the&#39;: 12.9, &#39;wd_to&#39;: 11.18} In&nbsp;[23]: %%time gf_trn = gf0._replace(ws=ws_trn) hams_trn = [hamming(y.aug[1:-2], predict(gf=gf_trn._replace(xbar=x))[0][1:-2]) for x, y in Ztst[:]] print(&#39;Error rate after training weights: {:.2%}&#39; .format(np.mean(hams_trn))) Error rate after training weights: 64.34% CPU times: user 41.2 s, sys: 104 ms, total: 41.3 s Wall time: 41.9 s The 78% to 64% error rate decrease seems to be a decent improvement, considering the small number of feature functions. In&nbsp;[24]: !osascript -e beep"
}