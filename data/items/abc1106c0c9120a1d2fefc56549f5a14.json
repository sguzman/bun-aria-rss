{
  "title": "SciPy 2011 Conference Highlights",
  "link": "",
  "published": "2011-07-20T00:00:00-07:00",
  "updated": "2011-07-20T00:00:00-07:00",
  "author": {
    "name": "Wes McKinney"
  },
  "id": "tag:wesmckinney.com,2011-07-20:/blog/scipy-2011-conference-highlights/",
  "summary": "<p><a title=\"SciPy 2011\" href=\"http://conference.scipy.org/scipy2011/\" target=\"_blank\">SciPy 2011</a> was a blast! Intense and fun but of course tiring due to burning the candle at both ends. I was delighted to see a lot of familiar faces after my first SciPy conference last year: the Enthought crew (<a title=\"Travis Oliphant\" href=\"http://twitter.com/#!/teoliphant\" target=\"_blank\">Travis Oliphant</a>, Eric Jones, et al), <a title=\"Peter Wang\" href=\"http://twitter.com/#!/pwang\" target=\"_blank\">Peter Wang</a> (<a title=\"Chaco\" href=\"http://code.enthought.com/chaco/\" target=\"_blank\">chaco</a>), <a title=\"Fernando Pérez\" href=\"http://fperez.org/\" target=\"_blank\">Fernando …</a></p>",
  "content": "<p><a title=\"SciPy 2011\" href=\"http://conference.scipy.org/scipy2011/\" target=\"_blank\">SciPy 2011</a> was a blast! Intense and fun but of course tiring due to burning the candle at both ends. I was delighted to see a lot of familiar faces after my first SciPy conference last year: the Enthought crew (<a title=\"Travis Oliphant\" href=\"http://twitter.com/#!/teoliphant\" target=\"_blank\">Travis Oliphant</a>, Eric Jones, et al), <a title=\"Peter Wang\" href=\"http://twitter.com/#!/pwang\" target=\"_blank\">Peter Wang</a> (<a title=\"Chaco\" href=\"http://code.enthought.com/chaco/\" target=\"_blank\">chaco</a>), <a title=\"Fernando Pérez\" href=\"http://fperez.org/\" target=\"_blank\">Fernando Pérez</a> and <a title=\"MinRK\" href=\"http://twitter.com/#!/minrk\" target=\"_blank\">MinRK / Min Ragan-Kelley</a> (of <a title=\"IPython\" href=\"http://ipython.org/\" target=\"_blank\">IPython</a> fame), my statsmodels collaborator <a title=\"Skipper Seabold\" href=\"http://twitter.com/#!/jseabold\" target=\"_blank\">Skipper Seabold</a>, <a title=\"Stefan van der Walt\" href=\"http://mentat.za.net/\" target=\"_blank\">Stefan van der Walt</a>, Josh Hemann, and too many others to mention. It was also great to finally meet a lot of other well-known SciPythonistas for the first time: <a title=\"Chris Fonnesbeck\" href=\"http://twitter.com/#!/fonnesbeck\" target=\"_blank\">Chris Fonnesbeck</a> (<a title=\"PyMC\" href=\"http://code.google.com/p/pymc/\" target=\"_blank\">PyMC</a>), <a title=\"John D. Cook\" href=\"http://twitter.com/#!/JohnDCook\" target=\"_blank\">John D. Cook</a>, <a title=\"Gaël Varoquaux\" href=\"http://gael-varoquaux.info/\" target=\"_blank\">Gaël Varoquaux</a> (<a title=\"scikit-learn\" href=\"http://scikit-learn.sourceforge.net/stable/\" target=\"_blank\">scikit-learn</a>, <a title=\"Mayavi\" href=\"http://code.enthought.com/projects/mayavi/\" target=\"_blank\">Mayavi</a>), and many others. A 2-day slate of talks seems too little to do justice to all the awesome stuff people are doing!</p>\n<p>Here's partial list of my favorite parts of the conference and general thoughts (in no particular order). Since there were two talk tracks running in parallel I unfortunately could only see half the talks; fortunately videos should be soon posted. I'll return to this post and add video links once they're available. I'll write a separate post about our statsmodels sprint!</p>\n<h4><strong>Fernando Pérez's <a title=\"IPython\" href=\"http://ipython.org\" target=\"_blank\">IPython</a> talk: <a title=\"IPython slides\" href=\"http://fperez.org/talks/1107_ipython_scipy.pdf\" target=\"_blank\">Slides</a></strong></h4>\n<p>I always tell people that IPython is one of scientific Python's killer apps. For proof, watch the video of Fernando's talk once it's up. Chris Fonnesbeck wrote a great <a title=\"New in IPython\" href=\"http://stronginference.com/weblog/2011/7/15/innovations-in-ipython.html\" target=\"_blank\">blog article</a> on the new features in IPython. In essence they've taken an already innovative and hugely productivity enhancing tool and rearchitected it to be a) much more easily embedded (see the rich Qt console and the web interface) and b) an extremely powerful parallel computing environment. Truly inspiring work from MinRK, Fernando, Brian Granger, and crew. My hat's off to you guys.</p>\n<p>On my end I started using the rich Qt console (ipython-qtconsole) for interactive work and demos a few months ago. Having inline matplotlib plots while doing tech demos is a huge, huge win!</p>\n<p><img alt=\"IPython Rich Qt Console\" src=\"http://wesmckinney.com/blog/images/ipython-qtconsole.png\"></p>\n<h4><strong>Peter Wang's talk on <a href=\"http://metagraph.org/\" title=\"Metagraph\">Metagraph</a>: <a title=\"Metagraph Slides\" href=\"http://metagraph.org/metagraph_scipy2011.pdf\" target=\"_blank\">Slides</a></strong></h4>\n<p>Fortunately Peter's slides have notes on them which helps to understand the slides in more detail. He's working to solve some really major problems here at the core of how we do computation on arrays. The notes do far better justice to the talk, but the nutshell is that he's building a loop-fusing (a.k.a. \"stream fusion\") compiler for expressing array computations and processing streaming data. This is extremely exciting as for the longest time this has been a watershed between NumPy-based tools and work being done in the APL/J/K family and functional languages like Haskell. Especially for big data / streaming data applications, a \"fusing\" compiler / VM will eliminate loops and enable the program to make only single passes over the data as opposed to multiple passes as commonly happens now. This is related to Python projects like <a href=\"http://code.google.com/p/numexpr/\" title=\"numexpr\">numexpr</a> and <a href=\"http://deeplearning.net/software/theano/\" title=\"Theano\">Theano</a> (which are also worth checking out).</p>\n<p>The extent of what's possible with these kinds of ideas is a bit hard to grok but I'm very much looking forward to seeing how this project develops over the coming 6 months. As he says <strong>\"The goal is to make scientiﬁc computing Pythonic\"</strong>. Bringing the full power of array-based and functional languages at the core computational level with a very Pythonic interface could have very serious impact on the direction of scientific computing.</p>\n<h4><strong>Gaël Varoquaux's Neuroscience / scikit-learn Talk: <a title=\"Scikit-learn Slides\" href=\"http://www.slideshare.net/GaelVaroquaux/python-for-brain-mining-neuroscience-with-state-of-the-art-machine-learning-and-data-visualization\" target=\"_blank\">Slides</a></strong></h4>\n<p>If you've ever tried making a presentation in LaTeX, it should be clear that Gaël is at one with the beamer gods. That is one swanky looking deck of slides; it should come as no shock that it's had nearly 30k views on SlideShare! Aesthetics aside, I'm excited to see how much progress the <a title=\"scikit-learn\" href=\"http://scikit-learn.sourceforge.net/stable/\" target=\"_blank\">scikit-learn</a> folks have made on building a really excellent machine learning library. Now if only we can get that much muscle poured into <a href=\"http://statsmodels.sourceforge.net/\" title=\"statsmodels\">statsmodels</a>! I think generally machine learning is an optimal application area for the scientific Python stack and this talk shows why: solid algos, great data visualization, and excellent task / workflow / big data management tools (e.g. joblib).</p>\n<p>As an aside, Gaël's point that you \"<strong>cannot develop science and software separately</strong>\" is highly relevant to all data-driven fields of academic research. Far too often in academia, software development is viewed as a distant second to innovations in methodology. Faculty very rarely get tenure based on their contributions to research software, no matter how impactful. As a result, graduate students and faculty alike are left re-inventing the wheel more often that not, leading to a wasteland of essentially throwaway MATLAB or R code. I am hopeful that this pattern will someday change at a grand scale.</p>\n<h4>Matthew Goodman's Lightning Talk: <a title=\"Goodman Slides\" href=\"http://dl.dropbox.com/u/4525748/light-talk.pdf\" target=\"_blank\">Slides</a></h4></h4>\n<p></strong></p>\n<p>Here's another talk where having the video makes a big difference. MG gives a great list of indispensable scientific Python tools. I especially enjoyed the bit about IPython: \"If you are not using this tool, <strong>you are doing it wrong</strong>!\"</p>\n<h4><strong><a title=\"Hilary Mason\" href=\"http://twitter.com/#!/hmason\" target=\"_blank\">Hilary Mason</a>'s keynote talk </strong></h4>\n<p>Hilary gave a really fun keynote presentation about scientific computing and the work going on at <a href=\"http://bit.ly\" title=\"bit.ly\">bit.ly</a>. There's a lot more happening in URL-shortening-land than I thought! When asked about other technologies like R she said, <strong>\"There's no way we [bit.ly] will run R in production.\" </strong> Having experienced the misery associated with trying to run R in production in the quant finance world I must say that I definitely agree with that sentiment.</p>\n<h4><strong>Python in Finance Panel</strong></h4>\n<p>Travis Oliphant, <a href=\"http://twitter.com/#!/henrysward\" title=\"Henry Ward\" target=\"_blank\">Henry Ward</a> (CEO of <a href=\"http://secondsightco.com/\" title=\"Second Sight\" target=\"_blank\">Second Sight</a>), and I participated in a panel discussion moderated by Peter Wang. We were asked about our experiences using Python for financial applications as well as the institutional and technical challenges associated with using Python to build research and production systems within larger financial enterprises.</p>\n<p>It's a topic for another blog post, but I spoke at length about the role that Python plays in solving the so-called \"research-production gap\". That is, often financial firms do research in one language (R and MATLAB are quite popular) and do production implementations in another (Java/C++). I made the argument that, outside of low-latency high frequency trading, there are huge organizational benefits to building a one-language platform in Python. Also, Python may be the only programming language that is high-productivity and suitable for interactive research as well as building production-worthy, robust, and maintainable systems. More and more hedge funds, banks, and other financial firms are realizing this as time goes on.</p>\n<p>Travis spoke about many of the challenges of using Python within larger organizations like investment banks (something I've no experience with, but Enthought has done significant consulting work in that space). He had a number of other valuable perspectives— many of which are escaping me (will need to go back and watch the video!).</p>\n<p>Henry Ward, who is leading a startup effort to bring quantitative investment tools (such as portfolio optimization) to retail investors, spoke about his experiences building scalable backend systems in Python which also need to carry out extensive statistical computations and data manipulations, for example using <a href=\"http://pandas.sourceforge.net/\" title=\"pandas\" target=\"_blank\">pandas</a>. Since Python has great web application tools like Django, rich RPC protocols (e.g. Thrift), and scientific computing libraries, it's possible to build a pure Python architecture which can scale very naturally on the cloud. Very cool stuff. He also mentioned starting out the project in Ruby and concluded that <strong>\"Friends don't let friends do science in Ruby.\"</strong> Well put, sir.</p>\n<h4><strong>Other links of interest</strong></h4>\n<p>I'll add stuff here when I think of it (and when I get a chance to see videos for the talks I missed).</p>"
}