{
  "title": "How I Test Python",
  "link": "",
  "updated": "2013-09-15T00:00:00+00:00",
  "id": "https://mrocklin.github.io/blog/work/2013/09/15/How-I-Test-Python",
  "content": "<p>For my recent projects <a href=\"http://github.com/pytoolz/itertoolz/\"><code class=\"language-plaintext highlighter-rouge\">itertoolz</code></a> and <a href=\"http://github.com/pytoolz/functoolz\"><code class=\"language-plaintext highlighter-rouge\">functoolz</code></a> I’ve decided to simultaneously support Python 2.x and 3.x with a single codebase.  This is after a number of other projects (including SymPy) have demonstrated the feasibility of this approach.</p>\n\n<p>I thought I’d share how I now set up my testing environment for these projects as they include a few of my favorite utilities.</p>\n\n<h2 id=\"nosetests\"><code class=\"language-plaintext highlighter-rouge\">nosetests</code></h2>\n\n<p>First, <code class=\"language-plaintext highlighter-rouge\">nosetests</code>.  I think most readers of my blog (both of you) are familiar with <code class=\"language-plaintext highlighter-rouge\">nosetests</code> so I’ll be brief here.  Nosetests reads through my directory, finds all files named <code class=\"language-plaintext highlighter-rouge\">test_X.py</code>, runs all functions they contain named <code class=\"language-plaintext highlighter-rouge\">test_X()</code>, and reports all encountered assertion errors.</p>\n\n<p>It’s a simple solution that does exactly one thing and does it well.</p>\n\n<h2 id=\"conttest\"><code class=\"language-plaintext highlighter-rouge\">conttest</code></h2>\n\n<p>Lesser known is the <code class=\"language-plaintext highlighter-rouge\">conttest</code> tool, written by <a href=\"http://github.com/eigenhombre/\">@eigenhombre</a>.  <code class=\"language-plaintext highlighter-rouge\">conttest</code> allows me to run my tests every time I save a file in my workspace.  Actually it allows me to run any command on the command line each time my directory changes.  It can be composed with nosetests like so</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>conttest nosetests\n</code></pre></div></div>\n\n<p>I run this in a separate window and keep an eye on it to make sure I don’t introduce errors each time I save.  This only works with files for which the tests are cheap (as most good tests are).  Actually I usually use it as follows</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>conttest \"clear &amp;&amp; nosetests --with-doctest\"\n</code></pre></div></div>\n\n<p>I really respect conttest because it actually has nothing to do with testing.  It, like nosetests, does one and only one thing well without reaching for more.  It composes well with other tools, like nosetests, to great effect.</p>\n\n<p>Conttest is available on the PyPI and so is pip/easy_installable</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>pip install conttest\n</code></pre></div></div>\n\n<h2 id=\"conda\"><code class=\"language-plaintext highlighter-rouge\">conda</code></h2>\n\n<p>The combined Python 2.x 3.x (I’m calling this Python “twenty-three”) source code means that I need to simultaneously run two testing systems, one running 2.7 and one running 3.3.  I manage this with conda.  First, I create two environments; this only needs to be done once on each system</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>conda create -n py33 python=3.3 anaconda\nconda create -n py27 python=2.7 anaconda\n</code></pre></div></div>\n\n<p>This takes a while to set up but does a wonderful job creating two completely independent, self-consistent, and fully dependable virtual environments.  I can switch to either with</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>source activate py33  # Use Python 3.3\nsource activate py27  # Use Python 2.7\n</code></pre></div></div>\n\n<h2 id=\"all-together\">All Together</h2>\n\n<p>So when I start work I set up something like this</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code># Terminal 1\nsource activate py33\nconttest \"clear &amp;&amp; nosetests --with-doctest\"\n\n# Terminal 2\nsource activate py27\nconttest \"clear &amp;&amp; nosetests --with-doctest\"\n\n# Terminal 3\n# Do actual work\n</code></pre></div></div>"
}