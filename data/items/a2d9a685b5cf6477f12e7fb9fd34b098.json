{
  "title": "Using pandas on the MovieLens dataset",
  "link": "",
  "published": "2013-10-26T03:00:00-07:00",
  "updated": "2022-11-03T04:16:07-07:00",
  "author": {
    "name": "Greg Reda"
  },
  "id": "tag:www.gregreda.com,2013-10-26:/2013/10/26/using-pandas-on-the-movielens-dataset/",
  "summary": "<p><em>UPDATE: If you're interested in learning pandas from a SQL perspective and would prefer to watch a video, you can find video of my 2014 PyData NYC talk <a href=\"http://reda.io/sql2pandas\">here</a>.</em></p>\n<p><em>This is part three of a three part introduction to <a href=\"http://pandas.pydata.org\">pandas</a>, a Python library for data analysis. The tutorial is primarily â€¦</em></p>",
  "content": "<p><em>UPDATE: If you're interested in learning pandas from a SQL perspective and would prefer to watch a video, you can find video of my 2014 PyData NYC talk <a href=\"http://reda.io/sql2pandas\">here</a>.</em></p>\n<p><em>This is part three of a three part introduction to <a href=\"http://pandas.pydata.org\">pandas</a>, a Python library for data analysis. The tutorial is primarily geared towards SQL users, but is useful for anyone wanting to get started with the library.</em></p>\n<ul>\n<li><a href=\"/2013/10/26/intro-to-pandas-data-structures/\">Part 1: Intro to pandas data structures</a>, covers the basics of the library's two main data structures - Series and DataFrames.</li>\n<li><a href=\"/2013/10/26/working-with-pandas-dataframes/\">Part 2: Working with DataFrames</a>, dives a bit deeper into the functionality of DataFrames. It shows how to inspect, select, filter, merge, combine, and group your data.</li>\n<li><a href=\"/2013/10/26/using-pandas-on-the-movielens-dataset/\">Part 3: Using pandas with the MovieLens dataset</a>, applies the learnings of the first two parts in order to answer a few basic analysis questions about the MovieLens ratings data.</li>\n</ul>\n<h2>Using pandas on the MovieLens dataset</h2>\n<p>To show pandas in a more \"applied\" sense, let's use it to answer some questions about the <a href=\"https://grouplens.org/datasets/movielens/\">MovieLens</a> dataset. Recall that we've already read our data into DataFrames and merged it.</p>\n<div class=\"highlight\"><pre><span></span><code><span class=\"c1\"># pass in column names for each CSV</span>\n<span class=\"n\">u_cols</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;user_id&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;age&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;sex&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;occupation&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;zip_code&#39;</span><span class=\"p\">]</span>\n<span class=\"n\">users</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">read_csv</span><span class=\"p\">(</span><span class=\"s1\">&#39;ml-100k/u.user&#39;</span><span class=\"p\">,</span> <span class=\"n\">sep</span><span class=\"o\">=</span><span class=\"s1\">&#39;|&#39;</span><span class=\"p\">,</span> <span class=\"n\">names</span><span class=\"o\">=</span><span class=\"n\">u_cols</span><span class=\"p\">,</span>\n                    <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"s1\">&#39;latin-1&#39;</span><span class=\"p\">)</span>\n\n<span class=\"n\">r_cols</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;user_id&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;movie_id&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;rating&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;unix_timestamp&#39;</span><span class=\"p\">]</span>\n<span class=\"n\">ratings</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">read_csv</span><span class=\"p\">(</span><span class=\"s1\">&#39;ml-100k/u.data&#39;</span><span class=\"p\">,</span> <span class=\"n\">sep</span><span class=\"o\">=</span><span class=\"s1\">&#39;</span><span class=\"se\">\\t</span><span class=\"s1\">&#39;</span><span class=\"p\">,</span> <span class=\"n\">names</span><span class=\"o\">=</span><span class=\"n\">r_cols</span><span class=\"p\">,</span>\n                      <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"s1\">&#39;latin-1&#39;</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># the movies file contains columns indicating the movie&#39;s genres</span>\n<span class=\"c1\"># let&#39;s only load the first five columns of the file with usecols</span>\n<span class=\"n\">m_cols</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;movie_id&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;title&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;release_date&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;video_release_date&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;imdb_url&#39;</span><span class=\"p\">]</span>\n<span class=\"n\">movies</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">read_csv</span><span class=\"p\">(</span><span class=\"s1\">&#39;ml-100k/u.item&#39;</span><span class=\"p\">,</span> <span class=\"n\">sep</span><span class=\"o\">=</span><span class=\"s1\">&#39;|&#39;</span><span class=\"p\">,</span> <span class=\"n\">names</span><span class=\"o\">=</span><span class=\"n\">m_cols</span><span class=\"p\">,</span> <span class=\"n\">usecols</span><span class=\"o\">=</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">),</span>\n                     <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"s1\">&#39;latin-1&#39;</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># create one merged DataFrame</span>\n<span class=\"n\">movie_ratings</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">merge</span><span class=\"p\">(</span><span class=\"n\">movies</span><span class=\"p\">,</span> <span class=\"n\">ratings</span><span class=\"p\">)</span>\n<span class=\"n\">lens</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">merge</span><span class=\"p\">(</span><span class=\"n\">movie_ratings</span><span class=\"p\">,</span> <span class=\"n\">users</span><span class=\"p\">)</span>\n</code></pre></div>\n\n<h3>What are the 25 most rated movies?</h3>\n<div class=\"highlight\"><pre><span></span><code><span class=\"n\">most_rated</span> <span class=\"o\">=</span> <span class=\"n\">lens</span><span class=\"o\">.</span><span class=\"n\">groupby</span><span class=\"p\">(</span><span class=\"s1\">&#39;title&#39;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">size</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">sort_values</span><span class=\"p\">(</span><span class=\"n\">ascending</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)[:</span><span class=\"mi\">25</span><span class=\"p\">]</span>\n<span class=\"n\">most_rated</span>\n</code></pre></div>\n\n<div class=\"highlight\"><pre><span></span><code><span class=\"go\">title</span>\n<span class=\"go\">Star Wars (1977)                             583</span>\n<span class=\"go\">Contact (1997)                               509</span>\n<span class=\"go\">Fargo (1996)                                 508</span>\n<span class=\"go\">Return of the Jedi (1983)                    507</span>\n<span class=\"go\">Liar Liar (1997)                             485</span>\n<span class=\"go\">English Patient, The (1996)                  481</span>\n<span class=\"go\">Scream (1996)                                478</span>\n<span class=\"go\">Toy Story (1995)                             452</span>\n<span class=\"go\">Air Force One (1997)                         431</span>\n<span class=\"go\">Independence Day (ID4) (1996)                429</span>\n<span class=\"go\">Raiders of the Lost Ark (1981)               420</span>\n<span class=\"go\">Godfather, The (1972)                        413</span>\n<span class=\"go\">Pulp Fiction (1994)                          394</span>\n<span class=\"go\">Twelve Monkeys (1995)                        392</span>\n<span class=\"go\">Silence of the Lambs, The (1991)             390</span>\n<span class=\"go\">Jerry Maguire (1996)                         384</span>\n<span class=\"go\">Chasing Amy (1997)                           379</span>\n<span class=\"go\">Rock, The (1996)                             378</span>\n<span class=\"go\">Empire Strikes Back, The (1980)              367</span>\n<span class=\"go\">Star Trek: First Contact (1996)              365</span>\n<span class=\"go\">Back to the Future (1985)                    350</span>\n<span class=\"go\">Titanic (1997)                               350</span>\n<span class=\"go\">Mission: Impossible (1996)                   344</span>\n<span class=\"go\">Fugitive, The (1993)                         336</span>\n<span class=\"go\">Indiana Jones and the Last Crusade (1989)    331</span>\n<span class=\"go\">dtype: int64</span>\n</code></pre></div>\n\n<p>There's a lot going on in the code above, but it's very idomatic. We're splitting the DataFrame into groups by movie title and applying the <code>size</code> method to get the count of records in each group. Then we order our results in descending order and limit the output to the top 25 using Python's slicing syntax.</p>\n<p>In SQL, this would be equivalent to:</p>\n<div class=\"highlight\"><pre><span></span><code><span class=\"k\">SELECT</span><span class=\"w\"> </span><span class=\"n\">title</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">count</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"k\">FROM</span><span class=\"w\"> </span><span class=\"n\">lens</span><span class=\"w\"></span>\n<span class=\"k\">GROUP</span><span class=\"w\"> </span><span class=\"k\">BY</span><span class=\"w\"> </span><span class=\"n\">title</span><span class=\"w\"></span>\n<span class=\"k\">ORDER</span><span class=\"w\"> </span><span class=\"k\">BY</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"k\">DESC</span><span class=\"w\"></span>\n<span class=\"k\">LIMIT</span><span class=\"w\"> </span><span class=\"mi\">25</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n\n<p>Alternatively, pandas has a nifty <code>value_counts</code> method - yes, this is simpler - the goal above was to show a basic <code>groupby</code> example.</p>\n<div class=\"highlight\"><pre><span></span><code><span class=\"n\">lens</span><span class=\"o\">.</span><span class=\"n\">title</span><span class=\"o\">.</span><span class=\"n\">value_counts</span><span class=\"p\">()[:</span><span class=\"mi\">25</span><span class=\"p\">]</span>\n</code></pre></div>\n\n<div class=\"highlight\"><pre><span></span><code><span class=\"go\">Star Wars (1977)                             583</span>\n<span class=\"go\">Contact (1997)                               509</span>\n<span class=\"go\">Fargo (1996)                                 508</span>\n<span class=\"go\">Return of the Jedi (1983)                    507</span>\n<span class=\"go\">Liar Liar (1997)                             485</span>\n<span class=\"go\">English Patient, The (1996)                  481</span>\n<span class=\"go\">Scream (1996)                                478</span>\n<span class=\"go\">Toy Story (1995)                             452</span>\n<span class=\"go\">Air Force One (1997)                         431</span>\n<span class=\"go\">Independence Day (ID4) (1996)                429</span>\n<span class=\"go\">Raiders of the Lost Ark (1981)               420</span>\n<span class=\"go\">Godfather, The (1972)                        413</span>\n<span class=\"go\">Pulp Fiction (1994)                          394</span>\n<span class=\"go\">Twelve Monkeys (1995)                        392</span>\n<span class=\"go\">Silence of the Lambs, The (1991)             390</span>\n<span class=\"go\">Jerry Maguire (1996)                         384</span>\n<span class=\"go\">Chasing Amy (1997)                           379</span>\n<span class=\"go\">Rock, The (1996)                             378</span>\n<span class=\"go\">Empire Strikes Back, The (1980)              367</span>\n<span class=\"go\">Star Trek: First Contact (1996)              365</span>\n<span class=\"go\">Titanic (1997)                               350</span>\n<span class=\"go\">Back to the Future (1985)                    350</span>\n<span class=\"go\">Mission: Impossible (1996)                   344</span>\n<span class=\"go\">Fugitive, The (1993)                         336</span>\n<span class=\"go\">Indiana Jones and the Last Crusade (1989)    331</span>\n<span class=\"go\">Name: title, dtype: int64</span>\n</code></pre></div>\n\n<h3>Which movies are most highly rated?</h3>\n<div class=\"highlight\"><pre><span></span><code><span class=\"n\">movie_stats</span> <span class=\"o\">=</span> <span class=\"n\">lens</span><span class=\"o\">.</span><span class=\"n\">groupby</span><span class=\"p\">(</span><span class=\"s1\">&#39;title&#39;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">agg</span><span class=\"p\">({</span><span class=\"s1\">&#39;rating&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">size</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">]})</span>\n<span class=\"n\">movie_stats</span><span class=\"o\">.</span><span class=\"n\">head</span><span class=\"p\">()</span>\n</code></pre></div>\n\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr>\n      <th></th>\n      <th colspan=\"2\" halign=\"left\">rating</th>\n    </tr>\n    <tr>\n      <th></th>\n      <th>size</th>\n      <th>mean</th>\n    </tr>\n    <tr>\n      <th>title</th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>'Til There Was You (1997)</th>\n      <td>9</td>\n      <td>2.333333</td>\n    </tr>\n    <tr>\n      <th>1-900 (1994)</th>\n      <td>5</td>\n      <td>2.600000</td>\n    </tr>\n    <tr>\n      <th>101 Dalmatians (1996)</th>\n      <td>109</td>\n      <td>2.908257</td>\n    </tr>\n    <tr>\n      <th>12 Angry Men (1957)</th>\n      <td>125</td>\n      <td>4.344000</td>\n    </tr>\n    <tr>\n      <th>187 (1997)</th>\n      <td>41</td>\n      <td>3.024390</td>\n    </tr>\n  </tbody>\n</table>\n\n<p>We can use the <code>agg</code> method to pass a dictionary specifying the columns to aggregate (as keys) and a list of functions we'd like to apply.</p>\n<p>Let's sort the resulting DataFrame so that we can see which movies have the highest average score.</p>\n<div class=\"highlight\"><pre><span></span><code><span class=\"c1\"># sort by rating average</span>\n<span class=\"n\">movie_stats</span><span class=\"o\">.</span><span class=\"n\">sort_values</span><span class=\"p\">([(</span><span class=\"s1\">&#39;rating&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;mean&#39;</span><span class=\"p\">)],</span> <span class=\"n\">ascending</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">head</span><span class=\"p\">()</span>\n</code></pre></div>\n\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr>\n      <th></th>\n      <th colspan=\"2\" halign=\"left\">rating</th>\n    </tr>\n    <tr>\n      <th></th>\n      <th>size</th>\n      <th>mean</th>\n    </tr>\n    <tr>\n      <th>title</th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>They Made Me a Criminal (1939)</th>\n      <td>1</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>Marlene Dietrich: Shadow and Light (1996)</th>\n      <td>1</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>Saint of Fort Washington, The (1993)</th>\n      <td>2</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>Someone Else's America (1995)</th>\n      <td>1</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>Star Kid (1997)</th>\n      <td>3</td>\n      <td>5</td>\n    </tr>\n  </tbody>\n</table>\n\n<p>Because <code>movie_stats</code> is a DataFrame, we use the <code>sort</code> method - only Series objects use <code>order</code>. Additionally, because our columns are now a <a href=\"https://pandas.pydata.org/pandas-docs/stable/user_guide/advanced.html#advanced\">MultiIndex</a>, we need to pass in a tuple specifying how to sort.</p>\n<p>The above movies are rated so rarely that we can't count them as quality films. Let's only look at movies that have been rated at least 100 times.</p>\n<div class=\"highlight\"><pre><span></span><code><span class=\"n\">atleast_100</span> <span class=\"o\">=</span> <span class=\"n\">movie_stats</span><span class=\"p\">[</span><span class=\"s1\">&#39;rating&#39;</span><span class=\"p\">][</span><span class=\"s1\">&#39;size&#39;</span><span class=\"p\">]</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">100</span>\n<span class=\"n\">movie_stats</span><span class=\"p\">[</span><span class=\"n\">atleast_100</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">sort_values</span><span class=\"p\">([(</span><span class=\"s1\">&#39;rating&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;mean&#39;</span><span class=\"p\">)],</span> <span class=\"n\">ascending</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)[:</span><span class=\"mi\">15</span><span class=\"p\">]</span>\n</code></pre></div>\n\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr>\n      <th></th>\n      <th colspan=\"2\" halign=\"left\">rating</th>\n    </tr>\n    <tr>\n      <th></th>\n      <th>size</th>\n      <th>mean</th>\n    </tr>\n    <tr>\n      <th>title</th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Close Shave, A (1995)</th>\n      <td>112</td>\n      <td>4.491071</td>\n    </tr>\n    <tr>\n      <th>Schindler's List (1993)</th>\n      <td>298</td>\n      <td>4.466443</td>\n    </tr>\n    <tr>\n      <th>Wrong Trousers, The (1993)</th>\n      <td>118</td>\n      <td>4.466102</td>\n    </tr>\n    <tr>\n      <th>Casablanca (1942)</th>\n      <td>243</td>\n      <td>4.456790</td>\n    </tr>\n    <tr>\n      <th>Shawshank Redemption, The (1994)</th>\n      <td>283</td>\n      <td>4.445230</td>\n    </tr>\n    <tr>\n      <th>Rear Window (1954)</th>\n      <td>209</td>\n      <td>4.387560</td>\n    </tr>\n    <tr>\n      <th>Usual Suspects, The (1995)</th>\n      <td>267</td>\n      <td>4.385768</td>\n    </tr>\n    <tr>\n      <th>Star Wars (1977)</th>\n      <td>583</td>\n      <td>4.358491</td>\n    </tr>\n    <tr>\n      <th>12 Angry Men (1957)</th>\n      <td>125</td>\n      <td>4.344000</td>\n    </tr>\n    <tr>\n      <th>Citizen Kane (1941)</th>\n      <td>198</td>\n      <td>4.292929</td>\n    </tr>\n    <tr>\n      <th>To Kill a Mockingbird (1962)</th>\n      <td>219</td>\n      <td>4.292237</td>\n    </tr>\n    <tr>\n      <th>One Flew Over the Cuckoo's Nest (1975)</th>\n      <td>264</td>\n      <td>4.291667</td>\n    </tr>\n    <tr>\n      <th>Silence of the Lambs, The (1991)</th>\n      <td>390</td>\n      <td>4.289744</td>\n    </tr>\n    <tr>\n      <th>North by Northwest (1959)</th>\n      <td>179</td>\n      <td>4.284916</td>\n    </tr>\n    <tr>\n      <th>Godfather, The (1972)</th>\n      <td>413</td>\n      <td>4.283293</td>\n    </tr>\n  </tbody>\n</table>\n\n<p>Those results look realistic. Notice that we used boolean indexing to filter our <code>movie_stats</code> frame.</p>\n<p>We broke this question down into many parts, so here's the Python needed to get the 15 movies with the highest average rating, requiring that they had at least 100 ratings:</p>\n<div class=\"highlight\"><pre><span></span><code><span class=\"n\">movie_stats</span> <span class=\"o\">=</span> <span class=\"n\">lens</span><span class=\"o\">.</span><span class=\"n\">groupby</span><span class=\"p\">(</span><span class=\"s1\">&#39;title&#39;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">agg</span><span class=\"p\">({</span><span class=\"s1\">&#39;rating&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">size</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">]})</span>\n<span class=\"n\">atleast_100</span> <span class=\"o\">=</span> <span class=\"n\">movie_stats</span><span class=\"p\">[</span><span class=\"s1\">&#39;rating&#39;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">size</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">100</span>\n<span class=\"n\">movie_stats</span><span class=\"p\">[</span><span class=\"n\">atleast_100</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">sort_values</span><span class=\"p\">([(</span><span class=\"s1\">&#39;rating&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;mean&#39;</span><span class=\"p\">)],</span> <span class=\"n\">ascending</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)[:</span><span class=\"mi\">15</span><span class=\"p\">]</span>\n</code></pre></div>\n\n<p>The SQL equivalent would be:</p>\n<div class=\"highlight\"><pre><span></span><code><span class=\"k\">SELECT</span><span class=\"w\"> </span><span class=\"n\">title</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">COUNT</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">size</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">AVG</span><span class=\"p\">(</span><span class=\"n\">rating</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">mean</span><span class=\"w\"></span>\n<span class=\"k\">FROM</span><span class=\"w\"> </span><span class=\"n\">lens</span><span class=\"w\"></span>\n<span class=\"k\">GROUP</span><span class=\"w\"> </span><span class=\"k\">BY</span><span class=\"w\"> </span><span class=\"n\">title</span><span class=\"w\"></span>\n<span class=\"k\">HAVING</span><span class=\"w\"> </span><span class=\"k\">COUNT</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&gt;=</span><span class=\"w\"> </span><span class=\"mi\">100</span><span class=\"w\"></span>\n<span class=\"k\">ORDER</span><span class=\"w\"> </span><span class=\"k\">BY</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"k\">DESC</span><span class=\"w\"></span>\n<span class=\"k\">LIMIT</span><span class=\"w\"> </span><span class=\"mi\">15</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n\n<h3>Limiting our population going forward</h3>\n<p>Going forward, let's only look at the 50 most rated movies. Let's make a Series of movies that meet this threshold so we can use it for filtering later.</p>\n<div class=\"highlight\"><pre><span></span><code><span class=\"n\">most_50</span> <span class=\"o\">=</span> <span class=\"n\">lens</span><span class=\"o\">.</span><span class=\"n\">groupby</span><span class=\"p\">(</span><span class=\"s1\">&#39;movie_id&#39;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">size</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">sort_values</span><span class=\"p\">(</span><span class=\"n\">ascending</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)[:</span><span class=\"mi\">50</span><span class=\"p\">]</span>\n</code></pre></div>\n\n<p>The SQL to match this would be:</p>\n<div class=\"highlight\"><pre><span></span><code><span class=\"k\">CREATE</span><span class=\"w\"> </span><span class=\"k\">TABLE</span><span class=\"w\"> </span><span class=\"n\">most_50</span><span class=\"w\"> </span><span class=\"k\">AS</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">SELECT</span><span class=\"w\"> </span><span class=\"n\">movie_id</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">COUNT</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">FROM</span><span class=\"w\"> </span><span class=\"n\">lens</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">GROUP</span><span class=\"w\"> </span><span class=\"k\">BY</span><span class=\"w\"> </span><span class=\"n\">movie_id</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">ORDER</span><span class=\"w\"> </span><span class=\"k\">BY</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"k\">DESC</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">LIMIT</span><span class=\"w\"> </span><span class=\"mi\">50</span><span class=\"w\"></span>\n<span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n\n<p>This table would then allow us to use EXISTS, IN, or JOIN whenever we wanted to filter our results. Here's an example using EXISTS:</p>\n<div class=\"highlight\"><pre><span></span><code><span class=\"k\">SELECT</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"></span>\n<span class=\"k\">FROM</span><span class=\"w\"> </span><span class=\"n\">lens</span><span class=\"w\"></span>\n<span class=\"k\">WHERE</span><span class=\"w\"> </span><span class=\"k\">EXISTS</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">SELECT</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"k\">FROM</span><span class=\"w\"> </span><span class=\"n\">most_50</span><span class=\"w\"> </span><span class=\"k\">WHERE</span><span class=\"w\"> </span><span class=\"n\">lens</span><span class=\"p\">.</span><span class=\"n\">movie_id</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">most_50</span><span class=\"p\">.</span><span class=\"n\">movie_id</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n\n<h3>Which movies are most controversial amongst different ages?</h3>\n<p>Let's look at how these movies are viewed across different age groups. First, let's look at how age is distributed amongst our users.</p>\n<div class=\"highlight\"><pre><span></span><code><span class=\"n\">users</span><span class=\"o\">.</span><span class=\"n\">age</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"o\">.</span><span class=\"n\">hist</span><span class=\"p\">(</span><span class=\"n\">bins</span><span class=\"o\">=</span><span class=\"mi\">30</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">title</span><span class=\"p\">(</span><span class=\"s2\">&quot;Distribution of users&#39; ages&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">ylabel</span><span class=\"p\">(</span><span class=\"s1\">&#39;count of users&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">xlabel</span><span class=\"p\">(</span><span class=\"s1\">&#39;age&#39;</span><span class=\"p\">);</span>\n</code></pre></div>\n\n<p><img alt=\"Distribution of user ages\" src=\"/images/pandas-movielens-age-histogram.png\"></p>\n<p>pandas' integration with <a href=\"https://matplotlib.org/index.html\">matplotlib</a> makes basic graphing of Series/DataFrames trivial. In this case, just call hist on the column to produce a histogram. We can also use <a href=\"https://matplotlib.org/stable/tutorials/introductory/pyplot.html\">matplotlib.pyplot</a> to customize our graph a bit (always label your axes).</p>\n<h3>Binning our users</h3>\n<p>I don't think it'd be very useful to compare individual ages - let's bin our users into age groups using <code>pandas.cut</code>.</p>\n<div class=\"highlight\"><pre><span></span><code><span class=\"n\">labels</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;0-9&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;10-19&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;20-29&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;30-39&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;40-49&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;50-59&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;60-69&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;70-79&#39;</span><span class=\"p\">]</span>\n<span class=\"n\">lens</span><span class=\"p\">[</span><span class=\"s1\">&#39;age_group&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">cut</span><span class=\"p\">(</span><span class=\"n\">lens</span><span class=\"o\">.</span><span class=\"n\">age</span><span class=\"p\">,</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">81</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">),</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">labels</span><span class=\"o\">=</span><span class=\"n\">labels</span><span class=\"p\">)</span>\n<span class=\"n\">lens</span><span class=\"p\">[[</span><span class=\"s1\">&#39;age&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;age_group&#39;</span><span class=\"p\">]]</span><span class=\"o\">.</span><span class=\"n\">drop_duplicates</span><span class=\"p\">()[:</span><span class=\"mi\">10</span><span class=\"p\">]</span>\n</code></pre></div>\n\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>age</th>\n      <th>age_group</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>60</td>\n      <td>60-69</td>\n    </tr>\n    <tr>\n      <th>397</th>\n      <td>21</td>\n      <td>20-29</td>\n    </tr>\n    <tr>\n      <th>459</th>\n      <td>33</td>\n      <td>30-39</td>\n    </tr>\n    <tr>\n      <th>524</th>\n      <td>30</td>\n      <td>30-39</td>\n    </tr>\n    <tr>\n      <th>782</th>\n      <td>23</td>\n      <td>20-29</td>\n    </tr>\n    <tr>\n      <th>995</th>\n      <td>29</td>\n      <td>20-29</td>\n    </tr>\n    <tr>\n      <th>1229</th>\n      <td>26</td>\n      <td>20-29</td>\n    </tr>\n    <tr>\n      <th>1664</th>\n      <td>31</td>\n      <td>30-39</td>\n    </tr>\n    <tr>\n      <th>1942</th>\n      <td>24</td>\n      <td>20-29</td>\n    </tr>\n    <tr>\n      <th>2270</th>\n      <td>32</td>\n      <td>30-39</td>\n    </tr>\n  </tbody>\n</table>\n\n<p><code>pandas.cut</code> allows you to bin numeric data. In the above lines, we first created labels to name our bins, then split our users into eight bins of ten years (0-9, 10-19, 20-29, etc.). Our use of <code>right=False</code> told the function that we wanted the bins to be exclusive of the max age in the bin (e.g. a 30 year old user gets the 30s label).</p>\n<p>Now we can now compare ratings across age groups.</p>\n<div class=\"highlight\"><pre><span></span><code><span class=\"n\">lens</span><span class=\"o\">.</span><span class=\"n\">groupby</span><span class=\"p\">(</span><span class=\"s1\">&#39;age_group&#39;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">agg</span><span class=\"p\">({</span><span class=\"s1\">&#39;rating&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">size</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">]})</span>\n</code></pre></div>\n\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr>\n      <th></th>\n      <th colspan=\"2\" halign=\"left\">rating</th>\n    </tr>\n    <tr>\n      <th></th>\n      <th>size</th>\n      <th>mean</th>\n    </tr>\n    <tr>\n      <th>age_group</th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0-9</th>\n      <td>43</td>\n      <td>3.767442</td>\n    </tr>\n    <tr>\n      <th>10-19</th>\n      <td>8181</td>\n      <td>3.486126</td>\n    </tr>\n    <tr>\n      <th>20-29</th>\n      <td>39535</td>\n      <td>3.467333</td>\n    </tr>\n    <tr>\n      <th>30-39</th>\n      <td>25696</td>\n      <td>3.554444</td>\n    </tr>\n    <tr>\n      <th>40-49</th>\n      <td>15021</td>\n      <td>3.591772</td>\n    </tr>\n    <tr>\n      <th>50-59</th>\n      <td>8704</td>\n      <td>3.635800</td>\n    </tr>\n    <tr>\n      <th>60-69</th>\n      <td>2623</td>\n      <td>3.648875</td>\n    </tr>\n    <tr>\n      <th>70-79</th>\n      <td>197</td>\n      <td>3.649746</td>\n    </tr>\n  </tbody>\n</table>\n\n<p>Young users seem a bit more critical than other age groups. Let's look at how the 50 most rated movies are viewed across each age group. We can use the <code>most_50</code> Series we created earlier for filtering.</p>\n<div class=\"highlight\"><pre><span></span><code><span class=\"n\">lens</span><span class=\"o\">.</span><span class=\"n\">set_index</span><span class=\"p\">(</span><span class=\"s1\">&#39;movie_id&#39;</span><span class=\"p\">,</span> <span class=\"n\">inplace</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">by_age</span> <span class=\"o\">=</span> <span class=\"n\">lens</span><span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"n\">most_50</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">groupby</span><span class=\"p\">([</span><span class=\"s1\">&#39;title&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;age_group&#39;</span><span class=\"p\">])</span>\n<span class=\"n\">by_age</span><span class=\"o\">.</span><span class=\"n\">rating</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">head</span><span class=\"p\">(</span><span class=\"mi\">15</span><span class=\"p\">)</span>\n</code></pre></div>\n\n<div class=\"highlight\"><pre><span></span><code><span class=\"go\">title                 age_group</span>\n<span class=\"go\">Air Force One (1997)  10-19        3.647059</span>\n<span class=\"go\">                      20-29        3.666667</span>\n<span class=\"go\">                      30-39        3.570000</span>\n<span class=\"go\">                      40-49        3.555556</span>\n<span class=\"go\">                      50-59        3.750000</span>\n<span class=\"go\">                      60-69        3.666667</span>\n<span class=\"go\">                      70-79        3.666667</span>\n<span class=\"go\">Alien (1979)          10-19        4.111111</span>\n<span class=\"go\">                      20-29        4.026087</span>\n<span class=\"go\">                      30-39        4.103448</span>\n<span class=\"go\">                      40-49        3.833333</span>\n<span class=\"go\">                      50-59        4.272727</span>\n<span class=\"go\">                      60-69        3.500000</span>\n<span class=\"go\">                      70-79        4.000000</span>\n<span class=\"go\">Aliens (1986)         10-19        4.050000</span>\n<span class=\"go\">Name: rating, dtype: float64</span>\n</code></pre></div>\n\n<p>Notice that both the title and age group are indexes here, with the average rating value being a Series. This is going to produce a really long list of values.</p>\n<p>Wouldn't it be nice to see the data as a table? Each title as a row, each age group as a column, and the average rating in each cell.</p>\n<p>Behold! The magic of <code>unstack</code>!</p>\n<div class=\"highlight\"><pre><span></span><code><span class=\"n\">by_age</span><span class=\"o\">.</span><span class=\"n\">rating</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">unstack</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">fillna</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)[</span><span class=\"mi\">10</span><span class=\"p\">:</span><span class=\"mi\">20</span><span class=\"p\">]</span>\n</code></pre></div>\n\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th>age_group</th>\n      <th>0-9</th>\n      <th>10-19</th>\n      <th>20-29</th>\n      <th>30-39</th>\n      <th>40-49</th>\n      <th>50-59</th>\n      <th>60-69</th>\n      <th>70-79</th>\n    </tr>\n    <tr>\n      <th>title</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>E.T. the Extra-Terrestrial (1982)</th>\n      <td>0</td>\n      <td>3.680000</td>\n      <td>3.609091</td>\n      <td>3.806818</td>\n      <td>4.160000</td>\n      <td>4.368421</td>\n      <td>4.375000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>Empire Strikes Back, The (1980)</th>\n      <td>4</td>\n      <td>4.642857</td>\n      <td>4.311688</td>\n      <td>4.052083</td>\n      <td>4.100000</td>\n      <td>3.909091</td>\n      <td>4.250000</td>\n      <td>5.000000</td>\n    </tr>\n    <tr>\n      <th>English Patient, The (1996)</th>\n      <td>5</td>\n      <td>3.739130</td>\n      <td>3.571429</td>\n      <td>3.621849</td>\n      <td>3.634615</td>\n      <td>3.774648</td>\n      <td>3.904762</td>\n      <td>4.500000</td>\n    </tr>\n    <tr>\n      <th>Fargo (1996)</th>\n      <td>0</td>\n      <td>3.937500</td>\n      <td>4.010471</td>\n      <td>4.230769</td>\n      <td>4.294118</td>\n      <td>4.442308</td>\n      <td>4.000000</td>\n      <td>4.333333</td>\n    </tr>\n    <tr>\n      <th>Forrest Gump (1994)</th>\n      <td>5</td>\n      <td>4.047619</td>\n      <td>3.785714</td>\n      <td>3.861702</td>\n      <td>3.847826</td>\n      <td>4.000000</td>\n      <td>3.800000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>Fugitive, The (1993)</th>\n      <td>0</td>\n      <td>4.320000</td>\n      <td>3.969925</td>\n      <td>3.981481</td>\n      <td>4.190476</td>\n      <td>4.240000</td>\n      <td>3.666667</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>Full Monty, The (1997)</th>\n      <td>0</td>\n      <td>3.421053</td>\n      <td>4.056818</td>\n      <td>3.933333</td>\n      <td>3.714286</td>\n      <td>4.146341</td>\n      <td>4.166667</td>\n      <td>3.500000</td>\n    </tr>\n    <tr>\n      <th>Godfather, The (1972)</th>\n      <td>0</td>\n      <td>4.400000</td>\n      <td>4.345070</td>\n      <td>4.412844</td>\n      <td>3.929412</td>\n      <td>4.463415</td>\n      <td>4.125000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>Groundhog Day (1993)</th>\n      <td>0</td>\n      <td>3.476190</td>\n      <td>3.798246</td>\n      <td>3.786667</td>\n      <td>3.851064</td>\n      <td>3.571429</td>\n      <td>3.571429</td>\n      <td>4.000000</td>\n    </tr>\n    <tr>\n      <th>Independence Day (ID4) (1996)</th>\n      <td>0</td>\n      <td>3.595238</td>\n      <td>3.291429</td>\n      <td>3.389381</td>\n      <td>3.718750</td>\n      <td>3.888889</td>\n      <td>2.750000</td>\n      <td>0.000000</td>\n    </tr>\n  </tbody>\n</table>\n\n<p><code>unstack</code>, well, unstacks the specified level of a MultiIndex (by default, <code>groupby</code> turns the grouped field into an index - since we grouped by two fields, it became a MultiIndex). We unstacked the second index (remember that Python uses 0-based indexes), and then filled in NULL values with 0.</p>\n<p>If we would have used:</p>\n<div class=\"highlight\"><pre><span></span><code><span class=\"n\">by_age</span><span class=\"o\">.</span><span class=\"n\">rating</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">unstack</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">fillna</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n</code></pre></div>\n\n<p>We would have had our age groups as rows and movie titles as columns.</p>\n<h3>Which movies do men and women most disagree on?</h3>\n<p><em>EDIT: I realized after writing this question that Wes McKinney basically went through the exact same question in his book. It's a good, yet simple example of pivot_table, so I'm going to leave it here. Seriously though, <a href=\"https://www.amazon.com/Python-Data-Analysis-Wrangling-Jupyter/dp/109810403X/ref=sr_1_1\">go buy the book</a>.</em></p>\n<p>Think about how you'd have to do this in SQL for a second. You'd have to use a combination of IF/CASE statements with aggregate functions in order to pivot your dataset. Your query would look something like this:</p>\n<div class=\"highlight\"><pre><span></span><code><span class=\"k\">SELECT</span><span class=\"w\"> </span><span class=\"n\">title</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">AVG</span><span class=\"p\">(</span><span class=\"k\">IF</span><span class=\"p\">(</span><span class=\"n\">sex</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s1\">&#39;F&#39;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">rating</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">NULL</span><span class=\"p\">)),</span><span class=\"w\"> </span><span class=\"k\">AVG</span><span class=\"p\">(</span><span class=\"k\">IF</span><span class=\"p\">(</span><span class=\"n\">sex</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s1\">&#39;M&#39;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">rating</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">NULL</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"k\">FROM</span><span class=\"w\"> </span><span class=\"n\">lens</span><span class=\"w\"></span>\n<span class=\"k\">GROUP</span><span class=\"w\"> </span><span class=\"k\">BY</span><span class=\"w\"> </span><span class=\"n\">title</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n\n<p>Imagine how annoying it'd be if you had to do this on more than two columns.</p>\n<p>DataFrame's have a pivot_table method that makes these kinds of operations much easier (and less verbose).</p>\n<div class=\"highlight\"><pre><span></span><code><span class=\"n\">lens</span><span class=\"o\">.</span><span class=\"n\">reset_index</span><span class=\"p\">(</span><span class=\"s1\">&#39;movie_id&#39;</span><span class=\"p\">,</span> <span class=\"n\">inplace</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">pivoted</span> <span class=\"o\">=</span> <span class=\"n\">lens</span><span class=\"o\">.</span><span class=\"n\">pivot_table</span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;movie_id&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;title&#39;</span><span class=\"p\">],</span>\n                           <span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;sex&#39;</span><span class=\"p\">],</span>\n                           <span class=\"n\">values</span><span class=\"o\">=</span><span class=\"s1\">&#39;rating&#39;</span><span class=\"p\">,</span>\n                           <span class=\"n\">fill_value</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">pivoted</span><span class=\"o\">.</span><span class=\"n\">head</span><span class=\"p\">()</span>\n</code></pre></div>\n\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>sex</th>\n      <th>F</th>\n      <th>M</th>\n    </tr>\n    <tr>\n      <th>movie_id</th>\n      <th>title</th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <th>Toy Story (1995)</th>\n      <td>3.789916</td>\n      <td>3.909910</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <th>GoldenEye (1995)</th>\n      <td>3.368421</td>\n      <td>3.178571</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <th>Four Rooms (1995)</th>\n      <td>2.687500</td>\n      <td>3.108108</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <th>Get Shorty (1995)</th>\n      <td>3.400000</td>\n      <td>3.591463</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <th>Copycat (1995)</th>\n      <td>3.772727</td>\n      <td>3.140625</td>\n    </tr>\n  </tbody>\n</table>\n\n<div class=\"highlight\"><pre><span></span><code><span class=\"n\">pivoted</span><span class=\"p\">[</span><span class=\"s1\">&#39;diff&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">pivoted</span><span class=\"o\">.</span><span class=\"n\">M</span> <span class=\"o\">-</span> <span class=\"n\">pivoted</span><span class=\"o\">.</span><span class=\"n\">F</span>\n<span class=\"n\">pivoted</span><span class=\"o\">.</span><span class=\"n\">head</span><span class=\"p\">()</span>\n</code></pre></div>\n\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>sex</th>\n      <th>F</th>\n      <th>M</th>\n      <th>diff</th>\n    </tr>\n    <tr>\n      <th>movie_id</th>\n      <th>title</th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <th>Toy Story (1995)</th>\n      <td>3.789916</td>\n      <td>3.909910</td>\n      <td>0.119994</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <th>GoldenEye (1995)</th>\n      <td>3.368421</td>\n      <td>3.178571</td>\n      <td>-0.189850</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <th>Four Rooms (1995)</th>\n      <td>2.687500</td>\n      <td>3.108108</td>\n      <td>0.420608</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <th>Get Shorty (1995)</th>\n      <td>3.400000</td>\n      <td>3.591463</td>\n      <td>0.191463</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <th>Copycat (1995)</th>\n      <td>3.772727</td>\n      <td>3.140625</td>\n      <td>-0.632102</td>\n    </tr>\n  </tbody>\n</table>\n\n<div class=\"highlight\"><pre><span></span><code><span class=\"n\">pivoted</span><span class=\"o\">.</span><span class=\"n\">reset_index</span><span class=\"p\">(</span><span class=\"s1\">&#39;movie_id&#39;</span><span class=\"p\">,</span> <span class=\"n\">inplace</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">disagreements</span> <span class=\"o\">=</span> <span class=\"n\">pivoted</span><span class=\"p\">[</span><span class=\"n\">pivoted</span><span class=\"o\">.</span><span class=\"n\">movie_id</span><span class=\"o\">.</span><span class=\"n\">isin</span><span class=\"p\">(</span><span class=\"n\">most_50</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">)][</span><span class=\"s1\">&#39;diff&#39;</span><span class=\"p\">]</span>\n<span class=\"n\">disagreements</span><span class=\"o\">.</span><span class=\"n\">sort_values</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">kind</span><span class=\"o\">=</span><span class=\"s1\">&#39;barh&#39;</span><span class=\"p\">,</span> <span class=\"n\">figsize</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">])</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">title</span><span class=\"p\">(</span><span class=\"s1\">&#39;Male vs. Female Avg. Ratings</span><span class=\"se\">\\n</span><span class=\"s1\">(Difference &gt; 0 = Favored by Men)&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">ylabel</span><span class=\"p\">(</span><span class=\"s1\">&#39;Title&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">xlabel</span><span class=\"p\">(</span><span class=\"s1\">&#39;Average Rating Difference&#39;</span><span class=\"p\">);</span>\n</code></pre></div>\n\n<p><img alt=\"bar chart of rating difference between men and women\" src=\"/images/pandas-movielens-rating-differences.png\"></p>\n<p>Of course men like Terminator more than women. Independence Day though? Really?</p>\n<h3>Additional Resources</h3>\n<ul>\n<li><a href=\"https://pandas.pydata.org/pandas-docs/stable/\">pandas documentation</a></li>\n<li><a href=\"https://pyvideo.org/search?models=videos.video&amp;q=pandas\">pandas videos from PyCon</a></li>\n<li><a href=\"http://manishamde.github.io/blog/2013/03/07/pandas-and-python-top-10/\">pandas and Python top 10</a></li>\n<li><a href=\"https://tomaugspurger.github.io/modern-1-intro.html\">Tom Augspurger's Modern pandas series</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=otCriSKVV_8&amp;ab_channel=PyData\">Video</a> from Tom's pandas tutorial at PyData Seattle 2015</li>\n</ul>\n<p><strong>Closing</strong></p>\n<p>This is the point where I finally wrap this tutorial up.  Hopefully I've covered the basics well enough to pique your interest and help you get started with the library. If I've missed something critical, feel free to <a href=\"https://twitter.com/gjreda\">let me know on Twitter</a> or in the comments - I'd love constructive feedback.</p>",
  "category": [
    "",
    "",
    "",
    "",
    "",
    ""
  ]
}