{
  "id": "tag:blogger.com,1999:blog-15045980.post-5108653381755768530",
  "published": "2018-11-27T12:44:00.002-08:00",
  "updated": "2018-11-27T12:50:56.941-08:00",
  "category": [
    "",
    ""
  ],
  "title": "Testing on the Toilet: Exercise Service Call Contracts in Tests",
  "content": "<span style=\"font-family: &quot;times&quot; , &quot;times new roman&quot; , serif;\"><span style=\"font-style: italic; vertical-align: baseline; white-space: pre-wrap;\">This article was adapted from a </span><a href=\"http://googletesting.blogspot.com/2007/01/introducing-testing-on-toilet.html\"><span style=\"color: #1155cc; font-style: italic; vertical-align: baseline; white-space: pre-wrap;\">Google Testing on the Toilet</span></a><span style=\"font-style: italic; vertical-align: baseline; white-space: pre-wrap;\"> (TotT) episode. You can download a </span><a href=\"https://docs.google.com/document/d/1MElViSQMCCl3_oL-_e5FEpul-6QKIUE6Ul5FqsOGnXA/edit?usp=sharing\" rel=\"nofollow\"><span style=\"color: #1155cc; font-style: italic; vertical-align: baseline; white-space: pre-wrap;\">printer-friendly version</span></a><span style=\"font-style: italic; vertical-align: baseline; white-space: pre-wrap;\"> of this TotT episode and post it in your office.</span></span><br /><span style=\"font-family: &quot;times&quot; , &quot;times new roman&quot; , serif; font-style: italic; vertical-align: baseline; white-space: pre-wrap;\"><br /></span><span style=\"font-family: &quot;times&quot; , &quot;times new roman&quot; , serif; font-style: italic; vertical-align: baseline; white-space: pre-wrap;\"><span style=\"font-style: normal;\">By Ben Yu</span></span><br /><br /><span style=\"font-family: &quot;times&quot; , &quot;times new roman&quot; , serif;\">The following test mocks out a service call to </span><span style=\"font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">CloudService</span><span style=\"font-family: &quot;times&quot; , &quot;times new roman&quot; , serif;\"><span style=\"font-family: &quot;times&quot; , &quot;times new roman&quot; , serif;\">.&nbsp;</span><span style=\"color: purple; font-family: &quot;times&quot; , &quot;times new roman&quot; , serif;\">&nbsp;</span></span><span style=\"font-weight: 700; white-space: pre-wrap;\"><span style=\"color: purple; font-family: &quot;times&quot; , &quot;times new roman&quot; , serif;\">Does the test provide enough confidence that the service call is likely to work?</span></span><br /><br /><div style=\"overflow-x: auto;\"><table class=\"my-bordered-table\" style=\"width: 613px;\"><tbody><tr><td style=\"background-color: #cee2f3; vertical-align: top; width: 607px;\"><pre style=\"background-color: #cee2f3; border: 0px; color: black; margin: 0px; padding-bottom: 0px; padding-left: 0px; padding-top: 0px;\"><span style=\"font-family: &quot;consolas&quot; , &quot;courier new&quot; , &quot;courier&quot; , monospace;\">@Test public void uploadFileToCloudStorage() {<br />  when(<span style=\"font-weight: bold;\">mockCloudService</span>.write(<br />          WriteRequest.newBuilder().setUserId(“<span style=\"font-weight: bold;\">testuser</span>”).setFileType(“<span style=\"font-weight: bold;\">plain/text</span>”)...))<br />    .thenReturn(WriteResponse.newBuilder().setUploadId(“uploadId”).build());<br /><br />  CloudUploader <span style=\"font-weight: bold;\">cloudUploader</span> = new CloudUploader(<span style=\"font-weight: bold;\">mockCloudService</span>);<br /><br /><br />  Uri <span style=\"font-weight: bold;\">uri</span> = <span style=\"font-weight: bold;\">cloudUploader</span>.uploadFile(new File(“/path/to/foo.txt”));<br />  // The uploaded file URI contains the user ID, file type, and upload ID. (Or does it?)<br />  assertThat(<span style=\"font-weight: bold;\">uri</span>).isEqualTo(new Uri(“<span style=\"font-weight: bold;\">/testuser/text/uploadId</span>.txt”));</span></pre></td></tr></tbody></table></div><br /><span style=\"font-family: &quot;times&quot; , &quot;times new roman&quot; , serif;\"><span style=\"background-color: white; font-weight: 700; white-space: pre-wrap;\"><span style=\"color: purple; font-family: Times, Times New Roman, serif;\">Lots of things can go wrong,</span></span><span style=\"font-family: times, times new roman, serif;\">&nbsp;especially when service contracts get complex. For example, </span></span><span style=\"font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">plain/text</span><span style=\"font-family: &quot;times&quot; , &quot;times new roman&quot; , serif;\"> may not be a valid file type, and you can’t verify that the URI of the uploaded file is correct.</span><br /><br /><span style=\"font-family: &quot;times&quot; , &quot;times new roman&quot; , serif;\"><span style=\"background-color: white; font-weight: 700; white-space: pre-wrap;\"><span style=\"color: purple; font-family: Times, Times New Roman, serif;\">If the code under test relies on the contract of a service, prefer exercising the service call</span></span><span style=\"font-family: times, times new roman, serif;\">&nbsp;instead of mocking it out. This gives you more confidence that you are using the service correctly:</span></span><br /><div style=\"overflow-x: auto;\"><table class=\"my-bordered-table\" style=\"width: 613px;\"><tbody><tr><td style=\"background-color: #d9ead3; vertical-align: top; width: 607px;\"><pre style=\"background-color: #d9ead3; border: 0px; color: black; margin: 0px; padding-bottom: 0px; padding-left: 0px; padding-top: 0px;\"><span style=\"font-family: &quot;consolas&quot; , &quot;courier new&quot; , &quot;courier&quot; , monospace;\">@Test public void uploadFileToCloudStorage() {<br />  CloudUploader <span style=\"font-weight: bold;\">cloudUploader</span> = new CloudUploader(<span style=\"font-weight: bold;\">cloudService</span>);<br />  Uri <span style=\"font-weight: bold;\">uri</span> = <span style=\"font-weight: bold;\">cloudUploader</span>.uploadFile(”/path/to/foo.txt”);<br />  assertThat(<span style=\"font-weight: bold;\">cloudService</span>.retrieveFile(<span style=\"font-weight: bold;\">uri</span>)).isEqualTo(readContent(“/path/to/foo.txt));<br />}</span></pre></td></tr></tbody></table></div><span style=\"font-family: &quot;times&quot; , &quot;times new roman&quot; , serif;\"><br /></span><span style=\"font-family: &quot;times&quot; , &quot;times new roman&quot; , serif;\">How can you exercise the service call?</span><br /><br /><ol><li><span style=\"font-family: &quot;times&quot; , &quot;times new roman&quot; , serif;\"><span id=\"docs-internal-guid-d7ce8871-7fff-90fd-33fd-d97353a64fb8\"><span style=\"background-color: white; font-variant-east-asian: normal; font-variant-numeric: normal; font-weight: 700; vertical-align: baseline; white-space: pre-wrap;\"><span style=\"color: purple; font-family: Times, Times New Roman, serif;\">Use a fake</span></span></span><span style=\"font-family: times, times new roman, serif;\">.&nbsp; A fake is a fast and lightweight implementation of the service that behaves just like the real implementation. A fake is usually maintained by the service owners; don’t create your own fake unless you can ensure its behavior will stay in sync with the real implementation.&nbsp; Learn more about fakes at </span><a href=\"http://testing.googleblog.com/2013/06/testing-on-toilet-fake-your-way-to.html\" style=\"font-family: times, &quot;times new roman&quot;, serif;\">testing.googleblog.com/2013/06/testing-on-toilet-fake-your-way-to.html</a><span style=\"font-family: times, times new roman, serif;\">.</span></span></li><li><span style=\"font-family: &quot;times&quot; , &quot;times new roman&quot; , serif;\"><span id=\"docs-internal-guid-ad45d921-7fff-e561-02d5-1a8cf098db47\"><span style=\"background-color: white; font-variant-east-asian: normal; font-variant-numeric: normal; font-weight: 700; vertical-align: baseline; white-space: pre-wrap;\"><span style=\"color: purple; font-family: Times, Times New Roman, serif;\">Use a hermetic server</span></span></span><span style=\"font-family: times, times new roman, serif;\">.&nbsp; This is a real server that is brought up by the test and runs on the same machine that the test is running on. A downside of using a hermetic server is that starting it up and interacting with it can slow down tests.&nbsp; Learn more about hermetic servers at </span><a href=\"http://testing.googleblog.com/2012/10/hermetic-servers.html\" style=\"font-family: times, &quot;times new roman&quot;, serif;\">testing.googleblog.com/2012/10/hermetic-servers.html</a><span style=\"font-family: times, times new roman, serif;\">.</span></span></li></ol><div><span style=\"font-family: &quot;times&quot; , &quot;times new roman&quot; , serif;\"><span style=\"font-family: times, times new roman, serif;\">If the service you are using doesn’t have a fake or hermetic server, mocks may be the only tool at your disposal. But&nbsp;</span><span id=\"docs-internal-guid-648cf637-7fff-283e-ed04-f2bd572a8e54\"><span style=\"background-color: white; font-variant-east-asian: normal; font-variant-numeric: normal; font-weight: 700; vertical-align: baseline; white-space: pre-wrap;\"><span style=\"color: purple; font-family: Times, Times New Roman, serif;\">if your tests are not exercising the service call contract, you must take extra care to ensure the service call works</span></span></span><span style=\"font-family: times, times new roman, serif;\">, such as by having a comprehensive suite of end-to-end tests or resorting to manual QA (which can be inefficient and hard to scale).</span></span></div>",
  "link": [
    "",
    "",
    "",
    "",
    ""
  ],
  "author": {
    "name": "Google Testing Bloggers",
    "uri": "http://www.blogger.com/profile/03153388556673050910",
    "email": "noreply@blogger.com",
    "gd:image": ""
  },
  "thr:total": 3
}