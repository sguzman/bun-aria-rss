{
  "title": "Some pandas Database Join (merge) Benchmarks vs. R base::merge",
  "link": "",
  "published": "2012-01-03T00:00:00-08:00",
  "updated": "2012-01-03T00:00:00-08:00",
  "author": {
    "name": "Wes McKinney"
  },
  "id": "tag:wesmckinney.com,2012-01-03:/blog/some-pandas-database-join-merge-benchmarks-vs-r-basemerge/",
  "summary": "<p>Over the last week I have completely retooled pandas's \"database\" join infrastructure / algorithms in order to support the full gamut of SQL-style many-to-many merges (pandas has had one-to-one and many-to-one joins for a long time). I was curious about the performance with reasonably large data sets as compared with <code>base …</code></p>",
  "content": "<p>Over the last week I have completely retooled pandas's \"database\" join infrastructure / algorithms in order to support the full gamut of SQL-style many-to-many merges (pandas has had one-to-one and many-to-one joins for a long time). I was curious about the performance with reasonably large data sets as compared with <code>base::merge.data.frame</code> which I've used many times in R. So I just ran a little benchmark for joining a 100000-row DataFrame with a 10000-row DataFrame on two keys with about 10000 unique key combinations overall. Simulating a somewhat large SQL join.</p>\n<p>Note this new functionality will be shipping in the upcoming 0.7.0 release (!).</p>\n<p>There is a major factor affecting performance of the algorithms in pandas, namely whether the result data needs to be sorted lexicographically (which is the default behavior) by the join columns. R also offers the same option so it's completely apples to apples. These are mean runtimes in seconds:</p>\n<p><center></p>\n<table border=\"0\">\n<tr>\n<td>\n<table border=\"1\">\n  <thead>\n    <tr>\n      <th colspan=\"4\"><center>Sort by key columns</center></th>\n    </tr>\n    <tr>\n      <th></th>\n      <th>pandas</th>\n      <th>R</th>\n      <th>Ratio</th>\n    </tr>\n    </thead>\n    <tbody>\n    <tr>\n      <td>inner</td>\n      <td> 0.07819</td>\n      <td> 0.2286</td>\n      <td> 2.924</td>\n    </tr>\n    <tr>\n      <td>outer</td>\n      <td> 0.09013</td>\n      <td> 1.284</td>\n      <td> 14.25</td>\n    </tr>\n    <tr>\n      <td>left</td>\n      <td> 0.0853</td>\n      <td> 0.7766</td>\n      <td> 9.104</td>\n    </tr>\n    <tr>\n      <td>right</td>\n      <td> 0.08112</td>\n      <td> 0.3371</td>\n      <td> 4.156</td>\n    </tr>\n  </body>\n</table>\n<td>\n<td>\n<table border=\"1\">\n  <thead>\n    <tr>\n      <th colspan=\"4\"><center>Don't sort by key columns</center></th>\n    </tr>\n    <tr>\n      <th></th>\n      <th>pandas</th>\n      <th>R</th>\n      <th>Ratio</th>\n    </tr>\n    </thead>\n    <tbody>\n    <tr>\n      <td>inner</td>\n      <td> 0.02808</td>\n      <td> 0.2297</td>\n      <td> 8.18</td>\n    </tr>\n    <tr>\n      <td>outer</td>\n      <td> 0.03879</td>\n      <td> 1.181</td>\n      <td> 30.45</td>\n    </tr>\n    <tr>\n      <td>left</td>\n      <td> 0.0365</td>\n      <td> 0.6706</td>\n      <td> 18.37</td>\n    </tr>\n    <tr>\n      <td>right</td>\n      <td> 0.03021</td>\n      <td> 0.2995</td>\n      <td> 9.912</td>\n    </tr>\n  </body>\n</table>\n</td>\n</tr></table>\n<p></center></p>\n<p>As you can see, the sorting time in pandas completely dominates the runtime of the join (sorting 10000 strings is a lot of string comparisons). This isn't really an indictment of R's merge algorithm, but rather speaks to the strength of the merge strategy I devised in pandas. After spending a few days working on this problem I definitely think R could do a lot better. I haven't run benchmarks against SQLite or another SQL database yet; that will happen eventually.</p>\n<p>I'm going to write a blog article in the next few days going into algorithmic detail about how I got merging pretty big data sets to be so fast—it was not easy!</p>\n<p>Here is the R code.</p>\n<div class=\"github\"><pre><span></span><code><span class=\"n\">N</span> <span class=\"o\">&lt;-</span> <span class=\"m\">10000</span>\n<span class=\"n\">indices</span> <span class=\"o\">=</span> <span class=\"nf\">rep</span><span class=\"p\">(</span><span class=\"kc\">NA</span><span class=\"p\">,</span> <span class=\"n\">N</span><span class=\"p\">)</span>\n<span class=\"nf\">for </span><span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"n\">in</span> <span class=\"m\">1</span><span class=\"o\">:</span><span class=\"n\">N</span><span class=\"p\">)</span>\n  <span class=\"n\">indices</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">&lt;-</span> <span class=\"nf\">paste</span><span class=\"p\">(</span><span class=\"nf\">sample</span><span class=\"p\">(</span><span class=\"kc\">letters</span><span class=\"p\">,</span> <span class=\"m\">10</span><span class=\"p\">),</span> <span class=\"n\">collapse</span><span class=\"o\">=</span><span class=\"s\">&quot;&quot;</span><span class=\"p\">)</span>\n\n<span class=\"n\">left</span> <span class=\"o\">&lt;-</span> <span class=\"nf\">data.frame</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"o\">=</span><span class=\"nf\">rep</span><span class=\"p\">(</span><span class=\"n\">indices</span><span class=\"p\">,</span> <span class=\"m\">10</span><span class=\"p\">),</span>\n                   <span class=\"n\">key2</span><span class=\"o\">=</span><span class=\"nf\">sample</span><span class=\"p\">(</span><span class=\"nf\">rep</span><span class=\"p\">(</span><span class=\"n\">indices</span><span class=\"p\">,</span> <span class=\"m\">10</span><span class=\"p\">)),</span>\n                   <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"nf\">rnorm</span><span class=\"p\">(</span><span class=\"m\">100000</span><span class=\"p\">))</span>\n<span class=\"n\">right</span> <span class=\"o\">&lt;-</span> <span class=\"nf\">data.frame</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"o\">=</span><span class=\"n\">indices</span><span class=\"p\">,</span>\n                    <span class=\"n\">key2</span><span class=\"o\">=</span><span class=\"nf\">sample</span><span class=\"p\">(</span><span class=\"n\">indices</span><span class=\"p\">),</span>\n                    <span class=\"n\">value2</span><span class=\"o\">=</span><span class=\"nf\">rnorm</span><span class=\"p\">(</span><span class=\"m\">10000</span><span class=\"p\">))</span>\n<span class=\"n\">timeit</span> <span class=\"o\">&lt;-</span> <span class=\"nf\">function</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">,</span> <span class=\"n\">niter</span><span class=\"o\">=</span><span class=\"m\">10</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"n\">timing</span> <span class=\"o\">=</span> <span class=\"nf\">rep</span><span class=\"p\">(</span><span class=\"kc\">NA</span><span class=\"p\">,</span> <span class=\"n\">niter</span><span class=\"p\">)</span>\n  <span class=\"nf\">for </span><span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"n\">in</span> <span class=\"m\">1</span><span class=\"o\">:</span><span class=\"n\">niter</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nf\">gc</span><span class=\"p\">()</span>\n    <span class=\"n\">timing</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">&lt;-</span> <span class=\"nf\">system.time</span><span class=\"p\">(</span><span class=\"nf\">func</span><span class=\"p\">())[</span><span class=\"m\">3</span><span class=\"p\">]</span>\n  <span class=\"p\">}</span>\n  <span class=\"nf\">mean</span><span class=\"p\">(</span><span class=\"n\">timing</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">left.join</span> <span class=\"o\">&lt;-</span> <span class=\"nf\">function</span><span class=\"p\">(</span><span class=\"n\">sort</span><span class=\"o\">=</span><span class=\"kc\">TRUE</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"n\">result</span> <span class=\"o\">&lt;-</span> <span class=\"nf\">merge</span><span class=\"p\">(</span><span class=\"n\">left</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"p\">,</span> <span class=\"n\">all.x</span><span class=\"o\">=</span><span class=\"kc\">TRUE</span><span class=\"p\">,</span> <span class=\"n\">sort</span><span class=\"o\">=</span><span class=\"n\">sort</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n<span class=\"n\">right.join</span> <span class=\"o\">&lt;-</span> <span class=\"nf\">function</span><span class=\"p\">(</span><span class=\"n\">sort</span><span class=\"o\">=</span><span class=\"kc\">TRUE</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"n\">result</span> <span class=\"o\">&lt;-</span> <span class=\"nf\">merge</span><span class=\"p\">(</span><span class=\"n\">left</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"p\">,</span> <span class=\"n\">all.y</span><span class=\"o\">=</span><span class=\"kc\">TRUE</span><span class=\"p\">,</span> <span class=\"n\">sort</span><span class=\"o\">=</span><span class=\"n\">sort</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n<span class=\"n\">outer.join</span> <span class=\"o\">&lt;-</span> <span class=\"nf\">function</span><span class=\"p\">(</span><span class=\"n\">sort</span><span class=\"o\">=</span><span class=\"kc\">TRUE</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"n\">result</span> <span class=\"o\">&lt;-</span> <span class=\"nf\">merge</span><span class=\"p\">(</span><span class=\"n\">left</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"p\">,</span> <span class=\"n\">all</span><span class=\"o\">=</span><span class=\"kc\">TRUE</span><span class=\"p\">,</span> <span class=\"n\">sort</span><span class=\"o\">=</span><span class=\"n\">sort</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n<span class=\"n\">inner.join</span> <span class=\"o\">&lt;-</span> <span class=\"nf\">function</span><span class=\"p\">(</span><span class=\"n\">sort</span><span class=\"o\">=</span><span class=\"kc\">TRUE</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"n\">reuslt</span> <span class=\"o\">&lt;-</span> <span class=\"nf\">merge</span><span class=\"p\">(</span><span class=\"n\">left</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"p\">,</span> <span class=\"n\">sort</span><span class=\"o\">=</span><span class=\"n\">sort</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">sort.options</span> <span class=\"o\">&lt;-</span> <span class=\"nf\">c</span><span class=\"p\">(</span><span class=\"kc\">FALSE</span><span class=\"p\">,</span> <span class=\"kc\">TRUE</span><span class=\"p\">)</span>\n\n<span class=\"n\">results</span> <span class=\"o\">&lt;-</span> <span class=\"nf\">matrix</span><span class=\"p\">(</span><span class=\"n\">nrow</span><span class=\"o\">=</span><span class=\"m\">4</span><span class=\"p\">,</span> <span class=\"n\">ncol</span><span class=\"o\">=</span><span class=\"m\">2</span><span class=\"p\">)</span>\n<span class=\"nf\">colnames</span><span class=\"p\">(</span><span class=\"n\">results</span><span class=\"p\">)</span> <span class=\"o\">&lt;-</span> <span class=\"nf\">c</span><span class=\"p\">(</span><span class=\"s\">&quot;dont_sort&quot;</span><span class=\"p\">,</span> <span class=\"s\">&quot;sort&quot;</span><span class=\"p\">)</span>\n<span class=\"nf\">rownames</span><span class=\"p\">(</span><span class=\"n\">results</span><span class=\"p\">)</span> <span class=\"o\">&lt;-</span> <span class=\"nf\">c</span><span class=\"p\">(</span><span class=\"s\">&quot;inner&quot;</span><span class=\"p\">,</span> <span class=\"s\">&quot;outer&quot;</span><span class=\"p\">,</span> <span class=\"s\">&quot;left&quot;</span><span class=\"p\">,</span> <span class=\"s\">&quot;right&quot;</span><span class=\"p\">)</span>\n\n<span class=\"n\">join.functions</span> <span class=\"o\">&lt;-</span> <span class=\"nf\">c</span><span class=\"p\">(</span><span class=\"n\">inner.join</span><span class=\"p\">,</span> <span class=\"n\">outer.join</span><span class=\"p\">,</span> <span class=\"n\">left.join</span><span class=\"p\">,</span> <span class=\"n\">right.join</span><span class=\"p\">)</span>\n<span class=\"nf\">for </span><span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"n\">in</span> <span class=\"m\">1</span><span class=\"o\">:</span><span class=\"m\">4</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"n\">results</span><span class=\"p\">[</span><span class=\"m\">1</span><span class=\"p\">,</span> <span class=\"m\">1</span><span class=\"p\">]</span> <span class=\"o\">&lt;-</span> <span class=\"nf\">timeit</span><span class=\"p\">(</span><span class=\"nf\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"nf\">inner.join</span><span class=\"p\">(</span><span class=\"n\">sort</span><span class=\"o\">=</span><span class=\"n\">sort.options</span><span class=\"p\">[</span><span class=\"m\">1</span><span class=\"p\">])})</span>\n  <span class=\"n\">results</span><span class=\"p\">[</span><span class=\"m\">1</span><span class=\"p\">,</span> <span class=\"m\">2</span><span class=\"p\">]</span> <span class=\"o\">&lt;-</span> <span class=\"nf\">timeit</span><span class=\"p\">(</span><span class=\"nf\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"nf\">inner.join</span><span class=\"p\">(</span><span class=\"n\">sort</span><span class=\"o\">=</span><span class=\"n\">sort.options</span><span class=\"p\">[</span><span class=\"m\">2</span><span class=\"p\">])})</span>\n  <span class=\"n\">results</span><span class=\"p\">[</span><span class=\"m\">2</span><span class=\"p\">,</span> <span class=\"m\">1</span><span class=\"p\">]</span> <span class=\"o\">&lt;-</span> <span class=\"nf\">timeit</span><span class=\"p\">(</span><span class=\"nf\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"nf\">outer.join</span><span class=\"p\">(</span><span class=\"n\">sort</span><span class=\"o\">=</span><span class=\"n\">sort.options</span><span class=\"p\">[</span><span class=\"m\">1</span><span class=\"p\">])})</span>\n  <span class=\"n\">results</span><span class=\"p\">[</span><span class=\"m\">2</span><span class=\"p\">,</span> <span class=\"m\">2</span><span class=\"p\">]</span> <span class=\"o\">&lt;-</span> <span class=\"nf\">timeit</span><span class=\"p\">(</span><span class=\"nf\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"nf\">outer.join</span><span class=\"p\">(</span><span class=\"n\">sort</span><span class=\"o\">=</span><span class=\"n\">sort.options</span><span class=\"p\">[</span><span class=\"m\">2</span><span class=\"p\">])})</span>\n  <span class=\"n\">results</span><span class=\"p\">[</span><span class=\"m\">3</span><span class=\"p\">,</span> <span class=\"m\">1</span><span class=\"p\">]</span> <span class=\"o\">&lt;-</span> <span class=\"nf\">timeit</span><span class=\"p\">(</span><span class=\"nf\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"nf\">left.join</span><span class=\"p\">(</span><span class=\"n\">sort</span><span class=\"o\">=</span><span class=\"n\">sort.options</span><span class=\"p\">[</span><span class=\"m\">1</span><span class=\"p\">])})</span>\n  <span class=\"n\">results</span><span class=\"p\">[</span><span class=\"m\">3</span><span class=\"p\">,</span> <span class=\"m\">2</span><span class=\"p\">]</span> <span class=\"o\">&lt;-</span> <span class=\"nf\">timeit</span><span class=\"p\">(</span><span class=\"nf\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"nf\">left.join</span><span class=\"p\">(</span><span class=\"n\">sort</span><span class=\"o\">=</span><span class=\"n\">sort.options</span><span class=\"p\">[</span><span class=\"m\">2</span><span class=\"p\">])})</span>\n  <span class=\"n\">results</span><span class=\"p\">[</span><span class=\"m\">4</span><span class=\"p\">,</span> <span class=\"m\">1</span><span class=\"p\">]</span> <span class=\"o\">&lt;-</span> <span class=\"nf\">timeit</span><span class=\"p\">(</span><span class=\"nf\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"nf\">right.join</span><span class=\"p\">(</span><span class=\"n\">sort</span><span class=\"o\">=</span><span class=\"n\">sort.options</span><span class=\"p\">[</span><span class=\"m\">1</span><span class=\"p\">])})</span>\n  <span class=\"n\">results</span><span class=\"p\">[</span><span class=\"m\">4</span><span class=\"p\">,</span> <span class=\"m\">2</span><span class=\"p\">]</span> <span class=\"o\">&lt;-</span> <span class=\"nf\">timeit</span><span class=\"p\">(</span><span class=\"nf\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"nf\">right.join</span><span class=\"p\">(</span><span class=\"n\">sort</span><span class=\"o\">=</span><span class=\"n\">sort.options</span><span class=\"p\">[</span><span class=\"m\">2</span><span class=\"p\">])})</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n\n<p>And the Python code</p>\n<div class=\"github\"><pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">collections</span> <span class=\"kn\">import</span> <span class=\"n\">defaultdict</span>\n<span class=\"kn\">import</span> <span class=\"nn\">gc</span>\n<span class=\"kn\">import</span> <span class=\"nn\">time</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pandas.util.testing</span> <span class=\"kn\">import</span> <span class=\"n\">rands</span>\n<span class=\"n\">N</span> <span class=\"o\">=</span> <span class=\"mi\">10000</span>\n<span class=\"n\">indices</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"n\">rands</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"n\">xrange</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"p\">)],</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"s1\">&#39;O&#39;</span><span class=\"p\">)</span>\n\n<span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">tile</span><span class=\"p\">(</span><span class=\"n\">indices</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"n\">key2</span> <span class=\"o\">=</span> <span class=\"n\">key</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>\n<span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">shuffle</span><span class=\"p\">(</span><span class=\"n\">key2</span><span class=\"p\">)</span>\n<span class=\"n\">indices2</span> <span class=\"o\">=</span> <span class=\"n\">indices</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>\n<span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">shuffle</span><span class=\"p\">(</span><span class=\"n\">indices2</span><span class=\"p\">)</span>\n<span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">DataFrame</span><span class=\"p\">({</span><span class=\"s1\">&#39;key&#39;</span> <span class=\"p\">:</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"s1\">&#39;key2&#39;</span><span class=\"p\">:</span><span class=\"n\">key2</span><span class=\"p\">,</span>\n                  <span class=\"s1\">&#39;value&#39;</span> <span class=\"p\">:</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">randn</span><span class=\"p\">(</span><span class=\"mi\">100000</span><span class=\"p\">)})</span>\n<span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">DataFrame</span><span class=\"p\">({</span><span class=\"s1\">&#39;key&#39;</span><span class=\"p\">:</span> <span class=\"n\">indices</span><span class=\"p\">,</span> <span class=\"s1\">&#39;key2&#39;</span><span class=\"p\">:</span><span class=\"n\">indices2</span><span class=\"p\">,</span>\n                   <span class=\"s1\">&#39;value2&#39;</span> <span class=\"p\">:</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">randn</span><span class=\"p\">(</span><span class=\"mi\">10000</span><span class=\"p\">)})</span>\n<span class=\"n\">join_methods</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;inner&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;outer&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;left&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;right&#39;</span><span class=\"p\">]</span>\n<span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"n\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"o\">=</span><span class=\"n\">join_methods</span><span class=\"p\">,</span> <span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">])</span>\n<span class=\"n\">niter</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>\n<span class=\"k\">for</span> <span class=\"n\">sort</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">]:</span>\n    <span class=\"k\">for</span> <span class=\"n\">join_method</span> <span class=\"ow\">in</span> <span class=\"n\">join_methods</span><span class=\"p\">:</span>\n        <span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"n\">merge</span><span class=\"p\">(</span><span class=\"n\">left</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"p\">,</span> <span class=\"n\">how</span><span class=\"o\">=</span><span class=\"n\">join_method</span><span class=\"p\">,</span> <span class=\"n\">sort</span><span class=\"o\">=</span><span class=\"n\">sort</span><span class=\"p\">)</span>\n        <span class=\"n\">gc</span><span class=\"o\">.</span><span class=\"n\">disable</span><span class=\"p\">()</span>\n        <span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span>\n        <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"n\">xrange</span><span class=\"p\">(</span><span class=\"n\">niter</span><span class=\"p\">):</span>\n            <span class=\"n\">f</span><span class=\"p\">()</span>\n        <span class=\"n\">elapsed</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"n\">start</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"n\">niter</span>\n        <span class=\"n\">gc</span><span class=\"o\">.</span><span class=\"n\">enable</span><span class=\"p\">()</span>\n        <span class=\"n\">results</span><span class=\"p\">[</span><span class=\"n\">sort</span><span class=\"p\">][</span><span class=\"n\">join_method</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">elapsed</span>\n<span class=\"n\">results</span><span class=\"o\">.</span><span class=\"n\">columns</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;dont_sort&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;sort&#39;</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># R results</span>\n<span class=\"kn\">from</span> <span class=\"nn\">StringIO</span> <span class=\"kn\">import</span> <span class=\"n\">StringIO</span>\n<span class=\"n\">r_results</span> <span class=\"o\">=</span> <span class=\"n\">read_table</span><span class=\"p\">(</span><span class=\"n\">StringIO</span><span class=\"p\">(</span><span class=\"s2\">&quot;&quot;&quot;dont_sort   sort</span>\n<span class=\"s2\">inner    0.2297 0.2286</span>\n<span class=\"s2\">outer    1.1811 1.2843</span>\n<span class=\"s2\">left     0.6706 0.7766</span>\n<span class=\"s2\">right    0.2995 0.3371</span>\n<span class=\"s2\">&quot;&quot;&quot;</span><span class=\"p\">),</span> <span class=\"n\">sep</span><span class=\"o\">=</span><span class=\"s1\">&#39;\\s+&#39;</span><span class=\"p\">)</span>\n\n<span class=\"n\">sort_results</span> <span class=\"o\">=</span> <span class=\"n\">DataFrame</span><span class=\"o\">.</span><span class=\"n\">from_items</span><span class=\"p\">([(</span><span class=\"s1\">&#39;pandas&#39;</span><span class=\"p\">,</span> <span class=\"n\">results</span><span class=\"p\">[</span><span class=\"s1\">&#39;sort&#39;</span><span class=\"p\">]),</span>\n                                     <span class=\"p\">(</span><span class=\"s1\">&#39;R&#39;</span><span class=\"p\">,</span> <span class=\"n\">r_results</span><span class=\"p\">[</span><span class=\"s1\">&#39;sort&#39;</span><span class=\"p\">])])</span>\n<span class=\"n\">sort_results</span><span class=\"p\">[</span><span class=\"s1\">&#39;Ratio&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">sort_results</span><span class=\"p\">[</span><span class=\"s1\">&#39;R&#39;</span><span class=\"p\">]</span> <span class=\"o\">/</span> <span class=\"n\">sort_results</span><span class=\"p\">[</span><span class=\"s1\">&#39;pandas&#39;</span><span class=\"p\">]</span>\n\n<span class=\"n\">nosort_results</span> <span class=\"o\">=</span> <span class=\"n\">DataFrame</span><span class=\"o\">.</span><span class=\"n\">from_items</span><span class=\"p\">([(</span><span class=\"s1\">&#39;pandas&#39;</span><span class=\"p\">,</span> <span class=\"n\">results</span><span class=\"p\">[</span><span class=\"s1\">&#39;dont_sort&#39;</span><span class=\"p\">]),</span>\n                                       <span class=\"p\">(</span><span class=\"s1\">&#39;R&#39;</span><span class=\"p\">,</span> <span class=\"n\">r_results</span><span class=\"p\">[</span><span class=\"s1\">&#39;dont_sort&#39;</span><span class=\"p\">])])</span>\n<span class=\"n\">nosort_results</span><span class=\"p\">[</span><span class=\"s1\">&#39;Ratio&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">nosort_results</span><span class=\"p\">[</span><span class=\"s1\">&#39;R&#39;</span><span class=\"p\">]</span> <span class=\"o\">/</span> <span class=\"n\">nosort_results</span><span class=\"p\">[</span><span class=\"s1\">&#39;pandas&#39;</span><span class=\"p\">]</span>\n</code></pre></div>"
}