{
  "title": "Top Programming Languages 2022",
  "link": "https://spectrum.ieee.org/top-programming-languages-2022",
  "description": "\n<img src=\"https://spectrum.ieee.org/media-library/an-illustration-with-people-typing-on-laptop-surrounded-by-floating-windows.jpg?id=31173894&width=1200&height=800&coordinates=0%2C125%2C0%2C125\"/><br/><br/><p>Welcome to <em>IEEE Spectrum</em>’s ninth annual ranking of the Top Programming Languages! This year we’ve revamped and streamlined our interactive ranking tool and made other changes under the hood, but the goal remains the same—to combine multiple metrics from different sources to estimate the relative popularity of different languages.</p><p>You can get into the details of our methodological changes below (the TL;DR is that we eliminated the need for folks to run a giant ball of floating-point math in their browser), but first let’s get into what the rankings tell us this year.</p><h3>IEEE Spectrum’s Top Programming Languages 2022</h3><br/><div class=\"flourish-embed flourish-chart\" data-src=\"visualisation/10817270?1210395\"><script src=\"https://public.flourish.studio/resources/embed.js\"></script></div><p><a href=\"https://www.python.org/\" rel=\"noopener noreferrer\" target=\"_blank\">Python</a> remains on top but is closely followed by <a href=\"https://www.open-std.org/jtc1/sc22/wg14/\" rel=\"noopener noreferrer\" target=\"_blank\">C</a>. Indeed, the combined popularity of C and the big C-like languages—<a href=\"https://isocpp.org/\" rel=\"noopener noreferrer\" target=\"_blank\">C++</a> and <a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/introduction\" rel=\"noopener noreferrer\" target=\"_blank\">C#</a>—would outrank Python by some margin. <a href=\"https://www.java.com/en/download/help/whatis_java.html\" rel=\"noopener noreferrer\" target=\"_blank\">Java</a> also remains popular, as does <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript\" rel=\"noopener noreferrer\" target=\"_blank\">Javascript</a>, the latter buoyed by the ever-increasing complexity of websites and in-browser tools (although it’s worth noting that in some quarters, the cool thing is now <a href=\"https://www.lowtechmagazine.com/2018/09/how-to-build-a-lowtech-website.html\" rel=\"noopener noreferrer\" target=\"_blank\">deliberately stripped-down static sites</a> built with just <a href=\"https://www.w3.org/standards/webdesign/htmlcss\" rel=\"noopener noreferrer\" target=\"_blank\">HTML and simple CSS</a>).</p><p>But among these stalwarts is the rising popularity of <a href=\"https://blog.ansi.org/2018/10/sql-standard-iso-iec-9075-2016-ansi-x3-135/#gref\" target=\"_blank\">SQL</a>. In fact, it’s at No. 1 in our Jobs ranking, which looks solely at metrics from the<a href=\"https://jobs.ieee.org/\" target=\"_blank\"> IEEE Job Site</a> and <a href=\"https://www.careerbuilder.com/\" target=\"_blank\">CareerBuilder</a>. Having looked through literally hundreds and hundreds of job listings in the course of compiling these rankings for you, dear reader, I can say that the strength of the SQL signal is not because there are a lot of employers looking for <em>just</em> SQL coders, in the way that they advertise for Java experts or C++ developers. They want a given language <em>plus</em> SQL. And lots of them want that “plus SQL.”</p><p class=\"pull-quote\">It may not be the most glamorous language...but some experience with SQL is a valuable arrow to have in your quiver.</p><p><span></span>This is likely because so many applications today involve a front-end or middleware layer talking to a back-end database, often over a network to eliminate local resource constraints. Why reinvent the wheel and try to hack your own database and accompanying network interface protocol when <a href=\"http://troels.arvin.dk/db/rdbms/\" target=\"_blank\">so many SQL implementations</a> are available? Chances are there’s probably already one that fits your use case. And even when a networked back end isn’t practical, embedded and single-board computers can be found with enough oomph to run a <a href=\"https://www.sqlite.org/about.html\" target=\"_blank\">SQL database locally</a>. (For more on the rise of SQL, see our <a href=\"https://spectrum.ieee.org/the-rise-of-sql\" target=\"_blank\">accompanying article</a>.)</p><p>So it may not be the most glamorous language or what you’re going to use to implement the next Great Algorithm, but some experience with SQL is a valuable arrow to have in your quiver.</p><p>Looking at complete jobs listings also shows that if you’re interested in cyberwarfare (both offensive and defensive), then getting handy with assembly code is a pretty good in. Previously, I generally just associated assembly code with things like device drivers, tweaking <a href=\"https://0xax.gitbooks.io/linux-insides/content/Theory/linux-theory-3.html\" target=\"_blank\">the guts of operating systems</a>, or <a href=\"https://www.libhunt.com/l/assembly/topic/retrocomputing\" target=\"_blank\">retrocomputing</a>. But many of the job listings calling for expertise in assembly were posted by the kinds of low-profile cybersecurity contractors that orbit Washington, D.C., and even one government agency—the <a href=\"https://www.nsa.gov/\" target=\"_blank\">NSA</a>.</p><p>Job listings are of course not the only metrics we look at in <em>Spectrum</em>. A complete list of our <a href=\"https://spectrum.ieee.org/top-programming-languages-methods\" target=\"_blank\">sources is here</a>, but in a nutshell we look at nine metrics that we think are good proxies for measuring what languages people are programming in. Sources include GitHub, Google, Stack Overflow, Twitter, and <a href=\"https://ieeexplore.ieee.org/Xplore/home.jsp\" target=\"_blank\">IEEE Xplore</a>. The raw data is normalized and weighted according to the different rankings offered—for example, the <em>Spectrum</em> default ranking is heavily weighted toward the interests of IEEE members, while Trending puts more weight on forums and social-media metrics.</p><p><div class=\"rblad-ieee_in_content\"></div></p><p><span></span>In previous years, we allowed readers to bypass these preset rankings and create a custom ranking by adjusting the weights however they pleased. However, it turned out that very few people were taking advantage of this feature. Taking it out allows us to precompute the preset rankings instead of serving an app that contained the data from all the metrics and then computed the rankings in the browser on the fly. Quite apart from making the app large, and thus slower to load, we also ran into the problem that different browsers could produce slightly different results, thanks to variations in floating-point implementations! (This problem of different implementations giving different results was largely solved by the <a href=\"https://standards.ieee.org/ieee/754/6210/\" target=\"_blank\">IEEE-754 standard</a> for floating-point numbers, so it would be interesting to go back and find out which browser versions are noncompliant. But for now let’s just all agree to not run any, say, nuclear reactors with a Web app, okay?)<br/></p><p>Creating the rankings also pulls us into the typical dilemmas faced by any taxonomist—you might think you’ve got a straightforward and unambiguous way to classify things, but then edge cases and weird hybrids invariably slither into view. Plus there’s <a href=\"https://en.wikipedia.org/wiki/Lumpers_and_splitters\" target=\"_blank\">the eternal struggle between “lumping” and “splitting”</a>—is it best to focus on similarities and thus put multiple things under fewer labels overall, or focus on differences and break things up as much as possible and have more fine-grained labels?</p><p>For us this question starts with considering just what <em>is</em> a programming language. This causes a lot of folks to shout at us, especially with regard to HTML/CSS. Although not <a href=\"https://en.wikipedia.org/wiki/Turing_completeness\" target=\"_blank\">Turing-complete</a> except under highly artificial conditions, we <em>do</em> consider HTML/CSS a programming language because the tags in its source code are primarily intended as imperatives to do things such as “present this text in a table format” or “make this heading larger than the body text.” Another question that crops up is when do you decide that a superset or subset of one language has become distinct enough to be considered separately?</p><p><div class=\"rblad-ieee_in_content\"></div></p><p>Generally, we let <a href=\"https://youtu.be/MwQNkECtskU?t=22\" target=\"_blank\">pragmatism be our guide</a>. You can argue that Arduino microcontrollers are programmed in a subset of Java (or C++), but if someone asked for help writing an Arduino project, giving them a book on Java would be of limited use. On the other hand, there are a lot of books with titles along the lines of <em>Writing Arduino Programs Made EZ</em>, so the Arduino language is listed separately. On the other hand, it doesn’t seem to make much sense to put, say, <a href=\"https://micropython.org/\" target=\"_blank\">MicroPython</a> and <a href=\"https://circuitpython.org/\" target=\"_blank\">CircuitPython</a> anywhere but firmly in the Python box, at least for now. Categorizations evolve. For example, previously we grouped <a href=\"https://www.typescriptlang.org/\" target=\"_blank\">Typescript</a> with JavaScript, but adoption has grown enough that it makes more sense to break it out.</p><p>These are all essentially subjective decisions, as are the weights we assign to different metrics, so your mileage may vary. We simply offer this up as our approach to a tricky problem—after all, no one can directly measure what languages people are programming in.</p>We hope you find them useful, and if you think we need to be making different judgement calls, leave us a comment telling us why!",
  "pubDate": "Tue, 23 Aug 2022 15:59:26 +0000",
  "guid": "https://spectrum.ieee.org/top-programming-languages-2022",
  "category": [
    "Python",
    "Sql",
    "Top programming languages",
    "Coding",
    "Programming languages",
    "Type:departments"
  ],
  "dc:creator": "Stephen Cass",
  "media:content": ""
}