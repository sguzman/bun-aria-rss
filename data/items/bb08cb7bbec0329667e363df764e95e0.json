{
  "title": "Square to Hex",
  "description": "<p>Imagine you had a square grid of points and you’d like to transform that grid into a hexagonal grid of points such that the local relationships between points are preserved. For irregular or arbitrary start or target grids tools like Mario Klingemann’s <a href=\"https://github.com/Quasimondo/RasterFairy\">RasterFairy</a> do an excellent job. However for a regular to regular transform I was wondering if there were optimal, regular, tilable solutions.</p>\n\n<p>The naive way to transform from square to hex is to simply take every second row and shift it by half the gridspacing. That gives you triangles and you’re done. However, unfortunately, the triangles are now not equilateral, being stretched in y by sqrt(3)/2. Ok, you say, why not just just rescale in y by 2/sqrt(3), and now you’re done. Ok, but now you’ve changed the <em>aspect ratio</em> of the points. What if you wanted to preserve the aspect ratio <em>and</em> get an equilateral, hexagonal arrangement <em>and</em> minimize the grid distortion.</p>\n\n<p>Obviosuly there can’t be perfect solutions to this problem since sqrt(3) is irrational.\nHowever we can find grid arrangements whose aspect ratio change is very close to 1.0</p>\n\n<table>\n  <thead>\n    <tr>\n      <th>Square</th>\n      <th>Hexagonal</th>\n      <th>Aspect Devation</th>\n      <th>Points</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>4x4</td>\n      <td>4x4</td>\n      <td>0.866</td>\n      <td>20</td>\n    </tr>\n    <tr>\n      <td>4x6</td>\n      <td>4x6</td>\n      <td>0.866</td>\n      <td>24</td>\n    </tr>\n    <tr>\n      <td>16x14</td>\n      <td>14x16</td>\n      <td>1.131</td>\n      <td>224</td>\n    </tr>\n    <tr>\n      <td>18x16</td>\n      <td>16x18</td>\n      <td>1.096</td>\n      <td>288</td>\n    </tr>\n    <tr>\n      <td>20x18</td>\n      <td>18x20</td>\n      <td>1.069</td>\n      <td>360</td>\n    </tr>\n    <tr>\n      <td>22x20</td>\n      <td>20x22</td>\n      <td>1.048</td>\n      <td>440</td>\n    </tr>\n    <tr>\n      <td>24x22</td>\n      <td>22x24</td>\n      <td>1.031</td>\n      <td>528</td>\n    </tr>\n    <tr>\n      <td>26x24</td>\n      <td>24x26</td>\n      <td>1.016</td>\n      <td>624</td>\n    </tr>\n    <tr>\n      <td>28x26</td>\n      <td>26x28</td>\n      <td>1.004</td>\n      <td>728</td>\n    </tr>\n  </tbody>\n</table>\n\n<p>The 28x26 solution appears to be so optimal that there appears to be no better solution up to 10000 points (i didn’t search past that point. Eventually, of course, there should be an even better approximation though it becomes intractable for the assignment algorithm (see below) since the Kuhn-Munkres algorithm is O(N^3).</p>\n\n<p>Ok, now once we have the grids we still have to assign which point in the square grid becomes which point in the hex grid.\nWe can calculate the ideal minimal distortion by solving <a href=\"https://en.wikipedia.org/wiki/Hungarian_algorithm\">the assignment problem</a> over a cost matrix of distances. For the patches to be tileable we need to calculate the distance matrix under periodic boundary conditions, i.e if you walk out of the unit cell to the left you reappear on the right.</p>\n\n<h2 id=\"16x14--224-points\">16x14 = 224 points</h2>\n\n<p><a type=\"text/html\" href=\"/assets/squaretohex/solution.224.txt\"><img src=\"/assets/squaretohex/solution.224.gif\" /></a></p>\n\n<h3 id=\"18x16--288-points\">18x16 = 288 points</h3>\n\n<p><a type=\"text/html\" href=\"/assets/squaretohex/solution.288.txt\"><img src=\"/assets/squaretohex/solution.288.gif\" /></a></p>\n\n<h2 id=\"20x18--360-points\">20x18 = 360 points</h2>\n\n<p><a type=\"text/html\" href=\"/assets/squaretohex/solution.360.txt\"><img src=\"/assets/squaretohex/solution.360.gif\" /></a></p>\n\n<h2 id=\"22x20--440-points\">22x20 = 440 points</h2>\n\n<p><a type=\"text/html\" href=\"/assets/squaretohex/solution.440.txt\"><img src=\"/assets/squaretohex/solution.440.gif\" /></a></p>\n\n<h2 id=\"24x22--528-points\">24x22 = 528 points</h2>\n\n<p><a type=\"text/html\" href=\"/assets/squaretohex/solution.528.txt\"><img src=\"/assets/squaretohex/solution.528.gif\" /></a></p>\n\n<h2 id=\"26x24--624-points\">26x24 = 624 points</h2>\n\n<p><a type=\"text/html\" href=\"/assets/squaretohex/solution.624.txt\"><img src=\"/assets/squaretohex/solution.624.gif\" /></a></p>\n\n<h2 id=\"28x26--728-points\">28x26 = 728 points</h2>\n\n<p><a type=\"text/html\" href=\"/assets/squaretohex/solution.728.txt\"><img src=\"/assets/squaretohex/solution.728.gif\" /></a></p>\n\n<h2 id=\"tiling\">Tiling</h2>\n\n<p>All these can be tiled so arbitrarily large planes of points can be converted this way.:</p>\n\n<h3 id=\"224-2x2\">224 2x2</h3>\n\n<p><img src=\"/assets/squaretohex/solution.224.tile2x.gif\" /></p>\n\n<h3 id=\"728-2x2\">728 2x2</h3>\n\n<p><img src=\"/assets/squaretohex/solution.728.tile2x.gif\" /></p>",
  "pubDate": "Sat, 11 Mar 2017 00:00:00 +0000",
  "link": "http://mtyka.github.io//graphics/2017/03/11/square-to-hex.html",
  "guid": "http://mtyka.github.io//graphics/2017/03/11/square-to-hex.html",
  "category": "graphics"
}