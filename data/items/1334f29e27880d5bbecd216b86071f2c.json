{
  "title": "GPUs and Neural Networks",
  "link": "https://shapeofdata.wordpress.com/2015/07/14/gpus-and-neural-networks/",
  "comments": "https://shapeofdata.wordpress.com/2015/07/14/gpus-and-neural-networks/#comments",
  "dc:creator": "Jesse Johnson",
  "pubDate": "Tue, 14 Jul 2015 20:34:11 +0000",
  "category": "Neural Networks",
  "guid": "http://shapeofdata.wordpress.com/?p=1188",
  "description": "Artificial neural networks have been around for a long time &#8211; since either the 1940s or the 1950s, depending on how you count. But they&#8217;ve only started to be used for practical applications such as image recognition in the last &#8230; <a href=\"https://shapeofdata.wordpress.com/2015/07/14/gpus-and-neural-networks/\">Continue reading <span class=\"meta-nav\">&#8594;</span></a>",
  "content:encoded": "<p><a href=\"https://shapeofdata.wordpress.com/2013/06/11/neural-networks-1-the-neuron/\">Artificial neural networks</a> have been around for a long time &#8211; since either the 1940s or the 1950s, depending on how you count. But they&#8217;ve only started to be used for practical applications such as image recognition in the last few years. Some of the recent progress is based on theoretical breakthroughs such as <a href=\"https://shapeofdata.wordpress.com/2015/01/24/convolutional-neural-networks/\">convolutional neural networks</a>, but a much bigger factor seems to be hardware: It turns out that small neural networks aren&#8217;t that much better than many simpler machine learning algorithms. Neural networks only excel when you have much more complex data and a large/complex network. But up until recently, the available hardware simply couldn&#8217;t handle such complexity. <a href=\"https://en.wikipedia.org/wiki/Moore%27s_law\">Moore&#8217;s law</a> helped with this, but an even bigger part has been played by a type of chip called a GPU, or Graphical Processing Unit. These were originally designed to speed up computer animations, but they can also be used for other types of processing. In some cases, GPUs can be as much as 100 times as fast as standard <a href=\"https://en.wikipedia.org/wiki/Central_processing_unit\">CPU</a>s at certain tasks. However, it turns out you only get this speedup with a fairly narrow category of tasks, many of which happen to be necessary for processing neural networks. In this post, I want to discuss what types of task these are and why GPUs are so much faster at them.</p>\n<p><span id=\"more-1188\"></span>Lets start with the way traditional CPUs work, keeping in mind that I&#8217;m not a hardware expert, so much of what I&#8217;m going to say will be intentionally vague. Whenever your computer is running, your CPU is endlessly following a list of very simple instructions involving external inputs and outputs (RAM, hard disk, your Wifi card, etc) and a small amount of memory that&#8217;s internal to the CPU called <em>registers</em>. The number of registers is usually pretty small &#8211; for example, the Intel&#8217;s fancy <a href=\"https://en.wikipedia.org/wiki/Intel_Core#Core_i7\">Core i7</a> processor has 16 64-bit registers.</p>\n<p>The instructions that the CPU follows are along the lines of &#8220;Add the values in registers 1 and 2, then save the result in register 3&#8221; or &#8220;Copy the value at the memory location defined by register 1 into register 2&#8221; or &#8220;If the value of register 1 is greater than the value in register 2 then jump to the instruction number saved in register 3.&#8221; So if, for example, you wanted to add together two vectors in a 100-dimensional space, you would have to read each coordinate for each vector from RAM into a register, add the numbers, then save each value back into RAM.</p>\n<p><a href=\"https://shapeofdata.files.wordpress.com/2015/07/cpu.png\"><img data-attachment-id=\"1193\" data-permalink=\"https://shapeofdata.wordpress.com/2015/07/14/gpus-and-neural-networks/cpu/\" data-orig-file=\"https://shapeofdata.files.wordpress.com/2015/07/cpu.png\" data-orig-size=\"512,274\" data-comments-opened=\"1\" data-image-meta=\"{\"aperture\":\"0\",\"credit\":\"\",\"camera\":\"\",\"caption\":\"\",\"created_timestamp\":\"0\",\"copyright\":\"\",\"focal_length\":\"0\",\"iso\":\"0\",\"shutter_speed\":\"0\",\"title\":\"\",\"orientation\":\"0\"}\" data-image-title=\"CPU\" data-image-description=\"\" data-image-caption=\"\" data-medium-file=\"https://shapeofdata.files.wordpress.com/2015/07/cpu.png?w=300\" data-large-file=\"https://shapeofdata.files.wordpress.com/2015/07/cpu.png?w=512\" class=\" size-full wp-image-1193 aligncenter\" src=\"https://shapeofdata.files.wordpress.com/2015/07/cpu.png?w=640\" alt=\"CPU\" srcset=\"https://shapeofdata.files.wordpress.com/2015/07/cpu.png 512w, https://shapeofdata.files.wordpress.com/2015/07/cpu.png?w=150 150w, https://shapeofdata.files.wordpress.com/2015/07/cpu.png?w=300 300w\" sizes=\"(max-width: 512px) 100vw, 512px\"   /></a></p>\n<p>Many modern CPUs have multiple cores, each of which is simultaneously and independently doing what I described above. In theory, this could speed things up a bit by doing multiple coordinates at the same time, but in practice, coordinating multiple cores is complicated enough that it&#8217;s more common to have the different cores working on completely different tasks rather than different parts of the same task. Also, the number of cores tends to be small (between 2 and 6 seems pretty typical.)</p>\n<p>A second type of parallelism that many processors can take advantage of is what&#8217;s called Single Instruction, Multiple Data (SIMD) architecture. This allows them to find sequences of independent/parallel instructions in an algorithm and perform them all in a single cycle. So, it might add the first four values of the vectors in a single cycle, then the next four and so on. This can cut the number of cycles dramatically, but the number of parallel instructions is limited by the number of registers, usually to around 4 or 8, so we&#8217;re still far from a 100-times speedup.</p>\n<p>Instead, the speed up comes from two major ways in which GPUs differ from GCUs. The first is that rather than having a small number of registers, a GPU has a large chunk of internal memory that it can operate on directly. So if, say, you&#8217;re going to do a lot of processing involving a collection of vectors that fits into the GPU&#8217;s internal memory, then you can save the time of shuffling the values back and forth to/from RAM. Of course, this alone only gives you a small speedup, since passing values to/from memory only takes a fraction of a CPU&#8217;s time.</p>\n<p>The big speed up comes from the fact that each time a GPU performs an operation, it can do it many times simultaneously. And it&#8217;s more than 2 or 6. Instead, 64 seems to be a typical size for the number of operations a GPU can do in parallel. Rather than an instruction like &#8220;Add register 1 to register 2&#8221; like the CPU had, a GPU instruction may be something like &#8220;Add the values in locations 1-64 to the values in locations 65-128, and save them in locations 129-192.&#8221; And this operation is done in a single step, simultaneously by 64 separate circuits within GPU. In other words, you can think of a GPU as having a row of CPUs that (unlike the multiple cores in a CPU) all follow the same instruction at the same time on different parts of the internal memory.</p>\n<p><a href=\"https://shapeofdata.files.wordpress.com/2015/07/gpu.png\"><img data-attachment-id=\"1194\" data-permalink=\"https://shapeofdata.wordpress.com/2015/07/14/gpus-and-neural-networks/gpu/\" data-orig-file=\"https://shapeofdata.files.wordpress.com/2015/07/gpu.png\" data-orig-size=\"630,267\" data-comments-opened=\"1\" data-image-meta=\"{\"aperture\":\"0\",\"credit\":\"\",\"camera\":\"\",\"caption\":\"\",\"created_timestamp\":\"0\",\"copyright\":\"\",\"focal_length\":\"0\",\"iso\":\"0\",\"shutter_speed\":\"0\",\"title\":\"\",\"orientation\":\"0\"}\" data-image-title=\"GPU\" data-image-description=\"\" data-image-caption=\"\" data-medium-file=\"https://shapeofdata.files.wordpress.com/2015/07/gpu.png?w=300\" data-large-file=\"https://shapeofdata.files.wordpress.com/2015/07/gpu.png?w=630\" class=\"alignleft size-full wp-image-1194\" src=\"https://shapeofdata.files.wordpress.com/2015/07/gpu.png?w=640\" alt=\"GPU\" srcset=\"https://shapeofdata.files.wordpress.com/2015/07/gpu.png 630w, https://shapeofdata.files.wordpress.com/2015/07/gpu.png?w=150 150w, https://shapeofdata.files.wordpress.com/2015/07/gpu.png?w=300 300w\" sizes=\"(max-width: 630px) 100vw, 630px\"   /></a></p>\n<p>So now, when we add those 100-dimensional vectors, instead of reading in 200 values, adding them in 100 separate cycles, then transferring 100 values back to RAM for a total on the order of 100 consecutive operations (not to mention a bunch of overhead I&#8217;m glossing over), we only need two cycles of the GPU. We would still need to transfer the values in and out of the GPU&#8217;s internal memory, but if we&#8217;re doing a lot of processing on the same vectors, we can minimize this time by keeping them in the GPU&#8217;s memory until we&#8217;re done with them.</p>\n<p>So tasks that involve doing the same thing at the same time to lots of different data (such as vector and matrix operations) can be done much faster on GPUs. In fact, it&#8217;s because matrix operations are so important to computer graphics that GPUs were designed this way. Note that GPUs tend to be slower than CPUs in terms of the number of cycles per second, plus they lack many optimization features that modern CPUs have. So for tasks that can&#8217;t take advantage of parallelism &#8211; i.e. almost everything other than vector and matrix operations &#8211; CPUs are much faster. That&#8217;s why the computer you&#8217;re working on right now has a CPU at its center instead of a GPU.</p>\n<p>But the processes involved in training and evaluating a neural network happen to fit very nicely into the vector/matrix genre. The &#8220;knowledge&#8221; in a neural network is defined by the weights on the connections between neurons. For example in a network with rows of neurons, the weights between successive rows are defined by a matrix in which the entry at position <em>(i, j)</em> is the weight from the <em>i</em>th neuron in the first row to the <em>j</em>th neuron in the second row. Each row, in turn, defines a vector, and we <a href=\"https://shapeofdata.wordpress.com/2013/06/18/neural-networks-2-evaluation/\">calculate the output</a> from each neuron by multiplying the outputs of the first row by this matrix, then applying a non-linear function to the resulting vector. We do this for each successive row until we get to the end of the network. Training the network via <a href=\"https://shapeofdata.wordpress.com/2013/06/24/neural-networks-3-training/\">back-propagation</a> is another process involving these same vectors and matrices.</p>\n<p>As a result, it&#8217;s possible in practice to work with much larger neural networks than would be otherwise possible, even after a few more decades of Moore&#8217;s Law. This is important, for example, in image processing where the first row alone (i.e. the input) contains thousands of neurons. Things still get tricky when the networks get too big to fit in the memory of a single GPU. At that point multiple GPUs are required to store the network, and data must be transferred between them, which becomes the major bottleneck. But that&#8217;s a whole different story. For now, this is at least the rough idea behind why GPUs have been one of the main drivers of the recent success of large-scale neural networks.</p>\n",
  "wfw:commentRss": "https://shapeofdata.wordpress.com/2015/07/14/gpus-and-neural-networks/feed/",
  "slash:comments": 11,
  "media:content": [
    {
      "media:title": "jessejohnson"
    },
    {
      "media:title": "CPU"
    },
    {
      "media:title": "GPU"
    }
  ]
}