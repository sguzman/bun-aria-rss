{
  "title": "Neural networks, linear transformations and word embeddings",
  "link": "https://shapeofdata.wordpress.com/2015/11/09/neural-networks-linear-transformations-and-word-embeddings/",
  "comments": "https://shapeofdata.wordpress.com/2015/11/09/neural-networks-linear-transformations-and-word-embeddings/#comments",
  "dc:creator": "Jesse Johnson",
  "pubDate": "Mon, 09 Nov 2015 14:49:02 +0000",
  "category": "Neural Networks",
  "guid": "http://shapeofdata.wordpress.com/?p=1220",
  "description": "In past posts, I&#8217;ve described the geometry of artificial neural networks by thinking of the output from each neuron in the network as defining a probability density function on the space of input vectors. This is useful for understanding how &#8230; <a href=\"https://shapeofdata.wordpress.com/2015/11/09/neural-networks-linear-transformations-and-word-embeddings/\">Continue reading <span class=\"meta-nav\">&#8594;</span></a>",
  "content:encoded": "<p>In past posts, I&#8217;ve described the geometry of artificial <a href=\"https://shapeofdata.wordpress.com/2013/06/11/neural-networks-1-the-neuron/\">neural networks</a> by thinking of the output from each neuron in the network as defining a probability density function on the space of input vectors. This is useful for understanding how a single neuron <a href=\"https://shapeofdata.wordpress.com/2013/06/18/neural-networks-2-evaluation/\">combines</a> the outputs of other neurons to form a more complex shape. However, it&#8217;s often useful to think about how multiple neurons behave at the same time, particularly for networks that are defined by successive layers of neurons. For such networks &#8211; which turn out to be the vast majority of networks in practice &#8211; it&#8217;s useful to think about how the set of outputs from each layer determine the set of outputs of the next layer. In this post, I want to discuss how we can think about this in terms of linear transformations (via matrices) and how this idea leads to a tool called word embeddings, the most popular of which is probably <a href=\"https://code.google.com/p/word2vec/\">word2vec</a>.</p>\n<p><span id=\"more-1220\"></span>First, recall that each neuron in a neural network has a number of inputs and a single output. The inputs come from either the features of an input vector, or from the outputs of other neurons. The neuron stores a weight for each input, and it calculates its output by multiplying each input value by a weight, adding up the products, adding a constant defined by another weight, then applying a fixed (non-linear) function to this value. One <a href=\"https://shapeofdata.wordpress.com/2013/06/24/neural-networks-3-training/\">trains</a> a neural network by modifying the weights on the inputs to each neuron so that the overall output is closer to what you want it to be.</p>\n<p>Before we go any further, we&#8217;re going to split each of our neurons into two: We&#8217;ll call the first one a linear neuron &#8211; this will have the same inputs as the original neuron, but its output will simply add together the input-times-weight values, plus the constant weight. We&#8217;ll call the second neuron a non-linear neuron &#8211; it will take the output from the linear neuron as its only input, and apply the fixed non-linear function to it. So if we take a neural network and replace each of the original neurons by a linear neuron feeding into a non-linear neuron, we&#8217;ll get the same functionality as the original network.</p>\n<p>An example of this is shown below. Adding arrow heads to show input/output made the picture too noisy, so you&#8217;ll have to pretend they&#8217;re all pointing to the right. In the top network, we have four input features feeding into a layer with two (standard) neurons, which in turn feed into a layer with three neurons, then a single neuron that combines their output to determine the output of the entire network. Below that, we have the same network after we&#8217;ve replaced each standard neuron with a linear neuron feeding into a non-linear neuron.</p>\n<p><a href=\"https://shapeofdata.files.wordpress.com/2015/11/ann-linear.png\"><img data-attachment-id=\"1223\" data-permalink=\"https://shapeofdata.wordpress.com/2015/11/09/neural-networks-linear-transformations-and-word-embeddings/ann-linear/\" data-orig-file=\"https://shapeofdata.files.wordpress.com/2015/11/ann-linear.png\" data-orig-size=\"586,527\" data-comments-opened=\"1\" data-image-meta=\"{\"aperture\":\"0\",\"credit\":\"\",\"camera\":\"\",\"caption\":\"\",\"created_timestamp\":\"0\",\"copyright\":\"\",\"focal_length\":\"0\",\"iso\":\"0\",\"shutter_speed\":\"0\",\"title\":\"\",\"orientation\":\"0\"}\" data-image-title=\"ANN-linear\" data-image-description=\"\" data-image-caption=\"\" data-medium-file=\"https://shapeofdata.files.wordpress.com/2015/11/ann-linear.png?w=300\" data-large-file=\"https://shapeofdata.files.wordpress.com/2015/11/ann-linear.png?w=586\" class=\"size-full wp-image-1223 aligncenter\" src=\"https://shapeofdata.files.wordpress.com/2015/11/ann-linear.png?w=640\" alt=\"ANN-linear\" srcset=\"https://shapeofdata.files.wordpress.com/2015/11/ann-linear.png 586w, https://shapeofdata.files.wordpress.com/2015/11/ann-linear.png?w=150 150w, https://shapeofdata.files.wordpress.com/2015/11/ann-linear.png?w=300 300w\" sizes=\"(max-width: 586px) 100vw, 586px\"   /></a></p>\n<p>Notice that in the network after the split, the outputs from the non-linear neurons in a given row feed into the linear neurons in the next row. Let&#8217;s focus, for a moment, on the connections from the non-linear neurons in the first non-input row, to the linear neurons in the second non-input row.</p>\n<p>The output values from the non-linear neurons define a vector that we&#8217;ll call <i>V</i>. The outputs from the linear neurons define another vector <em>W</em>. For each of the linear neurons in this row, there is one weight for each of the non-linear neurons in the previous row, so these weights define a vector with the same dimension/number of entries as <em>V.</em> In fact, we have one such vector for each of the linear neurons, and if we stack these vectors next to each other, we get a matrix, which we&#8217;ll call <em>M</em>.</p>\n<p>So, lets just quickly review this: We have the vector <em>V</em> of outputs from the row of non-linear neurons and the vector <em>W</em> of outputs from the successive row of linear neurons. We calculate <em>W</em> by multiplying the entries in the vector <em>V</em> by certain entries in the matrix <em>M</em> and then adding them together in a certain way. Well, if you happen to remember how matrix multiplication works, and you think carefully about the way we&#8217;re multiplying and adding the neuron outputs and weights, they turn out to be the same thing. In other words, it just so happens that the vector <i>W</i> defined by the row of linear neurons is the result of (matrix) multiplication <em>V </em>x <em>M</em>. (I&#8217;m thinking of <em>V</em> as being horizontal and the vectors of the same dimension that make up <em>M</em> as vertical.)</p>\n<p>We can think about this as a function/transformation from the space of all possible vectors <em>V</em> to the space of all possible vectors <em>W</em>. Under this interpretation, matrix multiplication defines a <em>linear transformation</em>: Every straight line in the first vector space will be sent to either a straight line or a point in the second space. (In particular, if the dimension of <em>V</em> is higher than that of <em>W</em> then a lot of lines will have to collapse down to points, but this can happen no matter what.) So there&#8217;s our geometric interpretation of the connections between the row of non-linear neurons and the next row of linear neurons: a linear transformation.</p>\n<p>Oh, except there&#8217;s one small detail we forgot: Each neuron doesn&#8217;t just multiply and add the inputs from the previous row of neurons. It also adds in a constant weight. The set of constant weights define yet another vector <em>C</em>, with the same dimension as W, and adding in all the constant weights corresponds to adding <em>C</em> to the product <em>V </em>x<em> M.</em> But it turns out this isn&#8217;t such a big deal &#8211; it just means that we get an affine transformation instead of a linear transformation &#8211; straight lines still stay straight or collapse to points. However, the zero vector doesn&#8217;t necessarily go the the zero vector. So we still get a nice interpretation of the connections between the layers.</p>\n<p>This brings up an interesting point about the importance of the non-linear neurons. If we were to remove the non-linear neurons and create a neural network entirely of linear neurons, then we could interpret the entire thing as a succession of linear transformations. So, for example, to calculate the output from the third layer, we would multiply the vector from the first layer by the matrix for the connections to the second layer, then multiply the resulting vector by the matrix for the connections from the second to the third layer. However, it turns out that combining linear transformations like this, which is equivalent to multiplying matrices, can only produce new linear or affine transformations. So we wouldn&#8217;t get anything with three layers that we couldn&#8217;t get with two. It&#8217;s the non-linear part of the neurons that allows neural networks to define arbitrarily complex probability distributions.</p>\n<p>But lets return to the linear part. In addition to being a useful way to think about the layers in a neural network, it turns out these linear transformations also allow you to do some fun tricks such as transforming sparse data into dense data.</p>\n<p>Sparse data in this context means data in which a typical data points has most of its features equal to zero, and its structure is determined more by which features are non-zero, than by what their values actually are. A good example of this is <a href=\"https://shapeofdata.wordpress.com/2013/10/23/case-study-3-free-form-text/\">bag-of-words</a> (BOW) vectors &#8211; the non-zero features reflect what the words in the &#8220;bag&#8221; are, and depending on the exact type of BOW, their actual values may or may not give you additional information such as word count.</p>\n<p>The problem with this type of vector is that they&#8217;re floppy (That&#8217;s not a technical term.): Because there are so many dimensions, there&#8217;s a serious risk of <a href=\"https://shapeofdata.wordpress.com/2013/03/26/general-regression-and-over-fitting/\">overfitting</a>, and the <a href=\"https://shapeofdata.wordpress.com/2013/04/02/the-curse-of-dimensionality/\">curse of dimensionality</a> makes distances less meaningful. So to really understand the geometric structure of such data, we need a meaningful way to embed the data points into a lower-dimensional space.</p>\n<p>It turns out one can do this by first trying to solve a different problem. Lets say you wanted to predict, for any given word, what other words are most likely to appear just before and just after it in a large corpus of text. In other words, given the word &#8220;apple&#8221; and the word &#8220;pie&#8221;, you want a model that tells you the probability, if you were to randomly select an occurrence of the word &#8220;apple&#8221; in the text, that &#8220;pie&#8221; would be one of the three words right before it or of the three words right after. (You can replace three with any number, but to simplify the discussion below, I&#8217;m going to stick with three.)</p>\n<p>The most straightforward way to do this with a neural network is to have a row of inputs, with one input for each word, then a row of output neurons, one for each word, with every input feature attached to every output neuron. If you input a vector with value 1 for &#8220;apple&#8221; and value zero for everything else, you want the &#8220;pie&#8221; neuron to output the probability described above. We can achieve this by setting the weight on the edge from input &#8220;apple&#8221; to neuron &#8220;pie&#8221; to this probability (and we can calculate the probability directly by counting the number of occurrences in the corpus).</p>\n<p>But this uses only sparse representations of the data, with one feature per word for both the input features and the output neurons. In order to get a dense representation, we will force our neural network to generate one by inserting a smaller row of neurons between the input and the output. A Figure representing the original neural network and the network with the inserted row is below. In practice, the input and output rows would consist of thousands of features, and the middle row would have hundreds of neurons, but this should give you the idea.</p>\n<p><a href=\"https://shapeofdata.files.wordpress.com/2015/11/word2vec.png\"><img data-attachment-id=\"1224\" data-permalink=\"https://shapeofdata.wordpress.com/2015/11/09/neural-networks-linear-transformations-and-word-embeddings/word2vec/\" data-orig-file=\"https://shapeofdata.files.wordpress.com/2015/11/word2vec.png\" data-orig-size=\"523,292\" data-comments-opened=\"1\" data-image-meta=\"{\"aperture\":\"0\",\"credit\":\"\",\"camera\":\"\",\"caption\":\"\",\"created_timestamp\":\"0\",\"copyright\":\"\",\"focal_length\":\"0\",\"iso\":\"0\",\"shutter_speed\":\"0\",\"title\":\"\",\"orientation\":\"0\"}\" data-image-title=\"word2vec\" data-image-description=\"\" data-image-caption=\"\" data-medium-file=\"https://shapeofdata.files.wordpress.com/2015/11/word2vec.png?w=300\" data-large-file=\"https://shapeofdata.files.wordpress.com/2015/11/word2vec.png?w=523\" class=\"size-full wp-image-1224 aligncenter\" src=\"https://shapeofdata.files.wordpress.com/2015/11/word2vec.png?w=640\" alt=\"word2vec\" srcset=\"https://shapeofdata.files.wordpress.com/2015/11/word2vec.png 523w, https://shapeofdata.files.wordpress.com/2015/11/word2vec.png?w=150 150w, https://shapeofdata.files.wordpress.com/2015/11/word2vec.png?w=300 300w\" sizes=\"(max-width: 523px) 100vw, 523px\"   /></a></p>\n<p>For this new network, there isn&#8217;t an immediately obvious way to set the weights, so we need to train it like any other neural network. This is technically unsupervised learning since there are no labels involved, but the neural network doesn&#8217;t know that: You train the network by feeding in each word in the corpus of text and comparing the output to the bag-of-words vector defined by the three words before and three words after it. (Again, you can replace three with any number.) If the output is not what you expected, you adjust the weights using <a href=\"https://shapeofdata.wordpress.com/2013/06/24/neural-networks-3-training/\">gradients/back-propagation</a>, then repeat with the next word and so on.</p>\n<p>Once we do this, the middle layer gives us a lower-dimensional representation of the data. In particular, while the Figure doesn&#8217;t show the neurons split into linear and non-linear pieces, the connections from the input features to the linear parts of the middle layer neurons define a linear transformation (a matrix) from the sparse input space to the lower-dimensional space defined by the middle neurons.</p>\n<p>Given any word such as &#8220;apple&#8221;, we can form the input vector that has 1 for the corresponding feature and zero for all the others. The linear transformation defined by the first set of weights takes this sparse vector to a (dense) vector in the space defined by the middle neurons which also represents this word. In particular, recall that the neural network was trained to predict the nearby words for each input. In order for it to do this effectively, it must choose a linear transformation that sends words that commonly have similar neighbors to nearby vectors in the middle space. So synonyms are likely to be sent to very close neighbors in the middle space, and related words will be slightly farther apart.</p>\n<p>This is roughly how word2vec works, and there are other similar schemes for training a neural network with a lower-dimensional row of neurons. Moreover, in practice this type of approach turns out to generate an embedding with even more structure than one might otherwise expect. In addition to placing synonyms near each other, word2vec also places pairs of words with similar relationships in the same relative positions as each other. For example, if you draw lines between (the lower-dimensional vectors representing) names of countries and the names of their capitals, you find that you get lines of the same length and slope (i.e. they define the same vector) so if you calculate &#8220;Paris&#8221; &#8211; &#8220;France&#8221; + &#8220;Germany&#8221; with vector arithmetic, you get a vector that is closer to &#8220;Berlin&#8221; than to any other word. (Stated another way, the vector &#8220;Paris&#8221; &#8211; &#8220;France&#8221; is extremely close to the vector &#8220;Germany&#8221; &#8211; &#8220;Berlin&#8221;.)</p>\n<p>So, unlike the sparse bag-of-words vectors, in which any two words are treated equally, the dense word2vec representation of each word is closely related to its meaning. The geometric structure of the set of word2vec representations should therefore reflect the semantic structure of the language in a way that the sparse vectors never could. Note that the neural network doesn&#8217;t actually &#8220;know&#8221; the meanings of the words, and the training doesn&#8217;t explicitly involve the meanings in any way. However, the neural network is able to infer relationships between the &#8220;meanings&#8221; of the words based on the context provided by the corpus of text, and the vector/matrix interpretation of the connection weights in the network allow us to extract these learned relationships.</p>\n",
  "wfw:commentRss": "https://shapeofdata.wordpress.com/2015/11/09/neural-networks-linear-transformations-and-word-embeddings/feed/",
  "slash:comments": 10,
  "media:content": [
    {
      "media:title": "jessejohnson"
    },
    {
      "media:title": "ANN-linear"
    },
    {
      "media:title": "word2vec"
    }
  ]
}