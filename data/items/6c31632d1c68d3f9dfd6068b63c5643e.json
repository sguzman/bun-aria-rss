{
  "title": "Universal drawdown statistics in investing",
  "link": "",
  "published": "2019-12-05T15:46:00-08:00",
  "updated": "2019-12-05T15:46:00-08:00",
  "author": {
    "name": "Jonathan Landy"
  },
  "id": "tag:efavdb.com,2019-12-05:/universal-drawdown-statistics-in-investing",
  "summary": "<p>We consider the equilibrium drawdown distribution for a biased random walk &#8212; in the context of a repeated investment game, the drawdown at a given time is how much has been lost relative to the maximum capital held up to that time. We show that in the tail, this is exponential …</p>",
  "content": "<p>We consider the equilibrium drawdown distribution for a biased random walk &#8212; in the context of a repeated investment game, the drawdown at a given time is how much has been lost relative to the maximum capital held up to that time. We show that in the tail, this is exponential. Further, when mean drift is small, this has an exponent that is universal in form, depending only on the mean and standard deviation of the step distribution. We give simulation examples in python consistent with the&nbsp;results.</p>\n<h2>Introduction and main&nbsp;results</h2>\n<p>In this post, we consider a topic of high interest to investors and gamblers alike &#8212; the statistics of drawdown. This is the amount of money the investor has lost relative to their maximum held capital to date. <a href=\"https://efavdb.com/wp-content/uploads/2019/12/dd.png\"><img alt=\"dd\" src=\"https://efavdb.com/wp-content/uploads/2019/12/dd.png\"></a></p>\n<p>For example, if an investor once held $100, but now holds only $90, his drawdown is currently $10. We will provide some results that characterize how unlikely it is for the investor to have a large drawdown of $\\(k\\), given knowledge of the statistics of his&nbsp;bets.</p>\n<p>We will take as our model system a biased random walk. The probability that at step <span class=\"math\">\\(t\\)</span> the investment goes from <span class=\"math\">\\(k^{\\prime}\\)</span> to <span class=\"math\">\\(k\\)</span> will be taken to be independent of time and given&nbsp;by\n</p>\n<div class=\"math\">\\begin{eqnarray}\\tag{1} \\label{step_distribution}\np(k^{\\prime} \\to k) = \\tau(k - k^{\\prime}).\n\\end{eqnarray}</div>\n<p>\nWe will assume that this has a positive bias <span class=\"math\">\\(\\mu\\)</span>, so that on average the investor makes money. With this assumption, we show below that for <span class=\"math\">\\(\\vert k \\vert\\)</span> more than a few step sizes, the drawdown distribution has an exponential&nbsp;form,\n</p>\n<div class=\"math\">\\begin{eqnarray}\\tag{2} \\label{exponential}\np(k) \\propto \\exp\\left( - \\alpha \\vert k \\vert \\right)\n\\end{eqnarray}</div>\n<p>\nwhere the decay constant <span class=\"math\">\\(\\alpha\\)</span>&nbsp;satisfies\n</p>\n<div class=\"math\">\\begin{eqnarray}\\tag{3} \\label{dd_decay_eqn}\n1 = \\int_{-\\infty}^{\\infty} \\exp\\left( \\alpha j \\right) \\tau(-j) dj.\n\\end{eqnarray}</div>\n<p>\nThe form (\\ref{exponential}) holds for general distributions and (\\ref{dd_decay_eqn}) provides the formula for obtaining <span class=\"math\">\\(\\alpha\\)</span> in this case. However, in the limit where the mean drift <span class=\"math\">\\(\\mu\\)</span> in <span class=\"math\">\\(\\tau\\)</span> is small relative to its standard deviation, <span class=\"math\">\\(\\sigma\\)</span>, we show that the solution to (\\ref{dd_decay_eqn}) has a universal form,&nbsp;giving\n</p>\n<div class=\"math\">\\begin{eqnarray}\\tag{4} \\label{exponential_universal}\np(k) \\propto \\exp\\left( - 2 \\frac{\\mu}{\\sigma^2} \\vert k \\vert \\right).\n\\end{eqnarray}</div>\n<p>\nBecause it is difficult to find very high drift investments, this simple form should hold for most real world investments (under the assumption of a Markov process). It can be used to give one a sense of how much time they can expect to sit at a particular drawdown, given estimates for <span class=\"math\">\\(\\mu\\)</span> and <span class=\"math\">\\(\\sigma\\)</span>.</p>\n<p>The results (\\ref{exponential} - \\ref{exponential_universal}) are the main results of this post. These may be new, but could also be well-known to finance theorists &#8212; we are not sure. We illustrate their accuracy in the following section using a numerical example, and provide derivations in an&nbsp;appendix.</p>\n<h2>Numerical examples in&nbsp;python</h2>\n<p>Here, we will consider two different kinds of random walk &#8212; one where the steps are always the same size, but there is bias in the forward direction, and the other where the steps are taken from a Gaussian or normal distribution. The code below carries out a simulated investing scenario over one million&nbsp;steps.</p>\n<div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">binary</span><span class=\"p\">(</span><span class=\"n\">mu</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Return either mu - 1 or mu + 1 with equal probability.</span>\n<span class=\"sd\">    Note unit std.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">return</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">choice</span><span class=\"p\">([</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">])</span> <span class=\"o\">+</span> <span class=\"n\">mu</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">normal_random_step</span><span class=\"p\">(</span><span class=\"n\">mu</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Return a random unit normal with unit std.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">return</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">randn</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"n\">mu</span>\n\n<span class=\"c1\"># CONSTANTS</span>\n<span class=\"n\">TIME_STEPS</span> <span class=\"o\">=</span> <span class=\"mi\">10</span> <span class=\"o\">**</span> <span class=\"mi\">6</span>\n<span class=\"n\">MU</span> <span class=\"o\">=</span> <span class=\"mf\">0.1</span>\n\n<span class=\"c1\"># BINARY WALK</span>\n<span class=\"n\">position</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"n\">max_position_to_date</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"n\">drawdowns_binary</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"k\">for</span> <span class=\"n\">time</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">TIME_STEPS</span><span class=\"p\">):</span>\n    <span class=\"n\">position</span> <span class=\"o\">+=</span> <span class=\"n\">STEP_FUNC</span><span class=\"p\">(</span><span class=\"n\">MU</span><span class=\"p\">)</span>\n    <span class=\"n\">max_position_to_date</span> <span class=\"o\">=</span> <span class=\"nb\">max</span><span class=\"p\">(</span><span class=\"n\">max_position_to_date</span><span class=\"p\">,</span> <span class=\"n\">position</span><span class=\"p\">)</span>\n    <span class=\"n\">drawdowns_binary</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">max_position_to_date</span> <span class=\"o\">-</span> <span class=\"n\">position</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># GAUSSIAN / NORMAL WALK</span>\n<span class=\"n\">STEP_FUNC</span> <span class=\"o\">=</span> <span class=\"n\">normal_random_step</span>\n<span class=\"n\">position</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"n\">max_position_to_date</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"n\">drawdowns_normal</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"k\">for</span> <span class=\"n\">time</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">TIME_STEPS</span><span class=\"p\">):</span>\n    <span class=\"n\">position</span> <span class=\"o\">+=</span> <span class=\"n\">STEP_FUNC</span><span class=\"p\">(</span><span class=\"n\">MU</span><span class=\"p\">)</span>\n    <span class=\"n\">max_position_to_date</span> <span class=\"o\">=</span> <span class=\"nb\">max</span><span class=\"p\">(</span><span class=\"n\">max_position_to_date</span><span class=\"p\">,</span> <span class=\"n\">position</span><span class=\"p\">)</span>\n    <span class=\"n\">drawdowns_normal</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">max_position_to_date</span> <span class=\"o\">-</span> <span class=\"n\">position</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<p><a href=\"https://efavdb.com/wp-content/uploads/2019/12/dd_normal.png\"><img alt=\"dd_normal\" src=\"https://efavdb.com/wp-content/uploads/2019/12/dd_normal.png\"></a></p>\n<p>You can see in the code that we have a loop over steps. At each step, we append to a list of observed drawdown values. A plot of the histogram of these values for the Normal case at <span class=\"math\">\\(\\mu = 0.1\\)</span> is shown at&nbsp;right.</p>\n<p>To check whether our theoretical forms are accurate, it is useful to plot the cumulative distribution functions vs the theoretical forms &#8212; the latter will again be exponential with the same <span class=\"math\">\\(\\alpha\\)</span> values as the probability distribution functions. It turns out that the exponent <span class=\"math\">\\(\\alpha\\)</span> that solves (\\ref{dd_decay_eqn}) is always given by the universal form for a Gaussian. However, for the binary walker, we need to solve for this numerically in general. The following code snippet does&nbsp;this.</p>\n<div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">scipy.optimize</span> <span class=\"kn\">import</span> <span class=\"n\">fsolve</span>\n\n<span class=\"c1\"># Solving numerically for binary case.</span>\n<span class=\"n\">binary_alpha_func</span> <span class=\"o\">=</span> <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"mi\">1</span> <span class=\"o\">-</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">exp</span><span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">*</span> <span class=\"n\">MU</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">cosh</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"n\">alpha_initial_guess</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">4</span>\n<span class=\"n\">alpha_solution</span> <span class=\"o\">=</span> <span class=\"n\">fsolve</span><span class=\"p\">(</span><span class=\"n\">binary_alpha_func</span><span class=\"p\">,</span> <span class=\"n\">alpha_initial_guess</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<p>A plot of the function above and the solution when <span class=\"math\">\\(\\mu = 0.85\\)</span> is shown below. Note that there is always an unphysical solution at <span class=\"math\">\\(\\alpha =0\\)</span> &#8212; this should be&nbsp;ignored.</p>\n<p><a href=\"https://efavdb.com/wp-content/uploads/2019/12/binary_sol.png\"><img alt=\"binary_sol\" src=\"https://efavdb.com/wp-content/uploads/2019/12/binary_sol.png\"></a></p>\n<p>Using the above results, I have plotted the empirical cdfs versus <span class=\"math\">\\(k\\)</span> for both walk distributions. The values are shown below for <span class=\"math\">\\(\\mu = 0.1\\)</span> (left) and <span class=\"math\">\\(\\mu = 0.85\\)</span> (right). The slopes of the theoretical and numerical results are what should be compared as these give the value of <span class=\"math\">\\(\\alpha\\)</span>. Note that <span class=\"math\">\\(\\mu = 0.1\\)</span> is a small drift relative to the standard deviation (<span class=\"math\">\\(\\sigma = 1\\)</span>, here), but <span class=\"math\">\\(\\mu = 0.85\\)</span> is not. This is why at left the universal form gives us a good fit to the decay rates for both systems, but at right we need our numerical solution to (\\ref{dd_decay_eqn}) to get the binary decay&nbsp;rate.</p>\n<p><a href=\"https://efavdb.com/wp-content/uploads/2019/12/results.png\"><img alt=\"results\" src=\"https://efavdb.com/wp-content/uploads/2019/12/results.png\"></a></p>\n<p>In conclusion, we have found that the exponential form of drawdown works quite well in these examples, with the theoretical results (\\ref{exponential} - \\ref{exponential_universal}) providing methods for identifying the exponents. In particular, the plot at left above illustrates the universality of form (\\ref{exponential_universal}) &#8212; it holds for all walks, provided we are in the small bias&nbsp;limit.</p>\n<h2>Appendix:&nbsp;Derivations</h2>\n<p>To derive the exponential form, we consider an integral equation for the drawdown probability <span class=\"math\">\\(p\\)</span>. At equilibrium, we&nbsp;have\n</p>\n<div class=\"math\">\\begin{eqnarray}\\tag{A1}\np(k) = \\int_{-\\infty}^{0} p(k^{\\prime}) T(k^{\\prime}, k) dk^{\\prime}.\n\\end{eqnarray}</div>\n<p>\nwhere <span class=\"math\">\\(T\\)</span> is the transition function for the drawdown process. In the tail, we can ignore the boundary at zero and this goes&nbsp;to\n</p>\n<div class=\"math\">\\begin{eqnarray}\\tag{A2}\np(k) = \\int_{-\\infty}^{\\infty} p(k^{\\prime}) \\tau(k - k^{\\prime}) dk^{\\prime},\n\\end{eqnarray}</div>\n<p>\nwhere we have taken the upper limit to infinity, assuming that the transition function has a finite length so that this is acceptable. We can solve this by positing an exponential solution of&nbsp;form\n</p>\n<div class=\"math\">\\begin{eqnarray}\\tag{A3}\np(k) \\equiv A \\exp\\left(\\alpha k \\right).\n\\end{eqnarray}</div>\n<p>\nPlugging this into the above&nbsp;gives\n</p>\n<div class=\"math\">\\begin{eqnarray} \\nonumber\nA \\exp\\left(\\alpha k \\right) &amp;=&amp; \\int_{-\\infty}^{\\infty} A \\exp\\left(\\alpha k^{\\prime} \\right) \\tau(k - k^{\\prime}) dk^{\\prime}\\ \\tag{A4}\n&amp;=&amp; A \\exp\\left(\\alpha k \\right) \\int_{-\\infty}^{\\infty} \\exp\\left( \\alpha j \\right) \\tau(-j) dj\n\\end{eqnarray}</div>\n<p>\nSimplifying this gives&nbsp;(\\ref{exponential}).</p>\n<p>Now, to get the universal form, we make use of the cumulant expansion,&nbsp;writing\n</p>\n<div class=\"math\">\\begin{eqnarray} \\nonumber\n1 &amp;=&amp; \\int_{-\\infty}^{\\infty} \\exp\\left( \\alpha j \\right) \\tau(-j) dj \\\n&amp;\\equiv &amp; \\exp \\left ( - \\mu \\alpha + \\sigma^2 \\frac{\\alpha^2}{2} + \\ldots \\right) \\tag{A5}\n\\end{eqnarray}</div>\n<p>\nProvided the expansion converges quickly, we&nbsp;obtain\n</p>\n<div class=\"math\">\\begin{eqnarray}\n- \\mu \\alpha + \\sigma^2 \\frac{\\alpha^2}{2} + \\ldots = 0 \\tag{A6}\n\\end{eqnarray}</div>\n<p>\ngiving\n</p>\n<div class=\"math\">\\begin{eqnarray} \\label{cppi_alpha_asymptotic} \\tag{A7}\n\\alpha \\sim 2 \\frac{\\mu}{\\sigma^2}\n\\end{eqnarray}</div>\n<p>\nWith this solution, the <span class=\"math\">\\(k\\)</span>-th term in the cumulant expansion goes&nbsp;like\n</p>\n<div class=\"math\">\\begin{eqnarray} \\tag{A8}\n\\frac{2^k}{k!} \\left( \\frac{\\mu}{\\sigma^2} \\right)^k O(\\overline{x^k}) \\sim \\frac{2^k}{k!} \\left( \\frac{\\mu}{\\sigma} \\right)^k\n\\end{eqnarray}</div>\n<p>\nassuming the the jumps are constrained over some length scale proportional to <span class=\"math\">\\(\\sigma\\)</span>. We see that provided the drift to standard deviation is small, the series converges quickly and our approximation is universally good. Unless you&#8217;re cursed with an unusually large drift ratio for a given move, this form should work&nbsp;well.</p>\n<script type=\"text/javascript\">if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {\n    var align = \"center\",\n        indent = \"0em\",\n        linebreak = \"false\";\n\n    if (false) {\n        align = (screen.width < 768) ? \"left\" : align;\n        indent = (screen.width < 768) ? \"0em\" : indent;\n        linebreak = (screen.width < 768) ? 'true' : linebreak;\n    }\n\n    var mathjaxscript = document.createElement('script');\n    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';\n    mathjaxscript.type = 'text/javascript';\n    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';\n\n    var configscript = document.createElement('script');\n    configscript.type = 'text/x-mathjax-config';\n    configscript[(window.opera ? \"innerHTML\" : \"text\")] =\n        \"MathJax.Hub.Config({\" +\n        \"    config: ['MMLorHTML.js'],\" +\n        \"    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" +\n        \"    jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" +\n        \"    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" +\n        \"    displayAlign: '\"+ align +\"',\" +\n        \"    displayIndent: '\"+ indent +\"',\" +\n        \"    showMathMenu: true,\" +\n        \"    messageStyle: 'normal',\" +\n        \"    tex2jax: { \" +\n        \"        inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" +\n        \"        displayMath: [ ['$$','$$'] ],\" +\n        \"        processEscapes: true,\" +\n        \"        preview: 'TeX',\" +\n        \"    }, \" +\n        \"    'HTML-CSS': { \" +\n        \"        availableFonts: ['STIX', 'TeX'],\" +\n        \"        preferredFont: 'STIX',\" +\n        \"        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" +\n        \"        linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" +\n        \"    }, \" +\n        \"}); \" +\n        \"if ('default' !== 'default') {\" +\n            \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" +\n                \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" +\n                \"VARIANT['normal'].fonts.unshift('MathJax_default');\" +\n                \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" +\n                \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" +\n                \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" +\n            \"});\" +\n            \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" +\n                \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" +\n                \"VARIANT['normal'].fonts.unshift('MathJax_default');\" +\n                \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" +\n                \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" +\n                \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" +\n            \"});\" +\n        \"}\";\n\n    (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript);\n    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);\n}\n</script>",
  "category": ""
}