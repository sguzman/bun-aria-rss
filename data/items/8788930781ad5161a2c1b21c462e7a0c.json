{
  "title": "Dask Development Log",
  "link": "",
  "updated": "2016-12-12T00:00:00+00:00",
  "id": "https://mrocklin.github.io/blog/work/2016/12/12/dask-dev-2",
  "content": "<p><em>This work is supported by <a href=\"http://continuum.io\">Continuum Analytics</a>\nthe <a href=\"http://www.darpa.mil/program/XDATA\">XDATA Program</a>\nand the Data Driven Discovery Initiative from the <a href=\"https://www.moore.org/\">Moore\nFoundation</a></em></p>\n\n<p>To increase transparency I’m blogging weekly about the work done on Dask and\nrelated projects during the previous week.  This log covers work done between\n2016-12-05 and 2016-12-12.  Nothing here is stable or ready for production.\nThis blogpost is written in haste, so refined polish should not be expected.</p>\n\n<p>Themes of last week:</p>\n\n<ol>\n  <li>Dask.array without known chunk sizes</li>\n  <li>Import time</li>\n  <li>Fastparquet blogpost and feedback</li>\n  <li>Scheduler improvements for 1000+ worker clusters</li>\n  <li>Channels and inter-client communication</li>\n  <li>New dependencies?</li>\n</ol>\n\n<h3 id=\"dask-array-without-known-chunk-sizes\">Dask array without known chunk sizes</h3>\n\n<p>Dask arrays can now work even in situations where we don’t know the exact chunk\nsize.  This is particularly important because it allows us to convert\ndask.dataframes to dask.arrays in a standard analysis cycle that includes both\ndata preparation and statistical or machine learning algorithms.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">df</span><span class=\"p\">.</span><span class=\"n\">values</span>\n\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">df</span><span class=\"p\">.</span><span class=\"n\">to_records</span><span class=\"p\">()</span>\n</code></pre></div></div>\n\n<p>This work was motivated by the work of Christopher White on building scalable\nsolvers for problems like logistic regression and generalized linear models\nover at <a href=\"https://github.com/moody-marlin/dask-glm\">dask-glm</a>.</p>\n\n<p>As a pleasant side effect we can now also index dask.arrays with dask.arrays (a\nprevious limitation)</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">x</span><span class=\"p\">[</span><span class=\"n\">x</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n</code></pre></div></div>\n\n<p>and mutate dask.arrays in certain cases with setitem</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">x</span><span class=\"p\">[</span><span class=\"n\">x</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n</code></pre></div></div>\n\n<p>Both of which are frequntly requested.</p>\n\n<p>However, there are still holes in this implementation and many operations (like\nslicing) generally don’t work on arrays without known chunk sizes.  We’re\nincreasing capability here but blurring the lines of what is possible and what\nis not possible, which used to be very clear.</p>\n\n<ul>\n  <li><a href=\"https://github.com/dask/dask/pull/1838\">https://github.com/dask/dask/pull/1838</a></li>\n  <li><a href=\"https://github.com/dask/dask/pull/1840\">https://github.com/dask/dask/pull/1840</a></li>\n</ul>\n\n<h3 id=\"import-time\">Import time</h3>\n\n<p>Import times had been steadily climbing for a while, rising above one second at\ntimes.  These were reduced by Antoine Pitrou down to a more reasonable 300ms.</p>\n\n<ul>\n  <li><a href=\"https://github.com/dask/dask/pull/1833\">https://github.com/dask/dask/pull/1833</a></li>\n  <li><a href=\"https://github.com/dask/distributed/pull/718\">https://github.com/dask/distributed/pull/718</a></li>\n</ul>\n\n<h3 id=\"fastparquet-blogpost-and-feedback\">FastParquet blogpost and feedback</h3>\n\n<p>Martin Durant has built a nice Python Parquet library here: <a href=\"http://fastparquet.readthedocs.io/en/latest/\">http://fastparquet.readthedocs.io/en/latest/</a>\nand released a blogpost about it last week here: <a href=\"https://www.continuum.io/blog/developer-blog/introducing-fastparquet\">https://www.continuum.io/blog/developer-blog/introducing-fastparquet</a></p>\n\n<p>Since then we’ve gotten some good feedback and error reports (non-string column\nnames etc.)  Martin has been optimizing performance and recently adding append\nsupport.</p>\n\n<ul>\n  <li><a href=\"https://github.com/dask/fastparquet/pull/39\">https://github.com/dask/fastparquet/pull/39</a></li>\n  <li><a href=\"https://github.com/dask/fastparquet/pull/43\">https://github.com/dask/fastparquet/pull/43</a></li>\n</ul>\n\n<h3 id=\"scheduler-optimizations-for-1000-worker-clusters\">Scheduler optimizations for 1000+ worker clusters</h3>\n\n<p>The recent refactoring of the scheduler and worker exposed new opportunities\nfor performance and for measurement.  One of the 1000+ worker deployments here\nin NYC was kind enough to volunteer some compute time to run some experiments.\nIt was very fun having all of the Dask/Bokeh dashboards up at once (there are\nnow half a dozen of these things) giving live monitoring information on a\nthousand-worker deployment.  It’s stunning how clearly performance issues\npresent themselves when you have the right monitoring system.</p>\n\n<p>Anyway, this lead to better sequentialization when handling messages, greatly\nreduced open file handle requirements, and the use of cytoolz over toolz in a\nfew critical areas.</p>\n\n<p>I intend to try this experiment again this week, now with new diagnostics.  To\naid in that we’ve made it very easy to turn timings and counters automatically\ninto live Bokeh plots.  It now takes literally one line of code to add a new\nplot to these pages (left: scheduler right: worker)</p>\n\n<p><a href=\"https://mrocklin.github.io/blog/images/bokeh-counters.gif\">\n  <img src=\"https://mrocklin.github.io/blog/images/bokeh-counters.gif\" alt=\"Dask Bokeh counters page\" width=\"100%\" /></a></p>\n\n<p>Already we can see that the time it takes to connect between workers is\nabsurdly high in the 10ms to 100ms range, highlighting an important performance\nflaw.</p>\n\n<p>This depends on an experimental project,\n<a href=\"https://github.com/jcrist/crick\">crick</a>, by Jim Crist that provides a fast\nT-Digest implemented in C (see also <a href=\"https://github.com/tdunning/t-digest\">Ted Dunning’s\nimplementation</a>.</p>\n\n<ul>\n  <li><a href=\"https://github.com/jcrist/crick\">https://github.com/jcrist/crick</a></li>\n  <li><a href=\"https://github.com/dask/distributed/pull/738\">https://github.com/dask/distributed/pull/738</a></li>\n</ul>\n\n<h3 id=\"channels-and-inter-worker-communication\">Channels and inter-worker communication</h3>\n\n<p>I’m starting to experiment with mechanisms for inter-client communication of\nfutures.  This enables both collaborative workflows (two researchers sharing\nthe same cluster) and also complex workflows in which tasks start other tasks\nin a more streaming setting.</p>\n\n<p>We added a simple mechanism to share a rolling buffer of futures between\nclients:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># Client 1\n</span><span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">Client</span><span class=\"p\">(</span><span class=\"s\">'scheduler:8786'</span><span class=\"p\">)</span>\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">c</span><span class=\"p\">.</span><span class=\"n\">channel</span><span class=\"p\">(</span><span class=\"s\">'x'</span><span class=\"p\">)</span>\n\n<span class=\"n\">future</span> <span class=\"o\">=</span> <span class=\"n\">c</span><span class=\"p\">.</span><span class=\"n\">submit</span><span class=\"p\">(</span><span class=\"n\">inc</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">put</span><span class=\"p\">(</span><span class=\"n\">future</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># Client 1\n</span><span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">Client</span><span class=\"p\">(</span><span class=\"s\">'scheduler:8786'</span><span class=\"p\">)</span>\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">c</span><span class=\"p\">.</span><span class=\"n\">channel</span><span class=\"p\">(</span><span class=\"s\">'x'</span><span class=\"p\">)</span>\n\n<span class=\"n\">future</span> <span class=\"o\">=</span> <span class=\"nb\">next</span><span class=\"p\">(</span><span class=\"nb\">iter</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">))</span>\n</code></pre></div></div>\n\n<p>Additionally, this relatively simple mechanism was built external to the\nscheduler and client, establishing a pattern we can repeat in the future for\nmore complex inter-client communication systems.  Generally I’m on the lookout\nfor other ways to make the system more extensible.  This range of extension\nrequests for the scheduler is somewhat large these days and we’d like to find\nways to keep these expansions maintainable going forward.</p>\n\n<ul>\n  <li><a href=\"https://github.com/dask/distributed/pull/729\">https://github.com/dask/distributed/pull/729</a></li>\n</ul>\n\n<h3 id=\"new-dependency-sorted-collections\">New dependency: Sorted collections</h3>\n\n<p>The scheduler is now using the <code class=\"language-plaintext highlighter-rouge\">sortedcollections</code> module, which is based off\nof <code class=\"language-plaintext highlighter-rouge\">sortedcontainers</code> which is a pure-Python library offering sorted containers\n<code class=\"language-plaintext highlighter-rouge\">SortedList</code>, <code class=\"language-plaintext highlighter-rouge\">SortedSet</code>, <code class=\"language-plaintext highlighter-rouge\">ValueSortedDict</code>, etc. at C-extensions speeds.</p>\n\n<p>So far I’m pretty sold on these libraries.  I encourage other library\nmaintainers to consider them.</p>\n\n<ul>\n  <li><a href=\"https://www.youtube.com/watch?v=7z2Ki44Vs4E\">https://www.youtube.com/watch?v=7z2Ki44Vs4E</a></li>\n  <li><a href=\"http://www.grantjenks.com/docs/sortedcontainers/introduction.html\">http://www.grantjenks.com/docs/sortedcontainers/introduction.html</a></li>\n  <li><a href=\"http://www.grantjenks.com/docs/sortedcollections/\">http://www.grantjenks.com/docs/sortedcollections/</a></li>\n</ul>"
}