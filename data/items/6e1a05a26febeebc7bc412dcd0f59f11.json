{
  "title": "Filtering out duplicate pandas.DataFrame rows",
  "link": "",
  "published": "2011-11-07T00:00:00-08:00",
  "updated": "2011-11-07T00:00:00-08:00",
  "author": {
    "name": "Wes McKinney"
  },
  "id": "tag:wesmckinney.com,2011-11-07:/blog/filtering-out-duplicate-dataframe-rows/",
  "summary": "<p><a href=\"http://twitter.com/#!/seanjtaylor\" title=\"Sean Taylor\" target=\"_blank\">Sean Taylor</a> recently alerted me to the fact that there wasn't an easy way to filter out duplicate rows in a pandas DataFrame. R has the <a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/duplicated.html\" title=\"duplicated\" target=\"_blank\">duplicated</a> function which serves this purpose quite nicely. The R method's implementation is kind of kludgy in my opinion (from \"The data frame method â€¦</p>",
  "content": "<p><a href=\"http://twitter.com/#!/seanjtaylor\" title=\"Sean Taylor\" target=\"_blank\">Sean Taylor</a> recently alerted me to the fact that there wasn't an easy way to filter out duplicate rows in a pandas DataFrame. R has the <a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/duplicated.html\" title=\"duplicated\" target=\"_blank\">duplicated</a> function which serves this purpose quite nicely. The R method's implementation is kind of kludgy in my opinion (from \"The data frame method works by pasting together a character representation of the rows\"), but in any case I set about writing a Python version from first principles.</p>\n<p>So a <code>drop_duplicates</code> method should be able to either consider a subset of the columns or all of the columns for determining which are \"duplicates\". It occurred to me that a reasonably fast and efficient way to do this was to use <a href=\"http://pandas.sourceforge.net/groupby.html\" title=\"GroupBy\" target=\"_blank\">GroupBy</a>. You have to know a bit about the internals, but it's fairly straightforward otherwise:</p>\n<div class=\"github\"><pre><span></span><code><span class=\"n\">grouped</span> <span class=\"o\">=</span> <span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">groupby</span><span class=\"p\">(</span><span class=\"n\">cols_to_consider</span><span class=\"p\">)</span>\n<span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">gp_keys</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">gp_keys</span> <span class=\"ow\">in</span> <span class=\"n\">grouped</span><span class=\"o\">.</span><span class=\"n\">groups</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">()]</span>\n<span class=\"n\">unique_df</span> <span class=\"o\">=</span> <span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">reindex</span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"p\">)</span>\n</code></pre></div>\n\n<p>For a faster and more direct implementation in Cython, I decided to use a list of tuples and a dict to keep track of whether a row has been \"seen\" or not:</p>\n<div class=\"github\"><pre><span></span><code><span class=\"k\">def</span> <span class=\"nf\">duplicated</span><span class=\"p\">(</span><span class=\"nb\">list</span> <span class=\"n\">values</span><span class=\"p\">,</span> <span class=\"n\">take_last</span><span class=\"o\">=</span><span class=\"bp\">False</span><span class=\"p\">):</span>\n    <span class=\"k\">cdef</span><span class=\"p\">:</span>\n        <span class=\"nb\">Py_ssize_t</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">n</span>\n        <span class=\"nb\">dict</span> <span class=\"n\">seen</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"nb\">object</span> <span class=\"n\">row</span>\n\n    <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"p\">)</span>\n    <span class=\"k\">cdef</span> <span class=\"kt\">ndarray</span>[<span class=\"kt\">uint8_t</span>] <span class=\"nf\">result</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">zeros</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">uint8</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">take_last</span><span class=\"p\">:</span>\n        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"k\">from</span> <span class=\"nn\">n</span> <span class=\"o\">&gt;</span> <span class=\"n\">i</span> <span class=\"o\">&gt;=</span> <span class=\"mf\">0</span><span class=\"p\">:</span>\n            <span class=\"n\">row</span> <span class=\"o\">=</span> <span class=\"n\">values</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span>\n            <span class=\"k\">if</span> <span class=\"n\">row</span> <span class=\"ow\">in</span> <span class=\"n\">seen</span><span class=\"p\">:</span>\n                <span class=\"n\">result</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mf\">1</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">seen</span><span class=\"p\">[</span><span class=\"n\">row</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">None</span>\n                <span class=\"n\">result</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mf\">0</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"k\">from</span> <span class=\"mf\">0</span> <span class=\"o\">&lt;=</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span><span class=\"p\">:</span>\n            <span class=\"n\">row</span> <span class=\"o\">=</span> <span class=\"n\">values</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span>\n            <span class=\"k\">if</span> <span class=\"n\">row</span> <span class=\"ow\">in</span> <span class=\"n\">seen</span><span class=\"p\">:</span>\n                <span class=\"n\">result</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mf\">1</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">seen</span><span class=\"p\">[</span><span class=\"n\">row</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">None</span>\n                <span class=\"n\">result</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mf\">0</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">view</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">bool_</span><span class=\"p\">)</span>\n</code></pre></div>\n\n<p>Aside: the <code>uint8</code> and casting to <code>np.bool_</code> thing is there because the buffer interface doesn't work quite right with boolean arrays in Python 2.5. So as soon as I drop Python 2.5 compatibility (probably around the end of the year), I'll go through and fix that stuff up. As a second aside, using a dict with dummy keys was coming out a bit faster than using a set in Cython, for reasons unknown to me.</p>\n<p>So, on the Python side, the new DataFrame function just takes the boolean vector returned by that Cython function and uses it to select out the rows:</p>\n<div class=\"github\"><pre><span></span><code>In [21]: df\nOut[21]:\n    A  B  C\n0   a  c  0\n1   b  c  1\n2   c  b  2\n3   d  a  0\n4   e  c  1\n5   a  a  2\n6   b  b  0\n7   c  b  1\n8   d  b  2\n9   e  b  0\n10  a  a  1\n11  b  a  2\n12  c  c  0\n13  d  a  1\n14  e  c  2\n\nIn [22]: df.drop_duplicates(&#39;A&#39;)\nOut[22]:\n   A  B  C\n0  a  c  0\n1  b  c  1\n2  c  b  2\n3  d  a  0\n4  e  c  1\n\nIn [23]: df.drop_duplicates([&#39;A&#39;, &#39;B&#39;])\nOut[23]:\n    A  B  C\n0   a  c  0\n1   b  c  1\n2   c  b  2\n3   d  a  0\n4   e  c  1\n5   a  a  2\n6   b  b  0\n8   d  b  2\n9   e  b  0\n11  b  a  2\n12  c  c  0\n</code></pre></div>\n\n<p>Not passing any particular column or columns is the same as passing all of them.</p>\n<p>I was impressed by the performance:</p>\n<div class=\"github\"><pre><span></span><code><span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">26</span><span class=\"p\">]:</span> <span class=\"kn\">from</span> <span class=\"nn\">pandas.util.testing</span> <span class=\"kn\">import</span> <span class=\"n\">rands</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">27</span><span class=\"p\">]:</span> <span class=\"n\">k1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">rands</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"n\">xrange</span><span class=\"p\">(</span><span class=\"mi\">100000</span><span class=\"p\">)]</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">28</span><span class=\"p\">]:</span> <span class=\"n\">k2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">rands</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"n\">xrange</span><span class=\"p\">(</span><span class=\"mi\">100000</span><span class=\"p\">)]</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">29</span><span class=\"p\">]:</span> <span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">DataFrame</span><span class=\"p\">({</span><span class=\"s1\">&#39;A&#39;</span> <span class=\"p\">:</span> <span class=\"n\">k1</span><span class=\"p\">,</span> <span class=\"s1\">&#39;B&#39;</span> <span class=\"p\">:</span> <span class=\"n\">k2</span><span class=\"p\">,</span> <span class=\"s1\">&#39;C&#39;</span> <span class=\"p\">:</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">tile</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">arange</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">),</span> <span class=\"mi\">1000</span><span class=\"p\">)})</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">30</span><span class=\"p\">]:</span> <span class=\"n\">timeit</span> <span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">drop_duplicates</span><span class=\"p\">([</span><span class=\"s1\">&#39;A&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;B&#39;</span><span class=\"p\">])</span>\n<span class=\"mi\">100</span> <span class=\"n\">loops</span><span class=\"p\">,</span> <span class=\"n\">best</span> <span class=\"n\">of</span> <span class=\"mi\">3</span><span class=\"p\">:</span> <span class=\"mf\">18.2</span> <span class=\"n\">ms</span> <span class=\"n\">per</span> <span class=\"n\">loop</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">31</span><span class=\"p\">]:</span> <span class=\"n\">timeit</span> <span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">drop_duplicates</span><span class=\"p\">()</span>\n<span class=\"mi\">10</span> <span class=\"n\">loops</span><span class=\"p\">,</span> <span class=\"n\">best</span> <span class=\"n\">of</span> <span class=\"mi\">3</span><span class=\"p\">:</span> <span class=\"mf\">49.8</span> <span class=\"n\">ms</span> <span class=\"n\">per</span> <span class=\"n\">loop</span>\n\n<span class=\"c1\"># the groupby method</span>\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">32</span><span class=\"p\">]:</span> <span class=\"n\">timeit</span> <span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">reindex</span><span class=\"p\">([</span><span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">groupby</span><span class=\"p\">([</span><span class=\"s1\">&#39;A&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;B&#39;</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">groups</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">()])</span>\n<span class=\"mi\">10</span> <span class=\"n\">loops</span><span class=\"p\">,</span> <span class=\"n\">best</span> <span class=\"n\">of</span> <span class=\"mi\">3</span><span class=\"p\">:</span> <span class=\"mf\">56.5</span> <span class=\"n\">ms</span> <span class=\"n\">per</span> <span class=\"n\">loop</span>\n</code></pre></div>\n\n<p>For reference, it's roughly twice as fast as the equivalent R code (though I'm still using R 2.11.1 -- time to upgrade to 2.14!), but perhaps not too shocking as the R function is converting each row into a string first.</p>\n<div class=\"github\"><pre><span></span><code><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"mi\">100000</span><span class=\"w\"></span>\n\n<span class=\"n\">k1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">rep</span><span class=\"p\">(</span><span class=\"n\">NA</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"n\">k2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">rep</span><span class=\"p\">(</span><span class=\"n\">NA</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"ow\">in</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"err\">:</span><span class=\"n\">N</span><span class=\"p\">)</span><span class=\"err\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">k1</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">paste</span><span class=\"p\">(</span><span class=\"n\">sample</span><span class=\"p\">(</span><span class=\"n\">letters</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">collapse</span><span class=\"o\">=</span><span class=\"ss\">&quot;&quot;</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">k2</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">paste</span><span class=\"p\">(</span><span class=\"n\">sample</span><span class=\"p\">(</span><span class=\"n\">letters</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">collapse</span><span class=\"o\">=</span><span class=\"ss\">&quot;&quot;</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"err\">}</span><span class=\"w\"></span>\n<span class=\"n\">df</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"k\">data</span><span class=\"p\">.</span><span class=\"n\">frame</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">=</span><span class=\"n\">k1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">=</span><span class=\"n\">k2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"o\">=</span><span class=\"n\">rep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"err\">:</span><span class=\"mi\">100</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"mi\">100</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"n\">df2</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"k\">data</span><span class=\"p\">.</span><span class=\"n\">frame</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">=</span><span class=\"n\">k1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">=</span><span class=\"n\">k2</span><span class=\"p\">)</span><span class=\"w\"></span>\n\n<span class=\"n\">timings</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"nc\">numeric</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"n\">timings2</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"nc\">numeric</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"ow\">in</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"err\">:</span><span class=\"mi\">50</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"err\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">gc</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">timings</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">system</span><span class=\"p\">.</span><span class=\"nc\">time</span><span class=\"p\">(</span><span class=\"n\">deduped</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">df</span><span class=\"o\">[</span><span class=\"n\">!duplicated(df),</span><span class=\"o\">]</span><span class=\"p\">)</span><span class=\"o\">[</span><span class=\"n\">3</span><span class=\"o\">]</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">gc</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">timings2</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">system</span><span class=\"p\">.</span><span class=\"nc\">time</span><span class=\"p\">(</span><span class=\"n\">deduped</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">df</span><span class=\"o\">[</span><span class=\"n\">!duplicated(df[,c(&quot;a&quot;, &quot;b&quot;)</span><span class=\"o\">]</span><span class=\"p\">),</span><span class=\"err\">]</span><span class=\"p\">)</span><span class=\"o\">[</span><span class=\"n\">3</span><span class=\"o\">]</span><span class=\"w\"></span>\n<span class=\"err\">}</span><span class=\"w\"></span>\n\n<span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">mean</span><span class=\"p\">(</span><span class=\"n\">timings</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"o\">[</span><span class=\"n\">1</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"mf\">0.09312</span><span class=\"w\"></span>\n<span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">mean</span><span class=\"p\">(</span><span class=\"n\">timings2</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"o\">[</span><span class=\"n\">1</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"mf\">0.04312</span><span class=\"w\"></span>\n</code></pre></div>"
}