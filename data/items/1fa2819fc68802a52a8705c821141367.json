{
  "title": "HTML outputs in Jupyter",
  "link": "",
  "updated": "2019-07-04T00:00:00+00:00",
  "id": "https://mrocklin.github.io/blog/2019/07/04/html-repr",
  "content": "<h2 id=\"summary\">Summary</h2>\n\n<p>User interaction in data science projects can be improved by adding a small\namount of visual deisgn.</p>\n\n<p>To motivate effort around visual design\nwe show several simple-yet-useful examples.\nThe code behind these examples is small and accessible to most Python\ndevelopers, even if they don’t have much HTML experience.</p>\n\n<p>This post in particular focuses on Jupyter’s ability\nto add HTML output to any object.\nThis can either be full-fledged interactive widgets,\nor just rich static outputs like tables or diagrams.\nWe hope that by showing examples here we will inspire some throughts in other\nprojects.</p>\n\n<p>This post was supported by replies to <a href=\"https://twitter.com/mrocklin/status/1145265419638513669\">this tweet</a>.\nThe rest of this post is just examples.</p>\n\n<h3 id=\"iris\">Iris</h3>\n\n<p>I originally decided to write this post after reading another blogpost from the\nUK Met office, where they included the HTML output of their library Iris in a\na <a href=\"https://medium.com/informatics-lab/creating-a-data-format-for-high-momentum-datasets-a394fa48b671\">blogpost</a></p>\n\n<p><img src=\"https://user-images.githubusercontent.com/3473068/39761846-0da53302-52d1-11e8-9f95-94877801ee78.png\" width=\"100%\" /></p>\n\n<p>(work by <a href=\"https://github.com/DPeterK\">Peter Killick</a>, post by <a href=\"https://github.com/tam203\">Theo\nMcCaie</a>)</p>\n\n<p>The fact that the output provided by an interactive session is the same\noutput that you would provide in a published result helps everyone.  The\ninteractive user gets high quality feedback, and there is no\nproductionizing step as we move from the nitty-gritty of development to\npolish of publication.</p>\n\n<h3 id=\"shapely\">Shapely</h3>\n\n<p>Shapely deals with shapes, such as are used in geographic information systems.\nThey render themselves just as shapes in Jupyter using SVG.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">shapely.geometry</span> <span class=\"kn\">import</span> <span class=\"n\">Polygon</span>\n\n<span class=\"n\">Polygon</span><span class=\"p\">([(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)])</span>\n</code></pre></div></div>\n\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"100.0\" height=\"100.0\" viewBox=\"-0.04 -0.04 1.08 1.08\" preserveAspectRatio=\"xMinYMin meet\">\n  <g transform=\"matrix(1,0,0,-1,0,1.0)\">\n  <path fill-rule=\"evenodd\" fill=\"#66cc99\" stroke=\"#555555\" stroke-width=\"0.0216\" opacity=\"0.6\" d=\"M 0.0,0.0 L 0.0,1.0 L 1.0,0.0 L 0.0,0.0 z\" />\n  </g>\n</svg>\n\n<p>Note that the image that you see above isn’t an image like a PNG or JPEG.  It’s\nSVG.  If you were to look at the source of this post you would see the actual\nvalues and content of the triangle.</p>\n\n<p>(Thanks to Andy Jones for <a href=\"https://twitter.com/andy_l_jones/status/1145265978173009921\">the\npointer</a>)</p>\n\n<h3 id=\"logs\">Logs</h3>\n\n<p>This logs widget provides collapsable log outputs from a set of workers in a\ncluster.</p>\n\n<p><img src=\"https://user-images.githubusercontent.com/1610850/56971497-44190180-6b61-11e9-85e9-0c3d9279f8f1.png\" width=\"100%\" /></p>\n\n<p>The code for these is simple.  Here’s the implementation for the logs widget</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">Log</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">):</span>\n    <span class=\"s\">\"\"\"A container for logs.\"\"\"</span>\n\n     <span class=\"k\">def</span> <span class=\"nf\">_widget</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"kn\">from</span> <span class=\"nn\">ipywidgets</span> <span class=\"kn\">import</span> <span class=\"n\">HTML</span>\n        <span class=\"k\">return</span> <span class=\"n\">HTML</span><span class=\"p\">(</span>\n            <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"s\">\"&lt;pre&gt;&lt;code&gt;{logs}&lt;/code&gt;&lt;/pre&gt;\"</span><span class=\"p\">.</span><span class=\"nb\">format</span><span class=\"p\">(</span><span class=\"n\">logs</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"p\">)</span>\n        <span class=\"p\">)</span>\n\n     <span class=\"k\">def</span> <span class=\"nf\">_ipython_display_</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">_widget</span><span class=\"p\">().</span><span class=\"n\">_ipython_display_</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n\n\n <span class=\"k\">class</span> <span class=\"nc\">Logs</span><span class=\"p\">(</span><span class=\"nb\">dict</span><span class=\"p\">):</span>\n    <span class=\"s\">\"\"\"A container for multiple logs.\"\"\"</span>\n\n     <span class=\"k\">def</span> <span class=\"nf\">_widget</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"kn\">from</span> <span class=\"nn\">ipywidgets</span> <span class=\"kn\">import</span> <span class=\"n\">Accordion</span>\n        <span class=\"n\">accordion</span> <span class=\"o\">=</span> <span class=\"n\">Accordion</span><span class=\"p\">(</span><span class=\"n\">children</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">log</span><span class=\"p\">.</span><span class=\"n\">_widget</span><span class=\"p\">()</span> <span class=\"k\">for</span> <span class=\"n\">log</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">values</span><span class=\"p\">()])</span>\n        <span class=\"p\">[</span><span class=\"n\">accordion</span><span class=\"p\">.</span><span class=\"n\">set_title</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">title</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">title</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">keys</span><span class=\"p\">())]</span>\n        <span class=\"k\">return</span> <span class=\"n\">accordion</span>\n\n     <span class=\"k\">def</span> <span class=\"nf\">_ipython_display_</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">_widget</span><span class=\"p\">().</span><span class=\"n\">_ipython_display_</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>This solves a common usability problem, of getting blasted with a ton of output\nin Jupyter and then having to scroll around.  Using relatively simple HTML\nhelps us avoid this deluge of information and makes it much more nicely\nnavigable.</p>\n\n<p>(Work by <a href=\"https://github.com/jacobtomlinson\">Jacob Tomlinson</a>)</p>\n\n<h3 id=\"xarray\">Xarray</h3>\n\n<p>Here is another <a href=\"https://github.com/pydata/xarray/issues/1627\">in a PR</a> for Xarray.</p>\n\n<p><img src=\"https://mrocklin.github.io/blog/images/xarray-html-repr.png\" width=\"70%\" /></p>\n\n<p>It’s all about optionally exposing information, you can play with it over at\n<a href=\"https://nbviewer.jupyter.org/gist/benbovy/3009f342fb283bd0288125a1f7883ef2\">nbviewer</a>.</p>\n\n<p>(Work by <a href=\"https://github.com/benbovy\">Benoit Bovy</a>)</p>\n\n<h3 id=\"snakeviz\">Snakeviz</h3>\n\n<p>The <a href=\"https://jiffyclub.github.io/snakeviz/\">Snakeviz project</a> makes it easy to\nvisualize and interact with profiling output.  (I personally love this project\n(thanks <a href=\"https://penandpants.com/\">Matt Davis!</a>)</p>\n\n<p>Now that it can embed its output directly in Jupyter it’s even easier to use.</p>\n\n<p><img src=\"https://pbs.twimg.com/media/D-UImHnXUAAxBsN.jpg:large\" width=\"100%\" alt=\"Snakeviz output in Jupyter\" /></p>\n\n<p>(Thanks to <a href=\"https://twitter.com/andy_l_jones/status/1145331500839256067\">Andy\nJones</a> for the tip)</p>\n\n<h3 id=\"sympy\">SymPy</h3>\n\n<p>SymPy uses unicode for its rich outputs.  This makes it valid both in the\nnotebook and also in the console.</p>\n\n<p><img src=\"https://mrocklin.github.io/blog/images/sympy-rich-output.png\" width=\"50%\" alt=\"SymPy rich output\" /></p>\n\n<p>These outputs are critical when trying to understand complex mathematical\nequations.  They make SymPy pragmatic for analyzing mathematical equations.</p>\n\n<h3 id=\"pymc3\">PyMC3</h3>\n\n<p>As <a href=\"https://twitter.com/colindcarroll/status/1145326125943590912\">Colin Carroll says</a>, “PyMC3 borrowed <code class=\"language-plaintext highlighter-rouge\">_repr_latex_</code> from sympy, and\nthe graphviz graph from dask-delayed”</p>\n\n<p><img src=\"https://pbs.twimg.com/media/D-UDj1BWwAE4FV9.png\" width=\"70%\" alt=\"PyMC3 rich output\" /></p>\n\n<h3 id=\"dask-array\">Dask Array</h3>\n\n<p>Inspired by these I took a look at how we render Dask Arrays to the screen</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]:</span> <span class=\"kn\">import</span> <span class=\"nn\">dask.array</span> <span class=\"k\">as</span> <span class=\"n\">da</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]:</span> <span class=\"n\">da</span><span class=\"p\">.</span><span class=\"n\">ones</span><span class=\"p\">((</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">1024</span><span class=\"p\">,</span> <span class=\"mi\">1024</span><span class=\"p\">),</span> <span class=\"n\">chunks</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">256</span><span class=\"p\">,</span> <span class=\"mi\">256</span><span class=\"p\">))</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]:</span> <span class=\"n\">dask</span><span class=\"p\">.</span><span class=\"n\">array</span><span class=\"o\">&lt;</span><span class=\"n\">ones</span><span class=\"p\">,</span> <span class=\"n\">shape</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">1024</span><span class=\"p\">,</span> <span class=\"mi\">1024</span><span class=\"p\">),</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">float64</span><span class=\"p\">,</span> <span class=\"n\">chunksize</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">256</span><span class=\"p\">,</span> <span class=\"mi\">256</span><span class=\"p\">)</span><span class=\"o\">&gt;</span>\n</code></pre></div></div>\n\n<p>Which, while compact, could be improved.  I spent a day and made this.</p>\n\n<p><img src=\"https://user-images.githubusercontent.com/306380/57591783-b6da9300-74f8-11e9-9152-a1fe86dcf51c.png\" width=\"80%\" /></p>\n\n<p><a href=\"https://github.com/dask/dask/pull/4794\">dask/dask #4794</a></p>\n\n<p>It was designed around common problems I’ve had in trying to convey information\nabout chunking to new users of the library (this commonly translates into\nperformance problems for novices).  I found myself relying on it for chunking\ninformation almost immediately.  I think it will do a lot of good, it looks\nnice, and was easy to implement.</p>\n\n<h3 id=\"richer-visualization-libraries\">Richer Visualization Libraries</h3>\n\n<p>The examples above are all fairly simple relative to proper visualization\nor widget libraries like Bokeh, Altair, IPyLeaflet, and more.  These libraries\nuse far more sophisticated HTML/JS to get far more exciting results.</p>\n\n<p>I’m not going to go too deeply into these more sophisticated libraries because\nmy main intention here is to encourage a broader use of rich outputs by the\nrest of us, even those of us that are not sophisticated with web frontend\ntechnologies.</p>\n\n<h3 id=\"final-thoughts\">Final thoughts</h3>\n\n<p>We should do more of this.  It’s easy and impactful.</p>\n\n<p>Even if you know only a little bit of HTML you can probably have a large impact\nhere.  Even very sophisticated and polished libraries like NumPy or\nScikit-Learn have, I believe, a lot of low hanging fruit here.  It’s a good\nplace to have impact.</p>"
}