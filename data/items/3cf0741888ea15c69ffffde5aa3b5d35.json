{
  "title": "Towards Out-of-core ND-Arrays -- Slicing and Stacking",
  "link": "",
  "updated": "2015-02-13T00:00:00+00:00",
  "id": "https://mrocklin.github.io/blog/work/2015/02/13/Towards-OOC-Slicing-and-Stacking",
  "content": "<p><em>This work is supported by <a href=\"http://continuum.io\">Continuum Analytics</a>\nand the <a href=\"http://www.darpa.mil/program/XDATA\">XDATA Program</a>\nas part of the <a href=\"http://blaze.pydata.org\">Blaze Project</a></em></p>\n\n<p><strong>tl;dr</strong> Dask.arrays can slice and stack.  This is useful for weather data.</p>\n\n<h2 id=\"introduction\">Introduction</h2>\n\n<p>This is the sixth in a sequence of posts constructing an out-of-core nd-array\nusing NumPy, and dask.  You can view these posts here:</p>\n\n<ol>\n  <li><a href=\"http://matthewrocklin.com/blog/work/2014/12/27/Towards-OOC/\">Simple task scheduling</a>,</li>\n  <li><a href=\"http://matthewrocklin.com/blog/work/2014/12/30/Towards-OOC-Frontend/\">Frontend usability</a></li>\n  <li><a href=\"http://matthewrocklin.com/blog/work/2015/01/06/Towards-OOC-Scheduling/\">A multi-threaded scheduler</a></li>\n  <li><a href=\"http://matthewrocklin.com/blog/work/2015/01/14/Towards-OOC-MatMul/\">Matrix Multiply Benchmark</a></li>\n  <li><a href=\"http://matthewrocklin.com/blog/work/2015/01/16/Towards-OOC-SpillToDisk/\">Spilling to disk</a></li>\n</ol>\n\n<p>Now we talk about slicing and stacking.  We use meteorological data as an\nexample use case.</p>\n\n<h2 id=\"slicing\">Slicing</h2>\n\n<p>Dask.array now supports most of the NumPy slicing syntax.  In particular it\nsupports the following:</p>\n\n<ul>\n  <li>Slicing by integers and slices <code class=\"language-plaintext highlighter-rouge\">x[0, :5]</code></li>\n  <li>Slicing by a <code class=\"language-plaintext highlighter-rouge\">list</code>/<code class=\"language-plaintext highlighter-rouge\">np.ndarray</code> of integers  <code class=\"language-plaintext highlighter-rouge\">x[[1, 2, 4]]</code></li>\n  <li>Slicing by a <code class=\"language-plaintext highlighter-rouge\">list</code>/<code class=\"language-plaintext highlighter-rouge\">np.ndarray</code> of booleans <code class=\"language-plaintext highlighter-rouge\">x[[False, True, True, False, True]]</code></li>\n</ul>\n\n<p>It does not currently support the following:</p>\n\n<ul>\n  <li>Slicing one <code class=\"language-plaintext highlighter-rouge\">dask.array</code> with another <code class=\"language-plaintext highlighter-rouge\">x[x &gt; 0]</code></li>\n  <li>Slicing with lists in multiple axes  <code class=\"language-plaintext highlighter-rouge\">x[[1, 2, 3], [3, 2, 1]]</code></li>\n</ul>\n\n<h2 id=\"stack-and-concatenate\">Stack and Concatenate</h2>\n\n<p>We often store large arrays on disk in many different files.  We\nwant to stack or concatenate these arrays together into one logical array.\nDask solves this problem with the <code class=\"language-plaintext highlighter-rouge\">stack</code> and <code class=\"language-plaintext highlighter-rouge\">concatenate</code> functions, which\nstitch many arrays together into a single array, either creating a new\ndimension with <code class=\"language-plaintext highlighter-rouge\">stack</code> or along an existing dimension with <code class=\"language-plaintext highlighter-rouge\">concatenate</code>.</p>\n\n<h3 id=\"stack\">Stack</h3>\n\n<p>We stack many existing dask arrays into a new array, creating a new dimension\nas we go.</p>\n\n<figure class=\"highlight\">\n  <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">dask.array</span> <span class=\"k\">as</span> <span class=\"n\">da</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">arrays</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">from_array</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"p\">.</span><span class=\"n\">ones</span><span class=\"p\">((</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)),</span> <span class=\"n\">blockshape</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n<span class=\"p\">...</span>            <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)]</span>  <span class=\"c1\"># A small stack of dask arrays\n</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">da</span><span class=\"p\">.</span><span class=\"n\">stack</span><span class=\"p\">(</span><span class=\"n\">arrays</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">).</span><span class=\"n\">shape</span>\n<span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">da</span><span class=\"p\">.</span><span class=\"n\">stack</span><span class=\"p\">(</span><span class=\"n\">arrays</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">).</span><span class=\"n\">shape</span>\n<span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">da</span><span class=\"p\">.</span><span class=\"n\">stack</span><span class=\"p\">(</span><span class=\"n\">arrays</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">).</span><span class=\"n\">shape</span>\n<span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span></code></pre>\n</figure>\n\n<p>This creates a new dimension with length equal to the number of slices</p>\n\n<h3 id=\"concatenate\">Concatenate</h3>\n\n<p>We concatenate existing arrays into a new array, extending them along an\nexisting dimension</p>\n\n<figure class=\"highlight\">\n  <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">dask.array</span> <span class=\"k\">as</span> <span class=\"n\">da</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">arrays</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">from_array</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"p\">.</span><span class=\"n\">ones</span><span class=\"p\">((</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)),</span> <span class=\"n\">blockshape</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n<span class=\"p\">...</span>            <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)]</span>  <span class=\"c1\"># small stack of dask arrays\n</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">da</span><span class=\"p\">.</span><span class=\"n\">concatenate</span><span class=\"p\">(</span><span class=\"n\">arrays</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">).</span><span class=\"n\">shape</span>\n<span class=\"p\">(</span><span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">da</span><span class=\"p\">.</span><span class=\"n\">concatenate</span><span class=\"p\">(</span><span class=\"n\">arrays</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">).</span><span class=\"n\">shape</span>\n<span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">)</span></code></pre>\n</figure>\n\n<h2 id=\"case-study-with-meteorological-data\">Case Study with Meteorological Data</h2>\n\n<p>To test this new functionality we download <a href=\"http://www.ecmwf.int/en/research/climate-reanalysis/era-interim\">meteorological\ndata</a> from the\n<a href=\"http://www.ecmwf.int/#main-menu\">European Centre for Medium-Range Weather\nForecasts</a>.  In particular we have the\ntemperature for the Earth every six hours for all of 2014 with spatial\nresolution of a quarter degree.  We download this data using <a href=\"https://gist.github.com/mrocklin/26d8323f9a8a6a75fce0\">this\nscript</a> (please donâ€™t\nhammer their servers unnecessarily) (Thanks due to <a href=\"http://stephanhoyer.com/\">Stephan\nHoyer</a> for pointing me to this dataset).</p>\n\n<p>As a result, I now have a bunch of netCDF files!</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>$ ls\n2014-01-01.nc3  2014-03-18.nc3  2014-06-02.nc3  2014-08-17.nc3  2014-11-01.nc3\n2014-01-02.nc3  2014-03-19.nc3  2014-06-03.nc3  2014-08-18.nc3  2014-11-02.nc3\n2014-01-03.nc3  2014-03-20.nc3  2014-06-04.nc3  2014-08-19.nc3  2014-11-03.nc3\n2014-01-04.nc3  2014-03-21.nc3  2014-06-05.nc3  2014-08-20.nc3  2014-11-04.nc3\n...             ...             ...             ...             ...\n</code></pre></div></div>\n\n<figure class=\"highlight\">\n  <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">netCDF4</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">netCDF4</span><span class=\"p\">.</span><span class=\"n\">Dataset</span><span class=\"p\">(</span><span class=\"s\">'2014-01-01.nc3'</span><span class=\"p\">).</span><span class=\"n\">variables</span><span class=\"p\">[</span><span class=\"s\">'t2m'</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">t</span><span class=\"p\">.</span><span class=\"n\">shape</span>\n<span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">721</span><span class=\"p\">,</span> <span class=\"mi\">1440</span><span class=\"p\">)</span></code></pre>\n</figure>\n\n<p>The shape corresponds to four measurements per day (24h / 6h), 720 measurements\nNorth/South (180 / 0.25) and 1440 measurements East/West (360/0.25).  There are\n365 files.</p>\n\n<p>Great!  We collect these under one logical dask array, concatenating along\nthe time axis.</p>\n\n<figure class=\"highlight\">\n  <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">glob</span> <span class=\"kn\">import</span> <span class=\"n\">glob</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">filenames</span> <span class=\"o\">=</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">glob</span><span class=\"p\">(</span><span class=\"s\">'2014-*.nc3'</span><span class=\"p\">))</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">temps</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">netCDF4</span><span class=\"p\">.</span><span class=\"n\">Dataset</span><span class=\"p\">(</span><span class=\"n\">fn</span><span class=\"p\">).</span><span class=\"n\">variables</span><span class=\"p\">[</span><span class=\"s\">'t2m'</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">fn</span> <span class=\"ow\">in</span> <span class=\"n\">filenames</span><span class=\"p\">]</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">dask.array</span> <span class=\"k\">as</span> <span class=\"n\">da</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">arrays</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">da</span><span class=\"p\">.</span><span class=\"n\">from_array</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"n\">blockshape</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"mi\">200</span><span class=\"p\">))</span> <span class=\"k\">for</span> <span class=\"n\">t</span> <span class=\"ow\">in</span> <span class=\"n\">temps</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">da</span><span class=\"p\">.</span><span class=\"n\">concatenate</span><span class=\"p\">(</span><span class=\"n\">arrays</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">shape</span>\n<span class=\"p\">(</span><span class=\"mi\">1464</span><span class=\"p\">,</span> <span class=\"mi\">721</span><span class=\"p\">,</span> <span class=\"mi\">1440</span><span class=\"p\">)</span></code></pre>\n</figure>\n\n<p>Now we can play with <code class=\"language-plaintext highlighter-rouge\">x</code> as though it were a NumPy array.</p>\n\n<figure class=\"highlight\">\n  <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"n\">avg</span> <span class=\"o\">=</span> <span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">mean</span><span class=\"p\">(</span><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">diff</span> <span class=\"o\">=</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">1000</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">avg</span></code></pre>\n</figure>\n\n<p>If we want to actually compute these results we have a few options</p>\n\n<figure class=\"highlight\">\n  <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">diff</span><span class=\"p\">.</span><span class=\"n\">compute</span><span class=\"p\">()</span>  <span class=\"c1\"># compute result, return as array, float, int, whatever is appropriate\n</span><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">diff</span><span class=\"p\">)</span>  <span class=\"c1\"># compute result and turn into `np.ndarray`\n</span><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">diff</span><span class=\"p\">.</span><span class=\"n\">store</span><span class=\"p\">(</span><span class=\"n\">anything_that_supports_setitem</span><span class=\"p\">)</span>  <span class=\"c1\"># For out-of-core storage</span></code></pre>\n</figure>\n\n<p>Alternatively, because many scientific Python libraries call <code class=\"language-plaintext highlighter-rouge\">np.array</code> on\ninputs, we can just feed our <code class=\"language-plaintext highlighter-rouge\">da.Array</code> objects directly in to matplotlib\n(hooray for the <code class=\"language-plaintext highlighter-rouge\">__array__</code> protocol!):</p>\n\n<figure class=\"highlight\">\n  <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">matplotlib</span> <span class=\"kn\">import</span> <span class=\"n\">imshow</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">imshow</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">mean</span><span class=\"p\">(</span><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"n\">cmap</span><span class=\"o\">=</span><span class=\"s\">'bone'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">imshow</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">1000</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">mean</span><span class=\"p\">(</span><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"n\">cmap</span><span class=\"o\">=</span><span class=\"s\">'RdBu_r'</span><span class=\"p\">)</span></code></pre>\n</figure>\n\n<table>\n<tr>\n<td><a href=\"https://mrocklin.github.io/blog/images/avg.png\">\n        <img src=\"https://mrocklin.github.io/blog/images/avg.png\" width=\"100%\" /></a></td>\n<td><a href=\"https://mrocklin.github.io/blog/images/diff.png\">\n        <img src=\"https://mrocklin.github.io/blog/images/diff.png\" width=\"100%\" /></a></td>\n</tr>\n</table>\n\n<p>I suspect that the temperature scale is in Kelvin.  It looks like the random\nday is taken during Northern Summer.  Another fun one, lets look at the\ndifference between the temperatures at 00:00 and at 12:00</p>\n\n<figure class=\"highlight\">\n  <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">imshow</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">[::</span><span class=\"mi\">4</span><span class=\"p\">].</span><span class=\"n\">mean</span><span class=\"p\">(</span><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">::</span><span class=\"mi\">4</span><span class=\"p\">].</span><span class=\"n\">mean</span><span class=\"p\">(</span><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"n\">cmap</span><span class=\"o\">=</span><span class=\"s\">'RdBu_r'</span><span class=\"p\">)</span></code></pre>\n</figure>\n\n<p><a href=\"https://mrocklin.github.io/blog/images/day-vs-night.png\">\n    <img src=\"https://mrocklin.github.io/blog/images/day-vs-night.png\" width=\"100%\" /></a></p>\n\n<p>Even though this looks and feels like NumPy weâ€™re actually operating off of\ndisk using blocked algorithms.  We execute these operations using only a small\namount of memory.  If these operations were computationally intense (they\narenâ€™t) then we also would also benefit from multiple cores.</p>\n\n<h2 id=\"what-just-happened\">What just happened</h2>\n\n<p>To be totally clear the following steps just occurred:</p>\n\n<ol>\n  <li>Open up a bunch of netCDF files and located a temperature variable\nwithin each file.  This is cheap.</li>\n  <li>For each of those temperature variables create a <code class=\"language-plaintext highlighter-rouge\">da.Array</code> object,\nspecifying how we want to block up that variable.  This is also cheap.</li>\n  <li>Make a new <code class=\"language-plaintext highlighter-rouge\">da.Array</code> by concatenating all of our <code class=\"language-plaintext highlighter-rouge\">da.Array</code>s for each\nday.  This, like the other steps, is just book-keeping.  We havenâ€™t loaded\ndata or computed anything yet.</li>\n  <li>Write numpy-style code <code class=\"language-plaintext highlighter-rouge\">x[::2].mean(axis=0) - x[2::2].mean(axis=0)</code>.\nThis creates yet another <code class=\"language-plaintext highlighter-rouge\">da.Array</code> with a more complex task graph.  It\ntakes a few hundred milliseconds to create this dictionary.</li>\n  <li>Call<code class=\"language-plaintext highlighter-rouge\">imshow</code> on our <code class=\"language-plaintext highlighter-rouge\">da.Array</code> object</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">imshow</code> calls <code class=\"language-plaintext highlighter-rouge\">np.array</code> on its input, this starts the multi-core task\nscheduler</li>\n  <li>A flurry of chunks fly out of all the netCDF files.  These chunks meet\nvarious NumPy functions and create new chunks.  Well organized magic occurs\nand an <code class=\"language-plaintext highlighter-rouge\">np.ndarray</code> emerges.</li>\n  <li>Matplotlib makes a pretty graph</li>\n</ol>\n\n<h2 id=\"problems-that-popped-up\">Problems that Popped Up</h2>\n\n<p>The threaded scheduler is introducing significant overhead in its planning.\nFor this workflow the single-threaded naive scheduler is actually significantly\nfaster.  Weâ€™ll have to find better solutions to reduce scheduling overhead.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>I hope that this shows off how <code class=\"language-plaintext highlighter-rouge\">dask.array</code> can be useful when dealing with\ncollections of on-disk arrays.  As always Iâ€™m very happy to hear how we can\nmake this project more useful for your work.  If you have large n-dimensional\ndatasets Iâ€™d love to hear about what you do and how <code class=\"language-plaintext highlighter-rouge\">dask.array</code> can help.  I\ncan be reached either in the comments below or at <code class=\"language-plaintext highlighter-rouge\">blaze-dev@continuum.io</code>.</p>\n\n<h2 id=\"acknowledgements\">Acknowledgements</h2>\n\n<p>First, other projects can already do this.  In particular if this seemed useful\nfor your work then you should probably also know about\n<a href=\"https://github.com/SciTools/biggus\">Biggus</a>,\nproduced by the UK Met office, which has been around for much longer than\n<code class=\"language-plaintext highlighter-rouge\">dask.array</code> and is used in production.</p>\n\n<p>Second, this post shows off work from the following people:</p>\n\n<ol>\n  <li><a href=\"https://github.com/eriknw\">Erik Welch</a> (<a href=\"http://continuum.io\">Continuum</a>)\nwrote optimization passes to clean up dask graphs before execution.</li>\n  <li><a href=\"https://github.com/nevermindewe\">Wesley Emeneker</a> (<a href=\"http://continuum.io\">Continuum</a>) wrote a good deal of the slicing code</li>\n  <li><a href=\"http://stephanhoyer.com/\">Stephan Hoyer</a> (<a href=\"http://climate.com/\">Climate Corp</a>)\ntalked me through the application and pointed me to the data.  If youâ€™d\nlike to see dask integrated with\n<a href=\"http://xray.readthedocs.org/en/stable/\"><code class=\"language-plaintext highlighter-rouge\">xray</code></a>\nthen you should definitely bug Stephan :)</li>\n</ol>"
}