{
  "title": "Understanding the FFT Algorithm",
  "link": "",
  "published": "2013-08-28T13:00:00-07:00",
  "updated": "2013-08-28T13:00:00-07:00",
  "author": {
    "name": "Jake VanderPlas"
  },
  "id": "tag:jakevdp.github.io,2013-08-28:blog/2013/08/28/understanding-the-fft/",
  "summary": "The Fast Fourier Transform (FFT) is one of the most important algorithms in signal processing and data analysis. I've used it for years, but having no formal computer science background, It occurred to me this week that I've never thought to ask <em>how</em> the FFT computes the discrete Fourier transform so quickly.  I dusted off an old algorithms book and looked into it, and enjoyed reading about the deceptively simple computational trick that JW Cooley and John Tukey outlined in their classic <a href=\"http://www.ams.org/journals/mcom/1965-19-090/S0025-5718-1965-0178586-1/\">1965 paper</a> introducing the subject.</p>\n\n\n\n\n\n\n\n\n<p>The goal of this post is to dive into the Cooley-Tukey FFT algorithm, explaining the symmetries that lead to it, and to show some straightforward Python implementations putting the theory into practice.  My hope is that this exploration will give data scientists like myself a more complete picture of what's going on in the background of the algorithms we use.",
  "category": [
    "",
    ""
  ]
}