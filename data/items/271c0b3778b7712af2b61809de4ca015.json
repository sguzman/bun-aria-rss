{
  "title": "Dead mfers Contract Review",
  "link": "https://streamhacker.com/2022/04/11/dead-mfers-contract-review/#utm_source=feed&#038;utm_medium=feed&#038;utm_campaign=feed",
  "comments": "https://streamhacker.com/2022/04/11/dead-mfers-contract-review/#respond",
  "dc:creator": "Jacob",
  "pubDate": "Mon, 11 Apr 2022 14:20:25 +0000",
  "category": [
    "contracts",
    "autominter",
    "erc721",
    "eth",
    "mfers",
    "mint",
    "nft",
    "proxy contract",
    "slither",
    "solidity",
    "token",
    "upgradeable"
  ],
  "guid": "https://streamhacker.com/?p=2263",
  "description": "Contract review of dead mfers by sartoodles, including an explanation of minimal proxy contracts",
  "content:encoded": "\n<p><a href=\"https://opensea.io/collection/dead-mfers\">Dead mfers</a> is a collection by <a href=\"https://sartoodles.xyz/\">sartoodles</a>, who is an active member of the <a href=\"https://www.unofficialmfers.com/\">unofficial mfers</a> community, and has created a few mfers <a href=\"https://opensea.io/collection/mfermashups\">derivative</a> <a href=\"https://opensea.io/collection/cupcake-mfers\">collections</a>. Owners of Dead mfers receive free airdrops regularly on the polygon network, and more benefits will be unlocked when the collection is 90% minted. There is also a video game in the works. Let&#8217;s look at the <a href=\"https://etherscan.io/address/0x50092539a224953d82995c9d950e042da4556283#code\">contract code</a>&#8230;</p>\n\n\n\n<h2>Mint Random</h2>\n\n\n\n<p>The mint function used for Dead mfers is <code>mintRandom</code>:</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-solidity\">    function mintRandom() payable public\n    {\n        require(mintRandomEnabled == true, &#039;Random minting is not enabled for this contract&#039;);\n        require(msg.value == mintFee, &#039;Eth sent does not match the mint fee&#039;);\n        \n        _splitPayment();\n        \n        uint256 tokenID = _drawRandomIndex();\n        \n        _safeMint(msg.sender, tokenID);\n    }</code></pre>\n\n\n\n<p>This requires that random minting is enabled, and the fee passed in is correct, in this case 0.0069 ETH. <code>_safeMint</code> is a standard ERC721 function from OpenZeppelin, so let&#8217;s look at the middle 2 functions: <code>_splitPayment</code> and <code>_drawRandomIndex</code>.</p>\n\n\n\n<h2>Split Payment</h2>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-solidity\">    function _splitPayment() internal\n    {\n        if(msg.value != 0){\n            uint256 splitValue = msg.value / 10;\n            uint256 remainingValue = msg.value - splitValue;\n            \n            payable(shareAddress).transfer(splitValue);\n            payable(owner()).transfer(remainingValue);\n        }\n    }</code></pre>\n\n\n\n<p>This function sends 10% of the mint fee to <code>shareAddress</code>, and the remaining 90% to the contract owner. The <code>shareAddress</code> is set when this contract is initialized by the factory contract, which is covered in more detail below. If you look at any of the Mint Random transactions, you can see that 10% of every mint fee is sent to <a href=\"https://etherscan.io/address/0xe28564784a0f57554d8beec807e8609b40a97241\">0xe28564784a0f57554d8beec807e8609b40a97241</a>, aka <code>autominter.eth</code>. This is how <a href=\"https://www.autominter.com/\">AutoMinter</a> makes money by providing tools to NFT creators.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://i0.wp.com/streamhacker.com/wp-content/uploads/2022/04/Screen-Shot-2022-04-10-at-10.12.35-PM.png?ssl=1\"><img decoding=\"async\" loading=\"lazy\" width=\"474\" height=\"42\" src=\"https://i0.wp.com/streamhacker.com/wp-content/uploads/2022/04/Screen-Shot-2022-04-10-at-10.12.35-PM.png?resize=474%2C42&#038;ssl=1\" alt=\"\" class=\"wp-image-2284\" srcset=\"https://i0.wp.com/streamhacker.com/wp-content/uploads/2022/04/Screen-Shot-2022-04-10-at-10.12.35-PM.png?resize=1024%2C91&ssl=1 1024w, https://i0.wp.com/streamhacker.com/wp-content/uploads/2022/04/Screen-Shot-2022-04-10-at-10.12.35-PM.png?resize=300%2C27&ssl=1 300w, https://i0.wp.com/streamhacker.com/wp-content/uploads/2022/04/Screen-Shot-2022-04-10-at-10.12.35-PM.png?resize=768%2C68&ssl=1 768w, https://i0.wp.com/streamhacker.com/wp-content/uploads/2022/04/Screen-Shot-2022-04-10-at-10.12.35-PM.png?resize=1536%2C136&ssl=1 1536w, https://i0.wp.com/streamhacker.com/wp-content/uploads/2022/04/Screen-Shot-2022-04-10-at-10.12.35-PM.png?w=1824&ssl=1 1824w, https://i0.wp.com/streamhacker.com/wp-content/uploads/2022/04/Screen-Shot-2022-04-10-at-10.12.35-PM.png?w=948&ssl=1 948w, https://i0.wp.com/streamhacker.com/wp-content/uploads/2022/04/Screen-Shot-2022-04-10-at-10.12.35-PM.png?w=1422&ssl=1 1422w\" sizes=\"(max-width: 474px) 100vw, 474px\" data-recalc-dims=\"1\" /></a><figcaption>Sample transaction showing 10% of mint fee going to <code>autominter.eth</code></figcaption></figure>\n\n\n\n<h2>Draw Random Index</h2>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-solidity\">    function _drawRandomIndex() internal returns (uint256 index) {\n        //RNG\n        uint256 i = uint(keccak256(abi.encodePacked(block.timestamp))) % remaining;\n\n        // if there&#039;s a cache at cache[i] then use it\n        // otherwise use i itself\n        index = cache[i] == 0 ? i : cache[i];\n\n        // grab a number from the tail\n        cache[i] = cache[remaining - 1] == 0 ? remaining - 1 : cache[remaining - 1];\n        \n        // store the position of moved token in cache to be looked up (add 1 to avoid 0, remove when recovering)\n        cachePosition[cache[i]] = i + 1;\n        \n        remaining = remaining - 1;\n    }</code></pre>\n\n\n\n<p>This function gets a pseudo random number between 0 and <code>remaining</code>, then returns that number (<code>index</code>). The rest is mostly to coordinate between other minting functions like <code>_drawIndex</code> that are not used for Dead mfers, so that the same token isn&#8217;t minted twice.</p>\n\n\n\n<p>That&#8217;s about it &#8211; the code is relatively minimal without much going on. One downside to this contract is that you can only mint a single token at a time. I suspect that if it allowed batch minting of multiple tokens in a single transaction, like in <a href=\"https://streamhacker.com/2022/03/30/dadmfers-background-mfers-contract-review/#utm_source=feed&utm_medium=feed&utm_campaign=feed\">Backgroundmfers</a> or <a href=\"https://streamhacker.com/2022/04/04/3d-mutant-mfers-contract-review/#utm_source=feed&utm_medium=feed&utm_campaign=feed\">3DMutantMfers</a>, then a lot more Dead mfers would be minted.</p>\n\n\n\n<p>I could conclude the review here, but there&#8217;s some interesting additional details to cover. If you&#8217;re looking at the code on etherscan, you may notice it says <strong>Minimal Proxy Contract for </strong><a href=\"https://etherscan.io/address/0x72668b08926a69ae9c926aeb572559efc7f42cd6#code\">0x72668b08926a69ae9c926aeb572559efc7f42cd6</a>. What does this mean?</p>\n\n\n\n<h2>AutoMinter Proxy</h2>\n\n\n\n<p>The <a href=\"https://etherscan.io/address/0x50092539a224953d82995c9d950e042da4556283#code\">Dead mfers contract</a> is not a custom contract. Instead, it is a <a href=\"https://medium.com/etherscan-blog/eip-1167-minimal-proxy-contract-on-etherscan-3eaedd85ef50\">minimal proxy</a> for a contract by <a href=\"https://www.autominter.com/\">AutoMinter</a>. This means that the Dead mfers contract forwards all the contract interactions to the <a href=\"https://etherscan.io/address/0x72668b08926a69ae9c926aeb572559efc7f42cd6#code\">autominter contract code</a>, while the state data that records your actions and NFT ownership is maintained within the Dead mfers contract. By using this minimal proxy pattern, sartoodles was able to re-use someone else&#8217;s code, and save ETH with a cheaper contract deployment.</p>\n\n\n\n<p>When deploying a minimal proxy contract, the main thing is to provide initialization parameters. This is what customizes the contract for your use vs someone else&#8217;s. In other words, many other contracts could be minimal proxies for the same autominter contract, but each minimal proxy has been initialized differently. For Dead mfers, here are the first 5 initialization parameters:</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://i0.wp.com/streamhacker.com/wp-content/uploads/2022/04/Screen-Shot-2022-04-10-at-2.13.32-PM.png?ssl=1\"><img decoding=\"async\" loading=\"lazy\" width=\"474\" height=\"83\" src=\"https://i0.wp.com/streamhacker.com/wp-content/uploads/2022/04/Screen-Shot-2022-04-10-at-2.13.32-PM.png?resize=474%2C83&#038;ssl=1\" alt=\"\" class=\"wp-image-2271\" srcset=\"https://i0.wp.com/streamhacker.com/wp-content/uploads/2022/04/Screen-Shot-2022-04-10-at-2.13.32-PM.png?resize=1024%2C179&ssl=1 1024w, https://i0.wp.com/streamhacker.com/wp-content/uploads/2022/04/Screen-Shot-2022-04-10-at-2.13.32-PM.png?resize=300%2C53&ssl=1 300w, https://i0.wp.com/streamhacker.com/wp-content/uploads/2022/04/Screen-Shot-2022-04-10-at-2.13.32-PM.png?resize=768%2C134&ssl=1 768w, https://i0.wp.com/streamhacker.com/wp-content/uploads/2022/04/Screen-Shot-2022-04-10-at-2.13.32-PM.png?resize=1536%2C269&ssl=1 1536w, https://i0.wp.com/streamhacker.com/wp-content/uploads/2022/04/Screen-Shot-2022-04-10-at-2.13.32-PM.png?w=2034&ssl=1 2034w, https://i0.wp.com/streamhacker.com/wp-content/uploads/2022/04/Screen-Shot-2022-04-10-at-2.13.32-PM.png?w=948&ssl=1 948w, https://i0.wp.com/streamhacker.com/wp-content/uploads/2022/04/Screen-Shot-2022-04-10-at-2.13.32-PM.png?w=1422&ssl=1 1422w\" sizes=\"(max-width: 474px) 100vw, 474px\" data-recalc-dims=\"1\" /></a></figure>\n\n\n\n<p>To find these, start on the <a href=\"https://etherscan.io/address/0x50092539a224953d82995c9d950e042da4556283#code\">contract page</a>. There is a <strong>More Info</strong> section in the upper right that looks like this:</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://i0.wp.com/streamhacker.com/wp-content/uploads/2022/04/Screen-Shot-2022-04-10-at-2.15.01-PM.png?ssl=1\"><img decoding=\"async\" loading=\"lazy\" width=\"474\" height=\"137\" src=\"https://i0.wp.com/streamhacker.com/wp-content/uploads/2022/04/Screen-Shot-2022-04-10-at-2.15.01-PM.png?resize=474%2C137&#038;ssl=1\" alt=\"\" class=\"wp-image-2272\" srcset=\"https://i0.wp.com/streamhacker.com/wp-content/uploads/2022/04/Screen-Shot-2022-04-10-at-2.15.01-PM.png?resize=1024%2C297&ssl=1 1024w, https://i0.wp.com/streamhacker.com/wp-content/uploads/2022/04/Screen-Shot-2022-04-10-at-2.15.01-PM.png?resize=300%2C87&ssl=1 300w, https://i0.wp.com/streamhacker.com/wp-content/uploads/2022/04/Screen-Shot-2022-04-10-at-2.15.01-PM.png?resize=768%2C223&ssl=1 768w, https://i0.wp.com/streamhacker.com/wp-content/uploads/2022/04/Screen-Shot-2022-04-10-at-2.15.01-PM.png?w=1372&ssl=1 1372w, https://i0.wp.com/streamhacker.com/wp-content/uploads/2022/04/Screen-Shot-2022-04-10-at-2.15.01-PM.png?w=948&ssl=1 948w\" sizes=\"(max-width: 474px) 100vw, 474px\" data-recalc-dims=\"1\" /></a></figure>\n\n\n\n<p>In the middle row, it shows &#8220;&#8230; at txn&#8221; and then a transaction hash. Click on that <a href=\"https://etherscan.io/tx/0x792ccf50e31cb85d34f0d41a4757b7deb885777ca3c0444c03768c034ab67831\">transaction hash</a> to see the transaction details page, which looks like this:</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://i0.wp.com/streamhacker.com/wp-content/uploads/2022/04/Screen-Shot-2022-04-10-at-2.12.43-PM.png?ssl=1\"><img decoding=\"async\" loading=\"lazy\" width=\"474\" height=\"330\" src=\"https://i0.wp.com/streamhacker.com/wp-content/uploads/2022/04/Screen-Shot-2022-04-10-at-2.12.43-PM.png?resize=474%2C330&#038;ssl=1\" alt=\"\" class=\"wp-image-2274\" srcset=\"https://i0.wp.com/streamhacker.com/wp-content/uploads/2022/04/Screen-Shot-2022-04-10-at-2.12.43-PM.png?resize=1024%2C712&ssl=1 1024w, https://i0.wp.com/streamhacker.com/wp-content/uploads/2022/04/Screen-Shot-2022-04-10-at-2.12.43-PM.png?resize=300%2C209&ssl=1 300w, https://i0.wp.com/streamhacker.com/wp-content/uploads/2022/04/Screen-Shot-2022-04-10-at-2.12.43-PM.png?resize=768%2C534&ssl=1 768w, https://i0.wp.com/streamhacker.com/wp-content/uploads/2022/04/Screen-Shot-2022-04-10-at-2.12.43-PM.png?resize=1536%2C1068&ssl=1 1536w, https://i0.wp.com/streamhacker.com/wp-content/uploads/2022/04/Screen-Shot-2022-04-10-at-2.12.43-PM.png?w=1792&ssl=1 1792w, https://i0.wp.com/streamhacker.com/wp-content/uploads/2022/04/Screen-Shot-2022-04-10-at-2.12.43-PM.png?w=948&ssl=1 948w, https://i0.wp.com/streamhacker.com/wp-content/uploads/2022/04/Screen-Shot-2022-04-10-at-2.12.43-PM.png?w=1422&ssl=1 1422w\" sizes=\"(max-width: 474px) 100vw, 474px\" data-recalc-dims=\"1\" /></a></figure>\n\n\n\n<p>You can see when the transaction happened, the <strong>Contract</strong> that was interacted with (the <code>AutoMinterFactory</code> covered below), the transaction <strong>Value</strong> of 0.025 ETH, and lots of other details. At the bottom, click on the <strong>Click to see More</strong> link. That displays the <strong>Input Data</strong>, which shows that a <code>create</code> function was called.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://i0.wp.com/streamhacker.com/wp-content/uploads/2022/04/Screen-Shot-2022-04-10-at-2.12.57-PM.png?ssl=1\"><img decoding=\"async\" loading=\"lazy\" width=\"474\" height=\"87\" src=\"https://i0.wp.com/streamhacker.com/wp-content/uploads/2022/04/Screen-Shot-2022-04-10-at-2.12.57-PM.png?resize=474%2C87&#038;ssl=1\" alt=\"\" class=\"wp-image-2275\" srcset=\"https://i0.wp.com/streamhacker.com/wp-content/uploads/2022/04/Screen-Shot-2022-04-10-at-2.12.57-PM.png?resize=1024%2C189&ssl=1 1024w, https://i0.wp.com/streamhacker.com/wp-content/uploads/2022/04/Screen-Shot-2022-04-10-at-2.12.57-PM.png?resize=300%2C55&ssl=1 300w, https://i0.wp.com/streamhacker.com/wp-content/uploads/2022/04/Screen-Shot-2022-04-10-at-2.12.57-PM.png?resize=768%2C142&ssl=1 768w, https://i0.wp.com/streamhacker.com/wp-content/uploads/2022/04/Screen-Shot-2022-04-10-at-2.12.57-PM.png?resize=1536%2C284&ssl=1 1536w, https://i0.wp.com/streamhacker.com/wp-content/uploads/2022/04/Screen-Shot-2022-04-10-at-2.12.57-PM.png?resize=2048%2C378&ssl=1 2048w, https://i0.wp.com/streamhacker.com/wp-content/uploads/2022/04/Screen-Shot-2022-04-10-at-2.12.57-PM.png?w=948&ssl=1 948w, https://i0.wp.com/streamhacker.com/wp-content/uploads/2022/04/Screen-Shot-2022-04-10-at-2.12.57-PM.png?w=1422&ssl=1 1422w\" sizes=\"(max-width: 474px) 100vw, 474px\" data-recalc-dims=\"1\" /></a></figure>\n\n\n\n<p>What you see is the binary data passed in to the <code>create</code> function. At the bottom, click <strong>Decode Input Data</strong> to see a human readable table of parameters, such as the <code>name_</code> being <code>Dead mfers</code>. This <code>create</code> function actually belongs to a different contract, <code>AutoMinterFactory</code>. Below is a short video showing the contract navigation to find all this information, as well as the <code>AutoMinterFactory</code> contract described next.</p>\n\n\n\n<figure class=\"wp-block-video\"><video controls src=\"https://streamhacker.com/wp-content/uploads/2022/04/Sartoodles-Dead-mfers-contract-navigation-10-April-2022.mp4\"></video></figure>\n\n\n\n<h2>Auto Minter Factory</h2>\n\n\n\n<p>The <a href=\"https://etherscan.io/address/0x63cc42b2ca3d6fc2166030a928c1e7f2b6ac483f#code\">AutoMinterFactory contract</a> does the actual deployment and initialization of the minimal proxy contract used by Dead mfers. As part of that initialization, it sets some of its own parameters on the contract, such as the <code>shareAddress</code> mentioned above.</p>\n\n\n\n<p>The <code>create</code> function on the factory contract is relatively clear: (note that the actual create function used by the latest <code>AutoMinterFactory</code> might be different than below, because it&#8217;s an upgradeable contract behind a proxy contract):</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-solidity\">    function create(string memory name_,\n        string memory symbol_,\n        string memory baseURI_,\n        string memory appId_,\n        uint256 mintFee_,\n        uint256 size_,\n        bool mintSelectionEnabled_,\n        bool mintRandomEnabled_,\n        address whiteListSignerAddress_,\n        uint256 mintLimit_,\n        uint256 royaltyBasis_,\n        string memory placeholderImage_) payable public\n    {\n        require(msg.value >= fee, &#039;Must pass the correct fee to the contract&#039;);\n        \n        address payable clone = payable(ClonesUpgradeable.clone(erc721Implementation));\n\n        AutoMinterERC721(clone).initialize(name_,\n            symbol_,\n            baseURI_,\n            msg.sender,\n            mintFee_,\n            size_,\n            mintSelectionEnabled_,\n            mintRandomEnabled_,\n            whiteListSignerAddress_,\n            mintLimit_,\n            royaltyBasis_,\n            placeholderImage_\n        );\n        \n        emit ContractDeployed(appId_, appId_, clone, msg.sender);\n    }</code></pre>\n\n\n\n<p>The <code>erc721Implementation</code> address points to the current deployed version of <code>AutoMinterERC721</code>, so <code>create</code> clones this contract then initializes it.</p>\n\n\n\n<p>To recap, the contract deployment worked like this:</p>\n\n\n\n<ol><li>The <code>create</code> function is called on a <a href=\"https://etherscan.io/address/0xce417118275171e1f2ce1ca5206b897be17f0134#writeProxyContract\">proxy contract</a> that forwards to the <a href=\"https://etherscan.io/address/0x63cc42b2ca3d6fc2166030a928c1e7f2b6ac483f#code\">AutoMinterFactory implementation contract</a> (a proxy is used so that the factory contract can be upgraded in the future)</li><li>The <code>AutoMinterFactory</code> implementation contract clones and initializes a minimal proxy contract for the current version of the <code>AutoMinterERC721</code> implementation contract</li><li>The minimal proxy contract is initialized with the parameters from the create function in step 1</li><li>All calls to the minimal proxy contract (for Dead mfers) are forwarded to the <code>AutoMinterERC721</code> implementation contract</li></ol>\n\n\n\n<p>None of the above is bad or dangerous; it&#8217;s necessary complexity to provide re-usable & customizable contract code. The result is a simple & cheap contract.</p>\n\n\n\n<h2>Upgradeable</h2>\n\n\n\n<p>You may also notice that one of the first lines of code says the contract is upgradeable:</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-solidity\">contract AutoMinterERC721 is Initializable, ERC721Upgradeable, OwnableUpgradeable</code></pre>\n\n\n\n<p>If the Dead mfers contract was a regular proxy contract, then this line above would make it possible to deploy a new version of the <code>AutoMinterERC721</code> contract. Upgradeable NFT contracts are not necessarily bad, but it is a warning sign, because the implementation contract could be changed at any time, potentially introducing insecure code. In the case of Dead mfers, because it&#8217;s only a <a href=\"https://blog.openzeppelin.com/deep-dive-into-the-minimal-proxy-contract/\">minimal proxy</a>, the implementation contract cannot be upgraded.</p>\n\n\n\n<h2>Slither Analysis</h2>\n\n\n\n<p><a href=\"https://github.com/crytic/slither\">Slither</a> is a python tool for static analysis of Solidity contracts. You can use it to get a quick summary of the contract code, and then look for any deeper issues.</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-bash\">$ slither 0x50092539a224953d82995c9d950e042da4556283 --print human-summary</code></pre>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://i0.wp.com/streamhacker.com/wp-content/uploads/2022/04/Screen-Shot-2022-04-10-at-9.37.18-PM.png?ssl=1\"><img decoding=\"async\" loading=\"lazy\" width=\"474\" height=\"337\" src=\"https://i0.wp.com/streamhacker.com/wp-content/uploads/2022/04/Screen-Shot-2022-04-10-at-9.37.18-PM.png?resize=474%2C337&#038;ssl=1\" alt=\"\" class=\"wp-image-2279\" srcset=\"https://i0.wp.com/streamhacker.com/wp-content/uploads/2022/04/Screen-Shot-2022-04-10-at-9.37.18-PM.png?resize=1024%2C728&ssl=1 1024w, https://i0.wp.com/streamhacker.com/wp-content/uploads/2022/04/Screen-Shot-2022-04-10-at-9.37.18-PM.png?resize=300%2C213&ssl=1 300w, https://i0.wp.com/streamhacker.com/wp-content/uploads/2022/04/Screen-Shot-2022-04-10-at-9.37.18-PM.png?resize=768%2C546&ssl=1 768w, https://i0.wp.com/streamhacker.com/wp-content/uploads/2022/04/Screen-Shot-2022-04-10-at-9.37.18-PM.png?w=1446&ssl=1 1446w, https://i0.wp.com/streamhacker.com/wp-content/uploads/2022/04/Screen-Shot-2022-04-10-at-9.37.18-PM.png?w=948&ssl=1 948w\" sizes=\"(max-width: 474px) 100vw, 474px\" data-recalc-dims=\"1\" /></a></figure>\n\n\n\n<p>In this case, some of library contracts are marked as <strong>Complex</strong>, while the main contract <code>AutoMinterERC721</code> is not, which is good. But Slither also says there are 3 high severity issues. Let&#8217;s see what those are:</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-bash\">$ slither 0x50092539a224953d82995c9d950e042da4556283</code></pre>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-shell-session\">AutoMinterERC721._drawRandomIndex() (contracts/AutoMinterERC721.sol#114-129) uses a weak PRNG: \"i = uint256(keccak256(bytes)(abi.encodePacked(block.timestamp))) % remaining (contracts/AutoMinterERC721.sol#116)\"\n\nOwnableUpgradeable.__gap (@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol#82) shadows:\n\t- ContextUpgradeable.__gap (@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol#31)\nERC721Upgradeable.__gap (@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol#431) shadows:\n\t- ERC165Upgradeable.__gap (@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol#36)\n\t- ContextUpgradeable.__gap (@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol#31)</code></pre>\n\n\n\n<p>The first issue says that <code>_drawRandomIndex</code>, called by the <code>mintRandom</code> function, <a href=\"https://github.com/crytic/slither/wiki/Detector-Documentation#weak-PRNG\">uses a weak PRNG</a>, which stands for <a href=\"https://en.wikipedia.org/wiki/Pseudorandom_number_generator\">pseudorandom number generator</a>. The random index for a token is generated by doing a modulo on the current block timestamp, which apparently could be manipulated by an ethereum blockchain miner, to reorder the block to get a different random index. This may be a problem in other situations, but in this case, it doesn&#8217;t really matter which random token you get when you call <code>mintRandom</code>.</p>\n\n\n\n<p>The second and third issues are about <a href=\"https://github.com/crytic/slither/wiki/Detector-Documentation#state-variable-shadowing\">state variable shadowing</a> in some of the OpenZeppelin upgradeable contract dependencies. This means the <code>__gap</code> variable is used in multiple contracts but is not explicitly assigned. This appears to be a <a href=\"https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\">design choice in upgradeable contracts</a>, to explicitly leave room for new state variables in future versions of a contract. So this high severity issue isn&#8217;t actually a problem here either.</p>\n\n\n\n<p>All the other issues Slither detects either don&#8217;t really matter or don&#8217;t apply to how the Dead mfers contract is used.</p>\n\n\n\n<h2>Conclusion</h2>\n\n\n\n<p>Overall this is a simple contract. It is unfortunately limited to minting one at a time, and it doesn&#8217;t look like AutoMinter supports batch minting. This is one reason why many other projects will deploy their own custom contracts, in addition to custom code for different minting options. So if you&#8217;re ok with single minting, AutoMinter might be a great option for creating your own NFT collection. And be sure to mint your own <a href=\"https://sartoodles.xyz/\">Dead mfer</a> to receive some free airdrops, or if you want to play the upcoming video game, recently teased on <a href=\"https://twitter.com/Sartoodles/status/1513249569718603776?s=20&t=BvpOBlyQNu6VgVa7PxRD7g\">@Sartoodles</a>.</p>\n",
  "wfw:commentRss": "https://streamhacker.com/2022/04/11/dead-mfers-contract-review/feed/",
  "slash:comments": 0,
  "enclosure": "",
  "post-id": 2263
}