{
  "title": "Import AI 299: The world&#8217;s best language model is Made in China; NVIDIA boosts LLM training; OpenAI shows how to &#8216;fill in the middle&#8217; on a language model.",
  "link": "https://jack-clark.net/2022/08/08/import-ai-299-the-worlds-best-language-model-is-made-in-china-nvidia-boosts-llm-training-openai-shows-how-to-fill-in-the-middle-on-a-language-model/",
  "comments": "https://jack-clark.net/2022/08/08/import-ai-299-the-worlds-best-language-model-is-made-in-china-nvidia-boosts-llm-training-openai-shows-how-to-fill-in-the-middle-on-a-language-model/#respond",
  "dc:creator": "Jack Clark",
  "pubDate": "Mon, 08 Aug 2022 22:31:00 +0000",
  "category": "Uncategorized",
  "guid": "http://jack-clark.net/?p=2346",
  "description": "Want a 30% boost to training LLMs? Use the Nvidia Megatron update:…Two new techniques lead to big savings…NVIDIA has updated Nemo Megatron, software for training large language models. The updates &#8211; sequence parallelism (SP) and selective activation recomputation (SAR) &#8211; makes training large-scale neural networks significantly more efficient.  &#160;&#160;&#160;&#8220;The latest updates to NeMo Megatron offer [&#8230;]",
  "content:encoded": "\n<p><strong>Want a 30% boost to training LLMs? Use the Nvidia Megatron update:<br></strong><em>…Two new techniques lead to big savings…</em><br>NVIDIA has updated Nemo Megatron, software for training large language models. The updates &#8211; sequence parallelism (SP) and selective activation recomputation (SAR) &#8211; makes training large-scale neural networks significantly more efficient. </p>\n\n\n\n<p>&nbsp;&nbsp;&nbsp;&#8220;The latest updates to NeMo Megatron offer 30% speed-ups for training GPT-3 models ranging in size from 22 billion to 1 trillion parameters. Training can now be done on 175 billion-parameter models using 1,024 NVIDIA A100 GPUs in just 24 days–reducing time to results by 10 days, or some 250,000 hours of GPU computing, prior to these new releases,&#8221; NVIDIA writes.&nbsp;</p>\n\n\n\n<p><strong>Why this matters: </strong>By integrating basic improvements into training frameworks, NVIDIA is going to generate a large-scale impact on anyone who uses the Megatron framework. This illustrates how AI progress sometimes operates like a one-way ratchet &#8211; someone implements some changes in some increasingly widely used software, and efficiency jumps upward for all the users overnight.<br><strong>   Read more:</strong><a href=\"https://developer.nvidia.com/blog/nvidia-ai-platform-delivers-big-gains-for-large-language-models/\"> NVIDIA AI Platform Delivers Big Gains for Large Language Models (NVIDIA blog).<strong><br><br></strong></a><strong>####################################################</strong></p>\n\n\n\n<p><strong>Want to make a language model with a &#8216;fill in the middle&#8217; option? Here&#8217;s how!</strong><br><em>…Sentence completion is cool, but infilling is useful as well…</em><br>Here&#8217;s a straightforward paper from OpenAI that describes how to give language models the ability to learn to infill text &#8211; e.g, taking a sentence and knocking out the middle of it and asking the model to &#8216;fill in the middle&#8217;. </p>\n\n\n\n<p><strong>The big insight: </strong>The main insight here is that you can learn to fill in the middle &#8220;without compromising the left-to-right capability in pretraining…FIM models achieve the same test loss as AR models on left-to-right test loss while achieving lower FIM loss.&#8221;. They also learn that it&#8217;s inefficient to finetune a model to learn to fill in the middle, and you should generally do it at the pretraining stage instead.&nbsp;</p>\n\n\n\n<p><strong>Why this matters:</strong> Somewhat like DeepMind&#8217;s recent &#8216;Chinchilla&#8217; paper (<a href=\"https://jack-clark.net/2022/04/05/import-ai-290-china-plans-massive-models-deepmind-makes-a-smaller-and-smarter-model-open-source-clip-data/\">Import AI #290</a>), which showed you can dramatically increase the capabilities of language models by training them on 5X data, this paper shows you can augment an LM with a nice edit function, and this doesn&#8217;t come at a loss anywhere else. In fact, OpenAI shows that these &#8220;models are strictly more capable than canonically trained left-to-right models, at least within the bounds of the evaluations we consider&#8221;. <br><strong>   Read more: </strong><a href=\"https://arxiv.org/abs/2207.14255\">Efficient Training of Language Models to Fill in the Middle (arXiv)</a><strong>. </strong></p>\n\n\n\n<p><strong><br>####################################################<br></strong><br><strong>Google uses hybrid AI to improve its own code:</strong><br><em>…ML + semantic engines = useful capability…</em></p>\n\n\n\n<p>Google has combined machine learning and a rule-based semantic engine to train a Transformer-based system to do code completion on Google&#8217;s internal codebase. Google looked at how 10,000 Googlers used this capability over the course of three months and the results are quite promising: Google saw a 6% reduction in coding iteration time (switching between builds and tests) and a 7% reduction in context switches (leaving the IDE). &#8220;Currently, 3% of new code (measured in characters) is now generated from accepting ML completion suggestions,&#8221; Google writes.</p>\n\n\n\n<p><strong>What they did: </strong>Google trained a a transformer running on TPUs on code in Google&#8217;s monorepo, using a context of between ~1000 and ~2000 tokens. The company trained a single model on a mix of 8 languages (C++, Java, Python, Go, Typescript, Proto, Kotlin, and Dart), and trained a relatively small model (0.5 billion parameters) to allow for fast inference. <br>   &#8220;The model strongly benefits from the quality of the monorepo, which is enforced by guidelines and reviews,&#8221; Google writes. </p>\n\n\n\n<p><strong>Why this matters: </strong>This is another example of an &#8216;AI flywheel&#8217; &#8211; Google is using its own code to train models to help its engineers more efficiently write better code, and it is using a (human-run, for now) acceptance process to maintain the quality of the underlying monorepo, so it can avoid pathological degradations due to garbage in/garbage out dynamics. This is also an area where &#8216;economy of code scale&#8217; seems to matter &#8211; since Google famously has a single, gigantic internal monorepo, it&#8217;s easier for the company to train a single model on it. <br><strong>   Read more: </strong><a href=\"https://ai.googleblog.com/2022/07/ml-enhanced-code-completion-improves.html?m=1\">ML-Enhanced Code Completion Improves Developer Productivity (Google AI Blog).</a></p>\n\n\n\n<p><strong><br>####################################################<br><br>Huawei builds its own GitHub Copilot: PanGu-Coder:</strong><br><em>…Another illustration of the &#8216;fast follower&#8217; nature of Chinese labs…</em><br>Researchers with Huawei (specifically, the Noah&#8217;s Ark Lab, and Huawei Cloud), have built &#8216;PanGu-Coder&#8217;, a code completion model. PanGu-Coder is to PanGu as OpenAI&#8217;s Codex is to GPT3 &#8211; think of it as a follow-up model using a similar training procedure, albeit on a different data distribution. And, much like PanGu, PanGu-Coder has been published about a year after the public launch of Codex (and GitHub Copilot), illustrating the surprisingly fast rate at which Chinese labs are able to replace large-scale models. </p>\n\n\n\n<p><strong>What PanGu-Coder is: </strong>PanGu-Coder is a family of code models for code completion, varying in parameter size from 317million to 2.6 billion. In tests, Huawei claims PanGu-Coder does better than AlphaCode and GitHub Codex on a few human evaluations (though Salesforce&#8217;s &#8216;<a href=\"https://arxiv.org/abs/2203.13474\">Codegen</a>&#8216; model does quite well, also). Huawei also significantly improved the capabilities of PanGu-Coder by training a model called PanGu-Coder-FT, which is finetuned on a highly curated dataset.&nbsp;</p>\n\n\n\n<p><strong>Why this matters: </strong>Code models, much like language models, are becoming like an all-purpose swiss army knife for a range of AI capability and alignment research. It&#8217;s notable to me that Huawei has &#8211; again &#8211; managed to do a decent-looking replication of a frontier model developed by a Western lab. It&#8217;s also notable that few universities have made attempts to replicate these models, due to the resources (both computational and in terms of technical skill) required.<br><strong>   Read more:</strong><a href=\"https://arxiv.org/abs/2207.11280\">PanGu-Coder: Program Synthesis with Function-Level Language Modeling (arXiv).</a></p>\n\n\n\n<p><strong><br></strong><strong>####################################################</strong><strong><br></strong><strong><br></strong><strong>China releases GLM-130B, a very good language model:</strong><br><em>…The world&#8217;s best public, open source language model is now Made in China…</em></p>\n\n\n\n<p>Researchers with China&#8217;s Tsinghua University have built and released GLM-130B, a language model that outperforms OPT (Facebook&#8217;s OS replication of GPT3), BLOOM (HuggingFace&#8217;s OS replication of GPT3), and OpenAI&#8217;s original GPT3. This is a pretty big deal, both for the raw capabilities it gives researchers, and for the fact the current best-performing OS language model is Chinese, rather than made in the West. The model was trained on around 400 A100 GPUs which they were able to get via a donation from a local AI startup.</p>\n\n\n\n<p><strong>What&#8217;s special about GLM: </strong>GLM outperforms the above-mentioned models, as well as homegrown Chinese models like ERNIE Titan 3.0 (<a href=\"https://jack-clark.net/2022/01/10/import-ai-279-baidu-adds-knowledge-to-a-language-model-us-military-ai-how-china-thinks-about-ai-governance/\">Import AI 279</a>).<br><strong>   Read more</strong>: <a href=\"http://keg.cs.tsinghua.edu.cn/glm-130b/posts/glm-130b/\">GLM-130B: An Open Bilingual Pre-Trained Model (Tsinghua)</a>.<br><strong>   Get the model here: </strong><a href=\"https://github.com/THUDM/GLM-130B\">GLM-130B (THUDM, GitHub)</a><strong>.</strong><br><strong>   Try the model for yourself:</strong> <a href=\"https://huggingface.co/spaces/THUDM/GLM-130B\">GLM-130B (HuggingFace)</a>.<br><strong><br>####################################################</strong></p>\n\n\n\n<p><strong>Tech Tales:</strong></p>\n\n\n\n<p><strong>Micro Religions</strong></p>\n\n\n\n<p>During the transition there was a micro religion phase. The recommender systems had figured out just how important community was to people, during that time. So the recommenders started shuffling all the different users of all the different apps towards more and more specific niches. It started with commercial stuff &#8211; shoes, different &#8216;aesthetics&#8217;, watches, different locations to spend time at, different hobbies and so on. But eventually it found its way to theistic beliefs &#8211; what is the larger purpose of the world? These beliefs turned out to be fractal-like where the recommenders would find ways to push people into the most specific, narrow existing variations &#8211; e.g, traditional catholics versus mormons &#8211; but they got through that pretty quickly. Next, the recommenders and the generation systems started to autonomously build entire new belief structures (paired with aesthetic styles that materialized as buyable, wearable merchandise across the full variety of products). They then pushed people towards these, and pretty quickly people &#8211; especially young people &#8211; started identifying as all these different sub-types of religion. After The Events we all collectively looked back on this time as both quite special (some of the beliefs and aesthetics were tremendously strange and complicated), and also scary (there weren&#8217;t religious wars, but there were warning signs of building-up inter-micro-religion conflict, though The Events happened shortly after and averted war, while bringing about some of the major changes).&nbsp;</p>\n\n\n\n<p><strong>Things that inspired this story:</strong> Intersection of recommendation engines + generative models; large-scale advertising systems. </p>\n",
  "wfw:commentRss": "https://jack-clark.net/2022/08/08/import-ai-299-the-worlds-best-language-model-is-made-in-china-nvidia-boosts-llm-training-openai-shows-how-to-fill-in-the-middle-on-a-language-model/feed/",
  "slash:comments": 0,
  "media:content": {
    "media:title": "Jack Clark"
  }
}