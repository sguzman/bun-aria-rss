{
  "id": "tag:drsimonj.svbtle.com,2014:Post/five-simple-tricks-to-improve-your-r-code",
  "published": "2017-12-30T00:00:19-08:00",
  "updated": "2017-12-30T00:00:19-08:00",
  "link": "",
  "title": "Five tips to improve your R code",
  "content": "<p><a href=\"https://twitter.com/drsimonj\" rel=\"nofollow\">@drsimonj</a> here with five simple tricks I find myself sharing all the time with fellow R users to improve their code!</p>\n\n<p><strong><em>This post was originally published on <a href=\"https://www.datacamp.com/community/tutorials/five-tips-r-code-improve\" rel=\"nofollow\">DataCamp’s community</a> as one of their top 10 articles in 2017</em></strong></p>\n<h2 id=\"1-more-fun-to-sequence-from-1_2\">1. More fun to sequence from 1 <a class=\"head_anchor\" href=\"#1-more-fun-to-sequence-from-1_2\" rel=\"nofollow\">#</a>\n</h2>\n<p>Next time you use the colon operator to create a sequence from 1 like <code class=\"prettyprint\">1:n</code>, try <code class=\"prettyprint\">seq()</code>.</p>\n\n<pre><code class=\"prettyprint lang-r\"># Sequence a vector\nx &lt;- runif(10)\nseq(x)\n#&gt;  [1]  1  2  3  4  5  6  7  8  9 10\n\n# Sequence an integer\nseq(nrow(mtcars))\n#&gt;  [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23\n#&gt; [24] 24 25 26 27 28 29 30 31 32\n</code></pre>\n\n<p>The colon operator can produce unexpected results that can create all sorts of problems without you noticing! Take a look at what happens when you want to sequence the length of an empty vector:</p>\n\n<pre><code class=\"prettyprint lang-r\"># Empty vector\nx &lt;- c()\n\n1:length(x)\n#&gt; [1] 1 0\n\nseq(x)\n#&gt; integer(0)\n</code></pre>\n\n<p>You’ll also notice that this saves you from using functions like <code class=\"prettyprint\">length()</code>. When applied to an object of a certain length, <code class=\"prettyprint\">seq()</code> will automatically create a sequence from 1 to the length of the object.</p>\n<h2 id=\"2-code-classprettyprintvectorcode-what-you-co_2\">2. <code class=\"prettyprint\">vector()</code> what you <code class=\"prettyprint\">c()</code> <a class=\"head_anchor\" href=\"#2-code-classprettyprintvectorcode-what-you-co_2\" rel=\"nofollow\">#</a>\n</h2>\n<p>Next time you create an empty vector with <code class=\"prettyprint\">c()</code>, try to replace it with <code class=\"prettyprint\">vector(\"type\", length)</code>.</p>\n\n<pre><code class=\"prettyprint lang-r\"># A numeric vector with 5 elements\nvector(\"numeric\", 5)\n#&gt; [1] 0 0 0 0 0\n\n# A character vector with 3 elements\nvector(\"character\", 3)\n#&gt; [1] \"\" \"\" \"\"\n</code></pre>\n\n<p>Doing this improves memory usage and increases speed! You often know upfront what type of values will go into a vector, and how long the vector will be. Using <code class=\"prettyprint\">c()</code> means R has to <strong>slowly</strong> work both of these things out. So help give it a boost with <code class=\"prettyprint\">vector()</code>!</p>\n\n<p>A good example of this value is in a for loop. People often write loops by declaring an empty vector and growing it with <code class=\"prettyprint\">c()</code> like this:</p>\n\n<pre><code class=\"prettyprint lang-r\">x &lt;- c()\nfor (i in seq(5)) {\n  x &lt;- c(x, i)\n}\n</code></pre>\n\n<pre><code class=\"prettyprint\">#&gt; x at step 1 : 1\n#&gt; x at step 2 : 1, 2\n#&gt; x at step 3 : 1, 2, 3\n#&gt; x at step 4 : 1, 2, 3, 4\n#&gt; x at step 5 : 1, 2, 3, 4, 5\n</code></pre>\n\n<p>Instead, pre-define the type and length with <code class=\"prettyprint\">vector()</code>, and reference positions by index, like this:</p>\n\n<pre><code class=\"prettyprint lang-r\">n &lt;- 5\nx &lt;- vector(\"integer\", n)\nfor (i in seq(n)) {\n  x[i] &lt;- i\n}\n</code></pre>\n\n<pre><code class=\"prettyprint\">#&gt; x at step 1 : 1, 0, 0, 0, 0\n#&gt; x at step 2 : 1, 2, 0, 0, 0\n#&gt; x at step 3 : 1, 2, 3, 0, 0\n#&gt; x at step 4 : 1, 2, 3, 4, 0\n#&gt; x at step 5 : 1, 2, 3, 4, 5\n</code></pre>\n\n<p>Here’s a quick speed comparison:</p>\n\n<pre><code class=\"prettyprint lang-r\">n &lt;- 1e5\n\nx_empty &lt;- c()\nsystem.time(for(i in seq(n)) x_empty &lt;- c(x_empty, i))\n#&gt;    user  system elapsed \n#&gt;  16.147   2.402  20.158\n\nx_zeros &lt;- vector(\"integer\", n)\nsystem.time(for(i in seq(n)) x_zeros[i] &lt;- i)\n#&gt;    user  system elapsed \n#&gt;   0.008   0.000   0.009\n</code></pre>\n\n<p>That should be convincing enough!</p>\n<h2 id=\"3-ditch-the-code-classprettyprintwhichcode_2\">3. Ditch the <code class=\"prettyprint\">which()</code> <a class=\"head_anchor\" href=\"#3-ditch-the-code-classprettyprintwhichcode_2\" rel=\"nofollow\">#</a>\n</h2>\n<p>Next time you use <code class=\"prettyprint\">which()</code>, try to ditch it! People often use <code class=\"prettyprint\">which()</code> to get indices from some boolean condition, and then select values at those indices. This is not necessary.</p>\n\n<p>Getting vector elements greater than 5:</p>\n\n<pre><code class=\"prettyprint lang-r\">x &lt;- 3:7\n\n# Using which (not necessary)\nx[which(x &gt; 5)]\n#&gt; [1] 6 7\n\n# No which\nx[x &gt; 5]\n#&gt; [1] 6 7\n</code></pre>\n\n<p>Or counting number of values greater than 5:</p>\n\n<pre><code class=\"prettyprint lang-r\"># Using which\nlength(which(x &gt; 5))\n#&gt; [1] 2\n\n# Without which\nsum(x &gt; 5)\n#&gt; [1] 2\n</code></pre>\n\n<p>Why should you ditch <code class=\"prettyprint\">which()</code>? It’s often unnecessary and boolean vectors are all you need.</p>\n\n<p>For example, R lets you select elements flagged as <code class=\"prettyprint\">TRUE</code> in a boolean vector:</p>\n\n<pre><code class=\"prettyprint lang-r\">condition &lt;- x &gt; 5\ncondition\n#&gt; [1] FALSE FALSE FALSE  TRUE  TRUE\nx[condition]\n#&gt; [1] 6 7\n</code></pre>\n\n<p>Also, when combined with <code class=\"prettyprint\">sum()</code> or <code class=\"prettyprint\">mean()</code>, boolean vectors can be used to get the count or proportion of values meeting a condition:</p>\n\n<pre><code class=\"prettyprint lang-r\">sum(condition)\n#&gt; [1] 2\nmean(condition)\n#&gt; [1] 0.4\n</code></pre>\n\n<p><code class=\"prettyprint\">which()</code> tells you the indices of TRUE values:</p>\n\n<pre><code class=\"prettyprint lang-r\">which(condition)\n#&gt; [1] 4 5\n</code></pre>\n\n<p>And while the results are not wrong, it’s just not necessary. For example, I often see people combining <code class=\"prettyprint\">which()</code> and <code class=\"prettyprint\">length()</code> to test whether any or all values are TRUE. Instead, you just need <code class=\"prettyprint\">any()</code> or <code class=\"prettyprint\">all()</code>:</p>\n\n<pre><code class=\"prettyprint lang-r\">x &lt;- c(1, 2, 12)\n\n# Using `which()` and `length()` to test if any values are greater than 10\nif (length(which(x &gt; 10)) &gt; 0)\n  print(\"At least one value is greater than 10\")\n#&gt; [1] \"At least one value is greater than 10\"\n\n# Wrapping a boolean vector with `any()`\nif (any(x &gt; 10))\n  print(\"At least one value is greater than 10\")\n#&gt; [1] \"At least one value is greater than 10\"\n\n# Using `which()` and `length()` to test if all values are positive\nif (length(which(x &gt; 0)) == length(x))\n  print(\"All values are positive\")\n#&gt; [1] \"All values are positive\"\n\n# Wrapping a boolean vector with `all()`\nif (all(x &gt; 0))\n  print(\"All values are positive\")\n#&gt; [1] \"All values are positive\"\n</code></pre>\n\n<p>Oh, and it saves you a little time…</p>\n\n<pre><code class=\"prettyprint lang-r\">x &lt;- runif(1e8)\n\nsystem.time(x[which(x &gt; .5)])\n#&gt;    user  system elapsed \n#&gt;   1.245   0.486   1.856\n\nsystem.time(x[x &gt; .5])\n#&gt;    user  system elapsed \n#&gt;   1.085   0.395   1.541\n</code></pre>\n<h2 id=\"4-code-classprettyprintfactorcode-that-factor_2\">4. <code class=\"prettyprint\">factor</code> that factor! <a class=\"head_anchor\" href=\"#4-code-classprettyprintfactorcode-that-factor_2\" rel=\"nofollow\">#</a>\n</h2>\n<p>Ever removed values from a factor and found you’re stuck with old levels that don’t exist anymore? I see all sorts of creative ways to deal with this. The simplest solution is often just to wrap it in <code class=\"prettyprint\">factor()</code> again.</p>\n\n<p>This example creates a factor with four levels (<code class=\"prettyprint\">\"a\"</code>, <code class=\"prettyprint\">\"b\"</code>, <code class=\"prettyprint\">\"c\"</code> and <code class=\"prettyprint\">\"d\"</code>):</p>\n\n<pre><code class=\"prettyprint lang-r\"># A factor with four levels\nx &lt;- factor(c(\"a\", \"b\", \"c\", \"d\"))\nx\n#&gt; [1] a b c d\n#&gt; Levels: a b c d\n\nplot(x)\n</code></pre>\n\n<p><a href=\"https://svbtleusercontent.com/jzrk7zvnpyaquq.png\" rel=\"nofollow\"><img src=\"https://svbtleusercontent.com/jzrk7zvnpyaquq_small.png\" alt=\"factor-1-1.png\"></a></p>\n\n<p>If you drop all cases of one level (<code class=\"prettyprint\">\"d\"</code>), the level is still recorded in the factor:</p>\n\n<pre><code class=\"prettyprint lang-r\"># Drop all values for one level\nx &lt;- x[x != \"d\"]\n\n# But we still have this level!\nx\n#&gt; [1] a b c\n#&gt; Levels: a b c d\n\nplot(x)\n</code></pre>\n\n<p><a href=\"https://svbtleusercontent.com/1e9acxfzvls3mq.png\" rel=\"nofollow\"><img src=\"https://svbtleusercontent.com/1e9acxfzvls3mq_small.png\" alt=\"factor-2-1.png\"></a></p>\n\n<p>A super simple method for removing it is to use <code class=\"prettyprint\">factor()</code> again:</p>\n\n<pre><code class=\"prettyprint lang-r\">x &lt;- factor(x)\nx\n#&gt; [1] a b c\n#&gt; Levels: a b c\n\nplot(x)\n</code></pre>\n\n<p><a href=\"https://svbtleusercontent.com/yk6esbvbbbxm0q.png\" rel=\"nofollow\"><img src=\"https://svbtleusercontent.com/yk6esbvbbbxm0q_small.png\" alt=\"factor-3-1.png\"></a></p>\n\n<p>This is typically a good solution to a problem that gets a lot of people mad. So save yourself a headache and <code class=\"prettyprint\">factor</code> that factor!</p>\n<blockquote>\n<p>Aside, thanks to Amy Szczepanski who contacted me after the original publication of this article and mentioned <code class=\"prettyprint\">droplevels()</code>. Check it out if this is a problem for you!</p>\n</blockquote><h2 id=\"5-first-you-get-the-code-classprettyprintcode_2\">5. First you get the <code class=\"prettyprint\">$</code>, then you get the power <a class=\"head_anchor\" href=\"#5-first-you-get-the-code-classprettyprintcode_2\" rel=\"nofollow\">#</a>\n</h2>\n<p>Next time you want to extract values from a <code class=\"prettyprint\">data.frame</code> column where the rows meet a condition, specify the column with <code class=\"prettyprint\">$</code> before the rows with <code class=\"prettyprint\">[</code>.</p>\n<h4 id=\"examples_4\">Examples <a class=\"head_anchor\" href=\"#examples_4\" rel=\"nofollow\">#</a>\n</h4>\n<p>Say you want the horsepower (<code class=\"prettyprint\">hp</code>) for cars with 4 cylinders (<code class=\"prettyprint\">cyl</code>), using the <code class=\"prettyprint\">mtcars</code> data set. You can write either of these:</p>\n\n<pre><code class=\"prettyprint lang-r\"># rows first, column second - not ideal\nmtcars[mtcars$cyl == 4, ]$hp\n#&gt;  [1]  93  62  95  66  52  65  97  66  91 113 109\n\n# column first, rows second - much better\nmtcars$hp[mtcars$cyl == 4]\n#&gt;  [1]  93  62  95  66  52  65  97  66  91 113 109\n</code></pre>\n\n<p>The tip here is to use the second approach.</p>\n\n<p>But why is that?</p>\n\n<p>First reason: do away with that pesky comma! When you specify rows before the column, you need to remember the comma: <code class=\"prettyprint\">mtcars[mtcars$cyl == 4</code><strong>,</strong><code class=\"prettyprint\">]$hp</code>. When you specify column first, this means that you’re now referring to a vector, and don’t need the comma!</p>\n\n<p>Second reason: speed! Let’s test it out on a larger data frame:</p>\n\n<pre><code class=\"prettyprint lang-r\"># Simulate a data frame...\nn &lt;- 1e7\nd &lt;- data.frame(\n  a = seq(n),\n  b = runif(n)\n)\n\n# rows first, column second - not ideal\nsystem.time(d[d$b &gt; .5, ]$a)\n#&gt;    user  system elapsed \n#&gt;   0.559   0.152   0.758\n\n# column first, rows second - much better\nsystem.time(d$a[d$b &gt; .5])\n#&gt;    user  system elapsed \n#&gt;   0.093   0.013   0.107\n</code></pre>\n\n<p>Worth it, right?</p>\n\n<p>Still, if you want to hone your skills as an R data frame ninja, I suggest learning <code class=\"prettyprint\">dplyr</code>. You can get a good overview on the <a href=\"http://dplyr.tidyverse.org/\" rel=\"nofollow\"><code class=\"prettyprint\">dplyr</code> website</a> or really learn the ropes with online courses like DataCamp’s <a href=\"https://www.datacamp.com/courses/dplyr-data-manipulation-r-tutorial\" rel=\"nofollow\">Data Manipulation in R with <code class=\"prettyprint\">dplyr</code></a>.</p>\n<h2 id=\"sign-off_2\">Sign off <a class=\"head_anchor\" href=\"#sign-off_2\" rel=\"nofollow\">#</a>\n</h2>\n<p>Thanks for reading and I hope this was useful for you.</p>\n\n<p>For updates of recent blog posts, follow <a href=\"https://twitter.com/drsimonj\" rel=\"nofollow\">@drsimonj</a> on Twitter, or email me at <a href=\"mailto:drsimonjackson@gmail.com\" rel=\"nofollow\">drsimonjackson@gmail.com</a> to get in touch.</p>\n\n<p>If you’d like the code that produced this blog, check out the <a href=\"https://github.com/drsimonj/blogR\" rel=\"nofollow\">blogR GitHub repository</a>.</p>"
}