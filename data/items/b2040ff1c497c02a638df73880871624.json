{
  "title": "Python, R, and the allure of magic",
  "link": "",
  "published": "2011-09-30T00:00:00-07:00",
  "updated": "2011-09-30T00:00:00-07:00",
  "author": {
    "name": "Wes McKinney"
  },
  "id": "tag:wesmckinney.com,2011-09-30:/blog/python-r-and-the-allure-of-magic/",
  "summary": "<p>R is much more magical than Python. What do I mean by this? In R, things like this are a part of everyday life:</p>\n<div class=\"github\"><pre><span></span><code><span class=\"o\">&gt;</span> <span class=\"n\">a</span> <span class=\"o\">&lt;-</span> <span class=\"nf\">rnorm</span><span class=\"p\">(</span><span class=\"m\">10</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;</span> <span class=\"n\">b</span> <span class=\"o\">&lt;-</span> <span class=\"nf\">rnorm</span><span class=\"p\">(</span><span class=\"m\">10</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;</span> <span class=\"nf\">cbind</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">)</span>\n               <span class=\"n\">a</span>          <span class=\"n\">b</span>\n <span class=\"p\">[</span><span class=\"m\">1</span><span class=\"p\">,]</span>  <span class=\"m\">0.8729978</span>  <span class=\"m\">0.5170078</span>\n <span class=\"p\">[</span><span class=\"m\">2</span><span class=\"p\">,]</span> <span class=\"m\">-0.6885048</span> <span class=\"m\">-0.4430447</span>\n <span class=\"p\">[</span><span class=\"m\">3</span><span class=\"p\">,]</span>  <span class=\"m\">0.4017740</span>  <span class=\"m\">1.8985843 â€¦</span></code></pre></div>",
  "content": "<p>R is much more magical than Python. What do I mean by this? In R, things like this are a part of everyday life:</p>\n<div class=\"github\"><pre><span></span><code><span class=\"o\">&gt;</span> <span class=\"n\">a</span> <span class=\"o\">&lt;-</span> <span class=\"nf\">rnorm</span><span class=\"p\">(</span><span class=\"m\">10</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;</span> <span class=\"n\">b</span> <span class=\"o\">&lt;-</span> <span class=\"nf\">rnorm</span><span class=\"p\">(</span><span class=\"m\">10</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;</span> <span class=\"nf\">cbind</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">)</span>\n               <span class=\"n\">a</span>          <span class=\"n\">b</span>\n <span class=\"p\">[</span><span class=\"m\">1</span><span class=\"p\">,]</span>  <span class=\"m\">0.8729978</span>  <span class=\"m\">0.5170078</span>\n <span class=\"p\">[</span><span class=\"m\">2</span><span class=\"p\">,]</span> <span class=\"m\">-0.6885048</span> <span class=\"m\">-0.4430447</span>\n <span class=\"p\">[</span><span class=\"m\">3</span><span class=\"p\">,]</span>  <span class=\"m\">0.4017740</span>  <span class=\"m\">1.8985843</span>\n <span class=\"p\">[</span><span class=\"m\">4</span><span class=\"p\">,]</span>  <span class=\"m\">2.1088905</span> <span class=\"m\">-1.4121763</span>\n <span class=\"p\">[</span><span class=\"m\">5</span><span class=\"p\">,]</span>  <span class=\"m\">0.9375273</span>  <span class=\"m\">0.4703302</span>\n <span class=\"p\">[</span><span class=\"m\">6</span><span class=\"p\">,]</span>  <span class=\"m\">0.5558276</span> <span class=\"m\">-0.5825152</span>\n <span class=\"p\">[</span><span class=\"m\">7</span><span class=\"p\">,]</span> <span class=\"m\">-2.1606252</span>  <span class=\"m\">0.7379874</span>\n <span class=\"p\">[</span><span class=\"m\">8</span><span class=\"p\">,]</span> <span class=\"m\">-0.7651046</span> <span class=\"m\">-0.4534345</span>\n <span class=\"p\">[</span><span class=\"m\">9</span><span class=\"p\">,]</span> <span class=\"m\">-4.2604901</span>  <span class=\"m\">0.9561077</span>\n<span class=\"p\">[</span><span class=\"m\">10</span><span class=\"p\">,]</span>  <span class=\"m\">0.3940632</span> <span class=\"m\">-0.8331285</span>\n</code></pre></div>\n\n<p>If you're a seasoned Python programmer, you might have the sort of visceral negative reaction that I do to this. Seriously, just where in the hell did those variable names come from? So when I say <strong>magic</strong> here I'm talking about <em>abusing the language's parser</em>. There is nothing special about R that makes the above behavior possible, but rather taking a fundamentally different design philosophy to, say, Python. As any Python programmer knows: <strong>Explicit is better than implicit</strong>. I happen to agree. There is also a bit of a semantic difference in R versus Python in that assignment in R typically copies data, whereas variables in Python are simply references (labels) for a particular object. So you could make the argument that the names <code>a</code> and <code>b</code> above are more strongly linked to the underlying data.</p>\n<p>While building <a href=\"http://pandas.sourceforge.net\" title=\"pandas\" target=\"_blank\">pandas</a> over the last several years, I occasionally grapple with issues like the above. Maybe I should just break from Python ethos and embrace magic? I mean, how hard would it be to get the above behavior in Python? Python gives you stack frames and the <a href=\"http://docs.python.org/library/ast.html\" title=\"ast module\" target=\"_blank\">ast</a> module after all. So I went down the rabbit hole and wrote this little code snippet:</p>\n<div class=\"github\"><pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">pandas.util.testing</span> <span class=\"kn\">import</span> <span class=\"n\">set_trace</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pandas.util.testing</span> <span class=\"k\">as</span> <span class=\"nn\">tm</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">pandas</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">import</span> <span class=\"nn\">ast</span>\n<span class=\"kn\">import</span> <span class=\"nn\">inspect</span>\n<span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">merge</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">):</span>\n    <span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"n\">_</span> <span class=\"o\">=</span> <span class=\"n\">parse_stmt</span><span class=\"p\">(</span><span class=\"n\">inspect</span><span class=\"o\">.</span><span class=\"n\">currentframe</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">f_back</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">DataFrame</span><span class=\"p\">({</span><span class=\"n\">args</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"p\">:</span> <span class=\"n\">a</span><span class=\"p\">,</span>\n                      <span class=\"n\">args</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"p\">:</span> <span class=\"n\">b</span><span class=\"p\">})</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">parse_stmt</span><span class=\"p\">(</span><span class=\"n\">frame</span><span class=\"p\">):</span>\n    <span class=\"n\">info</span> <span class=\"o\">=</span> <span class=\"n\">inspect</span><span class=\"o\">.</span><span class=\"n\">getframeinfo</span><span class=\"p\">(</span><span class=\"n\">frame</span><span class=\"p\">)</span>\n    <span class=\"n\">call</span> <span class=\"o\">=</span> <span class=\"n\">info</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n    <span class=\"n\">mod</span> <span class=\"o\">=</span> <span class=\"n\">ast</span><span class=\"o\">.</span><span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"n\">call</span><span class=\"p\">)</span>\n    <span class=\"n\">body</span> <span class=\"o\">=</span> <span class=\"n\">mod</span><span class=\"o\">.</span><span class=\"n\">body</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n    <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">body</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">ast</span><span class=\"o\">.</span><span class=\"n\">Assign</span><span class=\"p\">,</span> <span class=\"n\">ast</span><span class=\"o\">.</span><span class=\"n\">Expr</span><span class=\"p\">)):</span>\n        <span class=\"n\">call</span> <span class=\"o\">=</span> <span class=\"n\">body</span><span class=\"o\">.</span><span class=\"n\">value</span>\n    <span class=\"k\">elif</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">body</span><span class=\"p\">,</span> <span class=\"n\">ast</span><span class=\"o\">.</span><span class=\"n\">Call</span><span class=\"p\">):</span>\n        <span class=\"n\">call</span> <span class=\"o\">=</span> <span class=\"n\">body</span>\n    <span class=\"k\">return</span> <span class=\"n\">_parse_call</span><span class=\"p\">(</span><span class=\"n\">call</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">_parse_call</span><span class=\"p\">(</span><span class=\"n\">call</span><span class=\"p\">):</span>\n    <span class=\"n\">func</span> <span class=\"o\">=</span> <span class=\"n\">_maybe_format_attribute</span><span class=\"p\">(</span><span class=\"n\">call</span><span class=\"o\">.</span><span class=\"n\">func</span><span class=\"p\">)</span>\n\n    <span class=\"n\">str_args</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">for</span> <span class=\"n\">arg</span> <span class=\"ow\">in</span> <span class=\"n\">call</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"p\">,</span> <span class=\"n\">ast</span><span class=\"o\">.</span><span class=\"n\">Name</span><span class=\"p\">):</span>\n            <span class=\"n\">str_args</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">)</span>\n        <span class=\"k\">elif</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"p\">,</span> <span class=\"n\">ast</span><span class=\"o\">.</span><span class=\"n\">Call</span><span class=\"p\">):</span>\n            <span class=\"n\">formatted</span> <span class=\"o\">=</span> <span class=\"n\">_format_call</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"p\">)</span>\n            <span class=\"n\">str_args</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">formatted</span><span class=\"p\">)</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">func</span><span class=\"p\">,</span> <span class=\"n\">str_args</span><span class=\"p\">,</span> <span class=\"p\">{}</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">_format_call</span><span class=\"p\">(</span><span class=\"n\">call</span><span class=\"p\">):</span>\n    <span class=\"n\">func</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"n\">kwds</span> <span class=\"o\">=</span> <span class=\"n\">_parse_call</span><span class=\"p\">(</span><span class=\"n\">call</span><span class=\"p\">)</span>\n    <span class=\"n\">content</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>\n    <span class=\"k\">if</span> <span class=\"n\">args</span><span class=\"p\">:</span>\n        <span class=\"n\">content</span> <span class=\"o\">+=</span> <span class=\"s1\">&#39;, &#39;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">kwds</span><span class=\"p\">:</span>\n        <span class=\"n\">fmt_kwds</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;</span><span class=\"si\">%s</span><span class=\"s1\">=</span><span class=\"si\">%s</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"n\">item</span> <span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">kwds</span><span class=\"o\">.</span><span class=\"n\">iteritems</span><span class=\"p\">()]</span>\n        <span class=\"n\">joined_kwds</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;, &#39;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">fmt_kwds</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">args</span><span class=\"p\">:</span>\n            <span class=\"n\">content</span> <span class=\"o\">=</span> <span class=\"n\">content</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;, &#39;</span> <span class=\"o\">+</span> <span class=\"n\">joined_kwds</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">content</span> <span class=\"o\">+=</span> <span class=\"n\">joined_kwds</span>\n    <span class=\"k\">return</span> <span class=\"s1\">&#39;</span><span class=\"si\">%s</span><span class=\"s1\">(</span><span class=\"si\">%s</span><span class=\"s1\">)&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">,</span> <span class=\"n\">content</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">_maybe_format_attribute</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">ast</span><span class=\"o\">.</span><span class=\"n\">Attribute</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">_format_attribute</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">name</span><span class=\"o\">.</span><span class=\"n\">id</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">_format_attribute</span><span class=\"p\">(</span><span class=\"n\">attr</span><span class=\"p\">):</span>\n    <span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"n\">attr</span><span class=\"o\">.</span><span class=\"n\">value</span>\n    <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">attr</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">ast</span><span class=\"o\">.</span><span class=\"n\">Attribute</span><span class=\"p\">):</span>\n        <span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"n\">_format_attribute</span><span class=\"p\">(</span><span class=\"n\">attr</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">id</span>\n    <span class=\"k\">return</span> <span class=\"s1\">&#39;.&#39;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">((</span><span class=\"n\">obj</span><span class=\"p\">,</span> <span class=\"n\">attr</span><span class=\"o\">.</span><span class=\"n\">attr</span><span class=\"p\">))</span>\n\n<span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">tm</span><span class=\"o\">.</span><span class=\"n\">makeTimeSeries</span><span class=\"p\">()</span>\n<span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">tm</span><span class=\"o\">.</span><span class=\"n\">makeTimeSeries</span><span class=\"p\">()</span>\n<span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">merge</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">)</span>\n</code></pre></div>\n\n<p>While this is woefully unpythonic, it's also kind of cool:</p>\n<div class=\"github\"><pre><span></span><code>In [27]: merge(a, b)\nOut[27]:\n            a         b\n2000-01-03 -1.35      0.8398\n2000-01-04  0.999    -1.617\n2000-01-05  0.2537    1.433\n2000-01-06  0.6273   -0.3959\n2000-01-07  0.7963   -0.789\n2000-01-10  0.004295 -1.446\n</code></pre></div>\n\n<p>This can even parse and format more complicated expressions (harder than it looks, because you have to walk the whole AST):</p>\n<div class=\"github\"><pre><span></span><code>In [30]: merge(a, np.log(b))\nOut[30]:\n            a        np.log(b)\n2000-01-03  0.6243   0.7953\n2000-01-04  0.3593  -1.199\n2000-01-05  2.805   -1.059\n2000-01-06  0.6369  -0.9067\n2000-01-07 -0.2734   NaN\n2000-01-10 -1.023    0.3326\n</code></pre></div>\n\n<p>Now, I am *not* suggesting we do this any time soon. I'm going to prefer the explicit approach (cf. the <a href=\"http://www.python.org/dev/peps/pep-0020/\" title=\"Zen of Python\" target=\"_blank\">Zen of Python</a>) any day of the week:</p>\n<div class=\"github\"><pre><span></span><code><span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">32</span><span class=\"p\">]:</span> <span class=\"n\">DataFrame</span><span class=\"p\">({</span><span class=\"s1\">&#39;a&#39;</span> <span class=\"p\">:</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"s1\">&#39;log(b)&#39;</span> <span class=\"p\">:</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">log</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">)})</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">32</span><span class=\"p\">]:</span>\n            <span class=\"n\">a</span>        <span class=\"n\">log</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">)</span>\n<span class=\"mi\">2000</span><span class=\"o\">-</span><span class=\"mi\">01</span><span class=\"o\">-</span><span class=\"mi\">03</span>  <span class=\"mf\">0.6243</span>   <span class=\"mf\">0.7953</span>\n<span class=\"mi\">2000</span><span class=\"o\">-</span><span class=\"mi\">01</span><span class=\"o\">-</span><span class=\"mi\">04</span>  <span class=\"mf\">0.3593</span>  <span class=\"o\">-</span><span class=\"mf\">1.199</span>\n<span class=\"mi\">2000</span><span class=\"o\">-</span><span class=\"mi\">01</span><span class=\"o\">-</span><span class=\"mi\">05</span>  <span class=\"mf\">2.805</span>   <span class=\"o\">-</span><span class=\"mf\">1.059</span>\n<span class=\"mi\">2000</span><span class=\"o\">-</span><span class=\"mi\">01</span><span class=\"o\">-</span><span class=\"mi\">06</span>  <span class=\"mf\">0.6369</span>  <span class=\"o\">-</span><span class=\"mf\">0.9067</span>\n<span class=\"mi\">2000</span><span class=\"o\">-</span><span class=\"mi\">01</span><span class=\"o\">-</span><span class=\"mi\">07</span> <span class=\"o\">-</span><span class=\"mf\">0.2734</span>   <span class=\"n\">NaN</span>\n<span class=\"mi\">2000</span><span class=\"o\">-</span><span class=\"mi\">01</span><span class=\"o\">-</span><span class=\"mi\">10</span> <span class=\"o\">-</span><span class=\"mf\">1.023</span>    <span class=\"mf\">0.3326</span>\n</code></pre></div>"
}