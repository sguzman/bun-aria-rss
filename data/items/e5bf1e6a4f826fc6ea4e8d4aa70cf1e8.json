{
  "title": "DIY building an R package",
  "link": "",
  "id": "http://brooksandrew.github.io/simpleblog/articles/personal-R-package",
  "published": "2014-11-20T00:00:00+00:00",
  "updated": "2014-11-20T00:00:00+00:00",
  "author": {
    "name": "andrew brooks",
    "uri": "http://brooksandrew.github.io/simpleblog",
    "email": "andrewbrooksct@gmail.com"
  },
  "content": "<h5 id=\"why-create-a-personal-r-package\">Why create a personal R package?</h5>\n\n<p>As a consulting data scientist, I write a lot of R code in a lot of different places – physically and virtually.  Different computers, servers, evironments, VPNs, operating systems, all of the above.\nEven when I have the luxury of working with the same client (and computing environment) for enough time to work on different projects, things can get messy.</p>\n\n<h5 id=\"when-is-it-worth-it\">When is it worth it?</h5>\n\n<p>I find myself often facing a dilemma – do I keep project specific code consolidated in one location at the expense of possible duplication later on by copying around old general purpose functions to allow for customization and further development in the future? \nOr do I maintain the general purpose functions which may be called from several different projects in one location at the expense of making customization and enhancing functionality more of a headache?</p>\n\n<p>I find there are pros and cons to each method:</p>\n\n<ul>\n  <li><strong>Decentralized:</strong> portable, customizable … but can be grossly duplicatitive and suffer from curse of versionality.</li>\n  <li><strong>Centralized:</strong> organized, clean, efficient, scalable … but can be rigid, requires discipline and can break old programs if you’re not careful.</li>\n</ul>\n\n<p>Surely centralization is the better solution after some tipping point.  However, the unpredictable nature of my work sometimes makes it difficult to predict when (or if) that tipping point will occur – when the benefits of centralization begin to outweigh the costs of the portable lightweight decentralized method.</p>\n\n<h5 id=\"why-not-just-a-folder-full-of-functions\">Why not just a folder full of functions?</h5>\n\n<p>I’m not sure I have a good answer to this yet.  This was my previous solution for maintaining general purpose R functions until building a package.</p>\n\n<p>Some current thoughts:</p>\n\n<ul>\n  <li><strong>Organization:</strong> I’m finding it easier to organize my functions with structured documentation on parameters and examples, albeit with some upfront cost of actually writing this documentation.</li>\n  <li><strong>Sharing:</strong> makes it easier to share your code that is documented in a common-tongue with others.</li>\n  <li><strong>Version Control:</strong> If you’re using Github, you can always revert back to previous versions.</li>\n  <li><strong>Tests &amp; Checks:</strong> When building a package, your code is evaluated for errors and missing dependencies, including your examples.</li>\n  <li><strong>Shiny apps:</strong> I realized during this process that you can actually wrap <a href=\"http://shiny.rstudio.com/\">Shiny apps</a> up into functions and configure them to take arguments from your environment.  Useful for quick and dirty exploratory work so you don’t have to worry about directories or change ui.R and server.R code around to fit something new you want to throw in a Shiny app.</li>\n</ul>\n\n<h5 id=\"how-to-start-building\">How to start building</h5>\n\n<ol>\n  <li>\n    <p>I got started following <a href=\"http://hilaryparker.com/2014/04/29/writing-an-r-package-from-scratch/\">Hilary Parker’s post: Writing an R package from scrach</a>.\nThis gets you a minimal package on Github.</p>\n  </li>\n  <li>\n    <p>I had to fill in with some steps from <a href=\"http://stevemosher.wordpress.com/ten-steps-to-building-an-r-package-under-windows/\">Steve Mosher’s post on building in Windows</a>.\nI needed to add R to my path and install <a href=\"http://miktex.org/\">Miktex</a>.</p>\n  </li>\n  <li>\n    <p>For anything else, you can probably find it on R guru <a href=\"http://r-pkgs.had.co.nz/\">Hadley Wickham’s R packages page</a> soon to be published (2015) by <a href=\"http://www.oreilly.com/\">O’Reilly</a> .</p>\n  </li>\n</ol>\n\n<h5 id=\"these-made-my-life-easier\">These made my life easier</h5>\n\n<ul>\n  <li><a href=\"http://cran.r-project.org/web/packages/devtools/index.html\">devtools</a> R package.</li>\n  <li><a href=\"http://cran.r-project.org/web/packages/roxygen2/index.html\">roxygen2</a> R package</li>\n  <li><a href=\"http://www.rstudio.com/\">RStudio</a> for building and testing</li>\n  <li><a href=\"http://miktex.org/\">Miktex</a></li>\n</ul>\n\n<h5 id=\"workflow-for-using-the-package\">Workflow for using the package</h5>\n\n<p>Once you’ve built a package on Github, it’s simple to pull it down wherever you are.</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-r\" data-lang=\"r\"><span class=\"w\"> \n</span><span class=\"n\">install.packages</span><span class=\"p\">(</span><span class=\"s1\">'devtools'</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"c1\"># if not already installed</span><span class=\"w\">\n</span><span class=\"n\">library</span><span class=\"p\">(</span><span class=\"s1\">'devtools'</span><span class=\"p\">)</span><span class=\"w\"> \n</span><span class=\"n\">install.packages</span><span class=\"p\">(</span><span class=\"s1\">'brooksandrew/Rsenal'</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"n\">library</span><span class=\"p\">(</span><span class=\"s1\">'Rsenal'</span><span class=\"p\">)</span></code></pre></figure>\n\n<h5 id=\"workflow-for-adding-to-a-package\">Workflow for adding to a package</h5>\n\n<ol>\n  <li>Clone the git repository from Github locally on whichever machine you’re on.</li>\n</ol>\n\n<figure class=\"highlight\"><pre><code class=\"language-bash\" data-lang=\"bash\"> \n  git clone https://github.com/brooksandrew/Rsenal.git Rsenal\n  </code></pre></figure>\n\n<ol>\n  <li>Add function(s) to the <code class=\"highlighter-rouge\">\\R</code> folder of your package.</li>\n  <li>Good practice to add <code class=\"highlighter-rouge\">packageName::</code> before each function from an external package, so it’s clear what your dependencies are for each function.</li>\n  <li>Update DESCRIPTION file with package dependencies: <a href=\"http://r-pkgs.had.co.nz/description.html\">imports and suggests</a>.</li>\n  <li>Check and Build in RStudio.</li>\n  <li>Commit and push changes to Github.</li>\n</ol>\n\n<figure class=\"highlight\"><pre><code class=\"language-bash\" data-lang=\"bash\"> \ngit add <span class=\"nb\">.</span>\ngit commit <span class=\"nt\">-m</span> <span class=\"s2\">\"adding functions to R package\"</span>\ngit push origin master</code></pre></figure>\n\n<h5 id=\"gotchas\">Gotchas</h5>\n\n<p>If using RStudio and roxygen2, you might have to Configure Build Tools to allow Roxygen to generate the documentation you want it to.</p>\n\n<p>In RStudio:<br />\n=&gt; Build<br />\n=&gt; Configure Build Tools<br />\n=&gt; Check box for “Generate Documentation with Roxygen”<br />\n=&gt; Click “Configure”<br />\n=&gt; Probably want to check boxes for at least “RD files” and “NAMESPACE”.</p>\n\n<p>If your NAMESPACE file (simple list of your functions and dependencies) isn’t updating and you dont want to use RStudio, try <code class=\"highlighter-rouge\">devtools::document()</code></p>\n\n\n  <p><a href=\"http://brooksandrew.github.io/simpleblog/articles/personal-R-package/\">DIY building an R package</a> was originally published by andrew brooks at <a href=\"http://brooksandrew.github.io/simpleblog\">andrew brooks</a> on November 20, 2014.</p>"
}