{
  "title": "Translating SQL to Pandas, Part 1",
  "link": "",
  "published": "2013-01-23T00:00:00-08:00",
  "updated": "2022-11-03T04:16:07-07:00",
  "author": {
    "name": "Greg Reda"
  },
  "id": "tag:www.gregreda.com,2013-01-23:/2013/01/23/translating-sql-to-pandas-part1/",
  "summary": "<p><em>I wrote a three part pandas tutorial for SQL users that you can find <a href=\"http://www.gregreda.com/2013/10/26/intro-to-pandas-data-structures/\">here</a></em>.</p>\n<p><em>UPDATE: If you're interested in learning pandas from a SQL perspective and would prefer to watch a video, you can find video of my 2014 PyData NYC talk <a href=\"http://reda.io/sql2pandas\">here</a>.</em></p>\n<p>For some reason, I've always found â€¦</p>",
  "content": "<p><em>I wrote a three part pandas tutorial for SQL users that you can find <a href=\"http://www.gregreda.com/2013/10/26/intro-to-pandas-data-structures/\">here</a></em>.</p>\n<p><em>UPDATE: If you're interested in learning pandas from a SQL perspective and would prefer to watch a video, you can find video of my 2014 PyData NYC talk <a href=\"http://reda.io/sql2pandas\">here</a>.</em></p>\n<p>For some reason, I've always found SQL to a much more intuitive tool for exploring a tabular dataset than I have other languages (namely R and Python).</p>\n<p>If you know SQL well, you can do a whole lot with it, and since data is often in a relational database anyway, it usually makes sense to stick with it.  I find that my workflow often includes writing a lot of queries in SQL (using <a href=\"http://www.sequelpro.com/\">Sequel Pro</a>) to get the data the way I want it, reading it into R (with <a href=\"http://www.rstudio.com/\">RStudio</a>), and then maybe a bit more exploration, modeling, and visualization (with <a href=\"http://ggplot2.org/\">ggplot2</a>).</p>\n<p>Not too long ago though, I came across <a href=\"http://blog.wesmckinney.com/\">Wes McKinney</a>'s <a href=\"http://pandas.pydata.org\">pandas</a> package and my interest was immediately piqued.  Pandas adds a bunch of functionality to Python, but most importantly, it allows for a DataFrame data structure - much like a database table or R's data frame.</p>\n<p>Given the great things I've been reading about pandas lately, I wanted to make a conscious effort to play around with it.  Instead of my typical workflow being a couple disjointed steps with SQL + R + (sometimes) Python, my thought is that it might make sense to have pandas work its way in and take over the R work.  While I probably won't be able to completely give up R (too much ggplot2 love over here), I get bored if I'm not learning something new, so pandas it is.</p>\n<p>I intend to document the process a bit - hopefully a couple posts illustrating the differences between SQL and pandas (and maybe some R too).</p>\n<p>Throughout the rest of this post, we're going to be working with data from the <a href=\"https://data.cityofchicago.org\">City of Chicago's open data</a> - specifically the <a href=\"https://data.cityofchicago.org/Transportation/Towed-Vehicles/ygr5-vcbg\">Towed Vechicles data</a>.</p>\n<h4>Loading the data</h4>\n<h5>Using SQLite</h5>\n<p>To be able to use SQL with this dataset, we'd first have to create the table.  Using <a href=\"http://www.sqlite.org/\">SQLite</a> syntax, we'd run the following:</p>\n<div class=\"highlight\"><pre><span></span><code><span class=\"k\">CREATE</span><span class=\"w\"> </span><span class=\"k\">TABLE</span><span class=\"w\"> </span><span class=\"n\">towed</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">tow_date</span><span class=\"w\"> </span><span class=\"nb\">text</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">make</span><span class=\"w\"> </span><span class=\"nb\">text</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">style</span><span class=\"w\"> </span><span class=\"nb\">text</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">model</span><span class=\"w\"> </span><span class=\"nb\">text</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">color</span><span class=\"w\"> </span><span class=\"nb\">text</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">plate</span><span class=\"w\"> </span><span class=\"nb\">text</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">state</span><span class=\"w\"> </span><span class=\"nb\">text</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">towed_address</span><span class=\"w\"> </span><span class=\"nb\">text</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">phone</span><span class=\"w\"> </span><span class=\"nb\">text</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">inventory</span><span class=\"w\"> </span><span class=\"nb\">text</span><span class=\"w\"></span>\n<span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n\n<p>Because SQLite <a href=\"http://www.sqlite.org/datatype3.html\">uses a very generic type system</a>, we don't get the strict data types that we would in most other databases (such as MySQL and PostgreSQL); therefore, all of our data is going to be stored as text.  In other databases, we'd store tow_date as a date or datetime field.</p>\n<p>Before we read the data into SQLite, we need to tell the database to that the fields are separated by a comma.  Then we can use the import command to read the file into our table.</p>\n<div class=\"highlight\"><pre><span></span><code><span class=\"p\">.</span><span class=\"n\">separator</span><span class=\"w\"> </span><span class=\"s1\">&#39;,&#39;</span><span class=\"w\"></span>\n<span class=\"p\">.</span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">Towed_Vehicles</span><span class=\"p\">.</span><span class=\"n\">csv</span><span class=\"w\"> </span><span class=\"n\">towed</span><span class=\"w\"></span>\n</code></pre></div>\n\n<p>Note that the downloaded CSV contains two header rows, so we'll need to delete those from our table since we don't need them.</p>\n<div class=\"highlight\"><pre><span></span><code><span class=\"k\">DELETE</span><span class=\"w\"> </span><span class=\"k\">FROM</span><span class=\"w\"> </span><span class=\"n\">towed</span><span class=\"w\"> </span><span class=\"k\">WHERE</span><span class=\"w\"> </span><span class=\"n\">tow_date</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s1\">&#39;Tow Date&#39;</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n\n<p>We should have 5,068 records in our table now (note: the City of Chicago regularly updates this dataset, so you might get a different number).</p>\n<div class=\"highlight\"><pre><span></span><code><span class=\"k\">SELECT</span><span class=\"w\"> </span><span class=\"k\">COUNT</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">FROM</span><span class=\"w\"> </span><span class=\"n\">towed</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">-- 5068</span>\n</code></pre></div>\n\n<h5>Using Python + pandas</h5>\n<p>Let do the same with <a href=\"http://pandas.pydata.org\">pandas</a> now.</p>\n<div class=\"highlight\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">pandas</span> <span class=\"k\">as</span> <span class=\"nn\">pd</span>\n\n<span class=\"n\">col_names</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;tow_date&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;make&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;style&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;model&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;color&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;plate&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;state&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;towed_address&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;phone&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;inventory&quot;</span><span class=\"p\">]</span>\n<span class=\"n\">towed</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">read_csv</span><span class=\"p\">(</span><span class=\"s2\">&quot;Towed_Vehicles.csv&quot;</span><span class=\"p\">,</span> <span class=\"n\">header</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">names</span><span class=\"o\">=</span><span class=\"n\">col_names</span><span class=\"p\">,</span>\n    <span class=\"n\">skiprows</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">parse_dates</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">&quot;tow_date&quot;</span><span class=\"p\">])</span>\n</code></pre></div>\n\n<p>The read_csv function in pandas actually allowed us to skip the two header columns and translate the tow_date field to a datetime field.</p>\n<p>Let's check our count just to make sure.</p>\n<div class=\"highlight\"><pre><span></span><code><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">towed</span><span class=\"p\">)</span> <span class=\"c1\"># 5068</span>\n</code></pre></div>\n\n<h4>Selecting data</h4>\n<h5>SQL</h5>\n<p>Selection data with SQL is fairly intuitive - just SELECT the columns you want FROM the particular table you're interested in.  You can also take advantage of the LIMIT clause to only see a subset of your data.</p>\n<div class=\"highlight\"><pre><span></span><code><span class=\"c1\">-- Return every column for every record in the towed table</span>\n<span class=\"k\">SELECT</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"k\">FROM</span><span class=\"w\"> </span><span class=\"n\">towed</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"c1\">-- Return the tow_date, make, style, model, and color for every record in the towed table</span>\n<span class=\"k\">SELECT</span><span class=\"w\"> </span><span class=\"n\">tow_date</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">make</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">style</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">model</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">color</span><span class=\"w\"> </span><span class=\"k\">FROM</span><span class=\"w\"> </span><span class=\"n\">towed</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"c1\">-- Return every column for the first five records of the towed table</span>\n<span class=\"k\">SELECT</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"k\">FROM</span><span class=\"w\"> </span><span class=\"n\">towed</span><span class=\"w\"> </span><span class=\"k\">LIMIT</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"c1\">-- Return every column in the towed table - start at the fifth record and show the next ten</span>\n<span class=\"k\">SELECT</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"k\">FROM</span><span class=\"w\"> </span><span class=\"n\">towed</span><span class=\"w\"> </span><span class=\"k\">LIMIT</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">-- records 5-14</span>\n</code></pre></div>\n\n<p>Additionally, you can throw a WHERE or ORDER BY (or both) into your queries for proper filtering and ordering of the data returned:</p>\n<div class=\"highlight\"><pre><span></span><code><span class=\"k\">SELECT</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"k\">FROM</span><span class=\"w\"> </span><span class=\"n\">towed</span><span class=\"w\"> </span><span class=\"k\">WHERE</span><span class=\"w\"> </span><span class=\"k\">state</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s1\">&#39;TX&#39;</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">-- Only towed vehicles from Texas</span>\n\n<span class=\"k\">SELECT</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"k\">FROM</span><span class=\"w\"> </span><span class=\"n\">towed</span><span class=\"w\"> </span><span class=\"k\">WHERE</span><span class=\"w\"> </span><span class=\"n\">make</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s1\">&#39;KIA&#39;</span><span class=\"w\"> </span><span class=\"k\">AND</span><span class=\"w\"> </span><span class=\"k\">state</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s1\">&#39;TX&#39;</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">-- KIAs with Texas plates</span>\n\n<span class=\"k\">SELECT</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"k\">FROM</span><span class=\"w\"> </span><span class=\"n\">towed</span><span class=\"w\"> </span><span class=\"k\">WHERE</span><span class=\"w\"> </span><span class=\"n\">make</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s1\">&#39;KIA&#39;</span><span class=\"w\"> </span><span class=\"k\">ORDER</span><span class=\"w\"> </span><span class=\"k\">BY</span><span class=\"w\"> </span><span class=\"n\">color</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">-- All KIAs ordered by color (A to Z)</span>\n</code></pre></div>\n\n<h5>Python + pandas</h5>\n<p>Let's do some of the same, but this time let's use pandas:</p>\n<div class=\"highlight\"><pre><span></span><code><span class=\"c1\"># show only the make column for all records</span>\n<span class=\"n\">towed</span><span class=\"p\">[</span><span class=\"s2\">&quot;make&quot;</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># tow_date, make, style, model, and color for the first ten records</span>\n<span class=\"n\">towed</span><span class=\"p\">[[</span><span class=\"s2\">&quot;tow_date&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;make&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;style&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;model&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;color&quot;</span><span class=\"p\">]][:</span><span class=\"mi\">10</span><span class=\"p\">]</span>\n\n<span class=\"n\">towed</span><span class=\"p\">[:</span><span class=\"mi\">5</span><span class=\"p\">]</span> <span class=\"c1\"># first five rows (alternatively, you could use towed.head())</span>\n</code></pre></div>\n\n<p>Because pandas is built on top of <a href=\"http://www.numpy.org/\">NumPy</a>, we're able to use <a href=\"http://pandas.pydata.org/pandas-docs/dev/indexing.html#boolean-indexing\">boolean indexing</a>.  Since we're going to replicate similar statements to the ones we did in SQL, we know we're going to need towed cars from TX made by KIA.</p>\n<div class=\"highlight\"><pre><span></span><code><span class=\"n\">towed</span><span class=\"p\">[</span><span class=\"n\">towed</span><span class=\"p\">[</span><span class=\"s2\">&quot;state&quot;</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;TX&quot;</span><span class=\"p\">]</span> <span class=\"c1\"># all columns and records where the car was from TX</span>\n\n<span class=\"n\">towed</span><span class=\"p\">[(</span><span class=\"n\">towed</span><span class=\"p\">[</span><span class=\"s2\">&quot;state&quot;</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;TX&quot;</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span> <span class=\"p\">(</span><span class=\"n\">towed</span><span class=\"p\">[</span><span class=\"s2\">&quot;make&quot;</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;KIA&quot;</span><span class=\"p\">)]</span> <span class=\"c1\"># made by KIA AND from TX</span>\n\n<span class=\"n\">towed</span><span class=\"p\">[(</span><span class=\"n\">towed</span><span class=\"p\">[</span><span class=\"s2\">&quot;state&quot;</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;MA&quot;</span><span class=\"p\">)</span> <span class=\"o\">|</span> <span class=\"p\">(</span><span class=\"n\">towed</span><span class=\"p\">[</span><span class=\"s2\">&quot;make&quot;</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;JAGU&quot;</span><span class=\"p\">)]</span> <span class=\"c1\"># made by Jaguar OR from MA</span>\n\n<span class=\"n\">towed</span><span class=\"p\">[</span><span class=\"n\">towed</span><span class=\"p\">[</span><span class=\"s2\">&quot;make&quot;</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;KIA&quot;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">sort</span><span class=\"p\">(</span><span class=\"s2\">&quot;color&quot;</span><span class=\"p\">)</span> <span class=\"c1\"># made by KIA, ordered by color (A to Z)</span>\n</code></pre></div>\n\n<h5>Conclusion, Part 1</h5>\n<p>This was obviously a very basic start, but there are a lot of good things about pandas - it's certainly concise and readable.  Plus, since it works well with the various science + math packages (<a href=\"http://www.scipy.org\">SciPy</a>, <a href=\"http://www.numpy.org/\">NumPy</a>, <a href=\"http://matplotlib.org/\">Matplotlib</a>, <a href=\"http://statsmodels.sourceforge.net/\">statsmodels</a>, etc.), there's the potential to work almost entirely in one language for analysis tasks.</p>\n<p>I plan on covering aggregate functions, pivots, and maybe some matplotlib in my next post.</p>",
  "category": [
    "",
    "",
    "",
    ""
  ]
}