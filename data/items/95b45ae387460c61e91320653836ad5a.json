{
  "id": "tag:blogger.com,1999:blog-19803222.post-5175748262897667616",
  "published": "2017-04-03T06:49:00.000-06:00",
  "updated": "2017-04-03T06:49:58.365-06:00",
  "title": "Structured prediction is *not* RL",
  "content": "<div class=\"separator\" style=\"clear: both; text-align: center;\"></div><div style=\"margin-left: 1em; margin-right: 1em;\"></div>It's really strange to look back now over the past ten to fifteen years and see a very small pendulum that no one really cares about swing around. I've spent the last ten years trying to convince you that structured prediction is RL; now I'm going to tell you that was a lie :).<br /><br /><b>Short Personal History</b> <br /><br />Back in 2005, John Langford, Daniel Marcu and I had a workshop paper at NIPS on <a href=\"http://hal3.name/docs/daume05search.pdf\">relating structured prediction to reinforcement learning</a>. Basically the message of that paper is: you can cast structured prediction as RL, and then use off-the-shelf RL techniques like <a href=\"https://www.cs.cmu.edu/~jcl/presentation/RL/RL.ps\">conservative policy iteration</a> to solve it, and this works pretty well. This view arose, for me, main from Collins and Roark's  <a href=\"http://www.aclweb.org/anthology/P04-1015\">incremental structured perceptron</a> model, but I'm sure it dates back much further than that (almost certainly there's work from neural nets land in the 80s; I'd certainly appreciate pointers!). This led <a href=\"https://twitter.com/haldaume3/status/832018253731880960\">eventually</a> to <a href=\"https://arxiv.org/pdf/0907.0786\">Searn</a>, and then in the early 2010s, I went around a bunch of places (ACL, AAAI, ICML, etc.), <a href=\"https://pdfs.semanticscholar.org/2389/9124a85eea50fd955812a33c50a663ece559.pdf\">espousing</a> <a href=\"https://pdfs.semanticscholar.org/5d75/912569b91068b2e08b9ea036136d4d55765e.pdf\">connections</a> between structured prediction and (inverse) reinforcement learning (<a href=\"http://hal3.name/11-08-spirl.pdf\">slides</a>).<br /><br />This kinda sorta caught on in a very small subcommunity.<br /><br />One thing I should have realized looking back ten years is that you should not try to sell a hammer to hammer manufacturers, but rather to people with weird nails. I spent too much time and energy trying to convince the \"traditional structured prediction\" crowd (the CRF and M3N and SVM<sup>struct</sup> folks) that the \"RL\" view of structured prediction was awesome. That was a losing strategy, unfortunately. (Although I learned a few nights ago at dinner that this might be changing now!)<br /><br />But now everything has changed. To some degree, Ross, Gordon and Bagnell's <a href=\"https://www.cs.cmu.edu/~sross1/publications/Ross-AIStats11-NoRegret.pdf\">DAgger</a> is a successful, better successor to Searn, and for years I had gone around telling everyone DAgger is my favorite algorithm ever (it consistently outperforms Searn's in their---and my---experiments, and is really really easy to implement and has stronger-ish theory). And then DAgger (or more precisely <a href=\"https://www.ri.cmu.edu/pub_files/2015/1/Venkatraman.pdf\">DAD</a>) gets <a href=\"https://nlpers.blogspot.com/2016/03/a-dagger-by-any-other-name-scheduled.html\">renamed/rebranded</a> as \"<a href=\"http://papers.nips.cc/paper/5956-scheduled-sampling-for-sequence-prediction-with-recurrent-neural-networks.pdf\">scheduled sampling</a>\" (though you should read Marc'Aurelio's comment, which is very on point), and now these ideas are everywhere, particularly in sequence-to-sequence neural transduction models.<br /><br /><b>Nowadays</b> <br /><br />In the past year or two, there's been a <a href=\"https://scholar.google.com/scholar?as_ylo=2016&amp;q=reinforcement+learning+seq2seq&amp;hl=en&amp;as_sdt=0,39\">flurry of work</a> applying not just imitation learning algorithms like DAgger to neural models for structured prediction problems, but also just applying straight-up RL algorithms (like reinforce, policy gradient, or actor/critic) to them. The important point is that while people have tried to do things like neural CRFs, etc., the basic sequence-to-sequence style model naturally fits a search-based structured prediction (aka RL-ish) view.<br /><br />But these tasks are <i>not</i> the same and, in fact, structured prediction is <i>much</i> simpler, and I think we need to develop algorithms that take that into account.<br /><br />The biggest difference is that in (all or at least almost all) structured prediction problems, conditioned on the input <i>x</i>, the world is <i>known</i>, <i>deterministic</i> and therefore reversible and/or fully-explorable (modulo limits of computation)<i>.</i> This is generally not true in RL, and one of biggest challenges in RL is that once you take an action, you cannot un-take that action, and you cannot try out other alternatives.<br /><br />That is to say: computation aside, in structured prediction, conditioned on <i>x</i>, you can build out the <i>entire search tree</i> and do whatever the heck you want with it. (Of course \"computation aside\" makes no sense in a SP setting because the whole difficulty of SP is computation.) In fact, one of the big advantages to things like CRFs is effectively that they <i>do</i> build out the entire search tree, at least implicitly, which is possibly precisely because of the limited expressivity of features.<br /><br />This observation is probably perfectly obvious to most NLP folks. In a sense, the <a href=\"https://transacl.org/ojs/index.php/tacl/article/viewFile/27/4\">semantic</a> <a href=\"http://www.aclweb.org/website/old_anthology/D/D13/D13-1160.pdf\">parsing</a> <a href=\"http://www.jayantkrish.com/papers/jayantk-emnlp2012.pdf\">crowd</a> has been doing something reinforcement-learning like for quite some time. You produce a semantic parse, run it against a database, check if you get the correct answer or not. If so, positive reward; if not, negative. But no one (as far as I know) just produces one parse: you produce a beam of a bunch of parses and try them all. This is definitely <i>not</i> something you can do in standard RL, but it <i>is</i> something you can do in structured prediction.<br /><br />In my mind, this was (and continues to be) one of the major weakness of the Searn/DAgger approach to structured prediction that continues to be a problem in  applying standard RL algorithms to structured prediction. In a real sense, I think this is something that <a href=\"http://www.aclweb.org/anthology/P04-1015\">incremental perceptron</a>, broken <a href=\"http://hal3.name/docs/daume05laso.pdf\">LaSO</a> and not-broken <a href=\"http://web.engr.oregonstate.edu/~afern/papers/beam-icml07.pdf\">LaSO-BST</a>, and <a href=\"https://arxiv.org/pdf/1606.02960\">seq2seqLaSO</a> got right that the more RL-ish approaches got wrong. (This continues to be true in bandit structured prediction, which will get a separate post in the maybe-near future.) One approach that blends the two to some degree is <a href=\"https://timvieira.github.io/doc/2017-tacl-pruning.pdf\">Vieira and Eisner's recent paper</a> that uses dynamic programming and change propogation within LOLS (which is effectively a variant of <a href=\"https://arxiv.org/abs/1406.5979\">AggreVaTe</a>, a follow-on to DAgger) to learn to prune (it's not obvious to me how to generalize this to other tasks yet).<br /><br /><b>Why the Gap?</b><br />I don't think this gap is an accident, and I think there are essentially two reasons it exists.<br /><br />First, as suggested above, is the question of computation. If you're willing to say \"I don't care about computation\" then you might as well put yourself in CRF world where life is (relatively) easy, at least if you want to do analysis. If you do care about computation, then doing the \"purely greedy\" thing is very natural and then you can say \"well I know I'm computationally efficient because I'm greedy, and now I can focus entirely on the statistical problem.\" Once you're willing to spend a bit more computation, you have to figure out how to \"charge\" yourself properly for that computation. That is, you enter a world where there's a trade-off between statistics and computation (though not in the usual sense) and it's not at all clear how to balance that. It's also hard to convince myself that it's better to spend ten times longer on a single structured example than to do ten different examples. This is a question I've been interested in since <a href=\"http://hal3.name/docs/daume06thesis.pdf\">my dissertation (p44)</a> but have made basically zero progress on:<br /><br /><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"https://3.bp.blogspot.com/-ZbrQaKleEB8/WOFwd5C2RHI/AAAAAAAAAf0/Bl7Od9WzAX8zHPbgog41nakGrylzmdvKwCLcB/s1600/thesis.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" height=\"258\" src=\"https://3.bp.blogspot.com/-ZbrQaKleEB8/WOFwd5C2RHI/AAAAAAAAAf0/Bl7Od9WzAX8zHPbgog41nakGrylzmdvKwCLcB/s400/thesis.png\" width=\"400\" /></a></div>(Note that I don't currently agree with the entirety of this passage---in particular, the complexity argument is somewhat broken---but I think the basic idea is right.)<br /><br /><div class=\"separator\" style=\"clear: both; text-align: center;\"></div>Second, I think there's a bit of a looking-under-the-lamppost effect that's not easy to ignore. Here, the lamppost is mainly a computational efficiency lamppost, and secondarily a convenience lamppost. Greedy search is really fast. Even compared to beam search with a beam size of K, greedy is often much more than K times faster because you don't have bookkeeping overhead. And it's <i>way</i> easier to implement greedy solutions than non-greedy, especially in neural land if you want things to be efficient on a GPU. And often toolkits have greedy already implemented for you. This obviously isn't un-recoverable, but runs into the problem of: if I can do 50 sentences greedily on my GPU in the time it would take to do beam-10 search for one of the sentences, is the computation really going to come off in my favor?<br /><br />As always, I'd appreciate pointers to work that I don't know about that addresses any of these challenges!<br /><br />",
  "link": [
    "",
    "",
    "",
    "",
    ""
  ],
  "author": {
    "name": "hal",
    "uri": "http://www.blogger.com/profile/02162908373916390369",
    "email": "noreply@blogger.com",
    "gd:image": ""
  },
  "media:thumbnail": "",
  "thr:total": 6
}