{
  "title": "Write Dumb Code",
  "link": "",
  "updated": "2018-01-27T00:00:00+00:00",
  "id": "https://mrocklin.github.io/blog/work/2018/01/27/write-dumb-code",
  "content": "<p><em>The best way you can contribute to an open source project is to remove lines of code from it.</em>\n<em>We should endeavor to write code that a novice programmer can easily\nunderstand without explanation or that a maintainer can understand without\nsignificant time investment.</em></p>\n\n<p>As students we attempt increasingly challenging problems with increasingly\nsophisticated technologies.  We first learn loops, then functions, then\nclasses, etc..  We are praised as we ascend this hierarchy, writing longer\nprograms with more advanced technology.  We learn that experienced programmers\nuse monads while new programmers use for loops.</p>\n\n<p>Then we graduate and find a job or open source project to work on with others.\nWe search for something that we can add, and implement a solution pridefully,\nusing the all the tricks that we learned in school.</p>\n\n<p><em>Ah ha! I can extend this project to do X!  And I can use inheritance here!  Excellent!</em></p>\n\n<p>We implement this feature and feel accomplished, and with good reason.\nProgramming in real systems is no small accomplishment.  This was certainly my\nexperience.  I was excited to write code and proud that I could show off all of\nthe things that I knew how to do to the world.  As evidence of my historical\nlove of programming technology, here is a <a href=\"https://github.com/mrocklin/matrix-algebra\">linear algebra\nlanguage</a> built with a another\nmeta-programming language.  Notice that no one has touched this code in several\nyears.</p>\n\n<p>However after maintaining code a bit more I now think somewhat differently.</p>\n\n<ol>\n  <li>We should not seek to build software.  Software is the currency that we pay\nto solve problems, which is our actual goal.  We should endeavor to build\nas little software as possible to solve our problems.</li>\n  <li>We should use technologies that are as simple as possible, so that as many\npeople as possible can use and extend them without needing to understand\nour advanced techniques.  We should use advanced techniques only when we\nare not smart enough to figure out how to use more common techniques.</li>\n</ol>\n\n<p>Neither of these points are novel.  Most people I meet agree with them to some\nextent, but somehow we forget them when we go to contribute to a new project.\nThe instinct to <em>contribute by building</em> and to <em>demonstrate sophistication</em>\noften take over.</p>\n\n<h2 id=\"software-is-a-cost\">Software is a cost</h2>\n\n<p>Every line that you write costs people time.  It costs you time to write it of\ncourse, but you are willing to make this personal sacrifice.  However this code\nalso costs the reviewers their time to understand it.  It costs future\nmaintainers and developers their time as they fix and modify your code.  They\ncould be spending this time outside in the sunshine or with their family.</p>\n\n<p>So when you add code to a project you should feel meek.  It should feel as\nthough you are eating with your family and there isn’t enough food on the\ntable.  You should take only what you need and no more.  The people with you\nwill respect you for your efforts to restrict yourself.  Solving problems with\nless code is a hard, but it is a burden that you take on yourself to lighten\nthe burdens of others.</p>\n\n<h2 id=\"complex-technologies-are-harder-to-maintain\">Complex technologies are harder to maintain</h2>\n\n<p>As students, we demonstrate merit by using increasingly advanced technologies.\nOur measure of worth depends on our ability to use functions, then classes,\nthen higher order functions, then monads, etc. in public projects.  We show off\nour solutions to our peers and feel pride or shame according to our\nsophistication.</p>\n\n<p>However when working with a team to solve problems in the world the situation\nis reversed.  Now we strive to solve problems with code that is as simple as\npossible.  When we solve a problem simply we enable junior programmers to\nextend our solution to solve other problems.  Simple code enables others and\nboosts our impact.  We demonstrate our value by solving hard problems with only\nbasic techniques.</p>\n\n<p><em>Look! I replaced this recursive function with a for loop and it still does\neverything that we need it to.  I know it’s not as clever, but I noticed that\nthe interns were having trouble with it and I thought that this change might\nhelp.</em></p>\n\n<p>If you are a good programmer then you don’t need to demonstrate that you know\ncool tricks.  Instead, you can demonstrate your value by solving a problem in a\nsimple way that enables everyone on your team to contribute in the future.</p>\n\n<h2 id=\"but-moderation-of-course\">But moderation, of course</h2>\n\n<p>That being said, over-adherence to the “build things with simple tools” dogma\ncan be counter productive.  Often a recursive solution can be much simpler than\na for-loop solution and often times using a Class or a Monad is the right\napproach.  But we should be mindful when using these technologies that we are\nbuilding for ourselves our own system; a system with which others have had no\nexperience.</p>"
}