{
  "title": "Frequentism and Bayesianism IV: How to be a Bayesian in Python",
  "link": "",
  "published": "2014-06-14T09:30:00-07:00",
  "updated": "2014-06-14T09:30:00-07:00",
  "author": {
    "name": "Jake VanderPlas"
  },
  "id": "tag:jakevdp.github.io,2014-06-14:blog/2014/06/14/frequentism-and-bayesianism-4-bayesian-in-python/",
  "summary": "<p>I've been spending a lot of time recently writing about frequentism and Bayesianism.</p>\n<ul>\n<li>In <a href=\"http://jakevdp.github.io/blog/2014/03/11/frequentism-and-bayesianism-a-practical-intro/\">Frequentism and Bayesianism I: a Practical Introduction</a> I gave an introduction to the main philosophical differences between frequentism and Bayesianism, and showed that for many common problems the two methods give basically the same point estimates.</li>\n<li>In <a href=\"http://jakevdp.github.io/blog/2014/06/06/frequentism-and-bayesianism-2-when-results-differ/\">Frequentism and Bayesianism II: When Results Differ</a> I went into a bit more depth on when frequentism and Bayesianism start to diverge, particularly when it comes to the handling of nuisance parameters.</li>\n<li>In <a href=\"http://jakevdp.github.io/blog/2014/06/12/frequentism-and-bayesianism-3-confidence-credibility/\">Frequentism and Bayesianism III: Confidence, Credibility, and why Frequentism and Science Don't Mix</a> I talked about the subtle difference between frequentist confidence intervals and Bayesian credible intervals, and argued that in most scientific settings frequentism answers the wrong question.</li>\n</ul>\n<p>Here I want to back away from the philosophical debate and go back to more practical issues: in particular, demonstrating how you can apply these Bayesian ideas in Python. The workhorse of modern Bayesianism is the <a href=\"http://en.wikipedia.org/wiki/Markov_chain_Monte_Carlo\">Markov Chain Monte Carlo</a> (MCMC), a class of algorithms used to efficiently sample posterior distributions.</p>\n<p>Below I'll explore three mature Python packages for performing Bayesian analysis via MCMC:</p>\n<ul>\n<li><a href=\"http://dan.iel.fm/emcee\">emcee</a>: the MCMC Hammer</li>\n<li><a href=\"http://pymc-devs.github.io/pymc/\">pymc</a>: Bayesian Statistical Modeling in Python</li>\n<li><a href=\"https://pystan.readthedocs.org/en/latest/\">pystan</a>: The Python Interface to Stan</li>\n</ul>\n<p>I won't be so much concerned with speed benchmarks between the three, as much as a comparison of their respective APIs. This post is not meant to be a tutorial in any of the three; each of them is well documented and the links above include introductory tutorials for that purpose. Rather, what I want to do here is a side-by-side comparison which will give a feel for how each package is used.  I'll propose a single relatively non-trivial test problem, and show the implementation and results of this problem using all three packages. Hopefully by seeing the three approaches side-by-side, you can choose which package might be best suited for your particular application.</p>",
  "category": [
    "",
    ""
  ]
}