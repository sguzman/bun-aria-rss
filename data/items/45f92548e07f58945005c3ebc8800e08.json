{
  "title": "Scraping Craigslist for sold out concert tickets",
  "link": "",
  "published": "2014-07-27T00:00:00-07:00",
  "updated": "2022-11-03T04:16:07-07:00",
  "author": {
    "name": "Greg Reda"
  },
  "id": "tag:www.gregreda.com,2014-07-27:/2014/07/27/scraping-craigslist-for-tickets/",
  "summary": "<p>Recently, I've been listening to a lot of lo-fi rock band, <a href=\"http://en.wikipedia.org/wiki/Cloud_Nothings\">Cloud Nothings</a>. Their album, <a href=\"http://www.amazon.com/gp/product/B00HZJH97Q/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=B00HZJH97Q&amp;linkCode=as2&amp;tag=gjreda-20&amp;linkId=H7HYP35ZYKFAKH7H\">Here &amp; Nowhere Else</a>, has been <a href=\"http://www.metacritic.com/music/here-and-nowhere-else/cloud-nothings\">critically lauded</a>, including <a href=\"http://pitchfork.com/reviews/albums/19075-cloud-nothings-here-and-nowhere-else/\">garnering \"Best New Music\" from Pitchfork</a>. As a result, when they came to Chicago's tiny Lincoln Hall in May, tickets sold out in a hurry - well before â€¦</p>",
  "content": "<p>Recently, I've been listening to a lot of lo-fi rock band, <a href=\"http://en.wikipedia.org/wiki/Cloud_Nothings\">Cloud Nothings</a>. Their album, <a href=\"http://www.amazon.com/gp/product/B00HZJH97Q/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=B00HZJH97Q&amp;linkCode=as2&amp;tag=gjreda-20&amp;linkId=H7HYP35ZYKFAKH7H\">Here &amp; Nowhere Else</a>, has been <a href=\"http://www.metacritic.com/music/here-and-nowhere-else/cloud-nothings\">critically lauded</a>, including <a href=\"http://pitchfork.com/reviews/albums/19075-cloud-nothings-here-and-nowhere-else/\">garnering \"Best New Music\" from Pitchfork</a>. As a result, when they came to Chicago's tiny Lincoln Hall in May, tickets sold out in a hurry - well before I found out about the show. Desperately wanting to go, I started checking Craigslist every day or two for tickets.</p>\n<p>Lincoln Hall only holds about 500 people, so Craigslist postings were few and far between. When a post did pop up, I always ended up seeing it a couple hours after it was posted and was too late - the tickets had been sold. Noticing that my frustration was beginning to grow, I figured it was time to automate my Craigslist searches for tickets.</p>\n<p>If you search on Craigslist and look at the URL of the results page, you'll notice that it looks very similar to this:</p>\n<p><img alt=\"Craigslist Search Results URL\" src=\"/images/craigslist-search-results-url.png\"></p>\n<p>Note the section that says <code>query=this+is+my+search+term</code> - that's where your search term gets passed to the databases that back Craigslist (with spaces replaced by + signs). This means we can write code to automate any \"for sale\" search by hitting <code>http://&lt;city&gt;.craigslist.org/search/sss?query=&lt;term&gt;</code> where <code>&lt;city&gt;</code> corresponds to the subdomain of your city's respective Craigslist and <code>&lt;term&gt;</code> is our search term.</p>\n<p>For my use case, there were very few Craigslist results for each search of \"Cloud Nothings\" and none of them were spammy. I decided to write a script which would run every 10 minutes and send me a text message if any of the results were new. If I got a text, I could quickly head over to Craigslist, email the seller, and go back about my day. I was lucky that ticket brokers hadn't started putting \"Cloud Nothings\" in their spammy posts - if they had, this solution likely would not have worked - the text messages would have been more noise than signal.</p>\n<p>Thankfully, it worked. I was able to get a ticket for face value two nights before the show.</p>\n<p>In the sections below, I'll walk through the code behind it all. If you're unfamiliar with web scraping, I suggest reading my previous posts <a href=\"http://www.gregreda.com/2013/03/03/web-scraping-101-with-python/\">here</a> and <a href=\"http://www.gregreda.com/2013/05/06/more-web-scraping-with-python/\">here</a>.</p>\n<h3>Code Walk-Through</h3>\n<p>Most of the code's functionality is contained within the four functions below.</p>\n<h4>parse_results</h4>\n<div class=\"highlight\"><pre><span></span><code><span class=\"k\">def</span> <span class=\"nf\">parse_results</span><span class=\"p\">(</span><span class=\"n\">search_term</span><span class=\"p\">):</span>\n    <span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"n\">search_term</span> <span class=\"o\">=</span> <span class=\"n\">search_term</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s1\">&#39; &#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;+&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">search_url</span> <span class=\"o\">=</span> <span class=\"n\">BASE_URL</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">search_term</span><span class=\"p\">)</span>\n    <span class=\"n\">soup</span> <span class=\"o\">=</span> <span class=\"n\">BeautifulSoup</span><span class=\"p\">(</span><span class=\"n\">urlopen</span><span class=\"p\">(</span><span class=\"n\">search_url</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">())</span>\n    <span class=\"n\">rows</span> <span class=\"o\">=</span> <span class=\"n\">soup</span><span class=\"o\">.</span><span class=\"n\">find</span><span class=\"p\">(</span><span class=\"s1\">&#39;div&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;content&#39;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">find_all</span><span class=\"p\">(</span><span class=\"s1\">&#39;p&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;row&#39;</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">row</span> <span class=\"ow\">in</span> <span class=\"n\">rows</span><span class=\"p\">:</span>\n        <span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;http://chicago.craigslist.org&#39;</span> <span class=\"o\">+</span> <span class=\"n\">row</span><span class=\"o\">.</span><span class=\"n\">a</span><span class=\"p\">[</span><span class=\"s1\">&#39;href&#39;</span><span class=\"p\">]</span>\n        <span class=\"n\">create_date</span> <span class=\"o\">=</span> <span class=\"n\">row</span><span class=\"o\">.</span><span class=\"n\">find</span><span class=\"p\">(</span><span class=\"s1\">&#39;span&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;date&#39;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get_text</span><span class=\"p\">()</span>\n        <span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"n\">row</span><span class=\"o\">.</span><span class=\"n\">find_all</span><span class=\"p\">(</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">)[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">get_text</span><span class=\"p\">()</span>\n        <span class=\"n\">results</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">({</span><span class=\"s1\">&#39;url&#39;</span><span class=\"p\">:</span> <span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"s1\">&#39;create_date&#39;</span><span class=\"p\">:</span> <span class=\"n\">create_date</span><span class=\"p\">,</span> <span class=\"s1\">&#39;title&#39;</span><span class=\"p\">:</span> <span class=\"n\">title</span><span class=\"p\">})</span>\n    <span class=\"k\">return</span> <span class=\"n\">results</span>\n</code></pre></div>\n\n<p>The above function takes a <code>search_term</code>, which is used to execute a search on Craigslist. It returns a list of dictionaries, where each dictionary represents a post found within the search results.</p>\n<p>Note the global <code>BASE_URL</code> variable - this is the search results URL mentioned earlier. Here, we're injecting our search term into the section of the URL that had <code>query=&lt;term&gt;</code>.</p>\n<p>The majority of this function utilizes <a href=\"http://www.crummy.com/software/BeautifulSoup/\">BeautifulSoup</a> to parse the HTML of Craigslist's search results page. For each post in the search results, we store the URL of the post, its creation date, and its title.</p>\n<p>In the next function, we'll write these results to a CSV file, which we'll later use to check whether or not there are \"new\" posts.</p>\n<h4>write_results</h4>\n<div class=\"highlight\"><pre><span></span><code><span class=\"k\">def</span> <span class=\"nf\">write_results</span><span class=\"p\">(</span><span class=\"n\">results</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Writes list of dictionaries to file.&quot;&quot;&quot;</span>\n    <span class=\"n\">fields</span> <span class=\"o\">=</span> <span class=\"n\">results</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">()</span>\n    <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">&#39;results.csv&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;w&#39;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n        <span class=\"n\">dw</span> <span class=\"o\">=</span> <span class=\"n\">csv</span><span class=\"o\">.</span><span class=\"n\">DictWriter</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"n\">fieldnames</span><span class=\"o\">=</span><span class=\"n\">fields</span><span class=\"p\">,</span> <span class=\"n\">delimiter</span><span class=\"o\">=</span><span class=\"s1\">&#39;|&#39;</span><span class=\"p\">)</span>\n        <span class=\"n\">dw</span><span class=\"o\">.</span><span class=\"n\">writer</span><span class=\"o\">.</span><span class=\"n\">writerow</span><span class=\"p\">(</span><span class=\"n\">dw</span><span class=\"o\">.</span><span class=\"n\">fieldnames</span><span class=\"p\">)</span>\n        <span class=\"n\">dw</span><span class=\"o\">.</span><span class=\"n\">writerows</span><span class=\"p\">(</span><span class=\"n\">results</span><span class=\"p\">)</span>\n</code></pre></div>\n\n<p>As mentioned above, <code>write_results</code> takes a list of dictionaries and writes them to a CSV file called <code>results.csv</code>. Each line of the file will store a post's title, create date, and URL.</p>\n<p>You can think of this file similarly to how you might think of a database - we're storing information that we'll need to refer to later on. Since we aren't storing much data, there's really no need to use something like SQLite, MySQL or any other datastore - a text file works just fine for our use case. I'm a big proponent of <a href=\"http://en.wikipedia.org/wiki/KISS_principle\">KISS methodology</a> (Keep It Simple, Stupid).</p>\n<h4>has_new_records</h4>\n<div class=\"highlight\"><pre><span></span><code><span class=\"k\">def</span> <span class=\"nf\">has_new_records</span><span class=\"p\">(</span><span class=\"n\">results</span><span class=\"p\">):</span>\n    <span class=\"n\">current_posts</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">[</span><span class=\"s1\">&#39;url&#39;</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">results</span><span class=\"p\">]</span>\n    <span class=\"n\">fields</span> <span class=\"o\">=</span> <span class=\"n\">results</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">()</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">exists</span><span class=\"p\">(</span><span class=\"s1\">&#39;results.csv&#39;</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span>\n\n    <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">&#39;results.csv&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;r&#39;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n        <span class=\"n\">reader</span> <span class=\"o\">=</span> <span class=\"n\">csv</span><span class=\"o\">.</span><span class=\"n\">DictReader</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"n\">fieldnames</span><span class=\"o\">=</span><span class=\"n\">fields</span><span class=\"p\">,</span> <span class=\"n\">delimiter</span><span class=\"o\">=</span><span class=\"s1\">&#39;|&#39;</span><span class=\"p\">)</span>\n        <span class=\"n\">seen_posts</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">row</span><span class=\"p\">[</span><span class=\"s1\">&#39;url&#39;</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">row</span> <span class=\"ow\">in</span> <span class=\"n\">reader</span><span class=\"p\">]</span>\n\n    <span class=\"n\">is_new</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n    <span class=\"k\">for</span> <span class=\"n\">post</span> <span class=\"ow\">in</span> <span class=\"n\">current_posts</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"n\">post</span> <span class=\"ow\">in</span> <span class=\"n\">seen_posts</span><span class=\"p\">:</span>\n            <span class=\"k\">pass</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">is_new</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n    <span class=\"k\">return</span> <span class=\"n\">is_new</span>\n</code></pre></div>\n\n<p>This function determines whether or not any of the posts are new (not present in the results from the last time our code was run).</p>\n<p>It takes a list of dictionaries (exactly the same as the one <code>parse_results</code> returns) and checks it against the CSV file we created with the <code>write_results</code> function. Since a URL can only point to one post, we can consider it a <a href=\"http://en.wikipedia.org/wiki/Unique_key\">unique key</a> to check against.</p>\n<p>If any of the URLs in results are not found within the CSV file, this function will return <code>True</code>, which we'll use as a trigger to sending off a text message as notification.</p>\n<h4>send_text</h4>\n<div class=\"highlight\"><pre><span></span><code><span class=\"k\">def</span> <span class=\"nf\">send_text</span><span class=\"p\">(</span><span class=\"n\">phone_number</span><span class=\"p\">,</span> <span class=\"n\">msg</span><span class=\"p\">):</span>\n    <span class=\"n\">fromaddr</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Craigslist Checker&quot;</span>\n    <span class=\"n\">toaddrs</span> <span class=\"o\">=</span> <span class=\"n\">phone_number</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;@txt.att.net&quot;</span>\n    <span class=\"n\">msg</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s2\">&quot;From: </span><span class=\"si\">{0}</span><span class=\"se\">\\r\\n</span><span class=\"s2\">To: </span><span class=\"si\">{1}</span><span class=\"se\">\\r\\n\\r\\n</span><span class=\"si\">{2}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">fromaddr</span><span class=\"p\">,</span> <span class=\"n\">toaddrs</span><span class=\"p\">,</span> <span class=\"n\">msg</span><span class=\"p\">)</span>\n    <span class=\"n\">server</span> <span class=\"o\">=</span> <span class=\"n\">smtplib</span><span class=\"o\">.</span><span class=\"n\">SMTP</span><span class=\"p\">(</span><span class=\"s1\">&#39;smtp.gmail.com:587&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">server</span><span class=\"o\">.</span><span class=\"n\">starttls</span><span class=\"p\">()</span>\n    <span class=\"n\">server</span><span class=\"o\">.</span><span class=\"n\">login</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">email</span><span class=\"p\">[</span><span class=\"s1\">&#39;username&#39;</span><span class=\"p\">],</span> <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">email</span><span class=\"p\">[</span><span class=\"s1\">&#39;password&#39;</span><span class=\"p\">])</span>\n    <span class=\"n\">server</span><span class=\"o\">.</span><span class=\"n\">sendmail</span><span class=\"p\">(</span><span class=\"n\">fromaddr</span><span class=\"p\">,</span> <span class=\"n\">toaddrs</span><span class=\"p\">,</span> <span class=\"n\">msg</span><span class=\"p\">)</span>\n    <span class=\"n\">server</span><span class=\"o\">.</span><span class=\"n\">quit</span><span class=\"p\">()</span>\n</code></pre></div>\n\n<p><code>send_text</code> requires two parameters - the first being the 10-digit phone number that will receive the SMS message, and the second being the content of the message.</p>\n<p>This function makes use of the <a href=\"http://en.wikipedia.org/wiki/Simple_Mail_Transfer_Protocol\">Simple Mail Transfer Protocol</a> (or SMTP) as well as AT&amp;T's email-to-SMS gateway (notice the <code>@txt.att.net</code>). This allows us to use a GMail account to send the text message.</p>\n<p>Note that if you are not a GMail user or do not use AT&amp;T for your cell phone service, you'll need to make some changes to this function. You can find a list of other email-to-SMS gateways <a href=\"http://www.emailtextmessages.com/\">here</a>.</p>\n<p>Since this function uses my GMail credentials, I've stored them in a separate Python file which I am referencing when I call <code>config.email['username']</code> and <code>config.email['password']</code>. You can find the config setup <a href=\"https://github.com/gjreda/craigslist-checker/blob/master/config.py\">here</a>. Just make sure you don't accidentally check in your GMail credentials if you're putting this on GitHub.</p>\n<h4>Putting it all together</h4>\n<p>You can take a look at the final script <a href=\"https://github.com/gjreda/craigslist-checker/blob/master/craigslist.py\">here</a>. Feel free to use it however you'd like. Deploying it is as simple as spinning up a micro EC2 instance and setting up a cronjob to run the script as often as you'd like.</p>\n<p>Did you like this post? Was there something I missed? <a href=\"https://twitter.com/gjreda\">Let me know on Twitter</a>.</p>",
  "category": [
    "",
    "",
    "",
    "",
    ""
  ]
}