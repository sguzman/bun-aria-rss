{
  "title": "Creating an OmniSci ODBC Connection in RStudio Server",
  "description": "<p><em>Edit 10/1/2018: When I wrote this blog post, the company and product were named MapD. I’ve changed the title to reflect the new company name, but left the MapD references below to hopefully avoid confusion</em></p>",
  "pubDate": "Tue, 21 Aug 2018 00:00:00 +0000",
  "link": "http://randyzwitch.com/mapd-odbc-rstudio-server/",
  "guid": "http://randyzwitch.com/mapd-odbc-rstudio-server/",
  "content": "<p><em>Edit 10/1/2018: When I wrote this blog post, the company and product were named MapD. I’ve changed the title to reflect the new company name, but left the MapD references below to hopefully avoid confusion</em></p>\n\n<p><img src=\"/assets/img/mapd-odbc-rstudio-connection.png\" alt=\"MapD ODBC RStudio Server\" /></p>\n\n<p>In my post <a href=\"https://www.mapd.com/blog/installing-mapd-on-microsoft-azure/\"><em>Installing MapD on Microsoft Azure</em></a>, I showed how to install MapD Community Edition on Microsoft Azure, using Ubuntu 16.04 LTS as the base image. One thing I glossed over during the firewall/security section was that I opened ports for Jupyter Notebook and other data science tools, but I didn’t actually show how to install any of those tools.</p>\n\n<p>For this post, I’ll cover how to install MapD ODBC drivers and create a connection within RStudio server.</p>\n\n<h2 id=\"1-installing-rstudio-server-on-microsoft-azure\">1. Installing RStudio Server on Microsoft Azure</h2>\n\n<p>With an <a href=\"https://github.com/mapd/mapd_on_azure\">Ubuntu VM running MapD</a>, installing RStudio Server takes but a handful of commands. The <a href=\"https://www.rstudio.com/products/rstudio/download-server/\">RStudio Server download</a>/install page has fantastic instructions, but if you are looking for <a href=\"https://www.jumpingrivers.com/blog/hosting-rstudio-server-on-azure/\">Azure-specific RStudio Server install</a> instructions, this blog post from <a href=\"https://www.jumpingrivers.com/\">Jumping Rivers</a> does a great job.</p>\n\n<h2 id=\"2-installing-an-odbc-driver-manager\">2. Installing an ODBC Driver Manager</h2>\n\n<p>There are two major ODBC driver managers for Linux and macOS: <a href=\"http://www.unixodbc.org/\">unixODBC</a> and <a href=\"http://www.iodbc.org/dataspace/doc/iodbc/wiki/iodbcWiki/WelcomeVisitors\">iODBC</a>. I have had more overall ODBC driver installation success with unixODBC than iODBC; here are the instructions for building unixODBC from source:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-bash\" data-lang=\"bash\"><span class=\"c\">#download source and extract</span>\nwget ftp://ftp.unixodbc.org/pub/unixODBC/unixODBC-2.3.7.tar.gz\n<span class=\"nb\">gunzip </span>unixODBC<span class=\"k\">*</span>.tar.gz\n<span class=\"nb\">tar </span>xvf unixODBC<span class=\"k\">*</span>.tar\n\n<span class=\"c\">#compile and install</span>\n<span class=\"nb\">cd </span>unixODBC-2.3.7\n./configure\nmake\n<span class=\"nb\">sudo </span>make <span class=\"nb\">install</span></code></pre></figure>\n\n<p>If you want to check everything is installed correctly, you can run the following command:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-bash\" data-lang=\"bash\">odbc_config <span class=\"nt\">--cflags</span>\n\n<span class=\"c\">#result</span>\n<span class=\"nt\">-DHAVE_UNISTD_H</span> <span class=\"nt\">-DHAVE_PWD_H</span> <span class=\"nt\">-DHAVE_SYS_TYPES_H</span> <span class=\"nt\">-DHAVE_LONG_LONG</span> <span class=\"nt\">-DSIZEOF_LONG_INT</span><span class=\"o\">=</span>8 <span class=\"nt\">-I</span>/usr/local/include</code></pre></figure>\n\n<h2 id=\"3-installing-mapd-odbc-driver-system-wide\">3. Installing MapD ODBC Driver System-wide</h2>\n\n<p>With unixODBC installed, the next step is to <a href=\"https://www.mapd.com/docs/latest/6_odbc.html\">install the MapD ODBC drivers</a>. ODBC drivers for MapD are provided as part of <a href=\"https://www.mapd.com/platform/downloads/\">MapD Enterprise Edition</a>, so you’ll need to contact your sales representative to get the appropriate version for your MapD installation.</p>\n\n<p>For Linux, the MapD ODBC drivers are provided as a tarball, which when extracted provides all of the necessary ODBC driver files:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-bash\" data-lang=\"bash\"><span class=\"c\">#make a directory to extract files into</span>\n<span class=\"nb\">mkdir </span>mapd_odbc <span class=\"o\">&amp;&amp;</span> <span class=\"nb\">cd </span>mapd_odbc\n<span class=\"nb\">tar</span> <span class=\"nt\">-xvf</span> ../mapd_odbc_installer_linux_3.80.1.36.tar.gz\n\n<span class=\"c\">#move to /opt/mapd/mapd_odbc (or wherever the other MapD files are)</span>\n<span class=\"nb\">cd</span> .. <span class=\"o\">&amp;&amp;</span> <span class=\"nb\">mv </span>mapd_odbc /opt/mapd/mapd_odbc</code></pre></figure>\n\n<p>By convention, MapD suggests placing the ODBC drivers in the same directory as your installation (frequently, <code class=\"language-plaintext highlighter-rouge\">/opt/mapd</code>). Wherever you choose to place the directory, you need add that location into the <code class=\"language-plaintext highlighter-rouge\">/etc/odbcinst.ini</code> file:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-bash\" data-lang=\"bash\"><span class=\"o\">[</span>MapD Driver]\nDriver          <span class=\"o\">=</span> /opt/mapd/mapd_odbc/libs/libODBC.so</code></pre></figure>\n\n<p>At this point, we have everything we need to define a connection string within R using <code class=\"language-plaintext highlighter-rouge\">odbc</code>:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-r\" data-lang=\"r\"><span class=\"n\">library</span><span class=\"p\">(</span><span class=\"n\">odbc</span><span class=\"p\">)</span><span class=\"w\">\n\n</span><span class=\"n\">conn</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">dbConnect</span><span class=\"p\">(</span><span class=\"n\">odbc</span><span class=\"o\">::</span><span class=\"n\">odbc</span><span class=\"p\">(),</span><span class=\"w\">\n                  </span><span class=\"n\">Driver</span><span class=\"w\">    </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"MapD Driver\"</span><span class=\"p\">,</span><span class=\"w\">\n                  </span><span class=\"n\">Server</span><span class=\"w\">    </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"localhost\"</span><span class=\"p\">,</span><span class=\"w\">\n                  </span><span class=\"n\">Database</span><span class=\"w\">  </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"mapd\"</span><span class=\"p\">,</span><span class=\"w\">\n                  </span><span class=\"n\">UID</span><span class=\"w\">       </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"mapd\"</span><span class=\"p\">,</span><span class=\"w\">\n                  </span><span class=\"n\">PWD</span><span class=\"w\">       </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"helloRusers!\"</span><span class=\"p\">,</span><span class=\"w\">\n                  </span><span class=\"n\">Port</span><span class=\"w\">      </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"m\">9091</span><span class=\"p\">)</span></code></pre></figure>\n\n<p>Depending on your use case/security preferences, there are two downsides to this method: 1) the credentials are in plain-text in the middle of the script and 2) the <a href=\"https://support.rstudio.com/hc/en-us/articles/115010915687-Using-RStudio-Connections\">RStudio Connection window</a> also shows the credentials in connection window in plain-text until you delete the connection. This can be remedied by defining a DSN (data source name).</p>\n\n<h2 id=\"4-defining-a-dsn\">4. Defining A DSN</h2>\n\n<p>A DSN is what people usually think of when installing ODBC drivers, as it holds some/all of the actual details for connecting to the database. DSN files can be placed in two locations: system-wide in <code class=\"language-plaintext highlighter-rouge\">/etc/obdc.ini</code> or in an individual user’s home directory (needs to be <code class=\"language-plaintext highlighter-rouge\">~/.odbc.ini</code>, a hidden file).</p>\n\n<p>In order to have the credentials completely masked in the RStudio session, place the following in the <code class=\"language-plaintext highlighter-rouge\">/etc/obdc.ini</code> file:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-bash\" data-lang=\"bash\"><span class=\"o\">[</span>MapD Production]\n<span class=\"nv\">Driver</span><span class=\"o\">=</span>MapD Driver\n<span class=\"nv\">PWD</span><span class=\"o\">=</span>helloRusers!\n<span class=\"nv\">UID</span><span class=\"o\">=</span>mapd\n<span class=\"nv\">HOST</span><span class=\"o\">=</span>localhost\n<span class=\"nv\">DATABASE</span><span class=\"o\">=</span>mapd\n<span class=\"nv\">PORT</span><span class=\"o\">=</span>9091</code></pre></figure>\n\n<p>Within the RStudio Connection pane, we can now test our DSN:</p>\n\n<p><img src=\"/assets/img/mapd-odbc-rstudio-dsn-test.png\" alt=\"MapD ODBC RStudio Server DSN Test\" /></p>\n\n<p>With the DSN defined, the R connection code becomes much shorter, with no credentials exposed within the R session:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-bash\" data-lang=\"bash\">library<span class=\"o\">(</span>DBI<span class=\"o\">)</span>\ncon &lt;- dbConnect<span class=\"o\">(</span>odbc::odbc<span class=\"o\">()</span>, <span class=\"s2\">\"MapD Production\"</span><span class=\"o\">)</span></code></pre></figure>\n\n<h2 id=\"odbc-a-big-bag-of-hurt-but-super-useful\">ODBC: A Big Bag Of Hurt, But Super Useful</h2>\n\n<p>While the instructions above aren’t the easiest to work through, once you have ODBC set up and working one time, it’s usually just a matter of appending various credentials to the existing files to add databases.</p>\n\n<p>From a MapD perspective, ODBC is supported through our Enterprise Edition, but it is the <em>slowest</em> way to work with the database. Up to this point, we’ve focused mostly on supporting Python through the <a href=\"https://github.com/mapd/pymapd\">pymapd</a> package and the <a href=\"https://www.mapd.com/blog/scaling-pandas-to-the-billions-with-ibis-and-mapd/\">MapD Ibis backend</a>, but there’s no reason technical reason why R can’t also be a first-class citizen.</p>\n\n<p>So if you’re interested in helping develop an R package for MapD, whether using <a href=\"https://rstudio.github.io/reticulate/articles/introduction.html\">reticulate</a> to wrap pymapd or to help develop Apache Thrift bindings and Apache Arrow native code, <a href=\"https://twitter.com/randyzwitch\">send me a Twitter message</a> or <a href=\"https://www.linkedin.com/in/randyzwitch/\">connect via LinkedIn</a> (or any other way to contact me) and we’ll figure out how to collaborate!</p>"
}