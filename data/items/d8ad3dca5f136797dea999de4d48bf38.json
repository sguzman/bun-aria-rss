{
  "title": "Mocking an imported module-level function in Python",
  "link": "",
  "published": "2021-06-28T00:00:00-07:00",
  "updated": "2022-11-03T04:16:07-07:00",
  "author": {
    "name": "Greg Reda"
  },
  "id": "tag:www.gregreda.com,2021-06-28:/2021/06/28/mocking-imported-module-function-python/",
  "summary": "<p>The other day I spent far too much time trying to figure out how to mock a module-level function that was being used inside of my class's method in Python. My googling didn't lead to obvious answers, so I figured it'd be good to document here for future reference.</p>\n<p>Imagine â€¦</p>",
  "content": "<p>The other day I spent far too much time trying to figure out how to mock a module-level function that was being used inside of my class's method in Python. My googling didn't lead to obvious answers, so I figured it'd be good to document here for future reference.</p>\n<p>Imagine we have some module-level function like the following:</p>\n<div class=\"highlight\"><pre><span></span><code><span class=\"c1\"># file: project/some_module/functions.py</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">fetch_thing</span><span class=\"p\">():</span>\n    <span class=\"c1\"># query some database</span>\n    <span class=\"k\">return</span> <span class=\"n\">data</span>\n</code></pre></div>\n\n<p>And that we use it inside of a class within a different module:</p>\n<div class=\"highlight\"><pre><span></span><code><span class=\"c1\"># file: project/other_module/thing.py</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">some_module.functions</span> <span class=\"kn\">import</span> <span class=\"n\">fetch_thing</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Thing</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">fetch_thing</span><span class=\"p\">()</span>\n        <span class=\"k\">except</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">fail_gracefully</span><span class=\"p\">()</span>\n</code></pre></div>\n\n<p>In this example, I want to test that a failure fetching from the db will fail gracefully, so I need to mock <code>fetch_thing</code> and have it raise an exception.</p>\n<p>I kept trying to mock the function at its module path, like so:</p>\n<div class=\"highlight\"><pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">other_module.thing</span> <span class=\"kn\">import</span> <span class=\"n\">Thing</span>\n\n<span class=\"n\">thing</span> <span class=\"o\">=</span> <span class=\"n\">Thing</span><span class=\"p\">()</span>\n\n<span class=\"k\">with</span> <span class=\"n\">patch</span><span class=\"o\">.</span><span class=\"n\">object</span><span class=\"p\">(</span><span class=\"s1\">&#39;some_module.functions.fetch_thing&#39;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">mocked</span><span class=\"p\">:</span>\n    <span class=\"n\">mocked</span><span class=\"o\">.</span><span class=\"n\">side_effect</span> <span class=\"o\">=</span> <span class=\"ne\">Exception</span><span class=\"p\">(</span><span class=\"s1\">&#39;mocked error&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">thing</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n</code></pre></div>\n\n<p>But this isn't right. It turns out that you need to mock/patch the function <strong>within the module it's being imported into.</strong></p>\n<div class=\"highlight\"><pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">other_module.thing</span> <span class=\"kn\">import</span> <span class=\"n\">Thing</span>\n\n<span class=\"n\">thing</span> <span class=\"o\">=</span> <span class=\"n\">Thing</span><span class=\"p\">()</span>\n\n<span class=\"k\">with</span> <span class=\"n\">patch</span><span class=\"o\">.</span><span class=\"n\">object</span><span class=\"p\">(</span><span class=\"s1\">&#39;other_module.fetch_thing&#39;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">mocked</span><span class=\"p\">:</span>\n    <span class=\"n\">mocked</span><span class=\"o\">.</span><span class=\"n\">side_effect</span> <span class=\"o\">=</span> <span class=\"ne\">Exception</span><span class=\"p\">(</span><span class=\"s1\">&#39;mocked error&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">thing</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n</code></pre></div>\n\n<p>Note the very subtle difference in the string path we are passing to <code>patch.object</code>. Because we are importing the function into <code>other_module</code> where our class uses it, <strong>that</strong> is what we need to mock.</p>",
  "category": [
    "",
    "",
    ""
  ]
}