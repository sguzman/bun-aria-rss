{
  "title": "How Should you Protect your Machine Learning Models and IP?",
  "link": "https://petewarden.com/2022/05/08/how-should-you-protect-your-machine-learning-models-and-ip/",
  "comments": "https://petewarden.com/2022/05/08/how-should-you-protect-your-machine-learning-models-and-ip/#comments",
  "dc:creator": "Pete Warden",
  "pubDate": "Sun, 08 May 2022 02:36:30 +0000",
  "category": "Uncategorized",
  "guid": "http://petewarden.com/?p=7662",
  "description": "Over the last decade I&#8217;ve helped hundreds of product teams ship ML-based products, inside and outside of Google, and one of the most frequent questions I got was &#8220;How do I protect my models?&#8221;. This usually came from executives, and digging deeper it became clear they were most worried about competitors gaining an advantage from [&#8230;]",
  "content:encoded": "\n<figure class=\"wp-block-image size-large\"><a href=\"https://petewarden.files.wordpress.com/2022/05/padlock.png\"><img data-attachment-id=\"7663\" data-permalink=\"https://petewarden.com/2022/05/08/how-should-you-protect-your-machine-learning-models-and-ip/padlock/\" data-orig-file=\"https://petewarden.files.wordpress.com/2022/05/padlock.png\" data-orig-size=\"441,518\" data-comments-opened=\"1\" data-image-meta=\"{\"aperture\":\"0\",\"credit\":\"\",\"camera\":\"\",\"caption\":\"\",\"created_timestamp\":\"0\",\"copyright\":\"\",\"focal_length\":\"0\",\"iso\":\"0\",\"shutter_speed\":\"0\",\"title\":\"\",\"orientation\":\"0\"}\" data-image-title=\"padlock\" data-image-description=\"\" data-image-caption=\"\" data-medium-file=\"https://petewarden.files.wordpress.com/2022/05/padlock.png?w=255\" data-large-file=\"https://petewarden.files.wordpress.com/2022/05/padlock.png?w=441\" src=\"https://petewarden.files.wordpress.com/2022/05/padlock.png?w=441\" alt=\"\" class=\"wp-image-7663\" srcset=\"https://petewarden.files.wordpress.com/2022/05/padlock.png 441w, https://petewarden.files.wordpress.com/2022/05/padlock.png?w=128 128w, https://petewarden.files.wordpress.com/2022/05/padlock.png?w=255 255w\" sizes=\"(max-width: 441px) 100vw, 441px\" /></a></figure>\n\n\n\n<p>Over the last decade I&#8217;ve helped hundreds of product teams ship ML-based products, inside and outside of Google, and one of the most frequent questions I got was &#8220;How do I protect my models?&#8221;. This usually came from executives, and digging deeper it became clear they were most worried about competitors gaining an advantage from what we released. This worry is completely understandable, because modern machine learning has become essential for many applications so quickly that best practices haven&#8217;t had time to settle and spread. The answers are complex and depend to some extent on your exact threat models, but if you want a summary of the advice I usually give it boils down to:</p>\n\n\n\n<ul><li>Treat your training data like you do your traditional source code.</li><li>Treat your model files like compiled executables.</li></ul>\n\n\n\n<p>To explain why I ended up with these conclusions, I&#8217;ll need to dive into some of the ways that malicious actors could potentially harm a company based on how ML materials are released. I&#8217;ve spent a lot of my time focused on edge deployments, but many of the points are applicable to cloud applications too.</p>\n\n\n\n<p>The most concerning threat is frequently &#8220;Will releasing this make it easy for my main competitor to copy this new feature and hurt our differentiation in the market?&#8221;. If you haven&#8217;t spent time personally engineering ML features, you might think that releasing a model file, for example as part of a phone app, would make this easy, especially if it&#8217;s in a common format like a TensorFlow Lite flatbuffer. In practice, I recommend thinking about these model files like the binary executables that contain your application code. By releasing it you are making it possible to inspect the final result of your product engineering process, but trying to do anything useful with it is usually like trying to turn a hamburger back into a cow. Just as with executables you can disassemble them to get the overall structure, by loading them into a tool like <a href=\"https://netron.app/\">Netron</a>. You may be able to learn something about the model architecture, but just like disassembling machine code it won&#8217;t actually give you a lot of help reproducing the results. Knowing the model architecture is mildly useful, but most architectures are well known in the field anyway, and only differ from each other incrementally.</p>\n\n\n\n<p>What about just copying the model file itself and using it in an application? That&#8217;s not as useful as you might think, for a lot of reasons. First off, it&#8217;s a clear copyright violation, just like copying an executable, so it&#8217;s easy to spot and challenge legally. If you are still worried about this, you can take some simple steps like encrypting the model file in the app bundle and only unpacking it into memory when the app is running. This won&#8217;t stop a determined attacker, but it makes it harder. To help catch copycats, you can also add text strings into your files that say something like &#8220;Copyright Foo, Inc.&#8221;, or get more elaborate and modify your training data to add canaries, also more poetically called <a href=\"https://en.wikipedia.org/wiki/Fictitious_entry\">Mountweazels</a>, by modifying your training data so that the model produces distinct and unlikely results in rare circumstances. For example, an image model could be trained so that a Starbucks logo always returns &#8220;Duck&#8221; as the prediction. Your application could ignore this result, but even if the attacker got clever and added small perturbations to the model weights to prevent obvious binary comparisons, the behavior would be likely to persist and prove that it was directly derived from the original.</p>\n\n\n\n<p>Even if you don&#8217;t detect the copying, having a static model is not actually that useful. The world keeps changing, you&#8217;ll want to keep improving the model and adapting to new needs, and that&#8217;s very hard to do if all you have is the end result of training. It&#8217;s also unlikely that a competitor will have exactly the same requirements as you, whether it&#8217;s because of using different hardware or a user population that differs from yours. You might be able to hack a bit of transfer learning to modify a model file, but at that point you&#8217;re probably better off starting with a publicly-released model, since you&#8217;ll have a very limited ability to make changes on a model that&#8217;s already been optimized (for example using quantization).</p>\n\n\n\n<p>A lot of these properties are very analogous to a compiled executable, hence my advice at the start. You&#8217;ve got an artifact that&#8217;s the end result of a complex process, and any attacker is almost certain to want modifications that aren&#8217;t feasible without access to the intermediate steps that were required to produce it in the first place. From my experience, by far the most crucial, and so most valuable, part of the recipe for a machine learning feature is the training data. It would be much quicker for me to copy most features if I was given nothing but the dataset used to train the model, than if I had access to the training script, feature generation, optimization and deployment code without that data. The training data is what actually sets out the detailed requirements for what the model needs to do, and usually goes through a long process of refinement as the engineers involved learn more about what&#8217;s actually needed in the product.</p>\n\n\n\n<p>This is why I recommend treating the dataset in the same way that you treat source code for your application. It&#8217;s a machine-readable specification of exactly how to tackle your problem, and as such requires a lot of time, resources, and expertise to reproduce. People in other industries often ask me why big tech companies give away so much ML software as open source, because they&#8217;re used to thinking about code as the crown jewels that need to be protected at all costs. This is true for your application code, but in machine learning having access to libraries like TensorFlow or PyTorch doesn&#8217;t get you that much closer to achieving what Google or Meta can do with machine learning. It&#8217;s actually the training data that&#8217;s the biggest barrier, so if you have built something using ML that&#8217;s a competitive advantage, make sure you keep your dataset secure.</p>\n\n\n\n<p>Personally, <a href=\"https://ai.googleblog.com/2017/08/launching-speech-commands-dataset.html\">I&#8217;m a big fan of opening up datasets for research purposes</a>, but if you look around you&#8217;ll see that most releases are for comparatively generic problems within speech or vision, rather than more specific predictions that are useful for features in commercial products. Public datasets can be useful as starting points for training a more targeted model, but the process usually involves adding data that&#8217;s specific to your deployment environment, relabeling to highlight the things you really want to recognize, and removing irrelevant or poorly-tagged data. All these steps take time and resources, and form a barrier to any competitor who wants to do the same thing.</p>\n\n\n\n<p>My experience has largely been with on-device ML, so these recommendations are focused on the cases I&#8217;m most familiar with. Machine learning models deployed behind a cloud API have different challenges, but are easier in a lot of ways because the model file itself isn&#8217;t accessible. You may still want to put in terms-of-use clauses to bar people from using the services to train their own models, like all commercial speech recognition APIs I know of do, but this approach to copying isn&#8217;t as effective as you might expect. It suffers the <a href=\"https://en.wikipedia.org/wiki/Multiplicity_(film)\">Multiplicity</a> problem, where copies inevitably seem to lose quality compared to their originals.</p>\n\n\n\n<p>Anyway, I am very definitely Not A Lawyer, so don&#8217;t take any of this as legal advice, but I hope it will be useful to help understand some useful responses to some typical threat models, and at least give you my perspective on the best practices I&#8217;ve seen emerge. I&#8217;ll be interested to hear if there are any papers or other publications around these questions too, so please do get in touch if you know of anything I should check out!</p>\n",
  "wfw:commentRss": "https://petewarden.com/2022/05/08/how-should-you-protect-your-machine-learning-models-and-ip/feed/",
  "slash:comments": 1,
  "media:content": [
    {
      "media:title": "petewarden"
    },
    ""
  ]
}