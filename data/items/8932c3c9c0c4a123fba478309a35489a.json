{
  "id": "yt:video:ThjvMReOXYM",
  "yt:videoId": "ThjvMReOXYM",
  "yt:channelId": "UC_iD0xppBwwsrM9DegC5cQQ",
  "title": "Crust of Rust: async/await",
  "link": "",
  "author": {
    "name": "Jon Gjengset",
    "uri": "https://www.youtube.com/channel/UC_iD0xppBwwsrM9DegC5cQQ"
  },
  "published": "2021-08-31T23:29:24+00:00",
  "updated": "2022-09-26T16:38:39+00:00",
  "media:group": {
    "media:title": "Crust of Rust: async/await",
    "media:content": "",
    "media:thumbnail": "",
    "media:description": "Finally, we tackle the topic of async/await in Rust, and specifically looking at how to use and think about async/await more so than how it works under the hood. My hope with this video is to convey the mental model and intuition you should use when using async/await in your own code, without getting bogged down in the details of Future, Pin, and Wakers.\n\n0:00:00 Introduction\n0:04:49 Fixing the video title\n0:05:28 What is async fn?\n0:10:40 awaiting futures\n0:17:00 Yielding\n0:20:03 Awaiting one of multiple futures\n0:34:46 Cancellation\n0:37:58 Executing futures\n0:50:50 Select arms with side-effects\n0:55:35 Cooperative scheduling\n0:58:38 Selects with many arms\n1:01:51 Fused futures\n1:04:35 Overhead of async\n1:07:56 Is select a future?\n1:09:20 Awaiting multiple futures\n1:19:17 Parallelism and spawning\n1:30:37 Sharing across spawn\n1:36:23 Runtime discovery\n1:42:05 Stack variables in async\n1:55:45 Async fn in traits\n2:08:06 Asynchronous Mutexes\n2:21:03 Do futures stay on a thread?\n2:24:11 Async stack traces\n2:33:04 Wrapping up\n\nThe async book: https://rust-lang.github.io/async-book/\nTokio's mini-redis: https://github.com/tokio-rs/mini-redis/\n\n\nLive version with chat: https://youtu.be/CaCYL11_qEU",
    "media:community": {
      "media:starRating": "",
      "media:statistics": ""
    }
  }
}