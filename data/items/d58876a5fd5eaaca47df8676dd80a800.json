{
  "title": "Solving “real world” problems with SymPy",
  "link": "",
  "published": "2016-02-06T18:51:00+00:00",
  "updated": "2016-02-06T18:51:00+00:00",
  "id": "https://danielhomola.com/learning/solving-real-world-problems-with-sympy",
  "content": "<h2 id=\"background\">Background</h2>\n<p><a href=\"http://www.sympy.org/en/index.html\">SymPy</a> is an amazing library for symbolic mathematics in Python. It’s like <a href=\"http://www.wolfram.com/mathematica/\">Mathematica</a>, and its <a href=\"http://live.sympy.org/\">online shell</a> version along with <a href=\"http://www.sympygamma.com/\">SymPy Gamma</a>  is pretty much like<a href=\"https://www.wolframalpha.com/\"> Wolfram Alpha</a> (WA).</p>\n\n<h3 id=\"problem-setting\">Problem setting</h3>\n<p>In this dummy example we’ll go to an imaginary gallery and figure out how far we should stand from a huge painting on the wall so we have the widest possible viewing angle.</p>\n\n<p>If you have a look at the image below you’ll see, that the bottom of the painting is 3 meters above our level of eyesight and the top of the painting is 15 meters above it. You can imagine that if you were standing right below the painting you wouldn’t see much of it. Same thing would happen if you stood very far away. But where exactly should you stand to get the best viewing angle? I took this example from <a href=\"https://mooculus.osu.edu/\">here</a>.</p>\n\n<p><a href=\"/assets/images/sympy.jpg\"><img src=\"/assets/images/sympy.jpg\" /></a></p>\n\n<h2 id=\"solution\">Solution</h2>\n<p>So we are looking for the maximum $latex \\theta$ as we are moving closer to or further away from the painting, effectively varying $latex x$. Basic geometry tells us that we can find this angle as the difference of two related angles $latex \\alpha-\\beta$, and trigonometry tells us that</p>\n\n<p class=\"text-center\">$latex f(x) = \\theta = \\arctan \\left(\\frac{15}{x}\\right)-\\arctan \\left(\\frac{3}{x}\\right) $.</p>\n\n<h3 id=\"on-paper\">On paper</h3>\n<p>We want to find the maximum of this function with respect to $latex x$. We need to differentiate it, find its critical points and check at which of those critical points the second derivative is negative (i.e. there we’ll have the max of $latex f(x)$. We could do this manually remembering that</p>\n\n<p class=\"text-center\">$latex \\frac{d}{dx}\\arctan x=\\frac{1}{1+x^2},$</p>\n\n<p>but what’s the fun in that? :) </p>\n\n<h3 id=\"using-sympy\">Using SymPy</h3>\n<p>So let’s type a few lines of code into <a href=\"http://live.sympy.org/\">SymPy’s online shell</a>:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-python\" data-lang=\"python\"><table class=\"rouge-table\"><tbody><tr><td class=\"gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n</pre></td><td class=\"code\"><pre><span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"n\">atan</span><span class=\"p\">(</span><span class=\"mi\">15</span><span class=\"o\">/</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"n\">atan</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"o\">/</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"n\">df1</span> <span class=\"o\">=</span> <span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span>\n<span class=\"n\">df2</span> <span class=\"o\">=</span> <span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">))</span>\n<span class=\"n\">critical</span> <span class=\"o\">=</span> <span class=\"n\">solve</span><span class=\"p\">(</span><span class=\"n\">Eq</span><span class=\"p\">(</span><span class=\"n\">df1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n<span class=\"n\">critical</span>\n<span class=\"n\">df2</span><span class=\"p\">.</span><span class=\"n\">subs</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">critical</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n<span class=\"n\">N</span><span class=\"p\">(</span><span class=\"n\">critical</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n</pre></td></tr></tbody></table></code></pre></figure>\n\n<h3 id=\"breaking-it-down\">Breaking it down</h3>\n\n<ol>\n  <li>In the first line we define $latex f(x)$.\n    <ul>\n      <li>The cool thing here is that this is done symbolically, as we would do it on a piece of paper.  </li>\n    </ul>\n  </li>\n  <li>In the 2nd line we differentiate this function.\n    <ul>\n      <li>This is done as it would be done on paper. If you now type $latex df$, you’ll get the derivative:</li>\n      <li>$latex f’(x) = -\\frac{15}{x^2 \\left( 1+\\frac{255}{x^2}\\right)}+\\frac{3}{x^2 \\left( 1+\\frac{9}{x^2}\\right)}$</li>\n      <li>Even if I had looked up $latex \\frac{d}{dx} \\text{arctan}(x)$, it would have taken a bit of time for me to get here to be honest..</li>\n    </ul>\n  </li>\n  <li>In the third line we get the second derivative,</li>\n  <li>In the 4th we find the critical points of $latex f(x)$.\n    <ul>\n      <li>Again everything is symbolic, nothing would make sense in pure Python, but it works beautifully in SymPy.</li>\n    </ul>\n  </li>\n  <li>In the 5th line we print the critical points.\n    <ul>\n      <li>We get $latex -3\\sqrt{5}$ and $latex 3\\sqrt{5}$.</li>\n      <li>Remember, we are looking for $latex x$, which is a distance, so we should be suspicious(to say the least) about the negative value, but we still need to check that $latex f(x)$ actually has a local maximum at $latex 3\\sqrt{5}$.</li>\n    </ul>\n  </li>\n  <li>That’s exactly what the 6th line does.\n    <ul>\n      <li>We substitute in the second critical point into the second derivative, and indeed we get a negative value, confirming that $latex f(x)$ has a local maximum at $latex 3\\sqrt{5}$.</li>\n    </ul>\n  </li>\n  <li>In the 7th line we use the $latex N()$ function to print out the numerical value of this expression, which is $latex \\approx$ 6.7 meters.</li>\n</ol>\n\n<h2 id=\"summary\">Summary</h2>\n<p>So we should stand about 6.7 meters away from the painting to get the maximum possible viewing angle.</p>\n\n<p>There you go, in less than 10 lines we did some optimization symbolically in Python. Actually we could have done this in about three lines, sacrificing a bit of clarity, but that’s never a good trade-off..</p>\n\n<p>As I said, this is barely scratching the surface of what SymPy can do for you, but if you were after an alternative of Wolfram Alpha for symbolic mathematics, I think you’ll find it extremely helpful.</p>",
  "author": {
    "name": "danielhomola"
  },
  "category": [
    "",
    "",
    "",
    ""
  ],
  "summary": "Using symbolic maths in Python."
}