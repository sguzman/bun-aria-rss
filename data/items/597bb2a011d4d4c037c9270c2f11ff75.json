{
  "title": "Feature Engineering with Time Gaps",
  "link": "",
  "published": "2020-02-16T00:00:00-08:00",
  "updated": "2022-11-03T04:16:07-07:00",
  "author": {
    "name": "Greg Reda"
  },
  "id": "tag:www.gregreda.com,2020-02-16:/2020/02/16/feature-engineering-with-time-gaps/",
  "summary": "<p>I tend to forget how to write certain blocks of code when I haven't written them in a while. Here's a common machine learning preprocessing task that falls into that category.</p>\n<p>Imagine you have some event logs that capture an entity ID (user, store, ad, etc), timestamp, an event name â€¦</p>",
  "content": "<p>I tend to forget how to write certain blocks of code when I haven't written them in a while. Here's a common machine learning preprocessing task that falls into that category.</p>\n<p>Imagine you have some event logs that capture an entity ID (user, store, ad, etc), timestamp, an event name, and maybe some other details. The data looks something like this:</p>\n<div class=\"highlight\"><pre><span></span><code>userid  timestamp   event\n789 2019-07-18 01:06:00 login\n123 2019-07-19 08:30:00 login\n789 2019-07-20 02:39:00 login\n789 2019-07-20 08:15:00 login\n456 2019-07-20 10:05:00 login\n123 2019-07-20 14:40:00 login\n123 2019-07-20 18:05:00 login\n456 2019-07-21 21:11:00 login\n789 2019-07-22 10:05:00 login\n123 2019-07-23 09:18:00 login\n789 2019-07-23 17:35:00 login\n123 2019-07-25 16:49:00 login\n789 2019-07-26 12:13:00 login\n123 2019-07-27 19:56:00 login\n</code></pre></div>\n\n<p>For the sake of simplicity, let's say we want to build a model predicting whether or not a user will login in tomorrow. Our target is <code>y = bool(logins)</code>.</p>\n<p>Three features we think will be informative are the user's previous logins, whether they logged in yesterday, and the number of days since their last login. We'll call these features <code>lifetime_logins</code>, <code>logins_yesterday</code>, and <code>days_since_last_login</code>.</p>\n<p>Using <a href=\"https://pandas.pydata.org/\">pandas</a>, we aggregate by user and date to get each user's daily count of logins.</p>\n<div class=\"highlight\"><pre><span></span><code><span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">read_clipboard</span><span class=\"p\">(</span><span class=\"n\">parse_dates</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;timestamp&#39;</span><span class=\"p\">])</span>\n<span class=\"n\">user_logins</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">set_index</span><span class=\"p\">(</span><span class=\"s1\">&#39;timestamp&#39;</span><span class=\"p\">)</span>\n               <span class=\"o\">.</span><span class=\"n\">groupby</span><span class=\"p\">([</span><span class=\"s1\">&#39;userid&#39;</span><span class=\"p\">,</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Grouper</span><span class=\"p\">(</span><span class=\"n\">freq</span><span class=\"o\">=</span><span class=\"s1\">&#39;D&#39;</span><span class=\"p\">)])</span>\n               <span class=\"o\">.</span><span class=\"n\">size</span><span class=\"p\">()</span>\n               <span class=\"o\">.</span><span class=\"n\">rename</span><span class=\"p\">(</span><span class=\"s1\">&#39;logins&#39;</span><span class=\"p\">))</span>\n<span class=\"c1\"># userid  timestamp</span>\n<span class=\"c1\"># 123     2019-07-19    1</span>\n<span class=\"c1\">#         2019-07-20    2</span>\n<span class=\"c1\">#         2019-07-23    1</span>\n<span class=\"c1\">#         2019-07-25    1</span>\n<span class=\"c1\">#         2019-07-27    1</span>\n<span class=\"c1\"># 456     2019-07-20    1</span>\n<span class=\"c1\">#         2019-07-21    1</span>\n<span class=\"c1\"># 789     2019-07-18    1</span>\n<span class=\"c1\">#         2019-07-20    2</span>\n<span class=\"c1\">#         2019-07-22    1</span>\n<span class=\"c1\">#         2019-07-23    1</span>\n<span class=\"c1\">#         2019-07-26    1</span>\n<span class=\"c1\"># Name: logins, dtype: int64</span>\n</code></pre></div>\n\n<p>But we're missing critical information. This is when the brain fart happens.</p>\n<p>Recall the structure of our logs. Notice they omit records for when the user had no activity. In order to create our features, we need to fill in time gaps for each user and then roll that information forward.</p>\n<p>This goal of this post is to help me remember how to do this in the future.</p>\n<h3>Filling Time Gaps</h3>\n<p>First, we need to put each user on a continuous time scale.</p>\n<div class=\"highlight\"><pre><span></span><code><span class=\"c1\"># create a continuous DatetimeIndex at a daily level</span>\n<span class=\"n\">dates</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">date_range</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">timestamp</span><span class=\"o\">.</span><span class=\"n\">min</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">(),</span>\n                      <span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">timestamp</span><span class=\"o\">.</span><span class=\"n\">max</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">(),</span>\n                      <span class=\"n\">freq</span><span class=\"o\">=</span><span class=\"s1\">&#39;1D&#39;</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># get unique set of user ids</span>\n<span class=\"n\">users</span> <span class=\"o\">=</span> <span class=\"n\">df</span><span class=\"p\">[</span><span class=\"s1\">&#39;userid&#39;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">unique</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># create a MultiIndex that is the product (cross-join) of</span>\n<span class=\"c1\"># users and DatetimeIndexes</span>\n<span class=\"n\">idx</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">MultiIndex</span><span class=\"o\">.</span><span class=\"n\">from_product</span><span class=\"p\">([</span><span class=\"n\">users</span><span class=\"p\">,</span> <span class=\"n\">dates</span><span class=\"p\">],</span> <span class=\"n\">names</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;userid&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;timestamp&#39;</span><span class=\"p\">])</span>\n\n<span class=\"c1\"># and reindex our `user_logins` counts by it</span>\n<span class=\"n\">user_logins</span> <span class=\"o\">=</span> <span class=\"n\">user_logins</span><span class=\"o\">.</span><span class=\"n\">reindex</span><span class=\"p\">(</span><span class=\"n\">idx</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># userid  timestamp</span>\n<span class=\"c1\"># 789     2019-07-18    1.0</span>\n<span class=\"c1\">#         2019-07-19    NaN</span>\n<span class=\"c1\">#         2019-07-20    2.0</span>\n<span class=\"c1\">#         2019-07-21    NaN</span>\n<span class=\"c1\">#         2019-07-22    1.0</span>\n<span class=\"c1\">#         2019-07-23    1.0</span>\n<span class=\"c1\">#         2019-07-24    NaN</span>\n<span class=\"c1\">#         2019-07-25    NaN</span>\n<span class=\"c1\">#         2019-07-26    1.0</span>\n<span class=\"c1\">#         2019-07-27    NaN</span>\n</code></pre></div>\n\n<p>This gives us a continuous daily time series for each user. You can see what this looks like for user 789 above.</p>\n<p>An important thing to note is that <code>idx</code> will need to be on the same time scale as the current <code>DatetimeIndex</code> in <code>user_logins</code>. Because we aggregated at a daily level using <code>pd.Grouper(freq='D')</code>, the <code>MultiIndex</code> we are using to <code>reindex</code> should also be at a daily level.</p>\n<h3>Creating Features</h3>\n<p>Now we're free to create our features. We can zero-fill days each user did not log in. We also need to convert our <code>user_logins</code> to a DataFrame, which allows us to create the new feature columns (e.g. <code>logins_yesterday</code>).</p>\n<div class=\"highlight\"><pre><span></span><code><span class=\"n\">user_logins</span> <span class=\"o\">=</span> <span class=\"n\">user_logins</span><span class=\"o\">.</span><span class=\"n\">fillna</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to_frame</span><span class=\"p\">()</span>\n<span class=\"n\">user_logins</span><span class=\"p\">[</span><span class=\"s1\">&#39;logins_yesterday&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">user_logins</span><span class=\"o\">.</span><span class=\"n\">groupby</span><span class=\"p\">(</span><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"s1\">&#39;userid&#39;</span><span class=\"p\">)[</span><span class=\"s1\">&#39;logins&#39;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">shift</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"c1\">#                    logins  logins_yesterday</span>\n<span class=\"c1\"># userid timestamp</span>\n<span class=\"c1\"># 789    2019-07-18     1.0               NaN</span>\n<span class=\"c1\">#        2019-07-19     0.0               1.0</span>\n<span class=\"c1\">#        2019-07-20     2.0               0.0</span>\n<span class=\"c1\">#        2019-07-21     0.0               2.0</span>\n<span class=\"c1\">#        2019-07-22     1.0               0.0</span>\n<span class=\"c1\"># 123    2019-07-18     0.0               NaN</span>\n<span class=\"c1\">#        2019-07-19     1.0               0.0</span>\n<span class=\"c1\">#        2019-07-20     2.0               1.0</span>\n<span class=\"c1\">#        2019-07-21     0.0               2.0</span>\n<span class=\"c1\">#        2019-07-22     0.0               0.0</span>\n<span class=\"c1\"># 456    2019-07-18     0.0               NaN</span>\n<span class=\"c1\">#        2019-07-19     0.0               0.0</span>\n<span class=\"c1\">#        2019-07-20     1.0               0.0</span>\n<span class=\"c1\">#        2019-07-21     1.0               1.0</span>\n<span class=\"c1\">#        2019-07-22     0.0               1.0</span>\n</code></pre></div>\n\n<p>The <code>lifetime_logins</code> and <code>login_streak</code> features need to be context dependant to avoid data leakage when training our model. Our features need to represent what would have been the correct values <em>at the time</em>. We can do this by rolling information forward with <code>shift</code>.</p>\n<div class=\"highlight\"><pre><span></span><code><span class=\"n\">user_logins</span><span class=\"p\">[</span><span class=\"s1\">&#39;lifetime_logins&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">user_logins</span>\n                                  <span class=\"o\">.</span><span class=\"n\">groupby</span><span class=\"p\">(</span><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"s1\">&#39;userid&#39;</span><span class=\"p\">)</span>\n                                  <span class=\"o\">.</span><span class=\"n\">logins</span><span class=\"o\">.</span><span class=\"n\">cumsum</span><span class=\"p\">()</span>\n                                  <span class=\"o\">.</span><span class=\"n\">groupby</span><span class=\"p\">(</span><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"s1\">&#39;userid&#39;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">shift</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n<span class=\"n\">user_logins</span><span class=\"p\">[</span><span class=\"s1\">&#39;days_since_last_login&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">user_logins</span>\n                                        <span class=\"o\">.</span><span class=\"n\">groupby</span><span class=\"p\">(</span><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"s1\">&#39;userid&#39;</span><span class=\"p\">)</span>\n                                        <span class=\"o\">.</span><span class=\"n\">cumsum</span><span class=\"p\">()</span>\n                                        <span class=\"o\">.</span><span class=\"n\">groupby</span><span class=\"p\">([</span><span class=\"s1\">&#39;userid&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;logins&#39;</span><span class=\"p\">])</span>\n                                        <span class=\"o\">.</span><span class=\"n\">cumcount</span><span class=\"p\">()</span>\n                                        <span class=\"o\">.</span><span class=\"n\">groupby</span><span class=\"p\">(</span><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"s1\">&#39;userid&#39;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">shift</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n                                        <span class=\"o\">.</span><span class=\"n\">rename</span><span class=\"p\">(</span><span class=\"s1\">&#39;days_since_last_login&#39;</span><span class=\"p\">))</span>\n\n<span class=\"c1\">#                    logins  logins_yesterday  lifetime_logins  days_since_last_login</span>\n<span class=\"c1\"># userid timestamp</span>\n<span class=\"c1\"># 789    2019-07-18     1.0               NaN              NaN                    NaN</span>\n<span class=\"c1\">#        2019-07-19     0.0               1.0              1.0                    0.0</span>\n<span class=\"c1\">#        2019-07-20     2.0               0.0              1.0                    1.0</span>\n<span class=\"c1\">#        2019-07-21     0.0               2.0              3.0                    0.0</span>\n<span class=\"c1\">#        2019-07-22     1.0               0.0              3.0                    1.0</span>\n<span class=\"c1\"># 123    2019-07-18     0.0               NaN              NaN                    NaN</span>\n<span class=\"c1\">#        2019-07-19     1.0               0.0              0.0                    0.0</span>\n<span class=\"c1\">#        2019-07-20     2.0               1.0              1.0                    0.0</span>\n<span class=\"c1\">#        2019-07-21     0.0               2.0              3.0                    0.0</span>\n<span class=\"c1\">#        2019-07-22     0.0               0.0              3.0                    1.0</span>\n<span class=\"c1\"># 456    2019-07-18     0.0               NaN              NaN                    NaN</span>\n<span class=\"c1\">#        2019-07-19     0.0               0.0              0.0                    0.0</span>\n<span class=\"c1\">#        2019-07-20     1.0               0.0              0.0                    1.0</span>\n<span class=\"c1\">#        2019-07-21     1.0               1.0              1.0                    0.0</span>\n<span class=\"c1\">#        2019-07-22     0.0               1.0              2.0                    0.0</span>\n</code></pre></div>\n\n<p>This can also be extended to create rolling features: something like <code>logins_last_n_days</code> where <code>n = [7, 14, 21]</code>.</p>\n<div class=\"highlight\"><pre><span></span><code><span class=\"k\">for</span> <span class=\"n\">n</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">14</span><span class=\"p\">,</span> <span class=\"mi\">21</span><span class=\"p\">]:</span> \n    <span class=\"n\">col</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;logins_last_</span><span class=\"si\">{}</span><span class=\"s1\">_days&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span>\n    <span class=\"n\">user_logins</span><span class=\"p\">[</span><span class=\"n\">col</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">user_logins</span>\n                        <span class=\"o\">.</span><span class=\"n\">groupby</span><span class=\"p\">(</span><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"s1\">&#39;userid&#39;</span><span class=\"p\">)</span>\n                        <span class=\"o\">.</span><span class=\"n\">logins</span>\n                        <span class=\"o\">.</span><span class=\"n\">apply</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">d</span><span class=\"p\">:</span> <span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">rolling</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">shift</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)))</span>\n</code></pre></div>\n\n<p>Hopefully you've found this post helpful. I know my future self will.</p>",
  "category": [
    "",
    "",
    "",
    "",
    ""
  ]
}