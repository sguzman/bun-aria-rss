{
  "title": "Admirable Traits of Tech Leads",
  "link": "",
  "updated": "2021-06-24T00:00:00+00:00",
  "id": "https://mrocklin.github.io/blog/work/2021/06/24/technical-lead",
  "content": "<h2 id=\"what-is-a-technical-lead\">What is a technical lead?</h2>\n\n<p>Tech lead is a role for senior engineers that provides some of the leverage of\nmanagement, while avoiding most of the administrative burden.  It’s a fun role.\nThis post talks about some positive behaviors to think about should you find\nyourself in this role.</p>\n\n<p>As the name suggests, tech leads <em>lead</em> larger technical efforts.\nThey work with a team, but typically don’t formally manage anyone.\nThe team looks up to them and it’s their job to steer the effort technically,\nwhile typically only using the soft power of generally knowing what they’re\ndoing.</p>\n\n<p>It’s a really fun role.  I spent most of my time as a tech lead while at Anaconda, and serve\nin that capacity to some extent in OSS communities.  I wanted to share some of\nthe positive behaviors that I think make for a good tech lead.</p>\n\n<p>So, what can a good tech lead do?</p>\n\n<h2 id=\"tech-lead-behaviors\">Tech lead behaviors</h2>\n\n<ul>\n  <li>\n    <p><strong>Solve Hard Problems</strong>: as a start, you have to be an excellent developer.\nYou’re going to have to rescue your teammates from difficult bugs,\nand tackle the core bits of whatever you’re building.</p>\n\n    <p>But if you want to solve hard problems then stay a senior engineer.\nTechnical leadership is about guiding rather than executing</p>\n  </li>\n  <li>\n    <p><strong>Avoid Hard Problems</strong>: save your team time by pointing them towards\nsimple solutions when they suffice.</p>\n\n    <p>A team lead has to provide paths to solutions that the rest of the team can\neasily implement.  Finding easy solutions is hard.</p>\n\n    <p>A team lead often has to say <em>“OK, I can see that your solution works well,\nbut I wonder if we can make it simpler by doing X.  This will probably help\ndown the line with future maintenance.”</em></p>\n  </li>\n  <li>\n    <p><strong>Avoid Technical Debt</strong>: leading a large effort is like playing chess.\nYou make individual moves, but you think ahead about the ramifications of\nthose moves.</p>\n\n    <p>If the team has to spend time dealing with, or paying down technical debt\nthen that’s your fault.  You should think about simple and extensible designs,\nso that your teammates can solve individual problems that robustly lead to\nan efficient solution.</p>\n  </li>\n  <li>\n    <p><strong>Break large problems down into small ones</strong>: building something\nyourself is easy.  Breaking down a large thing into small things that many\npeople can develop on at once in parallel is hard and requires thoughtful\ndesign.</p>\n\n    <p>In some sense, a technical lead is able to realize the “mythical man-month”\nby finding a path through the problem that exposes enough concurrency to\nenable acceleration through parallelism.</p>\n  </li>\n  <li>\n    <p><strong>Scope problems for your team:</strong> a small amount of scoping and support\nwork from you can\noften save your teammates long hours of work.  This can take many forms:</p>\n\n    <ul>\n      <li>Presenting a problem in context</li>\n      <li>Provide a recommended approach, and pointers to relevant pieces of the\ncode</li>\n      <li>Tests that you think should pass that encode important behavior or make\nthe API clear</li>\n    </ul>\n\n    <p>As you know, a lot of software development time is spent understanding\ndesign, and exploring wrong paths.  You’re probably faster at this than\nyour teammates, and so it’s a highly productive activity for you.\nBy providing enough detail up-front you can reduce uncertainty, stress, and\ndelays from your teammates’ work, which they will appreciate.</p>\n  </li>\n  <li>\n    <p><strong>Know your team:</strong> In order to properly scope and describe tasks for your\nteammates you need to know their technical capabilities and preferences\npretty well.  This arises in two components:</p>\n\n    <ol>\n      <li>\n        <p>You can match problems to teammates based on interest.  People do a\nbetter job on problems that excite them.</p>\n      </li>\n      <li>\n        <p>You can provide more or less detail based on their experience with\nthese kinds of problems.</p>\n      </li>\n    </ol>\n  </li>\n  <li>\n    <p><strong>Explain your thought process:</strong> It’s not enough to say “here is a test\nand a design, please implement it”.  Remember that you’re not in charge of\nanyone here.  Instead, you lead by providing explanation and context on why\nyou think a certain path is best.</p>\n\n    <ul>\n      <li><strong>Bad:</strong> Please use algorithm X here rather than Y.</li>\n      <li>\n        <p><strong>Good:</strong> I suspect that algorithm Y here will not perform well when we\nhave many users.  I think that it’s O(n^2), which is fine for the test\ncases that we have here, but given that we’re expecting 10k\nsimultaneous users and the cost here seems to be about 5us, this turns\ninto <code class=\"language-plaintext highlighter-rouge\">5us * 10k ** 2 = 10 minutes</code></p>\n\n        <p>Instead, I think that algorithm X might be a better fit.  It’s a bit\nslower when we have very few users, but should scale much better.</p>\n      </li>\n    </ul>\n\n    <p>There are a couple of reasons for this.  First, keep in mind that you’re\nnot in charge.  Overly aggressive tech-leads are unpleasant to work with.</p>\n\n    <p>Second, you’re supposed to teach your understanding of the system onto\nyour coworkers, and help them progress professionally.</p>\n  </li>\n  <li>\n    <p><strong>Advocate for teammates:</strong> tech leads are unique in that they</p>\n\n    <ol>\n      <li>have respect and clout in the company</li>\n      <li>have a lot of direct experience with individual engineers</li>\n      <li>aren’t technically responsible for anyone</li>\n    </ol>\n\n    <p>As a result they are often the best source of information about who is\ndoing well.  While you don’t have direct budget authority to give raises or\npromotions, you do have <em>soft power</em> and can advocate for great teammates.</p>\n\n    <p>Conversely, you also know when someone isn’t working out in the team,\nand can work to address problems quickly before they become serious issues.</p>\n\n    <p>A tech lead is like a cool aunt/uncle.  People say things to them that they\nwouldn’t say to siblings or parents, and they’re disconnected enough to\neasily give insightful feedback.</p>\n  </li>\n  <li>\n    <p><strong>Communicate directly to stakeholders:</strong> a good tech lead\ncan talk directly to other parts of the company (product, sales, marketing).\nThey’re also often called in to deal with important clients.</p>\n\n    <p>Because of this, tech leads need to be able to turn on a certain level of\nprofessionalism, and also understand the non-technical needs of others.\nThey need to understand why the work that they do is important to people.</p>\n  </li>\n  <li>\n    <p><strong>Listen, and avoid ego:</strong> because of this, tech leads need to listen,\nand have very little ego when it comes to technical work\n(I personally need to work on this).</p>\n\n    <p>Rockstar developers tend to make poor tech-leads (but awesome senior engineers).</p>\n\n    <p>Instead the best tech leads I know are able to tell you what course of\naction they think is best one minute, and then have their mind changed\nentirely the next minute.  This is often developed with age, or with\nexperience working on technical projects where they are wrong (which\nhappens often if you pay attention).</p>\n  </li>\n  <li>\n    <p><strong>Respect senior engineers:</strong> Tech leads often work alongside other senior\nengineers who may have more experience as developers, but don’t care to\ndirect the work of others.  It’s important to remember that these people\nare often smarter than you, and seek their technical opinion.</p>\n  </li>\n  <li>\n    <p><strong>Respect junior engineers:</strong> Tech leads often dispense critical feedback\nabout code to junior engineers.  This puts them at risk of appearing to be\njerks.  Good tech leads study human management skills, and how to deliver\nfeedback in particular.</p>\n  </li>\n</ul>\n\n<h2 id=\"oss-maintainers-make-good-tech-leads\">OSS Maintainers make good Tech Leads</h2>\n\n<p>The role of having a lot of technical context, trying to direct many others\nalong a shared technical vision, but not actually having authority over anyone\nis a role familiar to many OSS maintainers.  There is excellent cross-over\nbetween these two positions.</p>"
}