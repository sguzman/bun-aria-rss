{
  "title": "R Objects",
  "link": "https://itsalocke.com/blog/r-objects/",
  "pubDate": "Fri, 24 Aug 2018 00:00:00 +0000",
  "guid": "https://itsalocke.com/blog/r-objects/",
  "description": "<h1 id=\"r-objects\">R objects</h1>\n\n<p>To quickly recap, so far we&rsquo;ve just worked with some single values to get to grips with how some of the various operations work. Of course, we rarely work with a single value! If we did, we could just use a calculator.</p>\n\n<p>This instalment you&rsquo;ll get to grips with some different ways of storing data and how to manipulate your datasets in the &ldquo;traditional&rdquo; way. This will help you understand a lot of code written in the past, and will equip you to understand data manipulation of tabular data.</p>\n\n<p>Get a cuppa and settle in to this sessions video, then have a play with the code yourself and read along with the blog! As always, get in touch with any questions on twitter using @LockeData!</p>\n\n\n<div style=\"position: relative; padding-bottom: 56.25%; padding-top: 30px; height: 0; overflow: hidden;\">\n  <iframe src=\"//www.youtube.com/embed/vqSJYXoiJZ4s\" style=\"position: absolute; top: 0; left: 0; width: 100%; height: 100%;\" allowfullscreen frameborder=\"0\" title=\"YouTube Video\"></iframe>\n </div>\n\n\n<h2 id=\"storing-values\">Storing values</h2>\n\n<p>When we were performing operations, we got some values output to the console. One of the key principles in writing code is Don&rsquo;t Repeat Yourself (DRY) so we need to know how we can avoid repeating ourselves in R. One of the ways you can do that is to store a value for use later.</p>\n\n<p>In R, we can store values by <strong>assigning</strong> them a name. This makes a <strong>variable</strong> or <strong>object</strong>. We can do this with a few different operators, but the traditional operator is a <code>&lt;-</code>[1]. The format for assigning a value is <code>nameofthing &lt;- value</code>.</p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-r\" data-lang=\"r\">my_variable <span style=\"color:#f92672\">&lt;-</span> <span style=\"color:#ae81ff\">5</span> <span style=\"color:#f92672\">+</span> <span style=\"color:#ae81ff\">3</span>\nmy_variable<span style=\"color:#f92672\">*</span><span style=\"color:#ae81ff\">2</span></code></pre></div>\n<pre><code>## [1] 16\n</code></pre>\n\n<p>Valid names for a variable include upper-case letters, lower case letters, numbers anywhere but the beginning, periods (<code>.</code>), and hyphens (<code>_</code>).</p>\n\n<p>There are a number of different competing conventions for how you name variables. The most common conventions are shown below. I have no strong feelings for any system and only ask that you pick one and stick with it within a single script. Whatever you do, don&rsquo;t forget names are case sensitive!</p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-r\" data-lang=\"r\">myfirstvariable <span style=\"color:#f92672\">&lt;-</span> <span style=\"color:#ae81ff\">1</span>\nmyFirstVariable <span style=\"color:#f92672\">&lt;-</span> <span style=\"color:#ae81ff\">1</span>\nMyFirstVariable <span style=\"color:#f92672\">&lt;-</span> <span style=\"color:#ae81ff\">1</span>\nmy_first_variable <span style=\"color:#f92672\">&lt;-</span> <span style=\"color:#ae81ff\">1</span>\nmy.first.variable <span style=\"color:#f92672\">&lt;-</span> <span style=\"color:#ae81ff\">1</span></code></pre></div>\n<p>You can create names breaking the rules governing valid names by placing the rule breaking name between two back-ticks (`). I don&rsquo;t recommend you do this with variables you&rsquo;ll create, but you&rsquo;ll often end up with names that break conventions when importing data, especially when you import from spreadsheets.</p>\n\n<h2 id=\"vectors\">Vectors</h2>\n\n<p>A <strong>vector</strong> is a collection of values that hold the same datatype. It is <strong>one-dimensional</strong> in that none of the <strong>elements</strong> in the collection correspond to other values like they might in a table of values.</p>\n\n<p>A single value is actually a vector of <strong>length</strong> 1.</p>\n\n<p>When I introduced the colon (<code>:</code>) as a means of generating a sequence, we were in fact generating a vector where each element was a number in the sequence. The vector has a length which is as long as the number of values generated by the sequence.</p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-r\" data-lang=\"r\"><span style=\"color:#ae81ff\">-1</span><span style=\"color:#f92672\">:</span><span style=\"color:#ae81ff\">1</span></code></pre></div>\n<pre><code>## [1] -1  0  1\n</code></pre>\n\n<p>Another way of producing a vector is to use the combine function (<code>c()</code>). This is great for combining a number of disparate character strings into a vector.</p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-r\" data-lang=\"r\"><span style=\"color:#66d9ef\">c</span>(<span style=\"color:#e6db74\">&#34;red&#34;</span>,<span style=\"color:#e6db74\">&#34;yellow&#34;</span>,<span style=\"color:#e6db74\">&#34;blue&#34;</span>)</code></pre></div>\n<pre><code>## [1] &quot;red&quot;    &quot;yellow&quot; &quot;blue&quot;\n</code></pre>\n\n<p>A single value is a still a vector. What we see when we use the <code>c()</code> function is that we&rsquo;re combining vectors. As a result we can also use it on longer vectors too.</p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-r\" data-lang=\"r\"><span style=\"color:#66d9ef\">c</span>(<span style=\"color:#ae81ff\">1</span><span style=\"color:#f92672\">:</span><span style=\"color:#ae81ff\">3</span>, <span style=\"color:#ae81ff\">2</span><span style=\"color:#f92672\">:</span><span style=\"color:#ae81ff\">1</span>, <span style=\"color:#ae81ff\">5</span><span style=\"color:#f92672\">:</span><span style=\"color:#ae81ff\">8</span>)</code></pre></div>\n<pre><code>## [1] 1 2 3 2 1 5 6 7 8\n</code></pre>\n\n<p>When we combine values into a single vector, R will change everything to the same datatype using some conversions.</p>\n\n<h2 id=\"getting-information-about-vectors\">Getting information about vectors</h2>\n\n<p>Our <code>class()</code> function will still work with a vector with a length greater than 1 to get you it&rsquo;s datatype.</p>\n\n<p>Let&rsquo;s look at a sequence of numbers and one of the built-in vectors that contains the alphabet.</p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-r\" data-lang=\"r\"><span style=\"color:#66d9ef\">class</span>(<span style=\"color:#ae81ff\">1</span><span style=\"color:#f92672\">:</span><span style=\"color:#ae81ff\">10</span>)</code></pre></div>\n<pre><code>## [1] &quot;integer&quot;\n</code></pre>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-r\" data-lang=\"r\"><span style=\"color:#66d9ef\">LETTERS</span></code></pre></div>\n<pre><code>##  [1] &quot;A&quot; &quot;B&quot; &quot;C&quot; &quot;D&quot; &quot;E&quot; &quot;F&quot; &quot;G&quot; &quot;H&quot; &quot;I&quot; &quot;J&quot; &quot;K&quot; &quot;L&quot; &quot;M&quot; &quot;N&quot; &quot;O&quot; &quot;P&quot; &quot;Q&quot;\n## [18] &quot;R&quot; &quot;S&quot; &quot;T&quot; &quot;U&quot; &quot;V&quot; &quot;W&quot; &quot;X&quot; &quot;Y&quot; &quot;Z&quot;\n</code></pre>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-r\" data-lang=\"r\"><span style=\"color:#66d9ef\">class</span>(<span style=\"color:#66d9ef\">LETTERS</span>)</code></pre></div>\n<pre><code>## [1] &quot;character&quot;\n</code></pre>\n\n<p>We can use the <code>length()</code> function to find out the number of elements in a vector.</p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-r\" data-lang=\"r\"><span style=\"color:#66d9ef\">length</span>(<span style=\"color:#66d9ef\">pi</span>)</code></pre></div>\n<pre><code>## [1] 1\n</code></pre>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-r\" data-lang=\"r\"><span style=\"color:#66d9ef\">length</span>(<span style=\"color:#66d9ef\">LETTERS</span>)</code></pre></div>\n<pre><code>## [1] 26\n</code></pre>\n\n<p>To extract the names of values in a vector, we can use the <code>names()</code> function.</p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-r\" data-lang=\"r\">steph<span style=\"color:#f92672\">&lt;-</span><span style=\"color:#66d9ef\">c</span>(Steph<span style=\"color:#f92672\">=</span><span style=\"color:#e6db74\">&#34;forename&#34;</span>, Locke<span style=\"color:#f92672\">=</span><span style=\"color:#e6db74\">&#34;surname&#34;</span>)\n<span style=\"color:#66d9ef\">names</span>(steph)</code></pre></div>\n<pre><code>## [1] &quot;Steph&quot; &quot;Locke&quot;\n</code></pre>\n\n<h2 id=\"calculations-on-multiple-vectors\">Calculations on multiple vectors</h2>\n\n<p>When we perform calculations on two vectors, R will try to perform the operation for each set of elements. This is an <strong>element-wise</strong> or <strong>pair-wise</strong> calculation methodology.</p>\n\n<p>In SQL, it&rsquo;s equivalent to where you might write <code>colA*colB</code> and you&rsquo;ll get the answer calculated for every row in the table. In Excel, it&rsquo;s equivalent to a Fill Down of multiplying two values on the same row.</p>\n\n<p>Let&rsquo;s looks at how this works in practice in R.</p>\n\n<p>We have two vectors, each containing two elements.</p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-r\" data-lang=\"r\">vecA <span style=\"color:#f92672\">&lt;-</span> <span style=\"color:#ae81ff\">1</span><span style=\"color:#f92672\">:</span><span style=\"color:#ae81ff\">2</span>\nvecB <span style=\"color:#f92672\">&lt;-</span> <span style=\"color:#ae81ff\">2</span><span style=\"color:#f92672\">:</span><span style=\"color:#ae81ff\">3</span></code></pre></div>\n<pre><code>## [1] 1 2\n\n## [1] 2 3\n</code></pre>\n\n<p>If we want to multiply the two vectors by each other, R will match each element in the first vector with it&rsquo;s counterpart in the second and multiply the two values together to make a new element.</p>\n\n<p>You can also use this functionality of making a vector the same length as another, known as <strong>recycling</strong>, work for other mis-matched vector sizes. The only rule is that one of the vector lengths must divide cleanly by the other.</p>\n\n<ul>\n<li>Two vectors of the same length divide by the other&rsquo;s length exactly one time and won&rsquo;t need to recycle</li>\n<li>A vector of length one always cleanly divides any other vector&rsquo;s length and so will be recycled</li>\n<li>A vector of length 2, will divide any vector with an even length and so will be recycled in those cases, but it cannot recycle cleanly for odd length vectors</li>\n</ul>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-r\" data-lang=\"r\"><span style=\"color:#ae81ff\">1</span><span style=\"color:#f92672\">:</span><span style=\"color:#ae81ff\">10</span> <span style=\"color:#f92672\">*</span> <span style=\"color:#ae81ff\">2</span>\n<span style=\"color:#ae81ff\">1</span><span style=\"color:#f92672\">:</span><span style=\"color:#ae81ff\">10</span> <span style=\"color:#f92672\">*</span> <span style=\"color:#ae81ff\">2</span><span style=\"color:#f92672\">:</span><span style=\"color:#ae81ff\">3</span>\n<span style=\"color:#ae81ff\">1</span><span style=\"color:#f92672\">:</span><span style=\"color:#ae81ff\">10</span> <span style=\"color:#f92672\">*</span> <span style=\"color:#ae81ff\">2</span><span style=\"color:#f92672\">:</span><span style=\"color:#ae81ff\">4</span></code></pre></div>\n<pre><code>##  [1]  2  4  6  8 10 12 14 16 18 20\n\n##  [1]  2  6  6 12 10 18 14 24 18 30\n\n## [1] &quot;longer object length is not a multiple of shorter object length&quot;\n</code></pre>\n\n<p>Vector recycling is useful and dangerous &ndash; it can help you make elegant code or give you unexpected results. Especially when starting out, I recommend you make your vectors either the same length or length 1.</p>\n\n<p><em>Proceed with caution</em></p>\n\n<h3 id=\"bitwise\">Bitwise</h3>\n\n<p>Our logical operators that we covered earlier, work in a pairwise fashion. They&rsquo;ll return a vector of the same length as the longest one used in your logical statement.</p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-r\" data-lang=\"r\">a<span style=\"color:#f92672\">&lt;-</span><span style=\"color:#ae81ff\">1</span><span style=\"color:#f92672\">:</span><span style=\"color:#ae81ff\">2</span><span style=\"color:#f92672\">&gt;</span><span style=\"color:#ae81ff\">1</span>\nb<span style=\"color:#f92672\">&lt;-</span><span style=\"color:#ae81ff\">2</span><span style=\"color:#f92672\">:</span><span style=\"color:#ae81ff\">3</span><span style=\"color:#f92672\">&gt;</span><span style=\"color:#ae81ff\">1</span></code></pre></div>\n<pre><code>## [1] FALSE  TRUE\n\n## [1] TRUE TRUE\n</code></pre>\n\n<p>Making logical statements returns vectors with a logical datatype.</p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-r\" data-lang=\"r\">a<span style=\"color:#f92672\">&amp;</span>b</code></pre></div>\n<pre><code>## [1] FALSE  TRUE\n</code></pre>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-r\" data-lang=\"r\">a<span style=\"color:#f92672\">|</span>b</code></pre></div>\n<pre><code>## [1] TRUE TRUE\n</code></pre>\n\n<p>Occasionally, you expect to only be operating on a single pair of values and want to enforce that R should only do the calculation on the first pair. In R, this called a <strong>bitwise</strong> AND (<code>&amp;&amp;</code>) or OR (<code>||</code>).</p>\n\n<p>A bitwise logical statement will only do the check for the first elements in the vectors and ignore all the others.</p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-r\" data-lang=\"r\">a<span style=\"color:#f92672\">&amp;&amp;</span>b</code></pre></div>\n<pre><code>## [1] FALSE\n</code></pre>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-r\" data-lang=\"r\">a<span style=\"color:#f92672\">||</span>b</code></pre></div>\n<pre><code>## [1] TRUE\n</code></pre>\n\n<p>Use bitwise operators with extreme care!</p>\n\n<p>And there we have it - It&rsquo;s fair to say that you&rsquo;ve pretty much covered the basics of data handling in R now, so next time we&rsquo;ll have a look at some packages and functions - these are the bits where somebody else has done the hard work for you!</p>\n\n<p>Happy coding!</p>\n\n<p>Ellen :)</p>\n\n<p>As always, here&rsquo;s the video code to take away and play.</p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-r\" data-lang=\"r\">my_first_var <span style=\"color:#f92672\">&lt;-</span> <span style=\"color:#ae81ff\">5+3</span>\n\nmy_first_var <span style=\"color:#f92672\">*</span> <span style=\"color:#ae81ff\">2</span> </code></pre></div><div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-r\" data-lang=\"r\">my.other.variable <span style=\"color:#f92672\">=</span> <span style=\"color:#ae81ff\">7</span><span style=\"color:#f92672\">*</span><span style=\"color:#ae81ff\">4</span>\n\n<span style=\"color:#ae81ff\">9-5</span> <span style=\"color:#f92672\">-&gt;</span> YetAnotherVariable</code></pre></div><div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-r\" data-lang=\"r\"><span style=\"color:#66d9ef\">rm</span>(my_first_var)</code></pre></div><div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-r\" data-lang=\"r\">dont.delete.me <span style=\"color:#f92672\">&lt;-</span> <span style=\"color:#e6db74\">&#34;please don&#39;t!&#34;</span></code></pre></div>"
}