{
  "title": "Functions and Packages",
  "link": "https://itsalocke.com/blog/functions-and-packages/",
  "pubDate": "Sat, 29 Sep 2018 00:00:00 +0000",
  "guid": "https://itsalocke.com/blog/functions-and-packages/",
  "description": "<p>We’re done with the basics of handling data in R. Now we want to know\nhow to make sense of it. We know what kind of data it is, we know how to\nlook at column names, dimensions and the like. If you’re trying to add\nvalue to this data however, that very often isn’t enough, so here’s a\nlook at using the tools available to you to start figuring out how to do\nwhat you want.</p>\n\n\n<div style=\"position: relative; padding-bottom: 56.25%; padding-top: 30px; height: 0; overflow: hidden;\">\n  <iframe src=\"//www.youtube.com/embed/Kq93ADb9Ii0\" style=\"position: absolute; top: 0; left: 0; width: 100%; height: 100%;\" allowfullscreen frameborder=\"0\" title=\"YouTube Video\"></iframe>\n </div>\n\n\n<h1 id=\"r-packages\">R packages</h1>\n\n<p>An R package is a bundle of functions and/or datasets. It extends the\ncapabilities that the “base” and “recommended” R packages have. By using\npackages we can do data manipulation in a variety of ways, produce all\nsorts of awesome charts, generate books like this, use other languages\nlike Python and JavaScript, and of course, do all sorts of data\nanalysis.</p>\n\n<h2 id=\"installing-packages\">Installing packages</h2>\n\n<p>Once you’ve identified a package that contains functions or data you’re\ninterested in using, we need to get the package onto our machine.</p>\n\n<p>To get the package, you can use an R function or you can use the Install\nbutton on the Packages tab.</p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-r\" data-lang=\"r\">install.packages(<span style=\"color:#e6db74\">&#34;datasauRus&#34;</span>)</code></pre></div>\n<p>If you need to install a number of packages, <code>install.packages()</code> takes\na vector of package names.</p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-r\" data-lang=\"r\">install.packages(<span style=\"color:#66d9ef\">c</span>(<span style=\"color:#e6db74\">&#34;datasauRus&#34;</span>,<span style=\"color:#e6db74\">&#34;tidyverse&#34;</span>))</code></pre></div>\n<p>Updating packages involves re-running <code>install.packages()</code> and it’s\nusually easier to trigger this by using the Update button on the\nPackages tab and selecting all the packages you want to update.</p>\n\n<h3 id=\"installing-from-github-and-other-sources\">Installing from GitHub and other sources</h3>\n\n<p>The <code>install.packages()</code> function works with CRAN, CRAN mirrors, and\nCRAN-like repositories</p>\n\n<p>If you want to install BioConductor packages, there are some helper\nscripts available from the BioConductor website,\n<a href=\"http://www.bioconductor.org/install/\">bioconductor.org</a>.</p>\n\n<p>Other package sources, such as GitHub, will involve building packages\nbefore they can be installed. If you’re on Windows, this means you need\nan additional piece of software called\n<a href=\"http://cran.r-project.org/bin/windows/Rtools/\">Rtools</a>. The other handy\nthing you’ll need is the package <code>devtools</code> (available from CRAN).\n<code>devtools</code> provides a number of functions designed to make it easier to\ninstall from GitHub, BitBucket, and other sources.</p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-r\" data-lang=\"r\"><span style=\"color:#f92672\">library</span>(devtools)\ninstall_github(<span style=\"color:#e6db74\">&#34;lockedata/pRojects&#34;</span>)</code></pre></div>\n<h2 id=\"recommended-packages\">Recommended packages</h2>\n\n<p>Here are my recommended packages – look out for books and blogposts on\nthese in the future!</p>\n\n<h3 id=\"tidyverse\">tidyverse</h3>\n\n<p>The <code>tidyverse</code> is a suite of packages designed to make your life\neasier. It’s well worth installing and many of the packages in this\nrecommendations section are part of the <code>tidyverse</code>.</p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-r\" data-lang=\"r\">install.packages(<span style=\"color:#e6db74\">&#34;tidyverse&#34;</span>)</code></pre></div>\n<h3 id=\"getting-data-in-and-out-of-r\">Getting data in and out of R</h3>\n\n<p>The following packages can be used to get data into, and out of R:</p>\n\n<ul>\n<li>Working with databases, you can use the <code>DBI</code> package and it’s\ncompanion <code>odbc</code> to connect to most databases</li>\n<li>To get data from web pages, you can use <code>rvest</code></li>\n<li>To work with APIs, you use <code>httr</code></li>\n<li>To work with CSVs, you can use <code>readr</code> or <code>data.table</code>.[6]</li>\n<li>To work with SPSS, SAS, and Stata files, use <code>readr</code> and <code>haven</code></li>\n</ul>\n\n<h3 id=\"data-manipulation\">Data manipulation</h3>\n\n<p>The <code>tidyverse</code> contains great packages for data manipulation including\n<code>dplyr</code> and <code>purrr</code>.</p>\n\n<p>Additionally, a favourite data manipulation package of mine is\n<code>data.table</code>. <code>data.table</code> tends to have a bit of a steeper learning\ncurve than the <code>tidyverse</code> but it’s phenomenal for brevity and\nperformance.</p>\n\n<h3 id=\"data-visualisation\">Data visualisation</h3>\n\n<ul>\n<li>For static graphics <code>ggplot2</code> is fantastic - it adds a sensible\nvocabulary to help you construct charts with ease</li>\n<li><code>plotly</code> helps you build interactive charts from scratch or make\n<code>ggplot2</code> charts interactive</li>\n<li><code>leaflet</code> is a great maps package</li>\n<li><code>ggraph</code> helps you build effective network diagrams</li>\n</ul>\n\n<h3 id=\"data-science\">Data science</h3>\n\n<ul>\n<li><code>caret</code> is an interface package to many model algorithms and has a\nraft of insanely useful features itself</li>\n<li><code>broom</code> takes outputs from model functions and makes them into nice\ndata.frames</li>\n<li><code>modelr</code> helps build samples and supplement result sets</li>\n<li><code>reticulate</code> is a package for talking to Python and, therefore,\nenables you to work with any deep learning framework that is based\nin Python. <code>tensorflow</code> is a package based on <code>reticulate</code> and\nallows you to work with tensorflow in R</li>\n<li><code>sparklyr</code> allows you to run and work with Spark processes on your R\ndata</li>\n<li><code>h2o</code> is a package for working with H2O, a super nifty machine\nlearning platform</li>\n</ul>\n\n<h3 id=\"presenting-results\">Presenting results</h3>\n\n<ul>\n<li><code>rmarkdown</code> is the core package for combining text and code and\nbeing able to produce outputs like HTML pages, PDFs, and Word\ndocuments</li>\n<li><code>bookdown</code> facilitates books like this</li>\n<li><code>revealjs</code> allows you to make slide decks using <code>rmarkdown</code></li>\n<li><code>flexdashboard</code> and <code>shiny</code> allow you to make interactive, reactive\ndashboards and other analytical apps</li>\n</ul>\n\n<h3 id=\"finding-packages\">Finding packages</h3>\n\n<p>As well as using online search facilities like\n<a href=\"http://cran.r-project.org/search.html\">CRAN</a> and\n<a href=\"http://rdrr.io\">rdrr.io</a> for packages, there are some handy packages\nthat help you find other packages!</p>\n\n<ul>\n<li><code>ctv</code> allows you to get all the packages in a given <a href=\"http://cran.r-project.org/web/views/\">CRAN task\nview</a>, which are maintained\nlists of package for various tasks</li>\n<li><code>sos</code> allows you to search for packages and functions that match a\nkeyword</li>\n</ul>\n\n<h2 id=\"loading-packages\">Loading packages</h2>\n\n<p>To make functions and data from a package available to use, we need to\nrun the <code>library()</code> function.</p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-r\" data-lang=\"r\"><span style=\"color:#f92672\">library</span>(<span style=\"color:#e6db74\">&#34;utils&#34;</span>)</code></pre></div>\n<p>The <code>library()</code> function accepts a vector of length 1, so you need to\nperform multiple calls to the function to load up multiple packages.</p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-r\" data-lang=\"r\"><span style=\"color:#f92672\">library</span>(<span style=\"color:#e6db74\">&#34;utils&#34;</span>)\n<span style=\"color:#f92672\">library</span>(<span style=\"color:#e6db74\">&#34;stats&#34;</span>)</code></pre></div>\n<p>Once a package is loaded, you can then use any of it’s functions.</p>\n\n<p>You can find what functions are available in a package by looking at\nit’s help page.</p>\n\n<p>Alternatively, you can type the package’s name and hit Tab. This\nauto-completes the package’s name, adds two colons (<code>::</code>) and then shows\nthe list of available functions for that package. The double colon trick\nis very helpful for when you want to browse package functionality, e.g.\n<code>utils::find()</code>.</p>\n\n<p>Any function in R can be prefixed with it’s package name and the double\ncolon (<code>::</code>) - this is great for telling people where\nfunctions are coming from and for tracking dependencies in long scripts.\nIt is also really useful when you have two packages loaded that might\nhave a function of the same name. This is because the order the packages\nare loaded in dictates which one gets overridden.</p>\n\n<h2 id=\"learning-how-to-use-a-package\">Learning how to use a package</h2>\n\n<p>R documentation is some of the best out there.</p>\n\n<p>Yes, I will complain about the impenetrable statistical jargon some\npackage authors use, but the CRAN gatekeepers require that packages\ngenerally have a really high standard of documentation.</p>\n\n<p>Every function you use will have a help page associated with it. This\npage usually contains a description, shows what parameters the function\nhas, what those parameters are, and most importantly, there’s usually\nexamples.</p>\n\n<p>To navigate to the help page of an individual function in an R package\nyou:</p>\n\n<ul>\n<li>Hit F1 on a function name in a script</li>\n<li>Type <code>??fnName</code> and send to the console</li>\n</ul>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-r\" data-lang=\"r\"><span style=\"color:#f92672\">??</span><span style=\"color:#66d9ef\">mean</span></code></pre></div>\n<ul>\n<li>Search in the Help tab</li>\n<li>Use the <code>help()</code> function to open up the packages index page and\nnavigate to the relevant function</li>\n</ul>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-r\" data-lang=\"r\">help(package<span style=\"color:#f92672\">=</span><span style=\"color:#e6db74\">&#34;utils&#34;</span>)</code></pre></div>\n<ul>\n<li>Find the relevant package in the Packages tab and click on it.\nScroll through the index that opens up on the Help page to find the\nright function</li>\n</ul>\n\n<p>As well as the function level documentation, good packages also provide\na higher level of documentation that covers workflows using the\npackages, how to extend package functionality, or outlines any\nmethodologies or research that led to the package.</p>\n\n<p>These pieces of documentation are called <strong>vignettes</strong>. They are\naccessible on the package’s index page or you can use the function\n<code>vignette()</code> to read them.</p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-r\" data-lang=\"r\">vignette(<span style=\"color:#e6db74\">&#34;multi&#34;</span>)</code></pre></div>\n<h1 id=\"using-functions-in-packages\">Using functions in packages</h1>\n\n<p>In previous sections we’ve seen R <strong>functions</strong> that are used on objects\nto perform some activity. Functions seen so far include:</p>\n\n<ul>\n<li><code>class()</code> and <code>is.*()</code> functions for checking datatypes</li>\n<li><code>as.*</code> for converting to datatypes</li>\n<li><code>length()</code> and <code>names()</code> for metadata</li>\n<li><code>head()</code> and <code>tail()</code> for getting a small amount of elements from an\nobject</li>\n<li><code>ncol()</code>, <code>nrow()</code>, <code>colnames()</code>, and <code>rownames()</code> for getting\ndata.frame metadata</li>\n<li><code>Sys.Date()</code> and <code>Sys.time()</code> for getting current date-time values</li>\n</ul>\n\n<p>There are a huge range of functions out there, whether available in R\nstraight away, or from adding extra functionality.</p>\n\n<p>Understanding how functions work and being able to use them correctly\nwill help you learn, and use R effectively.</p>\n\n<h2 id=\"using-a-function\">Using a function</h2>\n\n<p>A function does some computation on an object. The use of a function\nconsists of:</p>\n\n<ol>\n<li>A function’s name</li>\n<li>Parentheses</li>\n<li>0 or more inputs</li>\n</ol>\n\n<p>Each input is provided to an <strong>argument</strong> or parameter within a\nfunction.</p>\n\n<p>These arguments have names, although you don’t often need to provide the\nnames.</p>\n\n<p>You can find out what arguments a function takes by using the code\ncompletion and it’s help snippet, or by searching for the function in\nthe Rstudio Help tab.</p>\n\n<p>When you’re inside the brackets of a function you can get the list of\navailable arguments and auto-complete them.</p>\n\n<h2 id=\"examining-functions\">Examining functions</h2>\n\n<p>One of the niftiest things about R is being able to see the code for a\nfunction. You can examine how many functions work by just typing their\nname without any parentheses.</p>\n\n<p>You can find out what arguments a function takes by using the code\ncompletion and it’s help snippet, or by searching for the function in\nthe Rstudio Help tab.</p>\n\n<p>When you’re inside the brackets of a function you can get the list of\navailable arguments and auto-complete them.</p>\n\n<h2 id=\"examining-functions-1\">Examining functions</h2>\n\n<p>One of the niftiest things about R is being able to see the code for a\nfunction. You can examine how many functions work by just typing their\nname without any parentheses.</p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-r\" data-lang=\"r\"><span style=\"color:#66d9ef\">Sys.Date</span></code></pre></div>\n<pre><code>## function () \n## as.Date(as.POSIXlt(Sys.time()))\n## &lt;bytecode: 0x10df91748&gt;\n## &lt;environment: namespace:base&gt;\n</code></pre>\n\n<p>The first line(s) show how the arguments are specified. Subsequent lines\nshow the code and the final lines starting with <code>&lt;</code> can be mostly\nignored.</p>\n\n<h2 id=\"function-input-patterns\">Function input patterns</h2>\n\n<p>Functions tend to conform to certain patterns of inputs.</p>\n\n<h3 id=\"no-inputs\">No inputs</h3>\n\n<p>Some functions don’t require the user to provide info and so they don’t\nhave any arguments. <code>Sys.Date()</code> and similar functions do not need user\ninput because the functions provide information about the system.</p>\n\n<p>Looking at the function definition above, we can see that there are no\narguments specified in the first line.</p>\n\n<h3 id=\"single-inputs\">Single inputs</h3>\n\n<p>Other functions only have a single allowed input. <code>length()</code> returns the\nlength of an object so it only allows you to provide it with an object.</p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-r\" data-lang=\"r\"><span style=\"color:#66d9ef\">length</span></code></pre></div>\n<pre><code>## function (x)  .Primitive(&quot;length&quot;)\n</code></pre>\n\n<p>We can see in this definition that the function takes the argument <code>x</code>.</p>\n\n<h3 id=\"many-inputs\">Many inputs</h3>\n\n<p>Some functions have multiple inputs, although not all of them are\nnecessarily <strong>mandatory</strong>. <code>head()</code> and <code>tail()</code> have been used so far\nwith only a single input but they take an optional argument as to how\nmany elements should be returned.</p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-r\" data-lang=\"r\"><span style=\"color:#66d9ef\">head</span>(<span style=\"color:#66d9ef\">letters</span>)</code></pre></div>\n<pre><code>## [1] &quot;a&quot; &quot;b&quot; &quot;c&quot; &quot;d&quot; &quot;e&quot; &quot;f&quot;\n</code></pre>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-r\" data-lang=\"r\"><span style=\"color:#66d9ef\">head</span>(<span style=\"color:#66d9ef\">letters</span>, <span style=\"color:#ae81ff\">2</span>)</code></pre></div>\n<pre><code>## [1] &quot;a&quot; &quot;b&quot;\n</code></pre>\n\n<p>The <code>rnorm()</code> function allows us to generate a vector of values from a\nnormal distribution. We can tell it how many values we need (<code>n</code>), and\nwe can optionally provide the mean (<code>mean</code>) and standard deviation\n(<code>sd</code>) to describe the Normal curve that values should be selected from.</p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-r\" data-lang=\"r\">rnorm</code></pre></div>\n<pre><code>## function (n, mean = 0, sd = 1) \n## .Call(C_rnorm, n, mean, sd)\n## &lt;bytecode: 0x10ded12a8&gt;\n## &lt;environment: namespace:stats&gt;\n</code></pre>\n\n<p>Looking at how <code>rnorm</code> is specified we can see that we’re expected to\nprovide <code>n</code>, but <code>mean</code> and <code>sd</code> are given values of 0 and 1\nrespectively by default.</p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-r\" data-lang=\"r\">rnorm(n<span style=\"color:#f92672\">=</span><span style=\"color:#ae81ff\">5</span>)</code></pre></div>\n<pre><code>## [1] -1.4818734 -1.0309718  1.4056332  0.4328255 -0.6992250\n</code></pre>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-r\" data-lang=\"r\">rnorm(n <span style=\"color:#f92672\">=</span> <span style=\"color:#ae81ff\">5</span>, mean <span style=\"color:#f92672\">=</span> <span style=\"color:#ae81ff\">10</span>, sd <span style=\"color:#f92672\">=</span> <span style=\"color:#ae81ff\">2</span>)</code></pre></div>\n<pre><code>## [1]  6.759442  8.453144  8.035506 12.549855 11.781241\n</code></pre>\n\n<h3 id=\"unlimited-inputs\">Unlimited inputs</h3>\n\n<p>Other functions can take an unlimited amount of input values. Functions\nlike <code>sum()</code> will sum the values from a number of objects.</p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-r\" data-lang=\"r\"><span style=\"color:#66d9ef\">sum</span></code></pre></div>\n<pre><code>## function (..., na.rm = FALSE)  .Primitive(&quot;sum&quot;)\n</code></pre>\n\n<p>The ellipsis (<code>...</code>) is used to denote when the user can provide any\nnumber of values.</p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-r\" data-lang=\"r\"><span style=\"color:#66d9ef\">sum</span>(<span style=\"color:#ae81ff\">1</span><span style=\"color:#f92672\">:</span><span style=\"color:#ae81ff\">3</span>, <span style=\"color:#ae81ff\">1</span><span style=\"color:#f92672\">:</span><span style=\"color:#ae81ff\">9</span>, <span style=\"color:#66d9ef\">pi</span>)</code></pre></div>\n<pre><code>## [1] 54.14159\n</code></pre>\n\n<h2 id=\"naming-arguments\">Naming arguments</h2>\n\n<p>Every input provided to a function is associated with an argument.</p>\n\n<p>Each argument must have a name. Even functions that allow unlimited\ninputs assign these inputs to a name. Behind the scenes, they get put\ninto a list object and the list gets called <code>...</code> (or ellipsis).</p>\n\n<p>There are some typical names for arguments that take your data object.\nThese include:</p>\n\n<ul>\n<li><code>x</code></li>\n<li><code>data</code></li>\n<li><code>.data</code></li>\n<li><code>df</code></li>\n</ul>\n\n<p>You don’t usually have to provide the argument names, just put things in\nthe relevant places in the function. Sometimes though, you <em>will</em> need\nto use argument names.</p>\n\n<p>Here are my rules of thumb for knowing when you need to name names:</p>\n\n<ol>\n<li>You’re using the arguments in an order that is different from the\nfunction author’s intended order (you might be skipping some\narguments as the default values are fine or you might just prefer a\ndifferent order)</li>\n<li>The arguments you want to specify show up after the <code>...</code> in a\nfunction’s argument list</li>\n<li>You want to give a specific name to a value in a <code>...</code> argument</li>\n</ol>\n\n<p>We can provide names for clarity or so we can use arguments out of order\nif we prefer to.</p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-r\" data-lang=\"r\">rnorm(n <span style=\"color:#f92672\">=</span> <span style=\"color:#ae81ff\">5</span>, mean <span style=\"color:#f92672\">=</span> <span style=\"color:#ae81ff\">10</span>, sd <span style=\"color:#f92672\">=</span> <span style=\"color:#ae81ff\">2</span>)</code></pre></div>\n<pre><code>## [1] 10.775754 10.104590  7.055771 14.544010  9.135413\n</code></pre>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-r\" data-lang=\"r\">rnorm(mean <span style=\"color:#f92672\">=</span> <span style=\"color:#ae81ff\">10</span>, sd <span style=\"color:#f92672\">=</span> <span style=\"color:#ae81ff\">2</span>, n <span style=\"color:#f92672\">=</span> <span style=\"color:#ae81ff\">5</span>)</code></pre></div>\n<pre><code>## [1]  9.625624  8.345576  8.794756  8.914196 10.417960\n</code></pre>\n\n<p>A common behaviour change that you’ll need to work with is how missing\n(<code>NA</code>) values get handled. Functions that allow you change this\nbehaviour, usually have an argument called things like <code>na.rm</code>,\n<code>na.omit</code>, and <code>na.action</code>.</p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-r\" data-lang=\"r\"><span style=\"color:#66d9ef\">sum</span>(<span style=\"color:#ae81ff\">1</span><span style=\"color:#f92672\">:</span><span style=\"color:#ae81ff\">5</span>, <span style=\"color:#66d9ef\">NA</span>)</code></pre></div>\n<pre><code>## [1] NA\n</code></pre>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-r\" data-lang=\"r\"><span style=\"color:#66d9ef\">sum</span>(<span style=\"color:#ae81ff\">1</span><span style=\"color:#f92672\">:</span><span style=\"color:#ae81ff\">5</span>, <span style=\"color:#66d9ef\">NA</span>, na.rm <span style=\"color:#f92672\">=</span> <span style=\"color:#66d9ef\">TRUE</span>)</code></pre></div>\n<pre><code>## [1] 15\n</code></pre>\n\n<p>In the <code>sum()</code> example, I used the <code>na.rm</code> argument’s name. This is\nbecause otherwise the <code>TRUE</code> would be considered part of the values\nbeing passed for summing. Without the name, the value gets considered as\npart of the <code>...</code>.</p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-r\" data-lang=\"r\"><span style=\"color:#66d9ef\">sum</span>(<span style=\"color:#ae81ff\">1</span><span style=\"color:#f92672\">:</span><span style=\"color:#ae81ff\">5</span>, <span style=\"color:#66d9ef\">NA</span>, <span style=\"color:#66d9ef\">TRUE</span>)</code></pre></div>\n<pre><code>## [1] NA\n</code></pre>\n\n<p>A function will sometimes have <code>...</code> at the end of it’s list of\narguments when it utilises other functions and those have optional /\ndefault values.</p>\n\n<p>For instance the <code>predict()</code> function allows us to take a model we’ve\nbuilt and apply it to some new data.</p>\n\n<p>It works for many different types of model and these different models\nexpect different types of inputs. Some models expect data.frames, others\nexpect time series data, etc.</p>\n\n<p>There’s lots of potential variations, the only thing that is mandatory\nis the model object.</p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-r\" data-lang=\"r\">predict</code></pre></div>\n<pre><code>## function (object, ...) \n## UseMethod(&quot;predict&quot;)\n## &lt;bytecode: 0x103e21638&gt;\n## &lt;environment: namespace:stats&gt;\n</code></pre>\n\n<p>The <code>predict()</code> function then determines what type of model object\nyou’ve provided it and passes the model, and any other values you\nprovided, to the relevant function, returning back the results.</p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-r\" data-lang=\"r\">linearMod<span style=\"color:#f92672\">&lt;-</span>lm(Sepal.Length<span style=\"color:#f92672\">~</span><span style=\"color:#ae81ff\">.</span>, data<span style=\"color:#f92672\">=</span>iris)\n\npredict(linearMod, iris[<span style=\"color:#ae81ff\">1</span>,])</code></pre></div>\n<pre><code>##        1 \n## 5.004788\n</code></pre>\n\n<p>And so very quickly before I summarise all that for you, just a note to\nsay that that’s the very basics of R covered, but look out soon for a\ncouple of posts on making R work for you - R projects (A very good\nhabit) and a Github 101 coming up!</p>\n\n<h2 id=\"summary\">Summary</h2>\n\n<p>R uses functions as the means of performing operations.</p>\n\n<p>Functions can take 0 or more arguments. All arguments may be mandatory,\nbut some can be optional or even undefined.</p>\n\n<p>You can use argument names to provide arguments in different orders to\nthat defined by the function author or to provide them in the case where\nan ellipsis (<code>...</code>) is used in a function.</p>\n\n<p>R packages bundle functionality and/or data.</p>\n\n<p>You can install packages from the central public repository (CRAN) via\n<code>install.packages()</code> or install them from GitHub with the package\n<code>devtools</code>. R packages contain documentation that helps you understand\nhow functions work and how the package overall works.</p>\n\n<p>When you want to make use of functionality from a package you can either\nload all of a package’s functionality by using the <code>library()</code> function\nor refer to a specific function by prefixing the function with the\npackage name and two colons (<code>::</code>) e.g. <code>utils::help(&quot;mean&quot;)</code>.</p>\n\n<p>There are many packages out there for different activities and\ndomain-specific types of analysis. Use online search facilities like\n<a href=\"http://rdrr.io\">rdrr.io</a> or <a href=\"http://cran.r-project.org/web/views/\">CRAN task\nviews</a> to find ones specific to\nyour requirements.</p>\n\n<p>As usual, all the code from this installments video is included below in\none fell swoop.</p>\n\n<h2 id=\"video-code\">Video code</h2>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-r\" data-lang=\"r\">install.packages(<span style=\"color:#e6db74\">&#34;tidyverse&#34;</span>)</code></pre></div><div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-r\" data-lang=\"r\"><span style=\"color:#f92672\">library</span>(<span style=\"color:#e6db74\">&#34;tidyverse&#34;</span>)</code></pre></div><div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-r\" data-lang=\"r\">help(package<span style=\"color:#f92672\">=</span><span style=\"color:#e6db74\">&#34;dplyr&#34;</span>)</code></pre></div>\n<p>and then</p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-r\" data-lang=\"r\"><span style=\"color:#f92672\">?</span>bind_rows</code></pre></div><div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-r\" data-lang=\"r\">one <span style=\"color:#f92672\">&lt;-</span> mtcars[<span style=\"color:#ae81ff\">1</span><span style=\"color:#f92672\">:</span><span style=\"color:#ae81ff\">4</span>, ]\ntwo <span style=\"color:#f92672\">&lt;-</span> mtcars[<span style=\"color:#ae81ff\">11</span><span style=\"color:#f92672\">:</span><span style=\"color:#ae81ff\">14</span>, ]\n\n<span style=\"color:#75715e\"># You can supply data frames as arguments:</span>\nbind_rows(one, two) <span style=\"color:#f92672\">-&gt;</span> THREE</code></pre></div><div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-r\" data-lang=\"r\"><span style=\"color:#66d9ef\">Sys.Date</span></code></pre></div><div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-r\" data-lang=\"r\"><span style=\"color:#66d9ef\">length</span></code></pre></div><div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-r\" data-lang=\"r\"><span style=\"color:#66d9ef\">length</span>(THREE)</code></pre></div><div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-r\" data-lang=\"r\"><span style=\"color:#66d9ef\">head</span></code></pre></div><div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-r\" data-lang=\"r\"><span style=\"color:#66d9ef\">head</span>(THREE, <span style=\"color:#ae81ff\">5</span>)</code></pre></div><div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-r\" data-lang=\"r\">rnorm</code></pre></div><div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-r\" data-lang=\"r\">rnorm(n<span style=\"color:#f92672\">=</span><span style=\"color:#ae81ff\">10</span>)</code></pre></div><div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-r\" data-lang=\"r\">rnorm(n<span style=\"color:#f92672\">=</span><span style=\"color:#ae81ff\">5</span>, mean <span style=\"color:#f92672\">=</span> <span style=\"color:#ae81ff\">2</span>, sd <span style=\"color:#f92672\">=</span> <span style=\"color:#ae81ff\">7</span>)</code></pre></div><div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-r\" data-lang=\"r\"><span style=\"color:#75715e\">#Have a read of the blog post here to find out why we sometimes use the argument names inside the brackets!</span></code></pre></div><div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-r\" data-lang=\"r\"><span style=\"color:#66d9ef\">sum</span></code></pre></div><div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-r\" data-lang=\"r\"><span style=\"color:#66d9ef\">sum</span>(<span style=\"color:#ae81ff\">1</span><span style=\"color:#f92672\">:</span><span style=\"color:#ae81ff\">9</span>, <span style=\"color:#ae81ff\">7</span>, <span style=\"color:#66d9ef\">pi</span>)</code></pre></div><div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-r\" data-lang=\"r\">predict</code></pre></div><div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-r\" data-lang=\"r\">linearMod<span style=\"color:#f92672\">&lt;-</span>lm(Sepal.Length<span style=\"color:#f92672\">~</span><span style=\"color:#ae81ff\">.</span>, data<span style=\"color:#f92672\">=</span>iris)\n<span style=\"color:#75715e\"># logisticMod&lt;-glm(Species~., data=iris, family=binomial)</span>\n\npredict(linearMod, iris[<span style=\"color:#ae81ff\">1</span>,])</code></pre></div>\n<p>Happy coding :) Ellen!</p>"
}