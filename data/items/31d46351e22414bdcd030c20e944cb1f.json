{
  "title": "Yet another visualization of the Bayesian Beta-Binomial model",
  "link": "",
  "updated": "2018-12-13T23:30:00+00:00",
  "id": "http://www.sumsar.net/blog/2018/12/visualizing-the-beta-binomial",
  "category": [
    "",
    "",
    ""
  ],
  "content": "<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\" \"http://www.w3.org/TR/REC-html40/loose.dtd\">\n<html><body>\n<p>The Beta-Binomial model is the ‚Äúhello world‚Äù of Bayesian statistics. That is, it‚Äôs the first model you get to run, often before you even know what you are doing. There are many reasons for this: </p>\n\n<ul>\n  <li>It only has one parameter, the underlying proportion of success, so it‚Äôs easy to visualize and reason about.</li>\n  <li>It‚Äôs easy to come up with a scenario where it can be used, for example: ‚ÄúWhat is the proportion of patients that will be cured by this drug?‚Äù</li>\n  <li>The model can be computed analytically (no need for any messy MCMC).</li>\n  <li>It‚Äôs relatively easy to come up with an informative prior for the underlying proportion.</li>\n  <li>Most importantly: It‚Äôs fun to see some results before diving into the theory! üòÅ</li>\n</ul>\n\n<p>That‚Äôs why I also introduced the Beta-Binomial model as the first model in my DataCamp course <a href=\"http://www.sumsar.net/blog/2018/12/my-introductory-course-on-bayesian-statistics/\">Fundamentals of Bayesian Data Analysis in R</a> and quite a lot of people have asked me for the code I used to visualize the Beta-Binomial. Scroll to the bottom of this post if that‚Äôs what you want, otherwise, here is how I visualized the Beta-Binomial in my course given two successes and four failures:</p>\n\n<center>\n  <p>\n    <img src=\"http://www.sumsar.net/images/posts/2018-12-13-visualizing-the-beta-binomial/prop_model_animation.gif\" width=\"650\">  \n  </p>\n</center>\n\n<!-- more -->\n\n<p>The function that produces these plots is called <code>prop_model</code> (<code>prop</code> as in proportion) and takes a vector of <code>TRUE</code>s and <code>FALSE</code>s representing successes and failures. The visualization is created using the excellent <a href=\"https://CRAN.R-project.org/package=ggridges\"><code>ggridges</code> package</a>  (<a href=\"https://serialmentor.com/blog/2017/9/15/goodbye-joyplots\">previously called joyplot</a>). Here‚Äôs how you would use <code>prop_model</code> to produce the last plot in the animation above:</p>\n\n<pre><code><div class=\"highlight\" style=\"background: #f8f8f8\"><pre style=\"line-height: 125%\">data <span style=\"color: #666666\"><-</span> c(<span style=\"color: #008000; font-weight: bold\">FALSE</span>, <span style=\"color: #008000; font-weight: bold\">TRUE</span>, <span style=\"color: #008000; font-weight: bold\">FALSE</span>, <span style=\"color: #008000; font-weight: bold\">FALSE</span>, <span style=\"color: #008000; font-weight: bold\">FALSE</span>, <span style=\"color: #008000; font-weight: bold\">TRUE</span>)\nprop_model(data)\n</pre></div></code></pre>\n\n<p><img src=\"http://www.sumsar.net/figures/2018-12-13-visualizing-the-beta-binomial/unnamed-chunk-2-1.png\" alt=\"\"></p>\n\n<p>The result is, I think, a quite nice visualization of how the model‚Äôs knowledge about the parameter changes as data arrives. At <code>n=0</code> the model doesn‚Äôt know anything and ‚Äî as the default prior states that it‚Äôs equally likely the proportion of success is anything from 0.0 to 1.0 ‚Äî the result is a big, blue, and uniform square. As more data arrives the probability distribution becomes more concentrated, with the final posterior distribution at <code>n=6</code>. </p>\n\n<p>Some added features of <code>prop_model</code> is that it also plots larger data somewhat gracefully and that it returns a random sample from the posterior that can be further explored. For example: </p>\n\n<pre><code><div class=\"highlight\" style=\"background: #f8f8f8\"><pre style=\"line-height: 125%\">big_data <span style=\"color: #666666\"><-</span> sample(c(<span style=\"color: #008000; font-weight: bold\">TRUE</span>, <span style=\"color: #008000; font-weight: bold\">FALSE</span>), prob <span style=\"color: #666666\">=</span> c(<span style=\"color: #666666\">0.75</span>, <span style=\"color: #666666\">0.25</span>),\n                   size <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">100</span>, replace <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">TRUE</span>)\nposterior <span style=\"color: #666666\"><-</span> prop_model(big_data)\n</pre></div></code></pre>\n\n<p><img src=\"http://www.sumsar.net/figures/2018-12-13-visualizing-the-beta-binomial/unnamed-chunk-3-1.png\" alt=\"\"></p>\n\n<pre><code><div class=\"highlight\" style=\"background: #f8f8f8\"><pre style=\"line-height: 125%\">quantile(posterior, c(<span style=\"color: #666666\">0.025</span>, <span style=\"color: #666666\">0.5</span>, <span style=\"color: #666666\">0.975</span>))\n</pre></div></code></pre>\n\n<pre><code><div class=\"highlight\" style=\"background: #f8f8f8\"><pre style=\"line-height: 125%\"><span style=\"color: #408080; font-style: italic\">## 2.5%  50%  98% </span>\n<span style=\"color: #408080; font-style: italic\">## 0.68 0.77 0.84</span>\n</pre></div></code></pre>\n\n<p>So here we calculated that the underlying proportion of success is most likely 0.77 with a 95% CI of [0.68, 0.84] (which nicely includes the correct value of 0.75 which we used to simulate <code>big_data</code>).</p>\n\n<p>To be clear, <code>prop_model</code> is not intended as anything serious, it‚Äôs just meant as a nice way of exploring the Beta-Binomial model when learning Bayesian statistics, maybe as part of a workshop exercise.</p>\n\n<h2 id=\"the-propmodel-function\">The <code>prop_model</code> function</h2>\n\n<pre><code><div class=\"highlight\" style=\"background: #f8f8f8\"><pre style=\"line-height: 125%\"><span style=\"color: #408080; font-style: italic\"># This function takes a number of successes and failuers coded as a TRUE/FALSE</span>\n<span style=\"color: #408080; font-style: italic\"># or 0/1 vector. This should be given as the data argument.</span>\n<span style=\"color: #408080; font-style: italic\"># The result is a visualization of the how a Beta-Binomial</span>\n<span style=\"color: #408080; font-style: italic\"># model gradualy learns the underlying proportion of successes </span>\n<span style=\"color: #408080; font-style: italic\"># using this data. The function also returns a sample from the</span>\n<span style=\"color: #408080; font-style: italic\"># posterior distribution that can be further manipulated and inspected.</span>\n<span style=\"color: #408080; font-style: italic\"># The default prior is a Beta(1,1) distribution, but this can be set using the</span>\n<span style=\"color: #408080; font-style: italic\"># prior_prop argument.</span>\n\n<span style=\"color: #408080; font-style: italic\"># Make sure the packages tidyverse and ggridges are installed, otherwise run:</span>\n<span style=\"color: #408080; font-style: italic\"># install.packages(c(\"tidyverse\", \"ggridges\"))</span>\n\n<span style=\"color: #408080; font-style: italic\"># Example usage:</span>\n<span style=\"color: #408080; font-style: italic\"># data <- c(TRUE, FALSE, TRUE, TRUE, FALSE, TRUE, TRUE)</span>\n<span style=\"color: #408080; font-style: italic\"># prop_model(data)</span>\nprop_model <span style=\"color: #666666\"><-</span> <span style=\"color: #008000; font-weight: bold\">function</span>(data <span style=\"color: #666666\">=</span> c(), prior_prop <span style=\"color: #666666\">=</span> c(<span style=\"color: #666666\">1</span>, <span style=\"color: #666666\">1</span>), n_draws <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">10000</span>) {\n  library(tidyverse)\n  data <span style=\"color: #666666\"><-</span> as.logical(data)\n  <span style=\"color: #408080; font-style: italic\"># data_indices decides what densities to plot between the prior and the posterior</span>\n  <span style=\"color: #408080; font-style: italic\"># For 20 datapoints and less we're plotting all of them.</span>\n  data_indices <span style=\"color: #666666\"><-</span> round(seq(<span style=\"color: #666666\">0</span>, length(data), length.out <span style=\"color: #666666\">=</span> min(length(data) <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">1</span>, <span style=\"color: #666666\">20</span>)))\n\n  <span style=\"color: #408080; font-style: italic\"># dens_curves will be a data frame with the x & y coordinates for the </span>\n  <span style=\"color: #408080; font-style: italic\"># denities to plot where x = proportion_success and y = probability</span>\n  proportion_success <span style=\"color: #666666\"><-</span> c(<span style=\"color: #666666\">0</span>, seq(<span style=\"color: #666666\">0</span>, <span style=\"color: #666666\">1</span>, length.out <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">100</span>), <span style=\"color: #666666\">1</span>)\n  dens_curves <span style=\"color: #666666\"><-</span> map_dfr(data_indices, <span style=\"color: #008000; font-weight: bold\">function</span>(i) {\n    value <span style=\"color: #666666\"><-</span> ifelse(i <span style=\"color: #666666\">==</span> <span style=\"color: #666666\">0</span>, <span style=\"color: #BA2121\">\"Prior\"</span>, ifelse(data[i], <span style=\"color: #BA2121\">\"Success\"</span>, <span style=\"color: #BA2121\">\"Failure\"</span>))\n    label <span style=\"color: #666666\"><-</span> paste0(<span style=\"color: #BA2121\">\"n=\"</span>, i)\n    probability <span style=\"color: #666666\"><-</span> dbeta(proportion_success,\n                         prior_prop[<span style=\"color: #666666\">1</span>] <span style=\"color: #666666\">+</span> sum(data[seq_len(i)]),\n                         prior_prop[<span style=\"color: #666666\">2</span>] <span style=\"color: #666666\">+</span> sum(<span style=\"color: #666666\">!</span>data[seq_len(i)]))\n    probability <span style=\"color: #666666\"><-</span> probability <span style=\"color: #666666\">/</span> max(probability)\n    data_frame(value, label, proportion_success, probability)\n  })\n  <span style=\"color: #408080; font-style: italic\"># Turning label and value into factors with the right ordering for the plot</span>\n  dens_curves<span style=\"color: #666666\">$</span>label <span style=\"color: #666666\"><-</span> fct_rev(factor(dens_curves<span style=\"color: #666666\">$</span>label, levels <span style=\"color: #666666\">=</span>  paste0(<span style=\"color: #BA2121\">\"n=\"</span>, data_indices )))\n  dens_curves<span style=\"color: #666666\">$</span>value <span style=\"color: #666666\"><-</span> factor(dens_curves<span style=\"color: #666666\">$</span>value, levels <span style=\"color: #666666\">=</span> c(<span style=\"color: #BA2121\">\"Prior\"</span>, <span style=\"color: #BA2121\">\"Success\"</span>, <span style=\"color: #BA2121\">\"Failure\"</span>))\n\n  p <span style=\"color: #666666\"><-</span> ggplot(dens_curves, aes(x <span style=\"color: #666666\">=</span> proportion_success, y <span style=\"color: #666666\">=</span> label,\n                               height <span style=\"color: #666666\">=</span> probability, fill <span style=\"color: #666666\">=</span> value)) <span style=\"color: #666666\">+</span>\n    ggridges<span style=\"color: #666666\">::</span>geom_density_ridges(stat<span style=\"color: #666666\">=</span><span style=\"color: #BA2121\">\"identity\"</span>, color <span style=\"color: #666666\">=</span> <span style=\"color: #BA2121\">\"white\"</span>, alpha <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">0.8</span>,\n                                  panel_scaling <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">TRUE</span>, size <span style=\"color: #666666\">=</span> <span style=\"color: #666666\">1</span>) <span style=\"color: #666666\">+</span>\n    scale_y_discrete(<span style=\"color: #BA2121\">\"\"</span>, expand <span style=\"color: #666666\">=</span> c(<span style=\"color: #666666\">0.01</span>, <span style=\"color: #666666\">0</span>)) <span style=\"color: #666666\">+</span>\n    scale_x_continuous(<span style=\"color: #BA2121\">\"Underlying proportion of success\"</span>) <span style=\"color: #666666\">+</span>\n    scale_fill_manual(values <span style=\"color: #666666\">=</span> hcl(<span style=\"color: #666666\">120</span> <span style=\"color: #666666\">*</span> <span style=\"color: #666666\">2:0</span> <span style=\"color: #666666\">+</span> <span style=\"color: #666666\">15</span>, <span style=\"color: #666666\">100</span>, <span style=\"color: #666666\">65</span>), name <span style=\"color: #666666\">=</span> <span style=\"color: #BA2121\">\"\"</span>, drop <span style=\"color: #666666\">=</span> <span style=\"color: #008000; font-weight: bold\">FALSE</span>,\n                      labels <span style=\"color: #666666\">=</span>  c(<span style=\"color: #BA2121\">\"Prior   \"</span>, <span style=\"color: #BA2121\">\"Success   \"</span>, <span style=\"color: #BA2121\">\"Failure   \"</span>)) <span style=\"color: #666666\">+</span>\n    ggtitle(paste0(\n      <span style=\"color: #BA2121\">\"Binomial model - Data: \"</span>, sum(data),  <span style=\"color: #BA2121\">\" successes, \"</span> , sum(<span style=\"color: #666666\">!</span>data), <span style=\"color: #BA2121\">\" failures\"</span>)) <span style=\"color: #666666\">+</span>\n    theme_light() <span style=\"color: #666666\">+</span>\n    theme(legend.position <span style=\"color: #666666\">=</span> <span style=\"color: #BA2121\">\"top\"</span>)\n  print(p)\n\n  <span style=\"color: #408080; font-style: italic\"># Returning a sample from the posterior distribution that can be further </span>\n  <span style=\"color: #408080; font-style: italic\"># manipulated and inspected</span>\n  posterior_sample <span style=\"color: #666666\"><-</span> rbeta(n_draws, prior_prop[<span style=\"color: #666666\">1</span>] <span style=\"color: #666666\">+</span> sum(data), prior_prop[<span style=\"color: #666666\">2</span>] <span style=\"color: #666666\">+</span> sum(<span style=\"color: #666666\">!</span>data))\n  invisible(posterior_sample)\n}\n</pre></div></code></pre>\n\n</body></html>\n"
}