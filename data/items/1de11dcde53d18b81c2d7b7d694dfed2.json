{
  "title": "Python as a Declarative Programming Language",
  "link": "",
  "updated": "2017-02-28T00:00:00-08:00",
  "id": "http://www.benfrederickson.com/python-as-a-declarative-programming-language/",
  "content": "\n        \n        <p>If you look at the programming languages benchmarks game, Python is one of the <a href=\"http://benchmarksgame.alioth.debian.org/u64q/performance.php?test=nbody\">slowest commonly used\nprogramming languages out\nthere</a>. Typical programs\nwritten in pure Python average around 40 times slower than the equivalent program written in C or\nC++.</p>\n\n<p>Despite the performance penalty, Python is still probably the most popular language choice out there for doing Data\nAnalysis and Machine Learning. Most of the recent Deep Learning frameworks target Python for\ndevelopment: TensorFlow, Theano, and Keras all use Python. Torch originally was written for Lua, which\nis substantially faster than Python when using LuaJIT - but Torch failed to gain\ntraction until switching to Python with the release of PyTorch.</p>\n\n<p>The reason for this is that the performance penalty in writing programs in Python isnâ€™t as large\nas the programming language benchmarks game would suggest: Most of the best Python Data libraries\nhave their core routines written as native extensions.</p>\n\n<p>This all means that to get the most out of these libraries, you need to treat Python as a\nDeclarative Language - and push as much control flow as possible down to a native layer, and just\nlet the Python program describe what needs done.</p>\n\n<p class='more'><a href='http://www.benfrederickson.com/python-as-a-declarative-programming-language/'>Read more ...</a></p>\n     "
}