{
  "title": "Public Institutions and Open Source Software",
  "link": "",
  "updated": "2018-08-21T00:00:00+00:00",
  "id": "https://mrocklin.github.io/blog/work/2018/08/21/institutional-open-source",
  "content": "<p>As general purpose open source software displaces domain-specific all-in-one\nsolutions, many institutions are re-assessing how they build and maintain\nsoftware to support their users.  This is true across for-profit enterprises,\ngovernment agencies, universities, and home-grown communities.</p>\n\n<p>While this shift brings opportunities for growth and efficiency, it also raises\nquestions and challenges about how these institutions should best serve their\ncommunities as they grow increasingly dependent on software developed and\ncontrolled outside of their organization.</p>\n\n<ul>\n  <li>How do they ensure that this software will persist for many years?</li>\n  <li>How do they influence this software to better serve the needs of their users?</li>\n  <li>How do they transition users from previous all-in-one solutions to a new\nopen source platform?</li>\n  <li>How do they continue to employ their existing employees who have historically\nmaintained software in this field?</li>\n  <li>If they have a mandate to support this field, what is the best role for them\nto play, and how can they justify their efforts to the groups that control\ntheir budget?</li>\n</ul>\n\n<p>This blogpost investigates this situation from the perspective of <strong>large\norganizations that serve the public good</strong>, such as government funding agencies\nor research institutes like the National Science Foundation, NASA, DoD, and so\non.  I hope to write separately about this topic from both enterprise and\ncommunity perspectives in the future.</p>\n\n<p>This blogpost provides context, describes a few common approaches and their\noutcomes, and draws some general conclusions.</p>\n\n<h3 id=\"example\">Example</h3>\n\n<p>To make this concrete, place yourself in the following situation:</p>\n\n<p>You manage a software engineering department within a domain specific\ninstitution (like NASA).  Your group produces the defacto standard software\nsuite that almost all scientists in your domain use; or at least that used to\nbe true.  Today, a growing number of scientists use general-purpose software\nstacks, like Scientific Python or R-Stats, that are maintained by a much wider\ncommunity outside of your institution.  While the software solution that your\ngroup maintains is still very much in use today, you think that it is unlikely\nthat it will continue to be relevant in five-to-ten years.</p>\n\n<p>What should you do?  How should your institution change its funding and\nemployment model to reflect this new context, where the software they depend on\nis relevant to many other institutions as well?</p>\n\n<h2 id=\"common-approaches-that-sometimes-end-poorly\">Common approaches that sometimes end poorly</h2>\n\n<p>We list a few common approaches, and some challenges or potential outcomes.</p>\n\n<ol>\n  <li>\n    <p><strong>Open your existing stack for community development</strong></p>\n\n    <p>You’ve heard that by placing your code and development cycle on Github that\nyour software will be adopted by other groups and that you’ll be able to\nshare maintenance costs.  You don’t consider your software to be\nintellectual property so you go ahead and hope for the best.</p>\n\n    <p><strong>Positive Outcome</strong>: Your existing user-base may appreciate this and some\nof them may start submitting bugs and even patches.</p>\n\n    <p><strong>Negative Outcome</strong>: Your software stack is already quite specific to your\ndomain.  It’s unlikely that you will see the same response as a general\npurpose project like Jupyter, Pandas, or Spark.</p>\n\n    <p>Additionally, maintaining an open development model is hard.  You have to\nrecord all of your conversations and decision-making online.  When people\nfrom other domains come with ideas you will have to choose between\nsupporting them and supporting your own mission, which will frequently\ncome into conflict.</p>\n\n    <p>In practice your engineers will start ignoring external users, and as a\nresult your external users will stay away.</p>\n  </li>\n  <li>\n    <p><strong>Start a new general purpose open source framework</strong></p>\n\n    <p><strong>Positive</strong>: If your project becomes widely adopted then you both get some\nadditional development help, but perhaps more importantly your institution\ngains reputation as an interesting place to work.  This helps tremendously\nwith hiring.</p>\n\n    <p><strong>Negative</strong>: This is likely well beyond the mandate of your institution.</p>\n\n    <p>Additionally, it’s difficult to produce general purpose software that\nattracts a broad audience.  This is for both technical and administrative\nreasons:</p>\n\n    <ol>\n      <li>\n        <p>You need to have feedback from domains outside of your own.  Lets say\nyou’re NASA and you want to make a new image processing tool.  You need\nto talk to satellite engineers (which you have), and also\nmicroscopists, medical researchers, astronomers, ecologists, machine\nlearning researchers, and so on.  It’s unlikely that your institution\nhas enough exposure outside of your domain to design general purpose\nsoftware successfully.  Even very good software usually fails to\nattract a community.</p>\n      </li>\n      <li>\n        <p>If you succeeded in a good general purpose design you would also have\nto employ people to support users from all of those domains, and this\nis probably outside of your mandate.</p>\n      </li>\n    </ol>\n  </li>\n  <li>\n    <p><strong>Pull open source tools into your organization, but don’t engage externally</strong>.</p>\n\n    <p>You’re happy to use open source tools but don’t see a need to engage\nexternal communities.  You’ll pull tools inside of your organization and\nthen manage and distribute them internally as usual.</p>\n\n    <p><strong>Positive</strong>: You get the best of software today, but also get to manage\nthe experience internally, giving you the control that your organization\nneeds.  This is well within the comfort zone of both your legal and IT\ndepartments.</p>\n\n    <p><strong>Negative</strong>: As the outside world changes you will struggle to integrate\nthese changes with your internal processes.  Eventually your version of the\nsoftware will diverge and become an internal fork that you have to\nmaintain.  This locks you into current-day functionality and puts you on\nthe hook to integrate critical patches as they arise.  Additionally you\nmiss out on opportunities to move the software in directions that your\norganization would find valuable.</p>\n  </li>\n  <li>\n    <p><strong>Get out of the business of maintaining software entirely.</strong>\nYour institution may no longer be strictly needed in this role.</p>\n\n    <p>The open source communities seem to have a decent pipeline to support\nusers, lets just divert our userbase to them and focus on other efforts.</p>\n\n    <p><strong>Positive</strong>: You reduce operating budget and can allocate your people to\nother problems.</p>\n\n    <p><strong>Negative</strong>: This causes an upset to your employees, your user community,\nand to the maintainers of the open source software projects that are being\nasked to absorb your userbase.  The maintainers are likely to burn-out from\nhaving to support so many people and so your users will be a bit lost.\nAdditionally the open source software probably doesn’t do all of the things\nthat the old software does and your existing users aren’t experts at the\nnew software stack.</p>\n\n    <p>Everyone needs help getting to know each other, and your institution is\nuniquely positioned to facilitate this.</p>\n  </li>\n</ol>\n\n<h2 id=\"common-approaches-that-sometimes-end-well\">Common approaches that sometimes end well</h2>\n\n<p>We now discuss a few concrete things to help where your institution is likely\nuniquely positioned to play a critical role:</p>\n\n<ol>\n  <li>\n    <p><strong>Maintain the existing stack</strong></p>\n\n    <p>It’s likely that the existing all-in-one stack will still be used for years\nby current researchers and automated systems.  You’re not off the hook to\nprovide maintenance.  However you might want to communicate an end-of-life\nto your userbase though saying that new feature requests are unlikely to be\nimplemented and that support will expire in a few years time (or whatever\nis appropriate for your domain)</p>\n  </li>\n  <li>\n    <p><strong>Develop learning materials to help users transition to the new stack</strong></p>\n\n    <p>Your institution uniquely understands the needs of your user community.\nThere are common analyses, visualizations, storage formats, and so on that\nare common among your users and are easy with the all-in-one solution, but\nwhich take effort with the new system.</p>\n\n    <p>You can build teaching materials like blogposts, how-to guides, and online\ntutorials that assist the non-early-adopters to transition more smoothly.\nYou can provide in-person teaching at conferences and meetings common to\nyour community.  It’s likely that the open source ecosystem that you’re\ntransitioning to already has materials that you can copy-and-modify for\nyour domain.</p>\n\n    <p>Assist users in reporting bugs, and filter these to reduce burden on\nthe upstream OSS projects.  It’s likely that your users will express\nproblems in a way that is particular to their domain, but which doesn’t\nmake sense to maintainers.</p>\n\n    <ul>\n      <li>User says: <em>Satellite mission MODIS data doesn’t load properly</em></li>\n      <li>Developer wants to hear: <em>GeoTIFF loader fails when given S3 route</em></li>\n    </ul>\n\n    <p>Your engineers can help to filter and translate these requests into\ntechnical terms appropriate for the upstream project.  The people\npreviously working on the all-in-one solution have a unique combination of\ntechnical and domain experience that is essential to mediate these\ninteractions.</p>\n  </li>\n  <li>\n    <p><strong>Contribute code upstream either to mainline packages or new subpackages</strong></p>\n\n    <p>After you’ve spent some time developing training materials and assisting\nusers to transition you’ll have a much better sense of what needs to be\nfixed upstream, or what small new packages might be helpful.  You’ll also\nhave much more experience interacting with the upstream development\ncommunity so that you get a sense of how they operate and they’ll better\nunderstand your needs.  Now is a good time to start contributing actual\ncode, either into the package itself if sufficiently general purpose, or\ninto a spinoff project that is small in scope and focuses on your domain.</p>\n\n    <p>It’s very tempting to jump directly to this step and create new software,\nbut waiting a while and focusing on teaching can often yield more\nlong-lasting results.</p>\n  </li>\n  <li>\n    <p><strong>Enable employees to spend time maintaining upstream projects and ensure that this time counts towards their career advancement</strong></p>\n\n    <p>By this time you will have a few employees who have taken on a maintenance\nrole within the upstream projects.  You should explicitly give them time\nwithin the work schedule to continue these activities.  The work that they\ndo may not be explicitly within scope for your institution, but having them\nactive within the core of a project makes sure that the mission of your\ninstitution will be well represented in the future of the open source\nproject.</p>\n\n    <p>These people will often do this work on their own at home or on the side in\npersonal time if you don’t step in.  Your institution should make it clear\nto them that it values these activities and that they are good for the\nemployee’s career within your institution.  Besides ensuring that your\ninstitution’s perspective is represented within the core of the upstream\nprojects you’re also improving retention of a core employee.</p>\n  </li>\n  <li>\n    <p><strong>Co-write grant proposals with maintainers of the core project</strong></p>\n\n    <p>If your institution provides or applies for external funding, consider\nwriting up a grant proposal that has your institution and the OSS project\ncollaborating for a few years.  You focus on your domain and leave the OSS\nproject maintainers to handle some of the gritty technical details that you\nanticipate will arise.  Most of those details are hopefully things that are\ngeneral purpose and that they wanted to fix anyway.  It’s usually pretty\neasy to find a set of features that both parties would be very happy to see\ncompleted.</p>\n\n    <p>Many OSS maintainers work at an institution that allows them to accept\ngrant funding (at least as a sub-contractor under your award), but may not\nhave access to the same domain-specific funding channels to which your\ninstitution has access.  If they don’t work at an institution for which\naccepting a grant sub-award is reasonable (maybe they work at a bank) then\nthey might consider accepting the award through a non-profit foundation\nlike <a href=\"https://numfocus.org/\">NumFOCUS</a>.</p>\n  </li>\n</ol>\n\n<h2 id=\"summary\">Summary</h2>\n\n<p>As primary development of software moves from inside the institution to\noutside, a cultural shift occurs.  The institution transitions from leading\ndevelopment and being fully in charge of its own destiny to playing a support\nrole in a larger ecosystem.  They can first help to lead their their user\ncommunity through this transition, and through that develop the experience and\nrelationships to act effectively within the broader ecosystem.</p>\n\n<p>From this process they often find roles within the ecosystem that are critical.\nLarge public institutions are some of the only organizations with the public\nmandate and long time horizon to maintain public software over decade-long time\nscales.  They have a crucial role to play both in domain specific software\npackages that directly overlap with their mandate and also with more general\npurpose packages on which their domain depends indirectly.  Finding their new\nrole and learning to engage with external organizations is a skill that they’ll\nneed to re-learn as they engage with an entirely new set of partners.</p>\n\n<p>This growth requires time and patience at several levels of the organization.\nAt the end of the day many people within the institution will have to\ncollaborate with people outside while still staying within the mandate and\ncareer track of the institution itself.</p>"
}