{
  "title": "A Beginner's Look at Julia",
  "description": "<p>Over the past month or so, I’ve been playing with a new scientific programming language called ‘<a title=\"Julia language\" href=\"http://julialang.org/\" target=\"_blank\">Julia</a>’, which aims to be a high-level language with performance approaching that of C. With that goal in mind, Julia could be a replacement for the ‘multi-language’ problem of needing to move between R, Python, MATLAB, C, Fortran, Scala, etc. within a single scientific programming project.  Here are some observations that might be helpful for others looking to get started with Julia.</p>",
  "pubDate": "Tue, 23 Jul 2013 12:16:34 +0000",
  "link": "http://randyzwitch.com/julia-language-beginners/",
  "guid": "http://randyzwitch.com/julia-language-beginners/",
  "content": "<p>Over the past month or so, I’ve been playing with a new scientific programming language called ‘<a title=\"Julia language\" href=\"http://julialang.org/\" target=\"_blank\">Julia</a>’, which aims to be a high-level language with performance approaching that of C. With that goal in mind, Julia could be a replacement for the ‘multi-language’ problem of needing to move between R, Python, MATLAB, C, Fortran, Scala, etc. within a single scientific programming project.  Here are some observations that might be helpful for others looking to get started with Julia.</p>\n\n<h3 id=\"get-used-to-git-and-make\">Get used to ‘Git’ and ‘make’</h3>\n\n<p>While there are <a title=\"Julia language downloads\" href=\"http://julialang.org/downloads/\" target=\"_blank\">pre-built binaries</a> for Julia, due to the rapid pace of development, it’s best to build Julia from source. To be able to keep up with the literally dozen code changes per day, you can clone the <a title=\"Julia GitHub repo\" href=\"https://github.com/JuliaLang/julia\" target=\"_blank\">Julia GitHub repository</a> to your local machine. If you use one of the <a title=\"GitHub GUI downloads\" href=\"http://git-scm.com/downloads/guis\" target=\"_blank\">GitHub GUI’s</a>, this is as easy as hitting the ‘Sync Branch’ button to receive all of the newest code updates.</p>\n\n<p>To install Julia, you need to compile the code. The instructions for each supported operating system are listed on the <a title=\"Julia GitHub repo\" href=\"https://github.com/JuliaLang/julia\" target=\"_blank\">Julia GitHub page</a>. For Mac users, use Terminal to navigate to the directory where you cloned Julia, then run the following command, where ‘n’ refers to the number of concurrent processes you want the compiler to use:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-julia\" data-lang=\"julia\"><table class=\"rouge-table\"><tbody><tr><td class=\"gutter gl\"><pre class=\"lineno\">1\n</pre></td><td class=\"code\"><pre><span class=\"n\">make</span> <span class=\"o\">-</span><span class=\"n\">j</span> <span class=\"n\">n</span> \n</pre></td></tr></tbody></table></code></pre></figure>\n\n<p>I use 8 concurrent processes on a 2013 MacBook Pro and it works pretty well. Certainly much faster than a single process. Note that the first time you run the <code class=\"language-plaintext highlighter-rouge\">make</code> command, the build process will take much longer than successive builds, as Julia downloads all the required libraries needed. After the first build, you can just run the <code class=\"language-plaintext highlighter-rouge\">make</code> command with a single process, as the code updates don’t take very long to build.</p>\n\n<p>Package management is also done via GitHub. To add <a title=\"Julia packages\" href=\"http://pkg.julialang.org/\" target=\"_blank\">Julia packages</a> to your install, you use the <code class=\"language-plaintext highlighter-rouge\">Pkg.add()</code> function, with the package name in double-quotes.</p>\n\n<h3 id=\"julia-code-feels-very-familiar\">Julia code feels very familiar</h3>\n\n<h4 id=\"text-file-import\">Text file import</h4>\n\n<p>Although the <a title=\"Julia documentation\" href=\"http://docs.julialang.org/en/latest/manual/introduction.html#man-introduction-1\" target=\"_blank\">Julia documentation</a> makes numerous references to MATLAB in terms of code similarity, Julia feels very familiar to me as an R and Python user. Take reading a .csv file into a dataframe and finding the dimensions of the resulting object</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-julia\" data-lang=\"julia\"><table class=\"rouge-table\"><tbody><tr><td class=\"gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n</pre></td><td class=\"code\"><pre><span class=\"c\">#R: Read in 1987.csv from airline dataset into a dataframe</span>\n<span class=\"c\">#No import statement needed to create a dataframe in R</span>\n<span class=\"n\">airline1987</span> <span class=\"o\">&lt;-</span> <span class=\"n\">read</span><span class=\"o\">.</span><span class=\"n\">csv</span><span class=\"x\">(</span><span class=\"s\">\"~/airline/1987.csv\"</span><span class=\"x\">)</span>\n<span class=\"n\">dim</span><span class=\"x\">(</span><span class=\"n\">airline1987</span><span class=\"x\">)</span>\n<span class=\"x\">[</span><span class=\"mi\">1</span><span class=\"x\">]</span> <span class=\"mi\">1311826</span>      <span class=\"mi\">29</span>\n\n<span class=\"c\">#Python: use pandas to create a dataframe</span>\n<span class=\"k\">import</span> <span class=\"n\">pandas</span> <span class=\"n\">as</span> <span class=\"n\">pd</span>\n<span class=\"n\">airline1987</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">read_csv</span><span class=\"x\">(</span><span class=\"s\">\"/Users/randyzwitch/airline/1987.csv\"</span><span class=\"x\">)</span>\n<span class=\"n\">airline1987</span><span class=\"o\">.</span><span class=\"n\">shape</span>\n<span class=\"n\">Out</span><span class=\"x\">[</span><span class=\"mi\">7</span><span class=\"x\">]</span><span class=\"o\">:</span> <span class=\"x\">(</span><span class=\"mi\">1311826</span><span class=\"x\">,</span> <span class=\"mi\">29</span><span class=\"x\">)</span>\n\n<span class=\"c\">#Julia: use DataFrames to create a dataframe</span>\n<span class=\"k\">using</span> <span class=\"n\">DataFrames</span>\n<span class=\"n\">airline1987</span> <span class=\"o\">=</span> <span class=\"n\">readtable</span><span class=\"x\">(</span><span class=\"s\">\"/Users/randyzwitch/airline/1987.csv\"</span><span class=\"x\">)</span>\n<span class=\"n\">size</span><span class=\"x\">(</span><span class=\"n\">airline1987</span><span class=\"x\">)</span>\n<span class=\"x\">(</span><span class=\"mi\">1311826</span><span class=\"x\">,</span><span class=\"mi\">29</span><span class=\"x\">)</span>\n</pre></td></tr></tbody></table></code></pre></figure>\n\n<p>In each language, the basic syntax is to call a ‘read’ function, specify the .csv filename, then the defaults of the function read in a basic file. I also could’ve specified other keyword arguments, but for purposes of this example I kept it simple.</p>\n\n<h4 id=\"looping\">Looping</h4>\n\n<p>Looping in Julia is similar to other languages. Python requires proper spacing for each level of a loop, with a colon for each evaluated expression. And although you generally don’t use many loops in R, to do so requires using parenthesis and brackets.</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-julia\" data-lang=\"julia\"><table class=\"rouge-table\"><tbody><tr><td class=\"gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n</pre></td><td class=\"code\"><pre><span class=\"c\">#Python looping to create a term-frequency dictionary</span>\n\n<span class=\"n\">from</span> <span class=\"n\">collections</span> <span class=\"k\">import</span> <span class=\"n\">Counter</span>\n\n<span class=\"n\">term_freq</span> <span class=\"o\">=</span> <span class=\"n\">Counter</span><span class=\"x\">()</span>\n<span class=\"k\">for</span> <span class=\"n\">word</span> <span class=\"k\">in</span> <span class=\"n\">english_dictionary</span><span class=\"o\">:</span>\n  <span class=\"k\">for</span> <span class=\"n\">url</span> <span class=\"k\">in</span> <span class=\"n\">url_list</span><span class=\"o\">:</span>\n    <span class=\"k\">if</span> <span class=\"n\">word</span> <span class=\"k\">in</span> <span class=\"n\">url_list</span><span class=\"o\">:</span>\n      <span class=\"n\">term_freq</span><span class=\"x\">[</span><span class=\"n\">word</span><span class=\"x\">]</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n\n<span class=\"c\">#Julia looping to create a term-frequency dictionary</span>\n\n<span class=\"n\">term_freq</span><span class=\"o\">=</span><span class=\"kt\">Dict</span><span class=\"x\">{</span><span class=\"kt\">String</span><span class=\"x\">,</span> <span class=\"kt\">Int64</span><span class=\"x\">}()</span>\n<span class=\"k\">for</span> <span class=\"n\">word</span> <span class=\"k\">in</span> <span class=\"n\">english_dictionary</span>\n    <span class=\"k\">for</span> <span class=\"n\">url</span> <span class=\"k\">in</span> <span class=\"n\">url_list</span>\n        <span class=\"k\">if</span> <span class=\"n\">search</span><span class=\"x\">(</span><span class=\"n\">line</span><span class=\"x\">,</span> <span class=\"n\">word</span><span class=\"x\">)</span> <span class=\"o\">!=</span> <span class=\"x\">(</span><span class=\"mi\">0</span><span class=\"o\">:-</span><span class=\"mi\">1</span><span class=\"x\">)</span>\n            <span class=\"n\">term_freq</span><span class=\"x\">[</span><span class=\"n\">word</span><span class=\"x\">]</span><span class=\"o\">=</span><span class=\"n\">get</span><span class=\"x\">(</span><span class=\"n\">term_freq</span><span class=\"x\">,</span><span class=\"n\">word</span><span class=\"x\">,</span><span class=\"mi\">0</span><span class=\"x\">)</span><span class=\"o\">+</span><span class=\"mi\">1</span>\n        <span class=\"k\">end</span>\n    <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</pre></td></tr></tbody></table></code></pre></figure>\n\n<p>If you’re coming from a Python background, you can see that there’s not a ton of difference between Python looping into a dictionary vs. Julia. The biggest differences are the use of the <code class=\"language-plaintext highlighter-rouge\">end</code> control-flow word and that Julia doesn’t currently have the convenience “Counter” object type. R doesn’t natively have a dictionary type, but you can add a similar concept using the <a title=\"CRAN hash package\" href=\"http://cran.r-project.org/web/packages/hash/\" target=\"_blank\">hash</a> package.</p>\n\n<h4 id=\"vectorization\">Vectorization</h4>\n\n<p>While not required to achieve high performance, Julia also provides the <a title=\"Is looping as a programming construct bad?\" href=\"http://slendrmeans.wordpress.com/2013/05/11/julia-loops/\" target=\"_blank\">functional programming construct of vectorization and list comprehensions</a>. In R, you use the <code class=\"language-plaintext highlighter-rouge\">*apply</code> family of functions instead of loops in order to <a title=\"Functional programming in R\" href=\"https://github.com/hadley/devtools/wiki/Functional-programming\" target=\"_blank\">apply a function to multiple elements in a list</a>. In Python, there are the <code class=\"language-plaintext highlighter-rouge\">map</code> and <code class=\"language-plaintext highlighter-rouge\">reduce</code> functions, but there is also the concept of list comprehensions. In Julia, both of the aforementioned functionalities are possible.</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-julia\" data-lang=\"julia\"><table class=\"rouge-table\"><tbody><tr><td class=\"gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n</pre></td><td class=\"code\"><pre><span class=\"c\">#Cube every number from 1 to 100</span>\n\n<span class=\"c\">#Python map function</span>\n<span class=\"n\">cubes</span> <span class=\"o\">=</span> <span class=\"n\">map</span><span class=\"x\">(</span><span class=\"n\">lambda</span><span class=\"x\">(</span><span class=\"n\">x</span><span class=\"x\">)</span><span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"o\">*</span><span class=\"n\">x</span><span class=\"o\">*</span><span class=\"n\">x</span><span class=\"x\">,</span> <span class=\"n\">range</span><span class=\"x\">(</span><span class=\"mi\">1</span><span class=\"x\">,</span><span class=\"mi\">100</span><span class=\"x\">))</span>\n\n<span class=\"c\">#Python list comprehension</span>\n<span class=\"n\">cubes</span><span class=\"o\">=</span> <span class=\"x\">[</span><span class=\"n\">x</span><span class=\"o\">*</span><span class=\"n\">x</span><span class=\"o\">*</span><span class=\"n\">x</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">range</span><span class=\"x\">(</span><span class=\"mi\">1</span><span class=\"x\">,</span><span class=\"mi\">100</span><span class=\"x\">)]</span>\n\n<span class=\"c\">#R sapply function</span>\n<span class=\"n\">cubes</span> <span class=\"o\">&lt;-</span> <span class=\"n\">sapply</span><span class=\"x\">(</span><span class=\"n\">seq</span><span class=\"x\">(</span><span class=\"mi\">1</span><span class=\"x\">,</span><span class=\"mi\">100</span><span class=\"x\">),</span> <span class=\"k\">function</span><span class=\"x\">(</span><span class=\"n\">x</span><span class=\"x\">)</span> <span class=\"n\">x</span><span class=\"o\">*</span><span class=\"n\">x</span><span class=\"o\">*</span><span class=\"n\">x</span><span class=\"x\">)</span>\n\n<span class=\"c\">#Julia map function</span>\n<span class=\"n\">cubes</span> <span class=\"o\">=</span> <span class=\"n\">map</span><span class=\"x\">((</span><span class=\"n\">x</span><span class=\"x\">)</span><span class=\"o\">-&gt;</span> <span class=\"n\">x</span><span class=\"o\">*</span><span class=\"n\">x</span><span class=\"o\">*</span><span class=\"n\">x</span><span class=\"x\">,</span> <span class=\"x\">[</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"mi\">100</span><span class=\"x\">])</span>\n\n<span class=\"c\">#Julia list comprehension</span>\n<span class=\"n\">cubes</span> <span class=\"o\">=</span> <span class=\"x\">[</span><span class=\"n\">x</span><span class=\"o\">*</span><span class=\"n\">x</span><span class=\"o\">*</span><span class=\"n\">x</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"x\">[</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"mi\">100</span><span class=\"x\">]]</span>\n</pre></td></tr></tbody></table></code></pre></figure>\n\n<p>In each case, the syntax is <em>just about</em> the same to apply a function across a list/array of numbers.</p>\n\n<h3 id=\"a-small-but-intense-community\">A small, but intense community</h3>\n\n<p>One thing that’s important to note about Julia at this stage is that it’s very early. If you’re going to be messing around with Julia, there’s going to be a lot of alone-time experimenting and reading the <a title=\"Julia documentation\" href=\"http://docs.julialang.org/en/latest/\" target=\"_blank\">Julia documentation</a>. There are also several other resources including a <a title=\"Julia users Google group\" href=\"https://groups.google.com/forum/?fromgroups=#!forum/julia-users\" target=\"_blank\">Julia-Users Google group</a>, <a title=\"Julia for R programmers\" href=\"http://www.stat.wisc.edu/~bates/JuliaForRProgrammers.pdf\" target=\"_blank\">Julia for R programmers</a>, individual discussions on GitHub in the ‘Issues’ section of each Julia package, and a few tutorials floating around (<a title=\"Julia tutorials\" href=\"http://forio.com/julia/tutorials-list\" target=\"_blank\">here</a> and <a title=\"Julia meta tutorial\" href=\"http://datacommunitydc.org/blog/2013/07/a-julia-meta-tutorial/\" target=\"_blank\">here</a>).</p>\n\n<p>Beyond just the written examples though, I’ve found that the budding Julia community is very helpful and willing in terms of answering questions. I’ve been bugging the hell out of <a title=\"John Myles White\" href=\"http://www.johnmyleswhite.com/\" target=\"_blank\">John Myles White</a> and he hasn’t complained (yet!), and even when code issues are raised through the users group or on GitHub, ultimately everyone has been very respectful and eager to help. So don’t be intimidated by the fact that Julia has a very MIT and Ph.D-ness to it…jump right in and migrate some of your favorite code over from other languages.</p>\n\n<p>While I haven’t moved to using Julia for my everyday workload, I am getting facility to the point where I’m starting to consider using Julia for selected projects. Once the language matures a bit more, <del><a title=\"Julia Studio\" href=\"http://forio.com/julia/\" target=\"_blank\">JuliaStudio</a> starts to approach <a title=\"RStudio\" href=\"http://www.rstudio.com/\" target=\"_blank\">RStudio</a> in terms of functionality</del>, and I get more familiar with the language in general, I can see Julia taking over for at least one if not all of my scientific programming languages.</p>"
}