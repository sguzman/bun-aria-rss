{
  "id": "tag:drsimonj.svbtle.com,2014:Post/creating-corporate-colour-palettes-for-ggplot2",
  "published": "2018-02-26T04:57:12-08:00",
  "updated": "2018-02-26T04:57:12-08:00",
  "link": "",
  "title": "Creating corporate colour palettes for ggplot2",
  "content": "<p><a href=\"https://twitter.com/drsimonj\" rel=\"nofollow\">@drsimonj</a> here to share how I create and reuse corporate color palettes for ggplot2.</p>\n\n<p>You’ve started work as a data scientist at “drsimonj Inc” (congratulations, by the way) and PR have asked that all your Figures use the corporate colours. They send you the image below (coincidentally the <a href=\"http://www.color-hex.com/color-palette/700\" rel=\"nofollow\">Metro UI colors on color-hex.com</a>):</p>\n\n<p><a href=\"https://svbtleusercontent.com/zxequdizcj5apg.png\" rel=\"nofollow\"><img src=\"https://svbtleusercontent.com/zxequdizcj5apg_small.png\" alt=\"corporate_swatch-1.png\"></a></p>\n\n<p>You want to use these colours with ggplot2 while also making your code reusable and flexible.</p>\n<h2 id=\"outline-and-setup_2\">Outline and setup <a class=\"head_anchor\" href=\"#outline-and-setup_2\" rel=\"nofollow\">#</a>\n</h2>\n<p>We’re going to create the following:</p>\n\n<ol>\n<li> Named vector of hex codes for the corporate colors</li>\n<li> Function to access hex codes (in 1)</li>\n<li> Named list of corporate color palettes (combinations of colors via 2)</li>\n<li> Function to access palettes (in 3)</li>\n<li> ggplot2-compatible scale functions that use the corporate palettes (via 4)</li>\n</ol>\n\n<p>Load the ggplot2 package and set a default theme to setup:</p>\n\n<pre><code class=\"prettyprint lang-r\">library(ggplot2)\n\ntheme_set(theme_minimal())\n</code></pre>\n<h2 id=\"start-with-color_2\">Start with color <a class=\"head_anchor\" href=\"#start-with-color_2\" rel=\"nofollow\">#</a>\n</h2>\n<p>Everything starts with colors. I like to first create a named vector of corporate colors like this:</p>\n\n<pre><code class=\"prettyprint lang-r\"># drsimonj corporate colors\ndrsimonj_colors &lt;- c(\n  `red`        = \"#d11141\",\n  `green`      = \"#00b159\",\n  `blue`       = \"#00aedb\",\n  `orange`     = \"#f37735\",\n  `yellow`     = \"#ffc425\",\n  `light grey` = \"#cccccc\",\n  `dark grey`  = \"#8c8c8c\")\n</code></pre>\n\n<p>Any changes to these colors, or addition of new colors, are done in this vector.</p>\n\n<p>Tip: use back ticks to remove naming restrictions (e.g., to include spaces for `light grey` and `dark grey`).</p>\n\n<p>Next, write a function that extracts the hex codes from this vector by name.</p>\n\n<pre><code class=\"prettyprint lang-r\">#' Function to extract drsimonj colors as hex codes\n#'\n#' @param ... Character names of drsimonj_colors \n#'\ndrsimonj_cols &lt;- function(...) {\n  cols &lt;- c(...)\n\n  if (is.null(cols))\n    return (drsimonj_colors)\n\n  drsimonj_colors[cols]\n}\n</code></pre>\n\n<p>This allows us to get hex colors in a robust and flexible way. For example, you can have all colors returned as they are, specify certain colors, in a particular order, add additional function arguments and checks, and so on:</p>\n\n<pre><code class=\"prettyprint lang-r\">drsimonj_cols()\n#&gt;        red      green       blue     orange     yellow light grey \n#&gt;  \"#d11141\"  \"#00b159\"  \"#00aedb\"  \"#f37735\"  \"#ffc425\"  \"#cccccc\" \n#&gt;  dark grey \n#&gt;  \"#8c8c8c\"\n\ndrsimonj_cols(\"red\")\n#&gt;       red \n#&gt; \"#d11141\"\n\ndrsimonj_cols(\"red\", \"blue\")\n#&gt;       red      blue \n#&gt; \"#d11141\" \"#00aedb\"\n\ndrsimonj_cols(\"blue\", \"red\")\n#&gt;      blue       red \n#&gt; \"#00aedb\" \"#d11141\"\n</code></pre>\n\n<p>It’s already possible to use these manually in plots like this:</p>\n\n<pre><code class=\"prettyprint lang-r\">ggplot(mtcars, aes(hp, mpg)) +\n    geom_point(color = drsimonj_cols(\"red\"),\n               size = 4, alpha = .8)\n</code></pre>\n\n<p><a href=\"https://svbtleusercontent.com/ork4qlkmzn9sag.png\" rel=\"nofollow\"><img src=\"https://svbtleusercontent.com/ork4qlkmzn9sag_small.png\" alt=\"unnamed-chunk-6-1.png\"></a></p>\n<h2 id=\"combine-colors-into-palettes_2\">Combine colors into palettes <a class=\"head_anchor\" href=\"#combine-colors-into-palettes_2\" rel=\"nofollow\">#</a>\n</h2>\n<p>Like all great organisations, drsimonj Inc has a few main colors (let’s say blue, green, and yellow), but the full list (above) includes other official colors used for a variety of purposes. So we can now create palettes (various combinations) of these colors. Similar to how we deal with colors, first define a list like such:</p>\n\n<pre><code class=\"prettyprint lang-r\">drsimonj_palettes &lt;- list(\n  `main`  = drsimonj_cols(\"blue\", \"green\", \"yellow\"),\n\n  `cool`  = drsimonj_cols(\"blue\", \"green\"),\n\n  `hot`   = drsimonj_cols(\"yellow\", \"orange\", \"red\"),\n\n  `mixed` = drsimonj_cols(\"blue\", \"green\", \"yellow\", \"orange\", \"red\"),\n\n  `grey`  = drsimonj_cols(\"light grey\", \"dark grey\")\n)\n</code></pre>\n\n<p>Changes or new color palettes are added in this list. We write a function to access and interpolate them like so:</p>\n\n<pre><code class=\"prettyprint lang-r\">#' Return function to interpolate a drsimonj color palette\n#'\n#' @param palette Character name of palette in drsimonj_palettes\n#' @param reverse Boolean indicating whether the palette should be reversed\n#' @param ... Additional arguments to pass to colorRampPalette()\n#'\ndrsimonj_pal &lt;- function(palette = \"main\", reverse = FALSE, ...) {\n  pal &lt;- drsimonj_palettes[[palette]]\n\n  if (reverse) pal &lt;- rev(pal)\n\n  colorRampPalette(pal, ...)\n}\n</code></pre>\n\n<p>This function gets a pallete by name from the list (<code class=\"prettyprint\">\"main\"</code> by default), has a boolean condition determining whether to reverse the order or not, and additional arguments to pass on to <code class=\"prettyprint\">colorRampPallete()</code> (such as an <code class=\"prettyprint\">alpha</code> value). This returns another function:</p>\n\n<pre><code class=\"prettyprint lang-r\">drsimonj_pal(\"cool\")\n#&gt; function (n) \n#&gt; {\n#&gt;     x &lt;- ramp(seq.int(0, 1, length.out = n))\n#&gt;     if (ncol(x) == 4L) \n#&gt;         rgb(x[, 1L], x[, 2L], x[, 3L], x[, 4L], maxColorValue = 255)\n#&gt;     else rgb(x[, 1L], x[, 2L], x[, 3L], maxColorValue = 255)\n#&gt; }\n#&gt; &lt;bytecode: 0x7fd7e497ba38&gt;\n#&gt; &lt;environment: 0x7fd7e497af78&gt;\n</code></pre>\n\n<p>This returned function will interpolate the palette colors for a certain number of levels, making it possible to create shades between our original colors. To demonstrate, we can interpolate the <code class=\"prettyprint\">\"cool\"</code> palette (which only includes two colors, green and blue) to a length of 10:</p>\n\n<pre><code class=\"prettyprint lang-r\">drsimonj_pal(\"cool\")(10)\n#&gt;  [1] \"#00AEDB\" \"#00AECC\" \"#00AEBE\" \"#00AFAF\" \"#00AFA1\" \"#00AF92\" \"#00B084\"\n#&gt;  [8] \"#00B075\" \"#00B067\" \"#00B159\"\n</code></pre>\n\n<p>These hex codes correspond to the following:</p>\n\n<p><a href=\"https://svbtleusercontent.com/gzaibhxxvzc6w.png\" rel=\"nofollow\"><img src=\"https://svbtleusercontent.com/gzaibhxxvzc6w_small.png\" alt=\"palette_fun_example-1.png\"></a></p>\n\n<p>This is what we need to create custom ggplot2 scales.</p>\n<h2 id=\"scales-for-ggplot2_2\">Scales for ggplot2 <a class=\"head_anchor\" href=\"#scales-for-ggplot2_2\" rel=\"nofollow\">#</a>\n</h2>\n<p>We’ve now got the essentials to create custom <code class=\"prettyprint\">color</code> and <code class=\"prettyprint\">fill</code> scale functions for ggplot2. There are many ways to do this. I like the approach taken in packages like <a href=\"https://github.com/ropenscilabs/ochRe\" rel=\"nofollow\"><code class=\"prettyprint\">ochRe</code></a>. One function is created for color and another for fill, and each contains a boolean argument for the relevant aesthetic being discrete or not. Here are my versions:</p>\n\n<pre><code class=\"prettyprint lang-r\">#' Color scale constructor for drsimonj colors\n#'\n#' @param palette Character name of palette in drsimonj_palettes\n#' @param discrete Boolean indicating whether color aesthetic is discrete or not\n#' @param reverse Boolean indicating whether the palette should be reversed\n#' @param ... Additional arguments passed to discrete_scale() or\n#'            scale_color_gradientn(), used respectively when discrete is TRUE or FALSE\n#'\nscale_color_drsimonj &lt;- function(palette = \"main\", discrete = TRUE, reverse = FALSE, ...) {\n  pal &lt;- drsimonj_pal(palette = palette, reverse = reverse)\n\n  if (discrete) {\n    discrete_scale(\"colour\", paste0(\"drsimonj_\", palette), palette = pal, ...)\n  } else {\n    scale_color_gradientn(colours = pal(256), ...)\n  }\n}\n\n#' Fill scale constructor for drsimonj colors\n#'\n#' @param palette Character name of palette in drsimonj_palettes\n#' @param discrete Boolean indicating whether color aesthetic is discrete or not\n#' @param reverse Boolean indicating whether the palette should be reversed\n#' @param ... Additional arguments passed to discrete_scale() or\n#'            scale_fill_gradientn(), used respectively when discrete is TRUE or FALSE\n#'\nscale_fill_drsimonj &lt;- function(palette = \"main\", discrete = TRUE, reverse = FALSE, ...) {\n  pal &lt;- drsimonj_pal(palette = palette, reverse = reverse)\n\n  if (discrete) {\n    discrete_scale(\"fill\", paste0(\"drsimonj_\", palette), palette = pal, ...)\n  } else {\n    scale_fill_gradientn(colours = pal(256), ...)\n  }\n}\n</code></pre>\n\n<p>Each of these functions specifies a palette, whether the palette is being applied based on a discrete or numeric variable, whether to reverse the palette colors, and additional arguments to pass to the relevant ggplot2 function (which differs for discrete or numeric mapping).</p>\n\n<p>Let’s see them in action.</p>\n\n<pre><code class=\"prettyprint lang-r\"># Color by discrete variable using default palette\nggplot(iris, aes(Sepal.Width, Sepal.Length, color = Species)) +\n    geom_point(size = 4) +\n    scale_color_drsimonj()\n</code></pre>\n\n<p><a href=\"https://svbtleusercontent.com/fcdmt2exddtq.png\" rel=\"nofollow\"><img src=\"https://svbtleusercontent.com/fcdmt2exddtq_small.png\" alt=\"unnamed-chunk-12-1.png\"></a></p>\n\n<pre><code class=\"prettyprint lang-r\"># Color by numeric variable with cool palette\nggplot(iris, aes(Sepal.Width, Sepal.Length, color = Sepal.Length)) +\n    geom_point(size = 4, alpha = .6) +\n    scale_color_drsimonj(discrete = FALSE, palette = \"cool\")\n</code></pre>\n\n<p><a href=\"https://svbtleusercontent.com/uqy9lvwx8wr7g.png\" rel=\"nofollow\"><img src=\"https://svbtleusercontent.com/uqy9lvwx8wr7g_small.png\" alt=\"unnamed-chunk-12-2.png\"></a></p>\n\n<pre><code class=\"prettyprint lang-r\"># Fill by discrete variable with different palette + remove legend (guide)\nggplot(mpg, aes(manufacturer, fill = manufacturer)) +\n    geom_bar() +\n    theme(axis.text.x = element_text(angle = 45, hjust = 1)) +\n    scale_fill_drsimonj(palette = \"mixed\", guide = \"none\")\n</code></pre>\n\n<p><a href=\"https://svbtleusercontent.com/utbqhlxgjkelbw.png\" rel=\"nofollow\"><img src=\"https://svbtleusercontent.com/utbqhlxgjkelbw_small.png\" alt=\"unnamed-chunk-12-3.png\"></a></p>\n<h2 id=\"package-your-work_2\">Package your work <a class=\"head_anchor\" href=\"#package-your-work_2\" rel=\"nofollow\">#</a>\n</h2>\n<p>A really wonderful next step would be to put all this wonderful code into a package for easy access by you and others. If you’re new to package development, I can’t think of a better resource to get you started than <a href=\"https://twitter.com/hadleywickham\" rel=\"nofollow\">Hadley Wickham</a>’s book, <a href=\"http://r-pkgs.had.co.nz/\" rel=\"nofollow\">R Packages</a>.</p>\n<h2 id=\"sign-off_2\">Sign off <a class=\"head_anchor\" href=\"#sign-off_2\" rel=\"nofollow\">#</a>\n</h2>\n<p>Thanks for reading and I hope this was useful for you.</p>\n\n<p>For updates of recent blog posts, follow <a href=\"https://twitter.com/drsimonj\" rel=\"nofollow\">@drsimonj</a> on Twitter, or email me at <a href=\"mailto:drsimonjackson@gmail.com\" rel=\"nofollow\">drsimonjackson@gmail.com</a> to get in touch.</p>\n\n<p>If you’d like the code that produced this blog, check out the <a href=\"https://github.com/drsimonj/blogR\" rel=\"nofollow\">blogR GitHub repository</a>.</p>"
}