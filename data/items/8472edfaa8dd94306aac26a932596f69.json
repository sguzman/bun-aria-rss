{
  "title": "Form and File: estimating running form in R",
  "link": "https://www.r-bloggers.com/2022/11/form-and-file-estimating-running-form-in-r/",
  "dc:creator": "quantixed",
  "pubDate": "Sat, 05 Nov 2022 13:05:54 +0000",
  "category": "R bloggers",
  "guid": "https://quantixed.org/?p=2849",
  "description": "<div style = \"width:60%; display: inline-block; float:left; \"> There are lots of ways for runners and cyclists to analyse training data. A key question most fitness enthusiasts want to know is “how am I doing?”. “How you are doing” is referred to as form. Unsurprisingly, form can be estimated in many ways. One method is using training stress ...</div>\n<div style = \"width: 40%; display: inline-block; float:right;\"></div>\n<div style=\"clear: both;\"></div>\n<strong>Continue reading</strong>: <a href=\"https://www.r-bloggers.com/2022/11/form-and-file-estimating-running-form-in-r/\">Form and File: estimating running form in R</a>",
  "content:encoded": "<!-- \n<div style=\"min-height: 30px;\">\n[social4i size=\"small\" align=\"align-left\"]\n</div>\n-->\n\n<div style=\"border: 1px solid; background: none repeat scroll 0 0 #EDEDED; margin: 1px; font-size: 12px;\">\n[This article was first published on  <strong><a href=\"https://quantixed.org/2022/11/05/form-and-file-estimating-running-form-in-r/\"> Rstats – quantixed</a></strong>, and kindly contributed to <a href=\"https://www.r-bloggers.com/\" rel=\"nofollow\">R-bloggers</a>].  (You can report issue about the content on this page <a href=\"https://www.r-bloggers.com/contact-us/\">here</a>)\n<hr>Want to share your content on R-bloggers?<a href=\"https://www.r-bloggers.com/add-your-blog/\" rel=\"nofollow\"> click here</a> if you have a blog, or <a href=\"http://r-posts.com/\" rel=\"nofollow\"> here</a> if you don't.\n</div>\n\n<p>There are lots of ways for runners and cyclists to analyse training data. A key question most fitness enthusiasts want to know is “how am I doing?”.</p>\n\n\n\n<p>“How you are doing” is referred to as <em>form</em>.</p>\n\n\n\n<p>Unsurprisingly, form can be estimated in many ways. One method is using training stress scores (acute training load and chronic training load) to assess form as training stress balance. The acronyms for these terms are apparently copyrighted(!) by TrainingPeaks. So I will refer to acute training load as <strong>fatigue</strong>, chronic training load as <strong>fitness</strong> and the training stress balance as <strong>form</strong>. Some notes on how these are calculated can be found lower down.</p>\n\n\n\n<p>Let’s calculate these scores for running using R.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" data-attachment-id=\"2850\" data-permalink=\"https://quantixed.org/2022/11/05/form-and-file-estimating-running-form-in-r/tss_2022-01-01_2022-11-05/\" data-orig-file=\"https://i0.wp.com/quantixed.org/wp-content/uploads/2022/11/tss_2022-01-01_2022-11-05.png?fit=2400%2C1200&#038;ssl=1\" data-orig-size=\"2400,1200\" data-comments-opened=\"1\" data-image-meta=\"{\"aperture\":\"0\",\"credit\":\"\",\"camera\":\"\",\"caption\":\"\",\"created_timestamp\":\"0\",\"copyright\":\"\",\"focal_length\":\"0\",\"iso\":\"0\",\"shutter_speed\":\"0\",\"title\":\"\",\"orientation\":\"0\"}\" data-image-title=\"tss_2022-01-01_2022-11-05\" data-image-description=\"\" data-image-caption=\"\" data-medium-file=\"https://i0.wp.com/quantixed.org/wp-content/uploads/2022/11/tss_2022-01-01_2022-11-05.png?fit=300%2C150&#038;ssl=1\" data-large-file=\"https://i0.wp.com/quantixed.org/wp-content/uploads/2022/11/tss_2022-01-01_2022-11-05.png?fit=640%2C320&#038;ssl=1\" decoding=\"async\" width=\"450\" src=\"https://i0.wp.com/quantixed.org/wp-content/uploads/2022/11/tss_2022-01-01_2022-11-05.png?resize=640%2C320&#038;ssl=1\" alt=\"\" class=\"wp-image-2850\" srcset_temp=\"https://i0.wp.com/quantixed.org/wp-content/uploads/2022/11/tss_2022-01-01_2022-11-05.png?resize=1024%2C512&#038;ssl=1 1024w, https://i0.wp.com/quantixed.org/wp-content/uploads/2022/11/tss_2022-01-01_2022-11-05.png?resize=300%2C150&#038;ssl=1 300w, https://i0.wp.com/quantixed.org/wp-content/uploads/2022/11/tss_2022-01-01_2022-11-05.png?resize=768%2C384&#038;ssl=1 768w, https://i0.wp.com/quantixed.org/wp-content/uploads/2022/11/tss_2022-01-01_2022-11-05.png?resize=1536%2C768&#038;ssl=1 1536w, https://i0.wp.com/quantixed.org/wp-content/uploads/2022/11/tss_2022-01-01_2022-11-05.png?resize=2048%2C1024&#038;ssl=1 2048w, https://i0.wp.com/quantixed.org/wp-content/uploads/2022/11/tss_2022-01-01_2022-11-05.png?w=1280&#038;ssl=1 1280w, https://i0.wp.com/quantixed.org/wp-content/uploads/2022/11/tss_2022-01-01_2022-11-05.png?w=1920&#038;ssl=1 1920w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>The plots above show my scores for this year so far. Because of the way that these scores are calculated it takes 7 days to get a meaningful Fatigue score and 42 days for a meaningful Fitness score, i.e. the calculation starts at 0 on New Year’s Day, when in reality, I carried over fitness and fatigue from December. Nonetheless this is a good way of tracking Form.</p>\n\n\n\n<p>So what does it tell us? This year I spent a lot of time in the Grey zone, only nudging into the Optimal zone during intense activity. This is because my basal activity (and therefore fitness) is quite high. This means I need to do periodisation if I want to target improvement. This is where the runner interleaves intense periods (blocks) with less active spells.</p>\n\n\n\n<h2>How to calculate the data</h2>\n\n\n\n<p>Using summary data from Garmin connect (downloadable as CSV), a runner’s average heart rate and run time for a given activity date is all that is needed to do the calculation.</p>\n\n\n<pre>\n## The aim of this script is to load and process CSV data from the Garmin Connect website.\n## This script will load all csv files in Data/ (in current wd) and filter for Running (and Treadmill Running)\n## Place one or more Garmin CSV outputs into the Data folder for inclusion. Dates for activities can be overlapping\n## duplicates are dealt with, so you can just keep adding csvs with the latest data and use the script again.\n## Use of `find_form(from, to)` enables the user to examine their running form within the specified window.\n\nrequire(ggplot2)\nrequire(hms)\nlibrary(reshape2)\nlibrary(patchwork)\n\n## Setup preferred directory structure in wd\nifelse(!dir.exists(\"Data\"), dir.create(\"Data\"), \"Folder exists already\")\nifelse(!dir.exists(\"Output\"), dir.create(\"Output\"), \"Folder exists already\")\nifelse(!dir.exists(\"Output/Data\"), dir.create(\"Output/Data\"), \"Folder exists already\")\nifelse(!dir.exists(\"Output/Plots\"), dir.create(\"Output/Plots\"), \"Folder exists already\")\nifelse(!dir.exists(\"Script\"), dir.create(\"Script\"), \"Folder exists already\")\n\n## functions\n\ngetWindowActivities <- function(activity,fromStr,toStr,df) {\n  # filter for activity\n  df_window <- subset(df,grepl(tolower(activity),tolower(df$Activity.Type)))\n  # activities within the window\n  fromDate <- as.Date(fromStr)\n  toDate <- as.Date(toStr)\n  df_window <- subset(df_window, as.Date(df_window$Date) >= fromDate & as.Date(df_window$Date) <= toDate)\n  # put them in order\n  df_window <- df_window[order(as.numeric(df_window$Date)),]\n  \n  return(df_window)\n}\n\nmakeDateDF <- function(fromStr,toStr) {\n  temp <- seq(as.Date(fromStr), as.Date(toStr), by=\"days\")\n  df <- data.frame(Date = temp,\n                   ATL = rep(0,length(temp)),\n                   CTL = rep(0,length(temp)))\n  \n  return(df)\n}\n\nprocess_load <- function(activityStr,fromStr,toStr) {\n  all_files <- list.files(\"Data\", pattern = \"*.csv\", full.names = TRUE)\n  df_all <- read.csv(all_files[1], header = TRUE, stringsAsFactors=FALSE)\n  df_all <- subset(df_all, select = c(Activity.Type,Date,Title,Distance,Time,Avg.HR))\n  for (filename in all_files[-1]) {\n    df_temp <- read.csv(filename, stringsAsFactors=FALSE)\n    # subset data because Garmin can add or remove columns and we don't need them all\n    df_temp <- subset(df_temp, select = c(Activity.Type,Date,Title,Distance,Time,Avg.HR))\n    df_all <- rbind(df_all, df_temp)\n  }\n  # remove duplicates\n  df_all <- df_all[!duplicated(df_all), ]\n  # format Date column to POSIXct\n  df_all$Date <- as.POSIXct(strptime(df_all$Date, format = \"%Y-%m-%d %H:%M:%S\"))\n  # convert average HR to numeric\n  df_all$Avg.HR <- as.numeric(df_all$Avg.HR)\n  # replace NA with average of Avg.HR\n  \n  # retrieve the activities that match activity type in the time window of interest\n  \n  df_all <- getWindowActivities(activityStr,fromStr,toStr,df_all)\n  # add a column that contains the load of each activity\n  # one way to calculate load is to multiply time in hours by avg HR and add 2.5 times avg HR\n  # this relates to load by y = ax + b of a = 0.418, b = -150\n  df_all$load <- 0.418 * ((as.numeric(lubridate::hms(df_all$Time)) / 3600 * df_all$Avg.HR) + (2.5 * df_all$Avg.HR)) - 150\n  \n  return(df_all)\n}\n\nsumDays <- function(df,daydf) {\n  df$Date <- as.Date(df$Date)\n  tempdf <- aggregate(load ~ Date, data = df, sum)\n  newdf <- merge(daydf, tempdf, all.x = TRUE)\n  newdf[is.na(newdf)] = 0\n  \n  return(newdf)\n}\n\ncalculateTL <- function(df) {\n  for (i in 1:nrow(df)) {\n    # add today's load to training load(s)\n    df$ATL[i] <- df$ATL[i] + df$load[i]\n    df$CTL[i] <- df$CTL[i] + df$load[i]\n    for (j in (i + 1) : (i + 42)) {\n      if(j > nrow(df)) {\n        break\n      }\n      df$ATL[j] <- df$ATL[i] * exp(-(j-i)/7)\n      df$CTL[j] <- df$CTL[i] * exp(-(j-i)/42)\n    }\n  }\n  df <- df[,1:3]\n  df[2] <- df[2] / 7\n  df[3] <- df[3] / 42\n  df$TSS <- df$CTL - df$ATL\n  \n  return(df)\n}\n\n# run the analysis\nfind_form <- function(from, to) {\n  # load data in and calculate load for each activity\n  mydata <- process_load(\"running\",from,to)\n  # make a data frame that has every day in our time window represented\n  tl <- makeDateDF(from,to)\n  # sum the load for each day\n  df <- sumDays(mydata,tl)\n  # calculate training loads\n  df <- calculateTL(df)\n  \n  # data frame for Form zones\n  rects <- data.frame(ystart = c(20,5,-10,-30,-50),\n                      yend = c(30,20,5,-10,-30),\n                      xstart = rep(as.Date(from), 5),\n                      xend = rep(as.Date(to), 5),\n                      col = factor(c(\"Transition\", \"Fresh\", \"Grey zone\", \"Optimal\", \"High risk\"), levels = c(\"Transition\", \"Fresh\", \"Grey zone\", \"Optimal\", \"High risk\")))\n  \n  # first plot = Fitness and Fatigure\n  p1 <- ggplot(df, aes(x = Date)) +\n    geom_area(aes(y = CTL), fill = \"#58abdf\", alpha = 0.2) +\n    geom_line(aes(y = CTL), colour = \"#58abdf\") +\n    geom_line(aes(y = ATL), colour = \"#5e3cc4\") +\n    geom_text(aes(x = as.Date(to), y = 0, vjust = \"inward\", hjust = \"inward\", label = \"Fitness\"), color = \"#58abdf\") + \n    geom_text(aes(x = as.Date(from), y = max(ATL), vjust = \"inward\", hjust = \"inward\", label = \"Fatigue\"), color = \"#5e3cc4\") +\n    labs(x = \"\", y = \"Training load per day\") +\n    theme_bw() +\n    theme(legend.position=\"none\")\n  \n  # second plot = Form\n  p2 <- ggplot(df, aes(x = Date, y = TSS)) +\n    geom_line(colour = \"#0a0a0a\", ) +\n    geom_rect(data = rects, inherit.aes = F, aes(xmin = xstart, xmax = xend, ymin = ystart, ymax = yend, fill = col), alpha = 0.2) +\n    scale_fill_manual(values = c(\"#DDB140\", \"#58ABDF\", \"#A3A3A3\", \"#67C75D\", \"#CB2A1D\")) +\n    labs(x = \"\", y = \"Form\") +\n    theme_bw() +\n    theme(legend.title=element_blank())\n  \n  # patchwork assembly\n  p3 <- p1 / p2\n  # save plots\n  ggsave(paste0(\"Output/Plots/tss_\",from,\"_\",to,\".png\"), plot = p3, width = 8, height = 4, dpi = \"print\")\n}\n\n# do the analysis\nfind_form(\"2022-01-01\",\"2022-11-05\")\n\n</pre>\n\n\n<p>I have functionalised the code to make it easier to understand how it works. Briefly, the data are read in, cleaned slightly and then “load” is calculated. We only look within a certain window for the plots, so we subset the data and then calculate the total load for every day within this time window. The stress scores are then calculated and the plots are generated using <code>ggplot</code> and <code>patchwork</code>.</p>\n\n\n\n<h2>Some notes on the stress scores</h2>\n\n\n\n<p>Although the stress score acronyms are copyrighted, what they do is not too mysterious. Fatigue is how tired you are feeling that week and Fitness is how much training you’ve done over six weeks. Put another way, Fatigue is an exponentially weighted average of load over 7 days while Fitness is an exponentially weight average of load over 42 days. Form is the difference between Fatigue and Fitness. There’s probably a function to do exponentially weighted averaging in R, but I just wrote something quick to do it in the function <code>calculateTL()</code>.</p>\n\n\n\n<p>So how do we calculate load? We simply need a measure of how stressful the activity was. We cannot take distance or time (because it doesn’t really tell us how hard we ran). Speed would be better but again terrain could be hilly or flat… If we were measuring cycling performance and we had power measurements, this would be ideal. Instead for running we can use heart rate data (as long as we have it for all activities).</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img data-attachment-id=\"2852\" data-permalink=\"https://quantixed.org/2022/11/05/form-and-file-estimating-running-form-in-r/screenshot-2022-11-05-at-10-18-55/\" data-orig-file=\"https://i0.wp.com/quantixed.org/wp-content/uploads/2022/11/Screenshot-2022-11-05-at-10.18.55.png?fit=2712%2C1082&#038;ssl=1\" data-orig-size=\"2712,1082\" data-comments-opened=\"1\" data-image-meta=\"{\"aperture\":\"0\",\"credit\":\"\",\"camera\":\"\",\"caption\":\"\",\"created_timestamp\":\"0\",\"copyright\":\"\",\"focal_length\":\"0\",\"iso\":\"0\",\"shutter_speed\":\"0\",\"title\":\"\",\"orientation\":\"0\"}\" data-image-title=\"Screenshot-2022-11-05-at-10.18.55\" data-image-description=\"\" data-image-caption=\"\" data-medium-file=\"https://i0.wp.com/quantixed.org/wp-content/uploads/2022/11/Screenshot-2022-11-05-at-10.18.55.png?fit=300%2C120&#038;ssl=1\" data-large-file=\"https://i0.wp.com/quantixed.org/wp-content/uploads/2022/11/Screenshot-2022-11-05-at-10.18.55.png?fit=640%2C256&#038;ssl=1\" decoding=\"async\" loading=\"lazy\" width=\"450\" src=\"https://i0.wp.com/quantixed.org/wp-content/uploads/2022/11/Screenshot-2022-11-05-at-10.18.55.png?resize=640%2C256&#038;ssl=1\" alt=\"\" class=\"wp-image-2852\" srcset_temp=\"https://i0.wp.com/quantixed.org/wp-content/uploads/2022/11/Screenshot-2022-11-05-at-10.18.55.png?resize=1024%2C409&#038;ssl=1 1024w, https://i0.wp.com/quantixed.org/wp-content/uploads/2022/11/Screenshot-2022-11-05-at-10.18.55.png?resize=300%2C120&#038;ssl=1 300w, https://i0.wp.com/quantixed.org/wp-content/uploads/2022/11/Screenshot-2022-11-05-at-10.18.55.png?resize=768%2C306&#038;ssl=1 768w, https://i0.wp.com/quantixed.org/wp-content/uploads/2022/11/Screenshot-2022-11-05-at-10.18.55.png?resize=1536%2C613&#038;ssl=1 1536w, https://i0.wp.com/quantixed.org/wp-content/uploads/2022/11/Screenshot-2022-11-05-at-10.18.55.png?resize=2048%2C817&#038;ssl=1 2048w, https://i0.wp.com/quantixed.org/wp-content/uploads/2022/11/Screenshot-2022-11-05-at-10.18.55.png?w=1280&#038;ssl=1 1280w, https://i0.wp.com/quantixed.org/wp-content/uploads/2022/11/Screenshot-2022-11-05-at-10.18.55.png?w=1920&#038;ssl=1 1920w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>This is how the training stress scores look in <a href=\"https://intervals.icu/\" rel=\"nofollow\" target=\"_blank\">intervals.icu</a>. I used their estimation of Load to back-calculate and apply a similar metric to my data in R.</p>\n\n\n\n<p>In short, average heart rate for an activity multiplied by duration of activity gets us very close to an approximation of load. This makes perfect sense: if you have run for 30 minutes at a given heart rate and then another day run for 1 h at the same average heart rate, it should be twice as much load. However, it wasn’t completely linear and there were some outliers, i.e. particularly hard or easy runs. So a correction was needed to account for this, and voila, I had something approximating the “load” metric used by inverals.icu. Be aware that if you are re-running my code with your own data, your values may need tweaking.</p>\n\n\n\n<p>The load calculation could be done in a more sophisticated way, by breaking down the activity into periods in each heart rate zone. However, we only need a big picture view here and the approximation done here serves the purpose.</p>\n\n\n\n<p>—</p>\n\n\n\n<p>The post title comes from “Form and File” by Archers of Load from their album “All The Nations Airports”.</p>\n\n<div style=\"border: 1px solid; background: none repeat scroll 0 0 #EDEDED; margin: 1px; font-size: 13px;\">\n<div style=\"text-align: center;\">To <strong>leave a comment</strong> for the author, please follow the link and comment on their blog: <strong><a href=\"https://quantixed.org/2022/11/05/form-and-file-estimating-running-form-in-r/\"> Rstats – quantixed</a></strong>.</div>\n<hr />\n<a href=\"https://www.r-bloggers.com/\" rel=\"nofollow\">R-bloggers.com</a> offers <strong><a href=\"https://feedburner.google.com/fb/a/mailverify?uri=RBloggers\" rel=\"nofollow\">daily e-mail updates</a></strong> about <a title=\"The R Project for Statistical Computing\" href=\"https://www.r-project.org/\" rel=\"nofollow\">R</a> news and tutorials about <a title=\"R tutorials\" href=\"https://www.r-bloggers.com/how-to-learn-r-2/\" rel=\"nofollow\">learning R</a> and many other topics. <a title=\"Data science jobs\" href=\"https://www.r-users.com/\" rel=\"nofollow\">Click here if you're looking to post or find an R/data-science job</a>.\n\n<hr>Want to share your content on R-bloggers?<a href=\"https://www.r-bloggers.com/add-your-blog/\" rel=\"nofollow\"> click here</a> if you have a blog, or <a href=\"http://r-posts.com/\" rel=\"nofollow\"> here</a> if you don't.\n</div><strong>Continue reading</strong>: <a href=\"https://www.r-bloggers.com/2022/11/form-and-file-estimating-running-form-in-r/\">Form and File: estimating running form in R</a>",
  "enclosure": "",
  "post-id": 334373
}