{
  "title": "Faster time series alignment / joins for pandas, beating R's xts package",
  "link": "",
  "published": "2011-09-24T00:00:00-07:00",
  "updated": "2011-09-24T00:00:00-07:00",
  "author": {
    "name": "Wes McKinney"
  },
  "id": "tag:wesmckinney.com,2011-09-24:/blog/faster-time-series-alignment-joins-for-pandas-beating-rs-xts-package/",
  "summary": "<blockquote>\n<p>September 29, 2015: This post is so old, I suggest you install latest\nversions of everything and try the benchmarks out yourself. -- Wes</p>\n</blockquote>\n<p>In anticipation of integrating NumPy's shiny new <code>datetime64</code> dtype into <a href=\"http://pandas.sourceforge.net\" title=\"pandas\" target=\"_blank\">pandas</a>, I set about writing some faster alignment and merging functions for ordered time series data indexed â€¦</p>",
  "content": "<blockquote>\n<p>September 29, 2015: This post is so old, I suggest you install latest\nversions of everything and try the benchmarks out yourself. -- Wes</p>\n</blockquote>\n<p>In anticipation of integrating NumPy's shiny new <code>datetime64</code> dtype into <a href=\"http://pandas.sourceforge.net\" title=\"pandas\" target=\"_blank\">pandas</a>, I set about writing some faster alignment and merging functions for ordered time series data indexed by datetime64 timestamps. Many people have pointed me to the widely used R <a href=\"http://cran.r-project.org/web/packages/xts/index.html\" title=\"xts\" target=\"_blank\">xts</a> package as a baseline for highly optimized joining functions.</p>\n<p>Anyway, long story short, with a little NumPy- and Cython-fu I think I've matched or beaten xts for almost all of its supported join types by up to 40% (left/outer/inner) using the <code>merge.xts</code> function.</p>\n<p>In a <a href=\"http://wesmckinney.com/blog/?p=215\" title=\"Indexing blog article\" target=\"_blank\">blog article</a> earlier today I wrote about some of the performance problems I had to address to do this. The rest of the joining code is pretty straightforward Cython code. Though it'll probably be a few weeks before this new code gets incorporated into <code>DataFrame.join</code>. You'll just have to take my word for it that I'm doing an apples-to-apples comparison (or read the source yourself) =)</p>\n<h3>Python benchmarks</h3>\n<p>Here are the Python timings in milliseconds for joining two time series data sets. The column labels are the lengths (in scientific notation, from 100 through 1,000,000). The two timings are with two univariate time series and two collections of 5 time series.</p>\n<p><strong>EDIT (9/24/2011):</strong> after corresponding with the xts author, Jeff Ryan, I reran the benchmarks with the code modified to ensure that garbage collection time isn't being included in the runtime. The results after the change to the benchmark are less disparate than before. I also tweaked the Cython algos to determine the outer/inner join time index and re-ran the benchmarks. In the 1e6 outer join case the new algo trimmed 8 ms off, 4-5ms in the inner join case. Whenever I develop a strong desire to hack up a pile of spaghetti-like Cython code (combining the index union/intersection routines with the take / row-copying code) I can probably shave off another few millis&#8230;</p>\n<div class=\"github\"><pre><span></span><code><span class=\"n\">Python</span><span class=\"w\"> </span><span class=\"n\">Benchmark</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"mi\">9</span><span class=\"o\">/</span><span class=\"mi\">25</span><span class=\"w\"></span>\n\n<span class=\"n\">Joining</span><span class=\"w\"> </span><span class=\"n\">two</span><span class=\"w\"> </span><span class=\"n\">univariate</span><span class=\"w\"> </span><span class=\"n\">time</span><span class=\"w\"> </span><span class=\"n\">series</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"mf\">1e2</span><span class=\"w\">      </span><span class=\"mf\">1e3</span><span class=\"w\">      </span><span class=\"mf\">1e4</span><span class=\"w\">     </span><span class=\"mf\">1e5</span><span class=\"w\">    </span><span class=\"mf\">1e6</span><span class=\"w\"></span>\n<span class=\"n\">outer</span><span class=\"w\">  </span><span class=\"mf\">0.0605</span><span class=\"w\">   </span><span class=\"mf\">0.0637</span><span class=\"w\">   </span><span class=\"mf\">0.1966</span><span class=\"w\">  </span><span class=\"mf\">1.898</span><span class=\"w\">  </span><span class=\"mf\">26.26</span><span class=\"w\"></span>\n<span class=\"n\">left</span><span class=\"w\">   </span><span class=\"mf\">0.0187</span><span class=\"w\">   </span><span class=\"mf\">0.02282</span><span class=\"w\">  </span><span class=\"mf\">0.1157</span><span class=\"w\">  </span><span class=\"mf\">1.023</span><span class=\"w\">  </span><span class=\"mf\">13.89</span><span class=\"w\"></span>\n<span class=\"n\">inner</span><span class=\"w\">  </span><span class=\"mf\">0.04526</span><span class=\"w\">  </span><span class=\"mf\">0.05052</span><span class=\"w\">  </span><span class=\"mf\">0.1523</span><span class=\"w\">  </span><span class=\"mf\">1.382</span><span class=\"w\">  </span><span class=\"mf\">22.25</span><span class=\"w\"></span>\n\n<span class=\"n\">Joining</span><span class=\"w\"> </span><span class=\"n\">two</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"o\">-</span><span class=\"n\">variate</span><span class=\"w\"> </span><span class=\"n\">time</span><span class=\"w\"> </span><span class=\"n\">series</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"mf\">1e2</span><span class=\"w\">      </span><span class=\"mf\">1e3</span><span class=\"w\">      </span><span class=\"mf\">1e4</span><span class=\"w\">     </span><span class=\"mf\">1e5</span><span class=\"w\">    </span><span class=\"mf\">1e6</span><span class=\"w\"></span>\n<span class=\"n\">outer</span><span class=\"w\">  </span><span class=\"mf\">0.07944</span><span class=\"w\">  </span><span class=\"mf\">0.0638</span><span class=\"w\">   </span><span class=\"mf\">0.3178</span><span class=\"w\">  </span><span class=\"mf\">6.498</span><span class=\"w\">  </span><span class=\"mf\">67.46</span><span class=\"w\"></span>\n<span class=\"n\">left</span><span class=\"w\">   </span><span class=\"mf\">0.0255</span><span class=\"w\">   </span><span class=\"mf\">0.03512</span><span class=\"w\">  </span><span class=\"mf\">0.2467</span><span class=\"w\">  </span><span class=\"mf\">4.711</span><span class=\"w\">  </span><span class=\"mf\">51.88</span><span class=\"w\"></span>\n<span class=\"n\">inner</span><span class=\"w\">  </span><span class=\"mf\">0.06176</span><span class=\"w\">  </span><span class=\"mf\">0.05262</span><span class=\"w\">  </span><span class=\"mf\">0.2283</span><span class=\"w\">  </span><span class=\"mf\">5.267</span><span class=\"w\">  </span><span class=\"mf\">56.46</span><span class=\"w\"></span>\n</code></pre></div>\n\n<p><strong>EDIT 9/28:</strong> I put in some work integrating the new merging routines throughout DataFrame and friends in pandas and added a new <code>Int64Index</code> class to facilitate fast joining of time series data. Here are the updated benchmarks, which now have pandas a bit slower than xts for outer/inner joins in the univariate case but still significantly faster in the multivariate case:</p>\n<div class=\"github\"><pre><span></span><code><span class=\"n\">Python</span><span class=\"w\"> </span><span class=\"n\">Benchmark</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"mi\">9</span><span class=\"o\">/</span><span class=\"mi\">28</span><span class=\"w\"> </span><span class=\"n\">post</span><span class=\"w\"> </span><span class=\"n\">integration</span><span class=\"w\"></span>\n\n<span class=\"n\">Joining</span><span class=\"w\"> </span><span class=\"n\">two</span><span class=\"w\"> </span><span class=\"n\">univariate</span><span class=\"w\"> </span><span class=\"n\">time</span><span class=\"w\"> </span><span class=\"n\">series</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"mf\">1e2</span><span class=\"w\">     </span><span class=\"mf\">1e3</span><span class=\"w\">     </span><span class=\"mf\">1e4</span><span class=\"w\">     </span><span class=\"mf\">1e5</span><span class=\"w\">    </span><span class=\"mf\">1e6</span><span class=\"w\"></span>\n<span class=\"n\">outer</span><span class=\"w\">  </span><span class=\"mf\">0.4501</span><span class=\"w\">  </span><span class=\"mf\">0.314</span><span class=\"w\">   </span><span class=\"mf\">0.5362</span><span class=\"w\">  </span><span class=\"mf\">3.162</span><span class=\"w\">  </span><span class=\"mf\">30.78</span><span class=\"w\"></span>\n<span class=\"n\">left</span><span class=\"w\">   </span><span class=\"mf\">0.2742</span><span class=\"w\">  </span><span class=\"mf\">0.2879</span><span class=\"w\">  </span><span class=\"mf\">0.408</span><span class=\"w\">   </span><span class=\"mf\">2.025</span><span class=\"w\">  </span><span class=\"mf\">19.84</span><span class=\"w\"></span>\n<span class=\"n\">inner</span><span class=\"w\">  </span><span class=\"mf\">0.2715</span><span class=\"w\">  </span><span class=\"mf\">0.2863</span><span class=\"w\">  </span><span class=\"mf\">0.4306</span><span class=\"w\">  </span><span class=\"mf\">2.504</span><span class=\"w\">  </span><span class=\"mf\">26.64</span><span class=\"w\"></span>\n\n<span class=\"n\">Joining</span><span class=\"w\"> </span><span class=\"n\">two</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"o\">-</span><span class=\"n\">variate</span><span class=\"w\"> </span><span class=\"n\">time</span><span class=\"w\"> </span><span class=\"n\">series</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"mf\">1e2</span><span class=\"w\">      </span><span class=\"mf\">1e3</span><span class=\"w\">    </span><span class=\"mf\">1e4</span><span class=\"w\">     </span><span class=\"mf\">1e5</span><span class=\"w\">    </span><span class=\"mf\">1e6</span><span class=\"w\"></span>\n<span class=\"n\">outer</span><span class=\"w\">  </span><span class=\"mf\">0.4507</span><span class=\"w\">  </span><span class=\"mf\">0.3375</span><span class=\"w\">  </span><span class=\"mf\">0.6158</span><span class=\"w\">  </span><span class=\"mf\">7.028</span><span class=\"w\">  </span><span class=\"mf\">71.34</span><span class=\"w\"></span>\n<span class=\"n\">left</span><span class=\"w\">   </span><span class=\"mf\">0.2959</span><span class=\"w\">  </span><span class=\"mf\">0.3184</span><span class=\"w\">  </span><span class=\"mf\">0.4927</span><span class=\"w\">  </span><span class=\"mf\">5.068</span><span class=\"w\">  </span><span class=\"mf\">55.2</span><span class=\"w\"></span>\n<span class=\"n\">inner</span><span class=\"w\">  </span><span class=\"mf\">0.2767</span><span class=\"w\">  </span><span class=\"mf\">0.305</span><span class=\"w\">   </span><span class=\"mf\">0.5368</span><span class=\"w\">  </span><span class=\"mf\">5.782</span><span class=\"w\">  </span><span class=\"mf\">59.65</span><span class=\"w\"></span>\n</code></pre></div>\n\n<p>As you can see in the 1 million row case there is an additional 4-5 ms of overhead across the board which largely has to do with handling types other than floating point. With some effort I could eliminate this overhead but I'm going to leave it for now.</p>\n<p>And the source code for the benchmark:</p>\n<div class=\"github\"><pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">pandas</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">import</span> <span class=\"nn\">gc</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">bench_python</span><span class=\"p\">(</span><span class=\"n\">pct_overlap</span><span class=\"o\">=</span><span class=\"mf\">0.20</span><span class=\"p\">,</span> <span class=\"n\">K</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n    <span class=\"n\">ns</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">]</span>\n    <span class=\"n\">iterations</span> <span class=\"o\">=</span> <span class=\"mi\">50</span>\n    <span class=\"n\">pct_overlap</span> <span class=\"o\">=</span> <span class=\"mf\">0.2</span>\n    <span class=\"n\">kinds</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;outer&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;left&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;inner&#39;</span><span class=\"p\">]</span>\n\n    <span class=\"n\">all_results</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n    <span class=\"k\">for</span> <span class=\"n\">logn</span> <span class=\"ow\">in</span> <span class=\"n\">ns</span><span class=\"p\">:</span>\n        <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"mi\">10</span><span class=\"o\">**</span><span class=\"n\">logn</span>\n        <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">arange</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">int64</span><span class=\"p\">)</span>\n        <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">arange</span><span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">*</span> <span class=\"n\">pct_overlap</span><span class=\"p\">,</span> <span class=\"n\">n</span> <span class=\"o\">*</span> <span class=\"n\">pct_overlap</span> <span class=\"o\">+</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">int64</span><span class=\"p\">)</span>\n        <span class=\"n\">a_frame</span> <span class=\"o\">=</span> <span class=\"n\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">randn</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">K</span><span class=\"p\">),</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">K</span><span class=\"p\">))</span>\n        <span class=\"n\">b_frame</span> <span class=\"o\">=</span> <span class=\"n\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">randn</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">K</span><span class=\"p\">),</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">K</span><span class=\"p\">,</span> <span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">K</span><span class=\"p\">))</span>\n        <span class=\"n\">all_results</span><span class=\"p\">[</span><span class=\"n\">logn</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"k\">for</span> <span class=\"n\">kind</span> <span class=\"ow\">in</span> <span class=\"n\">kinds</span><span class=\"p\">:</span>\n            <span class=\"n\">gc</span><span class=\"o\">.</span><span class=\"n\">disable</span><span class=\"p\">();</span> <span class=\"n\">_s</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">clock</span><span class=\"p\">()</span>\n            <span class=\"c1\"># do the join</span>\n            <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">iterations</span><span class=\"p\">):</span>\n                <span class=\"n\">a_frame</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">b_frame</span><span class=\"p\">,</span> <span class=\"n\">how</span><span class=\"o\">=</span><span class=\"n\">kind</span><span class=\"p\">)</span>\n\n            <span class=\"n\">elapsed</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">clock</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"n\">_s</span><span class=\"p\">;</span> <span class=\"n\">gc</span><span class=\"o\">.</span><span class=\"n\">enable</span><span class=\"p\">()</span>\n            <span class=\"n\">result</span><span class=\"p\">[</span><span class=\"n\">kind</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">elapsed</span> <span class=\"o\">/</span> <span class=\"n\">iterations</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"mi\">1000</span>\n    <span class=\"k\">return</span> <span class=\"n\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">all_results</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"n\">kinds</span><span class=\"p\">)</span>\n</code></pre></div>\n\n<h3>R/xts benchmarks</h3>\n<p>And the R benchmark using xts. The results for the smaller datasets are unreliable due to the low precision of <code>system.time</code>.</p>\n<div class=\"github\"><pre><span></span><code><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"n\">Benchmark</span><span class=\"w\"></span>\n\n<span class=\"n\">Joining</span><span class=\"w\"> </span><span class=\"n\">two</span><span class=\"w\"> </span><span class=\"n\">univariate</span><span class=\"w\"> </span><span class=\"n\">time</span><span class=\"w\"> </span><span class=\"n\">series</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"mf\">1e2</span><span class=\"w\">  </span><span class=\"mf\">1e3</span><span class=\"w\">  </span><span class=\"mf\">1e4</span><span class=\"w\">  </span><span class=\"mf\">1e5</span><span class=\"w\">   </span><span class=\"mf\">1e6</span><span class=\"w\"></span>\n<span class=\"n\">outer</span><span class=\"w\"> </span><span class=\"mf\">0.30</span><span class=\"w\"> </span><span class=\"mf\">0.26</span><span class=\"w\"> </span><span class=\"mf\">0.48</span><span class=\"w\"> </span><span class=\"mf\">3.12</span><span class=\"w\"> </span><span class=\"mf\">28.58</span><span class=\"w\"></span>\n<span class=\"n\">left</span><span class=\"w\">  </span><span class=\"mf\">0.22</span><span class=\"w\"> </span><span class=\"mf\">0.24</span><span class=\"w\"> </span><span class=\"mf\">0.36</span><span class=\"w\"> </span><span class=\"mf\">2.78</span><span class=\"w\"> </span><span class=\"mf\">24.18</span><span class=\"w\"></span>\n<span class=\"n\">inner</span><span class=\"w\"> </span><span class=\"mf\">0.20</span><span class=\"w\"> </span><span class=\"mf\">0.24</span><span class=\"w\"> </span><span class=\"mf\">0.40</span><span class=\"w\"> </span><span class=\"mf\">2.42</span><span class=\"w\"> </span><span class=\"mf\">21.06</span><span class=\"w\"></span>\n\n<span class=\"n\">Joining</span><span class=\"w\"> </span><span class=\"n\">two</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"o\">-</span><span class=\"n\">variate</span><span class=\"w\"> </span><span class=\"n\">time</span><span class=\"w\"> </span><span class=\"n\">series</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"mf\">1e2</span><span class=\"w\">  </span><span class=\"mf\">1e3</span><span class=\"w\">  </span><span class=\"mf\">1e4</span><span class=\"w\">   </span><span class=\"mf\">1e5</span><span class=\"w\">   </span><span class=\"mf\">1e6</span><span class=\"w\"></span>\n<span class=\"n\">outer</span><span class=\"w\"> </span><span class=\"mf\">0.26</span><span class=\"w\"> </span><span class=\"mf\">0.46</span><span class=\"w\"> </span><span class=\"mf\">1.30</span><span class=\"w\"> </span><span class=\"mf\">11.56</span><span class=\"w\"> </span><span class=\"mf\">97.02</span><span class=\"w\"></span>\n<span class=\"n\">left</span><span class=\"w\">  </span><span class=\"mf\">0.34</span><span class=\"w\"> </span><span class=\"mf\">0.28</span><span class=\"w\"> </span><span class=\"mf\">1.06</span><span class=\"w\"> </span><span class=\"mf\">10.04</span><span class=\"w\"> </span><span class=\"mf\">85.72</span><span class=\"w\"></span>\n<span class=\"n\">inner</span><span class=\"w\"> </span><span class=\"mf\">0.30</span><span class=\"w\"> </span><span class=\"mf\">0.28</span><span class=\"w\"> </span><span class=\"mf\">0.94</span><span class=\"w\">  </span><span class=\"mf\">8.02</span><span class=\"w\"> </span><span class=\"mf\">67.22</span><span class=\"w\"></span>\n</code></pre></div>\n\n<p>The Python code for the benchmark is all found <a href=\"https://github.com/wesm/pandas/blob/fast-merge/scripts/bench_join.py\" title=\"GitHub python\" target=\"_blank\">here</a>.</p>\n<p>Here is the R code for the benchmark (<a href=\"https://github.com/wesm/pandas/blob/fast-merge/scripts/bench_join.R\" title=\"R github\" target=\"_blank\">GitHub link</a>):</p>\n<div class=\"github\"><pre><span></span><code><span class=\"n\">library</span><span class=\"p\">(</span><span class=\"n\">xts</span><span class=\"p\">)</span><span class=\"w\"></span>\n\n<span class=\"n\">iterations</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"mi\">50</span><span class=\"w\"></span>\n\n<span class=\"n\">ns</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1000</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">10000</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">100000</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1000000</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"n\">kinds</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"p\">(</span><span class=\"ss\">&quot;outer&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"ss\">&quot;left&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"ss\">&quot;inner&quot;</span><span class=\"p\">)</span><span class=\"w\"></span>\n\n<span class=\"k\">result</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">matrix</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">nrow</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ncol</span><span class=\"o\">=</span><span class=\"n\">length</span><span class=\"p\">(</span><span class=\"n\">ns</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"mi\">100000</span><span class=\"w\"></span>\n<span class=\"n\">pct</span><span class=\"p\">.</span><span class=\"n\">overlap</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"mf\">0.2</span><span class=\"w\"></span>\n\n<span class=\"n\">k</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"></span>\n\n<span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">ni</span><span class=\"w\"> </span><span class=\"ow\">in</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"err\">:</span><span class=\"n\">length</span><span class=\"p\">(</span><span class=\"n\">ns</span><span class=\"p\">))</span><span class=\"err\">{</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">ns</span><span class=\"o\">[</span><span class=\"n\">ni</span><span class=\"o\">]</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"n\">rng1</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"err\">:</span><span class=\"n\">n</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"n\">offset</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"p\">.</span><span class=\"k\">integer</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">pct</span><span class=\"p\">.</span><span class=\"n\">overlap</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"n\">rng2</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">rng1</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">offset</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">xts</span><span class=\"p\">(</span><span class=\"n\">matrix</span><span class=\"p\">(</span><span class=\"n\">rnorm</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">nrow</span><span class=\"o\">=</span><span class=\"n\">n</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ncol</span><span class=\"o\">=</span><span class=\"n\">k</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">          </span><span class=\"k\">as</span><span class=\"p\">.</span><span class=\"n\">POSIXct</span><span class=\"p\">(</span><span class=\"n\">Sys</span><span class=\"p\">.</span><span class=\"nc\">Date</span><span class=\"p\">())</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">rng1</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">xts</span><span class=\"p\">(</span><span class=\"n\">matrix</span><span class=\"p\">(</span><span class=\"n\">rnorm</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">nrow</span><span class=\"o\">=</span><span class=\"n\">n</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ncol</span><span class=\"o\">=</span><span class=\"n\">k</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">          </span><span class=\"k\">as</span><span class=\"p\">.</span><span class=\"n\">POSIXct</span><span class=\"p\">(</span><span class=\"n\">Sys</span><span class=\"p\">.</span><span class=\"nc\">Date</span><span class=\"p\">())</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">rng2</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"n\">timing</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"nc\">numeric</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"ow\">in</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"err\">:</span><span class=\"mi\">3</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"err\">{</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"n\">kind</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">kinds</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"k\">for</span><span class=\"p\">(</span><span class=\"n\">j</span><span class=\"w\"> </span><span class=\"ow\">in</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"err\">:</span><span class=\"n\">iterations</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"err\">{</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"n\">gc</span><span class=\"p\">()</span><span class=\"w\">  </span><span class=\"err\">#</span><span class=\"w\"> </span><span class=\"n\">just</span><span class=\"w\"> </span><span class=\"k\">to</span><span class=\"w\"> </span><span class=\"n\">be</span><span class=\"w\"> </span><span class=\"n\">sure</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"n\">timing</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"k\">system</span><span class=\"p\">.</span><span class=\"nc\">time</span><span class=\"p\">(</span><span class=\"k\">merge</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"n\">y</span><span class=\"p\">,</span><span class=\"k\">join</span><span class=\"o\">=</span><span class=\"n\">kind</span><span class=\"p\">))</span><span class=\"o\">[</span><span class=\"n\">3</span><span class=\"o\">]</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"err\">}</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"n\">#timing</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"k\">system</span><span class=\"p\">.</span><span class=\"nc\">time</span><span class=\"p\">(</span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">j</span><span class=\"w\"> </span><span class=\"ow\">in</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"err\">:</span><span class=\"n\">iterations</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">merge</span><span class=\"p\">.</span><span class=\"n\">xts</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">join</span><span class=\"o\">=</span><span class=\"n\">kind</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"err\">#</span><span class=\"w\">                      </span><span class=\"n\">gcFirst</span><span class=\"o\">=</span><span class=\"n\">F</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"n\">#timing</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"p\">.</span><span class=\"n\">list</span><span class=\"p\">(</span><span class=\"n\">timing</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"k\">result</span><span class=\"o\">[</span><span class=\"n\">i, ni</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">mean</span><span class=\"p\">(</span><span class=\"n\">timing</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"mi\">1000</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"n\">#result</span><span class=\"o\">[</span><span class=\"n\">i, ni</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">timing</span><span class=\"err\">$</span><span class=\"n\">elapsed</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"n\">iterations</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"mi\">1000</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"err\">}</span><span class=\"w\"></span>\n<span class=\"err\">}</span><span class=\"w\"></span>\n\n<span class=\"n\">rownames</span><span class=\"p\">(</span><span class=\"k\">result</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">kinds</span><span class=\"w\"></span>\n<span class=\"n\">colnames</span><span class=\"p\">(</span><span class=\"k\">result</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"nf\">log10</span><span class=\"p\">(</span><span class=\"n\">ns</span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>"
}