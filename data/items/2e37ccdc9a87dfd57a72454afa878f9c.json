{
  "id": "tag:blogger.com,1999:blog-5825758052688213474.post-4651288390164769572",
  "published": "2015-12-04T16:37:00.000-08:00",
  "updated": "2017-03-16T11:38:50.685-07:00",
  "title": "Replacing Sawzall — a case study in domain-specific language migration",
  "content": "by AARON BECKER<br/><br/><div><i>In a previous post, we described how data scientists at Google used Sawzall to perform powerful, scalable analysis. However, over the last three years we’ve eliminated almost all our Sawzall code, and now the niche that Sawzall occupied in our software ecosystem is mostly filled by Go. In this post, we’ll describe Sawzall’s role in Google’s analysis ecosystem, explain some of the problems we encountered as Sawzall use increased which motivated our migration, and detail the techniques we applied to achieve language-agnostic analysis while maintaining strong access controls and the ability to write fast, scalable analyses.</i></div><b id=\"docs-internal-guid-275a6a72-6ebc-d603-cb56-2598afef4179\" style=\"font-weight: normal;\"><br /></b><br /><br />Any successful programming language has its own evolutionary niche, a set of problems that it solves unusually well. Sometimes this niche is created by language features. For example, <a href=\"http://www.erlang.org/\">Erlang</a> has strong tools for constructing distributed systems built into the language. In other cases, features such as standard libraries and a language’s community of users are more important — the main reason that R is a great language for statistics is that it’s widely used by statisticians and has a huge variety of useful statistics libraries. In order to understand the reason for Sawzall’s decline, we have to first understand the niche that it occupied in Google’s software ecosystem.<br /><br /><a href=\"http://www.unofficialgoogledatascience.com/2015/09/on-procedural-and-declarative.html\">Our previous discussion of Sawzall</a> focused on one of Sawzall’s biggest strengths —&nbsp;it makes it easy to write powerful analysis scripts quickly for tasks like computing statistical aggregates or computing a <a href=\"http://www.unofficialgoogledatascience.com/2015/08/an-introduction-to-poisson-bootstrap_26.html\">Poisson bootstrap</a>. As such, it’s great for writing quick one-off analysis code and iterating on it as we come to a better understanding of the data. The name of the language is suggestive —&nbsp;the actual physical&nbsp;<a href=\"https://www.milwaukeetool.com/power-tools/corded/6519-31\">Sawzall</a>®&nbsp;(trademark Milwaukee Tool) that the language is named after is a versatile hand tool that can make quick work of logs.<br /><br /><div class=\"separator\" style=\"clear: both; text-align: center;\"></div><table align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: center;\"><tbody><tr><td style=\"text-align: center;\"><a href=\"http://2.bp.blogspot.com/-rK08SSPyGuk/VmIkGErJemI/AAAAAAAAamQ/ZWA403fdQyQ/s1600/Sawzall-Reciprocating-Saw.jpg\" imageanchor=\"1\" style=\"margin-left: auto; margin-right: auto;\"><img border=\"0\" src=\"http://2.bp.blogspot.com/-rK08SSPyGuk/VmIkGErJemI/AAAAAAAAamQ/ZWA403fdQyQ/s400/Sawzall-Reciprocating-Saw.jpg\" /></a></td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\">Figure 1: A physical Sawzall sawing physical logs.</td></tr></tbody></table><br />Sawzall also has important strengths in another critical area —&nbsp;access control and auditing. The input to analysis jobs often includes personally identifiable information like IP addresses, and there are strict rules that limit what analysts can do with this data. We need to be able to answer several questions about any analysis before it runs:<br /><ul><li>Should this analyst have access to this data at all?&nbsp;</li><li>If they should have access, which fields should they be able to read? Our input records are <a href=\"https://developers.google.com/protocol-buffers/?hl=en\">protocol buffers</a>, and we’ve annotated the fields of our logged protos to indicate which ones may contain sensitive data (e.g. a user’s IP address) and which ones are innocuous (e.g. the amount of time it took to process a request). Reading sensitive fields requires a strong justification.</li><li>If they’re reading sensitive fields, what code are they actually running? We want to be able to audit the actual code that’s being used to do any sensitive analysis.</li></ul><br />In short, we want fine-grained control over who has access to data, and visibility into what they’re doing with it. Sawzall provided a good solution to all these issues. We ran a centralized service called Sawmill that managed all Sawzall analysis on our logs. <br /><br /><table align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: center;\"><tbody><tr><td style=\"text-align: center;\"><a href=\"http://4.bp.blogspot.com/-AyEeYtpw9b0/VmIdtsY1KsI/AAAAAAAAalQ/pfkDvpRTW7M/s1600/sawzall.png\" imageanchor=\"1\" style=\"margin-left: auto; margin-right: auto;\"><img border=\"0\" height=\"196\" src=\"http://4.bp.blogspot.com/-AyEeYtpw9b0/VmIdtsY1KsI/AAAAAAAAalQ/pfkDvpRTW7M/s640/sawzall.png\" width=\"640\" /></a></td></tr><tr><td class=\"tr-caption\">Figure 2: In the Sawmill execution environment, users send their Sawzall analysis scripts to Sawmill Server, which performs authorization, applies access filters, and launches a MapReduce job on the user’s behalf in a restricted execution zone where the user isn’t allowed to run arbitrary binaries.</td></tr></tbody></table><br /><div dir=\"ltr\" style=\"margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"vertical-align: baseline;\">You could send your Sawzall code to Sawmill, and it would make sure that you have access to the data that you want to analyze. If you do, it would add some code to the beginning of your script to filter out any fields that you don’t have access to and record your script for auditing purposes. Then it would start a MapReduce which runs your Sawzall code on each worker. Since your Sawzall code runs inside a sandbox, it cannot get access to the raw, unfiltered logs data. It only sees filtered input.</span></div><div dir=\"ltr\" style=\"margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"vertical-align: baseline;\"><br /></span></div><h2><span style=\"vertical-align: baseline;\"><br /></span></h2><h2><span style=\"vertical-align: baseline;\">Problems with Sawzall</span></h2><br />This setup is great for access control and auditing, but it also creates some problems. Since we’re relying on the Sawzall sandbox to enforce our access policies, we have to make sure that un-sandboxed code doesn’t run alongside our Sawzall analysis. If the analysis could call unsafe code (e.g. user-controlled C++ functions), it could bypass our sandbox and read sensitive fields before they’re filtered. Sawzall does provide a way of calling functions written in other languages as though they were Sawzall functions. These functions are called intrinsics, and they provide a bridge between Sawzall and the rest of the world.<br /><br />At Google, intrinsics were commonly used to provide an interface to large, complex C++ libraries and to interact with external services via RPC. However, since intrinsics provide a way to break out of the Sawzall sandbox, each one needed to be carefully vetted for safety before it could be whitelisted for use. As more and more people started using Sawzall, the demand for new intrinsics grew quickly and became a common point of friction for interoperability with services or libraries from other teams within Google.<br /><br />The need to prevent arbitrary un-sandboxed code from interacting with Sawzall analysis also put strong constraints on the execution environment where analysis runs. For example, if a user could run arbitrary programs alongside their sandboxed analysis, they would be able to inspect the memory of their Sawzall program and extract unfiltered data that they shouldn’t have access to. To avoid this scenario, we had to reserve compute resources for logs analysis with restrictions on what kinds of programs can be run and who can launch them, making our analysis infrastructure much less flexible.<br /><br />These problems were manageable when Sawzall occupied a small, well-contained niche. But as the community using Sawzall became larger and more diverse, the problems became more acute and the limitations of a domain-specific language became more important. <br /><br />Sawzall may be an excellent hand tool, but many teams at Google came to need something more akin to heavy industrial machinery. Sawzall is at its best for small, focused analyses. While Sawmill itself is large, sophisticated infrastructure that allows Sawzall analysis to scale up and process vast amounts of data efficiently, Sawzall is not well-suited for building large integrated pipelines with sophisticated testing and release management. Teams built their core business logic in Sawzall, but without an object system or any support for user-defined interfaces it became very hard to manage a large codebase. These problems aren’t unique to Google —&nbsp;other companies that have adopted Sawzall for their analytics needs have reported <a href=\"https://www.quantcast.com/blog/language-wrangling-running-googles-sawzall-on-quantcasts-mapreduce-cluster/\">similar difficulties</a>.<br /><br />Sawzall likely could have continued as a small, niche language, but it was sufficiently useful that people wanted much more out of it, and those needs grew beyond what the language and its associated access control and execution model could provide.<br /><br /><h2><br /></h2><h2>Language-Agnostic Analysis</h2><br />The first step toward solving these problems was removing the tight link between access controls on logs data and the Sawzall execution model. By placing these controls outside of the Sawzall sandbox, we can open the door for analysis written in any language without weakening our ability to control access to sensitive data.<br /><br />If we allow users to run arbitrary un-sandboxed code on the data, we have to change the model for how we filter out sensitive fields. Once the data gets to the user’s binary, it’s too late for filtering. We therefore need a separate service that proxies access to the raw data and enforces our access control policies before the data ever makes its way to analysts.<br /><br />We’ve built just such a system, called the <b>logs proxy</b>. It provides a language-agnostic interface for reading logs data, and it applies all the necessary filtering logic before sending the data along to clients.  There are a few interesting wrinkles to this process (for example, what if I want to do a join that’s keyed by a field that will be filtered out?), and we’ve had to solve some tough performance optimization problems to handle the scale of analysis at Google, but the fundamental idea is very simple.<br /><br /><div><br /></div><div><table align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: center;\"><tbody><tr><td style=\"text-align: center;\"><a href=\"http://4.bp.blogspot.com/-5wq6FNPUAa4/VmIetDDj6AI/AAAAAAAAal0/IGWCB4oGfXE/s1600/lingo.png\" imageanchor=\"1\" style=\"margin-left: auto; margin-right: auto;\"><img border=\"0\" height=\"180\" src=\"http://4.bp.blogspot.com/-5wq6FNPUAa4/VmIetDDj6AI/AAAAAAAAal0/IGWCB4oGfXE/s640/lingo.png\" width=\"640\" /></a></td></tr><tr><td class=\"tr-caption\">Figure 3: In the logs proxy execution environment, user analysis code never has direct access to logs data. No restricted zone is necessary, because the logs proxy filters out sensitive fields before they’re available to analysis code.</td></tr></tbody></table></div><div><br /></div><div>Since the logs proxy decouples our data access policy from the programming language used for analysis, individual teams now have more freedom to choose the language that best fits their needs. However, since analysis libraries can often get very complicated, and multiple teams often share common data sources, there is an economy of scale in choosing a common language for most analysis.<br /><br />At Google, most Sawzall analysis has been replaced by <a href=\"https://golang.org/\">Go</a>. Go has the advantage of being a relatively small language which is easy to learn and integrates well with Google’s production infrastructure. Fast compile times and garbage collection make Go a natural fit for iterative development. To ease the process of migrating from Sawzall, we’ve developed a set of Go libraries that we call <b>Lingo</b> (for Logs in Go). Lingo includes a table aggregation library that brings the powerful features of Sawzall aggregation tables to Go, using reflection to support user-defined types for table keys and values. It also provides default behavior for setting up and running a MapReduce that reads data from the logs proxy. The result is that Lingo analysis code is often as concise and simple as (and sometimes simpler than) the Sawzall equivalent.<br /><br /></div><div>As an example, consider the spam classification task from an <a href=\"http://www.unofficialgoogledatascience.com/2015/09/on-procedural-and-declarative.html\">earlier post on Sawzall</a> on this site, where the goal is to measure the impact of two versions of a spam classifier on different websites. Here’s how that code looks in Lingo:<br /><div><br /></div><span style=\"color: magenta; font-family: Courier New, Courier, monospace;\">package</span><span style=\"font-family: Courier New, Courier, monospace;\"> spamcount</span></div><div><span style=\"font-family: Courier New, Courier, monospace;\"><br /><span style=\"color: magenta;\">import</span> (<br /><span style=\"color: #a64d79;\">&nbsp; \"google/spam\"<br />&nbsp; \"google/table\"<br />&nbsp; \"google/webpage\"</span></span></div><div><span style=\"font-family: 'Courier New', Courier, monospace;\">)</span></div><div><span style=\"font-family: Courier New, Courier, monospace;\"><br /><span style=\"color: #e06666;\">// For each site, track whether or not it’s spam according to</span></span></div><div><span style=\"font-family: Courier New, Courier, monospace;\"><span style=\"color: #e06666;\">// the old&nbsp;and new spam scores.</span></span></div><div><span style=\"color: magenta; font-family: 'Courier New', Courier, monospace;\">type</span><span style=\"font-family: 'Courier New', Courier, monospace;\"> </span><span style=\"color: #6aa84f; font-family: 'Courier New', Courier, monospace;\">SpamCount</span><span style=\"font-family: 'Courier New', Courier, monospace;\"> </span><span style=\"color: magenta; font-family: 'Courier New', Courier, monospace;\">struct</span><span style=\"font-family: 'Courier New', Courier, monospace;\"> {</span></div><div><span style=\"font-family: Courier New, Courier, monospace;\">&nbsp; Old int<br />&nbsp; New int<br />&nbsp; URLs int<br />}<br /><br /><span style=\"color: magenta;\">func</span> <span style=\"color: #0b5394;\">spamCount</span>(score <span style=\"color: #6aa84f;\">float</span>) <span style=\"color: #6aa84f;\">int</span> {<br /><span style=\"color: #e06666;\">&nbsp; // A record with a spam score above 0.5 counts as spam.</span></span></div><div><span style=\"font-family: Courier New, Courier, monospace;\">&nbsp;&nbsp;<span style=\"color: magenta;\">if</span> score &gt; 0.5 {<br />&nbsp; &nbsp; <span style=\"color: magenta;\">return</span> 1<br />&nbsp; }<br />&nbsp; <span style=\"color: magenta;\">return</span> 0<br />}<br /><br /></span></div><div><span style=\"color: #e06666; font-family: Courier New, Courier, monospace;\">// stats is a sum table with string keys (site name), and</span></div><div><span style=\"color: #e06666; font-family: Courier New, Courier, monospace;\">// SpamCount values (the old and new spam counts and total</span></div><div><span style=\"font-family: Courier New, Courier, monospace;\"><span style=\"color: #e06666;\">// count of URLs).</span></span></div><div><span style=\"font-family: Courier New, Courier, monospace;\"><span style=\"color: magenta;\">var</span> stats = table.<span style=\"color: #0b5394;\">Sum</span>(<span style=\"color: #a64d79;\">\"my_stats\"</span>, <span style=\"color: #a64d79;\">\"site\"</span>, <span style=\"color: #6aa84f;\">SpamCount</span>{})<br /><br /><span style=\"color: magenta;\">func</span> <span style=\"color: #0b5394;\">Mapper</span>(w *<span style=\"color: #6aa84f;\">webpage.WebPage</span>) {<br /><span style=\"color: #e06666;\">&nbsp; // Each record is a protocol buffer of type WebPage, which<br />&nbsp; // has a url field which the spam package can classify.</span></span><span style=\"font-family: 'Courier New', Courier, monospace;\">&nbsp;</span></div><div><span style=\"font-family: 'Courier New', Courier, monospace;\">&nbsp; stats.</span><span style=\"color: #0b5394; font-family: 'Courier New', Courier, monospace;\">Emit</span><span style=\"font-family: 'Courier New', Courier, monospace;\">(sites.</span><span style=\"color: #0b5394; font-family: 'Courier New', Courier, monospace;\">SiteFromURL</span><span style=\"font-family: 'Courier New', Courier, monospace;\">(w.</span><span style=\"color: #0b5394; font-family: 'Courier New', Courier, monospace;\">GetUrl</span><span style=\"font-family: 'Courier New', Courier, monospace;\">()), </span><span style=\"color: #6aa84f; font-family: 'Courier New', Courier, monospace;\">SpamCount</span><span style=\"font-family: 'Courier New', Courier, monospace;\">{</span></div><div><span style=\"font-family: Courier New, Courier, monospace;\">&nbsp; &nbsp; <span style=\"color: #45818e;\">Old</span>: <span style=\"color: #0b5394;\">spamCount</span>(spam.<span style=\"color: #0b5394;\">SpamScore</span>(w.<span style=\"color: #0b5394;\">GetUrl</span>())),<br />&nbsp; &nbsp; <span style=\"color: #45818e;\">New</span>: <span style=\"color: #0b5394;\">spamCount</span>(spam.<span style=\"color: #0b5394;\">NewSpamScore</span>(w.<span style=\"color: #0b5394;\">GetUrl</span>())),<br />&nbsp; &nbsp; <span style=\"color: #45818e;\">URLs</span>: 1,<br />&nbsp; })<br />}</span><br /><br />The structure of this Lingo program is very similar to <a href=\"http://www.unofficialgoogledatascience.com/2015/09/on-procedural-and-declarative.html\">its Sawzall equivalent</a>, thanks to the table library. It outputs a table of summed spam scores, keyed by site names. The table library uses the same output encoding as Sawzall, so the output of this program is byte-for-byte identical to its Sawzall equivalent. This greatly simplifies the process of migrating away from Sawzall for interested teams.<br /><br />The benefit of this work is that logs analysis is now much more flexible and better integrated into Google’s broader software ecosystem. The logs proxy has decoupled the choice of language from the execution and access control model for analysis, which gives teams the freedom to make their own determination about what language best suits their needs. <br /><br /><h2><br /></h2><h2>Conclusion</h2><br />Moving away from Sawzall has been a huge job. In part that’s because Sawzall was quite successful at its original goal —&nbsp;make it easy for analysts to write quick, powerful analysis programs. As a result there was a lot of Sawzall code to be migrated. However, Sawzall was in some ways a victim of its own success. There’s a natural tension for any domain-specific language between staying highly focused on its problem domain and growing to accommodate the needs of users who want to stretch the language in new directions. Sawzall’s development was shaped by this tension from the very beginning —&nbsp;early designs didn’t even include the ability to define functions, but functions were quickly added when it became apparent that the language couldn’t meet users’ needs without them. Over time, many more features have been added. But as the language grows, the rationale for using a domain specific language rather than a general purpose language becomes more and more diluted.<br /><br />Fortunately, we’ve found that with carefully designed libraries we can get most of the benefits of Sawzall in Go while gaining the advantages of a powerful general-purpose language. The overall response of analysts to these changes has been extremely positive. Today, logs analysis is one of the most intensive users of Go at Google, and Go is the most-used language for reading logs through the logs proxy. And for users who prefer a different language, the logs proxy provides a language-agnostic way to read logs data while complying with our access policies. Looking forward, we can’t predict exactly what direction logs analysis at Google will go next, but we do know that its path won’t be constrained by our choice of programming language.<br /><br /></div>",
  "link": [
    "",
    "",
    "",
    "",
    ""
  ],
  "author": {
    "name": "Amir Najmi",
    "uri": "http://www.blogger.com/profile/18174523203317227640",
    "email": "noreply@blogger.com",
    "gd:image": ""
  },
  "media:thumbnail": "",
  "thr:total": 0
}