{
  "title": "Supporting Users in Open Source",
  "link": "",
  "updated": "2016-08-25T00:00:00+00:00",
  "id": "https://mrocklin.github.io/blog/work/2016/08/25/supporting-users",
  "content": "<p>What are the social expectations of open source developers to help users\nunderstand their projects?  What are the social expectations of users when\nasking for help?</p>\n\n<p>As part of developing Dask, an open source library with growing adoption, I\ndirectly interact with users over GitHub issues for bug reports, StackOverflow\nfor usage questions, a mailing list and live Gitter chat for community\nconversation.  Dask is blessed with awesome users.  These are researchers\ndoing very cool work of high impact and with novel use cases.  They report\nbugs and usage questions with such skill that it’s clear that they are\n<em>Veteran Users</em> of open source projects.</p>\n\n<h2 id=\"veteran-users-are-heroes\">Veteran Users are Heroes</h2>\n\n<p>It’s not easy being a veteran user.  It takes a <em>lot</em> of time to distill a bug\ndown to a reproducible example, or a question into an\n<a href=\"http://stackoverflow.com/help/mcve\">MCVE</a>, or to read all of the documentation\nto make sure that a conceptual question definitely isn’t answered in the docs.\nAnd yet this effort really shines through and it’s incredibly valuable to\nmaking open source software better.  These distilled reports are arguably more\nimportant than fixing the actual bug or writing the actual documentation.</p>\n\n<p>Bugs occur in the wild, in code that is half related to the developer’s library\n(like Pandas or Dask) and half related to the user’s application.  The veteran\nuser works hard to pull away all of their code and data, creating a gem of an\nexample that is trivial to understand and run anywhere that still shows off the\nproblem.</p>\n\n<p>This way the veteran user can show up with their problem to the development\nteam and say “here is something that you will quickly understand to be a\nproblem.”  On the developer side this is incredibly valuable.  They learn of a\nrelevant bug and immediately understand what’s going on, without having to\ndownload someone else’s data or understand their domain.  This switches from\nmerely convenient to strictly necessary when the developers deal with 10+ such\nreports a day.</p>\n\n<h2 id=\"novice-users-need-help-too\">Novice Users need help too</h2>\n\n<p>However there are a lot of novice users out there.  We have all been novice\nusers once, and even if we are veterans today we are probably still novices at\nsomething else.  Knowing what to do and how to ask for help is hard.  Having\nthe guts to walk into a chat room where people will quickly see that you’re a\nnovice is even harder.  It’s like using public transit in a deeply foreign\nlanguage.  Respect is warranted here.</p>\n\n<p>I categorize novice users into two groups:</p>\n\n<ol>\n  <li>Experienced technical novices, who are very experienced in their field and\ntechnical things generally, but who don’t yet have a thorough\nunderstanding of open source culture and how to ask questions smoothly.\nThey’re entirely capable of behaving like a veteran user if pointed in the\nright directions.</li>\n  <li>Novice technical novices, who don’t yet have the ability to distill their\nproblems into the digestible nuggets that open source developers expect.</li>\n</ol>\n\n<p>In the first case of technically experienced novices, I’ve found that being\ndirect works surprisingly well.  I used to be apologetic in asking people to\nsubmit <a href=\"http://stackoverflow.com/help/mcve\">MCVE</a>s.  Today I’m more blunt but\nsurprisingly I find that this group doesn’t seem to mind.  I suspect that this\ngroup is accustomed to operating in situations where other people’s time is\nvery costly.</p>\n\n<p>The second case of novice novice users are more challenging for individual\ndevelopers to handle one-by-one, both because novices are more common, and\nbecause solving their problems often requires more time commitment.  Instead\nopen source communities often depend on broadcast and crowd-sourced solutions,\nlike documentation, StackOverflow, or meetups and user groups.  For example in\nDask <a href=\"http://dask.readthedocs.io/en/latest/support.html#where-to-ask-for-help\">we strongly point people towards StackOverflow</a>\nin order to build up a knowledge-base of question-answer pairs.  Pandas has\ndone this well; almost every Pandas question you Google leads to a\nStackOverflow post, handling 90% of the traffic and improving the lives of\nthousands.  Many projects simply don’t have the human capital to hand-hold\nindividuals through using the library.</p>\n\n<p>In a few projects there are enough generous and experienced users that they’re\nable to field questions from individual users.  SymPy is a good example here.\nI learned open source programming within SymPy.  Their community was broad\nenough that they were able to hold my hand as I learned Git, testing,\ncommunication practices and all of the other soft skills that we need to be\neffective in writing great software.  The support structure of SymPy is\nsomething that I’ve never experienced anywhere else.</p>\n\n<h2 id=\"my-apologies\">My Apologies</h2>\n\n<p>I’ve found myself becoming increasingly impolite when people ask me for certain\nkinds of extended help with their code.  I’ve been trying to track down why\nthis is and I think that it comes from a mismatch of social contracts.</p>\n\n<p>Large parts of technical society have an (entirely reasonable) belief that open\nsource developers are available to answer questions about how we use their\nproject.  This was probably true in popular culture, where our stereotypical\nimage of an open source developer was working out of their basement long into\nthe night on things that relatively few enthusiasts bothered with.  They were\nhappy to engage and had the free time in which to do it.</p>\n\n<p>In some ways things have changed a lot.  We now have paid professionals\nbuilding software that is used by thousands or millions of users.  These\nprofessionals easily charge consulting fees of hundreds of dollars per hour for\nexactly the kind of assistance that people show up expecting for free under the\nprevious model.  These developers have to answer for how they spend their time\nwhen they’re at work, and when they’re not at work they now have families and\nkids that deserve just as much attention as their open source users.</p>\n\n<p>Both of these cultures, the creative do-it-yourself basement culture and the\nmore corporate culture, are important to the wonderful surge we’ve seen in open\nsource software.  How do we balance them?  Should developers, like doctors or\nlawyers perform pro-bono work as part of their profession?  Should grants\nspecifically include paid time for community engagement and outreach?  Should\nusers, as part of receiving help feel an obligation to improve documentation or\nstick around and help others?</p>\n\n<h2 id=\"solutions\">Solutions?</h2>\n\n<p>I’m not sure what to do here.  I feel an obligation to remain connected with\nusers from a broad set of applications, even those that companies or grants\nhaven’t decided to fund.  However at the same time I don’t know how to say\n<em>“I’m sorry, I simply don’t have the time to help you with your problem.”</em> in a\nway that feels at all compassionate.</p>\n\n<p>I think that people should still ask questions.  I think that we need to foster\nan environment in which developers can say “Sorry. Busy.” more easily.  I think\nthat we as a community need better resources to teach novice users to become\nveteran users.</p>\n\n<p>One positive approach is to honor veteran users, and through this public praise\nto encourage other users to “up their game”, much as developers do today with\ncoding skills.  There are thousands of blogposts about how to develop code\nwell, and people strive tirelessly to improve themselves.  My hope is that by\nattaching the language of skill, like the term “veteran”, to user behaviors we\ncan create an environment where people are proud of how cleanly they can raise\nissues and how clearly they can describe questions for documentation.  Doing\nthis well is critical for a project’s success and requires substantial effort\nand personal investment.</p>"
}