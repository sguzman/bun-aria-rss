{
  "title": "Simple python to LaTeX parser",
  "link": "",
  "published": "2016-11-18T12:59:00-08:00",
  "updated": "2016-11-18T12:59:00-08:00",
  "author": {
    "name": "Jonathan Landy"
  },
  "id": "tag:efavdb.com,2016-11-18:/simple-python-to-latex-parser",
  "summary": "<p>We demo a script that converts python numerical commands to LaTeX format. A notebook available on our GitHub page will take this and pretty print the&nbsp;result.</p>\n<h3>Introduction</h3>\n<p>Here, we provide a simple script that accepts numerical python commands in string format and converts them into LaTeX markup. An example …</p>",
  "content": "<p>We demo a script that converts python numerical commands to LaTeX format. A notebook available on our GitHub page will take this and pretty print the&nbsp;result.</p>\n<h3>Introduction</h3>\n<p>Here, we provide a simple script that accepts numerical python commands in string format and converts them into LaTeX markup. An example input / output&nbsp;follows:</p>\n<div class=\"highlight\"><pre><span></span><span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;f(x_123, 2) / (2 + 3/(1 + z(np.sqrt((x + 3)/3)))) + np.sqrt(2 ** w) * np.tanh(2 * math.pi* x)&#39;</span>  \n<span class=\"nb\">print</span> <span class=\"n\">command_to_latex</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span>\n\n<span class=\"c1\">## output:  </span>\n\\<span class=\"n\">frac</span><span class=\"p\">{</span><span class=\"n\">f</span> \\<span class=\"n\">left</span> <span class=\"p\">({</span><span class=\"n\">x</span><span class=\"p\">}</span><span class=\"n\">_</span><span class=\"p\">{</span><span class=\"mi\">123</span><span class=\"p\">}</span> <span class=\"p\">,</span> <span class=\"mi\">2</span> \\<span class=\"n\">right</span> <span class=\"p\">)}{</span><span class=\"mi\">2</span> <span class=\"o\">+</span> \\<span class=\"n\">frac</span><span class=\"p\">{</span><span class=\"mi\">3</span><span class=\"p\">}{</span><span class=\"mi\">1</span> <span class=\"o\">+</span> <span class=\"n\">z</span> \\<span class=\"n\">left</span> <span class=\"p\">(</span> \\<span class=\"n\">sqrt</span><span class=\"p\">{</span>\\<span class=\"n\">frac</span><span class=\"p\">{</span><span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"mi\">3</span><span class=\"p\">}{</span><span class=\"mi\">3</span><span class=\"p\">}}</span> \\<span class=\"n\">right</span> <span class=\"p\">)}}</span> <span class=\"o\">+</span> \\<span class=\"n\">sqrt</span><span class=\"p\">{{</span><span class=\"mi\">2</span><span class=\"p\">}</span><span class=\"o\">^</span><span class=\"p\">{</span><span class=\"n\">w</span><span class=\"p\">}}</span> \\<span class=\"n\">cdot</span> \\<span class=\"n\">tanh</span> \\<span class=\"n\">left</span> <span class=\"p\">(</span><span class=\"mi\">2</span> \\<span class=\"n\">cdot</span> \\<span class=\"n\">pi</span> \\<span class=\"n\">cdot</span> <span class=\"n\">x</span> \\<span class=\"n\">right</span> <span class=\"p\">)</span>  \n</pre></div>\n\n\n<p>If the output shown here is plugged into a LaTeX editor, we get the following&nbsp;result:</p>\n<div class=\"math\">\\begin{eqnarray}\\tag{1}  \n\\frac{f \\left ({x}_{123} , 2 \\right )}{2 + \\frac{3}{1 + z \\left ( \\sqrt{\\frac{x + 3}{3}} \\right )}} + \\sqrt{{2}^{w}} \\cdot \\tanh \\left (2 \\cdot \\pi \\cdot x \\right )  \n\\end{eqnarray}</div>\n<p>\nOur Jupyter <a href=\"https://github.com/EFavDB/python_command_to_latex\">notebook</a> automatically pretty prints to this&nbsp;form.</p>\n<p>We provide the script here as it may be useful for two sorts of applications: 1) facilitating write-ups of completed projects, and 2) visualizing typed-up formulas to aid checks of their accuracy. The latter is particularly helpful for lengthy commands, which are often hard to read in python&nbsp;format.</p>\n<p>We note that the python package sympy also provides a simple command-to-latex parser. However, I have had trouble getting it to output results if any functions appear that have not been defined &#8212; we illustrate this issue in the&nbsp;notebook.</p>\n<p>As usual, our code can be downloaded from our github page <a href=\"https://github.com/EFavDB/python_command_to_latex\">here</a>.</p>\n<h3>Code</h3>\n<p>The main code segment follows. The method command_to_latex recursively computes the LaTeX for any combinations of variables grouped together via parentheses. The base case occurs when there are no parentheses left, at which point the method parse_simple_eqn is called, which converts simple commands to LaTeX. The results are then recombined within the recursive method. Additional replacements can be easily added in the appropriate lines&nbsp;below.</p>\n<div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">parse_simple_eqn</span><span class=\"p\">(</span><span class=\"n\">q</span><span class=\"p\">):</span>  \n    <span class=\"sd\">&quot;&quot;&quot; Return TeX equivalent of a command without parentheses. &quot;&quot;&quot;</span>  \n    <span class=\"c1\"># Define replacement rules.  </span>\n    <span class=\"n\">simple_replacements</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"p\">[</span><span class=\"s1\">&#39; &#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;&#39;</span><span class=\"p\">],</span>  \n        <span class=\"p\">[</span><span class=\"s1\">&#39;**&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;^&#39;</span><span class=\"p\">],</span>\n        <span class=\"p\">[</span><span class=\"s1\">&#39;*&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39; \\cdot &#39;</span><span class=\"p\">],</span>  \n        <span class=\"p\">[</span><span class=\"s1\">&#39;math.&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;&#39;</span><span class=\"p\">],</span>\n        <span class=\"p\">[</span><span class=\"s1\">&#39;np.&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;&#39;</span><span class=\"p\">],</span>  \n        <span class=\"p\">[</span><span class=\"s1\">&#39;pi&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;\\pi&#39;</span><span class=\"p\">],</span>\n        <span class=\"p\">[</span><span class=\"s1\">&#39;tan&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;</span><span class=\"se\">\\t</span><span class=\"s1\">an&#39;</span><span class=\"p\">],</span>  \n        <span class=\"p\">[</span><span class=\"s1\">&#39;cos&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;\\cos&#39;</span><span class=\"p\">],</span>\n        <span class=\"p\">[</span><span class=\"s1\">&#39;sin&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;\\sin&#39;</span><span class=\"p\">],</span>  \n        <span class=\"p\">[</span><span class=\"s1\">&#39;sec&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;\\sec&#39;</span><span class=\"p\">],</span>\n        <span class=\"p\">[</span><span class=\"s1\">&#39;csc&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;\\csc&#39;</span><span class=\"p\">],</span>\n    <span class=\"p\">]</span>  \n    <span class=\"n\">complex_replacements</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"p\">[</span><span class=\"s1\">&#39;^&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;{{</span><span class=\"si\">{i1}</span><span class=\"s1\">}}^{{</span><span class=\"si\">{i2}</span><span class=\"s1\">}}&#39;</span><span class=\"p\">],</span>  \n        <span class=\"p\">[</span><span class=\"s1\">&#39;_&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;{{</span><span class=\"si\">{i1}</span><span class=\"s1\">}}_{{</span><span class=\"si\">{i2}</span><span class=\"s1\">}}&#39;</span><span class=\"p\">],</span>  \n        <span class=\"p\">[</span><span class=\"s1\">&#39;/&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;</span><span class=\"se\">\\f</span><span class=\"s1\">rac{{</span><span class=\"si\">{i1}</span><span class=\"s1\">}}{{</span><span class=\"si\">{i2}</span><span class=\"s1\">}}&#39;</span><span class=\"p\">],</span>  \n        <span class=\"p\">[</span><span class=\"s1\">&#39;sqrt&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;\\sqrt{{</span><span class=\"si\">{i2}</span><span class=\"s1\">}}&#39;</span><span class=\"p\">],</span>\n    <span class=\"p\">]</span>  \n\n    <span class=\"c1\"># Carry out simple replacements  </span>\n    <span class=\"k\">for</span> <span class=\"n\">pair</span> <span class=\"ow\">in</span> <span class=\"n\">simple_replacements</span><span class=\"p\">:</span>  \n        <span class=\"n\">q</span> <span class=\"o\">=</span> <span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"n\">pair</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">pair</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>  \n\n    <span class=\"c1\"># Now complex replacements  </span>\n    <span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"s1\">&#39;*&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;/&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;+&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;-&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;^&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;_&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;,&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;sqrt&#39;</span><span class=\"p\">]:</span>  \n        <span class=\"n\">q</span> <span class=\"o\">=</span> <span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">,</span> <span class=\"s1\">&#39; &#39;</span> <span class=\"o\">+</span> <span class=\"n\">item</span> <span class=\"o\">+</span> <span class=\"s1\">&#39; &#39;</span><span class=\"p\">)</span>  \n        <span class=\"n\">q_split</span> <span class=\"o\">=</span> <span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">()</span>  \n        <span class=\"k\">for</span> <span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">q_split</span><span class=\"p\">):</span>  \n            <span class=\"k\">for</span> <span class=\"n\">pair</span> <span class=\"ow\">in</span> <span class=\"n\">complex_replacements</span><span class=\"p\">:</span>  \n                <span class=\"k\">if</span> <span class=\"n\">item</span> <span class=\"o\">==</span> <span class=\"n\">pair</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]:</span>  \n                    <span class=\"k\">if</span> <span class=\"n\">item</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;sqrt&#39;</span><span class=\"p\">:</span>  \n                        <span class=\"n\">match_str</span> <span class=\"o\">=</span> <span class=\"s2\">&quot; &quot;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">q_split</span><span class=\"p\">[</span><span class=\"n\">index</span><span class=\"p\">:</span><span class=\"n\">index</span><span class=\"o\">+</span><span class=\"mi\">2</span><span class=\"p\">])</span>  \n                    <span class=\"k\">else</span><span class=\"p\">:</span>  \n                        <span class=\"n\">match_str</span> <span class=\"o\">=</span> <span class=\"s2\">&quot; &quot;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">q_split</span><span class=\"p\">[</span><span class=\"n\">index</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">:</span><span class=\"n\">index</span><span class=\"o\">+</span><span class=\"mi\">2</span><span class=\"p\">])</span>  \n                    <span class=\"n\">q</span> <span class=\"o\">=</span> <span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"n\">match_str</span><span class=\"p\">,</span> <span class=\"n\">pair</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span>  \n                        <span class=\"n\">i1</span><span class=\"o\">=</span><span class=\"n\">q_split</span><span class=\"p\">[</span><span class=\"n\">index</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">i2</span><span class=\"o\">=</span><span class=\"n\">q_split</span><span class=\"p\">[</span><span class=\"n\">index</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">]))</span>  \n        <span class=\"k\">return</span> <span class=\"n\">q</span>\n\n\n\n<span class=\"k\">def</span> <span class=\"nf\">command_to_latex</span><span class=\"p\">(</span><span class=\"n\">q</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">):</span>  \n    <span class=\"sd\">&quot;&quot;&quot; Recursively eliminate parentheses, then apply parse_simple_eqn.&quot;&quot;&quot;</span>  \n    <span class=\"n\">open_index</span><span class=\"p\">,</span> <span class=\"n\">close_index</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span>\n    <span class=\"k\">for</span> <span class=\"n\">q_index</span><span class=\"p\">,</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">q</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;(&#39;</span><span class=\"p\">:</span>\n            <span class=\"n\">open_index</span> <span class=\"o\">=</span> <span class=\"n\">q_index</span>\n        <span class=\"k\">elif</span> <span class=\"n\">i</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;)&#39;</span><span class=\"p\">:</span>\n            <span class=\"n\">close_index</span> <span class=\"o\">=</span> <span class=\"n\">q_index</span>\n            <span class=\"k\">break</span>\n    <span class=\"k\">if</span> <span class=\"n\">open_index</span> <span class=\"o\">!=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">:</span>\n        <span class=\"n\">o</span> <span class=\"o\">=</span> <span class=\"n\">q</span><span class=\"p\">[:</span><span class=\"n\">open_index</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;@&#39;</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">q</span><span class=\"p\">[</span><span class=\"n\">close_index</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">:]</span>\n        <span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"n\">q</span><span class=\"p\">[</span><span class=\"n\">open_index</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">:</span><span class=\"n\">close_index</span><span class=\"p\">]</span>\n        <span class=\"n\">o_tex</span>  <span class=\"o\">=</span> <span class=\"n\">command_to_latex</span><span class=\"p\">(</span><span class=\"n\">o</span><span class=\"p\">,</span> <span class=\"n\">index</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"n\">m_tex</span>  <span class=\"o\">=</span> <span class=\"n\">command_to_latex</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"p\">,</span> <span class=\"n\">index</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"c1\"># Clean up redundant parentheses at recombination</span>\n        <span class=\"n\">r_index</span> <span class=\"o\">=</span> <span class=\"n\">o_tex</span><span class=\"o\">.</span><span class=\"n\">find</span><span class=\"p\">(</span><span class=\"s1\">&#39;@&#39;</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"p\">))</span>\n        <span class=\"k\">if</span> <span class=\"n\">o_tex</span><span class=\"p\">[</span><span class=\"n\">r_index</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;{&#39;</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">o_tex</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s1\">&#39;@&#39;</span><span class=\"o\">+</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"p\">),</span> <span class=\"n\">m_tex</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">o_tex</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s1\">&#39;@&#39;</span><span class=\"o\">+</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"p\">),</span> \n                                 <span class=\"s1\">&#39; </span><span class=\"se\">\\\\</span><span class=\"s1\">left (&#39;</span> <span class=\"o\">+</span> <span class=\"n\">m_tex</span> <span class=\"o\">+</span> <span class=\"s1\">&#39; </span><span class=\"se\">\\\\</span><span class=\"s1\">right )&#39;</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">parse_simple_eqn</span><span class=\"p\">(</span><span class=\"n\">q</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<p>That&#8217;s&nbsp;it!</p>\n<script type=\"text/javascript\">if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {\n    var align = \"center\",\n        indent = \"0em\",\n        linebreak = \"false\";\n\n    if (false) {\n        align = (screen.width < 768) ? \"left\" : align;\n        indent = (screen.width < 768) ? \"0em\" : indent;\n        linebreak = (screen.width < 768) ? 'true' : linebreak;\n    }\n\n    var mathjaxscript = document.createElement('script');\n    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';\n    mathjaxscript.type = 'text/javascript';\n    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';\n\n    var configscript = document.createElement('script');\n    configscript.type = 'text/x-mathjax-config';\n    configscript[(window.opera ? \"innerHTML\" : \"text\")] =\n        \"MathJax.Hub.Config({\" +\n        \"    config: ['MMLorHTML.js'],\" +\n        \"    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" +\n        \"    jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" +\n        \"    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" +\n        \"    displayAlign: '\"+ align +\"',\" +\n        \"    displayIndent: '\"+ indent +\"',\" +\n        \"    showMathMenu: true,\" +\n        \"    messageStyle: 'normal',\" +\n        \"    tex2jax: { \" +\n        \"        inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" +\n        \"        displayMath: [ ['$$','$$'] ],\" +\n        \"        processEscapes: true,\" +\n        \"        preview: 'TeX',\" +\n        \"    }, \" +\n        \"    'HTML-CSS': { \" +\n        \"        availableFonts: ['STIX', 'TeX'],\" +\n        \"        preferredFont: 'STIX',\" +\n        \"        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" +\n        \"        linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" +\n        \"    }, \" +\n        \"}); \" +\n        \"if ('default' !== 'default') {\" +\n            \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" +\n                \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" +\n                \"VARIANT['normal'].fonts.unshift('MathJax_default');\" +\n                \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" +\n                \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" +\n                \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" +\n            \"});\" +\n            \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" +\n                \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" +\n                \"VARIANT['normal'].fonts.unshift('MathJax_default');\" +\n                \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" +\n                \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" +\n                \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" +\n            \"});\" +\n        \"}\";\n\n    (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript);\n    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);\n}\n</script>",
  "category": ""
}