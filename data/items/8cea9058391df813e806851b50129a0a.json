{
  "title": "Performance quirk: making a 1D object ndarray of tuples",
  "link": "",
  "published": "2011-10-21T00:00:00-07:00",
  "updated": "2011-10-21T00:00:00-07:00",
  "author": {
    "name": "Wes McKinney"
  },
  "id": "tag:wesmckinney.com,2011-10-21:/blog/performance-quirk-making-a-1d-object-ndarray-of-tuples/",
  "summary": "<blockquote>\n<p>Wes on 2015-10-02: The performance issue I found in NumPy has been fixed, but the pandas workaround is still faster by 2x or more.</p>\n</blockquote>\n<p>Getting a 1-dimensional <code>ndarray</code> of object dtype containing Python tuples is, unless I'm missing something, rather difficult. Take this simple example:</p>\n<div class=\"github\"><pre><span></span><code>In [1]: tuples = zip(range â€¦</code></pre></div>",
  "content": "<blockquote>\n<p>Wes on 2015-10-02: The performance issue I found in NumPy has been fixed, but the pandas workaround is still faster by 2x or more.</p>\n</blockquote>\n<p>Getting a 1-dimensional <code>ndarray</code> of object dtype containing Python tuples is, unless I'm missing something, rather difficult. Take this simple example:</p>\n<div class=\"github\"><pre><span></span><code>In [1]: tuples = zip(range(100000), range(100000))\nIn [2]: arr = np.array(tuples, dtype=object, ndmin=1)\nIn [3]: arr\nOut[3]:\narray([[0, 0],\n       [1, 1],\n       [2, 2],\n       ...,\n       [99997, 99997],\n       [99998, 99998],\n       [99999, 99999]], dtype=object)\n\nIn [5]: arr.ndim\nOut[5]: 2\n</code></pre></div>\n\n<p>OK, that didn't work so well. The only way I've figured out how to get what I want is:</p>\n<div class=\"github\"><pre><span></span><code>In [6]: arr = np.empty(len(tuples), dtype=&#39;O&#39;)\nIn [7]: arr[:] = tuples\nIn [8]: arr\nOut[8]:\narray([(0, 0), (1, 1), (2, 2), ..., (99997, 99997), (99998, 99998),\n       (99999, 99999)], dtype=object)\n</code></pre></div>\n\n<p>Yahtzee. But the kids aren't alright:</p>\n<div class=\"github\"><pre><span></span><code><span class=\"nv\">In</span> [<span class=\"mi\">9</span>]: <span class=\"nv\">timeit</span> <span class=\"nv\">arr</span>[:] <span class=\"o\">=</span> <span class=\"nv\">tuples</span>\n<span class=\"mi\">10</span> <span class=\"nv\">loops</span>, <span class=\"nv\">best</span> <span class=\"nv\">of</span> <span class=\"mi\">3</span>: <span class=\"mi\">133</span> <span class=\"nv\">ms</span> <span class=\"nv\">per</span> <span class=\"k\">loop</span>\n</code></pre></div>\n\n<p>Maybe it's just me but that strikes me as being outrageously slow. Someday I'll look at what's going on under the hood, but a quickie <a href=\"http://cython.org\" title=\"Cython\" target=\"_blank\">Cython</a> function comes to the rescue:</p>\n<div class=\"github\"><pre><span></span><code><span class=\"k\">def</span> <span class=\"nf\">list_to_object_array</span><span class=\"p\">(</span><span class=\"nb\">list</span> <span class=\"n\">obj</span><span class=\"p\">):</span>\n    <span class=\"sd\">&#39;&#39;&#39;</span>\n<span class=\"sd\">    Convert list to object ndarray.</span>\n<span class=\"sd\">    Seriously can&#39;t believe I had to write this function</span>\n<span class=\"sd\">    &#39;&#39;&#39;</span>\n    <span class=\"k\">cdef</span><span class=\"p\">:</span>\n        <span class=\"nb\">Py_ssize_t</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">n</span>\n        <span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"nb\">object</span><span class=\"p\">]</span> <span class=\"n\">arr</span>\n    <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">)</span>\n    <span class=\"n\">arr</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">empty</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"nb\">object</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"k\">from</span> <span class=\"mf\">0</span> <span class=\"o\">&lt;=</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span><span class=\"p\">:</span>\n        <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">obj</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span>\n    <span class=\"k\">return</span> <span class=\"n\">arr</span>\n</code></pre></div>\n\n<p>You would hope this is faster, and indeed it's about <strong>85x</strong> faster:</p>\n<div class=\"github\"><pre><span></span><code><span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">12</span><span class=\"p\">]:</span> <span class=\"n\">timeit</span> <span class=\"n\">arr</span> <span class=\"o\">=</span> <span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">list_to_object_array</span><span class=\"p\">(</span><span class=\"n\">tuples</span><span class=\"p\">)</span>\n<span class=\"mi\">1000</span> <span class=\"n\">loops</span><span class=\"p\">,</span> <span class=\"n\">best</span> <span class=\"n\">of</span> <span class=\"mi\">3</span><span class=\"p\">:</span> <span class=\"mf\">1.56</span> <span class=\"n\">ms</span> <span class=\"n\">per</span> <span class=\"n\">loop</span>\n</code></pre></div>\n\n<p>Scratching my head here, but I'll take it. I suspect there might be some object copying going on under the hood, anyone know?</p>"
}