{
  "guid": "tag:blogger.com,1999:blog-6300367579216018061.post-642063457744207821",
  "pubDate": "Wed, 27 Aug 2014 00:45:00 +0000",
  "atom:updated": "2014-11-27T19:59:47.620-08:00",
  "category": [
    "document classification",
    "feature learning",
    "graph database",
    "natural language processing",
    "neo4j",
    "pattern recognition",
    "text classification"
  ],
  "title": "Using a Graph Database for Deep Learning Text Classification",
  "description": "<a href=\"https://github.com/kbastani/graphify\">Graphify</a> is a <a href=\"http://www.neo4j.com\">Neo4j</a> unmanaged extension that provides plug and play <a href=\"http://en.wikipedia.org/wiki/Text_classification\">natural language text classification</a>.<br /><br />Graphify gives you a mechanism to train <a href=\"http://en.wikipedia.org/wiki/Language_model\">natural language parsing models</a> that <a href=\"http://en.wikipedia.org/wiki/Feature_extraction\">extract features</a> of a text using <a href=\"http://en.wikipedia.org/wiki/Deep_learning\">deep learning</a>. When training a model to recognize the meaning of a text, you can send an article of text with a provided set of labels that describe the nature of the text. Over time the natural language parsing model in Neo4j will grow to identify those features that optimally disambiguate a text to a set of classes.<br /><br /><img alt=\"Feature Hierarchy\" data-canonical-src=\"http://i.imgur.com/NTFytZ8.png\" src=\"https://camo.githubusercontent.com/4cfa3ba468abd2424c7e763c40df8fc4a5b3903b/687474703a2f2f692e696d6775722e636f6d2f4e544679745a382e706e67\" /><br /><br /><a name='more'></a>The <a href=\"http://en.wikipedia.org/wiki/Statistical_parsing\">feature hierarchy is generated probabilistically</a> as a result of a statistical analysis of neighboring words to a feature. By doing this it becomes possible to recognize a large set of features in test data by eliminating possibilities at each layer.<br /><br />The lowest level <a href=\"http://en.wikipedia.org/wiki/Learning_representation\">representation of a feature</a> is closest to the root pattern. In the case of Graphify, the root pattern is a space character. As training increases the number of examples that match the space character, deeper levels of representations will be generated by choosing features with the highest probability of being matched to the left or right of a feature. This kind of deep learning doesn't require a neural network because of the nature of <a href=\"http://docs.neo4j.org/chunked/stable/what-is-a-graphdb.html\">Neo4j's property graph data model</a>, providing a way to generate a <a href=\"http://en.wikipedia.org/wiki/Vector_space_model\">vector space model</a> of extracted features and relate them to feature vectors by means of <a href=\"http://en.wikipedia.org/wiki/Cosine_similarity\">cosine similarity</a> of the classes which are mapped to a subset of feature nodes within the hierarchy.<br /><br />An advantage of using Neo4j to do this is that you can attach classes to the features that matched text with those classes being applied as labels during training.<br /><br /><br /><img alt=\"Features Have Classes\" data-canonical-src=\"http://i.imgur.com/BTWbu7N.png\" src=\"https://camo.githubusercontent.com/8f7ada6b71735847336815587d7c6e66c0696320/687474703a2f2f692e696d6775722e636f6d2f4254576275374e2e706e67\" /><br /><br />Using a 3D visualization tool called <a href=\"http://ubietylab.net/ubigraph/\">UbiGraph</a>, a visualization of the feature hierarchy shows how deep feature representations grow over time.<br /><br /><br /><img alt=\"Training the feature hierarchy\" data-canonical-src=\"http://fat.gfycat.com/FarawayPlasticJellyfish.gif\" src=\"https://camo.githubusercontent.com/f4b612c2434b278d659b67349417f9e81305f88b/687474703a2f2f6661742e6766796361742e636f6d2f46617261776179506c61737469634a656c6c79666973682e676966\" /><br /><br /><br /><h3>Vector Space Model</h3><br />Graphify generates a <code><a href=\"http://en.wikipedia.org/wiki/Vector_space_model\">Vector Space Model</a></code> when classifying text on training data. There are two endpoints that provide classification and similarity features.<br /><br /><h3>Classify unlabeled text</h3><br />The first endpoint is <code>http://localhost:7474/service/graphify/classify</code> which supports the HTTP method <code>POST</code>. By posting the following JSON model, the text property will automatically be classified to the feature vector of all previously trained classes and sorted by the cosine similarity between these vectors.<br /><br /><pre><code>{<br />    \"text\": \"Interoperability is the ability of making systems work together.\"<br />}<br /></code></pre>The result that will be returned from Neo4j will be a sorted list of matches that are ordered on the cosine similarity of feature vectors for each class in the database.<br /><br /><pre><code>{<br />    \"classes\": [<br />        {<br />            \"class\": \"Interoperability\",<br />            \"similarity\": 0.01478629324290398<br />        },<br />        {<br />            \"class\": \"Natural language\",<br />            \"similarity\": 0.014352533094325508<br />        },<br />        {<br />            \"class\": \"Artificial intelligence\",<br />            \"similarity\": 0.008389954131481638<br />        },<br />        {<br />            \"class\": \"Graph database\",<br />            \"similarity\": 0.006780234851792194<br />        },<br />        {<br />            \"class\": \"Inference engine\",<br />            \"similarity\": 0.005775135975571818<br />        },<br />        {<br />            \"class\": \"Neo4j\",<br />            \"similarity\": 0.005011493979094744<br />        },<br />        {<br />            \"class\": \"Expert system\",<br />            \"similarity\": 0.0045493507614881076<br />        },<br />        {<br />            \"class\": \"Knowledge representation and reasoning\",<br />            \"similarity\": 0.0035488311479422202<br />        },<br />        {<br />            \"class\": \"Speech recognition\",<br />            \"similarity\": 0.0035459146405026746<br />        },<br />        {<br />            \"class\": \"Knowledge acquisition\",<br />            \"similarity\": 0.0033585907499658666<br />        },<br />        {<br />            \"class\": \"Memory\",<br />            \"similarity\": 0.003286652624915932<br />        },<br />        {<br />            \"class\": \"Cognitive robotics\",<br />            \"similarity\": 0.0026605991849062826<br />        },<br />        {<br />            \"class\": \"Hierarchical control system\",<br />            \"similarity\": 0.0024852750266223995<br />        },<br />        {<br />            \"class\": \"NoSQL\",<br />            \"similarity\": 0.002359964627061625<br />        },<br />        {<br />            \"class\": \"Hierarchical database model\",<br />            \"similarity\": 0.0016629332691377717<br />        },<br />        {<br />            \"class\": \"Never-Ending Language Learning\",<br />            \"similarity\": 0.0014433749914281816<br />        },<br />        {<br />            \"class\": \"Multilayer perceptron\",<br />            \"similarity\": 0.0014070718231579983<br />        },<br />        {<br />            \"class\": \"Sentence (linguistics)\",<br />            \"similarity\": 0.0012682029230640021<br />        },<br />        {<br />            \"class\": \"Argument\",<br />            \"similarity\": 0.0012446298877431268<br />        },<br />        {<br />            \"class\": \"Deep learning\",<br />            \"similarity\": 0.0011171501184315629<br />        },<br />        {<br />            \"class\": \"Inductive reasoning\",<br />            \"similarity\": 0.0010671296082781958<br />        },<br />        {<br />            \"class\": \"Machine translation\",<br />            \"similarity\": 0.0010150803638098256<br />        },<br />        {<br />            \"class\": \"Automatic Language Translator\",<br />            \"similarity\": 0.001008811074376599<br />        },<br />        {<br />            \"class\": \"Relational database\",<br />            \"similarity\": 0.0009875922800915275<br />        },<br />        {<br />            \"class\": \"Storage (memory)\",<br />            \"similarity\": 0.000980910572273953<br />        },<br />        {<br />            \"class\": \"Clause\",<br />            \"similarity\": 0.0009355842513276578<br />        },<br />        {<br />            \"class\": \"Dependency grammar\",<br />            \"similarity\": 0.0006764745128168179<br />        },<br />        {<br />            \"class\": \"Autoencoder\",<br />            \"similarity\": 0.0005224831369792641<br />        },<br />        {<br />            \"class\": \"Phrase\",<br />            \"similarity\": 0.00029583989661492754<br />        }<br />    ]<br />}</code><br /></pre><h3>Get similar classes</h3><br />To get most related classes, which were provided during training as labels, the following endpoint: <code>http://localhost:7474/service/graphify/similar/{class}</code> provides a way to get the most similar classes to a provided class name. Again, this uses a vector space model generated from the hierarchy of features mined in the pattern recognition tree.<br /><br />The result is a sorted list of classes ordered by the cosine similarity of each of the feature vectors associated with a class.<br /><br />For example, issuing a HTTP <code>GET</code> request to the following endpoint, <code>http://localhost:7474/service/graphify/similar/NoSQL</code> returns the following results:<br /><br /><pre><code>{<br />    \"classes\": [<br />        {<br />            \"class\": \"Graph database\",<br />            \"similarity\": 0.09574535643836013<br />        },<br />        {<br />            \"class\": \"Relational database\",<br />            \"similarity\": 0.07991318266439677<br />        },<br />        {<br />            \"class\": \"Machine translation\",<br />            \"similarity\": 0.07693041732140395<br />        },<br />        {<br />            \"class\": \"Deep learning\",<br />            \"similarity\": 0.07027180553561777<br />        },<br />        {<br />            \"class\": \"Speech recognition\",<br />            \"similarity\": 0.06491846260229797<br />        },<br />        {<br />            \"class\": \"Knowledge representation and reasoning\",<br />            \"similarity\": 0.061825794099321346<br />        },<br />        {<br />            \"class\": \"Artificial intelligence\",<br />            \"similarity\": 0.059426927894936345<br />        },<br />        {<br />            \"class\": \"Multilayer perceptron\",<br />            \"similarity\": 0.056943365042175544<br />        },<br />        {<br />            \"class\": \"Hierarchical database model\",<br />            \"similarity\": 0.05617955585333319<br />        },<br />        {<br />            \"class\": \"Interoperability\",<br />            \"similarity\": 0.05541367925131132<br />        },<br />        {<br />            \"class\": \"Memory\",<br />            \"similarity\": 0.05514558364443694<br />        },<br />        {<br />            \"class\": \"Expert system\",<br />            \"similarity\": 0.04869202636766413<br />        },<br />        {<br />            \"class\": \"Inductive reasoning\",<br />            \"similarity\": 0.04542968846354395<br />        },<br />        {<br />            \"class\": \"Argument\",<br />            \"similarity\": 0.04473621436021445<br />        },<br />        {<br />            \"class\": \"Clause\",<br />            \"similarity\": 0.03686385050753761<br />        },<br />        {<br />            \"class\": \"Dependency grammar\",<br />            \"similarity\": 0.035584209032388084<br />        },<br />        {<br />            \"class\": \"Sentence (linguistics)\",<br />            \"similarity\": 0.03329025076397098<br />        },<br />        {<br />            \"class\": \"Inference engine\",<br />            \"similarity\": 0.031225512897898145<br />        },<br />        {<br />            \"class\": \"Neo4j\",<br />            \"similarity\": 0.03101280823703653<br />        },<br />        {<br />            \"class\": \"Storage (memory)\",<br />            \"similarity\": 0.02979918393661567<br />        },<br />        {<br />            \"class\": \"Hierarchical control system\",<br />            \"similarity\": 0.028800749676585427<br />        },<br />        {<br />            \"class\": \"Autoencoder\",<br />            \"similarity\": 0.02527201414259688<br />        },<br />        {<br />            \"class\": \"Cognitive robotics\",<br />            \"similarity\": 0.023697018076748396<br />        },<br />        {<br />            \"class\": \"Never-Ending Language Learning\",<br />            \"similarity\": 0.021246276238820964<br />        },<br />        {<br />            \"class\": \"Phrase\",<br />            \"similarity\": 0.019941608021991825<br />        },<br />        {<br />            \"class\": \"Natural language\",<br />            \"similarity\": 0.019809613865907624<br />        },<br />        {<br />            \"class\": \"Automatic Language Translator\",<br />            \"similarity\": 0.017520049172816868<br />        },<br />        {<br />            \"class\": \"Knowledge acquisition\",<br />            \"similarity\": 0.01264614704679436<br />        }<br />    ]<br />}</code><br /></pre><div><br /></div><h3>Training</h3><br />The training endpoint is located at <code>http://localhost:7474/service/graphify/training</code>. By issuing an HTTP <code>POST</code> request to this endpoint with the following model:<br /><br /><pre><code>{<br />    \"text\": [<br />        \"Interoperability is the ability of making systems and organizations work together.\"<br />    ],<br />    \"label\": [<br />        \"Interoperability\"<br />    ]<br />}<br /></code></pre>Features are learned through repetition. The more text containing similar phrases (<a href=\"http://en.wikipedia.org/wiki/N-gram\">n-grams</a>), the more likely those features will be extracted and associated with any classes contained in prior training data. <br/><br/><h3>Links</h3><p>If you're interested in being a pioneer and testing out this <a href=\"http://docs.neo4j.org/chunked/stable/server-unmanaged-extensions.html\">unmanaged extension</a>, head on over to the GitHub project page and follow the installation instructions.</p><p><a href=\"https://github.com/kbastani/graphify\">https://github.com/kbastani/graphify</a></p><p>To better provide examples of how to implement this extension for your use cases, I will soon be authoring a sample project that creates a vector space model from a collection of Wikipedia documents.</p><p>If you're interested in helping contribute, please tweet me at <a href=\"http://www.twitter.com/kennybastani\">@kennybastani</a></p><a href=\"https://news.ycombinator.com/submit\" class=\"hn-button\" data-title=\"Using a Graph Database for Deep Learning Text Classification\" data-url=\"http://www.kennybastani.com/2014/08/using-graph-database-for-deep-learning-text-classification.html\" data-count=\"horizontal\">Vote on Hacker News</a><script type=\"text/javascript\">var HN=[];HN.factory=function(e){return function(){HN.push([e].concat(Array.prototype.slice.call(arguments,0)))};},HN.on=HN.factory(\"on\"),HN.once=HN.factory(\"once\"),HN.off=HN.factory(\"off\"),HN.emit=HN.factory(\"emit\"),HN.load=function(){var e=\"hn-button.js\";if(document.getElementById(e))return;var t=document.createElement(\"script\");t.id=e,t.src=\"//hn-button.herokuapp.com/hn-button.js\";var n=document.getElementsByTagName(\"script\")[0];n.parentNode.insertBefore(t,n)},HN.load();</script>",
  "link": "https://www.kennybastani.com/2014/08/using-graph-database-for-deep-learning-text-classification.html",
  "author": "noreply@blogger.com (Kenny Bastani)",
  "thr:total": 0
}