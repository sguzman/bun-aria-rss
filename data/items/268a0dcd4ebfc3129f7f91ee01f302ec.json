{
  "title": "Dask Release 0.17.0",
  "link": "",
  "updated": "2018-02-12T00:00:00+00:00",
  "id": "https://mrocklin.github.io/blog/work/2018/02/12/dask-0.17.0",
  "content": "<p><em>This work is supported by <a href=\"http://anaconda.com\">Anaconda Inc.</a>\nand the Data Driven Discovery Initiative from the <a href=\"https://www.moore.org/\">Moore\nFoundation</a>.</em></p>\n\n<p>I’m pleased to announce the release of Dask version 0.17.0.  This a significant\nmajor release with new features, breaking changes, and stability improvements.\nThis blogpost outlines notable changes since the 0.16.0 release on November\n21st.</p>\n\n<p>You can conda install Dask:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>conda install dask -c conda-forge\n</code></pre></div></div>\n\n<p>or pip install from PyPI:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>pip install dask[complete] --upgrade\n</code></pre></div></div>\n\n<p>Full changelogs are available here:</p>\n\n<ul>\n  <li><a href=\"https://github.com/dask/dask/blob/master/docs/source/changelog.rst\">dask/dask</a></li>\n  <li><a href=\"https://github.com/dask/distributed/blob/master/docs/source/changelog.rst\">dask/distributed</a></li>\n</ul>\n\n<p>Some notable changes follow.</p>\n\n<h3 id=\"deprecations\">Deprecations</h3>\n\n<ul>\n  <li>Removed <code class=\"language-plaintext highlighter-rouge\">dask.dataframe.rolling_*</code> methods, which were previously deprecated both in dask.dataframe and in pandas.  These are replaced with the <code class=\"language-plaintext highlighter-rouge\">rolling.*</code> namespace</li>\n  <li>\n    <p>We’ve generally stopped maintenance of the <code class=\"language-plaintext highlighter-rouge\">dask-ec2</code> project to launch dask clusters on Amazon’s EC2 using Salt.  We generally recommend kubernetes instead both for Amazon’s EC2, and for Google and Azure as well</p>\n\n    <p><a href=\"http://dask.pydata.org/en/latest/setup/kubernetes.html\">dask.pydata.org/en/latest/setup/kubernetes.html</a></p>\n  </li>\n  <li>Internal state of the distributed scheduler has changed significantly.  This may affect advanced users who were inspecting this state for debugging or diagnostics.</li>\n</ul>\n\n<h3 id=\"task-ordering\">Task Ordering</h3>\n\n<p>As Dask encounters more complex problems from more domains\nwe continually run into problems where its current heuristics do not perform optimally.\nThis release includes a rewrite of our static task prioritization heuristics.\nThis will improve Dask’s ability to traverse complex computations\nin a way that keeps memory use low.</p>\n\n<p>To aid debugging we also integrated these heuristics into the GraphViz-style plots\nthat come from the visualize method.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">da</span><span class=\"p\">.</span><span class=\"n\">random</span><span class=\"p\">.</span><span class=\"n\">random</span><span class=\"p\">(...)</span>\n<span class=\"p\">...</span>\n<span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">visualize</span><span class=\"p\">(</span><span class=\"n\">color</span><span class=\"o\">=</span><span class=\"s\">'order'</span><span class=\"p\">,</span> <span class=\"n\">cmap</span><span class=\"o\">=</span><span class=\"s\">'RdBu'</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p><a href=\"https://user-images.githubusercontent.com/306380/35012109-86df75fa-fad6-11e7-9fa8-a43a697a4a17.png\">\n  <img src=\"https://user-images.githubusercontent.com/306380/35012109-86df75fa-fad6-11e7-9fa8-a43a697a4a17.png\" width=\"80%\" align=\"center\" /></a></p>\n\n<ul>\n  <li><a href=\"https://github.com/dask/dask/pull/3066\">dask/dask #3066</a></li>\n  <li><a href=\"https://github.com/dask/dask/pull/3057\">dask/dask #3057</a></li>\n</ul>\n\n<h3 id=\"nested-joblib\">Nested Joblib</h3>\n\n<p>Dask supports parallelizing Scikit-Learn\nby extending Scikit-Learn’s underlying library for parallelism,\n<a href=\"http://tomaugspurger.github.io/distributed-joblib.html\">Joblib</a>.\nThis allows Dask to distribute <em>some</em> SKLearn algorithms across a cluster\njust by wrapping them with a context manager.</p>\n\n<p>This relationship has been strengthened,\nand particular attention has been focused\nwhen nesting one parallel computation within another,\nsuch as occurs when you train a parallel estimator, like <code class=\"language-plaintext highlighter-rouge\">RandomForest</code>,\nwithin another parallel computation, like <code class=\"language-plaintext highlighter-rouge\">GridSearchCV</code>.\nPreviously this would result in spawning too many threads/processes\nand generally oversubscribing hardware.</p>\n\n<p>Due to recent combined development within both Joblib and Dask,\nthese sorts of situations can now be resolved efficiently by handing them off to Dask,\nproviding speedups even in single-machine cases:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">sklearn.externals</span> <span class=\"kn\">import</span> <span class=\"n\">joblib</span>\n<span class=\"kn\">import</span> <span class=\"nn\">distributed.joblib</span>  <span class=\"c1\"># register the dask joblib backend\n</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dask.distributed</span> <span class=\"kn\">import</span> <span class=\"n\">Client</span>\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">Client</span><span class=\"p\">()</span>\n\n<span class=\"n\">est</span> <span class=\"o\">=</span> <span class=\"n\">ParallelEstimator</span><span class=\"p\">()</span>\n<span class=\"n\">gs</span> <span class=\"o\">=</span> <span class=\"n\">GridSearchCV</span><span class=\"p\">(</span><span class=\"n\">est</span><span class=\"p\">)</span>\n\n<span class=\"k\">with</span> <span class=\"n\">joblib</span><span class=\"p\">.</span><span class=\"n\">parallel_backend</span><span class=\"p\">(</span><span class=\"s\">'dask'</span><span class=\"p\">):</span>\n    <span class=\"n\">gs</span><span class=\"p\">.</span><span class=\"n\">fit</span><span class=\"p\">()</span>\n</code></pre></div></div>\n\n<p>See Tom Augspurger’s recent post with more details about this work:</p>\n\n<ul>\n  <li><a href=\"http://tomaugspurger.github.io/distributed-joblib.html\">http://tomaugspurger.github.io/distributed-joblib.html</a></li>\n  <li><a href=\"https://github.com/joblib/joblib/pull/595\">joblib/joblib #595</a></li>\n  <li><a href=\"https://github.com/dask/distributed/pull/1705\">dask/distributed #1705</a></li>\n  <li><a href=\"https://github.com/joblib/joblib/pull/613\">joblib/joblib #613</a></li>\n</ul>\n\n<p>Thanks to <a href=\"https://github.com/TomAugspurger\">Tom Augspurger</a>,\n<a href=\"https://github.com/jcrist\">Jim Crist</a>, and\n<a href=\"https://github.com/ogrisel\">Olivier Grisel</a> who did most of this work.</p>\n\n<h3 id=\"scheduler-internal-refactor\">Scheduler Internal Refactor</h3>\n\n<p>The distributed scheduler has been significantly refactored to change it from a forest of dictionaries:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">priority</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s\">'a'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s\">'b'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s\">'c'</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">}</span>\n<span class=\"n\">dependencies</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s\">'a'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s\">'b'</span><span class=\"p\">},</span> <span class=\"s\">'b'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s\">'c'</span><span class=\"p\">},</span> <span class=\"s\">'c'</span><span class=\"p\">:</span> <span class=\"p\">[]}</span>\n<span class=\"n\">nbytes</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s\">'a'</span><span class=\"p\">:</span> <span class=\"mi\">1000</span><span class=\"p\">,</span> <span class=\"s\">'b'</span><span class=\"p\">:</span> <span class=\"mi\">1000</span><span class=\"p\">,</span> <span class=\"s\">'c'</span><span class=\"p\">:</span> <span class=\"mi\">28</span><span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>To a bunch of objects:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">tasks</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s\">'a'</span><span class=\"p\">:</span> <span class=\"n\">Task</span><span class=\"p\">(</span><span class=\"s\">'a'</span><span class=\"p\">,</span> <span class=\"n\">priority</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">nbytes</span><span class=\"o\">=</span><span class=\"mi\">1000</span><span class=\"p\">,</span> <span class=\"n\">dependencies</span><span class=\"o\">=</span><span class=\"p\">...),</span>\n         <span class=\"s\">'b'</span><span class=\"p\">:</span> <span class=\"n\">Task</span><span class=\"p\">(</span><span class=\"s\">'b'</span><span class=\"p\">:</span> <span class=\"n\">priority</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">nbytes</span><span class=\"o\">=</span><span class=\"mi\">1000</span><span class=\"p\">,</span> <span class=\"n\">dependencies</span><span class=\"o\">=</span><span class=\"p\">...),</span>\n         <span class=\"s\">'c'</span><span class=\"p\">:</span> <span class=\"n\">Task</span><span class=\"p\">(</span><span class=\"s\">'c'</span><span class=\"p\">:</span> <span class=\"n\">priority</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">nbytes</span><span class=\"o\">=</span><span class=\"mi\">28</span><span class=\"p\">,</span> <span class=\"n\">dependencies</span><span class=\"o\">=</span><span class=\"p\">[])}</span>\n</code></pre></div></div>\n\n<p>(there is <em>much</em> more state than what is listed above,\nbut hopefully the examples above are clear.)</p>\n\n<p>There were a few motivations for this:</p>\n\n<ol>\n  <li>We wanted to try out Cython and PyPy, for which objects like this might be more effective than dictionaries.</li>\n  <li>We believe that this is probably a bit easier for developers new to the schedulers to understand.  The proliferation of state dictionaries was not highly discoverable.</li>\n</ol>\n\n<p>Goal one ended up not working out.\nWe have not yet been able to make the scheduler significantly faster under Cython or PyPy with this new layout.  There is even a slight memory increase with these changes.\nHowever we have been happy with the results in code readability, and we hope that others find this useful as well.</p>\n\n<p>Thanks to <a href=\"https://github.com/pitrou\">Antoine Pitrou</a>,\nwho did most of the work here.</p>\n\n<h3 id=\"user-priorities\">User Priorities</h3>\n\n<p>You can now submit tasks with different priorities.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"p\">.</span><span class=\"n\">submit</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">priority</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>   <span class=\"c1\"># Higher priority preferred\n</span><span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"p\">.</span><span class=\"n\">submit</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">priority</span><span class=\"o\">=-</span><span class=\"mi\">10</span><span class=\"p\">)</span>  <span class=\"c1\"># Lower priority happens later\n</span></code></pre></div></div>\n\n<p>To be clear, Dask has always had priorities, they just weren’t easily user-settable.\nHigher priorities are given precedence.  The default priority for all tasks is zero.\nYou can also submit priorities for collections (like arrays and dataframes)</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">df</span><span class=\"p\">.</span><span class=\"n\">persist</span><span class=\"p\">(</span><span class=\"n\">priority</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">)</span>  <span class=\"c1\"># give this computation higher priority.\n</span></code></pre></div></div>\n\n<ul>\n  <li><a href=\"https://github.com/dask/distributed/pull/1651\">dask/distributed #1651</a></li>\n</ul>\n\n<h2 id=\"related-projects\">Related projects</h2>\n\n<p>Several related projects are also undergoing releases:</p>\n\n<ul>\n  <li>Tornado is updating to version 5.0 (there is a beta out now).\nThis is a major change that will put Tornado on the Asyncio event loop in Python 3.\nIt also includes many performance enhancements for high-bandwidth networks.</li>\n  <li>\n    <p>Bokeh 0.12.14 was just released.</p>\n\n    <p>Note that you will need to update Dask to work with this version of Bokeh</p>\n  </li>\n  <li><a href=\"http://daskernetes.readthedocs.io/en/latest/\">Daskernetes</a>, a new project for launching Dask on Kubernetes clusters</li>\n</ul>\n\n<h2 id=\"acknowledgements\">Acknowledgements</h2>\n\n<p>The following people contributed to the dask/dask repository since the 0.16.0\nrelease on November 14th:</p>\n\n<ul>\n  <li>Albert DeFusco</li>\n  <li>Apostolos Vlachopoulos</li>\n  <li>castalheiro</li>\n  <li>James Bourbeau</li>\n  <li>Jon Mease</li>\n  <li>Ian Hopkinson</li>\n  <li>Jakub Nowacki</li>\n  <li>Jim Crist</li>\n  <li>John A Kirkham</li>\n  <li>Joseph Lin</li>\n  <li>Keisuke Fujii</li>\n  <li>Martijn Arts</li>\n  <li>Martin Durant</li>\n  <li>Matthew Rocklin</li>\n  <li>Markus Gonser</li>\n  <li>Nir</li>\n  <li>Rich Signell</li>\n  <li>Roman Yurchak</li>\n  <li>S. Andrew Sheppard</li>\n  <li>sephib</li>\n  <li>Stephan Hoyer</li>\n  <li>Tom Augspurger</li>\n  <li>Uwe L. Korn</li>\n  <li>Wei Ji</li>\n  <li>Xander Johnson</li>\n</ul>\n\n<p>The following people contributed to the dask/distributed repository since the\n1.20.0 release on November 14th:</p>\n\n<ul>\n  <li>Alexander Ford</li>\n  <li>Antoine Pitrou</li>\n  <li>Brett Naul</li>\n  <li>Brian Broll</li>\n  <li>Bruce Merry</li>\n  <li>Cornelius Riemenschneider</li>\n  <li>Daniel Li</li>\n  <li>Jim Crist</li>\n  <li>Kelvin Yang</li>\n  <li>Matthew Rocklin</li>\n  <li>Min RK</li>\n  <li>rqx</li>\n  <li>Russ Bubley</li>\n  <li>Scott Sievert</li>\n  <li>Tom Augspurger</li>\n  <li>Xander Johnson</li>\n</ul>"
}