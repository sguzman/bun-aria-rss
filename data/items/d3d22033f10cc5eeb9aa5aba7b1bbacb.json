{
  "title": "A from-scratch tour of Bitcoin in Python",
  "description": "<style>\n.wrap {\n    max-width: 900px;\n}\np {\n    font-family: sans-serif;\n    font-size: 15px;\n    font-weight: 300;\n    overflow-wrap: break-word; /* allow wrapping of very very long strings, like txids */\n}\n.post pre,\n.post code {\n    background-color: #fafafa;\n    font-size: 13px; /* make code smaller for this post... */\n}\npre {\n white-space: pre-wrap;       /* css-3 */\n white-space: -moz-pre-wrap;  /* Mozilla, since 1999 */\n white-space: -pre-wrap;      /* Opera 4-6 */\n white-space: -o-pre-wrap;    /* Opera 7 */\n word-wrap: break-word;       /* Internet Explorer 5.5+ */\n}\n</style>\n\n<p>I find blockchain fascinating because it extends open source software development to open source + state. This seems to be a genuine/exciting innovation in computing paradigms; We don’t just get to share code, we get to share a running computer, and anyone anywhere can use it in an open and permissionless manner. The seeds of this revolution arguably began with Bitcoin, so I became curious to drill into it in some detail to get an intuitive understanding of how it works. And in the spirit of “what I cannot create I do not understand”, what better way to do this than implement it from scratch?</p>\n\n<p><strong>We are going to create, digitally sign, and broadcast a Bitcoin transaction in pure Python, from scratch, and with zero dependencies.</strong> In the process we’re going to learn quite a bit about how Bitcoin represents value. Let’s get it.</p>\n\n<p>(btw if the visual format of this post annoys you, see the <a href=\"https://github.com/karpathy/cryptos/blob/main/blog.ipynb\">jupyter notebook</a> version, which has identical content).</p>\n\n<h4 id=\"step-1-generating-a-crypto-identity\">Step 1: generating a crypto identity</h4>\n\n<p>First we want to generate a brand new cryptographic identity, which is just a private, public keypair. Bitcoin uses <a href=\"https://en.wikipedia.org/wiki/Elliptic-curve_cryptography\">Elliptic Curve Cryptography</a> instead of something more common like RSA to secure the transactions. I am not going to do a full introduction to ECC here because others have done a significantly better job, e.g. I found <a href=\"https://andrea.corbellini.name/2015/05/17/elliptic-curve-cryptography-a-gentle-introduction/\">Andrea Corbellini’s blog post series</a> to be an exceptional resource. Here we are just going to write the code but to understand why it works mathematically you’d need to go through the series.</p>\n\n<p>Okay so Bitcoin uses the <a href=\"https://en.bitcoin.it/wiki/Secp256k1\">secp256k1</a> curve. As a newbie to the area I found this part fascinating - there are entire libraries of different curves you can choose from which offer different pros/cons and properties. NIST publishes recommendations on which ones to use, but people prefer to use other curves (like secp256k1) that are less likely to have backdoors built into them. Anyway, an elliptic curve is a fairly low dimensional mathematical object and takes only 3 integers to define:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">__future__</span> <span class=\"kn\">import</span> <span class=\"n\">annotations</span> <span class=\"c1\"># PEP 563: Postponed Evaluation of Annotations\n</span><span class=\"kn\">from</span> <span class=\"nn\">dataclasses</span> <span class=\"kn\">import</span> <span class=\"n\">dataclass</span> <span class=\"c1\"># https://docs.python.org/3/library/dataclasses.html I like these a lot\n</span>\n<span class=\"o\">@</span><span class=\"n\">dataclass</span>\n<span class=\"k\">class</span> <span class=\"nc\">Curve</span><span class=\"p\">:</span>\n    <span class=\"s\">\"\"\"\n    Elliptic Curve over the field of integers modulo a prime.\n    Points on the curve satisfy y^2 = x^3 + a*x + b (mod p).\n    \"\"\"</span>\n    <span class=\"n\">p</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"c1\"># the prime modulus of the finite field\n</span>    <span class=\"n\">a</span><span class=\"p\">:</span> <span class=\"nb\">int</span>\n    <span class=\"n\">b</span><span class=\"p\">:</span> <span class=\"nb\">int</span>\n\n<span class=\"c1\"># secp256k1 uses a = 0, b = 7, so we're dealing with the curve y^2 = x^3 + 7 (mod p)\n</span><span class=\"n\">bitcoin_curve</span> <span class=\"o\">=</span> <span class=\"n\">Curve</span><span class=\"p\">(</span>\n    <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"mh\">0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F</span><span class=\"p\">,</span>\n    <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"mh\">0x0000000000000000000000000000000000000000000000000000000000000000</span><span class=\"p\">,</span> <span class=\"c1\"># a = 0\n</span>    <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"mh\">0x0000000000000000000000000000000000000000000000000000000000000007</span><span class=\"p\">,</span> <span class=\"c1\"># b = 7\n</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>In addition to the actual curve we define a Generator point, which is just some fixed “starting point” on the curve’s cycle, which is used to kick off the “random walk” around the curve. The generator is a publicly known and agreed upon constant:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"o\">@</span><span class=\"n\">dataclass</span>\n<span class=\"k\">class</span> <span class=\"nc\">Point</span><span class=\"p\">:</span>\n    <span class=\"s\">\"\"\" An integer point (x,y) on a Curve \"\"\"</span>\n    <span class=\"n\">curve</span><span class=\"p\">:</span> <span class=\"n\">Curve</span>\n    <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">int</span>\n    <span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"nb\">int</span>\n\n<span class=\"n\">G</span> <span class=\"o\">=</span> <span class=\"n\">Point</span><span class=\"p\">(</span>\n    <span class=\"n\">bitcoin_curve</span><span class=\"p\">,</span>\n    <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"mh\">0x79BE667EF9DCBBAC55A06295CE870B07029BFCDB2DCE28D959F2815B16F81798</span><span class=\"p\">,</span>\n    <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"mh\">0x483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># we can verify that the generator point is indeed on the curve, i.e. y^2 = x^3 + 7 (mod p)\n</span><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"Generator IS on the curve: \"</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">G</span><span class=\"p\">.</span><span class=\"n\">y</span><span class=\"o\">**</span><span class=\"mi\">2</span> <span class=\"o\">-</span> <span class=\"n\">G</span><span class=\"p\">.</span><span class=\"n\">x</span><span class=\"o\">**</span><span class=\"mi\">3</span> <span class=\"o\">-</span> <span class=\"mi\">7</span><span class=\"p\">)</span> <span class=\"o\">%</span> <span class=\"n\">bitcoin_curve</span><span class=\"p\">.</span><span class=\"n\">p</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># some other totally random point will of course not be on the curve, _MOST_ likely\n</span><span class=\"kn\">import</span> <span class=\"nn\">random</span>\n<span class=\"n\">random</span><span class=\"p\">.</span><span class=\"n\">seed</span><span class=\"p\">(</span><span class=\"mi\">1337</span><span class=\"p\">)</span>\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">random</span><span class=\"p\">.</span><span class=\"n\">randrange</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">bitcoin_curve</span><span class=\"p\">.</span><span class=\"n\">p</span><span class=\"p\">)</span>\n<span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">random</span><span class=\"p\">.</span><span class=\"n\">randrange</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">bitcoin_curve</span><span class=\"p\">.</span><span class=\"n\">p</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"Totally random point is not: \"</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">y</span><span class=\"o\">**</span><span class=\"mi\">2</span> <span class=\"o\">-</span> <span class=\"n\">x</span><span class=\"o\">**</span><span class=\"mi\">3</span> <span class=\"o\">-</span> <span class=\"mi\">7</span><span class=\"p\">)</span> <span class=\"o\">%</span> <span class=\"n\">bitcoin_curve</span><span class=\"p\">.</span><span class=\"n\">p</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Generator IS on the curve:  True\nTotally random point is not:  False\n</code></pre></div></div>\n\n<p>Finally, the order of the generating point G is known, and is effectively the “size of the set” we are working with in terms of the (x,y) integer tuples on the cycle around the curve. I like to organize this information into one more data structure I’ll call Generator:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"o\">@</span><span class=\"n\">dataclass</span>\n<span class=\"k\">class</span> <span class=\"nc\">Generator</span><span class=\"p\">:</span>\n    <span class=\"s\">\"\"\"\n    A generator over a curve: an initial point and the (pre-computed) order\n    \"\"\"</span>\n    <span class=\"n\">G</span><span class=\"p\">:</span> <span class=\"n\">Point</span>     <span class=\"c1\"># a generator point on the curve\n</span>    <span class=\"n\">n</span><span class=\"p\">:</span> <span class=\"nb\">int</span>       <span class=\"c1\"># the order of the generating point, so 0*G = n*G = INF\n</span>\n<span class=\"n\">bitcoin_gen</span> <span class=\"o\">=</span> <span class=\"n\">Generator</span><span class=\"p\">(</span>\n    <span class=\"n\">G</span> <span class=\"o\">=</span> <span class=\"n\">G</span><span class=\"p\">,</span>\n    <span class=\"c1\"># the order of G is known and can be mathematically derived\n</span>    <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"mh\">0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>Notice that we haven’t really done anything so far, it’s all just definition of some data structures, and filling them with the publicly known constants related to the elliptic curves used in Bitcoin. This is about to change, as we are ready to generate our private key. The private key (or “<strong>secret key</strong>” as I’ll call it going forward) is simply a random integer that satisfies 1 &lt;= key &lt; n (recall n is the order of G):</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># secret_key = random.randrange(1, bitcoin_gen.n) # this is how you _would_ do it\n</span><span class=\"n\">secret_key</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">.</span><span class=\"n\">from_bytes</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s\">'Andrej is cool :P'</span><span class=\"p\">,</span> <span class=\"s\">'big'</span><span class=\"p\">)</span> <span class=\"c1\"># this is how I will do it for reproducibility\n</span><span class=\"k\">assert</span> <span class=\"mi\">1</span> <span class=\"o\">&lt;=</span> <span class=\"n\">secret_key</span> <span class=\"o\">&lt;</span> <span class=\"n\">bitcoin_gen</span><span class=\"p\">.</span><span class=\"n\">n</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">secret_key</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>22265090479312778178772228083027296664144\n</code></pre></div></div>\n\n<p>This is our secret key - it is a a pretty unassuming integer but anyone who knows it can control all of the funds you own on the Bitcoin blockchain, associated with it. In the simplest, most common vanilla use case of Bitcoin it is the single “password” that controls your account. Of course, in the exceedingly unlikely case that some other Andrej manually generated their secret key as I did above, the wallet associated with this secret key most likely has a balance of zero bitcoin :). If it didn’t we’d be very lucky indeed.</p>\n\n<p>We are now going to generate the <strong>public key</strong>, which is where things start to get interesting. The public key is the point on the curve that results from adding the generator point to itself secret_key times. i.e. we have: public_key = G + G + G + (secret key times) + G = secret_key * G. Notice that both the ‘+’ (add) and the ‘*’ (times) symbol here is very special and slightly confusing. The secret key is an integer, but the generator point G is an (x,y) tuple that is a Point on the Curve, resulting in an (x,y) tuple public key, again a Point on the Curve. This is where we have to actually define the Addition operator on an elliptic curve. It has a very specific definition and a geometric interpretation (see Andrea’s post above), but the actual implementation is relatively simple:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">INF</span> <span class=\"o\">=</span> <span class=\"n\">Point</span><span class=\"p\">(</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">)</span> <span class=\"c1\"># special point at \"infinity\", kind of like a zero\n</span>\n<span class=\"k\">def</span> <span class=\"nf\">extended_euclidean_algorithm</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">):</span>\n    <span class=\"s\">\"\"\"\n    Returns (gcd, x, y) s.t. a * x + b * y == gcd\n    This function implements the extended Euclidean\n    algorithm and runs in O(log b) in the worst case,\n    taken from Wikipedia.\n    \"\"\"</span>\n    <span class=\"n\">old_r</span><span class=\"p\">,</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span>\n    <span class=\"n\">old_s</span><span class=\"p\">,</span> <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span>\n    <span class=\"n\">old_t</span><span class=\"p\">,</span> <span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span>\n    <span class=\"k\">while</span> <span class=\"n\">r</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n        <span class=\"n\">quotient</span> <span class=\"o\">=</span> <span class=\"n\">old_r</span> <span class=\"o\">//</span> <span class=\"n\">r</span>\n        <span class=\"n\">old_r</span><span class=\"p\">,</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"n\">old_r</span> <span class=\"o\">-</span> <span class=\"n\">quotient</span> <span class=\"o\">*</span> <span class=\"n\">r</span>\n        <span class=\"n\">old_s</span><span class=\"p\">,</span> <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">old_s</span> <span class=\"o\">-</span> <span class=\"n\">quotient</span> <span class=\"o\">*</span> <span class=\"n\">s</span>\n        <span class=\"n\">old_t</span><span class=\"p\">,</span> <span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"n\">old_t</span> <span class=\"o\">-</span> <span class=\"n\">quotient</span> <span class=\"o\">*</span> <span class=\"n\">t</span>\n    <span class=\"k\">return</span> <span class=\"n\">old_r</span><span class=\"p\">,</span> <span class=\"n\">old_s</span><span class=\"p\">,</span> <span class=\"n\">old_t</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">inv</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">p</span><span class=\"p\">):</span>\n    <span class=\"s\">\"\"\" returns modular multiplicate inverse m s.t. (n * m) % p == 1 \"\"\"</span>\n    <span class=\"n\">gcd</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">extended_euclidean_algorithm</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">p</span><span class=\"p\">)</span> <span class=\"c1\"># pylint: disable=unused-variable\n</span>    <span class=\"k\">return</span> <span class=\"n\">x</span> <span class=\"o\">%</span> <span class=\"n\">p</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">elliptic_curve_addition</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">:</span> <span class=\"n\">Point</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Point</span><span class=\"p\">:</span>\n    <span class=\"c1\"># handle special case of P + 0 = 0 + P = 0\n</span>    <span class=\"k\">if</span> <span class=\"bp\">self</span> <span class=\"o\">==</span> <span class=\"n\">INF</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">other</span>\n    <span class=\"k\">if</span> <span class=\"n\">other</span> <span class=\"o\">==</span> <span class=\"n\">INF</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span>\n    <span class=\"c1\"># handle special case of P + (-P) = 0\n</span>    <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"n\">other</span><span class=\"p\">.</span><span class=\"n\">x</span> <span class=\"ow\">and</span> <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">y</span> <span class=\"o\">!=</span> <span class=\"n\">other</span><span class=\"p\">.</span><span class=\"n\">y</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">INF</span>\n    <span class=\"c1\"># compute the \"slope\"\n</span>    <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"n\">other</span><span class=\"p\">.</span><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"c1\"># (self.y = other.y is guaranteed too per above check)\n</span>        <span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">3</span> <span class=\"o\">*</span> <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">x</span><span class=\"o\">**</span><span class=\"mi\">2</span> <span class=\"o\">+</span> <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">curve</span><span class=\"p\">.</span><span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">inv</span><span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">curve</span><span class=\"p\">.</span><span class=\"n\">p</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">y</span> <span class=\"o\">-</span> <span class=\"n\">other</span><span class=\"p\">.</span><span class=\"n\">y</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">inv</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">x</span> <span class=\"o\">-</span> <span class=\"n\">other</span><span class=\"p\">.</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">curve</span><span class=\"p\">.</span><span class=\"n\">p</span><span class=\"p\">)</span>\n    <span class=\"c1\"># compute the new point\n</span>    <span class=\"n\">rx</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">m</span><span class=\"o\">**</span><span class=\"mi\">2</span> <span class=\"o\">-</span> <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">x</span> <span class=\"o\">-</span> <span class=\"n\">other</span><span class=\"p\">.</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"o\">%</span> <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">curve</span><span class=\"p\">.</span><span class=\"n\">p</span>\n    <span class=\"n\">ry</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"o\">-</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"n\">rx</span> <span class=\"o\">-</span> <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">y</span><span class=\"p\">))</span> <span class=\"o\">%</span> <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">curve</span><span class=\"p\">.</span><span class=\"n\">p</span>\n    <span class=\"k\">return</span> <span class=\"n\">Point</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">curve</span><span class=\"p\">,</span> <span class=\"n\">rx</span><span class=\"p\">,</span> <span class=\"n\">ry</span><span class=\"p\">)</span>\n\n<span class=\"n\">Point</span><span class=\"p\">.</span><span class=\"n\">__add__</span> <span class=\"o\">=</span> <span class=\"n\">elliptic_curve_addition</span> <span class=\"c1\"># monkey patch addition into the Point class\n</span></code></pre></div></div>\n\n<p>I admit that it may look a bit scary and understanding and re-deriving the above took me a good half of a day. Most of the complexity comes from all of the math being done with modular arithmetic. So even simple operations like division ‘/’ suddenly require algorithms such as the modular multiplicative inverse <code class=\"language-plaintext highlighter-rouge\">inv</code>. But the important thing to note is that everything is just a bunch of adds/multiplies over the tuples (x,y) with some modulo p sprinkled everywhere in between. Let’s take it for a spin by generating some trivial (private, public) keypairs:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># if our secret key was the integer 1, then our public key would just be G:\n</span><span class=\"n\">sk</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n<span class=\"n\">pk</span> <span class=\"o\">=</span> <span class=\"n\">G</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s\">\" secret key: </span><span class=\"si\">{</span><span class=\"n\">sk</span><span class=\"si\">}</span><span class=\"se\">\\n</span><span class=\"s\"> public key: </span><span class=\"si\">{</span><span class=\"p\">(</span><span class=\"n\">pk</span><span class=\"p\">.</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">pk</span><span class=\"p\">.</span><span class=\"n\">y</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"Verify the public key is on the curve: \"</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">pk</span><span class=\"p\">.</span><span class=\"n\">y</span><span class=\"o\">**</span><span class=\"mi\">2</span> <span class=\"o\">-</span> <span class=\"n\">pk</span><span class=\"p\">.</span><span class=\"n\">x</span><span class=\"o\">**</span><span class=\"mi\">3</span> <span class=\"o\">-</span> <span class=\"mi\">7</span><span class=\"p\">)</span> <span class=\"o\">%</span> <span class=\"n\">bitcoin_curve</span><span class=\"p\">.</span><span class=\"n\">p</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"c1\"># if it was 2, the public key is G + G:\n</span><span class=\"n\">sk</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n<span class=\"n\">pk</span> <span class=\"o\">=</span> <span class=\"n\">G</span> <span class=\"o\">+</span> <span class=\"n\">G</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s\">\" secret key: </span><span class=\"si\">{</span><span class=\"n\">sk</span><span class=\"si\">}</span><span class=\"se\">\\n</span><span class=\"s\"> public key: </span><span class=\"si\">{</span><span class=\"p\">(</span><span class=\"n\">pk</span><span class=\"p\">.</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">pk</span><span class=\"p\">.</span><span class=\"n\">y</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"Verify the public key is on the curve: \"</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">pk</span><span class=\"p\">.</span><span class=\"n\">y</span><span class=\"o\">**</span><span class=\"mi\">2</span> <span class=\"o\">-</span> <span class=\"n\">pk</span><span class=\"p\">.</span><span class=\"n\">x</span><span class=\"o\">**</span><span class=\"mi\">3</span> <span class=\"o\">-</span> <span class=\"mi\">7</span><span class=\"p\">)</span> <span class=\"o\">%</span> <span class=\"n\">bitcoin_curve</span><span class=\"p\">.</span><span class=\"n\">p</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"c1\"># etc.:\n</span><span class=\"n\">sk</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>\n<span class=\"n\">pk</span> <span class=\"o\">=</span> <span class=\"n\">G</span> <span class=\"o\">+</span> <span class=\"n\">G</span> <span class=\"o\">+</span> <span class=\"n\">G</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s\">\" secret key: </span><span class=\"si\">{</span><span class=\"n\">sk</span><span class=\"si\">}</span><span class=\"se\">\\n</span><span class=\"s\"> public key: </span><span class=\"si\">{</span><span class=\"p\">(</span><span class=\"n\">pk</span><span class=\"p\">.</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">pk</span><span class=\"p\">.</span><span class=\"n\">y</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"Verify the public key is on the curve: \"</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">pk</span><span class=\"p\">.</span><span class=\"n\">y</span><span class=\"o\">**</span><span class=\"mi\">2</span> <span class=\"o\">-</span> <span class=\"n\">pk</span><span class=\"p\">.</span><span class=\"n\">x</span><span class=\"o\">**</span><span class=\"mi\">3</span> <span class=\"o\">-</span> <span class=\"mi\">7</span><span class=\"p\">)</span> <span class=\"o\">%</span> <span class=\"n\">bitcoin_curve</span><span class=\"p\">.</span><span class=\"n\">p</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code> secret key: 1\n public key: (55066263022277343669578718895168534326250603453777594175500187360389116729240, 32670510020758816978083085130507043184471273380659243275938904335757337482424)\nVerify the public key is on the curve:  True\n secret key: 2\n public key: (89565891926547004231252920425935692360644145829622209833684329913297188986597, 12158399299693830322967808612713398636155367887041628176798871954788371653930)\nVerify the public key is on the curve:  True\n secret key: 3\n public key: (112711660439710606056748659173929673102114977341539408544630613555209775888121, 25583027980570883691656905877401976406448868254816295069919888960541586679410)\nVerify the public key is on the curve:  True\n</code></pre></div></div>\n\n<p>Okay so we have some keypairs above, but we want the public key associated with our randomly generator secret key above. Using just the code above we’d have to add G to itself a very large number of times, because the secret key is a large integer. So the result would be correct but it would run very slow. Instead, let’s implement the “double and add” algorithm to dramatically speed up the repeated addition. Again, see the post above for why it works, but here it is:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">double_and_add</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Point</span><span class=\"p\">:</span>\n    <span class=\"k\">assert</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"n\">k</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span>\n    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">INF</span>\n    <span class=\"n\">append</span> <span class=\"o\">=</span> <span class=\"bp\">self</span>\n    <span class=\"k\">while</span> <span class=\"n\">k</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"n\">k</span> <span class=\"o\">&amp;</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n            <span class=\"n\">result</span> <span class=\"o\">+=</span> <span class=\"n\">append</span>\n        <span class=\"n\">append</span> <span class=\"o\">+=</span> <span class=\"n\">append</span>\n        <span class=\"n\">k</span> <span class=\"o\">&gt;&gt;=</span> <span class=\"mi\">1</span>\n    <span class=\"k\">return</span> <span class=\"n\">result</span>\n\n<span class=\"c1\"># monkey patch double and add into the Point class for convenience\n</span><span class=\"n\">Point</span><span class=\"p\">.</span><span class=\"n\">__rmul__</span> <span class=\"o\">=</span> <span class=\"n\">double_and_add</span>\n\n<span class=\"c1\"># \"verify\" correctness\n</span><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">G</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"o\">*</span><span class=\"n\">G</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">G</span> <span class=\"o\">+</span> <span class=\"n\">G</span> <span class=\"o\">==</span> <span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">G</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">G</span> <span class=\"o\">+</span> <span class=\"n\">G</span> <span class=\"o\">+</span> <span class=\"n\">G</span> <span class=\"o\">==</span> <span class=\"mi\">3</span><span class=\"o\">*</span><span class=\"n\">G</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>True\nTrue\nTrue\n</code></pre></div></div>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># efficiently calculate our actual public key!\n</span><span class=\"n\">public_key</span> <span class=\"o\">=</span> <span class=\"n\">secret_key</span> <span class=\"o\">*</span> <span class=\"n\">G</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s\">\"x: </span><span class=\"si\">{</span><span class=\"n\">public_key</span><span class=\"p\">.</span><span class=\"n\">x</span><span class=\"si\">}</span><span class=\"se\">\\n</span><span class=\"s\">y: </span><span class=\"si\">{</span><span class=\"n\">public_key</span><span class=\"p\">.</span><span class=\"n\">y</span><span class=\"si\">}</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"Verify the public key is on the curve: \"</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">public_key</span><span class=\"p\">.</span><span class=\"n\">y</span><span class=\"o\">**</span><span class=\"mi\">2</span> <span class=\"o\">-</span> <span class=\"n\">public_key</span><span class=\"p\">.</span><span class=\"n\">x</span><span class=\"o\">**</span><span class=\"mi\">3</span> <span class=\"o\">-</span> <span class=\"mi\">7</span><span class=\"p\">)</span> <span class=\"o\">%</span> <span class=\"n\">bitcoin_curve</span><span class=\"p\">.</span><span class=\"n\">p</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>x: 83998262154709529558614902604110599582969848537757180553516367057821848015989\ny: 37676469766173670826348691885774454391218658108212372128812329274086400588247\nVerify the public key is on the curve:  True\n</code></pre></div></div>\n\n<p>With the private/public key pair we’ve now generated our crypto identity. Now it is time to derive the associated Bitcoin wallet address. The wallet address is not just the public key itself, but it can be deterministically derived from it and has a few extra goodies (such as an embedded checksum). Before we can generate the address though we need to define some hash functions. Bitcoin uses the ubiquitous SHA-256 and also RIPEMD-160. We could just plug and play use the implementations in Python’s <code class=\"language-plaintext highlighter-rouge\">hashlib</code>, but this is supposed to be a zero-dependency implementation, so <code class=\"language-plaintext highlighter-rouge\">import hashlib</code> is cheating. So first here is the SHA256 implementation I wrote in pure Python following the (relatively readable) NIST <a href=\"https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\">FIPS PUB 180-4</a> doc:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">gen_sha256_with_variable_scope_protector_to_not_pollute_global_namespace</span><span class=\"p\">():</span>\n\n    <span class=\"s\">\"\"\"\n    SHA256 implementation.\n\n    Follows the FIPS PUB 180-4 description for calculating SHA-256 hash function\n    https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\n\n    Noone in their right mind should use this for any serious reason. This was written\n    purely for educational purposes.\n    \"\"\"</span>\n\n    <span class=\"kn\">import</span> <span class=\"nn\">math</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">itertools</span> <span class=\"kn\">import</span> <span class=\"n\">count</span><span class=\"p\">,</span> <span class=\"n\">islice</span>\n\n    <span class=\"c1\"># -----------------------------------------------------------------------------\n</span>    <span class=\"c1\"># SHA-256 Functions, defined in Section 4\n</span>\n    <span class=\"k\">def</span> <span class=\"nf\">rotr</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"mi\">32</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"o\">|</span> <span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">size</span> <span class=\"o\">-</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"o\">**</span><span class=\"n\">size</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">shr</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">x</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">n</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">sig0</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">rotr</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">)</span> <span class=\"o\">^</span> <span class=\"n\">rotr</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"mi\">18</span><span class=\"p\">)</span> <span class=\"o\">^</span> <span class=\"n\">shr</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">sig1</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">rotr</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"mi\">17</span><span class=\"p\">)</span> <span class=\"o\">^</span> <span class=\"n\">rotr</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"mi\">19</span><span class=\"p\">)</span> <span class=\"o\">^</span> <span class=\"n\">shr</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">capsig0</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">rotr</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">^</span> <span class=\"n\">rotr</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"mi\">13</span><span class=\"p\">)</span> <span class=\"o\">^</span> <span class=\"n\">rotr</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"mi\">22</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">capsig1</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">rotr</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">)</span> <span class=\"o\">^</span> <span class=\"n\">rotr</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">)</span> <span class=\"o\">^</span> <span class=\"n\">rotr</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"mi\">25</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">ch</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">&amp;</span> <span class=\"n\">y</span><span class=\"p\">)</span><span class=\"o\">^</span> <span class=\"p\">(</span><span class=\"o\">~</span><span class=\"n\">x</span> <span class=\"o\">&amp;</span> <span class=\"n\">z</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">maj</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">&amp;</span> <span class=\"n\">y</span><span class=\"p\">)</span> <span class=\"o\">^</span> <span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">&amp;</span> <span class=\"n\">z</span><span class=\"p\">)</span> <span class=\"o\">^</span> <span class=\"p\">(</span><span class=\"n\">y</span> <span class=\"o\">&amp;</span> <span class=\"n\">z</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">b2i</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"nb\">int</span><span class=\"p\">.</span><span class=\"n\">from_bytes</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"s\">'big'</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">i2b</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">i</span><span class=\"p\">.</span><span class=\"n\">to_bytes</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"s\">'big'</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># -----------------------------------------------------------------------------\n</span>    <span class=\"c1\"># SHA-256 Constants\n</span>\n    <span class=\"k\">def</span> <span class=\"nf\">is_prime</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"ow\">not</span> <span class=\"nb\">any</span><span class=\"p\">(</span><span class=\"n\">f</span> <span class=\"k\">for</span> <span class=\"n\">f</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">math</span><span class=\"p\">.</span><span class=\"n\">sqrt</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">))</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"n\">n</span><span class=\"o\">%</span><span class=\"n\">f</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">first_n_primes</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">islice</span><span class=\"p\">(</span><span class=\"nb\">filter</span><span class=\"p\">(</span><span class=\"n\">is_prime</span><span class=\"p\">,</span> <span class=\"n\">count</span><span class=\"p\">(</span><span class=\"n\">start</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)),</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">frac_bin</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"o\">=</span><span class=\"mi\">32</span><span class=\"p\">):</span>\n        <span class=\"s\">\"\"\" return the first n bits of fractional part of float f \"\"\"</span>\n        <span class=\"n\">f</span> <span class=\"o\">-=</span> <span class=\"n\">math</span><span class=\"p\">.</span><span class=\"n\">floor</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span> <span class=\"c1\"># get only the fractional part\n</span>        <span class=\"n\">f</span> <span class=\"o\">*=</span> <span class=\"mi\">2</span><span class=\"o\">**</span><span class=\"n\">n</span> <span class=\"c1\"># shift left\n</span>        <span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span> <span class=\"c1\"># truncate the rest of the fractional content\n</span>        <span class=\"k\">return</span> <span class=\"n\">f</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">genK</span><span class=\"p\">():</span>\n        <span class=\"s\">\"\"\"\n        Follows Section 4.2.2 to generate K\n\n        The first 32 bits of the fractional parts of the cube roots of the first\n        64 prime numbers:\n\n        428a2f98 71374491 b5c0fbcf e9b5dba5 3956c25b 59f111f1 923f82a4 ab1c5ed5\n        d807aa98 12835b01 243185be 550c7dc3 72be5d74 80deb1fe 9bdc06a7 c19bf174\n        e49b69c1 efbe4786 0fc19dc6 240ca1cc 2de92c6f 4a7484aa 5cb0a9dc 76f988da\n        983e5152 a831c66d b00327c8 bf597fc7 c6e00bf3 d5a79147 06ca6351 14292967\n        27b70a85 2e1b2138 4d2c6dfc 53380d13 650a7354 766a0abb 81c2c92e 92722c85\n        a2bfe8a1 a81a664b c24b8b70 c76c51a3 d192e819 d6990624 f40e3585 106aa070\n        19a4c116 1e376c08 2748774c 34b0bcb5 391c0cb3 4ed8aa4a 5b9cca4f 682e6ff3\n        748f82ee 78a5636f 84c87814 8cc70208 90befffa a4506ceb bef9a3f7 c67178f2\n        \"\"\"</span>\n        <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"n\">frac_bin</span><span class=\"p\">(</span><span class=\"n\">p</span> <span class=\"o\">**</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">/</span><span class=\"mf\">3.0</span><span class=\"p\">))</span> <span class=\"k\">for</span> <span class=\"n\">p</span> <span class=\"ow\">in</span> <span class=\"n\">first_n_primes</span><span class=\"p\">(</span><span class=\"mi\">64</span><span class=\"p\">)]</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">genH</span><span class=\"p\">():</span>\n        <span class=\"s\">\"\"\"\n        Follows Section 5.3.3 to generate the initial hash value H^0\n\n        The first 32 bits of the fractional parts of the square roots of\n        the first 8 prime numbers.\n\n        6a09e667 bb67ae85 3c6ef372 a54ff53a 9b05688c 510e527f 1f83d9ab 5be0cd19\n        \"\"\"</span>\n        <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"n\">frac_bin</span><span class=\"p\">(</span><span class=\"n\">p</span> <span class=\"o\">**</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">/</span><span class=\"mf\">2.0</span><span class=\"p\">))</span> <span class=\"k\">for</span> <span class=\"n\">p</span> <span class=\"ow\">in</span> <span class=\"n\">first_n_primes</span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">)]</span>\n\n    <span class=\"c1\"># -----------------------------------------------------------------------------\n</span>\n    <span class=\"k\">def</span> <span class=\"nf\">pad</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">):</span>\n        <span class=\"s\">\"\"\" Follows Section 5.1: Padding the message \"\"\"</span>\n        <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"nb\">bytearray</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"c1\"># convert to a mutable equivalent\n</span>        <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"mi\">8</span> <span class=\"c1\"># note: len returns number of bytes not bits\n</span>\n        <span class=\"c1\"># append but \"1\" to the end of the message\n</span>        <span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"mb\">0b10000000</span><span class=\"p\">)</span> <span class=\"c1\"># appending 10000000 in binary (=128 in decimal)\n</span>\n        <span class=\"c1\"># follow by k zero bits, where k is the smallest non-negative solution to\n</span>        <span class=\"c1\"># l + 1 + k = 448 mod 512\n</span>        <span class=\"c1\"># i.e. pad with zeros until we reach 448 (mod 512)\n</span>        <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"mi\">8</span><span class=\"p\">)</span> <span class=\"o\">%</span> <span class=\"mi\">512</span> <span class=\"o\">!=</span> <span class=\"mi\">448</span><span class=\"p\">:</span>\n            <span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"mh\">0x00</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># the last 64-bit block is the length l of the original message\n</span>        <span class=\"c1\"># expressed in binary (big endian)\n</span>        <span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"p\">.</span><span class=\"n\">to_bytes</span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"s\">'big'</span><span class=\"p\">))</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">b</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">sha256</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">:</span> <span class=\"nb\">bytes</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">bytes</span><span class=\"p\">:</span>\n\n        <span class=\"c1\"># Section 4.2\n</span>        <span class=\"n\">K</span> <span class=\"o\">=</span> <span class=\"n\">genK</span><span class=\"p\">()</span>\n\n        <span class=\"c1\"># Section 5: Preprocessing\n</span>        <span class=\"c1\"># Section 5.1: Pad the message\n</span>        <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">pad</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">)</span>\n        <span class=\"c1\"># Section 5.2: Separate the message into blocks of 512 bits (64 bytes)\n</span>        <span class=\"n\">blocks</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">b</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">:</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">64</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">),</span> <span class=\"mi\">64</span><span class=\"p\">)]</span>\n\n        <span class=\"c1\"># for each message block M^1 ... M^N\n</span>        <span class=\"n\">H</span> <span class=\"o\">=</span> <span class=\"n\">genH</span><span class=\"p\">()</span> <span class=\"c1\"># Section 5.3\n</span>\n        <span class=\"c1\"># Section 6\n</span>        <span class=\"k\">for</span> <span class=\"n\">M</span> <span class=\"ow\">in</span> <span class=\"n\">blocks</span><span class=\"p\">:</span> <span class=\"c1\"># each block is a 64-entry array of 8-bit bytes\n</span>\n            <span class=\"c1\"># 1. Prepare the message schedule, a 64-entry array of 32-bit words\n</span>            <span class=\"n\">W</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n            <span class=\"k\">for</span> <span class=\"n\">t</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">64</span><span class=\"p\">):</span>\n                <span class=\"k\">if</span> <span class=\"n\">t</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">15</span><span class=\"p\">:</span>\n                    <span class=\"c1\"># the first 16 words are just a copy of the block\n</span>                    <span class=\"n\">W</span><span class=\"p\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"nb\">bytes</span><span class=\"p\">(</span><span class=\"n\">M</span><span class=\"p\">[</span><span class=\"n\">t</span><span class=\"o\">*</span><span class=\"mi\">4</span><span class=\"p\">:</span><span class=\"n\">t</span><span class=\"o\">*</span><span class=\"mi\">4</span><span class=\"o\">+</span><span class=\"mi\">4</span><span class=\"p\">]))</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">term1</span> <span class=\"o\">=</span> <span class=\"n\">sig1</span><span class=\"p\">(</span><span class=\"n\">b2i</span><span class=\"p\">(</span><span class=\"n\">W</span><span class=\"p\">[</span><span class=\"n\">t</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">]))</span>\n                    <span class=\"n\">term2</span> <span class=\"o\">=</span> <span class=\"n\">b2i</span><span class=\"p\">(</span><span class=\"n\">W</span><span class=\"p\">[</span><span class=\"n\">t</span><span class=\"o\">-</span><span class=\"mi\">7</span><span class=\"p\">])</span>\n                    <span class=\"n\">term3</span> <span class=\"o\">=</span> <span class=\"n\">sig0</span><span class=\"p\">(</span><span class=\"n\">b2i</span><span class=\"p\">(</span><span class=\"n\">W</span><span class=\"p\">[</span><span class=\"n\">t</span><span class=\"o\">-</span><span class=\"mi\">15</span><span class=\"p\">]))</span>\n                    <span class=\"n\">term4</span> <span class=\"o\">=</span> <span class=\"n\">b2i</span><span class=\"p\">(</span><span class=\"n\">W</span><span class=\"p\">[</span><span class=\"n\">t</span><span class=\"o\">-</span><span class=\"mi\">16</span><span class=\"p\">])</span>\n                    <span class=\"n\">total</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">term1</span> <span class=\"o\">+</span> <span class=\"n\">term2</span> <span class=\"o\">+</span> <span class=\"n\">term3</span> <span class=\"o\">+</span> <span class=\"n\">term4</span><span class=\"p\">)</span> <span class=\"o\">%</span> <span class=\"mi\">2</span><span class=\"o\">**</span><span class=\"mi\">32</span>\n                    <span class=\"n\">W</span><span class=\"p\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">i2b</span><span class=\"p\">(</span><span class=\"n\">total</span><span class=\"p\">))</span>\n\n            <span class=\"c1\"># 2. Initialize the 8 working variables a,b,c,d,e,f,g,h with prev hash value\n</span>            <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"n\">g</span><span class=\"p\">,</span> <span class=\"n\">h</span> <span class=\"o\">=</span> <span class=\"n\">H</span>\n\n            <span class=\"c1\"># 3.\n</span>            <span class=\"k\">for</span> <span class=\"n\">t</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">64</span><span class=\"p\">):</span>\n                <span class=\"n\">T1</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">h</span> <span class=\"o\">+</span> <span class=\"n\">capsig1</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">ch</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"n\">g</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">K</span><span class=\"p\">[</span><span class=\"n\">t</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">b2i</span><span class=\"p\">(</span><span class=\"n\">W</span><span class=\"p\">[</span><span class=\"n\">t</span><span class=\"p\">]))</span> <span class=\"o\">%</span> <span class=\"mi\">2</span><span class=\"o\">**</span><span class=\"mi\">32</span>\n                <span class=\"n\">T2</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">capsig0</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">maj</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">))</span> <span class=\"o\">%</span> <span class=\"mi\">2</span><span class=\"o\">**</span><span class=\"mi\">32</span>\n                <span class=\"n\">h</span> <span class=\"o\">=</span> <span class=\"n\">g</span>\n                <span class=\"n\">g</span> <span class=\"o\">=</span> <span class=\"n\">f</span>\n                <span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"n\">e</span>\n                <span class=\"n\">e</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">d</span> <span class=\"o\">+</span> <span class=\"n\">T1</span><span class=\"p\">)</span> <span class=\"o\">%</span> <span class=\"mi\">2</span><span class=\"o\">**</span><span class=\"mi\">32</span>\n                <span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">c</span>\n                <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">b</span>\n                <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">a</span>\n                <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">T1</span> <span class=\"o\">+</span> <span class=\"n\">T2</span><span class=\"p\">)</span> <span class=\"o\">%</span> <span class=\"mi\">2</span><span class=\"o\">**</span><span class=\"mi\">32</span>\n\n            <span class=\"c1\"># 4. Compute the i-th intermediate hash value H^i\n</span>            <span class=\"n\">delta</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"n\">g</span><span class=\"p\">,</span> <span class=\"n\">h</span><span class=\"p\">]</span>\n            <span class=\"n\">H</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"n\">i1</span> <span class=\"o\">+</span> <span class=\"n\">i2</span><span class=\"p\">)</span> <span class=\"o\">%</span> <span class=\"mi\">2</span><span class=\"o\">**</span><span class=\"mi\">32</span> <span class=\"k\">for</span> <span class=\"n\">i1</span><span class=\"p\">,</span> <span class=\"n\">i2</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">H</span><span class=\"p\">,</span> <span class=\"n\">delta</span><span class=\"p\">)]</span>\n\n        <span class=\"k\">return</span> <span class=\"sa\">b</span><span class=\"s\">''</span><span class=\"p\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">i2b</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">H</span><span class=\"p\">)</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">sha256</span>\n\n<span class=\"n\">sha256</span> <span class=\"o\">=</span> <span class=\"n\">gen_sha256_with_variable_scope_protector_to_not_pollute_global_namespace</span><span class=\"p\">()</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"verify empty hash:\"</span><span class=\"p\">,</span> <span class=\"n\">sha256</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s\">''</span><span class=\"p\">).</span><span class=\"nb\">hex</span><span class=\"p\">())</span> <span class=\"c1\"># should be e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\n</span><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">sha256</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s\">'here is a random bytes message, cool right?'</span><span class=\"p\">).</span><span class=\"nb\">hex</span><span class=\"p\">())</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"number of bytes in a sha256 digest: \"</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">sha256</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s\">''</span><span class=\"p\">)))</span>\n</code></pre></div></div>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>verify empty hash: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\n69b9779edaa573a509999cbae415d3408c30544bad09727a1d64eff353c95b89\nnumber of bytes in a sha256 digest:  32\n</code></pre></div></div>\n\n<p>Okay the reason I wanted to implement this from scratch and paste it here is that I want you to note that again there is nothing too scary going on inside. SHA256 takes some bytes message that is to be hashed, it first pads the message, then breaks it up into chunks, and passes these chunks into what can best be described as a fancy “bit mixer”, defined in section 3, that contains a number of bit shifts and binary operations orchestrated in a way that is frankly beyond me, but that results in the beautiful properties that SHA256 offers. In particular, it creates a fixed-sized, random-looking short digest of any variably-sized original message s.t. the scrambling is not invertible and also it is basically computationally impossible to construct a different message that hashes to any given digest.</p>\n\n<p>Bitcoin uses SHA256 everywhere to create hashes, and of course it is the core element in Bitcoin’s Proof of Work, where the goal is to modify the block of transactions until the whole thing hashes to a sufficiently low number (when the bytes of the digest are interpreted as a number). Which, due to the nice properties of SHA256, can only be done via brute force search. So all of the ASICs designed for efficient mining are just incredibly optimized close-to-the-metal implementations of exactly the above code.</p>\n\n<p>Anyway before we can generate our address we also need the RIPEMD160 hash function, which I found on the internet and shortened and cleaned up:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">gen_ripemd160_with_variable_scope_protector_to_not_pollute_global_namespace</span><span class=\"p\">():</span>\n\n    <span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">struct</span>\n\n    <span class=\"c1\"># -----------------------------------------------------------------------------\n</span>    <span class=\"c1\"># public interface\n</span>\n    <span class=\"k\">def</span> <span class=\"nf\">ripemd160</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">:</span> <span class=\"nb\">bytes</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">bytes</span><span class=\"p\">:</span>\n        <span class=\"s\">\"\"\" simple wrapper for a simpler API to this hash function, just bytes to bytes \"\"\"</span>\n        <span class=\"n\">ctx</span> <span class=\"o\">=</span> <span class=\"n\">RMDContext</span><span class=\"p\">()</span>\n        <span class=\"n\">RMD160Update</span><span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">))</span>\n        <span class=\"n\">digest</span> <span class=\"o\">=</span> <span class=\"n\">RMD160Final</span><span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">digest</span>\n\n    <span class=\"c1\"># -----------------------------------------------------------------------------\n</span>\n    <span class=\"k\">class</span> <span class=\"nc\">RMDContext</span><span class=\"p\">:</span>\n        <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n            <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">state</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mh\">0x67452301</span><span class=\"p\">,</span> <span class=\"mh\">0xEFCDAB89</span><span class=\"p\">,</span> <span class=\"mh\">0x98BADCFE</span><span class=\"p\">,</span> <span class=\"mh\">0x10325476</span><span class=\"p\">,</span> <span class=\"mh\">0xC3D2E1F0</span><span class=\"p\">]</span> <span class=\"c1\"># uint32\n</span>            <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"mi\">0</span> <span class=\"c1\"># uint64\n</span>            <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">buffer</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">*</span><span class=\"mi\">64</span> <span class=\"c1\"># uchar\n</span>\n    <span class=\"k\">def</span> <span class=\"nf\">RMD160Update</span><span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"p\">,</span> <span class=\"n\">inp</span><span class=\"p\">,</span> <span class=\"n\">inplen</span><span class=\"p\">):</span>\n        <span class=\"n\">have</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">((</span><span class=\"n\">ctx</span><span class=\"p\">.</span><span class=\"n\">count</span> <span class=\"o\">//</span> <span class=\"mi\">8</span><span class=\"p\">)</span> <span class=\"o\">%</span> <span class=\"mi\">64</span><span class=\"p\">)</span>\n        <span class=\"n\">inplen</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">inplen</span><span class=\"p\">)</span>\n        <span class=\"n\">need</span> <span class=\"o\">=</span> <span class=\"mi\">64</span> <span class=\"o\">-</span> <span class=\"n\">have</span>\n        <span class=\"n\">ctx</span><span class=\"p\">.</span><span class=\"n\">count</span> <span class=\"o\">+=</span> <span class=\"mi\">8</span> <span class=\"o\">*</span> <span class=\"n\">inplen</span>\n        <span class=\"n\">off</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"k\">if</span> <span class=\"n\">inplen</span> <span class=\"o\">&gt;=</span> <span class=\"n\">need</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">have</span><span class=\"p\">:</span>\n                <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">need</span><span class=\"p\">):</span>\n                    <span class=\"n\">ctx</span><span class=\"p\">.</span><span class=\"nb\">buffer</span><span class=\"p\">[</span><span class=\"n\">have</span><span class=\"o\">+</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">inp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span>\n                <span class=\"n\">RMD160Transform</span><span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"p\">.</span><span class=\"n\">state</span><span class=\"p\">,</span> <span class=\"n\">ctx</span><span class=\"p\">.</span><span class=\"nb\">buffer</span><span class=\"p\">)</span>\n                <span class=\"n\">off</span> <span class=\"o\">=</span> <span class=\"n\">need</span>\n                <span class=\"n\">have</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n            <span class=\"k\">while</span> <span class=\"n\">off</span> <span class=\"o\">+</span> <span class=\"mi\">64</span> <span class=\"o\">&lt;=</span> <span class=\"n\">inplen</span><span class=\"p\">:</span>\n                <span class=\"n\">RMD160Transform</span><span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"p\">.</span><span class=\"n\">state</span><span class=\"p\">,</span> <span class=\"n\">inp</span><span class=\"p\">[</span><span class=\"n\">off</span><span class=\"p\">:])</span>\n                <span class=\"n\">off</span> <span class=\"o\">+=</span> <span class=\"mi\">64</span>\n        <span class=\"k\">if</span> <span class=\"n\">off</span> <span class=\"o\">&lt;</span> <span class=\"n\">inplen</span><span class=\"p\">:</span>\n            <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">inplen</span> <span class=\"o\">-</span> <span class=\"n\">off</span><span class=\"p\">):</span>\n                <span class=\"n\">ctx</span><span class=\"p\">.</span><span class=\"nb\">buffer</span><span class=\"p\">[</span><span class=\"n\">have</span><span class=\"o\">+</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">inp</span><span class=\"p\">[</span><span class=\"n\">off</span><span class=\"o\">+</span><span class=\"n\">i</span><span class=\"p\">]</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">RMD160Final</span><span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"p\">):</span>\n        <span class=\"n\">size</span> <span class=\"o\">=</span> <span class=\"n\">struct</span><span class=\"p\">.</span><span class=\"n\">pack</span><span class=\"p\">(</span><span class=\"s\">\"&lt;Q\"</span><span class=\"p\">,</span> <span class=\"n\">ctx</span><span class=\"p\">.</span><span class=\"n\">count</span><span class=\"p\">)</span>\n        <span class=\"n\">padlen</span> <span class=\"o\">=</span> <span class=\"mi\">64</span> <span class=\"o\">-</span> <span class=\"p\">((</span><span class=\"n\">ctx</span><span class=\"p\">.</span><span class=\"n\">count</span> <span class=\"o\">//</span> <span class=\"mi\">8</span><span class=\"p\">)</span> <span class=\"o\">%</span> <span class=\"mi\">64</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">padlen</span> <span class=\"o\">&lt;</span> <span class=\"mi\">1</span> <span class=\"o\">+</span> <span class=\"mi\">8</span><span class=\"p\">:</span>\n            <span class=\"n\">padlen</span> <span class=\"o\">+=</span> <span class=\"mi\">64</span>\n        <span class=\"n\">RMD160Update</span><span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"p\">,</span> <span class=\"n\">PADDING</span><span class=\"p\">,</span> <span class=\"n\">padlen</span><span class=\"o\">-</span><span class=\"mi\">8</span><span class=\"p\">)</span>\n        <span class=\"n\">RMD160Update</span><span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">struct</span><span class=\"p\">.</span><span class=\"n\">pack</span><span class=\"p\">(</span><span class=\"s\">\"&lt;5L\"</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">ctx</span><span class=\"p\">.</span><span class=\"n\">state</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># -----------------------------------------------------------------------------\n</span>\n    <span class=\"n\">K0</span> <span class=\"o\">=</span> <span class=\"mh\">0x00000000</span>\n    <span class=\"n\">K1</span> <span class=\"o\">=</span> <span class=\"mh\">0x5A827999</span>\n    <span class=\"n\">K2</span> <span class=\"o\">=</span> <span class=\"mh\">0x6ED9EBA1</span>\n    <span class=\"n\">K3</span> <span class=\"o\">=</span> <span class=\"mh\">0x8F1BBCDC</span>\n    <span class=\"n\">K4</span> <span class=\"o\">=</span> <span class=\"mh\">0xA953FD4E</span>\n    <span class=\"n\">KK0</span> <span class=\"o\">=</span> <span class=\"mh\">0x50A28BE6</span>\n    <span class=\"n\">KK1</span> <span class=\"o\">=</span> <span class=\"mh\">0x5C4DD124</span>\n    <span class=\"n\">KK2</span> <span class=\"o\">=</span> <span class=\"mh\">0x6D703EF3</span>\n    <span class=\"n\">KK3</span> <span class=\"o\">=</span> <span class=\"mh\">0x7A6D76E9</span>\n    <span class=\"n\">KK4</span> <span class=\"o\">=</span> <span class=\"mh\">0x00000000</span>\n\n    <span class=\"n\">PADDING</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mh\">0x80</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">*</span><span class=\"mi\">63</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">ROL</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"p\">((</span><span class=\"n\">x</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span> <span class=\"mh\">0xffffffff</span><span class=\"p\">)</span> <span class=\"o\">|</span> <span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">&gt;&gt;</span> <span class=\"p\">(</span><span class=\"mi\">32</span> <span class=\"o\">-</span> <span class=\"n\">n</span><span class=\"p\">))</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">F0</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">x</span> <span class=\"o\">^</span> <span class=\"n\">y</span> <span class=\"o\">^</span> <span class=\"n\">z</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">F1</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">&amp;</span> <span class=\"n\">y</span><span class=\"p\">)</span> <span class=\"o\">|</span> <span class=\"p\">(((</span><span class=\"o\">~</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"o\">%</span> <span class=\"mh\">0x100000000</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span> <span class=\"n\">z</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">F2</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">|</span> <span class=\"p\">((</span><span class=\"o\">~</span><span class=\"n\">y</span><span class=\"p\">)</span> <span class=\"o\">%</span> <span class=\"mh\">0x100000000</span><span class=\"p\">))</span> <span class=\"o\">^</span> <span class=\"n\">z</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">F3</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">&amp;</span> <span class=\"n\">z</span><span class=\"p\">)</span> <span class=\"o\">|</span> <span class=\"p\">(((</span><span class=\"o\">~</span><span class=\"n\">z</span><span class=\"p\">)</span> <span class=\"o\">%</span> <span class=\"mh\">0x100000000</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span> <span class=\"n\">y</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">F4</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">x</span> <span class=\"o\">^</span> <span class=\"p\">(</span><span class=\"n\">y</span> <span class=\"o\">|</span> <span class=\"p\">((</span><span class=\"o\">~</span><span class=\"n\">z</span><span class=\"p\">)</span> <span class=\"o\">%</span> <span class=\"mh\">0x100000000</span><span class=\"p\">))</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">R</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">Fj</span><span class=\"p\">,</span> <span class=\"n\">Kj</span><span class=\"p\">,</span> <span class=\"n\">sj</span><span class=\"p\">,</span> <span class=\"n\">rj</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">):</span>\n        <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">ROL</span><span class=\"p\">(</span><span class=\"n\">sj</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">Fj</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">X</span><span class=\"p\">[</span><span class=\"n\">rj</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">Kj</span><span class=\"p\">)</span> <span class=\"o\">%</span> <span class=\"mh\">0x100000000</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">e</span>\n        <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">ROL</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">a</span> <span class=\"o\">%</span> <span class=\"mh\">0x100000000</span><span class=\"p\">,</span> <span class=\"n\">c</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">RMD160Transform</span><span class=\"p\">(</span><span class=\"n\">state</span><span class=\"p\">,</span> <span class=\"n\">block</span><span class=\"p\">):</span> <span class=\"c1\">#uint32 state[5], uchar block[64]\n</span>\n        <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">*</span><span class=\"mi\">16</span>\n        <span class=\"k\">assert</span> <span class=\"n\">sys</span><span class=\"p\">.</span><span class=\"n\">byteorder</span> <span class=\"o\">==</span> <span class=\"s\">'little'</span><span class=\"p\">,</span> <span class=\"s\">\"Only little endian is supported atm for RIPEMD160\"</span>\n        <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">struct</span><span class=\"p\">.</span><span class=\"n\">unpack</span><span class=\"p\">(</span><span class=\"s\">'&lt;16L'</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">(</span><span class=\"n\">block</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">64</span><span class=\"p\">]))</span>\n\n        <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">state</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">state</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n        <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">state</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n        <span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">state</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span>\n        <span class=\"n\">e</span> <span class=\"o\">=</span> <span class=\"n\">state</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]</span>\n\n        <span class=\"c1\">#/* Round 1 */\n</span>        <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">F0</span><span class=\"p\">,</span> <span class=\"n\">K0</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">,</span>  <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">F0</span><span class=\"p\">,</span> <span class=\"n\">K0</span><span class=\"p\">,</span> <span class=\"mi\">14</span><span class=\"p\">,</span>  <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">F0</span><span class=\"p\">,</span> <span class=\"n\">K0</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">,</span>  <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">e</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">F0</span><span class=\"p\">,</span> <span class=\"n\">K0</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span>  <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">F0</span><span class=\"p\">,</span> <span class=\"n\">K0</span><span class=\"p\">,</span>  <span class=\"mi\">5</span><span class=\"p\">,</span>  <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">F0</span><span class=\"p\">,</span> <span class=\"n\">K0</span><span class=\"p\">,</span>  <span class=\"mi\">8</span><span class=\"p\">,</span>  <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">F0</span><span class=\"p\">,</span> <span class=\"n\">K0</span><span class=\"p\">,</span>  <span class=\"mi\">7</span><span class=\"p\">,</span>  <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">F0</span><span class=\"p\">,</span> <span class=\"n\">K0</span><span class=\"p\">,</span>  <span class=\"mi\">9</span><span class=\"p\">,</span>  <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">e</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">F0</span><span class=\"p\">,</span> <span class=\"n\">K0</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">,</span>  <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">F0</span><span class=\"p\">,</span> <span class=\"n\">K0</span><span class=\"p\">,</span> <span class=\"mi\">13</span><span class=\"p\">,</span>  <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">F0</span><span class=\"p\">,</span> <span class=\"n\">K0</span><span class=\"p\">,</span> <span class=\"mi\">14</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">F0</span><span class=\"p\">,</span> <span class=\"n\">K0</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">F0</span><span class=\"p\">,</span> <span class=\"n\">K0</span><span class=\"p\">,</span>  <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">e</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">F0</span><span class=\"p\">,</span> <span class=\"n\">K0</span><span class=\"p\">,</span>  <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">13</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">F0</span><span class=\"p\">,</span> <span class=\"n\">K0</span><span class=\"p\">,</span>  <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">14</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">F0</span><span class=\"p\">,</span> <span class=\"n\">K0</span><span class=\"p\">,</span>  <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"c1\">#/* #15 */\n</span>        <span class=\"c1\">#/* Round 2 */\n</span>        <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">F1</span><span class=\"p\">,</span> <span class=\"n\">K1</span><span class=\"p\">,</span>  <span class=\"mi\">7</span><span class=\"p\">,</span>  <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">F1</span><span class=\"p\">,</span> <span class=\"n\">K1</span><span class=\"p\">,</span>  <span class=\"mi\">6</span><span class=\"p\">,</span>  <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">e</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">F1</span><span class=\"p\">,</span> <span class=\"n\">K1</span><span class=\"p\">,</span>  <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">13</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">F1</span><span class=\"p\">,</span> <span class=\"n\">K1</span><span class=\"p\">,</span> <span class=\"mi\">13</span><span class=\"p\">,</span>  <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">F1</span><span class=\"p\">,</span> <span class=\"n\">K1</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">F1</span><span class=\"p\">,</span> <span class=\"n\">K1</span><span class=\"p\">,</span>  <span class=\"mi\">9</span><span class=\"p\">,</span>  <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">F1</span><span class=\"p\">,</span> <span class=\"n\">K1</span><span class=\"p\">,</span>  <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">e</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">F1</span><span class=\"p\">,</span> <span class=\"n\">K1</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">,</span>  <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">F1</span><span class=\"p\">,</span> <span class=\"n\">K1</span><span class=\"p\">,</span>  <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">F1</span><span class=\"p\">,</span> <span class=\"n\">K1</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span>  <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">F1</span><span class=\"p\">,</span> <span class=\"n\">K1</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">,</span>  <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">F1</span><span class=\"p\">,</span> <span class=\"n\">K1</span><span class=\"p\">,</span>  <span class=\"mi\">9</span><span class=\"p\">,</span>  <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">e</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">F1</span><span class=\"p\">,</span> <span class=\"n\">K1</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">,</span>  <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">F1</span><span class=\"p\">,</span> <span class=\"n\">K1</span><span class=\"p\">,</span>  <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">14</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">F1</span><span class=\"p\">,</span> <span class=\"n\">K1</span><span class=\"p\">,</span> <span class=\"mi\">13</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">F1</span><span class=\"p\">,</span> <span class=\"n\">K1</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span>  <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"c1\">#/* #31 */\n</span>        <span class=\"c1\">#/* Round 3 */\n</span>        <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">F2</span><span class=\"p\">,</span> <span class=\"n\">K2</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">,</span>  <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">e</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">F2</span><span class=\"p\">,</span> <span class=\"n\">K2</span><span class=\"p\">,</span> <span class=\"mi\">13</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">F2</span><span class=\"p\">,</span> <span class=\"n\">K2</span><span class=\"p\">,</span>  <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">14</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">F2</span><span class=\"p\">,</span> <span class=\"n\">K2</span><span class=\"p\">,</span>  <span class=\"mi\">7</span><span class=\"p\">,</span>  <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">F2</span><span class=\"p\">,</span> <span class=\"n\">K2</span><span class=\"p\">,</span> <span class=\"mi\">14</span><span class=\"p\">,</span>  <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">F2</span><span class=\"p\">,</span> <span class=\"n\">K2</span><span class=\"p\">,</span>  <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">e</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">F2</span><span class=\"p\">,</span> <span class=\"n\">K2</span><span class=\"p\">,</span> <span class=\"mi\">13</span><span class=\"p\">,</span>  <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">F2</span><span class=\"p\">,</span> <span class=\"n\">K2</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">,</span>  <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">F2</span><span class=\"p\">,</span> <span class=\"n\">K2</span><span class=\"p\">,</span> <span class=\"mi\">14</span><span class=\"p\">,</span>  <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">F2</span><span class=\"p\">,</span> <span class=\"n\">K2</span><span class=\"p\">,</span>  <span class=\"mi\">8</span><span class=\"p\">,</span>  <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">F2</span><span class=\"p\">,</span> <span class=\"n\">K2</span><span class=\"p\">,</span> <span class=\"mi\">13</span><span class=\"p\">,</span>  <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">e</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">F2</span><span class=\"p\">,</span> <span class=\"n\">K2</span><span class=\"p\">,</span>  <span class=\"mi\">6</span><span class=\"p\">,</span>  <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">F2</span><span class=\"p\">,</span> <span class=\"n\">K2</span><span class=\"p\">,</span>  <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">13</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">F2</span><span class=\"p\">,</span> <span class=\"n\">K2</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">F2</span><span class=\"p\">,</span> <span class=\"n\">K2</span><span class=\"p\">,</span>  <span class=\"mi\">7</span><span class=\"p\">,</span>  <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">F2</span><span class=\"p\">,</span> <span class=\"n\">K2</span><span class=\"p\">,</span>  <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"c1\">#/* #47 */\n</span>        <span class=\"c1\">#/* Round 4 */\n</span>        <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">e</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">F3</span><span class=\"p\">,</span> <span class=\"n\">K3</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">,</span>  <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">F3</span><span class=\"p\">,</span> <span class=\"n\">K3</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span>  <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">F3</span><span class=\"p\">,</span> <span class=\"n\">K3</span><span class=\"p\">,</span> <span class=\"mi\">14</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">F3</span><span class=\"p\">,</span> <span class=\"n\">K3</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">F3</span><span class=\"p\">,</span> <span class=\"n\">K3</span><span class=\"p\">,</span> <span class=\"mi\">14</span><span class=\"p\">,</span>  <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">e</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">F3</span><span class=\"p\">,</span> <span class=\"n\">K3</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">,</span>  <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">F3</span><span class=\"p\">,</span> <span class=\"n\">K3</span><span class=\"p\">,</span>  <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">F3</span><span class=\"p\">,</span> <span class=\"n\">K3</span><span class=\"p\">,</span>  <span class=\"mi\">8</span><span class=\"p\">,</span>  <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">F3</span><span class=\"p\">,</span> <span class=\"n\">K3</span><span class=\"p\">,</span>  <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">13</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">F3</span><span class=\"p\">,</span> <span class=\"n\">K3</span><span class=\"p\">,</span> <span class=\"mi\">14</span><span class=\"p\">,</span>  <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">e</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">F3</span><span class=\"p\">,</span> <span class=\"n\">K3</span><span class=\"p\">,</span>  <span class=\"mi\">5</span><span class=\"p\">,</span>  <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">F3</span><span class=\"p\">,</span> <span class=\"n\">K3</span><span class=\"p\">,</span>  <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">F3</span><span class=\"p\">,</span> <span class=\"n\">K3</span><span class=\"p\">,</span>  <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">14</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">F3</span><span class=\"p\">,</span> <span class=\"n\">K3</span><span class=\"p\">,</span>  <span class=\"mi\">6</span><span class=\"p\">,</span>  <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">F3</span><span class=\"p\">,</span> <span class=\"n\">K3</span><span class=\"p\">,</span>  <span class=\"mi\">5</span><span class=\"p\">,</span>  <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">e</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">F3</span><span class=\"p\">,</span> <span class=\"n\">K3</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span>  <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"c1\">#/* #63 */\n</span>        <span class=\"c1\">#/* Round 5 */\n</span>        <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">F4</span><span class=\"p\">,</span> <span class=\"n\">K4</span><span class=\"p\">,</span>  <span class=\"mi\">9</span><span class=\"p\">,</span>  <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">F4</span><span class=\"p\">,</span> <span class=\"n\">K4</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">,</span>  <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">F4</span><span class=\"p\">,</span> <span class=\"n\">K4</span><span class=\"p\">,</span>  <span class=\"mi\">5</span><span class=\"p\">,</span>  <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">F4</span><span class=\"p\">,</span> <span class=\"n\">K4</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">,</span>  <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">e</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">F4</span><span class=\"p\">,</span> <span class=\"n\">K4</span><span class=\"p\">,</span>  <span class=\"mi\">6</span><span class=\"p\">,</span>  <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">F4</span><span class=\"p\">,</span> <span class=\"n\">K4</span><span class=\"p\">,</span>  <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">F4</span><span class=\"p\">,</span> <span class=\"n\">K4</span><span class=\"p\">,</span> <span class=\"mi\">13</span><span class=\"p\">,</span>  <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">F4</span><span class=\"p\">,</span> <span class=\"n\">K4</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">F4</span><span class=\"p\">,</span> <span class=\"n\">K4</span><span class=\"p\">,</span>  <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">14</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">e</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">F4</span><span class=\"p\">,</span> <span class=\"n\">K4</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span>  <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">F4</span><span class=\"p\">,</span> <span class=\"n\">K4</span><span class=\"p\">,</span> <span class=\"mi\">13</span><span class=\"p\">,</span>  <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">F4</span><span class=\"p\">,</span> <span class=\"n\">K4</span><span class=\"p\">,</span> <span class=\"mi\">14</span><span class=\"p\">,</span>  <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">F4</span><span class=\"p\">,</span> <span class=\"n\">K4</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">F4</span><span class=\"p\">,</span> <span class=\"n\">K4</span><span class=\"p\">,</span>  <span class=\"mi\">8</span><span class=\"p\">,</span>  <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">e</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">F4</span><span class=\"p\">,</span> <span class=\"n\">K4</span><span class=\"p\">,</span>  <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">F4</span><span class=\"p\">,</span> <span class=\"n\">K4</span><span class=\"p\">,</span>  <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">13</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"c1\">#/* #79 */\n</span>\n        <span class=\"n\">aa</span> <span class=\"o\">=</span> <span class=\"n\">a</span>\n        <span class=\"n\">bb</span> <span class=\"o\">=</span> <span class=\"n\">b</span>\n        <span class=\"n\">cc</span> <span class=\"o\">=</span> <span class=\"n\">c</span>\n        <span class=\"n\">dd</span> <span class=\"o\">=</span> <span class=\"n\">d</span>\n        <span class=\"n\">ee</span> <span class=\"o\">=</span> <span class=\"n\">e</span>\n\n        <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">state</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">state</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n        <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">state</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n        <span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">state</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span>\n        <span class=\"n\">e</span> <span class=\"o\">=</span> <span class=\"n\">state</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]</span>\n\n        <span class=\"c1\">#/* Parallel round 1 */\n</span>        <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">F4</span><span class=\"p\">,</span> <span class=\"n\">KK0</span><span class=\"p\">,</span>  <span class=\"mi\">8</span><span class=\"p\">,</span>  <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">F4</span><span class=\"p\">,</span> <span class=\"n\">KK0</span><span class=\"p\">,</span>  <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">14</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">F4</span><span class=\"p\">,</span> <span class=\"n\">KK0</span><span class=\"p\">,</span>  <span class=\"mi\">9</span><span class=\"p\">,</span>  <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">e</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">F4</span><span class=\"p\">,</span> <span class=\"n\">KK0</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">,</span>  <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">F4</span><span class=\"p\">,</span> <span class=\"n\">KK0</span><span class=\"p\">,</span> <span class=\"mi\">13</span><span class=\"p\">,</span>  <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">F4</span><span class=\"p\">,</span> <span class=\"n\">KK0</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">,</span>  <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">F4</span><span class=\"p\">,</span> <span class=\"n\">KK0</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">F4</span><span class=\"p\">,</span> <span class=\"n\">KK0</span><span class=\"p\">,</span>  <span class=\"mi\">5</span><span class=\"p\">,</span>  <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">e</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">F4</span><span class=\"p\">,</span> <span class=\"n\">KK0</span><span class=\"p\">,</span>  <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">13</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">F4</span><span class=\"p\">,</span> <span class=\"n\">KK0</span><span class=\"p\">,</span>  <span class=\"mi\">7</span><span class=\"p\">,</span>  <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">F4</span><span class=\"p\">,</span> <span class=\"n\">KK0</span><span class=\"p\">,</span>  <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">F4</span><span class=\"p\">,</span> <span class=\"n\">KK0</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">,</span>  <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">F4</span><span class=\"p\">,</span> <span class=\"n\">KK0</span><span class=\"p\">,</span> <span class=\"mi\">14</span><span class=\"p\">,</span>  <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">e</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">F4</span><span class=\"p\">,</span> <span class=\"n\">KK0</span><span class=\"p\">,</span> <span class=\"mi\">14</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">F4</span><span class=\"p\">,</span> <span class=\"n\">KK0</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span>  <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">F4</span><span class=\"p\">,</span> <span class=\"n\">KK0</span><span class=\"p\">,</span>  <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"c1\">#/* #15 */\n</span>        <span class=\"c1\">#/* Parallel round 2 */\n</span>        <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">F3</span><span class=\"p\">,</span> <span class=\"n\">KK1</span><span class=\"p\">,</span>  <span class=\"mi\">9</span><span class=\"p\">,</span>  <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">F3</span><span class=\"p\">,</span> <span class=\"n\">KK1</span><span class=\"p\">,</span> <span class=\"mi\">13</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">e</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">F3</span><span class=\"p\">,</span> <span class=\"n\">KK1</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">,</span>  <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">F3</span><span class=\"p\">,</span> <span class=\"n\">KK1</span><span class=\"p\">,</span>  <span class=\"mi\">7</span><span class=\"p\">,</span>  <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">F3</span><span class=\"p\">,</span> <span class=\"n\">KK1</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span>  <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">F3</span><span class=\"p\">,</span> <span class=\"n\">KK1</span><span class=\"p\">,</span>  <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">13</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">F3</span><span class=\"p\">,</span> <span class=\"n\">KK1</span><span class=\"p\">,</span>  <span class=\"mi\">9</span><span class=\"p\">,</span>  <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">e</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">F3</span><span class=\"p\">,</span> <span class=\"n\">KK1</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">F3</span><span class=\"p\">,</span> <span class=\"n\">KK1</span><span class=\"p\">,</span>  <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">14</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">F3</span><span class=\"p\">,</span> <span class=\"n\">KK1</span><span class=\"p\">,</span>  <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">F3</span><span class=\"p\">,</span> <span class=\"n\">KK1</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span>  <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">F3</span><span class=\"p\">,</span> <span class=\"n\">KK1</span><span class=\"p\">,</span>  <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">e</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">F3</span><span class=\"p\">,</span> <span class=\"n\">KK1</span><span class=\"p\">,</span>  <span class=\"mi\">6</span><span class=\"p\">,</span>  <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">F3</span><span class=\"p\">,</span> <span class=\"n\">KK1</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">,</span>  <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">F3</span><span class=\"p\">,</span> <span class=\"n\">KK1</span><span class=\"p\">,</span> <span class=\"mi\">13</span><span class=\"p\">,</span>  <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">F3</span><span class=\"p\">,</span> <span class=\"n\">KK1</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">,</span>  <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"c1\">#/* #31 */\n</span>        <span class=\"c1\">#/* Parallel round 3 */\n</span>        <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">F2</span><span class=\"p\">,</span> <span class=\"n\">KK2</span><span class=\"p\">,</span>  <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">e</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">F2</span><span class=\"p\">,</span> <span class=\"n\">KK2</span><span class=\"p\">,</span>  <span class=\"mi\">7</span><span class=\"p\">,</span>  <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">F2</span><span class=\"p\">,</span> <span class=\"n\">KK2</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">,</span>  <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">F2</span><span class=\"p\">,</span> <span class=\"n\">KK2</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">,</span>  <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">F2</span><span class=\"p\">,</span> <span class=\"n\">KK2</span><span class=\"p\">,</span>  <span class=\"mi\">8</span><span class=\"p\">,</span>  <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">F2</span><span class=\"p\">,</span> <span class=\"n\">KK2</span><span class=\"p\">,</span>  <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">14</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">e</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">F2</span><span class=\"p\">,</span> <span class=\"n\">KK2</span><span class=\"p\">,</span>  <span class=\"mi\">6</span><span class=\"p\">,</span>  <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">F2</span><span class=\"p\">,</span> <span class=\"n\">KK2</span><span class=\"p\">,</span> <span class=\"mi\">14</span><span class=\"p\">,</span>  <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">F2</span><span class=\"p\">,</span> <span class=\"n\">KK2</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">F2</span><span class=\"p\">,</span> <span class=\"n\">KK2</span><span class=\"p\">,</span> <span class=\"mi\">13</span><span class=\"p\">,</span>  <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">F2</span><span class=\"p\">,</span> <span class=\"n\">KK2</span><span class=\"p\">,</span>  <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">e</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">F2</span><span class=\"p\">,</span> <span class=\"n\">KK2</span><span class=\"p\">,</span> <span class=\"mi\">14</span><span class=\"p\">,</span>  <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">F2</span><span class=\"p\">,</span> <span class=\"n\">KK2</span><span class=\"p\">,</span> <span class=\"mi\">13</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">F2</span><span class=\"p\">,</span> <span class=\"n\">KK2</span><span class=\"p\">,</span> <span class=\"mi\">13</span><span class=\"p\">,</span>  <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">F2</span><span class=\"p\">,</span> <span class=\"n\">KK2</span><span class=\"p\">,</span>  <span class=\"mi\">7</span><span class=\"p\">,</span>  <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">F2</span><span class=\"p\">,</span> <span class=\"n\">KK2</span><span class=\"p\">,</span>  <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">13</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"c1\">#/* #47 */\n</span>        <span class=\"c1\">#/* Parallel round 4 */\n</span>        <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">e</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">F1</span><span class=\"p\">,</span> <span class=\"n\">KK3</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">,</span>  <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">F1</span><span class=\"p\">,</span> <span class=\"n\">KK3</span><span class=\"p\">,</span>  <span class=\"mi\">5</span><span class=\"p\">,</span>  <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">F1</span><span class=\"p\">,</span> <span class=\"n\">KK3</span><span class=\"p\">,</span>  <span class=\"mi\">8</span><span class=\"p\">,</span>  <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">F1</span><span class=\"p\">,</span> <span class=\"n\">KK3</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">,</span>  <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">F1</span><span class=\"p\">,</span> <span class=\"n\">KK3</span><span class=\"p\">,</span> <span class=\"mi\">14</span><span class=\"p\">,</span>  <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">e</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">F1</span><span class=\"p\">,</span> <span class=\"n\">KK3</span><span class=\"p\">,</span> <span class=\"mi\">14</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">F1</span><span class=\"p\">,</span> <span class=\"n\">KK3</span><span class=\"p\">,</span>  <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">F1</span><span class=\"p\">,</span> <span class=\"n\">KK3</span><span class=\"p\">,</span> <span class=\"mi\">14</span><span class=\"p\">,</span>  <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">F1</span><span class=\"p\">,</span> <span class=\"n\">KK3</span><span class=\"p\">,</span>  <span class=\"mi\">6</span><span class=\"p\">,</span>  <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">F1</span><span class=\"p\">,</span> <span class=\"n\">KK3</span><span class=\"p\">,</span>  <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">e</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">F1</span><span class=\"p\">,</span> <span class=\"n\">KK3</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span>  <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">F1</span><span class=\"p\">,</span> <span class=\"n\">KK3</span><span class=\"p\">,</span>  <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">13</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">F1</span><span class=\"p\">,</span> <span class=\"n\">KK3</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span>  <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">F1</span><span class=\"p\">,</span> <span class=\"n\">KK3</span><span class=\"p\">,</span>  <span class=\"mi\">5</span><span class=\"p\">,</span>  <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">F1</span><span class=\"p\">,</span> <span class=\"n\">KK3</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">e</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">F1</span><span class=\"p\">,</span> <span class=\"n\">KK3</span><span class=\"p\">,</span>  <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">14</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"c1\">#/* #63 */\n</span>        <span class=\"c1\">#/* Parallel round 5 */\n</span>        <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">F0</span><span class=\"p\">,</span> <span class=\"n\">KK4</span><span class=\"p\">,</span>  <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">F0</span><span class=\"p\">,</span> <span class=\"n\">KK4</span><span class=\"p\">,</span>  <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">F0</span><span class=\"p\">,</span> <span class=\"n\">KK4</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">F0</span><span class=\"p\">,</span> <span class=\"n\">KK4</span><span class=\"p\">,</span>  <span class=\"mi\">9</span><span class=\"p\">,</span>  <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">e</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">F0</span><span class=\"p\">,</span> <span class=\"n\">KK4</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span>  <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">F0</span><span class=\"p\">,</span> <span class=\"n\">KK4</span><span class=\"p\">,</span>  <span class=\"mi\">5</span><span class=\"p\">,</span>  <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">F0</span><span class=\"p\">,</span> <span class=\"n\">KK4</span><span class=\"p\">,</span> <span class=\"mi\">14</span><span class=\"p\">,</span>  <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">F0</span><span class=\"p\">,</span> <span class=\"n\">KK4</span><span class=\"p\">,</span>  <span class=\"mi\">6</span><span class=\"p\">,</span>  <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">F0</span><span class=\"p\">,</span> <span class=\"n\">KK4</span><span class=\"p\">,</span>  <span class=\"mi\">8</span><span class=\"p\">,</span>  <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">e</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">F0</span><span class=\"p\">,</span> <span class=\"n\">KK4</span><span class=\"p\">,</span> <span class=\"mi\">13</span><span class=\"p\">,</span>  <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">F0</span><span class=\"p\">,</span> <span class=\"n\">KK4</span><span class=\"p\">,</span>  <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">13</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">F0</span><span class=\"p\">,</span> <span class=\"n\">KK4</span><span class=\"p\">,</span>  <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">14</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">F0</span><span class=\"p\">,</span> <span class=\"n\">KK4</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">,</span>  <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">F0</span><span class=\"p\">,</span> <span class=\"n\">KK4</span><span class=\"p\">,</span> <span class=\"mi\">13</span><span class=\"p\">,</span>  <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">e</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">F0</span><span class=\"p\">,</span> <span class=\"n\">KK4</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">,</span>  <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">F0</span><span class=\"p\">,</span> <span class=\"n\">KK4</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"c1\">#/* #79 */\n</span>\n        <span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">state</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">cc</span> <span class=\"o\">+</span> <span class=\"n\">d</span><span class=\"p\">)</span> <span class=\"o\">%</span> <span class=\"mh\">0x100000000</span>\n        <span class=\"n\">state</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">state</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">dd</span> <span class=\"o\">+</span> <span class=\"n\">e</span><span class=\"p\">)</span> <span class=\"o\">%</span> <span class=\"mh\">0x100000000</span>\n        <span class=\"n\">state</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">state</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">ee</span> <span class=\"o\">+</span> <span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"o\">%</span> <span class=\"mh\">0x100000000</span>\n        <span class=\"n\">state</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">state</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">aa</span> <span class=\"o\">+</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"o\">%</span> <span class=\"mh\">0x100000000</span>\n        <span class=\"n\">state</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">state</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">bb</span> <span class=\"o\">+</span> <span class=\"n\">c</span><span class=\"p\">)</span> <span class=\"o\">%</span> <span class=\"mh\">0x100000000</span>\n        <span class=\"n\">state</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">t</span> <span class=\"o\">%</span> <span class=\"mh\">0x100000000</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">ripemd160</span>\n\n<span class=\"n\">ripemd160</span> <span class=\"o\">=</span> <span class=\"n\">gen_ripemd160_with_variable_scope_protector_to_not_pollute_global_namespace</span><span class=\"p\">()</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">ripemd160</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s\">'hello this is a test'</span><span class=\"p\">).</span><span class=\"nb\">hex</span><span class=\"p\">())</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"number of bytes in a RIPEMD-160 digest: \"</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">ripemd160</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s\">''</span><span class=\"p\">)))</span>\n</code></pre></div></div>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>f51960af7dd4813a587ab26388ddab3b28d1f7b4\nnumber of bytes in a RIPEMD-160 digest:  20\n</code></pre></div></div>\n\n<p>As with SHA256 above, again we see a “bit scrambler” of a lot of binary ops. Pretty cool.</p>\n\n<p>Okay we are finally ready to get our Bitcoin address. We are going to make this nice by creating a subclass of <code class=\"language-plaintext highlighter-rouge\">Point</code> called <code class=\"language-plaintext highlighter-rouge\">PublicKey</code> which is, again, just a Point on the Curve but now has some additional semantics and interpretation of a Bitcoin public key, together with some methods of encoding/decoding the key into bytes for communication in the Bitcoin protocol.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>\n<span class=\"k\">class</span> <span class=\"nc\">PublicKey</span><span class=\"p\">(</span><span class=\"n\">Point</span><span class=\"p\">):</span>\n    <span class=\"s\">\"\"\"\n    The public key is just a Point on a Curve, but has some additional specific\n    encoding / decoding functionality that this class implements.\n    \"\"\"</span>\n\n    <span class=\"o\">@</span><span class=\"nb\">classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">from_point</span><span class=\"p\">(</span><span class=\"n\">cls</span><span class=\"p\">,</span> <span class=\"n\">pt</span><span class=\"p\">:</span> <span class=\"n\">Point</span><span class=\"p\">):</span>\n        <span class=\"s\">\"\"\" promote a Point to be a PublicKey \"\"\"</span>\n        <span class=\"k\">return</span> <span class=\"n\">cls</span><span class=\"p\">(</span><span class=\"n\">pt</span><span class=\"p\">.</span><span class=\"n\">curve</span><span class=\"p\">,</span> <span class=\"n\">pt</span><span class=\"p\">.</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">pt</span><span class=\"p\">.</span><span class=\"n\">y</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">encode</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">compressed</span><span class=\"p\">,</span> <span class=\"n\">hash160</span><span class=\"o\">=</span><span class=\"bp\">False</span><span class=\"p\">):</span>\n        <span class=\"s\">\"\"\" return the SEC bytes encoding of the public key Point \"\"\"</span>\n        <span class=\"c1\"># calculate the bytes\n</span>        <span class=\"k\">if</span> <span class=\"n\">compressed</span><span class=\"p\">:</span>\n            <span class=\"c1\"># (x,y) is very redundant. Because y^2 = x^3 + 7,\n</span>            <span class=\"c1\"># we can just encode x, and then y = +/- sqrt(x^3 + 7),\n</span>            <span class=\"c1\"># so we need one more bit to encode whether it was the + or the -\n</span>            <span class=\"c1\"># but because this is modular arithmetic there is no +/-, instead\n</span>            <span class=\"c1\"># it can be shown that one y will always be even and the other odd.\n</span>            <span class=\"n\">prefix</span> <span class=\"o\">=</span> <span class=\"sa\">b</span><span class=\"s\">'</span><span class=\"se\">\\x02</span><span class=\"s\">'</span> <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">y</span> <span class=\"o\">%</span> <span class=\"mi\">2</span> <span class=\"o\">==</span> <span class=\"mi\">0</span> <span class=\"k\">else</span> <span class=\"sa\">b</span><span class=\"s\">'</span><span class=\"se\">\\x03</span><span class=\"s\">'</span>\n            <span class=\"n\">pkb</span> <span class=\"o\">=</span> <span class=\"n\">prefix</span> <span class=\"o\">+</span> <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">to_bytes</span><span class=\"p\">(</span><span class=\"mi\">32</span><span class=\"p\">,</span> <span class=\"s\">'big'</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">pkb</span> <span class=\"o\">=</span> <span class=\"sa\">b</span><span class=\"s\">'</span><span class=\"se\">\\x04</span><span class=\"s\">'</span> <span class=\"o\">+</span> <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">to_bytes</span><span class=\"p\">(</span><span class=\"mi\">32</span><span class=\"p\">,</span> <span class=\"s\">'big'</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">y</span><span class=\"p\">.</span><span class=\"n\">to_bytes</span><span class=\"p\">(</span><span class=\"mi\">32</span><span class=\"p\">,</span> <span class=\"s\">'big'</span><span class=\"p\">)</span>\n        <span class=\"c1\"># hash if desired\n</span>        <span class=\"k\">return</span> <span class=\"n\">ripemd160</span><span class=\"p\">(</span><span class=\"n\">sha256</span><span class=\"p\">(</span><span class=\"n\">pkb</span><span class=\"p\">))</span> <span class=\"k\">if</span> <span class=\"n\">hash160</span> <span class=\"k\">else</span> <span class=\"n\">pkb</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">address</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">net</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">compressed</span><span class=\"p\">:</span> <span class=\"nb\">bool</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n        <span class=\"s\">\"\"\" return the associated bitcoin address for this public key as string \"\"\"</span>\n        <span class=\"c1\"># encode the public key into bytes and hash to get the payload\n</span>        <span class=\"n\">pkb_hash</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"n\">compressed</span><span class=\"o\">=</span><span class=\"n\">compressed</span><span class=\"p\">,</span> <span class=\"n\">hash160</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n        <span class=\"c1\"># add version byte (0x00 for Main Network, or 0x6f for Test Network)\n</span>        <span class=\"n\">version</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s\">'main'</span><span class=\"p\">:</span> <span class=\"sa\">b</span><span class=\"s\">'</span><span class=\"se\">\\x00</span><span class=\"s\">'</span><span class=\"p\">,</span> <span class=\"s\">'test'</span><span class=\"p\">:</span> <span class=\"sa\">b</span><span class=\"s\">'</span><span class=\"se\">\\x6f</span><span class=\"s\">'</span><span class=\"p\">}</span>\n        <span class=\"n\">ver_pkb_hash</span> <span class=\"o\">=</span> <span class=\"n\">version</span><span class=\"p\">[</span><span class=\"n\">net</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">pkb_hash</span>\n        <span class=\"c1\"># calculate the checksum\n</span>        <span class=\"n\">checksum</span> <span class=\"o\">=</span> <span class=\"n\">sha256</span><span class=\"p\">(</span><span class=\"n\">sha256</span><span class=\"p\">(</span><span class=\"n\">ver_pkb_hash</span><span class=\"p\">))[:</span><span class=\"mi\">4</span><span class=\"p\">]</span>\n        <span class=\"c1\"># append to form the full 25-byte binary Bitcoin Address\n</span>        <span class=\"n\">byte_address</span> <span class=\"o\">=</span> <span class=\"n\">ver_pkb_hash</span> <span class=\"o\">+</span> <span class=\"n\">checksum</span>\n        <span class=\"c1\"># finally b58 encode the result\n</span>        <span class=\"n\">b58check_address</span> <span class=\"o\">=</span> <span class=\"n\">b58encode</span><span class=\"p\">(</span><span class=\"n\">byte_address</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">b58check_address</span>\n\n</code></pre></div></div>\n\n<p>We are not yet ready to take this class for a spin because you’ll note there is one more necessary dependency here, which is the b58 encoding function <code class=\"language-plaintext highlighter-rouge\">b58encode</code>. This is just a Bitcoin-specific encoding of bytes that uses base 58, of characters of the alphabet that are very unambiguous. For example it does not use ‘O’ and ‘0’, because they are very easy to mess up on paper. So we have to take our Bitcoin address (which is 25 bytes in its raw form) and convert it to base 58 and print out the characters. The raw 25 bytes of our address though contain 1 byte for a Version (the Bitcoin “main net” is <code class=\"language-plaintext highlighter-rouge\">b'\\x00'</code>, while the Bitcoin “test net” uses <code class=\"language-plaintext highlighter-rouge\">b'\\x6f'</code>), then the 20 bytes from the hash digest, and finally 4 bytes for a checksum so we can throw an error with <code class=\"language-plaintext highlighter-rouge\">1 - 1/2**32 = 99.99999998%</code> probability in case a user messes up typing in their Bitcoin address into some textbox. So here is the b58 encoding:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># base58 encoding / decoding utilities\n# reference: https://en.bitcoin.it/wiki/Base58Check_encoding\n</span>\n<span class=\"n\">alphabet</span> <span class=\"o\">=</span> <span class=\"s\">'123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">b58encode</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">:</span> <span class=\"nb\">bytes</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n    <span class=\"k\">assert</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">25</span> <span class=\"c1\"># version is 1 byte, pkb_hash 20 bytes, checksum 4 bytes\n</span>    <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">.</span><span class=\"n\">from_bytes</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"s\">'big'</span><span class=\"p\">)</span>\n    <span class=\"n\">chars</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">while</span> <span class=\"n\">n</span><span class=\"p\">:</span>\n        <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"nb\">divmod</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"mi\">58</span><span class=\"p\">)</span>\n        <span class=\"n\">chars</span><span class=\"p\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">alphabet</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span>\n    <span class=\"c1\"># special case handle the leading 0 bytes... ¯\\_(ツ)_/¯\n</span>    <span class=\"n\">num_leading_zeros</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">lstrip</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s\">'</span><span class=\"se\">\\x00</span><span class=\"s\">'</span><span class=\"p\">))</span>\n    <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">num_leading_zeros</span> <span class=\"o\">*</span> <span class=\"n\">alphabet</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"s\">''</span><span class=\"p\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"nb\">reversed</span><span class=\"p\">(</span><span class=\"n\">chars</span><span class=\"p\">))</span>\n    <span class=\"k\">return</span> <span class=\"n\">res</span>\n\n</code></pre></div></div>\n\n<p>Let’s now print our Bitcoin address:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># we are going to use the develop's Bitcoin parallel universe \"test net\" for this demo, so net='test'\n</span><span class=\"n\">address</span> <span class=\"o\">=</span> <span class=\"n\">PublicKey</span><span class=\"p\">.</span><span class=\"n\">from_point</span><span class=\"p\">(</span><span class=\"n\">public_key</span><span class=\"p\">).</span><span class=\"n\">address</span><span class=\"p\">(</span><span class=\"n\">net</span><span class=\"o\">=</span><span class=\"s\">'test'</span><span class=\"p\">,</span> <span class=\"n\">compressed</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">address</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>mnNcaVkC35ezZSgvn8fhXEa9QTHSUtPfzQ\n</code></pre></div></div>\n\n<p>Cool, we can now check some block explorer website to verify that this address has never transacted before:\n<a href=\"https://www.blockchain.com/btc-testnet/address/mnNcaVkC35ezZSgvn8fhXEa9QTHSUtPfzQ\">https://www.blockchain.com/btc-testnet/address/mnNcaVkC35ezZSgvn8fhXEa9QTHSUtPfzQ</a>. By the end of this tutorial it won’t be, but at the time of writing indeed I saw that this address is “clean”, so noone has generated and used the secret key on the testnet so far like we did up above. Which makes sense because there would have to be some other “Andrej” with a bad sense of humor also tinkering with Bitcoin. But we can also check some super non-secret secret keys, which we expect would have been used be people in the past. For example we can check the address belonging to the lowest valid secret key of 1, where the public key is exactly the generator point :). Here’s how we get it:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">lol_secret_key</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n<span class=\"n\">lol_public_key</span> <span class=\"o\">=</span> <span class=\"n\">lol_secret_key</span> <span class=\"o\">*</span> <span class=\"n\">G</span>\n<span class=\"n\">lol_address</span> <span class=\"o\">=</span> <span class=\"n\">PublicKey</span><span class=\"p\">.</span><span class=\"n\">from_point</span><span class=\"p\">(</span><span class=\"n\">lol_public_key</span><span class=\"p\">).</span><span class=\"n\">address</span><span class=\"p\">(</span><span class=\"n\">net</span><span class=\"o\">=</span><span class=\"s\">'test'</span><span class=\"p\">,</span> <span class=\"n\">compressed</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n<span class=\"n\">lol_address</span>\n</code></pre></div></div>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>'mrCDrCybB6J1vRfbwM5hemdJz73FwDBC8r'\n</code></pre></div></div>\n\n<p>Indeed, as we <a href=\"https://www.blockchain.com/btc-testnet/address/mrCDrCybB6J1vRfbwM5hemdJz73FwDBC8r\">see</a> on the blockchain explorer that this address has transacted 1,812 times at the time of writing and has a balance of $0.00 BTC. This makes sense because if it did have any balance (in the naive case, modulo some subtleties with the scripting language we’ll go into) then anyone would just be able to spend it because they know secret key (1) and can use it to digitally sign transactions that spend it. We’ll see how that works shortly.</p>\n\n<h4 id=\"part-1-summary-so-far\">Part 1: Summary so far</h4>\n\n<p>We are able to generate a crypto identity that consists of a secret key (a random integer) that only we know, and a derived public key by jumping around the Elliptic curve using scalar multiplication of the Generating point on the Bitcoin elliptic curve. We then also derived the associated Bitcoin address which we can share with others to ask for moneys, and doing so involved the introduction of two hash functions (SHA256 and RIPEMD160). Here are the three important quantities summarized and printed out again:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"Our first Bitcoin identity:\"</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"1. secret key: \"</span><span class=\"p\">,</span> <span class=\"n\">secret_key</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"2. public key: \"</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">public_key</span><span class=\"p\">.</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">public_key</span><span class=\"p\">.</span><span class=\"n\">y</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"3. Bitcoin address: \"</span><span class=\"p\">,</span> <span class=\"n\">address</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Our first Bitcoin identity:\n1. secret key:  22265090479312778178772228083027296664144\n2. public key:  (83998262154709529558614902604110599582969848537757180553516367057821848015989, 37676469766173670826348691885774454391218658108212372128812329274086400588247)\n3. Bitcoin address:  mnNcaVkC35ezZSgvn8fhXEa9QTHSUtPfzQ\n</code></pre></div></div>\n\n<h4 id=\"part-2-obtaining-seed-funds--intro-to-bitcoin-under-the-hood\">Part 2: Obtaining seed funds + intro to Bitcoin under the hood</h4>\n\n<p>It is now time to create a transaction. We are going to be sending some BTC from the address we generated above (mnNcaVkC35ezZSgvn8fhXEa9QTHSUtPfzQ) to some second wallet we control. Let’s create this second “target” wallet now:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">secret_key2</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">.</span><span class=\"n\">from_bytes</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s\">\"Andrej's Super Secret 2nd Wallet\"</span><span class=\"p\">,</span> <span class=\"s\">'big'</span><span class=\"p\">)</span> <span class=\"c1\"># or just random.randrange(1, bitcoin_gen.n)\n</span><span class=\"k\">assert</span> <span class=\"mi\">1</span> <span class=\"o\">&lt;=</span> <span class=\"n\">secret_key2</span> <span class=\"o\">&lt;</span> <span class=\"n\">bitcoin_gen</span><span class=\"p\">.</span><span class=\"n\">n</span> <span class=\"c1\"># check it's valid\n</span><span class=\"n\">public_key2</span> <span class=\"o\">=</span> <span class=\"n\">secret_key2</span> <span class=\"o\">*</span> <span class=\"n\">G</span>\n<span class=\"n\">address2</span> <span class=\"o\">=</span> <span class=\"n\">PublicKey</span><span class=\"p\">.</span><span class=\"n\">from_point</span><span class=\"p\">(</span><span class=\"n\">public_key2</span><span class=\"p\">).</span><span class=\"n\">address</span><span class=\"p\">(</span><span class=\"n\">net</span><span class=\"o\">=</span><span class=\"s\">'test'</span><span class=\"p\">,</span> <span class=\"n\">compressed</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"Our second Bitcoin identity:\"</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"1. secret key: \"</span><span class=\"p\">,</span> <span class=\"n\">secret_key2</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"2. public key: \"</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">public_key2</span><span class=\"p\">.</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">public_key2</span><span class=\"p\">.</span><span class=\"n\">y</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"3. Bitcoin address: \"</span><span class=\"p\">,</span> <span class=\"n\">address2</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Our second Bitcoin identity:\n1. secret key:  29595381593786747354608258168471648998894101022644411052850960746671046944116\n2. public key:  (70010837237584666034852528437623689803658776589997047576978119215393051139210, 35910266550486169026860404782843121421687961955681935571785539885177648410329)\n3. Bitcoin address:  mrFF91kpuRbivucowsY512fDnYt6BWrvx9\n</code></pre></div></div>\n\n<p>Ok great so our goal is to send some BTC from mnNcaVkC35ezZSgvn8fhXEa9QTHSUtPfzQ to mrFF91kpuRbivucowsY512fDnYt6BWrvx9. First, because we just generated these identities from scratch, the first address has no bitcoin on it. Because we are using the “parallel universe” developer-intended Bitcoin test network, we can use one of multiple available faucets to pretty please request some BTC. I did this by Googling “bitcoin testnet faucet”, hitting the first link, and asking the faucet to send some bitcoins to our source address  mnNcaVkC35ezZSgvn8fhXEa9QTHSUtPfzQ. A few minutes later, we can go back to the blockchain explorer and see that we <a href=\"https://www.blockchain.com/btc-testnet/address/mnNcaVkC35ezZSgvn8fhXEa9QTHSUtPfzQ\">received the coins</a>, in this case 0.001 BTC. Faucets are available for the test net, but of course you won’t find them on the main net :) You’d have to e.g. open up a Coinbase account (which generates a wallet) and buy some BTC for USD. In this tutorial we’ll be working on the test net, but everything we do would work just fine on the main net as well.</p>\n\n<p>Now if we click on the exact <a href=\"https://www.blockchain.com/btc-testnet/tx/46325085c89fb98a4b7ceee44eac9b955f09e1ddc86d8dad3dfdcba46b4d36b2\">transaction ID</a> we can see a bunch of additional information that gets to the heart of Bitcoin and how money is represented in it.</p>\n\n<p><strong>Transaction id</strong>. First note that every transaction has a distinct id / hash. In this case the faucet transaction has id 46325085c89fb98a4b7ceee44eac9b955f09e1ddc86d8dad3dfdcba46b4d36b2. As we’ll see, this is just a SHA256 double hash (hash of a hash) of the transaction data structure that we’ll see soon serialized into bytes. Double SHA256 hashes are often used in place of a single hash in Bitcoin for added security, to mitigate a <a href=\"https://en.wikipedia.org/wiki/SHA-2#Comparison_of_SHA_functions\">few shortcomings</a> of just one round of SHA256, and some related attacks discovered on the older version of SHA (SHA-1).</p>\n\n<p><strong>Inputs and Outputs</strong>. We see that the faucet transaction has 1 input and 2 outputs. The 1 input came from address\n2MwjXCY7RRpo8MYjtsJtP5erNirzFB9MtnH of value 0.17394181 BTC. There were 2 outputs. The second output was our address and we received exactly 0.001 BTC. The first output is some different, unknown address 2NCorZJ6XfdimrFQuwWjcJhQJDxPqjNgLzG which received 0.17294013 BTC, and is presumably controlled by the faucet owners. Notice that the the inputs don’t exactly add up to the outputs. Indeed we have that <code class=\"language-plaintext highlighter-rouge\">0.17394181 - (0.001 + 0.17294013) = 0.00000168</code>. This “change” amount is called the fee, and this fee is allowed to claimed by the Bitcoin miner who has included this transaction in their block, which in this case was <a href=\"https://www.blockchain.com/btc-testnet/block/2005500\">Block 2005500</a>. You can see that this block had 48 transactions, and the faucet transaction was one of them! Now, the fee acts as a financial incentive for miners to include the transaction in their block, because they get to keep the change. The higher the fee to the miner, the more likely and faster the transaction is to appear in the blockchain. With a high fee we’d expect it to be eagerly taken up by miners and included in the very next block. With a low fee the transaction might never be included, because there are many other transactions broadcasted in the network that are willing to pay a higher fee. So if you’re a miner and you have a finite amount of space to put into your Block - why bother?</p>\n\n<p>When we make our own transaction, we’ll have to make sure to include this tip for the miner, and pay “market rate”, which we’ll look up. In the case of this block, we can see that the total amount of BTC made by the miner of this block was 0.09765625 BTC from the special “Coinbase” transaction, that each miner is allowed to send from a null input to themselves, and then a total of 0.00316119 BTC was the total fee reward, summed up over all of the 47 non-Coinbase transactions in this block.</p>\n\n<p><strong>Size</strong>. Also note that this transaction (serialized) was 249 bytes. This is a pretty average size for a simple transaction like this.</p>\n\n<p><strong>Pkscript</strong>. Lastly note that the second Output (our 0.001 BTC) when you scroll down to its details has a “Pkscript” field, which shows:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>OP_DUP\nOP_HASH160\n4b3518229b0d3554fe7cd3796ade632aff3069d8\nOP_EQUALVERIFY\nOP_CHECKSIG\n</code></pre></div></div>\n\n<p>This is where things get a bit crazy with Bitcoin. It has a whole stack-based scripting language, but unless you’re doing crazy multisig smart contract triple escrow backflips (?), the vast majority of transactions use one of very few simple “special case” scripts, just like the one here. By now my eyes just glaze over it as the standard simple thing. This “Pkscript” is the “locking script” for this specific Output, which holds 0.001 BTC in it. We are going to want to spend this Output and turn it into an Input in our upcoming transaction. In order to unlock this output we are going to have to satisfy the conditions of this locking script. In English, this script is saying that any Transaction that aspires to spend this Output must satisfy two conditions. 1) their Public key better hash to 4b3518229b0d3554fe7cd3796ade632aff3069d8. And 2) the digital signature for the aspiring transaction better validate as being generated by this public key’s associated private key. Only the owner of the secret key will be able to both 1) provide the full public key, which will be checked to hash correctly, and 2) create the digital signature, as we’ll soon see.</p>\n\n<p>By the way, we can verify that of course our public key hashes correctly, so we’ll be able to include it in our upcoming transaction, and the all of the mining nodes will be able to verify condition (1). Very early Bitcoin transactions had locking scripts that directly contained the public key (instead of its hash) followed by OP_CHECKSIG, but doing it in this slightly more complex way protects the exact public key behind the hash, until the owner wants to spend the funds, only then do they reveal the public key. (If you’d like to learn more look up p2pk vs p2pkh transactions).</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">PublicKey</span><span class=\"p\">.</span><span class=\"n\">from_point</span><span class=\"p\">(</span><span class=\"n\">public_key</span><span class=\"p\">).</span><span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"n\">compressed</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">,</span> <span class=\"n\">hash160</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">).</span><span class=\"nb\">hex</span><span class=\"p\">()</span>\n</code></pre></div></div>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>'4b3518229b0d3554fe7cd3796ade632aff3069d8'\n</code></pre></div></div>\n\n<h4 id=\"part-3-crafting-our-transaction\">Part 3: Crafting our transaction</h4>\n\n<p>Okay, now we’re going to actually craft our transaction. Let’s say that we want to send half of our funds to our second wallet. i.e. we currently have a wallet with 0.001 BTC, and we’d like to send 0.0005 BTC to our second wallet. To achieve this our transaction will have exactly one input (= 2nd output of the faucet transaction), and exactly 2 outputs. One output will go to our 2nd address, and the rest of it we will send back to our own address!</p>\n\n<p>This here is a critical part to understand. It’s a bit funky. Every Input/Output of any bitcoin transaction must always be fully spent. So if we own 0.001 BTC and want to send half of it somewhere else, we actually have to send one half there, and one half back to us.</p>\n\n<p>The Transaction will be considered valid if the sum of all outputs is lower than the sum of all inputs (so we’re not minting money). The remainder will be the “change” (fee) that will be claimed by the winning miner who lucks out on the proof of work, and includes our transaction in their newly mined block.</p>\n\n<p>Let’s begin with the transaction input data structure:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>\n<span class=\"o\">@</span><span class=\"n\">dataclass</span>\n<span class=\"k\">class</span> <span class=\"nc\">TxIn</span><span class=\"p\">:</span>\n    <span class=\"n\">prev_tx</span><span class=\"p\">:</span> <span class=\"nb\">bytes</span> <span class=\"c1\"># prev transaction ID: hash256 of prev tx contents\n</span>    <span class=\"n\">prev_index</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"c1\"># UTXO output index in the transaction\n</span>    <span class=\"n\">script_sig</span><span class=\"p\">:</span> <span class=\"n\">Script</span> <span class=\"o\">=</span> <span class=\"bp\">None</span> <span class=\"c1\"># unlocking script, Script class coming a bit later below\n</span>    <span class=\"n\">sequence</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mh\">0xffffffff</span> <span class=\"c1\"># originally intended for \"high frequency trades\", with locktime\n</span>\n<span class=\"n\">tx_in</span> <span class=\"o\">=</span> <span class=\"n\">TxIn</span><span class=\"p\">(</span>\n    <span class=\"n\">prev_tx</span> <span class=\"o\">=</span> <span class=\"nb\">bytes</span><span class=\"p\">.</span><span class=\"n\">fromhex</span><span class=\"p\">(</span><span class=\"s\">'46325085c89fb98a4b7ceee44eac9b955f09e1ddc86d8dad3dfdcba46b4d36b2'</span><span class=\"p\">),</span>\n    <span class=\"n\">prev_index</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n    <span class=\"n\">script_sig</span> <span class=\"o\">=</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"c1\"># this field will have the digital signature, to be inserted later\n</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>The first two variables (<code class=\"language-plaintext highlighter-rouge\">prev_tx, prev_index</code>) identify a specific Output that we are going to spend. Note again that nowhere are we specifying how much of the output we want to spend. We must spend the output (or a “UTXO” as it’s often called, short for Unspent Transaction Output) in its entirety. Once we consume this UTXO in its entirety we are free to “chunk up” its value into however many outputs we like, and optionally send some of those chunks back to our own address. Anyway, in this case we are identifying the transaction that sent us the Bitcoins, and we’re saying that the Output we intend to spend is at the 1th index of it. The 0th index went to some other unknown address controlled by the faucet, which we won’t be able to spend because we don’t control it (we don’t have the private key and won’t be able to create the digital signature).</p>\n\n<p>The <code class=\"language-plaintext highlighter-rouge\">script_sig</code> field we are going to revisit later. This is where the digital signature will go, cryptographically signing the desired transaction with our private key and effectively saying “I approve this transaction as the possessor of the private key whose public key hashes to 4b3518229b0d3554fe7cd3796ade632aff3069d8”.</p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">sequence</code> was in the original Bitcoin implementation from Satoshi and was intended to provide a type of “high frequency trade” functionality, but has very limited uses today and we’ll mostly ignore.</p>\n\n<p><strong>Calculating the fee.</strong> Great, so the above data structure references the Inputs of our transaction (1 input here). Let’s now create the data structures for the two outputs of our transaction. To get a sense of the going “market rate” of transaction fees there are a number of websites available, or we can just scroll through some transactions in a recent block to get a sense. A number of recent transactions (including the one above) were packaged into a block even at &lt;1 satoshi/byte (satoshi is 1e-8 of a bitcoin). So let’s try to go with a very generous fee of maybe 10 sat/B, or a total transaction fee of 0.0000001. In that case we are taking our input of 0.001 BTC = 100,000 sat, the fee will be 2,500 sat (because our transaction will be approx. 250 bytes), we are going to send 50,000 sat to our target wallet, and the rest (<code class=\"language-plaintext highlighter-rouge\">100,000 - 2,500 - 50,000 = 47,500</code>) back to us.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>\n<span class=\"o\">@</span><span class=\"n\">dataclass</span>\n<span class=\"k\">class</span> <span class=\"nc\">TxOut</span><span class=\"p\">:</span>\n    <span class=\"n\">amount</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"c1\"># in units of satoshi (1e-8 of a bitcoin)\n</span>    <span class=\"n\">script_pubkey</span><span class=\"p\">:</span> <span class=\"n\">Script</span> <span class=\"o\">=</span> <span class=\"bp\">None</span> <span class=\"c1\"># locking script\n</span>\n<span class=\"n\">tx_out1</span> <span class=\"o\">=</span> <span class=\"n\">TxOut</span><span class=\"p\">(</span>\n    <span class=\"n\">amount</span> <span class=\"o\">=</span> <span class=\"mi\">50000</span> <span class=\"c1\"># we will send this 50,000 sat to our target wallet\n</span><span class=\"p\">)</span>\n<span class=\"n\">tx_out2</span> <span class=\"o\">=</span> <span class=\"n\">TxOut</span><span class=\"p\">(</span>\n    <span class=\"n\">amount</span> <span class=\"o\">=</span> <span class=\"mi\">47500</span> <span class=\"c1\"># back to us\n</span><span class=\"p\">)</span>\n<span class=\"c1\"># the fee of 2500 does not need to be manually specified, the miner will claim it\n</span></code></pre></div></div>\n\n<p><strong>Populating the locking scripts</strong>. We’re now going to populate the <code class=\"language-plaintext highlighter-rouge\">script_pubkey</code> “locking script” for both of these outputs. Essentially we want to specify the conditions under which each output can be spent by some future transaction. As mentioned, Bitcoin has a rich scripting language with almost 100 instructions that can be sequenced into various locking / unlocking scripts, but here we are going to use the super standard and ubiquitous script we already saw above, and which was also used by the faucet to pay us. To indicate the ownership of both of these outputs we basically want to specify the public key hash of whoever can spend the output. Except we have to dress that up with the “rich scripting language” padding. Ok here we go.</p>\n\n<p>Recall that the locking script in the faucet transaction had this form when we looked at it in the Bitcoin block explorer. The public key hash of the owner of the Output is sandwiched between a few Bitcoin Scripting Language op codes, which we’ll cover in a bit:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>OP_DUP\nOP_HASH160\n4b3518229b0d3554fe7cd3796ade632aff3069d8\nOP_EQUALVERIFY\nOP_CHECKSIG\n</code></pre></div></div>\n\n<p>We need to create this same structure and encode it into bytes, but we want to swap out the public key hash with the new owner’s hashes. The op codes (like OP_DUP etc.) all get encoded as integers via a fixed schema. Here it is:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>\n<span class=\"k\">def</span> <span class=\"nf\">encode_int</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">nbytes</span><span class=\"p\">,</span> <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"s\">'little'</span><span class=\"p\">):</span>\n    <span class=\"s\">\"\"\" encode integer i into nbytes bytes using a given byte ordering \"\"\"</span>\n    <span class=\"k\">return</span> <span class=\"n\">i</span><span class=\"p\">.</span><span class=\"n\">to_bytes</span><span class=\"p\">(</span><span class=\"n\">nbytes</span><span class=\"p\">,</span> <span class=\"n\">encoding</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">encode_varint</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">):</span>\n    <span class=\"s\">\"\"\" encode a (possibly but rarely large) integer into bytes with a super simple compression scheme \"\"\"</span>\n    <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"mh\">0xfd</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"nb\">bytes</span><span class=\"p\">([</span><span class=\"n\">i</span><span class=\"p\">])</span>\n    <span class=\"k\">elif</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"mh\">0x10000</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"sa\">b</span><span class=\"s\">'</span><span class=\"se\">\\xfd</span><span class=\"s\">'</span> <span class=\"o\">+</span> <span class=\"n\">encode_int</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n    <span class=\"k\">elif</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"mh\">0x100000000</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"sa\">b</span><span class=\"s\">'</span><span class=\"se\">\\xfe</span><span class=\"s\">'</span> <span class=\"o\">+</span> <span class=\"n\">encode_int</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span>\n    <span class=\"k\">elif</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"mh\">0x10000000000000000</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"sa\">b</span><span class=\"s\">'</span><span class=\"se\">\\xff</span><span class=\"s\">'</span> <span class=\"o\">+</span> <span class=\"n\">encode_int</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"k\">raise</span> <span class=\"nb\">ValueError</span><span class=\"p\">(</span><span class=\"s\">\"integer too large: %d\"</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"p\">))</span>\n\n<span class=\"o\">@</span><span class=\"n\">dataclass</span>\n<span class=\"k\">class</span> <span class=\"nc\">Script</span><span class=\"p\">:</span>\n    <span class=\"n\">cmds</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">]]</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">encode</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">out</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">cmd</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">cmds</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">cmd</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">):</span>\n                <span class=\"c1\"># an int is just an opcode, encode as a single byte\n</span>                <span class=\"n\">out</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"n\">encode_int</span><span class=\"p\">(</span><span class=\"n\">cmd</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)]</span>\n            <span class=\"k\">elif</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">cmd</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">):</span>\n                <span class=\"c1\"># bytes represent an element, encode its length and then content\n</span>                <span class=\"n\">length</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">cmd</span><span class=\"p\">)</span>\n                <span class=\"k\">assert</span> <span class=\"n\">length</span> <span class=\"o\">&lt;</span> <span class=\"mi\">75</span> <span class=\"c1\"># any longer than this requires a bit of tedious handling that we'll skip here\n</span>                <span class=\"n\">out</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"n\">encode_int</span><span class=\"p\">(</span><span class=\"n\">length</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">cmd</span><span class=\"p\">]</span>\n\n        <span class=\"n\">ret</span> <span class=\"o\">=</span> <span class=\"sa\">b</span><span class=\"s\">''</span><span class=\"p\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">out</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">encode_varint</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">ret</span><span class=\"p\">))</span> <span class=\"o\">+</span> <span class=\"n\">ret</span>\n\n\n<span class=\"c1\"># the first output will go to our 2nd wallet\n</span><span class=\"n\">out1_pkb_hash</span> <span class=\"o\">=</span> <span class=\"n\">PublicKey</span><span class=\"p\">.</span><span class=\"n\">from_point</span><span class=\"p\">(</span><span class=\"n\">public_key2</span><span class=\"p\">).</span><span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"n\">compressed</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">,</span> <span class=\"n\">hash160</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n<span class=\"n\">out1_script</span> <span class=\"o\">=</span> <span class=\"n\">Script</span><span class=\"p\">([</span><span class=\"mi\">118</span><span class=\"p\">,</span> <span class=\"mi\">169</span><span class=\"p\">,</span> <span class=\"n\">out1_pkb_hash</span><span class=\"p\">,</span> <span class=\"mi\">136</span><span class=\"p\">,</span> <span class=\"mi\">172</span><span class=\"p\">])</span> <span class=\"c1\"># OP_DUP, OP_HASH160, &lt;hash&gt;, OP_EQUALVERIFY, OP_CHECKSIG\n</span><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">out1_script</span><span class=\"p\">.</span><span class=\"n\">encode</span><span class=\"p\">().</span><span class=\"nb\">hex</span><span class=\"p\">())</span>\n\n<span class=\"c1\"># the second output will go back to us\n</span><span class=\"n\">out2_pkb_hash</span> <span class=\"o\">=</span> <span class=\"n\">PublicKey</span><span class=\"p\">.</span><span class=\"n\">from_point</span><span class=\"p\">(</span><span class=\"n\">public_key</span><span class=\"p\">).</span><span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"n\">compressed</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">,</span> <span class=\"n\">hash160</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n<span class=\"n\">out2_script</span> <span class=\"o\">=</span> <span class=\"n\">Script</span><span class=\"p\">([</span><span class=\"mi\">118</span><span class=\"p\">,</span> <span class=\"mi\">169</span><span class=\"p\">,</span> <span class=\"n\">out2_pkb_hash</span><span class=\"p\">,</span> <span class=\"mi\">136</span><span class=\"p\">,</span> <span class=\"mi\">172</span><span class=\"p\">])</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">out2_script</span><span class=\"p\">.</span><span class=\"n\">encode</span><span class=\"p\">().</span><span class=\"nb\">hex</span><span class=\"p\">())</span>\n\n</code></pre></div></div>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>1976a91475b0c9fc784ba2ea0839e3cdf2669495cac6707388ac\n1976a9144b3518229b0d3554fe7cd3796ade632aff3069d888ac\n</code></pre></div></div>\n\n<p>Ok we’re now going to effectively declare the owners of both outputs of our transaction by specifying the public key hashes (padded by the Script op codes). We’ll see exactly how these locking scripts work for the Ouputs in a bit when we create the unlocking script for the Input. For now it is important to understand that we are effectively declaring the owner of each output UTXO by identifying a specific public key hash. With the locking script specified as above, only the person who has the original public key (and its associated secret key) will be able to spend the UTXO.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">tx_out1</span><span class=\"p\">.</span><span class=\"n\">script_pubkey</span> <span class=\"o\">=</span> <span class=\"n\">out1_script</span>\n<span class=\"n\">tx_out2</span><span class=\"p\">.</span><span class=\"n\">script_pubkey</span> <span class=\"o\">=</span> <span class=\"n\">out2_script</span>\n</code></pre></div></div>\n\n<h4 id=\"digital-signature\">Digital Signature</h4>\n\n<p>Now for the important part, we’re looping around to specifying the <code class=\"language-plaintext highlighter-rouge\">script_sig</code> of the transaction input <code class=\"language-plaintext highlighter-rouge\">tx_in</code>, which we skipped over above. In particular we are going to craft a digital signature that effectively says “I, the owner of the private key associated with the public key hash on the referenced transaction’s output’s locking script approve the spend of this UTXO as an input of this transaction”. Unfortunately this is again where Bitcoin gets pretty fancy because you can actually only sign parts of Transactions, and a number of signatures can be assembled from a number of parties and combined in various ways. As we did above, we will only cover the (by far) most common use case of signing the entire transaction and, and constructing the unlocking script specifically to only satisfy the locking script of the exact form above (OP_DUP, OP_HASH160, &lt;hash&gt;, OP_EQUALVERIFY, OP_CHECKSIG).</p>\n\n<p>First, we need to create a pure bytes “message” that we will be digitally signing. In this case, the message is the encoding of the entire transaction. So this is awkward - the entire transaction can’t be encoded into bytes yet because we haven’t finished it! It is still missing our signature, which we are still trying to construct.</p>\n\n<p>Instead, when we are serializing the transaction input that we wish to sign, the rule is to replace the encoding of the <code class=\"language-plaintext highlighter-rouge\">script_sig</code> (which we don’t have, because again we’re just trying to produce it…) with the <code class=\"language-plaintext highlighter-rouge\">script_pubkey</code> of the transaction output this input is pointing back to. All other transaction input’s <code class=\"language-plaintext highlighter-rouge\">script_sig</code> is also replaced with an empty script, because those inputs can belong to many other owners who can individually and independently contribute their own signatures. Ok I’m not sure if this is making sense any right now. So let’s just see it in code.</p>\n\n<p>We need the final data structure, the actual Transaction, so we can serialize it into the bytes message. It is mostly a thin container for a list of <code class=\"language-plaintext highlighter-rouge\">TxIn</code>s and list of <code class=\"language-plaintext highlighter-rouge\">TxOut</code>s: the inputs and outputs. We then implement the serialization for the new <code class=\"language-plaintext highlighter-rouge\">Tx</code> class, and also the serialization for <code class=\"language-plaintext highlighter-rouge\">TxIn</code> and <code class=\"language-plaintext highlighter-rouge\">TxOut</code> class, so we can serialize the entire transaction to bytes.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"o\">@</span><span class=\"n\">dataclass</span>\n<span class=\"k\">class</span> <span class=\"nc\">Tx</span><span class=\"p\">:</span>\n    <span class=\"n\">version</span><span class=\"p\">:</span> <span class=\"nb\">int</span>\n    <span class=\"n\">tx_ins</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">TxIn</span><span class=\"p\">]</span>\n    <span class=\"n\">tx_outs</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">TxOut</span><span class=\"p\">]</span>\n    <span class=\"n\">locktime</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">encode</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">sig_index</span><span class=\"o\">=-</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">bytes</span><span class=\"p\">:</span>\n        <span class=\"s\">\"\"\"\n        Encode this transaction as bytes.\n        If sig_index is given then return the modified transaction\n        encoding of this tx with respect to the single input index.\n        This result then constitutes the \"message\" that gets signed\n        by the aspiring transactor of this input.\n        \"\"\"</span>\n        <span class=\"n\">out</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"c1\"># encode metadata\n</span>        <span class=\"n\">out</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"n\">encode_int</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">version</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)]</span>\n        <span class=\"c1\"># encode inputs\n</span>        <span class=\"n\">out</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"n\">encode_varint</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">tx_ins</span><span class=\"p\">))]</span>\n        <span class=\"k\">if</span> <span class=\"n\">sig_index</span> <span class=\"o\">==</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">:</span>\n            <span class=\"c1\"># we are just serializing a fully formed transaction\n</span>            <span class=\"n\">out</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"n\">tx_in</span><span class=\"p\">.</span><span class=\"n\">encode</span><span class=\"p\">()</span> <span class=\"k\">for</span> <span class=\"n\">tx_in</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">tx_ins</span><span class=\"p\">]</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"c1\"># used when crafting digital signature for a specific input index\n</span>            <span class=\"n\">out</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"n\">tx_in</span><span class=\"p\">.</span><span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"n\">script_override</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">sig_index</span> <span class=\"o\">==</span> <span class=\"n\">i</span><span class=\"p\">))</span>\n                    <span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">tx_in</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">tx_ins</span><span class=\"p\">)]</span>\n        <span class=\"c1\"># encode outputs\n</span>        <span class=\"n\">out</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"n\">encode_varint</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">tx_outs</span><span class=\"p\">))]</span>\n        <span class=\"n\">out</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"n\">tx_out</span><span class=\"p\">.</span><span class=\"n\">encode</span><span class=\"p\">()</span> <span class=\"k\">for</span> <span class=\"n\">tx_out</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">tx_outs</span><span class=\"p\">]</span>\n        <span class=\"c1\"># encode... other metadata\n</span>        <span class=\"n\">out</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"n\">encode_int</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">locktime</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)]</span>\n        <span class=\"n\">out</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"n\">encode_int</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"n\">sig_index</span> <span class=\"o\">!=</span> <span class=\"o\">-</span><span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"sa\">b</span><span class=\"s\">''</span><span class=\"p\">]</span> <span class=\"c1\"># 1 = SIGHASH_ALL\n</span>        <span class=\"k\">return</span> <span class=\"sa\">b</span><span class=\"s\">''</span><span class=\"p\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">out</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># we also need to know how to encode TxIn. This is just serialization protocol.\n</span><span class=\"k\">def</span> <span class=\"nf\">txin_encode</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">script_override</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n    <span class=\"n\">out</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"n\">out</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">prev_tx</span><span class=\"p\">[::</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]]</span> <span class=\"c1\"># little endian vs big endian encodings... sigh\n</span>    <span class=\"n\">out</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"n\">encode_int</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">prev_index</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)]</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">script_override</span> <span class=\"ow\">is</span> <span class=\"bp\">None</span><span class=\"p\">:</span>\n        <span class=\"c1\"># None = just use the actual script\n</span>        <span class=\"n\">out</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">script_sig</span><span class=\"p\">.</span><span class=\"n\">encode</span><span class=\"p\">()]</span>\n    <span class=\"k\">elif</span> <span class=\"n\">script_override</span> <span class=\"ow\">is</span> <span class=\"bp\">True</span><span class=\"p\">:</span>\n        <span class=\"c1\"># True = override the script with the script_pubkey of the associated input\n</span>        <span class=\"n\">out</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">prev_tx_script_pubkey</span><span class=\"p\">.</span><span class=\"n\">encode</span><span class=\"p\">()]</span>\n    <span class=\"k\">elif</span> <span class=\"n\">script_override</span> <span class=\"ow\">is</span> <span class=\"bp\">False</span><span class=\"p\">:</span>\n        <span class=\"c1\"># False = override with an empty script\n</span>        <span class=\"n\">out</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"n\">Script</span><span class=\"p\">([]).</span><span class=\"n\">encode</span><span class=\"p\">()]</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"k\">raise</span> <span class=\"nb\">ValueError</span><span class=\"p\">(</span><span class=\"s\">\"script_override must be one of None|True|False\"</span><span class=\"p\">)</span>\n\n    <span class=\"n\">out</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"n\">encode_int</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">sequence</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)]</span>\n    <span class=\"k\">return</span> <span class=\"sa\">b</span><span class=\"s\">''</span><span class=\"p\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">out</span><span class=\"p\">)</span>\n\n<span class=\"n\">TxIn</span><span class=\"p\">.</span><span class=\"n\">encode</span> <span class=\"o\">=</span> <span class=\"n\">txin_encode</span> <span class=\"c1\"># monkey patch into the class\n</span>\n<span class=\"c1\"># and TxOut as well\n</span><span class=\"k\">def</span> <span class=\"nf\">txout_encode</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n    <span class=\"n\">out</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"n\">out</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"n\">encode_int</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">amount</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">)]</span>\n    <span class=\"n\">out</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">script_pubkey</span><span class=\"p\">.</span><span class=\"n\">encode</span><span class=\"p\">()]</span>\n    <span class=\"k\">return</span> <span class=\"sa\">b</span><span class=\"s\">''</span><span class=\"p\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">out</span><span class=\"p\">)</span>\n\n<span class=\"n\">TxOut</span><span class=\"p\">.</span><span class=\"n\">encode</span> <span class=\"o\">=</span> <span class=\"n\">txout_encode</span> <span class=\"c1\"># monkey patch into the class\n</span>\n<span class=\"n\">tx</span> <span class=\"o\">=</span> <span class=\"n\">Tx</span><span class=\"p\">(</span>\n    <span class=\"n\">version</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n    <span class=\"n\">tx_ins</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">tx_in</span><span class=\"p\">],</span>\n    <span class=\"n\">tx_outs</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">tx_out1</span><span class=\"p\">,</span> <span class=\"n\">tx_out2</span><span class=\"p\">],</span>\n<span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>Before we can call <code class=\"language-plaintext highlighter-rouge\">.encode</code> on our Transaction object and get its content as bytes so we can sign it, we need to satisfy the Bitcoin rule where we replace the encoding of the script_sig (which we don’t have, because again we’re just trying to produce it…) with the script_pubkey of the transaction output this input is pointing back to. <a href=\"https://www.blockchain.com/btc-testnet/tx/46325085c89fb98a4b7ceee44eac9b955f09e1ddc86d8dad3dfdcba46b4d36b2\">Here</a> is the link once again to the original transaction. We are trying to spend its Output at Index 1, and the script_pubkey is, again,</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>OP_DUP\nOP_HASH160\n4b3518229b0d3554fe7cd3796ade632aff3069d8\nOP_EQUALVERIFY\nOP_CHECKSIG\n</code></pre></div></div>\n\n<p>This particular Block Explorer website does not allow us to get this in the raw (bytes) form, so we will re-create the data structure as a Script:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">source_script</span> <span class=\"o\">=</span> <span class=\"n\">Script</span><span class=\"p\">([</span><span class=\"mi\">118</span><span class=\"p\">,</span> <span class=\"mi\">169</span><span class=\"p\">,</span> <span class=\"n\">out2_pkb_hash</span><span class=\"p\">,</span> <span class=\"mi\">136</span><span class=\"p\">,</span> <span class=\"mi\">172</span><span class=\"p\">])</span> <span class=\"c1\"># OP_DUP, OP_HASH160, &lt;hash&gt;, OP_EQUALVERIFY, OP_CHECKSIG\n</span><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"recall out2_pkb_hash is just raw bytes of the hash of public_key: \"</span><span class=\"p\">,</span> <span class=\"n\">out2_pkb_hash</span><span class=\"p\">.</span><span class=\"nb\">hex</span><span class=\"p\">())</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">source_script</span><span class=\"p\">.</span><span class=\"n\">encode</span><span class=\"p\">().</span><span class=\"nb\">hex</span><span class=\"p\">())</span> <span class=\"c1\"># we can get the bytes of the script_pubkey now\n</span></code></pre></div></div>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>recall out2_pkb_hash is just raw bytes of the hash of public_key:  4b3518229b0d3554fe7cd3796ade632aff3069d8\n1976a9144b3518229b0d3554fe7cd3796ade632aff3069d888ac\n</code></pre></div></div>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># monkey patch this into the input of the transaction we are trying sign and construct\n</span><span class=\"n\">tx_in</span><span class=\"p\">.</span><span class=\"n\">prev_tx_script_pubkey</span> <span class=\"o\">=</span> <span class=\"n\">source_script</span>\n\n<span class=\"c1\"># get the \"message\" we need to digitally sign!!\n</span><span class=\"n\">message</span> <span class=\"o\">=</span> <span class=\"n\">tx</span><span class=\"p\">.</span><span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"n\">sig_index</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">message</span><span class=\"p\">.</span><span class=\"nb\">hex</span><span class=\"p\">()</span>\n</code></pre></div></div>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>'0100000001b2364d6ba4cbfd3dad8d6dc8dde1095f959bac4ee4ee7c4b8ab99fc885503246010000001976a9144b3518229b0d3554fe7cd3796ade632aff3069d888acffffffff0250c30000000000001976a91475b0c9fc784ba2ea0839e3cdf2669495cac6707388ac8cb90000000000001976a9144b3518229b0d3554fe7cd3796ade632aff3069d888ac0000000001000000'\n</code></pre></div></div>\n\n<p>Okay let’s pause for a moment. We have encoded the transaction into bytes to create a “message”, in the digital signature lingo. Think about what the above bytes encode, and what it is that we are about to sign. We are identifying the exact inputs of this transaction by referencing the outputs of a specific previous transactions (here, just 1 input of course). We are also identifying the exact outputs of this transaction (newly about to be minted UTXOs, so to speak) along with their <code class=\"language-plaintext highlighter-rouge\">script_pubkey</code> fields, which in the most common case declare an owner of each output via their public key hash wrapped up in a Script. In particular, we are of course not including the <code class=\"language-plaintext highlighter-rouge\">script_sig</code> of any of the other inputs when we are signing a specific input (you can see that the <code class=\"language-plaintext highlighter-rouge\">txin_encode</code> function will set them to be empty scripts). In fact, in the fully general (though rare) case we may not even have them. So what this message really encodes is just the inputs and the new outputs, their amounts, and their owners (via the locking scripts specifying the public key hash of each owner).</p>\n\n<p>We are now ready to digitally sign the message with our private key. The actual signature itself is a tuple of two integers <code class=\"language-plaintext highlighter-rouge\">(r, s)</code>. As with Elliptic Curve Cryptography (ECC) above, I will not cover the full mathematical details of the Elliptic Curve Digital Signature Algorithm (ECDSA). Instead just providing the code, and showing that it’s not very scary:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>\n<span class=\"o\">@</span><span class=\"n\">dataclass</span>\n<span class=\"k\">class</span> <span class=\"nc\">Signature</span><span class=\"p\">:</span>\n    <span class=\"n\">r</span><span class=\"p\">:</span> <span class=\"nb\">int</span>\n    <span class=\"n\">s</span><span class=\"p\">:</span> <span class=\"nb\">int</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">sign</span><span class=\"p\">(</span><span class=\"n\">secret_key</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"nb\">bytes</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Signature</span><span class=\"p\">:</span>\n\n    <span class=\"c1\"># the order of the elliptic curve used in bitcoin\n</span>    <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">bitcoin_gen</span><span class=\"p\">.</span><span class=\"n\">n</span>\n\n    <span class=\"c1\"># double hash the message and convert to integer\n</span>    <span class=\"n\">z</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">.</span><span class=\"n\">from_bytes</span><span class=\"p\">(</span><span class=\"n\">sha256</span><span class=\"p\">(</span><span class=\"n\">sha256</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">)),</span> <span class=\"s\">'big'</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># generate a new secret/public key pair at random\n</span>    <span class=\"n\">sk</span> <span class=\"o\">=</span> <span class=\"n\">random</span><span class=\"p\">.</span><span class=\"n\">randrange</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n    <span class=\"n\">P</span> <span class=\"o\">=</span> <span class=\"n\">sk</span> <span class=\"o\">*</span> <span class=\"n\">bitcoin_gen</span><span class=\"p\">.</span><span class=\"n\">G</span>\n\n    <span class=\"c1\"># calculate the signature\n</span>    <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">P</span><span class=\"p\">.</span><span class=\"n\">x</span>\n    <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">inv</span><span class=\"p\">(</span><span class=\"n\">sk</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">z</span> <span class=\"o\">+</span> <span class=\"n\">secret_key</span> <span class=\"o\">*</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"o\">%</span> <span class=\"n\">n</span>\n    <span class=\"k\">if</span> <span class=\"n\">s</span> <span class=\"o\">&gt;</span> <span class=\"n\">n</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">:</span>\n        <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">n</span> <span class=\"o\">-</span> <span class=\"n\">s</span>\n\n    <span class=\"n\">sig</span> <span class=\"o\">=</span> <span class=\"n\">Signature</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">sig</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">verify</span><span class=\"p\">(</span><span class=\"n\">public_key</span><span class=\"p\">:</span> <span class=\"n\">Point</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"nb\">bytes</span><span class=\"p\">,</span> <span class=\"n\">sig</span><span class=\"p\">:</span> <span class=\"n\">Signature</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">bool</span><span class=\"p\">:</span>\n    <span class=\"c1\"># just a stub for reference on how a signature would be verified in terms of the API\n</span>    <span class=\"c1\"># we don't need to verify any signatures to craft a transaction, but we would if we were mining\n</span>    <span class=\"k\">pass</span>\n\n<span class=\"n\">random</span><span class=\"p\">.</span><span class=\"n\">seed</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">.</span><span class=\"n\">from_bytes</span><span class=\"p\">(</span><span class=\"n\">sha256</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">),</span> <span class=\"s\">'big'</span><span class=\"p\">))</span> <span class=\"c1\"># see note below\n</span><span class=\"n\">sig</span> <span class=\"o\">=</span> <span class=\"n\">sign</span><span class=\"p\">(</span><span class=\"n\">secret_key</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"p\">)</span>\n<span class=\"n\">sig</span>\n</code></pre></div></div>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Signature(r=47256385045018612897921731322704225983926443696060225906633967860304940939048, s=24798952842859654103158450705258206127588200130910777589265114945580848358502)\n</code></pre></div></div>\n\n<p>In the above you will notice a very often commented on (and very rightly so) subtlety: In this naive form we are generating a random number inside the signing process when we generate <code class=\"language-plaintext highlighter-rouge\">sk</code>. This means that our signature would change every time we sign, which is undesirable for a large number of reasons, including the reproducibility of this exercise. It gets much worse very fast btw: if you sign two different messages with the same <code class=\"language-plaintext highlighter-rouge\">sk</code>, an attacker can recover the secret key, yikes. Just ask the <a href=\"https://fahrplan.events.ccc.de/congress/2010/Fahrplan/attachments/1780_27c3_console_hacking_2010.pdf\">Playstation 3</a> guys. There is a specific standard (called RFC 6979) that recommends a specific way to generate <code class=\"language-plaintext highlighter-rouge\">sk</code> deterministically, but we skip it here for brevity. Instead I implement a poor man’s version here where I seed rng with a hash of the message. Please don’t use this anywhere close to anything that touches production.</p>\n\n<p>Let’s now implement the <code class=\"language-plaintext highlighter-rouge\">encode</code> function of a <code class=\"language-plaintext highlighter-rouge\">Signature</code> so we can broadcast it over the Bitcoin protocol. To do so we are using the <a href=\"https://en.bitcoin.it/wiki/BIP_0062#DER_encoding\">DER Encoding</a>:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">signature_encode</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">bytes</span><span class=\"p\">:</span>\n    <span class=\"s\">\"\"\" return the DER encoding of this signature \"\"\"</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">dern</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n        <span class=\"n\">nb</span> <span class=\"o\">=</span> <span class=\"n\">n</span><span class=\"p\">.</span><span class=\"n\">to_bytes</span><span class=\"p\">(</span><span class=\"mi\">32</span><span class=\"p\">,</span> <span class=\"n\">byteorder</span><span class=\"o\">=</span><span class=\"s\">'big'</span><span class=\"p\">)</span>\n        <span class=\"n\">nb</span> <span class=\"o\">=</span> <span class=\"n\">nb</span><span class=\"p\">.</span><span class=\"n\">lstrip</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s\">'</span><span class=\"se\">\\x00</span><span class=\"s\">'</span><span class=\"p\">)</span> <span class=\"c1\"># strip leading zeros\n</span>        <span class=\"n\">nb</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s\">'</span><span class=\"se\">\\x00</span><span class=\"s\">'</span> <span class=\"k\">if</span> <span class=\"n\">nb</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">&gt;=</span> <span class=\"mh\">0x80</span> <span class=\"k\">else</span> <span class=\"sa\">b</span><span class=\"s\">''</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">nb</span> <span class=\"c1\"># preprend 0x00 if first byte &gt;= 0x80\n</span>        <span class=\"k\">return</span> <span class=\"n\">nb</span>\n\n    <span class=\"n\">rb</span> <span class=\"o\">=</span> <span class=\"n\">dern</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">r</span><span class=\"p\">)</span>\n    <span class=\"n\">sb</span> <span class=\"o\">=</span> <span class=\"n\">dern</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">s</span><span class=\"p\">)</span>\n    <span class=\"n\">content</span> <span class=\"o\">=</span> <span class=\"sa\">b</span><span class=\"s\">''</span><span class=\"p\">.</span><span class=\"n\">join</span><span class=\"p\">([</span><span class=\"nb\">bytes</span><span class=\"p\">([</span><span class=\"mh\">0x02</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">rb</span><span class=\"p\">)]),</span> <span class=\"n\">rb</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">([</span><span class=\"mh\">0x02</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">sb</span><span class=\"p\">)]),</span> <span class=\"n\">sb</span><span class=\"p\">])</span>\n    <span class=\"n\">frame</span> <span class=\"o\">=</span> <span class=\"sa\">b</span><span class=\"s\">''</span><span class=\"p\">.</span><span class=\"n\">join</span><span class=\"p\">([</span><span class=\"nb\">bytes</span><span class=\"p\">([</span><span class=\"mh\">0x30</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">content</span><span class=\"p\">)]),</span> <span class=\"n\">content</span><span class=\"p\">])</span>\n    <span class=\"k\">return</span> <span class=\"n\">frame</span>\n\n<span class=\"n\">Signature</span><span class=\"p\">.</span><span class=\"n\">encode</span> <span class=\"o\">=</span> <span class=\"n\">signature_encode</span> <span class=\"c1\"># monkey patch into the class\n</span><span class=\"n\">sig_bytes</span> <span class=\"o\">=</span> <span class=\"n\">sig</span><span class=\"p\">.</span><span class=\"n\">encode</span><span class=\"p\">()</span>\n<span class=\"n\">sig_bytes</span><span class=\"p\">.</span><span class=\"nb\">hex</span><span class=\"p\">()</span>\n</code></pre></div></div>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>'30440220687a2a84aeaf387d8c6e9752fb8448f369c0f5da9fe695ff2eceb7fd6db8b728022036d3b5bc2746c20b32634a1a2d8f3b03f9ead38440b3f41451010f61e89ba466'\n</code></pre></div></div>\n\n<p>We are finally ready to generate the <code class=\"language-plaintext highlighter-rouge\">script_sig</code> for the single input of our transaction. For a reason that will become clear in a moment, it will contain exactly two elements: 1) the signature and 2) the public key, both encoded as bytes:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># Append 1 (= SIGHASH_ALL), indicating this DER signature we created encoded \"ALL\" of the tx (by far most common)\n</span><span class=\"n\">sig_bytes_and_type</span> <span class=\"o\">=</span> <span class=\"n\">sig_bytes</span> <span class=\"o\">+</span> <span class=\"sa\">b</span><span class=\"s\">'</span><span class=\"se\">\\x01</span><span class=\"s\">'</span>\n\n<span class=\"c1\"># Encode the public key into bytes. Notice we use hash160=False so we are revealing the full public key to Blockchain\n</span><span class=\"n\">pubkey_bytes</span> <span class=\"o\">=</span> <span class=\"n\">PublicKey</span><span class=\"p\">.</span><span class=\"n\">from_point</span><span class=\"p\">(</span><span class=\"n\">public_key</span><span class=\"p\">).</span><span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"n\">compressed</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">,</span> <span class=\"n\">hash160</span><span class=\"o\">=</span><span class=\"bp\">False</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Create a lightweight Script that just encodes those two things!\n</span><span class=\"n\">script_sig</span> <span class=\"o\">=</span> <span class=\"n\">Script</span><span class=\"p\">([</span><span class=\"n\">sig_bytes_and_type</span><span class=\"p\">,</span> <span class=\"n\">pubkey_bytes</span><span class=\"p\">])</span>\n<span class=\"n\">tx_in</span><span class=\"p\">.</span><span class=\"n\">script_sig</span> <span class=\"o\">=</span> <span class=\"n\">script_sig</span>\n</code></pre></div></div>\n\n<p>Okay so now that we created both locking scripts (<code class=\"language-plaintext highlighter-rouge\">script_pubkey</code>) and the unlocking scripts (<code class=\"language-plaintext highlighter-rouge\">script_sig</code>) we can reflect briefly on how these two scripts interact in the Bitcoin scripting environment. On a high level, in the transaction validating process during mining, for each transaction input the two scripts get concatenated into a single script, which then runs in the “Bitcoin VM” (?). We can see now that concatenating the two scripts will look like:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>&lt;sig_bytes_and_type&gt;\n&lt;pubkey_bytes&gt;\nOP_DUP\nOP_HASH160\n&lt;pubkey_hash_bytes&gt;\nOP_EQUALVERIFY\nOP_CHECKSIG\n</code></pre></div></div>\n\n<p>This then gets executed top to bottom with a typical stack-based push/pop scheme, where any bytes get pushed into the stack, and any ops will consume some inputs and push some outputs. So here we push to the stack the signature and the pubkey, then the pubkey gets duplicated (OP_DUP), it gets hashed (OP_HASH160), the hash gets compared to the <code class=\"language-plaintext highlighter-rouge\">pubkey_hash_bytes</code> (OP_EQUALVERIFY), and finally the digital signature integrity is verified as having been signed by the associated private key.</p>\n\n<p>We have now completed all the necessary steps! Let’s take a look at a repr of our fully constructed transaction again:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">tx</span>\n</code></pre></div></div>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Tx(version=1, tx_ins=[TxIn(prev_tx=b'F2P\\x85\\xc8\\x9f\\xb9\\x8aK|\\xee\\xe4N\\xac\\x9b\\x95_\\t\\xe1\\xdd\\xc8m\\x8d\\xad=\\xfd\\xcb\\xa4kM6\\xb2', prev_index=1, script_sig=Script(cmds=[b\"0D\\x02 hz*\\x84\\xae\\xaf8}\\x8cn\\x97R\\xfb\\x84H\\xf3i\\xc0\\xf5\\xda\\x9f\\xe6\\x95\\xff.\\xce\\xb7\\xfdm\\xb8\\xb7(\\x02 6\\xd3\\xb5\\xbc'F\\xc2\\x0b2cJ\\x1a-\\x8f;\\x03\\xf9\\xea\\xd3\\x84@\\xb3\\xf4\\x14Q\\x01\\x0fa\\xe8\\x9b\\xa4f\\x01\", b'\\x03\\xb9\\xb5T\\xe2P\"\\xc2\\xaeT\\x9b\\x0c0\\xc1\\x8d\\xf0\\xa8\\xe0IR#\\xf6\\'\\xae8\\xdf\\t\\x92\\xef\\xb4w\\x94u']), sequence=4294967295)], tx_outs=[TxOut(amount=50000, script_pubkey=Script(cmds=[118, 169, b'u\\xb0\\xc9\\xfcxK\\xa2\\xea\\x089\\xe3\\xcd\\xf2f\\x94\\x95\\xca\\xc6ps', 136, 172])), TxOut(amount=47500, script_pubkey=Script(cmds=[118, 169, b'K5\\x18\"\\x9b\\r5T\\xfe|\\xd3yj\\xdec*\\xff0i\\xd8', 136, 172]))], locktime=0)\n</code></pre></div></div>\n\n<p>Pretty lightweight, isn’t it? There’s not that much to a Bitcoin transaction. Let’s encode it into bytes and show in hex:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">tx</span><span class=\"p\">.</span><span class=\"n\">encode</span><span class=\"p\">().</span><span class=\"nb\">hex</span><span class=\"p\">()</span>\n</code></pre></div></div>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>'0100000001b2364d6ba4cbfd3dad8d6dc8dde1095f959bac4ee4ee7c4b8ab99fc885503246010000006a4730440220687a2a84aeaf387d8c6e9752fb8448f369c0f5da9fe695ff2eceb7fd6db8b728022036d3b5bc2746c20b32634a1a2d8f3b03f9ead38440b3f41451010f61e89ba466012103b9b554e25022c2ae549b0c30c18df0a8e0495223f627ae38df0992efb4779475ffffffff0250c30000000000001976a91475b0c9fc784ba2ea0839e3cdf2669495cac6707388ac8cb90000000000001976a9144b3518229b0d3554fe7cd3796ade632aff3069d888ac00000000'\n</code></pre></div></div>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"Transaction size in bytes: \"</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">tx</span><span class=\"p\">.</span><span class=\"n\">encode</span><span class=\"p\">()))</span>\n</code></pre></div></div>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Transaction size in bytes:  225\n</code></pre></div></div>\n\n<p>Finally let’s calculate the id of our finished transaction:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">tx_id</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n    <span class=\"k\">return</span> <span class=\"n\">sha256</span><span class=\"p\">(</span><span class=\"n\">sha256</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">encode</span><span class=\"p\">()))[::</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">].</span><span class=\"nb\">hex</span><span class=\"p\">()</span> <span class=\"c1\"># little/big endian conventions require byte order swap\n</span><span class=\"n\">Tx</span><span class=\"p\">.</span><span class=\"nb\">id</span> <span class=\"o\">=</span> <span class=\"n\">tx_id</span> <span class=\"c1\"># monkey patch into the class\n</span>\n<span class=\"n\">tx</span><span class=\"p\">.</span><span class=\"nb\">id</span><span class=\"p\">()</span> <span class=\"c1\"># once this transaction goes through, this will be its id\n</span></code></pre></div></div>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>'245e2d1f87415836cbb7b0bc84e40f4ca1d2a812be0eda381f02fb2224b4ad69'\n</code></pre></div></div>\n\n<p>We are now ready to broadcast the transaction to Bitcoin nodes around the world. We’re literally blasting out the 225 bytes (embedded in a standard Bitcoin protocol network envelope) that define our transaction. The Bitcoin nodes will decode it, validate it, and include it into the next block they might mine any second now (if the fee is high enough). In English, those 225 bytes are saying “Hello Bitcoin network, how are you? Great. I would like to create a new transaction that takes the output (UTXO) of the transaction 46325085c89fb98a4b7ceee44eac9b955f09e1ddc86d8dad3dfdcba46b4d36b2 at index 1, and I would like to chunk its amount into two outputs, one going to the address mrFF91kpuRbivucowsY512fDnYt6BWrvx9 for the amount 50,000 sat and the other going to the address mnNcaVkC35ezZSgvn8fhXEa9QTHSUtPfzQ for the amount 47,500 sat. (It is understood the rest of 2,500 sat will go to any miner who includes this transaction in their block). Here are the two pieces of documentation proving that I can spend this UTXO: my public key, and the digital signature generated by the associated private key, of the above letter of intent. Kkthx!”</p>\n\n<p>We are going to broadcast this out to the network and see if it sticks! We could include a simple client here that speaks the Bitcoin protocol over <code class=\"language-plaintext highlighter-rouge\">socket</code> to communicate to the nodes - we’d first do the handshake (sending versions back and forth) and then broadcast the transaction bytes above using the <code class=\"language-plaintext highlighter-rouge\">tx</code> message. However, the code is somewhat long and not super exciting (it’s a lot of serialization following the specific message formats described in the <a href=\"https://en.bitcoin.it/wiki/Protocol_documentation\">Bitcoin protocol</a>), so instead of further bloating this notebook I will use blockstream’s helpful <a href=\"https://blockstream.info/testnet/tx/push\">tx/push</a> endpoint to broadcast the transaction. It’s just a large textbox where we copy paste the raw transaction hex exactly as above, and hit “Broadcast”. If you’d like to do this manually with raw Bitcoin protocol you’d want to look into my <a href=\"https://github.com/karpathy/cryptos/blob/main/cryptos/network.py\">SimpleNode</a> implementation and use that to communicate to a node over socket.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"nn\">time</span><span class=\"p\">;</span> <span class=\"n\">time</span><span class=\"p\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mf\">1.0</span><span class=\"p\">)</span> <span class=\"c1\"># now we wait :p, for the network to execute the transaction and include it in a block\n</span></code></pre></div></div>\n\n<p>And here is the <a href=\"https://www.blockchain.com/btc-testnet/tx/245e2d1f87415836cbb7b0bc84e40f4ca1d2a812be0eda381f02fb2224b4ad69\">transaction</a>! We can see that our raw bytes were parsed out correctly and the transaction was judged to be valid, and was included in <a href=\"https://www.blockchain.com/btc-testnet/block/2005515\">Block 2005515</a>. Our transaction was one of 31 transactions included in this block, and the miner claimed our fee as a thank you.</p>\n\n<h4 id=\"putting-it-all-together-one-more-consolidating-transaction\">Putting it all together: One more consolidating transaction</h4>\n\n<p>Let’s put everything together now to create one last identity and consolidate all of our remaining funds in this one wallet.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">secret_key3</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">.</span><span class=\"n\">from_bytes</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s\">\"Andrej's Super Secret 3rd Wallet\"</span><span class=\"p\">,</span> <span class=\"s\">'big'</span><span class=\"p\">)</span> <span class=\"c1\"># or just random.randrange(1, bitcoin_gen.n)\n</span><span class=\"k\">assert</span> <span class=\"mi\">1</span> <span class=\"o\">&lt;=</span> <span class=\"n\">secret_key3</span> <span class=\"o\">&lt;</span> <span class=\"n\">bitcoin_gen</span><span class=\"p\">.</span><span class=\"n\">n</span> <span class=\"c1\"># check it's valid\n</span><span class=\"n\">public_key3</span> <span class=\"o\">=</span> <span class=\"n\">secret_key3</span> <span class=\"o\">*</span> <span class=\"n\">G</span>\n<span class=\"n\">address3</span> <span class=\"o\">=</span> <span class=\"n\">PublicKey</span><span class=\"p\">.</span><span class=\"n\">from_point</span><span class=\"p\">(</span><span class=\"n\">public_key3</span><span class=\"p\">).</span><span class=\"n\">address</span><span class=\"p\">(</span><span class=\"n\">net</span><span class=\"o\">=</span><span class=\"s\">'test'</span><span class=\"p\">,</span> <span class=\"n\">compressed</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"Our third Bitcoin identity:\"</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"1. secret key: \"</span><span class=\"p\">,</span> <span class=\"n\">secret_key3</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"2. public key: \"</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">public_key3</span><span class=\"p\">.</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">public_key3</span><span class=\"p\">.</span><span class=\"n\">y</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"3. Bitcoin address: \"</span><span class=\"p\">,</span> <span class=\"n\">address3</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Our third Bitcoin identity:\n1. secret key:  29595381593786747354608258168471648998894101022644411057647114205835530364276\n2. public key:  (10431688308521398859068831048649547920603040245302637088532768399600614938636, 74559974378244821290907538448690356815087741133062157870433812445804889333467)\n3. Bitcoin address:  mgh4VjZx5MpkHRis9mDsF2ZcKLdXoP3oQ4\n</code></pre></div></div>\n\n<p>And let’s forge the transaction. We currently have 47,500 sat in our first wallet mnNcaVkC35ezZSgvn8fhXEa9QTHSUtPfzQ and 50,000 sat in our second wallet mrFF91kpuRbivucowsY512fDnYt6BWrvx9. We’re going to create a transaction with these two as inputs, and a single output into the third wallet mgh4VjZx5MpkHRis9mDsF2ZcKLdXoP3oQ4. As before we’ll pay 2500 sat as fee, so we’re sending ourselves 50,000 + 47,500 - 2500 = 95,000 sat.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># ----------------------------\n# first input of the transaction\n</span><span class=\"n\">tx_in1</span> <span class=\"o\">=</span> <span class=\"n\">TxIn</span><span class=\"p\">(</span>\n    <span class=\"n\">prev_tx</span> <span class=\"o\">=</span> <span class=\"nb\">bytes</span><span class=\"p\">.</span><span class=\"n\">fromhex</span><span class=\"p\">(</span><span class=\"s\">'245e2d1f87415836cbb7b0bc84e40f4ca1d2a812be0eda381f02fb2224b4ad69'</span><span class=\"p\">),</span>\n    <span class=\"n\">prev_index</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n    <span class=\"n\">script_sig</span> <span class=\"o\">=</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"c1\"># digital signature to be inserted later\n</span><span class=\"p\">)</span>\n<span class=\"c1\"># reconstruct the script_pubkey locking this UTXO (note: it's the first output index in the\n# referenced transaction, but the owner is the second identity/wallet!)\n# recall this information is \"swapped in\" when we digitally sign the spend of this UTXO a bit later\n</span><span class=\"n\">pkb_hash</span> <span class=\"o\">=</span> <span class=\"n\">PublicKey</span><span class=\"p\">.</span><span class=\"n\">from_point</span><span class=\"p\">(</span><span class=\"n\">public_key2</span><span class=\"p\">).</span><span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"n\">compressed</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">,</span> <span class=\"n\">hash160</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n<span class=\"n\">tx_in1</span><span class=\"p\">.</span><span class=\"n\">prev_tx_script_pubkey</span> <span class=\"o\">=</span> <span class=\"n\">Script</span><span class=\"p\">([</span><span class=\"mi\">118</span><span class=\"p\">,</span> <span class=\"mi\">169</span><span class=\"p\">,</span> <span class=\"n\">pkb_hash</span><span class=\"p\">,</span> <span class=\"mi\">136</span><span class=\"p\">,</span> <span class=\"mi\">172</span><span class=\"p\">])</span> <span class=\"c1\"># OP_DUP, OP_HASH160, &lt;hash&gt;, OP_EQUALVERIFY, OP_CHECKSIG\n</span>\n<span class=\"c1\"># ----------------------------\n# second input of the transaction\n</span><span class=\"n\">tx_in2</span> <span class=\"o\">=</span> <span class=\"n\">TxIn</span><span class=\"p\">(</span>\n    <span class=\"n\">prev_tx</span> <span class=\"o\">=</span> <span class=\"nb\">bytes</span><span class=\"p\">.</span><span class=\"n\">fromhex</span><span class=\"p\">(</span><span class=\"s\">'245e2d1f87415836cbb7b0bc84e40f4ca1d2a812be0eda381f02fb2224b4ad69'</span><span class=\"p\">),</span>\n    <span class=\"n\">prev_index</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n    <span class=\"n\">script_sig</span> <span class=\"o\">=</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"c1\"># digital signature to be inserted later\n</span><span class=\"p\">)</span>\n<span class=\"n\">pkb_hash</span> <span class=\"o\">=</span> <span class=\"n\">PublicKey</span><span class=\"p\">.</span><span class=\"n\">from_point</span><span class=\"p\">(</span><span class=\"n\">public_key</span><span class=\"p\">).</span><span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"n\">compressed</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">,</span> <span class=\"n\">hash160</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n<span class=\"n\">tx_in2</span><span class=\"p\">.</span><span class=\"n\">prev_tx_script_pubkey</span> <span class=\"o\">=</span> <span class=\"n\">Script</span><span class=\"p\">([</span><span class=\"mi\">118</span><span class=\"p\">,</span> <span class=\"mi\">169</span><span class=\"p\">,</span> <span class=\"n\">pkb_hash</span><span class=\"p\">,</span> <span class=\"mi\">136</span><span class=\"p\">,</span> <span class=\"mi\">172</span><span class=\"p\">])</span> <span class=\"c1\"># OP_DUP, OP_HASH160, &lt;hash&gt;, OP_EQUALVERIFY, OP_CHECKSIG\n# ----------------------------\n# define the (single) output\n</span><span class=\"n\">tx_out</span> <span class=\"o\">=</span> <span class=\"n\">TxOut</span><span class=\"p\">(</span>\n    <span class=\"n\">amount</span> <span class=\"o\">=</span> <span class=\"mi\">95000</span><span class=\"p\">,</span>\n    <span class=\"n\">script_pubkey</span> <span class=\"o\">=</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"c1\"># locking script, inserted separately right below\n</span><span class=\"p\">)</span>\n<span class=\"c1\"># declare the owner as identity 3 above, by inserting the public key hash into the Script \"padding\"\n</span><span class=\"n\">out_pkb_hash</span> <span class=\"o\">=</span> <span class=\"n\">PublicKey</span><span class=\"p\">.</span><span class=\"n\">from_point</span><span class=\"p\">(</span><span class=\"n\">public_key3</span><span class=\"p\">).</span><span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"n\">compressed</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">,</span> <span class=\"n\">hash160</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n<span class=\"n\">out_script</span> <span class=\"o\">=</span> <span class=\"n\">Script</span><span class=\"p\">([</span><span class=\"mi\">118</span><span class=\"p\">,</span> <span class=\"mi\">169</span><span class=\"p\">,</span> <span class=\"n\">out_pkb_hash</span><span class=\"p\">,</span> <span class=\"mi\">136</span><span class=\"p\">,</span> <span class=\"mi\">172</span><span class=\"p\">])</span> <span class=\"c1\"># OP_DUP, OP_HASH160, &lt;hash&gt;, OP_EQUALVERIFY, OP_CHECKSIG\n</span><span class=\"n\">tx_out</span><span class=\"p\">.</span><span class=\"n\">script_pubkey</span> <span class=\"o\">=</span> <span class=\"n\">out_script</span>\n<span class=\"c1\"># ----------------------------\n</span>\n<span class=\"c1\"># create the aspiring transaction object\n</span><span class=\"n\">tx</span> <span class=\"o\">=</span> <span class=\"n\">Tx</span><span class=\"p\">(</span>\n    <span class=\"n\">version</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n    <span class=\"n\">tx_ins</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">tx_in1</span><span class=\"p\">,</span> <span class=\"n\">tx_in2</span><span class=\"p\">],</span> <span class=\"c1\"># 2 inputs this time!\n</span>    <span class=\"n\">tx_outs</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">tx_out</span><span class=\"p\">],</span> <span class=\"c1\"># ...and a single output\n</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># ----------------------------\n# digitally sign the spend of the first input of this transaction\n# note that index 0 of the input transaction is our second identity! so it must sign here\n</span><span class=\"n\">message1</span> <span class=\"o\">=</span> <span class=\"n\">tx</span><span class=\"p\">.</span><span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"n\">sig_index</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">random</span><span class=\"p\">.</span><span class=\"n\">seed</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">.</span><span class=\"n\">from_bytes</span><span class=\"p\">(</span><span class=\"n\">sha256</span><span class=\"p\">(</span><span class=\"n\">message1</span><span class=\"p\">),</span> <span class=\"s\">'big'</span><span class=\"p\">))</span>\n<span class=\"n\">sig1</span> <span class=\"o\">=</span> <span class=\"n\">sign</span><span class=\"p\">(</span><span class=\"n\">secret_key2</span><span class=\"p\">,</span> <span class=\"n\">message1</span><span class=\"p\">)</span> <span class=\"c1\"># identity 2 signs\n</span><span class=\"n\">sig_bytes_and_type1</span> <span class=\"o\">=</span> <span class=\"n\">sig1</span><span class=\"p\">.</span><span class=\"n\">encode</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"sa\">b</span><span class=\"s\">'</span><span class=\"se\">\\x01</span><span class=\"s\">'</span> <span class=\"c1\"># DER signature + SIGHASH_ALL\n</span><span class=\"n\">pubkey_bytes</span> <span class=\"o\">=</span> <span class=\"n\">PublicKey</span><span class=\"p\">.</span><span class=\"n\">from_point</span><span class=\"p\">(</span><span class=\"n\">public_key2</span><span class=\"p\">).</span><span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"n\">compressed</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">,</span> <span class=\"n\">hash160</span><span class=\"o\">=</span><span class=\"bp\">False</span><span class=\"p\">)</span>\n<span class=\"n\">script_sig1</span> <span class=\"o\">=</span> <span class=\"n\">Script</span><span class=\"p\">([</span><span class=\"n\">sig_bytes_and_type1</span><span class=\"p\">,</span> <span class=\"n\">pubkey_bytes</span><span class=\"p\">])</span>\n<span class=\"n\">tx_in1</span><span class=\"p\">.</span><span class=\"n\">script_sig</span> <span class=\"o\">=</span> <span class=\"n\">script_sig1</span>\n\n<span class=\"c1\"># ----------------------------\n# digitally sign the spend of the second input of this transaction\n# note that index 1 of the input transaction is our first identity, so it signs here\n</span><span class=\"n\">message2</span> <span class=\"o\">=</span> <span class=\"n\">tx</span><span class=\"p\">.</span><span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"n\">sig_index</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">random</span><span class=\"p\">.</span><span class=\"n\">seed</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">.</span><span class=\"n\">from_bytes</span><span class=\"p\">(</span><span class=\"n\">sha256</span><span class=\"p\">(</span><span class=\"n\">message2</span><span class=\"p\">),</span> <span class=\"s\">'big'</span><span class=\"p\">))</span>\n<span class=\"n\">sig2</span> <span class=\"o\">=</span> <span class=\"n\">sign</span><span class=\"p\">(</span><span class=\"n\">secret_key</span><span class=\"p\">,</span> <span class=\"n\">message2</span><span class=\"p\">)</span> <span class=\"c1\"># identity 1 signs\n</span><span class=\"n\">sig_bytes_and_type2</span> <span class=\"o\">=</span> <span class=\"n\">sig2</span><span class=\"p\">.</span><span class=\"n\">encode</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"sa\">b</span><span class=\"s\">'</span><span class=\"se\">\\x01</span><span class=\"s\">'</span> <span class=\"c1\"># DER signature + SIGHASH_ALL\n</span><span class=\"n\">pubkey_bytes</span> <span class=\"o\">=</span> <span class=\"n\">PublicKey</span><span class=\"p\">.</span><span class=\"n\">from_point</span><span class=\"p\">(</span><span class=\"n\">public_key</span><span class=\"p\">).</span><span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"n\">compressed</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">,</span> <span class=\"n\">hash160</span><span class=\"o\">=</span><span class=\"bp\">False</span><span class=\"p\">)</span>\n<span class=\"n\">script_sig2</span> <span class=\"o\">=</span> <span class=\"n\">Script</span><span class=\"p\">([</span><span class=\"n\">sig_bytes_and_type2</span><span class=\"p\">,</span> <span class=\"n\">pubkey_bytes</span><span class=\"p\">])</span>\n<span class=\"n\">tx_in2</span><span class=\"p\">.</span><span class=\"n\">script_sig</span> <span class=\"o\">=</span> <span class=\"n\">script_sig2</span>\n\n<span class=\"c1\"># and that should be it!\n</span><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">tx</span><span class=\"p\">.</span><span class=\"nb\">id</span><span class=\"p\">())</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">tx</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">tx</span><span class=\"p\">.</span><span class=\"n\">encode</span><span class=\"p\">().</span><span class=\"nb\">hex</span><span class=\"p\">())</span>\n</code></pre></div></div>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>361fbb9de4ef5bfa8c1cbd5eff818ed9273f6e1f74b41a7f9a9e8427c9008b93\nTx(version=1, tx_ins=[TxIn(prev_tx=b'$^-\\x1f\\x87AX6\\xcb\\xb7\\xb0\\xbc\\x84\\xe4\\x0fL\\xa1\\xd2\\xa8\\x12\\xbe\\x0e\\xda8\\x1f\\x02\\xfb\"$\\xb4\\xadi', prev_index=0, script_sig=Script(cmds=[b'0D\\x02 \\x19\\x9aj\\xa5c\\x06\\xce\\xbc\\xda\\xcd\\x1e\\xba&amp;\\xb5^\\xafo\\x92\\xebF\\xeb\\x90\\xd1\\xb7\\xe7rK\\xac\\xbe\\x1d\\x19\\x14\\x02 \\x10\\x1c\\rF\\xe036\\x1c`Ski\\x89\\xef\\xddo\\xa6\\x92&amp;_\\xcd\\xa1dgn/I\\x88Xq\\x03\\x8a\\x01', b'\\x03\\x9a\\xc8\\xba\\xc8\\xf6\\xd9\\x16\\xb8\\xa8[E\\x8e\\x08~\\x0c\\xd0~jv\\xa6\\xbf\\xdd\\xe9\\xbbvk\\x17\\x08m\\x9a\\\\\\x8a']), sequence=4294967295), TxIn(prev_tx=b'$^-\\x1f\\x87AX6\\xcb\\xb7\\xb0\\xbc\\x84\\xe4\\x0fL\\xa1\\xd2\\xa8\\x12\\xbe\\x0e\\xda8\\x1f\\x02\\xfb\"$\\xb4\\xadi', prev_index=1, script_sig=Script(cmds=[b'0E\\x02!\\x00\\x84\\xecC#\\xed\\x07\\xdaJ\\xf6F \\x91\\xb4gbP\\xc3wRs0\\x19\\x1a?\\xf3\\xf5Y\\xa8\\x8b\\xea\\xe2\\xe2\\x02 w%\\x13\\x92\\xec/R2|\\xb7)k\\xe8\\x9c\\xc0\\x01Qn@9\\xba\\xdd*\\xd7\\xbb\\xc9P\\xc4\\xc1\\xb6\\xd7\\xcc\\x01', b'\\x03\\xb9\\xb5T\\xe2P\"\\xc2\\xaeT\\x9b\\x0c0\\xc1\\x8d\\xf0\\xa8\\xe0IR#\\xf6\\'\\xae8\\xdf\\t\\x92\\xef\\xb4w\\x94u']), sequence=4294967295)], tx_outs=[TxOut(amount=95000, script_pubkey=Script(cmds=[118, 169, b'\\x0c\\xe1vI\\xc10l)\\x1c\\xa9\\xe5\\x87\\xf8y;[\\x06V&lt;\\xea', 136, 172]))], locktime=0)\n010000000269adb42422fb021f38da0ebe12a8d2a14c0fe484bcb0b7cb365841871f2d5e24000000006a4730440220199a6aa56306cebcdacd1eba26b55eaf6f92eb46eb90d1b7e7724bacbe1d19140220101c0d46e033361c60536b6989efdd6fa692265fcda164676e2f49885871038a0121039ac8bac8f6d916b8a85b458e087e0cd07e6a76a6bfdde9bb766b17086d9a5c8affffffff69adb42422fb021f38da0ebe12a8d2a14c0fe484bcb0b7cb365841871f2d5e24010000006b48304502210084ec4323ed07da4af6462091b4676250c377527330191a3ff3f559a88beae2e2022077251392ec2f52327cb7296be89cc001516e4039badd2ad7bbc950c4c1b6d7cc012103b9b554e25022c2ae549b0c30c18df0a8e0495223f627ae38df0992efb4779475ffffffff0118730100000000001976a9140ce17649c1306c291ca9e587f8793b5b06563cea88ac00000000\n</code></pre></div></div>\n\n<p>Again we head over to Blockstream <a href=\"https://blockstream.info/testnet/tx/push\">tx/push</a> endpoint and copy paste the transaction hex above and wait :)</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"nn\">time</span><span class=\"p\">;</span> <span class=\"n\">time</span><span class=\"p\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mf\">1.0</span><span class=\"p\">)</span>\n<span class=\"c1\"># in Bitcoin main net a block will take about 10 minutes to mine\n# (Proof of Work difficulty is dynamically adjusted to make it so)\n</span></code></pre></div></div>\n\n<p>And <a href=\"https://www.blockchain.com/btc-testnet/tx/361fbb9de4ef5bfa8c1cbd5eff818ed9273f6e1f74b41a7f9a9e8427c9008b93\">here</a> is the transaction, as it eventually showed up, part of <a href=\"https://www.blockchain.com/btc-testnet/block/2005671\">Block 2005671</a>, along with 25 other transaction.</p>\n\n<p><strong>Exercise to the reader</strong>: steal my bitcoins from my 3rd identity wallet (mgh4VjZx5MpkHRis9mDsF2ZcKLdXoP3oQ4) to your own wallet ;) If done successfully, <a href=\"https://www.blockchain.com/btc-testnet/address/mgh4VjZx5MpkHRis9mDsF2ZcKLdXoP3oQ4\">the 3rd wallet</a> will show “Final Balance” of 0. At the time of writing this is\n0.00095000 BTC, as we intended and expected.</p>\n\n<p>And that’s where we’re going to wrap up! This is of course only very bare bones demonstration of Bitcoin that uses a now somewhat legacy-format P2PKH transaction style (not the more recent innovations including P2SH, Segwit, bech32, etc etc.), and of course we did not cover any of the transaction/block validation, mining, and so on. However, I hope this acts as a good intro to the core concepts of how value is represented in Bitcoin, and how cryptography is used to secure the transactions.</p>\n\n<p>In essence, we have a DAG of UTXOs that each have a certain <code class=\"language-plaintext highlighter-rouge\">amount</code> and a locking <code class=\"language-plaintext highlighter-rouge\">Script</code>, transactions fully consume and create UTXOs, and they are packaged into blocks by miners every 10 minutes. Economics is then used to achieve decentralization via proof of work: the probability that any entity gets to add a new block to the chain is proportional to their fraction of the network’s total SHA256 hashing power.</p>\n\n<p>As I was writing my <a href=\"https://github.com/karpathy/cryptos\">karpathy/cryptos</a> library it was fun to reflect on where all of the code was going. The majority of the cryptographic complexity comes from ECC, ECDSA, and SHA256, which are relatively standard in the industry and you’d never want to actually implement yourself (“don’t roll your own crypto”). On top of this, the core data structures of transactions, blocks, etc. are fairly straight forward, but there are a lot of non-glamorous details around the Bitcoin protocol, and the serialization / deserialization of all the data structures to and from bytes. On top of this, Bitcoin is a living, breathing, developing code base that is moving forward with new features to continue to scale, to further fortify its security, all while maintaining full backwards compatibility to avoid hard forks. Sometimes, respecting these constraints leads to some fairly gnarly constructs, e.g. I found Segwit in particular to not be very aesthetically pleasing to say the least. Other times, there is a large amount of complexity (e.g. with the scripting language and all of its op codes) that is rarely used in the majority of the basic point to point transactions.</p>\n\n<p>Lastly, I really enjoyed various historical aspects of Bitcoin. For example I found it highly amusing that some of the original Satoshi bugs are still around, e.g. in how the mining difficulty is adjusted (there is an off by one error where the calculation is based on 2015 blocks instead of 2016), or how some of the op codes are buggy (e.g. original multisig). Or how some of the primordial Satoshi ideas around high frequency trades (locktime / sequence) are still around, but find only limited use in a likely not-exactly-intended ways. Bitcoin is a code base with all the struggles of any other software project, but without the ability to break legacy functionality (this would require a hard fork).</p>\n\n<p>If you’d like to dig deeper I found <a href=\"https://www.amazon.com/Mastering-Bitcoin-Programming-Open-Blockchain/dp/1491954388\">Mastering Bitcoin</a> and <a href=\"https://www.amazon.com/Programming-Bitcoin-Learn-Program-Scratch/dp/1492031496\">Programming Bitcoin</a> to be very helpful references. I also implemented a much cleaner, separated, tested and more extensive version of everything above in my repo <a href=\"https://github.com/karpathy/cryptos\">karpathy/cryptos</a> if you’d like to use that as a reference instead in your own blockchain journey. I’ll make sure to upload this notebook <a href=\"https://github.com/karpathy/cryptos/blob/main/blog.ipynb\">there</a> as well. Oh and find me on <a href=\"https://twitter.com/karpathy\">Twitter</a>.</p>\n\n<p>Hope you learned something and that this was fun!</p>\n\n<p>Edit: <a href=\"https://news.ycombinator.com/item?id=27593772\">HN discussion</a></p>",
  "pubDate": "Mon, 21 Jun 2021 10:00:00 +0000",
  "link": "http://karpathy.github.io/2021/06/21/blockchain/",
  "guid": "http://karpathy.github.io/2021/06/21/blockchain/"
}