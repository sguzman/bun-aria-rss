{
  "title": "Sentiment analysis for Youtube channels &#8211; with NLTK",
  "link": "https://datanice.wordpress.com/2015/09/09/sentiment-analysis-for-youtube-channels-with-nltk/",
  "comments": "https://datanice.wordpress.com/2015/09/09/sentiment-analysis-for-youtube-channels-with-nltk/#comments",
  "dc:creator": "aptissimum",
  "pubDate": "Wed, 09 Sep 2015 19:27:21 +0000",
  "category": "Non classé",
  "guid": "http://datanice.wordpress.com/?p=48",
  "description": "In this tutorial, we &#8216;ll first take a look at the Youtube API to retrieve comments data about the channel as well as basic information about the likes count and view count of the videos. Then, we will use Nltk to see most frequently used words in the comments and plot some sentiment graphs. The [&#8230;]",
  "content:encoded": "<p>In this tutorial, we &#8216;ll first take a look at the Youtube API to retrieve comments data about the channel as well as basic information about the likes count and view count of the videos. Then, we will use Nltk to see most frequently used words in the comments and plot some sentiment graphs.</p>\n<p><a href=\"https://datanice.files.wordpress.com/2015/09/download1-e1441826980693.jpeg\"><img data-attachment-id=\"59\" data-permalink=\"https://datanice.wordpress.com/2015/09/09/sentiment-analysis-for-youtube-channels-with-nltk/download-2/#main\" data-orig-file=\"https://datanice.files.wordpress.com/2015/09/download1-e1441826980693.jpeg\" data-orig-size=\"1800,742\" data-comments-opened=\"1\" data-image-meta=\"{\"aperture\":\"0\",\"credit\":\"\",\"camera\":\"\",\"caption\":\"\",\"created_timestamp\":\"0\",\"copyright\":\"\",\"focal_length\":\"0\",\"iso\":\"0\",\"shutter_speed\":\"0\",\"title\":\"\",\"orientation\":\"0\"}\" data-image-title=\"download\" data-image-description=\"\" data-image-caption=\"\" data-medium-file=\"https://datanice.files.wordpress.com/2015/09/download1-e1441826980693.jpeg?w=300\" data-large-file=\"https://datanice.files.wordpress.com/2015/09/download1-e1441826980693.jpeg?w=525\" class=\"alignnone size-full wp-image-59\" src=\"https://datanice.files.wordpress.com/2015/09/download1-e1441826980693.jpeg?w=525\" alt=\"download\" srcset=\"https://datanice.files.wordpress.com/2015/09/download1-e1441826980693.jpeg?w=525 525w, https://datanice.files.wordpress.com/2015/09/download1-e1441826980693.jpeg?w=1048 1048w, https://datanice.files.wordpress.com/2015/09/download1-e1441826980693.jpeg?w=150 150w, https://datanice.files.wordpress.com/2015/09/download1-e1441826980693.jpeg?w=300 300w, https://datanice.files.wordpress.com/2015/09/download1-e1441826980693.jpeg?w=768 768w, https://datanice.files.wordpress.com/2015/09/download1-e1441826980693.jpeg?w=1024 1024w\" sizes=\"(max-width: 525px) 100vw, 525px\"   /></a><br />\n<span id=\"more-48\"></span></p>\n<h1>The Data</h1>\n<p>With the script below, we first query the video channels providing the channel ID then for every video we get a list of comments (Youtube limits this number to 20 comments per query)</p>\n<pre><code>from apiclient.discovery import build \nimport pandas as pd \nimport time\n\nDEVELOPER_KEY = \"\" \nYOUTUBE_API_SERVICE_NAME = \"\"\nYOUTUBE_API_VERSION = \"\"\n\nyoutube = build(YOUTUBE_API_SERVICE_NAME, YOUTUBE_API_VERSION, developerKey=DEVELOPER_KEY)\n\ndef get_videos_FromChanel(youtube, channelId,order):\n\tsearch_response = youtube.search().list(\n \t\tchannelId=channelId,\n \t\ttype=\"video\",\n \t\tpart=\"id,snippet\",\n \t\tmaxResults=50,\n \t\torder=order\n\t).execute()\n\n\treturn search_response.get(\"items\", [])\n\ndef get_comment_threads(youtube, videos):\n\ttempComments = []\n\tfor video in videos:\n\t\ttime.sleep(1.0)\n\t\tprint video[\"snippet\"][\"title\"]\n  \t\tresults = youtube.commentThreads().list(\n    \t\tpart=\"snippet\",\n    \t\tvideoId=video[\"id\"][\"videoId\"],\n    \t\ttextFormat=\"plainText\",\n    \t\tmaxResults=20,\n    \t\torder='relevance'\n  \t\t).execute()\n\n  \t\t\n  \t\tfor item in results[\"items\"]:\n  \t\t\tcomment = item[\"snippet\"][\"topLevelComment\"]\n  \t\t\ttempComment = dict(videoId=video[\"id\"][\"videoId\"], videoName=video[\"snippet\"][\"title\"],nbrReplies = item[\"snippet\"][\"totalReplyCount\"],author = comment[\"snippet\"][\"authorDisplayName\"],likes = comment[\"snippet\"][\"likeCount\"],publishedAt=comment[\"snippet\"][\"publishedAt\"],text = comment[\"snippet\"][\"textDisplay\"].encode('utf-8').strip())\n  \t\t\ttempComments.append(tempComment)\n  \t\n  \treturn tempComments\n</code></pre>\n<p>then you can call the function using :</p>\n<pre><code>videos = get_videos_FromChanel(youtube, \"CHANNEL_ID\",\"viewCount\")</code></pre>\n<h1>Statistics</h1>\n<p>Youtube has a special option to retreive the statistic data, we just have to query the video list method using the &#8220;statistic&#8221; option.</p>\n<pre><code>def getVideoInfos(videos):\n    videoList = {}\n    for search_result in videos:\n         if search_result[\"id\"][\"kind\"] == \"youtube#video\":\n             videoList[search_result[\"id\"][\"videoId\"]] = search_result[\"snippet\"][\"title\"]\n\n    s = ','.join(videoList.keys())\n    videos_list_response = youtube.videos().list(id=s,part='id,statistics').execute()\n    res = []\n    for i in videos_list_response['items']:\n         temp_res = dict(v_title = videoList[i['id']])\n         temp_res.update(i['statistics'])\n         res.append(temp_res)\n\n    data = pd.DataFrame.from_dict(res)\n    data['viewCount'] = data['viewCount'].map(lambda x : float(x))\n    data['commentCount'] = data['commentCount'].map(lambda x : float(x))\n    return data\n\ndata = getVideoInfos(videos)\n\ninfos.sort('viewCount',ascending=0).head(20).plot(kind='bar', x='v_title',y='viewCount')\n</code></pre>\n<p>This is what I get for the view count of the <a href=\"https://www.youtube.com/channel/UClYb9NpXnRemxYoWbcYANsA\">shots of Awe</a> videos channel:<br />\n<a href=\"https://datanice.files.wordpress.com/2015/09/screenshot-from-2015-09-09-175623.png\"><img data-attachment-id=\"52\" data-permalink=\"https://datanice.wordpress.com/2015/09/09/sentiment-analysis-for-youtube-channels-with-nltk/screenshot-from-2015-09-09-175623/#main\" data-orig-file=\"https://datanice.files.wordpress.com/2015/09/screenshot-from-2015-09-09-175623.png\" data-orig-size=\"581,572\" data-comments-opened=\"1\" data-image-meta=\"{\"aperture\":\"0\",\"credit\":\"\",\"camera\":\"\",\"caption\":\"\",\"created_timestamp\":\"0\",\"copyright\":\"\",\"focal_length\":\"0\",\"iso\":\"0\",\"shutter_speed\":\"0\",\"title\":\"\",\"orientation\":\"0\"}\" data-image-title=\"Screenshot from 2015-09-09 17:56:23\" data-image-description=\"\" data-image-caption=\"\" data-medium-file=\"https://datanice.files.wordpress.com/2015/09/screenshot-from-2015-09-09-175623.png?w=300\" data-large-file=\"https://datanice.files.wordpress.com/2015/09/screenshot-from-2015-09-09-175623.png?w=525\" class=\"alignnone size-full wp-image-52\" src=\"https://datanice.files.wordpress.com/2015/09/screenshot-from-2015-09-09-175623.png?w=525\" alt=\"Screenshot from 2015-09-09 17:56:23\" srcset=\"https://datanice.files.wordpress.com/2015/09/screenshot-from-2015-09-09-175623.png?w=525 525w, https://datanice.files.wordpress.com/2015/09/screenshot-from-2015-09-09-175623.png?w=150 150w, https://datanice.files.wordpress.com/2015/09/screenshot-from-2015-09-09-175623.png?w=300 300w, https://datanice.files.wordpress.com/2015/09/screenshot-from-2015-09-09-175623.png 581w\" sizes=\"(max-width: 525px) 100vw, 525px\"   /></a></p>\n<p>We can have the same plots for likes counts and comments count, and plot scatter plots to see if there is a correlation between these features.</p>\n<p>We can note that the third video has only been uploaded for a few days at the time I’m writing this article, that&#8217;s what we call a buzz video.</p>\n<p>An interesting chart to plot would be the number of views/time online.</p>\n<h1>Comments analysis</h1>\n<ul>\n<li>\n<h3>Word Frequency</h3>\n</li>\n</ul>\n<p>What do people talk about in the comments ? What do they like/hate the most about the channel ?<br />\nIn order to answer these questions we can look at the word frequency in the comments. We can use the &#8220;nltk&#8221; package to see the distribution :</p>\n<pre><code>import nltk\nfrom nltk.probability import *\nfrom nltk.corpus import stopwords\nimport pandas as pd\n\nall = pd.read_json(\"comments.csv\")\n\nstop_eng = stopwords.words('english')\ncustomstopwords =[]\n\ntokens = []\nsentences = []\ntokenizedSentences =[]\nfor txt in all.text:\n    sentences.append(txt.lower())\n    tokenized = [t.lower().encode('utf-8').strip(\":,.!?\") for t in txt.split()]\n    tokens.extend(tokenized)\n    tokenizedSentences.append(tokenized)\n\nhashtags = [w for w in tokens if w.startswith('#')]\nghashtags = [w for w in tokens if w.startswith('+')]\nmentions = [w for w in tokens if w.startswith('@')]\nlinks = [w for w in tokens if w.startswith('http') or w.startswith('www')]\nfiltered_tokens = [w for w in tokens if not w in stop_eng and not w in customstopwords and w.isalpha() and not len(w)<3 and not w in hashtags and not w in ghashtags and not w in links and not w in mentions]\n\nfd = FreqDist(filtered_tokens)\n</code></pre>\n<p>FreqDist returns a list of tuples containing each word and the number of its occurences. Let&#8221;s plot a bar chart to visualize it:</p>\n<pre>import scipy\nimport pylab\nimport operator\nfrom operator import itemgetter, attrgetter\n\nsortedTuples = sorted(fd.items(), key=operator.itemgetter(1), reverse=True)\na = [i[0] for i in sorted_x[0:20]]\nb = [i[1] for i in sorted_x[0:20]]\n\nx = scipy.arange(len(b))\ny = scipy.array(b)\nf = pylab.figure()\nax = f.add_axes([0.5, 0.5, 1.5, 1.5])\nax.bar(x, y, align='center')\nax.set_xticks(x)\nax.set_xticklabels(a)\nf.show()</pre>\n<p>And the result :</p>\n<p><a href=\"https://datanice.files.wordpress.com/2015/09/screenshot-from-2015-09-09-203414.png\"><img loading=\"lazy\" data-attachment-id=\"53\" data-permalink=\"https://datanice.wordpress.com/2015/09/09/sentiment-analysis-for-youtube-channels-with-nltk/screenshot-from-2015-09-09-203414/#main\" data-orig-file=\"https://datanice.files.wordpress.com/2015/09/screenshot-from-2015-09-09-203414.png\" data-orig-size=\"991,563\" data-comments-opened=\"1\" data-image-meta=\"{\"aperture\":\"0\",\"credit\":\"\",\"camera\":\"\",\"caption\":\"\",\"created_timestamp\":\"0\",\"copyright\":\"\",\"focal_length\":\"0\",\"iso\":\"0\",\"shutter_speed\":\"0\",\"title\":\"\",\"orientation\":\"0\"}\" data-image-title=\"Screenshot from 2015-09-09 20:34:14\" data-image-description=\"\" data-image-caption=\"\" data-medium-file=\"https://datanice.files.wordpress.com/2015/09/screenshot-from-2015-09-09-203414.png?w=300\" data-large-file=\"https://datanice.files.wordpress.com/2015/09/screenshot-from-2015-09-09-203414.png?w=525\" class=\"alignnone wp-image-53\" src=\"https://datanice.files.wordpress.com/2015/09/screenshot-from-2015-09-09-203414.png?w=726&#038;h=420\" alt=\"Screenshot from 2015-09-09 20:34:14\" width=\"726\" height=\"420\" /></a></p>\n<p>The most used words are &#8220;love&#8221; (141 occurrences), &#8220;like&#8221; (89 occurrences) then &#8220;think&#8221; and &#8220;life&#8221;. Pretty deep !</p>\n<ul>\n<li>\n<h3>Sentiment Analysis</h3>\n</li>\n</ul>\n<p>In order to analyze the comments sentiments, we are going to train a Naive Bayes Classifier using a dataset provided by nltk. This could be imroved using a better training dataset for comments or tweets.</p>\n<p>The reviews are classified as &#8220;negative&#8221; or &#8220;positive&#8221;, and our classifier will return the probability of each label. We will compute a score = prob(&#8220;positive&#8221;) &#8211; prob(&#8220;negative&#8221;) to get a score between -1 an 1.</p>\n<h4>Training the classifier</h4>\n<pre>import pandas as pd\nimport nltk.classify.util\nfrom nltk.classify import NaiveBayesClassifier\nfrom nltk.corpus import movie_reviews\n\n###############\ndef word_feats(words):\n    return dict([(word, True) for word in words])\n###############\n\nnegids = movie_reviews.fileids('neg')\nposids = movie_reviews.fileids('pos')\n \nnegfeats = [(word_feats(movie_reviews.words(fileids=[f])), 'neg') for f in negids]\nposfeats = [(word_feats(movie_reviews.words(fileids=[f])), 'pos') for f in posids]\n\ntrainfeats = negfeats + posfeats\n \nclassifier = NaiveBayesClassifier.train(trainfeats)\n###############\n\nall = pd.read_json(\"comments.csv\")\n\nall['tokenized'] = all['text'].apply(lambda x: [t.lower().encode('utf-8').strip(\":,.!?\") for t in x.split()] )\nall['sentiment'] = all['tokenized'].apply(lambda x: classifier.prob_classify(word_feats(x)).prob('pos') - classifier.prob_classify(word_feats(x)).prob('neg') )</pre>\n<p>Once the classifier trained, we added a column with the sentiment score using the &#8220;classifier.prob_classify&#8221; function.</p>\n<p>Let&#8217;s see the results for the first video in a scatter plot (versus likes)</p>\n<pre>videos = all.videoId.unique()\nall[all.videoId==videos[1]].plot(kind='scatter', x='sentiment', y='likes', figsize=(12,8))</pre>\n<p><a href=\"https://datanice.files.wordpress.com/2015/09/screenshot-from-2015-09-09-210331.png\"><img loading=\"lazy\" data-attachment-id=\"56\" data-permalink=\"https://datanice.wordpress.com/2015/09/09/sentiment-analysis-for-youtube-channels-with-nltk/screenshot-from-2015-09-09-210331/#main\" data-orig-file=\"https://datanice.files.wordpress.com/2015/09/screenshot-from-2015-09-09-210331.png\" data-orig-size=\"858,498\" data-comments-opened=\"1\" data-image-meta=\"{\"aperture\":\"0\",\"credit\":\"\",\"camera\":\"\",\"caption\":\"\",\"created_timestamp\":\"0\",\"copyright\":\"\",\"focal_length\":\"0\",\"iso\":\"0\",\"shutter_speed\":\"0\",\"title\":\"\",\"orientation\":\"0\"}\" data-image-title=\"Screenshot from 2015-09-09 21:03:31\" data-image-description=\"\" data-image-caption=\"\" data-medium-file=\"https://datanice.files.wordpress.com/2015/09/screenshot-from-2015-09-09-210331.png?w=300\" data-large-file=\"https://datanice.files.wordpress.com/2015/09/screenshot-from-2015-09-09-210331.png?w=525\" class=\"alignnone wp-image-56\" src=\"https://datanice.files.wordpress.com/2015/09/screenshot-from-2015-09-09-210331.png?w=799&#038;h=471\" alt=\"Screenshot from 2015-09-09 21:03:31\" width=\"799\" height=\"471\" /></a></p>\n<p>For the next one,</p>\n<p><a href=\"https://datanice.files.wordpress.com/2015/09/screenshot-from-2015-09-09-210427.png\"><img data-attachment-id=\"57\" data-permalink=\"https://datanice.wordpress.com/2015/09/09/sentiment-analysis-for-youtube-channels-with-nltk/screenshot-from-2015-09-09-210427/#main\" data-orig-file=\"https://datanice.files.wordpress.com/2015/09/screenshot-from-2015-09-09-210427.png\" data-orig-size=\"940,497\" data-comments-opened=\"1\" data-image-meta=\"{\"aperture\":\"0\",\"credit\":\"\",\"camera\":\"\",\"caption\":\"\",\"created_timestamp\":\"0\",\"copyright\":\"\",\"focal_length\":\"0\",\"iso\":\"0\",\"shutter_speed\":\"0\",\"title\":\"\",\"orientation\":\"0\"}\" data-image-title=\"Screenshot from 2015-09-09 21:04:27\" data-image-description=\"\" data-image-caption=\"\" data-medium-file=\"https://datanice.files.wordpress.com/2015/09/screenshot-from-2015-09-09-210427.png?w=300\" data-large-file=\"https://datanice.files.wordpress.com/2015/09/screenshot-from-2015-09-09-210427.png?w=525\" class=\"alignnone size-full wp-image-57\" src=\"https://datanice.files.wordpress.com/2015/09/screenshot-from-2015-09-09-210427.png?w=525\" alt=\"Screenshot from 2015-09-09 21:04:27\" srcset=\"https://datanice.files.wordpress.com/2015/09/screenshot-from-2015-09-09-210427.png?w=525 525w, https://datanice.files.wordpress.com/2015/09/screenshot-from-2015-09-09-210427.png?w=150 150w, https://datanice.files.wordpress.com/2015/09/screenshot-from-2015-09-09-210427.png?w=300 300w, https://datanice.files.wordpress.com/2015/09/screenshot-from-2015-09-09-210427.png?w=768 768w, https://datanice.files.wordpress.com/2015/09/screenshot-from-2015-09-09-210427.png 940w\" sizes=\"(max-width: 525px) 100vw, 525px\"   /></a></p>\n<p>A cool thing to do here is to see what&#8217;s the text of every comment. The best thing to do is to have an interactive plot where hovering on a point shows the comment text. This could be done with the <a href=\"http://d3js.org/\">d3.js</a> library. We can also make the axis interactive and add animations to animate the points when for example changing the sentiment axis to the publishing date of the comment&#8230;</p>\n<p>Next Steps:</p>\n<ul>\n<li>Adding a plot for &#8220;number of views&#8221;/&#8221;time online&#8221;</li>\n<li>Interactive d3.js plot to see the comment text when hovering on he comment.</li>\n</ul>\n",
  "wfw:commentRss": "https://datanice.wordpress.com/2015/09/09/sentiment-analysis-for-youtube-channels-with-nltk/feed/",
  "slash:comments": 2,
  "media:content": [
    {
      "media:title": "aptissimum"
    },
    {
      "media:title": "download"
    },
    {
      "media:title": "Screenshot from 2015-09-09 17:56:23"
    },
    {
      "media:title": "Screenshot from 2015-09-09 20:34:14"
    },
    {
      "media:title": "Screenshot from 2015-09-09 21:03:31"
    },
    {
      "media:title": "Screenshot from 2015-09-09 21:04:27"
    }
  ]
}