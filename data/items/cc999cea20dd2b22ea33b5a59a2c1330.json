{
  "title": "Interactive Plots using Plotly Express: Line Plot and 3D Scatter Plot",
  "description": "<p>This blog series is a beginners&#x2019; tutorial on how you can make interactive plots in a Jupyter notebook using Plotly Express. In this first blog post on this topic, we will go through the steps needed for creating a basic line Python plot and a 3D scatter plot.</p><h2 id=\"basic-line-plot\">Basic</h2>",
  "link": "https://www.data-blogger.com/interactive-plots-using-plotly-express-part-1-line-plot-and-3d-scatter-plot/",
  "guid": "622d00e5092f120001a24e49",
  "category": [
    "Visualizations",
    "Python"
  ],
  "dc:creator": "Kevin Jacobs",
  "pubDate": "Wed, 15 Dec 2021 00:00:00 GMT",
  "media:content": "",
  "content:encoded": "<img src=\"https://www.data-blogger.com/content/images/2022/03/image.png\" alt=\"Interactive Plots using Plotly Express: Line Plot and 3D Scatter Plot\"><p>This blog series is a beginners&#x2019; tutorial on how you can make interactive plots in a Jupyter notebook using Plotly Express. In this first blog post on this topic, we will go through the steps needed for creating a basic line Python plot and a 3D scatter plot.</p><h2 id=\"basic-line-plot\">Basic line plot</h2><p>The most simple plot is a line plot which is the first plot that we will create. We will start by importing the required libraries for Plotly:</p><pre><code class=\"language-python\">import pandas as pd\nimport numpy as np\nimport chart_studio.plotly as py\nimport seaborn as sns\nimport plotly.express as px\nimport cufflinks as cf\n%matplotlib inline\n\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\ninit_notebook_mode(connected=True)\ncf.go_offline()</code></pre><p>Then, we can create a simple DataFrame based on random numbers (in a 25&#xD7;3 matrix) and plot the results using Plotly:</p><pre><code class=\"language-python\">df = pd.DataFrame(np.random.randn(25, 3), columns=['First', 'Second', 'Third'])\ndf.iplot()</code></pre><p>And this is the result:</p><figure class=\"kg-card kg-image-card\"><img src=\"https://www.data-blogger.com/wp-content/uploads/2021/12/Screenshot-2021-12-15-at-16.51.58-1024x195.png.webp\" class=\"kg-image\" alt=\"Interactive Plots using Plotly Express: Line Plot and 3D Scatter Plot\" loading=\"lazy\"></figure><h2 id=\"3d-scatter-plot\">3D Scatter Plot</h2><p>We can also create a scatter plot in 3 dimensions. That is not possible using only Matplotlib. For this scatter plot, we will download stock data and plot the year on the x-axis, the month on the y-axis and the change on the z-axis. As color, we will use the trade volume.</p><pre><code class=\"language-python\">import yfinance as yf\n\n# Download and clean the data\ndf_aapl = yf.download('AAPL', start='2000-01-01', end='2021-12-01').reset_index()\ndf_aapl = df_aapl.assign(DateTime=pd.to_datetime(df_aapl.Date))\n# Assign the year, month and weekday to the DataFrame\ndf_aapl = df_aapl.assign(year=df_aapl.DateTime.dt.year, month=df_aapl.DateTime.dt.month, weekday=df_aapl.DateTime.dt.weekday)\n# Compute the percentage change\ndf_aapl = df_aapl.assign(change=df_aapl.Close.pct_change())\ndf_aapl.dropna()\n# Remove outliers (with a change that is larger than 0.1)\ndf_aapl = df_aapl[df_aapl.change.apply(abs) < 0.1]\n# Apply a log filter on the volume\ndf_aapl = df_aapl.assign(Volume=df_aapl.Volume.apply(np.log))\n\n# Now we can create the 3D scatter plot!\nfig = px.scatter_3d(df_aapl, x='year', y='month', z='change', color='Volume', size_max=1)\nfig</code></pre><p>This is the final result:</p><figure class=\"kg-card kg-image-card\"><img src=\"https://www.data-blogger.com/wp-content/uploads/2021/12/image.png.webp\" class=\"kg-image\" alt=\"Interactive Plots using Plotly Express: Line Plot and 3D Scatter Plot\" loading=\"lazy\"></figure><p>Here, you can see that the Apple stock (AAPL) was traded a lot around 2005, but less traded nowadays. If you have an interesting use case for 3D line plots or 3D scatter plots, please share it in the comments below.</p>"
}