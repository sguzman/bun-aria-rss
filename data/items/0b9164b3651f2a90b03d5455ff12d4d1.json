{
  "title": "Optimizing Data Structure Access in Python",
  "link": "",
  "updated": "2017-11-03T00:00:00+00:00",
  "id": "https://mrocklin.github.io/blog/work/2017/11/03/data-structure-benchmark",
  "content": "<p><em>This work is supported by <a href=\"http://anaconda.com\">Anaconda Inc</a> and the Data\nDriven Discovery Initiative from the <a href=\"https://www.moore.org/\">Moore Foundation</a></em></p>\n\n<p>Last week at <a href=\"https://de.pycon.org/\">PyCon DE</a> I had the good fortune to meet\n<a href=\"http://www.behnel.de/\">Stefan Behnel</a>, one of the core developers of Cython.\nTogether we worked to optimize a small benchmark that is representative of\nDask’s central task scheduler, a pure-Python application that is primarily data\nstructure bound.</p>\n\n<p>Our benchmark is a toy problem that creates three data structures that index\neach other with dictionaries, lists, and sets, and then does some simple\narithmetic. (You don’t need to understand this benchmark deeply to read this\narticle.)</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"nn\">random</span>\n<span class=\"kn\">import</span> <span class=\"nn\">time</span>\n\n<span class=\"n\">nA</span> <span class=\"o\">=</span> <span class=\"mi\">100</span>\n<span class=\"n\">nB</span> <span class=\"o\">=</span> <span class=\"mi\">100</span>\n<span class=\"n\">nC</span> <span class=\"o\">=</span> <span class=\"mi\">100</span>\n\n<span class=\"n\">A</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s\">'A-%d'</span> <span class=\"o\">%</span> <span class=\"n\">i</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">'B-%d'</span> <span class=\"o\">%</span> <span class=\"n\">random</span><span class=\"p\">.</span><span class=\"n\">randint</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">nB</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n                  <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">random</span><span class=\"p\">.</span><span class=\"n\">randint</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">))]</span>\n     <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">nA</span><span class=\"p\">)}</span>\n\n<span class=\"n\">B</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s\">'B-%d'</span> <span class=\"o\">%</span> <span class=\"n\">i</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s\">'C-%d'</span> <span class=\"o\">%</span> <span class=\"n\">random</span><span class=\"p\">.</span><span class=\"n\">randint</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">nC</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n                  <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">random</span><span class=\"p\">.</span><span class=\"n\">randint</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">))}</span>\n     <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">nB</span><span class=\"p\">)}</span>\n\n<span class=\"n\">C</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s\">'C-%d'</span> <span class=\"o\">%</span> <span class=\"n\">i</span><span class=\"p\">:</span> <span class=\"n\">i</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">nC</span><span class=\"p\">)}</span>\n\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">'A-%d'</span> <span class=\"o\">%</span> <span class=\"n\">i</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">nA</span><span class=\"p\">)]</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">f</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">B</span><span class=\"p\">,</span> <span class=\"n\">C</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">):</span>\n    <span class=\"k\">for</span> <span class=\"n\">a_key</span> <span class=\"ow\">in</span> <span class=\"n\">data</span><span class=\"p\">:</span>\n        <span class=\"n\">b_keys</span> <span class=\"o\">=</span> <span class=\"n\">A</span><span class=\"p\">[</span><span class=\"n\">a_key</span><span class=\"p\">]</span>\n        <span class=\"k\">for</span> <span class=\"n\">b_key</span> <span class=\"ow\">in</span> <span class=\"n\">b_keys</span><span class=\"p\">:</span>\n            <span class=\"k\">for</span> <span class=\"n\">c_key</span> <span class=\"ow\">in</span> <span class=\"n\">B</span><span class=\"p\">[</span><span class=\"n\">b_key</span><span class=\"p\">]:</span>\n                <span class=\"n\">C</span><span class=\"p\">[</span><span class=\"n\">c_key</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n\n\n<span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"p\">.</span><span class=\"n\">time</span><span class=\"p\">()</span>\n\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">10000</span><span class=\"p\">):</span>\n    <span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">B</span><span class=\"p\">,</span> <span class=\"n\">C</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">)</span>\n\n<span class=\"n\">end</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"p\">.</span><span class=\"n\">time</span><span class=\"p\">()</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"Duration: %0.3f seconds\"</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">end</span> <span class=\"o\">-</span> <span class=\"n\">start</span><span class=\"p\">))</span>\n</code></pre></div></div>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>$ python benchmark.py\nDuration: 1.12 seconds\n</code></pre></div></div>\n\n<p>This is an atypical problem Python optimization because it is primarily bound\nby data structure access (dicts, lists, sets), rather than numerical operations\ncommonly optimized by Cython (nested for loops over floating point arithmetic).\nPython is already decently fast here, typically within a factor of 2-5x of\ncompiled languages like Java or C++, but still we’d like to improve this when\npossible.</p>\n\n<p>In this post we combine two different methods to optimize data-structure bound\nworkloads:</p>\n\n<ol>\n  <li>Compiling Python code with Cython with no other annotations</li>\n  <li>Interning strings for more rapid dict lookups</li>\n</ol>\n\n<p>Finally at the end of the post we also run the benchmark under PyPy to compare\nperformance.</p>\n\n<h2 id=\"cython\">Cython</h2>\n\n<p>First we compile our Python code with Cython.  Normally when using Cython we\nannotate our variables with types, giving the compiler enough information\nto avoid using Python altogether.  However in our case we don’t have many\nnumeric operations and we’re going to be using Python data structures\nregardless, so this won’t help much.  We compile our original Python code\nwithout alteration.</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>cythonize -i benchmark.py\n</code></pre></div></div>\n\n<p>And run</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>$ python -c \"import benchmark\"\nDuration: 0.73 seconds\n</code></pre></div></div>\n\n<p>This gives us a decent speedup from 1.1 seconds to 0.73 seconds.  This isn’t\nhuge relative to typical Cython speedups (which are often 10-100x) but would be\na <em>very welcome</em> change for our scheduler, where we’ve been chasing 5%\noptimizations for a while now.</p>\n\n<h2 id=\"interning-strings\">Interning Strings</h2>\n\n<p>Our second trick is to intern strings.  This means that we try to always have\nonly one copy of every string.  This improves performance when doing dictionary\nlookups because of the following:</p>\n\n<ol>\n  <li>Python computes the hash of the string only once (strings cache their hash\nvalue once computed)</li>\n  <li>Python checks for object identity (fast) before moving on to value equality\n(slow)</li>\n</ol>\n\n<p>Or, anecdotally, <code class=\"language-plaintext highlighter-rouge\">text is text</code> is faster in Python than <code class=\"language-plaintext highlighter-rouge\">text == text</code>.  If\nyou ensure that there is only one copy of every string then you only need to do\nidentity comparisons like <code class=\"language-plaintext highlighter-rouge\">text is text</code>.</p>\n\n<p>So, if any time we see a string <code class=\"language-plaintext highlighter-rouge\">\"abc\"</code> it is exactly the same object as all\nother <code class=\"language-plaintext highlighter-rouge\">\"abc\"</code> strings in our program, then string-dict lookups will only\nrequire a pointer/integer equality check, rather than having to do a full\nstring comparison.</p>\n\n<p>Adding string interning to our benchmark looks like the following:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">inter</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">intern</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">inter</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">]</span>\n    <span class=\"k\">except</span> <span class=\"nb\">KeyError</span><span class=\"p\">:</span>\n        <span class=\"n\">inter</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">x</span>\n        <span class=\"k\">return</span> <span class=\"n\">x</span>\n\n<span class=\"n\">A</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"nb\">intern</span><span class=\"p\">(</span><span class=\"s\">'A-%d'</span> <span class=\"o\">%</span> <span class=\"n\">i</span><span class=\"p\">):</span> <span class=\"p\">[</span><span class=\"nb\">intern</span><span class=\"p\">(</span><span class=\"s\">'B-%d'</span> <span class=\"o\">%</span> <span class=\"n\">random</span><span class=\"p\">.</span><span class=\"n\">randint</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">nB</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n                  <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">random</span><span class=\"p\">.</span><span class=\"n\">randint</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">))]</span>\n     <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">nA</span><span class=\"p\">)}</span>\n\n<span class=\"n\">B</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"nb\">intern</span><span class=\"p\">(</span><span class=\"s\">'B-%d'</span> <span class=\"o\">%</span> <span class=\"n\">i</span><span class=\"p\">):</span> <span class=\"p\">{</span><span class=\"nb\">intern</span><span class=\"p\">(</span><span class=\"s\">'C-%d'</span> <span class=\"o\">%</span> <span class=\"n\">random</span><span class=\"p\">.</span><span class=\"n\">randint</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">nC</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n                  <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">random</span><span class=\"p\">.</span><span class=\"n\">randint</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">))}</span>\n     <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">nB</span><span class=\"p\">)}</span>\n\n<span class=\"n\">C</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"nb\">intern</span><span class=\"p\">(</span><span class=\"s\">'C-%d'</span> <span class=\"o\">%</span> <span class=\"n\">i</span><span class=\"p\">):</span> <span class=\"n\">i</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">nC</span><span class=\"p\">)}</span>\n\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"nb\">intern</span><span class=\"p\">(</span><span class=\"s\">'A-%d'</span> <span class=\"o\">%</span> <span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">nA</span><span class=\"p\">)]</span>\n\n<span class=\"c1\"># The rest of the benchmark is as before\n</span></code></pre></div></div>\n\n<p>This brings our duration from 1.1s down to 0.75s.  Note that this is without\nthe separate Cython improvements described just above.</p>\n\n<h2 id=\"cython--interning\">Cython + Interning</h2>\n\n<p>We can combine both optimizations.  This brings us to around 0.45s, a 2-3x\nimprovement over our original time.</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>cythonize -i benchmark2.py\n\n$ python -c \"import benchmark2\"\nDuration: 0.46 seconds\n</code></pre></div></div>\n\n<h2 id=\"pypy\">PyPy</h2>\n\n<p>Alternatively, we can just run everything in PyPy.</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>$ pypy3 benchmark1.py  # original\nDuration: 0.25 seconds\n\n$ pypy3 benchmark2.py  # includes interning\nDuraiton: 0.20 seconds\n</code></pre></div></div>\n\n<p>So PyPy can be quite a bit faster than Cython on this sort of code (which is\nnot a big surprise).  Interning helps a bit, but not quite as much.</p>\n\n<p>This is fairly encouraging.  The Dask scheduler can run under PyPy even while\nDask clients and workers run under normal CPython (for use with the full PyData\nstack).</p>\n\n<h2 id=\"preliminary-results-on-dask-benchmark\">Preliminary Results on Dask Benchmark</h2>\n\n<p>We started this experiment with the assumption that our toy benchmark somehow\nrepresented the Dask’s scheduler in terms of performance characteristics.  This\nassumption, of course, is false.  The Dask scheduler is significantly more\ncomplex and it is difficult to build a single toy example to represent its\nperformance.</p>\n\n<p>When we try these tricks on a <a href=\"https://gist.github.com/88b3c29e645ba2eae2d079a1de25d266\">slightly more complex\nbenchmark</a> that\nactually uses the Dask scheduler we find the following results:</p>\n\n<ul>\n  <li><strong>Cython</strong>: almost no effect</li>\n  <li><strong>String Interning</strong>: almost no effect</li>\n  <li><strong>PyPy</strong>: almost no effect</li>\n</ul>\n\n<p>However I have only spent a brief amount of time on this (twenty minutes?) and\nso I hope that the lack of a performance gain here is due to lack of effort.</p>\n\n<p>If anyone is interested in this I hope that this blogpost contains enough\ninformation to get anyone started if they want to investigate further.</p>"
}