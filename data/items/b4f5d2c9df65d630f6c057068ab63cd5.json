{
  "title": "Launching Version 13.1 of Wolfram Language &#038; Mathematica 🙀🤠🥳",
  "link": "https://writings.stephenwolfram.com/2022/06/launching-version-13-1-of-wolfram-language-mathematica/",
  "comments": "https://writings.stephenwolfram.com/2022/06/launching-version-13-1-of-wolfram-language-mathematica/#comments",
  "pubDate": "Thu, 30 Jun 2022 02:46:26 +0000",
  "dc:creator": "Stephen Wolfram",
  "category": [
    "Mathematica",
    "New Technology",
    "Wolfram Language",
    "Recent Release",
    "Version Release"
  ],
  "guid": "https://writings.stephenwolfram.com/?p=38521",
  "description": "<span class=\"thumbnail\"><img width=\"128\" height=\"108\" src=\"https://content.wolfram.com/uploads/sites/43/2022/06/version-13.1-icon.png\" class=\"attachment-thumbnail size-thumbnail wp-post-image\" alt=\"\" /></span>::[ ] Threaded MapApply FeatureImpactPlot IntegrateChangeVariables ReconstructionMesh VideoCapture RootTree ImplicitD &#8220;ExprStruct&#8221; ChemicalConvert UniqueElements ReplaceAt TypeEvaluate TreeLeafCount QuestionSelector IncludeSingularSolutions KernelConfiguration PhongShading PatternReaction FractionalD OrdinalScale DropShadowing UnlabeledTree FeatureValueDependencyPlot CaputoD BlockDiagonalMatrix ModelPredictiveController GeodesicPolyhedron InertEvaluate Until TernaryListPlot FromRawPointer VideoScreenCapture PermutationMatrix FeatureValueImpactPlot ApplyReaction GraphJoin TorusGraph DSolveChangeVariables CumulativeFeatureImpactPlot TreeElementShape LibraryFunctionDeclaration SymmetricDifference FlatShading CircularArcThrough GouraudShading DiscreteInputOutputModel EstimatedPointNormals GraphProduct NominalScale QuestionGenerator GraphSum BuckyballGraph [&#8230;]",
  "content:encoded": "<span class=\"thumbnail\"><img width=\"128\" height=\"108\" src=\"https://content.wolfram.com/uploads/sites/43/2022/06/version-13.1-icon.png\" class=\"attachment-thumbnail size-thumbnail wp-post-image\" alt=\"\" /></span><p><a href=\"https://livestreams.stephenwolfram.com/\" target=\"_blank\"><img class=\"\" title=\"Exploring Wolfram Language 13.1 with Stephen Wolfram\"  src=\"https://content.wolfram.com/uploads/sites/43/2022/06/13.1-live-coding.png\" alt=\"Exploring Wolfram Language 13.1 with Stephen Wolfram\" width=\"620\" height=\" \" /></a></p>\n<style type=\"text/css\">\n@keyframes fadein {from {opacity: 0;} to {opacity: 1;}}\n.initial_hidden {opacity: 0;}\n.fade_this_in {animation: fadein 1s;opacity:1;}\ndiv#wordcloud-13-1 {transform-origin: top left;transform: scale(.875);height: 270px !important;}\n@media (max-width: 1150px) {div#wordcloud-13-1{transform: scale(.8);height: 244px !important;}}\n@media (max-width: 850px) {div#wordcloud-13-1{transform: scale(.77);height: 234px !important;}}\n@media (max-width: 800px) {div#wordcloud-13-1{transform: scale(.73);height: 225px !important;}}\n@media (max-width: 750px) {div#wordcloud-13-1{transform: scale(.69);height: 208px !important;}}\n@media (max-width: 700px) {div#wordcloud-13-1{transform: scale(.65);height: 187px !important;}}\n@media (max-width: 650px) {div#wordcloud-13-1{transform: scale(.62);height: 177px !important;}}\n@media (max-width: 600px) {div#wordcloud-13-1{transform: scale(.58);height: 166px !important;}}\n@media (max-width: 550px) {div#wordcloud-13-1{transform: scale(.55);height: 156px !important;}}\n@media (max-width: 500px) {div#wordcloud-13-1{transform: scale(.48);height: 137px !important;}}\n@media (max-width: 450px) {div#wordcloud-13-1{transform: scale(.45);height: 128px !important;}}\n@media (max-width: 400px) {div#wordcloud-13-1{transform: scale(.42);height: 115px !important;}}\n@media (max-width: 361px) {div#wordcloud-13-1{transform: scale(.38);height: 115px !important;}}\n#wordcloud-13-1 a{text-decoration:none;\n\t-webkit-transition-duration: 1s;-moz-transition-duration: 1s;-o-transition-duration: 1s;transition-duration: 1s;\n\t-webkit-transition-property: color;-moz-transition-property: color;-o-transition-property: color;transition-property: color;\n}\n#wordcloud-13-1 a:hover {\n\t-webkit-transition-duration: 0s;-moz-transition-duration: 0s;-o-transition-duration: 0s;transition-duration: 0s;\n\t-webkit-transition-property: color;-moz-transition-property: color;-o-transition-property: color;transition-property: color;}\n#TypeSpecifier {z-index:4544; transform: translate(-50%, -50%); position:absolute; left:122.173px; top:212.156px;font-size:4.57185em;} #TypeSpecifier a, #TypeSpecifier a:link, #TypeSpecifier a:active, #TypeSpecifier a:visited {color:#CA3300;}  #TypeSpecifier a:hover {opacity:.7;}\n#Threaded {z-index:4693; transform: translate(-50%, -50%); position:absolute; left:230.492px; top:66.7975px;font-size:4.44708em;} #Threaded a, #Threaded a:link, #Threaded a:active, #Threaded a:visited {color:#63B300;}  #Threaded a:hover {opacity:.7;}\n#MapApply {z-index:4867; transform: translate(-50%, -50%); position:absolute; left:418.58px; top:184.428px;font-size:4.30128em;} #MapApply a, #MapApply a:link, #MapApply a:active, #MapApply a:visited {color:#5787CE;}  #MapApply a:hover {opacity:.7;}\n#FeatureImpactPlot {z-index:5157; transform: translate(-50%, -50%); position:absolute; left:420.26px; top:120.572px;font-size:4.0586em;} #FeatureImpactPlot a, #FeatureImpactPlot a:link, #FeatureImpactPlot a:active, #FeatureImpactPlot a:visited {color:#5787CE;}  #FeatureImpactPlot a:hover {opacity:.7;}\n#emoji {z-index:5276; transform: translate(-50%, -50%); position:absolute; left: 745.292px; top:107.128px;font-size:3.95844em;} #emoji a, #emoji a:link, #emoji a:active, #emoji a:visited {color:#20A1A3;}  #emoji a:hover {opacity:.7;}\n#IntegrateChangeVariables {z-index:5678; transform: translate(-50%, -50%); position:absolute; left:419.0px; top:152.5px;font-size:3.62164em;} #IntegrateChangeVariables a, #IntegrateChangeVariables a:link, #IntegrateChangeVariables a:active, #IntegrateChangeVariables a:visited {color:#63B300;}  #IntegrateChangeVariables a:hover {opacity:.7;}\n#ReconstructionMesh {z-index:5731; transform: translate(-50%, -50%); position:absolute; left:444.61px; top:218.037px;font-size:3.57748em;} #ReconstructionMesh a, #ReconstructionMesh a:link, #ReconstructionMesh a:active, #ReconstructionMesh a:visited {color:#CA3300;}  #ReconstructionMesh a:hover {opacity:.7;}\n#VideoCapture {z-index:5750; transform: translate(-50%, -50%); position:absolute; left:421.939px; top:67.6377px;font-size:3.5611em;} #VideoCapture a, #VideoCapture a:link, #VideoCapture a:active, #VideoCapture a:visited {color:#A16BBA;}  #VideoCapture a:hover {opacity:.7;}\n#RootTree {z-index:5779; transform: translate(-50%, -50%); position:absolute; left:150.722px; top:154.18px;font-size:3.53683em;} #RootTree a, #RootTree a:link, #RootTree a:active, #RootTree a:visited {color:#FF9B00;}  #RootTree a:hover {opacity:.7;}\n#ImplicitD {z-index:5833; transform: translate(-50%, -50%); position:absolute; left:227.133px; top:209.635px;font-size:3.49228em;} #ImplicitD a, #ImplicitD a:link, #ImplicitD a:active, #ImplicitD a:visited {color:#A16BBA;}  #ImplicitD a:hover {opacity:.7;}\n#ExprStruct {z-index:5908; transform: translate(-50%, -50%); position:absolute; left:598.272px; top:180.227px;font-size:3.42912em;} #ExprStruct a, #ExprStruct a:link, #ExprStruct a:active, #ExprStruct a:visited {color:#5787CE;}  #ExprStruct a:hover {opacity:.7;}\n#ChemicalConvert {z-index:6020; transform: translate(-50%, -50%); position:absolute; left:586.516px; top:45.792px;font-size:3.33483em;} #ChemicalConvert a, #ChemicalConvert a:link, #ChemicalConvert a:active, #ChemicalConvert a:visited {color:#A16BBA;}  #ChemicalConvert a:hover {opacity:.7;}\n#UniqueElements {z-index:6430; transform: translate(-50%, -50%); position:absolute; left:226.294px; top:181.908px;font-size:2.99164em;} #UniqueElements a, #UniqueElements a:link, #UniqueElements a:active, #UniqueElements a:visited {color:#A16BBA;}  #UniqueElements a:hover {opacity:.7;}\n#ReplaceAt {z-index:6607; transform: translate(-50%, -50%); position:absolute; left:201.103px; top:128.134px;font-size:2.84295em;} #ReplaceAt a, #ReplaceAt a:link, #ReplaceAt a:active, #ReplaceAt a:visited {color:#FF9B00;}  #ReplaceAt a:hover {opacity:.7;}\n#TypeEvaluate {z-index:6798; transform: translate(-50%, -50%); position:absolute; left:646.973px; top:102.087px;font-size:2.68335em;} #TypeEvaluate a, #TypeEvaluate a:link, #TypeEvaluate a:active, #TypeEvaluate a:visited {color:#CA3300;}  #TypeEvaluate a:hover {opacity:.7;}\n#TreeLeafCount {z-index:6878; transform: translate(-50%, -50%); position:absolute; left:674.682px; top:205.434px;font-size:2.61635em;} #TreeLeafCount a, #TreeLeafCount a:link, #TreeLeafCount a:active, #TreeLeafCount a:visited {color:#FF6D22;}  #TreeLeafCount a:hover {opacity:.7;}\n#QuestionSelector {z-index:6881; transform: translate(-50%, -50%); position:absolute; left:620.103px; top:244.084px;font-size:2.61394em;} #QuestionSelector a, #QuestionSelector a:link, #QuestionSelector a:active, #QuestionSelector a:visited {color:#5787CE;}  #QuestionSelector a:hover {opacity:.7;}\n#IncludeSingularSolutions {z-index:6894; transform: translate(-50%, -50%); position:absolute; left:421.939px; top:93.6846px;font-size:2.60253em;} #IncludeSingularSolutions a, #IncludeSingularSolutions a:link, #IncludeSingularSolutions a:active, #IncludeSingularSolutions a:visited {color:#FF9B00;}  #IncludeSingularSolutions a:hover {opacity:.7;}\n#KernelConfiguration {z-index:6921; transform: translate(-50%, -50%); position:absolute; left:415.221px; top:244.084px;font-size:2.58025em;} #KernelConfiguration a, #KernelConfiguration a:link, #KernelConfiguration a:active, #KernelConfiguration a:visited {color:#5787CE;}  #KernelConfiguration a:hover {opacity:.7;}\n#PhongShading {z-index:6940; transform: translate(-50%, -50%); position:absolute; left:225.454px; top:238.202px;font-size:2.5643em;} #PhongShading a, #PhongShading a:link, #PhongShading a:active, #PhongShading a:visited {color:#A16BBA;}  #PhongShading a:hover {opacity:.7;}\n#PatternReaction {z-index:6995; transform: translate(-50%, -50%); position:absolute; left:683.079px; top:23.9463px;font-size:2.51787em;} #PatternReaction a, #PatternReaction a:link, #PatternReaction a:active, #PatternReaction a:visited {color:#63B300;}  #PatternReaction a:hover {opacity:.7;}\n#FractionalD {z-index:7042; transform: translate(-50%, -50%); position:absolute; left:702.392px; top:283.574px;font-size:2.47845em;} #FractionalD a, #FractionalD a:link, #FractionalD a:active, #FractionalD a:visited {color:#20A1A3;}  #FractionalD a:hover {opacity:.7;}\n#OrdinalScale {z-index:7084; transform: translate(-50%, -50%); position:absolute; left:289.27px; top:284.415px;font-size:2.44399em;} #OrdinalScale a, #OrdinalScale a:link, #OrdinalScale a:active, #OrdinalScale a:visited {color:#CA3300;}  #OrdinalScale a:hover {opacity:.7;}\n#DropShadowing {z-index:7084; transform: translate(-50%, -50%); position:absolute; left:605.829px; top:76.8802px;font-size:2.44384em;} #DropShadowing a, #DropShadowing a:link, #DropShadowing a:active, #DropShadowing a:visited {color:#FF9B00;}  #DropShadowing a:hover {opacity:.7;}\n#UnlabeledTree {z-index:7092; transform: translate(-50%, -50%); position:absolute; left:405.985px; top:21.4256px;font-size:2.43658em;} #UnlabeledTree a, #UnlabeledTree a:link, #UnlabeledTree a:active, #UnlabeledTree a:visited {color:#FF6D22;}  #UnlabeledTree a:hover {opacity:.7;}\n#FeatureValueDependencyPlot {z-index:7688; transform: translate(-50%, -50%); position:absolute; left:343.849px; top:40.7507px;font-size:1.93776em;} #FeatureValueDependencyPlot a, #FeatureValueDependencyPlot a:link, #FeatureValueDependencyPlot a:active, #FeatureValueDependencyPlot a:visited {color:#5787CE;}  #FeatureValueDependencyPlot a:hover {opacity:.7;}\n#CaputoD {z-index:7689; transform: translate(-50%, -50%); position:absolute; left:111.258px; top:247.445px;font-size:1.93633em;} #CaputoD a, #CaputoD a:link, #CaputoD a:active, #CaputoD a:visited {color:#20A1A3;}  #CaputoD a:hover {opacity:.7;}\n#BlockDiagonalMatrix {z-index:7709; transform: translate(-50%, -50%); position:absolute; left:220.416px; top:264.249px;font-size:1.91974em;} #BlockDiagonalMatrix a, #BlockDiagonalMatrix a:link, #BlockDiagonalMatrix a:active, #BlockDiagonalMatrix a:visited {color:#FF6D22;}  #BlockDiagonalMatrix a:hover {opacity:.7;}\n#ModelPredictiveController {z-index:7718; transform: translate(-50%, -50%); position:absolute; left:201.103px; top:24.7865px;font-size:1.91257em;} #ModelPredictiveController a, #ModelPredictiveController a:link, #ModelPredictiveController a:active, #ModelPredictiveController a:visited {color:#20A1A3;}  #ModelPredictiveController a:hover {opacity:.7;}\n#GeodesicPolyhedron {z-index:7720; transform: translate(-50%, -50%); position:absolute; left:664.606px; top:131.494px;font-size:1.91031em;} #GeodesicPolyhedron a, #GeodesicPolyhedron a:link, #GeodesicPolyhedron a:active, #GeodesicPolyhedron a:visited {color:#FF6D22;}  #GeodesicPolyhedron a:hover {opacity:.7;}\n#InertEvaluate {z-index:7721; transform: translate(-50%, -50%); position:absolute; left:93.6242px; top:81.9215px;font-size:1.90965em;} #InertEvaluate a, #InertEvaluate a:link, #InertEvaluate a:active, #InertEvaluate a:visited {color:#FF9B00;}  #InertEvaluate a:hover {opacity:.7;}\n#Until {z-index:7729; transform: translate(-50%, -50%); position:absolute; left:52.48px; top:186.109px;font-size:1.90305em;} #Until a, #Until a:link, #Until a:active, #Until a:visited {color:#63B300;}  #Until a:hover {opacity:.7;}\n#TernaryListPlot {z-index:7759; transform: translate(-50%, -50%); position:absolute; left:419.42px; top:282.734px;font-size:1.8778em;} #TernaryListPlot a, #TernaryListPlot a:link, #TernaryListPlot a:active, #TernaryListPlot a:visited {color:#63B300;}  #TernaryListPlot a:hover {opacity:.7;}\n#FromRawPointer {z-index:7760; transform: translate(-50%, -50%); position:absolute; left:755.292px; top:171.825px;font-size:1.87732em;} #FromRawPointer a, #FromRawPointer a:link, #FromRawPointer a:active, #FromRawPointer a:visited {color:#A16BBA;}  #FromRawPointer a:hover {opacity:.7;}\n#VideoScreenCapture {z-index:7777; transform: translate(-50%, -50%); position:absolute; left:696.514px; top:151.66px;font-size:1.86287em;} #VideoScreenCapture a, #VideoScreenCapture a:link, #VideoScreenCapture a:active, #VideoScreenCapture a:visited {color:#20A1A3;}  #VideoScreenCapture a:hover {opacity:.7;}\n#PermutationMatrix {z-index:7785; transform: translate(-50%, -50%); position:absolute; left:554.608px; top:296.178px;font-size:1.85587em;} #PermutationMatrix a, #PermutationMatrix a:link, #PermutationMatrix a:active, #PermutationMatrix a:visited {color:#FF6D22;}  #PermutationMatrix a:hover {opacity:.7;}\n#FeatureValueImpactPlot {z-index:7798; transform: translate(-50%, -50%); position:absolute; left:190.187px; top:97.8857px;font-size:1.84538em;} #FeatureValueImpactPlot a, #FeatureValueImpactPlot a:link, #FeatureValueImpactPlot a:active, #FeatureValueImpactPlot a:visited {color:#A16BBA;}  #FeatureValueImpactPlot a:hover {opacity:.7;}\n#ApplyReaction {z-index:7799; transform: translate(-50%, -50%); position:absolute; left:166.676px; top:282.734px;font-size:1.84483em;} #ApplyReaction a, #ApplyReaction a:link, #ApplyReaction a:active, #ApplyReaction a:visited {color:#5787CE;}  #ApplyReaction a:hover {opacity:.7;}\n#GraphJoin {z-index:7825; transform: translate(-50%, -50%); position:absolute; left:101.181px; top:129.814px;font-size:1.82287em;} #GraphJoin a, #GraphJoin a:link, #GraphJoin a:active, #GraphJoin a:visited {color:#FF6D22;}  #GraphJoin a:hover {opacity:.7;}\n#TorusGraph {z-index:7839; transform: translate(-50%, -50%); position:absolute; left:731.781px; top:74.3595px;font-size:1.81061em;} #TorusGraph a, #TorusGraph a:link, #TorusGraph a:active, #TorusGraph a:visited {color:#20A1A3;}  #TorusGraph a:hover {opacity:.7;}\n#DSolveChangeVariables {z-index:7877; transform: translate(-50%, -50%); position:absolute; left:631.859px; top:264.249px;font-size:1.77931em;} #DSolveChangeVariables a, #DSolveChangeVariables a:link, #DSolveChangeVariables a:active, #DSolveChangeVariables a:visited {color:#63B300;}  #DSolveChangeVariables a:hover {opacity:.7;}\n#CumulativeFeatureImpactPlot {z-index:7878; transform: translate(-50%, -50%); position:absolute; left:418.58px; top:265.93px;font-size:1.77839em;} #CumulativeFeatureImpactPlot a, #CumulativeFeatureImpactPlot a:link, #CumulativeFeatureImpactPlot a:active, #CumulativeFeatureImpactPlot a:visited {color:#FF6D22;}  #CumulativeFeatureImpactPlot a:hover {opacity:.7;}\n#TreeElementShape {z-index:7879; transform: translate(-50%, -50%); position:absolute; left:725.903px; top:225.599px;font-size:1.77723em;} #TreeElementShape a, #TreeElementShape a:link, #TreeElementShape a:active, #TreeElementShape a:visited {color:#20A1A3;}  #TreeElementShape a:hover {opacity:.7;}\n#LibraryFunctionDeclaration {z-index:8391; transform: translate(-50%, -50%); position:absolute; left:558.807px; top:281.054px;font-size:1.34854em;} #LibraryFunctionDeclaration a, #LibraryFunctionDeclaration a:link, #LibraryFunctionDeclaration a:active, #LibraryFunctionDeclaration a:visited {color:#CA3300;}  #LibraryFunctionDeclaration a:hover {opacity:.7;}\n#SymmetricDifference {z-index:8404; transform: translate(-50%, -50%); position:absolute; left:535.296px; top:9.66253px;font-size:1.33786em;} #SymmetricDifference a, #SymmetricDifference a:link, #SymmetricDifference a:active, #SymmetricDifference a:visited {color:#20A1A3;}  #SymmetricDifference a:hover {opacity:.7;}\n#FlatShading {z-index:8406; transform: translate(-50%, -50%); position:absolute; left:60.8768px; top:100.406px;font-size:1.33567em;} #FlatShading a, #FlatShading a:link, #FlatShading a:active, #FlatShading a:visited {color:#CA3300;}  #FlatShading a:hover {opacity:.7;}\n#CircularArcThrough {z-index:8420; transform: translate(-50%, -50%); position:absolute; left:275.835px; top:9.66253px;font-size:1.32384em;} #CircularArcThrough a, #CircularArcThrough a:link, #CircularArcThrough a:active, #CircularArcThrough a:visited {color:#CA3300;}  #CircularArcThrough a:hover {opacity:.7;}\n#GouraudShading {z-index:8420; transform: translate(-50%, -50%); position:absolute; left:533.616px; top:25.6267px;font-size:1.32379em;} #GouraudShading a, #GouraudShading a:link, #GouraudShading a:active, #GouraudShading a:visited {color:#CA3300;}  #GouraudShading a:hover {opacity:.7;}\n#DiscreteInputOutputModel {z-index:8428; transform: translate(-50%, -50%); position:absolute; left:141.486px; top:42.4311px;font-size:1.31774em;} #DiscreteInputOutputModel a, #DiscreteInputOutputModel a:link, #DiscreteInputOutputModel a:active, #DiscreteInputOutputModel a:visited {color:#A16BBA;}  #DiscreteInputOutputModel a:hover {opacity:.7;}\n#EstimatedPointNormals {z-index:8431; transform: translate(-50%, -50%); position:absolute; left:662.087px; top:7.14187px;font-size:1.31506em;} #EstimatedPointNormals a, #EstimatedPointNormals a:link, #EstimatedPointNormals a:active, #EstimatedPointNormals a:visited {color:#FF6D22;}  #EstimatedPointNormals a:hover {opacity:.7;}\n#GraphProduct {z-index:8442; transform: translate(-50%, -50%); position:absolute; left:96.983px; top:265.93px;font-size:1.30588em;} #GraphProduct a, #GraphProduct a:link, #GraphProduct a:active, #GraphProduct a:visited {color:#63B300;}  #GraphProduct a:hover {opacity:.7;}\n#NominalScale {z-index:8448; transform: translate(-50%, -50%); position:absolute; left:44.9228px; top:152.5px;font-size:1.30051em;} #NominalScale a, #NominalScale a:link, #NominalScale a:active, #NominalScale a:visited {color:#20A1A3;}  #NominalScale a:hover {opacity:.7;}\n#QuestionGenerator {z-index:8498; transform: translate(-50%, -50%); position:absolute; left:91.9449px; top:115.53px;font-size:1.25895em;} #QuestionGenerator a, #QuestionGenerator a:link, #QuestionGenerator a:active, #QuestionGenerator a:visited {color:#20A1A3;}  #QuestionGenerator a:hover {opacity:.7;}\n#GraphSum {z-index:8499; transform: translate(-50%, -50%); position:absolute; left:785.52px; top:197.872px;font-size:1.25817em;} #GraphSum a, #GraphSum a:link, #GraphSum a:active, #GraphSum a:visited {color:#FF6D22;}  #GraphSum a:hover {opacity:.7;}\n#BuckyballGraph {z-index:8505; transform: translate(-50%, -50%); position:absolute; left:750.254px; top:59.2355px;font-size:1.25321em;} #BuckyballGraph a, #BuckyballGraph a:link, #BuckyballGraph a:active, #BuckyballGraph a:visited {color:#63B300;}  #BuckyballGraph a:hover {opacity:.7;}\n#ChemicalInstance {z-index:8508; transform: translate(-50%, -50%); position:absolute; left:754.452px; top:46.6322px;font-size:1.25065em;} #ChemicalInstance a, #ChemicalInstance a:link, #ChemicalInstance a:active, #ChemicalInstance a:visited {color:#20A1A3;}  #ChemicalInstance a:hover {opacity:.7;}\n#InertExpression {z-index:8896; transform: translate(-50%, -50%); position:absolute; left:198.584px; top:297.858px;font-size:0.925079em;} #InertExpression a, #InertExpression a:link, #InertExpression a:active, #InertExpression a:visited {color:#FF9B00;}  #InertExpression a:hover {opacity:.7;}\n#UpperTriangularMatrix {z-index:8896; transform: translate(-50%, -50%); position:absolute; left:75.1513px; top:296.178px;font-size:0.924902em;} #UpperTriangularMatrix a, #UpperTriangularMatrix a:link, #UpperTriangularMatrix a:active, #UpperTriangularMatrix a:visited {color:#A16BBA;}  #UpperTriangularMatrix a:hover {opacity:.7;}\n#CreateTypeInstance {z-index:8900; transform: translate(-50%, -50%); position:absolute; left:57.518px; top:223.079px;font-size:0.922035em;} #CreateTypeInstance a, #CreateTypeInstance a:link, #CreateTypeInstance a:active, #CreateTypeInstance a:visited {color:#63B300;}  #CreateTypeInstance a:hover {opacity:.7;}\n#PlaybackSettings {z-index:8900; transform: translate(-50%, -50%); position:absolute; left:60.8768px; top:30.668px;font-size:0.921759em;} #PlaybackSettings a, #PlaybackSettings a:link, #PlaybackSettings a:active, #PlaybackSettings a:visited {color:#CA3300;}  #PlaybackSettings a:hover {opacity:.7;}\n#DeleteElements {z-index:8904; transform: translate(-50%, -50%); position:absolute; left:47.4419px; top:200.393px;font-size:0.918223em;} #DeleteElements a, #DeleteElements a:link, #DeleteElements a:active, #DeleteElements a:visited {color:#A16BBA;}  #DeleteElements a:hover {opacity:.7;}\n#BlockUpperTriangularMatrix {z-index:8906; transform: translate(-50%, -50%); position:absolute; left:731.781px; top:185.269px;font-size:0.916855em;} #BlockUpperTriangularMatrix a, #BlockUpperTriangularMatrix a:link, #BlockUpperTriangularMatrix a:active, #BlockUpperTriangularMatrix a:visited {color:#20A1A3;}  #BlockUpperTriangularMatrix a:hover {opacity:.7;}\n#CompilerCallback {z-index:8907; transform: translate(-50%, -50%); position:absolute; left:792.237px; top:210.475px;font-size:0.916305em;} #CompilerCallback a, #CompilerCallback a:link, #CompilerCallback a:active, #CompilerCallback a:visited {color:#63B300;}  #CompilerCallback a:hover {opacity:.7;}\n#BlockLowerTriangularMatrix {z-index:8911; transform: translate(-50%, -50%); position:absolute; left:92.7846px; top:66.7975px;font-size:0.912703em;} #BlockLowerTriangularMatrix a, #BlockLowerTriangularMatrix a:link, #BlockLowerTriangularMatrix a:active, #BlockLowerTriangularMatrix a:visited {color:#63B300;}  #BlockLowerTriangularMatrix a:hover {opacity:.7;}\n#ToRawPointer {z-index:8911; transform: translate(-50%, -50%); position:absolute; left:625.981px; top:226.439px;font-size:0.912639em;} #ToRawPointer a, #ToRawPointer a:link, #ToRawPointer a:active, #ToRawPointer a:visited {color:#FF9B00;}  #ToRawPointer a:hover {opacity:.7;}\n#LocalEvaluate {z-index:8915; transform: translate(-50%, -50%); position:absolute; left:786.36px; top:260.888px;font-size:0.908829em;} #LocalEvaluate a, #LocalEvaluate a:link, #LocalEvaluate a:active, #LocalEvaluate a:visited {color:#CA3300;}  #LocalEvaluate a:hover {opacity:.7;}\n#LowerTriangularMatrix {z-index:8916; transform: translate(-50%, -50%); position:absolute; left:52.48px; top:212.156px;font-size:0.908575em;} #LowerTriangularMatrix a, #LowerTriangularMatrix a:link, #LowerTriangularMatrix a:active, #LowerTriangularMatrix a:visited {color:#FF9B00;}  #LowerTriangularMatrix a:hover {opacity:.7;}\n#UnmanageObject {z-index:8916; transform: translate(-50%, -50%); position:absolute; left:763.688px; top:7.98209px;font-size:0.908059em;} #UnmanageObject a, #UnmanageObject a:link, #UnmanageObject a:active, #UnmanageObject a:visited {color:#20A1A3;}  #UnmanageObject a:hover {opacity:.7;}\n#TypeOf {z-index:8922; transform: translate(-50%, -50%); position:absolute; left:224.614px; top:115.53px;font-size:0.903746em;} #TypeOf a, #TypeOf a:link, #TypeOf a:active, #TypeOf a:visited {color:#FF9B00;}  #TypeOf a:hover {opacity:.7;}\n#DeleteAdjacentDuplicates {z-index:8923; transform: translate(-50%, -50%); position:absolute; left:81.8687px; top:56.7149px;font-size:0.902848em;} #DeleteAdjacentDuplicates a, #DeleteAdjacentDuplicates a:link, #DeleteAdjacentDuplicates a:active, #DeleteAdjacentDuplicates a:visited {color:#20A1A3;}  #DeleteAdjacentDuplicates a:hover {opacity:.7;}\n#InfiniteLineThrough {z-index:8929; transform: translate(-50%, -50%); position:absolute; left:70.9529px; top:280.213px;font-size:0.897348em;} #InfiniteLineThrough a, #InfiniteLineThrough a:link, #InfiniteLineThrough a:active, #InfiniteLineThrough a:visited {color:#A16BBA;}  #InfiniteLineThrough a:hover {opacity:.7;}\n#_DefaultLocalKernels {z-index:8933; transform: translate(-50%, -50%); position:absolute; left:42.4038px; top:165.103px;font-size:0.894456em;} #_DefaultLocalKernels a, #_DefaultLocalKernels a:link, #_DefaultLocalKernels a:active, #_DefaultLocalKernels a:visited {color:#FF6D22;}  #_DefaultLocalKernels a:hover {opacity:.7;}\n#TernaryPlotCorners {z-index:8935; transform: translate(-50%, -50%); position:absolute; left:785.52px; top:139.897px;font-size:0.892344em;} #TernaryPlotCorners a, #TernaryPlotCorners a:link, #TernaryPlotCorners a:active, #TernaryPlotCorners a:visited {color:#FF6D22;}  #TernaryPlotCorners a:hover {opacity:.7;}\n#ForAllType {z-index:8936; transform: translate(-50%, -50%); position:absolute; left:636.897px; top:165.103px;font-size:0.891492em;} #ForAllType a, #ForAllType a:link, #ForAllType a:active, #ForAllType a:visited {color:#CA3300;}  #ForAllType a:hover {opacity:.7;}\n#SameAs {z-index:8942; transform: translate(-50%, -50%); position:absolute; left:462.243px; top:297.018px;font-size:0.887013em;} #SameAs a, #SameAs a:link, #SameAs a:active, #SameAs a:visited {color:#5787CE;}  #SameAs a:hover {opacity:.7;}\n#ResidueSum {z-index:8944; transform: translate(-50%, -50%); position:absolute; left:528.578px; top:198.712px;font-size:0.885298em;} #ResidueSum a, #ResidueSum a:link, #ResidueSum a:active, #ResidueSum a:visited {color:#A16BBA;}  #ResidueSum a:hover {opacity:.7;}\n#CompiledExpressionDeclaration {z-index:8945; transform: translate(-50%, -50%); position:absolute; left:160.799px; top:9.66253px;font-size:0.884247em;} #CompiledExpressionDeclaration a, #CompiledExpressionDeclaration a:link, #CompiledExpressionDeclaration a:active, #CompiledExpressionDeclaration a:visited {color:#5787CE;}  #CompiledExpressionDeclaration a:hover {opacity:.7;}\n#Cast {z-index:8948; transform: translate(-50%, -50%); position:absolute; left:437.893px; top:55.8747px;font-size:0.881728em;} #Cast a, #Cast a:link, #Cast a:active, #Cast a:visited {color:#5787CE;}  #Cast a:hover {opacity:.7;}\n#ParentEdgeStyle {z-index:9199; transform: translate(-50%, -50%); position:absolute; left:49.9609px; top:242.404px;font-size:0.671224em;} #ParentEdgeStyle a, #ParentEdgeStyle a:link, #ParentEdgeStyle a:active, #ParentEdgeStyle a:visited {color:#A16BBA;}  #ParentEdgeStyle a:hover {opacity:.7;}\n#TreeElementLabelFunction {z-index:9201; transform: translate(-50%, -50%); position:absolute; left:65.9148px; top:234.001px;font-size:0.669824em;} #TreeElementLabelFunction a, #TreeElementLabelFunction a:link, #TreeElementLabelFunction a:active, #TreeElementLabelFunction a:visited {color:#5787CE;}  #TreeElementLabelFunction a:hover {opacity:.7;}\n#TreeElementSizeFunction {z-index:9201; transform: translate(-50%, -50%); position:absolute; left:62.5561px; top:4.62121px;font-size:0.669336em;} #TreeElementSizeFunction a, #TreeElementSizeFunction a:link, #TreeElementSizeFunction a:active, #TreeElementSizeFunction a:visited {color:#A16BBA;}  #TreeElementSizeFunction a:hover {opacity:.7;}\n#ParentEdgeLabelStyle {z-index:9202; transform: translate(-50%, -50%); position:absolute; left:790.558px; top:241.563px;font-size:0.668604em;} #ParentEdgeLabelStyle a, #ParentEdgeLabelStyle a:link, #ParentEdgeLabelStyle a:active, #ParentEdgeLabelStyle a:visited {color:#FF6D22;}  #ParentEdgeLabelStyle a:hover {opacity:.7;}\n#ParentEdgeLabel {z-index:9203; transform: translate(-50%, -50%); position:absolute; left:798.115px; top:131.494px;font-size:0.667773em;} #ParentEdgeLabel a, #ParentEdgeLabel a:link, #ParentEdgeLabel a:active, #ParentEdgeLabel a:visited {color:#A16BBA;}  #ParentEdgeLabel a:hover {opacity:.7;}\n#TreeElementSize {z-index:9204; transform: translate(-50%, -50%); position:absolute; left:345.528px; top:205.434px;font-size:0.666747em;} #TreeElementSize a, #TreeElementSize a:link, #TreeElementSize a:active, #TreeElementSize a:visited {color:#FF9B00;}  #TreeElementSize a:hover {opacity:.7;}\n#TreeElementLabelStyle {z-index:9205; transform: translate(-50%, -50%); position:absolute; left:65.9148px; top:13.0234px;font-size:0.665843em;} #TreeElementLabelStyle a, #TreeElementLabelStyle a:link, #TreeElementLabelStyle a:active, #TreeElementLabelStyle a:visited {color:#FF9B00;}  #TreeElementLabelStyle a:hover {opacity:.7;}\n#TreeElementCoordinates {z-index:9206; transform: translate(-50%, -50%); position:absolute; left:793.917px; top:250.806px;font-size:0.665186em;} #TreeElementCoordinates a, #TreeElementCoordinates a:link, #TreeElementCoordinates a:active, #TreeElementCoordinates a:visited {color:#A16BBA;}  #TreeElementCoordinates a:hover {opacity:.7;}\n#VideoTransparency {z-index:9206; transform: translate(-50%, -50%); position:absolute; left:264.919px; top:299.539px;font-size:0.665147em;} #VideoTransparency a, #VideoTransparency a:link, #VideoTransparency a:active, #VideoTransparency a:visited {color:#A16BBA;}  #VideoTransparency a:hover {opacity:.7;}\n#TreeElementShapeFunction {z-index:9207; transform: translate(-50%, -50%); position:absolute; left:418.58px; top:6.30165px;font-size:0.664693em;} #TreeElementShapeFunction a, #TreeElementShapeFunction a:link, #TreeElementShapeFunction a:active, #TreeElementShapeFunction a:visited {color:#CA3300;}  #TreeElementShapeFunction a:hover {opacity:.7;}\n#ParentEdgeShapeFunction {z-index:9208; transform: translate(-50%, -50%); position:absolute; left:407.664px; top:298.698px;font-size:0.663335em;} #ParentEdgeShapeFunction a, #ParentEdgeShapeFunction a:link, #ParentEdgeShapeFunction a:active, #ParentEdgeShapeFunction a:visited {color:#FF6D22;}  #ParentEdgeShapeFunction a:hover {opacity:.7;}\n#ParentEdgeLabelFunction {z-index:9209; transform: translate(-50%, -50%); position:absolute; left:667.125px; top:298.698px;font-size:0.662664em;} #ParentEdgeLabelFunction a, #ParentEdgeLabelFunction a:link, #ParentEdgeLabelFunction a:active, #ParentEdgeLabelFunction a:visited {color:#FF6D22;}  #ParentEdgeLabelFunction a:hover {opacity:.7;}\n#TreeElementStyleFunction {z-index:9211; transform: translate(-50%, -50%); position:absolute; left:331.254px; top:299.539px;font-size:0.661262em;} #TreeElementStyleFunction a, #TreeElementStyleFunction a:link, #TreeElementStyleFunction a:active, #TreeElementStyleFunction a:visited {color:#FF6D22;}  #TreeElementStyleFunction a:hover {opacity:.7;}\n#ParentEdgeStyleFunction {z-index:9211; transform: translate(-50%, -50%); position:absolute; left:741.017px; top:298.698px;font-size:0.661247em;} #ParentEdgeStyleFunction a, #ParentEdgeStyleFunction a:link, #ParentEdgeStyleFunction a:active, #ParentEdgeStyleFunction a:visited {color:#FF9B00;}  #ParentEdgeStyleFunction a:hover {opacity:.7;}\ndiv#cloudpublish {\n    width: 5.3%;\n    z-index: 7084;\n    transform: translate(-50%, -50%);\n    position: absolute;\n    left: 93.82899999999995px;\n    top: 186.8802px;\n    font-size: 2.44384em;\n}\ndiv#evaluate {\n    width: 4.4%;\n    z-index: 7084;\n    transform: translate(-50%, -50%);\n    position: absolute;\n    left: 738.829px;\n    top: 252.8802px;\n    font-size: 2.44384em;\n}\n</style>\n<div id=\"wordcloud-13-1\" class=\"initial_hidden fade_this_in\" style=\"font-family:'Source Sans Pro';font-size: 10px;position:relative; margin:auto; text-align:center; width:838px; height: 305px;\">\n<div class=\"initial_hidden fade_this_in\" id=\"TypeSpecifier\"><a href=\"https://reference.wolfram.com/language/ref/TypeSpecifier.html\">::[ ]</a></div>\n<div class=\"initial_hidden fade_this_in\" id=\"Threaded\"><a href=\"https://reference.wolfram.com/language/ref/Threaded.html\">Threaded</a></div>\n<div class=\"initial_hidden fade_this_in\" id=\"MapApply\"><a href=\"https://reference.wolfram.com/language/ref/MapApply.html\">MapApply</a></div>\n<div class=\"initial_hidden fade_this_in\" id=\"FeatureImpactPlot\"><a href=\"https://reference.wolfram.com/language/ref/FeatureImpactPlot.html\">FeatureImpactPlot</a></div>\n<div class=\"initial_hidden fade_this_in\" id=\"IntegrateChangeVariables\"><a href=\"https://reference.wolfram.com/language/ref/IntegrateChangeVariables.html\">IntegrateChangeVariables</a></div>\n<div class=\"initial_hidden fade_this_in\" id=\"ReconstructionMesh\"><a href=\"https://reference.wolfram.com/language/ref/ReconstructionMesh.html\">ReconstructionMesh</a></div>\n<div class=\"initial_hidden fade_this_in\" id=\"VideoCapture\"><a href=\"https://reference.wolfram.com/language/ref/VideoCapture.html\">VideoCapture</a></div>\n<div class=\"initial_hidden fade_this_in\" id=\"RootTree\"><a href=\"https://reference.wolfram.com/language/ref/RootTree.html\">RootTree</a></div>\n<div class=\"initial_hidden fade_this_in\" id=\"ImplicitD\"><a href=\"https://reference.wolfram.com/language/ref/ImplicitD.html\">ImplicitD</a></div>\n<div class=\"initial_hidden fade_this_in\" id=\"ExprStruct\"><a href=\"https://reference.wolfram.com/language/ref/datastructure/ExprStruct.html\">&#8220;ExprStruct&#8221;</a></div>\n<div class=\"initial_hidden fade_this_in\" id=\"ChemicalConvert\"><a href=\"https://reference.wolfram.com/language/ref/ChemicalConvert.html\">ChemicalConvert</a></div>\n<div class=\"initial_hidden fade_this_in\" id=\"UniqueElements\"><a href=\"https://reference.wolfram.com/language/ref/UniqueElements.html\">UniqueElements</a></div>\n<div class=\"initial_hidden fade_this_in\" id=\"ReplaceAt\"><a href=\"https://reference.wolfram.com/language/ref/ReplaceAt.html\">ReplaceAt</a></div>\n<div class=\"initial_hidden fade_this_in\" id=\"TypeEvaluate\"><a href=\"https://reference.wolfram.com/language/ref/TypeEvaluate.html\">TypeEvaluate</a></div>\n<div class=\"initial_hidden fade_this_in\" id=\"TreeLeafCount\"><a href=\"https://reference.wolfram.com/language/ref/TreeLeafCount.html\">TreeLeafCount</a></div>\n<div class=\"initial_hidden fade_this_in\" id=\"QuestionSelector\"><a href=\"https://reference.wolfram.com/language/ref/QuestionSelector.html\">QuestionSelector</a></div>\n<div class=\"initial_hidden fade_this_in\" id=\"IncludeSingularSolutions\"><a href=\"https://reference.wolfram.com/language/ref/IncludeSingularSolutions.html\">IncludeSingularSolutions</a></div>\n<div class=\"initial_hidden fade_this_in\" id=\"KernelConfiguration\"><a href=\"https://reference.wolfram.com/language/ref/KernelConfiguration.html\">KernelConfiguration</a></div>\n<div class=\"initial_hidden fade_this_in\" id=\"PhongShading\"><a href=\"https://reference.wolfram.com/language/ref/PhongShading.html\">PhongShading</a></div>\n<div class=\"initial_hidden fade_this_in\" id=\"PatternReaction\"><a href=\"https://reference.wolfram.com/language/ref/PatternReaction.html\">PatternReaction</a></div>\n<div class=\"initial_hidden fade_this_in\" id=\"FractionalD\"><a href=\"https://reference.wolfram.com/language/ref/FractionalD.html\">FractionalD</a></div>\n<div class=\"initial_hidden fade_this_in\" id=\"OrdinalScale\"><a href=\"https://reference.wolfram.com/language/ref/OrdinalScale.html\">OrdinalScale</a></div>\n<div class=\"initial_hidden fade_this_in\" id=\"DropShadowing\"><a href=\"https://reference.wolfram.com/language/ref/DropShadowing.html\">DropShadowing</a></div>\n<div class=\"initial_hidden fade_this_in\" id=\"UnlabeledTree\"><a href=\"https://reference.wolfram.com/language/ref/UnlabeledTree.html\">UnlabeledTree</a></div>\n<div class=\"initial_hidden fade_this_in\" id=\"FeatureValueDependencyPlot\"><a href=\"https://reference.wolfram.com/language/ref/FeatureValueDependencyPlot.html\">FeatureValueDependencyPlot</a></div>\n<div class=\"initial_hidden fade_this_in\" id=\"CaputoD\"><a href=\"https://reference.wolfram.com/language/ref/CaputoD.html\">CaputoD</a></div>\n<div class=\"initial_hidden fade_this_in\" id=\"BlockDiagonalMatrix\"><a href=\"https://reference.wolfram.com/language/ref/BlockDiagonalMatrix.html\">BlockDiagonalMatrix</a></div>\n<div class=\"initial_hidden fade_this_in\" id=\"ModelPredictiveController\"><a href=\"https://reference.wolfram.com/language/ref/ModelPredictiveController.html\">ModelPredictiveController</a></div>\n<div class=\"initial_hidden fade_this_in\" id=\"GeodesicPolyhedron\"><a href=\"https://reference.wolfram.com/language/ref/GeodesicPolyhedron.html\">GeodesicPolyhedron</a></div>\n<div class=\"initial_hidden fade_this_in\" id=\"InertEvaluate\"><a href=\"https://reference.wolfram.com/language/ref/InertEvaluate.html\">InertEvaluate</a></div>\n<div class=\"initial_hidden fade_this_in\" id=\"Until\"><a href=\"https://reference.wolfram.com/language/ref/Until.html\">Until</a></div>\n<div class=\"initial_hidden fade_this_in\" id=\"TernaryListPlot\"><a href=\"https://reference.wolfram.com/language/ref/TernaryListPlot.html\">TernaryListPlot</a></div>\n<div class=\"initial_hidden fade_this_in\" id=\"FromRawPointer\"><a href=\"https://reference.wolfram.com/language/ref/FromRawPointer.html\">FromRawPointer</a></div>\n<div class=\"initial_hidden fade_this_in\" id=\"VideoScreenCapture\"><a href=\"https://reference.wolfram.com/language/ref/VideoScreenCapture.html\">VideoScreenCapture</a></div>\n<div class=\"initial_hidden fade_this_in\" id=\"PermutationMatrix\"><a href=\"https://reference.wolfram.com/language/ref/PermutationMatrix.html\">PermutationMatrix</a></div>\n<div class=\"initial_hidden fade_this_in\" id=\"FeatureValueImpactPlot\"><a href=\"https://reference.wolfram.com/language/ref/FeatureValueImpactPlot.html\">FeatureValueImpactPlot</a></div>\n<div class=\"initial_hidden fade_this_in\" id=\"ApplyReaction\"><a href=\"https://reference.wolfram.com/language/ref/ApplyReaction.html\">ApplyReaction</a></div>\n<div class=\"initial_hidden fade_this_in\" id=\"GraphJoin\"><a href=\"https://reference.wolfram.com/language/ref/GraphJoin.html\">GraphJoin</a></div>\n<div class=\"initial_hidden fade_this_in\" id=\"TorusGraph\"><a href=\"https://reference.wolfram.com/language/ref/TorusGraph.html\">TorusGraph</a></div>\n<div class=\"initial_hidden fade_this_in\" id=\"DSolveChangeVariables\"><a href=\"https://reference.wolfram.com/language/ref/DSolveChangeVariables.html\">DSolveChangeVariables</a></div>\n<div class=\"initial_hidden fade_this_in\" id=\"CumulativeFeatureImpactPlot\"><a href=\"https://reference.wolfram.com/language/ref/CumulativeFeatureImpactPlot.html\">CumulativeFeatureImpactPlot</a></div>\n<div class=\"initial_hidden fade_this_in\" id=\"TreeElementShape\"><a href=\"https://reference.wolfram.com/language/ref/TreeElementShape.html\">TreeElementShape</a></div>\n<div class=\"initial_hidden fade_this_in\" id=\"LibraryFunctionDeclaration\"><a href=\"https://reference.wolfram.com/language/ref/LibraryFunctionDeclaration.html\">LibraryFunctionDeclaration</a></div>\n<div class=\"initial_hidden fade_this_in\" id=\"SymmetricDifference\"><a href=\"https://reference.wolfram.com/language/ref/SymmetricDifference.html\">SymmetricDifference</a></div>\n<div class=\"initial_hidden fade_this_in\" id=\"FlatShading\"><a href=\"https://reference.wolfram.com/language/ref/FlatShading.html\">FlatShading</a></div>\n<div class=\"initial_hidden fade_this_in\" id=\"CircularArcThrough\"><a href=\"https://reference.wolfram.com/language/ref/CircularArcThrough.html\">CircularArcThrough</a></div>\n<div class=\"initial_hidden fade_this_in\" id=\"GouraudShading\"><a href=\"https://reference.wolfram.com/language/ref/GouraudShading.html\">GouraudShading</a></div>\n<div class=\"initial_hidden fade_this_in\" id=\"DiscreteInputOutputModel\"><a href=\"https://reference.wolfram.com/language/ref/DiscreteInputOutputModel.html\">DiscreteInputOutputModel</a></div>\n<div class=\"initial_hidden fade_this_in\" id=\"EstimatedPointNormals\"><a href=\"https://reference.wolfram.com/language/ref/EstimatedPointNormals.html\">EstimatedPointNormals</a></div>\n<div class=\"initial_hidden fade_this_in\" id=\"GraphProduct\"><a href=\"https://reference.wolfram.com/language/ref/GraphProduct.html\">GraphProduct</a></div>\n<div class=\"initial_hidden fade_this_in\" id=\"NominalScale\"><a href=\"https://reference.wolfram.com/language/ref/NominalScale.html\">NominalScale</a></div>\n<div class=\"initial_hidden fade_this_in\" id=\"QuestionGenerator\"><a href=\"https://reference.wolfram.com/language/ref/QuestionGenerator.html\">QuestionGenerator</a></div>\n<div class=\"initial_hidden fade_this_in\" id=\"GraphSum\"><a href=\"https://reference.wolfram.com/language/ref/GraphSum.html\">GraphSum</a></div>\n<div class=\"initial_hidden fade_this_in\" id=\"BuckyballGraph\"><a href=\"https://reference.wolfram.com/language/ref/BuckyballGraph.html\">BuckyballGraph</a></div>\n<div class=\"initial_hidden fade_this_in\" id=\"ChemicalInstance\"><a href=\"https://reference.wolfram.com/language/ref/ChemicalInstance.html\">ChemicalInstance</a></div>\n<div class=\"initial_hidden fade_this_in\" id=\"InertExpression\"><a href=\"https://reference.wolfram.com/language/ref/InertExpression.html\">InertExpression</a></div>\n<div class=\"initial_hidden fade_this_in\" id=\"UpperTriangularMatrix\"><a href=\"https://reference.wolfram.com/language/ref/UpperTriangularMatrix.html\">UpperTriangularMatrix</a></div>\n<div class=\"initial_hidden fade_this_in\" id=\"CreateTypeInstance\"><a href=\"https://reference.wolfram.com/language/ref/CreateTypeInstance.html\">CreateTypeInstance</a></div>\n<div class=\"initial_hidden fade_this_in\" id=\"PlaybackSettings\"><a href=\"https://reference.wolfram.com/language/ref/PlaybackSettings.html\">PlaybackSettings</a></div>\n<div class=\"initial_hidden fade_this_in\" id=\"DeleteElements\"><a href=\"https://reference.wolfram.com/language/ref/DeleteElements.html\">DeleteElements</a></div>\n<div class=\"initial_hidden fade_this_in\" id=\"BlockUpperTriangularMatrix\"><a href=\"https://reference.wolfram.com/language/ref/BlockUpperTriangularMatrix.html\">BlockUpperTriangularMatrix</a></div>\n<div class=\"initial_hidden fade_this_in\" id=\"CompilerCallback\"><a href=\"https://reference.wolfram.com/language/ref/CompilerCallback.html\">CompilerCallback</a></div>\n<div class=\"initial_hidden fade_this_in\" id=\"BlockLowerTriangularMatrix\"><a href=\"https://reference.wolfram.com/language/ref/BlockLowerTriangularMatrix.html\">BlockLowerTriangularMatrix</a></div>\n<div class=\"initial_hidden fade_this_in\" id=\"ToRawPointer\"><a href=\"https://reference.wolfram.com/language/ref/ToRawPointer.html\">ToRawPointer</a></div>\n<div class=\"initial_hidden fade_this_in\" id=\"LocalEvaluate\"><a href=\"https://reference.wolfram.com/language/ref/LocalEvaluate.html\">LocalEvaluate</a></div>\n<div class=\"initial_hidden fade_this_in\" id=\"LowerTriangularMatrix\"><a href=\"https://reference.wolfram.com/language/ref/LowerTriangularMatrix.html\">LowerTriangularMatrix</a></div>\n<div class=\"initial_hidden fade_this_in\" id=\"UnmanageObject\"><a href=\"https://reference.wolfram.com/language/ref/UnmanageObject.html\">UnmanageObject</a></div>\n<div class=\"initial_hidden fade_this_in\" id=\"TypeOf\"><a href=\"https://reference.wolfram.com/language/ref/TypeOf.html\">TypeOf</a></div>\n<div class=\"initial_hidden fade_this_in\" id=\"DeleteAdjacentDuplicates\"><a href=\"https://reference.wolfram.com/language/ref/DeleteAdjacentDuplicates.html\">DeleteAdjacentDuplicates</a></div>\n<div class=\"initial_hidden fade_this_in\" id=\"InfiniteLineThrough\"><a href=\"https://reference.wolfram.com/language/ref/InfiniteLineThrough.html\">InfiniteLineThrough</a></div>\n<div class=\"initial_hidden fade_this_in\" id=\"_DefaultLocalKernels\"><a href=\"#\">$DefaultLocalKernels</a></div>\n<div class=\"initial_hidden fade_this_in\" id=\"TernaryPlotCorners\"><a href=\"https://reference.wolfram.com/language/ref/TernaryPlotCorners.html\">TernaryPlotCorners</a></div>\n<div class=\"initial_hidden fade_this_in\" id=\"ForAllType\"><a href=\"https://reference.wolfram.com/language/ref/ForAllType.html\">ForAllType</a></div>\n<div class=\"initial_hidden fade_this_in\" id=\"SameAs\"><a href=\"https://reference.wolfram.com/language/ref/SameAs.html\">SameAs</a></div>\n<div class=\"initial_hidden fade_this_in\" id=\"ResidueSum\"><a href=\"https://reference.wolfram.com/language/ref/ResidueSum.html\">ResidueSum</a></div>\n<div class=\"initial_hidden fade_this_in\" id=\"CompiledExpressionDeclaration\"><a href=\"https://reference.wolfram.com/language/ref/CompiledExpressionDeclaration.html\">CompiledExpressionDeclaration</a></div>\n<div class=\"initial_hidden fade_this_in\" id=\"Cast\"><a href=\"https://reference.wolfram.com/language/ref/Cast.html\">Cast</a></div>\n<div class=\"initial_hidden fade_this_in\" id=\"ParentEdgeStyle\"><a href=\"https://reference.wolfram.com/language/ref/ParentEdgeStyle.html\">ParentEdgeStyle</a></div>\n<div class=\"initial_hidden fade_this_in\" id=\"TreeElementLabelFunction\"><a href=\"https://reference.wolfram.com/language/ref/TreeElementLabelFunction.html\">TreeElementLabelFunction</a></div>\n<div class=\"initial_hidden fade_this_in\" id=\"TreeElementSizeFunction\"><a href=\"https://reference.wolfram.com/language/ref/TreeElementSizeFunction.html\">TreeElementSizeFunction</a></div>\n<div class=\"initial_hidden fade_this_in\" id=\"ParentEdgeLabelStyle\"><a href=\"https://reference.wolfram.com/language/ref/ParentEdgeLabelStyle.html\">ParentEdgeLabelStyle</a></div>\n<div class=\"initial_hidden fade_this_in\" id=\"ParentEdgeLabel\"><a href=\"https://reference.wolfram.com/language/ref/ParentEdgeLabel.html\">ParentEdgeLabel</a></div>\n<div class=\"initial_hidden fade_this_in\" id=\"TreeElementSize\"><a href=\"https://reference.wolfram.com/language/ref/TreeElementSize.html\">TreeElementSize</a></div>\n<div class=\"initial_hidden fade_this_in\" id=\"TreeElementLabelStyle\"><a href=\"https://reference.wolfram.com/language/ref/TreeElementLabelStyle.html\">TreeElementLabelStyle</a></div>\n<div class=\"initial_hidden fade_this_in\" id=\"TreeElementCoordinates\"><a href=\"https://reference.wolfram.com/language/ref/TreeElementCoordinates.html\">TreeElementCoordinates</a></div>\n<div class=\"initial_hidden fade_this_in\" id=\"VideoTransparency\"><a href=\"https://reference.wolfram.com/language/ref/VideoTransparency.html\">VideoTransparency</a></div>\n<div class=\"initial_hidden fade_this_in\" id=\"TreeElementShapeFunction\"><a href=\"https://reference.wolfram.com/language/ref/TreeElementShapeFunction.html\">TreeElementShapeFunction</a></div>\n<div class=\"initial_hidden fade_this_in\" id=\"ParentEdgeShapeFunction\"><a href=\"https://reference.wolfram.com/language/ref/ParentEdgeShapeFunction.html\">ParentEdgeShapeFunction</a></div>\n<div class=\"initial_hidden fade_this_in\" id=\"ParentEdgeLabelFunction\"><a href=\"https://reference.wolfram.com/language/ref/ParentEdgeLabelFunction.html\">ParentEdgeLabelFunction</a></div>\n<div class=\"initial_hidden fade_this_in\" id=\"TreeElementStyleFunction\"><a href=\"https://reference.wolfram.com/language/ref/TreeElementStyleFunction.html\">TreeElementStyleFunction</a></div>\n<div class=\"initial_hidden fade_this_in\" id=\"ParentEdgeStyleFunction\"><a href=\"https://reference.wolfram.com/language/ref/ParentEdgeStyleFunction.html\">ParentEdgeStyleFunction</a></div>\n<div class=\"initial_hidden fade_this_in\" id=\"emoji\"><a href=\"#emojis-and-more-multilingual-support\">&#128576;</a></div>\n<div class=\"initial_hidden fade_this_in\" id=\"evaluate\"><a href=\"#a-toolbar-for-every-notebook\"><img src=\"https://content.wolfram.com/uploads/sites/43/2022/06/icon-toolbar-evalutate.png\" style=\"width:100%;height:auto;\"></a></div>\n<div class=\"initial_hidden fade_this_in\" id=\"cloudpublish\"><a href=\"#a-toolbar-for-every-notebook\"><img src=\"https://content.wolfram.com/uploads/sites/43/2022/06/icon-toolbar-cloudpublish.png\" style=\"width:100%;height:auto;\"></a></div>\n</div>\n<p><script type=\"text/javascript\">\n$('.initial_hidden').each(function(i){\n\tvar $fader = $(this);\n\t    setTimeout(function() {\n\t      $fader.addClass('fade_this_in');\n\t    }, i*25+150);\n\t\t});\n</script></p>\n<h2 id='the-epic-continues'>The Epic Continues&#8230;</h2>\n<p>Last week it was <a href='https://writings.stephenwolfram.com/2021/10/celebrating-a-third-of-a-century-of-mathematica-and-looking-forward/'>34 years since the original launch of Mathematica</a> and what’s now the <a href='https://www.wolfram.com/language/'>Wolfram Language</a>. And through all those years we’ve energetically continued building further and further, adding ever more capabilities, and steadily extending the domain of the computational paradigm.</p>\n<p>In recent years we’ve established something of a rhythm, delivering the fruits of our development efforts roughly twice a year. We released <a href='https://www.wolfram.com/mathematica/new-in-13/'>Version 13.0</a> on December 13, 2021. And now, roughly six months later, we’re releasing Version 13.1. As usual, even though it’s a “.1” release, it’s got a lot of new (and updated) functionality, some of which we’ve worked on for many years but finally now brought to fruition.<span id=\"more-38521\"></span></p>\n<p>For me it’s always exciting to see what we manage to deliver in each new version. And in Version 13.1 we have 90 completely new functions—as well as 203 existing functions with substantial updates. And beyond what appears in specific functions, there’s also major new functionality in Version 13.1 in areas like user interfaces and the compiler.</p>\n<p>The Wolfram Language as it exists today encompasses a vast range of functionality. But its great power comes not just from what it contains, but also from how coherently everything in it fits together. And for nearly 36 years I’ve taken it as a personal responsibility to ensure that that coherence is maintained. It’s taken both great focus and lots of deep intellectual work. But as I experience them every day in my use of the Wolfram Language, I’m proud of the results.</p>\n<p>And for the past four years I’ve been sharing the “behind the scenes” of how it’s achieved—by <a href='https://livestreams.stephenwolfram.com/category/live-ceoing/'>livestreaming our Wolfram Language design review meetings</a>. It’s an unprecedented level of openness—and engagement with the community. In designing Version 13.1 we’ve done 90 livestreams—lasting more than 96 hours. And in opening up our process we’re providing visibility not only into what was built for Version 13.1, but also of why it was built, and how decisions about it were made. </p>\n<p>But, OK, so what finally is in Version 13.1? Let’s talk about some highlights&#8230;.</p>\n<h2 id='beyond-listability:-introducing-threaded'>Beyond Listability: Introducing Threaded</h2>\n<p>From the very beginning of Mathematica and the <a href='https://www.wolfram.com/language/'>Wolfram Language</a> we’ve had the concept of listability: if you add two lists, for example, their corresponding elements will be added:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822beyondlistabilityAimg1.png\" alt='{a, b, c} + {x, y, z}' title='{a, b, c} + {x, y, z}' width='156' height='51' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822beyondlistabilityimg1A_copy.txt\">\n\t\t\t\t\t<span class='close' id='bl1_out'>&#10005</span></p>\n<pre class='text' id='bl1_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>It’s a very convenient mechanism, that typically does exactly what you’d want. And for 35 years we haven’t really considered extending it. But if we look at code that gets written, it often happens that there are parts that basically implement something very much like listability, but slightly more general. And in <a href='https://reference.wolfram.com/language/guide/SummaryOfNewFeaturesIn131.html'>Version 13.1</a> we have a new symbolic construct, <tt><a href='https://reference.wolfram.com/language/ref/Threaded.html'>Threaded</a></tt>, that effectively allows you to easily generalize listability.</p>\n<p>Consider:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822beyondlistabilityAimg2.png\" alt='{{1, 2}, {3, 4}} + {x, y}' title='{{1, 2}, {3, 4}} + {x, y}' width='208' height='51' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822beyondlistabilityimg2A_copy.txt\">\n\t\t\t\t\t<span class='close' id='bl2_out'>&#10005</span></p>\n<pre class='text' id='bl2_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>This uses ordinary listability, effectively computing:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822beyondlistabilityAimg3.png\" alt='{{1, 2} + x, {3, 4} + y}' title='{{1, 2} + x, {3, 4} + y}' width='208' height='51' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822beyondlistabilityimg3A_copy.txt\">\n\t\t\t\t\t<span class='close' id='bl3_out'>&#10005</span></p>\n<pre class='text' id='bl3_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>But what if you want instead to “go down a level” and thread <tt>{x,y}</tt> into the lowest parts of the first list? Well, now you can use <tt><a href='https://reference.wolfram.com/language/ref/Threaded.html'>Threaded</a></tt> to do that:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822beyondlistabilityAimg4.png\" alt='{{1, 2}, {3, 4}} + Threaded' title='{{1, 2}, {3, 4}} + Threaded' width='254' height='51' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822beyondlistabilityimg4_copy.txt\">\n\t\t\t\t\t<span class='close' id='bl4_out'>&#10005</span></p>\n<pre class='text' id='bl4_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>On its own, <tt><a href='https://reference.wolfram.com/language/ref/Threaded.html'>Threaded</a></tt> is just a symbolic wrapper:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822beyondlistabilityAimg5.png\" alt='Threaded' title='Threaded' width='151' height='51' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822beyondlistabilityimg5_copy.txt\">\n\t\t\t\t\t<span class='close' id='bl5_out'>&#10005</span></p>\n<pre class='text' id='bl5_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>But as soon as it appears in a function—like <tt><a href='https://reference.wolfram.com/language/ref/Plus.html'>Plus</a></tt>—that has attribute <tt><a href='https://reference.wolfram.com/language/ref/Listable.html'>Listable</a></tt>, it specifies that the listability should be applied after what’s specified inside <tt><a href='https://reference.wolfram.com/language/ref/Threaded.html'>Threaded</a></tt> is “threaded” at the lowest level.</p>\n<p>Here’s another example. Create a list:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822beyondlistabilityAimg6.png\" alt='Table' title='Table' width='487' height='51' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822beyondlistabilityimg6_copy.txt\">\n\t\t\t\t\t<span class='close' id='bl6_out'>&#10005</span></p>\n<pre class='text' id='bl6_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>How should we then multiply each element by <tt>{1,–1}</tt>? We could do this with:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822beyondlistabilityAimg7.png\" alt='(#1*{1, -1} &#038; ) /@ Table' title='(#1*{1, -1} &#038; ) /@ Table' width='581' height='51' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822beyondlistabilityimg7_copy.txt\">\n\t\t\t\t\t<span class='close' id='bl7_out'>&#10005</span></p>\n<pre class='text' id='bl7_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>But now we’ve got <tt><a href='https://reference.wolfram.com/language/ref/Threaded.html'>Threaded</a></tt>, and so instead we can just say:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822beyondlistabilityAimg8.png\" alt='Table' title='Table' width='581' height='51' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822beyondlistabilityimg8_copy.txt\">\n\t\t\t\t\t<span class='close' id='bl8_out'>&#10005</span></p>\n<pre class='text' id='bl8_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>You can give <tt><a href='https://reference.wolfram.com/language/ref/Threaded.html'>Threaded</a></tt> as an argument to any listable function, not just <tt><a href='https://reference.wolfram.com/language/ref/Plus.html'>Plus</a></tt> and <tt><a href='https://reference.wolfram.com/language/ref/Times.html'>Times</a></tt>:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822beyondlistabilityAimg9.png\" alt='Mod' title='Mod' width='291' height='51' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822beyondlistabilityimg9_copy.txt\">\n\t\t\t\t\t<span class='close' id='bl9_out'>&#10005</span></p>\n<pre class='text' id='bl9_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>You can use <tt><a href='https://reference.wolfram.com/language/ref/Threaded.html'>Threaded</a></tt> and ordinary listability together:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822beyondlistabilityAimg10.png\" alt='{{1, 2}, {3, 4}} + Threaded' title='{{1, 2}, {3, 4}} + Threaded' width='301' height='51' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822beyondlistabilityimg10_copy.txt\">\n\t\t\t\t\t<span class='close' id='bl10_out'>&#10005</span></p>\n<pre class='text' id='bl10_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>You can have several <tt><a href='https://reference.wolfram.com/language/ref/Threaded.html'>Threaded</a></tt>s together as well:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822beyondlistabilityAimg11.png\" alt='{{1, 2}, {3, 4}} + Threaded' title='{{1, 2}, {3, 4}} + Threaded' width='376' height='51' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822beyondlistabilityimg11_copy.txt\">\n\t\t\t\t\t<span class='close' id='bl11_out'>&#10005</span></p>\n<pre class='text' id='bl11_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p><tt><a href='https://reference.wolfram.com/language/ref/Threaded.html'>Threaded</a></tt>, by the way, gets its name from the function <tt><a href='https://reference.wolfram.com/language/ref/Thread.html'>Thread</a></tt>, which explicitly does “threading”, as in:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822beyondlistabilityAimg12.png\" alt='Thread' title='Thread' width='237' height='51' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822beyondlistabilityimg12_copy.txt\">\n\t\t\t\t\t<span class='close' id='bl12_out'>&#10005</span></p>\n<pre class='text' id='bl12_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>By default, <tt><a href='https://reference.wolfram.com/language/ref/Threaded.html'>Threaded</a></tt> will always thread into the lowest level of a list:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822beyondlistabilityAimg13.png\" alt='{{{3, 4}, {4, 5}}, {{4, 5}, {5, 6}}} + Threaded' title='{{{3, 4}, {4, 5}}, {{4, 5}, {5, 6}}} + Threaded' width='391' height='51' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822beyondlistabilityimg13_copy.txt\">\n\t\t\t\t\t<span class='close' id='bl13_out'>&#10005</span></p>\n<pre class='text' id='bl13_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822beyondlistabilityAimg14.png\" alt='{{{{4, 5}, {5, 6}}, {{5, 6}, {6, 7}}}, {{{5, 6}, {6, 7}}, {{6, 7}, {7, 8}}}} + Threaded' title='{{{{4, 5}, {5, 6}}, {{5, 6}, {6, 7}}}, {{{5, 6}, {6, 7}}, {{6, 7}, {7, 8}}}} + Threaded' width='579' height='77' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822beyondlistabilityimg14A_copy.txt\">\n\t\t\t\t\t<span class='close' id='bl14_out'>&#10005</span></p>\n<pre class='text' id='bl14_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>Here’s a “real-life” example of using <tt><a href='https://reference.wolfram.com/language/ref/Threaded.html'>Threaded</a></tt> like this. The data in a 3D color image consists of a rank-3 array of triples of RGB values:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822beyondlistabilityAtearB.png\" alt='ImageData' title='ImageData' width='433' height='' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822beyondlistabilityimg15_copy.txt\">\n\t\t\t\t\t<span class='close' id='bl15_out'>&#10005</span></p>\n<pre class='text' id='bl15_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>This multiplies every RGB triple by <tt>{0,1,2}</tt>:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822beyondlistabilityAimg17.png\" alt='Image3D' title='Image3D' width='396' height='157' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822beyondlistabilityimg17B_copy.txt\">\n\t\t\t\t\t<span class='close' id='Bbl17_out'>&#10005</span></p>\n<pre class='text' id='Bbl17_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>Most of the time you either want to use ordinary listability that operates at the top level of a list, or you want to use the default form of <tt><a href='https://reference.wolfram.com/language/ref/Threaded.html'>Threaded</a></tt>, that operates at the lowest level of a list. But <tt><a href='https://reference.wolfram.com/language/ref/Threaded.html'>Threaded</a></tt> has a more general form, in which you can explicitly say what level you want it to operate at.</p>\n<p>Here’s the default case:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822beyondlistabilityAimg18.png\" alt='{{{3, 4}, {4, 5}}, {{4, 5}, {5, 6}}} + Threaded' title='{{{3, 4}, {4, 5}}, {{4, 5}, {5, 6}}} + Threaded' width='441' height='51' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822beyondlistabilityimg18_copy.txt\">\n\t\t\t\t\t<span class='close' id='bl18_out'>&#10005</span></p>\n<pre class='text' id='bl18_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>Here’s level 1, which is just like ordinary listability:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822beyondlistabilityAimg19.png\" alt='{{{3, 4}, {4, 5}}, {{4, 5}, {5, 6}}} + Threaded' title='{{{3, 4}, {4, 5}}, {{4, 5}, {5, 6}}} + Threaded' width='441' height='51' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822beyondlistabilityimg19_copy.txt\">\n\t\t\t\t\t<span class='close' id='bl19_out'>&#10005</span></p>\n<pre class='text' id='bl19_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>And here’s threading into level 2:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822beyondlistabilityAimg20.png\" alt='{{{3, 4}, {4, 5}}, {{4, 5}, {5, 6}}} + Threaded' title='{{{3, 4}, {4, 5}}, {{4, 5}, {5, 6}}} + Threaded' width='441' height='51' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822beyondlistabilityimg20_copy.txt\">\n\t\t\t\t\t<span class='close' id='bl20_out'>&#10005</span></p>\n<pre class='text' id='bl20_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p><tt><a href='https://reference.wolfram.com/language/ref/Threaded.html'>Threaded</a></tt> provides a very convenient way to do all sorts of array-combining operations. There’s additional complexity when the object being “threaded in” itself has multiple levels. The default in this case is to align the lowest level in the thing being threaded in with the lowest level of the thing into which it’s being threaded:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822beyondlistabilityAimg21.png\" alt='{{{3, 4}, {4, 5}}, {{4, 5}, {5, 6}}} + Threaded' title='{{{3, 4}, {4, 5}}, {{4, 5}, {5, 6}}} + Threaded' width='441' height='51' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822beyondlistabilityimg21_copy.txt\">\n\t\t\t\t\t<span class='close' id='bl21_out'>&#10005</span></p>\n<pre class='text' id='bl21_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>Here now is “ordinary listability” behavior:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822beyondlistabilityAimg22.png\" alt='{{{3, 4}, {4, 5}}, {{4, 5}, {5, 6}}} + Threaded' title='{{{3, 4}, {4, 5}}, {{4, 5}, {5, 6}}} + Threaded' width='456' height='51' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822beyondlistabilityimg22_copy.txt\">\n\t\t\t\t\t<span class='close' id='bl22_out'>&#10005</span></p>\n<pre class='text' id='bl22_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>For the arrays we’re looking at here, the default behavior is equivalent to:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822beyondlistabilityAimg23.png\" alt='{{{3, 4}, {4, 5}}, {{4, 5}, {5, 6}}} + Threaded' title='{{{3, 4}, {4, 5}}, {{4, 5}, {5, 6}}} + Threaded' width='456' height='51' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822beyondlistabilityimg23_copy.txt\">\n\t\t\t\t\t<span class='close' id='bl23_out'>&#10005</span></p>\n<pre class='text' id='bl23_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>Sometimes it’s clearer to write this out in a form like</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822beyondlistabilityAimg24.png\" alt='{{{3, 4}, {4, 5}}, {{4, 5}, {5, 6}}} + Threaded' title='{{{3, 4}, {4, 5}}, {{4, 5}, {5, 6}}} + Threaded' width='483' height='51' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822beyondlistabilityimg24_copy.txt\">\n\t\t\t\t\t<span class='close' id='bl24_out'>&#10005</span></p>\n<pre class='text' id='bl24_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>which says that the first level of the array inside the <tt><a href='https://reference.wolfram.com/language/ref/Threaded.html'>Threaded</a></tt> is to be aligned with the second level of the outside array. In general, the default case is equivalent to –1 → –1, specifying that the bottom level of the array inside the <tt><a href='https://reference.wolfram.com/language/ref/Threaded.html'>Threaded</a></tt> should be aligned with the bottom level of the array outside.</p>\n<h2 id='yet-more-language-convenience-functions'>Yet More Language Convenience Functions</h2>\n<p>In every version of the <a href='https://www.wolfram.com/language/'>Wolfram Language</a> we try to add new functions that will make general programs easier to write and easier to read. In <a href='https://reference.wolfram.com/language/guide/SummaryOfNewFeaturesIn131.html'>Version 13.1</a> the most important such function is <tt><a href='https://reference.wolfram.com/language/ref/Threaded.html'>Threaded</a></tt>. But there are quite a few others as well.</p>\n<p>First in our collection for Version 13.1 is <tt><a href='https://reference.wolfram.com/language/ref/DeleteElements.html'>DeleteElements</a></tt>, which deletes specified elements from a list. It’s like <tt><a href='https://reference.wolfram.com/language/ref/Complement.html'>Complement</a></tt>, except that it doesn’t reorder the list (analogous to the way <tt><a href='https://reference.wolfram.com/language/ref/DeleteDuplicates.html'>DeleteDuplicates</a></tt> removes duplicate elements, without reordering in the way that <tt><a href='https://reference.wolfram.com/language/ref/Union.html'>Union</a></tt> does):</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822yetmoreAimg1.png\" alt='DeleteElements' title='DeleteElements' width='612' height='193' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822yetmorelamguageimg1_copy.txt\">\n\t\t\t\t\t<span class='close' id='yml1_out'>&#10005</span></p>\n<pre class='text' id='yml1_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p><tt><a href='https://reference.wolfram.com/language/ref/DeleteElements.html'>DeleteElements</a></tt> also allows more detailed control of how many copies of an element can be deleted. Here it is up to 2 <tt>b</tt>’s and 3 <tt>c</tt>’s:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822yetmoreAimg2.png\" alt='DeleteElements' title='DeleteElements' width='389' height='51' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822yetmorelamguageimg2_copy.txt\">\n\t\t\t\t\t<span class='close' id='yml2_out'>&#10005</span></p>\n<pre class='text' id='yml2_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>Talking of <tt><a href='https://reference.wolfram.com/language/ref/DeleteDuplicates.html'>DeleteDuplicates</a></tt>, another new function in Version 13.1 is <tt><a href='https://reference.wolfram.com/language/ref/DeleteAdjacentDuplicates.html'>DeleteAdjacentDuplicates</a></tt>:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822yetmoreAimg3.png\" alt='DeleteAdjacentDuplicates' title='DeleteAdjacentDuplicates' width='563' height='51' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822yetmorelamguageimg3A_copy.txt\">\n\t\t\t\t\t<span class='close' id='yml3_out'>&#10005</span></p>\n<pre class='text' id='yml3_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>We’ve had <tt><a href='https://reference.wolfram.com/language/ref/Union.html'>Union</a></tt>, <tt><a href='https://reference.wolfram.com/language/ref/Intersection.html'>Intersection</a></tt> and <tt><a href='https://reference.wolfram.com/language/ref/Complement.html'>Complement</a></tt> since <a href='https://reference.wolfram.com/legacy/v1/'>Version 1.0</a>. In Version 13.1 we’re adding <tt><a href='https://reference.wolfram.com/language/ref/SymmetricDifference.html'>SymmetricDifference</a></tt>: find elements that (in the 2-argument case) are in one list or the other, but not both. For example, what countries are in the G20 or the EU, but not both?</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822yetmoreAimg4.png\" alt='SymmetricDifference' title='SymmetricDifference' width='600' height='173' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822yetmorelamguageimg4_copy.txt\">\n\t\t\t\t\t<span class='close' id='yml4_out'>&#10005</span></p>\n<pre class='text' id='yml4_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>Let’s say you have several lists, and you want to know what elements are unique to just one of these lists, and don’t occur in multiple lists. The new <tt><a href='https://reference.wolfram.com/language/ref/UniqueElements.html'>UniqueElements</a></tt> tells one. </p>\n<p>As an example, this tells us which letters uniquely occur in various alphabets:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822yetmoreAimg5.png\" alt='UniqueElements' title='UniqueElements' width='556' height='51' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822yetmorelamguageimg5A_copy.txt\">\n\t\t\t\t\t<span class='close' id='yml5_out'>&#10005</span></p>\n<pre class='text' id='yml5_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>We’ve had <tt><a href='https://reference.wolfram.com/language/ref/Map.html'>Map</a></tt> and <tt><a href='https://reference.wolfram.com/language/ref/Apply.html'>Apply</a></tt>, with short forms <tt><a href='https://reference.wolfram.com/language/ref/Map.html'>/@</a></tt> and <tt><a href='https://reference.wolfram.com/language/ref/Apply.html'>@@</a></tt>, ever since <a href='https://reference.wolfram.com/legacy/v1/'>Version 1.0</a>. In <a href='https://reference.wolfram.com/legacy/v4/'>Version 4.0</a> we added <tt><a href=\"https://reference.wolfram.com/language/ref/MapApply.html\">@@@</a></tt> to represent <tt><a href='https://reference.wolfram.com/language/ref/Apply.html'>Apply</a></tt><tt>[f,expr,1]</tt>. But we never added a separate function to correspond to <tt><a href='https://reference.wolfram.com/language/ref/MapApply.html'>@@@</a></tt>. And over the years, there’ve been quite a few occasions where I’ve basically wanted, for example, to do something like “<tt><a href='https://reference.wolfram.com/language/ref/Fold.html'>Fold</a></tt><tt>[<a href='https://reference.wolfram.com/language/ref/MapApply.html'>@@@</a>, ...]</tt>”. Obviously <tt><a href='https://reference.wolfram.com/language/ref/Fold.html'>Fold</a></tt><tt>[</tt><tt><a href='https://reference.wolfram.com/language/ref/Apply.html'>Apply</a></tt><tt>[#1,#2,1]&,...] </tt>would work. But it feels as if there’s a “missing” named function. Well, in Version 13.1, we added it: <tt><a href='https://reference.wolfram.com/language/ref/MapApply.html'>MapApply</a></tt> is equivalent to <tt><a href=\"https://reference.wolfram.com/language/ref/MapApply.html\">@@@</a></tt>:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822yetmoreAimg6.png\" alt='f @@@ {{a, b}, {c, d}}' title='f @@@ {{a, b}, {c, d}}' width='222' height='51' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822yetmorelamguageimg6B_copy.txt\">\n\t\t\t\t\t<span class='close' id='Byml6_out'>&#10005</span></p>\n<pre class='text' id='Byml6_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>Another small convenience added in Version 13.1 is <tt><a href='https://reference.wolfram.com/language/ref/SameAs.html'>SameAs</a></tt>—essentially an operator form of <tt><a href='https://reference.wolfram.com/language/ref/SameQ.html'>SameQ</a></tt>. Why is such a construct needed? Well, there are always tradeoffs in language design. And back in Version 1.0 we decided to make <tt><a href='https://reference.wolfram.com/language/ref/SameQ.html'>SameQ</a></tt> work with any number of arguments (so you can test whether a whole sequence of things are the same). But this means that for consistency <tt><a href='https://reference.wolfram.com/language/ref/SameQ.html'>SameQ</a></tt><tt>[expr]</tt> must always return <tt><a href='https://reference.wolfram.com/language/ref/True.html'>True</a></tt>—so it’s not available as an operator of <tt><a href='https://reference.wolfram.com/language/ref/SameQ.html'>SameQ</a></tt>. And that’s why now in Version 13.1 we’re adding <tt><a href='https://reference.wolfram.com/language/ref/SameAs.html'>SameAs</a></tt>, that joins the family of operator-form functions like <tt><a href='https://reference.wolfram.com/language/ref/EqualTo.html'>EqualTo</a></tt> and <tt><a href='https://reference.wolfram.com/language/ref/GreaterThan.html'>GreaterThan</a></tt>:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822yetmoreAimg7.png\" alt='SameAs' title='SameAs' width='332' height='51' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822yetmorelamguageimg7_copy.txt\">\n\t\t\t\t\t<span class='close' id='yml7_out'>&#10005</span></p>\n<pre class='text' id='yml7_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>Procedural programming—often with “variables hanging out”—isn’t the preferred style for most Wolfram Language code. But sometimes it’s the most convenient way to do things. And in Version 13.1 we’ve add a small piece of streamlining by introducing the function <tt><a href='https://reference.wolfram.com/language/ref/Until.html'>Until</a></tt>. Ever since Version 1.0 we’ve had <tt><a href='https://reference.wolfram.com/language/ref/While.html'>While</a></tt><tt>[test,body]</tt> which repeatedly evaluates <tt>body</tt> while <tt>test</tt> is <tt><a href='https://reference.wolfram.com/language/ref/True.html'>True</a></tt>. But if <tt>test</tt> isn’t <tt><a href='https://reference.wolfram.com/language/ref/True.html'>True</a></tt> even at first, <tt><a href='https://reference.wolfram.com/language/ref/While.html'>While</a></tt> won’t ever evaluate <tt>body</tt>. <tt><a href='https://reference.wolfram.com/language/ref/Until.html'>Until</a></tt><tt>[test,body]</tt> does things the other way around: it evaluates <tt>body</tt> until <tt>test</tt> becomes <tt><a href='https://reference.wolfram.com/language/ref/True.html'>True</a></tt>. So if <tt>test</tt> isn’t <tt><a href='https://reference.wolfram.com/language/ref/True.html'>True</a></tt> at first, <tt><a href='https://reference.wolfram.com/language/ref/Until.html'>Until</a></tt> will still evaluate <tt>body</tt> once, in effect only looking at the test after it’s evaluated the body. </p>\n<p>Last but not least in the list of new core language functions in Version 13.1 is <tt><a href='https://reference.wolfram.com/language/ref/ReplaceAt.html'>ReplaceAt</a></tt>. <tt><a href='https://reference.wolfram.com/language/ref/Replace.html'>Replace</a></tt> attempts to apply a replacement rule to a complete expression—or a whole level in an expression. <tt><a href='https://reference.wolfram.com/language/ref/ReplaceAll.html'>ReplaceAll</a></tt> (<tt><a href='https://reference.wolfram.com/language/ref/ReplaceAll.html'>/.</a></tt><tt>)</tt> does the same thing for all subparts of an expression. But quite often one wants more control over where replacements are done. And that’s what <tt><a href='https://reference.wolfram.com/language/ref/ReplaceAt.html'>ReplaceAt</a></tt> provides:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822yetmoreAimg8.png\" alt='ReplaceAt' title='ReplaceAt' width='309' height='51' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822yetmorelamguageimg8_copy.txt\">\n\t\t\t\t\t<span class='close' id='yml8_out'>&#10005</span></p>\n<pre class='text' id='yml8_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>An important feature is that it also has an operator form:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822yetmoreAimg9.png\" alt='ReplaceAt' title='ReplaceAt' width='311' height='51' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822yetmorelamguageimg9_copy.txt\">\n\t\t\t\t\t<span class='close' id='yml9_out'>&#10005</span></p>\n<pre class='text' id='yml9_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>Why is this important? The answer is that it gives a symbolic way to specify not just what replacement is made, but also where it is made. And for example this is what’s needed in specifying steps in proofs, say as generated by <tt><a href='https://reference.wolfram.com/language/ref/FindEquationalProof.html'>FindEquationalProof</a></tt>.</p>\n<h2 id='emojis-and-more-multilingual-support'>Emojis! And More Multilingual Support</h2>\n<p>What is a character? <a href='https://www.wolfram.com/mathematica/scrapbook/'>Back when Version 1.0 was released</a>, characters were represented as 8-bit objects: usually ASCII, but you could pick another “character encoding” (hence the <tt><a href='https://reference.wolfram.com/language/ref/CharacterEncoding.html'>ChararacterEncoding</a></tt> option) if you wanted. Then in the early 1990s came Unicode—which we were one of the very first companies to support. Now “characters” could be 16-bit constructs, with nearly 65,536 possible “glyphs” allocated across different languages and uses (including some mathematical symbols that we introduced). Back in the early 1990s Unicode was a newfangled thing, that operating systems didn’t yet have built-in support for. But we were betting on Unicode, and so we built our own infrastructure for handling it.</p>\n<p>Thirty years later Unicode is indeed the universal standard for representing character-like things. But somewhere along the way, it turned out the world needed more than 16 bits’ worth of character-like things. At first it was about supporting variants and historical writing systems (think: cuneiform or Linear B). But then came emoji. And it became clear that—yes, arguably in a return to the Egyptian hieroglyph style of communication—there was an almost infinite number of possible pictorial emoji that could be made, each of them being encoded as their own Unicode code point. </p>\n<p>It’s been a slow expansion. Original 16-bit Unicode is “plane 0”. Now there are up to 16 additional planes. Not quite 32-bit characters, but given the way computers work, the approach now is to allow characters to be represented by 32-bit objects. It’s far from trivial to do that uniformly and efficiently. And for us it’s been a long process to upgrade everything in our system—from string manipulation to notebook rendering—to handle full 32-bit characters. And that’s finally been achieved in Version 13.1.</p>\n<p>But that’s far from all. In English we’re pretty much used to being able to treat text as a sequence of letters and other characters, with each character being separate. Things get a bit more complicated when you start to worry about diphthongs like æ. But if there are fairly few of these, it works to just introduce them as individual “Unicode characters” with their own code point. But there are plenty of languages—like Hindi or Khmer—where what appears in text like an individual character is really a composite of letter-like constructs, diacritical marks and other things. Such composite characters are normally represented as “grapheme clusters”: runs of Unicode code points. The rules for handling these things can be quite complicated. But after many years of development, major operating systems now successfully do it in most cases. And in Version 13.1 we’re able to make use of this to support such constructs in notebooks.</p>\n<p>OK, so what does 32-bit Unicode look like? Using <tt><a href='https://reference.wolfram.com/language/ref/CharacterRange.html'>CharacterRange</a></tt> (or <tt><a href='https://reference.wolfram.com/language/ref/FromCharacterCode.html'>FromCharacterCode</a></tt>) we can dive in and just see what’s out there in “character space”. Here’s part of ordinary 16-bit Unicode space:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822emojisAimg1.png\" alt='CharacterRange' title='CharacterRange' width='488' height='78' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822emojisimg1_copy.txt\">\n\t\t\t\t\t<span class='close' id='1emojis_out'>&#10005</span></p>\n<pre class='text' id='1emojis_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>Here’s some of what happens in “plane-1” above character code 65535, in this case catering to “<a href='https://www.history-of-mathematics.org/artifacts/babylonian-reciprocals-tablet' target=_blank rel=noopener>legacy computations</a>”:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822emojisAimg2.png\" alt='CharacterRange' title='CharacterRange' width='601' height='119' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822emojisimg2_copy.txt\">\n\t\t\t\t\t<span class='close' id='2emojis_out'>&#10005</span></p>\n<pre class='text' id='2emojis_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>Plane-0 (below 65535) is pretty much all full. Above that, things are sparser. But around 128000, for example, there are lots of emoji:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822emojisAimg3.png\" alt='CharacterRange' title='CharacterRange' width='533' height='147' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822emojisimg3_copy.txt\">\n\t\t\t\t\t<span class='close' id='3emojis_out'>&#10005</span></p>\n<pre class='text' id='3emojis_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>You can use these in the Wolfram Language, and in notebooks, just like any other characters. So, for example, you can have wolf and ram variables:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822emojisAimg4.png\" alt='Expand' title='Expand' width='634' height='66' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822emojisimg4_copy.txt\">\n\t\t\t\t\t<span class='close' id='4emojis_out'>&#10005</span></p>\n<pre class='text' id='4emojis_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>The <img src=\"https://s.w.org/images/core/emoji/2.2.1/72x72/1f40f.png\" alt=\"🐏\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /> sorts before the <img src=\"https://s.w.org/images/core/emoji/2.2.1/72x72/1f43a.png\" alt=\"🐺\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /> because it happens to have a numerically smaller character code:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822emojisAimg5.png\" alt='ToCharacterCode' title='ToCharacterCode' width='228' height='55' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822emojisimg5_copy.txt\">\n\t\t\t\t\t<span class='close' id='5emojis_out'>&#10005</span></p>\n<pre class='text' id='5emojis_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>In a notebook, you can enter emoji (and other Unicode characters) using standard operating system tools—like <span class=\"kbd\"><kbd>ctrl</kbd><kbd>cmd</kbd><kbd>space</kbd></span> on macOS:</p>\n<table >\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822emojisimg6.png\" alt='Emojis in notebook' title='Emojis in notebook' width='447' height='138' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822emojisimg6_copy.txt\">\n\t\t\t\t\t<span class='close' id='6emojis_out'>&#10005</span></p>\n<pre class='text' id='6emojis_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>The world of emoji is rapidly evolving—and that can sometimes lead to problems. Here’s an emoji range that includes some very familiar emoji, but on at least one of my computer systems also includes emoji that display only as <img style=\"margin-bottom: -1px\" src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822questionmark.png\" width='17' height='17' />:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/07/sw072122emojisimg12.png\" alt='CharacterRange' title='CharacterRange' width='579' height='' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/07/sw072122emojisimg1_copy.txt\">\n\t\t\t\t\t<span class='close' id='7emojis_out'>&#10005</span></p>\n<pre class='text' id='7emojis_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>The reason that happens is that my default fonts don’t contain glyphs for those emoji. But all is not lost. In Version 13.1 we’re including a font from Twitter that aims to contain glyphs for pretty much all emoji:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/07/sw071922emojisimg4.png\" alt='Style' title='Style' width='541' height='' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/07/sw072122emojisimg2_copy.txt\">\n\t\t\t\t\t<span class='close' id='8emojis_out'>&#10005</span></p>\n<pre class='text' id='8emojis_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>Beyond dealing with individual Unicode characters, there’s also the matter of composites, and grapheme clusters. In Hindi, for example, two characters can combine into something that’s rendered (and treated) as one:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822emojisAimg9.png\" alt='FromCharacterCode' title='FromCharacterCode' width='273' height='57' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822emojisimg9_copy.txt\">\n\t\t\t\t\t<span class='close' id='9emojis_out'>&#10005</span></p>\n<pre class='text' id='9emojis_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>The first character here can stand on its own:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822emojisAimg10.png\" alt='FromCharacterCode' title='FromCharacterCode' width='222' height='51' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822emojisimg10_copy.txt\">\n\t\t\t\t\t<span class='close' id='10emojis_out'>&#10005</span></p>\n<pre class='text' id='10emojis_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>But the second one is basically a modifier that extends the first character (in this particular case adding a vowel sound):</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822emojisAimg11.png\" alt='FromCharacterCode' title='FromCharacterCode' width='222' height='51' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822emojisimg11_copy.txt\">\n\t\t\t\t\t<span class='close' id='11emojis_out'>&#10005</span></p>\n<pre class='text' id='11emojis_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>But once the composite हि has been formed it acts “textually” just like a single character, in the sense that, for example, the cursor moves through it in one step. When it appears “computationally” in a string, however, it can still be broken into its constituent Unicode elements:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822emojisAimg12.png\" alt='Characters' title='Characters' width='154' height='62' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822emojisimg12_copy.txt\">\n\t\t\t\t\t<span class='close' id='12emojis_out'>&#10005</span></p>\n<pre class='text' id='12emojis_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>This kind of setup can be used not only for a language like Hindi but also for European languages that have diacritical marks like umlauts:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822emojisAimg13.png\" alt='FromCharacterCode' title='FromCharacterCode' width='257' height='53' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822emojisimg13_copy.txt\">\n\t\t\t\t\t<span class='close' id='13emojis_out'>&#10005</span></p>\n<pre class='text' id='13emojis_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>Even though this looks like one character—and in Version 13.1 it’s treated like that for “textual” purposes, for example in notebooks—it is ultimately made up of two distinct “Unicode characters”:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822emojisAimg14.png\" alt='Characters' title='Characters' width='150' height='55' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822emojisimg14_copy.txt\">\n\t\t\t\t\t<span class='close' id='14emojis_out'>&#10005</span></p>\n<pre class='text' id='14emojis_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>In this particular case, though, this can be “normalized” to a single character:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822emojisAimg15.png\" alt='CharacterNormalize' title='CharacterNormalize' width='262' height='55' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822emojisimg15_copy.txt\">\n\t\t\t\t\t<span class='close' id='15emojis_out'>&#10005</span></p>\n<pre class='text' id='15emojis_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>It looks the same, but now it really is just one character:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822emojisAimg16.png\" alt='ToCharacterCode' title='ToCharacterCode' width='184' height='51' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822emojisimg16_copy.txt\">\n\t\t\t\t\t<span class='close' id='16emojis_out'>&#10005</span></p>\n<pre class='text' id='16emojis_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>Here’s a “combined character” that you can form</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822emojisAimg17.png\" alt='FromCharacterCode' title='FromCharacterCode' width='257' height='53' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822emojisimg17_copy.txt\">\n\t\t\t\t\t<span class='close' id='17emojis_out'>&#10005</span></p>\n<pre class='text' id='17emojis_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>but for which there’s no single character to which it normalizes: </p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822emojisAimg18.png\" alt='ToCharacterCode' title='ToCharacterCode' width='380' height='51' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822emojisimg18_copy.txt\">\n\t\t\t\t\t<span class='close' id='18emojis_out'>&#10005</span></p>\n<pre class='text' id='18emojis_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>The concept of composite characters applies not only to ordinary text, but also to emojis. For example, take the emoji for a woman</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822emojisAimg19.png\" alt='ToCharacterCode' title='ToCharacterCode' width='211' height='53' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822emojisimg19_copy.txt\">\n\t\t\t\t\t<span class='close' id='19emojis_out'>&#10005</span></p>\n<pre class='text' id='19emojis_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>together with the emoji for a microscope</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822emojisAimg20.png\" alt='ToCharacterCode' title='ToCharacterCode' width='211' height='53' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822emojisimg20_copy.txt\">\n\t\t\t\t\t<span class='close' id='20emojis_out'>&#10005</span></p>\n<pre class='text' id='20emojis_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>and combine them with the “zero-width-joiner” character (which, needless to say, doesn’t display as anything)</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822emojisAimg21.png\" alt='ToCharacterCode' title='ToCharacterCode' width='190' height='51' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822emojisimg21_copy.txt\">\n\t\t\t\t\t<span class='close' id='21emojis_out'>&#10005</span></p>\n<pre class='text' id='21emojis_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>and you get (yes, somewhat bizarrely) a woman scientist!</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822emojisAimg22.png\" alt='FromCharacterCode' title='FromCharacterCode' width='350' height='83' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822emojisimg22_copy.txt\">\n\t\t\t\t\t<span class='close' id='22emojis_out'>&#10005</span></p>\n<pre class='text' id='22emojis_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>Needless to say, you can do this computationally—though the “calculus” of what’s been defined so far in Unicode is fairly bizarre: </p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822emojisAimg23.png\" alt='Grid' title='Grid' width='625' height='154' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822emojisimg23_copy.txt\">\n\t\t\t\t\t<span class='close' id='23emojis_out'>&#10005</span></p>\n<pre class='text' id='23emojis_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>I’m sort of hoping that the future of semantics doesn’t end up being defined by the way emojis combine <img src=\"https://s.w.org/images/core/emoji/2.2.1/72x72/1f60e.png\" alt=\"😎\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" />.</p>\n<p>As one last—arguably hacky—example of combining characters, Unicode defines various “two-letter” combinations to be flags. Type <img style=\"margin-bottom: -3px\" src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822U.png\" width='17' height='17' /> then <img style=\"margin-bottom: -2px\" src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822S.png\" width='17' height='17' />, and you get <img src=\"https://s.w.org/images/core/emoji/2.2.1/72x72/1f1fa-1f1f8.png\" alt=\"🇺🇸\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" />!</p>\n<p>Once again, this can be made computational:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822emojisAimg24.png\" alt='Grid' title='Grid' width='621' height='216' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822emojisimg24_copy.txt\">\n\t\t\t\t\t<span class='close' id='24emojis_out'>&#10005</span></p>\n<pre class='text' id='24emojis_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>(And, yes, it’s an interesting question what renders here, and what doesn’t. In some operating systems, no flags are rendered, and we have to pull in a special font to do it.)</p>\n<h2 id='a-toolbar-for-every-notebook'>A Toolbar for Every Notebook</h2>\n<table >\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw052822toolbarimg1.png\" alt='Toolbar' title='Toolbar' width='575' height='24' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw052822toolbarimg1_copy.txt\">\n\t\t\t\t\t<span class='close' id='tb1_out'>&#10005</span></p>\n<pre class='text' id='tb1_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>It used to be that the only “special key sequence” one absolutely should know in order to use <a href='https://www.wolfram.com/notebooks/'>Wolfram Notebooks</a> was <span class=\"kbd\"><kbd>shift</kbd><kbd>enter</kbd></span>. But gradually there have started to be more and more high-profile operations that are conveniently done by “pressing a button”. And rather than expecting people to remember all those special key sequences (or think to look in menus for them) we’ve decided to introduce a toolbar that will be displayed by default in every standard notebook. Version 13.1 has the first iteration of this toolbar. Subsequent versions will support an increasing range of capabilities.</p>\n<p>It’s not been easy to design the default toolbar (and we hope you’ll like what we came up with!) The main problem is that Wolfram Notebooks are very general, and there are a great many things you can do with them—which it’s challenging to organize into a manageable toolbar. (Some special types of notebooks have had their own specialized toolbars for a while, which were easier to design by virtue of their specialization.) </p>\n<p>So what’s in the toolbar? On the left are a couple of evaluation controls:</p>\n<p><span class='Picture'><img src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw052822toolbarAimg2.png\" alt='Evaluation menu options' title='Evaluation menu options' width= '231' height='230' align='absmiddle'></span></p>\n<p><span class='Picture'><img src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw052822toolbarimg3.png\" alt='Menu options' width= '25' height='25' align='absmiddle'></span> means “Evaluate”, and is simply equivalent to pressing <span class=\"kbd\"><kbd>shift</kbd><kbd>ret</kbd></span> (as its tooltip says). <span class='Picture'><img src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw052822toolbarimg4.png\" alt='Menu options' width= '26' height='26' align='absmiddle'></span>means “Abort”, and will stop a computation. To the right of <span class='Picture'><img src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw052822toolbarimg5.png\" alt='Menu options' width= '25' height='25' align='absmiddle'></span> is the menu shown above. The first part of the menu allows you to choose what will be evaluated. (Don’t forget the extremely useful “Evaluate In Place” that lets you evaluate whatever code you have selected—say to turn <tt><a href='https://reference.wolfram.com/language/ref/RGBColor.html'>RGBColor</a></tt><tt>[1,0,0]</tt> in your input into <img style=\"margin-bottom: -2px\" class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822redbox.png\" width='15' height='15' />.) The bottom part of the menu gives a couple of more detailed (but highly useful) evaluation controls.</p>\n<p>Moving along the toolbar, we next have:</p>\n<table>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw052822toolbarimg6.png\" alt='Menu option' title='Menu option' width='159' height='28' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw052822toolbarimg6_copy.txt\">\n\t\t\t\t\t<span class='close' id='tb6_out'>&#10005</span></p>\n<pre class='text' id='tb6_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>If your cursor isn’t already in a cell, the pulldown allows you to select what type of cell you want to insert (it’s similar to the <span class='Picture'><img src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw052822toolbarimg7.png\" alt='Menu options' width= '64' height='27' align='absmiddle'></span> “tongue” that appears within the notebook). (If your cursor is already inside a cell, then like in a typical word processor, the pulldown will tell you the style that’s being used, and let you reset it.)</p>\n<p><span class='Picture'><img src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw052822toolbarimg8.png\" alt='Menu options' width= '26' height='26' align='absmiddle'></span> gives you a little panel to control to appearance of cells, changing their background colors, frames, dingbats, etc.</p>\n<p>Next come cell-related buttons: <span class='Picture'><img src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw052822toolbarimg9.png\" alt='Menu options' width= '90' height='25' align='absmiddle'></span>. The first is for cell structure and grouping:</p>\n<table>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw052822toolbarimg10.png\" alt='Cell options' title='Cell options' width='216' height='159' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw052822toolbarimg10_copy.txt\">\n\t\t\t\t\t<span class='close' id='tb10_out'>&#10005</span></p>\n<pre class='text' id='tb10_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p><span class='Picture'><img src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw052822toolbarimg11.png\" alt='Menu options' width= '26' height='26' align='absmiddle'></span> copies input from above (<span class=\"kbd\"><kbd>cmd</kbd><kbd>L</kbd></span>). It’s an operation that I, for one, end up doing all the time. I’ll have an input that I evaluate. Then I’ll want to make a modified version of the input to evaluate again, while keeping the original. So I’ll copy the input from above, edit the copy, and evaluate it again.</p>\n<p><span class='Picture'><img src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw052822toolbarimg12.png\" alt='Menu options' width= '26' height='26' align='absmiddle'></span> copies output from above. I don’t find this quite as useful as copy input from above, but it can be helpful if you want to edit output for subsequent input, while leaving the “actual output” unchanged.</p>\n<p>The <span class='Picture'><img src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw052822toolbarimg13.png\" alt='Menu options' width= '237' height='26' align='absmiddle'></span> block is all about content in cells. <span class='Picture'><img src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw052822toolbarimg14.png\" alt='Menu options' width= '26' height='26' align='absmiddle'></span> (which you’ll often press repeatedly) is for extending a selection—in effect going ever upwards in an expression tree. (You can get the same effect by pressing <span class=\"kbd\"><kbd>ctrl</kbd><kbd>.</kbd></span> or by multiclicking, but it’s a lot more convenient to repeatedly press a single button than to have to precisely time your multiclicks.)</p>\n<p><span class='Picture'><img src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw052822toolbarimg15.png\" alt='Menu options' width= '26' height='26' align='absmiddle'></span> is the single-button way to get <span class=\"kbd\"><kbd>ctrl</kbd><kbd>=</kbd></span> for entering natural language input:</p>\n<table>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw052822toolbarimg16.png\" alt='Natural language input' title='Natural language input' width='87' height='69' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw052822toolbarimg16_copy.txt\">\n\t\t\t\t\t<span class='close' id='tb16_out'>&#10005</span></p>\n<pre class='text' id='tb16_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p><span class='Picture'><img src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw052822toolbarimg17.png\" alt='Menu options' width= '26' height='26' align='absmiddle'></span> iconizes your selection:</p>\n<table>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw052822toolbarimg18.png\" alt='Iconize selection' title='Iconize selection' width='484' height='132' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw052822toolbarimg18_copy.txt\">\n\t\t\t\t\t<span class='close' id='tb18_out'>&#10005</span></p>\n<pre class='text' id='tb18_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>Iconization is something we introduced in Version 11.3, and it’s something that’s proved incredibly useful, particularly for making code easy to read (say by iconizing details of options). (You can also iconize a selection from the right-click menu, or with <span class=\"kbd\"><kbd>ctrl</kbd><kbd>cmd</kbd><kbd>'</kbd></span>.)</p>\n<p><span class='Picture'><img src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw052822toolbarimg20.png\" alt='Menu options' width= '26' height='26' align='absmiddle'></span> is most relevant for code, and toggles commenting (with <span class='Picture'><img src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw052822toolbarimg21.png\" alt='Menu options' width= '31' height='16' align='absmiddle'></span>) a selection. <span class='Picture'><img src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw052822toolbarimg22.png\" alt='Menu options' width= '26' height='26' align='absmiddle'></span> brings up a palette for math typesetting. <span class='Picture'><img src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw052822toolbarimg23.png\" alt='Menu options' width= '26' height='26' align='absmiddle'></span> lets you enter <img style=\"margin-bottom: -6px\" src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822tex.png\" width='33' height='' /> that will be converted to Wolfram Language math typesetting. <span class='Picture'><img src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw052822toolbarimg24.png\" alt='Menu options' width= '26' height='26' align='absmiddle'></span> brings up a drawing canvas. <span class='Picture'><img src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw052822toolbarimg25.png\" alt='Menu options' width= '26' height='26' align='absmiddle'></span> inserts a hyperlink (<span class=\"kbd\"><kbd>cmd</kbd><kbd>shift</kbd><kbd>H</kbd></span>).</p>\n<p>If you’re in a text cell, the toolbar will look different, now sporting a text formatting control: <span class='Picture'><img src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822texttoolbar.png\" alt='Text menu options' title='Text menu options'width= '130' height='' align='absmiddle'></span></p>\n<p>Most of this is fairly standard. <span class='Picture'><img src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw052822toolbarimg27.png\" alt='Menu options' width= '26' height='26' align='absmiddle'></span> lets you insert “code voice” material. <span class='Picture'><img src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw052822toolbarimg28.png\" alt='Menu options' width= '26' height='26' align='absmiddle'></span>and <span class='Picture'><img src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw052822toolbarimg29.png\" alt='Menu options' width= '26' height='26' align='absmiddle'></span> are still in the toolbar for inserting math into a text cell.</p>\n<p>On the right-hand end of the toolbar are three more buttons: <span class='Picture'><img src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw052822toolbarimg30.png\" alt='Menu options' width= '84' height='26' align='absmiddle'></span>. <span class='Picture'><img src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw052822toolbarimg31.png\" alt='Menu options' width= '26' height='26' align='absmiddle'></span> gives you a dialog to publish your notebook to the cloud. <span class='Picture'><img src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw052822toolbarimg32.png\" alt='Menu options' width= '24' height='26' align='absmiddle'></span> opens documentation, either specifically looking up whatever you have selected in the notebook, or opening the front page (“root guide page”) of the main Wolfram Language documentation. Finally, <span class='Picture'><img src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw052822toolbarimg33.png\" alt='Menu options' width= '24' height='26' align='absmiddle'></span> lets you search in your current notebook.</p>\n<p>As I mentioned above, what’s in Version 13.1 is just the first iteration of our default toolbar. Expect more features in later versions. One thing that’s notable about the toolbar in general is that it’s 100% implemented in Wolfram Language. And in addition to adding a great deal of flexibility, this also means that the toolbar immediately works on all platforms. (By the way, if you don’t want the toolbar in a particular notebook—or for all your notebooks—just right-click the background of the toolbar to pick that option.)</p>\n<h2 id='polishing-the-user-interface'>Polishing the User Interface</h2>\n<p>We first introduced Wolfram Notebooks with Version 1.0 of Mathematica, in 1988. And ever since then, we’ve been progressively polishing the notebook interface, doing more with every new version. </p>\n<p>The <span class=\"kbd\"><kbd>ctrl</kbd><kbd>=</kbd></span> mechanism for entering natural language (“<a href='https://www.wolframalpha.com/'>Wolfram|Alpha</a>-style”) input debuted in <a href='https://writings.stephenwolfram.com/2014/07/launching-mathematica-10-with-700-new-functions-and-a-crazy-amount-of-rd/'>Version 10.0</a>—and in Version 13.1 it’s now accessible from the <span class='Picture'><img src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822polishingimg1.png\" alt='picture' width= '26' height='26' align='absmiddle'></span> button in the new default notebook toolbar. But what actually is <span class='Picture'><img src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822polishingimg2A.png\" alt='picture' width= '35' height='21' align='absmiddle'></span> when it’s in a notebook? In the past, it’s been a fairly complex symbolic structure mainly suitable for evaluation. But in Version 13.1 we’ve made it much simpler. And while that doesn’t have any direct effect if you’re just using <span class='Picture'><img src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822polishingimg2A.png\" alt='picture' width= '35' height='' align='absmiddle'></span> purely in a notebook, it does have an effect if you copy <span class='Picture'><img src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822polishingimg2A.png\" alt='picture' width= '35' height='' align='absmiddle'></span> into another application, like pure-text email. In the past this produced something that would work if pasted back into a notebook, but definitely wasn’t particularly readable. In Version 13.1, it’s now simply the Wolfram Language interpretation of your natural language input:</p>\n<table >\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822polishingimg5.png\" alt='Natural language input' title='Natural language input' width='455' height='69' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822polishingimg5_copy.txt\">\n\t\t\t\t\t<span class='close' id='ui5_out'>&#10005</span></p>\n<pre class='text' id='ui5_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>What happens if the computation you do in a notebook generates a huge output? Ever since <a href='https://reference.wolfram.com/legacy/v6/guide/Mathematica.html'>Version 6.0</a> we’ve had some form of “output limiter”, but in Version 13.1 it’s become much sleeker and more useful. Here’s a typical example: </p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img style=\"margin-left: 6px\" class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822polishingimg6A.png\" alt='Range' title='Range' width='120' height='' /><br />\n<img style=\"margin-top: 10px\" class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822polishingimg6B.png\" alt='Range' title='Range' width='595' height='' />\n</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822polishingimg6_copy.txt\">\n\t\t\t\t\t<span class='close' id='ui6_out'>&#10005</span></p>\n<pre class='text' id='ui6_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>Talking of big outputs (as well as other things that keep the notebook interface busy), another change in Version 13.1 is the new asynchronous progress overlay on macOS. This doesn’t affect other platforms where this problem had already been solved, but on the Mac changes in the OS had led to a situation where the notebook front end could mysteriously pop to the front on your desktop—a situation that has now been resolved.</p>\n<p>One of the slightly unusual user interface features that’s existed ever since Version 1.0 is the <span class=\"computer-voice\">Why the Beep?</span> menu item—that lets you get an explanation of any “error beep” that occurs while you’re running the system. The function <tt><a href='https://reference.wolfram.com/language/ref/Beep.html'>Beep</a></tt> lets you generate your own beep. And now in Version 13.1 you can use <tt><a href='https://reference.wolfram.com/language/ref/Beep.html'>Beep</a></tt><tt>[\"string\"]</tt> to set up an explanation of “your beep”, that users can retrieve through the <span class=\"computer-voice\">Why the Beep?</span> menu item.</p>\n<p>The basic notebook user interface works as much as possible with standard interface elements on all platforms, so that when these elements are updated, we always automatically get the “most modern” look. But there are parts of the notebook interface that are quite special to Wolfram Notebooks and are always custom designed. One that hadn’t been updated for a while is the <span class=\"computer-voice\">Preferences</span> dialog—which now in Version 13.1 gets a full makeover:</p>\n<table >\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822polishingimg8.png\" alt='Preferences' title='Preferences' width='575' height='426' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822polishingimg8_copy.txt\">\n\t\t\t\t\t<span class='close' id='ui8_out'>&#10005</span></p>\n<pre class='text' id='ui8_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>When you tell the Wolfram Language to do something, it normally just goes off and does it, without asking you anything (well, unless it explicitly needs input, needs a password, etc.) But what if there’s something that it might be a good idea to do, though it’s not strictly necessary? What should the user interface for this be? It’s tricky, but I think we now have a good solution that we’ve started deploying in Version 13.1.</p>\n<p>In particular, in Version 13.1, there’s an example related to the <a href='https://resources.wolframcloud.com/FunctionRepository'>Wolfram Function Repository</a>. Say you use a function for which an update is available. What now happens is that a blue box is generated that tells you about the update—though it still keeps going with the computation, ignoring the update:</p>\n<table>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822polishingimg9B.png\" alt='Update option' title='Update option' width='540' height='' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822polishingimg9_copy.txt\">\n\t\t\t\t\t<span class='close' id='ui9_out'>&#10005</span></p>\n<pre class='text' id='ui9_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>If you click the <span class=\"computer-voice\">Update Now</span> button in the blue box you can do the update. And then the point is that you can run the computation again (for example, just by pressing <span class=\"kbd\"><kbd>shift</kbd><kbd>enter</kbd></span>), and now it’ll use the update. In a sense the core idea is to have an interface where there are potentially multiple passes, and where a computation always runs to completion, but you have an easy way to change how it’s set up, and then run it again.</p>\n<h2 id='large-scale-code-editing'>Large-Scale Code Editing</h2>\n<p>One of the great things about the <a href='https://www.wolfram.com/language/'>Wolfram Language</a> is that it works well for programs of any scale—from less than a line long to millions of lines long. And for the past several years we’ve been working on expanding our support for very large Wolfram Language programs. Using LSP (Language Server Protocol) we’ve provided the capability for most standard external IDEs to automatically do syntax coloring and other customizations for the Wolfram Language.</p>\n<p>In Version 13.1 we’re also adding a couple of features that make large-scale code editing in notebooks more convenient. The first—and widely requested—is block indent and outdent of code. Select the lines you want to indent or outdent and simply press <span class=\"kbd\"><kbd>tab</kbd></span> or <span class=\"kbd\"><kbd>shift</kbd><kbd>tab</kbd></span> to indent or outdent them:</p>\n<table >\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822codeeditingimg1.png\" alt='Tab indent' title='Tab indent' width='380' height='298' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822codeeditingimg1_copy.txt\">\n\t\t\t\t\t<span class='close' id='ce1_out'>&#10005</span></p>\n<pre class='text' id='ce1_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>Ever since <a href='https://reference.wolfram.com/legacy/v6/guide/Mathematica.html'>Version 6.0</a> we’ve had the ability to work with .wl package files (as well as .wls script files) using our notebook editing system. A new default feature in Version 13.1 is numbering of all code lines that appear in the underlying file (and, yes, we correctly align line numbers accounting for the presence of non-code cells):</p>\n<table>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822codeeditingimg2.png\" alt='Code line numbering' title='Code line numbering' width='522' height='331' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822codeeditingimg2_copy.txt\">\n\t\t\t\t\t<span class='close' id='ce2_out'>&#10005</span></p>\n<pre class='text' id='ce2_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>So now, for example, if you get a syntax error from <tt><a href='https://reference.wolfram.com/language/ref/Get.html'>Get</a></tt> or a related function, you’ll immediately be able to use the line number it reports to find where it occurs in the underlying file. </p>\n<h2 id='scribbling-on-notebooks'>Scribbling on Notebooks</h2>\n<p>In <a href='https://writings.stephenwolfram.com/2020/12/launching-version-12-2-of-wolfram-language-mathematica-228-new-functions-and-much-more/'>Version 12.2</a> we introduced <tt><a href='https://reference.wolfram.com/language/ref/Canvas.html'>Canvas</a></tt> as a convenient interface for interactive drawing in notebooks. In Version 13.1 we’re introducing the notion of toggling a canvas on top of any cell. </p>\n<p>Given a cell, just select it and press <span class='Picture'><img src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822scribblingimg1.png\" alt='picture' width= '25' height='25' align='absmiddle'></span>, and you’ll get a canvas:</p>\n<table >\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822scribblingimg2.png\" alt='Canvas function' title='Canvas function' width='381' height='235' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822scribblingimg2_copy.txt\">\n\t\t\t\t\t<span class='close' id='son2_out'>&#10005</span></p>\n<pre class='text' id='son2_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>Now you can use the drawing tools in the canvas to create an annotation overlay:</p>\n<table >\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822scribblingimg3.png\" alt='Drawing' title='Drawing' width='381' height='235' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822scribblingimg3_copy.txt\">\n\t\t\t\t\t<span class='close' id='son3_out'>&#10005</span></p>\n<pre class='text' id='son3_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>If you evaluate the cell, the overlay will stay. (You can get rid of the “canvas wrapper” by applying <tt><a href='https://reference.wolfram.com/language/ref/Normal.html'>Normal</a></tt>.) </p>\n<h2 id='trees-continue-to-grow'>Trees Continue to Grow &#127793;&#127795;</h2>\n<p>In <a href='https://writings.stephenwolfram.com/2021/05/launching-version-12-3-of-wolfram-language-mathematica/'>Version 12.3</a> we introduced <tt><a href='https://reference.wolfram.com/language/ref/Tree.html'>Tree</a></tt> as a new fundamental construct in the <a href='https://www.wolfram.com/language/'>Wolfram Language</a>. In Version 13.0 we added a variety of styling options for trees, and in Version 13.1 we’re adding more styling as well as a variety of new fundamental features. </p>\n<p>An important update to the fundamental <tt><a href='https://reference.wolfram.com/language/ref/Tree.html'>Tree</a></tt> construct in Version 13.1 is the ability to name branches at each node, by giving them in an association:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822treesAimg1.png\" alt='Tree' title='Tree' width='283' height='144' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822treesAimg1_copy.txt\">\n\t\t\t\t\t<span class='close' id='trees1_out'>&#10005</span></p>\n<pre class='text' id='trees1_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>All tree functions now include support for associations:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822treesAimg2.png\" alt='NestTree' title='NestTree' width='418' height='210' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822treesAimg2A_copy.txt\">\n\t\t\t\t\t<span class='close' id='trees2A_out'>&#10005</span></p>\n<pre class='text' id='trees2A_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>In many uses of trees the labels of nodes are crucial. But particularly in more abstract applications one often wants to deal with unlabeled trees. In Version 13.1 the function <tt><a href='https://reference.wolfram.com/language/ref/UnlabeledTree.html'>UnlabeledTree</a></tt> (roughly analogously to <tt><a href='https://reference.wolfram.com/language/ref/UndirectedGraph.html'>UndirectedGraph</a></tt>) takes a labeled tree, and basically removes all visible labels. Here is a standard labeled tree</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822treesAimg3.png\" alt='RandomTree' title='RandomTree' width='418' height='248' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822treesAimg3_copy.txt\">\n\t\t\t\t\t<span class='close' id='trees3_out'>&#10005</span></p>\n<pre class='text' id='trees3_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>and here’s the unlabeled analog:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822treesAimg4.png\" alt='UnlabeledTree' title='UnlabeledTree' width='418' height='240' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822treesAimg4_copy.txt\">\n\t\t\t\t\t<span class='close' id='trees4_out'>&#10005</span></p>\n<pre class='text' id='trees4_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>In Version 12.3 we introduced <tt><a href='https://reference.wolfram.com/language/ref/ExpressionTree.html'>ExpressionTree</a></tt> for deriving trees from general symbolic expressions. Our plan is to have a wide range of “special trees” appropriate for representing different specific kinds of symbolic expressions. We’re beginning this process in Version 13.1 by, for example, having the concept of “<tt><a href='https://reference.wolfram.com/language/ref/Dataset.html'>Dataset</a></tt> trees”. Here’s <tt><a href='https://reference.wolfram.com/language/ref/ExpressionTree.html'>ExpressionTree</a></tt> converting a dataset to a tree:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822treesAimg5.png\" alt='ExpressionTree' title='ExpressionTree' width='418' height='256' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822treesAimg5_copy.txt\">\n\t\t\t\t\t<span class='close' id='trees5_out'>&#10005</span></p>\n<pre class='text' id='trees5_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>And now here’s <tt><a href='https://reference.wolfram.com/language/ref/TreeExpression.html'>TreeExpression</a></tt> “inverting” that, and producing a dataset:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822treesAimg6.png\" alt='TreeExpression' title='TreeExpression' width='244' height='194' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822treesAimg6_copy.txt\">\n\t\t\t\t\t<span class='close' id='trees6_out'>&#10005</span></p>\n<pre class='text' id='trees6_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>(Remember the convention that *<tt><a href='https://reference.wolfram.com/language/ref/Tree.html'>Tree</a></tt> functions return a tree; while <tt><a href='https://reference.wolfram.com/language/ref/Tree.html'>Tree</a></tt>* functions take a tree and return something else.)</p>\n<p>Here’s a “graph rendering” of a more complicated dataset tree:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822treesAimg7.png\" alt='TreeGraph' title='TreeGraph' width='563' height='254' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822treesAimg7_copy.txt\">\n\t\t\t\t\t<span class='close' id='trees7_out'>&#10005</span></p>\n<pre class='text' id='trees7_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>The new function <tt><a href='https://reference.wolfram.com/language/ref/TreeLeafCount.html'>TreeLeafCount</a></tt> lets you count the total number of leaf nodes on a tree (basically the analog of <tt><a href='https://reference.wolfram.com/language/ref/LeafCount.html'>LeafCount</a></tt> for a general symbolic expression):</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822treesAimg8.png\" alt='TreeLeafCount' title='TreeLeafCount' width='592' height='51' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822treesAimg8_copy.txt\">\n\t\t\t\t\t<span class='close' id='trees8_out'>&#10005</span></p>\n<pre class='text' id='trees8_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>Another new function in Version 13.1 that’s often useful in getting a sense of the structure of a tree without inspecting every node is <tt><a href='https://reference.wolfram.com/language/ref/RootTree.html'>RootTree</a></tt>. Here’s a random tree:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822treesAimg9.png\" alt='tree = RandomTree' title='tree = RandomTree' width='418' height='248' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822treesAimg9_copy.txt\">\n\t\t\t\t\t<span class='close' id='trees9_out'>&#10005</span></p>\n<pre class='text' id='trees9_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p><tt><a href='https://reference.wolfram.com/language/ref/RootTree.html'>RootTree</a></tt> can get a subtree that’s “close to the root”:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822treesAimg10.png\" alt='RootTree' title='RootTree' width='418' height='235' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822treesAimg10_copy.txt\">\n\t\t\t\t\t<span class='close' id='trees10_out'>&#10005</span></p>\n<pre class='text' id='trees10_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>It can also get a subtree that’s “far from the leaves”, in this case going down to elements that are at level –2 in the tree:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822treesAimg11.png\" alt='RootTree' title='RootTree' width='418' height='411' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822treesAimg11_copy.txt\">\n\t\t\t\t\t<span class='close' id='trees11_out'>&#10005</span></p>\n<pre class='text' id='trees11_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>In some ways the styling of trees is like the styling of graphs—though there are some significant differences as a result of the hierarchical nature of trees. By default, options inserted into a particular tree element affect only that tree element:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822treesAimg12.png\" alt='Tree' title='Tree' width='418' height='248' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822treesAimg12_copy.txt\">\n\t\t\t\t\t<span class='close' id='trees12_out'>&#10005</span></p>\n<pre class='text' id='trees12_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>But you can give rules that specify how elements in the subtree below that element are affected:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822treesAimg13.png\" alt='Tree' title='Tree' width='475' height='248' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822treesAimg13_copy.txt\">\n\t\t\t\t\t<span class='close' id='trees13_out'>&#10005</span></p>\n<pre class='text' id='trees13_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>In Version 13.1 there is now detailed control available for styling both nodes and edges in the tree. Here’s an example that gives styling for parent edges of nodes:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822treesAimg14.png\" alt='Tree' title='Tree' width='467' height='248' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822treesAimg14_copy.txt\">\n\t\t\t\t\t<span class='close' id='trees14_out'>&#10005</span></p>\n<pre class='text' id='1trees4_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>Options like <tt><a href='https://reference.wolfram.com/language/ref/TreeElementStyle.html'>TreeElementStyle</a></tt> determine styling from the positions of elements. <tt><a href='https://reference.wolfram.com/language/ref/TreeElementStyleFunction.html'>TreeElementStyleFunction</a></tt>, on the other hand, determines styling by applying a function to the data at each node:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822treesAimg15.png\" alt='Tree' title='Tree' width='474' height='248' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822treesAimg15_copy.txt\">\n\t\t\t\t\t<span class='close' id='trees15_out'>&#10005</span></p>\n<pre class='text' id='trees15_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>This uses both data and position information for each node:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822treesAimg16.png\" alt='Tree' title='Tree' width='543' height='248' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822treesAimg16_copy.txt\">\n\t\t\t\t\t<span class='close' id='trees16_out'>&#10005</span></p>\n<pre class='text' id='trees16_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>In analogy with <tt><a href='https://reference.wolfram.com/language/ref/VertexShapeFunction.html'>VertexShapeFunction</a></tt> for graphs, <tt><a href='https://reference.wolfram.com/language/ref/TreeElementShapeFunction.html'>TreeElementShapeFunction</a></tt> provides a general mechanism to specify how nodes of a tree should be rendered. This named setting for <tt><a href='https://reference.wolfram.com/language/ref/TreeElementShapeFunction.html'>TreeElementShapeFunction</a></tt> makes every node be displayed as a circle:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822treesAimg17.png\" alt='Tree' title='Tree' width='426' height='257' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822treesAimg17_copy.txt\">\n\t\t\t\t\t<span class='close' id='trees17_out'>&#10005</span></p>\n<pre class='text' id='1trees7_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<h2 id='yet-more-date-handling-details'>Yet More Date-Handling Details</h2>\n<p>We first introduced dates into <a href='https://www.wolfram.com/language/'>Wolfram Language</a> in <a href='https://reference.wolfram.com/legacy/v2/'>Version 2.0</a>, and we introduced modern date objects in <a href='https://writings.stephenwolfram.com/2014/07/launching-mathematica-10-with-700-new-functions-and-a-crazy-amount-of-rd/'>Version 10.0</a>. But to really make dates fully computable, there are many detailed cases to consider. And in Version 13.1 we’re dealing with yet another of them. Let’s say you’ve got the date January 31, 2022. What date is one month later—given that there’s no February 31, 2022?</p>\n<p>If we define a month “physically”, it corresponds to a certain fractional number of days:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822datehandlingimg1.png\" alt='UnitConvert' title='UnitConvert' width='342' height='76' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822datehandlingimg1_copy.txt\">\n\t\t\t\t\t<span class='close' id='dh1_out'>&#10005</span></p>\n<pre class='text' id='dh1_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>And, yes, we can use this to decide what is a month after January 31, 2022:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822datehandlingimg2.png\" alt='DatePlus' title='DatePlus' width='459' height='65' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822datehandlingimg2_copy.txt\">\n\t\t\t\t\t<span class='close' id='dh2_out'>&#10005</span></p>\n<pre class='text' id='dh2_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>Slightly confusing here is that we’re dealing with date objects of “day” granularity. We can see more if we go down to the level of minutes:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822datehandlingimg3.png\" alt='DatePlus' title='DatePlus' width='551' height='65' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822datehandlingimg3_copy.txt\">\n\t\t\t\t\t<span class='close' id='dh3_out'>&#10005</span></p>\n<pre class='text' id='dh3_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>If one’s doing something like astronomy, this kind of “physical” date computation is probably what one wants. But if one’s doing everyday “human” activities, it’s almost certainly not what one wants; instead, one wants to land on some calendar date or another.</p>\n<p>Here’s the default in the Wolfram Language: </p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822datehandlingimg4.png\" alt='DatePlus' title='DatePlus' width='289' height='65' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822datehandlingimg4_copy.txt\">\n\t\t\t\t\t<span class='close' id='dh4_out'>&#10005</span></p>\n<pre class='text' id='dh4_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>But now in Version 13.1 we can parametrize more precisely what we want. This default is what we call <tt>\"RollBackward\"</tt>: wherever we “land” by doing the raw date computation, we “roll backward” to the first valid date. An alternative is <tt>\"RollForward\"</tt>:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822datehandlingimg5.png\" alt='DatePlus' title='DatePlus' width='465' height='65' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822datehandlingimg5_copy.txt\">\n\t\t\t\t\t<span class='close' id='dh5_out'>&#10005</span></p>\n<pre class='text' id='dh5_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>Whatever method one uses, there are going to be weird cases. Let’s say we start with several consecutive dates:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822datehandlingimg6.png\" alt='dates = DateRange' title='dates = DateRange' width='601' height='68' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822datehandlingimg6_copy.txt\">\n\t\t\t\t\t<span class='close' id='dh6_out'>&#10005</span></p>\n<pre class='text' id='dh6_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>With <tt>\"RollBackward\"</tt> we have the weirdness of repeating February 28:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822datehandlingimg7.png\" alt='DatePlus' title='DatePlus' width='612' height='68' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822datehandlingimg7A_copy.txt\">\n\t\t\t\t\t<span class='close' id='dh7A_out'>&#10005</span></p>\n<pre class='text' id='hd7A_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>With <tt>\"RollForward\"</tt> we have the weirdness of repeating March 1:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822datehandlingimg8.png\" alt='DatePlus' title='DatePlus' width='591' height='59' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822datehandlingimg8A_copy.txt\">\n\t\t\t\t\t<span class='close' id='dh8A_out'>&#10005</span></p>\n<pre class='text' id='dh8A_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>Is there any alternative? Yes, we can use <tt>\"RollOver\"</tt>:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822datehandlingimg9.png\" alt='DatePlus' title='DatePlus' width='596' height='59' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822datehandlingimg9A_copy.txt\">\n\t\t\t\t\t<span class='close' id='dh9A_out'>&#10005</span></p>\n<pre class='text' id='dh9A_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>This keeps advancing through days, but then has the weirdness that it goes backwards. And, yes, there’s no “right answer” here. But in Version 13.1 you can now specify exactly what you want the behavior to be.</p>\n<p>The same issue arises not just for months, but also, for example, for years. And it affects not just <tt><a href='https://reference.wolfram.com/language/ref/DatePlus.html'>DatePlus</a></tt>, but also <tt><a href='https://reference.wolfram.com/language/ref/DateDifference.html'>DateDifference</a></tt>.</p>\n<p>It’s worth mentioning that in Version 13.1, in addition to dealing with the detail we’ve just discussed, the whole framework for doing “date arithmetic” in Wolfram Language has been made vastly more efficient, sometimes by factors of hundreds.</p>\n<h2 id='capturing-video-more'>Capturing Video &#038; More</h2>\n<p>We’ve had <tt><a href='https://reference.wolfram.com/language/ref/ImageCapture.html'>ImageCapture</a></tt> since <a href='https://writings.stephenwolfram.com/2010/11/mathematica-8/'>Version 8.0</a> (in 2010) and <tt><a href='https://reference.wolfram.com/language/ref/AudioCapture.html'>AudioCapture</a></tt> since <a href='https://writings.stephenwolfram.com/2017/03/the-rd-pipeline-continues-launching-version-11-1/'>Version 11.1</a> (in 2017). Now in Version 13.1 we have <tt><a href='https://reference.wolfram.com/language/ref/VideoCapture.html'>VideoCapture</a></tt>. By default <tt><a href=\"https://reference.wolfram.com/language/ref/VideoCapture.html\">VideoCapture</a>[]</tt> gives you a GUI that lets you record from your camera:</p>\n<table>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw063022img1.png\" alt='VideoCapture' title='VideoCapture' width='181' height='88' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw063022img1_copy.txt\">\n\t\t\t\t\t<span class='close' id='z1_out'>&#10005</span></p>\n<pre class='text' id='1z_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>Clicking the down arrow opens up a preview window that shows your current video:</p>\n<table>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw063022img2.png\" alt='VideoCapture' title='VideoCapture' width='329' height='269' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw063022img2_copy.txt\">\n\t\t\t\t\t<span class='close' id='z2_out'>&#10005</span></p>\n<pre class='text' id='z2_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>When you’ve finished recording, <tt><a href='https://reference.wolfram.com/language/ref/VideoCapture.html'>VideoCapture</a></tt> returns the <tt><a href='https://reference.wolfram.com/language/ref/Video.html'>Video</a></tt> object you created:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw063022img3.png\" alt='' title='' width='151' height='13' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw063022img4_copy.txt\">\n\t\t\t\t\t<span class='close' id='z4_out'>&#10005</span></p>\n<pre class='text' id='z4_out_text'>VideoCapture[]</pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p><video width=\"320\" height=\"180\" controls><source src=\"https://content.wolfram.com/uploads/sites/43/2022/06/video4_out_SWVideo-01.mp4\" type=\"video/mp4\"></video></p>\n<p>Now you can process or analyze this <tt><a href='https://reference.wolfram.com/language/ref/Video.html'>Video</a></tt> object just like you would any other:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw063022img5.png\" alt='' title='' width='330' height='81' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/10/sw063022img5X_copy.txt\">\n\t\t\t\t\t<span class='close' id='z5_out'>&#10005</span></p>\n<pre class='text' id='z5_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p><tt><a href=\"https://reference.wolfram.com/language/ref/VideoCapture.html\">VideoCapture</a>[]</tt> is a blocking operation that waits until you’ve finished recording, then returns a result. But <tt><a href='https://reference.wolfram.com/language/ref/VideoCapture.html'>VideoCapture</a></tt> can also be used “indirectly” as a dynamic control. Thus, for example</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw063022img6.png\" alt='' title='' width='259' height='88' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw063022img6_copy.txt\">\n\t\t\t\t\t<span class='close' id='z6_out'>&#10005</span></p>\n<pre class='text' id='z6_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>lets you asynchronously start and stop recording, even as you do other things in your <a href='https://www.wolfram.com/language/'>Wolfram Language</a> session. But every time you stop recording, the value of <tt>video</tt> is updated. </p>\n<p><tt><a href='https://reference.wolfram.com/language/ref/VideoCapture.html'>VideoCapture</a></tt> records video from your camera (and you can use the <tt>ImageDevice</tt> option to specify which one if you have several). <tt><a href='https://reference.wolfram.com/language/ref/VideoScreenCapture.html'>VideoScreenCapture</a></tt>, on the other hand, records from your computer screen—in effect providing a video analog of <tt><a href='https://reference.wolfram.com/language/ref/CurrentScreenImage.html'>CurrentScreenImage</a></tt>.</p>\n<p><tt><a href=\"https://reference.wolfram.com/language/ref/VideoScreenCapture.html\">VideoScreenCapture</a>[]</tt>, like <tt><a href='https://reference.wolfram.com/language/ref/VideoCapture.html'>VideoCapture</a>[]</tt>, is a blocking operation as far as the Wolfram Language is concerned. But if you want to watch something happening in another application (say, a web browser), it’ll do just fine. And in addition, you can give a screen rectangle to capture a particular region on your screen:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw063022img7.png\" alt='' title='' width='326' height='21' /></p>\n<p>\t\t\t\t\t<video loading='lazy' height=\"auto\" width=\"360\" style=\"margin-left:0px\" muted=\"\" alt=\"\" title=\"\" src=\"https://content.wolfram.com/uploads/sites/43/2022/06/video5_out_VideoCapture-Demonstrations-480p.mp4\" autoplay=\"\" loop=\"\" playsinline><br /></video>\n\t\t\t\t</div>\n<div class='IFL'\n\t\t\t\t\t<span class='close' id='07-1_out'>&#10005</span></p>\n<pre class='text' id='07-1_out_text'>VideoScreenCapture[{{0, 50}, {640, 498}}]</pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>Then for example you can analyze the time series of RGB color levels in the video that’s produced:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw063022img9.png\" alt='' title='' width='420' height='256' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw063022img9A_copy.txt\">\n\t\t\t\t\t<span class='close' id='z9_out'>&#10005</span></p>\n<pre class='text' id='z9_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>What if you want to screen record from a notebook? Well, then you can use the asynchronous dynamic recording mechanism that exists in <tt><a href='https://reference.wolfram.com/language/ref/VideoScreenCapture.html'>VideoScreenCapture</a></tt> just as it does in <tt><a href='https://reference.wolfram.com/language/ref/VideoCapture.html'>VideoCapture</a></tt>. </p>\n<p>By the way, both <tt><a href='https://reference.wolfram.com/language/ref/VideoCapture.html'>VideoCapture</a></tt> and <tt><a href='https://reference.wolfram.com/language/ref/VideoScreenCapture.html'>VideoScreenCapture</a></tt> by default capture audio. You can switch off audio recording either from the GUI, or with the option <tt><a href=\"https://reference.wolfram.com/language/ref/AudioInputDevice.html\">AudioInputDevice</a>→<a href=\"https://reference.wolfram.com/language/ref/None.html\">None</a></tt>.</p>\n<p>If you want to get fancy, you can screen record a notebook in which you are capturing video from your camera (which in turn shows you capturing a video, etc.):</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw063022img10.png\" alt='' title='' width='340' height='21' /></p>\n<p>\t\t\t\t\t<video loading='lazy' height=\"auto\" width=\"360\" style=\"margin-left:0px\" muted=\"\" alt=\"\" title=\"\" src=\"https://content.wolfram.com/uploads/sites/43/2022/06/video3_out_spikeyvideo.mp4\" autoplay=\"\" loop=\"\" playsinline><br /></video>\n\t\t\t\t</div>\n<div class='IFL'\n\t\t\t\t\t<span class='close' id='bl07-1_out'>&#10005</span></p>\n<pre class='text' id='bl07-1_out_text'>VideoScreenCapture[EvaluationNotebook[]]</pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>In addition to capturing video from real-time goings-on, you can also generate video directly from functions like <tt><a href='https://reference.wolfram.com/language/ref/AnimationVideo.html'>AnimationVideo</a></tt> and <tt><a href='https://reference.wolfram.com/language/ref/SlideShowVideo.html'>SlideShowVideo</a></tt>—as well as by “touring” an image using <tt><a href='https://reference.wolfram.com/language/ref/TourVideo.html'>TourVideo</a></tt>. In Version 13.1 there are some significant enhancements to <tt><a href='https://reference.wolfram.com/language/ref/TourVideo.html'>TourVideo</a></tt>.</p>\n<p>Take an animal scene and extract bounding boxes for elephants and zebras:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw063022img12B.png\" alt='' title='' width='607' height='204' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw063022img12D_copy.txt\">\n\t\t\t\t\t<span class='close' id='z12_out'>&#10005</span></p>\n<pre class='text' id='z12_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>Now you can make a tour video that visits each animal:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw063022img13A.png\" alt='' title='' width='304' height='251' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw063022img13A_copy.txt\">\n\t\t\t\t\t<span class='close' id='z13_out'>&#10005</span></p>\n<pre class='text' id='z13_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<video loading='lazy' height=\"auto\" width=\"215\" style=\"margin-left:0px\" muted=\"\" alt=\"\" title=\"\" src=\"https://content.wolfram.com/uploads/sites/43/2022/06/video9_out_elephant.mov\" autoplay=\"\" loop=\"\" playsinline><br /></video>\n\t\t\t\t</div>\n<div class='IFL'\n\t\t\t\t\t<span class='close' id='z13_out_text'></span></p>\n<pre class='text' id='z13_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>Define a path function of a variable <em>t</em>:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw063022img14.png\" alt='' title='' height='19' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw063022img14A_copy.txt\">\n\t\t\t\t\t<span class='close' id='z14_out'>&#10005</span></p>\n<pre class='text' id='z14_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw063022img15.png\" alt='' title='' width='389' height='162' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw063022img14A_copy.txt\">\n\t\t\t\t\t<span class='close' id='z15_out'>&#10005</span></p>\n<pre class='text' id='z15_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>Now we can use the path function to make a “spiralling” tour video:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/39/2022/07/sw063022img16D.png\" alt='' title='' width='366' height='59' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw063022img16A_copy.txt\">\n\t\t\t\t\t<span class='close' id='16A_out_text'></span></p>\n<pre class='text' id='16A_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<video loading='lazy' height=\"auto\" width=\"215\" style=\"margin-left:0px\" muted=\"\" alt=\"\" title=\"\" src=\"https://content.wolfram.com/uploads/sites/43/2022/06/video8_out_wolves.mov\" autoplay=\"\" loop=\"\" playsinline><br /></video>\n\t\t\t\t</div>\n<div class='IFL'\n\t\t\t\t\t<span class='close' id='16A_out_text'></span></p>\n<pre class='text' id='16A_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<h2 id='college-calculus'>College Calculus</h2>\n<p>Transforming college calculus was one of the early achievements of Mathematica. But even now we’re continuing to add functionality to make college calculus ever easier and smoother to do—and more immediately connectable to applications. We’ve always had the function <tt><a href='https://reference.wolfram.com/language/ref/D.html'>D</a></tt> for taking derivatives at a point. Now in Version 13.1 we’re adding <tt><a href='https://reference.wolfram.com/language/ref/ImplicitD.html'>ImplicitD</a></tt> for finding implicit derivatives. </p>\n<p>So, for example, it can find the derivative of <em>x<sup>y</sup></em> with respect to <em>x</em>, with <em>y</em> determined implicit by the constraint <em>x</em><sup>2</sup> + <em>y</em><sup>2</sup> = 1:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822calculusimg4.png\" alt='ImplicitD' title='ImplicitD' width='273' height='77' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822calculusimg4_copy.txt\">\n\t\t\t\t\t<span class='close' id='cc4_out'>&#10005</span></p>\n<pre class='text' id='cc4_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>Leave out the first argument and you’ll get the standard college calculus “find the slope of the tangent line to a curve”:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822calculusimg5.png\" alt='ImplicitD' title='ImplicitD' width='280' height='77' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822calculusimg5_copy.txt\">\n\t\t\t\t\t<span class='close' id='cc5_out'>&#10005</span></p>\n<pre class='text' id='cc5_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>So far all of this is a fairly straightforward repackaging of our longstanding calculus functionality. And indeed these kinds of implicit derivatives have been available for a long time in Wolfram|Alpha. But for Mathematica and the <a href='https://www.wolfram.com/language/'>Wolfram Language</a> we want everything to be as general as possible—and to support the kinds of things that show up in differential geometry, and in things like asymptotics and validation of implicit solutions to differential equations. So in addition to ordinary college-level calculus, <tt><a href='https://reference.wolfram.com/language/ref/ImplicitD.html'>ImplicitD</a></tt> can do things like finding a second implicit derivative on a curve defined by the intersection of two surfaces:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822calculusimg6.png\" alt='ImplicitD' title='ImplicitD' width='629' height='133' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822calculusimg6_copy.txt\">\n\t\t\t\t\t<span class='close' id='cc6_out'>&#10005</span></p>\n<pre class='text' id='cc6_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>In Mathematica and the Wolfram Language <tt><a href='https://reference.wolfram.com/language/ref/Integrate.html'>Integrate</a></tt> is a function that just gets you answers. (In Wolfram|Alpha you can ask for a step-by-step solution too.) But particularly for educational purposes—and sometimes also when pushing boundaries of what’s possible—it can be useful to do integrals in steps. And so in Version 13.1 we’ve added the function <tt><a href='https://reference.wolfram.com/language/ref/IntegrateChangeVariables.html'>IntegrateChangeVariables</a></tt> for changing variables in integrals. </p>\n<p>An immediate issue is that when you specify an integral with <tt><a href='https://reference.wolfram.com/language/ref/Integrate.html'>Integrate</a></tt><tt>[...]</tt>, <tt><a href='https://reference.wolfram.com/language/ref/Integrate.html'>Integrate</a></tt> will just go ahead and do the integral:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822calculusimg7.png\" alt='Integrate' title='Integrate' width='326' height='69' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822calculusimg7_copy.txt\">\n\t\t\t\t\t<span class='close' id='cc7_out'>&#10005</span></p>\n<pre class='text' id='cc7_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>But for <tt><a href='https://reference.wolfram.com/language/ref/IntegrateChangeVariables.html'>IntegrateChangeVariables</a></tt> you need an “undone” integral. And you can get this using <tt><a href='https://reference.wolfram.com/language/ref/Inactive.html'>Inactive</a></tt>, as in:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822calculusimg8.png\" alt='Inactive' title='Inactive' width='391' height='75' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822calculusimg8_copy.txt\">\n\t\t\t\t\t<span class='close' id='cc8_out'>&#10005</span></p>\n<pre class='text' id='cc8_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>And given this inactive form, we can use <tt><a href='https://reference.wolfram.com/language/ref/IntegrateChangeVariables.html'>IntegrateChangeVariables</a></tt> to do a “trig substitution”:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822calculusimg9.png\" alt='IntegrateChangeVariables' title='IntegrateChangeVariables' width='438' height='103' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822calculusimg9_copy.txt\">\n\t\t\t\t\t<span class='close' id='cc9_out'>&#10005</span></p>\n<pre class='text' id='cc9_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>The result is again an inactive form, now stating the integral differently. <tt><a href='https://reference.wolfram.com/language/ref/Activate.html'>Activate</a></tt> goes ahead and actually does the integral:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822calculusimg10.png\" alt='Activate' title='Activate' width='205' height='69' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822calculusimg10_copy.txt\">\n\t\t\t\t\t<span class='close' id='cc10_out'>&#10005</span></p>\n<pre class='text' id='cc10_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p><tt><a href='https://reference.wolfram.com/language/ref/IntegrateChangeVariables.html'>IntegrateChangeVariables</a></tt> can deal with multiple integrals as well—and with named coordinate systems. Here it’s transforming a double integral to polar coordinates:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822calculusimg11.png\" alt='IntegrateChangeVariables' title='IntegrateChangeVariables' width='608' height='105' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822calculusimg11_copy.txt\">\n\t\t\t\t\t<span class='close' id='cc11_out'>&#10005</span></p>\n<pre class='text' id='cc11_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>Although the basic “structural” transformation of variables in integrals is quite straightforward, the whole story of <tt><a href='https://reference.wolfram.com/language/ref/IntegrateChangeVariables.html'>IntegrateChangeVariables</a></tt> is considerably more complicated. “College-level” changes of variables are usually carefully arranged to come out easily. But in the more general case, <tt><a href='https://reference.wolfram.com/language/ref/IntegrateChangeVariables.html'>IntegrateChangeVariables</a></tt> ends up having to do nontrivial transformations of geometric regions, difficult simplifications of integrands subject to certain constraints, and so on.</p>\n<p>In addition to changing variables in integrals, Version 13.1 also introduces <tt><a href='https://reference.wolfram.com/language/ref/DSolveChangeVariables.html'>DSolveChangeVariables</a></tt> for changing variables in differential equations. Here it’s transforming the Laplace equation to polar coordinates:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822calculusimg12.png\" alt='DSolveChangeVariables' title='DSolveChangeVariables' width='481' height='101' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822calculusimg12_copy.txt\">\n\t\t\t\t\t<span class='close' id='cc12_out'>&#10005</span></p>\n<pre class='text' id='cc12_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>Sometimes a change of variables can just be a convenience. But sometimes (think General Relativity) it can lead one to a whole different view of a system. Here, for example, an exponential transformation converts the usual Cauchy–Euler equation to a form with constant coefficients: </p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822calculusimg13.png\" alt='DSolveChangeVariables' title='DSolveChangeVariables' width='617' height='59' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822calculusimg13_copy.txt\">\n\t\t\t\t\t<span class='close' id='cc13_out'>&#10005</span></p>\n<pre class='text' id='cc13_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<h2 id='fractional-calculus'>Fractional Calculus</h2>\n<p>The first derivative of <em>x</em><sup>2</sup> is 2<em>x</em>; the second derivative is 2. But what is the <img style=\"margin-bottom: -3px\" class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822onehalfth.png\" width='21' height='' /> derivative? It’s a question that was asked (for example by Leibniz) even in the first years of calculus. And by the 1800s Riemann and Liouville had given an answer—which in Version 13.1 can now be computed by the new <tt><a href='https://reference.wolfram.com/language/ref/FractionalD.html'>FractionalD</a></tt>:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822fractionalimg3.png\" alt='FractionalD' title='FractionalD' width='217' height='81' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822fractionalimg3_copy.txt\">\n\t\t\t\t\t<span class='close' id='3fractional_out'>&#10005</span></p>\n<pre class='text' id='3fractional_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>And, yes, do another <img class='' style=\"margin-bottom: -4px\" src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822onehalfth.png\" width='21' height='' /> derivative and you get back the 1<sup>st</sup> derivative:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822fractionalimg6.png\" alt='FractionalD' title='FractionalD' width='204' height='51' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822fractionalimg6_copy.txt\">\n\t\t\t\t\t<span class='close' id='6fractional_out'>&#10005</span></p>\n<pre class='text' id='6fractional_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>In the more general case we have:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822fractionalimg7.png\" alt='FractionalD' title='FractionalD' width='203' height='75' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822fractionalimg7_copy.txt\">\n\t\t\t\t\t<span class='close' id='7fractional_out'>&#10005</span></p>\n<pre class='text' id='7fractional_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>And this works even for negative derivatives, so that, for example, the (–1)<sup>st</sup> derivative is an ordinary integral:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822fractionalimg9.png\" alt='FractionalD' title='FractionalD' width='210' height='74' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822fractionalimg9_copy.txt\">\n\t\t\t\t\t<span class='close' id='9fractional_out'>&#10005</span></p>\n<pre class='text' id='9fractional_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>It can be at least as difficult to compute a fractional derivative as an integral. But <tt><a href='https://reference.wolfram.com/language/ref/FractionalD.html'>FractionalD</a></tt> can still often do it</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822fractionalimg10.png\" alt='FractionalD' title='FractionalD' width='330' height='94' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822fractionalimg10_copy.txt\">\n\t\t\t\t\t<span class='close' id='10fractional_out'>&#10005</span></p>\n<pre class='text' id='10fractional_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>though the result can quickly become quite complicated:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822fractionalimg11.png\" alt='FractionalD' title='FractionalD' width='470' height='153' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822fractionalimg11_copy.txt\">\n\t\t\t\t\t<span class='close' id='11fractional_out'>&#10005</span></p>\n<pre class='text' id='11fractional_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>Why is <tt><a href='https://reference.wolfram.com/language/ref/FractionalD.html'>FractionalD</a></tt> a separate function, rather than just being part of a generalization of <tt><a href='https://reference.wolfram.com/language/ref/D.html'>D</a></tt>? We discussed this for quite a while. And the reason we introduced the explicit <tt><a href='https://reference.wolfram.com/language/ref/FractionalD.html'>FractionalD</a></tt> is that there isn’t a unique definition of fractional derivatives. In fact, in Version 13.1 we also support the Caputo fractional derivative (or differintegral) <tt><a href='https://reference.wolfram.com/language/ref/CaputoD.html'>CaputoD</a></tt>.</p>\n<p>For the <img class='' style=\"margin-bottom: -3px\" src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822onehalfparen.png\" width='34' height='' /> derivative of <em>x</em><sup>2</sup>, the answer is still the same:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822fractionalimg14.png\" alt='CaputoD' title='CaputoD' width='197' height='81' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822fractionalimg14_copy.txt\">\n\t\t\t\t\t<span class='close' id='14fractional_out'>&#10005</span></p>\n<pre class='text' id='14fractional_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>But as soon as a function isn’t zero at <em>x</em> = 0 the answer can be different:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822fractionalimg15.png\" alt='CaputoD' title='CaputoD' width='409' height='94' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822fractionalimg15_copy.txt\">\n\t\t\t\t\t<span class='close' id='15fractional_out'>&#10005</span></p>\n<pre class='text' id='15fractional_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p><tt><a href='https://reference.wolfram.com/language/ref/CaputoD.html'>CaputoD</a></tt> is a particularly convenient definition of fractional differentiation when one’s dealing with Laplace transforms and differential equations. And in Version 13.1 we can now only compute <tt><a href='https://reference.wolfram.com/language/ref/CaputoD.html'>CaputoD</a></tt> but also do integral transforms and solve equations that involve it. </p>\n<p>Here’s a <img class='' style=\"margin-bottom: -3px\" src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822onehalfparen.png\" width='34' height='' />-order differential equation</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822fractionalimg17.png\" alt='DSolve' title='DSolve' width='348' height='59' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822fractionalimg17_copy.txt\">\n\t\t\t\t\t<span class='close' id='17fractional_out'>&#10005</span></p>\n<pre class='text' id='17fractional_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>and a <img style=\"margin-bottom: -4px\" class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822thetwoth.png\" width='34' height='' />-order one</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822fractionalimg19.png\" alt='DSolve' title='DSolve' width='606' height='152' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822fractionalimg19_copy.txt\">\n\t\t\t\t\t<span class='close' id='19fractional_out'>&#10005</span></p>\n<pre class='text' id='19fractional_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>as well as a &#960;<sup>th</sup>-order one:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822fractionalimg21.png\" alt='DSolve' title='DSolve' width='487' height='81' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822fractionalimg21_copy.txt\">\n\t\t\t\t\t<span class='close' id='21fractional_out'>&#10005</span></p>\n<pre class='text' id='21fractional_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>Note the appearance of <tt><a href='https://reference.wolfram.com/language/ref/MittagLefflerE.html'>MittagLefflerE</a></tt>. This function (which we introduced in <a href='https://writings.stephenwolfram.com/2012/11/mathematica-9-is-released-today/'>Version 9.0</a>) plays the same kind of role for fractional derivatives that <tt><a href='https://reference.wolfram.com/language/ref/Exp.html'>Exp</a></tt> plays for ordinary derivatives. </p>\n<h2 id='more-math-some-long-awaited'>More Math&mdash;Some Long Awaited</h2>\n<p>In February 1990 an internal bug report was filed against the still-in-development <a href='https://reference.wolfram.com/legacy/v2/'>Version 2.0</a> of Mathematica:</p>\n<table>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822moremathimg1.png\" alt='Bug report' title='Bug report' width='565' height='108' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822moremathimg1_copy.txt\">\n\t\t\t\t\t<span class='close' id='1moremath_out'>&#10005</span></p>\n<pre class='text' id='1moremath_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>It’s taken a long time (and similar issues have been reported many times), but in Version 13.1 we can finally close this bug! </p>\n<p>Consider the differential equation (the Clairaut equation):</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822moremathimg2.png\" alt='DSolve' title='DSolve' width='369' height='54' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822moremathimg2_copy.txt\">\n\t\t\t\t\t<span class='close' id='2moremath_out'>&#10005</span></p>\n<pre class='text' id='2moremath_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>What <tt><a href='https://reference.wolfram.com/language/ref/DSolve.html'>DSolve</a></tt> does by default is to give the generic solution to this equation, in terms of the parameter <em>&#120148;</em><sub>1</sub>. But the subtle point (which in optics is associated with caustics) is that the family of solutions for different values of <em>&#120148;</em><sub>1</sub> has an envelope which isn’t itself part of the family of solutions, but is also a solution:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822moremathimg5.png\" alt='Plot' title='Plot' width='616' height='280' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822moremathimg5_copy.txt\">\n\t\t\t\t\t<span class='close' id='5moremath_out'>&#10005</span></p>\n<pre class='text' id='5moremath_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>In Version 13.1 you can request that solution with the option <tt><a href='https://reference.wolfram.com/language/ref/IncludeSingularSolutions.html'>IncludeSingularSolutions</a></tt>→<tt><a href='https://reference.wolfram.com/language/ref/True.html'>True</a></tt>:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822moremathimg6.png\" alt='DSolve' title='DSolve' width='597' height='69' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822moremathimg6_copy.txt\">\n\t\t\t\t\t<span class='close' id='6moremath_out'>&#10005</span></p>\n<pre class='text' id='6moremath_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>And here’s a plot of it:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822moremathimg7.png\" alt='Plot' title='Plot' width='358' height='249' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822moremathimg7_copy.txt\">\n\t\t\t\t\t<span class='close' id='7moremath_out'>&#10005</span></p>\n<pre class='text' id='7moremath_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p><tt><a href='https://reference.wolfram.com/language/ref/DSolve.html'>DSolve</a></tt> was a new function (back in 1991) in Version 2.0. Another new function in Version 2.0 was <tt><a href='https://reference.wolfram.com/language/ref/Residue.html'>Residue</a></tt>. And in Version 13.1 we’re also adding an extension to <tt><a href='https://reference.wolfram.com/language/ref/Residue.html'>Residue</a></tt>: the function <tt><a href='https://reference.wolfram.com/language/ref/ResidueSum.html'>ResidueSum</a></tt>. And while <tt><a href='https://reference.wolfram.com/language/ref/Residue.html'>Residue</a></tt> finds the residue of a complex function at a specific point, <tt><a href='https://reference.wolfram.com/language/ref/ResidueSum.html'>ResidueSum</a></tt> finds a sum of residues.</p>\n<p>This computes the sum of all residues for a function, across the whole complex plane:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822moremathimg8.png\" alt='ResidueSum' title='ResidueSum' width='261' height='73' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822moremathimg8_copy.txt\">\n\t\t\t\t\t<span class='close' id='8moremath_out'>&#10005</span></p>\n<pre class='text' id='8moremath_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>This computes the sum of residues within a particular region, in this case the unit disk:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822moremathimg9.png\" alt='ResidueSum' title='ResidueSum' width='317' height='78' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822moremathimg9_copy.txt\">\n\t\t\t\t\t<span class='close' id='9moremath_out'>&#10005</span></p>\n<pre class='text' id='9moremath_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<h2 id='create-your-own-guide-to-functions-pages'>Create Your Own &ldquo;Guide to Functions&rdquo; Pages</h2>\n<p>An important part of the built-in documentation for the <a href='https://www.wolfram.com/language/'>Wolfram Language</a> are what we call “guide pages”—pages like the following that organize functions (and other constructs) to give an overall “cognitive map” and summary of some area:</p>\n<table>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822guidepagesimg1.png\" alt='Sample guide page' title='Sample guide page' width='575' height='339' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822guidepagesimg1_copy.txt\">\n\t\t\t\t\t<span class='close' id='gp1_out'>&#10005</span></p>\n<pre class='text' id='gp1_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>In Version 13.1 it’s now easy to create your own custom guide pages. You can list built-in functions or other constructs, as well as things from the <a href='https://resources.wolframcloud.com/FunctionRepository'>Wolfram Function Repository</a> and other repositories. </p>\n<p>Go to the “root page” of the Documentation Center and press the icon:</p>\n<table >\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822guidepagesimg2.png\" alt='Documentation Center' title='Documentation Center' width='575' height='150' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822guidepagesimg2_copy.txt\">\n\t\t\t\t\t<span class='close' id='gp2_out'>&#10005</span></p>\n<pre class='text' id='gp2_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>You’ll get a blank custom guide page:</p>\n<table >\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822guidepagesimg3.png\" alt='Sample guide page teamplate' title='Sample guide page template' width='546' height='380' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822guidepagesimg3_copy.txt\">\n\t\t\t\t\t<span class='close' id='gp3_out'>&#10005</span></p>\n<pre class='text' id='gp3_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>Fill in the guide page however you want, then use <tt><a href='https://reference.wolfram.com/language/ref/Deploy.html'>Deploy</a></tt> to deploy the page either locally, or to your cloud account. Either way, the page will now show up in the menu from the top of the root guide page (and they’ll also show up in search):</p>\n<table>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822guidepagesimg4.png\" alt='Documentation Center' title='Documentation Center' width='575' height='149' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822guidepagesimg4_copy.txt\">\n\t\t\t\t\t<span class='close' id='gp4_out'>&#10005</span></p>\n<pre class='text' id='gp4_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>You might end up creating just one custom guide page for your favorite functions. Or you might create several, say one for each task or topic you commonly deal with. Guide pages aren’t about putting in the effort to create full-scale documentation; they’re much more lightweight, and aimed more at providing quick (“what was that function called?”) reminders and “big-picture” maps—leveraging all the specific function and other documentation that already exists.</p>\n<h2 id='visual-effects-beautification'>Visual Effects &#038; Beautification</h2>\n<p>At first it seemed like a minor feature. But once we’d implemented it, we realized it was much more useful than we’d expected. Just as you can style a graphics object with its color (and, as of <a href='https://writings.stephenwolfram.com/2021/12/launching-version-13-0-of-wolfram-language-mathematica/'>Version 13.0</a>, its filling pattern), now in Version 13.1 you can style it with its drop shadowing:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822VisFXimg1.png\" alt='' title='' width='504' height='99' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822VisFXimg1A_copy.txt\">\n\t\t\t\t\t<span class='close' id='1A_out'>&#10005</span></p>\n<pre class='text' id='1A_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>Drop shadowing turns out to be a nice way to “bring graphics to life”</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822VisFXimg2.png\" alt='' title='' width='429' height='206' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822VisFXimg2A_copy.txt\">\n\t\t\t\t\t<span class='close' id='2A_out'>&#10005</span></p>\n<pre class='text' id='2A_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>or to emphasize one element over others:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822VisFXimg3.png\" alt='' title='' width='576' height='199' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822VisFXimg3_copy.txt\">\n\t\t\t\t\t<span class='close' id='3A_out'>&#10005</span></p>\n<pre class='text' id='3A_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>It works well in geo graphics as well:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822VisFXimg4.png\" alt='' title='' width='480' height='259' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822VisFXimg4A_copy.txt\">\n\t\t\t\t\t<span class='close' id='4A_out'></span></p>\n<pre class='text' id='4A_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p><tt><a href='https://reference.wolfram.com/language/ref/DropShadowing.html'>DropShadowing</a></tt> allows detailed control over the shadows: what direction they’re in, how blurred they are and what color they are:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822VisFXimg5.png\" alt='' title='' width='430' height='119' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822VisFXimg5A_copy.txt\">\n\t\t\t\t\t<span class='close' id='5A_out'>&#10005</span></p>\n<pre class='text' id='5A_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>Drop shadowing is more complicated “under the hood” than one might imagine. And when possible it actually works using hardware GPU pixel shaders—the same technology that we’ve used since <a href='https://writings.stephenwolfram.com/2021/05/launching-version-12-3-of-wolfram-language-mathematica/'>Version 12.3</a> to implement material-based surface textures for 3D graphics. In Version 13.1 we’ve explicitly exposed some well-known underlying types of 3D shading. Here’s a geodesic polyhedron (yes, that’s another new function in Version 13.1), with its surface normals added (using the again new function <tt><a href='https://reference.wolfram.com/language/ref/EstimatedPointNormals.html'>EstimatedPointNormals</a></tt>):</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822VisFXimg6.png\" alt='' title='' width='444' height='81' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822VisFXimg6A_copy.txt\">\n\t\t\t\t\t<span class='close' id='6A_out'>&#10005</span></p>\n<pre class='text' id='6A_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>Here’s the most basic form of shading: flat shading of each facet (and the specularity in this case doesn’t “catch” any facets):</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822VisFXimg7.png\" alt='' title='' width='433' height='223' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822VisFXimg7A_copy.txt\">\n\t\t\t\t\t<span class='close' id='7A_out'>&#10005</span></p>\n<pre class='text' id='7A_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>Here now is Gouraud shading, with a somewhat-faceted glint:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822VisFXimg8.png\" alt='' title='' width='465' height='230' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822VisFXimg8A_copy.txt\">\n\t\t\t\t\t<span class='close' id='8A_out'>&#10005</span></p>\n<pre class='text' id='8A_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>And then there’s Phong shading, looking somewhat more natural for a sphere:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822VisFXimg9.png\" alt='' title='' width='450' height='223' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822VisFXimg9A_copy.txt\">\n\t\t\t\t\t<span class='close' id='9A_out'>&#10005</span></p>\n<pre class='text' id='9A_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>Ever since <a href='https://reference.wolfram.com/legacy/v1/'>Version 1.0</a>, we’ve had an interactive way to rotate—and zoom into—3D graphics. (Yes, the mechanism was a bit primitive 34 years ago, but it rapidly got to more or less its modern form.) But in Version 13.1 we’re adding something new: the ability to “dolly” into a 3D graphic, imitating what would happen if you actually walked into a physical version of the graphic, as opposed to just zooming your camera:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822VisFXimg10.png\" alt='' title='' width='601' height='409' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822VisFXimg10_copy.txt\">\n\t\t\t\t\t<span class='close' id='10A_out'>&#10005</span></p>\n<pre class='text' id='10A_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p><video width=\"620\" height=\"380\" controls><source src=\"https://content.wolfram.com/uploads/sites/43/2022/06/video1_out_dolly-zoom-v4.mp4\" type=\"video/mp4\"></video>\t</p>\n<p>And, yes, things can get a bit surreal (or “treky”)—here dollying in and then zooming out:</p>\n<p><video width=\"315\" height=\"400\" controls><source src=\"https://content.wolfram.com/uploads/sites/43/2022/06/video2_out_graphic3d-whacky2.mp4\" type=\"video/mp4\"></video></p>\n<h2 id='3d-voronoi'>3D Voronoi!</h2>\n<p>There are some capabilities that—over the course of years—have been requested over and over again. In the past these have included infinite undo, high dpi displays, multiple axis plots, and others. And I’m happy to say that most of these have now been taken care of. But there’s one—seemingly obscure—“straggler” that I’ve heard about for well over 25 years, and that I’ve actually also wanted myself quite a few times: 3D Voronoi diagrams. Well, in Version 13.1, they’re here.</p>\n<p>Set up 25 random points in 3D:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822voronoiimg1.png\" alt='pts = RandomReal' title='pts = RandomReal' width='239' height='21' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822voronoiimg1_copy.txt\">\n\t\t\t\t\t<span class='close' id='1voronoi_out'>&#10005</span></p>\n<pre class='text' id='1voronoi_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822voronoiimg2.png\" alt='Graphics3D' title='Graphics3D' width='329' height='209' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822voronoiimg2_copy.txt\">\n\t\t\t\t\t<span class='close' id='2voronoi_out'>&#10005</span></p>\n<pre class='text' id='2voronoi_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>Now make a Voronoi mesh for these points:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822voronoiimg3.png\" alt='VoronoiMesh' title='VoronoiMesh' width='292' height='299' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822voronoiimg3_copy.txt\">\n\t\t\t\t\t<span class='close' id='3voronoi_out'>&#10005</span></p>\n<pre class='text' id='3voronoi_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>To “see inside” we can use opacity:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822voronoiimg4.png\" alt='Graphics3D' title='Graphics3D' width='464' height='315' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822voronoiimg4_copy.txt\">\n\t\t\t\t\t<span class='close' id='4voronoi_out'>&#10005</span></p>\n<pre class='text' id='4voronoi_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>Why was this so hard? In a Voronoi there’s a cell that surrounds each original point, and includes everywhere that’s closer to that point than to any other. We’ve had 2D Voronoi meshes for a long time:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822voronoiimg5.png\" alt='VoronoiMesh' title='VoronoiMesh' width='297' height='211' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822voronoiimg5_copy.txt\">\n\t\t\t\t\t<span class='close' id='5voronoi_out'>&#10005</span></p>\n<pre class='text' id='5voronoi_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>But there’s something easier about the 2D case. The issue is not so much the algorithm for generating the cells as it is how the cells can be represented in such a way that they’re useful for subsequent computations. In the 2D case each cell is just a polygon.</p>\n<p>But in the 3D case the cells are polyhedra, and to make a Voronoi mesh we have to have a polyhedral mesh where all the polyhedra fit together. And it’s taken us many years to build the large tower of computational geometry necessary to support this. There’s a somewhat simpler case based purely on cells that are always either simplices or hexahedra—that we’ve used for finite-element solutions to PDEs for a while. But in a true 3D Voronoi that’s not enough: the cells can be any (convex) polyhedral shape.</p>\n<p>Here are the “puzzle piece” cells for the 3D Voronoi mesh we made above:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822voronoiimg6.png\" alt='Row' title='Row' width='619' height='431' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822voronoiimg6_copy.txt\">\n\t\t\t\t\t<span class='close' id='6voronoi_out'>&#10005</span></p>\n<pre class='text' id='6voronoi_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<h2 id='reconstructing-geometry-from-point-clouds'>Reconstructing Geometry from Point Clouds</h2>\n<p>Pick 500 random points inside an annulus:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822geometryimg1.png\" alt='pts = RandomPoint' title='pts = RandomPoint' width='283' height='21' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822geometryimg1_copy.txt\">\n\t\t\t\t\t<span class='close' id='1geometry_out'>&#10005</span></p>\n<pre class='text' id='1geometry_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822geometryimg2.png\" alt='Graphics' title='Graphics' width='211' height='200' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822geometryimg2_copy.txt\">\n\t\t\t\t\t<span class='close' id='2geometry_out'>&#10005</span></p>\n<pre class='text' id='2geometry_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>Version 13.1 now has a general function reconstructing geometry from a cloud of points:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822geometryimg3.png\" alt='ReconstructionMesh' title='ReconstructionMesh' width='212' height='198' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822geometryimg3_copy.txt\">\n\t\t\t\t\t<span class='close' id='3geometry_out'>&#10005</span></p>\n<pre class='text' id='3geometry_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>(Of course, given only a finite number of points, the reconstruction can’t be expected to be perfect.)</p>\n<p>The function also works in 3D:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822geometryimg4.png\" alt='ReconstructionMesh' title='ReconstructionMesh' width='384' height='210' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822geometryimg4_copy.txt\">\n\t\t\t\t\t<span class='close' id='4geometry_out'>&#10005</span></p>\n<pre class='text' id='4geometry_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822geometryimg5.png\" alt='ReconstructionMesh' title='ReconstructionMesh' width='441' height='141' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822geometryimg5_copy.txt\">\n\t\t\t\t\t<span class='close' id='5geometry_out'>&#10005</span></p>\n<pre class='text' id='5geometry_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p><tt><a href='https://reference.wolfram.com/language/ref/ReconstructionMesh.html'>ReconstructionMesh</a></tt> is a general superfunction that uses a variety of methods, including extended versions of the functions <tt><a href='https://reference.wolfram.com/language/ref/ConcaveHullMesh.html'>ConcaveHullMesh</a></tt> and <tt><a href='https://reference.wolfram.com/language/ref/GradientFittedMesh.html'>GradientFittedMesh</a></tt> that were introduced in Version 13.0. And in addition to reconstructing “solid objects”, it can also reconstruct lower-dimensional things like curves and surfaces:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822geometryimg6.png\" alt='ReconstructionMesh' title='ReconstructionMesh' width='367' height='199' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822geometryimg6_copy.txt\">\n\t\t\t\t\t<span class='close' id='6geometry_out'>&#10005</span></p>\n<pre class='text' id='6geometry_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>A related function new in Version 13.1 is <tt><a href='https://reference.wolfram.com/language/ref/EstimatedPointNormals.html'>EstimatedPointNormals</a></tt>, which reconstructs not the geometry itself, but normal vectors to each element in the geometry:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822geometryimg7.png\" alt='ListVectorPlot' title='ListVectorPlot' width='605' height='274' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822geometryimg7_copy.txt\">\n\t\t\t\t\t<span class='close' id='7geometry_out'>&#10005</span></p>\n<pre class='text' id='7geometry_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<h2 id='new-in-visualization'>New in Visualization</h2>\n<p>In every new version for the past 30 years we’ve steadily expanded our visualization capabilities, and Version 13.1 is no exception. One function we’ve added is <tt><a href='https://reference.wolfram.com/language/ref/TernaryListPlot.html'>TernaryListPlot</a></tt>—an analog of <tt><a href='https://reference.wolfram.com/language/ref/ListPlot.html'>ListPlot</a></tt> that conveniently plots triples of values where what one’s trying to emphasize is their ratios. For example let’s plot data from our knowledgebase on the sources of electricity for different countries: </p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/062822visualimg1.png\" alt='TernaryListPlot' title='TernaryListPlot' width='619' height='394' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/062822visualimg1_copy.txt\">\n\t\t\t\t\t<span class='close' id='1visual_out'>&#10005</span></p>\n<pre class='text' id='1visual_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>The plot shows the “energy mixture” for different countries, with the ones on the bottom axis being those with zero nuclear. Inserting colors for each axis, along with grid lines, helps explain how to read the plot:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/062822visualimg2.png\" alt='TernaryListPlot' title='TernaryListPlot' width='614' height='394' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/062822visualimg2_copy.txt\">\n\t\t\t\t\t<span class='close' id='2visual_out'>&#10005</span></p>\n<pre class='text' id='2visual_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>Most of the time plots are plotting numbers, or at least quantities. In <a href='https://writings.stephenwolfram.com/2021/12/launching-version-13-0-of-wolfram-language-mathematica/'>Version 13.0</a>, we extended functions like <tt><a href='https://reference.wolfram.com/language/ref/ListPlot.html'>ListPlot</a></tt> to also accept dates. In Version 13.1 we’re going much further, and introducing the possibility of plotting what amount to purely symbolic values.</p>\n<p>Let’s say our data consists of letters A through C:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/062822visualimg3.png\" alt='data = RandomChoice' title='data = RandomChoice' width='322' height='51' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/062822visualimg3_copy.txt\">\n\t\t\t\t\t<span class='close' id='3visual_out'>&#10005</span></p>\n<pre class='text' id='3visual_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>How do we plot these? In Version 13.1 we just specify an ordinal scale:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/062822visualimg4.png\" alt='ListPlot' title='ListPlot' width='593' height='234' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/062822visualimg4_copy.txt\">\n\t\t\t\t\t<span class='close' id='4visual_out'>&#10005</span></p>\n<pre class='text' id='4visual_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p><tt><a href='https://reference.wolfram.com/language/ref/OrdinalScale.html'>OrdinalScale</a></tt> lets you specify that certain symbolic values are to be treated as if they are in a specified order. There’s also the concept of a nominal scale—represented by <tt><a href='https://reference.wolfram.com/language/ref/NominalScale.html'>NominalScale</a></tt>—in which different symbolic values correspond to different “categories”, but in no particular order. </p>\n<h2 id='representing-amounts-of-chemicals'>Representing Amounts of Chemicals</h2>\n<p><tt><a href='https://reference.wolfram.com/language/ref/Molecule.html'>Molecule</a></tt> lets one symbolically represent a molecule. <tt><a href='http://reference.wolfram.com/language/ref/Quantity.html'>Quantity</a></tt> lets one symbolically represent a quantity with units. In Version 13.1 we now have the new construct <tt><a href='http://reference.wolfram.com/language/ref/ChemicalInstance.html'>ChemicalInstance</a></tt> that’s in effect a merger of these, allowing one to represent a certain quantity of a certain chemical.</p>\n<p>This gives a symbolic representation of 1 liter of acetone (by default at standard temperature and pressure):</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822fivesectionsimg1.png\" alt='ChemicalInstance' title='ChemicalInstance' width='336' height='69' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822fivesectionsimg1_copy.txt\">\n\t\t\t\t\t<span class='close' id='1five_out'>&#10005</span></p>\n<pre class='text' id='1five_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>We can ask what the mass of this instance of this chemical is:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822fivesectionsimg2.png\" alt='ChemicalInstance' title='ChemicalInstance' width='394' height='65' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822fivesectionsimg2_copy.txt\">\n\t\t\t\t\t<span class='close' id='2five_out'>&#10005</span></p>\n<pre class='text' id='2five_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p><tt><a href='http://reference.wolfram.com/language/ref/ChemicalConvert.html'>ChemicalConvert</a></tt> lets us do a conversion returning particular units:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822fivesectionsimg3.png\" alt='ChemicalConvert' title='ChemicalConvert' width='529' height='69' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822fivesectionsimg3_copy.txt\">\n\t\t\t\t\t<span class='close' id='3five_out'>&#10005</span></p>\n<pre class='text' id='3five_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>Here’s instead a conversion to moles:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822fivesectionsimg4.png\" alt='ChemicalConvert' title='ChemicalConvert' width='525' height='69' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822fivesectionsimg4_copy.txt\">\n\t\t\t\t\t<span class='close' id='4five_out'>&#10005</span></p>\n<pre class='text' id='4five_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>This directly gives the amount of substance that 1 liter of acetone corresponds to:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822fivesectionsimg5.png\" alt='ChemicalInstance' title='ChemicalInstance' width='414' height='60' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822fivesectionsimg5_copy.txt\">\n\t\t\t\t\t<span class='close' id='5five_out'>&#10005</span></p>\n<pre class='text' id='5five_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>This generates a sequence of straight-chain hydrocarbons:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' style=\"margin-left: -5px\" src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822fivesectionsimg7.png\" alt='GraphicsBox' title='GraphicsBox' width='579' height='' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822fivesectionsimg6_copy.txt\">\n\t\t\t\t\t<span class='close' id='6five_out'>&#10005</span></p>\n<pre class='text' id='6five_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>Here’s the amount of substance corresponding to 1 g of each of these chemicals:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822fivesectionsimg8.png\" alt='Table' title='Table' width='590' height='86' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822fivesectionsimg8_copy.txt\">\n\t\t\t\t\t<span class='close' id='8five_out'>&#10005</span></p>\n<pre class='text' id='8five_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p><tt><a href='http://reference.wolfram.com/language/ref/ChemicalInstance.html'>ChemicalInstance</a></tt> lets you specify not just the amount of a substance, but also its state, in particular temperature and pressure. Here we’re converting 1 kg of water at 4° C to be represented in terms of volume:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822fivesectionsimg9.png\" alt='ChemicalConvert' title='ChemicalConvert' width='562' height='138' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822fivesectionsimg9_copy.txt\">\n\t\t\t\t\t<span class='close' id='9five_out'>&#10005</span></p>\n<pre class='text' id='9five_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<h2 id='chemistry-as-rule-application:-symbolic-pattern-reactions'>Chemistry as Rule Application: Symbolic Pattern Reactions</h2>\n<p>At the core of the <a href='https://www.wolfram.com/language/'>Wolfram Language</a> is the abstract idea of applying transformations to symbolic expressions. And at some level one can view chemistry and chemical reactions as a physical instantiation of this idea, where one’s not dealing with abstract symbolic constructs, but instead with actual molecules and atoms.</p>\n<p>In Version 13.1 we’re introducing <a href=\"http://reference.wolfram.com/language/ref/PatternReaction.html\"><tt>PatternReaction</tt></a> as a symbolic representation for classes of chemical reactions—in effect providing an analog for chemistry of <tt><a href='http://reference.wolfram.com/language/ref/Rule.html'>Rule</a></tt> for general symbolic expressions. </p>\n<p>Here’s an example of a “pattern reaction”:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822fivesectionsimg10.png\" alt='PatternReaction' title='PatternReaction' width='594' height='238' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822fivesectionsimg10_copy.txt\">\n\t\t\t\t\t<span class='close' id='10five_out'>&#10005</span></p>\n<pre class='text' id='10five_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>The first argument specifies a pair of “reactant” molecule patterns to be transformed into “product” molecule patterns. The second argument specifies which atoms in which reactant molecules map to which atoms in which product molecules. If you mouse over the resulting pattern reaction, you’ll see corresponding atoms “light up”:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822fivesectionsimg11.png\" alt='PatternReaction output' title='PatternReaction output' width='447' height='121' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822fivesectionsimg11_copy.txt\">\n\t\t\t\t\t<span class='close' id='11five_out'>&#10005</span></p>\n<pre class='text' id='11five_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>Given a pattern reaction, we can use <tt>ApplyReaction</tt> to apply the reaction to concrete molecules:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822fivesectionsimg12.png\" alt='ApplyReaction' title='ApplyReaction' width='544' height='187' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822fivesectionsimg12_copy.txt\">\n\t\t\t\t\t<span class='close' id='12five_out'>&#10005</span></p>\n<pre class='text' id='12five_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>Here are plots of the resulting product molecules:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822fivesectionsimg13.png\" alt='MoleculePlot' title='MoleculePlot' width='406' height='122' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822fivesectionsimg13_copy.txt\">\n\t\t\t\t\t<span class='close' id='13five_out'>&#10005</span></p>\n<pre class='text' id='13five_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>The molecule patterns in the pattern reaction are matched against subparts of the concrete molecules, then the transformation is done, leaving the other parts of the molecules unchanged. In a sense it’s the direct analog of something like</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822fivesectionsimg14.png\" alt='{{a, b}, {c, d}} /. b -> {u, v}' title='{{a, b}, {c, d}} /. b -> {u, v}' width='208' height='51' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822fivesectionsimg14_copy.txt\">\n\t\t\t\t\t<span class='close' id='14five_out'>&#10005</span></p>\n<pre class='text' id='14five_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>where the <tt>b</tt> in the symbolic expression is replaced, and the result is “knitted back” to fill in where the <tt>b</tt> used to be.</p>\n<p>You can do what amounts to various kinds of “chemical functional programming” with <tt><a href='http://reference.wolfram.com/language/ref/ApplyReaction.html'>ApplyReaction</a></tt> and <tt><a href='http://reference.wolfram.com/language/ref/PatternReaction.html'>PatternReaction</a></tt>. Here’s an example where we’re essentially building up a polymer by successive nesting of a reaction: </p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822fivesectionsimg15.png\" alt='NestList' title='NestList' width='604' height='229' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822fivesectionsimg15_copy.txt\">\n\t\t\t\t\t<span class='close' id='15five_out'>&#10005</span></p>\n<pre class='text' id='15five_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>&nbsp;</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822fivesectionsimg16A.png\" alt='MoleculePlot' title='MoleculePlot' width='607' height='361' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822fivesectionsimg16_copy.txt\">\n\t\t\t\t\t<span class='close' id='16five_out'>&#10005</span></p>\n<pre class='text' id='16five_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>It’s often convenient to build pattern reactions symbolically using Wolfram Language “chemical primitives”. But <tt><a href='http://reference.wolfram.com/language/ref/PatternReaction.html'>PatternReaction</a></tt> also lets you specify reactions as SMARTS strings:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822fivesectionsimg17.png\" alt='PatternReaction' title='PatternReaction' width='628' height='147' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822fivesectionsimg17_copy.txt\">\n\t\t\t\t\t<span class='close' id='17five_out'>&#10005</span></p>\n<pre class='text' id='17five_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<h2 id='pdes-for-rods,-rubber-and-more'>PDEs for Rods, Rubber and More</h2>\n<p>It’s been a 25-year journey, steadily increasing our built-in PDE capabilities. And in Version 13.1 we’ve added several (admittedly somewhat technical) features that have been much requested, and are important for solving particular kinds of real-world PDE problems. The first feature is being able to set up a PDE as axisymmetric. Normally a 2D diffusion term would be assumed Cartesian:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822fivesectionsimg18.png\" alt='DiffusionPDETerm' title='DiffusionPDETerm' width='296' height='55' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822fivesectionsimg18_copy.txt\">\n\t\t\t\t\t<span class='close' id='18five_out'>&#10005</span></p>\n<pre class='text' id='18five_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>But now you can say you’re dealing with an axisymmetric system, with your coordinates being interpreted as radius and height, and everything assumed to be symmetrical in the azimuthal direction:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822fivesectionsimg19.png\" alt='DiffusionPDETerm' title='DiffusionPDETerm' width='596' height='69' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822fivesectionsimg19_copy.txt\">\n\t\t\t\t\t<span class='close' id='19five_out'>&#10005</span></p>\n<pre class='text' id='19five_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>What’s important about this is not just that it makes it easy to set up certain kinds of equations, but also that in solving equations axial symmetry can be assumed, allowing much more efficient methods to be used:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/07/sw062822fivesectionsimg20B.png\" alt='RegionPlot3D' title='RegionPlot3D' width='732' height='430' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822fivesectionsimg20_copy.txt\">\n\t\t\t\t\t<span class='close' id='20five_out'>&#10005</span></p>\n<pre class='text' id='20five_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>Also in Version 13.1 is an extension to the solid mechanics modeling framework introduced in <a href='https://writings.stephenwolfram.com/2021/12/launching-version-13-0-of-wolfram-language-mathematica/'>Version 13.0</a>. Just as there’s viscosity that damps out motion in fluids, so there’s a similar phenomenon that damps out motion in solids. It’s more of an engineering story, and it’s usually described in terms of two parameters: mass damping and stiffness damping. And now in Version 13.1 we support this kind of so-called Rayleigh damping in our modeling framework. </p>\n<p>Another phenomenon included in Version 13.1 is hyperelasticity. If you bend something like metal beyond a certain point (but not so far that it breaks), it’ll stay bent. But materials like rubber and foam (and some biological tissues) can “bounce back” from basically any deformation. </p>\n<p>Let’s imagine that we have a square of rubber-like material. We anchor it on the left, and then we pull it on the right with a certain force. What does it do?</p>\n<p>This defines the properties of our material:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822fivesectionsimg21.png\" alt='pars' title='pars' width='609' height='46' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822fivesectionsimg21_copy.txt\">\n\t\t\t\t\t<span class='close' id='21five_out'>&#10005</span></p>\n<pre class='text' id='21five_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>We define variables for the problem, representing <em>x</em> and <em>y</em> displacements by <em>u</em> and <em>v</em>:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822fivesectionsimg22.png\" alt='vars' title='vars' width='243' height='21' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822fivesectionsimg22_copy.txt\">\n\t\t\t\t\t<span class='close' id='22five_out'>&#10005</span></p>\n<pre class='text' id='22five_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>Now we can set up our whole problem, and solve the PDEs for it for each value of the force:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822fivesectionsimg24.png\" alt='GraphicsBox' title='GraphicsBox' width='490' height='248' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822fivesectionsimg23_copy.txt\">\n\t\t\t\t\t<span class='close' id='23five_out'>&#10005</span></p>\n<pre class='text' id='23five_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<table >\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div></div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822fivesectionsimg24_copy.txt\">\n\t\t\t\t\t<span class='close' id='24five_out'>&#10005</span></p>\n<pre class='text' id='24five_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>Then one can plot the results, and see the rubber being nonlinearly stretched:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822fivesectionsimg25A.png\" alt='VectorDisplacementPlot' title='VectorDisplacementPlot' width='565' height='' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822fivesectionsimg25_copy.txt\">\n\t\t\t\t\t<span class='close' id='25five_out'>&#10005</span></p>\n<pre class='text' id='25five_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>There’s in the end considerable depth in our handling of PDE-based modeling, and our increasing ability to do “multiphysics” computations that span multiple types of physics (mechanical, thermal, electromagnetic, acoustic, &#8230;). And by now we’ve got nearly 1000 pages of documentation purely about PDE-based modeling. And for example in Version 13.1 we’ve added a monograph specifically about <a href=\"https://reference.wolfram.com/language/PDEModels/tutorial/StructuralMechanics/Hyperelasticity.html#509267359\">hyperelasticity</a>, as well as expanded our collection of documented PDE models:</p>\n<p>\t<tabl></p>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822fivesectionsimg26.png\" alt='PDE models overview' title='PDE models overview' width='434' height='340' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822fivesectionsimg26_copy.txt\">\n\t\t\t\t\t<span class='close' id='26five_out'>&#10005</span></p>\n<pre class='text' id='26five_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<h2 id='interpretable-machine-learning'>Interpretable Machine Learning</h2>\n<p>Let’s say you have trained a machine learning model and you apply it to a particular input. It gives you some result. But why? What were the important features in the input that led it to that result? In Version 13.1 we’re introducing several functions that try to answer such questions.</p>\n<p>Here’s some simple “training data”:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822fivesectionsimg28.png\" alt='data = Flatten' title='data = Flannet' width='570' height='111' /></p>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822fivesectionsimg27_copy.txt\">\n\t\t\t\t\t<span class='close' id='27five_out'>&#10005</span></p>\n<pre class='text' id='27five_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>We can use machine learning to make a predictor for this data:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822fivesectionsimg29.png\" alt='pf = Predict' title='pf = Predict' width='444' height='81' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822fivesectionsimg29_copy.txt\">\n\t\t\t\t\t<span class='close' id='29five_out'>&#10005</span></p>\n<pre class='text' id='29five_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>Applying the predictor to a particular input gives us a prediction:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822fivesectionsimg30.png\" alt='pf' title='pf' width='211' height='51' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822fivesectionsimg30_copy.txt\">\n\t\t\t\t\t<span class='close' id='30five_out'>&#10005</span></p>\n<pre class='text' id='30five_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>What was important in making this prediction? The <tt>\"SHAPValues\"</tt> property introduced in Version 12.3 tells us what contribution each feature made to the result; in this case <tt>v</tt> was more important than <tt>u</tt> in determining the value of the prediction:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822fivesectionsimg31.png\" alt='pf' title='pf' width='314' height='51' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822fivesectionsimg31_copy.txt\">\n\t\t\t\t\t<span class='close' id='31five_out'>&#10005</span></p>\n<pre class='text' id='31five_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>But what about in general, for all inputs? The new function <tt><a href='http://reference.wolfram.com/language/ref/FeatureImpactPlot.html'>FeatureImpactPlot</a></tt> gives a visual representation of the contribution or “impact” of each feature in each input on the output of the predictor:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822fivesectionsimg32.png\" alt='FeatureImpactPlot' title='FeatureImpactPlot' width='384' height='251' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822fivesectionsimg32_copy.txt\">\n\t\t\t\t\t<span class='close' id='32five_out'>&#10005</span></p>\n<pre class='text' id='32five_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>What does this plot mean? It’s basically showing how often there are what contributions from values of the two input features. And with this particular predictor we see that there’s a wide range of contributions from both features.</p>\n<p>If we use a different method to create the predictor, the results can be quite different. Here we’re using linear regression, and it turns out that with this method <tt>v</tt> never has much impact on predictions:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822fivesectionsimg33.png\" alt='FeatureImpactPlot' title='FeatureImpactPlot' width='480' height='226' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822fivesectionsimg33_copy.txt\">\n\t\t\t\t\t<span class='close' id='33five_out'>&#10005</span></p>\n<pre class='text' id='33five_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>If we make a predictor using a decision tree, the feature impact plot shows the splitting of impact corresponding to different branches of the tree:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822fivesectionsimg34.png\" alt='FeatureImpactPlot' title='FeatureImpactPlot' width='451' height='231' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822fivesectionsimg34_copy.txt\">\n\t\t\t\t\t<span class='close' id='34five_out'>&#10005</span></p>\n<pre class='text' id='34five_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p><tt><a href='http://reference.wolfram.com/language/ref/FeatureImpactPlot.html'>FeatureImpactPlot</a></tt> gives a kind of bird’s-eye view of the impact of different features. <tt><a href='http://reference.wolfram.com/language/ref/FeatureValueImpactPlot.html'>FeatureValueImpactPlot</a></tt> gives more detail, showing as a function of the actual values of input features the impact points with those values would have on the final prediction (and, yes, the actual points plotted here are based on data simulated on the basis of the distribution inferred by the predictor; the actual data is usually too big to want to carry around, at least by default):</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822fivesectionsimg35.png\" alt='FeatureValueImpactPlot' title='FeatureValueImpactPlot' width='615' height='250' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822fivesectionsimg35_copy.txt\">\n\t\t\t\t\t<span class='close' id='35five_out'>&#10005</span></p>\n<pre class='text' id='35five_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p><tt><a href='http://reference.wolfram.com/language/ref/CumulativeFeatureImpactPlot.html'>CumulativeFeatureImpactPlot</a></tt> gives a visual representation of how “successive” features affect the final value for each (simulated) data point: </p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822fivesectionsimg36.png\" alt='CumulativeFeatureImpactPlot' title='CumulativeFeatureImpactPlot' width='528' height='239' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822fivesectionsimg36_copy.txt\">\n\t\t\t\t\t<span class='close' id='36five_out'>&#10005</span></p>\n<pre class='text' id='36five_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>For predictors, feature impact plots show impact on predicted values. For classifiers, they show impact on (log) probabilities for particular outcomes. </p>\n<h2 id='model-predictive-control'>Model Predictive Control</h2>\n<p>One area that leverages many algorithmic capabilities of the <a href='https://www.wolfram.com/language/'>Wolfram Language</a> is control systems. We first started developing control systems functionality more than 25 years ago, and by <a href='https://writings.stephenwolfram.com/2010/11/mathematica-8/'>Version 8.0</a> ten years ago we started to have built-in functions like <tt><a href='https://reference.wolfram.com/language/ref/StateSpaceModel.html'>StateSpaceModel</a></tt> and <tt><a href='https://reference.wolfram.com/language/ref/BodePlot.html'>BodePlot</a></tt> specifically for working with control systems.</p>\n<p>Over the past decade we’ve progressively been adding more built-in control systems capabilities, and in Version 13.1 we’re now introducing model predictive controllers (MPCs). Many simple control systems (like PID controllers) take an ad hoc approach in which they effectively just “watch what a system does” without trying to have a specific model for what’s going on inside the system. Model predictive control is about having a specific model for a system, and then deriving an optimal controller based on that model.</p>\n<p>For example, we could have a state-space model for a system:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822fivesectionsimg37.png\" alt='ssm = StateSpaceModel' title='ssm = StateSpaceModel' width='592' height='76' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822fivesectionsimg37_copy.txt\">\n\t\t\t\t\t<span class='close' id='37five_out'>&#10005</span></p>\n<pre class='text' id='37five_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>Then in Version 13.1 we can derive (using our <a href='https://reference.wolfram.com/language/ref/Minimize.html'>parametric optimization capabilities</a>) an optimal controller that minimizes a certain set of costs while satisfying particular constraints:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822fivesectionsimg38.png\" alt='clr = ModelPredictiveController' title='clr = ModelPredictiveController' width='606' height='110' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822fivesectionsimg38_copy.txt\">\n\t\t\t\t\t<span class='close' id='38five_out'>&#10005</span></p>\n<pre class='text' id='38five_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>The <tt><a href='https://reference.wolfram.com/language/ref/SystemsModelControllerData.html'>SystemsModelControllerData</a></tt> that we get here contains a variety of elements that allow us to automate the control design and analysis workflow. As an example, we can get a model that represents the controller running in a closed loop with the system it is controlling:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822fivesectionsimg39.png\" alt='clr' title='clr' width='364' height='81' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822fivesectionsimg39_copy.txt\">\n\t\t\t\t\t<span class='close' id='39five_out'>&#10005</span></p>\n<pre class='text' id='39five_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>Now let’s imagine that we drive this whole system with the input:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822fivesectionsimg40.png\" alt='ListStepPlot' title='ListStepPlot' width='439' height='147' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822fivesectionsimg40_copy.txt\">\n\t\t\t\t\t<span class='close' id='40five_out'>&#10005</span></p>\n<pre class='text' id='40five_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>Now we can compute the output response for the system, and we see that both output variables are driven to zero through the operation of the controller:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822fivesectionsimg41.png\" alt='ListStepPlot' title='ListStepPlot' width='425' height='293' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822fivesectionsimg41_copy.txt\">\n\t\t\t\t\t<span class='close' id='41five_out'>&#10005</span></p>\n<pre class='text' id='41five_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>Within the <tt><a href='https://reference.wolfram.com/language/ref/SystemsModelControllerData.html'>SystemsModelControllerData</a></tt> object generated by <tt><a href='https://reference.wolfram.com/language/ref/ModelPredictiveController.html'>ModelPredictiveController</a></tt> is the actual controller computed in this case—using the new construct <tt><a href='https://reference.wolfram.com/language/ref/DiscreteInputOutputModel.html'>DiscreteInputOutputModel</a></tt>:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822fivesectionsimg42.png\" alt='clr' title='clr' width='381' height='81' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822fivesectionsimg42_copy.txt\">\n\t\t\t\t\t<span class='close' id='42five_out'>&#10005</span></p>\n<pre class='text' id='42five_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>What actually is this controller? Ultimately it’s a collection of piecewise functions that depends on the values of states <em>x</em><sub>1</sub>[<em>t</em>] and <em>x</em><sub>2</sub>[<em>t</em>]:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822fivesectionsimg45.png\" alt='clr' title='clr' width='501' height='206' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822fivesectionsimg45_copy.txt\">\n\t\t\t\t\t<span class='close' id='45five_out'>&#10005</span></p>\n<pre class='text' id='45five_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>And this shows the different state-space regions in which the controller has: </p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822fivesectionsimg46.png\" alt='Region' title='Region' width='607' height='219' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822fivesectionsimg46_copy.txt\">\n\t\t\t\t\t<span class='close' id='46five_out'>&#10005</span></p>\n<pre class='text' id='46five_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<h2 id='algorithmic-and-randomized-quizzes'>Algorithmic and Randomized Quizzes</h2>\n<p>In <a href='https://writings.stephenwolfram.com/2021/12/launching-version-13-0-of-wolfram-language-mathematica/'>Version 13.0</a> we introduced our question and assessment framework that allows you to author things like quizzes in notebooks, together with assessment functions, then deploy these for use. In Version 13.1 we’re adding capabilities to let you algorithmically or randomly generate questions.</p>\n<p>The two new functions <tt><a href='http://reference.wolfram.com/language/ref/QuestionGenerator.html'>QuestionGenerator</a></tt> and <tt><a href='http://reference.wolfram.com/language/ref/QuestionSelector.html'>QuestionSelector</a></tt> let you specify questions to be generated according to a template, or randomly selected from a pool. You can either use these functions directly in pure <a href='https://www.wolfram.com/language/'>Wolfram Language</a> code, or you can use them through the Question Notebook authoring GUI.</p>\n<p>When you select <span class=\"computer-voice\">Insert Question</span> in the GUI, you now get a choice between <span class=\"computer-voice\">Fixed Question</span>, <span class=\"computer-voice\">Randomized Question</span> and <span class=\"computer-voice\">Generated Question</span>:</p>\n<table >\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822threesectionsimg1.png\" alt='Question GUI' title='Question GUI' width='281' height='80' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822threesectionsimg1_copy.txt\">\n\t\t\t\t\t<span class='close' id='1threesections_out'>&#10005</span></p>\n<pre class='text' id='1threesections_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>Pick <span class=\"computer-voice\">Randomized Question</span> and you’ll get</p>\n<table>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822threesectionsimg3B.png\" alt='Question selector' title='Question selector' width='489' height='' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822threesectionsimg2_copy.txt\">\n\t\t\t\t\t<span class='close' id='2threesections_out'>&#10005</span></p>\n<pre class='text' id='2threesections_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>which then allows you to enter questions, and eventually produce a <tt><a href='http://reference.wolfram.com/language/ref/QuestionSelector.html'>QuestionSelector</a></tt>—which will select newly randomized questions for every copy of the quiz that’s produced:</p>\n<table>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822threesectionsimg3.png\" alt='Question selector' title='Question selector' width='489' height='116' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822threesectionsimg3_copy.txt\">\n\t\t\t\t\t<span class='close' id='3threesections_out'>&#10005</span></p>\n<pre class='text' id='3threesections_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>Version 13.1 also introduces some enhancements for authoring questions. An example is a pure-GUI “no-code” way to specify multiple-choice questions:</p>\n<table>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822threesectionsimg4B.png\" alt='Question GUI' title='Question GUI' width='475' height='' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822threesectionsimg4_copy.txt\">\n\t\t\t\t\t<span class='close' id='4threesections_out'>&#10005</span></p>\n<pre class='text' id='4threesections_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<h2 id='the-exprstruct-data-structure'>The ExprStruct Data Structure</h2>\n<p>In the <a href='https://www.wolfram.com/language/'>Wolfram Language</a> expressions normally have two aspects: they have a structure, and they have a meaning. Thus, for example, <tt><a href='http://reference.wolfram.com/language/ref/Plus.html'>Plus</a></tt><tt>[1,1]</tt> has both a definite tree structure</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822threesectionsimg5.png\" alt='TreeExtract' title='TreeExtract' width='369' height='126' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822threesectionsimg5_copy.txt\">\n\t\t\t\t\t<span class='close' id='5threesections_out'>&#10005</span></p>\n<pre class='text' id='5threesections_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>and has a value:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822threesectionsimg6.png\" alt='1 + 1' title='1 + 1' width='108' height='51' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822threesectionsimg6A_copy.txt\">\n\t\t\t\t\t<span class='close' id='6threesections_out'>&#10005</span></p>\n<pre class='text' id='6threesections_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>In the normal operation of the Wolfram Language, the evaluator is automatically applied to all expressions, and essentially the only way to avoid evaluation by the evaluator is to insert “wrappers” like <tt><a href='http://reference.wolfram.com/language/ref/Hold.html'>Hold</a></tt> and <tt><a href='http://reference.wolfram.com/language/ref/Inactive.html'>Inactive</a></tt> that necessarily change the structure of expressions. </p>\n<p>In Version 13.1, however, there’s a new way to handle “unevaluated” expressions: the <tt><a href='https://reference.wolfram.com/language/ref/datastructure/ExprStruct.html'>\"ExprStruct\"</a></tt> data structure. <tt>ExprStructs</tt> represent expressions as raw data structures that are never directly seen by the evaluator, but can nevertheless be structurally manipulated.</p>\n<p>This creates an <tt>ExprStruct</tt> corresponding to the expression <tt>{1,2,3,4}</tt>:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822threesectionsimg7.png\" alt='ds = CreateDataStructure' title='ds = CreateDataStructure' width='387' height='81' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822threesectionsimg7_copy.txt\">\n\t\t\t\t\t<span class='close' id='7threesections_out'>&#10005</span></p>\n<pre class='text' id='7threesections_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>This structurally wraps <tt><a href='http://reference.wolfram.com/language/ref/Total.html'>Total</a></tt> around the list, but does no evaluation:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822threesectionsimg8.png\" alt='ds2 = ds' title='ds2 = ds' width='289' height='81' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822threesectionsimg8_copy.txt\">\n\t\t\t\t\t<span class='close' id='8threesections_out'>&#10005</span></p>\n<pre class='text' id='8threesections_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>One can also see this by “visualizing” the data structure:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822threesectionsimg9.png\" alt='ds2' title='ds2' width='201' height='65' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822threesectionsimg9_copy.txt\">\n\t\t\t\t\t<span class='close' id='9threesections_out'>&#10005</span></p>\n<pre class='text' id='9threesections_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p><tt><a href='http://reference.wolfram.com/language/ref/Normal.html'>Normal</a></tt> takes an <tt>ExprStruct</tt> object and converts it to a normal expression, to which the evaluator is automatically applied:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822threesectionsimg10.png\" alt='Normal' title='Normal' width='128' height='51' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822threesectionsimg10_copy.txt\">\n\t\t\t\t\t<span class='close' id='10threesections_out'>&#10005</span></p>\n<pre class='text' id='10threesections_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>One can do a variety of essentially structural operations directly on an <tt>ExprStruct</tt>. This applies <tt><a href='http://reference.wolfram.com/language/ref/Plus.html'>Plus</a></tt>, then maps <tt><a href='http://reference.wolfram.com/language/ref/Factorial.html'>Factorial</a></tt> over the resulting ExprStruct:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822threesectionsimg11.png\" alt='dsf = ds' title='dsf = ds' width='316' height='81' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822threesectionsimg11_copy.txt\">\n\t\t\t\t\t<span class='close' id='11threesections_out'>&#10005</span></p>\n<pre class='text' id='11threesections_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>The result is an <tt>ExprStruct</tt> representing an unevaluated expression:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822threesectionsimg12.png\" alt='dsf' title='dsf' width='176' height='65' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822threesectionsimg12_copy.txt\">\n\t\t\t\t\t<span class='close' id='12threesections_out'>&#10005</span></p>\n<pre class='text' id='12threesections_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>With <tt>\"MapImmediateEvaluate\"</tt> there is an evaluation done each time the mapping operation generates an expression:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822threesectionsimg13.png\" alt='ds' title='ds' width='525' height='65' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822threesectionsimg13_copy.txt\">\n\t\t\t\t\t<span class='close' id='13threesections_out'>&#10005</span></p>\n<pre class='text' id='13threesections_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>One powerful use of <tt>ExprStruct</tt> is in doing code transformations. And in a typical case one might want to import expressions from, say, a .wl file, then manipulate them in <tt>ExprStruct</tt> form. In Version 13.1 <tt><a href='http://reference.wolfram.com/language/ref/Import.html'>Import</a></tt> now supports an <tt>ExprStructs</tt> import element:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822threesectionsimg15.png\" alt='Import' title='Import' width='569' height='158' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822threesectionsimg14_copy.txt\">\n\t\t\t\t\t<span class='close' id='14threesections_out'>&#10005</span></p>\n<pre class='text' id='14threesections_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>This selects expressions that correspond to definitions, in the sense that they have <tt><a href='http://reference.wolfram.com/language/ref/SetDelayed.html'>SetDelayed</a></tt> as their head:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822threesectionsimg16.png\" alt='Select' title='Select' width='565' height='141' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822threesectionsimg16_copy.txt\">\n\t\t\t\t\t<span class='close' id='16threesections_out'>&#10005</span></p>\n<pre class='text' id='16threesections_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>Here’s a visualization of the first one:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822threesectionsimg17.png\" alt='First' title='First' width='208' height='65' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822threesectionsimg17_copy.txt\">\n\t\t\t\t\t<span class='close' id='17threesections_out'>&#10005</span></p>\n<pre class='text' id='17threesections_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<h2 id='super-efficient-compiler-based-external-code-interaction'>Super-Efficient Compiler-Based External Code Interaction</h2>\n<p>Let’s say you’ve got external code that’s in a compiled C-compatible dynamic library. An important new capability in Version 13.1 is a super-efficient and very streamlined way to call any function in a dynamic library directly from within the <a href='https://www.wolfram.com/language/'>Wolfram Language.</a></p>\n<p>It’s one of the accelerating stream of developments that are being made possible by the large-scale infrastructure build-out that we’ve been doing in connection with the new Wolfram Language compiler—and in particular it often leverages our sophisticated new type-handling capabilities. </p>\n<p>As a first example, let’s consider the <a href='https://www.openssl.org/docs/manmaster/man3/RAND_bytes.html' target=_blank rel=noopener>RAND_bytes (&#8220;cryptographically secure pseudorandom number generator&#8221;) function in OpenSSL</a>. The C declaration for this function is:</p>\n<p><img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060822coderinteraction.png\" alt='C declaration' title='C declaration' width='319' height='' /></p>\n<p>In Version 13.1 we now have a symbolic way to represent such a declaration directly in the Wolfram Language:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822threesectionsimg18.png\" alt='dec = LibraryFunctionDeclaration' title='dec = LibraryFunctionDeclaration' width='613' height='59' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822threesectionsimg18_copy.txt\">\n\t\t\t\t\t<span class='close' id='18threesections_out'>&#10005</span></p>\n<pre class='text' id='18threesections_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>(In general we’d also have to specify the library that this function is coming from. OpenSSL happens to be a library that’s loaded by default with the Wolfram Language so you don’t need to mention it.)</p>\n<p>There are quite a few new things going on in the declaration. First, as part of our collection of compiled types, we’re adding ones like <tt>\"CInt\"</tt> and <tt>\"CChar\"</tt> that refer to raw C language types (here <span style=\"font-weight:Regular;font-family:Automatic\">int</span> and <span style=\"font-weight:Regular;font-family:Automatic\">char</span>). There’s also <tt><a href='https://reference.wolfram.com/language/SymbolicC/ref/CArray.html'>CArray</a></tt> which is for declaring C arrays. Notice the new <tt>::[ ... ]</tt> syntax for <tt><a href='https://reference.wolfram.com/language/ref/TypeSpecifier.html'>TypeSpecifier</a></tt> that allows compact specifications for parametrized types, like the <span style=\"font-weight:Regular;font-family:Automatic\">char</span>* here, that is described in Wolfram Language as <tt><a href=\"https://reference.wolfram.com/language/ref/compiledtype/CArray.html\">\"CArray\"</a>::[\"CChar\"]</tt>. </p>\n<p>Having set up the declaration, we now need to create an actual function that can take an argument from Wolfram Language, convert it to something suitable for the library function, then call the library function, and convert the result back to Wolfram Language form. Here’s a way to do that in this case:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/07/sw073022threesectionsimg19.png\" alt='cf = FunctionCompile' title='cf = FunctionCompile' width='571' height='' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/07/sw073022threesectionsimg19A_copy.txt\">\n\t\t\t\t\t<span class='close' id='19threesections_out'>&#10005</span></p>\n<pre class='text' id='19threesections_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>What we get back is a compiled code function that we can directly use, and that works by very efficiently calling the library function:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/07/sw073022threesectionsimg20.png\" alt='cf' title='cf' width='597' height='' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/07/sw073022threesectionsimg20A_copy.txt\">\n\t\t\t\t\t<span class='close' id='20threesections_out'>&#10005</span></p>\n<pre class='text' id='20threesections_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>The <tt><a href='https://reference.wolfram.com/language/ref/FunctionCompile.html'>FunctionCompile</a></tt> above uses several constructs that are new in Version 13.1. What it fundamentally does is to take a Wolfram Language integer (which it assumes to be a machine integer), cast it into a C integer, then pass this to the library function, along with a specification of a C <span style=\"font-weight:Regular;font-family:Automatic\">char</span> * into which the library function will put its result, and from which the final Wolfram Language result will be retrieved.</p>\n<p>It’s worth emphasizing that most of the complexity here has to do with handling data types and conversions between them—something that the Wolfram Language goes to a lot of trouble to avoid usually exposing the user to. But when we’re connecting to external languages that make fundamental use of types, there’s no choice but to deal with them, and the complexity they involve. </p>\n<p>In the <tt><a href='https://reference.wolfram.com/language/ref/FunctionCompile.html'>FunctionCompile</a></tt> above the first new construct we encounter is</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822threesectionsimg21.png\" alt='CreateTypeInstance' title='CreateTypeInstance' width='403' height='21' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822threesectionsimg21_copy.txt\">\n\t\t\t\t\t<span class='close' id='21threesections_out'>&#10005</span></p>\n<pre class='text' id='21threesections_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>The basic purpose of this is to create the buffer into which the external function will write its results. The buffer is an array of bytes, declared in C as <span style=\"font-weight:Regular;font-family:Automatic\">char</span> <tt>*</tt>, or here as <tt><a href=\"https://reference.wolfram.com/language/ref/compiledtype/CArray.html\">\"CArray\"</a>::[\"CChar\"]</tt>. There’s an actual wrinkle though: who’s going to manage the memory associated with this array? The <tt>\"Managed\"::</tt> type specifier says that the Wolfram Language wrapper will do memory management for this object.</p>\n<p>The next new construct we see in the <tt><a href='https://reference.wolfram.com/language/ref/FunctionCompile.html'>FunctionCompile</a></tt> is</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822threesectionsimg22.png\" alt='Cast' title='Cast' width='113' height='21' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822threesectionsimg22_copy.txt\">\n\t\t\t\t\t<span class='close' id='22threesections_out'>&#10005</span></p>\n<pre class='text' id='22threesections_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p><tt><a href='https://reference.wolfram.com/language/ref/Cast.html'>Cast</a></tt> is one of a family of new functions that can appear in compilable code, but have no significance outside the compiler. <tt><a href='https://reference.wolfram.com/language/ref/Cast.html'>Cast</a></tt> is used to specify that data should be converted to a form consistent with a specified type (here a C <span style=\"font-weight:Regular;font-family:Automatic\">int</span> type).</p>\n<p>The core of the <tt><a href='https://reference.wolfram.com/language/ref/FunctionCompile.html'>FunctionCompile</a></tt> is the use of <tt><a href='https://reference.wolfram.com/language/ref/LibraryFunction.html'>LibraryFunction</a></tt>, which is what actually calls the external library function that we declared with the library function declaration. </p>\n<p>The last step in the function compiled by <tt><a href='https://reference.wolfram.com/language/ref/FunctionCompile.html'>FunctionCompile</a></tt> is to extract data from the C array and return it as a Wolfram Language list. To do this requires the new function <tt><a href='https://reference.wolfram.com/language/ref/FromRawPointer.html'>FromRawPointer</a></tt>, which actually retrieves data from a specified location in memory. (And, yes, this is a raw dereferencing operation that will cause a crash if it isn’t done correctly.)</p>\n<p>All of this may at first seem rather complicated, but for what it’s doing, it’s remarkably simple—and greatly leverages the whole symbolic structure of the Wolfram Language. It’s also worth realizing that in this particular example, we’re just dipping into compiled code and then returning results. In larger-scale cases we’d be doing many more operations—typically specified directly by top-level Wolfram Language code—within compiled code, and so type declaration and conversion operations would be a smaller fraction of the code we have to write.</p>\n<p>One feature of the example we’ve just looked at is that it only uses built-in types. But in Version 13.1 it’s now possible to define custom types, such as the analog of C structs. As an example, consider the function <span style=\"font-weight:Regular;font-family:Automatic\">ldiv</span> from the C standard library. This function returns an object of type <span style=\"font-weight:Regular;font-family:Automatic\">ldiv_t</span>, defined by the following <span style=\"font-weight:Regular;font-family:Automatic\">typedef</span>:</p>\n<p><img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060822typedef.png\" alt='typedef' title='typedef' width='284' height='' /></p>\n<p>Here’s the Wolfram Language version of this declaration, based on setting up a <tt>\"Product\"</tt> type named <tt>\"CLDivT\"</tt>:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822threesectionsimg23.png\" alt='divtdec = TypeDeclaration' title='divtdec = TypeDeclaration' width='621' height='44' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822threesectionsimg23_copy.txt\">\n\t\t\t\t\t<span class='close' id='23threesections_out'>&#10005</span></p>\n<pre class='text' id='23threesections_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>(The <tt>\"ReferenceSemantics\"</tt><img src=\"https://s.w.org/images/core/emoji/2.2.1/72x72/2192.png\" alt=\"→\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /><tt><a href='https://reference.wolfram.com/language/ref/False.html'>False</a></tt> option specifies that this type will actually be passed around as a value, rather than just a pointer to a value.) </p>\n<p>Now the declaration for the <tt>ldiv</tt> function can use this new custom type:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822threesectionsimg24.png\" alt='divdec = LibraryFunctionDeclaration' title='divdec = LibraryFunctionDeclaration' width='614' height='19' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822threesectionsimg24_copy.txt\">\n\t\t\t\t\t<span class='close' id='24threesections_out'>&#10005</span></p>\n<pre class='text' id='24threesections_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>The final definition of the call to the external <tt>ldiv</tt> function is then:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822threesectionsimg25.png\" alt='divQR = FunctionCompile' title='divQR = FunctionCompile' width='543' height='203' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822threesectionsimg25_copy.txt\">\n\t\t\t\t\t<span class='close' id='25threesections_out'>&#10005</span></p>\n<pre class='text' id='25threesections_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>And now we can use the function (and, yes, it will be as efficient as if we’d directly written everything in C):</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822threesectionsimg26.png\" alt='divQR' title='divQR' width='142' height='51' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822threesectionsimg26_copy.txt\">\n\t\t\t\t\t<span class='close' id='26threesections_out'>&#10005</span></p>\n<pre class='text' id='26threesections_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>The examples we’ve given here are very small ones. But the whole structure for external function calls that’s now in Version 13.1 is set up to handle large and complex situations—and indeed we’ve been using it internally with great success to set up important new built-in pieces of the Wolfram Language. </p>\n<p>One of the elements that’s often needed in more complex situations is more sophisticated memory management, and our new <tt>\"Managed\"</tt> type provides a convenient and streamlined way to do this. </p>\n<p>This makes a compiled function that creates an array of 10,000 machine integers:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822threesectionsimg27.png\" alt='cf = FunctionCompile' title='cf = FunctionCompile' width='493' height='107' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822threesectionsimg27_copy.txt\">\n\t\t\t\t\t<span class='close' id='27threesections_out'>&#10005</span></p>\n<pre class='text' id='27threesections_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>Running the function effectively “leaks” memory:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822threesectionsimg28.png\" alt='With' title='With' width='508' height='51' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822threesectionsimg28_copy.txt\">\n\t\t\t\t\t<span class='close' id='28threesections_out'>&#10005</span></p>\n<pre class='text' id='28threesections_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>But now define a version of the function in which the array is “managed”:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822threesectionsimg29.png\" alt='cf = FunctionCompile' title='cf = FunctionCompile' width='583' height='107' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822threesectionsimg29_copy.txt\">\n\t\t\t\t\t<span class='close' id='29threesections_out'>&#10005</span></p>\n<pre class='text' id='29threesections_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>Now the memory associated with the array is automatically freed when it is no longer referenced:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822threesectionsimg30.png\" alt='With' title='With' width='508' height='51' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822threesectionsimg30_copy.txt\">\n\t\t\t\t\t<span class='close' id='30threesections_out'>&#10005</span></p>\n<pre class='text' id='30threesections_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<h2 id='directly-compiling-function-definitions-'>Directly Compiling Function Definitions </h2>\n<p>If you have an explicit pure function (<tt><a href='https://reference.wolfram.com/language/ref/Function.html'>Function</a></tt><tt>[...]</tt>) you can use <tt><a href='https://reference.wolfram.com/language/ref/FunctionCompile.html'>FunctionCompile</a></tt> to produce a compiled version of it. But what if you have a function that’s defined using downvalues, as in:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822compfunctionimg1.png\" alt='fac' title='fac' width='250' height='21' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822compfunctionimg1_copy.txt\">\n\t\t\t\t\t<span class='close' id='1compfunction_out'>&#10005</span></p>\n<pre class='text' id='1compfunction_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>In Version 13.1 you can directly compile function definitions like this. But—as is the nature of compilation—you have declare what types are involved. Here is a declaration for the function <tt>fac</tt> that says it takes a single machine integer, and returns a machine integer:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822compfunctionimg2.png\" alt='dec = FunctionDeclaration' title='dec = FunctionDeclaration' width='608' height='19' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822compfunctionimg2_copy.txt\">\n\t\t\t\t\t<span class='close' id='2compfunction_out'>&#10005</span></p>\n<pre class='text' id='2compfunction_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>Now we can create a compiled function that computes <tt>fac[n]</tt>:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822compfunctionimg3.png\" alt='cfac = FunctionCompile' title='cfac = FunctionCompile' width='548' height='81' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822compfunctionimg3_copy.txt\">\n\t\t\t\t\t<span class='close' id='3compfunction_out'>&#10005</span></p>\n<pre class='text' id='3compfunction_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>The compiled function runs significantly faster than the ordinary symbolic definition:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822compfunctionimg4.png\" alt='RepeatedTiming' title='RepeatedTiming' width='311' height='51' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822compfunctionimg4_copy.txt\">\n\t\t\t\t\t<span class='close' id='4compfunction_out'>&#10005</span></p>\n<pre class='text' id='4compfunction_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822compfunctionimg5.png\" alt='RepeatedTiming' title='RepeatedTiming' width='311' height='54' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822compfunctionimg5_copy.txt\">\n\t\t\t\t\t<span class='close' id='5compfunction_out'>&#10005</span></p>\n<pre class='text' id='5compfunction_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>The ability to declare and use downvalue definitions in compilation has the important feature that it allows you to write a definition just once, and then use it both directly, and in compiled code.</p>\n<h2 id='manipulating-expressions-in-compiled-code'>Manipulating Expressions in Compiled Code</h2>\n<p>An early focus of the Wolfram Language compiler is handling low-level “machine” types, such as integers or reals of certain lengths. But one of the advances in the Version 13.1 compiler is direct support for an <tt><a href='https://reference.wolfram.com/language/ref/compiledtype/InertExpression.html'>\"InertExpression\"</a></tt> type for representing any Wolfram Language expression within compiled code. </p>\n<p>When you use something like <tt><a href='https://reference.wolfram.com/language/ref/FunctionCompile.html'>FunctionCompile</a></tt>, it will explicitly try to compile whatever Wolfram Language expressions it’s given. But if you wrap the expressions with <tt><a href='https://reference.wolfram.com/language/ref/InertExpression.html'>InertExpression</a></tt> the compiler will then just treat the expressions as inert structural objects of type <tt><a href='https://reference.wolfram.com/language/ref/compiledtype/InertExpression.html'>\"InertExpression\"</a></tt>. This sets up a compiled function that constructs an expression (implicitly of type <tt><a href='https://reference.wolfram.com/language/ref/compiledtype/InertExpression.html'>\"InertExpression\"</a></tt>):</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822compiledcodeimg1.png\" alt='cf = FunctionCompile' title='cf = FunctionCompile' width='603' height='157' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822compiledcodeimg1_copy.txt\">\n\t\t\t\t\t<span class='close' id='1cc_out'>&#10005</span></p>\n<pre class='text' id='1cc_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>Evaluating the function constructs and then returns the expression:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822compiledcodeimg2.png\" alt='cf' title='cf' width='110' height='51' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822compiledcodeimg2_copy.txt\">\n\t\t\t\t\t<span class='close' id='2cc_out'>&#10005</span></p>\n<pre class='text' id='2cc_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>Normally, within the compiler, an <tt><a href='https://reference.wolfram.com/language/ref/compiledtype/InertExpression.html'>\"InertExpression\"</a></tt> object will be treated in a purely structural way, without any evaluation (and, yes, it’s closely related to the <tt><a href='https://reference.wolfram.com/language/ref/datastructure/ExprStruct.html'>\"ExprStruct\"</a></tt><tt> </tt>data structure). But sometimes it’s useful to perform evaluation on it, and you can do this with <tt><a href='https://reference.wolfram.com/language/ref/InertEvaluate.html'>InertEvaluate</a></tt>:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822compiledcodeimg3.png\" alt='cf = FunctionCompile' title='cf = FunctionCompile' width='615' height='143' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822compiledcodeimg3_copy.txt\">\n\t\t\t\t\t<span class='close' id='3cc_out'>&#10005</span></p>\n<pre class='text' id='3cc_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>Now the <tt><a href='https://reference.wolfram.com/language/ref/InertEvaluate.html'>InertEvaluate</a></tt> does the evaluation before wrapping <tt><a href='https://reference.wolfram.com/language/ref/Hold.html'>Hold</a></tt> around the inert expression:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822compiledcodeimg4.png\" alt='cf' title='cf' width='90' height='51' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822compiledcodeimg4_copy.txt\">\n\t\t\t\t\t<span class='close' id='4cc_out'>&#10005</span></p>\n<pre class='text' id='4cc_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>The ability to handle expressions directly in the compiler might seem like some kind of detail. But it’s actually hugely important in opening up possibilities for future development with the Wolfram Language. For the past 35 years, we’ve internally been able to write low-level expression manipulation code as part of the C language core of the Wolfram Language kernel. But the ability of the Wolfram Language compiler to handle expressions now opens this up—and lets anyone write maximally efficient code for manipulating expressions that interoperate with everything else in the Wolfram Language. </p>\n<h2 id='and-still-more'>And Still More&#8230;</h2>\n<p>Even beyond all the things I’ve discussed so far, there are all sorts of further additions and enhancements in Version 13.1, dotted throughout the system.</p>\n<p><tt><a href='https://reference.wolfram.com/language/ref/InfiniteLineThrough.html'>InfiniteLineThrough</a></tt> and <tt><a href='https://reference.wolfram.com/language/ref/CircularArcThrough.html'>CircularArcThrough</a></tt> have been added for geometric computation, and geometric scene specification. Geometric scenes can now be styled for custom presentation:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822stilmoreimg1.png\" alt='RandomInstance' title='RandomInstance' width='610' height='347' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822stilmoreimg1_copy.txt\">\n\t\t\t\t\t<span class='close' id='1sm_out'>&#10005</span></p>\n<pre class='text' id='1sm_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>There are new graph functions: <tt><a href='https://reference.wolfram.com/language/ref/GraphProduct.html'>GraphProduct</a></tt>, <tt><a href='https://reference.wolfram.com/language/ref/GraphSum.html'>GraphSum</a></tt> and <tt><a href='https://reference.wolfram.com/language/ref/GraphJoin.html'>GraphJoin</a></tt>:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822stilmoreimg2.png\" alt='GraphProduct' title='GraphProduct' width='262' height='197' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822stilmoreimg2_copy.txt\">\n\t\t\t\t\t<span class='close' id='2sm_out'>&#10005</span></p>\n<pre class='text' id='2sm_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>And there are new built-in families of graphs: <tt><a href='https://reference.wolfram.com/language/ref/TorusGraph.html'>TorusGraph</a></tt> and <tt><a href='https://reference.wolfram.com/language/ref/BuckyballGraph.html'>BuckyballGraph</a></tt>:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822stilmoreimg3.png\" alt='BuckyballGraph' title='BuckyballGraph' width='213' height='199' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822stilmoreimg3_copy.txt\">\n\t\t\t\t\t<span class='close' id='3sm_out'>&#10005</span></p>\n<pre class='text' id='3sm_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>You can mix images directly into <tt><a href='https://reference.wolfram.com/language/ref/Graphics.html'>Graphics</a></tt> (and <tt><a href='https://reference.wolfram.com/language/ref/Graphics3D.html'>Graphics3D</a></tt>):</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822stilmoreimg4.png\" alt='Graphics' title='Graphics' width='346' height='131' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822stilmoreimg4A_copy.txt\">\n\t\t\t\t\t<span class='close' id='A4sm_out'>&#10005</span></p>\n<pre class='text' id='A4sm_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p><tt><a href='https://reference.wolfram.com/language/ref/AbsoluteOptions.html'>AbsoluteOptions</a></tt> now resolves many more options in <tt><a href='https://reference.wolfram.com/language/ref/Graphics.html'>Graphics</a></tt>, telling you what explicit value was used when you gave an option just as <tt><a href='https://reference.wolfram.com/language/ref/Automatic.html'>Automatic</a></tt>.</p>\n<p>The function <tt><a href='https://reference.wolfram.com/language/ref/LeafCount.html'>LeafCount</a></tt> now has a <tt><a href='https://reference.wolfram.com/language/ref/Heads.html'>Heads</a></tt> option, to count expression branches inside heads. <tt><a href='https://reference.wolfram.com/language/ref/Splice.html'>Splice</a></tt> works with any head, not just <tt><a href=\"https://reference.wolfram.com/language/ref/List.html\">List</a></tt>. Functions like <tt><a href='https://reference.wolfram.com/language/ref/IntersectingQ.html'>IntersectingQ</a></tt> now have <tt><a href='https://reference.wolfram.com/language/ref/SameTest.html'>SameTest</a></tt> options. You can specify <tt><a href='https://reference.wolfram.com/language/ref/TimeZone.html'>TimeZone</a></tt> options using geographic entities (like cities).</p>\n<p><tt><a href='https://reference.wolfram.com/language/ref/FindClusters.html'>FindClusters</a></tt> now lets you specify exactly how many clusters you want to partition your data into, as well as supporting <tt><a href='https://reference.wolfram.com/language/ref/UpTo.html'>UpTo</a></tt><tt>[n]</tt>.</p>\n<p>In neural nets, <tt><a href='https://reference.wolfram.com/language/ref/ElementwiseLayer.html'>ElementwiseLayer</a></tt> now supports “modern” nonconvex nonmonotonic activation functions like Mish and GELU, <tt><a href='https://reference.wolfram.com/language/ref/AttentionLayer.html'>AttentionLayer</a></tt> supports dropout and local masking, <tt><a href='https://reference.wolfram.com/language/ref/ReplicateLayer.html'>ReplicateLayer</a></tt> now supports integer arrays, and <tt><a href='https://reference.wolfram.com/language/ref/RandomArrayLayer.html'>RandomArrayLayer</a></tt> supports further statistical distributions. <tt><a href='https://reference.wolfram.com/language/ref/NetTrain.html'>NetTrain</a></tt> now handles multioutput and nonscalar losses. <tt><a href='https://reference.wolfram.com/language/ref/Image.html'>Image</a></tt> encoders and decoders support resampling and padding, and there’s now support for nuclear sampling. Our support for the ONNX transfer format continues to grow, with net operators added in Version 13.1.</p>\n<p><tt><a href='https://reference.wolfram.com/language/ref/CenteredInterval.html'>CenteredInterval</a></tt>—introduced in <a href='https://writings.stephenwolfram.com/2021/12/launching-version-13-0-of-wolfram-language-mathematica/'>Version 13.0</a>—now supports 36 further special functions (and, yes, each one needs theorems proved to make this work).</p>\n<p>There’ll be more coming on this in subsequent versions, but in Version 13.1 we’re beginning the introduction of structured matrices that are stored and computed with in special, optimized ways. Examples include <tt><a href='https://reference.wolfram.com/language/ref/PermutationMatrix.html'>PermutationMatrix</a></tt> and <tt><a href='https://reference.wolfram.com/language/ref/LowerTriangularMatrix.html'>LowerTriangularMatrix</a></tt>.</p>\n<p>We’ve had extensive support for computational microscopy for a while. But in Version 13.1 the <tt>\"BioImageFormat\"</tt> <tt><a href='https://reference.wolfram.com/language/ref/Import.html'>Import</a></tt> format now adds importing of the more than 160 raw image formats used by different kinds of microscopes.</p>\n<p>Version 13.0 dramatically expanded our ability to import PDF. We’ve further enhanced this in Version 13.1, for example allowing positioned text to be imported into graphics as <tt><a href='https://reference.wolfram.com/language/ref/Text.html'>Text</a></tt> primitives.</p>\n<p>We’ve supported standard text styles like bold and italic forever, but now we have a standard way to handle struckthrough text as well:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822stilmoreimg5.png\" alt='Style' title='Style' width='260' height='60' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw062822stilmoreimg5_copy.txt\">\n\t\t\t\t\t<span class='close' id='5sm_out'>&#10005</span></p>\n<pre class='text' id='5sm_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>In addition to all these “inside-the-system” enhancements, we’ve also finished making it possible to download desktop versions of Wolfram Language on all platforms (including Linux) while leaving documentation on the web. Documentation installation can also now be configured globally on a per-machine basis, rather than just on a per-user basis.</p>\n<p>So—as of today, documentation or not—you can get Version 13.1 on your computer. Oh, and the <a href='https://www.wolfram.com/cloud/'>Wolfram Cloud</a> has also now been updated to use Version 13.1. I hope you enjoy the new features, and this next step on the epic journey of Mathematica and the Wolfram Language.</p>\n<p style=\"font-style: italic; color: #555;\">\n<style type=\"text/css\">\ndiv.bottomstripe { \n    max-width:620px; \n    margin-bottom:10px;\n    background-color: #fff39a;\n    border: solid 2px #ffd400;\n    padding: 7px 10px 7px 10px;\n        line-height: 1.2;}\n#blog .post_content .bottomstripe a,\n    #blog .post_content .bottomstripe a:link,\n    #blog .post_content .bottomstripe a:visited {\n     font-family:\"Source Sans Pro\",Arial,Sans Serif; \n     font-size:11pt; \n     color:#aa0d00;}\n</style>\n<div class=\"bottomstripe\">\n<a href=\"https://wolfram.com/get-upgrade/\"><strong>Download your 13.1 now! »&nbsp;</strong> (It’s already live in the Wolfram Cloud!)</a>\n</div>\n",
  "wfw:commentRss": "https://writings.stephenwolfram.com/2022/06/launching-version-13-1-of-wolfram-language-mathematica/feed/",
  "slash:comments": 2,
  "enclosure": [
    "",
    "",
    "",
    "",
    "",
    "",
    ""
  ]
}