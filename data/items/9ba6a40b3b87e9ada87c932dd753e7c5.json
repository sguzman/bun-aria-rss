{
  "title": "Parallelism and Serialization",
  "link": "",
  "updated": "2013-12-05T00:00:00+00:00",
  "id": "https://mrocklin.github.io/blog/work/2013/12/05/Parallelism-and-Serialization",
  "content": "<p><strong>tl;dr:</strong> Multiprocessing in Python is crippled by <code class=\"language-plaintext highlighter-rouge\">pickle</code>s poor function\nserialization.  The more robust serialization package <code class=\"language-plaintext highlighter-rouge\">dill</code> improves the\nsituation.  Dill-based solutions for both <code class=\"language-plaintext highlighter-rouge\">multiprocessing</code> and\nIPython.parallel make distributed computing simple again.</p>\n\n<p>To leverage the cores found in modern processors we need to communicate\nfunctions between different processes.  I.e. if we have some function in one\nprocess</p>\n\n<figure class=\"highlight\">\n  <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"k\">def</span> <span class=\"nf\">do_expensive_computations</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">):</span>\n    <span class=\"p\">...</span>\n    <span class=\"k\">return</span> <span class=\"n\">fancy</span> <span class=\"n\">result</span></code></pre>\n</figure>\n\n<p>then we need to communicate that functionality <em>and all functionality on which\nit depends</em> to our other worker processes.</p>\n\n<p>To communicate this function we translate it down into a blob of text, ship\nthat text over a wire, and then retranslate that text back into a fully\noperational function.  This process, called <em>serialization</em>, is like\nthe teleporters in Star Trek; it takes an important thing (function or crew\nmember) translates it into something manageable (text or bits) moves it quickly\nto some other location, and then reassembles it correctly (we hope!)  Just as\naccidents happen in Star Trek itâ€™s easy for function serialization to go awry.</p>\n\n<h3 id=\"pickle\">Pickle</h3>\n\n<p>The standard serialization package in Python is <code class=\"language-plaintext highlighter-rouge\">pickle</code>.  The <code class=\"language-plaintext highlighter-rouge\">pickle</code> package\ncan serialize and deserialize most Python objects, not just functions.</p>\n\n<figure class=\"highlight\">\n  <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]:</span> <span class=\"kn\">import</span> <span class=\"nn\">pickle</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]:</span> <span class=\"n\">pickle</span><span class=\"p\">.</span><span class=\"n\">dumps</span><span class=\"p\">({</span><span class=\"s\">'Alice'</span><span class=\"p\">:</span> <span class=\"mi\">100</span><span class=\"p\">})</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]:</span> <span class=\"s\">\"(dp0</span><span class=\"se\">\\n</span><span class=\"s\">S'Alice'</span><span class=\"se\">\\n</span><span class=\"s\">p1</span><span class=\"se\">\\n</span><span class=\"s\">I100</span><span class=\"se\">\\n</span><span class=\"s\">s.\"</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]:</span> <span class=\"n\">pickle</span><span class=\"p\">.</span><span class=\"n\">loads</span><span class=\"p\">(</span><span class=\"s\">\"(dp0</span><span class=\"se\">\\n</span><span class=\"s\">S'Alice'</span><span class=\"se\">\\n</span><span class=\"s\">p1</span><span class=\"se\">\\n</span><span class=\"s\">I100</span><span class=\"se\">\\n</span><span class=\"s\">s.\"</span><span class=\"p\">)</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]:</span> <span class=\"p\">{</span><span class=\"s\">'Alice'</span><span class=\"p\">:</span> <span class=\"mi\">100</span><span class=\"p\">}</span></code></pre>\n</figure>\n\n<p>How does Pickle go about serializing functions?</p>\n\n<figure class=\"highlight\">\n  <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]:</span> <span class=\"kn\">from</span> <span class=\"nn\">math</span> <span class=\"kn\">import</span> <span class=\"n\">sin</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">]:</span> <span class=\"n\">pickle</span><span class=\"p\">.</span><span class=\"n\">dumps</span><span class=\"p\">(</span><span class=\"n\">sin</span><span class=\"p\">)</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">]:</span> <span class=\"s\">'cmath</span><span class=\"se\">\\n</span><span class=\"s\">sin</span><span class=\"se\">\\n</span><span class=\"s\">p0</span><span class=\"se\">\\n</span><span class=\"s\">.'</span></code></pre>\n</figure>\n\n<p>Pickle specifies a function using its module name (see <code class=\"language-plaintext highlighter-rouge\">math</code> on the left) and\nits function name (see <code class=\"language-plaintext highlighter-rouge\">sin</code> in the middle).  Sadly this approach fails for\nmany cases.  In particular <code class=\"language-plaintext highlighter-rouge\">pickle</code> fails to serialize the following</p>\n\n<ul>\n  <li>Methods</li>\n  <li>Lambdas</li>\n  <li>Closures</li>\n  <li>Some functions defined interactively</li>\n</ul>\n\n<figure class=\"highlight\">\n  <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]:</span> <span class=\"n\">pickle</span><span class=\"p\">.</span><span class=\"n\">dumps</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">.</span><span class=\"n\">split</span><span class=\"p\">)</span>\n<span class=\"nb\">TypeError</span><span class=\"p\">:</span> <span class=\"n\">can</span><span class=\"s\">'t pickle method_descriptor objects\n\nIn [4]: pickle.dumps(lambda x: x**2)\nPicklingError: Can'</span><span class=\"n\">t</span> <span class=\"n\">pickle</span> <span class=\"o\">&lt;</span><span class=\"n\">function</span> <span class=\"o\">&lt;</span><span class=\"k\">lambda</span><span class=\"o\">&gt;</span> <span class=\"n\">at</span> <span class=\"mh\">0x1172410</span><span class=\"o\">&gt;</span><span class=\"p\">:</span> <span class=\"n\">it</span><span class=\"s\">'s not found as\n__main__.&lt;lambda&gt;</span></code></pre>\n</figure>\n\n<p>Most large projects use at least one (often all) of these features.  This makes\nmultiprocessing a pain.</p>\n\n<h3 id=\"multiprocessing\">Multiprocessing</h3>\n\n<p>We care about function serialization because we want to send one function to\nmany processes in order to leverage parallelism.  The standard way to do this\nis with the <code class=\"language-plaintext highlighter-rouge\">multiprocessing</code> module.  One simple approach is with the <code class=\"language-plaintext highlighter-rouge\">Pool</code>\nabstraction</p>\n\n<figure class=\"highlight\">\n  <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">12</span><span class=\"p\">]:</span> <span class=\"kn\">import</span> <span class=\"nn\">multiprocessing</span> <span class=\"k\">as</span> <span class=\"n\">mp</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">13</span><span class=\"p\">]:</span> <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">mp</span><span class=\"p\">.</span><span class=\"n\">Pool</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)</span>  <span class=\"c1\"># Processing Pool with four processors\n</span>\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">14</span><span class=\"p\">]:</span> <span class=\"n\">p</span><span class=\"p\">.</span><span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"n\">sin</span><span class=\"p\">,</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">))</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">14</span><span class=\"p\">]:</span>\n<span class=\"p\">[</span><span class=\"mf\">0.0</span><span class=\"p\">,</span>\n <span class=\"mf\">0.8414709848078965</span><span class=\"p\">,</span>\n <span class=\"mf\">0.9092974268256817</span><span class=\"p\">,</span>\n <span class=\"mf\">0.1411200080598672</span><span class=\"p\">,</span>\n<span class=\"o\">-</span><span class=\"mf\">0.7568024953079282</span><span class=\"p\">,</span>\n<span class=\"o\">-</span><span class=\"mf\">0.9589242746631385</span><span class=\"p\">,</span>\n<span class=\"o\">-</span><span class=\"mf\">0.27941549819892586</span><span class=\"p\">,</span>\n <span class=\"mf\">0.6569865987187891</span><span class=\"p\">,</span>\n <span class=\"mf\">0.9893582466233818</span><span class=\"p\">,</span>\n <span class=\"mf\">0.4121184852417566</span><span class=\"p\">]</span></code></pre>\n</figure>\n\n<p>But <code class=\"language-plaintext highlighter-rouge\">multiprocessing</code> uses <code class=\"language-plaintext highlighter-rouge\">pickle</code> and so inherits its limitations.  Here it\nfails to serialize and broadcast a lambda <code class=\"language-plaintext highlighter-rouge\">square</code> function.</p>\n\n<figure class=\"highlight\">\n  <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">15</span><span class=\"p\">]:</span> <span class=\"n\">p</span><span class=\"p\">.</span><span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"o\">**</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">))</span>\n<span class=\"n\">PicklingError</span><span class=\"p\">:</span> <span class=\"n\">Can</span><span class=\"s\">'t pickle &lt;type '</span><span class=\"n\">function</span><span class=\"s\">'&gt;: attribute lookup\n__builtin__.function failed</span></code></pre>\n</figure>\n\n<p>I rarely see <code class=\"language-plaintext highlighter-rouge\">multiprocessing</code> in the wild.  I suspect that this is because\npoor function serialization makes it a pain for any but the most trivial\nof projects.</p>\n\n<h3 id=\"dill-replaces-pickle\"><code class=\"language-plaintext highlighter-rouge\">dill</code> replaces <code class=\"language-plaintext highlighter-rouge\">pickle</code></h3>\n\n<p>The <code class=\"language-plaintext highlighter-rouge\">dill</code> library is a drop-in alternative to <code class=\"language-plaintext highlighter-rouge\">pickle</code> that <em>can</em> robustly\nhandle function serialization.</p>\n\n<figure class=\"highlight\">\n  <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">]:</span> <span class=\"kn\">import</span> <span class=\"nn\">dill</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]:</span> <span class=\"n\">dill</span><span class=\"p\">.</span><span class=\"n\">dumps</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">.</span><span class=\"n\">split</span><span class=\"p\">)</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]:</span>\n<span class=\"s\">'cdill.dill</span><span class=\"se\">\\n</span><span class=\"s\">_getattr</span><span class=\"se\">\\n</span><span class=\"s\">p0</span><span class=\"se\">\\n</span><span class=\"s\">(cdill.dill</span><span class=\"se\">\\n</span><span class=\"s\">_load_type</span><span class=\"se\">\\n</span><span class=\"s\">p1</span><span class=\"se\">\\n</span><span class=\"s\">(S</span><span class=\"se\">\\'</span><span class=\"s\">StringType</span><span class=\"se\">\\'\\n</span><span class=\"s\">p2</span><span class=\"se\">\\n</span><span class=\"s\">tp3</span><span class=\"se\">\\n</span><span class=\"s\">Rp4</span><span class=\"se\">\\n</span><span class=\"s\">S</span><span class=\"se\">\\'</span><span class=\"s\">split</span><span class=\"se\">\\'\\n</span><span class=\"s\">p5</span><span class=\"se\">\\n</span><span class=\"s\">S\"&lt;method</span><span class=\"se\">\\'</span><span class=\"s\">split</span><span class=\"se\">\\'</span><span class=\"s\"> of </span><span class=\"se\">\\'</span><span class=\"s\">str</span><span class=\"se\">\\'</span><span class=\"s\"> objects&gt;\"</span><span class=\"se\">\\n</span><span class=\"s\">p6</span><span class=\"se\">\\n</span><span class=\"s\">tp7</span><span class=\"se\">\\n</span><span class=\"s\">Rp8</span><span class=\"se\">\\n</span><span class=\"s\">.'</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">9</span><span class=\"p\">]:</span> <span class=\"n\">dill</span><span class=\"p\">.</span><span class=\"n\">dumps</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">9</span><span class=\"p\">]:</span>\n<span class=\"s\">'</span><span class=\"se\">\\x80\\x02</span><span class=\"s\">cdill.dill</span><span class=\"se\">\\n</span><span class=\"s\">_load_type</span><span class=\"se\">\\n</span><span class=\"s\">q</span><span class=\"se\">\\x00</span><span class=\"s\">U</span><span class=\"se\">\\x0c</span><span class=\"s\">FunctionTypeq</span><span class=\"se\">\\x01\\x85</span><span class=\"s\">q</span><span class=\"se\">\\x02</span><span class=\"s\">Rq</span><span class=\"se\">\\x03</span><span class=\"s\">(cdill.dill</span><span class=\"se\">\\n</span><span class=\"s\">_unmarshal</span><span class=\"se\">\\n</span><span class=\"s\">q</span><span class=\"se\">\\x04</span><span class=\"s\">Usc</span><span class=\"se\">\\x01\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x01\\x00\\x00\\x00</span><span class=\"s\">C</span><span class=\"se\">\\x00\\x00\\x00</span><span class=\"s\">s</span><span class=\"se\">\\x04\\x00\\x00\\x00</span><span class=\"s\">|</span><span class=\"se\">\\x00\\x00</span><span class=\"s\">S(</span><span class=\"se\">\\x01\\x00\\x00\\x00</span><span class=\"s\">N(</span><span class=\"se\">\\x00\\x00\\x00\\x00</span><span class=\"s\">(</span><span class=\"se\">\\x01\\x00\\x00\\x00</span><span class=\"s\">t</span><span class=\"se\">\\x01\\x00\\x00\\x00</span><span class=\"s\">x(</span><span class=\"se\">\\x00\\x00\\x00\\x00</span><span class=\"s\">(</span><span class=\"se\">\\x00\\x00\\x00\\x00</span><span class=\"s\">s</span><span class=\"se\">\\x1e\\x00\\x00\\x00</span><span class=\"s\">&lt;ipython-input-9-70b342a16b4d&gt;t</span><span class=\"se\">\\x08\\x00\\x00\\x00</span><span class=\"s\">&lt;lambda&gt;</span><span class=\"se\">\\x01\\x00\\x00\\x00</span><span class=\"s\">s</span><span class=\"se\">\\x00\\x00\\x00\\x00</span><span class=\"s\">q</span><span class=\"se\">\\x05\\x85</span><span class=\"s\">q</span><span class=\"se\">\\x06</span><span class=\"s\">Rq</span><span class=\"se\">\\x07</span><span class=\"s\">c__builtin__</span><span class=\"se\">\\n</span><span class=\"s\">__main__</span><span class=\"se\">\\n</span><span class=\"s\">U</span><span class=\"se\">\\x08</span><span class=\"s\">&lt;lambda&gt;q</span><span class=\"se\">\\x08</span><span class=\"s\">NNtq</span><span class=\"se\">\\t</span><span class=\"s\">Rq</span><span class=\"se\">\\n</span><span class=\"s\">.'</span></code></pre>\n</figure>\n\n<p>As a result most of the speed-bumps of using multiprocessing <em>should</em>\ndisappear.</p>\n\n<h3 id=\"dill-and-multiprocessing\">Dill and Multiprocessing</h3>\n\n<p>The makers of <code class=\"language-plaintext highlighter-rouge\">dill</code> apparently know this and so have developed their own fork\nof <code class=\"language-plaintext highlighter-rouge\">multiprocessing</code> that uses dill.  This resides in the <code class=\"language-plaintext highlighter-rouge\">pathos</code> library</p>\n\n<figure class=\"highlight\">\n  <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]:</span> <span class=\"kn\">import</span> <span class=\"nn\">pathos.multiprocessing</span> <span class=\"k\">as</span> <span class=\"n\">mp</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]:</span> <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">mp</span><span class=\"p\">.</span><span class=\"n\">Pool</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)</span>  <span class=\"c1\"># Processing Pool with four processors\n</span>\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]:</span> <span class=\"n\">p</span><span class=\"p\">.</span><span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"o\">**</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">))</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]:</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">16</span><span class=\"p\">,</span> <span class=\"mi\">25</span><span class=\"p\">,</span> <span class=\"mi\">36</span><span class=\"p\">,</span> <span class=\"mi\">49</span><span class=\"p\">,</span> <span class=\"mi\">64</span><span class=\"p\">,</span> <span class=\"mi\">81</span><span class=\"p\">]</span></code></pre>\n</figure>\n\n<h3 id=\"dill-and-ipython-parallel\">Dill and IPython Parallel</h3>\n\n<p>You should know about IPython parallel.</p>\n\n<p>The IPython notebook has gotten a lot of press recently.  The notebook became\npossible after the project was restructured to separate computation and\ninteraction.  One important result is that we can now perform computation in a\nprocess while interacting in a web browser, giving rise to the ever-popular notebook.</p>\n\n<p>This same computation-is-separate-from-interaction concept supports other\ninnovations.  In particular IPython parallel uses this to create a simple\nplatform for both multiprocessing and distributed computing.</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>mrocklin@notebook:~$ ipcluster start --n=4\nmrocklin@notebook:~$ ipython\n</code></pre></div></div>\n\n<figure class=\"highlight\">\n  <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]:</span> <span class=\"kn\">from</span> <span class=\"nn\">IPython.parallel</span> <span class=\"kn\">import</span> <span class=\"n\">Client</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]:</span> <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">Client</span><span class=\"p\">()[:]</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]:</span> <span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">map_sync</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"o\">**</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">))</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]:</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">16</span><span class=\"p\">,</span> <span class=\"mi\">25</span><span class=\"p\">,</span> <span class=\"mi\">36</span><span class=\"p\">,</span> <span class=\"mi\">49</span><span class=\"p\">,</span> <span class=\"mi\">64</span><span class=\"p\">,</span> <span class=\"mi\">81</span><span class=\"p\">]</span></code></pre>\n</figure>\n\n<p>Note that this system handles the lambda without failing.  IPython performs\nsome custom serializations on top of <code class=\"language-plaintext highlighter-rouge\">pickle</code>.  Unfortunately these\ncustomizations still donâ€™t cover <em>all</em> use cases.  Fortunately IPython provides\nhooks to specify your preferred serialization technique.  Thanks to a recent\nchange, IPython views now provide a convenient <code class=\"language-plaintext highlighter-rouge\">.use_dill</code> method.</p>\n\n<figure class=\"highlight\">\n  <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]:</span> <span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">use_dill</span><span class=\"p\">()</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">]:</span> <span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">map_sync</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">.</span><span class=\"n\">split</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s\">'Hello world!'</span><span class=\"p\">,</span> <span class=\"s\">'foo bar'</span><span class=\"p\">])</span>\n<span class=\"p\">[[</span><span class=\"s\">'Hello'</span><span class=\"p\">,</span> <span class=\"s\">'world!'</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"s\">'foo'</span><span class=\"p\">,</span> <span class=\"s\">'bar'</span><span class=\"p\">]]</span></code></pre>\n</figure>\n\n<p>A more explicit treatment of switching IPythonâ€™s serializers to dill can be\nfound in <a href=\"http://nbviewer.ipython.org/5241793\">this notebook</a>.</p>\n\n<h2 id=\"acknowledgements\">Acknowledgements</h2>\n\n<p>My interest into multiprocessing and serialization was originally spurred by a\ntalk by <a href=\"http://ianlangmore.com/about\">Ian Langmore</a>.</p>\n\n<p>The <code class=\"language-plaintext highlighter-rouge\">dill</code> project is developed by <a href=\"http://www.cacr.caltech.edu/~mmckerns/my\">Mike\nMckerns</a>.  Several people have\npointed it out to me.  These include\n<a href=\"https://github.com/asmeurer\">@asmeurer</a>,\n<a href=\"https://twitter.com/themodernscientist\">@themodernscientist</a>,\n<a href=\"https://twitter.com/TWiecki\">@twiecki</a>,\nand <a href=\"https://github.com/lidavidm\">@lidavidm</a>.</p>\n\n<h2 id=\"issues\">Issues</h2>\n\n<p>Thanks to <a href=\"http://www.cacr.caltech.edu/~mmckerns/my\">@mmckerns</a> and\n<a href=\"https://github.com/minrk/\">@minrk</a> for their recent interactions to resolve\nissues related to this topic.</p>\n\n<ul>\n  <li><a href=\"https://github.com/uqfoundation/dill/issues/15\">https://github.com/uqfoundation/dill/issues/15</a></li>\n  <li><a href=\"https://github.com/uqfoundation/pathos/issues/2\">https://github.com/uqfoundation/pathos/issues/2</a></li>\n  <li><a href=\"https://github.com/ipython/ipython/issues/4551\">https://github.com/ipython/ipython/issues/4551</a></li>\n</ul>"
}