{
  "title": "Linking R and Python to retrieve financial data and plot a candlestick",
  "link": "https://datascienceplus.com/linking-r-and-python-to-retrieve-financial-data-and-plot-a-candlestick/",
  "comments": "https://datascienceplus.com/linking-r-and-python-to-retrieve-financial-data-and-plot-a-candlestick/#respond",
  "dc:creator": "Fabian Scheler",
  "pubDate": "Mon, 18 Apr 2022 01:02:48 +0000",
  "category": [
    "Data Management",
    "Finance",
    "ggplot2",
    "investpy",
    "Visualization"
  ],
  "guid": "https://datascienceplus.com/?p=32118",
  "description": "<div style=\"border-top: 1px solid; font-size: 14px;text-align: center; border-bottom: 1px solid; padding: 5px 2px;\"><a href=\"https://datascienceplus.com/posting-from-r-markdown-to-datascienceplus/\">Are you interested in guest posting? Publish at DataScience+  via your RStudio editor.</a></div><h2>Category</h2><ul><li><a href=\"https://datascienceplus.com/category/data-management/\" rel=\"bookmark\" title=\"Permanent Link toData Management\">Data Management</a></li></ul><h2>Tags</h2><ul><li><a href=\"https://datascienceplus.com/tag/finance/\" rel=\"bookmark\" title=\"Permanent Link toFinance\">Finance</a></li><li><a href=\"https://datascienceplus.com/tag/ggplot2/\" rel=\"bookmark\" title=\"Permanent Link toggplot2\">ggplot2</a></li><li><a href=\"https://datascienceplus.com/tag/investpy/\" rel=\"bookmark\" title=\"Permanent Link toinvestpy\">investpy</a></li><li><a href=\"https://datascienceplus.com/tag/rstats/\" rel=\"bookmark\" title=\"Permanent Link toR Programming\">R Programming</a></li><li><a href=\"https://datascienceplus.com/tag/visualization/\" rel=\"bookmark\" title=\"Permanent Link toVisualization\">Visualization</a></li></ul>I am way more experienced with R than with Python and prefer to code in this language when possible. This applies, especially when it is about visualizations. Plotly and ggplot2 are fantastic packages that provide a lot of flexibility. However, every language has its limitations, and the best results stem from their efficient combination. This [&#8230;]<strong><p>Related Post</p></strong><ul><li><a href=\"https://datascienceplus.com/r-as-gis-part-1-vector/\" rel=\"bookmark\" title=\"Permanent Link toR as GIS, part 1: vector\">R as GIS, part 1: vector</a></li><li><a href=\"https://datascienceplus.com/how-to-carry-column-metadata-in-pivot_longer/\" rel=\"bookmark\" title=\"Permanent Link toHow to carry column metadata in pivot_longer\">How to carry column metadata in pivot_longer</a></li><li><a href=\"https://datascienceplus.com/how-to-create-multiple-variables-with-a-single-line-of-code-in-r/\" rel=\"bookmark\" title=\"Permanent Link toHow to create multiple variables with a single line of code in R\">How to create multiple variables with a single line of code in R</a></li><li><a href=\"https://datascienceplus.com/converting-data-from-long-to-wide-and-from-wide-to-long-simplified-tidyverse-package/\" rel=\"bookmark\" title=\"Permanent Link toConverting data from long to wide simplified: tidyverse package\">Converting data from long to wide simplified: tidyverse package</a></li><li><a href=\"https://datascienceplus.com/how-to-show-characteristics-of-study-population-in-r-with-a-single-line-of-code/\" rel=\"bookmark\" title=\"Permanent Link toHow to show characteristics of study population in R with a single line of code\">How to show characteristics of study population in R with a single line of code</a></li></ul>",
  "content:encoded": "<div style=\"border-top: 1px solid; font-size: 14px;text-align: center; border-bottom: 1px solid; padding: 5px 2px;\"><a href=\"https://datascienceplus.com/posting-from-r-markdown-to-datascienceplus/\">Are you interested in guest posting? Publish at DataScience+  via your RStudio editor.</a></div><h2>Category</h2><ul><li><a href=\"https://datascienceplus.com/category/data-management/\" rel=\"bookmark\" title=\"Permanent Link toData Management\">Data Management</a></li></ul><h2>Tags</h2><ul><li><a href=\"https://datascienceplus.com/tag/finance/\" rel=\"bookmark\" title=\"Permanent Link toFinance\">Finance</a></li><li><a href=\"https://datascienceplus.com/tag/ggplot2/\" rel=\"bookmark\" title=\"Permanent Link toggplot2\">ggplot2</a></li><li><a href=\"https://datascienceplus.com/tag/investpy/\" rel=\"bookmark\" title=\"Permanent Link toinvestpy\">investpy</a></li><li><a href=\"https://datascienceplus.com/tag/rstats/\" rel=\"bookmark\" title=\"Permanent Link toR Programming\">R Programming</a></li><li><a href=\"https://datascienceplus.com/tag/visualization/\" rel=\"bookmark\" title=\"Permanent Link toVisualization\">Visualization</a></li></ul><p>I am way more experienced with R than with Python and prefer to code in this language when possible. This applies, especially when it is about visualizations. Plotly and ggplot2 are fantastic packages that provide a lot of flexibility. However, every language has its limitations, and the best results stem from their efficient combination.</p>\n<p>This week, I created the candlestick below, and I think it&#8217;s an excellent case study to illustrate a few things:</p>\n<li>How to download financial data from investing.com using the investpy package in Python</li>\n<li>How to efficiently combine the capabilities of Python and R deploying the reticulate package</li>\n<li>How to construct a nicely formatted candlestick chart with ggplot2, ggthemes and two simple custom functions</li>\n<li>How to export the result in different image formats, including high-resolution Scalable Vector Graphics (SVG)</li>\n<p><a href=\"https://datascienceplus.com/wp-content/uploads/2022/04/62511d5e3d84e772b324d202_candlestick_usd_rub.png\"><img src=\"https://datascienceplus.com/wp-content/uploads/2022/04/62511d5e3d84e772b324d202_candlestick_usd_rub-490x259.png\" alt=\"\" width=\"490\" height=\"259\" class=\"alignnone size-medium wp-image-32126\" srcset=\"https://datascienceplus.com/wp-content/uploads/2022/04/62511d5e3d84e772b324d202_candlestick_usd_rub-490x259.png 490w, https://datascienceplus.com/wp-content/uploads/2022/04/62511d5e3d84e772b324d202_candlestick_usd_rub-1024x540.png 1024w, https://datascienceplus.com/wp-content/uploads/2022/04/62511d5e3d84e772b324d202_candlestick_usd_rub-768x405.png 768w, https://datascienceplus.com/wp-content/uploads/2022/04/62511d5e3d84e772b324d202_candlestick_usd_rub-1536x811.png 1536w, https://datascienceplus.com/wp-content/uploads/2022/04/62511d5e3d84e772b324d202_candlestick_usd_rub-2048x1081.png 2048w\" sizes=\"(max-width: 490px) 100vw, 490px\" /></a></p>\n<h3>The Python part</h3>\n<p>Let&#8217;s start with the Python code required. First, we need to install the investpy package using pip to run the simple function below. Investpy is a fantastic and very powerful wrapper around the public API of the investing.com page. It allows the retrieval of end of day price data for a wide range of financial instruments, including stocks, bonds, ETFs, mutual funds, indices, currencies, commodities and cryptocurrencies, as well as the download of selected meta-data. Detailed documentation can be found <a href=\"https://investpy.readthedocs.io/\">here </a>or in pdf format under this <a href=\"http://readthedocs.org/projects/investpy/downloads/pdf/latest/\">link</a>. Save the function defined below in a python script.</p>\n<pre>\n#pip install investpy\n\ndef get_fx_cross_investpy(currency_cross,st_date,ed_date):    \n    import investpy\n    data = investpy.get_currency_cross_historical_data(currency_cross=currency_cross, from_date=st_date, to_date=ed_date)\n    return(data)\n</pre>\n<h3>The R part</h3>\n<p>To use the previously defined Python function in R and to subsequently plot the data, we require the following four packages that can be installed easily from CRAN.</p>\n<pre>\ninstall.packages(\"reticulate\")\ninstall.packages(\"ggplot2\")\ninstall.packages(\"ggthemes\")\ninstall.packages(\"scales\")\n</pre>\n<h3>Defining a pretty theme</h3>\n<p>The <a href=\"https://mran.microsoft.com/snapshot/2017-02-04/web/packages/ggthemes/vignettes/ggthemes.html\">ggthemes </a>package comes with a few nice default themes for ggplot2 graphics. So you can, for instance, replicate the famous design of the <a href=\"https://www.economist.com/graphic-detail\">Economist</a> or the appearance of typical Stata charts. However, it is also possible to adapt these themes and create your unique default layout. I demonstrate this below for my standard formatting. The function defined here is later used in the candlestick function.</p>\n<pre>\ntheme_aq_black_default_font<-\n  function (base_size = 12, base_family = \"\") \n  {\n    library(ggplot2)\n    library(ggthemes)\n    library(scales)\n    col_aq2<-as.character(c(\"#04103b\",\"#dd0400\",\"#3b5171\",\"#5777a7\",\"#969696\",\"#BDBDBD\",\"#D9D9D9\",\"#F0F0F0\"))\n    \n    theme_hc(base_size = base_size, base_family = base_family) %+replace% \n</pre>\n<h3>The candlestick function</h3>\n<p>Candlesticks are widely used in the visualization of price data and technical analysis. It allows viewers to quickly gauge the significance of market moves and analyze potential resistance levels or extraordinary price jumps that may be reverted in the future. To construct the daily candlestick displayed above, we require daily opening and closing prices as well as intraday highs and lows. Fortunately, this is all available on investing.com and can be retrieved as a handy data frame with our function defined above.</p>\n<pre>\nggplot_candlestick<-function(df,width=0.9,chart_title,chart_subtitle)\n{\n\tlibrary(ggplot2)\n  df$Date<-row.names(df)\n  df$Date<-as.Date(df$Date,\"%Y-%m-%d\")\n  df$chg  df$Open, \"dn\", \"up\")\n  cols<-as.character(c(\"#04103b\",\"#dd0400\",\"#3b5171\",\"#5777a7\",\"#969696\",\"#BDBDBD\",\"#D9D9D9\",\"#F0F0F0\"))\n  \n  p<-\n    ggplot(data=df,aes(x=as.Date(Date), y=High))+\n    geom_linerange(aes(ymin=Low, ymax=High)) +\n    geom_rect(aes(xmin = Date - width/2 * 0.9, xmax = Date + width/2 * 0.9, ymin = pmin(Open, Close), ymax = pmax(Open, Close), fill = df$chg)) + \n    scale_fill_manual(values = c(\"up\" = \"darkred\", \"dn\" = \"darkgreen\"))+\n    scale_colour_manual(values = cols)+\n    theme_aq_black_default_font(base_size=18)+\n    labs(color=&#039;&#039;)+\n    labs(title=chart_title,subtitle=chart_subtitle,x =\"\")+\n    labs(caption = paste0(&#039;Source: DataScience+, Investing.com  &#039;, Sys.Date()))+\n    guides(colour = guide_legend(nrow = 1))+\n    scale_x_date(labels = date_format(\"%y/%m\"))+\n    theme(legend.position = \"none\",legend.margin=margin(-20,-20,-20,-20),legend.box.margin=margin(0,0,30,0))+\n    ylab(\"\")+\n    theme(plot.margin=margin(l=5,r=20,b=5,t=5))\n\n  return(p)\n}\n\n</pre>\n<h3>Plot the data and export the graphic</h3>\n<p>Last but not least, let&#8217;s combine all these modules and execute them step by step. Once we have loaded our Python function employing the reticulate package, we can use it in R to retrieve the financial data from investpy. We can subsequently use our previously defined R functions to create the candlestick plot. The plot can then be exported easily as a PNG or SVG graphic utilizing ggsave.</p>\n<pre>\n# Load the python function and retrieve the financial data\nlibrary(reticulate)\nsource_python(\"C:/Users/Fabian/Desktop/get_rates_investing.com.py\")\ndf<-get_fx_cross_investpy(\"USD/RUB\",&#039;01/01/2022&#039;,&#039;01/05/2022&#039;)   \n\n# Use the R functions and plot the data\np<-ggplot_candlestick(df,chart_title=\"Following its crash, the Russian Ruble rebounded sharply\",chart_subtitle=\"USD/RUB exchange rate\")\np\n\n# Save the plot\ntarget_folder<-\"C:/Users/Fabian/Desktop/\"\nggsave(file=paste0(target_folder,\"candlestick_usd_rub.svg\"), plot=p, width=9, height=5)\nggsave(file=paste0(target_folder,\"candlestick_usd_rub.png\"), plot=p, width=9, height=5)\n</pre>\n<strong><p>Related Post</p></strong><ul><li><a href=\"https://datascienceplus.com/r-as-gis-part-1-vector/\" rel=\"bookmark\" title=\"Permanent Link toR as GIS, part 1: vector\">R as GIS, part 1: vector</a></li><li><a href=\"https://datascienceplus.com/how-to-carry-column-metadata-in-pivot_longer/\" rel=\"bookmark\" title=\"Permanent Link toHow to carry column metadata in pivot_longer\">How to carry column metadata in pivot_longer</a></li><li><a href=\"https://datascienceplus.com/how-to-create-multiple-variables-with-a-single-line-of-code-in-r/\" rel=\"bookmark\" title=\"Permanent Link toHow to create multiple variables with a single line of code in R\">How to create multiple variables with a single line of code in R</a></li><li><a href=\"https://datascienceplus.com/converting-data-from-long-to-wide-and-from-wide-to-long-simplified-tidyverse-package/\" rel=\"bookmark\" title=\"Permanent Link toConverting data from long to wide simplified: tidyverse package\">Converting data from long to wide simplified: tidyverse package</a></li><li><a href=\"https://datascienceplus.com/how-to-show-characteristics-of-study-population-in-r-with-a-single-line-of-code/\" rel=\"bookmark\" title=\"Permanent Link toHow to show characteristics of study population in R with a single line of code\">How to show characteristics of study population in R with a single line of code</a></li></ul>",
  "wfw:commentRss": "https://datascienceplus.com/linking-r-and-python-to-retrieve-financial-data-and-plot-a-candlestick/feed/",
  "slash:comments": 0
}