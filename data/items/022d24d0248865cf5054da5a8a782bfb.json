{
  "title": "LogPy - Facts and Relations",
  "link": "",
  "updated": "2013-01-17T00:00:00+00:00",
  "id": "https://mrocklin.github.io/blog/work/2013/01/17/LogPy-Facts-Relations",
  "content": "<p>In <a href=\"https://mrocklin.github.io/blog/work/2013/01/14/LogPy-Introduction/\">my last post</a> I introduced <a href=\"http://github.com/logpy/logpy\">LogPy</a>, a library for logic and relational programming in Python.  In this post I show how LogPy can be used as a quick and dirty in-memory database.</p>\n\n<h2 id=\"data\">Data</h2>\n\n<p>As an example weâ€™ll look at the 50 states in the US.  We know two things about each state.</p>\n\n<ol>\n  <li>Is it coastal? For example California (CA) is coastal because it is next to the Pacific Ocean, Arizona (AZ) is not.</li>\n  <li>To which other states is it adjacent?  For example California (CA) is adjacent to Oregon (OR), Arizona (AZ) and Nevada (NV).</li>\n</ol>\n\n<p>We express data in LogPy using relations and facts</p>\n\n<figure class=\"highlight\">\n  <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">logpy</span> <span class=\"kn\">import</span> <span class=\"n\">Relation</span><span class=\"p\">,</span> <span class=\"n\">fact</span><span class=\"p\">,</span> <span class=\"n\">facts</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">coastal</span> <span class=\"o\">=</span> <span class=\"n\">Relation</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">fact</span><span class=\"p\">(</span><span class=\"n\">coastal</span><span class=\"p\">,</span> <span class=\"s\">'CA'</span><span class=\"p\">)</span></code></pre>\n</figure>\n\n<p>here we have asserted the fact that <code class=\"language-plaintext highlighter-rouge\">'CA'</code> is coastal.  Lets quickly do this for all of the coastal states</p>\n\n<figure class=\"highlight\">\n  <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">coastal_states</span> <span class=\"o\">=</span> <span class=\"s\">'WA,OR,CA,TX,LA,MS,AL,GA,FL,SC,NC,VA,MD,DE,NJ,NY,CT,RI,MA,ME,NH,AK,HI'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">for</span> <span class=\"n\">state</span> <span class=\"ow\">in</span> <span class=\"n\">coastal_states</span><span class=\"p\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s\">','</span><span class=\"p\">):</span>\n<span class=\"p\">...</span>     <span class=\"n\">fact</span><span class=\"p\">(</span><span class=\"n\">coastal</span><span class=\"p\">,</span> <span class=\"n\">state</span><span class=\"p\">)</span></code></pre>\n</figure>\n\n<p>Adjacency is only slightly more complex to express.  The following code asserts that California (CA) is adjacent to Arizona (AZ) and that California (CA) is adjacent to Oregon (OR).</p>\n\n<figure class=\"highlight\">\n  <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">adjacent</span> <span class=\"o\">=</span> <span class=\"n\">Relation</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">fact</span><span class=\"p\">(</span><span class=\"n\">adjacent</span><span class=\"p\">,</span> <span class=\"s\">'CA'</span><span class=\"p\">,</span> <span class=\"s\">'AZ'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">fact</span><span class=\"p\">(</span><span class=\"n\">adjacent</span><span class=\"p\">,</span> <span class=\"s\">'CA'</span><span class=\"p\">,</span> <span class=\"s\">'OR'</span><span class=\"p\">)</span></code></pre>\n</figure>\n\n<p>Now we need a list of all adjacent pairs of states.  Fortunately <a href=\"http://writeonly.wordpress.com/2009/03/20/adjacency-list-of-states-of-the-united-states-us/\">someone else</a> has already compiled such a list.  His data looks like this</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>AK\nAL,MS,TN,GA,FL\nAR,MO,TN,MS,LA,TX,OK\nAZ,CA,NV,UT,CO,NM\nCA,OR,NV,AZ\nCO,WY,NE,KS,OK,NM,AZ,UT\n...\n</code></pre></div></div>\n\n<p>Each line says that the first element is adjacent to the following ones.  So for example Alaska (AK) is adjacent to no states and California (CA) is adjacent to Oregon (OR), Nevada (NV) and Arizona (AZ).  We can parse this file and assert the relevant facts with fairly standard Python code</p>\n\n<figure class=\"highlight\">\n  <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s\">'examples/data/adjacent-states.txt'</span><span class=\"p\">)</span>  <span class=\"c1\"># lines like 'CA,OR,NV,AZ'\n</span><span class=\"n\">adjlist</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">line</span><span class=\"p\">.</span><span class=\"n\">strip</span><span class=\"p\">().</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s\">','</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">line</span> <span class=\"ow\">in</span> <span class=\"n\">f</span><span class=\"p\">]</span>\n<span class=\"n\">f</span><span class=\"p\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n\n<span class=\"k\">for</span> <span class=\"n\">L</span> <span class=\"ow\">in</span> <span class=\"n\">adjlist</span><span class=\"p\">:</span>                   <span class=\"c1\"># ['CA', 'OR', 'NV', 'AZ']\n</span>    <span class=\"n\">head</span><span class=\"p\">,</span> <span class=\"n\">tail</span> <span class=\"o\">=</span> <span class=\"n\">L</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">L</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:]</span>        <span class=\"c1\"># 'CA', ['OR', 'NV', 'AZ']\n</span>    <span class=\"k\">for</span> <span class=\"n\">state</span> <span class=\"ow\">in</span> <span class=\"n\">tail</span><span class=\"p\">:</span>\n        <span class=\"n\">fact</span><span class=\"p\">(</span><span class=\"n\">adjacent</span><span class=\"p\">,</span> <span class=\"n\">head</span><span class=\"p\">,</span> <span class=\"n\">state</span><span class=\"p\">)</span> <span class=\"c1\"># e.g. 'CA' is adjacent to 'OR',\n</span>                                    <span class=\"c1\">#      'CA' is adjacent to 'NV', etc...</span></code></pre>\n</figure>\n\n<h2 id=\"queries\">Queries</h2>\n\n<p>Once have asserted the relevant facts we can run queries with the logical expressions of LogPy.  Recall from the <a href=\"https://mrocklin.github.io/blog/work/2013/01/14/LogPy-Introduction/\">last post</a> that we can use relations to express logical goals and use <code class=\"language-plaintext highlighter-rouge\">run</code> to search for cases that satisfy those goals.  Here are two simple queries</p>\n\n<figure class=\"highlight\">\n  <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">logpy</span> <span class=\"kn\">import</span> <span class=\"n\">var</span><span class=\"p\">,</span> <span class=\"n\">run</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">var</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">print</span> <span class=\"n\">run</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">adjacent</span><span class=\"p\">(</span><span class=\"s\">'CA'</span><span class=\"p\">,</span> <span class=\"s\">'NY'</span><span class=\"p\">))</span> <span class=\"c1\"># is California adjacent to New York?\n</span><span class=\"p\">()</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">print</span> <span class=\"n\">run</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">adjacent</span><span class=\"p\">(</span><span class=\"s\">'CA'</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">))</span>    <span class=\"c1\"># all states next to California\n</span><span class=\"p\">(</span><span class=\"s\">'OR'</span><span class=\"p\">,</span> <span class=\"s\">'NV'</span><span class=\"p\">,</span> <span class=\"s\">'AZ'</span><span class=\"p\">)</span></code></pre>\n</figure>\n\n<p>We can construct more complex queries with multiple goals.  In SQL the following queries would require a <code class=\"language-plaintext highlighter-rouge\">JOIN</code></p>\n\n<figure class=\"highlight\">\n  <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">var</span><span class=\"p\">()</span>  <span class=\"c1\"># create second variable for complex queries\n</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">print</span> <span class=\"n\">run</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">adjacent</span><span class=\"p\">(</span><span class=\"s\">'TX'</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">),</span>    <span class=\"c1\"># all coastal states next to Texas\n</span><span class=\"p\">...</span>                 <span class=\"n\">coastal</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"s\">'LA'</span><span class=\"p\">,)</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">print</span> <span class=\"n\">run</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">coastal</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">),</span>           <span class=\"c1\"># five states that border a coastal state\n</span><span class=\"p\">...</span>                 <span class=\"n\">adjacent</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"s\">'VT'</span><span class=\"p\">,</span> <span class=\"s\">'AL'</span><span class=\"p\">,</span> <span class=\"s\">'WV'</span><span class=\"p\">,</span> <span class=\"s\">'DE'</span><span class=\"p\">,</span> <span class=\"s\">'MA'</span><span class=\"p\">)</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">print</span> <span class=\"n\">run</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">adjacent</span><span class=\"p\">(</span><span class=\"s\">'TN'</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">),</span>    <span class=\"c1\"># all states adjacent to Tennessee\n</span><span class=\"p\">...</span>                 <span class=\"n\">adjacent</span><span class=\"p\">(</span><span class=\"s\">'FL'</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">))</span>    <span class=\"c1\">#        and adjacent to Florida\n</span><span class=\"p\">(</span><span class=\"s\">'GA'</span><span class=\"p\">,</span> <span class=\"s\">'AL'</span><span class=\"p\">)</span></code></pre>\n</figure>\n\n<p>Facts and relations are currently indexed by default, yielding relatively fast query times.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>LogPy provides a declarative interface to query complex data.  Data is stored\nas facts/tuples and queries are expressed as logical goals.  This system is\nexpressive and can match SQL in many respects.  The use of Logic programming languages for database queries has roots in <a href=\"http://en.wikipedia.org/wiki/Datalog\">Datalog</a> a subset of Prolog designed for databases.</p>"
}