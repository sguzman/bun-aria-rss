{
  "title": "Sleeping Giant Rural Postman Problem",
  "link": "",
  "id": "http://brooksandrew.github.io/simpleblog/articles/sleeping-giant-rural-postman-problem",
  "published": "2017-12-01T00:00:00+00:00",
  "updated": "2017-12-01T00:00:00+00:00",
  "author": {
    "name": "andrew brooks",
    "uri": "http://brooksandrew.github.io/simpleblog",
    "email": "andrewbrooksct@gmail.com"
  },
  "content": "<p>This problem originated from a blog post I wrote for DataCamp on graph optimization <a href=\"https://www.datacamp.com/community/tutorials/networkx-python-graph-tutorial\">here</a>.  The algorithm I sketched out there for solving the Chinese Problem on the\n<a href=\"http://www.ct.gov/deep/cwp/view.asp?a=2716&amp;q=325264&amp;deepNav_GID=1650%20\">Sleeping Giant state park</a> trail network has since been formalized into the <a href=\"https://github.com/brooksandrew/postman_problems\">postman_problems</a> python library.  I’ve also added the Rural Postman solver that is implemented here.</p>\n\n<p>So the three main enhancements in this post from the original DataCamp article and my second iteration published <a href=\"http://brooksandrew.github.io/simpleblog/articles/intro-to-graph-optimization-solving-cpp\">here</a> updating to networkx 2.0 are:</p>\n<ol>\n  <li>OpenStreetMap for graph data and visualization.</li>\n  <li>Implementing the Rural Postman algorithm to consider optional edges.</li>\n  <li>Leveraging the <a href=\"https://github.com/brooksandrew/postman_problems\">postman_problems</a> library.</li>\n</ol>\n\n<p>This code, notebook and data for this post can be found in the <a href=\"https://github.com/brooksandrew/postman_problems_examples\">postman_problems_examples</a> repo.</p>\n\n<p>The motivation and background around this problem is written up more thoroughly in the previous posts and <a href=\"https://github.com/brooksandrew/postman_problems\">postman_problems</a>.</p>\n\n<h4 id=\"rpp-solution-route-animation\">RPP Solution Route Animation</h4>\n\n<p>Here’s the full route animation.  More details <a href=\"https://github.com/brooksandrew/postman_problems_examples/tree/master/sleepinggiant/animation\">here</a>.  Kudos to my sister <a href=\"https://github.com/laurabrooks\">@laurabrooks</a> for coding this up!</p>\n\n<iframe src=\"http://cdn.rawgit.com/brooksandrew/postman_problems_examples/master/sleepinggiant/animation/index.html\" height=\"400\" width=\"750\"></iframe>\n\n<h4 id=\"table-of-contents\">Table of Contents</h4>\n\n<ul id=\"markdown-toc\">\n  <li><a href=\"#create-graph-from-osm\" id=\"markdown-toc-create-graph-from-osm\">Create Graph from OSM</a></li>\n  <li><a href=\"#viz-sleeping-giant-trails\" id=\"markdown-toc-viz-sleeping-giant-trails\">Viz Sleeping Giant Trails</a></li>\n  <li><a href=\"#connect-edges\" id=\"markdown-toc-connect-edges\">Connect Edges</a></li>\n  <li><a href=\"#viz-connected-component\" id=\"markdown-toc-viz-connected-component\">Viz Connected Component</a></li>\n  <li><a href=\"#viz-trail-color\" id=\"markdown-toc-viz-trail-color\">Viz Trail Color</a></li>\n  <li><a href=\"#contract-edges\" id=\"markdown-toc-contract-edges\">Contract Edges</a></li>\n  <li><a href=\"#solve-cpp\" id=\"markdown-toc-solve-cpp\">Solve CPP</a></li>\n  <li><a href=\"#solve-rpp\" id=\"markdown-toc-solve-rpp\">Solve RPP</a></li>\n  <li><a href=\"#viz-rpp-solution\" id=\"markdown-toc-viz-rpp-solution\">Viz RPP Solution</a>    <ul>\n      <li><a href=\"#viz-rpp-optional-edges\" id=\"markdown-toc-viz-rpp-optional-edges\">Viz: RPP optional edges</a></li>\n      <li><a href=\"#viz-rpp-edges-counts\" id=\"markdown-toc-viz-rpp-edges-counts\">Viz: RPP edges counts</a></li>\n    </ul>\n  </li>\n  <li><a href=\"#create-geojson-solution\" id=\"markdown-toc-create-geojson-solution\">Create geojson solution</a></li>\n</ul>\n\n<figure class=\"highlight\"><pre><code class=\"language-python\" data-lang=\"python\"><span class=\"kn\">import</span> <span class=\"nn\">mplleaflet</span>\n<span class=\"kn\">import</span> <span class=\"nn\">networkx</span> <span class=\"k\">as</span> <span class=\"n\">nx</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pandas</span> <span class=\"k\">as</span> <span class=\"n\">pd</span>\n<span class=\"kn\">import</span> <span class=\"nn\">matplotlib.pyplot</span> <span class=\"k\">as</span> <span class=\"n\">plt</span>\n<span class=\"kn\">from</span> <span class=\"nn\">collections</span> <span class=\"kn\">import</span> <span class=\"n\">Counter</span>\n\n<span class=\"c\"># can be found in https://github.com/brooksandrew/postman_problems_examples</span>\n<span class=\"kn\">from</span> <span class=\"nn\">osm2nx</span> <span class=\"kn\">import</span> <span class=\"n\">read_osm</span><span class=\"p\">,</span> <span class=\"n\">haversine</span>\n<span class=\"kn\">from</span> <span class=\"nn\">graph</span> <span class=\"kn\">import</span> <span class=\"n\">contract_edges</span><span class=\"p\">,</span> <span class=\"n\">create_rpp_edgelist</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">postman_problems.tests.utils</span> <span class=\"kn\">import</span> <span class=\"n\">create_mock_csv_from_dataframe</span>\n<span class=\"kn\">from</span> <span class=\"nn\">postman_problems.solver</span> <span class=\"kn\">import</span> <span class=\"n\">rpp</span><span class=\"p\">,</span> <span class=\"n\">cpp</span>\n<span class=\"kn\">from</span> <span class=\"nn\">postman_problems.stats</span> <span class=\"kn\">import</span> <span class=\"n\">calculate_postman_solution_stats</span></code></pre></figure>\n\n<h2 id=\"create-graph-from-osm\">Create Graph from OSM</h2>\n\n<figure class=\"highlight\"><pre><code class=\"language-python\" data-lang=\"python\"><span class=\"c\"># load OSM to a directed NX</span>\n<span class=\"n\">g_d</span> <span class=\"o\">=</span> <span class=\"n\">read_osm</span><span class=\"p\">(</span><span class=\"s\">'sleepinggiant.osm'</span><span class=\"p\">)</span>  \n\n<span class=\"c\"># create an undirected graph</span>\n<span class=\"n\">g</span> <span class=\"o\">=</span> <span class=\"n\">g_d</span><span class=\"o\">.</span><span class=\"n\">to_undirected</span><span class=\"p\">()</span></code></pre></figure>\n\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>&lt;class 'networkx.classes.digraph.DiGraph'&gt;\n</code></pre></div></div>\n\n<h4 id=\"adding-edges-that-dont-exist-on-osm-but-should\">Adding edges that don’t exist on OSM, but should</h4>\n\n<figure class=\"highlight\"><pre><code class=\"language-python\" data-lang=\"python\"><span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">add_edge</span><span class=\"p\">(</span><span class=\"s\">'2318082790'</span><span class=\"p\">,</span> <span class=\"s\">'2318082832'</span><span class=\"p\">,</span> <span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s\">'white_horseshoe_fix_1'</span><span class=\"p\">)</span></code></pre></figure>\n\n<h4 id=\"adding-distance-to-osm-graph\">Adding distance to OSM graph</h4>\n\n<p>Using the haversine formula to calculate distance between each edge.</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-python\" data-lang=\"python\"><span class=\"k\">for</span> <span class=\"n\">e</span> <span class=\"ow\">in</span> <span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">edges</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">):</span>\n    <span class=\"n\">e</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">][</span><span class=\"s\">'distance'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">haversine</span><span class=\"p\">(</span><span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"p\">[</span><span class=\"n\">e</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]][</span><span class=\"s\">'lon'</span><span class=\"p\">],</span> \n                                 <span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"p\">[</span><span class=\"n\">e</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]][</span><span class=\"s\">'lat'</span><span class=\"p\">],</span> \n                                 <span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"p\">[</span><span class=\"n\">e</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]][</span><span class=\"s\">'lon'</span><span class=\"p\">],</span> \n                                 <span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"p\">[</span><span class=\"n\">e</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]][</span><span class=\"s\">'lat'</span><span class=\"p\">])</span></code></pre></figure>\n\n<h4 id=\"create-graph-of-required-trails-only\">Create graph of required trails only</h4>\n\n<p>A simple heuristic with a couple tweaks is all we need to create the graph with required edges:</p>\n\n<ol>\n  <li>Keep any edge with ‘Trail’ in the name attribute.</li>\n  <li>Manually remove the handful of trails that are not part of the required Giant Master route.</li>\n</ol>\n\n<p><img src=\"https://github.com/brooksandrew/postman_problems_examples/raw/master/sleepinggiant/fig/sleepinggiant_3trailsmap.jpg\" alt=\"trail_map_3builds\" /></p>\n\n<figure class=\"highlight\"><pre><code class=\"language-python\" data-lang=\"python\"><span class=\"n\">g_t</span> <span class=\"o\">=</span> <span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>\n\n<span class=\"k\">for</span> <span class=\"n\">e</span> <span class=\"ow\">in</span> <span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">edges</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">):</span>\n    \n    <span class=\"c\"># remove non trails</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">e</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">][</span><span class=\"s\">'name'</span><span class=\"p\">]</span> <span class=\"k\">if</span> <span class=\"s\">'name'</span> <span class=\"ow\">in</span> <span class=\"n\">e</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"k\">else</span> <span class=\"s\">''</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"s\">'Trail'</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">name</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">())</span> <span class=\"ow\">or</span> <span class=\"p\">(</span><span class=\"n\">name</span> <span class=\"ow\">is</span> <span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"n\">g_t</span><span class=\"o\">.</span><span class=\"n\">remove_edge</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">e</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n        \n    <span class=\"c\"># remove non Sleeping Giant trails</span>\n    <span class=\"k\">elif</span> <span class=\"n\">name</span> <span class=\"ow\">in</span> <span class=\"p\">[</span>\n        <span class=\"s\">'Farmington Canal Linear Trail'</span><span class=\"p\">,</span> \n        <span class=\"s\">'Farmington Canal Heritage Trail'</span><span class=\"p\">,</span> \n        <span class=\"s\">'Montowese Trail'</span><span class=\"p\">,</span>\n        <span class=\"s\">'(white blazes)'</span><span class=\"p\">]:</span>\n        <span class=\"n\">g_t</span><span class=\"o\">.</span><span class=\"n\">remove_edge</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">e</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n\n<span class=\"c\"># cleaning up nodes left without edges</span>\n<span class=\"k\">for</span> <span class=\"n\">n</span> <span class=\"ow\">in</span> <span class=\"n\">nx</span><span class=\"o\">.</span><span class=\"n\">isolates</span><span class=\"p\">(</span><span class=\"n\">g_t</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()):</span>\n    <span class=\"n\">g_t</span><span class=\"o\">.</span><span class=\"n\">remove_node</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span></code></pre></figure>\n\n<h2 id=\"viz-sleeping-giant-trails\">Viz Sleeping Giant Trails</h2>\n\n<p>All trails required for the Giant Master:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-python\" data-lang=\"python\"><span class=\"n\">fig</span><span class=\"p\">,</span> <span class=\"n\">ax</span> <span class=\"o\">=</span> <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">subplots</span><span class=\"p\">(</span><span class=\"n\">figsize</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">8</span><span class=\"p\">))</span>\n\n<span class=\"n\">pos</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"n\">k</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"n\">g_t</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">][</span><span class=\"s\">'lon'</span><span class=\"p\">],</span> <span class=\"n\">g_t</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">][</span><span class=\"s\">'lat'</span><span class=\"p\">])</span> <span class=\"k\">for</span> <span class=\"n\">k</span> <span class=\"ow\">in</span> <span class=\"n\">g_t</span><span class=\"o\">.</span><span class=\"n\">nodes</span><span class=\"p\">()}</span>    \n<span class=\"n\">nx</span><span class=\"o\">.</span><span class=\"n\">draw_networkx_edges</span><span class=\"p\">(</span><span class=\"n\">g_t</span><span class=\"p\">,</span> <span class=\"n\">pos</span><span class=\"p\">,</span> <span class=\"n\">width</span><span class=\"o\">=</span><span class=\"mf\">2.5</span><span class=\"p\">,</span> <span class=\"n\">edge_color</span><span class=\"o\">=</span><span class=\"s\">'black'</span><span class=\"p\">,</span> <span class=\"n\">alpha</span><span class=\"o\">=</span><span class=\"mf\">0.7</span><span class=\"p\">)</span>\n\n<span class=\"n\">mplleaflet</span><span class=\"o\">.</span><span class=\"n\">save_html</span><span class=\"p\">(</span><span class=\"n\">fig</span><span class=\"p\">,</span> <span class=\"s\">'maps/sleepinggiant_trails_only.html'</span><span class=\"p\">)</span></code></pre></figure>\n\n<iframe src=\"https://cdn.rawgit.com/brooksandrew/postman_problems_examples/master/sleepinggiant/maps/sleepinggiant_trails_only.html\" height=\"400\" width=\"750\"></iframe>\n\n<h2 id=\"connect-edges\">Connect Edges</h2>\n\n<p>In order to run the RPP algorithm from <a href=\"https://github.com/brooksandrew/postman_problems\">postman_problems</a>, the required edges of the graph must form a single connected component.  We’re almost there with the Sleeping Giant trail map as-is, so we’ll\njust connect a few components manually.</p>\n\n<p>Here’s an example of a few floating components (southwest corner of park):</p>\n\n<p><img src=\"https://github.com/brooksandrew/postman_problems_examples/raw/master/sleepinggiant/fig/sleepinggiant_disconnected_components.png\" width=\"500\" /></p>\n\n<p><a href=\"https://www.openstreetmap.org/#map=17/41.42201/-72.89983\">OpenStreetMap</a> makes finding these edge (way) IDs simple.  Once grabbing the <code class=\"highlighter-rouge\">?</code> cursor, you can click on any edge to retrieve IDs and attributes.</p>\n\n<p><img src=\"https://github.com/brooksandrew/postman_problems_examples/raw/master/sleepinggiant/fig/osm_edge_lookup.png\" width=\"1000\" /></p>\n\n<h4 id=\"define-osm-edges-to-add-and-remove-from-graph\">Define OSM edges to add and remove from graph</h4>\n\n<figure class=\"highlight\"><pre><code class=\"language-python\" data-lang=\"python\"><span class=\"n\">edge_ids_to_add</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"s\">'223082783'</span><span class=\"p\">,</span> \n    <span class=\"s\">'223077827'</span><span class=\"p\">,</span> \n    <span class=\"s\">'40636272'</span><span class=\"p\">,</span> \n    <span class=\"s\">'223082785'</span><span class=\"p\">,</span> \n    <span class=\"s\">'222868698'</span><span class=\"p\">,</span>\n    <span class=\"s\">'223083721'</span><span class=\"p\">,</span>\n    <span class=\"s\">'222947116'</span><span class=\"p\">,</span>\n    <span class=\"s\">'222711152'</span><span class=\"p\">,</span>\n    <span class=\"s\">'222711155'</span><span class=\"p\">,</span>\n    <span class=\"s\">'222860964'</span><span class=\"p\">,</span>\n    <span class=\"s\">'223083718'</span><span class=\"p\">,</span>\n    <span class=\"s\">'222867540'</span><span class=\"p\">,</span>\n    <span class=\"s\">'white_horseshoe_fix_1'</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">edge_ids_to_remove</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"s\">'17220599'</span>\n<span class=\"p\">]</span></code></pre></figure>\n\n<h4 id=\"add-attributes-for-supplementary-edges\">Add attributes for supplementary edges</h4>\n\n<figure class=\"highlight\"><pre><code class=\"language-python\" data-lang=\"python\"><span class=\"k\">for</span> <span class=\"n\">e</span> <span class=\"ow\">in</span> <span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">edges</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">):</span>\n    <span class=\"n\">way_id</span> <span class=\"o\">=</span> <span class=\"n\">e</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s\">'id'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s\">'-'</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n    <span class=\"k\">if</span> <span class=\"n\">way_id</span> <span class=\"ow\">in</span> <span class=\"n\">edge_ids_to_add</span><span class=\"p\">:</span>\n        <span class=\"n\">g_t</span><span class=\"o\">.</span><span class=\"n\">add_edge</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">e</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"o\">**</span><span class=\"n\">e</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">])</span>\n        <span class=\"n\">g_t</span><span class=\"o\">.</span><span class=\"n\">add_node</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">lat</span><span class=\"o\">=</span><span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"p\">[</span><span class=\"n\">e</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]][</span><span class=\"s\">'lat'</span><span class=\"p\">],</span> <span class=\"n\">lon</span><span class=\"o\">=</span><span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"p\">[</span><span class=\"n\">e</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]][</span><span class=\"s\">'lon'</span><span class=\"p\">])</span>\n        <span class=\"n\">g_t</span><span class=\"o\">.</span><span class=\"n\">add_node</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">lat</span><span class=\"o\">=</span><span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"p\">[</span><span class=\"n\">e</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]][</span><span class=\"s\">'lat'</span><span class=\"p\">],</span> <span class=\"n\">lon</span><span class=\"o\">=</span><span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"p\">[</span><span class=\"n\">e</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]][</span><span class=\"s\">'lon'</span><span class=\"p\">])</span>\n    <span class=\"k\">if</span> <span class=\"n\">way_id</span> <span class=\"ow\">in</span> <span class=\"n\">edge_ids_to_remove</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"n\">g_t</span><span class=\"o\">.</span><span class=\"n\">has_edge</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">e</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]):</span>\n            <span class=\"n\">g_t</span><span class=\"o\">.</span><span class=\"n\">remove_edge</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">e</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n            \n<span class=\"k\">for</span> <span class=\"n\">n</span> <span class=\"ow\">in</span> <span class=\"n\">nx</span><span class=\"o\">.</span><span class=\"n\">isolates</span><span class=\"p\">(</span><span class=\"n\">g_t</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()):</span>\n    <span class=\"n\">g_t</span><span class=\"o\">.</span><span class=\"n\">remove_node</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span></code></pre></figure>\n\n<p>Ensuring that we’re left with one single connected component:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-python\" data-lang=\"python\"><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">nx</span><span class=\"o\">.</span><span class=\"n\">connected_components</span><span class=\"p\">(</span><span class=\"n\">g_t</span><span class=\"p\">)))</span></code></pre></figure>\n\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>1\n</code></pre></div></div>\n\n<h2 id=\"viz-connected-component\">Viz Connected Component</h2>\n\n<p>The map below visualizes the required edges and nodes of interest (intersections and dead-ends where degree != 2):</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-python\" data-lang=\"python\"><span class=\"n\">fig</span><span class=\"p\">,</span> <span class=\"n\">ax</span> <span class=\"o\">=</span> <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">subplots</span><span class=\"p\">(</span><span class=\"n\">figsize</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">12</span><span class=\"p\">))</span>\n\n<span class=\"c\"># edges</span>\n<span class=\"n\">pos</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"n\">k</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"n\">g_t</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s\">'lon'</span><span class=\"p\">),</span> <span class=\"n\">g_t</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s\">'lat'</span><span class=\"p\">))</span> <span class=\"k\">for</span> <span class=\"n\">k</span> <span class=\"ow\">in</span> <span class=\"n\">g_t</span><span class=\"o\">.</span><span class=\"n\">nodes</span><span class=\"p\">()}</span>    \n<span class=\"n\">nx</span><span class=\"o\">.</span><span class=\"n\">draw_networkx_edges</span><span class=\"p\">(</span><span class=\"n\">g_t</span><span class=\"p\">,</span> <span class=\"n\">pos</span><span class=\"p\">,</span> <span class=\"n\">width</span><span class=\"o\">=</span><span class=\"mf\">3.0</span><span class=\"p\">,</span> <span class=\"n\">edge_color</span><span class=\"o\">=</span><span class=\"s\">'black'</span><span class=\"p\">,</span> <span class=\"n\">alpha</span><span class=\"o\">=</span><span class=\"mf\">0.6</span><span class=\"p\">)</span>\n\n<span class=\"c\"># nodes (intersections and dead-ends)</span>\n<span class=\"n\">pos_x</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"n\">k</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"n\">g_t</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">][</span><span class=\"s\">'lon'</span><span class=\"p\">],</span> <span class=\"n\">g_t</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">][</span><span class=\"s\">'lat'</span><span class=\"p\">])</span> <span class=\"k\">for</span> <span class=\"n\">k</span> <span class=\"ow\">in</span> <span class=\"n\">g_t</span><span class=\"o\">.</span><span class=\"n\">nodes</span><span class=\"p\">()</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">g_t</span><span class=\"o\">.</span><span class=\"n\">degree</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">)</span><span class=\"o\">==</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">|</span> <span class=\"p\">(</span><span class=\"n\">g_t</span><span class=\"o\">.</span><span class=\"n\">degree</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"mi\">2</span><span class=\"p\">)}</span>    \n<span class=\"n\">nx</span><span class=\"o\">.</span><span class=\"n\">draw_networkx_nodes</span><span class=\"p\">(</span><span class=\"n\">g_t</span><span class=\"p\">,</span> <span class=\"n\">pos_x</span><span class=\"p\">,</span> <span class=\"n\">nodelist</span><span class=\"o\">=</span><span class=\"n\">pos_x</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">(),</span> <span class=\"n\">node_size</span><span class=\"o\">=</span><span class=\"mf\">35.0</span><span class=\"p\">,</span> <span class=\"n\">node_color</span><span class=\"o\">=</span><span class=\"s\">'red'</span><span class=\"p\">,</span> <span class=\"n\">alpha</span><span class=\"o\">=</span><span class=\"mf\">0.9</span><span class=\"p\">)</span>\n\n<span class=\"n\">mplleaflet</span><span class=\"o\">.</span><span class=\"n\">save_html</span><span class=\"p\">(</span><span class=\"n\">fig</span><span class=\"p\">,</span> <span class=\"s\">'maps/trails_only_intersections.html'</span><span class=\"p\">)</span></code></pre></figure>\n\n<iframe src=\"https://cdn.rawgit.com/brooksandrew/postman_problems_examples/master/sleepinggiant/maps/trails_only_intersections.html\" height=\"400\" width=\"750\"></iframe>\n\n<h2 id=\"viz-trail-color\">Viz Trail Color</h2>\n\n<p>Because we can and it’s pretty.</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-python\" data-lang=\"python\"><span class=\"n\">name2color</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s\">'Green Trail'</span><span class=\"p\">:</span> <span class=\"s\">'green'</span><span class=\"p\">,</span>\n    <span class=\"s\">'Quinnipiac Trail'</span><span class=\"p\">:</span> <span class=\"s\">'blue'</span><span class=\"p\">,</span>\n    <span class=\"s\">'Tower Trail'</span><span class=\"p\">:</span> <span class=\"s\">'black'</span><span class=\"p\">,</span>\n    <span class=\"s\">'Yellow Trail'</span><span class=\"p\">:</span> <span class=\"s\">'yellow'</span><span class=\"p\">,</span>\n    <span class=\"s\">'Red Square Trail'</span><span class=\"p\">:</span> <span class=\"s\">'red'</span><span class=\"p\">,</span>\n    <span class=\"s\">'White/Blue Trail Link'</span><span class=\"p\">:</span> <span class=\"s\">'lightblue'</span><span class=\"p\">,</span>\n    <span class=\"s\">'Orange Trail'</span><span class=\"p\">:</span> <span class=\"s\">'orange'</span><span class=\"p\">,</span>\n    <span class=\"s\">'Mount Carmel Avenue'</span><span class=\"p\">:</span> <span class=\"s\">'black'</span><span class=\"p\">,</span>\n    <span class=\"s\">'Violet Trail'</span><span class=\"p\">:</span> <span class=\"s\">'violet'</span><span class=\"p\">,</span>\n    <span class=\"s\">'blue Trail'</span><span class=\"p\">:</span> <span class=\"s\">'blue'</span><span class=\"p\">,</span>\n    <span class=\"s\">'Red Triangle Trail'</span><span class=\"p\">:</span> <span class=\"s\">'red'</span><span class=\"p\">,</span>\n    <span class=\"s\">'Blue Trail'</span><span class=\"p\">:</span> <span class=\"s\">'blue'</span><span class=\"p\">,</span>\n    <span class=\"s\">'Blue/Violet Trail Link'</span><span class=\"p\">:</span> <span class=\"s\">'purple'</span><span class=\"p\">,</span>\n    <span class=\"s\">'Red Circle Trail'</span><span class=\"p\">:</span> <span class=\"s\">'red'</span><span class=\"p\">,</span>\n    <span class=\"s\">'White Trail'</span><span class=\"p\">:</span> <span class=\"s\">'gray'</span><span class=\"p\">,</span>\n    <span class=\"s\">'Red Diamond Trail'</span><span class=\"p\">:</span> <span class=\"s\">'red'</span><span class=\"p\">,</span>\n    <span class=\"s\">'Yellow/Green Trail Link'</span><span class=\"p\">:</span> <span class=\"s\">'yellowgreen'</span><span class=\"p\">,</span>\n    <span class=\"s\">'Nature Trail'</span><span class=\"p\">:</span> <span class=\"s\">'forestgreen'</span><span class=\"p\">,</span>\n    <span class=\"s\">'Red Hexagon Trail'</span><span class=\"p\">:</span> <span class=\"s\">'red'</span><span class=\"p\">,</span>\n    <span class=\"bp\">None</span><span class=\"p\">:</span> <span class=\"s\">'black'</span>\n<span class=\"p\">}</span></code></pre></figure>\n\n<figure class=\"highlight\"><pre><code class=\"language-python\" data-lang=\"python\"><span class=\"n\">fig</span><span class=\"p\">,</span> <span class=\"n\">ax</span> <span class=\"o\">=</span> <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">subplots</span><span class=\"p\">(</span><span class=\"n\">figsize</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">10</span><span class=\"p\">))</span>\n        \n<span class=\"n\">pos</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"n\">k</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"n\">g_t</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">][</span><span class=\"s\">'lon'</span><span class=\"p\">],</span> <span class=\"n\">g_t</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">][</span><span class=\"s\">'lat'</span><span class=\"p\">])</span> <span class=\"k\">for</span> <span class=\"n\">k</span> <span class=\"ow\">in</span> <span class=\"n\">g_t</span><span class=\"o\">.</span><span class=\"n\">nodes</span><span class=\"p\">()}</span>   \n<span class=\"n\">e_color</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">name2color</span><span class=\"p\">[</span><span class=\"n\">e</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s\">'name'</span><span class=\"p\">)]</span> <span class=\"k\">for</span> <span class=\"n\">e</span> <span class=\"ow\">in</span> <span class=\"n\">g_t</span><span class=\"o\">.</span><span class=\"n\">edges</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)]</span>\n<span class=\"n\">nx</span><span class=\"o\">.</span><span class=\"n\">draw_networkx_edges</span><span class=\"p\">(</span><span class=\"n\">g_t</span><span class=\"p\">,</span> <span class=\"n\">pos</span><span class=\"p\">,</span> <span class=\"n\">width</span><span class=\"o\">=</span><span class=\"mf\">3.0</span><span class=\"p\">,</span> <span class=\"n\">edge_color</span><span class=\"o\">=</span><span class=\"n\">e_color</span><span class=\"p\">,</span> <span class=\"n\">alpha</span><span class=\"o\">=</span><span class=\"mf\">0.5</span><span class=\"p\">)</span>\n<span class=\"n\">nx</span><span class=\"o\">.</span><span class=\"n\">draw_networkx_nodes</span><span class=\"p\">(</span><span class=\"n\">g_t</span><span class=\"p\">,</span> <span class=\"n\">pos_x</span><span class=\"p\">,</span> <span class=\"n\">nodelist</span><span class=\"o\">=</span><span class=\"n\">pos_x</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">(),</span> <span class=\"n\">node_size</span><span class=\"o\">=</span><span class=\"mf\">30.0</span><span class=\"p\">,</span> <span class=\"n\">node_color</span><span class=\"o\">=</span><span class=\"s\">'black'</span><span class=\"p\">,</span> <span class=\"n\">alpha</span><span class=\"o\">=</span><span class=\"mf\">0.9</span><span class=\"p\">)</span>\n\n<span class=\"n\">mplleaflet</span><span class=\"o\">.</span><span class=\"n\">save_html</span><span class=\"p\">(</span><span class=\"n\">fig</span><span class=\"p\">,</span> <span class=\"s\">'maps/trails_only_color.html'</span><span class=\"p\">,</span> <span class=\"n\">tiles</span><span class=\"o\">=</span><span class=\"s\">'cartodb_positron'</span><span class=\"p\">)</span></code></pre></figure>\n\n<iframe src=\"https://cdn.rawgit.com/brooksandrew/postman_problems_examples/master/sleepinggiant/maps/trails_only_color.html\" height=\"400\" width=\"750\"></iframe>\n\n<h4 id=\"check-distance\">Check distance</h4>\n\n<p>This is strikingly close (within 0.25 miles) to what I calculated manually with some guess work from the <a href=\"http://www.ct.gov/deep/lib/deep/stateparks/maps/sleepgiant.pdf\">SG trail map</a> on the first pass at this problem <a href=\"http://brooksandrew.github.io/simpleblog/articles/intro-to-graph-optimization-solving-cpp/#stats\">here</a>, before leveraging OSM.</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-python\" data-lang=\"python\"><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">'{:0.2f} miles of required trail.'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"nb\">sum</span><span class=\"p\">([</span><span class=\"n\">e</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">][</span><span class=\"s\">'distance'</span><span class=\"p\">]</span><span class=\"o\">/</span><span class=\"mf\">1609.34</span> <span class=\"k\">for</span> <span class=\"n\">e</span> <span class=\"ow\">in</span> <span class=\"n\">g_t</span><span class=\"o\">.</span><span class=\"n\">edges</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)])))</span></code></pre></figure>\n\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>25.56 miles of required trail.\n</code></pre></div></div>\n\n<h2 id=\"contract-edges\">Contract Edges</h2>\n\n<p>We could run the RPP algorithm on the graph as-is with &gt;5000 edges.  However, we can simplify computation by contracting edges into logical trail segments first.  More details on the intuition and\nmethodology in the <a href=\"http://brooksandrew.github.io/simpleblog/articles/fifty-states-rural-postman-problem/#41-contract-edges\">50 states post</a>.</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-python\" data-lang=\"python\"><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">'Number of edges in trail graph: {}'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">g_t</span><span class=\"o\">.</span><span class=\"n\">edges</span><span class=\"p\">())))</span></code></pre></figure>\n\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Number of edges in trail graph: 5141\n</code></pre></div></div>\n\n<figure class=\"highlight\"><pre><code class=\"language-python\" data-lang=\"python\"><span class=\"c\"># intialize contracted graph</span>\n<span class=\"n\">g_tc</span> <span class=\"o\">=</span> <span class=\"n\">nx</span><span class=\"o\">.</span><span class=\"n\">MultiGraph</span><span class=\"p\">()</span>\n\n<span class=\"c\"># add contracted edges to graph</span>\n<span class=\"k\">for</span> <span class=\"n\">ce</span> <span class=\"ow\">in</span> <span class=\"n\">contract_edges</span><span class=\"p\">(</span><span class=\"n\">g_t</span><span class=\"p\">,</span> <span class=\"s\">'distance'</span><span class=\"p\">):</span>\n    <span class=\"n\">start_node</span><span class=\"p\">,</span> <span class=\"n\">end_node</span><span class=\"p\">,</span> <span class=\"n\">distance</span><span class=\"p\">,</span> <span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"n\">ce</span>\n    \n    <span class=\"n\">contracted_edge</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n                <span class=\"s\">'start_node'</span><span class=\"p\">:</span> <span class=\"n\">start_node</span><span class=\"p\">,</span>\n                <span class=\"s\">'end_node'</span><span class=\"p\">:</span> <span class=\"n\">end_node</span><span class=\"p\">,</span>\n                <span class=\"s\">'distance'</span><span class=\"p\">:</span> <span class=\"n\">distance</span><span class=\"p\">,</span>\n                <span class=\"s\">'name'</span><span class=\"p\">:</span> <span class=\"n\">g</span><span class=\"p\">[</span><span class=\"n\">path</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]][</span><span class=\"n\">path</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]]</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s\">'name'</span><span class=\"p\">),</span>\n                <span class=\"s\">'required'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n                <span class=\"s\">'path'</span><span class=\"p\">:</span> <span class=\"n\">path</span>\n            <span class=\"p\">}</span>\n    \n    <span class=\"n\">g_tc</span><span class=\"o\">.</span><span class=\"n\">add_edge</span><span class=\"p\">(</span><span class=\"n\">start_node</span><span class=\"p\">,</span> <span class=\"n\">end_node</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">contracted_edge</span><span class=\"p\">)</span>\n    <span class=\"n\">g_tc</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"p\">[</span><span class=\"n\">start_node</span><span class=\"p\">][</span><span class=\"s\">'lat'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"p\">[</span><span class=\"n\">start_node</span><span class=\"p\">][</span><span class=\"s\">'lat'</span><span class=\"p\">]</span>\n    <span class=\"n\">g_tc</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"p\">[</span><span class=\"n\">start_node</span><span class=\"p\">][</span><span class=\"s\">'lon'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"p\">[</span><span class=\"n\">start_node</span><span class=\"p\">][</span><span class=\"s\">'lon'</span><span class=\"p\">]</span>\n    <span class=\"n\">g_tc</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"p\">[</span><span class=\"n\">end_node</span><span class=\"p\">][</span><span class=\"s\">'lat'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"p\">[</span><span class=\"n\">end_node</span><span class=\"p\">][</span><span class=\"s\">'lat'</span><span class=\"p\">]</span>\n    <span class=\"n\">g_tc</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"p\">[</span><span class=\"n\">end_node</span><span class=\"p\">][</span><span class=\"s\">'lon'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"p\">[</span><span class=\"n\">end_node</span><span class=\"p\">][</span><span class=\"s\">'lon'</span><span class=\"p\">]</span></code></pre></figure>\n\n<p>Edge contraction reduces the number of edges fed to the RPP algorithm by a factor of ~40.</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-python\" data-lang=\"python\"><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">'Number of edges in contracted trail graoh: {}'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">g_tc</span><span class=\"o\">.</span><span class=\"n\">edges</span><span class=\"p\">())))</span></code></pre></figure>\n\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Number of edges in contracted trail graoh: 124\n</code></pre></div></div>\n\n<h2 id=\"solve-cpp\">Solve CPP</h2>\n\n<p>First, let’s see how well the Chinese Postman solution works.</p>\n\n<h4 id=\"create-cpp-edgelist\">Create CPP edgelist</h4>\n\n<figure class=\"highlight\"><pre><code class=\"language-python\" data-lang=\"python\"><span class=\"c\"># create list with edge attributes and \"from\" &amp; \"to\" nodes</span>\n<span class=\"n\">tmp</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"k\">for</span> <span class=\"n\">e</span> <span class=\"ow\">in</span> <span class=\"n\">g_tc</span><span class=\"o\">.</span><span class=\"n\">edges</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">):</span>\n    <span class=\"n\">tmpi</span> <span class=\"o\">=</span> <span class=\"n\">e</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>  <span class=\"c\"># so we don't mess w original graph</span>\n    <span class=\"n\">tmpi</span><span class=\"p\">[</span><span class=\"s\">'start_node'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">e</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n    <span class=\"n\">tmpi</span><span class=\"p\">[</span><span class=\"s\">'end_node'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">e</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n    <span class=\"n\">tmp</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">tmpi</span><span class=\"p\">)</span>\n    \n<span class=\"c\"># create dataframe w node1 and node2 in order</span>\n<span class=\"n\">eldf</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">tmp</span><span class=\"p\">)</span>   \n<span class=\"n\">eldf</span> <span class=\"o\">=</span> <span class=\"n\">eldf</span><span class=\"p\">[[</span><span class=\"s\">'start_node'</span><span class=\"p\">,</span> <span class=\"s\">'end_node'</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">eldf</span><span class=\"o\">.</span><span class=\"n\">columns</span><span class=\"p\">)</span><span class=\"o\">-</span><span class=\"p\">{</span><span class=\"s\">'start_node'</span><span class=\"p\">,</span> <span class=\"s\">'end_node'</span><span class=\"p\">})]</span>\n\n<span class=\"c\"># create edgelist mock CSV</span>\n<span class=\"n\">elfn</span> <span class=\"o\">=</span> <span class=\"n\">create_mock_csv_from_dataframe</span><span class=\"p\">(</span><span class=\"n\">eldf</span><span class=\"p\">)</span></code></pre></figure>\n\n<h4 id=\"start-node\">Start node</h4>\n\n<p>The route is designed to start at the far east end of the park on the Blue trail (node ‘735393342’).  While the CPP and RPP solutions will return a Eulerian circuit (loop back to the starting node),\nwe could truncate this last long doublebacking segment when actually running the route</p>\n\n<p><img src=\"https://github.com/brooksandrew/postman_problems_examples/raw/master/sleepinggiant/fig/sleepinggiant_starting_node.png\" width=\"600\" /></p>\n\n<h4 id=\"solve\">Solve</h4>\n\n<figure class=\"highlight\"><pre><code class=\"language-python\" data-lang=\"python\"><span class=\"n\">circuit_cpp</span><span class=\"p\">,</span> <span class=\"n\">gcpp</span> <span class=\"o\">=</span> <span class=\"n\">cpp</span><span class=\"p\">(</span><span class=\"n\">elfn</span><span class=\"p\">,</span> <span class=\"n\">start_node</span><span class=\"o\">=</span><span class=\"s\">'735393342'</span><span class=\"p\">)</span></code></pre></figure>\n\n<h4 id=\"cpp-stats\">CPP Stats</h4>\n\n<p><em>(distances in meters)</em></p>\n\n<figure class=\"highlight\"><pre><code class=\"language-python\" data-lang=\"python\"><span class=\"n\">cpp_stats</span> <span class=\"o\">=</span> <span class=\"n\">calculate_postman_solution_stats</span><span class=\"p\">(</span><span class=\"n\">circuit_cpp</span><span class=\"p\">)</span>\n<span class=\"n\">cpp_stats</span></code></pre></figure>\n\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>OrderedDict([('distance_walked', 54522.949121342645),\n             ('distance_doublebacked', 13383.36715945256),\n             ('distance_walked_once', 41139.581961890086),\n             ('distance_walked_optional', 0),\n             ('distance_walked_required', 54522.949121342645),\n             ('edges_walked', 170),\n             ('edges_doublebacked', 46),\n             ('edges_walked_once', 124),\n             ('edges_walked_optional', 0),\n             ('edges_walked_required', 170)])\n</code></pre></div></div>\n\n<figure class=\"highlight\"><pre><code class=\"language-python\" data-lang=\"python\"><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">'Miles in CPP solution: {:0.2f}'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">cpp_stats</span><span class=\"p\">[</span><span class=\"s\">'distance_walked'</span><span class=\"p\">]</span><span class=\"o\">/</span><span class=\"mf\">1609.34</span><span class=\"p\">))</span></code></pre></figure>\n\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Miles in CPP solution: 33.88\n</code></pre></div></div>\n\n<h2 id=\"solve-rpp\">Solve RPP</h2>\n\n<p>With the CPP as benchmark, let’s see how well we do when we allow for optional edges in the route.</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-python\" data-lang=\"python\"><span class=\"o\">%%</span><span class=\"n\">time</span>\n<span class=\"n\">dfrpp</span> <span class=\"o\">=</span> <span class=\"n\">create_rpp_edgelist</span><span class=\"p\">(</span><span class=\"n\">g_tc</span><span class=\"p\">,</span> \n                            <span class=\"n\">graph_full</span><span class=\"o\">=</span><span class=\"n\">g</span><span class=\"p\">,</span> \n                            <span class=\"n\">edge_weight</span><span class=\"o\">=</span><span class=\"s\">'distance'</span><span class=\"p\">,</span> \n                            <span class=\"n\">max_distance</span><span class=\"o\">=</span><span class=\"mi\">2500</span><span class=\"p\">)</span></code></pre></figure>\n\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>CPU times: user 1min 39s, sys: 1.08 s, total: 1min 40s\nWall time: 1min 42s\n</code></pre></div></div>\n\n<h4 id=\"required-vs-optional-edge-counts\">Required vs optional edge counts</h4>\n\n<p>(<em>1=required and 0=optional</em>)</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-python\" data-lang=\"python\"><span class=\"n\">Counter</span><span class=\"p\">(</span> <span class=\"n\">dfrpp</span><span class=\"p\">[</span><span class=\"s\">'required'</span><span class=\"p\">])</span></code></pre></figure>\n\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Counter({0: 3034, 1: 124})\n</code></pre></div></div>\n\n<h4 id=\"solve-rpp-1\">Solve RPP</h4>\n\n<figure class=\"highlight\"><pre><code class=\"language-python\" data-lang=\"python\"><span class=\"c\"># create mockfilename</span>\n<span class=\"n\">elfn</span> <span class=\"o\">=</span> <span class=\"n\">create_mock_csv_from_dataframe</span><span class=\"p\">(</span><span class=\"n\">dfrpp</span><span class=\"p\">)</span></code></pre></figure>\n\n<figure class=\"highlight\"><pre><code class=\"language-python\" data-lang=\"python\"><span class=\"o\">%%</span><span class=\"n\">time</span>\n<span class=\"c\"># solve</span>\n<span class=\"n\">circuit_rpp</span><span class=\"p\">,</span> <span class=\"n\">grpp</span> <span class=\"o\">=</span> <span class=\"n\">rpp</span><span class=\"p\">(</span><span class=\"n\">elfn</span><span class=\"p\">,</span> <span class=\"n\">start_node</span><span class=\"o\">=</span><span class=\"s\">'735393342'</span><span class=\"p\">)</span></code></pre></figure>\n\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>CPU times: user 5.81 s, sys: 59.6 ms, total: 5.87 s\nWall time: 5.99 s\n</code></pre></div></div>\n\n<h4 id=\"rpp-stats\">RPP Stats</h4>\n\n<p><em>(distances in meters)</em></p>\n\n<figure class=\"highlight\"><pre><code class=\"language-python\" data-lang=\"python\"><span class=\"n\">rpp_stats</span> <span class=\"o\">=</span> <span class=\"n\">calculate_postman_solution_stats</span><span class=\"p\">(</span><span class=\"n\">circuit_rpp</span><span class=\"p\">)</span>\n<span class=\"n\">rpp_stats</span></code></pre></figure>\n\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>OrderedDict([('distance_walked', 49427.7740637624),\n             ('distance_doublebacked', 8288.19210187231),\n             ('distance_walked_once', 41139.58196189009),\n             ('distance_walked_optional', 5238.9032692701385),\n             ('distance_walked_required', 44188.870794492264),\n             ('edges_walked', 152),\n             ('edges_doublebacked', 28),\n             ('edges_walked_once', 124),\n             ('edges_walked_optional', 12),\n             ('edges_walked_required', 140)])\n</code></pre></div></div>\n\n<p>Leveraging the optional roads and trails, we’re able to shave about 3 miles off the CPP route.  Total mileage checks in at 30.71, just under a 50K (30.1 miles).</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-python\" data-lang=\"python\"><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">'Miles in RPP solution: {:0.2f}'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">rpp_stats</span><span class=\"p\">[</span><span class=\"s\">'distance_walked'</span><span class=\"p\">]</span><span class=\"o\">/</span><span class=\"mf\">1609.34</span><span class=\"p\">))</span></code></pre></figure>\n\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Miles in RPP solution: 30.71\n</code></pre></div></div>\n\n<h2 id=\"viz-rpp-solution\">Viz RPP Solution</h2>\n\n<figure class=\"highlight\"><pre><code class=\"language-python\" data-lang=\"python\"><span class=\"c\"># hack to convert 'path' from str back to list.  Caused by `create_mock_csv_from_dataframe`</span>\n<span class=\"k\">for</span> <span class=\"n\">e</span> <span class=\"ow\">in</span> <span class=\"n\">circuit_rpp</span><span class=\"p\">:</span>\n    <span class=\"k\">if</span> <span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">][</span><span class=\"s\">'path'</span><span class=\"p\">])</span> <span class=\"o\">==</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n        <span class=\"k\">exec</span><span class=\"p\">(</span><span class=\"s\">'e[3][\"path\"]='</span> <span class=\"o\">+</span> <span class=\"n\">e</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">][</span><span class=\"s\">\"path\"</span><span class=\"p\">])</span></code></pre></figure>\n\n<h4 id=\"create-graph-from-rpp-solution\">Create graph from RPP solution</h4>\n\n<figure class=\"highlight\"><pre><code class=\"language-python\" data-lang=\"python\"><span class=\"n\">g_tcg</span> <span class=\"o\">=</span> <span class=\"n\">g_tc</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>\n\n<span class=\"c\"># calc shortest path between optional nodes and add to graph</span>\n<span class=\"k\">for</span> <span class=\"n\">e</span> <span class=\"ow\">in</span> <span class=\"n\">circuit_rpp</span><span class=\"p\">:</span>\n    <span class=\"n\">granular_type</span> <span class=\"o\">=</span> <span class=\"s\">'trail'</span> <span class=\"k\">if</span> <span class=\"n\">e</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">][</span><span class=\"s\">'required'</span><span class=\"p\">]</span> <span class=\"k\">else</span> <span class=\"s\">'optional'</span>\n    \n    <span class=\"c\"># add granular optional edges to g_tcg</span>\n    <span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"n\">e</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">][</span><span class=\"s\">'path'</span><span class=\"p\">]</span>\n    <span class=\"k\">for</span> <span class=\"n\">pair</span> <span class=\"ow\">in</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">[:</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">path</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:])):</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">g_tcg</span><span class=\"o\">.</span><span class=\"n\">has_edge</span><span class=\"p\">(</span><span class=\"n\">pair</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">pair</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]))</span> <span class=\"ow\">and</span> <span class=\"p\">(</span><span class=\"n\">g_tcg</span><span class=\"p\">[</span><span class=\"n\">pair</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]][</span><span class=\"n\">pair</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]][</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s\">'granular_type'</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"s\">'optional'</span><span class=\"p\">):</span>\n                <span class=\"n\">g_tcg</span><span class=\"p\">[</span><span class=\"n\">pair</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]][</span><span class=\"n\">pair</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]][</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"s\">'granular_type'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s\">'trail'</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">g_tcg</span><span class=\"o\">.</span><span class=\"n\">add_edge</span><span class=\"p\">(</span><span class=\"n\">pair</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">pair</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">granular</span><span class=\"o\">=</span><span class=\"s\">'True'</span><span class=\"p\">,</span> <span class=\"n\">granular_type</span><span class=\"o\">=</span><span class=\"n\">granular_type</span><span class=\"p\">)</span>\n    \n    <span class=\"c\"># add granular nodes from optional edge paths to g_tcg</span>\n    <span class=\"k\">for</span> <span class=\"n\">n</span> <span class=\"ow\">in</span> <span class=\"n\">path</span><span class=\"p\">:</span>\n        <span class=\"n\">g_tcg</span><span class=\"o\">.</span><span class=\"n\">add_node</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">lat</span><span class=\"o\">=</span><span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"p\">[</span><span class=\"n\">n</span><span class=\"p\">][</span><span class=\"s\">'lat'</span><span class=\"p\">],</span> <span class=\"n\">lon</span><span class=\"o\">=</span><span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"p\">[</span><span class=\"n\">n</span><span class=\"p\">][</span><span class=\"s\">'lon'</span><span class=\"p\">])</span></code></pre></figure>\n\n<h3 id=\"viz-rpp-optional-edges\">Viz: RPP optional edges</h3>\n\n<p>The RPP algorithm picks up some logical shortcuts using the optional trails and a couple short stretches of road.</p>\n\n<ul>\n  <li><strong><font color=\"black\">black</font></strong>: required trails</li>\n  <li><strong><font color=\"blue\">blue</font></strong>: optional trails and roads</li>\n</ul>\n\n<figure class=\"highlight\"><pre><code class=\"language-python\" data-lang=\"python\"><span class=\"n\">fig</span><span class=\"p\">,</span> <span class=\"n\">ax</span> <span class=\"o\">=</span> <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">subplots</span><span class=\"p\">(</span><span class=\"n\">figsize</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">8</span><span class=\"p\">))</span>\n\n<span class=\"n\">pos</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"n\">k</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"n\">g_tcg</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s\">'lon'</span><span class=\"p\">),</span> <span class=\"n\">g_tcg</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s\">'lat'</span><span class=\"p\">))</span> <span class=\"k\">for</span> <span class=\"n\">k</span> <span class=\"ow\">in</span> <span class=\"n\">g_tcg</span><span class=\"o\">.</span><span class=\"n\">nodes</span><span class=\"p\">()}</span>    \n\n<span class=\"n\">el_opt</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">e</span> <span class=\"k\">for</span> <span class=\"n\">e</span> <span class=\"ow\">in</span> <span class=\"n\">g_tcg</span><span class=\"o\">.</span><span class=\"n\">edges</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"n\">e</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s\">'granular_type'</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"s\">'optional'</span><span class=\"p\">]</span> \n<span class=\"n\">nx</span><span class=\"o\">.</span><span class=\"n\">draw_networkx_edges</span><span class=\"p\">(</span><span class=\"n\">g_tcg</span><span class=\"p\">,</span> <span class=\"n\">pos</span><span class=\"p\">,</span> <span class=\"n\">edgelist</span><span class=\"o\">=</span><span class=\"n\">el_opt</span><span class=\"p\">,</span> <span class=\"n\">width</span><span class=\"o\">=</span><span class=\"mf\">6.0</span><span class=\"p\">,</span> <span class=\"n\">edge_color</span><span class=\"o\">=</span><span class=\"s\">'blue'</span><span class=\"p\">,</span> <span class=\"n\">alpha</span><span class=\"o\">=</span><span class=\"mf\">1.0</span><span class=\"p\">)</span>\n\n<span class=\"n\">el_tr</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">e</span> <span class=\"k\">for</span> <span class=\"n\">e</span> <span class=\"ow\">in</span> <span class=\"n\">g_tcg</span><span class=\"o\">.</span><span class=\"n\">edges</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"n\">e</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s\">'granular_type'</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"s\">'trail'</span><span class=\"p\">]</span>\n<span class=\"n\">nx</span><span class=\"o\">.</span><span class=\"n\">draw_networkx_edges</span><span class=\"p\">(</span><span class=\"n\">g_tcg</span><span class=\"p\">,</span> <span class=\"n\">pos</span><span class=\"p\">,</span> <span class=\"n\">edgelist</span><span class=\"o\">=</span><span class=\"n\">el_tr</span><span class=\"p\">,</span> <span class=\"n\">width</span><span class=\"o\">=</span><span class=\"mf\">3.0</span><span class=\"p\">,</span> <span class=\"n\">edge_color</span><span class=\"o\">=</span><span class=\"s\">'black'</span><span class=\"p\">,</span> <span class=\"n\">alpha</span><span class=\"o\">=</span><span class=\"mf\">0.8</span><span class=\"p\">)</span>\n\n<span class=\"n\">mplleaflet</span><span class=\"o\">.</span><span class=\"n\">save_html</span><span class=\"p\">(</span><span class=\"n\">fig</span><span class=\"p\">,</span> <span class=\"s\">'maps/rpp_solution_opt_edges.html'</span><span class=\"p\">,</span> <span class=\"n\">tiles</span><span class=\"o\">=</span><span class=\"s\">'cartodb_positron'</span><span class=\"p\">)</span></code></pre></figure>\n\n<iframe src=\"https://cdn.rawgit.com/brooksandrew/postman_problems_examples/master/sleepinggiant/maps/rpp_solution_opt_edges.html\" height=\"400\" width=\"750\"></iframe>\n\n<h3 id=\"viz-rpp-edges-counts\">Viz: RPP edges counts</h3>\n\n<figure class=\"highlight\"><pre><code class=\"language-python\" data-lang=\"python\"><span class=\"c\">## Create graph directly from rpp_circuit and original graph w lat/lon (g)</span>\n<span class=\"n\">color_seq</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"s\">'black'</span><span class=\"p\">,</span> <span class=\"s\">'magenta'</span><span class=\"p\">,</span> <span class=\"s\">'orange'</span><span class=\"p\">,</span> <span class=\"s\">'yellow'</span><span class=\"p\">]</span>\n<span class=\"n\">grppviz</span> <span class=\"o\">=</span> <span class=\"n\">nx</span><span class=\"o\">.</span><span class=\"n\">MultiGraph</span><span class=\"p\">()</span>\n\n<span class=\"k\">for</span> <span class=\"n\">e</span> <span class=\"ow\">in</span> <span class=\"n\">circuit_rpp</span><span class=\"p\">:</span>\n    <span class=\"k\">for</span> <span class=\"n\">n1</span><span class=\"p\">,</span> <span class=\"n\">n2</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">][</span><span class=\"s\">'path'</span><span class=\"p\">][:</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">e</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">][</span><span class=\"s\">'path'</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">:]):</span>\n        <span class=\"k\">if</span> <span class=\"n\">grppviz</span><span class=\"o\">.</span><span class=\"n\">has_edge</span><span class=\"p\">(</span><span class=\"n\">n1</span><span class=\"p\">,</span> <span class=\"n\">n2</span><span class=\"p\">):</span>\n            <span class=\"n\">grppviz</span><span class=\"p\">[</span><span class=\"n\">n1</span><span class=\"p\">][</span><span class=\"n\">n2</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"s\">'linewidth'</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"mi\">2</span>\n            <span class=\"n\">grppviz</span><span class=\"p\">[</span><span class=\"n\">n1</span><span class=\"p\">][</span><span class=\"n\">n2</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"s\">'cnt'</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>                \n            <span class=\"n\">grppviz</span><span class=\"o\">.</span><span class=\"n\">add_edge</span><span class=\"p\">(</span><span class=\"n\">n1</span><span class=\"p\">,</span> <span class=\"n\">n2</span><span class=\"p\">,</span> <span class=\"n\">linewidth</span><span class=\"o\">=</span><span class=\"mf\">2.5</span><span class=\"p\">)</span>\n            <span class=\"n\">grppviz</span><span class=\"p\">[</span><span class=\"n\">n1</span><span class=\"p\">][</span><span class=\"n\">n2</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"s\">'color_st'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s\">'black'</span> <span class=\"k\">if</span> <span class=\"n\">g_t</span><span class=\"o\">.</span><span class=\"n\">has_edge</span><span class=\"p\">(</span><span class=\"n\">n1</span><span class=\"p\">,</span> <span class=\"n\">n2</span><span class=\"p\">)</span> <span class=\"k\">else</span> <span class=\"s\">'red'</span>\n            <span class=\"n\">grppviz</span><span class=\"p\">[</span><span class=\"n\">n1</span><span class=\"p\">][</span><span class=\"n\">n2</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"s\">'cnt'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n            <span class=\"n\">grppviz</span><span class=\"o\">.</span><span class=\"n\">add_node</span><span class=\"p\">(</span><span class=\"n\">n1</span><span class=\"p\">,</span> <span class=\"n\">lat</span><span class=\"o\">=</span><span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"p\">[</span><span class=\"n\">n1</span><span class=\"p\">][</span><span class=\"s\">'lat'</span><span class=\"p\">],</span> <span class=\"n\">lon</span><span class=\"o\">=</span><span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"p\">[</span><span class=\"n\">n1</span><span class=\"p\">][</span><span class=\"s\">'lon'</span><span class=\"p\">])</span>\n            <span class=\"n\">grppviz</span><span class=\"o\">.</span><span class=\"n\">add_node</span><span class=\"p\">(</span><span class=\"n\">n2</span><span class=\"p\">,</span> <span class=\"n\">lat</span><span class=\"o\">=</span><span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"p\">[</span><span class=\"n\">n2</span><span class=\"p\">][</span><span class=\"s\">'lat'</span><span class=\"p\">],</span> <span class=\"n\">lon</span><span class=\"o\">=</span><span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"p\">[</span><span class=\"n\">n2</span><span class=\"p\">][</span><span class=\"s\">'lon'</span><span class=\"p\">])</span> \n\n<span class=\"k\">for</span> <span class=\"n\">e</span> <span class=\"ow\">in</span> <span class=\"n\">grppviz</span><span class=\"o\">.</span><span class=\"n\">edges</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">):</span>\n    <span class=\"n\">e</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">][</span><span class=\"s\">'color_cnt'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">color_seq</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"k\">if</span> <span class=\"s\">'cnt'</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">e</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"k\">else</span> <span class=\"n\">color_seq</span><span class=\"p\">[</span><span class=\"n\">e</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">][</span><span class=\"s\">'cnt'</span><span class=\"p\">]</span> <span class=\"p\">]</span>\n    </code></pre></figure>\n\n<p>Edge walks per color:</p>\n\n<p><strong><font color=\"black\">black</font></strong>: 1  <br />\n<strong><font color=\"magenta\">magenta</font></strong>: 2  <br /></p>\n\n<figure class=\"highlight\"><pre><code class=\"language-python\" data-lang=\"python\"><span class=\"n\">fig</span><span class=\"p\">,</span> <span class=\"n\">ax</span> <span class=\"o\">=</span> <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">subplots</span><span class=\"p\">(</span><span class=\"n\">figsize</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">10</span><span class=\"p\">))</span>\n\n<span class=\"n\">pos</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"n\">k</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"n\">grppviz</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">][</span><span class=\"s\">'lon'</span><span class=\"p\">],</span> <span class=\"n\">grppviz</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">][</span><span class=\"s\">'lat'</span><span class=\"p\">])</span> <span class=\"k\">for</span> <span class=\"n\">k</span> <span class=\"ow\">in</span> <span class=\"n\">grppviz</span><span class=\"o\">.</span><span class=\"n\">nodes</span><span class=\"p\">()}</span>    \n<span class=\"n\">e_width</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">e</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">][</span><span class=\"s\">'linewidth'</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">e</span> <span class=\"ow\">in</span> <span class=\"n\">grppviz</span><span class=\"o\">.</span><span class=\"n\">edges</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)]</span>\n<span class=\"n\">e_color</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">e</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">][</span><span class=\"s\">'color_cnt'</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">e</span> <span class=\"ow\">in</span> <span class=\"n\">grppviz</span><span class=\"o\">.</span><span class=\"n\">edges</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)]</span>\n<span class=\"n\">nx</span><span class=\"o\">.</span><span class=\"n\">draw_networkx_edges</span><span class=\"p\">(</span><span class=\"n\">grppviz</span><span class=\"p\">,</span> <span class=\"n\">pos</span><span class=\"p\">,</span> <span class=\"n\">width</span><span class=\"o\">=</span><span class=\"n\">e_width</span><span class=\"p\">,</span> <span class=\"n\">edge_color</span><span class=\"o\">=</span><span class=\"n\">e_color</span><span class=\"p\">,</span> <span class=\"n\">alpha</span><span class=\"o\">=</span><span class=\"mf\">0.7</span><span class=\"p\">)</span>\n\n<span class=\"n\">mplleaflet</span><span class=\"o\">.</span><span class=\"n\">save_html</span><span class=\"p\">(</span><span class=\"n\">fig</span><span class=\"p\">,</span> <span class=\"s\">'maps/rpp_solution_edge_cnts.html'</span><span class=\"p\">,</span> <span class=\"n\">tiles</span><span class=\"o\">=</span><span class=\"s\">'cartodb_positron'</span><span class=\"p\">)</span></code></pre></figure>\n\n<iframe src=\"https://cdn.rawgit.com/brooksandrew/postman_problems_examples/master/sleepinggiant/maps/rpp_solution_edge_cnts.html\" height=\"400\" width=\"750\"></iframe>\n\n<h2 id=\"create-geojson-solution\">Create geojson solution</h2>\n\n<p>Used for the D3 route animation at the beginning of the post (also <a href=\"http://cdn.rawgit.com/brooksandrew/postman_problems_examples/master/sleepinggiant/animation/index.html\">here</a>).  More details <a href=\"https://github.com/brooksandrew/postman_problems_examples/tree/master/sleepinggiant/animation\">here</a>.</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-python\" data-lang=\"python\"><span class=\"n\">geojson</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s\">'features'</span><span class=\"p\">:[],</span> <span class=\"s\">'type'</span><span class=\"p\">:</span> <span class=\"s\">'FeatureCollection'</span><span class=\"p\">}</span>\n<span class=\"n\">time</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">reversed</span><span class=\"p\">(</span><span class=\"n\">circuit_rpp</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">3</span><span class=\"p\">][</span><span class=\"s\">'path'</span><span class=\"p\">]))</span>\n\n<span class=\"k\">for</span> <span class=\"n\">e</span> <span class=\"ow\">in</span> <span class=\"n\">circuit_rpp</span><span class=\"p\">:</span>\n    <span class=\"k\">if</span> <span class=\"n\">e</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">][</span><span class=\"s\">'path'</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"n\">path</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]:</span> \n        <span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">reversed</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">][</span><span class=\"s\">'path'</span><span class=\"p\">]))</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"n\">e</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">][</span><span class=\"s\">'path'</span><span class=\"p\">]</span>\n    \n    <span class=\"k\">for</span> <span class=\"n\">n</span> <span class=\"ow\">in</span> <span class=\"n\">path</span><span class=\"p\">:</span>\n        <span class=\"n\">time</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n        <span class=\"n\">doc</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s\">'type'</span><span class=\"p\">:</span> <span class=\"s\">'Feature'</span><span class=\"p\">,</span>\n              <span class=\"s\">'properties'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                  <span class=\"s\">'latitude'</span><span class=\"p\">:</span> <span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"p\">[</span><span class=\"n\">n</span><span class=\"p\">][</span><span class=\"s\">'lat'</span><span class=\"p\">],</span>\n                  <span class=\"s\">'longitude'</span><span class=\"p\">:</span> <span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"p\">[</span><span class=\"n\">n</span><span class=\"p\">][</span><span class=\"s\">'lon'</span><span class=\"p\">],</span>\n                  <span class=\"s\">'time'</span><span class=\"p\">:</span> <span class=\"n\">time</span><span class=\"p\">,</span>\n                  <span class=\"s\">'id'</span><span class=\"p\">:</span> <span class=\"n\">e</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s\">'id'</span><span class=\"p\">)</span>\n              <span class=\"p\">},</span>\n              <span class=\"s\">'geometry'</span><span class=\"p\">:{</span>\n                  <span class=\"s\">'type'</span><span class=\"p\">:</span> <span class=\"s\">'Point'</span><span class=\"p\">,</span>\n                  <span class=\"s\">'coordinates'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"p\">[</span><span class=\"n\">n</span><span class=\"p\">][</span><span class=\"s\">'lon'</span><span class=\"p\">],</span> <span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"p\">[</span><span class=\"n\">n</span><span class=\"p\">][</span><span class=\"s\">'lat'</span><span class=\"p\">]]</span>\n              <span class=\"p\">}</span>\n          <span class=\"p\">}</span>\n        <span class=\"n\">geojson</span><span class=\"p\">[</span><span class=\"s\">'features'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">doc</span><span class=\"p\">)</span>\n        </code></pre></figure>\n\n<figure class=\"highlight\"><pre><code class=\"language-python\" data-lang=\"python\"><span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s\">'circuit_rpp.geojson'</span><span class=\"p\">,</span><span class=\"s\">'w'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n    <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">dump</span><span class=\"p\">(</span><span class=\"n\">geojson</span><span class=\"p\">,</span> <span class=\"n\">f</span><span class=\"p\">)</span></code></pre></figure>\n\n\n  <p><a href=\"http://brooksandrew.github.io/simpleblog/articles/sleeping-giant-rural-postman-problem/\">Sleeping Giant Rural Postman Problem</a> was originally published by andrew brooks at <a href=\"http://brooksandrew.github.io/simpleblog\">andrew brooks</a> on December 01, 2017.</p>"
}