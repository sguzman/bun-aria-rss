{
  "title": "Mirroring an FTP Using lftp and cron",
  "description": "<p>As my Developer Advocate role leads me to doing more and more Sysadmin/Data Engineer type of work, I continuously find myself looking for more efficient ways of copying data folders to where I need them. While there are a lot of great GUI ETL tools out there, for me the simplest <em>and fastest</em> way tends to be using linux utilities. Here’s how to mirror an FTP using lftp, with a cron repeater every five minutes.</p>",
  "pubDate": "Thu, 06 Sep 2018 00:00:00 +0000",
  "link": "http://randyzwitch.com/mirror-ftp-lftp/",
  "guid": "http://randyzwitch.com/mirror-ftp-lftp/",
  "content": "<p>As my Developer Advocate role leads me to doing more and more Sysadmin/Data Engineer type of work, I continuously find myself looking for more efficient ways of copying data folders to where I need them. While there are a lot of great GUI ETL tools out there, for me the simplest <em>and fastest</em> way tends to be using linux utilities. Here’s how to mirror an FTP using lftp, with a cron repeater every five minutes.</p>\n\n<h2 id=\"data-are-on-an-ftp-need-further-processing\">Data are on an FTP, Need Further Processing</h2>\n\n<p>The problem I have is data that exists on a remote FTP, but are in a binary format that is incompatible with loading directly into <a href=\"https://www.omnisci.com/\">OmniSci</a>. My current plan is to use Python to convert the binary format into CSV, but with the data on a server that I don’t control, I need to make a copy somewhere else.</p>\n\n<p>It’s also the case that the data are roughly 300GB <em>per day</em>, streaming in at various intervals across the day, so I need to make sure that any copying I do is thoughtful. Downloading 300GB of data per day is bad enough, doing it multiple times even worse!</p>\n\n<h2 id=\"lftp-mirror-to-the-rescue\">lftp <code class=\"language-plaintext highlighter-rouge\">mirror</code> to the Rescue!</h2>\n\n<p>The best choice in my case seems to be copying the files onto a VM I own. <a href=\"https://lftp.yar.ru/\">lftp</a> has an option <code class=\"language-plaintext highlighter-rouge\">mirror</code> to do just that. Here is the one-liner I’m using:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-bash\" data-lang=\"bash\">lftp <span class=\"nt\">-e</span> <span class=\"s2\">\"mirror -c -e --parallel=20 --verbose /pub/data/nccf/com/nwm/prod /nwmftp/prod;quit;\"</span> ftp.government.gov</code></pre></figure>\n\n<ul>\n  <li><code class=\"language-plaintext highlighter-rouge\">lftp -e</code> : Execute command in quotes. In this case, the FTP allows anonymous access, so no user/pw  arguments needed</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">mirror</code>: Mirror command for lftp</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">-c</code>: If download fails for whatever reason, keep trying (c = “continue”)</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">-e</code>: Delete files on remote that are no longer on source (i.e. keep folders in perfect sync)</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">--parallel</code>: Allow multiple connections for parallel downloading of multiple files</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">--verbose</code>: Print lots of messages, helpful for debugging</li>\n</ul>\n\n<p>With all of the flags in place, the last two arguments are the source (remote FTP) and destination (my VM) directories. Finally, I add a <code class=\"language-plaintext highlighter-rouge\">quit</code> statement to exit <code class=\"language-plaintext highlighter-rouge\">lftp</code> once the mirror process is over. This is mostly hygiene since I plan to run this on a cron scheduler and don’t want to leave the sessions open.</p>\n\n<h2 id=\"run-this-every-five-minutes-forever\">Run This Every Five Minutes, Forever</h2>\n\n<p><code class=\"language-plaintext highlighter-rouge\">cron</code> really is one of the greatest timesavers ever, especially in that it allows super-repetitive work to be automated away, usually with a single line. Here is the line I added after calling <code class=\"language-plaintext highlighter-rouge\">crontab -e</code> on the command-line:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-bash\" data-lang=\"bash\"><span class=\"k\">*</span>/5 <span class=\"k\">*</span> <span class=\"k\">*</span> <span class=\"k\">*</span> <span class=\"k\">*</span> /home/username/pull_from_ftp.sh</code></pre></figure>\n\n<p>Quite simply, “every 5 minutes, run pull_from_ftp.sh”. Creating <code class=\"language-plaintext highlighter-rouge\">pull_from_ftp.sh</code> is as straightforward as creating a text file:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-bash\" data-lang=\"bash\"><span class=\"c\">#!/bin/bash</span>\nlftp <span class=\"nt\">-e</span> <span class=\"s2\">\"mirror -c -e --parallel=20 --verbose /pub/data/nccf/com/nwm/prod /nwmftp/prod;quit;\"</span> ftp.government.gov</code></pre></figure>\n\n<h2 id=\"thats-it-yes\">That’s It? YES!</h2>\n\n<p>With just a few characters short of a full tweet, you can mirror an entire folder from an FTP, automatically. <code class=\"language-plaintext highlighter-rouge\">lftp</code> in combination with <code class=\"language-plaintext highlighter-rouge\">cron</code> helped me factor out hundreds of lines of pre-existing Python code, which not only removed untested, copy-pasted code from the workflow but also added parallel downloading, increasing data throughput.</p>\n\n<p>Not bad for a couple of free Linux utilities :)</p>"
}