{
  "title": "Head tracking with WebRTC",
  "description": "<iframe src=\"http://player.vimeo.com/video/44049736\" width=\"500\" height=\"281\" frameborder=\"0\" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>\n\n<p><br/></p>\n\n<p>A lot of new exciting standards are coming to browsers these days, among them the <a href=\"http://www.w3.org/TR/webrtc/\">WebRTC standard</a>, which adds support for streaming video and audio from native devices such as a webcamera. One of the exciting things that this enables, is so called <em>head tracking</em>. We decided to do a little demonstration of this for the <a href=\"http://www.opera.com/browser/\">Opera 12</a> release, which is the first desktop browser to support video-streaming via the getUserMedia API.</p>\n\n<!-- more -->\n\n<p>If you haven&rsquo;t tried our fancy game out already, do so here:</p>\n\n<p><a href=\"http://www.shinydemos.com/facekat/\"><img src=\"http://auduno.github.com/headtrackr/examples/media/facekat2.png\" alt=\"facekat\"/></a></p>\n\n<p>The demo in the topmost video can be found <a href=\"https://auduno.github.com/headtrackr/examples/targets.html\">here</a>, though note that this needs WebGL support as well. Both demos work best if your camera is mounted over your screen (like internal webcameras on most laptops) and when your face is evenly lighted. And of course you have to have <a href=\"http://caniuse.com/stream\">a browser that supports getUserMedia</a> and a computer with a webcamera.</p>\n\n<p>The javascript library which I made for the task, <em>headtrackr.js</em>, is now available freely <a href=\"http://github.com/auduno/headtrackr/\">here</a>. It&rsquo;s not currently well documented, but I&rsquo;ll try to do so in the coming weeks. In this post I&rsquo;ll give you a very rough overview of how it&rsquo;s put together.</p>\n\n<p>My implementation of head tracking consists of four main parts:</p>\n\n<ul><li>a face detector</li>\n<li>a tracking mechanism</li>\n<li>a smoother</li>\n<li>the headposition calculation</li>\n</ul><p><img src=\"http://auduno.github.com/headtrackr/examples/media/figure3d.png\" alt=\"diagram\"/></p>\n\n<p>For the face detection, we use an existing javascript library called <a href=\"https://github.com/liuliu/ccv\">ccv</a>. This library uses a <a href=\"http://en.wikipedia.org/wiki/Viola%E2%80%93Jones_object_detection_framework\">Viola-Jones type</a> algorithm (with <a href=\"http://liuliu.me/eyes/javascript-face-detection-explained/\">some modifications</a>) for detecting the face, which is a very fast and reasonably precise face detection algorithm. We could have used this to detect the face in every videoframe, however, this would probably not have run in real-time. It also would not have been able to detect the face in all positions, for instance if the head was tilted, or turned slightly away from the camera.</p>\n\n<p>Instead we use a more lightweight object tracking algorithm called <em>camshift</em>, which we initialize with the position of the face we detected. The camshift algorithm is an algorithm that tracks any object in an image (or video) just based on its color histogram and the color histogram of the surrounding elements, see <a href=\"http://www.cognotics.com/opencv/servo_2007_series/part_3/sidebar.html\">this article</a> for details. Our javascript implementation was ported from an <a href=\"http://www.libspark.org/browser/as3/FaceIt/trunk/src/org/libspark/faceit/camshift?rev=2813\">actionscript library called FaceIt</a>, with some modifications. You can test the camshift-algorithm alone <a href=\"http://auduno.github.com/headtrackr/examples/camshift.html\">here</a>.</p>\n\n<p>Though the camshift algorithm is pretty fast, it&rsquo;s also a bit unprecise and will jump a bit around, which can cause annoying jittering of the face tracking. Therefore we apply a smoother for each position we receive. In our case we use double exponential smoothing, as it&rsquo;s pretty easy to calculate.</p>\n\n<p>We now know the approximate position and size of the face in the image. In order to calculate the position of the head, we need to know one more thing. Webcameras have widely differing angles of &ldquo;field of view&rdquo;, which will affect the size and position of the face in the video. For an example, see the image below (courtesy of <a href=\"http://www.flickr.com/photos/freeparking/507248108/\">D Flam</a>). To get around this, we estimate the &ldquo;field of view&rdquo; of the current camera, by assuming that the user at first initialization is sitting around 60 cms away from the camera (which is a comfortable distance from the screen, at least for laptop displays), and then seeing how large portion of the image the face fills. This estimated &ldquo;field of view&rdquo; is then used for the rest of the head tracking session.</p>\n\n<p><a href=\"http://www.flickr.com/photos/freeparking/507248108/\"><img src=\"http://auduno.github.com/headtrackr/examples/media/fov_56_70.png\" alt=\"Image courtesy of http://www.flickr.com/people/freeparking/\"/></a></p>\n\n<p>Using this &ldquo;field of view&rdquo;-estimate, and some assumptions about the average size of a person&rsquo;s face, we can calculate the distance of the head from the camera by way of some trigonometry. I won&rsquo;t go into the details, but here&rsquo;s a figure. Hope you remember your maths!</p>\n\n<p><img src=\"http://auduno.github.com/headtrackr/examples/media/trig01.png\" alt=\"trigonometry diagram\"/></p>\n\n<p>Calculating the x- and y-position relative to the camera is a similar exercise. At this point we have the position of the head in relation to the camera. In the <a href=\"http://www.shinydemos.com/facekat/\">facekat demo</a> above, we just used these positions as the input to a mouseEvent-type controller.</p>\n\n<p>If we want to go further to create the <a href=\"http://en.wikipedia.org/wiki/Head-coupled_perspective\"><em>head-coupled perspective</em></a> seen in the first video, we&rsquo;ll have to use the headpositions to directly control the camera in a 3D model. To get the completely correct perspective we also have to use an off-axis view (aka <em>asymmetric frustum</em>). This is because we want to counteract the distortion that arises when the user is looking at the screen from an angle, perhaps best explained by the figure below.</p>\n\n<p><img src=\"http://auduno.github.com/headtrackr/examples/media/offaxisFigure.png\" alt=\"off-axis view diagram\"/></p>\n\n<p>In our case we used the excellent 3D library <a href=\"https://github.com/mrdoob/three.js/\">three.js</a>. In three.js it&rsquo;s pretty straightforward to create the off-axis view if we abuse the interface called <em>camera.setViewOffset</em>.</p>\n\n<p>Overall, the finished result works decently, at least if you have a good camera and even lighting. Note that the effect looks much more convincing on video, as we then have no visual cue for the depth of the other objects in the scene, while in real life our eyes are not so easily fooled.</p>\n\n<p>One of the problems I stumbled upon while working with this demo, was that the quality of webcameras vary widely. Regular webcameras often have a lot of chromatic aberration on the edges of the field of view due to cheap lenses, which dramatically affects the tracking effectiveness outside of the immediate center of the video. In my experience the built-in cameras on Apple Macbooks had very little such distortion. You get what you pay for, I guess.</p>\n\n<p>Most webcameras also adjust brightness and whitebalance automatically, which in our case is not very helpful, as it messes up the camshift tracking. Often the first thing that happens when video starts streaming is that the camera starts to adjust whitebalance, which means that we have to check that the colors are stable before doing any sort of face detection. If the camera adjusts the brightness a lot after we&rsquo;ve started tracking the face, there&rsquo;s not much we can do except reinitiate the face detection.</p>\n\n<p><br/></p>\n\n<p>To give credit where credit is due, the inspiration for this demo was <a href=\"http://www.youtube.com/embed/Jd3-eiid-Uw\">this video</a> that was buzzing around the web a couple of years ago. In it, Johnny Chung Lee had hacked a Wii remote to capture the motions of the user. Later on, <a href=\"http://iihm.imag.fr/en/demo/hcpmobile/\">some french researchers</a> decided to try out the same thing without the Wii remote. Instead of motion sensors they used the front-facing camera of the Ipad to detect and track the rough position of the head, with pretty convincing results. The result is available as the Ipad app <a href=\"http://iihm.imag.fr/francone/i3D/\">i3D</a> and can be seen here:</p>\n\n<iframe width=\"450\" height=\"253\" src=\"http://www.youtube.com/embed/19XZJa15hOs\" frameborder=\"0\" allowfullscreen></iframe>\n\n<p>Although head-coupled perspective might not be ready for any type of generic interaction via the web camera <em>yet</em>, it works fine with simple games like <a href=\"http://www.shinydemos.com/facekat/\"><em>facekat</em></a>. I&rsquo;m sure there are many improvements that can make it more precise and failproof, though. The library and demos were patched together pretty fast, and there are several improvements that I didn&rsquo;t get time to test out, such as:</p>\n\n<ul><li>tweaking the settings of the camshift algorithm</li>\n<li>using other tracking algorithms, such as <a href=\"http://www.robinhewitt.com/pubs/BayesShiftTracker.pdf\">bayesian mean shift</a>, which also uses information about the background immediately surrounding the face</li>\n<li>maybe using edge detection to further demarcate the edges of the face, though this might be a bit heavy on processing</li>\n<li>using requestAnimationFrame instead of setIntervals</li>\n<li>using hue and saturation for the camshift algorithm (which the original camshift paper suggests) instead of RGB</li>\n</ul><p>If you feel like implementing any of these, feel free to <a href=\"https://github.com/auduno/headtrackr\">grab a fork</a>! Meanwhile, I&rsquo;m pretty sure we&rsquo;ll see many more exciting things turn up once WebRTC becomes supported across more browsers, check out <a href=\"https://vimeo.com/41666669\">this</a> for instance&hellip;</p>\n\n<p><strong>Update</strong>: a slightly edited version of this post, which also includes some more details about the trigonometry calculations, was <a href=\"http://dev.opera.com/articles/view/head-tracking-with-webrtc/\">published at dev.opera.com</a></p>",
  "link": "https://auduno.tumblr.com/post/25125149521",
  "guid": "https://auduno.tumblr.com/post/25125149521",
  "pubDate": "Fri, 15 Jun 2012 02:18:00 +0200"
}