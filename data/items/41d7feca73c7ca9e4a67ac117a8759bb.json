{
  "title": "Manifesto for an Intelligent Chatbot Platform",
  "link": "",
  "updated": "2018-02-06T00:00:00+00:00",
  "id": "http://daoudclarke.github.com/chatbots/2018/02/06/manifesto-for-a-new-chatbot-platform",
  "content": "<p>I’ve always found it frustrating that chatbot developers seem to be\nsatisfied with frameworks that don’t even attempt to mimic anything\nclose to real intelligence. There seem to be two basic approaches:</p>\n\n<ul>\n  <li>Intent-based approaches, in which a query is mapped to a template,\nperhaps with some slots to be filled, for example, a query like “I\nneed a train to Norwich” would prompt the chatbot to question the\nuser with the goal of filling in slots relating to the departure\nlocation and the desired arrival time.</li>\n  <li>Tree-based approaches, where there is a tree of possibilities the\nuser can explore, kind of like the “make your own adventure” books\nI used to read as a kid. This is useful in informational settings\nlike customer support, where giving a useful responses depends on\nexploring a tree of possibilities to determine the user’s problem.</li>\n</ul>\n\n<p>Sometimes these are augmented with features like the ability to\nremember past values for slots, that improve the perception that the\nchatbot knows what’s going on. But as soon as the user steps off the\nbeaten track, the chatbot will be confused and the user experience\nwill suffer. And what about if you want to combine the tree-based\napproach with an intent-based approach? So far there’s no clean way of\ndoing this.</p>\n\n<p>I believe there is a better way, and that’s why I’ve started working\non my own chatbot framework. These are the design goals of the\nframework:</p>\n\n<ol>\n  <li>The chatbot should automatically choose the next best action out\nof all possible actions</li>\n  <li>The chatbot should learn which responses are most likely, and\noptimise its behaviour accordingly</li>\n  <li>The chatbot behaviour should be specified by independent modules\nthat can be combined freely</li>\n</ol>\n\n<p>As an example, I’ll describe how these goals could work out in\npractice for a bot to allow users to make purchases on an e-commerce\nwebsite. Imagine a user is buying their weekly supermarket shop from\nBigMart. The conversation might go something like this:</p>\n\n<p>“I’d like some apples.”</p>\n\n<p>“How about 6 Russet apples for £1.20 or 12 Golden Delicious for\n£1.70?”</p>\n\n<p>“I’ve just remembered I need milk”</p>\n\n<p>“1 litre of whole milk like last time?”</p>\n\n<p>“Yes”</p>\n\n<p>“Do you still want apples?”</p>\n\n<p>“Yes, the Golden Delicious.”</p>\n\n<p>“Ok.”</p>\n\n<p>In this conversation, the bot has remembered that the user wanted\napples, even after the distraction of buying milk. The point is that\nthis behaviour shouldn’t need to be explicitly planned by the bot\ndesigner: the bot should automatically know that the user has a goal\nof buying apples that needs to be fulfilled. Also, note that the bot\nhas learnt the type of milk that the user likes to buy, which saves\nthe user time. Again, this behaviour should be built into the platform\nrather than needing to be programmed by the bot designer.</p>\n\n<p>If the bot designer does not need to program these behaviours, what\nwould bot development look like? We envisage three types of bot\n“modules” that can be developed:</p>\n\n<ul>\n  <li>Modules that specify the <em>style of conversation</em> between the bot\nand the user. This allows the bot designer to specify the preferred\nexpressions to be used by the bot when interacting with the\nuser. For example, you could write a module for bots to talk like\npirates, perhaps restricted to a specific domain.</li>\n  <li>Modules that describe <em>world knowledge</em>. For example, you might try\nand write a bot that helps people choose the correct visa for a\njourney to the UK (this is actually something I’ve done before, and\nit’s a non-trivial problem). Such a bot would need to know about\nthe different types of visa available, the conditions for each one,\ntheir cost and so on.</li>\n  <li>Modules that endow the bot with <em>new abilities</em>. For example, a\nmodule may allow a bot to interact with a specific API. Different\ne-commerce bots could then choose the correct API module for their\ne-commerce platform, while re-using the same style and world\nknowledge modules as other bots.</li>\n</ul>\n\n<p>The three goals combined should make it very easy for a bot designer\nto create a bot: in the most common case, their job would be to simply\nchoose the best modules for their application, customizing each one\naccording to their needs.</p>\n\n<h2 id=\"is-it-possible\">Is it possible?</h2>\n\n<p>I can hear you thinking, “It’s all very well having such lofty goals,\nbut is it achievable?” I believe it is, and in this section I will\noutline my proposed solution.</p>\n\n<p><img src=\"/img/chatbot-platform.png\" alt=\"Chatbot platform architecture\" /></p>\n\n<p>The above diagram is a very rough idea of what the new platform might\nconsist of. My goal is just to show how I think the proposed goals can\nbe achieved using existing technology. I’ll try and flesh out in\nfuture posts what each component might look like, but for now, here’s\na high level summary, following the diagram anti-clockwise from the\nuser:</p>\n\n<ul>\n  <li>A natural language query or response from the user is\nreceived. This is parsed by a <em>semantic parser</em>. I’ve not found a\ngood concise description of semantic parsing on the interwebs,\nwhich is strange, but it’s not the same as parsing (although\nsimilar) and it’s not the same as (traditional) semantics. A\nsemantic parser takes a natural language expression and translates\nit to some “logical form” where the logical form is anything that a\ncomputer would naturally understand, such as a SQL query, an\nexpression in first order logic, a JSON string or an “intent”. The\ntypical application is to use natural language to perform database\nqueries. Anyway, this is a well studied sub-field of natural\nlanguage processing (despite its lack of a Wikipedia page). An\nexample of an almost-state-of-the-art system is the\n<a href=\"https://nlp.stanford.edu/software/sempre/\">SEMPRE system</a> from\nStanford.</li>\n  <li>A <em>planning system</em> then chooses the next best action to take given\nits knowledge of the current state of the world and the latest user\ninput. This problem is also a well studied one. A very general way\nof describing planning problems is something called a\n<a href=\"https://en.wikipedia.org/wiki/Partially_observable_Markov_decision_process\">Partially Observable Markov Decision Process</a>,\nor POMDP (pronounced “pom dee pee”) for short. In fact, POMDPs have\nbeen used to plan dialogue, as described in\n<a href=\"http://mi.eng.cam.ac.uk/~sjy/papers/ygtw13.pdf\">this overview by Steve Young at Cambridge</a>.\nMy idea is to use\n<a href=\"https://en.wikipedia.org/wiki/Monte_Carlo_tree_search\">Monte-Carlo tree search</a>\nto solve our planning problem, an aproach described in\n<a href=\"https://papers.nips.cc/paper/4031-monte-carlo-planning-in-large-pomdps\">this paper from NIPS 2010</a>.\nI’m really excited about the potential for Monte-Carlo tree search\nto do something other than playing games really well (in case you\ndidn’t know it’s a large component of\n<a href=\"https://en.wikipedia.org/wiki/AlphaGo\">AlphaGo</a>). The planning\nsystem makes use of the Knowledge Modules provided by the bot\ndesigner to inform the decisions it makes.</li>\n  <li>Once an action has been decided upon, an <em>action interpreter</em> makes\nuse the the ability modules provided by the bot designer to perform\nactions on external APIs, or passes on a logical form to the next\nsystem to send a response to the user.</li>\n  <li>A <a href=\"https://en.wikipedia.org/wiki/Natural_language_generation\"><em>natural language generator</em></a>\ninterprets the logical forms and sends the response back to the\nuser. The generator can make use of the style modules to determine\nthe best expression for each logical form.</li>\n</ul>\n\n<p>Hopefully this is enough to convince you that the plan is not entirely\ncrazy. Each component is well studied (at least in a research\nsetting), so it is not too far-fetched to assume that they can be put\ntogether into something useful. The biggest uncertainty in my mind is\naround the planning system, and exactly how this will work\neffectively. I plan to flesh that out in a future blog post.</p>\n\n<p>Some readers may be disappointed that I’m not proposing some\nnew-fangled deep learning technique to solve this humongous\nproblem. In fact, I’m pretty much proposing the same good old\nfashioned AI techniques that were popular in the 70s and 80s. Actually\nI think systems built in that time period got a lot of things right,\nbut the individual components were not developed enough to make the\nsystem as a whole a success, at least when applied to a general\nsetting. In fact, in some cases, the improvements in the individual\ncomponents are because of algorithmic developments like deep learning,\nalong with the abundance of data and computing power. There is\ndefinitely potential for making use of deep learning to improve the\nthree major components of the system:</p>\n\n<ul>\n  <li><a href=\"https://arxiv.org/abs/1706.04326\">Here’s a paper</a> on using deep\nlearning for semantic parsing</li>\n  <li>Deep learning was a large part of AlphaGo’s success so it can\ndefinitely be used to improve\nplanning. <a href=\"https://arxiv.org/pdf/1507.06527.pdf\">Here’s a paper</a> on\nusing deep learning to solve POMDPs which happen to be Atari games\n(what is it with the games?).</li>\n  <li>And <a href=\"http://www.cs.umd.edu/~miyyer/pubs/2014_nips_generation.pdf\">here’s a paper from NIPS 2014</a>\non natural language generation using deep learning. Also\n<a href=\"https://en.wikipedia.org/wiki/Language_model\">language modeling</a>\nis often an important component in natural language generation, and\nneural networks have been very successful at this task.</li>\n</ul>\n\n<p>It’s almost inevitable that deep learning will take over most\ncomponents of my proposed system at some point. But they are not\nessential, at least initially.</p>\n\n<p>But still, I should probably try and answer the question of why not\nbuild a single big deep net to rule them all? One answer is that we\ndon’t know how to do this yet. But even if it were possible, I do not\nthink I would want to try and do this. The answer is engineering. When\nI know how each component is supposed to work, I can fix it. When a\ndeep net doesn’t work, all I can do is add more data and tweak the\nalgorithm, which may or may not solve the problem (and may introduce\nnew ones).</p>\n\n<p>The argument I’m trying to make here is that natural language\ninterfaces should be a solved problem, given that we have such\nsophisticated components around now, and all it requires is putting\nthem together in the right way and engineering the thing correctly. Of\ncourse, that’s still a huge challenge, but one I’m quite excited about\nundertaking. I like big challenges.</p>\n\n<h1 id=\"practical-considerations\">Practical considerations</h1>\n\n<p>Now I can hear you thinking “It’s all very well taking on such a grand\nchallenge, but who’s going to pay for it?” One option would be to try\nand build this thing in academia, after all, I’ve done the academic\nthing, so it should be possible to follow that route. The problem is,\nspeaking with my metaphorical mortarboard on, in my experience, and\nspeaking for myself, us academics tend not to build useful things\nthings. You see, our motivation is naturally skewed towards publishing\npapers, which is what academics do, rather than building something\nthat people actually want. And if we can squeeze a few percentage\npoints of improvement out of a problem, we can publish a paper.</p>\n\n<p>So if not academia, then what? I happen to find myself in the lucky\nsituation of having some spare time at the moment. My current contract\nrequires me to work only 15 hours a week, so that leaves plenty of\nspare time. I could try and build this just for fun, as a side\nproject. However, at some point, my spare time will run out and I\nsuspect this is going to take a lot longer than the three months I\nhave left on my contract. The next obvious option is to try and build\na company from it. This would either be a traditional startup, with\nfunding and all the craziness that goes along with it, or a\nbootstrapped company. Actually a startup would not be a bad vehicle\nfor something as ambitious as this. However, there are at least two\nreasons I don’t want to go down the traditional startup route:</p>\n\n<ul>\n  <li>I’m not convinced that this can be a billion dollar business\n(yet). The thing is, people want chatbots, but they don’t know they\nwant what I’m building (although they may well <em>need</em> it). At some\npoint in the future that may change.</li>\n  <li>I don’t personally enjoy the pressure to grow quickly that comes\nwith a startup. I would rather build a successful and sustainable\nbusiness slowly. That’s particularly true because I think it’s\ngoing to take a long time to build this properly. Also, I don’t\nhold with “stealth mode” - I’d rather do this out in the open.</li>\n</ul>\n\n<p>So the current plan is for a simple bootstrapped company selling\nchatbots as a service. Yes, I know, there are a lot already, but I\nthink there is space for another. The market is predicted to grow\nquickly in the next few years - we’ll see whether this turns out to be\ntrue or not. Of course I won’t be building my full crazy idea above\nstraight away, I will only build each component properly as it is\nneeded, and instead focus on building something that people want,\npreferable in focused niche.</p>\n\n<p>One niche that I think is likely to be profitable is\nchatbots for marketing, specifically,\n<a href=\"https://blog.whatshelp.io/3-strategies-to-use-messenger-bot-and-facebook-ads-for-lead-generation-8a40f033510c\">Facebook Messenger bots as a landing point for Facebook ads</a>.\nSo, if you’re interested in this idea, please get in touch! I think it\nhas a lot of potential for increasing the return on investment of\nFacebook ads.</p>"
}