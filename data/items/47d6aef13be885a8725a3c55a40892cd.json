{
  "title": "Packages for Testing your R Package",
  "link": "https://itsalocke.com/blog/packages-for-testing-your-r-package/",
  "pubDate": "Mon, 22 Oct 2018 00:00:00 +0000",
  "guid": "https://itsalocke.com/blog/packages-for-testing-your-r-package/",
  "description": "<p>Testing your R package is crucial, and thankfully it only gets easier with time, thanks to experience&hellip; and awesome packages helping you setup and improve tests! In this post, we shall offer a roundup of packages for testing R packages, first in a section about general testing setup, and then in a section about testing &ldquo;peculiar&rdquo; stuff.</p>\n\n<h1 id=\"general-package-testing-infrastructure\">General package testing infrastructure</h1>\n\n<h2 id=\"create-tests\">Create tests</h2>\n\n<p>If you&rsquo;re brand-new to unit testing your R package, I&rsquo;d recommend reading <a href=\"http://r-pkgs.had.co.nz/tests.html\">this chapter from Hadley Wickham&rsquo;s book about R packages</a>.</p>\n\n<p>There&rsquo;s an R package called <code>RUnit</code> for unit testing, but in the whole post we&rsquo;ll mention resources around the <a href=\"https://github.com/r-lib/testthat\"><code>testthat</code> package</a> since it&rsquo;s the one we use in our packages, and arguably the most popular one. <code>testthat</code> is great! Don&rsquo;t hesitate to reads its docs again if you started using it a while ago, since the <a href=\"https://www.tidyverse.org/articles/2017/12/testthat-2-0-0/\">latest major release</a> added the <a href=\"http://testthat.r-lib.org/reference/teardown.html\"><code>setup()</code> and <code>teardown()</code> functions</a> to run code before and after all tests, very handy.</p>\n\n<p>To setup testing in an existing package i.e. creating the test folder and adding <code>testthat</code> as a dependency, run <a href=\"http://usethis.r-lib.org/reference/use_testthat.html\"><code>usethis::use_testthat()</code></a>. In our WIP <a href=\"https://github.com/lockedata/pRojects\"><code>pRojects</code> package</a>, we set up the tests directory for you so you don&rsquo;t forget. Then, in any case, add new tests for a function using <code>usethis::use_test()</code>.</p>\n\n<p>The <a href=\"https://github.com/s-fleck/testthis\"><code>testthis</code> package</a> might help make your testing workflow even smoother. In particular, <code>test_this()</code> &ldquo;reloads the package and runs tests associated with the currently open R script file.&rdquo;, and there&rsquo;s also a function for opening the test file associated with the current R script. <em>Edit: as of version 2.0.0 <code>devtools</code> itself features <a href=\"https://www.tidyverse.org/articles/2018/10/devtools-2-0-0/#testing-single-files\">functions for testing single files</a>.</em></p>\n\n<h2 id=\"assess-your-tests\">Assess your tests</h2>\n\n<p>To get a sense of how good your tests are, check these out:</p>\n\n<ul>\n<li><p><a href=\"https://github.com/r-lib/covr\"><code>covr</code></a> computes the <em>test coverage</em> i.e. the percentage of lines of code that are covered by tests. <code>covr</code> allows skipping some lines. If run on Travis or Appveyor, for instance, it can send a report to online coverage tools such as CodeCov or Coveralls, allowing you to visualize the coverage. At Locke Data we mostly don&rsquo;t run <code>covr</code> locally but instead have it run on Travis. To set that up, <a href=\"http://usethis.r-lib.org/reference/ci.html\"><code>usethis::use_coverage()</code></a>.\nHere is <a href=\"https://coveralls.io/github/lockedata/HIBPwned?branch=master\">Coveralls report for <code>HIBPwned</code></a> and <a href=\"https://github.com/lockedata/hibpwned#hibpwned\">the corresponding badge</a>. See a <a href=\"https://codecov.io/github/ropensci/Ropenaq?branch=master\">CodeCov report for comparison</a>.</p></li>\n\n<li><p><a href=\"https://github.com/yonicd/covrpage\"><code>covrpage</code></a> creates a detailed coverage report that can serve as a README for your test folder. We&rsquo;ve done that <a href=\"https://github.com/lockedata/HIBPwned/tree/master/tests#tests-and-coverage\">for <code>HIBPwned</code></a> so now without clicking in a coverage report, thanks to &ldquo;detailed test results&rdquo;, you can see the tests associated with each context.</p></li>\n</ul>\n\n<h1 id=\"test-all-the-things\">Test all the things</h1>\n\n<p>Now, sometimes you might encounter cases of things that you don&rsquo;t quite know how to test. Here&rsquo;s a small list, but please comment about anything we&rsquo;ve forgotten!</p>\n\n<h2 id=\"mocking\">Mocking</h2>\n\n<p>Sometimes you need to test whether your package works as expected &ldquo;if something happens&rdquo;, &ldquo;if a thing has this value&rdquo; and can&rsquo;t rely on arguments. E.g. what happens if the environment variable <code>GITHUB_PAT</code> doesn&rsquo;t exist, or if a dependency isn&rsquo;t installed? In such cases, what you might be after is <em>mocking</em>. The <code>testthat</code> package itself has a <code>with_mock()</code> function, but it&rsquo;s now recommended to rather use the <a href=\"https://github.com/jfiksel/mockery\"><code>mockery</code></a> or <a href=\"https://github.com/krlmlr/mockr\"><code>mockr</code> packages</a>.</p>\n\n<h2 id=\"webmocking\">Webmocking</h2>\n\n<p>If the mocking you need to perform is e.g. mimicking a 404 result from an API, or saving a web API response and replay it to not have to re-query the API at each test, you can use:</p>\n\n<ul>\n<li><p><code>webmockr</code> <a href=\"https://itsalocke.com/blog/some-web-api-package-development-lessons-from-hibpwned/\">like we did for <code>HIBPwned</code></a></p></li>\n\n<li><p><a href=\"https://github.com/ropensci/vcr\"><code>vcr</code></a> and <code>webmockr</code> together, see <code>vcr</code> docs. It works for both <code>crul</code> and <code>httr</code>. <code>vcr</code> docs include a list of packages using <code>vcr</code> for testing in the wild.</p></li>\n\n<li><p><a href=\"https://cran.r-project.org/web/packages/httptest/index.html\"><code>httptest</code></a> for <code>httr</code> only.</p></li>\n</ul>\n\n<h2 id=\"test-plot-outputs\">Test plot outputs</h2>\n\n<p>You can test your plot outputs haven&rsquo;t changed by using <a href=\"https://github.com/lionel-/vdiffr\"><code>vdiffr</code></a>. To set things up you need to run <code>vdiffr::manage_cases()</code>.</p>\n\n<h2 id=\"test-shiny-apps\">Test Shiny apps</h2>\n\n<p>Fear not, there&rsquo;s a whole package dedicated to help you test Shiny apps! Check out <a href=\"https://github.com/rstudio/shinytest\"><code>shinytest</code></a>.</p>\n\n<h2 id=\"test-rstudio-add-ins\">Test RStudio add-ins</h2>\n\n<p>The <code>remedy</code> package by ThinkR has <a href=\"https://github.com/ThinkR-open/remedy/tree/master/tests\">tests for its add-ins</a>. See in particular the <a href=\"https://github.com/ThinkR-open/remedy/blob/89bac0d2c5b692f1d394f7f3706ad824fdf649aa/tests/testthat/helper-functions.R#L14\"><code>scratch_file()</code> function</a>. The tests need to be run only when RStudio is available so a helper defines a <a href=\"https://github.com/ThinkR-open/remedy/blob/master/tests/testthat/helper-functions.R#L1\"><code>skip_if_not_rstudio()</code> function</a>. Thanks to <a href=\"https://colinfay.me/\">Colin Fay</a> and <a href=\"https://github.com/yonicd/\">Jonathan Sidi</a> for showing it to me.</p>\n\n<h2 id=\"test-htmlwidgets\">Test htmlwidgets?</h2>\n\n<p>I&rsquo;ll be honest, I haven&rsquo;t seen examples of this in the wild, which is not surprising given I don&rsquo;t use htmlwidgets a lot. Still, worth mentioning are:</p>\n\n<ul>\n<li><p><a href=\"https://github.com/schloerke/viztest\"><code>viztest</code></a> tests htmlwidgets based on screenshots.</p></li>\n\n<li><p>the idea to test the content of the html before or after interactions. <a href=\"https://github.com/cpsievert/rdom\"><code>rdom</code></a> can be a part of such a workflow: <code>rdom</code> + <code>xml2</code> to scrape the result + <code>testthat</code> of course. Thanks to <a href=\"https://github.com/davidgohel\">David Gohel</a> for telling me this!</p></li>\n</ul>\n\n<h2 id=\"test-interactive-behavior\">Test interactive behavior?</h2>\n\n<p>This is another topic I haven&rsquo;t totally figured out, but I like using <code>usethis</code> tests as a reference, be it the <a href=\"https://github.com/r-lib/usethis/tree/master/tests/manual\">manual/ folder</a> or the <a href=\"https://github.com/r-lib/usethis/tree/master/tests/testthat\">testthat/ folder</a>. <a href=\"https://github.com/s-fleck/testthis/tree/master/tests/testthat\"><code>testthis</code> tests</a> might also be an inspiration.</p>\n\n<h1 id=\"conclusion\">Conclusion</h1>\n\n<p>The ecosystem for R package testing is getting more and more complete and automatic, which is very exciting. To <em>deploy</em> your tests, you&rsquo;ll need to learn about <a href=\"https://ropensci.github.io/dev_guide/ci.html\">continuous integration</a>, which thankfully is also an area with <a href=\"https://github.com/ropenscilabs/travis\">exciting</a> <a href=\"https://github.com/ropenscilabs/tic\">developments</a>. Maybe a subject for another post&hellip; In the meantime, feel free to tell us about your favourite resources for testing packages!</p>"
}