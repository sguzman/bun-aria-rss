{
  "title": "Pandas Categoricals",
  "link": "",
  "updated": "2015-06-18T00:00:00+00:00",
  "id": "https://mrocklin.github.io/blog/work/2015/06/18/Categoricals",
  "content": "<p><strong>tl;dr: Pandas Categoricals efficiently encode and dramatically improve\nperformance on data with text categories</strong></p>\n\n<p><em>Disclaimer: Categoricals were created by the Pandas development team and not\nby me.</em></p>\n\n<h2 id=\"there-is-more-to-speed-than-parallelism\">There is More to Speed Than Parallelism</h2>\n\n<p>I usually write about parallelism.  As a result people ask me how to\nparallelize their slow computations.\nThe answer is usually <strong>just use pandas</strong> in a better way</p>\n\n<ul>\n  <li>Q: <em>How do I make my pandas code faster with parallelism?</em></li>\n  <li>A: <em>You don’t need parallelism, you can use Pandas better</em></li>\n</ul>\n\n<p>This is almost always simpler and more effective than using multiple cores or\nmultiple machines.  You should look towards parallelism only after you’ve\nmade sane choices about storage format, compression, data representation, etc..</p>\n\n<p>Today we’ll talk about how Pandas can represent categorical text data\nnumerically.  This is a cheap and underused trick to get an order of magnitude\nspeedup on common queries.</p>\n\n<h2 id=\"categoricals\">Categoricals</h2>\n\n<p>Often our data includes text columns with many repeated elements. Examples:</p>\n\n<ul>\n  <li>Stock symbols – <code class=\"language-plaintext highlighter-rouge\">GOOG, APPL, MSFT, ...</code></li>\n  <li>Gender – <code class=\"language-plaintext highlighter-rouge\">Female, Male, ...</code></li>\n  <li>Experiment outcomes – <code class=\"language-plaintext highlighter-rouge\">Healthy, Sick, No Change, ...</code></li>\n  <li>States – <code class=\"language-plaintext highlighter-rouge\">California, Texas, New York, ...</code></li>\n</ul>\n\n<p>We usually represent these as text.  Pandas represents text with the <code class=\"language-plaintext highlighter-rouge\">object</code>\ndtype which holds a normal Python string.  This is a common culprit for slow\ncode because <code class=\"language-plaintext highlighter-rouge\">object</code> dtypes run at Python speeds, not at Pandas’ normal C\nspeeds.</p>\n\n<p>Pandas categoricals are a new and powerful feature that encodes categorical\ndata numerically so that we can leverage Pandas’ fast C code on this kind of\ntext data.</p>\n\n<figure class=\"highlight\">\n  <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># Example dataframe with names, balances, and genders as object dtypes\n</span><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"p\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">({</span><span class=\"s\">'name'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">'Alice'</span><span class=\"p\">,</span> <span class=\"s\">'Bob'</span><span class=\"p\">,</span> <span class=\"s\">'Charlie'</span><span class=\"p\">,</span> <span class=\"s\">'Danielle'</span><span class=\"p\">],</span>\n<span class=\"p\">...</span>                    <span class=\"s\">'balance'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mf\">100.0</span><span class=\"p\">,</span> <span class=\"mf\">200.0</span><span class=\"p\">,</span> <span class=\"mf\">300.0</span><span class=\"p\">,</span> <span class=\"mf\">400.0</span><span class=\"p\">],</span>\n<span class=\"p\">...</span>                    <span class=\"s\">'gender'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">'Female'</span><span class=\"p\">,</span> <span class=\"s\">'Male'</span><span class=\"p\">,</span> <span class=\"s\">'Male'</span><span class=\"p\">,</span> <span class=\"s\">'Female'</span><span class=\"p\">]},</span>\n<span class=\"p\">...</span>                    <span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s\">'name'</span><span class=\"p\">,</span> <span class=\"s\">'balance'</span><span class=\"p\">,</span> <span class=\"s\">'gender'</span><span class=\"p\">])</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">df</span><span class=\"p\">.</span><span class=\"n\">dtypes</span>                           <span class=\"c1\"># Oh no!  Slow object dtypes!\n</span><span class=\"n\">name</span>        <span class=\"nb\">object</span>\n<span class=\"n\">balance</span>    <span class=\"n\">float64</span>\n<span class=\"n\">gender</span>      <span class=\"nb\">object</span>\n<span class=\"n\">dtype</span><span class=\"p\">:</span> <span class=\"nb\">object</span></code></pre>\n</figure>\n\n<p>We can represent columns with many repeats, like gender, more efficiently by\nusing categoricals.  This stores our original data in two pieces</p>\n\n<ul>\n  <li>\n    <p>Original data</p>\n\n    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code> Female, Male, Male, Female\n</code></pre></div>    </div>\n  </li>\n</ul>\n\n<ol>\n  <li>\n    <p>Index mapping each category to an integer</p>\n\n    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Female: 0\nMale: 1\n...\n</code></pre></div>    </div>\n  </li>\n  <li>\n    <p>Normal array of integers</p>\n\n    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>0, 1, 1, 0\n</code></pre></div>    </div>\n  </li>\n</ol>\n\n<p>This integer array is more compact and is now a normal C array.  This allows\nfor normal C-speeds on previously slow object dtype columns.\nCategorizing a column is easy:</p>\n\n<figure class=\"highlight\">\n  <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">]:</span> <span class=\"n\">df</span><span class=\"p\">[</span><span class=\"s\">'gender'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">df</span><span class=\"p\">[</span><span class=\"s\">'gender'</span><span class=\"p\">].</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"s\">'category'</span><span class=\"p\">)</span>  <span class=\"c1\"># Categorize!</span></code></pre>\n</figure>\n\n<p>Lets look at the result</p>\n\n<figure class=\"highlight\">\n  <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">]:</span> <span class=\"n\">df</span>                          <span class=\"c1\"># DataFrame looks the same\n</span><span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">]:</span>\n       <span class=\"n\">name</span>  <span class=\"n\">balance</span>  <span class=\"n\">gender</span>\n<span class=\"mi\">0</span>     <span class=\"n\">Alice</span>      <span class=\"mi\">100</span>  <span class=\"n\">Female</span>\n<span class=\"mi\">1</span>       <span class=\"n\">Bob</span>      <span class=\"mi\">200</span>    <span class=\"n\">Male</span>\n<span class=\"mi\">2</span>   <span class=\"n\">Charlie</span>      <span class=\"mi\">300</span>    <span class=\"n\">Male</span>\n<span class=\"mi\">3</span>  <span class=\"n\">Danielle</span>      <span class=\"mi\">400</span>  <span class=\"n\">Female</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">]:</span> <span class=\"n\">df</span><span class=\"p\">.</span><span class=\"n\">dtypes</span>                   <span class=\"c1\"># But dtypes have changed\n</span><span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">]:</span>\n<span class=\"n\">name</span>         <span class=\"nb\">object</span>\n<span class=\"n\">balance</span>     <span class=\"n\">float64</span>\n<span class=\"n\">gender</span>     <span class=\"n\">category</span>\n<span class=\"n\">dtype</span><span class=\"p\">:</span> <span class=\"nb\">object</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">]:</span> <span class=\"n\">df</span><span class=\"p\">.</span><span class=\"n\">gender</span>                   <span class=\"c1\"># Note Categories at the bottom\n</span><span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">]:</span>\n<span class=\"mi\">0</span>    <span class=\"n\">Female</span>\n<span class=\"mi\">1</span>      <span class=\"n\">Male</span>\n<span class=\"mi\">2</span>      <span class=\"n\">Male</span>\n<span class=\"mi\">3</span>    <span class=\"n\">Female</span>\n<span class=\"n\">Name</span><span class=\"p\">:</span> <span class=\"n\">gender</span><span class=\"p\">,</span> <span class=\"n\">dtype</span><span class=\"p\">:</span> <span class=\"n\">category</span>\n<span class=\"n\">Categories</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"nb\">object</span><span class=\"p\">):</span> <span class=\"p\">[</span><span class=\"n\">Female</span><span class=\"p\">,</span> <span class=\"n\">Male</span><span class=\"p\">]</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">9</span><span class=\"p\">]:</span> <span class=\"n\">df</span><span class=\"p\">.</span><span class=\"n\">gender</span><span class=\"p\">.</span><span class=\"n\">cat</span><span class=\"p\">.</span><span class=\"n\">categories</span>    <span class=\"c1\"># Category index\n</span><span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">9</span><span class=\"p\">]:</span> <span class=\"n\">Index</span><span class=\"p\">([</span><span class=\"sa\">u</span><span class=\"s\">'Female'</span><span class=\"p\">,</span> <span class=\"sa\">u</span><span class=\"s\">'Male'</span><span class=\"p\">],</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"s\">'object'</span><span class=\"p\">)</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">]:</span> <span class=\"n\">df</span><span class=\"p\">.</span><span class=\"n\">gender</span><span class=\"p\">.</span><span class=\"n\">cat</span><span class=\"p\">.</span><span class=\"n\">codes</span>        <span class=\"c1\"># Numerical values\n</span><span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">]:</span>\n<span class=\"mi\">0</span>    <span class=\"mi\">0</span>\n<span class=\"mi\">1</span>    <span class=\"mi\">1</span>\n<span class=\"mi\">2</span>    <span class=\"mi\">1</span>\n<span class=\"mi\">3</span>    <span class=\"mi\">0</span>\n<span class=\"n\">dtype</span><span class=\"p\">:</span> <span class=\"n\">int8</span>                         <span class=\"c1\"># Stored in single bytes!</span></code></pre>\n</figure>\n\n<p>Notice that we can store our genders much more compactly as single bytes.  We\ncan continue to add genders (there are more than just two) and Pandas will\nuse new values (2, 3, …) as necessary.</p>\n\n<p>Our dataframe looks and feels just like it did before.  Pandas internals will\nsmooth out the user experience so that you don’t notice that you’re actually\nusing a compact array of integers.</p>\n\n<h2 id=\"performance\">Performance</h2>\n\n<p>Lets look at a slightly larger example to see the performance difference.</p>\n\n<p>We take a small subset of the NYC Taxi dataset and group by medallion ID to\nfind the taxi drivers who drove the longest distance during a certain period.</p>\n\n<figure class=\"highlight\">\n  <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]:</span> <span class=\"kn\">import</span> <span class=\"nn\">pandas</span> <span class=\"k\">as</span> <span class=\"n\">pd</span>\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]:</span> <span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"p\">.</span><span class=\"n\">read_csv</span><span class=\"p\">(</span><span class=\"s\">'trip_data_1_00.csv'</span><span class=\"p\">)</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]:</span> <span class=\"o\">%</span><span class=\"n\">time</span> <span class=\"n\">df</span><span class=\"p\">.</span><span class=\"n\">groupby</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">.</span><span class=\"n\">medallion</span><span class=\"p\">).</span><span class=\"n\">trip_distance</span><span class=\"p\">.</span><span class=\"nb\">sum</span><span class=\"p\">().</span><span class=\"n\">sort</span><span class=\"p\">(</span><span class=\"n\">ascending</span><span class=\"o\">=</span><span class=\"bp\">False</span><span class=\"p\">,</span>\n<span class=\"n\">inplace</span><span class=\"o\">=</span><span class=\"bp\">False</span><span class=\"p\">).</span><span class=\"n\">head</span><span class=\"p\">()</span>\n<span class=\"n\">CPU</span> <span class=\"n\">times</span><span class=\"p\">:</span> <span class=\"n\">user</span> <span class=\"mi\">161</span> <span class=\"n\">ms</span><span class=\"p\">,</span> <span class=\"n\">sys</span><span class=\"p\">:</span> <span class=\"mi\">0</span> <span class=\"n\">ns</span><span class=\"p\">,</span> <span class=\"n\">total</span><span class=\"p\">:</span> <span class=\"mi\">161</span> <span class=\"n\">ms</span>\n<span class=\"n\">Wall</span> <span class=\"n\">time</span><span class=\"p\">:</span> <span class=\"mi\">175</span> <span class=\"n\">ms</span>\n\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]:</span>\n<span class=\"n\">medallion</span>\n<span class=\"mf\">1E76</span><span class=\"n\">B5DCA3A19D03B0FB39BCF2A2F534</span>    <span class=\"mf\">870.83</span>\n<span class=\"mf\">6945300E90</span><span class=\"n\">C69061B463CCDA370DE5D6</span>    <span class=\"mf\">832.91</span>\n<span class=\"mi\">4</span><span class=\"n\">F4BEA1914E323156BE0B24EF8205B73</span>    <span class=\"mf\">811.99</span>\n<span class=\"mi\">191115180</span><span class=\"n\">C29B1E2AF8BE0FD0ABD138F</span>    <span class=\"mf\">787.33</span>\n<span class=\"n\">B83044D63E9421B76011917CE280C137</span>    <span class=\"mf\">782.78</span>\n<span class=\"n\">Name</span><span class=\"p\">:</span> <span class=\"n\">trip_distance</span><span class=\"p\">,</span> <span class=\"n\">dtype</span><span class=\"p\">:</span> <span class=\"n\">float64</span></code></pre>\n</figure>\n\n<p>That took around 170ms.  We categorize in about the same time.</p>\n\n<figure class=\"highlight\">\n  <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]:</span> <span class=\"o\">%</span><span class=\"n\">time</span> <span class=\"n\">df</span><span class=\"p\">[</span><span class=\"s\">'medallion'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">df</span><span class=\"p\">[</span><span class=\"s\">'medallion'</span><span class=\"p\">].</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"s\">'category'</span><span class=\"p\">)</span>\n<span class=\"n\">CPU</span> <span class=\"n\">times</span><span class=\"p\">:</span> <span class=\"n\">user</span> <span class=\"mi\">168</span> <span class=\"n\">ms</span><span class=\"p\">,</span> <span class=\"n\">sys</span><span class=\"p\">:</span> <span class=\"mf\">12.1</span> <span class=\"n\">ms</span><span class=\"p\">,</span> <span class=\"n\">total</span><span class=\"p\">:</span> <span class=\"mi\">180</span> <span class=\"n\">ms</span>\n<span class=\"n\">Wall</span> <span class=\"n\">time</span><span class=\"p\">:</span> <span class=\"mi\">197</span> <span class=\"n\">ms</span></code></pre>\n</figure>\n\n<p>Now that we have numerical categories our computaion runs 20ms, improving by\nabout an order of magnitude.</p>\n\n<figure class=\"highlight\">\n  <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">]:</span> <span class=\"o\">%</span><span class=\"n\">time</span> <span class=\"n\">df</span><span class=\"p\">.</span><span class=\"n\">groupby</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">.</span><span class=\"n\">medallion</span><span class=\"p\">).</span><span class=\"n\">trip_distance</span><span class=\"p\">.</span><span class=\"nb\">sum</span><span class=\"p\">().</span><span class=\"n\">sort</span><span class=\"p\">(</span><span class=\"n\">ascending</span><span class=\"o\">=</span><span class=\"bp\">False</span><span class=\"p\">,</span>\n<span class=\"n\">inplace</span><span class=\"o\">=</span><span class=\"bp\">False</span><span class=\"p\">).</span><span class=\"n\">head</span><span class=\"p\">()</span>\n<span class=\"n\">CPU</span> <span class=\"n\">times</span><span class=\"p\">:</span> <span class=\"n\">user</span> <span class=\"mf\">16.4</span> <span class=\"n\">ms</span><span class=\"p\">,</span> <span class=\"n\">sys</span><span class=\"p\">:</span> <span class=\"mf\">3.89</span> <span class=\"n\">ms</span><span class=\"p\">,</span> <span class=\"n\">total</span><span class=\"p\">:</span> <span class=\"mf\">20.3</span> <span class=\"n\">ms</span>\n<span class=\"n\">Wall</span> <span class=\"n\">time</span><span class=\"p\">:</span> <span class=\"mf\">20.3</span> <span class=\"n\">ms</span>\n\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">]:</span>\n<span class=\"n\">medallion</span>\n<span class=\"mf\">1E76</span><span class=\"n\">B5DCA3A19D03B0FB39BCF2A2F534</span>    <span class=\"mf\">870.83</span>\n<span class=\"mf\">6945300E90</span><span class=\"n\">C69061B463CCDA370DE5D6</span>    <span class=\"mf\">832.91</span>\n<span class=\"mi\">4</span><span class=\"n\">F4BEA1914E323156BE0B24EF8205B73</span>    <span class=\"mf\">811.99</span>\n<span class=\"mi\">191115180</span><span class=\"n\">C29B1E2AF8BE0FD0ABD138F</span>    <span class=\"mf\">787.33</span>\n<span class=\"n\">B83044D63E9421B76011917CE280C137</span>    <span class=\"mf\">782.78</span>\n<span class=\"n\">Name</span><span class=\"p\">:</span> <span class=\"n\">trip_distance</span><span class=\"p\">,</span> <span class=\"n\">dtype</span><span class=\"p\">:</span> <span class=\"n\">float64</span></code></pre>\n</figure>\n\n<p>We see almost an order of magnitude speedup after we do the one-time-operation\nof replacing object dtypes with categories.  Most other computations on this\ncolumn will be similarly fast.  Our memory use drops dramatically as well.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>Pandas Categoricals efficiently encode repetitive text data.  Categoricals are\nuseful for data like stock symbols, gender, experiment outcomes, cities,\nstates, etc..  Categoricals are easy to use and greatly improve performance on\nthis data.</p>\n\n<p>We have several options to increase performance when dealing with\ninconveniently large or slow data.  Good choices in storage format,\ncompression, column layout, and data representation can dramatically improve\nquery times and memory use. Each of these choices is as important as\nparallelism but isn’t overly hyped and so is often overlooked.</p>\n\n<p>Jeff Reback gave a nice talk on categoricals (and other featuress in Pandas) at\n<a href=\"https://www.youtube.com/watch?v=PUsntnCp65c\">PyData NYC 2014</a> and is giving\nanother this weekend at PyData London.</p>"
}