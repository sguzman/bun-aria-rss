{
  "id": "tag:blogger.com,1999:blog-15045980.post-8583328337291032488",
  "published": "2022-02-07T09:03:00.000-08:00",
  "updated": "2022-02-07T09:03:30.372-08:00",
  "category": [
    "",
    "",
    ""
  ],
  "title": "Code Health: Now You're Thinking With Functions",
  "content": "<span style=\"background-color: white; color: #222222; font-family: times, &quot;times new roman&quot;, serif; font-style: italic; vertical-align: baseline; white-space: pre-wrap;\">This is another post in our </span><a href=\"https://testing.googleblog.com/2017/04/code-health-googles-internal-code.html\" style=\"font-family: times, &quot;times new roman&quot;, serif; text-decoration-line: none;\"><span style=\"background-color: white; color: #1155cc; font-style: italic; vertical-align: baseline; white-space: pre-wrap;\">Code Health</span></a><span style=\"background-color: white; color: #222222; font-family: times, &quot;times new roman&quot;, serif; font-style: italic; vertical-align: baseline; white-space: pre-wrap;\"> series. A version of this post originally appeared in Google bathrooms worldwide as a Google </span><a href=\"https://testing.googleblog.com/2007/01/introducing-testing-on-toilet.html\" style=\"font-family: times, &quot;times new roman&quot;, serif; text-decoration-line: none;\"><span style=\"background-color: white; color: #1155cc; font-style: italic; vertical-align: baseline; white-space: pre-wrap;\">Testing on the Toilet</span></a><span style=\"background-color: white; color: #222222; font-family: times, &quot;times new roman&quot;, serif; font-style: italic; vertical-align: baseline; white-space: pre-wrap;\"> episode. You can download a </span><a href=\"https://docs.google.com/document/d/1AqF96_mlhZO0xyW8noG5PA0B6p8uLshLfkiupxM-NzY/edit\" rel=\"nofollow\" style=\"font-family: times, &quot;times new roman&quot;, serif; text-decoration-line: none;\"><span style=\"background-color: white; color: #1155cc; font-style: italic; vertical-align: baseline; white-space: pre-wrap;\">printer-friendly version</span></a><span style=\"background-color: white; color: #222222; font-family: times, &quot;times new roman&quot;, serif; font-style: italic; vertical-align: baseline; white-space: pre-wrap;\"> to display in your office. </span><div><span style=\"background-color: white; color: #222222; font-family: times, &quot;times new roman&quot;, serif; font-style: italic; vertical-align: baseline; white-space: pre-wrap;\"><br /></span></div><div><span style=\"color: #222222; font-family: times, times new roman, serif;\"><span style=\"background-color: white; white-space: pre-wrap;\">by </span><span style=\"white-space: pre-wrap;\">Cathal Weakliam</span></span></div><div><br /></div><div><span style=\"font-family: times, times new roman, serif;\"><span style=\"white-space: pre-wrap;\"><span style=\"color: #222222;\">Loops are the standard way to process collections like arrays and lists. However, some loops implement the same patterns repeatedly, leading to duplicate code. </span><a href=\"https://medium.com/javascript-scene/higher-order-functions-composing-software-5365cf2cbe99\"><i><b><span style=\"color: #2b00fe;\">Higher-order functions</span></b></i></a><span style=\"color: #800180; font-weight: bold;\">—functions that use other functions as inputs or outputs—can reduce duplication by providing a simpler way to express common operations with collections.</span></span></span></div><div><span style=\"font-family: times, times new roman, serif;\"><span style=\"white-space: pre-wrap;\"><span style=\"color: #800180;\"><b><br /></b></span></span></span></div><div><span style=\"color: #222222; font-family: times, times new roman, serif;\"><span style=\"white-space: pre-wrap;\">Consider these two loops in JavaScript th</span></span><span style=\"color: #222222; font-family: times, &quot;times new roman&quot;, serif; white-space: pre-wrap;\">at decide if every object in an array meets a condition:</span></div><div><span style=\"color: #222222; font-family: times, times new roman, serif;\"><span style=\"white-space: pre-wrap;\"><br /></span></span></div> <div style=\"overflow-x: auto;\"><table class=\"my-bordered-table\">  <tbody><tr>    <td style=\"background-color: #f4cccc; vertical-align: top; width: 50%;\"><pre style=\"background-color: #f4cccc; border: 0px; color: black; margin-bottom: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-top: 0px;\">let everyRequestValid = true;<br />for (const request of requests) {<br />  if (!<span style=\"font-weight: bold;\">isValid</span>(request)) {<br />    everyRequestValid = false;<br />    break;<br />  }<br />}<br /><br />if (everyRequestValid) {<br /><span style=\"font-style: italic;\">  // do something</span><br />}</pre></td>    <td style=\"background-color: #f4cccc; vertical-align: top; width: 50%;\"><pre style=\"background-color: #f4cccc; border: 0px; color: black; margin-bottom: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-top: 0px;\">let everyUserEligible = true;<br />for (const user of users) {<br />  if (!<span style=\"font-weight: bold;\">isEligible</span>(user)) {<br />    everyUserEligible = false;<br />    break;<br />  }<br />}<br /><br />if (everyUserEligible) {<br /><span style=\"font-style: italic;\">  // do something</span><br />}</pre></td>   </tr></tbody></table><br /></div><div style=\"overflow-x: auto;\"><span style=\"color: #800180; font-weight: bold;\"><br /></span></div><div style=\"overflow-x: auto;\"><span style=\"color: #800180; font-weight: bold;\">The high similarity between the two loops violates the <a href=\"https://en.wikipedia.org/wiki/Don%27t_repeat_yourself\">Don’t Repeat Yourself </a>principle</span> and creates an unnecessary burden on readers and maintainers of the code.</div><div style=\"overflow-x: auto;\"><br /></div><div style=\"overflow-x: auto;\">To reduce the maintenance burden, use the <span style=\"color: #0f9d58; font-family: &quot;consolas&quot; , &quot;courier new&quot; , &quot;courier&quot; , monospace;\">every</span> method to replace each loop with a single expression.&nbsp; (In other languages <span style=\"color: #0f9d58; font-family: &quot;consolas&quot; , &quot;courier new&quot; , &quot;courier&quot; , monospace;\">every</span> may have a different name, like <span style=\"color: #0f9d58; font-family: &quot;consolas&quot; , &quot;courier new&quot; , &quot;courier&quot; , monospace;\">all</span> or <span style=\"color: #0f9d58; font-family: &quot;consolas&quot; , &quot;courier new&quot; , &quot;courier&quot; , monospace;\">allMatch</span>).</div><div style=\"overflow-x: auto;\"><br /></div> <div style=\"overflow-x: auto;\"><table class=\"my-bordered-table\">  <tbody><tr>    <td style=\"background-color: #d9ead3; vertical-align: top; width: 50%;\"><pre style=\"background-color: #d9ead3; border: 0px; color: black; margin-bottom: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-top: 0px;\">if (requests.<span style=\"font-weight: bold;\">every(isValid)</span>) {<br /><span style=\"font-style: italic;\">  // do something</span><br />}</pre></td>      <td style=\"background-color: #d9ead3; vertical-align: top; width: 50%;\"><pre style=\"background-color: #d9ead3; border: 0px; color: black; margin-bottom: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-top: 0px;\">if (users.<span style=\"font-weight: bold;\">every(isEligible)</span>) {<br /><span style=\"font-style: italic;\">  // do something</span><br />}</pre></td>  </tr></tbody></table><br /></div><div style=\"overflow-x: auto;\"><div style=\"overflow-x: auto;\"><span style=\"color: #800180; font-weight: bold;\"><br /></span></div><div style=\"overflow-x: auto;\"><span style=\"color: #800180; font-weight: bold;\">Processing collections with higher-order functions has several benefits:</span></div><div><ul style=\"text-align: left;\"><li>It significantly reduces duplication by abstracting away the common looping code.</li><li>The resulting code is much shorter and simpler, with less opportunity for bugs.</li><li>A reader can quickly see the intent of the code as it is not obscured behind low-level control flow.</li></ul><div>Two other common higher-order functions are <span style=\"color: #0f9d58; font-family: &quot;consolas&quot; , &quot;courier new&quot; , &quot;courier&quot; , monospace;\">map</span> (apply a function to each element of a collection) and <span style=\"color: #0f9d58; font-family: &quot;consolas&quot; , &quot;courier new&quot; , &quot;courier&quot; , monospace;\">filter</span> (select the elements of a collection that pass a predicate). While the exact syntax varies by language, here’s how they look in JavaScript (using an anonymous function as the argument):</div></div><div><br /></div></div>  <div style=\"overflow-x: auto;\"><table class=\"my-bordered-table\">  <tbody><tr>    <td style=\"background-color: #d9ead3; vertical-align: top; width: 50%;\"><pre style=\"background-color: #d9ead3; border: 0px; color: black; margin-bottom: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-top: 0px;\"><span style=\"font-style: italic;\">// Double each value in `ints`</span><br />const doubled = ints.<span style=\"font-weight: bold;\">map(n =&gt; n * 2);</span></pre></td>      <td style=\"background-color: #d9ead3; vertical-align: top; width: 50%;\"><pre style=\"background-color: #d9ead3; border: 0px; color: black; margin-bottom: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-top: 0px;\"><span style=\"font-style: italic;\">// Get only the even values in `ints`</span><br />const evens = ints.<span style=\"font-weight: bold;\">filter(n =&gt; n % 2 === 0);</span></pre></td>  </tr></tbody></table></div><div><br /></div><div><br /></div><div>Just don’t overdo it! <span style=\"color: #800180; font-weight: bold;\">Don’t rewrite a loop with functions if it makes it harder to understand, or if it would be considered unidiomatic in your language</span> (for example, in Python, list comprehensions are equivalent to <span style=\"color: #0f9d58; font-family: &quot;consolas&quot; , &quot;courier new&quot; , &quot;courier&quot; , monospace;\">map</span> and <span style=\"color: #0f9d58; font-family: &quot;consolas&quot; , &quot;courier new&quot; , &quot;courier&quot; , monospace;\">filter</span> but are usually preferred).</div><div><br /></div>",
  "link": [
    "",
    "",
    "",
    "",
    ""
  ],
  "author": {
    "name": "Google Testing Bloggers",
    "uri": "http://www.blogger.com/profile/03153388556673050910",
    "email": "noreply@blogger.com",
    "gd:image": ""
  },
  "thr:total": 0
}