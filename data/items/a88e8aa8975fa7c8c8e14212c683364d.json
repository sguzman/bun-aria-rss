{
  "title": "e011: Once Upon a Type",
  "link": "https://newrustacean.com/show_notes/e011/",
  "description": "<p>Type systems: strong vs. weak, dynamic vs. static, and degrees of expressivity.</p>\n<h2 id=\"notes\">Notes</h2>\n<p>Talking about type systems! A broad and wide-ranging discussion about type systems in general, with specific examples from languages like PHP, JavaScript, Python, C, C++, Java, C♯, Haskell, and Rust!</p>\n<ul>\n<li>What is a type system?</li>\n<li>What are the kinds of things we get out of type systems?</li>\n<li>What are the tradeoffs with different type systems?</li>\n<li>What is Rust’s type system like?</li>\n<li>What is especially attractive about Rust’s type system?</li>\n</ul>\n<p>A comment on the C integer/character string addition example: what’s actually happening there is that the character string is an array “under the covers,” and as such has an address. C silently switches to using the memory address, which is of course just an integer, when you try to add the two together. As I said on the show: the result is nonsense (unless you’re using this as a way of operating on memory addresses), but it’s compileable nonsense. In a stricter and stronger type system, memory addresses and normal numbers shouldn’t be addable!</p>\n<h2 id=\"links\">Links</h2>\n<ul>\n<li><a href=\"http://blog.rust-lang.org/2016/03/02/Rust-1.7.html\">Rust 1.7 released</a>\n<ul>\n<li><a href=\"http://blog.rust-lang.org/2016/03/02/Rust-1.7.html#library-stabilizations\"><code>HashMap</code> changes</a></li>\n</ul></li>\n<li><a href=\"http://www.cs.ru.nl/~herman/PUBS/IntroTT-improved.pdf\">Introduction to Type Theory</a></li>\n<li><a href=\"https://jadpole.github.io/rust/type-system/\">Visualizing Rust’s type-system</a></li>\n<li><a href=\"http://cglab.ca/~abeinges/blah/rust-reuse-and-recycle/\">The Many Kinds of Code Reuse in Rust</a></li>\n</ul>\n<h2 id=\"sponsors\">Sponsors</h2>\n<ul>\n<li>Aleksey Pirogov</li>\n<li>Chris Palmer</li>\n<li><a href=\"https://twitter.com/derekmorr\">Derek Morr</a></li>\n<li>Hamza Sheikh</li>\n<li>Lachlan Collins</li>\n<li>Leif Arne Storset</li>\n<li>Luca Schmid</li>\n<li>Micael Bergeron</li>\n<li>Pascal</li>\n<li>Ralph Giles (“rillian”)</li>\n<li>Ralph “FriarTech” Loizzo</li>\n<li>reddraggone9</li>\n<li>Ryan Ollos</li>\n<li><a href=\"http://willroe.me\">William Roe</a></li>\n</ul>\n<h3 id=\"become-a-sponsor\">Become a sponsor</h3>\n<ul>\n<li><a href=\"https://www.patreon.com/newrustacean\" rel=\"payment\">Patreon</a></li>\n<li><a href=\"https://venmo.com/chriskrycho\">Venmo</a></li>\n<li><a href=\"https://www.dwolla.com/hub/chriskrycho\">Dwolla</a></li>\n<li><a href=\"https://cash.me/$chriskrycho\">Cash.me</a></li>\n</ul>\n<h2 id=\"contact\">Contact</h2>\n<ul>\n<li>New Rustacean:\n<ul>\n<li>Twitter: <a href=\"https://www.twitter.com/newrustacean\">@newrustacean</a></li>\n<li>Email: <a href=\"mailto:hello@newrustacean.com\">hello@newrustacean.com</a></li>\n</ul></li>\n<li>Chris Krycho\n<ul>\n<li>GitHub: <a href=\"https://github.com/chriskrycho\">chriskrycho</a></li>\n<li>Twitter: <a href=\"https://www.twitter.com/chriskrycho\">@chriskrycho</a></li>\n</ul></li>\n</ul>\n",
  "pubDate": "Tue, 08 Mar 2016 08:00:00 -0700",
  "enclosure": "",
  "guid": "AC4E31F9-5811-4B6E-86E2-5E3ED3CE8DEF",
  "itunes:author": "Chris Krycho",
  "itunes:summary": "Type systems: strong vs. weak, dynamic vs. static, and degrees of expressivity. Notes Talking about type systems! A broad and wide-ranging discussion about type systems in general, with specific examples from languages like PHP, JavaScript, Python, C, C++, Java, C♯, Haskell, and Rust! * What is a type system? * What are the kinds of things we get out of type systems? * What are the tradeoffs with different type systems? * What is Rust’s type system like? * What is especially attractive about Rust’s type system? A comment on the C integer/character string addition example: what’s actually happening there is that the character string is an array “under the covers,” and as such has an address. C silently switches to using the memory address, which is of course just an integer, when you try to add the two together. As I said on the show: the result is nonsense (unless you’re using this as a way of operating on memory addresses), but it’s compellable nonsense. In a stricter and stronger type system, memory addresses and normal numbers shouldn’t be addable! Sponsors * Aleksey Pirogue * Chris Palmer * Derek Morr * Hamza Sheikh * Lachlan Collins * Leif Arne Storset * Luca Schmid * Micael Bergeron * Pascal * Ralph Giles (“gillian”) * Ralph “FriarTech” Loizzo * reddraggone9 * Ryan Oleos * William Roe Become a sponsor * Patreon.com/newrustacean * Venmo.com/chriskrycho * Dwolla.com/hub/chriskrycho * Cash.me/$chriskrycho Contact * New Rustacean: - Twitter: @newrustacean - Email: hello@newrustacean.com * Chris Krycho - GitHub: chriskrycho - Twitter: @chriskrycho",
  "itunes:duration": "17:51",
  "itunes:episodeType": "full"
}