{
  "title": "Disk Bandwidth",
  "link": "",
  "updated": "2015-12-29T00:00:00+00:00",
  "id": "https://mrocklin.github.io/blog/work/2015/12/29/disk-bandwidth",
  "content": "<p><em>This work is supported by <a href=\"http://continuum.io\">Continuum Analytics</a>\nand the <a href=\"http://www.darpa.mil/program/XDATA\">XDATA Program</a>\nas part of the <a href=\"http://blaze.pydata.org\">Blaze Project</a></em></p>\n\n<p><strong>tl;dr: Disk read and write bandwidths depend strongly on block size.</strong></p>\n\n<p>Disk read/write bandwidths on commodity hardware vary between 10 MB/s (or\nslower) to 500 MB/s (or faster on fancy hardware).  This variance can be\ncharacterized by the following rules:</p>\n\n<ol>\n  <li>Reading/writing large blocks of data is faster than\nreading/writing small blocks of data</li>\n  <li>Reading is faster than writing</li>\n  <li>Solid state drives are faster than spinning disk <em>especially for\nmany small reads/writes</em></li>\n</ol>\n\n<p>In <a href=\"https://gist.github.com/07bb67d99dc5d15341f9\">this notebook</a> we experiment\nwith the dependence of disk bandwidth on file size.  The result of this\nexperiment is the following image, which depicts the read and write bandwidths\nof a commercial laptop SSD as we vary block size:</p>\n\n<p><img src=\"https://mrocklin.github.io/blog/images/disk-bandwidth.png\" alt=\"\" /></p>\n\n<h2 id=\"analysis\">Analysis</h2>\n\n<p>We see that this particular hard drive wants to read/write data in chunksizes\nof 1-100 MB.  If we can arrange our data so that we consistently pull off\nlarger blocks of data at a time then we can read through data quite quickly\nat 500 MB/s.  We can churn through a 30 GB dataset in one minute.\nSophisticated file formats take advantage of this by storing similar data\nconsecutively.  For example column stores store all data within a single column\nin single large blocks.</p>\n\n<h2 id=\"difficulties-when-measuring-disk-io\">Difficulties when measuring disk I/O</h2>\n\n<p>Your file system is sophisticated.  It will buffer both reads and writes in RAM\nas you think you’re writing to disk.  In particular, this guards your disk\nsomewhat against the “many small writes” regime of terrible performance.  This\nis great, your file system does a fantastic job (bringing write numbers up from\n0.1 MB/s to 20 MB/s or so) but it makes it a bit tricky to benchmark properly.\nIn the experiment above we <code class=\"language-plaintext highlighter-rouge\">fsync</code> each file after write to flush write buffers\nand explicitly clear all buffers before entering the read section.</p>\n\n<p>Anecdotally I also learned that my operating system caps write speeds at 30\nMB/s when operating off of battery power.  This anecdote demonstrates how\nparticular your hard drive may be when controlled by a file system.  It is worth\nremembering that your hard drive is a physical machine and not just a\nconvenient abstraction.</p>"
}