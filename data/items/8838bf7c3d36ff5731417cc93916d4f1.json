{
  "title": "Introducing CyToolz",
  "link": "",
  "updated": "2014-05-01T00:00:00+00:00",
  "id": "https://mrocklin.github.io/blog/work/2014/05/01/Introducing-CyToolz",
  "content": "<p><strong>tl;dr: We reimplement PyToolz, a functional standard library, in Cython.\nIt’s fast.</strong></p>\n\n<p><strong>This post highlights work done, and was partially written by, <a href=\"http://github.com/eriknw/\">Erik N.\nWelch</a>.  When I say “we” below, I really mean “Erik”</strong></p>\n\n<p><a href=\"http://matthewrocklin.com/blog/work/2013/10/17/Introducing-PyToolz/\">Last year</a>\nI introduced <a href=\"http://toolz.readthedocs.org/en/latest/\">PyToolz</a>, a library that\nprovides a suite of utility functions for data processing commonly found in\nfunctional languages.</p>\n\n<figure class=\"highlight\">\n  <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">toolz</span> <span class=\"kn\">import</span> <span class=\"n\">groupby</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">names</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">'Alice'</span><span class=\"p\">,</span> <span class=\"s\">'Bob'</span><span class=\"p\">,</span> <span class=\"s\">'Charlie'</span><span class=\"p\">,</span> <span class=\"s\">'Dan'</span><span class=\"p\">,</span> <span class=\"s\">'Edith'</span><span class=\"p\">,</span> <span class=\"s\">'Frank'</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">groupby</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">,</span> <span class=\"n\">names</span><span class=\"p\">)</span>\n<span class=\"p\">{</span><span class=\"mi\">3</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">'Bob'</span><span class=\"p\">,</span> <span class=\"s\">'Dan'</span><span class=\"p\">],</span>\n <span class=\"mi\">5</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">'Alice'</span><span class=\"p\">,</span> <span class=\"s\">'Edith'</span><span class=\"p\">,</span> <span class=\"s\">'Frank'</span><span class=\"p\">],</span>\n <span class=\"mi\">7</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">'Charlie'</span><span class=\"p\">]}</span></code></pre>\n</figure>\n\n<p>Over the last year a number of <a href=\"https://github.com/pytoolz/toolz/blob/master/AUTHORS.md\">excellent\ncontributors</a> have\nbenchmarked and tuned these functions to the point where they often beat the\nstandard library.  When you couple these tuned functions with the power of pure\nPython data structures you get a nice analytics platform.  In my experience\n<code class=\"language-plaintext highlighter-rouge\">toolz</code> is often <a href=\"http://matthewrocklin.com/blog/work/2014/05/01/Fast-Data-Structures/\">fast enough</a>\nfor large streaming data projects.</p>\n\n<h2 id=\"cytoolz\">CyToolz</h2>\n\n<p>Personally, I’m fine with fast Python speeds.  Erik Welch on the other hand,\nwanted unreasonably fast C speeds so he rewrote <code class=\"language-plaintext highlighter-rouge\">toolz</code> in Cython;  he calls it\n<a href=\"http://github.com/pytoolz/cytoolz/\">CyToolz</a>.</p>\n\n<figure class=\"highlight\">\n  <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">toolz</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">cytoolz</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">timeit</span> <span class=\"n\">toolz</span><span class=\"p\">.</span><span class=\"n\">groupby</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">,</span> <span class=\"n\">names</span><span class=\"p\">)</span>            <span class=\"mf\">3.19</span> <span class=\"n\">µs</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">timeit</span> <span class=\"n\">cytoolz</span><span class=\"p\">.</span><span class=\"n\">groupby</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">,</span> <span class=\"n\">names</span><span class=\"p\">)</span>           <span class=\"mi\">721</span> <span class=\"n\">ns</span></code></pre>\n</figure>\n\n<p>For data structure bound computations this approach competes with Java.\nNote that CyToolz accomplishes these speeds even on standard Python data\nstructures.  This differs from the traditional NumPy/Pandas approach of\napplying Cython code onto non-Pythonic C data structures.</p>\n\n<table>\n  <thead>\n    <tr>\n      <th>Project</th>\n      <th>Computation</th>\n      <th>Data Structures</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>PyToolz</td>\n      <td>Python</td>\n      <td>Python</td>\n    </tr>\n    <tr>\n      <td>CyToolz</td>\n      <td>C</td>\n      <td>Python</td>\n    </tr>\n    <tr>\n      <td>Pandas/NumPy</td>\n      <td>C</td>\n      <td>C</td>\n    </tr>\n  </tbody>\n</table>\n\n<p>Erik just released CyToolz yesterday.  Get it while it’s hot</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>$ pip install cytoolz\n</code></pre></div></div>\n\n<h2 id=\"how\">How?</h2>\n\n<p>Cython is most effective when leveraging C type information for tight inner\nloops or C data structures like numpy arrays, and speed improvements of 10-100x\nare common for these cases.  We have found that by utilizing Cython and Python’s\nC API, significant improvements (typically 2-5x and sometimes much more) can be\nachieved when using pure Python data structures.</p>\n\n<p>We actually don’t know precisely where most of the performance increases come\nfrom.  Developing for performance was primarily done through trial and error\nand was driven by curiosity.  Cython employs many optimizations, and the code\ncompiles to a native C extension, which is generally faster than the Python\ninterpreter.  Still, we were able to improve upon the original Python code for\nnearly all functions.  Here are some of our best guesses for how this was\nachieved:</p>\n\n<ol>\n  <li>Python’s C API exposes functionality unavailable in the Python interpreter.</li>\n  <li>Directly using the C API is faster in some cases even when Python has an equivalent\nfunction.</li>\n  <li>The C API allows pointers to be used.  In many cases this is a “borrowed reference”,\nand it avoids reference counting and the garbage collector.</li>\n  <li>Some C API functions don’t check types or raise exceptions; these must be used with\ncaution, but can be much faster.</li>\n  <li>Checking types with <code class=\"language-plaintext highlighter-rouge\">isinstance</code> in Cython is really fast.  So is checking whether a\npointer is <code class=\"language-plaintext highlighter-rouge\">NULL</code>.</li>\n  <li>The overhead of calling C extension types developed in Cython is low.  This, for\ninstance, makes iterables really fast.</li>\n  <li>Early binding–that is, pre-declaring variables with <code class=\"language-plaintext highlighter-rouge\">cdef</code>–usually improves\nperformance.</li>\n</ol>\n\n<h2 id=\"example-merge\">Example: <code class=\"language-plaintext highlighter-rouge\">merge</code></h2>\n\n<figure class=\"highlight\">\n  <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">dicts</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s\">'one'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s\">'two'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s\">'three'</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s\">'two'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s\">'four'</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"p\">}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">toolz</span><span class=\"p\">.</span><span class=\"n\">merge</span><span class=\"p\">(</span><span class=\"n\">dicts</span><span class=\"p\">)</span>\n<span class=\"p\">{</span><span class=\"s\">'one'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s\">'two'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s\">'three'</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s\">'four'</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"p\">}</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">timeit</span> <span class=\"n\">toolz</span><span class=\"p\">.</span><span class=\"n\">merge</span><span class=\"p\">(</span><span class=\"n\">dicts</span><span class=\"p\">)</span>                   <span class=\"mf\">1.76</span> <span class=\"n\">µs</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">timeit</span> <span class=\"n\">cytoolz</span><span class=\"p\">.</span><span class=\"n\">merge</span><span class=\"p\">(</span><span class=\"n\">dicts</span><span class=\"p\">)</span>                  <span class=\"mi\">264</span> <span class=\"n\">ns</span></code></pre>\n</figure>\n\n<h2 id=\"why\">Why?</h2>\n\n<p>We love NumPy and Pandas, so why do we use toolz?  Two reasons</p>\n\n<ol>\n  <li>Streaming analytics - Python’s iterators and Toolz support for lazy operations allows me to crunch over Pretty-Big-Data without the hassle of setting up a distributed machine.</li>\n  <li>Trivial parallelism - The functional constructs in PyToolz, coupled with the promise of <a href=\"http://matthewrocklin.com/blog/work/2013/12/05/Parallelism-and-Serialization/\">serialization</a>, make parallelizing PyToolz applications to multicore or cluster computing trivial.  See the <a href=\"http://toolz.readthedocs.org/en/latest/parallelism.html\">toolz docs page</a> on the subject.</li>\n</ol>\n\n<h2 id=\"testing\">Testing</h2>\n\n<p>CyToolz perfectly satisfies the PyToolz test suite.  This is especially notable\ngiven that PyToolz has 100% coverage.</p>\n\n<p>PyToolz is stable enough that we were able to just copy over the tests en\nmasse.  We’d like to find a cleaner way to share test suites between codebases\nthough.  Ideas and experiences welcome.</p>\n\n<h2 id=\"example-pluck\">Example: <code class=\"language-plaintext highlighter-rouge\">pluck</code></h2>\n\n<p>Many Toolz operations provide functional ways of doing plain old Python\noperations.  The <code class=\"language-plaintext highlighter-rouge\">pluck</code> operation gets out elements from items in a collection.</p>\n\n<figure class=\"highlight\">\n  <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">[{</span><span class=\"s\">'name'</span><span class=\"p\">:</span> <span class=\"s\">'Alice'</span><span class=\"p\">,</span> <span class=\"s\">'amount'</span><span class=\"p\">:</span> <span class=\"mi\">100</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s\">'name'</span><span class=\"p\">:</span> <span class=\"s\">'Bob'</span><span class=\"p\">,</span> <span class=\"s\">'amount'</span><span class=\"p\">:</span> <span class=\"mi\">200</span><span class=\"p\">}]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">pluck</span><span class=\"p\">(</span><span class=\"s\">'name'</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">))</span>\n<span class=\"p\">[</span><span class=\"s\">'Alice'</span><span class=\"p\">,</span> <span class=\"s\">'Bob'</span><span class=\"p\">]</span></code></pre>\n</figure>\n\n<p>In PyToolz we work hard to ensure that we’re not much slower than straight\nPython (this definitely requires work.)</p>\n\n<figure class=\"highlight\">\n  <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">[[</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"o\">**</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1000</span><span class=\"p\">)]</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">timeit</span> <span class=\"p\">[</span><span class=\"n\">item</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">data</span><span class=\"p\">]</span>\n<span class=\"mi\">10000</span> <span class=\"n\">loops</span><span class=\"p\">,</span> <span class=\"n\">best</span> <span class=\"n\">of</span> <span class=\"mi\">3</span><span class=\"p\">:</span> <span class=\"mf\">54.2</span> <span class=\"n\">µs</span> <span class=\"n\">per</span> <span class=\"n\">loop</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">timeit</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">toolz</span><span class=\"p\">.</span><span class=\"n\">pluck</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">))</span>\n<span class=\"mi\">10000</span> <span class=\"n\">loops</span><span class=\"p\">,</span> <span class=\"n\">best</span> <span class=\"n\">of</span> <span class=\"mi\">3</span><span class=\"p\">:</span> <span class=\"mf\">62.9</span> <span class=\"n\">µs</span> <span class=\"n\">per</span> <span class=\"n\">loop</span></code></pre>\n</figure>\n\n<p>But CyToolz just beats Python hands down.</p>\n\n<figure class=\"highlight\">\n  <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">timeit</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">cytoolz</span><span class=\"p\">.</span><span class=\"n\">pluck</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">))</span>\n<span class=\"mi\">10000</span> <span class=\"n\">loops</span><span class=\"p\">,</span> <span class=\"n\">best</span> <span class=\"n\">of</span> <span class=\"mi\">3</span><span class=\"p\">:</span> <span class=\"mf\">26.7</span> <span class=\"n\">µs</span> <span class=\"n\">per</span> <span class=\"n\">loop</span></code></pre>\n</figure>\n\n<h2 id=\"a-note-on-functional-programming\">A note on Functional Programming</h2>\n\n<p>PyToolz integrates functional principles into traditional Python programming.\nCyToolz supports these same functional principles, in the same workflow, but\nnow backed by C speeds</p>\n\n<p>I started PyToolz because I liked Clojure’s standard library but couldn’t stay\non the JVM (I needed to interact with native code).  Originally I thought of\nPython and PyToolz as a hack providing functional programming abstractions in\nan imperative language.  I’ve now come to think of Python as a performant and\nserious functional language in its own right.  While it lacks macros, monads,\nor any sort of type system, it is just fine for 99% of the pedestrian\nprogramming that I do every day.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>The toolz functions are simple, fast, and a great way to compose clear and\nperformant code.  Check out <a href=\"http://toolz.readthedocs.org/\">the docs</a> and find\na function that you didn’t know you needed, or a function that you needed,\nwrote, but didn’t benchmark quite as heavily as we did.</p>\n\n<p>If you’re already a savvy toolz user and want Cython speed then you’ll be\nhappy to know that the cytoolz library is a drop in replacement for toolz.</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>$ pip install cytoolz\n</code></pre></div></div>\n\n<figure class=\"highlight\">\n  <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"c1\"># from toolz import *\n</span><span class=\"kn\">from</span> <span class=\"nn\">cytoolz</span> <span class=\"kn\">import</span> <span class=\"o\">*</span></code></pre>\n</figure>\n\n<p>Most functions improve by 2x-5x with some fantastic exceptions.</p>\n\n<h2 id=\"links\">Links</h2>\n\n<ul>\n  <li><a href=\"http://docs.cython.org/\">Cython documentation</a></li>\n  <li><a href=\"https://github.com/cython/cython/wiki/FAQ\">Cython FAQ</a></li>\n  <li><a href=\"http://conference.scipy.org/scipy2013/tutorial_detail.php?id=105\">Cython tutorial from 2013 SciPy Conference</a>\n(resources <a href=\"http://public.enthought.com/~ksmith/scipy2013_cython/\">here</a>)</li>\n</ul>\n\n<p><strong>Related Blogposts</strong></p>\n\n<ul>\n  <li><a href=\"http://matthewrocklin.com/blog/work/2013/10/17/Introducing-PyToolz/\">Introducing PyToolz</a></li>\n  <li><a href=\"http://matthewrocklin.com/blog/work/2013/11/15/Functional-Wordcount/\">Verbosity</a></li>\n  <li><a href=\"http://matthewrocklin.com/blog/work/2014/01/13/Text-Benchmarks/\">Text Benchmarks</a></li>\n  <li><a href=\"http://matthewrocklin.com/blog/work/2014/05/01/Fast-Data-Structures/\">Fast Data Structures</a></li>\n</ul>"
}