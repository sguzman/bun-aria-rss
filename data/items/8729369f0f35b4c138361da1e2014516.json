{
  "title": "Finding Similar Music using Matrix Factorization",
  "link": "",
  "updated": "2016-05-03T00:00:00-07:00",
  "id": "http://www.benfrederickson.com/matrix-factorization/",
  "content": "\n        \n            <img src=\"http://www.benfrederickson.com/images/distancemetrics/mf.png\" width=\"100%\" style=\"max-width:500px\">\n        \n        <p>In a previous post I wrote about <a href=\"/distance-metrics/'\">how to build a ‘People Who\nLike This Also Like …’ feature</a> for displaying lists of similar musicians.\nMy goal was to show how simple Information Retrieval techniques can do a good job calculating lists \nof related artists. For instance, using BM25 distance on The Beatles shows the most\nsimilar artists being John Lennon and Paul McCartney.</p>\n\n<p>One interesting technique I didn’t cover was using Matrix Factorization methods\nto reduce the dimensionality of the data before calculating the related artists. This kind of analysis\ncan generate matches that are impossible to find with the techniques in my original post.</p>\n\n<p>This post is a step by step guide on how to calculate related artists using a couple of different\nmatrix factorization algorithms. The code is written in Python using\n<a href=\"http://pandas.pydata.org/\">Pandas</a>\nand <a href=\"https://www.scipy.org/\">SciPy</a> to do the calculations and <a href=\"https://d3js.org/\">D3.js</a> to interactively visualize the results.</p>\n\n<p>As part of writing this post, I also open sourced a <a href=\"http://github.com/benfred/implicit\">high performance python version of the Implicit Alternating Least\nSquares</a> matrix factorization algorithm. \nMost of the code here can be found in the examples directory of that project.</p>\n\n<p class='more'><a href='http://www.benfrederickson.com/matrix-factorization/'>Read more ...</a></p>\n     "
}