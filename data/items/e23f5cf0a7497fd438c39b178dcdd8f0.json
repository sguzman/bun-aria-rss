{
  "title": "Feather format update: Whence and Whither?",
  "link": "",
  "published": "2017-10-16T00:00:00-07:00",
  "updated": "2017-10-16T00:00:00-07:00",
  "author": {
    "name": "Wes McKinney"
  },
  "id": "tag:wesmckinney.com,2017-10-16:/blog/feather-arrow-future/",
  "summary": "<p>Earlier this year, development for the Feather file format moved to the Apache\nArrow codebase. I will explain how this has already affected Feather and what\nto expect from the project going forward.</p>",
  "content": "<p>Earlier this year, development for the Feather file format moved to the Apache\nArrow codebase. I will explain how this has already affected Feather and what\nto expect from the project going forward.</p>\n\n\n<h2>Feather: How's it related to Arrow?</h2>\n<p>Shortly after we announced the <a href=\"https://blogs.apache.org/foundation/entry/the_apache_software_foundation_announces87\">formation of Apache Arrow</a> in February 2016,\n<a href=\"https://hadley.nz/\">Hadley Wickham</a> and I met up and discussed how we could foster more\ncollaboration in the Python and R community around shared infrastructure for\ndata science. Hadley suggested (as I recall) the idea of a binary file format\nfor data frames that uses Arrow as the unifying technology.</p>\n<p>Since it seemed likely that the broader build out of the Arrow project would\ntake some time, we decided to create a minimalistic implementation of Arrow\nwith just enough <a href=\"https://wesmckinney.com/blog/feather-its-the-metadata/\">file metadata</a> to support the major Python and R data\ntypes. We released this as the <a href=\"https://blog.cloudera.com/blog/2016/03/feather-a-fast-on-disk-format-for-data-frames-for-r-and-python-powered-by-apache-arrow/\">Feather project</a>. The implementation was\noverall incredibly simple and has been very useful to data scientists that use\nboth Python and R.</p>\n<p>Some time after, in the Arrow project we designed more general streaming and\nbatch file formats that allow fast, zero-copy access of arbitrarily large\ntabular data sets.</p>\n<p>Compared with Arrow streams and files, Feather has some limitations:</p>\n<ul>\n<li>Supports limited scalar value types, adequate only for representing typical\n  data found in R and pandas</li>\n<li>Supports only a single batch of rows, where general Arrow streams support an\n  arbitrary number</li>\n<li>Only non-nested data types and categorical (dictionary-encoded) types are\n  supported</li>\n</ul>\n<p>So, Feather files are Arrow memory on disk (and thus support zero-copy access),\nbut have more limited metadata. There are some obvious other things we'd like\nto add to the Feather format:</p>\n<ul>\n<li>Column-wise compression (e.g. using LZ4 or ZSTD codecs)</li>\n<li>Chunked writes</li>\n<li>Ability to append to existing files</li>\n<li>Support for nested data</li>\n</ul>\n<p>One easy way to achieve these goals is to replace the Feather internals with\nthe more general Arrow stream formats. This isn't as much as it might seem, but\nwill require solving some logistical hurdles...</p>\n<h2>Moving the Feather format to the Arrow codebase</h2>\n<p>Earlier this year, I ported the Feather file implementation to fit in with the\nrest of the more general Arrow C++ in-memory data structures and memory\nmodel. Reading a Feather file column is a zero-copy operation that returns an\n<code>arrow::Column</code> C++ object. These C++ containers can then be converted to\n<code>pandas.DataFrame</code>, R <code>data.frame</code>, or whichever desired consumer of the data.</p>\n<p>Moving Feather development to the Arrow codebase has made the implementation\nsubstantially simpler, and Feather users immediately benefit from any\nperformance improvements or general Arrow-related development work. So Feather\nhas gotten faster and faster in Python this year as we've worked on enhancing\nthe bridge between pandas and Arrow this year.</p>\n<p>One problem with moving Feather to the Arrow codebase is that there are not yet\nR bindings available for the Arrow C++ libraries. As soon as we have R bindings\navailable for Arrow, I will be quite keen to get to work adding new Feather\nfeatures and transitioning Feather internally to reuse Arrow's stream format\nand metadata, making the implementation even simpler.</p>\n<h2>Performance improvements in Feather for Python users</h2>\n<p>I released Feather 0.4.0 on May 24 as a simple wrapper around\n<code>pyarrow.feather</code>. So this means that when <code>pyarrow</code> gets faster, so does\n<code>feather</code>. One of the primary benefits has been <a href=\"https://wesmckinney.com/blog/arrow-streaming-columnar/\">multithreaded\nconversions</a>. We have had multithreaded conversions from Arrow to pandas\nsince Arrow 0.2.0. I recently implemented multithreaded conversions from pandas\nto Arrow, and these will ship in Arrow 0.8.0.</p>\n<p>Let's take a look at read speeds in Feather 0.3.1 (which had a self-contained\nimplementation) compared with Feather 0.4.0 using Arrow 0.7.1. To do this, I\ngenerated a 512 MB DataFrame with floating point columns, write it to Feather,\nthen measure the performance for reading it completely back into memory. I\nvaried the number of columns in the DataFrame while keeping the total data size\nthe same. For some reason, Feather 0.3.1 is faster reading this dataset with 50\ncolumns than with 10 columns. You can look at the <a href=\"https://gist.github.com/wesm/5dd0d5e6577969f2d1cad35911d4865f\">complete notebook for the\nbenchmark</a>.</p>\n<p><strong>Perhaps amazingly, Feather 0.4.0 based on pyarrow 0.7.1 is much faster than\nFeather 0.3.1</strong>:</p>\n<p><center>\n<img src=\"../../images/feather_perf.png\"\n     alt=\"Feather 0.3.1 vs 0.4.0 performance\"\n     width=\"100%\"/>\n</center></p>\n<p>To put this performance concretely: on my laptop, Feather 0.3.1 can read a\n50-column DataFrame at about <strong>1.6 GB/s</strong> while Feather 0.4.0 (based on pyarrow\n0.7.1) can read at about <strong>2.9 GB/s</strong>, a reduction in runtime of <strong>over 40%</strong>.</p>\n<p>This improved performance is for multiple reasons:</p>\n<ul>\n<li>Multithreaded conversion from Arrow's bitmap-based null encoding to pandas's\n  <code>NaN</code>-based null encoding for doubles</li>\n<li>More precise and efficient creation of the pandas DataFrame internal data\n  structure</li>\n</ul>\n<h2>What to expect in the future</h2>\n<p>Until R bindings for Apache Arrow ship, it will be difficult to innovate on\nFeather's feature set, since the existing R <code>feather</code> library in CRAN is based\non the Feather 0.3.1 codebase from the <a href=\"https://github.com/wesm/feather\">wesm/feather</a> repository. Once that\nhappens, we should be able to make R's Feather read performance faster and more\nconsistent as we have with the Python implementation above.</p>\n<p>I'm excited to engage with the R community on this work and look forward to\ndelivering more Apache Arrow-based IO and computation tools to both the R and\nPython communities.</p>"
}