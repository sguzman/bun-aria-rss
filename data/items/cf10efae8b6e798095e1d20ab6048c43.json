{
  "id": "tag:blogger.com,1999:blog-9149402429183581490.post-6047131242088369324",
  "published": "2017-12-24T00:27:00.001-08:00",
  "updated": "2017-12-24T00:32:52.103-08:00",
  "title": "Notes on Setting up a Titan V under Ubuntu 17.04",
  "content": "I recently purchased a Titan V GPU to use for machine and deep learning, and in the process of installing the latest Nvidia driver's hosed my Ubuntu 16.04 install. I was overdue for a fresh install of Linux, anyway, so I decided to upgrade some of my drives at the same time. Here are some of my notes for the process I went through to get the Titan V working perfectly with TensorFlow 1.5 under Ubuntu 17.04.<br /><br />Old install:<br />Ubuntu 16.04<br />EVGA GeForce GTX Titan SuperClocked 6GB<br />2TB Seagate NAS HDD<br />+ additional drives<br /><br />New install:<br />Ubuntu 17.04<br />Titan V 12GB<br />/ partition on a 250GB Samsung 840 Pro SSD (had an extra around)<br />/home partition on a new 1TB Crucial MX500 SSD<br />New WD Blue 4TB HDD<br />+ additional drives<br /><br />You'll need to install Linux in legacy mode, not UEFI, in order to use Nvidia's proprietary drivers for the Titan V. Note that Linux will cheerfully boot in UEFI mode, but will not load any proprietary drivers (including Nvidia's). You'll need proprietary drivers for TensorFlow.<br /><br />You may also need to disable fast boot.<br /><br />Keep a wired mouse handy, as your wireless mouse may decide to stop working until Linux is installed and updated. This occurred with my Logitech MX Master.<br /><br />Create an Ubuntu 17.04 live install USB - <a href=\"https://help.ubuntu.com/community/Installation/FromUSBStick\">https://help.ubuntu.com/community/Installation/FromUSBStick</a><br /><br />Boot from your live Ubuntu USB with the BIOS in legacy mode.<br /><br />I selected the Samsung 850 Pro as my / and the Crucial MX500 as /home. You'll need to \"create\" and \"add\" if they're unformatted.<br /><br />Allow 3rd party/proprietary drivers.<br /><br />Install!<br /><br />Reboot, login to default Ubuntu (logging in to Unity may hang; it did on my system). The Titan V is not configured yet.<br /><br />Update Ubuntu:<br />sudo apt-get update<br />sudo apt-get upgrade<br /><br />I recommend installing the latest kernel.<br />apt-get install linux-generic linux-headers-generic linux-image-generic<br /><br />I recommend installing the KDE/Plasma desktop, as I could not get the Unity desktop to work.<br />apt-get install plasma-desktop dolphin konsole<br /><br />Download and install Nvidia's 387.34_1.0-1 driver - <a href=\"http://www.nvidia.com/download/driverResults.aspx/128019/en-us\">http://www.nvidia.com/download/driverResults.aspx/128019/en-us</a><br />sudo dpkg -i nvidia-driver-local-repo-ubuntu1704-387.34_1.0-1_amd64.deb<br /><br />The Titan V is still not configured, but should be after the next step.<br /><br />Download and install CUDA 9.0 - <a href=\"https://developer.nvidia.com/cuda-90-download-archive?target_os=Linux&amp;target_arch=x86_64&amp;target_distro=Ubuntu&amp;target_version=1704&amp;target_type=deblocal\">https://developer.nvidia.com/cuda-90-download-archive?target_os=Linux&amp;target_arch=x86_64&amp;target_distro=Ubuntu&amp;target_version=1704&amp;target_type=deblocal</a><br />sudo dpkg -i uda-repo-ubuntu1704-9-0-local_9.0.176-1_amd64.deb<br />apt-get install cuda-9-0<br /><br />Add the following two lines to your .bash_profile:<br /><br />export LD_LIBRARY_PATH=\"$LD_LIBRARY_PATH:/usr/local/cuda/lib64:/usr/local/cuda/extras/CUPTI/lib64\"<br />export CUDA_HOME=/usr/local/cuda<br /><br />Reboot; the Titan V should be working and configured.<br /><br />I recommend installing git.<br /><br />apt-get install git<br /><br />You'll need to install pip for Python for TensorFlow.<br /><br />apt-get install python-pip (for Python 2)<br />apt-get install python3-pip (for Python 3)<br /><br />We'll need cuDNN for TensorFlow.<br /><br />Download cuDNN v7.0.5 (Dec 5, 2017), for CUDA 9.0<br /><br />You'll need to create a (free) Nvidia developer account.<br /><br /><a href=\"https://developer.nvidia.com/rdp/cudnn-download\">https://developer.nvidia.com/rdp/cudnn-download</a><br /><br />This is how I installed cuDNN.<br />tar xzf cudnn-9.0-linux-x64-v7.tgz<br />cd cuda<br />sudo cp NVIDIA_SLA_cuDNN_Support.txt /usr/local/cuda-9.0<br />sudo cp include/cudnn.h /usr/local/cuda-9.0/targets/x86_64-linux/include<br />sudo cp lib64/libcudnn_static.a /usr/local/cuda-9.0/targets/x86_64-linux/lib<br />sudo cp lib64/libcudnn.so.7.0.5 /usr/local/cuda-9.0/targets/x86_64-linux/lib<br />cd /usr/local/cuda-9.0/targets/x86_64-linux/lib<br />sudo ln -s libcudnn.so.7.0.5 libcudnn.so.7<br />sudo ln -s libcudnn.so.7 libcudnn.so<br />cd<br /><br />Let's install TensorFlow! We'll want the nightly.<br /><br />sudo -H pip install tf-nightly-gpu (Python 2)<br />sudo -H pip3 install tf-nightly-gpu (Python 3)<br /><br />TensorFlow should now be working!<br /><br />$ python (or python3)<br />...<br />&gt;&gt;&gt; import tensorflow as tf<br />&gt;&gt;&gt; hello = tf.constant('Hello, TensorFlow!')<br />&gt;&gt;&gt; sess = tf.Session()<br />&gt;&gt;&gt; print(sess.run(hello))<br />Hello, TensorFlow!<br />&gt;&gt;&gt; a = tf.constant(10)<br />&gt;&gt;&gt; b = tf.constant(32)<br />&gt;&gt;&gt; print(sess.run(a + b))<br />42<br />&gt;&gt;&gt;<br /><br />See also - <a href=\"https://www.tensorflow.org/versions/r0.12/get_started/os_setup\">https://www.tensorflow.org/versions/r0.12/get_started/os_setup</a><br /><br />If you also want to install the latest Julia.<br />git clone https://github.com/JuliaLang/julia<br />cd julia<br />sudo apt-get install m4 cmake gfortran clang libopenblas-base libopenblas-dev<br />make -j 4<br /><br />Enjoy!",
  "link": [
    "",
    "",
    "",
    "",
    ""
  ],
  "author": {
    "name": "Christopher D. Long",
    "uri": "http://www.blogger.com/profile/13687149457345266350",
    "email": "noreply@blogger.com",
    "gd:image": ""
  },
  "thr:total": 0
}