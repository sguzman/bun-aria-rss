{
  "title": "Towards Out-of-core ND-Arrays -- Frontend",
  "link": "",
  "updated": "2014-12-30T00:00:00+00:00",
  "id": "https://mrocklin.github.io/blog/work/2014/12/30/Towards-OOC-Frontend",
  "content": "<p><em>This work is supported by <a href=\"http://continuum.io\">Continuum Analytics</a>\nand the <a href=\"http://www.darpa.mil/program/XDATA\">XDATA Program</a>\nas part of the <a href=\"http://blaze.pydata.org\">Blaze Project</a></em></p>\n\n<p><strong>tl;dr</strong> Blaze adds usability to our last post on out-of-core ND-Arrays</p>\n\n<p><em>Disclaimer: This post is on experimental buggy code.  This is not ready for public\nuse.</em></p>\n\n<h2 id=\"setup\">Setup</h2>\n\n<p>This follows my <a href=\"http://matthewrocklin.com/blog/work/2014/12/27/Towards-OOC/\">last\npost</a> designing a simple\ntask scheduler for use with out-of-core (or distributed) nd-arrays.  We\nencoded tasks-with-data-dependencies as simple dictionaries.  We then\nbuilt functions to create dictionaries that describe blocked array operations.\nWe found that this was an effective-but-unfriendly way to solve some\nimportant-but-cumbersome problems.</p>\n\n<p>This post sugars the programming experience with <code class=\"language-plaintext highlighter-rouge\">blaze</code> and <code class=\"language-plaintext highlighter-rouge\">into</code> to give a\nnumpy-like experience out-of-core.</p>\n\n<h2 id=\"old-low-level-code\">Old low-level code</h2>\n\n<p>Here is the code we wrote for an\nout-of-core transpose/dot-product (actually a symmetric rank-k update).</p>\n\n<h3 id=\"create-random-array-on-disk\">Create random array on disk</h3>\n\n<figure class=\"highlight\">\n  <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"kn\">import</span> <span class=\"nn\">bcolz</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"n\">np</span>\n<span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">bcolz</span><span class=\"p\">.</span><span class=\"n\">carray</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"p\">.</span><span class=\"n\">empty</span><span class=\"p\">(</span><span class=\"n\">shape</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1000</span><span class=\"p\">),</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"s\">'f8'</span><span class=\"p\">),</span>\n                 <span class=\"n\">rootdir</span><span class=\"o\">=</span><span class=\"s\">'A.bcolz'</span><span class=\"p\">,</span> <span class=\"n\">chunklen</span><span class=\"o\">=</span><span class=\"mi\">1000</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1000</span><span class=\"p\">):</span>\n    <span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"p\">.</span><span class=\"n\">random</span><span class=\"p\">.</span><span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"mi\">1000</span><span class=\"p\">,</span> <span class=\"mi\">1000</span><span class=\"p\">))</span>\n<span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">flush</span><span class=\"p\">()</span></code></pre>\n</figure>\n\n<h3 id=\"define-computation-at--a\">Define computation <code class=\"language-plaintext highlighter-rouge\">A.T * A</code></h3>\n\n<figure class=\"highlight\">\n  <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s\">'A'</span><span class=\"p\">:</span> <span class=\"n\">b</span><span class=\"p\">}</span>\n<span class=\"n\">d</span><span class=\"p\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">getem</span><span class=\"p\">(</span><span class=\"s\">'A'</span><span class=\"p\">,</span> <span class=\"n\">blocksize</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1000</span><span class=\"p\">,</span> <span class=\"mi\">1000</span><span class=\"p\">),</span> <span class=\"n\">shape</span><span class=\"o\">=</span><span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">shape</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># Add A.T into the mix\n</span><span class=\"n\">d</span><span class=\"p\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">top</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"p\">.</span><span class=\"n\">transpose</span><span class=\"p\">,</span> <span class=\"s\">'At'</span><span class=\"p\">,</span> <span class=\"s\">'ij'</span><span class=\"p\">,</span> <span class=\"s\">'A'</span><span class=\"p\">,</span> <span class=\"s\">'ji'</span><span class=\"p\">,</span> <span class=\"n\">numblocks</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s\">'A'</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"mi\">1000</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)}))</span>\n\n<span class=\"c1\"># Dot product A.T * A\n</span><span class=\"n\">d</span><span class=\"p\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">top</span><span class=\"p\">(</span><span class=\"n\">dotmany</span><span class=\"p\">,</span> <span class=\"s\">'AtA'</span><span class=\"p\">,</span> <span class=\"s\">'ik'</span><span class=\"p\">,</span> <span class=\"s\">'At'</span><span class=\"p\">,</span> <span class=\"s\">'ij'</span><span class=\"p\">,</span> <span class=\"s\">'A'</span><span class=\"p\">,</span> <span class=\"s\">'jk'</span><span class=\"p\">,</span>\n         <span class=\"n\">numblocks</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s\">'A'</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"mi\">1000</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"s\">'At'</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1000</span><span class=\"p\">)}))</span></code></pre>\n</figure>\n\n<h2 id=\"new-pleasant-feeling-code-with-blaze\">New pleasant feeling code with Blaze</h2>\n\n<h3 id=\"targetting-users\">Targetting users</h3>\n\n<p>The last section “Define computation” is written in a style that is great for\nlibrary writers and automated systems but is challenging to users\naccustomed to Matlab/NumPy or R/Pandas style.</p>\n\n<p>We wrap this process with Blaze, an extensible front-end for analytic\ncomputations</p>\n\n<h3 id=\"redefine-computation-at--a-with-blaze\">Redefine computation <code class=\"language-plaintext highlighter-rouge\">A.T * A</code> with Blaze</h3>\n\n<figure class=\"highlight\">\n  <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"kn\">from</span> <span class=\"nn\">dask.obj</span> <span class=\"kn\">import</span> <span class=\"n\">Array</span>  <span class=\"c1\"># a proxy object holding on to a dask dict\n</span><span class=\"kn\">from</span> <span class=\"nn\">blaze</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"c1\"># Load data into dask dictionaries\n</span><span class=\"n\">dA</span> <span class=\"o\">=</span> <span class=\"n\">into</span><span class=\"p\">(</span><span class=\"n\">Array</span><span class=\"p\">,</span> <span class=\"s\">'A.bcolz'</span><span class=\"p\">,</span> <span class=\"n\">blockshape</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1000</span><span class=\"p\">,</span> <span class=\"mi\">1000</span><span class=\"p\">))</span>\n<span class=\"n\">A</span> <span class=\"o\">=</span> <span class=\"n\">Data</span><span class=\"p\">(</span><span class=\"n\">dA</span><span class=\"p\">)</span>  <span class=\"c1\"># Wrap with blaze.Data\n</span>\n<span class=\"c1\"># Describe computation in friendly numpy style\n</span><span class=\"n\">expr</span> <span class=\"o\">=</span> <span class=\"n\">A</span><span class=\"p\">.</span><span class=\"n\">T</span><span class=\"p\">.</span><span class=\"n\">dot</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Compute results\n</span><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"o\">%</span><span class=\"n\">time</span> <span class=\"n\">compute</span><span class=\"p\">(</span><span class=\"n\">expr</span><span class=\"p\">)</span>\n<span class=\"n\">CPU</span> <span class=\"n\">times</span><span class=\"p\">:</span> <span class=\"n\">user</span> <span class=\"mi\">2</span><span class=\"nb\">min</span> <span class=\"mi\">57</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">sys</span><span class=\"p\">:</span> <span class=\"mf\">6.4</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">total</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"nb\">min</span> <span class=\"mi\">3</span><span class=\"n\">s</span>\n<span class=\"n\">Wall</span> <span class=\"n\">time</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"nb\">min</span> <span class=\"mi\">50</span><span class=\"n\">s</span>\n<span class=\"n\">array</span><span class=\"p\">([[</span> <span class=\"mf\">334071.93541158</span><span class=\"p\">,</span>  <span class=\"mf\">250297.16968262</span><span class=\"p\">,</span>  <span class=\"mf\">250404.87729587</span><span class=\"p\">,</span> <span class=\"p\">...,</span>\n         <span class=\"mf\">250436.85274716</span><span class=\"p\">,</span>  <span class=\"mf\">250330.64262904</span><span class=\"p\">,</span>  <span class=\"mf\">250590.98832611</span><span class=\"p\">],</span>\n       <span class=\"p\">[</span> <span class=\"mf\">250297.16968262</span><span class=\"p\">,</span>  <span class=\"mf\">333451.72293343</span><span class=\"p\">,</span>  <span class=\"mf\">249978.2751824</span> <span class=\"p\">,</span> <span class=\"p\">...,</span>\n         <span class=\"mf\">250103.20601281</span><span class=\"p\">,</span>  <span class=\"mf\">250014.96660956</span><span class=\"p\">,</span>  <span class=\"mf\">250251.0146828</span> <span class=\"p\">],</span>\n       <span class=\"p\">[</span> <span class=\"mf\">250404.87729587</span><span class=\"p\">,</span>  <span class=\"mf\">249978.2751824</span> <span class=\"p\">,</span>  <span class=\"mf\">333279.76376277</span><span class=\"p\">,</span> <span class=\"p\">...,</span>\n         <span class=\"mf\">249961.44796719</span><span class=\"p\">,</span>  <span class=\"mf\">250061.8068036</span> <span class=\"p\">,</span>  <span class=\"mf\">250125.80971858</span><span class=\"p\">],</span>\n       <span class=\"p\">...,</span>\n       <span class=\"p\">[</span> <span class=\"mf\">250436.85274716</span><span class=\"p\">,</span>  <span class=\"mf\">250103.20601281</span><span class=\"p\">,</span>  <span class=\"mf\">249961.44796719</span><span class=\"p\">,</span> <span class=\"p\">...,</span>\n         <span class=\"mf\">333444.797894</span>  <span class=\"p\">,</span>  <span class=\"mf\">250021.78528189</span><span class=\"p\">,</span>  <span class=\"mf\">250147.12015207</span><span class=\"p\">],</span>\n       <span class=\"p\">[</span> <span class=\"mf\">250330.64262904</span><span class=\"p\">,</span>  <span class=\"mf\">250014.96660956</span><span class=\"p\">,</span>  <span class=\"mf\">250061.8068036</span> <span class=\"p\">,</span> <span class=\"p\">...,</span>\n         <span class=\"mf\">250021.78528189</span><span class=\"p\">,</span>  <span class=\"mf\">333240.10323875</span><span class=\"p\">,</span>  <span class=\"mf\">250307.86236815</span><span class=\"p\">],</span>\n       <span class=\"p\">[</span> <span class=\"mf\">250590.98832611</span><span class=\"p\">,</span>  <span class=\"mf\">250251.0146828</span> <span class=\"p\">,</span>  <span class=\"mf\">250125.80971858</span><span class=\"p\">,</span> <span class=\"p\">...,</span>\n         <span class=\"mf\">250147.12015207</span><span class=\"p\">,</span>  <span class=\"mf\">250307.86236815</span><span class=\"p\">,</span>  <span class=\"mf\">333467.87105673</span><span class=\"p\">]])</span></code></pre>\n</figure>\n\n<h3 id=\"under-the-hood\">Under the hood</h3>\n\n<p>Under the hood, Blaze creates the same dask dicts we created by hand last time.\nI’ve doctored the result rendered here to include suggestive names.</p>\n\n<figure class=\"highlight\">\n  <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">compute</span><span class=\"p\">(</span><span class=\"n\">expr</span><span class=\"p\">,</span> <span class=\"n\">post_compute</span><span class=\"o\">=</span><span class=\"bp\">False</span><span class=\"p\">).</span><span class=\"n\">dask</span>\n<span class=\"p\">{(</span><span class=\"s\">'A'</span><span class=\"p\">:</span> <span class=\"n\">carray</span><span class=\"p\">((</span><span class=\"mi\">10000000</span><span class=\"p\">,</span> <span class=\"mi\">1000</span><span class=\"p\">),</span> <span class=\"n\">float64</span><span class=\"p\">),</span> <span class=\"p\">...</span>\n <span class=\"p\">...</span>\n <span class=\"p\">(</span><span class=\"s\">'A'</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">):</span> <span class=\"p\">(</span><span class=\"n\">ndget</span><span class=\"p\">,</span> <span class=\"s\">'A'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mi\">1000</span><span class=\"p\">,</span> <span class=\"mi\">1000</span><span class=\"p\">),</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span>\n <span class=\"p\">(</span><span class=\"s\">'A'</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">):</span> <span class=\"p\">(</span><span class=\"n\">ndget</span><span class=\"p\">,</span> <span class=\"s\">'A'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mi\">1000</span><span class=\"p\">,</span> <span class=\"mi\">1000</span><span class=\"p\">),</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span>\n <span class=\"p\">...</span>\n <span class=\"p\">(</span><span class=\"s\">'At'</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">):</span> <span class=\"p\">(</span><span class=\"n\">np</span><span class=\"p\">.</span><span class=\"n\">transpose</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"s\">'A'</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)),</span>\n <span class=\"p\">(</span><span class=\"s\">'At'</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">):</span> <span class=\"p\">(</span><span class=\"n\">np</span><span class=\"p\">.</span><span class=\"n\">transpose</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"s\">'A'</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)),</span>\n <span class=\"p\">...</span>\n <span class=\"p\">(</span><span class=\"s\">'AtA'</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">):</span> <span class=\"p\">(</span><span class=\"n\">dotmany</span><span class=\"p\">,</span> <span class=\"p\">[(</span><span class=\"s\">'At'</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">'At'</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">'At'</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"p\">...],</span>\n                          <span class=\"p\">[(</span><span class=\"s\">'A'</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span>  <span class=\"p\">(</span><span class=\"s\">'A'</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span>  <span class=\"p\">(</span><span class=\"s\">'A'</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"p\">...])</span>\n<span class=\"p\">}</span></code></pre>\n</figure>\n\n<p>We then compute this sequentially on a single core.  However we could have\npassed this on to a distributed system.  This result contains all necessary\ninformation to go from on-disk arrays to computed result in whatever manner you\nchoose.</p>\n\n<h2 id=\"separating-backend-from-frontend\">Separating Backend from Frontend</h2>\n\n<p>Recall that Blaze is an extensible front-end to data analytics technologies.\nIt lets us wrap messy computational APIs with a pleasant and familiar\nuser-centric API.  Extending Blaze to dask dicts was the straightforward work\nof an afternoon.  This separation allows us to continue to build out\ndask-oriented solutions without worrying about user-interface.  By separating\nbackend work from frontend work we allow both sides to be cleaner and to\nprogress more swiftly.</p>\n\n<h2 id=\"future-work\">Future work</h2>\n\n<p>I’m on vacation right now.  Work for recent posts has been done in evenings\nwhile watching TV with the family.  It isn’t particularly robust.  Still, it’s\nexciting how effective this approach has been with relatively little effort.</p>\n\n<p>Perhaps now would be a good time to mention that Continuum has ample grant\nfunding.  We’re looking for people who want to create usable large-scale data\nanalytics tools.  For what it’s worth, I quit my academic postdoc to work on\nthis and couldn’t be happier with the switch.</p>\n\n<h2 id=\"source\">Source</h2>\n\n<p>This code is experimental and buggy.  I don’t expect it to stay around for\nforever in it’s current form (it’ll improve).  Still, if you’re reading this\nwhen it comes out then you might want to check out the following:</p>\n\n<ol>\n  <li><a href=\"https://github.com/mrocklin/dask\">master branch on dask</a></li>\n  <li><a href=\"https://github.com/mrocklin/blaze/tree/array-expr\">array-expr branch on my blaze fork</a></li>\n</ol>"
}