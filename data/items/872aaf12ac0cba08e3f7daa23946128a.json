{
  "title": "Recommender System With Implicit Feedback",
  "link": "http://ramok.tech/2017/11/18/recommender-system-with-implicit-feedback/",
  "dc:creator": "Klevis Ramo",
  "pubDate": "Sat, 18 Nov 2017 19:46:09 +0000",
  "category": [
    "Machine Learning",
    "Recommender System",
    "apache spark",
    "collaboration filtering",
    "implicit feedback",
    "java implicit feedback recommender application",
    "java machine learning",
    "java recommender system",
    "machine learning",
    "online retail",
    "recommender system",
    "spark",
    "spark mlib"
  ],
  "guid": "http://ramok.tech/?p=1002",
  "description": "In this post we are going to develop a java recommender application with implicit feedback for an Online Retail. In previous post we developed two java recommender application one for books and one for movies . What is new in this post is that we do not have the luxury of explicit feedback like ratings but rather implicit &#8230; <a href=\"http://ramok.tech/2017/11/18/recommender-system-with-implicit-feedback/\" class=\"more-link\">Continue reading<span class=\"screen-reader-text\"> \"Recommender System With Implicit Feedback\"</span></a>",
  "content:encoded": "<p>In this post we are going to develop a java recommender application with implicit feedback for an Online Retail. In previous post we developed two java recommender application one for <a href=\"http://ramok.tech/2017/11/05/when-traditional-programming-meets-machine-learning/\">books </a>and one for <a href=\"http://ramok.tech/2017/10/30/recommender-system/\">movies</a> . What is new in this post is that we do not have the luxury of explicit feedback like ratings but rather implicit feedback like for example clicks, time stayed , view times and so on&#8230; This is a very common situation when usually the amount of implicit feedback outweighs the amount of explicit feedback(personally guilty on my Amazon purchases).</p>\n<p>Please feel free to explore <a href=\"https://github.com/klevis/onlineRetailRecommender\">source code</a> and <a href=\"https://drive.google.com/open?id=1ywS83fLHYgWjg5Q7smqAOb7tm5Qa9UqC\">application</a>(feel free to find at the end some instructions and preview).</p>\n<h2>Nature of Implicit Feedback</h2>\n<p>As online retail business is growing by having large inventory items, unfolds the challenge of suggesting the user only what it will be most interesting and useful from selling perspective. According to this <a href=\"http://fortune.com/2012/07/30/amazons-recommendation-secret/\">article </a> Amazon experienced an increase with 29% from helpful suggestions so their impact in business maybe considerable. In same time another <a href=\"http://www.datacommunitydc.org/blog/2013/05/recommendation-engines-why-you-shouldnt-build-one\">article </a> suggests that although recommender systems can be very useful we need significant data and knowledge about our users in order to have good results.</p>\n<p>Most of the times we are faced with very few Explicit Feedback(<strong>EF</strong>) like ratings or likes but fortunately on the other hand we have user activities like clicks,view, time spent , buying history. Implicit feedback in contrast to EF doesn&#8217;t offer direct preferences clarity. A rating scale from 1-5 can give a very clear feedback how a much a user prefers certain genre of movie or book. On the other hand the fact that a user bought or viewed a book does not necessary mean that the user liked it(maybe is a gift). Also the same is true when user hasn&#8217;t clicked or seen a movie doesn&#8217;t mean he doesn&#8217;t like it.</p>\n<p>Although implicit feedback introduces some uncertainty most of the times provides useful insight. For example a user that bought a book from an author several times probably prefers that author books. Or if a user stayed long time reading an item review or description or even clicked and return several times than probably this item category is of interest and attracts him for the moment.</p>\n<p>Regardless of the situation is obvious that an implicit feedback system <em>offers a level of confidence on user preferences</em> in contrast with EF which offers <em>the preferences itself</em>.</p>\n<p>EF systems offer both positive and negative feedback on a specific scale like ratings 1-5. As consequence when <a href=\"http://ramok.tech/2017/11/05/when-traditional-programming-meets-machine-learning/\">implemented</a> EF systems will take in consideration only data that user rated and ignore not known data. This help the algorithm to scale good and in same time perform well. While with implicit feedback we have no negative feedback but only positive feedback like user activity clicks, purchase history. Therefore we cannot simply ignore zero activity items as they may be of great interest to the user.This leads to algorithm processing large data and not scale good when the input increases. Fortunately this <a href=\"http://yifanhu.net/PUB/cf.pdf\">paper </a>suggest an optimization which speeds up the processing time.</p>\n<p>So in a few words we need a modification to our previous method using EF in order to address :</p>\n<ul>\n<li>Confidence in a Preference instead of Preference</li>\n<li>Scalability when zero cases are considered</li>\n</ul>\n<h2>Collaborative Filtering for Implicit Feedback</h2>\n<p>This section is a short humble explanation of the paper  <a href=\"http://yifanhu.net/PUB/cf.pdf\">Collaborative Filtering for Implicit Feedback Datasets</a> <em>by Hu, Koren, and Volinsky</em> which gives the model and solution for this problem. It is worth to mention that also <a href=\"https://spark.apache.org/docs/2.2.0/mllib-collaborative-filtering.html#explicit-vs-implicit-feedback\">Apache Spark MLib</a> uses this paper as reference for the implementation of Collaborative Filtering algorithm.</p>\n<h3>Explicit Feedback(EF)</h3>\n<p>Recalling from previous post the cost function looked as below(here we are following paper semantics):</p>\n<p><img decoding=\"async\" loading=\"lazy\" class=\"alignnone size-full wp-image-1149\" src=\"https://i0.wp.com/ramok.tech/wp-content/uploads/2017/11/cost2.jpg?resize=650%2C115\" alt=\"cost2\" width=\"650\" height=\"115\" srcset=\"https://i0.wp.com/ramok.tech/wp-content/uploads/2017/11/cost2.jpg?w=650 650w, https://i0.wp.com/ramok.tech/wp-content/uploads/2017/11/cost2.jpg?resize=300%2C53 300w\" sizes=\"(max-width: 709px) 85vw, (max-width: 909px) 67vw, (max-width: 984px) 61vw, (max-width: 1362px) 45vw, 600px\" data-recalc-dims=\"1\" /></p>\n<ul>\n<li style=\"text-align: left;\"><strong>X</strong> denotes the user and <strong>X</strong><sup><strong>u</strong> </sup>is representing preferences weights for user <strong>u.</strong>For example if a user likes action and horror movies  we have big weight  for this genres otherwise if he doesn&#8217;t like romance we have low or zero weight for this genre.</li>\n<li style=\"text-align: left;\">Similarly <strong>Y</strong> denotes items and <strong>Y<sup>i </sup></strong>is representing features weight for item <strong><em>i</em></strong>.For example a movie can be 40% action, 20% horror, 10% romance, 30% Sc-Fi.</li>\n<li style=\"text-align: left;\"><strong>r </strong>denotes to<span style=\"font-size: 12pt;\"><span style=\"font-size: 12pt;\"> actual given ratings and </span><strong style=\"font-size: 12pt;\">r</strong><sup style=\"font-size: 12pt;\"><strong>ui</strong> </sup><span style=\"font-size: 12pt;\">is rating from user </span><strong style=\"font-size: 12pt;\">u</strong><span style=\"font-size: 12pt;\"> on item </span><strong style=\"font-size: 12pt;\">i</strong><span style=\"font-size: 12pt;\">. </span>Intuitively we can see that multiplying <strong>X<sup>u</sup><sub>T</sub>y<sup>i</sup></strong><span style=\"font-size: 12pt;\"> gives rating prediction for <strong>user u on item i. </strong>For example<strong> </strong>If we know that a user likes action and horror movies and a movie is 0.6 action and 0.3 horror than this user will probably prefer it.</span></span></li>\n<li>Ignoring the second term for a moment we can see that what the function is doing is just calculating the difference of actual rates with prediction rates(squared just to have absolute values).So basically is just calculating how well our predictions are doing in comparing to actual ratings.Ideally we want the difference to be zero or as small as possible.</li>\n<li>Since this is the cost function for EF it is applied only to known rates and ignoring what items are not rated by any user.</li>\n<li>The other term on the left is it is used for preventing over fitting of the data. Although the algorithm works without it, it is important in real world because acts as regularizing factor. We control the impact by providing different values of λ.</li>\n<li>In the end we use this cost function in <a href=\"http://ramok.tech/2017/10/30/recommender-system/#Minimize_Cost_Function\">Logistic Regression</a> algorithm to minimized in such way that difference between rates and prediction to be zero or as small as possible. Please find <a href=\"http://ramok.tech/2017/10/30/recommender-system/#Minimize_Cost_Function\">here </a>an more detailed explanation from previous <a href=\"http://ramok.tech/2017/10/30/recommender-system/\">post</a>.</li>\n</ul>\n<h3>Implicit Feedback(IF)</h3>\n<p>In this section we are going to modify above equation to adapt to IF problem. First we start by defining the preference <strong><em>p<sup>ui</sup></em></strong> of user <strong>u</strong> on item <em>i</em>:</p>\n<p><img decoding=\"async\" loading=\"lazy\" class=\"aligncenter size-full wp-image-1164\" src=\"https://i0.wp.com/ramok.tech/wp-content/uploads/2017/11/preference.jpg?resize=325%2C108\" alt=\"\" width=\"325\" height=\"108\" srcset=\"https://i0.wp.com/ramok.tech/wp-content/uploads/2017/11/preference.jpg?w=325 325w, https://i0.wp.com/ramok.tech/wp-content/uploads/2017/11/preference.jpg?resize=300%2C100 300w\" sizes=\"(max-width: 325px) 85vw, 325px\" data-recalc-dims=\"1\" /></p>\n<ul>\n<li>For IF <strong><em>r<sup>ui </sup></em></strong>represent user&#8217;s <strong>u </strong>interaction on item <em><strong>i </strong></em>in contract to EF which was rather the rating/direct preference on a specific scale.</li>\n<li>As we can see <strong><em>p<sup>ui </sup></em></strong>is simply zero when we user <strong>u </strong>did not interact with item <strong>i </strong>and 1 if user <strong>u </strong>interacted at least once with item <strong>i</strong>.</li>\n<li>As we mention above IF is characterized by certain uncertainty as it offers a confidence level on user preference in an item in contrast with EF offering user preference in an item. Anyway if the interaction of a user on an item increases also our confidence that the user may liked should also increase.So this brings us to below simple formula: <img decoding=\"async\" loading=\"lazy\" class=\"aligncenter size-full wp-image-1167\" src=\"https://i0.wp.com/ramok.tech/wp-content/uploads/2017/11/cui.jpg?resize=222%2C65\" alt=\"\" width=\"222\" height=\"65\" data-recalc-dims=\"1\" /><em><strong>c<sup>ui </sup></strong></em>is now the confidence and as we can see it increases linearly with the increase of <em><strong>user u interaction on item i r<sup>ui </sup></strong><sup>.</sup></em> <strong>α</strong> is a rate that controls the increase of confidence when interaction is increased, paper suggest 40 as a good value.</li>\n<li>Now we just need to do a small modification to above formula and put everything together as below:<img decoding=\"async\" loading=\"lazy\" class=\"aligncenter size-full wp-image-1169\" src=\"https://i0.wp.com/ramok.tech/wp-content/uploads/2017/11/eq.jpg?resize=737%2C125\" alt=\"\" width=\"737\" height=\"125\" srcset=\"https://i0.wp.com/ramok.tech/wp-content/uploads/2017/11/eq.jpg?w=737 737w, https://i0.wp.com/ramok.tech/wp-content/uploads/2017/11/eq.jpg?resize=300%2C51 300w\" sizes=\"(max-width: 709px) 85vw, (max-width: 909px) 67vw, (max-width: 984px) 61vw, (max-width: 1362px) 45vw, 600px\" data-recalc-dims=\"1\" />If we compare with first equation the only difference are:\n<ul>\n<li>Instead of <em><strong>r<sup>ui </sup></strong></em>know we have <em><strong>p</strong></em><em><strong><sup>ui </sup></strong></em>which is a binary variable, outputting 1 if there is an interaction and zero if no interaction.</li>\n<li>First term is now multiplying by confidence of user <em>u </em>on item <em>i</em> <em><strong>c<sup>ui.  </sup></strong></em>As we know the first term is just measuring how well the prediction is doing comparing to actual values(ideally difference zero so we predicted what is was the real value).Lets suppose our prediction is not doing well and the difference is big like <strong>10</strong>.Now by multiplying with confidence(which is high for big interaction ans small otherwise) we just dramatically increase the mistake if we have confidence on preference and slightly increase if we do not have that much confidence. By exaggerating the mistake or penalizing the cost function we give the signal that this prediction is important so <a href=\"http://ramok.tech/2017/10/30/recommender-system/#Minimize_Cost_Function\">Logistic Regression</a> hast to work more on minimizing this value.</li>\n</ul>\n</li>\n</ul>\n<p>In a few words the modification is about giving more weight to preference that we have high confidence by increasing the cost of a prediction mistake. So <a href=\"http://ramok.tech/2017/10/30/recommender-system/#Minimize_Cost_Function\">Logistic Regression</a> will have to minimize especially those preferences if it want to ever converge which it will no matter what as it is a convex function.</p>\n<h2>Data</h2>\n<p>The online retail data used for the building the algorithm and application can be found <a href=\"http://archive.ics.uci.edu/ml/datasets/Online+Retail\">here</a>. There are <strong>541.910</strong> rows containing customer and product related data.</p>\n<p>What will be used as user u interaction on item i <strong>r<sup>ui </sup></strong>is users purchase history on items. So if a user has a history buying a lot of some items type we will tend to think he likes similar items and may want to buy again. On the other hand if user buys something it doesn&#8217;t mean he necessarily likes it, after all it may be a gift or user was not satisfied with product. This uncertainty that buying history offers makes it good choice for our interaction source. The data will look like below:<img decoding=\"async\" loading=\"lazy\" class=\"aligncenter wp-image-1178 zoooom\" src=\"https://i0.wp.com/ramok.tech/wp-content/uploads/2017/11/data.jpg?resize=840%2C233\" alt=\"\" width=\"840\" height=\"233\" srcset=\"https://i0.wp.com/ramok.tech/wp-content/uploads/2017/11/data.jpg?w=1091 1091w, https://i0.wp.com/ramok.tech/wp-content/uploads/2017/11/data.jpg?resize=300%2C83 300w, https://i0.wp.com/ramok.tech/wp-content/uploads/2017/11/data.jpg?resize=768%2C213 768w, https://i0.wp.com/ramok.tech/wp-content/uploads/2017/11/data.jpg?resize=1024%2C283 1024w\" sizes=\"(max-width: 709px) 85vw, (max-width: 909px) 67vw, (max-width: 1362px) 62vw, 840px\" data-recalc-dims=\"1\" /></p>\n<p>Data need to be pre-processed and prepared because there are some mistakes here and there and in same time Spark MLib accepts only Integers has productId and userId.</p>\n<h2>Evaluation</h2>\n<p>Similar to what is described on <a href=\"http://ramok.tech/2017/08/26/anomaly-detection-using-octave/#Data_Preparation\">previous post</a>  we are dividing the data into two groups(previous was divided on three : training data, cross validation, test data) <span style=\"text-decoration: underline;\">training data and test data</span>.</p>\n<p>Training Data are randomly chosen as 80% from all data set and test data the other randomly 20%. As always training data are used for training the algorithm while test data are used to see how the algorithm performs with non seen data.</p>\n<p>As method to evaluate we compare the prediction and the real values using the RMSE method described <a href=\"https://medium.com/human-in-a-machine-world/mae-and-rmse-which-metric-is-better-e60ac3bde13d\">here</a>.<img decoding=\"async\" loading=\"lazy\" class=\"aligncenter size-full wp-image-1182\" src=\"https://i0.wp.com/ramok.tech/wp-content/uploads/2017/11/rmse.jpg?resize=385%2C117\" alt=\"\" width=\"385\" height=\"117\" srcset=\"https://i0.wp.com/ramok.tech/wp-content/uploads/2017/11/rmse.jpg?w=385 385w, https://i0.wp.com/ramok.tech/wp-content/uploads/2017/11/rmse.jpg?resize=300%2C91 300w\" sizes=\"(max-width: 385px) 85vw, 385px\" data-recalc-dims=\"1\" /></p>\n<p style=\"text-align: center;\"><em>What <strong>RMSE</strong> is doing is basically calculating the squared difference of the prediction and real value for all data. The squared is used in order to give more weight(exaggerate) to the differences between what algorithm predicted and what is the wanted value.</em></p>\n<h2><span id=\"Application\" class=\"ez-toc-section\">Application</span></h2>\n<p><a href=\"https://drive.google.com/open?id=1ywS83fLHYgWjg5Q7smqAOb7tm5Qa9UqC\">Application </a>can be <a href=\"https://drive.google.com/open?id=1ywS83fLHYgWjg5Q7smqAOb7tm5Qa9UqC\">downloaded </a>and executed without any knowledge of java beside JAVA has to be installed on your computer. You can try it by your self by choosing different options like:</p>\n<ul>\n<li> <em>feature size with default 150. Please note that training is slowed down noticable with the increase but also the RMSE is improved</em></li>\n<li><em>different ratio between training and test data with default 80% and 20% respectively.</em></li>\n<li><em>regularize param  λ with default 0.01. Notice that increasing the value may increase RMSE but that does not necessarily mean our algorithm is behaving bad. Sometimes we it happens our algorithm performs perfect on training and test but than when faced with production data it performs poor. So increasing this value make the algorithm more tolerant and avoids above situation(over-fit of data).</em></li>\n</ul>\n<p><span style=\"text-decoration: underline;\"><a href=\"https://drive.google.com/open?id=1ywS83fLHYgWjg5Q7smqAOb7tm5Qa9UqC\">Application</a> already loads a default training executed before hand with RMSE 42 and 350 features, 80% training and 20% test and reg param 0.01(that is why it may take some seconds for app to load).</span></p>\n<p>We can run the <a href=\"https://drive.google.com/open?id=1ywS83fLHYgWjg5Q7smqAOb7tm5Qa9UqC\">application </a>from <a href=\"https://github.com/klevis/onlineRetailRecommender\">source </a>by simply executing the <strong>RUN</strong> class or if you do not fill to open it with IDE just run  <em><span style=\"text-decoration: underline;\"><strong>mvn clean install exec:java</strong></span><strong>.</strong></em></p>\n<p><a href=\"https://drive.google.com/open?id=1ywS83fLHYgWjg5Q7smqAOb7tm5Qa9UqC\">Application </a>was build using Swing as GUI and <a href=\"http://ramok.tech/2017/09/08/fraud-detection-with-java-and-spark-mlib/#Spark_and_MLib\">Spark MLib</a> for the Collaboration Filtering Algorithm and executing the <em><strong>run.bat</strong></em> would show the below GUI:</p>\n<p><img decoding=\"async\" loading=\"lazy\" class=\"aligncenter size-full wp-image-1193\" src=\"https://i0.wp.com/ramok.tech/wp-content/uploads/2017/11/app3.jpg?resize=840%2C440\" alt=\"\" width=\"840\" height=\"440\" srcset=\"https://i0.wp.com/ramok.tech/wp-content/uploads/2017/11/app3.jpg?w=1186 1186w, https://i0.wp.com/ramok.tech/wp-content/uploads/2017/11/app3.jpg?resize=300%2C157 300w, https://i0.wp.com/ramok.tech/wp-content/uploads/2017/11/app3.jpg?resize=768%2C402 768w, https://i0.wp.com/ramok.tech/wp-content/uploads/2017/11/app3.jpg?resize=1024%2C536 1024w\" sizes=\"(max-width: 709px) 85vw, (max-width: 909px) 67vw, (max-width: 1362px) 62vw, 840px\" data-recalc-dims=\"1\" /></p>\n",
  "post-id": 1002
}