{
  "title": "Exploring convolutional neural networks with DL4J",
  "link": "",
  "id": "http://brooksandrew.github.io/simpleblog/articles/convolutional-neural-network-training-with-dl4j",
  "published": "2016-04-14T00:00:00+00:00",
  "updated": "2016-04-14T00:00:00+00:00",
  "author": {
    "name": "andrew brooks",
    "uri": "http://brooksandrew.github.io/simpleblog",
    "email": "andrewbrooksct@gmail.com"
  },
  "content": "<ul id=\"markdown-toc\">\n  <li><a href=\"#motivation\" id=\"markdown-toc-motivation\">Motivation</a>    <ul>\n      <li><a href=\"#why\" id=\"markdown-toc-why\">Why…</a></li>\n      <li><a href=\"#what-i-did-instead\" id=\"markdown-toc-what-i-did-instead\">What I did instead…</a></li>\n      <li><a href=\"#the-kaggle-problem\" id=\"markdown-toc-the-kaggle-problem\">The Kaggle problem</a></li>\n      <li><a href=\"#initial-approach\" id=\"markdown-toc-initial-approach\">Initial approach</a></li>\n      <li><a href=\"#pivot\" id=\"markdown-toc-pivot\">Pivot</a></li>\n    </ul>\n  </li>\n  <li><a href=\"#approach\" id=\"markdown-toc-approach\">Approach</a>    <ul>\n      <li><a href=\"#image-processing\" id=\"markdown-toc-image-processing\">Image processing</a>        <ul>\n          <li><a href=\"#1-square-images\" id=\"markdown-toc-1-square-images\">1. Square images</a></li>\n          <li><a href=\"#2-re-size-images\" id=\"markdown-toc-2-re-size-images\">2. Re-size images</a></li>\n          <li><a href=\"#3-grayscale\" id=\"markdown-toc-3-grayscale\">3. Grayscale</a></li>\n        </ul>\n      </li>\n      <li><a href=\"#pipeline---images\" id=\"markdown-toc-pipeline---images\">Pipeline - images</a>        <ul>\n          <li><a href=\"#image-processing-1\" id=\"markdown-toc-image-processing-1\">Image processing</a></li>\n          <li><a href=\"#io\" id=\"markdown-toc-io\">I/O</a></li>\n          <li><a href=\"#wrangling\" id=\"markdown-toc-wrangling\">Wrangling</a></li>\n          <li><a href=\"#data-structure\" id=\"markdown-toc-data-structure\">Data structure</a></li>\n          <li><a href=\"#make-nd4j-dataset\" id=\"markdown-toc-make-nd4j-dataset\">Make ND4J dataset</a></li>\n          <li><a href=\"#run\" id=\"markdown-toc-run\">Run</a></li>\n        </ul>\n      </li>\n      <li><a href=\"#pipeline---dl4j\" id=\"markdown-toc-pipeline---dl4j\">Pipeline - DL4J</a>        <ul>\n          <li><a href=\"#batch-mode\" id=\"markdown-toc-batch-mode\">Batch-mode</a></li>\n          <li><a href=\"#train-convolutional-network\" id=\"markdown-toc-train-convolutional-network\">Train convolutional network</a></li>\n          <li><a href=\"#saveload-networks\" id=\"markdown-toc-saveload-networks\">Save/load networks</a></li>\n          <li><a href=\"#scoring\" id=\"markdown-toc-scoring\">Scoring</a></li>\n          <li><a href=\"#submit-to-kaggle\" id=\"markdown-toc-submit-to-kaggle\">Submit to Kaggle</a></li>\n          <li><a href=\"#run-1\" id=\"markdown-toc-run-1\">Run</a></li>\n        </ul>\n      </li>\n    </ul>\n  </li>\n  <li><a href=\"#thoughts\" id=\"markdown-toc-thoughts\">Thoughts</a></li>\n</ul>\n\n<h1 id=\"motivation\">Motivation</h1>\n\n<p><strong>TL;DR version:</strong> This post walks through an image classification problem hosted on Kaggle for Yelp.  I use Scala, DeepLearning4J and convolutional neural networks.  For a self-guided tour, check out the project on Github <a href=\"https://github.com/brooksandrew/kaggle_yelp\">here</a>.</p>\n\n<h3 id=\"why\">Why…</h3>\n\n<p>This project was motivated by a personal desire of mine to:</p>\n\n<ol>\n  <li>explore deep learning on a computer vision problem.</li>\n  <li>implement an end-to-end data science project in Scala.</li>\n  <li>build an image processing pipeline using real images.</li>\n</ol>\n\n<p>Rather than using the <a href=\"https://en.wikipedia.org/wiki/MNIST_database\">MNIST</a> or <a href=\"https://www.cs.toronto.edu/~kriz/cifar.html\">CIFAR</a> datasets with pre-processed and standardized images, I wanted to go with a more “wild” dataset of “real-world” images.</p>\n\n<p>I opted for the <a href=\"https://www.kaggle.com/c/yelp-restaurant-photo-classification\">Kaggle Yelp Restaurant Photo Classification</a> problem.  The ~200,000 training images are raw uploads from Yelp users from mobile devices or cameras with a variety of sizes, dimensions, colors and quality.</p>\n\n<h3 id=\"what-i-did-instead\">What I did instead…</h3>\n\n<p>I was initially going to document this project end-to-end from image processing to training the convolutional neural networks.  However, upon more research and practice actually tuning convolutional networks, I’ve reconsidered my process.  While the Kaggle Yelp Photo Classification problem is a novel problem, it turns out not to be a great match with the deep learning techniques I wanted to explore.  Thus, this article will focus mainly on the image processing pipeline using Scala.  While I introduce DL4J here, I plan to discuss my experience with it in more detail in a forthcoming post.</p>\n\n<h3 id=\"the-kaggle-problem\">The Kaggle problem</h3>\n\n<p>The Kaggle problem is this.  Yelp wants to auto-classify restaurants on the 9 characteristics below:</p>\n\n<ol>\n  <li>good_for_lunch</li>\n  <li>good_for_dinner</li>\n  <li>takes_reservations</li>\n  <li>outdoor_seating</li>\n  <li>restaurant_is_expensive</li>\n  <li>has_alcohol</li>\n  <li>has_table_service</li>\n  <li>ambience_is_classy</li>\n  <li>good_for_kids</li>\n</ol>\n\n<p>Each restaurant has some number of images (from a couple to several hundred).  However there are no restaurant features beyond these images.  Thus it is a <a href=\"https://en.wikipedia.org/wiki/Multiple-instance_learning\">multiple-instance learning</a> problem where each business in the training data is represented by its bag of images.</p>\n\n<p>This is also a <a href=\"https://en.wikipedia.org/wiki/Multi-label_classification\">multiple-label classification</a> problem where each business can have one or more of the 9 characteristics listed above.</p>\n\n<h3 id=\"initial-approach\">Initial approach</h3>\n\n<p>To deal with the <strong>multiple-instance issue</strong>, I simply applied the labels of the restaurant to all of the images associated with it and treated each image as a separate record.</p>\n\n<p>To deal with with the <strong>multiple-label problem</strong>, I simply handled each class as a separate binary classification problem.  While there are breeds of neural networks capable of classifying multiple labels, such as <a href=\"backpropagation for multilabel learning\">BP-MLL</a>, these are not currently available in DL4J.</p>\n\n<h3 id=\"pivot\">Pivot</h3>\n\n<p>While I didn’t expect my initial approach would land me at the top of the Kaggle leaderboard, I did expect it would allow me to build a reasonable model while exploring new and untested (to me) tools and techniques: DeepLearning4j, Scala and convolutional nets.  That assumption turned out to bigger than I expected.</p>\n\n<p>The noise-to-signal ratio turned out to be too high with the Yelp data to train a meaningful convolutional network given my self-imposed constraints.  From what I’ve deduced from the <a href=\"https://www.kaggle.com/c/yelp-restaurant-photo-classification/forums\">Kaggle forum</a>, most teams are using pre-trained neural networks to extract features from each image.  From there it can be tackled as a classical (non-image) classification problem with crafty feature creation and aggregation from the image to restaurant level.</p>\n\n<p>While this is far more computationally efficient and could yield better predictions, it cuts out exactly the part I wanted to explore.  I eventually compromised with myself and decided to re-factor the image pipeline I developed on this project for a similar better posed problem using <a href=\"https://www.cs.toronto.edu/~kriz/cifar.html\">CIFAR</a> or dataset created myself from using <a href=\"http://www.image-net.org/\">image-net</a>.</p>\n\n<h1 id=\"approach\">Approach</h1>\n\n<h2 id=\"image-processing\">Image processing</h2>\n\n<p>Images in the training set come in various shapes and sizes.  See some examples below.  My first pass at processing consists of:</p>\n\n<ol>\n  <li>squaring images</li>\n  <li>resizing image to same same dimensions</li>\n  <li>grayscaling image</li>\n</ol>\n\n<h5 id=\"some-images-are-tall\">Some images are tall…</h5>\n\n<figure class=\"half\">\n\t<img src=\"/simpleblog/assets/dl4j-article/54.jpg\" alt=\"tall image - mussels\" />\n\t<img src=\"/simpleblog/assets/dl4j-article/21.jpg\" alt=\"tall image - cup\" />\n</figure>\n\n<h5 id=\"some-images-are-wide\">Some images are wide…</h5>\n\n<figure class=\"half\">\n\t<img src=\"/simpleblog/assets/dl4j-article/244159.jpg\" alt=\"wide image - Tashan\" />\n\t<img src=\"/simpleblog/assets/dl4j-article/290501.jpg\" alt=\"wide image - Wine price\" />\n</figure>\n\n<h5 id=\"some-images-are-outside\">Some images are outside…</h5>\n\n<figure class=\"half\">\n\t<img src=\"/simpleblog/assets/dl4j-article/76.jpg\" alt=\"outside image - moab diner\" />\n\t<img src=\"/simpleblog/assets/dl4j-article/159.jpg\" alt=\"outside image - japanese restaurant\" />\n</figure>\n\n<h5 id=\"some-images-are-inside\">Some images are inside…</h5>\n\n<figure class=\"half\">\n\t<img src=\"/simpleblog/assets/dl4j-article/28.jpg\" alt=\"inside restaurant - chairs\" />\n\t<img src=\"/simpleblog/assets/dl4j-article/26.jpg\" alt=\"inside restaurant - counter\" />\n</figure>\n\n<h5 id=\"some-images-are-food\">Some images are food…</h5>\n\n<figure class=\"half\">\n\t<img src=\"/simpleblog/assets/dl4j-article/20.jpg\" alt=\"food - pizza\" />\n\t<img src=\"/simpleblog/assets/dl4j-article/403044.jpg\" alt=\"food - rice\" />\n</figure>\n\n<h5 id=\"and-some-are-random-other-things\">And some are random other things…</h5>\n\n<figure class=\"half\">\n\t<img src=\"/simpleblog/assets/dl4j-article/299.jpg\" alt=\"food - nfl cake\" />\n\t<img src=\"/simpleblog/assets/dl4j-article/570.jpg\" alt=\"food - dog\" />\n</figure>\n\n<h3 id=\"1-square-images\">1. Square images</h3>\n\n<p>While images in the training set varied from portrait to landscape and the number of pixels, most were roughly square. Many were exactly 500 x 375, which was also the largest size, presumably the output of Yelp’s own image processing system.</p>\n\n<p>To train a convolutional net, all images need to be the same shape and size.  While there are likely fancier tricks and techniques that allow for different sized images, I started simple: make all images square, while preserving as much of the image as possible.  I assume that the material of interest is centered, so I capture the middle-most square of each image.</p>\n\n<p>Example:</p>\n\n<p><img src=\"/simpleblog/assets/dl4j-article/20.jpg\" alt=\"food - pizza\" /></p>\n<figcaption>original 500 x 375</figcaption>\n<p><img src=\"/simpleblog/assets/dl4j-article/20square.jpg\" alt=\"food - pizza square\" /></p>\n<figcaption>squared 375 x 375</figcaption>\n\n<p>This example was created with the following code:\n<script src=\"https://gist.github.com/brooksandrew/8138798fc9cc249882152d5234edc9aa.js\"></script></p>\n\n<h3 id=\"2-re-size-images\">2. Re-size images</h3>\n\n<p>Now that images are squared, the re-sizing problem is relatively straightforward.</p>\n\n<p>Example:</p>\n\n<p><img src=\"/simpleblog/assets/dl4j-article/20.jpg\" alt=\"food - pizza color\" height=\"500\" width=\"500\" /></p>\n<figcaption>original 500 x 375</figcaption>\n<p><img src=\"/simpleblog/assets/dl4j-article/20resize256.jpg\" alt=\"food - pizza square\" style=\"width:375px; height:375px; image-rendering: pixelated; -ms-interpolation-mode: bicubic;\" /></p>\n<figcaption>re-sized 256 x 256</figcaption>\n<p><img src=\"/simpleblog/assets/dl4j-article/20resize128.jpg\" alt=\"food - pizza square\" style=\"width:375px; height:375px; image-rendering: pixelated; -ms-interpolation-mode: bicubic;\" /></p>\n<figcaption>re-sized 128 x 128</figcaption>\n<p><img src=\"/simpleblog/assets/dl4j-article/20resize64.jpg\" alt=\"food - pizza square\" style=\"width:375px; height:375px; image-rendering: pixelated; -ms-interpolation-mode: bicubic;\" /></p>\n<figcaption>re-sized 64 x 64</figcaption>\n<p><img src=\"/simpleblog/assets/dl4j-article/20resize32.jpg\" alt=\"food - pizza square\" style=\"width:375px; height:375px; image-rendering: pixelated; -ms-interpolation-mode: bicubic;\" /></p>\n<figcaption>re-sized 32 x 32</figcaption>\n\n<p>This example was created with the following code:\n<script src=\"https://gist.github.com/brooksandrew/7f123b4acb3dcf52ecb9951858974efb.js\"></script></p>\n\n<h3 id=\"3-grayscale\">3. Grayscale</h3>\n\n<p>While DL4J and convolutional nets can certainly handle color images, I decided to simplify computation and start with grayscale.  This way a single 64 x 64 pixel image is represented by 4096 features rather than 4096*3 (one for each color channel: R, G, B).  There is a good discussion of the numerous ways to do this <a href=\"http://www.tannerhelland.com/3643/grayscale-image-algorithm-vb6/\">here</a>.  I opted to start with the simplest of all (averaging) which appeared to work quite well.\nHere’s an example:</p>\n\n<figure class=\"half\">\n\t<img src=\"/simpleblog/assets/dl4j-article/20.jpg\" alt=\"food - pizza color\" />\n\t<img src=\"/simpleblog/assets/dl4j-article/20gray.jpg\" alt=\"food - pizza gray\" />\n</figure>\n<figcaption>original image (left); grayscale conversion using RGB averaging (right)</figcaption>\n\n<p>This example was created with the following code:\n<script src=\"https://gist.github.com/brooksandrew/c9c3ab6ba93ea03fb3fa1ecccef2607a.js\"></script></p>\n\n<!-- \n<script src=\"http://gist-it.appspot.com/https://github.com/brooksandrew/kaggle_yelp/blob/master/src/main/scala/modeling/processing/extendBufferedImage.scala\"></script> -->\n\n<h2 id=\"pipeline---images\">Pipeline - images</h2>\n\n<p>Much of this section is specific to the Kaggle problem and discusses the data structures I created and used to keep store and manage images with their corresponding labels.  It’s mainly an exploration of how to structure a data science project with Scala.  If you’re primarily interested in DL4J, skip ahead to the Pipeline - DL4J section.</p>\n\n<h3 id=\"image-processing-1\">Image processing</h3>\n\n<p>In my image processing pipeline, I modified the functions in the Gists above to methods of the <code class=\"highlighter-rouge\">java.awt.image.BufferedImage</code> class.</p>\n\n<p>This allows me to operate on images with chaining like this:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-scala\" data-lang=\"scala\"><span class=\"k\">import</span> <span class=\"nn\">imgUtils._</span>\n\n <span class=\"k\">val</span> <span class=\"n\">img</span> <span class=\"k\">=</span> <span class=\"nc\">ImageIO</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"nc\">File</span><span class=\"o\">(</span><span class=\"s\">\"myimagefile.jpg\"</span><span class=\"o\">))</span>\n         <span class=\"o\">.</span><span class=\"n\">makeSquare</span>\n         <span class=\"o\">.</span><span class=\"n\">resizeImg</span><span class=\"o\">(</span><span class=\"mi\">128</span><span class=\"o\">,</span> <span class=\"mi\">128</span><span class=\"o\">)</span>\n         <span class=\"o\">.</span><span class=\"n\">image2gray</span></code></pre></figure>\n\n<p>I’m not sure if this approach of extending an existing class with new methods is preferred to creating a new class, but it seemed to work well for my problem.  I imagine it would be less clean if all instances of the original class do not need the newly defined methods.  However, this wasn’t the case for me: all images need the new methods.</p>\n\n<p>Code below: <a href=\"https://github.com/brooksandrew/kaggle_yelp/blob/master/src/main/scala/modeling/processing/extendBufferedImage.scala\">extendBufferedImage.scala</a></p>\n\n<figure class=\"highlight\"><pre><code class=\"language-scala\" data-lang=\"scala\"><span class=\"k\">package</span> <span class=\"nn\">modeling.processing</span>\n\n<span class=\"k\">import</span> <span class=\"nn\">scala.Vector</span>\n<span class=\"k\">import</span> <span class=\"nn\">org.imgscalr._</span>\n\n<span class=\"k\">object</span> <span class=\"nc\">imgUtils</span> <span class=\"o\">{</span>\n   <span class=\"k\">implicit</span> <span class=\"k\">class</span> <span class=\"nc\">extendingImageClass</span><span class=\"o\">(</span><span class=\"n\">img</span><span class=\"k\">:</span> <span class=\"kt\">java.awt.image.BufferedImage</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    \n    <span class=\"c1\">// image 2 vector processing\n</span>    <span class=\"k\">def</span> <span class=\"n\">pixels2gray</span><span class=\"o\">(</span><span class=\"n\">red</span><span class=\"k\">:</span> <span class=\"kt\">Int</span><span class=\"o\">,</span> <span class=\"n\">green</span><span class=\"k\">:</span><span class=\"kt\">Int</span><span class=\"o\">,</span> <span class=\"n\">blue</span><span class=\"k\">:</span> <span class=\"kt\">Int</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">Int</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"n\">red</span> <span class=\"o\">+</span> <span class=\"n\">green</span> <span class=\"o\">+</span> <span class=\"n\">blue</span><span class=\"o\">)</span> <span class=\"o\">/</span> <span class=\"mi\">3</span>\n    <span class=\"k\">def</span> <span class=\"n\">pixels2color</span><span class=\"o\">(</span><span class=\"n\">red</span><span class=\"k\">:</span> <span class=\"kt\">Int</span><span class=\"o\">,</span> <span class=\"n\">green</span><span class=\"k\">:</span><span class=\"kt\">Int</span><span class=\"o\">,</span> <span class=\"n\">blue</span><span class=\"k\">:</span> <span class=\"kt\">Int</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">Vector</span><span class=\"o\">[</span><span class=\"kt\">Int</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"nc\">Vector</span><span class=\"o\">(</span><span class=\"n\">red</span><span class=\"o\">,</span> <span class=\"n\">green</span><span class=\"o\">,</span> <span class=\"n\">blue</span><span class=\"o\">)</span>\n  \n    <span class=\"k\">private</span> <span class=\"k\">def</span> <span class=\"n\">image2vec</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">](</span><span class=\"n\">f</span><span class=\"k\">:</span> <span class=\"o\">(</span><span class=\"kt\">Int</span><span class=\"o\">,</span> <span class=\"kt\">Int</span><span class=\"o\">,</span> <span class=\"nc\">Int</span><span class=\"o\">)</span> <span class=\"k\">=&gt;</span> <span class=\"n\">A</span> <span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">Vector</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"o\">{</span>\n               <span class=\"k\">val</span> <span class=\"n\">w</span> <span class=\"k\">=</span> <span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">getWidth</span>\n               <span class=\"k\">val</span> <span class=\"n\">h</span> <span class=\"k\">=</span> <span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">getHeight</span>\n               <span class=\"k\">for</span> <span class=\"o\">{</span> <span class=\"n\">w1</span> <span class=\"k\">&lt;-</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"n\">until</span> <span class=\"n\">w</span><span class=\"o\">).</span><span class=\"n\">toVector</span>\n                     <span class=\"n\">h1</span> <span class=\"k\">&lt;-</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"n\">until</span> <span class=\"n\">h</span><span class=\"o\">).</span><span class=\"n\">toVector</span>\n                   <span class=\"o\">}</span> <span class=\"k\">yield</span> <span class=\"o\">{</span>\n                       <span class=\"k\">val</span> <span class=\"n\">col</span> <span class=\"k\">=</span> <span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">getRGB</span><span class=\"o\">(</span><span class=\"n\">w1</span><span class=\"o\">,</span> <span class=\"n\">h1</span><span class=\"o\">)</span>\n        \t\t\t         <span class=\"k\">val</span> <span class=\"n\">red</span> <span class=\"k\">=</span>  <span class=\"o\">(</span><span class=\"n\">col</span> <span class=\"o\">&amp;</span> <span class=\"mh\">0xff0000</span><span class=\"o\">)</span> <span class=\"o\">/</span> <span class=\"mi\">65536</span>\n        \t\t\t         <span class=\"k\">val</span> <span class=\"n\">green</span> <span class=\"k\">=</span> <span class=\"o\">(</span><span class=\"n\">col</span> <span class=\"o\">&amp;</span> <span class=\"mh\">0xff00</span><span class=\"o\">)</span> <span class=\"o\">/</span> <span class=\"mi\">256</span>\n        \t\t\t         <span class=\"k\">val</span> <span class=\"n\">blue</span> <span class=\"k\">=</span> <span class=\"o\">(</span><span class=\"n\">col</span> <span class=\"o\">&amp;</span> <span class=\"mh\">0xff</span><span class=\"o\">)</span>\n                       <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">red</span><span class=\"o\">,</span> <span class=\"n\">green</span><span class=\"o\">,</span> <span class=\"n\">blue</span><span class=\"o\">)</span>\n                   <span class=\"o\">}</span>\n             <span class=\"o\">}</span>\n    \n    <span class=\"k\">def</span> <span class=\"n\">image2gray</span><span class=\"k\">:</span> <span class=\"kt\">Vector</span><span class=\"o\">[</span><span class=\"kt\">Int</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"n\">image2vec</span><span class=\"o\">(</span><span class=\"n\">pixels2gray</span><span class=\"o\">)</span>\n    <span class=\"k\">def</span> <span class=\"n\">image2color</span><span class=\"k\">:</span> <span class=\"kt\">Vector</span><span class=\"o\">[</span><span class=\"kt\">Int</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"n\">image2vec</span><span class=\"o\">(</span><span class=\"n\">pixels2color</span><span class=\"o\">).</span><span class=\"n\">flatten</span>\n    \n    <span class=\"c1\">// make image square\n</span>    <span class=\"k\">def</span> <span class=\"n\">makeSquare</span> <span class=\"k\">=</span> <span class=\"o\">{</span>\n      <span class=\"k\">val</span> <span class=\"n\">w</span> <span class=\"k\">=</span> <span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">getWidth</span>\n      <span class=\"k\">val</span> <span class=\"n\">h</span> <span class=\"k\">=</span> <span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">getHeight</span>\n      <span class=\"k\">val</span> <span class=\"n\">dim</span> <span class=\"k\">=</span> <span class=\"nc\">List</span><span class=\"o\">(</span><span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">).</span><span class=\"n\">min</span>\n      \n      <span class=\"n\">img</span> <span class=\"k\">match</span> <span class=\"o\">{</span>\n    \t  <span class=\"k\">case</span> <span class=\"n\">x</span> <span class=\"k\">if</span> <span class=\"n\">w</span> <span class=\"o\">==</span> <span class=\"n\">h</span> <span class=\"k\">=&gt;</span> <span class=\"n\">img</span>\n    \t  <span class=\"k\">case</span> <span class=\"n\">x</span> <span class=\"k\">if</span> <span class=\"n\">w</span> <span class=\"o\">&gt;</span> <span class=\"n\">h</span> <span class=\"k\">=&gt;</span> <span class=\"nc\">Scalr</span><span class=\"o\">.</span><span class=\"n\">crop</span><span class=\"o\">(</span><span class=\"n\">img</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">w</span><span class=\"o\">-</span><span class=\"n\">h</span><span class=\"o\">)/</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">dim</span><span class=\"o\">,</span> <span class=\"n\">dim</span><span class=\"o\">)</span>\n    \t  <span class=\"k\">case</span> <span class=\"n\">x</span> <span class=\"k\">if</span> <span class=\"n\">w</span> <span class=\"o\">&lt;</span> <span class=\"n\">h</span> <span class=\"k\">=&gt;</span> <span class=\"nc\">Scalr</span><span class=\"o\">.</span><span class=\"n\">crop</span><span class=\"o\">(</span><span class=\"n\">img</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">-</span><span class=\"n\">w</span><span class=\"o\">)/</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">dim</span><span class=\"o\">,</span> <span class=\"n\">dim</span><span class=\"o\">)</span>\n      <span class=\"o\">}</span>\n    <span class=\"o\">}</span>                        \n    \n    <span class=\"c1\">// resize pixels\n</span>    <span class=\"k\">def</span> <span class=\"n\">resizeImg</span><span class=\"o\">(</span><span class=\"n\">width</span><span class=\"k\">:</span> <span class=\"kt\">Int</span><span class=\"o\">,</span> <span class=\"n\">height</span><span class=\"k\">:</span> <span class=\"kt\">Int</span><span class=\"o\">)</span> <span class=\"k\">=</span> <span class=\"o\">{</span>\n      <span class=\"nc\">Scalr</span><span class=\"o\">.</span><span class=\"n\">resize</span><span class=\"o\">(</span><span class=\"n\">img</span><span class=\"o\">,</span> <span class=\"nc\">Scalr</span><span class=\"o\">.</span><span class=\"nc\">Method</span><span class=\"o\">.</span><span class=\"nc\">BALANCED</span><span class=\"o\">,</span> <span class=\"n\">width</span><span class=\"o\">,</span> <span class=\"n\">height</span><span class=\"o\">)</span>\n    <span class=\"o\">}</span>\n    \n   <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></figure>\n\n<h3 id=\"io\">I/O</h3>\n\n<p>We need to load a couple CSV files containing metadata about each image.  There are some Scala CSV reader libraries out there like <a href=\"https://github.com/tototoshi/scala-csv\">scala-csv</a>, however I forwent these to get more experience testing out Scala.  I defined a basic file-reader <code class=\"highlighter-rouge\">readcsv</code> which is used by <code class=\"highlighter-rouge\">readBizLabels</code> and <code class=\"highlighter-rouge\">readBiz2ImgLabels</code> to read in text files containing the labels for each Yelp business and image-to-business mappings respectively.</p>\n\n<p>Code below: <a href=\"https://github.com/brooksandrew/kaggle_yelp/blob/master/src/main/scala/modeling/io/readCsvData.scala\">readCsvData.scala</a></p>\n\n<figure class=\"highlight\"><pre><code class=\"language-scala\" data-lang=\"scala\"><span class=\"k\">package</span> <span class=\"nn\">modeling.io</span>\n\n<span class=\"k\">import</span> <span class=\"nn\">scala.io.Source</span>\n\n<span class=\"k\">object</span> <span class=\"nc\">readCsvData</span> <span class=\"o\">{</span>\n  \n  <span class=\"cm\">/** Generic function to load in CSV */</span>\n  \n  <span class=\"k\">def</span> <span class=\"n\">readcsv</span><span class=\"o\">(</span><span class=\"n\">csv</span><span class=\"k\">:</span> <span class=\"kt\">String</span><span class=\"o\">,</span> <span class=\"n\">rows</span><span class=\"k\">:</span> <span class=\"kt\">List</span><span class=\"o\">[</span><span class=\"kt\">Int</span><span class=\"o\">]</span><span class=\"k\">=</span><span class=\"nc\">List</span><span class=\"o\">(-</span><span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"k\">:</span>  <span class=\"kt\">List</span><span class=\"o\">[</span><span class=\"kt\">List</span><span class=\"o\">[</span><span class=\"kt\">String</span><span class=\"o\">]]</span> <span class=\"k\">=</span> <span class=\"o\">{</span>\n    <span class=\"k\">val</span> <span class=\"n\">src</span> <span class=\"k\">=</span> <span class=\"nc\">Source</span><span class=\"o\">.</span><span class=\"n\">fromFile</span><span class=\"o\">(</span><span class=\"n\">csv</span><span class=\"o\">)</span> \n    <span class=\"k\">def</span> <span class=\"n\">reading</span><span class=\"o\">(</span><span class=\"n\">csv</span><span class=\"k\">:</span> <span class=\"kt\">String</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">List</span><span class=\"o\">[</span><span class=\"kt\">List</span><span class=\"o\">[</span><span class=\"kt\">String</span><span class=\"o\">]]</span> <span class=\"k\">=</span> <span class=\"o\">{</span>  \n      <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">getLines</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"k\">=&gt;</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"o\">(</span><span class=\"s\">\",\"</span><span class=\"o\">).</span><span class=\"n\">toList</span><span class=\"o\">)</span>\n         <span class=\"o\">.</span><span class=\"n\">toList</span>\n    <span class=\"o\">}</span>\n    <span class=\"k\">try</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">rows</span><span class=\"o\">==</span><span class=\"nc\">List</span><span class=\"o\">(-</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"n\">reading</span><span class=\"o\">(</span><span class=\"n\">csv</span><span class=\"o\">)</span>\n        <span class=\"k\">else</span> <span class=\"n\">rows</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"o\">(</span><span class=\"n\">reading</span><span class=\"o\">(</span><span class=\"n\">csv</span><span class=\"o\">))</span>\n    <span class=\"o\">}</span> <span class=\"k\">finally</span> <span class=\"o\">{</span>\n        <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">close</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n  \n  <span class=\"cm\">/** Create map from bizid to labels of form bizid -&gt; Set(labels)  */</span>\n  \n  <span class=\"k\">def</span> <span class=\"n\">readBizLabels</span><span class=\"o\">(</span><span class=\"n\">csv</span><span class=\"k\">:</span> <span class=\"kt\">String</span><span class=\"o\">,</span> <span class=\"n\">rows</span><span class=\"k\">:</span> <span class=\"kt\">List</span><span class=\"o\">[</span><span class=\"kt\">Int</span><span class=\"o\">]</span><span class=\"k\">=</span><span class=\"nc\">List</span><span class=\"o\">(-</span><span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"k\">:</span> <span class=\"kt\">Map</span><span class=\"o\">[</span><span class=\"kt\">String</span>, <span class=\"kt\">Set</span><span class=\"o\">[</span><span class=\"kt\">Int</span><span class=\"o\">]]</span>  <span class=\"k\">=</span> <span class=\"o\">{</span>\n    <span class=\"k\">val</span> <span class=\"n\">src</span> <span class=\"k\">=</span> <span class=\"n\">readcsv</span><span class=\"o\">(</span><span class=\"n\">csv</span><span class=\"o\">)</span>\n    <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">drop</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"c1\">// drop header\n</span>       <span class=\"o\">.</span><span class=\"n\">map</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"k\">=&gt;</span> <span class=\"n\">x</span> <span class=\"k\">match</span> <span class=\"o\">{</span>\n          <span class=\"k\">case</span> <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"nc\">Nil</span> <span class=\"k\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">).</span><span class=\"n\">toString</span><span class=\"o\">,</span> <span class=\"nc\">Set</span><span class=\"o\">[</span><span class=\"kt\">Int</span><span class=\"o\">]())</span>\n          <span class=\"k\">case</span> <span class=\"k\">_</span> <span class=\"k\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">).</span><span class=\"n\">toString</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">).</span><span class=\"n\">split</span><span class=\"o\">(</span><span class=\"s\">\" \"</span><span class=\"o\">).</span><span class=\"n\">map</span><span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"k\">=&gt;</span> <span class=\"n\">y</span><span class=\"o\">.</span><span class=\"n\">toInt</span><span class=\"o\">).</span><span class=\"n\">toSet</span><span class=\"o\">)</span>\n          <span class=\"o\">}).</span><span class=\"n\">toMap</span>\n  <span class=\"o\">}</span>\n  \n  <span class=\"cm\">/** Create map from imgID to bizID of form imgID -&gt; busID  */</span>\n   \n  <span class=\"k\">def</span> <span class=\"n\">readBiz2ImgLabels</span><span class=\"o\">(</span><span class=\"n\">csv</span><span class=\"k\">:</span> <span class=\"kt\">String</span><span class=\"o\">,</span> <span class=\"n\">rows</span><span class=\"k\">:</span> <span class=\"kt\">List</span><span class=\"o\">[</span><span class=\"kt\">Int</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"nc\">List</span><span class=\"o\">(-</span><span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"k\">:</span> <span class=\"kt\">Map</span><span class=\"o\">[</span><span class=\"kt\">Int</span>, <span class=\"kt\">String</span><span class=\"o\">]</span>  <span class=\"k\">=</span> <span class=\"o\">{</span>\n    <span class=\"k\">val</span> <span class=\"n\">src</span> <span class=\"k\">=</span> <span class=\"n\">readcsv</span><span class=\"o\">(</span><span class=\"n\">csv</span><span class=\"o\">)</span>\n    <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">drop</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"c1\">// drop header\n</span>       <span class=\"o\">.</span><span class=\"n\">map</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"k\">=&gt;</span> <span class=\"n\">x</span> <span class=\"k\">match</span> <span class=\"o\">{</span>\n         <span class=\"k\">case</span> <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"nc\">Nil</span> <span class=\"k\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">).</span><span class=\"n\">toInt</span><span class=\"o\">,</span> <span class=\"s\">\"-1\"</span><span class=\"o\">)</span>\n          <span class=\"k\">case</span> <span class=\"k\">_</span> <span class=\"k\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">).</span><span class=\"n\">toInt</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">).</span><span class=\"n\">split</span><span class=\"o\">(</span><span class=\"s\">\" \"</span><span class=\"o\">).</span><span class=\"n\">head</span><span class=\"o\">)</span>\n       <span class=\"o\">}).</span><span class=\"n\">toMap</span>\n  <span class=\"o\">}</span></code></pre></figure>\n\n<h3 id=\"wrangling\">Wrangling</h3>\n\n<p>I make heavy use of the Scala map class. Essentially we have three maps:</p>\n\n<ol>\n  <li><strong>bizMap</strong> (imgID -&gt; bizID)</li>\n  <li><strong>dataMap</strong> (imgID -&gt; img data)</li>\n  <li><strong>labMap</strong> (bizID -&gt; labels)</li>\n</ol>\n\n<p>I suppose I could have made classes for each of these as well, but they’re really just intermediate data structures, so I didn’t bother.</p>\n\n<p><code class=\"highlighter-rouge\">readBizLabels</code> from the code above creates the <strong>bizMap</strong> and <code class=\"highlighter-rouge\">readBiz2ImgLabels</code> creates the <strong>imgMap</strong>.  <code class=\"highlighter-rouge\">processImages</code> from the code below creates the <strong>dataMap</strong>.  Next step: create a single data representation of these three separate but related data structures.</p>\n\n<p>Code below: <a href=\"https://github.com/brooksandrew/kaggle_yelp/blob/master/src/main/scala/modeling/processing/images.scala\">images.scala</a></p>\n\n<figure class=\"highlight\"><pre><code class=\"language-scala\" data-lang=\"scala\"><span class=\"k\">package</span> <span class=\"nn\">modeling.processing</span>\n\n<span class=\"k\">import</span> <span class=\"nn\">java.io.File</span>\n<span class=\"k\">import</span> <span class=\"nn\">javax.imageio.ImageIO</span>\n<span class=\"k\">import</span> <span class=\"nn\">scala.util.matching.Regex</span>\n<span class=\"k\">import</span> <span class=\"nn\">imgUtils._</span>\n\n<span class=\"k\">object</span> <span class=\"nc\">images</span> <span class=\"o\">{</span>\n  \n  <span class=\"cm\">/**  Define RegEx to extract jpg name from the image class which is used to match against training labels */</span>\n  <span class=\"k\">val</span> <span class=\"n\">patt_get_jpg_name</span> <span class=\"k\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Regex</span><span class=\"o\">(</span><span class=\"s\">\"[0-9]\"</span><span class=\"o\">)</span>\n  \n  <span class=\"cm\">/** Collects all images associated with a BizId. */</span>\n  <span class=\"k\">def</span> <span class=\"n\">getImgIdsForBizId</span><span class=\"o\">(</span><span class=\"n\">bizMap</span><span class=\"k\">:</span> <span class=\"kt\">Map</span><span class=\"o\">[</span><span class=\"kt\">Int</span>, <span class=\"kt\">String</span><span class=\"o\">],</span> <span class=\"n\">bizIds</span><span class=\"k\">:</span> <span class=\"kt\">List</span><span class=\"o\">[</span><span class=\"kt\">String</span><span class=\"o\">])</span><span class=\"k\">:</span> <span class=\"kt\">List</span><span class=\"o\">[</span><span class=\"kt\">Int</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"o\">{</span>\n    <span class=\"n\">bizMap</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"k\">=&gt;</span> <span class=\"n\">bizIds</span><span class=\"o\">.</span><span class=\"n\">exists</span><span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"k\">=&gt;</span> <span class=\"n\">y</span> <span class=\"o\">==</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">_2</span><span class=\"o\">)).</span><span class=\"n\">map</span><span class=\"o\">(</span><span class=\"k\">_</span><span class=\"o\">.</span><span class=\"n\">_1</span><span class=\"o\">).</span><span class=\"n\">toList</span>\n  <span class=\"o\">}</span>\n  \n   <span class=\"cm\">/** Get a list of images to load and process\n      *\n      * @param photoDir directory where the raw images reside\n      * @param ids optional parameter to subset the images loaded from photoDir.\n      * \n      * @example println(getImageIds(\"/Users/abrooks/Documents/kaggle_yelp_photo/train_photos/\", ids=List.range(0,10)))\n      */</span>\n  \n  <span class=\"k\">def</span> <span class=\"n\">getImageIds</span><span class=\"o\">(</span><span class=\"n\">photoDir</span><span class=\"k\">:</span> <span class=\"kt\">String</span><span class=\"o\">,</span> <span class=\"n\">bizMap</span><span class=\"k\">:</span> <span class=\"kt\">Map</span><span class=\"o\">[</span><span class=\"kt\">Int</span>, <span class=\"kt\">String</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"nc\">Map</span><span class=\"o\">(-</span><span class=\"mi\">1</span> <span class=\"o\">-&gt;</span> <span class=\"s\">\"-1\"</span><span class=\"o\">),</span> <span class=\"n\">bizIds</span><span class=\"k\">:</span> <span class=\"kt\">List</span><span class=\"o\">[</span><span class=\"kt\">String</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"nc\">List</span><span class=\"o\">(</span><span class=\"s\">\"-1\"</span><span class=\"o\">))</span><span class=\"k\">:</span> <span class=\"kt\">List</span><span class=\"o\">[</span><span class=\"kt\">String</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"o\">{</span>\n    <span class=\"k\">val</span> <span class=\"n\">d</span> <span class=\"k\">=</span>  <span class=\"k\">new</span> <span class=\"nc\">File</span><span class=\"o\">(</span><span class=\"n\">photoDir</span><span class=\"o\">)</span> <span class=\"c1\">// new File(\"data/images/\") // too many photos?\n</span>    <span class=\"k\">val</span> <span class=\"n\">imgsPath</span> <span class=\"k\">=</span> <span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">listFiles</span><span class=\"o\">().</span><span class=\"n\">map</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"k\">=&gt;</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">toString</span><span class=\"o\">).</span><span class=\"n\">toList</span>\n    \n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">bizMap</span> <span class=\"o\">==</span> <span class=\"nc\">Map</span><span class=\"o\">(-</span><span class=\"mi\">1</span> <span class=\"o\">-&gt;</span> <span class=\"s\">\"-1\"</span><span class=\"o\">)</span> <span class=\"o\">||</span> <span class=\"n\">bizIds</span> <span class=\"o\">==</span> <span class=\"nc\">List</span><span class=\"o\">(-</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n      <span class=\"n\">imgsPath</span> \n    <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n      <span class=\"k\">val</span> <span class=\"n\">imgsMap</span> <span class=\"k\">=</span> <span class=\"n\">imgsPath</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"k\">=&gt;</span> <span class=\"n\">patt_get_jpg_name</span><span class=\"o\">.</span><span class=\"n\">findAllIn</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">).</span><span class=\"n\">mkString</span><span class=\"o\">.</span><span class=\"n\">toInt</span> <span class=\"o\">-&gt;</span> <span class=\"n\">x</span><span class=\"o\">).</span><span class=\"n\">toMap</span>\n      <span class=\"k\">val</span> <span class=\"n\">imgsPathSub</span> <span class=\"k\">=</span> <span class=\"n\">getImgIdsForBizId</span><span class=\"o\">(</span><span class=\"n\">bizMap</span><span class=\"o\">,</span> <span class=\"n\">bizIds</span><span class=\"o\">)</span>\n      <span class=\"n\">imgsPathSub</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"k\">=&gt;</span> <span class=\"n\">imgsMap</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">))</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n  \n   <span class=\"cm\">/** Read and process images into a photoID -&gt; vector map\n      *\n      * @param imgs list of images to read-in.  created from getImageIds function.\n      * @param resizeImgDim dimension to rescale square images to\n      * @param nPixels number of pixels to maintain.  mainly used to sample image to drastically reduce runtime while testing features. \n      * \n      * @example\n        val imgs = getImageIds(\"/Users/abrooks/Documents/kaggle_yelp_photo/train_photos/\", ids=List(0,1,2,3,4))\n        println(processImages(imgs, resizeImgDim = 128, nPixels = 16))    */</span>\n  \n  <span class=\"k\">def</span> <span class=\"n\">processImages</span><span class=\"o\">(</span><span class=\"n\">imgs</span><span class=\"k\">:</span> <span class=\"kt\">List</span><span class=\"o\">[</span><span class=\"kt\">String</span><span class=\"o\">],</span> <span class=\"n\">resizeImgDim</span><span class=\"k\">:</span> <span class=\"kt\">Int</span> <span class=\"o\">=</span> <span class=\"mi\">128</span><span class=\"o\">,</span> <span class=\"n\">nPixels</span><span class=\"k\">:</span> <span class=\"kt\">Int</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">Map</span><span class=\"o\">[</span><span class=\"kt\">Int</span>, <span class=\"kt\">Vector</span><span class=\"o\">[</span><span class=\"kt\">Int</span><span class=\"o\">]]</span> <span class=\"k\">=</span> <span class=\"o\">{</span>       \n    <span class=\"n\">imgs</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"k\">=&gt;</span> \n      <span class=\"n\">patt_get_jpg_name</span><span class=\"o\">.</span><span class=\"n\">findAllIn</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">).</span><span class=\"n\">mkString</span><span class=\"o\">.</span><span class=\"n\">toInt</span> <span class=\"o\">-&gt;</span> <span class=\"o\">{</span> \n        <span class=\"k\">val</span> <span class=\"n\">img0</span> <span class=\"k\">=</span> <span class=\"nc\">ImageIO</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"nc\">File</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">))</span>\n         <span class=\"o\">.</span><span class=\"n\">makeSquare</span>\n         <span class=\"o\">.</span><span class=\"n\">resizeImg</span><span class=\"o\">(</span><span class=\"n\">resizeImgDim</span><span class=\"o\">,</span> <span class=\"n\">resizeImgDim</span><span class=\"o\">)</span> <span class=\"c1\">// (200, 200)\n</span>         <span class=\"o\">.</span><span class=\"n\">image2gray</span>\n       <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">nPixels</span> <span class=\"o\">!=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">img0</span><span class=\"o\">.</span><span class=\"n\">slice</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">nPixels</span><span class=\"o\">)</span>\n       <span class=\"k\">else</span> <span class=\"n\">img0</span>\n     <span class=\"o\">}</span>   \n   <span class=\"o\">).</span><span class=\"n\">filter</span><span class=\"o\">(</span> <span class=\"n\">x</span> <span class=\"k\">=&gt;</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">_2</span> <span class=\"o\">!=</span> <span class=\"o\">())</span>\n    <span class=\"o\">.</span><span class=\"n\">toMap</span>\n    \n  <span class=\"o\">}</span></code></pre></figure>\n\n<h3 id=\"data-structure\">Data structure</h3>\n\n<p>So there are four pieces of information to keep track of for each image:</p>\n\n<ol>\n  <li>imageID</li>\n  <li>bizID</li>\n  <li>labels</li>\n  <li>pixel data</li>\n</ol>\n\n<p>The data is represented like this:</p>\n\n<p><img src=\"/simpleblog/assets/dl4j-article/dataflow.png\" alt=\"diagram of data organization\" /></p>\n\n<p>I defined a class <code class=\"highlighter-rouge\">alignedData</code> to manage it all.  When instantiating an instance of <code class=\"highlighter-rouge\">alignedData</code>, the <strong>bizMap</strong>, <strong>dataMap</strong> and <strong>labMap</strong> are provided.  I used Scala’s <code class=\"highlighter-rouge\">Option</code> type for <strong>labMap</strong> since we don’t have this information when we score test data.  <code class=\"highlighter-rouge\">None</code> is provided that case.</p>\n\n<p>Under the hood, the primary data structure has the following type:</p>\n\n<p><code class=\"highlighter-rouge\">List[(Int, String, Vector[Int], Set[Int])]</code></p>\n\n<p>which corresponds to a list of Tuple4s containing this information:</p>\n\n<p>List[(<strong>imgID</strong>, <strong>bizID</strong>, <strong>pixel data vector</strong>, <strong>labels</strong>)]</p>\n\n<p>Code below: <a href=\"https://github.com/brooksandrew/kaggle_yelp/blob/master/src/main/scala/modeling/processing/alignedData.scala\">alignedData.scala</a></p>\n\n<figure class=\"highlight\"><pre><code class=\"language-scala\" data-lang=\"scala\"><span class=\"k\">package</span> <span class=\"nn\">modeling.processing</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">alignedData</span><span class=\"o\">(</span><span class=\"n\">dataMap</span><span class=\"k\">:</span> <span class=\"kt\">Map</span><span class=\"o\">[</span><span class=\"kt\">Int</span>, <span class=\"kt\">Vector</span><span class=\"o\">[</span><span class=\"kt\">Int</span><span class=\"o\">]],</span> <span class=\"n\">bizMap</span><span class=\"k\">:</span> <span class=\"kt\">Map</span><span class=\"o\">[</span><span class=\"kt\">Int</span>, <span class=\"kt\">String</span><span class=\"o\">],</span> <span class=\"n\">labMap</span><span class=\"k\">:</span> <span class=\"kt\">Option</span><span class=\"o\">[</span><span class=\"kt\">Map</span><span class=\"o\">[</span><span class=\"kt\">String</span>, <span class=\"kt\">Set</span><span class=\"o\">[</span><span class=\"kt\">Int</span><span class=\"o\">]]])</span>\n                 <span class=\"o\">(</span><span class=\"n\">rowindices</span><span class=\"k\">:</span> <span class=\"kt\">List</span><span class=\"o\">[</span><span class=\"kt\">Int</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"n\">dataMap</span><span class=\"o\">.</span><span class=\"n\">keySet</span><span class=\"o\">.</span><span class=\"n\">toList</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n  \n  <span class=\"c1\">// initializing alignedData with empty labMap when it is not provided (we are working with training data)\n</span>  <span class=\"k\">def</span> <span class=\"k\">this</span><span class=\"o\">(</span><span class=\"n\">dataMap</span><span class=\"k\">:</span> <span class=\"kt\">Map</span><span class=\"o\">[</span><span class=\"kt\">Int</span>, <span class=\"kt\">Vector</span><span class=\"o\">[</span><span class=\"kt\">Int</span><span class=\"o\">]],</span> <span class=\"n\">bizMap</span><span class=\"k\">:</span> <span class=\"kt\">Map</span><span class=\"o\">[</span><span class=\"kt\">Int</span>, <span class=\"kt\">String</span><span class=\"o\">])(</span><span class=\"n\">rowindices</span><span class=\"k\">:</span> <span class=\"kt\">List</span><span class=\"o\">[</span><span class=\"kt\">Int</span><span class=\"o\">])</span> <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"o\">(</span><span class=\"n\">dataMap</span><span class=\"o\">,</span> <span class=\"n\">bizMap</span><span class=\"o\">,</span> <span class=\"nc\">None</span><span class=\"o\">)(</span><span class=\"n\">rowindices</span><span class=\"o\">)</span>\n\n  <span class=\"k\">def</span> <span class=\"n\">alignBizImgIds</span><span class=\"o\">(</span><span class=\"n\">dataMap</span><span class=\"k\">:</span> <span class=\"kt\">Map</span><span class=\"o\">[</span><span class=\"kt\">Int</span>, <span class=\"kt\">Vector</span><span class=\"o\">[</span><span class=\"kt\">Int</span><span class=\"o\">]],</span> <span class=\"n\">bizMap</span><span class=\"k\">:</span> <span class=\"kt\">Map</span><span class=\"o\">[</span><span class=\"kt\">Int</span>, <span class=\"kt\">String</span><span class=\"o\">])</span>\n    <span class=\"o\">(</span><span class=\"n\">rowindices</span><span class=\"k\">:</span> <span class=\"kt\">List</span><span class=\"o\">[</span><span class=\"kt\">Int</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"n\">dataMap</span><span class=\"o\">.</span><span class=\"n\">keySet</span><span class=\"o\">.</span><span class=\"n\">toList</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">List</span><span class=\"o\">[(</span><span class=\"kt\">Int</span>, <span class=\"kt\">String</span>, <span class=\"kt\">Vector</span><span class=\"o\">[</span><span class=\"kt\">Int</span><span class=\"o\">])]</span> <span class=\"k\">=</span> <span class=\"o\">{</span>\n      <span class=\"k\">for</span> <span class=\"o\">{</span> <span class=\"n\">pid</span> <span class=\"k\">&lt;-</span> <span class=\"n\">rowindices</span>\n          <span class=\"k\">val</span> <span class=\"n\">imgHasBiz</span> <span class=\"k\">=</span> <span class=\"n\">bizMap</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"o\">(</span><span class=\"n\">pid</span><span class=\"o\">)</span> <span class=\"c1\">// returns None if img does not have a bizID\n</span>          <span class=\"k\">val</span> <span class=\"n\">bid</span> <span class=\"k\">=</span> <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">imgHasBiz</span> <span class=\"o\">!=</span> <span class=\"nc\">None</span><span class=\"o\">)</span> <span class=\"n\">imgHasBiz</span><span class=\"o\">.</span><span class=\"n\">get</span> <span class=\"k\">else</span> <span class=\"s\">\"-1\"</span>\n          <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">dataMap</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"o\">.</span><span class=\"n\">toSet</span><span class=\"o\">.</span><span class=\"n\">contains</span><span class=\"o\">(</span><span class=\"n\">pid</span><span class=\"o\">)</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">imgHasBiz</span> <span class=\"o\">!=</span> <span class=\"nc\">None</span><span class=\"o\">)</span>\n      <span class=\"o\">}</span> <span class=\"k\">yield</span> <span class=\"o\">{</span> \n          <span class=\"o\">(</span><span class=\"n\">pid</span><span class=\"o\">,</span> <span class=\"n\">bid</span><span class=\"o\">,</span> <span class=\"n\">dataMap</span><span class=\"o\">(</span><span class=\"n\">pid</span><span class=\"o\">))</span>\n      <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n  \n  <span class=\"k\">def</span> <span class=\"n\">alignLabels</span><span class=\"o\">(</span><span class=\"n\">dataMap</span><span class=\"k\">:</span> <span class=\"kt\">Map</span><span class=\"o\">[</span><span class=\"kt\">Int</span>, <span class=\"kt\">Vector</span><span class=\"o\">[</span><span class=\"kt\">Int</span><span class=\"o\">]],</span> <span class=\"n\">bizMap</span><span class=\"k\">:</span> <span class=\"kt\">Map</span><span class=\"o\">[</span><span class=\"kt\">Int</span>, <span class=\"kt\">String</span><span class=\"o\">],</span> <span class=\"n\">labMap</span><span class=\"k\">:</span> <span class=\"kt\">Option</span><span class=\"o\">[</span><span class=\"kt\">Map</span><span class=\"o\">[</span><span class=\"kt\">String</span>, <span class=\"kt\">Set</span><span class=\"o\">[</span><span class=\"kt\">Int</span><span class=\"o\">]]])</span>\n    <span class=\"o\">(</span><span class=\"n\">rowindices</span><span class=\"k\">:</span> <span class=\"kt\">List</span><span class=\"o\">[</span><span class=\"kt\">Int</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"n\">dataMap</span><span class=\"o\">.</span><span class=\"n\">keySet</span><span class=\"o\">.</span><span class=\"n\">toList</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">List</span><span class=\"o\">[(</span><span class=\"kt\">Int</span>, <span class=\"kt\">String</span>, <span class=\"kt\">Vector</span><span class=\"o\">[</span><span class=\"kt\">Int</span><span class=\"o\">]</span>, <span class=\"kt\">Set</span><span class=\"o\">[</span><span class=\"kt\">Int</span><span class=\"o\">])]</span> <span class=\"k\">=</span> <span class=\"o\">{</span>\n      <span class=\"k\">def</span> <span class=\"n\">flatten1</span><span class=\"o\">[</span><span class=\"kt\">A</span>, <span class=\"kt\">B</span>, <span class=\"kt\">C</span>, <span class=\"kt\">D</span><span class=\"o\">](</span><span class=\"n\">t</span><span class=\"k\">:</span> <span class=\"o\">((</span><span class=\"kt\">A</span><span class=\"o\">,</span> <span class=\"kt\">B</span><span class=\"o\">,</span> <span class=\"kt\">C</span><span class=\"o\">),</span> <span class=\"n\">D</span><span class=\"o\">))</span><span class=\"k\">:</span> <span class=\"o\">(</span><span class=\"kt\">A</span><span class=\"o\">,</span> <span class=\"kt\">B</span><span class=\"o\">,</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"k\">=</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">_1</span><span class=\"o\">.</span><span class=\"n\">_1</span><span class=\"o\">,</span> <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">_1</span><span class=\"o\">.</span><span class=\"n\">_2</span><span class=\"o\">,</span> <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">_1</span><span class=\"o\">.</span><span class=\"n\">_3</span><span class=\"o\">,</span> <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">_2</span><span class=\"o\">)</span>\n      <span class=\"k\">val</span> <span class=\"n\">al</span> <span class=\"k\">=</span> <span class=\"n\">alignBizImgIds</span><span class=\"o\">(</span><span class=\"n\">dataMap</span><span class=\"o\">,</span> <span class=\"n\">bizMap</span><span class=\"o\">)(</span><span class=\"n\">rowindices</span><span class=\"o\">)</span>\n      <span class=\"k\">for</span> <span class=\"o\">{</span> <span class=\"n\">p</span> <span class=\"k\">&lt;-</span> <span class=\"n\">al</span>\n      <span class=\"o\">}</span> <span class=\"k\">yield</span> <span class=\"o\">{</span>\n        <span class=\"k\">val</span> <span class=\"n\">bid</span> <span class=\"k\">=</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">_2</span>\n        <span class=\"k\">val</span> <span class=\"n\">labs</span> <span class=\"k\">=</span> <span class=\"n\">labMap</span> <span class=\"k\">match</span>  <span class=\"o\">{</span>\n          <span class=\"k\">case</span> <span class=\"nc\">None</span> <span class=\"k\">=&gt;</span> <span class=\"nc\">Set</span><span class=\"o\">[</span><span class=\"kt\">Int</span><span class=\"o\">]()</span>\n          <span class=\"k\">case</span> <span class=\"n\">x</span> <span class=\"k\">=&gt;</span> <span class=\"o\">(</span><span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"o\">.</span><span class=\"n\">keySet</span><span class=\"o\">.</span><span class=\"n\">contains</span><span class=\"o\">(</span><span class=\"n\">bid</span><span class=\"o\">))</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"o\">(</span><span class=\"n\">bid</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"nc\">Set</span><span class=\"o\">[</span><span class=\"kt\">Int</span><span class=\"o\">]())</span>\n        <span class=\"o\">}</span>\n        <span class=\"n\">flatten1</span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">labs</span><span class=\"o\">)</span> \n      <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n  \n  <span class=\"c1\">// pre-computing and saving data as a val so method does not need to re-compute each time it is called. \n</span>  <span class=\"k\">lazy</span> <span class=\"k\">val</span> <span class=\"n\">data</span> <span class=\"k\">=</span> <span class=\"n\">alignLabels</span><span class=\"o\">(</span><span class=\"n\">dataMap</span><span class=\"o\">,</span> <span class=\"n\">bizMap</span><span class=\"o\">,</span> <span class=\"n\">labMap</span><span class=\"o\">)(</span><span class=\"n\">rowindices</span><span class=\"o\">)</span>\n  \n  <span class=\"c1\">// getter functions\n</span>  <span class=\"k\">def</span> <span class=\"n\">getImgIds</span> <span class=\"k\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"o\">(</span><span class=\"k\">_</span><span class=\"o\">.</span><span class=\"n\">_1</span><span class=\"o\">)</span>\n  <span class=\"k\">def</span> <span class=\"n\">getBizIds</span> <span class=\"k\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"o\">(</span><span class=\"k\">_</span><span class=\"o\">.</span><span class=\"n\">_2</span><span class=\"o\">)</span>\n  <span class=\"k\">def</span> <span class=\"n\">getImgVectors</span> <span class=\"k\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"o\">(</span><span class=\"k\">_</span><span class=\"o\">.</span><span class=\"n\">_3</span><span class=\"o\">)</span>\n  <span class=\"k\">def</span> <span class=\"n\">getBizLabels</span> <span class=\"k\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"o\">(</span><span class=\"k\">_</span><span class=\"o\">.</span><span class=\"n\">_4</span><span class=\"o\">)</span> \n  <span class=\"k\">def</span> <span class=\"n\">getImgCntsPerBiz</span> <span class=\"k\">=</span> <span class=\"n\">getBizIds</span><span class=\"o\">.</span><span class=\"n\">groupBy</span><span class=\"o\">(</span><span class=\"n\">identity</span><span class=\"o\">).</span><span class=\"n\">mapValues</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"k\">=&gt;</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">size</span><span class=\"o\">)</span> \n  \n<span class=\"o\">}</span></code></pre></figure>\n\n<h3 id=\"make-nd4j-dataset\">Make ND4J dataset</h3>\n\n<p>Last step is to create the data structure that DL4J needs for training convolutional nets.  That data structure is an <a href=\"http://nd4j.org/doc/org/nd4j/linalg/dataset/DataSet.html\">ND4J DataSet</a>.</p>\n\n<p>This is relatively straightforward once you figure out how to convert native Scala data structures to this type.</p>\n\n<p>Code below: <a href=\"https://github.com/brooksandrew/kaggle_yelp/blob/master/src/main/scala/modeling/processing/makeDataSets.scala\">makeDataSets.scala</a></p>\n\n<figure class=\"highlight\"><pre><code class=\"language-scala\" data-lang=\"scala\"><span class=\"k\">package</span> <span class=\"nn\">modeling.processing</span>\n\n<span class=\"k\">import</span> <span class=\"nn\">org.nd4j.linalg.dataset.</span><span class=\"o\">{</span><span class=\"nc\">DataSet</span><span class=\"o\">}</span>\n<span class=\"k\">import</span> <span class=\"nn\">org.nd4s.Implicits._</span> \n<span class=\"k\">import</span> <span class=\"nn\">org.nd4j.linalg.api.ndarray.INDArray</span>\n\n<span class=\"k\">import</span> <span class=\"nn\">alignedData._</span>\n\n<span class=\"k\">object</span> <span class=\"nc\">makeDataSets</span> <span class=\"o\">{</span>\n  \n  <span class=\"cm\">/** Creates DataSet object from the data structure of data structure from alignLables function in form List[(imgID, bizID, labels, pixelVector)]  */</span>\n  \n  <span class=\"k\">def</span> <span class=\"n\">makeDataSet</span><span class=\"o\">(</span><span class=\"n\">alignedData</span><span class=\"k\">:</span> <span class=\"kt\">alignedData</span><span class=\"o\">,</span> <span class=\"n\">bizClass</span><span class=\"k\">:</span> <span class=\"kt\">Int</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">DataSet</span> <span class=\"o\">=</span> <span class=\"o\">{</span>\n    <span class=\"k\">val</span> <span class=\"n\">alignedXData</span> <span class=\"k\">=</span> <span class=\"n\">alignedData</span><span class=\"o\">.</span><span class=\"n\">getImgVectors</span><span class=\"o\">.</span><span class=\"n\">toNDArray</span>\n    <span class=\"k\">val</span> <span class=\"n\">alignedLabs</span> <span class=\"k\">=</span> <span class=\"n\">alignedData</span><span class=\"o\">.</span><span class=\"n\">getBizLabels</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"k\">=&gt;</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">contains</span><span class=\"o\">(</span><span class=\"n\">bizClass</span><span class=\"o\">))</span> <span class=\"nc\">Vector</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"nc\">Vector</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">)).</span><span class=\"n\">toNDArray</span>\n    <span class=\"k\">new</span> <span class=\"nc\">DataSet</span><span class=\"o\">(</span><span class=\"n\">alignedXData</span><span class=\"o\">,</span> <span class=\"n\">alignedLabs</span><span class=\"o\">)</span> \n  <span class=\"o\">}</span>\n  \n  <span class=\"k\">def</span> <span class=\"n\">makeDataSetTE</span><span class=\"o\">(</span><span class=\"n\">alignedData</span><span class=\"k\">:</span> <span class=\"kt\">alignedData</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">INDArray</span> <span class=\"o\">=</span> <span class=\"o\">{</span>\n    <span class=\"n\">alignedData</span><span class=\"o\">.</span><span class=\"n\">getImgVectors</span><span class=\"o\">.</span><span class=\"n\">toNDArray</span>\n  <span class=\"o\">}</span>\n  \n<span class=\"o\">}</span></code></pre></figure>\n\n<h3 id=\"run\">Run</h3>\n\n<p>The code to actually run the image processing pipeline boils down to the following:</p>\n\n<p>Code below: snippet from <a href=\"https://github.com/brooksandrew/kaggle_yelp/blob/master/src/main/scala/modeling/main.scala\">main.scala</a></p>\n\n<figure class=\"highlight\"><pre><code class=\"language-scala\" data-lang=\"scala\"><span class=\"k\">import</span> <span class=\"nn\">io.readCsvData._</span>\n\n<span class=\"k\">import</span> <span class=\"nn\">processing.alignedData</span>\n<span class=\"k\">import</span> <span class=\"nn\">processing.images._</span>\n<span class=\"k\">import</span> <span class=\"nn\">processing.makeDataSets._</span>\n\n<span class=\"k\">object</span> <span class=\"nc\">runPipeline</span> <span class=\"o\">{</span>\n  <span class=\"k\">def</span> <span class=\"n\">main</span><span class=\"o\">(</span><span class=\"n\">args</span><span class=\"k\">:</span> <span class=\"kt\">Array</span><span class=\"o\">[</span><span class=\"kt\">String</span><span class=\"o\">])</span><span class=\"k\">:</span> <span class=\"kt\">Unit</span> <span class=\"o\">=</span> <span class=\"o\">{</span>\n    \n  <span class=\"c1\">// image processing on training data\n</span>  <span class=\"k\">val</span> <span class=\"n\">labMap</span> <span class=\"k\">=</span> <span class=\"n\">readBizLabels</span><span class=\"o\">(</span><span class=\"s\">\"data/labels/train.csv\"</span><span class=\"o\">)</span>\n  <span class=\"k\">val</span> <span class=\"n\">bizMap</span> <span class=\"k\">=</span> <span class=\"n\">readBiz2ImgLabels</span><span class=\"o\">(</span><span class=\"s\">\"data/labels/train_photo_to_biz_ids.csv\"</span><span class=\"o\">)</span>\n  <span class=\"k\">val</span> <span class=\"n\">imgs</span> <span class=\"k\">=</span> <span class=\"n\">getImageIds</span><span class=\"o\">(</span><span class=\"s\">\"data/images/train\"</span><span class=\"o\">,</span> <span class=\"n\">bizMap</span><span class=\"o\">,</span> <span class=\"n\">bizMap</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"o\">(</span><span class=\"k\">_</span><span class=\"o\">.</span><span class=\"n\">_2</span><span class=\"o\">).</span><span class=\"n\">toSet</span><span class=\"o\">.</span><span class=\"n\">toList</span><span class=\"o\">)</span>\n  <span class=\"k\">val</span> <span class=\"n\">dataMap</span> <span class=\"k\">=</span> <span class=\"n\">processImages</span><span class=\"o\">(</span><span class=\"n\">imgs</span><span class=\"o\">,</span> <span class=\"n\">resizeImgDim</span> <span class=\"k\">=</span> <span class=\"mi\">64</span><span class=\"o\">)</span>\n  <span class=\"k\">val</span> <span class=\"n\">alignedData</span> <span class=\"k\">=</span> <span class=\"k\">new</span> <span class=\"n\">alignedData</span><span class=\"o\">(</span><span class=\"n\">dataMap</span><span class=\"o\">,</span> <span class=\"n\">bizMap</span><span class=\"o\">,</span> <span class=\"nc\">Option</span><span class=\"o\">(</span><span class=\"n\">labMap</span><span class=\"o\">))()</span></code></pre></figure>\n\n<h2 id=\"pipeline---dl4j\">Pipeline - DL4J</h2>\n\n<p>I didn’t find many examples of DL4J applications in Scala… one of the reasons I’m documenting this project in detail.  However, there are some useful examples <a href=\"https://github.com/kogecoo/dl4j-0.4-examples-scala/tree/master/src/main/scala/org/deeplearning4j/examples\">here</a>.</p>\n\n<h3 id=\"batch-mode\">Batch-mode</h3>\n\n<p>This took some exploring to figure out.  The default speficification for DL4J networks that run with the ND4J DataSet do not train in batches.  That is, each epoch (full pass through the training examples) will train on all training examples in one computation step.  So all images, their data and corresponding weights must be held in memory at once.</p>\n\n<p>This hogs memory with all but the smallest of datasets.  I was running into heap space errors with just ~2,000 images sized 128 x 128.  After switching to batch-mode, I was able to train on tens of thousands of images without memory issues.</p>\n\n<p>Before I discovered this was the cause of my heap space problem, I posed my problem to the project contributors on the <a href=\"https://gitter.im/deeplearning4j/deeplearning4j\">DL4J Gitter</a>.  I was pleased to learned that the next release of DL4J (3.9) is planned to move some computational operations off heap.</p>\n\n<h4 id=\"how-to-use-batches\">How to use batches</h4>\n\n<p>It’s easier to figure this out now that the <a href=\"https://github.com/deeplearning4j/dl4j-0.4-examples/tree/master/src/main/java/org/deeplearning4j/examples/convolution\">DL4J examples repo</a> has a convolutional net example (MNIST) using batches, which as of a few weeks ago was not there.</p>\n\n<p>The biggest difference from mini-batch to full-batch mode is that you need to pass a <code class=\"highlighter-rouge\">MultipleEpochsIterator</code> object rather than a ND4J <code class=\"highlighter-rouge\">DataSet</code> to the <code class=\"highlighter-rouge\">fit</code> method of your <code class=\"highlighter-rouge\">MultiLayerNetwork</code> object.  My approach doesn’t fully embrace iterators for their intended purpose, but hey it works and made for a smooth transition using my pipeline.  You also need to add <code class=\"highlighter-rouge\">.miniBatch(true)</code> to your <code class=\"highlighter-rouge\">MultiLayerConfiguration.Builder</code>.</p>\n\n<p>The distinction between iterations and epochs can be slightly confusing when moving from full-batch to mini-batch mode.  If you’re not using miniBatches, the <code class=\"highlighter-rouge\">iterations</code> method is used to specify how many epochs you want.  However, when using batches, this is done directly in <code class=\"highlighter-rouge\">MultipleEpochsIterator</code> and <code class=\"highlighter-rouge\">iterations</code> can be set to 1.  Explained <a href=\"http://deeplearning4j.org/troubleshootingneuralnets\">here</a> in the DL4J documentation.</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-scala\" data-lang=\"scala\"><span class=\"k\">import</span> <span class=\"nn\">org.deeplearning4j.datasets.iterator.MultipleEpochsIterator</span>\n<span class=\"k\">import</span> <span class=\"nn\">org.deeplearning4j.datasets.iterator.impl.ListDataSetIterator</span>\n \n<span class=\"k\">val</span> <span class=\"n\">nbatches</span> <span class=\"k\">=</span> <span class=\"mi\">128</span>\n<span class=\"k\">val</span> <span class=\"n\">nepochs</span> <span class=\"k\">=</span> <span class=\"mi\">100</span>\n<span class=\"k\">val</span> <span class=\"n\">dsiterTr</span> <span class=\"k\">=</span> <span class=\"k\">new</span> <span class=\"nc\">ListDataSetIterator</span><span class=\"o\">(</span><span class=\"n\">trainTest</span><span class=\"o\">.</span><span class=\"n\">getTrain</span><span class=\"o\">.</span><span class=\"n\">asList</span><span class=\"o\">(),</span> <span class=\"n\">nbatch</span><span class=\"o\">)</span>\n<span class=\"k\">val</span> <span class=\"n\">dsiterTe</span> <span class=\"k\">=</span> <span class=\"k\">new</span> <span class=\"nc\">ListDataSetIterator</span><span class=\"o\">(</span><span class=\"n\">trainTest</span><span class=\"o\">.</span><span class=\"n\">getTest</span><span class=\"o\">.</span><span class=\"n\">asList</span><span class=\"o\">(),</span> <span class=\"n\">nbatch</span><span class=\"o\">)</span>\n<span class=\"k\">val</span> <span class=\"n\">epochitTr</span><span class=\"k\">:</span> <span class=\"kt\">MultipleEpochsIterator</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">MultipleEpochsIterator</span><span class=\"o\">(</span><span class=\"n\">nepochs</span><span class=\"o\">,</span> <span class=\"n\">dsiterTr</span><span class=\"o\">)</span>\n<span class=\"k\">val</span> <span class=\"n\">epochitTe</span><span class=\"k\">:</span> <span class=\"kt\">MultipleEpochsIterator</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">MultipleEpochsIterator</span><span class=\"o\">(</span><span class=\"n\">nepochs</span><span class=\"o\">,</span> <span class=\"n\">dsiterTe</span><span class=\"o\">)</span></code></pre></figure>\n\n<h3 id=\"train-convolutional-network\">Train convolutional network</h3>\n\n<p>This is the function that actually trains the convolutional net.  It’s is long, probably too long.  Lots of hyper-parameters hardcoded within that could be moved to function arguments or better yet, a config file.  However, I was running locally on laptop with lots of tinkering, so this worked fine for me.</p>\n\n<p>The CNN training function below does a lot: logging, test/train splitting, creating the <code class=\"highlighter-rouge\">MultipleEpochsIterator</code>, training, reporting performance on test data, and saving the trained models to file.</p>\n\n<p>I’ll save the intuition behind tuning for another post after I gain a better understanding myself on a more well posed problem.  For now I’ll just ramble about what I tried and what happened.</p>\n\n<p><strong>Layers:</strong> I observed from some papers benchmarking convolutional nets solving the MNIST problem that a single convolutional layer generates decent results (certainly better than a benchmark of random, at least enough get started with).  I trained with runs with up to three convolutional layers without errors, but my training was obviously slower (although not exponentially) and results were not any better than with one layer.  Next time I plan to start with one convolutional layer, start tuning other parameters to get above benchmark results… and then explore additional layers.</p>\n\n<p><strong># of samples:</strong> Training on all images took so much time, I didn’t have the patience to let it finish.  It took me about 2 days to run a watered down CNN on my laptop with 50,000 images.</p>\n\n<p><strong>nepochs:</strong> This is the number of passes through all the training records.  I’ve seen some networks with as few as 20 to as many as 1000 epochs.  <a href=\"http://deeplearning4j.org/earlystopping\">This</a> is the main idea.  There’s also an in-depth discussion about this <a href=\"http://neuralnetworksanddeeplearning.com/chap3.html\">here</a>.  I spent most of my tuning time trading off <code class=\"highlighter-rouge\">nepochs</code> and the # of samples.  I could tolerate training with lots of images to expose the network to a broader universe of features to learn… but only by cutting down the number of epochs to make run-time manageable.</p>\n\n<p><strong>nOut:</strong> This is the number feature maps.  I tried runs with 10 to 500, chosen mostly by reviewing configurations for other image problems and the example DL4J networks.</p>\n\n<p><strong>learningRate:</strong> From what I’ve read this is pretty important.  I didn’t fiddle with this much though.  I think I tried the commonly used .01 and .001.</p>\n\n<p><strong>nbatch:</strong> This is the # of records in each batch.  I tried 32, 64 and 128.  I’m not sure how much of a difference this makes for results vs. computation.</p>\n\n<p>Code below: <a href=\"https://github.com/brooksandrew/kaggle_yelp/blob/master/src/main/scala/modeling/training/cnnEpochs.scala\">cnnEpochs.scala</a>.  A simpler version using full-batch training is <a href=\"https://github.com/brooksandrew/kaggle_yelp/blob/master/src/main/scala/modeling/training/cnn.scala\">here</a>.</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-scala\" data-lang=\"scala\"><span class=\"k\">package</span> <span class=\"nn\">modeling.training</span>\n\n<span class=\"k\">import</span> <span class=\"nn\">modeling.processing.makeDataSets._</span>\n<span class=\"k\">import</span> <span class=\"nn\">modeling.io._</span>\n<span class=\"k\">import</span> <span class=\"nn\">modeling.processing.alignedData</span>\n<span class=\"k\">import</span> <span class=\"nn\">java.util.Random</span>\n<span class=\"k\">import</span> <span class=\"nn\">java.nio.file._</span>\n<span class=\"k\">import</span> <span class=\"nn\">java.io.</span><span class=\"o\">{</span><span class=\"nc\">DataOutputStream</span><span class=\"o\">,</span> <span class=\"nc\">File</span><span class=\"o\">}</span>\n<span class=\"k\">import</span> <span class=\"nn\">org.apache.commons.io.FileUtils</span>\n<span class=\"k\">import</span> <span class=\"nn\">org.deeplearning4j.eval.Evaluation</span>\n<span class=\"k\">import</span> <span class=\"nn\">org.deeplearning4j.nn.api.OptimizationAlgorithm</span>\n<span class=\"k\">import</span> <span class=\"nn\">org.deeplearning4j.nn.conf.layers.setup.ConvolutionLayerSetup</span>\n<span class=\"k\">import</span> <span class=\"nn\">org.deeplearning4j.nn.conf.layers.</span><span class=\"o\">{</span><span class=\"nc\">ConvolutionLayer</span><span class=\"o\">,</span> <span class=\"nc\">OutputLayer</span><span class=\"o\">,</span> <span class=\"nc\">SubsamplingLayer</span><span class=\"o\">,</span> <span class=\"nc\">DenseLayer</span><span class=\"o\">}</span>\n<span class=\"k\">import</span> <span class=\"nn\">org.deeplearning4j.nn.conf.</span><span class=\"o\">{</span><span class=\"nc\">MultiLayerConfiguration</span><span class=\"o\">,</span> <span class=\"nc\">NeuralNetConfiguration</span><span class=\"o\">}</span>\n<span class=\"k\">import</span> <span class=\"nn\">org.deeplearning4j.nn.multilayer.MultiLayerNetwork</span>\n<span class=\"k\">import</span> <span class=\"nn\">org.deeplearning4j.nn.weights.WeightInit</span>\n<span class=\"k\">import</span> <span class=\"nn\">org.deeplearning4j.optimize.api.IterationListener</span>\n<span class=\"k\">import</span> <span class=\"nn\">org.deeplearning4j.optimize.listeners.ScoreIterationListener</span>\n<span class=\"k\">import</span> <span class=\"nn\">org.nd4j.linalg.api.ndarray.INDArray</span>\n<span class=\"k\">import</span> <span class=\"nn\">org.nd4j.linalg.dataset.SplitTestAndTrain</span>\n<span class=\"k\">import</span> <span class=\"nn\">org.nd4j.linalg.factory.Nd4j</span>\n<span class=\"k\">import</span> <span class=\"nn\">org.nd4j.linalg.lossfunctions.LossFunctions</span>\n<span class=\"k\">import</span> <span class=\"nn\">org.slf4j.LoggerFactory</span>\n<span class=\"k\">import</span> <span class=\"nn\">scala.collection.JavaConverters._</span>\n<span class=\"k\">import</span> <span class=\"nn\">org.deeplearning4j.datasets.iterator.MultipleEpochsIterator</span>\n<span class=\"k\">import</span> <span class=\"nn\">org.deeplearning4j.datasets.iterator.impl.ListDataSetIterator</span>\n\n<span class=\"k\">object</span> <span class=\"nc\">cnnEpochs</span> <span class=\"o\">{</span>\n  \n  <span class=\"k\">def</span> <span class=\"n\">trainModelEpochs</span><span class=\"o\">(</span><span class=\"n\">alignedData</span><span class=\"k\">:</span> <span class=\"kt\">alignedData</span><span class=\"o\">,</span> <span class=\"n\">bizClass</span><span class=\"k\">:</span> <span class=\"kt\">Int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">saveNN</span><span class=\"k\">:</span> <span class=\"kt\">String</span> <span class=\"o\">=</span> <span class=\"s\">\"\"</span><span class=\"o\">)</span> <span class=\"k\">=</span> <span class=\"o\">{</span>\n    \n    <span class=\"k\">val</span> <span class=\"n\">ds</span> <span class=\"k\">=</span> <span class=\"n\">makeDataSet</span><span class=\"o\">(</span><span class=\"n\">alignedData</span><span class=\"o\">,</span> <span class=\"n\">bizClass</span><span class=\"o\">)</span>\n\n    <span class=\"n\">println</span><span class=\"o\">(</span><span class=\"s\">\"commence training!!\"</span><span class=\"o\">)</span>\n    <span class=\"n\">println</span><span class=\"o\">(</span><span class=\"s\">\"class for training: \"</span> <span class=\"o\">+</span> <span class=\"n\">bizClass</span><span class=\"o\">)</span>\n\n    <span class=\"k\">val</span> <span class=\"n\">begintime</span> <span class=\"k\">=</span> <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"n\">currentTimeMillis</span><span class=\"o\">()</span>\n  \n    <span class=\"k\">lazy</span> <span class=\"k\">val</span> <span class=\"n\">log</span> <span class=\"k\">=</span> <span class=\"nc\">LoggerFactory</span><span class=\"o\">.</span><span class=\"n\">getLogger</span><span class=\"o\">(</span><span class=\"n\">cnn</span><span class=\"o\">.</span><span class=\"n\">getClass</span><span class=\"o\">)</span>\n    <span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"o\">(</span><span class=\"s\">\"Begin time: \"</span> <span class=\"o\">+</span> <span class=\"n\">java</span><span class=\"o\">.</span><span class=\"n\">util</span><span class=\"o\">.</span><span class=\"nc\">Calendar</span><span class=\"o\">.</span><span class=\"n\">getInstance</span><span class=\"o\">().</span><span class=\"n\">getTime</span><span class=\"o\">())</span>\n  \n      <span class=\"k\">val</span> <span class=\"n\">nfeatures</span> <span class=\"k\">=</span> <span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">getFeatures</span><span class=\"o\">.</span><span class=\"n\">getRow</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">).</span><span class=\"n\">length</span> <span class=\"c1\">// hyper, hyper parameter\n</span>      \n      <span class=\"k\">val</span> <span class=\"n\">numRows</span> <span class=\"k\">=</span>  <span class=\"nc\">Math</span><span class=\"o\">.</span><span class=\"n\">sqrt</span><span class=\"o\">(</span><span class=\"n\">nfeatures</span><span class=\"o\">).</span><span class=\"n\">toInt</span> <span class=\"c1\">// numRows * numColumns must equal columns in initial data * channels\n</span>      <span class=\"k\">val</span> <span class=\"n\">numColumns</span> <span class=\"k\">=</span> <span class=\"nc\">Math</span><span class=\"o\">.</span><span class=\"n\">sqrt</span><span class=\"o\">(</span><span class=\"n\">nfeatures</span><span class=\"o\">).</span><span class=\"n\">toInt</span> <span class=\"c1\">// numRows * numColumns must equal columns in initial data * channels\n</span>      <span class=\"k\">val</span> <span class=\"n\">nChannels</span> <span class=\"k\">=</span> <span class=\"mi\">1</span> <span class=\"c1\">// would be 3 if color image w R,G,B\n</span>      <span class=\"k\">val</span> <span class=\"n\">outputNum</span> <span class=\"k\">=</span> <span class=\"mi\">2</span> <span class=\"c1\">// # of classes (# of columns in output)\n</span>      <span class=\"k\">val</span> <span class=\"n\">iterations</span> <span class=\"k\">=</span> <span class=\"mi\">1</span>\n      <span class=\"k\">val</span> <span class=\"n\">splitTrainNum</span> <span class=\"k\">=</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">ceil</span><span class=\"o\">(</span><span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">numExamples</span><span class=\"o\">*</span><span class=\"mf\">0.8</span><span class=\"o\">).</span><span class=\"n\">toInt</span> <span class=\"c1\">// 80/20 training/test split\n</span>      <span class=\"k\">val</span> <span class=\"n\">seed</span> <span class=\"k\">=</span> <span class=\"mi\">123</span>\n      <span class=\"k\">val</span> <span class=\"n\">listenerFreq</span> <span class=\"k\">=</span> <span class=\"mi\">1</span>\n      <span class=\"k\">val</span> <span class=\"n\">nepochs</span> <span class=\"k\">=</span> <span class=\"mi\">20</span>\n      <span class=\"k\">val</span> <span class=\"n\">nbatch</span> <span class=\"k\">=</span> <span class=\"mi\">128</span> <span class=\"c1\">// recommended between 16 and 128\n</span>      \n      <span class=\"c1\">//val nOutPar = 500 // default was 1000.  # of output nodes in first layer\n</span>  \n      <span class=\"n\">println</span><span class=\"o\">(</span><span class=\"s\">\"rows: \"</span> <span class=\"o\">+</span> <span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">getFeatures</span><span class=\"o\">.</span><span class=\"n\">size</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">))</span>\n      <span class=\"n\">println</span><span class=\"o\">(</span><span class=\"s\">\"columns: \"</span> <span class=\"o\">+</span> <span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">getFeatures</span><span class=\"o\">.</span><span class=\"n\">size</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">))</span>\n      \n      <span class=\"cm\">/**\n       *Set a neural network configuration with multiple layers\n       */</span>\n      <span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"o\">(</span><span class=\"s\">\"Load data....\"</span><span class=\"o\">)</span>\n      <span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">normalizeZeroMeanZeroUnitVariance</span><span class=\"o\">()</span> <span class=\"c1\">// this changes ds\n</span>      <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"n\">out</span><span class=\"o\">.</span><span class=\"n\">println</span><span class=\"o\">(</span><span class=\"s\">\"Loaded \"</span> <span class=\"o\">+</span> <span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">labelCounts</span><span class=\"o\">)</span>\n      <span class=\"nc\">Nd4j</span><span class=\"o\">.</span><span class=\"n\">shuffle</span><span class=\"o\">(</span><span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">getFeatureMatrix</span><span class=\"o\">,</span> <span class=\"k\">new</span> <span class=\"nc\">Random</span><span class=\"o\">(</span><span class=\"n\">seed</span><span class=\"o\">),</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"c1\">// this changes ds.  Shuffles rows\n</span>      <span class=\"nc\">Nd4j</span><span class=\"o\">.</span><span class=\"n\">shuffle</span><span class=\"o\">(</span><span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">getLabels</span><span class=\"o\">,</span> <span class=\"k\">new</span> <span class=\"nc\">Random</span><span class=\"o\">(</span><span class=\"n\">seed</span><span class=\"o\">),</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"c1\">// this changes ds.  Shuffles labels accordingly\n</span>      <span class=\"k\">val</span> <span class=\"n\">trainTest</span><span class=\"k\">:</span> <span class=\"kt\">SplitTestAndTrain</span> <span class=\"o\">=</span> <span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">splitTestAndTrain</span><span class=\"o\">(</span><span class=\"n\">splitTrainNum</span><span class=\"o\">,</span> <span class=\"k\">new</span> <span class=\"nc\">Random</span><span class=\"o\">(</span><span class=\"n\">seed</span><span class=\"o\">))</span> <span class=\"c1\">// Random Seed not needed here\n</span>      \n      \n      <span class=\"c1\">// creating epoch dataset iterator\n</span>      <span class=\"k\">val</span> <span class=\"n\">dsiterTr</span> <span class=\"k\">=</span> <span class=\"k\">new</span> <span class=\"nc\">ListDataSetIterator</span><span class=\"o\">(</span><span class=\"n\">trainTest</span><span class=\"o\">.</span><span class=\"n\">getTrain</span><span class=\"o\">.</span><span class=\"n\">asList</span><span class=\"o\">(),</span> <span class=\"n\">nbatch</span><span class=\"o\">)</span>\n      <span class=\"k\">val</span> <span class=\"n\">dsiterTe</span> <span class=\"k\">=</span> <span class=\"k\">new</span> <span class=\"nc\">ListDataSetIterator</span><span class=\"o\">(</span><span class=\"n\">trainTest</span><span class=\"o\">.</span><span class=\"n\">getTest</span><span class=\"o\">.</span><span class=\"n\">asList</span><span class=\"o\">(),</span> <span class=\"n\">nbatch</span><span class=\"o\">)</span>\n      <span class=\"k\">val</span> <span class=\"n\">epochitTr</span><span class=\"k\">:</span> <span class=\"kt\">MultipleEpochsIterator</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">MultipleEpochsIterator</span><span class=\"o\">(</span><span class=\"n\">nepochs</span><span class=\"o\">,</span> <span class=\"n\">dsiterTr</span><span class=\"o\">)</span>\n      <span class=\"k\">val</span> <span class=\"n\">epochitTe</span><span class=\"k\">:</span> <span class=\"kt\">MultipleEpochsIterator</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">MultipleEpochsIterator</span><span class=\"o\">(</span><span class=\"n\">nepochs</span><span class=\"o\">,</span> <span class=\"n\">dsiterTe</span><span class=\"o\">)</span>\n    \n      <span class=\"k\">val</span> <span class=\"n\">builder</span><span class=\"k\">:</span> <span class=\"kt\">MultiLayerConfiguration.Builder</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">NeuralNetConfiguration</span><span class=\"o\">.</span><span class=\"nc\">Builder</span><span class=\"o\">()</span>\n              <span class=\"o\">.</span><span class=\"n\">seed</span><span class=\"o\">(</span><span class=\"n\">seed</span><span class=\"o\">)</span>\n              <span class=\"o\">.</span><span class=\"n\">iterations</span><span class=\"o\">(</span><span class=\"n\">iterations</span><span class=\"o\">)</span>\n              <span class=\"o\">.</span><span class=\"n\">miniBatch</span><span class=\"o\">(</span><span class=\"kc\">true</span><span class=\"o\">)</span>\n              <span class=\"o\">.</span><span class=\"n\">optimizationAlgo</span><span class=\"o\">(</span><span class=\"nc\">OptimizationAlgorithm</span><span class=\"o\">.</span><span class=\"nc\">STOCHASTIC_GRADIENT_DESCENT</span><span class=\"o\">)</span>\n              <span class=\"o\">.</span><span class=\"n\">learningRate</span><span class=\"o\">(</span><span class=\"mf\">0.01</span><span class=\"o\">)</span>\n              <span class=\"o\">.</span><span class=\"n\">momentum</span><span class=\"o\">(</span><span class=\"mf\">0.9</span><span class=\"o\">)</span>\n              <span class=\"o\">.</span><span class=\"n\">list</span><span class=\"o\">(</span><span class=\"mi\">4</span><span class=\"o\">)</span>\n              <span class=\"o\">.</span><span class=\"n\">layer</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"k\">new</span> <span class=\"nc\">ConvolutionLayer</span><span class=\"o\">.</span><span class=\"nc\">Builder</span><span class=\"o\">(</span><span class=\"mi\">6</span><span class=\"o\">,</span><span class=\"mi\">6</span><span class=\"o\">)</span>\n                      <span class=\"o\">.</span><span class=\"n\">nIn</span><span class=\"o\">(</span><span class=\"n\">nChannels</span><span class=\"o\">)</span>\n                      <span class=\"o\">.</span><span class=\"n\">stride</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"c1\">// default stride(2,2)\n</span>                      <span class=\"o\">.</span><span class=\"n\">nOut</span><span class=\"o\">(</span><span class=\"mi\">20</span><span class=\"o\">)</span> <span class=\"c1\">// # of feature maps\n</span>                      <span class=\"o\">.</span><span class=\"n\">dropOut</span><span class=\"o\">(</span><span class=\"mf\">0.5</span><span class=\"o\">)</span>\n                      <span class=\"o\">.</span><span class=\"n\">activation</span><span class=\"o\">(</span><span class=\"s\">\"relu\"</span><span class=\"o\">)</span> <span class=\"c1\">// rectified linear units\n</span>                      <span class=\"o\">.</span><span class=\"n\">weightInit</span><span class=\"o\">(</span><span class=\"nc\">WeightInit</span><span class=\"o\">.</span><span class=\"nc\">RELU</span><span class=\"o\">)</span>\n                      <span class=\"o\">.</span><span class=\"n\">build</span><span class=\"o\">())</span>\n              <span class=\"o\">.</span><span class=\"n\">layer</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"k\">new</span> <span class=\"nc\">SubsamplingLayer</span><span class=\"o\">.</span><span class=\"nc\">Builder</span><span class=\"o\">(</span><span class=\"nc\">SubsamplingLayer</span><span class=\"o\">.</span><span class=\"nc\">PoolingType</span><span class=\"o\">.</span><span class=\"nc\">MAX</span><span class=\"o\">,</span> <span class=\"nc\">Array</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">))</span>\n                      <span class=\"o\">.</span><span class=\"n\">build</span><span class=\"o\">())</span>\n              <span class=\"o\">.</span><span class=\"n\">layer</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"k\">new</span> <span class=\"nc\">DenseLayer</span><span class=\"o\">.</span><span class=\"nc\">Builder</span><span class=\"o\">()</span>\n                      <span class=\"o\">.</span><span class=\"n\">nOut</span><span class=\"o\">(</span><span class=\"mi\">40</span><span class=\"o\">)</span>\n                      <span class=\"o\">.</span><span class=\"n\">activation</span><span class=\"o\">(</span><span class=\"s\">\"relu\"</span><span class=\"o\">)</span>\n                      <span class=\"o\">.</span><span class=\"n\">build</span><span class=\"o\">())</span>\n              <span class=\"o\">.</span><span class=\"n\">layer</span><span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"k\">new</span> <span class=\"nc\">OutputLayer</span><span class=\"o\">.</span><span class=\"nc\">Builder</span><span class=\"o\">(</span><span class=\"nc\">LossFunctions</span><span class=\"o\">.</span><span class=\"nc\">LossFunction</span><span class=\"o\">.</span><span class=\"nc\">MCXENT</span><span class=\"o\">)</span>\n                      <span class=\"o\">.</span><span class=\"n\">nOut</span><span class=\"o\">(</span><span class=\"n\">outputNum</span><span class=\"o\">)</span>\n                      <span class=\"o\">.</span><span class=\"n\">weightInit</span><span class=\"o\">(</span><span class=\"nc\">WeightInit</span><span class=\"o\">.</span><span class=\"nc\">XAVIER</span><span class=\"o\">)</span>\n                      <span class=\"o\">.</span><span class=\"n\">activation</span><span class=\"o\">(</span><span class=\"s\">\"softmax\"</span><span class=\"o\">)</span>\n                      <span class=\"o\">.</span><span class=\"n\">build</span><span class=\"o\">())</span>\n              <span class=\"o\">.</span><span class=\"n\">backprop</span><span class=\"o\">(</span><span class=\"kc\">true</span><span class=\"o\">).</span><span class=\"n\">pretrain</span><span class=\"o\">(</span><span class=\"kc\">false</span><span class=\"o\">)</span>\n              \n      <span class=\"k\">new</span> <span class=\"nc\">ConvolutionLayerSetup</span><span class=\"o\">(</span><span class=\"n\">builder</span><span class=\"o\">,</span> <span class=\"n\">numRows</span><span class=\"o\">,</span> <span class=\"n\">numColumns</span><span class=\"o\">,</span> <span class=\"n\">nChannels</span><span class=\"o\">)</span>\n              \n      <span class=\"k\">val</span> <span class=\"n\">conf</span><span class=\"k\">:</span> <span class=\"kt\">MultiLayerConfiguration</span> <span class=\"o\">=</span> <span class=\"n\">builder</span><span class=\"o\">.</span><span class=\"n\">build</span><span class=\"o\">()</span>\n\n      <span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"o\">(</span><span class=\"s\">\"Build model....\"</span><span class=\"o\">)</span>\n      <span class=\"k\">val</span> <span class=\"n\">model</span><span class=\"k\">:</span> <span class=\"kt\">MultiLayerNetwork</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">MultiLayerNetwork</span><span class=\"o\">(</span><span class=\"n\">conf</span><span class=\"o\">)</span>\n      <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">init</span><span class=\"o\">()</span> \n      <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">setListeners</span><span class=\"o\">(</span><span class=\"nc\">Seq</span><span class=\"o\">[</span><span class=\"kt\">IterationListener</span><span class=\"o\">](</span><span class=\"k\">new</span> <span class=\"nc\">ScoreIterationListener</span><span class=\"o\">(</span><span class=\"n\">listenerFreq</span><span class=\"o\">)).</span><span class=\"n\">asJava</span><span class=\"o\">)</span>\n\n      <span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"o\">(</span><span class=\"s\">\"Train model....\"</span><span class=\"o\">)</span>\n      <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"n\">out</span><span class=\"o\">.</span><span class=\"n\">println</span><span class=\"o\">(</span><span class=\"s\">\"Training on \"</span> <span class=\"o\">+</span> <span class=\"n\">dsiterTr</span><span class=\"o\">.</span><span class=\"n\">getLabels</span><span class=\"o\">)</span> <span class=\"c1\">// this might return null\n</span>      <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"o\">(</span><span class=\"n\">epochitTr</span><span class=\"o\">)</span>\n      \n      <span class=\"c1\">// TRAINING\n</span>      <span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"o\">(</span><span class=\"s\">\"Evaluate model....\"</span><span class=\"o\">)</span>\n      <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"n\">out</span><span class=\"o\">.</span><span class=\"n\">println</span><span class=\"o\">(</span><span class=\"s\">\"Testing on ...\"</span><span class=\"o\">)</span>\n      <span class=\"k\">val</span> <span class=\"n\">eval</span> <span class=\"k\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Evaluation</span><span class=\"o\">(</span><span class=\"n\">outputNum</span><span class=\"o\">)</span>\n        <span class=\"k\">while</span><span class=\"o\">(</span><span class=\"n\">epochitTe</span><span class=\"o\">.</span><span class=\"n\">hasNext</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">val</span> <span class=\"n\">testDS</span> <span class=\"k\">=</span> <span class=\"n\">epochitTe</span><span class=\"o\">.</span><span class=\"n\">next</span><span class=\"o\">(</span><span class=\"n\">nbatch</span><span class=\"o\">)</span>\n            <span class=\"k\">val</span> <span class=\"n\">output</span><span class=\"k\">:</span> <span class=\"kt\">INDArray</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">output</span><span class=\"o\">(</span><span class=\"n\">testDS</span><span class=\"o\">.</span><span class=\"n\">getFeatureMatrix</span><span class=\"o\">)</span>\n            <span class=\"n\">eval</span><span class=\"o\">.</span><span class=\"n\">eval</span><span class=\"o\">(</span><span class=\"n\">testDS</span><span class=\"o\">.</span><span class=\"n\">getLabels</span><span class=\"o\">(),</span> <span class=\"n\">output</span><span class=\"o\">)</span>\n        <span class=\"o\">}</span>\n        <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"n\">out</span><span class=\"o\">.</span><span class=\"n\">println</span><span class=\"o\">(</span><span class=\"n\">eval</span><span class=\"o\">.</span><span class=\"n\">stats</span><span class=\"o\">())</span>\n      \n      \n      <span class=\"k\">val</span> <span class=\"n\">endtime</span> <span class=\"k\">=</span> <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"n\">currentTimeMillis</span><span class=\"o\">()</span>\n      <span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"o\">(</span><span class=\"s\">\"End time: \"</span> <span class=\"o\">+</span> <span class=\"n\">java</span><span class=\"o\">.</span><span class=\"n\">util</span><span class=\"o\">.</span><span class=\"nc\">Calendar</span><span class=\"o\">.</span><span class=\"n\">getInstance</span><span class=\"o\">().</span><span class=\"n\">getTime</span><span class=\"o\">())</span>\n      <span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"o\">(</span><span class=\"s\">\"computation time: \"</span> <span class=\"o\">+</span> <span class=\"o\">(</span><span class=\"n\">endtime</span><span class=\"o\">-</span><span class=\"n\">begintime</span><span class=\"o\">)/</span><span class=\"mf\">1000.0</span> <span class=\"o\">+</span> <span class=\"s\">\" seconds\"</span><span class=\"o\">)</span>\n      \n      <span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"o\">(</span><span class=\"s\">\"Write results....\"</span><span class=\"o\">)</span>\n      \n      <span class=\"k\">if</span><span class=\"o\">(!</span><span class=\"n\">saveNN</span><span class=\"o\">.</span><span class=\"n\">isEmpty</span><span class=\"o\">)</span> <span class=\"o\">{</span> \n        <span class=\"c1\">// model config\n</span>        <span class=\"nc\">FileUtils</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"nc\">File</span><span class=\"o\">(</span><span class=\"n\">saveNN</span> <span class=\"o\">+</span> <span class=\"s\">\".json\"</span><span class=\"o\">),</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">getLayerWiseConfigurations</span><span class=\"o\">().</span><span class=\"n\">toJson</span><span class=\"o\">())</span> \n        \n        <span class=\"c1\">// model parameters\n</span>        <span class=\"k\">val</span> <span class=\"n\">dos</span><span class=\"k\">:</span> <span class=\"kt\">DataOutputStream</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">DataOutputStream</span><span class=\"o\">(</span><span class=\"nc\">Files</span><span class=\"o\">.</span><span class=\"n\">newOutputStream</span><span class=\"o\">(</span><span class=\"nc\">Paths</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"o\">(</span><span class=\"n\">saveNN</span> <span class=\"o\">+</span> <span class=\"s\">\".bin\"</span><span class=\"o\">)))</span>\n        <span class=\"nc\">Nd4j</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"o\">(</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">params</span><span class=\"o\">(),</span> <span class=\"n\">dos</span><span class=\"o\">)</span>\n      <span class=\"o\">}</span>\n    \n      <span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"o\">(</span><span class=\"s\">\"****************Example finished********************\"</span><span class=\"o\">)</span>\n          \n  <span class=\"o\">}</span>\n\n  \n<span class=\"o\">}</span></code></pre></figure>\n\n<h3 id=\"saveload-networks\">Save/load networks</h3>\n\n<p>This is definitely something you’ll want to do.  These things take too long to train to not save immediately.</p>\n\n<p><code class=\"highlighter-rouge\">saveNN</code> is pretty straightforward.  It saves a .json file with the network configuration and a .bin with all the weights and parameters of the network you just trained.</p>\n\n<p><code class=\"highlighter-rouge\">loadNN</code> just reads back the .json and .bin file you created with <code class=\"highlighter-rouge\">saveNN</code> to a <code class=\"highlighter-rouge\">MultiLayerNetwork</code> object that you can use to score new test data.</p>\n\n<p>Code below: <a href=\"https://github.com/brooksandrew/kaggle_yelp/blob/master/src/main/scala/modeling/io/nn.scala\">nn.scala</a></p>\n\n<figure class=\"highlight\"><pre><code class=\"language-scala\" data-lang=\"scala\"><span class=\"k\">package</span> <span class=\"nn\">modeling.io</span>\n\n<span class=\"k\">import</span> <span class=\"nn\">org.deeplearning4j.nn.conf.</span><span class=\"o\">{</span><span class=\"nc\">GradientNormalization</span><span class=\"o\">,</span> <span class=\"nc\">MultiLayerConfiguration</span><span class=\"o\">,</span> <span class=\"nc\">NeuralNetConfiguration</span><span class=\"o\">}</span>\n<span class=\"k\">import</span> <span class=\"nn\">org.deeplearning4j.nn.multilayer.MultiLayerNetwork</span>\n\n<span class=\"k\">import</span> <span class=\"nn\">org.nd4j.linalg.factory.Nd4j</span>\n\n<span class=\"k\">import</span> <span class=\"nn\">java.io.File</span>\n<span class=\"k\">import</span> <span class=\"nn\">org.apache.commons.io.FileUtils</span>\n<span class=\"k\">import</span> <span class=\"nn\">java.io.</span><span class=\"o\">{</span><span class=\"nc\">DataInputStream</span><span class=\"o\">,</span> <span class=\"nc\">DataOutputStream</span><span class=\"o\">,</span> <span class=\"nc\">FileInputStream</span><span class=\"o\">}</span>\n<span class=\"k\">import</span> <span class=\"nn\">java.nio.file.</span><span class=\"o\">{</span><span class=\"nc\">Files</span><span class=\"o\">,</span> <span class=\"nc\">Paths</span><span class=\"o\">}</span>\n\n\n<span class=\"k\">object</span> <span class=\"nc\">nn</span> <span class=\"o\">{</span>\n  \n  <span class=\"k\">def</span> <span class=\"n\">loadNN</span><span class=\"o\">(</span><span class=\"nc\">NNconfig</span><span class=\"k\">:</span> <span class=\"kt\">String</span><span class=\"o\">,</span> <span class=\"nc\">NNparams</span><span class=\"k\">:</span> <span class=\"kt\">String</span><span class=\"o\">)</span> <span class=\"k\">=</span> <span class=\"o\">{</span>\n    <span class=\"c1\">// get neural network config\n</span>    <span class=\"k\">val</span> <span class=\"n\">confFromJson</span><span class=\"k\">:</span> <span class=\"kt\">MultiLayerConfiguration</span> <span class=\"o\">=</span> <span class=\"nc\">MultiLayerConfiguration</span><span class=\"o\">.</span><span class=\"n\">fromJson</span><span class=\"o\">(</span><span class=\"nc\">FileUtils</span><span class=\"o\">.</span><span class=\"n\">readFileToString</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"nc\">File</span><span class=\"o\">(</span><span class=\"nc\">NNconfig</span><span class=\"o\">)))</span>\n    \n     <span class=\"c1\">// get neural network parameters \n</span>    <span class=\"k\">val</span> <span class=\"n\">dis</span><span class=\"k\">:</span> <span class=\"kt\">DataInputStream</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">DataInputStream</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"nc\">FileInputStream</span><span class=\"o\">(</span><span class=\"nc\">NNparams</span><span class=\"o\">))</span>\n    <span class=\"k\">val</span> <span class=\"n\">newParams</span> <span class=\"k\">=</span> <span class=\"nc\">Nd4j</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"o\">(</span><span class=\"n\">dis</span><span class=\"o\">)</span>\n    \n     <span class=\"c1\">// creating network object\n</span>    <span class=\"k\">val</span> <span class=\"n\">savedNetwork</span><span class=\"k\">:</span> <span class=\"kt\">MultiLayerNetwork</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">MultiLayerNetwork</span><span class=\"o\">(</span><span class=\"n\">confFromJson</span><span class=\"o\">)</span>\n    <span class=\"n\">savedNetwork</span><span class=\"o\">.</span><span class=\"n\">init</span><span class=\"o\">()</span>\n    <span class=\"n\">savedNetwork</span><span class=\"o\">.</span><span class=\"n\">setParameters</span><span class=\"o\">(</span><span class=\"n\">newParams</span><span class=\"o\">)</span>\n    \n    <span class=\"n\">savedNetwork</span>\n  <span class=\"o\">}</span>\n  \n  <span class=\"k\">def</span> <span class=\"n\">saveNN</span><span class=\"o\">(</span><span class=\"n\">model</span><span class=\"k\">:</span> <span class=\"kt\">MultiLayerNetwork</span><span class=\"o\">,</span> <span class=\"nc\">NNconfig</span><span class=\"k\">:</span> <span class=\"kt\">String</span><span class=\"o\">,</span> <span class=\"nc\">NNparams</span><span class=\"k\">:</span> <span class=\"kt\">String</span><span class=\"o\">)</span> <span class=\"k\">=</span> <span class=\"o\">{</span>\n    <span class=\"c1\">// save neural network config\n</span>    <span class=\"nc\">FileUtils</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"nc\">File</span><span class=\"o\">(</span><span class=\"nc\">NNconfig</span><span class=\"o\">),</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">getLayerWiseConfigurations</span><span class=\"o\">().</span><span class=\"n\">toJson</span><span class=\"o\">())</span> \n    \n    <span class=\"c1\">// save neural network parms\n</span>    <span class=\"k\">val</span> <span class=\"n\">dos</span><span class=\"k\">:</span> <span class=\"kt\">DataOutputStream</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">DataOutputStream</span><span class=\"o\">(</span><span class=\"nc\">Files</span><span class=\"o\">.</span><span class=\"n\">newOutputStream</span><span class=\"o\">(</span><span class=\"nc\">Paths</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"o\">(</span><span class=\"nc\">NNparams</span><span class=\"o\">)))</span>\n    <span class=\"nc\">Nd4j</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"o\">(</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">params</span><span class=\"o\">(),</span> <span class=\"n\">dos</span><span class=\"o\">)</span>\n  <span class=\"o\">}</span>\n  \n<span class=\"o\">}</span></code></pre></figure>\n\n<h3 id=\"scoring\">Scoring</h3>\n\n<p>I won’t say much here, since I didn’t end up putting much emphasis on this step for reasons explained at the beginning of this post.</p>\n\n<p>My scoring approach assigns business-level labels by averaging the image-level predictions.  I classify a business as label “0” if the average of the probabilities across all of its images belonging class “0” is greater than 0.5.</p>\n\n<p>Code below: <a href=\"https://github.com/brooksandrew/kaggle_yelp/blob/master/src/main/scala/modeling/processing/scoring.scala\">scoring.scala</a></p>\n\n<figure class=\"highlight\"><pre><code class=\"language-scala\" data-lang=\"scala\"><span class=\"k\">package</span> <span class=\"nn\">modeling.processing</span>\n\n<span class=\"k\">import</span> <span class=\"nn\">org.nd4j.linalg.api.ndarray.INDArray</span>\n<span class=\"k\">import</span> <span class=\"nn\">org.deeplearning4j.nn.multilayer.MultiLayerNetwork</span>\n\n<span class=\"k\">object</span> <span class=\"nc\">scoring</span> <span class=\"o\">{</span>\n  \n  <span class=\"k\">def</span> <span class=\"n\">scoreModel</span><span class=\"o\">(</span><span class=\"n\">model</span><span class=\"k\">:</span> <span class=\"kt\">MultiLayerNetwork</span><span class=\"o\">,</span> <span class=\"n\">ds</span><span class=\"k\">:</span> <span class=\"kt\">INDArray</span><span class=\"o\">)</span> <span class=\"k\">=</span> <span class=\"o\">{</span>\n    <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">output</span><span class=\"o\">(</span><span class=\"n\">ds</span><span class=\"o\">)</span>\n  <span class=\"o\">}</span>\n  \n  <span class=\"cm\">/** Take model predictions from scoreModel and merge with alignedData*/</span>\n  \n  <span class=\"k\">def</span> <span class=\"n\">aggImgScores2Biz</span><span class=\"o\">(</span><span class=\"n\">scores</span><span class=\"k\">:</span> <span class=\"kt\">INDArray</span><span class=\"o\">,</span> <span class=\"n\">alignedData</span><span class=\"k\">:</span> <span class=\"kt\">alignedData</span> <span class=\"o\">)</span> <span class=\"k\">=</span> <span class=\"o\">{</span>\n    <span class=\"n\">assert</span><span class=\"o\">(</span><span class=\"n\">scores</span><span class=\"o\">.</span><span class=\"n\">size</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">==</span> <span class=\"n\">alignedData</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">length</span><span class=\"o\">,</span> <span class=\"s\">\"alignedData and scores length are different.  They must be equal\"</span><span class=\"o\">)</span>\n    <span class=\"k\">def</span> <span class=\"n\">getRowIndices4Biz</span><span class=\"o\">(</span><span class=\"n\">mylist</span><span class=\"k\">:</span> <span class=\"kt\">List</span><span class=\"o\">[</span><span class=\"kt\">String</span><span class=\"o\">],</span> <span class=\"n\">mybiz</span><span class=\"k\">:</span> <span class=\"kt\">String</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">List</span><span class=\"o\">[</span><span class=\"kt\">Int</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"n\">mylist</span><span class=\"o\">.</span><span class=\"n\">zipWithIndex</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"k\">=&gt;</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">_1</span> <span class=\"o\">==</span> <span class=\"n\">mybiz</span><span class=\"o\">).</span><span class=\"n\">map</span><span class=\"o\">(</span><span class=\"k\">_</span><span class=\"o\">.</span><span class=\"n\">_2</span><span class=\"o\">)</span>\n    <span class=\"k\">def</span> <span class=\"n\">mean</span><span class=\"o\">(</span><span class=\"n\">xs</span><span class=\"k\">:</span> <span class=\"kt\">List</span><span class=\"o\">[</span><span class=\"kt\">Double</span><span class=\"o\">])</span> <span class=\"k\">=</span> <span class=\"n\">xs</span><span class=\"o\">.</span><span class=\"n\">sum</span> <span class=\"o\">/</span> <span class=\"n\">xs</span><span class=\"o\">.</span><span class=\"n\">size</span>\n\n    <span class=\"n\">alignedData</span><span class=\"o\">.</span><span class=\"n\">getBizIds</span><span class=\"o\">.</span><span class=\"n\">distinct</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"k\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">{</span>\n      <span class=\"k\">val</span> <span class=\"n\">irows</span> <span class=\"k\">=</span> <span class=\"n\">getRowIndices4Biz</span><span class=\"o\">(</span><span class=\"n\">alignedData</span><span class=\"o\">.</span><span class=\"n\">getBizIds</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n      <span class=\"k\">val</span> <span class=\"n\">ret</span> <span class=\"k\">=</span> <span class=\"k\">for</span><span class=\"o\">(</span><span class=\"n\">row</span> <span class=\"k\">&lt;-</span> <span class=\"n\">irows</span><span class=\"o\">)</span> <span class=\"k\">yield</span> <span class=\"n\">scores</span><span class=\"o\">.</span><span class=\"n\">getRow</span><span class=\"o\">(</span><span class=\"n\">row</span><span class=\"o\">).</span><span class=\"n\">getColumn</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">).</span><span class=\"n\">toString</span><span class=\"o\">.</span><span class=\"n\">toDouble</span>\n      <span class=\"n\">mean</span><span class=\"o\">(</span><span class=\"n\">ret</span><span class=\"o\">)</span>\n    <span class=\"o\">}))</span>\n    \n  <span class=\"o\">}</span>\n  \n<span class=\"o\">}</span></code></pre></figure>\n\n<h3 id=\"submit-to-kaggle\">Submit to Kaggle</h3>\n\n<p>Also not much to say here, but <a href=\"https://github.com/brooksandrew/kaggle_yelp/blob/master/src/main/scala/modeling/processing/kaggleSubmission.scala\">this</a> is how I aggregated image predictions to business scores for each model.  And <a href=\"https://github.com/brooksandrew/kaggle_yelp/blob/master/src/main/scala/modeling/io/kaggleSubmission.scala\">this</a> is the code to generate the output CSV for Kaggle.</p>\n\n<h3 id=\"run-1\">Run</h3>\n\n<p>The whole project can be run from <a href=\"https://github.com/brooksandrew/kaggle_yelp/blob/master/src/main/scala/modeling/main.scala\">main.scala</a>.  Here it is:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-scala\" data-lang=\"scala\"><span class=\"k\">package</span> <span class=\"nn\">modeling</span>\n\n<span class=\"k\">import</span> <span class=\"nn\">io.nn._</span>\n<span class=\"k\">import</span> <span class=\"nn\">io.kaggleSubmission._</span> \n<span class=\"k\">import</span> <span class=\"nn\">io.readCsvData._</span>\n\n<span class=\"k\">import</span> <span class=\"nn\">processing.alignedData</span>\n<span class=\"k\">import</span> <span class=\"nn\">processing.images._</span>\n<span class=\"k\">import</span> <span class=\"nn\">processing.kaggleSubmission._</span>\n<span class=\"k\">import</span> <span class=\"nn\">processing.makeDataSets._</span>\n<span class=\"k\">import</span> <span class=\"nn\">processing.scoring._</span>\n\n<span class=\"k\">import</span> <span class=\"nn\">training.cnn._</span>\n<span class=\"k\">import</span> <span class=\"nn\">training.cnnEpochs._</span>\n\n<span class=\"k\">object</span> <span class=\"nc\">runPipeline</span> <span class=\"o\">{</span>\n  <span class=\"k\">def</span> <span class=\"n\">main</span><span class=\"o\">(</span><span class=\"n\">args</span><span class=\"k\">:</span> <span class=\"kt\">Array</span><span class=\"o\">[</span><span class=\"kt\">String</span><span class=\"o\">])</span><span class=\"k\">:</span> <span class=\"kt\">Unit</span> <span class=\"o\">=</span> <span class=\"o\">{</span>\n    \n  <span class=\"c1\">// image processing on training data\n</span>  <span class=\"k\">val</span> <span class=\"n\">labMap</span> <span class=\"k\">=</span> <span class=\"n\">readBizLabels</span><span class=\"o\">(</span><span class=\"s\">\"data/labels/train.csv\"</span><span class=\"o\">)</span>\n  <span class=\"k\">val</span> <span class=\"n\">bizMap</span> <span class=\"k\">=</span> <span class=\"n\">readBiz2ImgLabels</span><span class=\"o\">(</span><span class=\"s\">\"data/labels/train_photo_to_biz_ids.csv\"</span><span class=\"o\">)</span>\n  <span class=\"k\">val</span> <span class=\"n\">imgs</span> <span class=\"k\">=</span> <span class=\"n\">getImageIds</span><span class=\"o\">(</span><span class=\"s\">\"data/images/train\"</span><span class=\"o\">,</span> <span class=\"n\">bizMap</span><span class=\"o\">,</span> <span class=\"n\">bizMap</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"o\">(</span><span class=\"k\">_</span><span class=\"o\">.</span><span class=\"n\">_2</span><span class=\"o\">).</span><span class=\"n\">toSet</span><span class=\"o\">.</span><span class=\"n\">toList</span><span class=\"o\">).</span><span class=\"n\">slice</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">20000</span><span class=\"o\">)</span> <span class=\"c1\">// 20000 images\n</span>  <span class=\"k\">val</span> <span class=\"n\">dataMap</span> <span class=\"k\">=</span> <span class=\"n\">processImages</span><span class=\"o\">(</span><span class=\"n\">imgs</span><span class=\"o\">,</span> <span class=\"n\">resizeImgDim</span> <span class=\"k\">=</span> <span class=\"mi\">128</span><span class=\"o\">)</span> \n  <span class=\"k\">val</span> <span class=\"n\">alignedData</span> <span class=\"k\">=</span> <span class=\"k\">new</span> <span class=\"n\">alignedData</span><span class=\"o\">(</span><span class=\"n\">dataMap</span><span class=\"o\">,</span> <span class=\"n\">bizMap</span><span class=\"o\">,</span> <span class=\"nc\">Option</span><span class=\"o\">(</span><span class=\"n\">labMap</span><span class=\"o\">))()</span>\n  \n  <span class=\"c1\">// training (one model/class at a time). Many microparameters hardcoded within\n</span>  <span class=\"k\">val</span> <span class=\"n\">cnn0</span> <span class=\"k\">=</span> <span class=\"n\">trainModelEpochs</span><span class=\"o\">(</span><span class=\"n\">alignedData</span><span class=\"o\">,</span> <span class=\"n\">bizClass</span> <span class=\"k\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">saveNN</span> <span class=\"k\">=</span> <span class=\"s\">\"results/modelsV0/model0\"</span><span class=\"o\">)</span> \n  <span class=\"k\">val</span> <span class=\"n\">cnn1</span> <span class=\"k\">=</span> <span class=\"n\">trainModelEpochs</span><span class=\"o\">(</span><span class=\"n\">alignedData</span><span class=\"o\">,</span> <span class=\"n\">bizClass</span> <span class=\"k\">=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">saveNN</span> <span class=\"k\">=</span> <span class=\"s\">\"results/modelsV0/model1\"</span><span class=\"o\">)</span> \n  <span class=\"k\">val</span> <span class=\"n\">cnn2</span> <span class=\"k\">=</span> <span class=\"n\">trainModelEpochs</span><span class=\"o\">(</span><span class=\"n\">alignedData</span><span class=\"o\">,</span> <span class=\"n\">bizClass</span> <span class=\"k\">=</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">saveNN</span> <span class=\"k\">=</span> <span class=\"s\">\"results/modelsV0/model2\"</span><span class=\"o\">)</span>\n  <span class=\"k\">val</span> <span class=\"n\">cnn3</span> <span class=\"k\">=</span> <span class=\"n\">trainModelEpochs</span><span class=\"o\">(</span><span class=\"n\">alignedData</span><span class=\"o\">,</span> <span class=\"n\">bizClass</span> <span class=\"k\">=</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"n\">saveNN</span> <span class=\"k\">=</span> <span class=\"s\">\"results/modelsV0/model3\"</span><span class=\"o\">)</span>\n  <span class=\"k\">val</span> <span class=\"n\">cnn4</span> <span class=\"k\">=</span> <span class=\"n\">trainModelEpochs</span><span class=\"o\">(</span><span class=\"n\">alignedData</span><span class=\"o\">,</span> <span class=\"n\">bizClass</span> <span class=\"k\">=</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"n\">saveNN</span> <span class=\"k\">=</span> <span class=\"s\">\"results/modelsV0/model4\"</span><span class=\"o\">)</span>\n  <span class=\"k\">val</span> <span class=\"n\">cnn5</span> <span class=\"k\">=</span> <span class=\"n\">trainModelEpochs</span><span class=\"o\">(</span><span class=\"n\">alignedData</span><span class=\"o\">,</span> <span class=\"n\">bizClass</span> <span class=\"k\">=</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"n\">saveNN</span> <span class=\"k\">=</span> <span class=\"s\">\"results/modelsV0/model5\"</span><span class=\"o\">)</span>\n  <span class=\"k\">val</span> <span class=\"n\">cnn6</span> <span class=\"k\">=</span> <span class=\"n\">trainModelEpochs</span><span class=\"o\">(</span><span class=\"n\">alignedData</span><span class=\"o\">,</span> <span class=\"n\">bizClass</span> <span class=\"k\">=</span> <span class=\"mi\">6</span><span class=\"o\">,</span> <span class=\"n\">saveNN</span> <span class=\"k\">=</span> <span class=\"s\">\"results/modelsV0/model6\"</span><span class=\"o\">)</span>\n  <span class=\"k\">val</span> <span class=\"n\">cnn7</span> <span class=\"k\">=</span> <span class=\"n\">trainModelEpochs</span><span class=\"o\">(</span><span class=\"n\">alignedData</span><span class=\"o\">,</span> <span class=\"n\">bizClass</span> <span class=\"k\">=</span> <span class=\"mi\">7</span><span class=\"o\">,</span> <span class=\"n\">saveNN</span> <span class=\"k\">=</span> <span class=\"s\">\"results/modelsV0/model7\"</span><span class=\"o\">)</span>\n  <span class=\"k\">val</span> <span class=\"n\">cnn8</span> <span class=\"k\">=</span> <span class=\"n\">trainModelEpochs</span><span class=\"o\">(</span><span class=\"n\">alignedData</span><span class=\"o\">,</span> <span class=\"n\">bizClass</span> <span class=\"k\">=</span> <span class=\"mi\">8</span><span class=\"o\">,</span> <span class=\"n\">saveNN</span> <span class=\"k\">=</span> <span class=\"s\">\"results/modelsV0/model8\"</span><span class=\"o\">)</span>\n\n  <span class=\"c1\">// processing test data for scoring\n</span>  <span class=\"k\">val</span> <span class=\"n\">bizMapTE</span> <span class=\"k\">=</span> <span class=\"n\">readBiz2ImgLabels</span><span class=\"o\">(</span><span class=\"s\">\"data/labels/test_photo_to_biz.csv\"</span><span class=\"o\">)</span>\n  <span class=\"k\">val</span> <span class=\"n\">imgsTE</span> <span class=\"k\">=</span> <span class=\"n\">getImageIds</span><span class=\"o\">(</span><span class=\"s\">\"data/images/test/\"</span><span class=\"o\">,</span> <span class=\"n\">bizMapTE</span><span class=\"o\">,</span> <span class=\"n\">bizMapTE</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"o\">(</span><span class=\"k\">_</span><span class=\"o\">.</span><span class=\"n\">_2</span><span class=\"o\">).</span><span class=\"n\">toSet</span><span class=\"o\">.</span><span class=\"n\">toList</span><span class=\"o\">)</span>\n  <span class=\"k\">val</span> <span class=\"n\">dataMapTE</span> <span class=\"k\">=</span> <span class=\"n\">processImages</span><span class=\"o\">(</span><span class=\"n\">imgsTE</span><span class=\"o\">,</span> <span class=\"n\">resizeImgDim</span> <span class=\"k\">=</span> <span class=\"mi\">128</span><span class=\"o\">)</span>\n  <span class=\"k\">val</span> <span class=\"n\">alignedDataTE</span> <span class=\"k\">=</span> <span class=\"k\">new</span> <span class=\"n\">alignedData</span><span class=\"o\">(</span><span class=\"n\">dataMapTE</span><span class=\"o\">,</span> <span class=\"n\">bizMapTE</span><span class=\"o\">,</span> <span class=\"nc\">None</span><span class=\"o\">)()</span>\n  \n  <span class=\"c1\">// creating csv file to submit to kaggle (scores all models)\n</span>  <span class=\"k\">val</span> <span class=\"n\">kaggleResults</span> <span class=\"k\">=</span> <span class=\"n\">createKaggleSubmitObj</span><span class=\"o\">(</span><span class=\"n\">alignedDataTE</span><span class=\"o\">,</span> <span class=\"s\">\"results/ModelsV0/\"</span><span class=\"o\">)</span>\n  <span class=\"k\">val</span> <span class=\"n\">kaggleSubmitResults</span> <span class=\"k\">=</span> <span class=\"n\">writeKaggleSubmissionFile</span><span class=\"o\">(</span><span class=\"s\">\"results/kaggleSubmission/kaggleSubmitFile.csv\"</span><span class=\"o\">,</span> <span class=\"n\">kaggleResults</span><span class=\"o\">,</span> <span class=\"n\">thresh</span> <span class=\"k\">=</span> <span class=\"mf\">0.5</span><span class=\"o\">)</span></code></pre></figure>\n\n<h1 id=\"thoughts\">Thoughts</h1>\n\n<p>This was my first foray into deep neural networks.  I haven’t used <a href=\"http://deeplearning.net/software/theano/\">theano</a> or any of the other widely used implementations out there, so I unfortunately don’t have much to compare my experience to.</p>\n\n<p>I will say that the current documentation will only take you so far.  I spent a lot of time reading <a href=\"http://neuralnetworksanddeeplearning.com/index.html\">Neural Networks and Deep Learning</a> to understand the concepts and reviewing the DL4J source code to try and figure out how to implement what I thought I wanted to do.</p>\n\n<p>Discovering the <a href=\"https://gitter.im/deeplearning4j/deeplearning4j\">DL4J Gitter</a> was the single most useful moment I had.  The creators are actively answering all sorts of questions in real-time.  There’s also a room for earlyadopters discussing testing and feature requests which was interesting to browse.  Very impressed with the commitment and willingness to help.  I even got an email from someone on the DL4J team after I pushed this project to GitHub offering to help and pointing me to the CNN specialists.</p>\n\n<p>Gitter is where the action is.  There’s way more here than on StackOverflow.  However, the content doesn’t appear to be indexed nearly as well on Google, so found myself “Googling” in the Gitter search bar for keywords and perusing through conversations to get answers.</p>\n\n<p>I recommend using the <a href=\"http://deeplearning4j.org/visualization\">deeplearning4j-ui</a> tool if you can.  I unfortunately wasn’t able to get it working, but it looks super useful for understanding how your net training is going.</p>\n\n<p>Other awesome resources I found for visualizing training for CNNs are <a href=\"http://cs.stanford.edu/people/karpathy/convnetjs/\">ConvNetJS</a> and <a href=\"http://scs.ryerson.ca/~aharley/vis/conv/\">this one</a>.</p>\n\n<!-- Links -->\n\n<!-- Links to GitHub-->\n\n  <p><a href=\"http://brooksandrew.github.io/simpleblog/articles/convolutional-neural-network-training-with-dl4j/\">Exploring convolutional neural networks with DL4J</a> was originally published by andrew brooks at <a href=\"http://brooksandrew.github.io/simpleblog\">andrew brooks</a> on April 14, 2016.</p>"
}