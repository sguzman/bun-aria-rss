{
  "title": "Namespaced Methods in JavaScript",
  "link": "http://artem.sobolev.name/posts/2013-05-23-js-namespaced-methods.html",
  "description": "<p>Once upon a time I was asked (well, actually <a href=\"http://habrahabr.ru/qa/7130/\" title=\"Javascript: String.prototype.namespace.method и this / Q&A / Хабрахабр\">a question</a> wasn’t for me only, but for whole habrahabr’s community) is it possible to implement namespaced methods in JavaScript for built-in types like:</p>\n<div class=\"sourceCode\"><pre class=\"sourceCode javascript\"><code class=\"sourceCode javascript\"><span class=\"dv\">5</span>..<span class=\"va\">rubish</span>.<span class=\"at\">times</span>(<span class=\"kw\">function</span>() <span class=\"op\">{</span> <span class=\"co\">// this function will be called 5 times</span>\n  <span class=\"va\">console</span>.<span class=\"at\">log</span>(<span class=\"st\">\"Hi there!\"</span>)<span class=\"op\">;</span>\n<span class=\"op\">}</span>)<span class=\"op\">;</span>\n\n<span class=\"st\">\"some string\"</span>.<span class=\"va\">hask</span>.<span class=\"at\">map</span>(<span class=\"kw\">function</span>(c) <span class=\"op\">{</span> <span class=\"cf\">return</span> <span class=\"va\">c</span>.<span class=\"va\">hask</span>.<span class=\"at\">code</span>()<span class=\"op\">;</span> <span class=\"op\">}</span>)<span class=\"op\">;</span>\n<span class=\"co\">// equivalent to</span>\n<span class=\"st\">\"some string\"</span>.<span class=\"at\">split</span>(<span class=\"st\">''</span>).<span class=\"at\">map</span>(<span class=\"kw\">function</span>(c) <span class=\"op\">{</span> <span class=\"cf\">return</span> <span class=\"va\">c</span>.<span class=\"at\">charCodeAt</span>()<span class=\"op\">;</span> <span class=\"op\">}</span>)<span class=\"op\">;</span>\n\n<span class=\"st\">\"another string\"</span>.<span class=\"va\">algo</span>.<span class=\"at\">lcp</span>(<span class=\"st\">\"annotation\"</span>)<span class=\"op\">;</span> \n<span class=\"co\">// returns longest common prefix of two strings</span></code></pre></div>\n<p>As you can see at the link, it’s possible using ECMAScript 5 features. And that’s how: <!--more--></p>\n<p>First, let’s point out the main problem with the straightforward approach: <del>it doesn’t work</del> when you write</p>\n<div class=\"sourceCode\"><pre class=\"sourceCode javascript\"><code class=\"sourceCode javascript\"><span class=\"va\">Class</span>.<span class=\"va\">prototype</span>.<span class=\"va\">ns</span>.<span class=\"at\">method</span> <span class=\"op\">=</span> <span class=\"kw\">function</span>() <span class=\"op\">{</span>\n  <span class=\"cf\">return</span> <span class=\"kw\">this</span>.<span class=\"at\">methodA</span>() <span class=\"op\">+</span> <span class=\"kw\">this</span>.<span class=\"at\">methodB</span>()<span class=\"op\">;</span>\n<span class=\"op\">}</span></code></pre></div>\n<p><code>this</code> points to the <code>Class.prototype.ns</code> instead of an instance of <code>Class</code>. The only way to change it is rebind <code>this</code> to the our instance like this:</p>\n<div class=\"sourceCode\"><pre class=\"sourceCode javascript\"><code class=\"sourceCode javascript\"><span class=\"kw\">var</span> instance <span class=\"op\">=</span> <span class=\"kw\">new</span> Class<span class=\"op\">;</span>\n<span class=\"va\">instance</span>.<span class=\"va\">ns</span>.<span class=\"va\">method</span>.<span class=\"at\">call</span>(instance)<span class=\"op\">;</span></code></pre></div>\n<p>Obviously, it’s not a solution since in that case it is a lot easier to write something like</p>\n<div class=\"sourceCode\"><pre class=\"sourceCode javascript\"><code class=\"sourceCode javascript\"><span class=\"kw\">var</span> instance <span class=\"op\">=</span> <span class=\"kw\">new</span> Class<span class=\"op\">;</span>\n<span class=\"va\">MegaLibrary</span>.<span class=\"at\">method</span>(instance)<span class=\"op\">;</span></code></pre></div>\n<p>Thus we need to somehow return a correct function (with <code>this</code> binded to the <code>instance</code>) when user calls namespaced methods. This can be done using <a href=\"http://stackoverflow.com/q/812961/1190430\" title=\"Javascript getters and setters for dummies? - Stack Overflow\" target=\"_blank\">getters</a>.</p>\n<p>When user accesses our namespace we give him a proxy-object with a custom getter for every method in the namespace. This getter returns a method with rebinded <code>this</code>. The question is: how do we get a reference to the <code>instance</code>? The answer is pretty simple: using getters again! Instead of declaring an ordinary property for the namespace we can create a property with a custom getter memoizing a reference to <code>this</code>. Voilà!</p>\nFinally, the code is:\n<script src=\"https://gist.github.com/artsobolev/5599917.js\"></script>\n<h2 id=\"but-wait-how-cross-browser-is-it\">But wait… How cross browser is it?</h2>\n<p>Well, I’m pretty lazy to test it on all platforms (IE, Opera, FF, Chrome, Node.JS), so I’ll do like a mathematician in a famous anecdote:</p>\n<blockquote>\n<p>Three employees (an engineer, a physicist and a mathematician) are staying in a hotel while attending a technical seminar. The engineer wakes up and smells smoke. He goes out into the hallway and sees a fire, so he fills a trashcan from his room with water and douses the fire. He goes back to bed.</p>\n<p>Later, the physicist wakes up and smells smoke. He opens his door and sees a fire in the hallway. He walks down the hall to a fire hose and after calculating the flame velocity, distance, water pressure, trajectory, etc. extinguishes the fire with the minimum amount of water and energy needed.</p>\nLater, the mathematician wakes up and smells smoke. She goes to the hall, sees the fire and then the fire hose. She thinks for a moment and then exclaims, ‘Ah, a solution exists!’ and then goes back to bed.\n</blockquote>\nAs you can see, the key part of code is ECMAScript 5’s <code>Object.defineProperty</code>. According to the kangax’s <a href=\"http://kangax.github.io/es5-compat-table/#Object.defineProperty\" title=\"ECMAScript 5 compatibility table\" target=\"_blank\">ECMAScript 5 compatibility table</a> it has pretty good support:\n<ul>\n<li>\nIE 9+\n</li>\n<li>\nOpera 12+\n</li>\n<li>\nFF 4+\n</li>\n<li>\nChrome 7+ (and thus Node.JS too)\n</li>\n</ul>",
  "pubDate": "Thu, 23 May 2013 00:00:00 UT",
  "guid": "http://artem.sobolev.name/posts/2013-05-23-js-namespaced-methods.html",
  "dc:creator": "Artem"
}