{
  "title": "Fast Front-End Performance for   Microsoft Bing ",
  "link": "https://blogs.bing.com/search-quality-insights/august-2022/Fast-Front-End-Performance-for-Microsoft-Bing",
  "pubDate": "Thu, 25 Aug 2022 08:00:00 -0700",
  "dc:creator": "Bing Team",
  "category": [
    "Bing",
    "CDN",
    "Front-End",
    "Image",
    "Performance",
    "SERP"
  ],
  "guid": "66840a0e-dd65-48b4-8944-fe38dac52786",
  "description": "<p>The Bing search stack is built for speed at all layers. Fast performance delights users and drives loyalty and engagement. This blog presents the key performance techniques used by Bing&rsquo;s front-end to deliver and render search results pages with world-class speed.</p>\n",
  "content:encoded": "The Bing search stack is built for speed at all layers. Fast performance delights users and drives loyalty and engagement. This blog presents the key performance techniques used by Bing&rsquo;s front-end to deliver and render search results pages with world-class speed.\n<h3><br />\nFront-End Delivery Architecture</h3>\nPerformance starts with architecture. Search queries to Bing return a &ldquo;search results page&rdquo; that is generated using Server-Side Rendering (SSR). The delivery architecture is shown below.\n\n<h4><br />\n<img alt=\"image001.png\" src=\"https://blogs.bing.com/getattachment/b95673b5-b769-48a0-ade5-7825d8da566b/image001.png.aspx\" title=\"image001.png\" /></h4>\n\n<h5 style=\"text-align: center;\">Figure 1: Front-End Delivery Architecture</h5>\n\n<h4><br />\nChunked Delivery</h4>\nThe search results page HTML is delivered to the client browser in multiple chunks. Chunk 1 contains HTML that is not a function of the specific search terms (the page header with logo, search box, and sign-in button) and is delivered immediately by the front-end servers. In parallel with Chunk 1 delivery, requests are made to the back-end stack that contains the search index and other services. These results are aggregated into the core &ldquo;search results&rdquo; that are delivered as Chunk 2. Subsequent chunks, collectively called Chunk N, contain &ldquo;above fold&rdquo; images (visible within the initial viewport) that are Base64 encoded in the HTML. Note that both Chunk 1 and Chunk 2 contain inline CSS and JS in addition to HTML.<br />\n<br />\nThe benefits of this delivery architecture are that 1) the critical path to First Render is very fast and overlapped with the &ldquo;server think time&rdquo;, and 2) for most searches, all content within the initial viewport can be rendered from just the base page HTML.&nbsp;<br />\n&nbsp;\n<h4>CDN</h4>\nA CDN (Content Delivery Network) is a large, geographically distributed network of proxy servers optimized to be closer to users and well-connected to datacenters. Bing services are hosted in regional datacenters via connectivity through a CDN.&nbsp;<br />\n<br />\n<img alt=\"image003.png\" src=\"https://blogs.bing.com/getattachment/search-quality-insights/august-2022/Fast-Front-End-Performance-for-Microsoft-Bing/image003.png.aspx\" title=\"image003.png\" />\n<h5 style=\"text-align: center;\"><span>Figure 2: Edge Node and Datacenter Topology</span></h5>\n<br />\n<br />\nThe CDN is critical to Bing&rsquo;s performance. User traffic routes first to the closest CDN node (called an &lsquo;edge node&rsquo;). The edge node decides based on the type of request to either proxy the request to a regional datacenter or to serve cached content from the edge node itself. For static assets such as JS (JavaScript) files and images, the CDN provides caching closer to the user which speeds their delivery during page load.&nbsp;<br />\n&nbsp;<br />\nUsing a CDN also results in a lower latency on the User ISP (Internet Service Provider) Network by keeping the connection distance short. This benefits all network requests between the user and Bing&rsquo;s services in regional datacenters. Being closer to the user helps make connection establishment and recovery times shorter. A CDN is also better able to detect issues in ISP networks and potentially move traffic [1] to better edge nodes.<br />\n&nbsp;<br />\nBetween the Edge Node and the Bing Datacenter, the CDN ensures selection of high-bandwidth, low-latency links to the datacenter and keep connections to Bing&rsquo;s services warm, ready to serve the next request with zero additional time spent on connection management [2].<br />\n<img alt=\"image005.png\" src=\"https://blogs.bing.com/getattachment/search-quality-insights/august-2022/Fast-Front-End-Performance-for-Microsoft-Bing/image005.png.aspx\" title=\"image005.png\" />\n<h5 style=\"text-align: center;\"><span>Figure 3: Network Path from User to Bing Datacenter</span></h5>\n&nbsp;\n\n<h4>Rendering Sequence</h4>\nThis example shows the rendering sequence corresponding to the arrival of HTML chunks. This sequence is typically imperceptible to the user (fractions of a second) but is shown here in slow-motion for illustrative purposes.<br />\n<br />\n<img alt=\"image007.png\" src=\"https://blogs.bing.com/getattachment/search-quality-insights/august-2022/Fast-Front-End-Performance-for-Microsoft-Bing/image007.png.aspx\" title=\"image007.png\" />\n<h5 style=\"text-align: center;\"><span>Figure 4: Rendering Sequence in Slow Motion</span></h5>\n<br />\nHere is another view, showing Visual Progress (%) as a function of time.<br />\n<img alt=\"image009.png\" src=\"https://blogs.bing.com/getattachment/search-quality-insights/august-2022/Fast-Front-End-Performance-for-Microsoft-Bing/image009.png.aspx\" title=\"image009.png\" />\n<h5 style=\"text-align: center;\"><span>Figure 5: Visual Progress vs. Time</span></h5>\n&nbsp;\n\n<h3>Key Front-End Optimizations</h3>\nThe search results page implements a multitude of performance optimization techniques, many of which are described here. While new optimization techniques are constantly being developed, it&rsquo;s also important to take care of tried-and-true perf fundamentals.<br />\n&nbsp;\n<h4><u>Optimized Browser Rendering</u></h4>\nThe page is carefully constructed to deliver fast first render without waiting for the back-end stack. Additionally, because large and complex pages can incur a significant CPU cost in the browser layout engine, reducing time spent on layout calculations improves content rendering performance.<br />\n&nbsp;\n<h5><strong>Chunk 1</strong></h5>\n<q>The contents of Chunk 1 are carefully chosen to deliver a fast first render. Chunk 1 consists of the head tag and a portion of the body tag containing the page header. The head tag contains critical CSS and JS that needs to run early in the page lifecycle. The page header includes elements like the logo, search box and sign-in button. The page header is not query-specific and does not need to wait for the back-end stack (search index etc.) which allows the front-end servers to generate and return this response very quickly via an early flush.</q><br />\n&nbsp;\n<h5><strong>Web Fonts</strong></h5>\n<q>The page renders using custom Web Fonts. The head contains&nbsp;<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types/preload\">preload</a>&nbsp;tags that tell the browser to kick off downloads for these fonts immediately. In the absence of these tags the browser would not download these fonts until it had parsed the CSS style declarations and encountered matching elements. Preloading fonts enables them to be available when they are needed for text rendering.</q><br />\n&nbsp;\n<h5><strong>Inline CSS</strong></h5>\n<q>All critical CSS on the page is served inline in&nbsp;the HTML.&nbsp;Inlining&nbsp;CSS has the benefit of not needing to wait for additional network requests to arrive before the page contents can be styled and painted to the screen. The downside of&nbsp;inlining&nbsp;CSS is that it is not possible to leverage the browser cache to load shared styles on subsequent page loads. The tradeoff makes sense for Bing, but this conclusion is dependent on page construction and usage patterns. It may not make sense for every website.</q><br />\n&nbsp;\n<h5><strong>Content-Visibility</strong></h5>\n<q>Time spent on layout and style calculations increases on pages with large and complex DOM structures. The&nbsp;<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/content-visibility\">content-visibility</a>&nbsp;CSS property can help mitigate this cost by deferring these calculations for elements that are not visible during initial page load. Bing uses content-visibility to reduce layout cost in several different places in both Chunk 1 and Chunk 2. Content-visibility has yielded measurable improvements to rendering performance.</q><br />\n&nbsp;\n<h4><u>Optimized Network Loading</u></h4>\nOptimizing network loading includes minimizing transfer sizes, pipelining, parallelization, and caching.<br />\n&nbsp;\n<h5><strong>Compression</strong></h5>\nText based resources such as HTML, CSS and JS bundles are served with&nbsp;Brotli&nbsp;compression to minimize the number of bytes over-the-wire.<br />\n&nbsp;\n<h5><strong>Connection priming</strong></h5>\nConnection priming refers to opening a connection prior to it being needed. There are two forms of connection priming on Bing:<br />\n&nbsp;\n<ul>\n\t<li>For the www.bing.com domain used to fetch the base page, the connection is primed as a side-effect of the search suggestions mechanism that is invoked while a user types a query.</li>\n\t<li>Many of the page&rsquo;s static resources are loaded from a separate domain (e.g., r.bing.com). These resources are not in the critical path to First Render and are typically discovered and requested later in the page load cycle. Chunk 1 includes a&nbsp;<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types/preconnect\">preconnect</a>&nbsp;directive that enables the browser to use the &ldquo;idle time&rdquo; prior to Chunk 2 to open the connection prior to it being needed.</li>\n</ul>\n\n<h5><strong>Non-blocking JS loading</strong></h5>\nJavaScript bundles not needed to render content within the initial viewport are loaded in a non-blocking fashion. This ensures that browser rendering is never blocked by pending JS network requests.<br />\n&nbsp;\n<h5><strong>Browser caching</strong></h5>\nCacheable static resources include a hash of the file contents in the URL. The URL acts as the cache key for browser caches, so this ensures cache consistency if the file contents change. This approach also allows setting long cache expiration times.<br />\n&nbsp;\n<h4><u>Optimized Image Loading</u></h4>\nImages are a key visual component of the search results page. Loading images quickly and efficiently is critical to having a fast-loading page.<br />\n&nbsp;\n<h5><strong>Shared image sprite</strong></h5>\nCommonly used icons are served using a shared image sprite. Delivering a single consolidated network request is more efficient than many small individual requests. The shared image sprite is&nbsp;cached&nbsp;for reuse on subsequent visits. Less commonly used icons are not included in the shared sprite and are served inline in the HTML.<br />\n&nbsp;\n<h5><strong>Automated image resizing</strong></h5>\nGiven the dynamic nature and long-tail distribution of search queries, it isn&rsquo;t practical to generate thumbnails for every possible use case of every image in the index ahead of time. Bing leverages an in-house image resizer service that generates properly sized thumbnail images on the fly. The service accepts various input parameters such as height, width, device pixel ratio and quality.<br />\n&nbsp;\n<h5><strong>Two-phase image loading</strong></h5>\nThumbnail images within the initial viewport are loaded using a two-phase approach. The base HTML contains a lower quality thumbnail embedded in base64 format that enables the browser to quickly paint an initial image to the screen. The low-quality image is then replaced with a high-quality image that is fetched using a separate network request. The two-phase approach provides a good tradeoff between speed and quality. Simply embedding high-quality images would slow the delivery of the HTML down significantly.<br />\n&nbsp;\n<h5><strong>Post-loading images outside the viewport</strong></h5>\nThumbnails images outside the initial viewport are defer-loaded after the page has rendered. The front-end server skips embedding the low-quality image in the HTML and directly fetches the high-quality image using a deferred network request.<br />\n&nbsp;\n<h5><strong>Preview image for maps</strong></h5>\nMap controls are complex and contain dynamic functionality such as the ability to pan and zoom. It can take a significant amount of time to load and execute the resources needed to render a map control. To mitigate this waiting period, the page loads and renders a preview image of the map location in the position where the map will eventually render. The fully interactive map replaces the preview image when it is done loading.<br />\n&nbsp;\n<h3>Staying Fast</h3>\nGiven the natural tendency for web pages (and indeed most software) to get slower over time due to new features and changing code, the performance mission is doomed to failure if there isn&rsquo;t a strong emphasis on staying fast. Bing employs several practices to stay fast.<br />\n&nbsp;\n<ul>\n\t<li>Org-wide perf metrics &ndash; Bing has institutionalized several key performance metrics and a culture of A/B experimentation to assess the impact of changes before they ship.</li>\n\t<li>Continuous improvement &ndash; constant workstreams of investigation, prototyping, and optimization.</li>\n\t<li>Challenging assumptions &ndash; conditions are always changing, including both page behavior and external conditions such as the speed of user networks and devices.&nbsp; Key pieces of technology that power the Web &ndash; the browser, web standards and network protocols, are changing continuously as well. It is important to challenge assumptions from past performance decisions &ndash; what was relevant several years ago may no longer be relevant today.</li>\n\t<li>&ldquo;Perf Defense&rdquo; &ndash; finally, Bing uses a rigorous set of tools and processes to prevent perf regressions and quickly detect & recover them when they occur. A &ldquo;budget&rdquo; also exists to allow small perf regressions under very limited circumstances. Although defense work may be less glamorous, it&rsquo;s a critical part of the performance mission.</li>\n</ul>\n<br />\n<em>We wish to acknowledge the countless people who have contributed to Bing&rsquo;s architecture and performance over the years, both front-end and back-end!</em><br />\n&nbsp;\n<div>- <a href=\"https://www.linkedin.com/in/pauljroy/\" target=\"_blank\">Paul Roy</a>, <a href=\"https://www.linkedin.com/in/amiya-gupta/\" target=\"_blank\">Amiya Gupta</a>, <a href=\"https://www.linkedin.com/in/mohitsuley/\" target=\"_blank\">Mohit Suley</a>\n\n<h4><br />\n<u>References</u></h4>\n[1] Odin: Microsoft&rsquo;s CDN Measurement System <a href=\"https://www.usenix.org/conference/nsdi18/presentation/calder\">https://www.usenix.org/conference/nsdi18/presentation/calder</a><br />\n[2] LinkedIn wrote an excellent <a href=\"https://engineering.linkedin.com/blog/2022/accelerating-the-linkedin-experience-with-azure-front-door\">blog post</a> describing these benefits in detail.<br />\n<br />\n&nbsp;</div>\n"
}