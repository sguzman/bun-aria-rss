{
  "title": "Visualizing min-heap algorithms with D3.js",
  "link": "",
  "updated": "2013-10-10T00:00:00-07:00",
  "id": "http://www.benfrederickson.com/heap-visualization/",
  "content": "\n        \n            <img src=\"http://www.benfrederickson.com/images/heap-vis/heapvis.gif\" width=\"100%\" style=\"max-width:500px\">\n        \n        <p>I haven’t done any real work on learning Javascript and D3.js since <a href=\"/2013/05/09/venn-diagrams-with-d3.js.html\">my last\nattempt</a> a couple months back. To\nkeep at it, I thought I’d try using D3.js to visualize a simple algorithm:\nfinding the largest couple of items in a list.</p>\n\n<p>This problem comes up all the time when doing search and recommendation type\ntasks. Every time you query a search engine, it has to find the couple best\nscored results in all matching items. For example, Google finds 15 million\nresults when querying for ‘D3.js’, but only shows you the 10 best scored of these. A naive\nsolution for finding these 10 items would be to sort everything by\nscore, but that ends up wasting a ton of time sorting results that will be\ndiscarded.</p>\n\n<p>A better solution is to use a\n<a href=\"http://en.wikipedia.org/wiki/Binary_heap\">min-heap</a> - a tree data structure\nwhere each node in the tree has a value smaller than all of its children. Its\na fantastically useful data structure, that can be used to efficiently solve\nthis problem. By comparing each item with the\nroot element of an appropriately sized min-heap, and pushing onto the heap when\nits bigger - it picks out the just the largest items:</p>\n\n<p class='more'><a href='http://www.benfrederickson.com/heap-visualization/'>Read more ...</a></p>\n     "
}