{
  "title": "Processing complicated package outputs",
  "link": "https://itsalocke.com/blog/processing-complicated-package-outputs/",
  "pubDate": "Tue, 09 Oct 2018 00:00:00 +0000",
  "guid": "https://itsalocke.com/blog/processing-complicated-package-outputs/",
  "description": "<p>Sometimes packages have functions that don&rsquo;t do the things the way you want them to do them and you have to either re-build the function, or work with it as-is and add code around it to solve your issue.</p>\n\n<p>I&rsquo;ve had to do this recently with the <code>googleway</code> package and it&rsquo;s <code>google_distance()</code> function so I wanted to take you through step by step how I wrote code to go from a single value function to a function that handles many inputs and returns 4 rows per input. I won&rsquo;t be dwelling on how to write a function specifically, just showing you the workflow I often go through.</p>\n\n<h2 id=\"requirements\">Requirements</h2>\n\n<p>Key functionality we&rsquo;ll need today is:</p>\n\n<ul>\n<li>googleway for providing the base function</li>\n<li>the tidyverse, namely purrr and dplyr, for lots of the data manipulation</li>\n<li>memoise for caching requests so we spend less cash</li>\n</ul>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-r\" data-lang=\"r\"><span style=\"color:#f92672\">library</span>(tidyverse)\n<span style=\"color:#f92672\">library</span>(memoise)\n<span style=\"color:#f92672\">library</span>(googleway)</code></pre></div>\n<h2 id=\"google-distance\">Google Distance</h2>\n\n<p>To calculate distances we can use the <a href=\"https://developers.google.com/maps/documentation/distance-matrix/start\">google distance API</a>.</p>\n\n<p>This needs a key in order to use it. Note that this service does not have a free tier to use, however it is ~$5 per 1,000 requests and a trial of Google Cloud is available.</p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-r\" data-lang=\"r\">key<span style=\"color:#f92672\">=</span><span style=\"color:#e6db74\">&#34;AIzaSyBIeuWMWWweyv1SAoAxcY1IZ-2nuErFQY8&#34;</span></code></pre></div>\n<p>Then we need to prep our desired information.</p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-r\" data-lang=\"r\">office <span style=\"color:#f92672\">=</span> <span style=\"color:#e6db74\">&#34;E14 5EU&#34;</span>\nmonday_9am <span style=\"color:#f92672\">=</span> <span style=\"color:#66d9ef\">as.POSIXct</span>(<span style=\"color:#e6db74\">&#34;2018-12-03 09:00&#34;</span>)</code></pre></div>\n<h2 id=\"handling-google-distance\">Handling <code>google_distance()</code></h2>\n\n<p>The API is used to working with just a single address at a time so we need to do a bit of prep here to make it work with lots of accounts.</p>\n\n<p>For starters, we can use the memoise package to cache results so if we send the same address multiple times it doesn&rsquo;t need to go back to the API. Phew, since that API costs money to call!</p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-r\" data-lang=\"r\">google_distance_deduped <span style=\"color:#f92672\">=</span> memoise<span style=\"color:#f92672\">::</span>memoise(google_distance)</code></pre></div>\n<p>Giving this a go with a single example, let&rsquo;s see what google gives us:</p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-r\" data-lang=\"r\">from <span style=\"color:#f92672\">=</span> <span style=\"color:#e6db74\">&#34;SE3 8UQ&#34;</span>\n\nexample_1 <span style=\"color:#f92672\">=</span> google_distance_deduped(from,\n                        office,\n                        mode <span style=\"color:#f92672\">=</span> <span style=\"color:#e6db74\">&#34;transit&#34;</span>,\n                        arrival_time <span style=\"color:#f92672\">=</span> monday_9am,\n                        key<span style=\"color:#f92672\">=</span>key)\n\nexample_1</code></pre></div>\n<pre><code>## $destination_addresses\n## [1] &quot;Canary Wharf, London E14 5EU, UK&quot;\n## \n## $origin_addresses\n## [1] &quot;Shooters Hill Rd, London SE3 8UQ, UK&quot;\n## \n## $rows\n##                          elements\n## 1 5.7 km, 5653, 37 mins, 2221, OK\n## \n## $status\n## [1] &quot;OK&quot;\n</code></pre>\n\n<p>The <code>possibly()</code> function will mean that if there&rsquo;s an error for a call that it doesn&rsquo;t break everything and we won&rsquo;t have to start all over again.</p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-r\" data-lang=\"r\">google_distance_try <span style=\"color:#f92672\">=</span> purrr<span style=\"color:#f92672\">::</span>possibly(google_distance_deduped, <span style=\"color:#e6db74\">&#34;Fail&#34;</span>)\n\nfrom <span style=\"color:#f92672\">=</span> <span style=\"color:#66d9ef\">c</span>(<span style=\"color:#66d9ef\">NA</span>)\n\nexample_2 <span style=\"color:#f92672\">=</span> google_distance_try(from,\n                        office,\n                        mode <span style=\"color:#f92672\">=</span> <span style=\"color:#e6db74\">&#34;transit&#34;</span>,\n                        arrival_time <span style=\"color:#f92672\">=</span> monday_9am,\n                        key<span style=\"color:#f92672\">=</span>key)\n\nexample_2</code></pre></div>\n<pre><code>## [1] &quot;Fail&quot;\n</code></pre>\n\n<p>Then to make the function work over multiple addresses, we need to change it slightly. The <code>map()</code> function will iterate over all the addresses.</p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-r\" data-lang=\"r\">google_distance_loop <span style=\"color:#f92672\">=</span> <span style=\"color:#66d9ef\">function</span>(x,<span style=\"color:#66d9ef\">...</span>){\n    purrr<span style=\"color:#f92672\">::</span>map(x, google_distance_try,<span style=\"color:#66d9ef\">...</span>)\n}\n\nfrom <span style=\"color:#f92672\">=</span> <span style=\"color:#66d9ef\">rep</span>(<span style=\"color:#e6db74\">&#34;SE3 8UQ&#34;</span>,<span style=\"color:#ae81ff\">2</span>)\n\nexample_3 <span style=\"color:#f92672\">=</span> google_distance_loop(from,\n                        office,\n                        mode <span style=\"color:#f92672\">=</span> <span style=\"color:#e6db74\">&#34;transit&#34;</span>,\n                        arrival_time <span style=\"color:#f92672\">=</span> monday_9am,\n                        key<span style=\"color:#f92672\">=</span>key)\n\nexample_3</code></pre></div>\n<pre><code>## [[1]]\n## [[1]]$destination_addresses\n## [1] &quot;Canary Wharf, London E14 5EU, UK&quot;\n## \n## [[1]]$origin_addresses\n## [1] &quot;Shooters Hill Rd, London SE3 8UQ, UK&quot;\n## \n## [[1]]$rows\n##                          elements\n## 1 5.7 km, 5653, 37 mins, 2221, OK\n## \n## [[1]]$status\n## [1] &quot;OK&quot;\n## \n## \n## [[2]]\n## [[2]]$destination_addresses\n## [1] &quot;Canary Wharf, London E14 5EU, UK&quot;\n## \n## [[2]]$origin_addresses\n## [1] &quot;Shooters Hill Rd, London SE3 8UQ, UK&quot;\n## \n## [[2]]$rows\n##                          elements\n## 1 5.7 km, 5653, 37 mins, 2221, OK\n## \n## [[2]]$status\n## [1] &quot;OK&quot;\n</code></pre>\n\n<p>So our code is working over multiple cases and handling bad inputs pretty well, but how do we get some meaningful stuff out of it. Looking at the data, we get back a part of a table that contains a response.</p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-r\" data-lang=\"r\">example_1 <span style=\"color:#f92672\">%&gt;%</span> \n  map(<span style=\"color:#e6db74\">&#34;rows&#34;</span>) <span style=\"color:#f92672\">%&gt;%</span> \n  map(<span style=\"color:#e6db74\">&#34;elements&#34;</span>)</code></pre></div>\n<pre><code>## $destination_addresses\n## NULL\n## \n## $origin_addresses\n## NULL\n## \n## $rows\n## NULL\n## \n## $status\n## NULL\n</code></pre>\n\n<p>We see that there seems to be no way someone can use public transport between the two locations. Perhaps another way of getting there will return a result?</p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-r\" data-lang=\"r\">from <span style=\"color:#f92672\">=</span> <span style=\"color:#e6db74\">&#34;SE3 8UQ&#34;</span>\nexample_4 <span style=\"color:#f92672\">=</span> google_distance_loop(from,\n                        office,\n                        mode <span style=\"color:#f92672\">=</span> <span style=\"color:#e6db74\">&#34;walking&#34;</span>,\n                        arrival_time <span style=\"color:#f92672\">=</span> monday_9am,\n                        key<span style=\"color:#f92672\">=</span>key)\n\nexample_4 <span style=\"color:#f92672\">%&gt;%</span> \n  map(<span style=\"color:#e6db74\">&#34;rows&#34;</span>) <span style=\"color:#f92672\">%&gt;%</span> \n  map(<span style=\"color:#e6db74\">&#34;elements&#34;</span>) <span style=\"color:#f92672\">%&gt;%</span> \n  flatten() <span style=\"color:#f92672\">%&gt;%</span> \n  map(<span style=\"color:#e6db74\">&#34;duration&#34;</span>) </code></pre></div>\n<pre><code>## [[1]]\n##             text value\n## 1 1 hour 20 mins  4777\n</code></pre>\n\n<p>When a commute is possible, we get a response back that includes the number of seconds it might take someone to travel to work for 9am on a Monday.</p>\n\n<p>First of all, we&rsquo;ll need to reliably extract this information from a batch of repsonses. This takes multiple steps due to the way the API gives us info.</p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-r\" data-lang=\"r\">from <span style=\"color:#f92672\">=</span> <span style=\"color:#66d9ef\">c</span>(<span style=\"color:#e6db74\">&#34;SE3 8UQ&#34;</span>, <span style=\"color:#66d9ef\">NA</span>, <span style=\"color:#e6db74\">&#34;SE3 8UQ&#34;</span>)\n\ngoogle_distance_tbl <span style=\"color:#f92672\">=</span> <span style=\"color:#66d9ef\">function</span>(x, <span style=\"color:#66d9ef\">...</span>) {\n  google_distance_loop(x,<span style=\"color:#66d9ef\">...</span>) <span style=\"color:#f92672\">%&gt;%</span> \n  map(<span style=\"color:#e6db74\">&#34;rows&#34;</span>) <span style=\"color:#f92672\">%&gt;%</span> \n  map(<span style=\"color:#e6db74\">&#34;elements&#34;</span>) <span style=\"color:#f92672\">%&gt;%</span> \n  flatten() <span style=\"color:#f92672\">%&gt;%</span> \n  map(<span style=\"color:#66d9ef\">unclass</span>) <span style=\"color:#f92672\">%&gt;%</span> \n  map_df(flatten) <span style=\"color:#f92672\">%&gt;%</span> \n  <span style=\"color:#66d9ef\">cbind</span>(x)\n}\n  \nexample_5 <span style=\"color:#f92672\">=</span> google_distance_tbl(from,\n                        office,\n                        mode <span style=\"color:#f92672\">=</span> <span style=\"color:#e6db74\">&#34;walking&#34;</span>,\n                        arrival_time <span style=\"color:#f92672\">=</span> monday_9am,\n                        key<span style=\"color:#f92672\">=</span>key)\nexample_5  </code></pre></div>\n<pre><code>##             text value    status       x\n## 1 1 hour 20 mins  4777        OK SE3 8UQ\n## 2           &lt;NA&gt;    NA NOT_FOUND    &lt;NA&gt;\n## 3 1 hour 20 mins  4777        OK SE3 8UQ\n</code></pre>\n\n<p>So now we&rsquo;re going to need to ask about the different transit options for each address to find out the range of values in order to cope with &ldquo;ZERO_RETURN&rdquo; records. Once we have this information, we can then use the <code>google_distance_all</code> function to find out how long it&rsquo;ll take someone to drive, walk, cycle, or use public transport to travel between two points.</p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-r\" data-lang=\"r\">from <span style=\"color:#f92672\">=</span> <span style=\"color:#66d9ef\">c</span>(<span style=\"color:#e6db74\">&#34;SE3 8UQ&#34;</span>, <span style=\"color:#66d9ef\">NA</span>, <span style=\"color:#e6db74\">&#34;SE3 8UQ&#34;</span>)\n\ngoogle_distance_all <span style=\"color:#f92672\">=</span> <span style=\"color:#66d9ef\">function</span>(x, office, arrival_time, key, <span style=\"color:#66d9ef\">...</span>) {\n  \n  interested_in <span style=\"color:#f92672\">=</span> <span style=\"color:#66d9ef\">expand.grid</span>(from<span style=\"color:#f92672\">=</span>x, \n     mode<span style=\"color:#f92672\">=</span><span style=\"color:#66d9ef\">c</span>(<span style=\"color:#e6db74\">&#34;driving&#34;</span>, <span style=\"color:#e6db74\">&#34;walking&#34;</span>, <span style=\"color:#e6db74\">&#34;bicycling&#34;</span>, <span style=\"color:#e6db74\">&#34;transit&#34;</span>), \n      stringsAsFactors <span style=\"color:#f92672\">=</span> <span style=\"color:#66d9ef\">FALSE</span>)\n\nmap2_df(interested_in<span style=\"color:#f92672\">$</span>from,interested_in<span style=\"color:#f92672\">$</span><span style=\"color:#66d9ef\">mode</span>, \n     <span style=\"color:#f92672\">~</span>mutate(\n       google_distance_tbl(<span style=\"color:#ae81ff\">.</span>x, office, mode<span style=\"color:#f92672\">=</span><span style=\"color:#ae81ff\">.</span>y,\n                        arrival_time <span style=\"color:#f92672\">=</span> arrival_time,\n                        key<span style=\"color:#f92672\">=</span>key),\n       from<span style=\"color:#f92672\">=</span><span style=\"color:#ae81ff\">.</span>x, mode<span style=\"color:#f92672\">=</span><span style=\"color:#ae81ff\">.</span>y)\n)\n}\n\nexample_6 <span style=\"color:#f92672\">=</span> google_distance_all(from, office, monday_9am, key)\n\nexample_6</code></pre></div>\n<pre><code>##              text value    status       x    from      mode\n## 1         12 mins   739        OK SE3 8UQ SE3 8UQ   driving\n## 2            &lt;NA&gt;    NA NOT_FOUND    &lt;NA&gt;    &lt;NA&gt;   driving\n## 3         12 mins   739        OK SE3 8UQ SE3 8UQ   driving\n## 4  1 hour 20 mins  4777        OK SE3 8UQ SE3 8UQ   walking\n## 5            &lt;NA&gt;    NA NOT_FOUND    &lt;NA&gt;    &lt;NA&gt;   walking\n## 6  1 hour 20 mins  4777        OK SE3 8UQ SE3 8UQ   walking\n## 7         32 mins  1930        OK SE3 8UQ SE3 8UQ bicycling\n## 8            &lt;NA&gt;    NA NOT_FOUND    &lt;NA&gt;    &lt;NA&gt; bicycling\n## 9         32 mins  1930        OK SE3 8UQ SE3 8UQ bicycling\n## 10        37 mins  2221        OK SE3 8UQ SE3 8UQ   transit\n## 11           &lt;NA&gt;    NA NOT_FOUND    &lt;NA&gt;    &lt;NA&gt;   transit\n## 12        37 mins  2221        OK SE3 8UQ SE3 8UQ   transit\n</code></pre>\n\n<p>Having this many functions though clutters things up and makes it difficult to refactor and improve things. We should unpack all the functionality into one big function.</p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-r\" data-lang=\"r\"><span style=\"color:#75715e\">#&#39; Get distance data between two points based on all the travel mode options. Works for many origin points.</span>\n<span style=\"color:#75715e\">#&#39;</span>\n<span style=\"color:#75715e\">#&#39; @param x A vector of origins in address or postcode format</span>\n<span style=\"color:#75715e\">#&#39; @param dest A single destinationin address or postocde format</span>\n<span style=\"color:#75715e\">#&#39; @param arrival_time A POSIXct datetime that folks need to arrive by</span>\n<span style=\"color:#75715e\">#&#39; @param key A google distance API key</span>\n<span style=\"color:#75715e\">#&#39; @param ... Additional options to pass to `google_distance()`</span>\n<span style=\"color:#75715e\">#&#39;</span>\n<span style=\"color:#75715e\">#&#39; @return Data.frame containing (typically) 4 rows per input element</span>\n\ngoogle_distance_all <span style=\"color:#f92672\">=</span>  <span style=\"color:#66d9ef\">function</span>(x, dest, arrival_time, key, <span style=\"color:#66d9ef\">...</span>){\n  \n  <span style=\"color:#75715e\"># simple hygeine stuff</span>\n  gd <span style=\"color:#f92672\">=</span> purrr<span style=\"color:#f92672\">::</span>possibly(\n    memoise<span style=\"color:#f92672\">::</span>memoise(\n      google_distance)\n    , <span style=\"color:#e6db74\">&#34;Fail&#34;</span>\n  )\n  \n  <span style=\"color:#75715e\"># Prep dataset</span>\n   interested_in <span style=\"color:#f92672\">=</span> <span style=\"color:#66d9ef\">expand.grid</span>(from<span style=\"color:#f92672\">=</span>x, \n     mode<span style=\"color:#f92672\">=</span><span style=\"color:#66d9ef\">c</span>(<span style=\"color:#e6db74\">&#34;driving&#34;</span>, <span style=\"color:#e6db74\">&#34;walking&#34;</span>, <span style=\"color:#e6db74\">&#34;bicycling&#34;</span>, <span style=\"color:#e6db74\">&#34;transit&#34;</span>), \n      stringsAsFactors <span style=\"color:#f92672\">=</span> <span style=\"color:#66d9ef\">FALSE</span>)\n   <span style=\"color:#75715e\"># Perform google_distance calls for all combos</span>\n  purrr<span style=\"color:#f92672\">::</span>map2(interested_in<span style=\"color:#f92672\">$</span>from,interested_in<span style=\"color:#f92672\">$</span><span style=\"color:#66d9ef\">mode</span>, \n     <span style=\"color:#f92672\">~</span>gd(<span style=\"color:#ae81ff\">.</span>x, dest, mode<span style=\"color:#f92672\">=</span><span style=\"color:#ae81ff\">.</span>y,\n                        arrival_time <span style=\"color:#f92672\">=</span> arrival_time,\n                        key<span style=\"color:#f92672\">=</span>key)\n  ) <span style=\"color:#f92672\">%&gt;%</span> \n    <span style=\"color:#75715e\"># Extract relevant section</span>\n    purrr<span style=\"color:#f92672\">::</span>map(<span style=\"color:#e6db74\">&#34;rows&#34;</span>) <span style=\"color:#f92672\">%&gt;%</span> \n    purrr<span style=\"color:#f92672\">::</span>map(<span style=\"color:#e6db74\">&#34;elements&#34;</span>) <span style=\"color:#f92672\">%&gt;%</span> \n    purrr<span style=\"color:#f92672\">::</span>flatten() <span style=\"color:#f92672\">%&gt;%</span> \n    <span style=\"color:#75715e\"># Simplify the data.frames</span>\n    purrr<span style=\"color:#f92672\">::</span>map(<span style=\"color:#66d9ef\">unclass</span>) <span style=\"color:#f92672\">%&gt;%</span> \n    purrr<span style=\"color:#f92672\">::</span>map_df(purrr<span style=\"color:#f92672\">::</span>flatten) <span style=\"color:#f92672\">%&gt;%</span> \n    <span style=\"color:#75715e\"># Add original lookup values</span>\n    <span style=\"color:#66d9ef\">cbind</span>(interested_in)\n}\n\nresults <span style=\"color:#f92672\">=</span> google_distance_all(\n  from,\n  office,\n  arrival_time <span style=\"color:#f92672\">=</span> monday_9am,\n  key <span style=\"color:#f92672\">=</span> key\n)\n\nresults</code></pre></div>\n<pre><code>##              text value    status    from      mode\n## 1         12 mins   739        OK SE3 8UQ   driving\n## 2            &lt;NA&gt;    NA NOT_FOUND    &lt;NA&gt;   driving\n## 3         12 mins   739        OK SE3 8UQ   driving\n## 4  1 hour 20 mins  4777        OK SE3 8UQ   walking\n## 5            &lt;NA&gt;    NA NOT_FOUND    &lt;NA&gt;   walking\n## 6  1 hour 20 mins  4777        OK SE3 8UQ   walking\n## 7         32 mins  1930        OK SE3 8UQ bicycling\n## 8            &lt;NA&gt;    NA NOT_FOUND    &lt;NA&gt; bicycling\n## 9         32 mins  1930        OK SE3 8UQ bicycling\n## 10        37 mins  2221        OK SE3 8UQ   transit\n## 11           &lt;NA&gt;    NA NOT_FOUND    &lt;NA&gt;   transit\n## 12        37 mins  2221        OK SE3 8UQ   transit\n</code></pre>\n\n<p>I will undoubtedly want to do some cleaning after this and there&rsquo;s certainly room for improvement on the function but this is a good starting point for getting some data to work with. The iterative way I build functions means I can try to solve a bit at a time &ndash; hopefully this will help you when you&rsquo;re faced with needing to build your own functions.</p>"
}