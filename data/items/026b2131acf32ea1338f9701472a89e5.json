{
  "id": "tag:blogger.com,1999:blog-15045980.post-7591798787317882905",
  "published": "2020-10-26T10:05:00.000-07:00",
  "updated": "2020-10-26T10:05:37.810-07:00",
  "category": [
    "",
    ""
  ],
  "title": "Testing on the Toilet: Testing UI Logic? Follow the User!",
  "content": "<i><span style=\"font-family: times;\">This article was adapted from a Google&nbsp;<a href=\"http://googletesting.blogspot.com/2007/01/introducing-testing-on-toilet.html\">Testing on the Toilet</a>&nbsp;(TotT) episode. You can download a&nbsp;<a href=\"https://docs.google.com/document/d/1j4Z_Pvr5CxqRb3kRG3hxepIoZkXN81fjDVHGZEqkhxk/edit?usp=sharing\">printer-friendly version</a>&nbsp;of this TotT episode and post it in your office.</span></i><div><i><span style=\"font-family: times;\"><br /></span></i></div><div><span style=\"font-family: times;\">By&nbsp;Carlos Israel Ortiz García</span></div><div><span style=\"font-family: times;\"><br /></span></div><div><span style=\"font-family: times;\"><br /></span></div><div><span style=\"font-family: times;\"><div>After years of anticipation, you're finally able to purchase Google's hottest new product, gShoe*. But after clicking the \"Buy\" button, nothing happened! Inspecting the HTML, you notice the problem:</div><div><br /></div></span></div><div style=\"overflow-x: auto;\"><table class=\"my-bordered-table\" style=\"width: 613px;\"><tbody><tr><td style=\"background-color: #c9daf8; vertical-align: top; width: 607px;\"><pre style=\"background-color: #c9daf8; border: 0px; color: black; margin: 0px; padding-bottom: 0px; padding-left: 0px; padding-top: 0px;\"><span style=\"font-family: consolas, &quot;courier new&quot;, courier, monospace;\">&lt;button <span style=\"font-weight: bold;\">disabled=”true”</span> click=”$handleBuyClick(data)”&gt;Buy&lt;/button&gt;</span></pre></td></tr></tbody></table></div><div><br /></div><div><a href=\"https://1.bp.blogspot.com/-0OcrJkvSUYw/X5NaG4FFquI/AAAAAAAAAck/WUBHX6fJZZoOLqgzsmgjfOyAcX5x0reHACLcBGAsYHQ/s435/image1.png\" style=\"clear: right; float: right; font-family: times; margin-bottom: 1em; margin-left: 1em; text-align: center;\"><img border=\"0\" data-original-height=\"435\" data-original-width=\"349\" height=\"320\" src=\"https://1.bp.blogspot.com/-0OcrJkvSUYw/X5NaG4FFquI/AAAAAAAAAck/WUBHX6fJZZoOLqgzsmgjfOyAcX5x0reHACLcBGAsYHQ/w258-h320/image1.png\" width=\"258\" /></a></div><span style=\"font-family: times;\"><span style=\"color: #800180; font-weight: bold;\">Users couldn’t buy their gShoes because the “Buy” button was disabled.</span> The problem was due to the unit test for <span style=\"font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">handleBuyClick</span>, which passed <i>even though the user interface had a bug:</i></span><div><br /></div> <div style=\"overflow-x: auto;\"><table class=\"my-bordered-table\" style=\"width: 613px;\"><tbody><tr><td style=\"background-color: #f4cccc; vertical-align: top; width: 607px;\"><pre style=\"background-color: #f4cccc; border: 0px; color: black; margin: 0px; padding-bottom: 0px; padding-left: 0px; padding-top: 0px;\"><span style=\"font-family: consolas, &quot;courier new&quot;, courier, monospace;\">it('submits purchase request', () =&gt; {<br />  controller = new PurchasePage();<br />  <span style=\"color: #1155cc;\">// Call the method that handles the \"Buy\" button click</span><br />  <span style=\"font-weight: bold;\">controller.handleBuyClick(data);</span><br />  expect(service).toHaveBeenCalledWith(expectedData);<br />});<br /></span></pre></td></tr></tbody></table></div><div><br /></div><span style=\"font-family: times;\">  In the above example, the test failed to detect the bug because it <i>bypassed</i> the UI element and instead directly invoked the \"Buy\" button click handler. <span style=\"color: #800180; font-weight: bold;\">To be effective, tests for UI logic should interact with the <i>components</i> on the page as a browser would</span>, which allows testing the behavior that the end user experiences. <span style=\"color: #800180; font-weight: bold;\">Writing tests against <i>UI components</i> rather than calling handlers directly faithfully simulates user interactions</span> (e.g., add items to a shopping cart, click a purchase button, or verify an element is visible on the page), making the tests more comprehensive.</span><div><br /></div><div><br /></div><div><span style=\"font-family: times;\"><span style=\"color: #800180; font-weight: bold;\">The test for the “Buy” button should instead exercise the entire UI component by interacting with the HTML element,</span> which would have caught the disabled button issue:</span></div><div><br /></div> <div style=\"overflow-x: auto;\"><table class=\"my-bordered-table\" style=\"width: 613px;\"><tbody><tr><td style=\"background-color: #d9ead3; vertical-align: top; width: 607px;\"><pre style=\"background-color: #d9ead3; border: 0px; color: black; margin: 0px; padding-bottom: 0px; padding-left: 0px; padding-top: 0px;\"><span style=\"font-family: consolas, &quot;courier new&quot;, courier, monospace;\">it('submits purchase request', () =&gt; {<br />  <span style=\"color: #1155cc;\">// Renders the page with the “Buy” button and its associated code.</span><br />  render(PurchasePage);<br />  <span style=\"color: #1155cc;\">// Tries to click the button, fails the test, and catches the bug!</span><br />  <span style=\"font-weight: bold;\">buttonWithText('Buy').dispatchEvent(new Event(‘click’));</span><br />  expect(service).toHaveBeenCalledWith(expectedData);<br />});<br /></span></pre></td></tr></tbody></table><br /></div><br /><div><span style=\"font-family: times;\"><span style=\"color: #800180; font-weight: bold;\">Why should tests be written this way?</span> Unlike end-to-end tests, tests for individual UI components don’t require a backend server or the entire app to be rendered. Instead, these&nbsp; tests run in the same self-contained environment and take a similar amount of time to execute as unit tests that just execute the underlying event handlers directl</span><span style=\"font-family: times;\">y. Therefore, the UI acts as the public API, leaving the business logic as an implementation detail (also known as the </span><a href=\"http://xunitpatterns.com/Principles%20of%20Test%20Automation.html#Use%20the%20Front%20Door%20First\" style=\"font-family: times;\">\"Use the Front Door First\"</a><span style=\"font-family: times;\"> principle), resulting in better coverage of a feature.</span></div><div><span style=\"font-family: times;\"><br /></span></div><div><span style=\"font-family: times;\"><i><span style=\"font-weight: bold;\">Disclaimer:</span> “gShoe” is not a real Google product. Unfortunately you can’t buy a pair even if the bug is fixed!</i></span></div><div><br /></div>",
  "link": [
    "",
    "",
    "",
    "",
    ""
  ],
  "author": {
    "name": "Google Testing Bloggers",
    "uri": "http://www.blogger.com/profile/03153388556673050910",
    "email": "noreply@blogger.com",
    "gd:image": ""
  },
  "media:thumbnail": "",
  "thr:total": 6
}