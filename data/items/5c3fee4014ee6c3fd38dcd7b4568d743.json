{
  "title": "e003: No. more. nulls.",
  "link": "https://newrustacean.com/show_notes/e003/",
  "description": "<p>No More Nulls</p>\n<p><strong>Subject:</strong> Enumerated (<code>enum</code>) types, pattern matching, and meaningful return types.</p>\n<h1 id=\"notes\">Notes</h1>\n<p>Today’s episode discusses, in order:</p>\n<ul>\n<li>Enumerated types, with an eye to the difference between structs and enums, and to the differences between <code>enum</code>s in C and in Rust.</li>\n<li>Pattern matching, with a focus on using them with enumerated types and some discussion about how they differ from <code>switch</code> blocks in C-like languages.</li>\n<li>Using the <code>Option</code> and <code>Result</code> enumerated types with pattern matching to provide meaningful returns from functions safely.</li>\n</ul>\n<h2 id=\"order\">Order</h2>\n<p>There is a specific order to the examples below, and it is <em>not</em> the automatically-alphabetized order rendered by <code>rustdoc</code>. Instead, you should work through in the sequence they appear in the <a href=\"/src/show_notes/e003/e003.rs.html\">source</a>:</p>\n<ol type=\"1\">\n<li><a href=\"/show_notes/e003/enum.RelatedishThings.html\">RelatedishThings</a></li>\n<li><a href=\"/show_notes/e003/fn.demonstrate_basic_enumeration.html\">demonstrate_basic_enumeration</a></li>\n<li><a href=\"/show_notes/e003/fn.demonstrate_match.html\">demonstrate_match</a></li>\n<li><a href=\"/show_notes/e003/fn.get_an_option.html\">get_an_option</a></li>\n<li><a href=\"/show_notes/e003/fn.demonstrate_option.html\">demonstrate_option</a></li>\n<li><a href=\"/show_notes/e003/fn.get_a_result.html\">get_a_result</a></li>\n<li><a href=\"/show_notes/e003/fn.demonstrate_result.html\">demonstrate_result</a></li>\n</ol>\n<h2 id=\"links\">Links</h2>\n<ul>\n<li>New Rustacean <a href=\"https://github.com/chriskrycho/newrustacean.com/pull/1\">Pull Request #1</a></li>\n<li>Work on IDE support!\n<ul>\n<li><a href=\"https://www.rust-lang.org/ides.html\">Landing page</a></li>\n<li>My chosen tool: <a href=\"https://github.com/alexeykudinkin/intellij-rust\">JetBrains/IntelliJ</a></li>\n</ul></li>\n<li><a href=\"https://github.com/carols10cents/rustlings\">Rustlings</a></li>\n<li><a href=\"http://jakegoulding.com/rust-ffi-omnibus/basics/\">Rust FFI Omnibus</a></li>\n</ul>\n<h1 id=\"followsupport\">Follow/Support</h1>\n<ul>\n<li>New Rustacean:\n<ul>\n<li>Twitter: <a href=\"https://www.twitter.com/newrustacean\">@newrustacean</a></li>\n<li>App.net: <a href=\"https://alpha.app.net/newrustacean\">@newrustacean</a></li>\n<li><a href=\"https://www.patreon.com/newrustacean\" rel=\"payment\">Patreon</a></li>\n<li>Email: <script type=\"text/javascript\">\n<!--\nh='&#110;&#x65;&#x77;&#114;&#x75;&#x73;&#116;&#x61;&#x63;&#x65;&#x61;&#110;&#46;&#x63;&#x6f;&#x6d;';a='&#64;';n='&#104;&#x65;&#108;&#108;&#x6f;';e=n+a+h;\ndocument.write('<a h'+'ref'+'=\"ma'+'ilto'+':'+e+'\" clas'+'s=\"em' + 'ail\">'+e+'<\\/'+'a'+'>');\n// -->\n</script><noscript>&#104;&#x65;&#108;&#108;&#x6f;&#32;&#x61;&#116;&#32;&#110;&#x65;&#x77;&#114;&#x75;&#x73;&#116;&#x61;&#x63;&#x65;&#x61;&#110;&#32;&#100;&#x6f;&#116;&#32;&#x63;&#x6f;&#x6d;</noscript></li>\n</ul></li>\n<li>Chris Krycho\n<ul>\n<li>Twitter: <a href=\"https://www.twitter.com/chriskrycho\">@chriskrycho</a></li>\n<li>App.net: <a href=\"https://alpha.app.net/chriskrycho\">@chriskrycho</a></li>\n</ul></li>\n</ul>",
  "pubDate": "Wed, 21 Oct 2015 11:10:12 -0600",
  "enclosure": "",
  "guid": "E39A4582-8095-4645-8925-AB2887828F93",
  "itunes:author": "Chris Krycho",
  "itunes:subtitle": "Enumerated (`enum`) types, pattern matching, and meaningful return values.",
  "itunes:summary": "No More Nulls - Date: October 21, 2015 - Subject: Enumerated (`enum`) types, pattern matching, and meaningful return values. # Notes Today’s episode discusses, in order: - Enumerated types, with an eye to the difference between structs and enums, and to the differences between enums in C and in Rust. - Pattern matching, with a focus on using them with enumerated types and some discussion about how they differ from switch blocks in C-like languages. - Using the Option and Result enumerated types with pattern matching to provide meaningful returns from functions safely. ## Order There is a specific order to the examples below, and it is _not_ the automatically-alphabetized order rendered by rustdoc. Instead, you should work through in the sequence they appear in the source: 1. RelatedishThings 2. demonstrate_basic_enumeration 3. demonstrate_match 4. get_an_option 5. demonstrate_option 6. get_a_result 7. demonstrate_result",
  "itunes:duration": "16:51",
  "itunes:episodeType": "full"
}