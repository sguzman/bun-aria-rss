{
  "id": "yt:video:3T3ZDquDDVg",
  "yt:videoId": "3T3ZDquDDVg",
  "yt:channelId": "UC6biysICWOJ-C3P4Tyeggzg",
  "title": "LEVEL UP Your C Debugging Skills with THIS Technique Using GDB (its hard CORE)",
  "link": "",
  "author": {
    "name": "Low Level Learning",
    "uri": "https://www.youtube.com/channel/UC6biysICWOJ-C3P4Tyeggzg"
  },
  "published": "2022-10-01T14:00:02+00:00",
  "updated": "2022-10-04T21:08:26+00:00",
  "media:group": {
    "media:title": "LEVEL UP Your C Debugging Skills with THIS Technique Using GDB (its hard CORE)",
    "media:content": "",
    "media:thumbnail": "",
    "media:description": "Adding print statements to debug your crashing program is a tale as old as time. It gets the job done... most of the time. As your code gets more complex and larger, print debugging quickly becomes unfeasible. Using gdb and core files, you can easily cut your debugging time down. In this video, I'll be discussing a pet program that I wrote and using a core file to debug an issue with our program. We'll talk about how to get your program and kernel to produce a core file on segmentation fault, as well as a few techniques to debug C and C++.\n\n🏫 COURSES 🏫\nhttps://www.udemy.com/course/c-programming-101-for-aspiring-embedded-developers\n\n🔥🔥🔥 SOCIALS 🔥🔥🔥\nLow Level Merch!: https://www.linktr.ee/lowlevellearning\nFollow me on Twitter: https://twitter.com/lowlevellearni1\nFollow me on Twitch: https://twitch.tv/lowlevellearning\nJoin me on Discord!: https://discord.gg/gZhRXDdBYY",
    "media:community": {
      "media:starRating": "",
      "media:statistics": ""
    }
  }
}