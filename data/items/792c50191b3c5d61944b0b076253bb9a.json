{
  "id": "yt:video:-IsbsfV3jmw",
  "yt:videoId": "-IsbsfV3jmw",
  "yt:channelId": "UCAvGvvEemkeX8hurdPXr7hA",
  "title": "Compiling without Continuations (Simon Peyton Jones at Haskell eXchange 2017)",
  "link": "",
  "author": {
    "name": "Skills Matter (Incorporating YOW! Conferences)",
    "uri": "https://www.youtube.com/channel/UCAvGvvEemkeX8hurdPXr7hA"
  },
  "published": "2022-07-04T08:55:26+00:00",
  "updated": "2022-08-19T15:37:05+00:00",
  "media:group": {
    "media:title": "Compiling without Continuations (Simon Peyton Jones at Haskell eXchange 2017)",
    "media:content": "",
    "media:thumbnail": "",
    "media:description": "GHC compiles Haskell via Core, a tiny intermediate language based closely on the lambda calculus. Almost all GHC’s optimisations happen in Core, but until recently there was an important kind of optimisation that Core really did not handle well. In this talk, you will learn what the problem was, and how Core’s new “join points” solve it simply and beautifully, by effectively allowing Core to express control flow as well as data flow; there are strong links to so-called “continuation passing style” (CPS) here. On the way, you will explore how GHC’s Mighty Simplifier, which is responsible for many optimisations, works.\n\nUnderstanding join points can help you are a programmer too, because you can write code confident that it will optimise well. You will discover a rather compelling example this: “skip-less streams” now fuse well, for the first time, which allows us to drop the previous (ingenious but awkward) workarounds.\n\nThis talk was recorded on 12 October 2017 in London at Haskell eXchange 2017",
    "media:community": {
      "media:starRating": "",
      "media:statistics": ""
    }
  }
}