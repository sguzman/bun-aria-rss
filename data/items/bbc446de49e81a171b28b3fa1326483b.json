{
  "title": "e007: Testify",
  "link": "https://newrustacean.com/show_notes/e007/",
  "description": "<h2 id=\"notes\">Notes</h2>\n<p>All about testing in Rust! In order, we take a look at:</p>\n<ul>\n<li>Why you need tests.</li>\n<li>Unit tests in other (dynamically-typed) languages vs. in Rust.</li>\n<li>How to write unit tests in Rust.</li>\n<li>How and why to write integration tests in Rust.</li>\n<li>How and why to use benchmarks in Rust.</li>\n</ul>\n<p>The detailed code samples for this episode are heavy on showing; because of the nature of test functions, you will be best off just <a href=\"/src/show_notes/e007.rs.html\">reading the source</a> rather than leaning heavily on the descriptions generated by <strong>rustdoc</strong>. (The descriptions are still <em>there</em>, but they’re much less useful than they have been in previous episodes.) In particular, the <code>test</code> module here is excluded because of the use of the <code>#[cfg(test)]</code> attribute marker on it.</p>\n<p>Because we are using the feature-gated benchmarking functionality, the show notes “library” can now only be compiled with the Rust nightly (as of 1.5, the version current as this episode is produced).</p>\n<p>One thing that isn’t necessarily obvious from reading the test documentation in the Rust book and Rust reference: the <code>extern crate test</code> statement needs to be not in this module, but at the module (<code>lib.rs</code>) which defines the library/crate; in this case, <code>show_notes/lib.rs</code>.</p>\n<h2 id=\"links\">Links</h2>\n<ul>\n<li>Rust Book:\n<ul>\n<li><a href=\"https://doc.rust-lang.org/book/testing.html\">Testing</a></li>\n<li><a href=\"https://doc.rust-lang.org/book/attributes.html\">Attributes</a></li>\n<li><a href=\"https://doc.rust-lang.org/book/benchmark-tests.html\">Benchmark tests</a></li>\n</ul></li>\n<li>Rust reference: <a href=\"https://doc.rust-lang.org/reference.html#attributes\">Attributes</a></li>\n<li><a href=\"https://github.com/sgrif/diesel\">Diesel (Rust ORM)</a>\n<ul>\n<li><a href=\"http://bikeshed.fm/31\">31: Oxidizing an ORM</a></li>\n<li><a href=\"http://bikeshed.fm/32\">32: Bug for Bug Compatibility</a></li>\n</ul></li>\n</ul>\n<h2 id=\"sponsors\">Sponsors</h2>\n<ul>\n<li>Chris Palmer</li>\n<li><a href=\"https://twitter.com/derekmorr\">Derek Morr</a></li>\n<li>Luca Schmid</li>\n<li>Micael Bergeron</li>\n<li>Ralph Giles (“rillian”)</li>\n<li>reddraggone9</li>\n<li><a href=\"http://willroe.me\">William Roe</a></li>\n</ul>\n<h3 id=\"become-a-sponsor\">Become a sponsor</h3>\n<ul>\n<li><a href=\"https://www.patreon.com/newrustacean\" rel=\"payment\">Patreon</a></li>\n<li><a href=\"https://venmo.com/chriskrycho\">Venmo</a></li>\n<li><a href=\"https://www.dwolla.com/hub/chriskrycho\">Dwolla</a></li>\n<li><a href=\"https://cash.me/$chriskrycho\">Cash.me</a></li>\n</ul>\n<h2 id=\"follow\">Follow</h2>\n<ul>\n<li>New Rustacean:\n<ul>\n<li>Twitter: <a href=\"https://www.twitter.com/newrustacean\">@newrustacean</a></li>\n<li>App.net: <a href=\"https://alpha.app.net/newrustacean\">@newrustacean</a></li>\n<li>Email: <a href=\"mailto:hello@newrustacean.com\">hello@newrustacean.com</a></li>\n</ul></li>\n<li>Chris Krycho\n<ul>\n<li>Twitter: <a href=\"https://www.twitter.com/chriskrycho\">@chriskrycho</a></li>\n<li>App.net: <a href=\"https://alpha.app.net/chriskrycho\">@chriskrycho</a></li>\n</ul></li>\n</ul>",
  "pubDate": "Sun, 13 Dec 2015 10:38:36 -0700",
  "enclosure": "",
  "guid": "9B3A138D-FE96-4A8A-A708-BDCBF1F63A3F",
  "itunes:author": "Chris Krycho",
  "itunes:subtitle": "Testing and benchmarking, and compiler attributes.",
  "itunes:summary": "Notes All about testing in Rust! In order, we take a look at: - Why you need tests. - Unit tests in other (dynamically-typed) languages vs. in Rust. - How to write unit tests in Rust. - How and why to write integration tests in Rust. - How and why to use benchmarks in Rust. The detailed code samples for this episode are heavy on showing; because of the nature of test functions, you will be best off just reading the source rather than leaning heavily on the descriptions generated by RUSTDOC. (The descriptions are still _there_, but they’re much less useful than they have been in previous episodes.) In particular, the test module here is excluded because of the use of the #[cfg(test)] attribute marker on it. Because we are using the feature-gated benchmarking functionality, the show notes “library” can now only be compiled with the Rust nightly (as of 1.5, the version current as this episode is produced). One thing that isn’t necessarily obvious from reading the test documentation in the Rust book and Rust reference: the extern crate test statement needs to be not in this module, but at the module (lib.rs) which defines the library/crate; in this case, show_notes/lib.rs. Sponsors - Chris Palmer - Derek Morr - Luca Schmid - Micael Bergeron - Ralph Giles (“rillian”) - reddraggone9 - William Roe Become a sponsor - Patreon.com/newrustacean - Venmo.com/chriskrycho - Dwolla.com/hub/chriskrycho - Cash.me/$chriskrycho Follow - New Rustacean: - Twitter: @newrustacean - App.net: @newrustacean - Email: hello@newrustacean.com - Chris Krycho - Twitter: @chriskrycho - App.net: @chriskrycho",
  "itunes:duration": "18:46",
  "itunes:episodeType": "full"
}