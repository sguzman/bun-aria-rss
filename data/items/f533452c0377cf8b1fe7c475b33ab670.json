{
  "title": "Building pyarrow with CUDA support",
  "description": "<p>The other day I was looking to read an Arrow buffer on GPU using Python, but as far as I could tell, none of the provided pyarrow packages on conda or pip are built with CUDA support. Like many of the packages in the compiled-C-wrapped-by-Python ecosystem, <a href=\"http://arrow.apache.org/\">Apache Arrow</a> is thoroughly documented, but the number of permutations of how you could choose to build <a href=\"http://arrow.apache.org/docs/developers/python.html#building-on-linux-and-macos\">pyarrow with CUDA support</a> quickly becomes overwhelming.</p>",
  "pubDate": "Fri, 03 Apr 2020 00:00:00 +0000",
  "link": "http://randyzwitch.com/pyarrow-cuda-support/",
  "guid": "http://randyzwitch.com/pyarrow-cuda-support/",
  "content": "<p>The other day I was looking to read an Arrow buffer on GPU using Python, but as far as I could tell, none of the provided pyarrow packages on conda or pip are built with CUDA support. Like many of the packages in the compiled-C-wrapped-by-Python ecosystem, <a href=\"http://arrow.apache.org/\">Apache Arrow</a> is thoroughly documented, but the number of permutations of how you could choose to build <a href=\"http://arrow.apache.org/docs/developers/python.html#building-on-linux-and-macos\">pyarrow with CUDA support</a> quickly becomes overwhelming.</p>\n\n<p>In this post, I’ll show how to build pyarrow with CUDA support on Ubuntu using Docker and <a href=\"https://docs.python-guide.org/dev/virtualenvs/#lower-level-virtualenv\">virtualenv</a>. These directions are approximately the same as the official Apache Arrow docs, just that I explain them step-by-step and show only the single build toolchain I used.</p>\n\n<h2 id=\"step-1-docker-with-gpu-support\">Step 1: Docker with GPU support</h2>\n\n<p>Even though I use Ubuntu 18.04 LTS on a workstation with an NVIDIA GPU, whenever I undertake a project like this, I like to use a Docker container to keep everything isolated. The last thing you want to do is to debug environment errors, changing dependencies for one project and breaking something else. Thankfully, <a href=\"https://hub.docker.com/r/nvidia/cuda/\">NVIDIA Docker developer images</a> are available via DockerHub:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>docker run <span class=\"nt\">-it</span> <span class=\"nt\">--gpus</span><span class=\"o\">=</span>all <span class=\"nt\">--rm</span> nvidia/cuda:10.1-devel-ubuntu18.04 bash\n</code></pre></div></div>\n\n<p>Here, the <code class=\"language-plaintext highlighter-rouge\">-it</code> flag puts us inside the container at a bash prompt, <code class=\"language-plaintext highlighter-rouge\">--gpus=all</code> allows the Docker container to access my workstation’s GPUs and <code class=\"language-plaintext highlighter-rouge\">--rm</code> deletes the container after we’re done to save space.</p>\n\n<h2 id=\"step-2-setting-up-the-ubuntu-docker-container\">Step 2: Setting up the Ubuntu Docker container</h2>\n\n<p>When you pull Docker containers from DockerHub, frequently they are bare-bones in terms of libraries included, and usually can also be updated. For building pyarrow, it’s useful to install the following:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>apt update <span class=\"o\">&amp;&amp;</span> apt upgrade <span class=\"nt\">-y</span>\n\napt <span class=\"nb\">install </span>git <span class=\"se\">\\</span>\nwget <span class=\"se\">\\</span>\nlibssl-dev <span class=\"se\">\\</span>\nautoconf <span class=\"se\">\\</span>\nflex <span class=\"se\">\\</span>\nbison <span class=\"se\">\\</span>\nllvm-7 <span class=\"se\">\\</span>\nclang <span class=\"se\">\\</span>\ncmake <span class=\"se\">\\</span>\npython3-pip <span class=\"se\">\\</span>\nlibjemalloc-dev <span class=\"se\">\\</span>\nlibboost-dev <span class=\"se\">\\</span>\nlibboost-filesystem-dev <span class=\"se\">\\</span>\nlibboost-system-dev <span class=\"se\">\\</span>\nlibboost-regex-dev  <span class=\"se\">\\</span>\npython3-dev <span class=\"nt\">-y</span>\n</code></pre></div></div>\n\n<p>In a later step, we’ll use the Arrow third-party dependency script to ensure all needed dependencies are present, but these are a good start.</p>\n\n<h2 id=\"step-3-cloning-apache-arrow-from-github\">Step 3: Cloning Apache Arrow from GitHub</h2>\n\n<p>Cloning Arrow from GitHub is pretty straightforward. The <code class=\"language-plaintext highlighter-rouge\">git checkout apache-arrow-0.15.0</code> line is optional; I needed version 0.15.0 for the project I was exploring, but if you want to build from the master branch of Arrow, you can omit that line.</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>git clone https://github.com/apache/arrow.git /repos/arrow\n<span class=\"nb\">cd</span> /repos/arrow\ngit submodule init <span class=\"o\">&amp;&amp;</span> git submodule update\ngit checkout apache-arrow-0.15.0\n<span class=\"nb\">export </span><span class=\"nv\">PARQUET_TEST_DATA</span><span class=\"o\">=</span><span class=\"s2\">\"</span><span class=\"k\">${</span><span class=\"nv\">PWD</span><span class=\"k\">}</span><span class=\"s2\">/cpp/submodules/parquet-testing/data\"</span>\n<span class=\"nb\">export </span><span class=\"nv\">ARROW_TEST_DATA</span><span class=\"o\">=</span><span class=\"s2\">\"</span><span class=\"k\">${</span><span class=\"nv\">PWD</span><span class=\"k\">}</span><span class=\"s2\">/testing/data\"</span>\n</code></pre></div></div>\n\n<h2 id=\"step-4-installing-remaining-apache-arrow-dependencies\">Step 4: Installing remaining Apache Arrow dependencies</h2>\n\n<p>As mentioned in Step 2, some of the dependencies for building Arrow are system-level and can be installed via apt. To ensure that we have all the remaining third-party dependencies, we can use the provided script in the Arrow repository:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>pip3 <span class=\"nb\">install </span>virtualenv\nvirtualenv pyarrow\n<span class=\"nb\">source</span> ./pyarrow/bin/activate\npip <span class=\"nb\">install </span>six numpy pandas cython pytest hypothesis\n<span class=\"nb\">mkdir </span>dist\n<span class=\"nb\">export </span><span class=\"nv\">ARROW_HOME</span><span class=\"o\">=</span><span class=\"si\">$(</span><span class=\"nb\">pwd</span><span class=\"si\">)</span>/dist\n<span class=\"nb\">export </span><span class=\"nv\">LD_LIBRARY_PATH</span><span class=\"o\">=</span><span class=\"si\">$(</span><span class=\"nb\">pwd</span><span class=\"si\">)</span>/dist/lib:<span class=\"nv\">$LD_LIBRARY_PATH</span>\n\n<span class=\"nb\">cd </span>cpp\n./thirdparty/download_dependencies.sh <span class=\"nv\">$HOME</span>/arrow-thirdparty\n</code></pre></div></div>\n\n<p>The script downloads all of the necessary libraries as well as sets environment variables that are picked up later, which is amazingly helpful.</p>\n\n<h2 id=\"step-5-building-apache-arrow-c-library\">Step 5: Building Apache Arrow C++ library</h2>\n\n<p>pyarrow links to the Arrow C++ bindings, so it needs to be present before we can build the pyarrow wheel:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">mkdir </span>build <span class=\"o\">&amp;&amp;</span> <span class=\"nb\">cd </span>build\n\ncmake <span class=\"nt\">-DCMAKE_INSTALL_PREFIX</span><span class=\"o\">=</span><span class=\"nv\">$ARROW_HOME</span> <span class=\"se\">\\</span>\n<span class=\"nt\">-DCMAKE_INSTALL_LIBDIR</span><span class=\"o\">=</span>lib <span class=\"se\">\\</span>\n<span class=\"nt\">-DARROW_FLIGHT</span><span class=\"o\">=</span>ON <span class=\"se\">\\</span>\n<span class=\"nt\">-DARROW_GANDIVA</span><span class=\"o\">=</span>ON <span class=\"se\">\\</span>\n<span class=\"nt\">-DARROW_ORC</span><span class=\"o\">=</span>ON <span class=\"se\">\\</span>\n<span class=\"nt\">-DARROW_WITH_BZ2</span><span class=\"o\">=</span>ON <span class=\"se\">\\</span>\n<span class=\"nt\">-DARROW_WITH_ZLIB</span><span class=\"o\">=</span>ON <span class=\"se\">\\</span>\n<span class=\"nt\">-DARROW_WITH_ZSTD</span><span class=\"o\">=</span>ON <span class=\"se\">\\</span>\n<span class=\"nt\">-DARROW_WITH_LZ4</span><span class=\"o\">=</span>ON <span class=\"se\">\\</span>\n<span class=\"nt\">-DARROW_WITH_SNAPPY</span><span class=\"o\">=</span>ON <span class=\"se\">\\</span>\n<span class=\"nt\">-DARROW_WITH_BROTLI</span><span class=\"o\">=</span>ON <span class=\"se\">\\</span>\n<span class=\"nt\">-DARROW_PARQUET</span><span class=\"o\">=</span>ON <span class=\"se\">\\</span>\n<span class=\"nt\">-DARROW_PYTHON</span><span class=\"o\">=</span>ON <span class=\"se\">\\</span>\n<span class=\"nt\">-DARROW_PLASMA</span><span class=\"o\">=</span>ON <span class=\"se\">\\</span>\n<span class=\"nt\">-DARROW_BUILD_TESTS</span><span class=\"o\">=</span>ON <span class=\"se\">\\</span>\n<span class=\"nt\">-DARROW_CUDA</span><span class=\"o\">=</span>ON <span class=\"se\">\\</span>\n..\n\nmake <span class=\"nt\">-j</span>\nmake <span class=\"nb\">install</span>\n</code></pre></div></div>\n\n<p>This is a pretty standard workflow for building a C or C++ library. We create a <code class=\"language-plaintext highlighter-rouge\">build</code> directory, call <code class=\"language-plaintext highlighter-rouge\">cmake</code> from inside of that directory to set up the options we want to use, then use <code class=\"language-plaintext highlighter-rouge\">make</code> and then <code class=\"language-plaintext highlighter-rouge\">make install</code> to compile and install the library, respectively. I chose all of the <code class=\"language-plaintext highlighter-rouge\">-DARROW_*</code> options above just as a copy/paste from the Arrow documentation; Arrow doesn’t take long to build using these options, but it’s possibly the case that only <code class=\"language-plaintext highlighter-rouge\">-DARROW_PYTHON=ON</code> and <code class=\"language-plaintext highlighter-rouge\">-DARROW_CUDA=ON</code> are truly necessary to build pyarrow.</p>\n\n<h2 id=\"step-6-building-pyarrow-wheel\">Step 6: Building pyarrow wheel</h2>\n\n<p>With the Apache Arrow C++ bindings built, we can now build the Python wheel:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">cd</span> /repos/arrow/python\n<span class=\"nb\">export </span><span class=\"nv\">PYARROW_WITH_PARQUET</span><span class=\"o\">=</span>1\n<span class=\"nb\">export </span><span class=\"nv\">PYARROW_WITH_CUDA</span><span class=\"o\">=</span>1\npython setup.py build_ext <span class=\"nt\">--build-type</span><span class=\"o\">=</span>release <span class=\"nt\">--bundle-arrow-cpp</span> bdist_wheel\n</code></pre></div></div>\n\n<p>As cmake and make run, you’ll eventually see the following in the build logs, which shows that we’re getting the behavior we want:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>cmake <span class=\"nt\">--build</span> <span class=\"nb\">.</span> <span class=\"nt\">--config</span> release <span class=\"nt\">--</span>\n<span class=\"o\">[</span>  5%] Compiling Cython CXX <span class=\"nb\">source </span><span class=\"k\">for </span>_cuda...\n<span class=\"o\">[</span>  5%] Built target _cuda_pyx\nScanning dependencies of target _cuda\n<span class=\"o\">[</span> 11%] Building CXX object CMakeFiles/_cuda.dir/_cuda.cpp.o\n<span class=\"o\">[</span> 16%] Linking CXX shared module release/_cuda.cpython-36m-x86_64-linux-gnu.so\n<span class=\"o\">[</span> 16%] Built target _cuda\n</code></pre></div></div>\n\n<p>When the process finishes, the final wheel will be in the <code class=\"language-plaintext highlighter-rouge\">/repos/arrow/python/dist</code> directory.</p>\n\n<h2 id=\"step-7-optional-validate-build\">Step 7 (optional): Validate build</h2>\n\n<p>If you want to validate that your pyarrow wheel has CUDA installed, you can run the following:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"o\">(</span>pyarrow<span class=\"o\">)</span> root@9260485caca3:/repos/arrow/python/dist# pip <span class=\"nb\">install </span>pyarrow-0.15.1.dev0+g40d468e16.d20200402-cp36-cp36m-linux_x86_64.whl\nProcessing ./pyarrow-0.15.1.dev0+g40d468e16.d20200402-cp36-cp36m-linux_x86_64.whl\nRequirement already satisfied: six&gt;<span class=\"o\">=</span>1.0.0 <span class=\"k\">in</span> /repos/arrow/pyarrow/lib/python3.6/site-packages <span class=\"o\">(</span>from <span class=\"nv\">pyarrow</span><span class=\"o\">==</span>0.15.1.dev0+g40d468e16.d20200402<span class=\"o\">)</span> <span class=\"o\">(</span>1.14.0<span class=\"o\">)</span>\nRequirement already satisfied: numpy&gt;<span class=\"o\">=</span>1.14 <span class=\"k\">in</span> /repos/arrow/pyarrow/lib/python3.6/site-packages <span class=\"o\">(</span>from <span class=\"nv\">pyarrow</span><span class=\"o\">==</span>0.15.1.dev0+g40d468e16.d20200402<span class=\"o\">)</span> <span class=\"o\">(</span>1.18.2<span class=\"o\">)</span>\nInstalling collected packages: pyarrow\nSuccessfully installed pyarrow-0.15.1.dev0+g40d468e16.d20200402\n<span class=\"o\">(</span>pyarrow<span class=\"o\">)</span> root@9260485caca3:/repos/arrow/python/dist# python\nPython 3.6.9 <span class=\"o\">(</span>default, Nov  7 2019, 10:44:02<span class=\"o\">)</span>\n<span class=\"o\">[</span>GCC 8.3.0] on linux\nType <span class=\"s2\">\"help\"</span>, <span class=\"s2\">\"copyright\"</span>, <span class=\"s2\">\"credits\"</span> or <span class=\"s2\">\"license\"</span> <span class=\"k\">for </span>more information.\n<span class=\"o\">&gt;&gt;&gt;</span> from pyarrow import cuda\n<span class=\"o\">&gt;&gt;&gt;</span>\n</code></pre></div></div>\n\n<p>When the line <code class=\"language-plaintext highlighter-rouge\">from pyarrow import cuda</code> runs without error, then we know that our pyarrow build with CUDA was successful.</p>"
}