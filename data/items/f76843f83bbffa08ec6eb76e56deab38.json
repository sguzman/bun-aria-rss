{
  "title": "My Top 10% Solution for Kaggle Rossman Store Sales Forecasting Competition",
  "description": "<p><em>This is the first time I have participated in a machine learning competition and my result turned out to be quite good: <a href=\"https://www.kaggle.com/mabrek/results\">66th out of 3303</a>. I used R and an average of two models: glmnet and xgboost with a lot of feature engineering.</em></p>\n\n<p>The goal of the <a href=\"https://www.kaggle.com/c/rossmann-store-sales\">competition</a> was to predict 6 weeks of daily <code class=\"language-plaintext highlighter-rouge\">Sales</code> in 1115 stores located in different parts of Germany based on 2.5 years of historical daily sales.</p>\n\n<p>The first thing I tried after importing data was to convert it into multivariate regular time series and run <a href=\"https://mabrek.github.io/blog/multivariate-svd-pca/\">SVD</a>. The result highlighted several interesting details:</p>\n\n<ul>\n  <li>the majority of stores didn’t have upward or downward trends</li>\n  <li>seasonal variation was present but mostly as a Christmas effect</li>\n  <li>Sunday was a non-working day in a  majority of stores</li>\n  <li>there was a strange 2 week cycle which was an effect of running <code class=\"language-plaintext highlighter-rouge\">Promo</code> actions every other week</li>\n  <li>there were group of stores that didn’t close on Sunday in summer</li>\n  <li>some stores had strong yearly pattern</li>\n  <li>some stores showed continuous sales increases and other decreases over time</li>\n  <li>several stores were missing data from the second  half of 2014</li>\n</ul>\n\n<p>I sampled several stores from different groups to check various ideas on them first.</p>\n\n<p>In the beginning my idea was to check how good a single interpretable model could be. There were two simple benchmark models (<a href=\"https://www.kaggle.com/shearerp/rossmann-store-sales/interactive-sales-visualization\">median</a> and <a href=\"https://www.kaggle.com/shearerp/rossmann-store-sales/store-dayofweek-promo-0-13952\">geometric mean</a>) on the competition forum which I used as a starting point.</p>\n\n<p>To validate model quality I implemented time-based cross-validation as described in <a href=\"https://www.otexts.org/fpp/2/5\">Forecasting: principles and practice</a></p>\n\n<p>Interactive visualization helped a lot in identifying features and sources of errors.</p>\n\n<p><img src=\"https://mabrek.github.io/img/kaggle-forecasting.png\" alt=\"store forecast with error\" /></p>\n\n<p>Initially I tried <a href=\"http://www.inside-r.org/packages/cran/forecast/docs/tbats\"><code class=\"language-plaintext highlighter-rouge\">forecast::tbats</code></a> (a separate model for each store) but the results were quite bad. The influence of non-seasonal factors was big but <a href=\"http://robjhyndman.com/hyndsight/tbats-with-regressors/\">tbats can’t</a> <a href=\"http://robjhyndman.com/hyndsight/dailydata/\">use external regressors</a>. Next I considered using <a href=\"http://www.inside-r.org/packages/cran/forecast/docs/auto.arima\">ARIMA</a>, as it can use regressors, but for long-term forecasts it decays to <a href=\"https://www.otexts.org/fpp/8/5\">constant or linear trends</a>. So I continued to evaluate different kinds of linear models. As more and more features were added, the simple linear model started to get worse so I switched to <a href=\"http://www.inside-r.org/packages/cran/glmnet/docs/glmnet\">glmnet</a> which is able to select subsets of features.</p>\n\n<p>There was some similarity between <code class=\"language-plaintext highlighter-rouge\">Sales</code> and count data so I tried Poisson regression as suggested in <a href=\"http://www.magesblog.com/2015/08/generalised-linear-models-in-r.html\">Generalized Linear Models in R</a>. This, however, resulted in a larger error in cross-validation than predicting <code class=\"language-plaintext highlighter-rouge\">log(Sales)</code> using <a href=\"https://cran.r-project.org/web/packages/glmnet/vignettes/glmnet_beta.html#lin\">Gaussian family</a> of generalized linear model.</p>\n\n<p><a href=\"https://www.kaggle.com/c/rossmann-store-sales/details/evaluation\">RMSPE evaluation criteria</a> is asymmetric (see <a href=\"https://www.otexts.org/fpp/2/5\">discussion of MAPE</a>) and sensitive to outliers. The typical range for different models and different stores was between 0.08 and 0.25. If a model predicted a sales value of 1000 on a specific day (for example) and the actual sales were 10 because there was an unaccounted holiday,  then  RMSPE would be equal to 99 for that day which would  make an otherwise good model look really bad on average.</p>\n\n<p>The best per store glmnet model scored worse than  <a href=\"https://github.com/dmlc/xgboost\">xgboost</a>, <a href=\"https://www.kaggle.com/abhilashawasthi/rossmann-store-sales/xgb-rossmann/run/86608\">also published on the forum</a>. Tree based regression models don’t extrapolate well because they <a href=\"https://www.kaggle.com/forums/f/15/kaggle-forum/t/6609/why-does-extrapolating-a-sine-curve-via-a-randomforest-gives-a-straight\">predict with constant value anything outside their training ranges</a>. The number of stores with long-range trends was small and the majority had quite stable sales over time, so I decided to give xgboost a try and feed it with the same features as I did for linear model (without <a href=\"https://en.wikipedia.org/wiki/One-hot\">one-hot encoding</a> for categorical features).</p>\n\n<p>Feature engineering:</p>\n\n<ul>\n  <li>5 fourier terms generated by <a href=\"http://www.inside-r.org/packages/cran/forecast/docs/fourier\"><code class=\"language-plaintext highlighter-rouge\">forecast::fourier</code></a> with frequency=365;</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">Days</code> and <code class=\"language-plaintext highlighter-rouge\">log(Days)</code> since the beginning of the training set to capture trends (exponential and linear because <code class=\"language-plaintext highlighter-rouge\">log(Sales)</code> is predicted);</li>\n  <li>exponential and linear growth before events or decay after events such as starting <code class=\"language-plaintext highlighter-rouge\">Promo</code> or state holidays (similar to <a href=\"https://github.com/republicwireless-open/foregen\">foregen</a> which I discovered later);</li>\n  <li>binary features which took value 1 for several days before or after events including the start and end of <code class=\"language-plaintext highlighter-rouge\">Promo</code>, <code class=\"language-plaintext highlighter-rouge\">Promo2</code>, <code class=\"language-plaintext highlighter-rouge\">StateHoliday</code>, and refurbishments;</li>\n  <li>binary features like <code class=\"language-plaintext highlighter-rouge\">ClosesTomorrow</code>, <code class=\"language-plaintext highlighter-rouge\">WasClosedYesterday</code>, <code class=\"language-plaintext highlighter-rouge\">WasClosedOnSunday</code>;</li>\n  <li>day of week, day of month, month number, year as categorical features for xbgoost and n-1 binary features for glmnet (described at https://www.otexts.org/fpp/5/2 ).</li>\n</ul>\n\n<p>For some stores with large error in cross-validation I dropped data before manually selected (by examining <code class=\"language-plaintext highlighter-rouge\">Sales</code> time series graphs) changepoints.</p>\n\n<p>The training set contained more stores than were present in the test set. I dropped those extra stores from the training set for xgboost.</p>\n\n<p>I dropped outliers from the training set for glmnet. Outliers were selected by <code class=\"language-plaintext highlighter-rouge\">&gt; 2.5 * median absolute residual</code> from <code class=\"language-plaintext highlighter-rouge\">lm</code> trained on a small set of features per store.</p>\n\n<p>Initially I used 10 cross-validation folds with 6 weeks length starting from the end of the training set with 2 weeks step (~4.5 months total) but then found that closest to 2014 folds produce large errors for stores with missing in 2014 data. Then I switched to 15 folds with 3 days step to avoid being too close to 2014 which improved predictions for those stores.</p>\n\n<p>RMSPE was quite different for different prediction ranges. For the same store it could go from 0.103 to 0.125 with the same model. It made me think that public leaderboard position is going to change a lot in private leaderboard because they have time based split. It turned out to be <a href=\"https://www.kaggle.com/c/rossmann-store-sales/forums/t/17898/leaderboard-shakeup\">true</a>.</p>\n\n<p>Grid search was used to find <code class=\"language-plaintext highlighter-rouge\">glmnet</code> <code class=\"language-plaintext highlighter-rouge\">alpha</code> parameter. The best <code class=\"language-plaintext highlighter-rouge\">alpha</code> was 1 which corresponds to <a href=\"https://en.wikipedia.org/wiki/Least_squares#Lasso_method\">Lasso  regularization</a>. Choice of <code class=\"language-plaintext highlighter-rouge\">lambda</code> is implemented in <a href=\"http://www.inside-r.org/packages/cran/glmnet/docs/cv.glmnet\">cv.glmnet</a> but it uses a standard k-fold cross-validation. I reimplemented it with a time-based cross-validation.</p>\n\n<p><a href=\"https://www.kaggle.com/c/rossmann-store-sales/forums/t/17601/correcting-log-sales-prediction-for-rmspe/99643#post99643\">0.985 correction</a> was insignificant on cross-validation (effect was less than standard deviation of RMSPE from different folds) but helped on both private and public leaderboards.</p>\n\n<p>Pairwise feature combinations had positive effect for glmnet on cross-validation but didn’t work on leaderboard.</p>\n\n<p>As a result single per store glmnet model gave prediction error (RMSPE) on private leaderboard 0.11974 (516th place), single all stores xgboost model - 0.11839 (379th), their average - 0.11262 (66th). Complicated ensemble models are good for competitions but in practice it might be better to have 0.007 increase in error and simple interpretable model.</p>\n\n<p>Source code is available at <a href=\"https://github.com/mabrek/kaggle-rossman-store-sales\">github.com/mabrek/kaggle-rossman-store-sales</a></p>",
  "pubDate": "Sat, 16 Jan 2016 00:00:00 +0000",
  "link": "https://mabrek.github.io/blog/kaggle-forecasting/",
  "guid": "https://mabrek.github.io/blog/kaggle-forecasting/"
}