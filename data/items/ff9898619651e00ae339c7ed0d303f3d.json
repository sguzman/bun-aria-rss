{
  "title": "Mira magic&#8212;a probabilistic card trick",
  "link": "https://statmodeling.stat.columbia.edu/2022/10/07/mira-magic-a-probabilistic-card-trick/",
  "comments": "https://statmodeling.stat.columbia.edu/2022/10/07/mira-magic-a-probabilistic-card-trick/#comments",
  "dc:creator": "Bob Carpenter",
  "pubDate": "Fri, 07 Oct 2022 19:00:41 +0000",
  "category": [
    "Statistical computing",
    "Teaching"
  ],
  "guid": "https://statmodeling.stat.columbia.edu/?p=48070",
  "description": "One of the fun and educational exhibits at Antonietta Mira&#8217;s children&#8217;s science museum exhibition, Numb3d by Numbers, is a probabilistic card trick. Antonietta didn&#8217;t invent the trick and can&#8217;t recall who did (nor did a quick internet search reveal the &#8230; <a href=\"https://statmodeling.stat.columbia.edu/2022/10/07/mira-magic-a-probabilistic-card-trick/\">Continue reading <span class=\"meta-nav\">&#8594;</span></a>",
  "content:encoded": "<p>One of the fun and educational exhibits at Antonietta Mira&#8217;s children&#8217;s science museum exhibition, <a href=\"https://statmodeling.stat.columbia.edu/2022/10/06/numb3d-by-numbers-a-must-see-kids-science-exhibition-about-measurement-counting-and-stats/\">Numb3d by Numbers</a>, is a probabilistic card trick.  Antonietta didn&#8217;t invent the trick and can&#8217;t recall who did (nor did a quick internet search reveal the originator).  The trick is characteristic of probabilistic card tricks, which are tricks that work with some high probability.</p>\n<p><b>The card trick</b></p>\n<p>Kids divide up a standard deck of 52 playing cards and lay them out end to end in any order.  The cards are big enough for kids to stand on, and laying 52 of them out creates a winding path through the exhibition hall. The exhibition is just full of these nice touches&#8212;everything is highly interactive and scaled for not just one child, but groups of children.  </p>\n<p>Next, each kid chooses a starting point from among the first five cards and stands on the card they have chosen.  At this point, the science educator leading the tour tells them where they will all end up.  Each child proceeds along the path of cards the path (down the deck), each time advancing by the value of the card on which they were standing (cards 1–9 have their natural values, whereas ace, 10, jack, queen, king all count as 1). </p>\n<p>How does the educator know where they&#8217;ll all end up and what&#8217;s the probability that the trick works?</p>\n<p><b>Coupling in Markov chains</b></p>\n<p>The first observation to make about this is that the trick works by coupling.  That is, each kids&#8217; path picks out a Markov chain, and they will couple with high probability.  Coupling here means that they get to the same card at some point before the end of the path.  Given that the path is deterministic, as soon as a pair of paths couple, they are guaranteed to wind up in the same location.</p>\n<p><b>Stanislaw Ulam to the rescue</b></p>\n<p>Ulam developed the Monte Carlo method when he was laid up in hospital in 1946 and playing solitaire to pass the time.  He couldn&#8217;t work out the exact probability of winning analytically, so he played a bunch of games and estimated the chance of winning by the empirical win frequency.  Fun aside:  according to the <a href=\"https://bookdown.org/manuele_leonelli/SimBook/a-bit-of-history.html\">A bit of history</a> section of Manuelle Leonelli&#8217;s online book <i>Simulation and Modelling to Understand Change</I>, the name &#8220;Monte Carlo&#8221; was chosen by Metropolis as a code name for von Neumann and Ulam&#8217;s work, which was classified (being during the Cold War).</p>\n<p>We&#8217;re going to follow in Ulam&#8217;s footsteps and figure out the answer by simulation.  Mitzi and I wrote the following Python code to do the simulation on the train after visiting Antonietta at Università della Svizzera Italiana (USI) in Lugano.</p>\n<p><tt style=\"font-family: ui-monospace\">mira-magic.py</tt>:</p>\n<pre style=\"font-family: ui-monospace\">\nimport random\n\nsuit = [1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 1, 1, 1]\ndeck = 4 * suit\n\ndef walk(deck, start):\n    \"\"\"returns final position for deck from start position\"\"\"\n    pos = start\n    while pos + deck[pos] < len(deck):\n        pos += deck[pos]\n    return pos\n\ndef couples(deck):\n    \"\"\"return True if two random starts in 0:4 of a shuffled deck couple\"\"\"\n    random.shuffle(deck)\n    starts = random.sample(range(5), 2)\n    end1 = walk(deck, starts[0])\n    end2 = walk(deck, starts[1])\n    return end1 == end2\n\nN = 10**6\nsuccesses = 0\nfor _ in range(N):\n    successes += couples(deck)\n\nrate = successes / N    \nvar = rate * (1 - rate) * N\nsd = var**0.5\nse = sd / N\nconf_lb = rate - 1.96 * se\nconf_ub = rate + 1.96 * se\n\nprint(f'Based on {N} simulations:')\nprint(f'  probability of coupling: {rate:5.3f}')\nprint(f'  se: {se:7.5f}')\nprint(f'  95% confidence interval = ({conf_lb:6.4f}, {conf_ub:6.4f})')\n</pre>\n<p>We define one suit of a deck of cards and then repeat it 4 times for a full deck.  We then defined a function <tt style=\"font-family: ui-monospace\">walk()</tt> that evaluates the final position given a starting position and the deck.  We define a second function <tt style=\"font-family: ui-monospace\">couples()</tt> that returns <tt style=\"font-family: monospace\">True</tt> if we shuffle the deck, choose two different starting points among the first five cards, and wind up at the same place.  The main loop just does a bunch of simulations and counts the number of successes.  This lets us define the success rate.  The variance of a binomial distribution is known and computed as indicated.  We then calculate the standard deviation and standard error, which lets us compute the bounds of a confidence interval.  We then print the results with carefully chosen precision to match the standard errors.</p>\n<p><b>The results</b></p>\n<p>Here's what happens when we run the program.</p>\n<pre style=\"font-family: ui-monospace\">\ncard-coupling$ python3 mira-magic.py \nBased on 1000000 simulations:\n  probability of coupling: 0.983\n  se: 0.00013\n  95% confidence interval = (0.9828, 0.9833)\n</pre>\n<p>So that's our answer---98.3%.  The confidence interval just shows we've run enough simulations.  The whole simulation takes close to 15s on my new M2-based MacBook Air, because Python is really really slow for loops [edit: one of the comments has a faster Julia version.]</p>\n<p>I wonder what the science educators do when either (a) kids count wrong, or (b) the trick just fails probabilistically.</p>\n<p><b>Variants</b></p>\n<p>We can also consider variants by slightly tweaking the code.</p>\n<ul>\n<li>If the kids are forced to choose the first two cards, the probability goes up to 98.8%.\n<li>If we count 10 as 10, the probability goes down to 94.3%.\n<li>If we count 10 as 10 and all the face cards as 10, the probability goes way down to 69.5%.\n<li>If we add two jokers and have them count as 1, the probability goes up to 99.7%.\n<li>If we were to use two decks instead of one, the probability goes up to 99.98%.\n<li>If we use two decks and add two jokers, the probability is above 99.99%.\n</ul>\n<p>All those cards with value 1 clearly have a strong effect on the probability of coupling, as does the size of the deck.</p>\n<p>For more about coupling in Markov chains and applications to shuffling cards and random walks on a hypercube, here's a nice <a href=\"https://people.engr.tamu.edu/andreas-klappenecker/csce658-s18/coupling.pdf\">slide deck from Andreas Klappenecker</a>.</p>\n<p>[edit:  I forgot to say how the educator knew the answer---they just count from card 1 as the kids lay the cards out.  This also seems like it might be error prone, at least for those of us who are mathematically inclined but sloppy at arithmetic.]</p>\n",
  "wfw:commentRss": "https://statmodeling.stat.columbia.edu/2022/10/07/mira-magic-a-probabilistic-card-trick/feed/",
  "slash:comments": 32
}