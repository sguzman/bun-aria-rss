{
  "title": "Which GPU(s) to Get for Deep Learning: My Experience and Advice for Using GPUs in Deep Learning",
  "link": "https://timdettmers.com/2020/09/07/which-gpu-for-deep-learning/",
  "comments": "https://timdettmers.com/2020/09/07/which-gpu-for-deep-learning/#comments",
  "dc:creator": "Tim Dettmers",
  "pubDate": "Mon, 07 Sep 2020 16:11:04 +0000",
  "category": [
    "Deep Learning",
    "Hardware",
    "AMD",
    "CPU",
    "High Performance Computing",
    "Matrix Multiplication",
    "Parallel Computing",
    "PCIe Lanes",
    "Sparse Training"
  ],
  "guid": "http://timdettmers.wordpress.com/?p=4",
  "description": "<p>Making the right choice when it comes to buying a GPU is critical. So how do you select the GPU which is right for you? This blog post will delve into that question and will lend you advice which will help you to make choice that is right for you.</p>\n<p>The post <a rel=\"nofollow\" href=\"https://timdettmers.com/2020/09/07/which-gpu-for-deep-learning/\">Which GPU(s) to Get for Deep Learning: My Experience and Advice for Using GPUs in Deep Learning</a> appeared first on <a rel=\"nofollow\" href=\"https://timdettmers.com\">Tim Dettmers</a>.</p>\n",
  "content:encoded": "\n<div class=\"wp-container-1 wp-block-group eplus-nHlelL\"><div class=\"wp-block-group__inner-container\">\n<p class=\"eplus-huy78r\">Deep learning is a field with intense computational requirements, and your choice of GPU will fundamentally determine your deep learning experience. But what features are important if you want to buy a new GPU? GPU RAM, cores, tensor cores? How to make a cost-efficient choice? This blog post will delve into these questions, tackle common misconceptions, give you an intuitive understanding of how to think about GPUs, and will lend you advice, which will help you to make a choice that is right for you.</p>\n\n\n\n<span id=\"more-6\"></span>\n\n\n\n<p class=\"eplus-sxlaEI\">This blog post is designed to give you different levels of understanding of GPUs and the new Ampere series GPUs from NVIDIA. You have the choice: (1) If you are not interested in the details of how GPUs work, what makes a GPU fast, and what is unique about the new NVIDIA RTX 30 Ampere series, you can skip right to the performance and performance per dollar charts and the recommendation section. These form the core of the blog post and the most valuable content.</p>\n\n\n\n<p class=\"eplus-1g9jAa\">(2) If you worry about specific questions, I have answered and addressed the most common questions and misconceptions in the later part of the blog post.</p>\n\n\n\n<p class=\"eplus-ErgVnq\">(3) If you want to get an in-depth understanding of how GPUs and Tensor Cores work, the best is to read the blog post from start to finish. You might want to skip a section or two based on your understanding of the presented topics.</p>\n\n\n\n<p class=\"eplus-RhAGvU\">I will head each major section with a small summary, which might help you to decide if you want to read the section or not.</p>\n\n\n\n\n\n<h2 class=\"eplus-dYbLao\"><strong>Overview</strong></h2>\n\n\n\n<p class=\"eplus-xVYlmp\">This blog post is structured in the following way. First, I will explain what makes a GPU fast. I will discuss CPUs vs GPUs, Tensor Cores, memory bandwidth, and the memory hierarchy of GPUs and how these relate to deep learning performance. These explanations might help you get a more intuitive sense of what to look for in a GPU. Then I will make theoretical estimates for GPU performance and align them with some <a href=\"https://developer.nvidia.com/deep-learning-performance-training-inference\">marketing benchmarks</a> from NVIDIA to get reliable, unbiased performance data. I discuss the unique features of the new NVIDIA RTX 30 Ampere GPU series that are worth considering if you buy a GPU. From there, I make GPU recommendations for 1-2, 4, 8 GPU setups, and GPU clusters. After that follows a Q&A section of common questions posed to me in Twitter threads; in that section, I will also address common misconceptions and some miscellaneous issues, such as cloud vs desktop, cooling, AMD vs NVIDIA, and others.&nbsp;</p>\n\n\n\n<h2 class=\"eplus-TzWEWa\">How do GPUs work?</h2>\n\n\n\n<p class=\"eplus-YDMSkp\">If you use GPUs frequently, it is useful to understand how they work. This knowledge will come in handy in understanding why GPUs might be slow in some cases and fast in others. In turn, you might be able to understand better why you need a GPU in the first place and how other future hardware options might be able to compete. You can skip this section if you just want the useful performance numbers and arguments to help you decide which GPU to buy. The best high-level explanation for the question of how GPUs work is my following Quora answer:</p>\n\n\n\n<span class='quora-content-embed' data-name='Why-are-GPUs-well-suited-to-deep-learning/answer/Tim-Dettmers-1'>Read <a class='quora-content-link' data-width='560' data-height='260' href='https://www.quora.com/Why-are-GPUs-well-suited-to-deep-learning/answer/Tim-Dettmers-1' data-type='answer' data-id='21379913' data-key='bbb3732f88834d75dfa98d816eb9eccd' load-full-answer='False' data-embed='jqubkoa'><a href='https://www.quora.com/Tim-Dettmers-1'>Tim Dettmers</a>&#039; <a href=\"/Why-are-GPUs-well-suited-to-deep-learning?top_ans=21379913\" class=\"broken_link\">answer</a> to <a href=\"/Why-are-GPUs-well-suited-to-deep-learning\" ref=\"canonical\" class=\"broken_link\"><span class=\"rendered_qtext\">Why are GPUs well-suited to deep learning?</span></a></a> on <a href='https://www.quora.com'>Quora</a><script type=\"text/javascript\" src=\"https://www.quora.com/widgets/content\"></script></span>\n\n\n\n<p class=\"eplus-bfPm9F\">This is a high-level explanation that explains quite well why GPUs are better than CPUs for deep learning. If we look at the details, we can understand what makes one GPU better than another.</p>\n\n\n\n<h2 class=\"eplus-9AkYN1\">The Most Important GPU Specs for Deep Learning Processing Speed</h2>\n\n\n\n<p class=\"eplus-XflNML\">This section can help you build a more intuitive understanding of how to think about deep learning performance. This understanding will help you to evaluate future GPUs by yourself.</p>\n\n\n\n<h3 class=\"eplus-YyGRdI\">Tensor Cores</h3>\n\n\n\n<p class=\"eplus-Aoe0Cj\">Summary:</p>\n\n\n\n<ul class=\"eplus-nkeP06\"><li>Tensor Cores reduce the used cycles needed for calculating multiply and addition operations, 16-fold — in my example, for a 32&#215;32 matrix, from 128 cycles to 8 cycles.</li><li>Tensor Cores reduce the reliance on repetitive shared memory access, thus saving additional cycles for memory access.</li><li>Tensor Cores are so fast that computation is no longer a bottleneck. The only bottleneck is getting data to the Tensor Cores.</li></ul>\n\n\n\n<p class=\"eplus-JKvKVO\">There are now enough cheap GPUs that almost everyone can afford a GPU with Tensor Cores. That is why I only recommend GPUs with Tensor Cores. It is useful to understand how they work to appreciate the importance of these computational units specialized for matrix multiplication. Here I will show you a simple example of A*B=C matrix multiplication, where all matrices have a size of 32&#215;32, what a computational pattern looks like with and without Tensor Cores. This is a simplified example, and not the exact way how a high performing matrix multiplication kernel would be written, but it has all the basics. A CUDA programmer would take this as a first “draft” and then optimize it step-by-step with concepts like double buffering, register optimization, occupancy optimization, instruction-level parallelism, and many others, which I will not discuss at this point. </p>\n\n\n\n<p class=\"eplus-JQnNxT\">To understand this example fully, you have to understand the concepts of cycles. If a processor runs at 1GHz, it can do 10^9 cycles per second. Each cycle represents an opportunity for computation. However, most of the time, operations take longer than one cycle. Thus it creates a pipeline where for one operation to start, it needs to wait for the number of cycles of time it takes for the previous operation to finish. This is also called the latency of the operation.</p>\n\n\n\n<p class=\"eplus-Nh32jj\">Here are some important cycle timings or latencies for operations:</p>\n\n\n\n<ul class=\"eplus-yOHNRh\"><li>Global memory access (up to 48GB): ~200 cycles</li><li>Shared memory access (up to 164 kb per Streaming Multiprocessor): ~20 cycles</li><li>Fused multiplication and addition (FFMA): 4 cycles</li><li>Tensor Core matrix multiply: 1 cycle</li></ul>\n\n\n\n<p class=\"eplus-xmhx78\">Furthermore, you should know that the smallest units of threads on a GPU is a pack of 32 threads — this is called a warp. Warps usually operate in a synchronous pattern — threads within a warp have to wait for each other. All memory operations on the GPU are optimized for warps. For example, loading from global memory happens at a granularity of 32*4 bytes, exactly 32 floats, exactly one float for each thread in a warp. We can have up to 32 warps = 1024 threads in a streaming multiprocessor (SM), the GPU-equivalent of a CPU core. The resources of an SM are divided up among all active warps. This means that sometimes we want to run fewer warps to have more registers/shared memory/Tensor Core resources per warp.</p>\n\n\n\n<p class=\"eplus-5GehcT\">For both of the following examples, we assume we have the same computational resources. For this small example of a 32&#215;32 matrix multiply, we use 8 SMs (about 10% of an RTX 3090) and 8 warps per SM.</p>\n\n\n\n<h4 class=\"eplus-Lj4Hjc\">Matrix multiplication without Tensor Cores</h4>\n\n\n\n<p class=\"eplus-eBAn6w\">If we want to do an A*B=C matrix multiply, where each matrix is of size 32&#215;32, then we want to load memory that we repeatedly access into shared memory because its latency is about ten times lower (200 cycles vs 20 cycles). A memory block in shared memory is often referred to as a memory tile or just a tile. Loading two 32&#215;32 floats into a shared memory tile can happen in parallel by using 2*32 warps. We have 8 SMs with 8 warps each, so due to parallelization, we only need to do a single sequential load from global to shared memory, which takes 200 cycles.</p>\n\n\n\n<p class=\"eplus-bSRgVT\">To do the matrix multiplication, we now need to load a vector of 32 numbers from shared memory A and shared memory B and perform a fused multiply-and-accumulate (FFMA). Then store the outputs in registers C. We divide the work so that each SM does 8x dot products (32&#215;32) to compute 8 outputs of C. Why this is exactly 8 (4 in older algorithms) is very technical. I recommend Scott Gray’s blog post on <a href=\"https://github.com/NervanaSystems/maxas/wiki/SGEMM\">matrix multiplication</a> to understand this. This means we have 8x shared memory access at the cost of 20 cycles each and 8 FFMA operations (32 in parallel), which cost 4 cycles each. In total, we thus have a cost of:</p>\n\n\n\n<p class=\"eplus-UJKQje\">200 cycles (global memory) + 8*20 cycles (shared memory) + 8*4 cycles (FFMA) = 392 cycles</p>\n\n\n\n<p class=\"eplus-G6zbco\">Let&#8217;s look at the cycle cost of using Tensor Cores.</p>\n\n\n\n<h4 class=\"eplus-dS0Vu0\">Matrix multiplication with Tensor Cores</h4>\n\n\n\n<p class=\"eplus-8bWcQj\">With Tensor Cores, we can perform a 4&#215;4 matrix multiplication in one cycle. To do that, we first need to get memory into the Tensor Core. Similarly to the above, we need to read from global memory (200 cycles) and store in shared memory. To do a 32&#215;32 matrix multiply, we need to do 8&#215;8=64 Tensor Cores operations. A single SM has 8 Tensor Cores. So with 8 SMs, we have 64 Tensor Cores — just the number that we need! We can transfer the data from shared memory to the Tensor Cores with 1 memory transfers (20 cycles) and then do those 64 parallel Tensor Core operations (1 cycle). This means the total cost for Tensor Cores matrix multiplication, in this case, is:</p>\n\n\n\n<p class=\"eplus-ZzxYmo\">200 cycles (global memory) + 20 cycles (shared memory) + 1 cycle (Tensor Core) = 221 cycles.</p>\n\n\n\n<p class=\"eplus-KVQYN0\">Thus we reduce the matrix multiplication cost significantly from 392 cycles to 221 cycles via Tensor Cores. In this simplified case, the Tensor Cores reduced the cost of both shared memory access and FFMA operations.&nbsp;</p>\n\n\n\n<p class=\"eplus-G9pv5H\">While this example roughly follows the sequence of computational steps for both with and without Tensor Cores, please note that this is a very simplified example. Real cases of matrix multiplication involve much larger shared memory tiles and slightly different computational patterns.</p>\n\n\n\n<p class=\"eplus-2785xF\">However, I believe from this example, it is also clear why the next attribute, memory bandwidth, is so crucial for Tensor-Core-equipped GPUs. Since global memory is the most considerable portion of cycle cost for matrix multiplication with Tensor Cores, we would even have faster GPUs if the global memory latency could be reduced. We can do this by either increasing the clock frequency of the memory (more cycles per second, but also more heat and higher energy requirements) or by increasing the number of elements that can be transferred at any one time (bus width).</p>\n\n\n<div class=\"crp_related   crp_related_block  mobile-only crp-rounded-thumbs\"><ul><li><a href=\"https://timdettmers.com/2022/03/13/how-to-choose-your-grad-school/\"     class=\"crp_link post-805\"><figure><img loading=\"lazy\"  width=\"150\" height=\"150\"  src=\"https://i0.wp.com/timdettmers.com/wp-content/uploads/2020/03/IMG_20180420_195552216_HDR.jpg?resize=150%2C150&ssl=1\" class=\"crp_thumb crp_featured\" alt=\"How to Choose Your Grad School\" title=\"How to Choose Your Grad School\" srcset=\"https://i0.wp.com/timdettmers.com/wp-content/uploads/2020/03/IMG_20180420_195552216_HDR.jpg?resize=150%2C150&ssl=1 150w, https://i0.wp.com/timdettmers.com/wp-content/uploads/2020/03/IMG_20180420_195552216_HDR.jpg?zoom=2&resize=150%2C150&ssl=1 300w, https://i0.wp.com/timdettmers.com/wp-content/uploads/2020/03/IMG_20180420_195552216_HDR.jpg?zoom=3&resize=150%2C150&ssl=1 450w\" sizes=\"(max-width: 150px) 100vw, 150px\" /></figure><span class=\"crp_title\">How to Choose Your Grad School</span></a></li><li><a href=\"https://timdettmers.com/2022/08/17/llm-int8-and-emergent-features/\"     class=\"crp_link post-1093\"><figure><img loading=\"lazy\"  width=\"150\" height=\"150\"  src=\"https://i0.wp.com/timdettmers.com/wp-content/uploads/2022/08/zeroshot3.png?resize=150%2C150&ssl=1\" class=\"crp_thumb crp_featured\" alt=\"LLM.int8() and Emergent Features\" title=\"LLM.int8() and Emergent Features\" srcset=\"https://i0.wp.com/timdettmers.com/wp-content/uploads/2022/08/zeroshot3.png?resize=150%2C150&ssl=1 150w, https://i0.wp.com/timdettmers.com/wp-content/uploads/2022/08/zeroshot3.png?zoom=2&resize=150%2C150&ssl=1 300w, https://i0.wp.com/timdettmers.com/wp-content/uploads/2022/08/zeroshot3.png?zoom=3&resize=150%2C150&ssl=1 450w\" sizes=\"(max-width: 150px) 100vw, 150px\" /></figure><span class=\"crp_title\">LLM.int8() and Emergent Features</span></a></li></ul><div class=\"crp_clear\"></div></div>\n\n\n<h3 class=\"eplus-7uVl7z\">Memory Bandwidth</h3>\n\n\n\n<p class=\"eplus-Sc9M0X\">From the previous section, we have seen that Tensor Cores are very fast. So fast, in fact, that they are idle most of the time as they are waiting for memory to arrive from global memory. For example, during BERT Large training, which uses huge matrices — the larger, the better for Tensor Cores — we have a Tensor Core TFLOPS utilization of about 30%, meaning that 70% of the time, Tensor Cores are idle.</p>\n\n\n\n<p class=\"eplus-RsGhaC\">This means that when comparing two GPUs with Tensor Cores, one of the single best indicators for each GPU’s performance is their memory bandwidth. For example, The A100 GPU has 1,555 GB/s memory bandwidth vs the 900 GB/s of the V100. As such, a basic estimate of speedup of an A100 vs V100 is 1555/900 = 1.73x.</p>\n\n\n\n<h3 class=\"eplus-Nd29of\">Shared Memory / L1 Cache Size / Registers</h3>\n\n\n\n<p class=\"eplus-Qs2qZL\">Since memory transfers to the Tensor Cores are the limiting factor in performance, we are looking for other GPU attributes that enable faster memory transfer to Tensor Cores. Shared memory, L1 Cache, and amount of registers used are all related. To understand how a memory hierarchy enables faster memory transfers, it helps to understand how matrix multiplication is performed on a GPU.</p>\n\n\n\n<p class=\"eplus-ecxtvX\">To perform matrix multiplication, we exploit the memory hierarchy of a GPU that goes from slow global memory to fast local shared memory, to lightning-fast registers. However, the faster the memory, the smaller it is. As such, we need to separate the matrix into smaller matrices. We perform matrix multiplication across these smaller tiles in local shared memory that is fast and close to the streaming multiprocessor (SM) — the equivalent of a CPU core. With Tensor Cores, we go a step further: We take each tile and load a part of these tiles into Tensor Cores. A matrix memory tile in shared memory is ~10-50x faster than the global GPU memory, whereas the Tensor Cores’ registers are ~200x faster than the global GPU memory.&nbsp;</p>\n\n\n\n<p class=\"eplus-ifo0Kt\">Having larger tiles means we can reuse more memory. I wrote about this in detail in my <a href=\"https://timdettmers.com/2018/10/17/tpus-vs-gpus-for-transformers-bert/\">TPU vs GPU</a> blog post. In fact, you can see TPUs as having very, very, large tiles for each Tensor Core. As such, TPUs can reuse much more memory with each transfer from global memory, which makes them a little bit more efficient at matrix multiplications than GPUs.</p>\n\n\n\n<p class=\"eplus-h6CECa\">Each tile size is determined by how much memory we have per streaming multiprocessor (SM) — the equivalent to a “CPU core” on a GPU. We have the following shared memory sizes on the following architectures:</p>\n\n\n\n<ul class=\"eplus-CmF7pW\"><li>Volta: 96kb shared memory / 32 kb L1</li><li>Turing: 64kb shared memory / 32 kb L1</li><li>Ampere: 164 kb shared memory / 32 kb L1</li></ul>\n\n\n\n<p class=\"eplus-mGR5cO\">We see that Ampere has a much larger shared memory allowing for larger tile sizes, which reduces global memory access. Thus, Ampere can make better use of the overall memory bandwidth on the GPU memory. This improves performance by roughly 2-5%. The performance boost is particularly pronounced for huge matrices.</p>\n\n\n\n<p class=\"eplus-AYgqUV\">The Ampere Tensor Cores have another advantage in that they share more data between threads. This reduces the register usage. Registers are limited to 64k per streaming multiprocessor (SM) or 255 per thread. Comparing the Volta vs Ampere Tensor Core, the Ampere Tensor Core uses 3x fewer registers, allowing for more tensor cores to be active for each shared memory tile. In other words, we can feed 3x as many Tensor Cores with the same amount of registers. However, since bandwidth is still the bottleneck, you will only see tiny increases in actual vs theoretical TFLOPS. The new Tensor Cores improve performance by roughly 1-3%.</p>\n\n\n\n<p class=\"eplus-McZkib\">Overall, you can see that the Ampere architecture is optimized to make the available memory bandwidth more effective by using an improved memory hierarchy: from global memory to shared memory tiles, to register tiles for Tensor Cores.</p>\n\n\n\n<h2 class=\"eplus-Uq5SHY\">Estimating Ampere Deep Learning Performance</h2>\n\n\n\n<p class=\"eplus-faj04W\">Summary:</p>\n\n\n\n<ul class=\"eplus-bbu6Q3\"><li>Theoretical estimates based on memory bandwidth and the improved memory hierarchy of Ampere GPUs predict a speedup of 1.78x to 1.87x.</li><li>NVIDIA provides accuracy benchmark data of Tesla A100 and V100 GPUs. These data are biased for marketing purposes, but it is possible to build a debiased model of these data.</li><li>Debiased benchmark data suggests that the Tesla A100 compared to the V100 is 1.70x faster for NLP and 1.45x faster for computer vision.</li></ul>\n\n\n\n<p class=\"eplus-gsZ188\">This section is for those who want to understand the more technical details of how I derive the performance estimates for Ampere GPUs. If you do not care about these technical aspects, it is safe to skip this section.</p>\n\n\n\n<h3 class=\"eplus-IWxMN8\">Theoretical Ampere Speed Estimates</h3>\n\n\n\n<p class=\"eplus-ikPNgj\">Putting together the reasoning above, we would expect the difference between two Tensor-Core-equipped GPU architectures to be mostly about memory bandwidth. Additional benefits come from more shared memory / L1 cache and better register usage in Tensor Cores.</p>\n\n\n\n<p class=\"eplus-VFFzZC\">If we take the Tesla A100 GPU bandwidth vs Tesla V100 bandwidth, we get a speedup of 1555/900 = 1.73x. Additionally, I would expect a 2-5% speedup from the larger shared memory and 1-3% from the improved Tensor Cores. This puts the speedup range between 1.78x and 1.87x. With similar reasoning, you would be able to estimate the speedup of other Ampere series GPUs compared to a Tesla V100.&nbsp;</p>\n\n\n\n<h3 class=\"eplus-t3NVr4\">Practical Ampere Speed Estimates</h3>\n\n\n\n<p class=\"eplus-H6ehT0\">Suppose we have an estimate for one GPU of a GPU-architecture like Ampere, Turing, or Volta. It is easy to extrapolate these results to other GPUs from the same architecture/series. Luckily, NVIDIA already <a href=\"https://developer.nvidia.com/deep-learning-performance-training-inference\">benchmarked the A100 vs V100</a> across a wide range of computer vision and natural language understanding tasks. Unfortunately, NVIDIA made sure that these numbers are not directly comparable by using different batch sizes and the number of GPUs whenever possible to favor results for the A100. So in a sense, the benchmark numbers are partially honest, partially marketing numbers. In general, you could argue that using larger batch sizes is fair, as the A100 has more memory. Still, to compare GPU architectures, we should evaluate unbiased memory performance with the same batch size.</p>\n\n\n\n<p class=\"eplus-3xKGXX\">To get an unbiased estimate, we can scale the V100 and A100 results in two ways: (1) account for the differences in batch size, (2) account for the differences in using 1 vs 8 GPUs. We are lucky that we can find such an estimate for both biases in the data that NVIDIA provides.&nbsp;</p>\n\n\n\n<p class=\"eplus-LO0cd2\">Doubling the batch size increases throughput in terms of images/s (CNNs) by 13.6%. I benchmarked the same problem for transformers on my RTX Titan and found, surprisingly, the very same result: 13.5% — it appears that this is a robust estimate.</p>\n\n\n\n<p class=\"eplus-obwQUJ\">As we parallelize networks across more and more GPUs, we lose performance due to some networking overhead. The A100 8x GPU system has better networking (NVLink 3.0) than the V100 8x GPU system (NVLink 2.0) — this is another confounding factor. Looking directly at the data from NVIDIA, we can find that for CNNs, a system with 8x A100 has a 5% lower overhead than a system of 8x V100. This means if going from 1x A100 to 8x A100 gives you a speedup of, say, 7.00x, then going from 1x V100 to 8x V100 only gives you a speedup of 6.67x.&nbsp; For transformers, the figure is 7%.&nbsp;</p>\n\n\n\n<p class=\"eplus-M8lGMx\">Using these figures, we can estimate the speedup for a few specific deep learning architectures from the direct data that NVIDIA provides. The Tesla A100 offers the following speedup over the Tesla V100:</p>\n\n\n\n<ul class=\"eplus-2N544K\"><li>SE-ResNeXt101: 1.43x</li><li>Masked-R-CNN: 1.47x</li><li>Transformer (12 layer, Machine Translation, WMT14 en-de): 1.70x</li></ul>\n\n\n\n<p class=\"eplus-hLEvfM\">Thus, the figures are a bit lower than the theoretical estimate for computer vision. This might be due to smaller tensor dimensions, overhead from operations that are needed to prepare the matrix multiplication like img2col or Fast Fourier Transform (FFT), or operations that cannot saturate the GPU (final layers are often relatively small). It could also be artifacts of the specific architectures (grouped convolution).</p>\n\n\n\n<p class=\"eplus-K95gae\">The practical transformer estimate is very close to the theoretical estimate. This is probably because algorithms for huge matrices are very straightforward. I will use these practical estimates to calculate the cost efficiency of GPUs.</p>\n\n\n\n<h3 class=\"eplus-CUQjZa\">Possible Biases in Estimates</h3>\n\n\n\n<p class=\"eplus-UQWjwg\">The estimates above are for A100 vs V100. In the past, NVIDIA sneaked unannounced performance degradations into the “gaming” RTX GPUs: (1) Decreased Tensor Core utilization, (2) gaming fans for cooling, (3) disabled peer-to-peer GPU transfers. It might be possible that there are unannounced performance degradations in the RTX 30 series compared to the full Ampere A100. </p>\n\n\n\n<p class=\"eplus-IQX3ZD\">As of now, one of these degradations was found: Tensor Core performance was decreased so that RTX 30 series GPUs are not as good as Quadro cards for deep learning purposes. This was also done for the RTX 20 series, so it is nothing new, but this time it was also done for the Titan equivalent card, the RTX 3090. The RTX Titan did not have performance degradation enabled.</p>\n\n\n\n<p class=\"eplus-l9YowP\">I will update this blog post as information about further unannounced performance degradation becomes available.</p>\n\n\n\n<h2 class=\"eplus-hICahu\"><strong>Additional Considerations for Ampere / RTX 30 Series</strong></h2>\n\n\n\n<p class=\"eplus-UblFcg\">Summary:</p>\n\n\n\n<ul class=\"eplus-iFdlRK\"><li>Ampere allows for sparse network training, which accelerates training by a factor of up to 2x.</li><li>Sparse network training is still rarely used but will make Ampere future-proof.</li><li>Ampere has new low-precision data types, which makes using low-precision much easy, but not necessarily faster than for previous GPUs.</li><li>The new fan design is excellent if you have space between GPUs, but it is unclear if multiple GPUs with no space in-between them will be efficiently cooled.</li><li>3-Slot design of the RTX 3090 makes 4x GPU builds problematic. Possible solutions are 2-slot variants or the use of PCIe extenders.</li><li>4x RTX 3090 will need more power than any standard power supply unit on the market can provide right now.&nbsp;</li></ul>\n\n\n\n<p class=\"eplus-0zpF2c\">The new NVIDIA Ampere RTX 30 series has additional benefits over the NVIDIA Turing RTX 20 series, such as sparse network training and inference. Other features, such as the new data types, should be seen more as an ease-of-use-feature as they provide the same performance boost as Turing does but without any extra programming required. </p>\n\n\n\n<h3 class=\"eplus-2ZdClk\">Sparse Network Training</h3>\n\n\n\n<p class=\"eplus-vRUUJh\">Ampere allows for fine-grained structure automatic sparse matrix multiplication at dense speeds. How does this work? Take a weight matrix and slice it into pieces of 4 elements. Now imagine 2 elements of these 4 to be zero. Figure 1 shows how this could look like. </p>\n\n\n\n<div class=\"wp-block-image eplus-IiM2y7\"><figure class=\"aligncenter size-large is-resized\"><img data-attachment-id=\"935\" data-permalink=\"https://timdettmers.com/sparse_matrix_ampere/\" data-orig-file=\"https://i0.wp.com/timdettmers.com/wp-content/uploads/2020/09/sparse_matrix_ampere.png?fit=321%2C387&ssl=1\" data-orig-size=\"321,387\" data-comments-opened=\"1\" data-image-meta=\"{\"aperture\":\"0\",\"credit\":\"\",\"camera\":\"\",\"caption\":\"\",\"created_timestamp\":\"0\",\"copyright\":\"\",\"focal_length\":\"0\",\"iso\":\"0\",\"shutter_speed\":\"0\",\"title\":\"\",\"orientation\":\"0\"}\" data-image-title=\"Ampere Sparse Matrix Multiplication Tensor Cores Matrix\" data-image-description=\"<p>Figure X: Structure supported by the sparse matrix multiplication feature in Ampere GPUs. Figure is taken from Jeff Pool&#8217;s GTC 2020 presentation on  <a href=\"https://developer.download.nvidia.com/video/gputechconf/gtc/2020/presentations/s22085-accelerating-sparsity-in-the-nvidia-ampere-architecture%E2%80%8B.pdf\" rel=\"noopener noreferrer\" target=\"_blank\">Accelerating Sparsity in the NVIDIA Ampere Architecture</a> by the courtesy of NVIDIA.</p>\n\" data-image-caption=\"<p>Figure X: Structure supported by the sparse matrix multiplication feature in Ampere GPUs. Figure is taken from Jeff Pool&#8217;s GTC 2020 presentation on  <a href=\"https://developer.download.nvidia.com/video/gputechconf/gtc/2020/presentations/s22085-accelerating-sparsity-in-the-nvidia-ampere-architecture%E2%80%8B.pdf\" rel=\"noopener noreferrer\" target=\"_blank\">Accelerating Sparsity in the NVIDIA Ampere Architecture</a> by the courtesy of NVIDIA.</p>\n\" data-medium-file=\"https://i0.wp.com/timdettmers.com/wp-content/uploads/2020/09/sparse_matrix_ampere.png?fit=249%2C300&ssl=1\" data-large-file=\"https://i0.wp.com/timdettmers.com/wp-content/uploads/2020/09/sparse_matrix_ampere.png?fit=321%2C387&ssl=1\" src=\"https://i0.wp.com/timdettmers.com/wp-content/uploads/2020/09/sparse_matrix_ampere.png?resize=258%2C311&#038;ssl=1\" alt=\"Figure 1: Structure supported by the sparse matrix multiplication feature in Ampere GPUs. The figure is taken from Jeff Pool's GTC 2020 presentation on  Accelerating Sparsity in the NVIDIA Ampere Architecture by the courtesy of NVIDIA.\" class=\"wp-image-935\" width=\"258\" height=\"311\" srcset=\"https://i0.wp.com/timdettmers.com/wp-content/uploads/2020/09/sparse_matrix_ampere.png?w=321&ssl=1 321w, https://i0.wp.com/timdettmers.com/wp-content/uploads/2020/09/sparse_matrix_ampere.png?resize=249%2C300&ssl=1 249w\" sizes=\"(max-width: 258px) 100vw, 258px\" data-recalc-dims=\"1\" /><figcaption>Figure 1: Structure supported by the sparse matrix multiplication feature in Ampere GPUs. The figure is taken from Jeff Pool&#8217;s GTC 2020 presentation on <a href=\"https://developer.download.nvidia.com/video/gputechconf/gtc/2020/presentations/s22085-accelerating-sparsity-in-the-nvidia-ampere-architecture%E2%80%8B.pdf\" rel=\"noreferrer noopener\" target=\"_blank\">Accelerating Sparsity in the NVIDIA Ampere Architecture</a> by the courtesy of NVIDIA.</figcaption></figure></div>\n\n\n\n<p class=\"eplus-JGsMdm\">When you multiply this sparse weight matrix with some dense inputs, the sparse matrix tensor core feature in Ampere automatically compresses the sparse matrix to a dense representation that is half the size as can be seen in Figure 2. After this compression, the densely compressed matrix tile is fed into the tensor core which computes a matrix multiplication of twice the usual size. This effectively yields a 2x speedup since the bandwidth requirements during matrix multiplication from shared memory are halved.</p>\n\n\n\n<figure class=\"wp-block-image size-large eplus-O3WVqX\"><img data-attachment-id=\"934\" data-permalink=\"https://timdettmers.com/sparse_matmul/\" data-orig-file=\"https://i0.wp.com/timdettmers.com/wp-content/uploads/2020/09/sparse_matmul.png?fit=1055%2C638&ssl=1\" data-orig-size=\"1055,638\" data-comments-opened=\"1\" data-image-meta=\"{\"aperture\":\"0\",\"credit\":\"\",\"camera\":\"\",\"caption\":\"\",\"created_timestamp\":\"0\",\"copyright\":\"\",\"focal_length\":\"0\",\"iso\":\"0\",\"shutter_speed\":\"0\",\"title\":\"\",\"orientation\":\"0\"}\" data-image-title=\"Sparse Matrix Multiplication in Ampere\" data-image-description=\"<p>Figure X: The sparse matrix is compressed to a dense representation before the matrix multiplication is performed. Figure is taken from Jeff Pool&#8217;s GTC 2020 presentation on  <a href=\"https://developer.download.nvidia.com/video/gputechconf/gtc/2020/presentations/s22085-accelerating-sparsity-in-the-nvidia-ampere-architecture%E2%80%8B.pdf\" rel=\"noopener noreferrer\" target=\"_blank\">Accelerating Sparsity in the NVIDIA Ampere Architecture</a> by the courtesy of NVIDIA.</p>\n\" data-image-caption=\"<p>Figure X: The sparse matrix is compressed to a dense representation before the matrix multiplication is performed. Figure is taken from Jeff Pool&#8217;s GTC 2020 presentation on  <a href=\"https://developer.download.nvidia.com/video/gputechconf/gtc/2020/presentations/s22085-accelerating-sparsity-in-the-nvidia-ampere-architecture%E2%80%8B.pdf\" rel=\"noopener noreferrer\" target=\"_blank\">Accelerating Sparsity in the NVIDIA Ampere Architecture</a> by the courtesy of NVIDIA.</p>\n\" data-medium-file=\"https://i0.wp.com/timdettmers.com/wp-content/uploads/2020/09/sparse_matmul.png?fit=300%2C181&ssl=1\" data-large-file=\"https://i0.wp.com/timdettmers.com/wp-content/uploads/2020/09/sparse_matmul.png?fit=1024%2C619&ssl=1\" width=\"1024\" height=\"619\" src=\"https://i0.wp.com/timdettmers.com/wp-content/uploads/2020/09/sparse_matmul.png?resize=1024%2C619&#038;ssl=1\" alt=\"Figure 2: The sparse matrix is compressed to a dense representation before the matrix multiplication is performed. \" class=\"wp-image-934\" srcset=\"https://i0.wp.com/timdettmers.com/wp-content/uploads/2020/09/sparse_matmul.png?resize=1024%2C619&ssl=1 1024w, https://i0.wp.com/timdettmers.com/wp-content/uploads/2020/09/sparse_matmul.png?resize=300%2C181&ssl=1 300w, https://i0.wp.com/timdettmers.com/wp-content/uploads/2020/09/sparse_matmul.png?resize=768%2C464&ssl=1 768w, https://i0.wp.com/timdettmers.com/wp-content/uploads/2020/09/sparse_matmul.png?w=1055&ssl=1 1055w\" sizes=\"(max-width: 1000px) 100vw, 1000px\" data-recalc-dims=\"1\" /><figcaption>Figure 2: The sparse matrix is compressed to a dense representation before the matrix multiplication is performed. The figure is taken from Jeff Pool&#8217;s GTC 2020 presentation on  <a href=\"https://developer.download.nvidia.com/video/gputechconf/gtc/2020/presentations/s22085-accelerating-sparsity-in-the-nvidia-ampere-architecture%E2%80%8B.pdf\" rel=\"noopener noreferrer\" target=\"_blank\">Accelerating Sparsity in the NVIDIA Ampere Architecture</a> by the courtesy of NVIDIA.</figcaption></figure>\n\n\n\n<p class=\"eplus-dCX1Ah\">I was working on <a href=\"https://arxiv.org/abs/1907.04840\">sparse network training</a> in my research and I also wrote a <a href=\"https://timdettmers.com/2019/07/11/sparse-networks-from-scratch/\">blog post about sparse training</a>. One criticism of my work was that “You reduce the FLOPS required for the network, but it does not yield speedups because GPUs cannot do fast sparse matrix multiplication.” Well, with the addition of the sparse matrix multiplication feature for Tensor Cores, my algorithm, or <a href=\"https://arxiv.org/abs/2002.03231\" rel=\"nofollow\">other</a> <a href=\"https://arxiv.org/abs/2002.07376\" rel=\"nofollow\">sparse</a> <a href=\"https://arxiv.org/abs/1911.11134\" rel=\"nofollow\">training</a> <a href=\"https://arxiv.org/abs/1902.05967\" rel=\"nofollow\">algorithms</a>, now actually provide speedups of up to 2x during training.</p>\n\n\n\n<figure class=\"wp-block-image size-large eplus-uspqxA\"><a href=\"https://arxiv.org/abs/1907.04840\"><img data-attachment-id=\"779\" data-permalink=\"https://timdettmers.com/2019/07/11/sparse-networks-from-scratch/sparse_momentum/\" data-orig-file=\"https://i0.wp.com/timdettmers.com/wp-content/uploads/2019/07/sparse_momentum.png?fit=1096%2C528&ssl=1\" data-orig-size=\"1096,528\" data-comments-opened=\"1\" data-image-meta=\"{\"aperture\":\"0\",\"credit\":\"\",\"camera\":\"\",\"caption\":\"\",\"created_timestamp\":\"0\",\"copyright\":\"\",\"focal_length\":\"0\",\"iso\":\"0\",\"shutter_speed\":\"0\",\"title\":\"\",\"orientation\":\"0\"}\" data-image-title=\"Sparse Momentum Dettmers &#038; Zettlemoyer 2019\" data-image-description=\"<p>Figure X: The sparse training algorithm developed has three stages: (1) Determine the importance of each layer. (2) Remove the smallest, unimportant weights. (3) Grow new weights proportional to the importance of each layers.</p>\n\" data-image-caption=\"<p>Figure X: The sparse training algorithm developed has three stages: (1) Determine the importance of each layer. (2) Remove the smallest, unimportant weights. (3) Grow new weights proportional to the importance of each layers.</p>\n\" data-medium-file=\"https://i0.wp.com/timdettmers.com/wp-content/uploads/2019/07/sparse_momentum.png?fit=300%2C145&ssl=1\" data-large-file=\"https://i0.wp.com/timdettmers.com/wp-content/uploads/2019/07/sparse_momentum.png?fit=1024%2C493&ssl=1\" width=\"1024\" height=\"493\" src=\"https://i0.wp.com/timdettmers.com/wp-content/uploads/2019/07/sparse_momentum.png?resize=1024%2C493&#038;ssl=1\" alt=\"Figure 3: The sparse training algorithm that I developed has three stages: (1) Determine the importance of each layer. (2) Remove the smallest, unimportant weights. (3) Grow new weights proportional to the importance of each layer. Read more about my work in my sparse training blog post.\" class=\"wp-image-779\" srcset=\"https://i0.wp.com/timdettmers.com/wp-content/uploads/2019/07/sparse_momentum.png?resize=1024%2C493&ssl=1 1024w, https://i0.wp.com/timdettmers.com/wp-content/uploads/2019/07/sparse_momentum.png?resize=300%2C145&ssl=1 300w, https://i0.wp.com/timdettmers.com/wp-content/uploads/2019/07/sparse_momentum.png?resize=768%2C370&ssl=1 768w, https://i0.wp.com/timdettmers.com/wp-content/uploads/2019/07/sparse_momentum.png?w=1096&ssl=1 1096w\" sizes=\"(max-width: 1000px) 100vw, 1000px\" data-recalc-dims=\"1\" /></a><figcaption>Figure 3: The <a href=\"https://arxiv.org/abs/1907.04840\">sparse training algorithm</a> that I developed has three stages: (1) Determine the importance of each layer. (2) Remove the smallest, unimportant weights. (3) Grow new weights proportional to the importance of each layer. Read more about my work in my <a href=\"https://timdettmers.com/2019/07/11/sparse-networks-from-scratch/\">sparse training blog post</a>.</figcaption></figure>\n\n\n\n<p class=\"eplus-9YQAyM\">While this feature is still experimental and training sparse networks are not commonplace yet, having this feature on your GPU means you are ready for the future of sparse training.</p>\n\n\n\n<h3 class=\"eplus-uvNoM4\">Low-precision Computation</h3>\n\n\n\n<p class=\"eplus-AgG4J1\">In my work, I’ve previously shown that new data types can improve stability during <a href=\"https://arxiv.org/abs/1511.04561\">low-precision backpropagation</a>. </p>\n\n\n\n<figure class=\"wp-block-image size-large eplus-4aBkKy\"><img data-attachment-id=\"941\" data-permalink=\"https://timdettmers.com/2020/09/07/which-gpu-for-deep-learning/8-bit_data_types/\" data-orig-file=\"https://i0.wp.com/timdettmers.com/wp-content/uploads/2020/09/8-bit_data_types.png?fit=869%2C268&ssl=1\" data-orig-size=\"869,268\" data-comments-opened=\"1\" data-image-meta=\"{\"aperture\":\"0\",\"credit\":\"\",\"camera\":\"\",\"caption\":\"\",\"created_timestamp\":\"0\",\"copyright\":\"\",\"focal_length\":\"0\",\"iso\":\"0\",\"shutter_speed\":\"0\",\"title\":\"\",\"orientation\":\"0\"}\" data-image-title=\"8-bit_data_types\" data-image-description=\"<p>Figure X: Low-precision deep learning 8-bit datatypes that I developed. Deep learning training benefits from highly specialized data types. My dynamic tree datatype uses a dynamic bit that indicates the beginning of a binary bisection tree that quantized the range [0, 0.9] while all previous bits are used for the exponent. This allows to dynamically represent large numbers and small numbers with high precision.</p>\n\" data-image-caption=\"<p>Figure X: Low-precision deep learning 8-bit datatypes that I developed. Deep learning training benefits from highly specialized data types. My dynamic tree datatype uses a dynamic bit that indicates the beginning of a binary bisection tree that quantized the range [0, 0.9] while all previous bits are used for the exponent. This allows to dynamically represent large numbers and small numbers with high precision.</p>\n\" data-medium-file=\"https://i0.wp.com/timdettmers.com/wp-content/uploads/2020/09/8-bit_data_types.png?fit=300%2C93&ssl=1\" data-large-file=\"https://i0.wp.com/timdettmers.com/wp-content/uploads/2020/09/8-bit_data_types.png?fit=869%2C268&ssl=1\" width=\"869\" height=\"268\" src=\"https://i0.wp.com/timdettmers.com/wp-content/uploads/2020/09/8-bit_data_types.png?resize=869%2C268&#038;ssl=1\" alt=\"Figure 4: Low-precision deep learning 8-bit datatypes that I developed. Deep learning training benefits from highly specialized data types. My dynamic tree datatype uses a dynamic bit that indicates the beginning of a binary bisection tree that quantized the range [0, 0.9] while all previous bits are used for the exponent. This allows to dynamically represent numbers that are both large and small with high precision.\" class=\"wp-image-941\" srcset=\"https://i0.wp.com/timdettmers.com/wp-content/uploads/2020/09/8-bit_data_types.png?w=869&ssl=1 869w, https://i0.wp.com/timdettmers.com/wp-content/uploads/2020/09/8-bit_data_types.png?resize=300%2C93&ssl=1 300w, https://i0.wp.com/timdettmers.com/wp-content/uploads/2020/09/8-bit_data_types.png?resize=768%2C237&ssl=1 768w\" sizes=\"(max-width: 869px) 100vw, 869px\" data-recalc-dims=\"1\" /><figcaption>Figure 4: Low-precision deep learning 8-bit datatypes that I developed. Deep learning training benefits from highly specialized data types. My dynamic tree datatype uses a dynamic bit that indicates the beginning of a binary bisection tree that quantized the range [0, 0.9] while all previous bits are used for the exponent. This allows to dynamically represent numbers that are both large and small with high precision.</figcaption></figure>\n\n\n\n<p class=\"eplus-3DDVFs\">Currently, if you want to have stable backpropagation with 16-bit floating-point numbers (FP16), the big problem is that ordinary FP16 data types only support numbers in the range [-65,504, 65,504]. If your gradient slips past this range, your gradients explode into NaN values. To prevent this during FP16 training, we usually perform loss scaling where you multiply the loss by a small number before backpropagating to prevent this gradient explosion.&nbsp;</p>\n\n\n\n<p class=\"eplus-WQx9qD\">The Brain Float 16 format (BF16) uses more bits for the exponent such that the range of possible numbers is the same as for FP32: [-3*10^38, 3*10^38]. BF16 has less precision, that is significant digits, but gradient precision is not that important for learning. So what BF16 does is that you no longer need to do any loss scaling or worry about the gradient blowing up quickly. As such, we should see an increase in training stability by using the BF16 format as a slight loss of precision.</p>\n\n\n\n<p class=\"eplus-NLJqlG\">What this means for you: With BF16 precision, training might be more stable than with FP16 precision while providing the same speedups. With TF32 precision, you get near FP32 stability while giving the speedups close to FP16. The good thing is, to use these data types, you can just replace FP32 with TF32 and FP16 with BF16 — no code changes required!</p>\n\n\n\n<p class=\"eplus-S1SD30\">Overall, though, these new data types can be seen as lazy data types in the sense that you could have gotten all the benefits with the old data types with some additional programming efforts (proper loss scaling, initialization, normalization, using Apex). As such, these data types do not provide speedups but rather improve ease of use of low precision for training.</p>\n\n\n<div class=\"crp_related   crp_related_block  mobile-only crp-rounded-thumbs\"><ul><li><a href=\"https://timdettmers.com/2022/03/13/how-to-choose-your-grad-school/\"     class=\"crp_link post-805\"><figure><img loading=\"lazy\"  width=\"150\" height=\"150\"  src=\"https://i0.wp.com/timdettmers.com/wp-content/uploads/2020/03/IMG_20180420_195552216_HDR.jpg?resize=150%2C150&ssl=1\" class=\"crp_thumb crp_featured\" alt=\"How to Choose Your Grad School\" title=\"How to Choose Your Grad School\" srcset=\"https://i0.wp.com/timdettmers.com/wp-content/uploads/2020/03/IMG_20180420_195552216_HDR.jpg?resize=150%2C150&ssl=1 150w, https://i0.wp.com/timdettmers.com/wp-content/uploads/2020/03/IMG_20180420_195552216_HDR.jpg?zoom=2&resize=150%2C150&ssl=1 300w, https://i0.wp.com/timdettmers.com/wp-content/uploads/2020/03/IMG_20180420_195552216_HDR.jpg?zoom=3&resize=150%2C150&ssl=1 450w\" sizes=\"(max-width: 150px) 100vw, 150px\" /></figure><span class=\"crp_title\">How to Choose Your Grad School</span></a></li><li><a href=\"https://timdettmers.com/2022/08/17/llm-int8-and-emergent-features/\"     class=\"crp_link post-1093\"><figure><img loading=\"lazy\"  width=\"150\" height=\"150\"  src=\"https://i0.wp.com/timdettmers.com/wp-content/uploads/2022/08/zeroshot3.png?resize=150%2C150&ssl=1\" class=\"crp_thumb crp_featured\" alt=\"LLM.int8() and Emergent Features\" title=\"LLM.int8() and Emergent Features\" srcset=\"https://i0.wp.com/timdettmers.com/wp-content/uploads/2022/08/zeroshot3.png?resize=150%2C150&ssl=1 150w, https://i0.wp.com/timdettmers.com/wp-content/uploads/2022/08/zeroshot3.png?zoom=2&resize=150%2C150&ssl=1 300w, https://i0.wp.com/timdettmers.com/wp-content/uploads/2022/08/zeroshot3.png?zoom=3&resize=150%2C150&ssl=1 450w\" sizes=\"(max-width: 150px) 100vw, 150px\" /></figure><span class=\"crp_title\">LLM.int8() and Emergent Features</span></a></li></ul><div class=\"crp_clear\"></div></div>\n\n\n<h3 class=\"eplus-UXUbWi\">New Fan Design / Thermal Issues</h3>\n\n\n\n<p class=\"eplus-yw9sMm\">The new fan design for the RTX 30 series features both a blower fan and a push/pull fan. The design is ingenious and will be very effective if you have space between GPUs. So if you have 2 GPUs and one slot space between them (+3 PCIe slots), you will be fine, and there will be no cooling issues. However, it is unclear how the GPUs will perform if you have them stacked next to each other in a setup with more than 2 GPUs. The blower fan will be able to exhaust through the bracket away from the other GPUs, but it is impossible to tell how well that works since the blower fan is of a different design than before. \n\nSo my recommendation: If you want to buy 1 GPU or 2 GPUs in a 4 PCIe slot setup, then there should be no issues. However, if you&#8217;re going to use 3-4 RTX 30 GPUs next to each other, I would wait for thermal performance reports to know if you need different GPU coolers, PCIe extenders, or other solutions. I will update the blog post with this information as it becomes available.</p>\n\n\n\n<p class=\"eplus-H9FLpS\">To overcome thermal issues, water cooling will provide a solution in any case. Many vendors offer water cooling blocks for RTX 3080/RTX 3090 cards, which will keep them cool even in a 4x GPU setup. Beware of all-in-one water cooling solution for GPUs if you want to run a 4x GPU setup, though it is difficult to spread out the radiators in most desktop cases.</p>\n\n\n\n<p class=\"eplus-CTvlva\">Another solution to the cooling problem is to buy PCIe extenders and spread the GPUs within the case. This is very effective, and other fellow PhD students at the University of Washington and I use this setup with great success. It does not look pretty, but it keeps your GPUs cool! It can also help if you do not have enough space to spread the GPUs. For example, if you can find the space within a desktop computer case, it might be possible to buy standard 3-slot-width RTX 3090 and spread them with PCIe extenders within the case. With this, you might solve both the space issue and cooling issue for a 4x RTX 3090 setup with a single simple solution.</p>\n\n\n\n<div class=\"wp-block-image eplus-dDY0Kb\"><figure class=\"aligncenter size-large\"><img data-attachment-id=\"861\" data-permalink=\"https://timdettmers.com/4x_rtx2080ti_desktop_extenders/\" data-orig-file=\"https://i0.wp.com/timdettmers.com/wp-content/uploads/2020/09/4x_RTX2080Ti_desktop_extenders-scaled.jpg?fit=1920%2C2560&ssl=1\" data-orig-size=\"1920,2560\" data-comments-opened=\"1\" data-image-meta=\"{\"aperture\":\"1.9\",\"credit\":\"\",\"camera\":\"Redmi Note 5\",\"caption\":\"\",\"created_timestamp\":\"1557156443\",\"copyright\":\"\",\"focal_length\":\"3.94\",\"iso\":\"1250\",\"shutter_speed\":\"0.05\",\"title\":\"\",\"orientation\":\"1\"}\" data-image-title=\"4x_RTX2080Ti_desktop_extenders\" data-image-description=\"<p>4x GPUs with PCIe extenders</p>\n\" data-image-caption=\"<p>4x GPUs with PCIe extenders</p>\n\" data-medium-file=\"https://i0.wp.com/timdettmers.com/wp-content/uploads/2020/09/4x_RTX2080Ti_desktop_extenders-scaled.jpg?fit=225%2C300&ssl=1\" data-large-file=\"https://i0.wp.com/timdettmers.com/wp-content/uploads/2020/09/4x_RTX2080Ti_desktop_extenders-scaled.jpg?fit=768%2C1024&ssl=1\" width=\"768\" height=\"1024\" src=\"https://i0.wp.com/timdettmers.com/wp-content/uploads/2020/09/4x_RTX2080Ti_desktop_extenders.jpg?resize=768%2C1024&#038;ssl=1\" alt=\"Figure 5: 4x GPUs with PCIe extenders. It looks like a mess, but it is very effective for cooling. I used this rig for 2 years and cooling is excellent despite problematic RTX 2080 Ti Founders Edition GPUs.\" class=\"wp-image-861\" srcset=\"https://i0.wp.com/timdettmers.com/wp-content/uploads/2020/09/4x_RTX2080Ti_desktop_extenders-scaled.jpg?resize=768%2C1024&ssl=1 768w, https://i0.wp.com/timdettmers.com/wp-content/uploads/2020/09/4x_RTX2080Ti_desktop_extenders-scaled.jpg?resize=225%2C300&ssl=1 225w, https://i0.wp.com/timdettmers.com/wp-content/uploads/2020/09/4x_RTX2080Ti_desktop_extenders-scaled.jpg?resize=1152%2C1536&ssl=1 1152w, https://i0.wp.com/timdettmers.com/wp-content/uploads/2020/09/4x_RTX2080Ti_desktop_extenders-scaled.jpg?resize=1536%2C2048&ssl=1 1536w, https://i0.wp.com/timdettmers.com/wp-content/uploads/2020/09/4x_RTX2080Ti_desktop_extenders-scaled.jpg?w=1920&ssl=1 1920w\" sizes=\"(max-width: 768px) 100vw, 768px\" data-recalc-dims=\"1\" /><figcaption>Figure 5: 4x GPUs with PCIe extenders. It looks like a mess, but it is very effective for cooling. I used this rig for 2 years and cooling is excellent despite problematic RTX 2080 Ti Founders Edition GPUs.</figcaption></figure></div>\n\n\n\n<h3 class=\"eplus-JbBDhp\">3-slot Design and Power Issues</h3>\n\n\n\n<p class=\"eplus-DovhM1\">The RTX 3090 is a 3-slot GPU, so one will not be able to use it in a 4x setup with the default fan design from NVIDIA. This is kind of justified because it runs at 350W TDP, and it will be difficult to cool in a multi-GPU 2-slot setting. The RTX 3080 is only slightly better at 320W TDP, and cooling a 4x RTX 3080 setup will also be very difficult.</p>\n\n\n\n<p class=\"eplus-pfi9QE\">It is also difficult to power a 4x 350W = 1400W system in the 4x RTX 3090 case. Power supply units (PSUs) of 1600W are readily available, but having only 200W to power the <a href=\"https://timdettmers.com/2018/12/16/deep-learning-hardware-guide/\">CPU and motherboard</a> can be too tight. The components’ maximum power is only used if the components are fully utilized, and in deep learning, the CPU is usually only under weak load. With that, a 1600W PSU might work quite well with a 4x RTX 3080 build, but for a 4x RTX 3090 build, it is better to look for high wattage PSUs (+1700W). Some of my followers have had great success with cryptomining PSUs — have a look in the comment section for more info about that. Otherwise, it is important to note that not all outlets support PSUs above 1600W, especially in the US. This is the reason why in the US, there is currently not a standard desktop PSU above 1600W on the market. If you get a server or cryptomining PSUs, beware of the form factor — make sure it fits into your computer case.</p>\n\n\n\n<h3 class=\"eplus-wvweIn\">Power Limiting: An Elegant Solution to Solve the Power Problem?</h3>\n\n\n\n<p class=\"eplus-eq3oCc\">It is possible to set a power limit on your GPUs. So you would be able to programmatically set the power limit of an RTX 3090 to 300W instead of their standard 350W. In a 4x GPU system, that is a saving of 200W, which might just be enough to build a 4x RTX 3090 system with a 1600W PSU feasible. It also helps to keep the GPUs cool. So setting a power limit can solve the two major problems of a 4x RTX 3080 or 4x RTX 3090 setups, cooling, and power, at the same time. For a 4x setup, you still need effective blower GPUs (and the standard design may prove adequate for this), but this resolves the PSU problem.</p>\n\n\n\n<figure class=\"wp-block-image size-large eplus-uDERbv\"><img data-attachment-id=\"933\" data-permalink=\"https://timdettmers.com/power_limit_nvidia_smi/\" data-orig-file=\"https://i0.wp.com/timdettmers.com/wp-content/uploads/2020/09/power_limit_nvidia_smi.png?fit=1187%2C1195&ssl=1\" data-orig-size=\"1187,1195\" data-comments-opened=\"1\" data-image-meta=\"{\"aperture\":\"0\",\"credit\":\"\",\"camera\":\"\",\"caption\":\"\",\"created_timestamp\":\"0\",\"copyright\":\"\",\"focal_length\":\"0\",\"iso\":\"0\",\"shutter_speed\":\"0\",\"title\":\"\",\"orientation\":\"0\"}\" data-image-title=\"Power Limit Cooling Effect NVIDIA SMI\" data-image-description=\"<p>Figure X: Reducing the power limit has a slight cooling effect. Reducing the RTX 2080 Ti power limit by 50-60 W decreases temperatures slightly and fans run more silent.</p>\n\" data-image-caption=\"<p>Figure X: Reducing the power limit has a slight cooling effect. Reducing the RTX 2080 Ti power limit by 50-60 W decreases temperatures slightly and fans run more silent.</p>\n\" data-medium-file=\"https://i0.wp.com/timdettmers.com/wp-content/uploads/2020/09/power_limit_nvidia_smi.png?fit=298%2C300&ssl=1\" data-large-file=\"https://i0.wp.com/timdettmers.com/wp-content/uploads/2020/09/power_limit_nvidia_smi.png?fit=1017%2C1024&ssl=1\" width=\"1017\" height=\"1024\" src=\"https://i0.wp.com/timdettmers.com/wp-content/uploads/2020/09/power_limit_nvidia_smi.png?resize=1017%2C1024&#038;ssl=1\" alt=\"Figure 6: Reducing the power limit has a slight cooling effect. Reducing the RTX 2080 Ti power limit by 50-60 W decreases temperatures slightly and fans run more silent.\" class=\"wp-image-933\" srcset=\"https://i0.wp.com/timdettmers.com/wp-content/uploads/2020/09/power_limit_nvidia_smi.png?resize=1017%2C1024&ssl=1 1017w, https://i0.wp.com/timdettmers.com/wp-content/uploads/2020/09/power_limit_nvidia_smi.png?resize=298%2C300&ssl=1 298w, https://i0.wp.com/timdettmers.com/wp-content/uploads/2020/09/power_limit_nvidia_smi.png?resize=150%2C150&ssl=1 150w, https://i0.wp.com/timdettmers.com/wp-content/uploads/2020/09/power_limit_nvidia_smi.png?resize=768%2C773&ssl=1 768w, https://i0.wp.com/timdettmers.com/wp-content/uploads/2020/09/power_limit_nvidia_smi.png?w=1187&ssl=1 1187w\" sizes=\"(max-width: 1000px) 100vw, 1000px\" data-recalc-dims=\"1\" /><figcaption>Figure 6: Reducing the power limit has a slight cooling effect. Reducing the RTX 2080 Ti power limit by 50-60 W decreases temperatures slightly and fans run more silent.</figcaption></figure>\n\n\n\n<p class=\"eplus-dIRoAn\">You might ask, “Doesn’t this slow down the GPU?” Yes, it does, but the question is by how much. I benchmarked the 4x RTX 2080 Ti system shown in Figure 5 under different power limits to test this. I benchmarked the time for 500 mini-batches for BERT Large during inference (excluding the softmax layer). I choose BERT Large inference since, from my experience, this is the deep learning model that stresses the GPU the most. As such, I would expect power limiting to have the most massive slowdown for this model. As such, the slowdowns reported here are probably close to the maximum slowdowns that you can expect. The results are shown in Figure 7. </p>\n\n\n\n<figure class=\"wp-block-image size-large eplus-WIGOOF\"><img data-attachment-id=\"939\" data-permalink=\"https://timdettmers.com/rtx-2080-ti-slowdown-vs-power-limit/\" data-orig-file=\"https://timdettmers.com/wp-content/uploads/2020/09/RTX-2080-Ti-Slowdown-vs-Power-Limit.svg\" data-orig-size=\"853,703\" data-comments-opened=\"1\" data-image-meta=\"[]\" data-image-title=\"RTX 2080 Ti Slowdown vs Power Limit\" data-image-description=\"<p>Figure 6: Measured slowdown for a given power limit on an RTX 2080 Ti. Measurements taken are mean processing times for 500 mini-batches of BERT Large during inference (excluding softmax layer).</p>\n\" data-image-caption=\"<p>Figure 6: Measured slowdown for a given power limit on an RTX 2080 Ti. Measurements taken are mean processing times for 500 mini-batches of BERT Large during inference (excluding softmax layer).</p>\n\" data-medium-file=\"https://timdettmers.com/wp-content/uploads/2020/09/RTX-2080-Ti-Slowdown-vs-Power-Limit.svg\" data-large-file=\"https://timdettmers.com/wp-content/uploads/2020/09/RTX-2080-Ti-Slowdown-vs-Power-Limit.svg\" width=\"853\" height=\"703\" src=\"https://timdettmers.com/wp-content/uploads/2020/09/RTX-2080-Ti-Slowdown-vs-Power-Limit.svg\" alt=\"Figure 7: Measured slowdown for a given power limit on an RTX 2080 Ti. Measurements taken are mean processing times for 500 mini-batches of BERT Large during inference (excluding softmax layer).\" class=\"wp-image-939\"/><figcaption>Figure 7: Measured slowdown for a given power limit on an RTX 2080 Ti. Measurements taken are mean processing times for 500 mini-batches of BERT Large during inference (excluding softmax layer).</figcaption></figure>\n\n\n\n<p class=\"eplus-FATkvQ\">As we can see, setting the power limit does not seriously affect performance. Limiting the power by 50W — more than enough to handle 4x RTX 3090 — decreases performance by only 7%.</p>\n\n\n\n<h2 class=\"eplus-A4G25G\">GPU Deep Learning Performance</h2>\n\n\n\n<p class=\"eplus-xyHWc1\">The following benchmark includes not only the Tesla A100 vs Tesla V100 benchmarks but I build a model that fits those data and four different benchmarks based on the Titan V,  Titan RTX, RTX 2080 Ti, and RTX 2080.[<a href=\"https://lambdalabs.com/blog/2080-ti-deep-learning-benchmarks/\">1</a>,<a href=\"https://bizon-tech.com/blog/gtx1080ti-titan-rtx-2080-ti-deep-learning-benchmarks\">2</a>,<a href=\"https://bizon-tech.com/blog/best-gpu-for-deep-learning-rtx-2080-ti-vs-titan-rtx-vs-rtx-8000-vs-rtx-6000\">3</a>,<a href=\"https://www.pugetsystems.com/labs/hpc/NVIDIA-RTX-2080-Ti-vs-2080-vs-1080-Ti-vs-Titan-V-TensorFlow-Performance-with-CUDA-10-0-1247/#:~:text=Yes%2C%20they%20are%20great!,their%20astounding%20Ray%2DTracing%20performance.\">4</a>] In an update, I also factored in the recently discovered performance degradation in RTX 30 series GPUs. And since I wrote this blog post, we now also have the first <a href=\"https://www.evolution.ai/post/benchmarking-deep-learning-workloads-with-tensorflow-on-the-nvidia-geforce-rtx-3090\">solid benchmark</a> for computer vision which confirms my numbers.</p>\n\n\n\n<p class=\"eplus-e2Q3z6\">Beyond this, I scaled intermediate cards like the RTX 2070, RTX 2060, or the Quadro RTX 6000 & 8000 cards via interpolating between those data points of benchmark data. Usually, within an architecture GPUs scale quite linearly with respect to streaming multiprocessors and bandwidth, and my within-architecture model is based on that.</p>\n\n\n\n<p class=\"eplus-QGap1m\">I collected only benchmark data for mixed-precision FP16 training since I believe there is no good reason why one should use FP32 training.</p>\n\n\n\n<p class=\"eplus-E0zXIr\"></p>\n\n\n\n<figure class=\"wp-block-image size-large eplus-BfX2so\"><img data-attachment-id=\"1025\" data-permalink=\"https://timdettmers.com/normalized-gpu-performance-ampere-2/\" data-orig-file=\"https://timdettmers.com/wp-content/uploads/2020/09/Normalized-GPU-Performance-Ampere-1.svg\" data-orig-size=\"1730,1685\" data-comments-opened=\"1\" data-image-meta=\"[]\" data-image-title=\"Normalized GPU Performance Ampere\" data-image-description=\"<p>Figure 8: Normalized GPU deep learning performance relative to an RTX 2080 Ti.</p>\n\" data-image-caption=\"<p>Figure 8: Normalized GPU deep learning performance relative to an RTX 2080 Ti.</p>\n\" data-medium-file=\"https://timdettmers.com/wp-content/uploads/2020/09/Normalized-GPU-Performance-Ampere-1.svg\" data-large-file=\"https://timdettmers.com/wp-content/uploads/2020/09/Normalized-GPU-Performance-Ampere-1.svg\" width=\"1730\" height=\"1685\" src=\"https://timdettmers.com/wp-content/uploads/2020/09/Normalized-GPU-Performance-Ampere-1.svg\" alt=\"Normalized GPU Performance Ampere\" class=\"wp-image-1025\"/><figcaption>Figure 8: Normalized GPU deep learning performance relative to an RTX 2080 Ti.</figcaption></figure>\n\n\n\n<p class=\"eplus-gzQ71E\">Compared to an RTX 2080 Ti, the RTX 3090 yields a speedup of 1.41x for convolutional networks and 1.35x for transformers while having a 15% higher release price. Thus the Ampere RTX 30 yields a substantial improvement over the Turing RTX 20 series in raw performance and is also cost-effective (if you do not have to upgrade your power supply and so forth).</p>\n\n\n\n<h2 class=\"eplus-1SzBFE\">GPU Deep Learning Performance per Dollar</h2>\n\n\n\n<p class=\"eplus-FUgaC5\">What is the GPU that gives you the best bang for your buck? It depends on the cost of the overall system. If you have an expensive system, it makes sense to invest in more expensive GPUs.&nbsp;</p>\n\n\n\n<p class=\"eplus-rzYDNr\">Here I have <a href=\"https://pcpartpicker.com/user/tim_dettmers/saved/#view=fwqbK8\" class=\"broken_link\">three PCIe 3.0 builds</a>, which I use as base costs for 2/4 GPU systems. I take these base costs and add the GPU costs on top of it. The GPU costs are the mean of the GPU’s Amazon and eBay costs. For the new Ampere GPUs, I use just the release price. Together with the performance values from above, this yields performance per dollar values for these systems of GPUs. For the 8-GPU system, I use a Supermicro barebone — the industry standard for RTX servers — as baseline cost. Note that these bar charts do not account for memory requirements. You should think about your memory requirements first and then look for the best option in the chart. Here some rough guidelines for memory:</p>\n\n\n\n<ul class=\"eplus-NSksPW\"><li>Using pretrained transformers; training small transformer from scratch>= 11GB</li><li>Training large transformer or convolutional nets in research / production: >= 24 GB</li><li>Prototyping neural networks (either transformer or convolutional nets) >= 10 GB</li><li>Kaggle competitions >= 8 GB</li><li>Applying computer vision >= 10GB</li><li>Neural networks for video: 24 GB</li><li>Reinforcement learning =10GB + a strong <a href=\"https://timdettmers.com/2018/12/16/deep-learning-hardware-guide/\">deep learning desktop</a> the largest Threadripper or EPYC CPU you can afford.</li></ul>\n\n\n\n<figure class=\"wp-block-image size-large eplus-pa6F5m\"><img data-attachment-id=\"1024\" data-permalink=\"https://timdettmers.com/normalized-1-and-2-gpu-performance-per-dollar-ampere-2/\" data-orig-file=\"https://timdettmers.com/wp-content/uploads/2020/09/Normalized-1-and-2-GPU-Performance-per-Dollar-Ampere-1.svg\" data-orig-size=\"1703,1679\" data-comments-opened=\"1\" data-image-meta=\"[]\" data-image-title=\"Normalized 1 and 2-GPU Performance per Dollar Ampere\" data-image-description=\"<p>Figure 9: Normalized deep learning performance-per-dollar relative to RTX 3080.</p>\n\" data-image-caption=\"<p>Figure 9: Normalized deep learning performance-per-dollar relative to RTX 3080.</p>\n\" data-medium-file=\"https://timdettmers.com/wp-content/uploads/2020/09/Normalized-1-and-2-GPU-Performance-per-Dollar-Ampere-1.svg\" data-large-file=\"https://timdettmers.com/wp-content/uploads/2020/09/Normalized-1-and-2-GPU-Performance-per-Dollar-Ampere-1.svg\" width=\"1703\" height=\"1679\" src=\"https://timdettmers.com/wp-content/uploads/2020/09/Normalized-1-and-2-GPU-Performance-per-Dollar-Ampere-1.svg\" alt=\"Normalized 1 and 2-GPU Performance per Dollar Ampere\" class=\"wp-image-1024\"/><figcaption>Figure 9: Normalized deep learning performance-per-dollar relative to RTX 3080.</figcaption></figure>\n\n\n\n<figure class=\"wp-block-image size-large eplus-bqLboO\"><img data-attachment-id=\"1022\" data-permalink=\"https://timdettmers.com/normalized-4-gpu-performance-per-dollar-ampere-2/\" data-orig-file=\"https://timdettmers.com/wp-content/uploads/2020/09/Normalized-4-GPU-Performance-per-Dollar-Ampere-1.svg\" data-orig-size=\"1717,1691\" data-comments-opened=\"1\" data-image-meta=\"[]\" data-image-title=\"Normalized 4-GPU Performance per Dollar Ampere\" data-image-description=\"<p>Figure 10: Normalized 4-GPU deep learning performance-per-dollar relative to RTX 3080.</p>\n\" data-image-caption=\"<p>Figure 10: Normalized 4-GPU deep learning performance-per-dollar relative to RTX 3080.</p>\n\" data-medium-file=\"https://timdettmers.com/wp-content/uploads/2020/09/Normalized-4-GPU-Performance-per-Dollar-Ampere-1.svg\" data-large-file=\"https://timdettmers.com/wp-content/uploads/2020/09/Normalized-4-GPU-Performance-per-Dollar-Ampere-1.svg\" width=\"1717\" height=\"1691\" src=\"https://timdettmers.com/wp-content/uploads/2020/09/Normalized-4-GPU-Performance-per-Dollar-Ampere-1.svg\" alt=\"Normalized 4-GPU Performance per Dollar Ampere\" class=\"wp-image-1022\"/><figcaption>Figure 10: Normalized 4-GPU deep learning performance-per-dollar relative to RTX 3080.</figcaption></figure>\n\n\n\n<figure class=\"wp-block-image size-large eplus-503Hlx\"><img data-attachment-id=\"1023\" data-permalink=\"https://timdettmers.com/normalized-8-gpu-performance-per-dollar-ampere-2/\" data-orig-file=\"https://timdettmers.com/wp-content/uploads/2020/09/Normalized-8-GPU-Performance-per-Dollar-Ampere-1.svg\" data-orig-size=\"1703,1685\" data-comments-opened=\"1\" data-image-meta=\"[]\" data-image-title=\"Normalized 8-GPU Performance per Dollar Ampere\" data-image-description=\"<p>Figure 11: Normalized 8-GPU deep learning performance-per-dollar relative to RTX 3080</p>\n\" data-image-caption=\"<p>Figure 11: Normalized 8-GPU deep learning performance-per-dollar relative to RTX 3080</p>\n\" data-medium-file=\"https://timdettmers.com/wp-content/uploads/2020/09/Normalized-8-GPU-Performance-per-Dollar-Ampere-1.svg\" data-large-file=\"https://timdettmers.com/wp-content/uploads/2020/09/Normalized-8-GPU-Performance-per-Dollar-Ampere-1.svg\" width=\"1703\" height=\"1685\" src=\"https://timdettmers.com/wp-content/uploads/2020/09/Normalized-8-GPU-Performance-per-Dollar-Ampere-1.svg\" alt=\"Normalized 8-GPU Performance per Dollar Ampere\" class=\"wp-image-1023\"/><figcaption>Figure 11: Normalized 8-GPU deep learning performance-per-dollar relative to RTX 3080</figcaption></figure>\n\n\n<div class=\"crp_related   crp_related_block  mobile-only crp-rounded-thumbs\"><ul><li><a href=\"https://timdettmers.com/2022/08/17/llm-int8-and-emergent-features/\"     class=\"crp_link post-1093\"><figure><img loading=\"lazy\"  width=\"150\" height=\"150\"  src=\"https://i0.wp.com/timdettmers.com/wp-content/uploads/2022/08/zeroshot3.png?resize=150%2C150&ssl=1\" class=\"crp_thumb crp_featured\" alt=\"LLM.int8() and Emergent Features\" title=\"LLM.int8() and Emergent Features\" srcset=\"https://i0.wp.com/timdettmers.com/wp-content/uploads/2022/08/zeroshot3.png?resize=150%2C150&ssl=1 150w, https://i0.wp.com/timdettmers.com/wp-content/uploads/2022/08/zeroshot3.png?zoom=2&resize=150%2C150&ssl=1 300w, https://i0.wp.com/timdettmers.com/wp-content/uploads/2022/08/zeroshot3.png?zoom=3&resize=150%2C150&ssl=1 450w\" sizes=\"(max-width: 150px) 100vw, 150px\" /></figure><span class=\"crp_title\">LLM.int8() and Emergent Features</span></a></li><li><a href=\"https://timdettmers.com/2022/03/13/how-to-choose-your-grad-school/\"     class=\"crp_link post-805\"><figure><img loading=\"lazy\"  width=\"150\" height=\"150\"  src=\"https://i0.wp.com/timdettmers.com/wp-content/uploads/2020/03/IMG_20180420_195552216_HDR.jpg?resize=150%2C150&ssl=1\" class=\"crp_thumb crp_featured\" alt=\"How to Choose Your Grad School\" title=\"How to Choose Your Grad School\" srcset=\"https://i0.wp.com/timdettmers.com/wp-content/uploads/2020/03/IMG_20180420_195552216_HDR.jpg?resize=150%2C150&ssl=1 150w, https://i0.wp.com/timdettmers.com/wp-content/uploads/2020/03/IMG_20180420_195552216_HDR.jpg?zoom=2&resize=150%2C150&ssl=1 300w, https://i0.wp.com/timdettmers.com/wp-content/uploads/2020/03/IMG_20180420_195552216_HDR.jpg?zoom=3&resize=150%2C150&ssl=1 450w\" sizes=\"(max-width: 150px) 100vw, 150px\" /></figure><span class=\"crp_title\">How to Choose Your Grad School</span></a></li></ul><div class=\"crp_clear\"></div></div>\n\n\n<h2 class=\"eplus-RwDsYV\">GPU Recommendations</h2>\n\n\n\n<p class=\"eplus-CQxjtd\">The first thing that need to emphasize again: If you choose a GPU, you need to make sure that it has enough memory for what you want to do. The steps in selecting the best deep learning GPU for you should be:</p>\n\n\n\n<ol class=\"eplus-w4MZ5u\"><li>What do I want to do with the GPU(s): Kaggle competitions, machine learning, learning deep learning, hacking on small projects (GAN-fun or big language models?), doing research in computer vision / natural language processing / other domains, or something else?</li><li>How much memory do I need for what I want to do?</li><li>Use the Cost/Performance charts from above to figure out which GPU is best for you that fulfills the memory criteria.</li><li>Are there additional caveats for the GPU that I chose? For example, if it is an RTX 3090, can I fit it into my computer? Does my power supply unit (PSU) have enough wattage to support my GPU(s)? Will heat dissipation be a problem, or can I somehow cool the GPU effectively?</li></ol>\n\n\n\n<p class=\"eplus-9yb9Eg\">Some of these details require you to self-reflect about what you want and maybe research a bit about how much memory the GPUs have that other people use for your area of interest. I can give you some guidance, but I cannot cover all areas here.</p>\n\n\n\n<h3 class=\"eplus-3RSqDc\">When do I need >= 11 GB of Memory?</h3>\n\n\n\n<p class=\"eplus-zMASNR\">I mentioned before that you should have at least 11 GB of memory if you work with transformers, and better yet, >= 24 GB of memory if you do research on transformers. This is so because most previous models that are pretrained have pretty steep memory requirements, and these models were trained with at least RTX 2080 Ti GPUs that have 11 GB of memory. Thus having less than 11 GB can create scenarios where it is difficult to run certain models.</p>\n\n\n\n<p class=\"eplus-UsKhB6\">Other areas that require large amounts of memory are anything medical imaging, some state-of-the-art computer vision models, anything with very large images (GAN, style transfer).</p>\n\n\n\n<p class=\"eplus-EvalZF\">In general, if you seek to build models that give you the edge in competition, be it research, industry, or Kaggle competition, extra memory will provide you with a possible edge.</p>\n\n\n\n<h3 class=\"eplus-WGUdpQ\">When is <11 GB of Memory Okay?</h3>\n\n\n\n<p class=\"eplus-cBPqoe\">The RTX 3070 and RTX 3080 are mighty cards, but they lack a bit of memory. For many tasks, however, you do not need that amount of memory.</p>\n\n\n\n<p class=\"eplus-FjF39v\">The RTX 3070 is perfect if you want to learn deep learning. This is so because the basic skills of training most architectures can be learned by just scaling them down a bit or using a bit smaller input images. If I would learn deep learning again, I would probably roll with one RTX 3070, or even multiple if I have the money to spare. </p>\n\n\n\n<p class=\"eplus-tXqTR7\">The RTX 3080 is currently by far the most cost-efficient card and thus ideal for prototyping. For prototyping, you want the largest memory, which is still cheap. With prototyping, I mean here prototyping in any area: Research, competitive Kaggle, hacking ideas/models for a startup, experimenting with research code. For all these applications, the RTX 3080 is the best GPU.</p>\n\n\n\n<p class=\"eplus-WR2yDR\">Suppose I would lead a research lab/startup. I would put 66-80% of my budget in RTX 3080 machines and 20-33% for “rollout” RTX 3090 machines with a robust water cooling setup. The idea is, RTX 3080 is much more cost-effective and can be shared via a slurm cluster setup as prototyping machines. Since prototyping should be done in an agile way, it should be done with smaller models and smaller datasets. RTX 3080 is perfect for this. Once students/colleagues have a great prototype model, they can rollout the prototype on the RTX 3090 machines and scale to larger models.&nbsp;</p>\n\n\n\n<h3 class=\"eplus-XIdGkn\">How can I fit +24GB models into 10GB memory?</h3>\n\n\n\n<p class=\"eplus-8KX6FF\">It is a bit contradictory that I just said if you want to train big models, you need lots of memory, but we have been struggling with big models a lot since the onslaught of BERT and solutions exists to train 24 GB models in 10 GB memory. If you do not have the money or what to avoid cooling/power issues of the RTX 3090, you can get RTX 3080 and just accept that you need do some extra programming by adding memory-saving techniques. There are enough techniques to make it work, and they are becoming more and more commonplace.</p>\n\n\n\n<p class=\"eplus-TtN7bc\">Here just a list of common techniques: </p>\n\n\n\n<ul class=\"eplus-kaToMv\"><li>FP16/BF16 training (<a href=\"https://medium.com/the-artificial-impostor/use-nvidia-apex-for-easy-mixed-precision-training-in-pytorch-46841c6eed8c\">apex</a>)</li><li><a href=\"https://github.com/prigoyal/pytorch_memonger/blob/master/tutorial/Checkpointing_for_PyTorch_models.ipynb\">Gradient checkpointing</a> (only store some of the activations and recompute them in the backward pass)</li><li>GPU-to-CPU <a href=\"https://arxiv.org/abs/2002.05645v5\">Memory Swapping</a> (swap layers not needed to the CPU; swap them back in just-in-time for backprop)</li><li><a href=\"https://timdettmers.com/2014/11/09/model-parallelism-deep-learning/\">Model Parallelism</a> (each GPU holds a part of each layer; supported by fairseq)</li><li>Pipeline parallelism (each GPU hols a couple of layers of the network) </li><li><a href=\"https://www.microsoft.com/en-us/research/blog/zero-deepspeed-new-system-optimizations-enable-training-models-with-over-100-billion-parameters/\">ZeRO</a> parallelism (each GPU holds partial layers)</li><li><a href=\"https://www.microsoft.com/en-us/research/blog/deepspeed-extreme-scale-model-training-for-everyone/\">3D parallelism</a> (Model + pipeline + ZeRO)</li><li>CPU Optimizer state (store and update Adam/Momentum on the CPU while the next GPU forward pass is happening) </li></ul>\n\n\n\n<p class=\"eplus-DK7SPD\">If you are not afraid to tinker a bit and implement some of these techniques — which usually means integrating packages that support them with your code — you will be able to fit that 24GB large network on a smaller GPU. With that hacking spirit, the RTX 3080, or any GPU with less than 11 GB memory, might be a great GPU for you.</p>\n\n\n\n<h3 class=\"eplus-pb5gym\">Is upgrading from RTX 20 to RTX 30 GPU worth it? Or Should I wait for the next GPU?</h3>\n\n\n\n<p class=\"eplus-CD5XWA\">If I were you, I would think twice about upgrading from an RTX 20 GPU to an RTX 30 GPU. You might be eager to get that 30% faster training or so, but it can be a big headache to deal with all the other RTX 30 GPU problems. The power supply, the cooling, you need to sell your old GPUs. Is it worth it all?</p>\n\n\n\n<p class=\"eplus-mzyOel\">I could imagine if you need that extra memory, for example, to go from RTX 2080 Ti to RTX 3090, or if you want a huge boost in performance, say from RTX 2060 to RTX 3080, then it can be pretty worth it. But if you stay &#8220;in your league,&#8221; that is, going from Titan RTX to RTX 3090, or, RTX 2080 Ti to RTX 3080, it is hardly worth it. You gain a bit of performance, but you will have headaches about the power supply and cooling, and you are a good chunk of money lighter. I do not think it is worth it. I would wait until a better alternative to GDDR6X memory is released. This will make GPUs use less power and might even make them faster. Maybe wait a year and see how the landscape has changed since then. </p>\n\n\n\n<p class=\"eplus-7kB7bE\">It is worth mentioning that technology is slowing anyways. So waiting for a year might net you a GPU, which will stay current for more than 5 years. There will be a time when cheap HBM memory can be manufactured. If that time comes, and you buy that GPU and you will likely stay on that GPU for more than 7 years. Such GPUs might be available in 3-4 years. As such, playing the waiting game can be a pretty smart choice.</p>\n\n\n\n<h3 class=\"eplus-REZnig\">General Recommendations</h3>\n\n\n\n<p class=\"eplus-1jH1ES\">In general, the RTX 30 series is very powerful, and I recommend these GPUs. Be aware of memory, as discussed in the previous section, but also power requirements and cooling. If you have one PCIe slot between GPUs, cooling will be no problem at all. Otherwise, with RTX 30 cards, make sure you get water cooling, PCIe extenders, or effective blower cards (data in the next weeks will show the NVIDIA fan design is adequate).</p>\n\n\n\n<p class=\"eplus-AcU031\">In general, I would recommend the RTX 3090 for anyone that can afford it. It will equip you not only for now but will be a very effective card for the next 3-7 years. As such, it is a good investment that will stay strong. It is unlikely that HBM memory will become cheap within three years, so the next GPU would only be about 25% better than the RTX 3090. We will probably see cheap HBM memory in 3-5 years, so after that, you definitely want to upgrade.</p>\n\n\n\n<p class=\"eplus-0g0Yv8\">For PhD students, those who <a href=\"https://timdettmers.com/2018/11/26/phd-applications/\">want to become PhD students</a>, or those who <a href=\"https://timdettmers.com/2020/03/10/how-to-pick-your-grad-school/\">get started with a PhD</a>, I recommend RTX 3080 GPUs for prototyping and RTX 3090 GPUs for doing rollouts. If your department has a GPU cluster, I would highly recommend a <a href=\"https://slurm.schedmd.com/documentation.html\">Slurm</a> GPU cluster with 8 GPU machines. However, since the cooling of RTX 3080 GPUs in an 8x GPU server setup is questionable it is unlikely that you will be able to run these. If the cooling works, I would recommend 66-80% RTX 3080 GPUs and the rest of the GPUs being either RTX 3090 or Tesla A100. If cooling does not work I would recommend 66-80% RTX 2080 and the rest being Tesla A100s. Again, it is crucial, though, that you make sure that heating issues in your GPU servers are taken care of before you commit to specific GPUs for your servers. More on GPU clusters below. </p>\n\n\n\n<p class=\"eplus-DWBQlo\">If you have multiple RTX 3090’s, make sure you choose solutions that guarantee sufficient cooling and power. I will update the blog post about this as more and more data is rolling in what is a proper setup.</p>\n\n\n\n<p class=\"eplus-lu9hPv\">For anyone without strictly competitive requirements (research, competitive Kaggle, competitive startups), I would recommend in order: Used RTX 2080 Ti, used RTX 2070, new RTX 3080, new RTX 3070. If you do not like used cards, but the RTX 3080. If you cannot afford the RTX 3080, go with the RTX 3070. All of these cards are very cost-effective solutions and will ensure fast training of most networks. If you use the right memory tricks and are fine with some extra programming, there are now enough tricks to make a 24 GB neural network fit into a 10 GB GPU. As such, if you accept a bit of uncertainty and some extra programming, the RTX 3080 might also be a better choice compared to the RTX 3090 since performance is quite similar between these cards.</p>\n\n\n\n<p class=\"eplus-t8wbEB\">If your budget is limited and an RTX 3070 is too expensive, a used RTX 2070 is about $260 on eBay. It is not clear yet if there will be an RTX 3060, but if you are on a limited budget, it might also be worth waiting a bit more. If priced similarly to the RTX 2060 and GTX 1060, you can expect a price of $250 to $300 and a pretty strong performance.</p>\n\n\n\n<p class=\"eplus-mtG0kc\">If your budget is limited, but you still need large amounts of memory, then old, used Tesla or Quadro cards from eBay might be best for you. The Quadro M6000 has 24 GB of memory and goes for $400 on eBay. The Tesla K80 has a 2-in-1 GPU with 2x 12 GB of memory for about $200. These cards are slow compared to more modern cards, but the extra memory can come in handy for specific projects where memory is paramount.</p>\n\n\n\n<h3 class=\"eplus-D11TrS\">Recommendations for GPU Clusters</h3>\n\n\n\n<p class=\"eplus-lyFOSe\">GPU cluster design depends highly on use. For a +1,024 GPU system, networking is paramount, but if users only use at most 32 GPUs at a time on such a system investing in powerful networking infrastructure is a waste. Here, I would go with similar prototyping-rollout reasoning, as mentioned in the RTX 3080 vs RTX 3090 case.&nbsp;</p>\n\n\n\n<p class=\"eplus-IpYlAh\">In general, RTX cards are banned from data centers via the CUDA license agreement. However, often universities can get an exemption from this rule. It is worth getting in touch with someone from NVIDIA about this to ask for an exemption. If you are allowed to use RTX cards, I would recommend standard Supermicro 8 GPU systems with RTX 3080 or RTX 3090 GPUs (if sufficient cooling can be assured). A small set of 8x A100 nodes ensures effective “rollout” after prototyping, especially if there is no guarantee that the 8x RTX 3090 servers can be cooled sufficiently. In this case, I would recommend A100 over RTX 6000 / RTX 8000 because the A100 is pretty cost-effective and future proof.</p>\n\n\n\n<p class=\"eplus-X7ewYg\">In the case you want to train vast networks on a GPU cluster (+256 GPUs), I would recommend the NVIDIA DGX SuperPOD system with A100 GPUs. At a +256 GPU scale, networking is becoming paramount. If you want to scale to more than 256 GPUs, you need a highly optimized system, and putting together standard solutions is no longer cutting it.&nbsp;</p>\n\n\n\n<p class=\"eplus-1U1GON\">Especially at a scale of +1024 GPUs, the only competitive solutions on the market are the Google TPU Pod and NVIDIA DGX SuperPod. At that scale, I would prefer the Google TPU Pod since their custom made networking infrastructure seems to be superior to the NVIDIA DGX SuperPod system — although both systems come quite close to each other. The GPU system offers a bit more flexibility of deep learning models and applications over the TPU system, while the TPU system supports larger models and provides better scaling. So both systems have their advantages and disadvantages.</p>\n\n\n\n<h3 class=\"eplus-0edda7\">Do Not Buy These GPUs</h3>\n\n\n\n<p class=\"eplus-zATKzd\">I do not recommend buying multiple RTX Founders Editions (any) or RTX Titans unless you have PCIe extenders to solve their cooling problems. They will simply run too hot, and their performance will be way below what I report in the charts above. 4x RTX 2080 Ti Founders Editions GPUs will readily dash beyond 90C, will throttle down their core clock, and will run slower than properly cooled RTX 2070 GPUs.</p>\n\n\n\n<p class=\"eplus-CCqPf7\">I do not recommend buying Tesla V100 or A100 unless you are forced to buy them (banned RTX data center policy for companies) or unless you want to train very large networks on a huge GPU cluster — these GPUs are just not very cost-effective.</p>\n\n\n\n<p class=\"eplus-mD8QMG\">If you can afford better cards, do not buy GTX 16 series cards. These cards do not have tensor cores and, as such, provide relatively poor deep learning performance. I would choose a used RTX 2070 / RTX 2060 / RTX 2060 Super over a GTX 16 series card. If you are short on money, however, the GTX 16 series cards can be a good option.</p>\n\n\n\n<h3 class=\"eplus-jAqelF\">When Is it Best Not to Buy New GPUs?</h3>\n\n\n\n<p class=\"eplus-ixU5wM\">If you already have RTX 2080 Tis or better GPUs, an upgrade to RTX 3090 may not make sense. Your GPUs are already pretty good, and the performance gains are negligible compared to worrying about the PSU and cooling problems for the new power-hungry RTX 30 cards — just not worth it.</p>\n\n\n\n<p class=\"eplus-F9yeNw\">The only reason I would want to upgrade from 4x RTX 2080 Ti to 4x RTX 3090 would be if I do research on huge transformers or other highly compute dependent network training. However, if memory is a problem, you may first consider some memory tricks to fit large models on your 4x RTX 2080 Tis before upgrading to RTX 3090s.</p>\n\n\n\n<p class=\"eplus-jgLXoi\">If you have one or multiple RTX 2070 GPUs, I would think twice about an upgrade. These are pretty good GPUs. Reselling those GPUs on eBay and getting RTX 3090s could make sense, though, if you find yourself often limited by the 8 GB memory. This reasoning is valid for many other GPUs: If memory is tight, an upgrade is right.</p>\n\n\n\n<h2 class=\"eplus-rZBwp1\">Question & Answers & Misconceptions</h2>\n\n\n\n<p class=\"eplus-RN5QsL\">Summary:</p>\n\n\n\n<ul class=\"eplus-wflokB\"><li>PCIe 4.0 and PCIe lanes do not matter in 2x GPU setups. For 4x GPU setups, they still do not matter much.</li><li>RTX 3090 and RTX 3080 cooling will be problematic. Use water-cooled cards or PCIe extenders.</li><li>NVLink is not useful. Only useful for GPU clusters.</li><li>You can use different types of GPUs in one computer (e.g., GTX 1080 + RTX 2080 + RTX 3090), but you will not be able to parallelize across them efficiently.</li><li>You will need Infiniband +50Gbit/s networking to parallelize training across more than two machines.</li><li>AMD CPUs are cheaper than Intel CPUs; Intel CPUs have almost no advantage.</li><li>Despite heroic software engineering efforts, AMD GPUs + ROCm will probably not be able to compete with NVIDIA due to lacking community and Tensor Core equivalent for at least 1-2 years.</li><li>Cloud GPUs are useful if you use them for less than 1 year. After that, a desktop is the cheaper solution.</li></ul>\n\n\n\n<h3 class=\"eplus-BKkk3i\">Do I need PCIe 4.0?</h3>\n\n\n\n<p class=\"eplus-9ByauH\">Generally, no. PCIe 4.0 is great if you have a GPU cluster. It is okay if you have an 8x GPU machine, but otherwise, it does not yield many benefits. It allows better parallelization and a bit faster data transfer. Data transfers are not a bottleneck in any application. In computer vision, in the data transfer pipeline, the data storage can be a bottleneck, but not the PCIe transfer from CPU to GPU. So there is no real reason to get a PCIe 4.0 setup for most people. The benefits will be maybe 1-7% better parallelization in a 4 GPU setup.</p>\n\n\n\n<h3 class=\"eplus-iAnpcZ\">Do I need 8x/16x PCIe lanes?&nbsp;</h3>\n\n\n\n<p class=\"eplus-4e3Zwd\">Same as with PCIe 4.0 — generally, no. <a href=\"https://timdettmers.com/2018/12/16/deep-learning-hardware-guide/\">PCIe lanes</a> are needed for parallelization and fast data transfers, which are seldom a bottleneck. Operating GPUs on 4x lanes is fine, especially if you only have 2 GPUs. For a 4 GPU setup, I would prefer 8x lanes per GPU, but running them at 4x lanes will probably only decrease performance by around 5-10% if you parallelize across all 4 GPUs.</p>\n\n\n\n<h3 class=\"eplus-5dLLUU\">How do I fit 4x RTX 3090 if they take up 3 PCIe slots each?</h3>\n\n\n\n<p class=\"eplus-ZiOIiH\">You need to get one of the two-slot variants, or you can try to spread them out with PCIe extenders. Besides space, you should also immediately think about cooling and a suitable PSU. It seems the most manageable solution will be to get 4x <a href=\"https://www.evga.com/articles/01434/evga-geforce-rtx-30-series/\" rel=\"nofollow\" class=\"broken_link\">RTX 3090 EVGA Hydro Copper</a> with a custom water cooling loop. This will keep the cards very cool. EVGA produced hydro copper versions of GPUs for years, and I believe you can trust in their water-cooled GPUs’ quality. There might also be other variants which are cheaper though.</p>\n\n\n\n<p class=\"eplus-hKh4h6\">PCIe extenders might also solve both space and cooling issues, but you need to make sure that you have enough space in your case to spread out the GPUs. Make sure your PCIe extenders are long enough!</p>\n\n\n\n<h3 class=\"eplus-2ceRV0\">How do I cool 4x RTX 3090 or 4x RTX 3080?</h3>\n\n\n\n<p class=\"eplus-Fchmll\">See the previous section.</p>\n\n\n\n<h3 class=\"eplus-hlYdEC\">Can I use multiple GPUs of different GPU types?</h3>\n\n\n\n<p class=\"eplus-cOwKhd\">Yes, you can! But you cannot parallelize efficiently across GPUs of different types. I could imagine a 3x RTX 3070 + 1 RTX 3090 could make sense for a prototyping-rollout split. On the other hand, parallelizing across 4x RTX 3070 GPUs would be very fast if you can make the model fit onto those GPUs. The only other reason why you want to do this that I can think of is if you&#8217;re going to use your old GPUs. This works just fine, but parallelization across those GPUs will be inefficient since the fastest GPU will wait for the slowest GPU to catch up to a synchronization point (usually gradient update).</p>\n\n\n\n<h3 class=\"eplus-YbZb25\">What is NVLink, and is it useful?</h3>\n\n\n\n<p class=\"eplus-kZZzbt\">Generally, NVLink is not useful. NVLink is a high speed interconnect between GPUs. It is useful if you have a GPU cluster with +128 GPUs. Otherwise, it yields almost no benefits over standard PCIe transfers.</p>\n\n\n\n<h3 class=\"eplus-pqooRC\">I do not have enough money, even for the cheapest GPUs you recommend. What can I do?</h3>\n\n\n\n<p class=\"eplus-ClLhtz\">Definitely buy used GPUs. Used RTX 2070 ($400) and RTX 2060 ($300) are great. If you cannot afford that, the next best option is to try to get a used GTX 1070 ($220) or GTX 1070 Ti ($230). If that is too expensive, a used GTX 980 Ti (6GB $150) or a used GTX 1650 Super ($190). If that is too expensive, it is best to roll with free GPU cloud services. These usually provided a GPU for a limited amount of time/credits, after which you need to pay. Rotate between services and accounts until you can afford your own GPU.</p>\n\n\n\n<h3 class=\"eplus-OqapSw\">What is the carbon footprint of GPUs? How can I use GPUs without polluting the environment?</h3>\n\n\n\n<p class=\"eplus-zai7Ps\">I built a <a href=\"https://github.com/TimDettmers/carbonneutral\">carbon calculator</a> for calculating your carbon footprint for academics (carbon from flights to conferences + GPU time). The calculator can also be used to calculate a pure GPU carbon footprint. You will find that GPUs produce much, much more carbon than international flights. As such, you should make sure you have a green source of energy if you do not want to have an astronomical carbon footprint. If no electricity provider in our area provides green energy, the best way is to buy carbon offsets. Many people are skeptical about carbon offsets. Do they work? Are they scams?</p>\n\n\n\n<p class=\"eplus-EWsGx0\">I believe skepticism just hurts in this case, because not doing anything would be more harmful than risking the probability of getting scammed. If you worry about scams, just invest in a portfolio of offsets to minimize risk.</p>\n\n\n\n<p class=\"eplus-69USNG\">I worked on a project that produced carbon offsets about ten years ago. The carbon offsets were generated by burning leaking methane from mines in China. UN officials tracked the process, and they required clean digital data and physical inspections of the project site. In that case, the carbon offsets that were produced were highly reliable. I believe many other projects have similar quality standards.</p>\n\n\n\n<h3 class=\"eplus-3vCLFD\">What do I need to parallelize across two machines?</h3>\n\n\n\n<p class=\"eplus-fTOuun\">If you want to be on the safe side, you should get at least +50Gbits/s network cards to gain speedups if you want to parallelize across machines. I recommend having at least an EDR Infiniband setup, meaning a network card with at least 50 GBit/s bandwidth. Two EDR cards with cable are about $500 on eBay.</p>\n\n\n\n<p class=\"eplus-9X2IIc\">In some cases, you might be able to get away with 10 Gbit/s Ethernet, but this is usually only the case for special networks (certain convolutional networks) or if you use certain algorithms (Microsoft DeepSpeed).</p>\n\n\n\n<h3 class=\"eplus-PgjlVt\">Is the sparse matrix multiplication features suitable for sparse matrices in general?</h3>\n\n\n\n<p class=\"eplus-R0OltN\">It does not seem so. Since the granularity of the sparse matrix needs to have 2 zero-valued elements, every 4 elements, the sparse matrices need to be quite structured. It might be possible to adjust the algorithm slightly, which involves that you pool 4 values into a compressed representation of 2 values, but this also means that precise arbitrary sparse matrix multiplication is not possible with Ampere GPUs.</p>\n\n\n\n<h3 class=\"eplus-MYBgIz\">Do I need an Intel CPU to power a multi-GPU setup?</h3>\n\n\n\n<p class=\"eplus-ILUHTD\">I do not recommend Intel CPUs unless you heavily use CPUs in Kaggle competitions (heavy linear algebra on the CPU). Even for Kaggle competitions AMD CPUs are still great, though. AMD CPUs are cheaper and better than Intel CPUs in general for deep learning. For a 4x GPU built, my go-to CPU would be a Threadripper. We built dozens of systems at our university with Threadrippers, and they all work great — no complaints yet. For 8x GPU systems, I would usually go with CPUs that your vendor has experience with. CPU and PCIe/system reliability is more important in 8x systems than straight performance or straight cost-effectiveness.</p>\n\n\n\n<h3 class=\"eplus-V6H8gS\">Does computer case design matter for cooling?</h3>\n\n\n\n<p class=\"eplus-rSzCnL\">No. GPUs are usually perfectly cooled if there is at least a small gap between GPUs. Case design will give you 1-3 C better temperatures, space between GPUs will provide you with 10-30 C improvements. The bottom line, if you have space between GPUs, cooling does not matter. If you have no space between GPUs, you need the right cooler design (blower fan) or another solution (water cooling, PCIe extenders), but in either case, case design and case fans do not matter.</p>\n\n\n\n<h3 class=\"eplus-Umve55\">Will AMD GPUs + ROCm ever catch up with NVIDIA GPUs + CUDA?</h3>\n\n\n\n<p class=\"eplus-sOjnl6\">Not in the next 1-2 years. It is a three-way problem: Tensor Cores, software, and community.&nbsp;</p>\n\n\n\n<p class=\"eplus-NfDW5K\">AMD GPUs are great in terms of pure silicon: Great FP16 performance, great memory bandwidth. However, their lack of Tensor Cores or the equivalent makes their deep learning performance poor compared to NVIDIA GPUs. Packed low-precision math does not cut it. Without this hardware feature, AMD GPUs will never be competitive. Rumors show that <a href=\"https://wccftech.com/amd-cdna-architecture-radeon-instinct-arcturus-gpu-120-cu-7680-cores/\">some data center card</a> with Tensor Core equivalent is planned for 2020, but no new data emerged since then. Just having data center cards with a Tensor Core equivalent would also mean that few would be able to afford such AMD GPUs, which would give NVIDIA a competitive advantage.</p>\n\n\n\n<p class=\"eplus-O3Dvhx\">Let’s say AMD introduces a Tensor-Core-like-hardware feature in the future. Then many people would say, “But there is no software that works for AMD GPUs! How am I supposed to use them?” This is mostly a misconception. The AMD software via ROCm has come to a long way, and support via PyTorch is excellent. While I have not seen many experience reports for AMD GPUs + PyTorch, all the software features are integrated. It seems, if you pick any network, you will be just fine running it on AMD GPUs. So here AMD has come a long way, and this issue is more or less solved.</p>\n\n\n\n<p class=\"eplus-OTgr4r\">However, if you solve software and the lack of Tensor Cores, AMD still has a problem: the lack of community. If you have a problem with NVIDIA GPUs, you can Google the problem and find a solution. That builds a lot of trust in NVIDIA GPUs. You have the infrastructure that makes using NVIDIA GPUs easy (any deep learning framework works, any scientific problem is well supported). You have the hacks and tricks that make usage of NVIDIA GPUs a breeze (e.g., apex). You can find experts on NVIDIA GPUs and programming around every other corner while I knew much less AMD GPU experts.</p>\n\n\n\n<p class=\"eplus-9AWxYr\">In the community aspect, AMD is a bit like Julia vs Python. Julia has a lot of potential, and many would say, and rightly so, that it is the superior programming language for scientific computing. Yet, Julia is barely used compared to Python. This is because the Python community is very strong. Numpy, SciPy, Pandas are powerful software packages that a large number of people congregate around. This is very similar to the NVIDIA vs AMD issue.</p>\n\n\n\n<p class=\"eplus-o6eRO8\">Thus, it is likely that AMD will not catch up until Tensor Core equivalent is introduced (1/2 to 1 year?) and a strong community is built around ROCm (2 years?). AMD will always snatch a part of the market share in specific subgroups (e.g., cryptocurrency mining, data centers). Still, in deep learning, NVIDIA will likely keep its monopoly for at least a couple more years.</p>\n\n\n\n<h3 class=\"eplus-OkbBy3\">When is it better to use the cloud vs a dedicated GPU desktop/server?</h3>\n\n\n\n<p class=\"eplus-eFDtSu\">Rule-of-thumb: If you expect to do deep learning for longer than a year, it is cheaper to get a desktop GPU. Otherwise, cloud instances are preferable unless you have extensive cloud computing skills and want the benefits of scaling the number of GPUs up and down at will.</p>\n\n\n\n<p class=\"eplus-i5Jvrp\">For the exact point in time when a cloud GPU is more expensive than a desktop depends highly on the service that you are using, and it is best to do a little math on this yourself. Below I do an example calculation for an AWS V100 spot instance with 1x V100 and compare it to the price of a desktop with a single RTX 3090 (similar performance). The desktop with RTX 3090 costs $2,200 (<a ref=\"https://pcpartpicker.com/user/tim_dettmers/saved/#view=mZ2rD3\">2-GPU barebone</a> + RTX 3090). Additionally, assuming you are in the US, there is an additional $0.12 per kWh for electricity. This compares to $2.14 per hour for the AWS on-demand instance.</p>\n\n\n\n<p class=\"eplus-sF5f8X\">At 15% utilization per year, the desktop uses:&nbsp;</p>\n\n\n\n<p class=\"eplus-jfhFj2\">(350 W (GPU) + 100 W (CPU))*0.15 (utilization) * 24 hours * 365 days = 591 kWh per year</p>\n\n\n\n<p class=\"eplus-uZPGyz\">So 591 kWh of electricity per year, that is an additional $71.</p>\n\n\n\n<p class=\"eplus-EqZNc1\">The break-even point for a desktop vs a cloud instance at 15% utilization (you use the cloud instance 15% of time during the day), would be about 300 days ($2,311 vs $2,270):</p>\n\n\n\n<p class=\"eplus-WO1NL4\">$2.14/h * 0.15 (utilization) * 24 hours * 300 days = $2,311</p>\n\n\n\n<p class=\"eplus-3brSoQ\">So if you expect to run deep learning models after 300 days, it is better to buy a desktop instead of using AWS on-demand instances.</p>\n\n\n\n<p class=\"eplus-aYvyd0\">AWS spot instances are a bit cheaper at about 0.9$ per hour. However, many users on Twitter were telling me that on-demand instances are a nightmare, but that spot instances are <em>hell</em>. AWS itself lists the average frequency of interruptions of V100 GPU spot instances to be above 20%. This means you need a pretty good spot instance management infrastructure to make it worth it to use spot instances. But if you have it, AWS spot instances and similar services are pretty competitive. You need to own and run a desktop for 20 months to run even compared to AWS spot instances. This means if you expect to run deep learning workloads in the next 20 months, a desktop machine will be cheaper (and easier to use).</p>\n\n\n\n<p class=\"eplus-CmY2qr\">You can do similar calculations for any cloud service to make the decision if you go for a cloud service or a desktop.</p>\n\n\n\n<p class=\"eplus-6m3gGS\">Common utilization rates are the following:</p>\n\n\n\n<ul class=\"eplus-sNwMkX\"><li>PhD student personal desktop: < 15%</li><li>PhD student slurm GPU cluster: > 35%</li><li>Company-wide slurm research cluster: > 60%</li></ul>\n\n\n\n<p class=\"eplus-deH52E\">In general, utilization rates are lower for professions where thinking about cutting edge ideas is more important than developing practical products. Some areas have low utilization rates (interpretability research), while other areas have much higher rates (machine translation, language modeling). In general, the utilization of personal machines is almost always overestimated. Commonly, most personal systems have a utilization rate between 5-10%. This is why I would highly recommend slurm GPU clusters for research groups and companies instead of individual desktop GPU machines.</p>\n\n\n\n<h2 class=\"eplus-MNN7ZT\"><strong>TL;DR advice</strong></h2>\n\n\n\n<p class=\"eplus-3oTerp\"><strong>Best GPU overall</strong>: RTX 3080 and RTX 3090.</p>\n\n\n\n<p class=\"eplus-syLana\"><strong>GPUs to avoid (as an individual)</strong>: Any Tesla card; any Quadro card; any Founders Edition card; Titan RTX, Titan V, Titan XP.</p>\n\n\n\n<p class=\"eplus-kwa5yO\"><strong>Cost-efficient but expensive</strong>: RTX 3080.</p>\n\n\n\n<p class=\"eplus-XeLVZu\"><strong>Cost-efficient and cheaper</strong>:&nbsp; RTX 3070, RTX 2060 Super</p>\n\n\n\n<p class=\"eplus-vkySjI\"><strong>I have little money</strong>: Buy used cards. Hierarchy: RTX 2070 ($400), RTX 2060 ($300), GTX 1070 ($220), GTX 1070 Ti ($230), GTX 1650 Super ($190), GTX 980 Ti (6GB $150).</p>\n\n\n\n<p class=\"eplus-iqSmcd\"><strong>I have almost no money</strong>: There are a lot of startups that promo their clouds: Use free cloud credits and switch companies accounts until you can afford a GPU.</p>\n\n\n\n<p class=\"eplus-jBi8iG\"><strong>I do Kaggle: </strong>RTX 3070.</p>\n\n\n\n<p class=\"eplus-HAtKS0\"><strong>I am a competitive computer vision, pretraining, or machine translation researcher</strong>: 4x RTX 3090. Wait until working builds with good cooling, and enough power are confirmed (I will update this blog post).</p>\n\n\n\n<p class=\"eplus-Kxjcu5\"><strong>I am an NLP researcher</strong>: If you do not work on machine translation, language modeling, or pretraining of any kind, an RTX 3080 will be sufficient and cost-effective.</p>\n\n\n\n<p class=\"eplus-afPlcq\"><strong>I started deep learning, and I am serious about it</strong>: Start with an RTX 3070. If you are still serious after 6-9 months, sell your RTX 3070 and buy 4x RTX 3080. Depending on what area you choose next (startup, Kaggle, research, applied deep learning), sell your GPUs, and buy something more appropriate after about three years (next-gen RTX 40s GPUs).</p>\n\n\n\n<p class=\"eplus-2YddxW\"><strong>I want to try deep learning, but I am not serious about it</strong>: The RTX 2060 Super is excellent but may require a new power supply to be used. If your motherboard has a PCIe x16 slot and you have a power supply with around 300 W, a GTX 1050 Ti is a great option since it will not require any other computer components to work with your desktop computer.</p>\n\n\n\n<p class=\"eplus-hPS4gf\"><strong>GPU Cluster used for parallel models across less than 128 GPUs: </strong>If you are allowed to buy RTX GPUs for your cluster: 66% 8x RTX 3080 and 33% 8x RTX 3090 (only if sufficient cooling is guaranteed/confirmed). If cooling of RTX 3090s is not sufficient buy 33% RTX 6000 GPUs or 8x Tesla A100 instead. If you are not allowed to buy RTX GPUs, I would probably go with 8x A100 Supermicro nodes or 8x RTX 6000 nodes.</p>\n\n\n\n<p class=\"eplus-uN1scV\"><strong>GPU Cluster used for parallel models across 128 GPUs:</strong> Think about 8x Tesla A100 setups. If you use more than 512 GPUs, you should think about getting a DGX A100 SuperPOD system that fits your scale.</p>\n\n\n\n<h2 class=\"eplus-bXPSts\">Version History</h2>\n\n\n\n<ul class=\"eplus-xnXOsk\"><li>2020-09-20: Added discussion of using power limiting to run 4x RTX 3090 systems. Added older GPUs to the performance and cost/performance charts. Added figures for sparse matrix multiplication.</li><li>2020-09-07: Added NVIDIA Ampere series GPUs. Included lots of good-to-know GPU details.</li><li>2019-04-03: Added RTX Titan and GTX 1660 Ti. Updated TPU section. Added startup hardware discussion.</li><li>2018-11-26: Added discussion of overheating issues of RTX cards.</li><li>2018-11-05: Added RTX 2070 and updated recommendations. Updated charts with hard performance data. Updated TPU section.</li><li>2018-08-21: Added RTX 2080 and RTX 2080 Ti; reworked performance analysis</li><li>2017-04-09: Added cost-efficiency analysis; updated recommendation with NVIDIA Titan Xp</li><li>2017-03-19: Cleaned up blog post; added GTX 1080 Ti</li><li>2016-07-23: Added Titan X Pascal and GTX 1060; updated recommendations</li><li>2016-06-25: Reworked multi-GPU section; removed simple neural network memory section as no longer relevant; expanded convolutional memory section; truncated AWS section due to not being efficient anymore; added my opinion about the Xeon Phi; added updates for the GTX 1000 series</li><li>2015-08-20: Added section for AWS GPU instances; added GTX 980 Ti to the comparison relation</li><li>2015-04-22: GTX 580 no longer recommended; added performance relationships between cards</li><li>2015-03-16: Updated GPU recommendations: GTX 970 and GTX 580</li><li>2015-02-23: Updated GPU recommendations and memory calculations</li><li>2014-09-28: Added emphasis for memory requirement of CNNs</li></ul>\n\n\n\n<h2 class=\"eplus-qkgeNA\">Acknowledgments</h2>\n\n\n\n<p class=\"eplus-FAO2nS\">I want to thank Agrin Hilmkil, Ari Holtzman, Gabriel Ilharco, Nam Pho for their excellent feedback on the current version of this blog post.</p>\n\n\n\n<p class=\"eplus-kKOsc0\">For past updates of this blog post, I want to thank Mat Kelcey for helping me to debug and test custom code for the GTX 970; I want to thank Sander Dieleman for making me aware of the shortcomings of my GPU memory advice for convolutional nets; I want to thank Hannes Bretschneider for pointing out software dependency problems for the GTX 580; and I want to thank Oliver Griesel for pointing out notebook solutions for AWS instances. I want to thank Brad Nemire for providing me with an RTX Titan for benchmarking purposes.</p>\n</div></div>\n<p>The post <a rel=\"nofollow\" href=\"https://timdettmers.com/2020/09/07/which-gpu-for-deep-learning/\">Which GPU(s) to Get for Deep Learning: My Experience and Advice for Using GPUs in Deep Learning</a> appeared first on <a rel=\"nofollow\" href=\"https://timdettmers.com\">Tim Dettmers</a>.</p>\n",
  "wfw:commentRss": "https://timdettmers.com/2020/09/07/which-gpu-for-deep-learning/feed/",
  "slash:comments": 1659,
  "post-id": 6
}