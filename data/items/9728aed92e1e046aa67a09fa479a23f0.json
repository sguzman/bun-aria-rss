{
  "title": "Step-by-step guide to contributing on GitHub",
  "description": "Learn the exact process I use when contributing to an open source project on GitHub. Follow this detailed visual guide to make your first contribution TODAY!",
  "link": "https://www.dataschool.io/how-to-contribute-on-github/",
  "guid": "5ed902784f60300039412236",
  "category": [
    "git",
    "tutorial"
  ],
  "dc:creator": "Kevin Markham",
  "pubDate": "Thu, 11 Jun 2020 15:48:10 GMT",
  "media:content": "",
  "content:encoded": "<!--kg-card-begin: markdown--><img src=\"https://www.dataschool.io/content/images/2021/02/diagram-02.jpg\" alt=\"Step-by-step guide to contributing on GitHub\"><p>Have you thought about <strong>contributing to an open source project</strong>, but you're too confused (or intimidated) by the process to even try? I've been there too!</p>\n<p>I wrote this step-by-step guide to show the exact process I use when contributing to a project on GitHub. If you follow this guide exactly, <strong>you can make your first open source contribution TODAY!</strong></p>\n<h2 id=\"whycontributetoopensource\">Why contribute to open source?</h2>\n<p>There are many great reasons to contribute to open source projects:</p>\n<ul>\n<li>It builds your resume by demonstrating that you can collaborate with others on code.</li>\n<li>It gives you practice with Git and GitHub, which is a valuable data science skill.</li>\n<li>It helps you to build relationships in the open source community.</li>\n<li>It feels good to give back to a project that you use!</li>\n</ul>\n<p>In the example below, I'm going to contribute to <strong>Python's scikit-learn library</strong>. I've been teaching <a href=\"https://courses.dataschool.io/introduction-to-machine-learning-with-scikit-learn\">Machine Learning with scikit-learn</a> for many years, so I'm more than happy to give back!</p>\n<h2 id=\"gettingstarted\">Getting started</h2>\n<p>First, you need to <strong>choose a project to contribute to</strong>. I suggest you start with a library you currently use, because you will already understand the purpose of the library and you will be invested in making it better.</p>\n<p>Second, you need to <strong>choose how to contribute</strong>. I suggest contributing to the project documentation, since it doesn't require writing any code. Start by finding a typo or a broken link to fix. Since this should be a simple fix, you will be able to focus on learning the contribution workflow.</p>\n<p>Once you've chosen what to fix, you can begin the step-by-step process below:</p>\n<ul>\n<li><strong>Steps 1 through 6</strong> are setup steps, meaning you only have to do them once for each GitHub project.</li>\n<li><strong>Steps 7 through 19</strong> should be repeated for each contribution to that project.</li>\n</ul>\n<p>These resources might be helpful to you as you work through the steps:</p>\n<ul>\n<li>If you're <strong>new to Git</strong>, watch my <a href=\"https://www.dataschool.io/git-and-github-videos-for-beginners/\">36-minute video series</a> to learn the basic Git commands and terminology.</li>\n<li>If you just need a <strong>quick refresher on Git</strong>, scan through my <a href=\"https://www.dataschool.io/git-quick-reference-for-beginners/\">Git quick reference guide</a>.</li>\n</ul>\n<h2 id=\"ustep1usignintogithub\"><u>Step 1</u>: Sign into GitHub</h2>\n<p>Sign into your GitHub account, or <a href=\"https://github.com/join\">create a free GitHub account</a> if you don't have one.</p>\n<h2 id=\"ustep2uforktheprojectrepository\"><u>Step 2</u>: Fork the project repository</h2>\n<p>Find the project's repository on GitHub, and then \"fork\" it by clicking the <strong>Fork</strong> button in the upper right corner:</p>\n<div align=\"center\">\n<p><img src=\"https://www.dataschool.io/content/images/2020/06/github-02a.png\" alt=\"Step-by-step guide to contributing on GitHub\" loading=\"lazy\"></p>\n</div>\n<p>This creates a copy of the project repository in your GitHub account. In the upper left corner, you will see that you are now looking at a repository in your account:</p>\n<div align=\"center\">\n<p><img src=\"https://www.dataschool.io/content/images/2020/06/github-02b.png\" alt=\"Step-by-step guide to contributing on GitHub\" loading=\"lazy\"></p>\n</div>\n<h2 id=\"ustep3ucloneyourfork\"><u>Step 3</u>: Clone your fork</h2>\n<p>While still in your repository, click the green <strong>Clone or download</strong> button and then copy the HTTPS URL:</p>\n<div align=\"center\">\n<p><img src=\"https://www.dataschool.io/content/images/2020/06/github-03.png\" alt=\"Step-by-step guide to contributing on GitHub\" loading=\"lazy\"></p>\n</div>\n<p>Using Git on your local machine, clone your fork using the URL you just copied: <code>git clone URL_OF_FORK</code>.</p>\n<p>For example, I used <code>git clone https://github.com/justmarkham/scikit-learn.git</code>.</p>\n<p>Cloning copies the repository files (and commit history) from GitHub to your local machine. The repository will be downloaded into a subdirectory of your working directory, and the subdirectory will have the same name as the repository.</p>\n<p>(If you run into problems during this step, read the <a href=\"https://docs.github.com/en/get-started/quickstart/set-up-git\">Set up Git</a> page from GitHub's documentation.)</p>\n<h2 id=\"ustep4unavigatetoyourlocalrepository\"><u>Step 4</u>: Navigate to your local repository</h2>\n<p>Since the clone was downloaded into a subdirectory of your working directory, you can navigate to it using: <code>cd NAME_OF_REPOSITORY</code>.</p>\n<p>For example, I used <code>cd scikit-learn</code>.</p>\n<h2 id=\"ustep5ucheckthatyourforkistheoriginremote\"><u>Step 5</u>: Check that your fork is the \"origin\" remote</h2>\n<p>You are going to be synchronizing your local repository with both the project repository (on GitHub) and your fork (also on GitHub). The URLs that point to these repositories are called \"remotes\". More specifically, the project repository is called the \"upstream\" remote, and your fork is called the \"origin\" remote.</p>\n<p>When you cloned your fork, that should have automatically set your fork as the \"origin\" remote. Use <code>git remote -v</code> to show your current remotes. You should see the URL of your fork (which you copied in step 3) next to the word \"origin\".</p>\n<p>If you don't see an \"origin\" remote, you can add it using: <code>git remote add origin URL_OF_FORK</code>.</p>\n<p>(If you run into problems during this step, read the <a href=\"https://docs.github.com/en/get-started/getting-started-with-git/managing-remote-repositories\">Managing remote repositories</a> page from GitHub's documentation.)</p>\n<h2 id=\"ustep6uaddtheprojectrepositoryastheupstreamremote\"><u>Step 6</u>: Add the project repository as the \"upstream\" remote</h2>\n<p>Go to your fork on GitHub, and click the \"forked from\" link to return to the project repository:</p>\n<div align=\"center\">\n<p><img src=\"https://www.dataschool.io/content/images/2020/06/github-06a.png\" alt=\"Step-by-step guide to contributing on GitHub\" loading=\"lazy\"></p>\n</div>\n<p>While in the project repository, click the green <strong>Clone or download</strong> button and then copy the HTTPS URL:</p>\n<div align=\"center\">\n<p><img src=\"https://www.dataschool.io/content/images/2020/06/github-06b.png\" alt=\"Step-by-step guide to contributing on GitHub\" loading=\"lazy\"></p>\n</div>\n<p>Add the project repository as the \"upstream\" remote using: <code>git remote add upstream URL_OF_PROJECT</code>.</p>\n<p>For example, I used <code>git remote add upstream https://github.com/scikit-learn/scikit-learn.git</code>.</p>\n<p>Use <code>git remote -v</code> to check that you now have two remotes: an origin that points to your fork, and an upstream that points to the project repository.</p>\n<p>This diagram summarizes the entire setup process (steps 1 through 6):</p>\n<div align=\"center\">\n<p><img src=\"https://www.dataschool.io/content/images/2020/06/diagram-01.png\" alt=\"Step-by-step guide to contributing on GitHub\" loading=\"lazy\"></p>\n</div>\n<h2 id=\"ustep7upullthelatestchangesfromupstreamintoyourlocalrepository\"><u>Step 7</u>: Pull the latest changes from upstream into your local repository</h2>\n<p>Before you start making any changes to your local files, it's a good practice to first synchronize your local repository with the project repository. Use <code>git pull upstream master</code> to \"pull\" any changes from the \"master\" branch of the \"upstream\" into your local repository. (If the project repository uses \"main\" instead of \"master\" for its default branch, then you would use <code>git pull upstream main</code> instead.)</p>\n<p>If you forked and cloned the project repository just a few minutes ago, it's very unlikely there will be any changes, in which case Git will report that your local repository is \"already up to date\". But if there are any changes, they will automatically be merged into your local repository.</p>\n<h2 id=\"ustep8ucreateanewbranch\"><u>Step 8</u>: Create a new branch</h2>\n<p>Rather than making changes to the project's \"master\" branch, it's a good practice to instead create your own branch. This creates an environment for your work that is isolated from the master branch.</p>\n<p>Use <code>git checkout -b BRANCH_NAME</code> to create a new branch and then immediately switch to it. The name of the branch should briefly describe what you are working on, and should not contain any spaces.</p>\n<p>For example, I used <code>git checkout -b doc-fixes</code> because I was making some small fixes to the documentation.</p>\n<p>Use <code>git branch</code> to show your local branches. You should see your new branch as well as \"master\", and your new branch should have an asterisk next to it to indicate that it's \"checked out\" (meaning that you're working in it).</p>\n<h2 id=\"ustep9umakechangesinyourlocalrepository\"><u>Step 9</u>: Make changes in your local repository</h2>\n<p>Use a text editor or IDE to make the changes you planned to the files in your local repository. Because you checked out a branch in the previous step, any edits you make will only affect that branch.</p>\n<h2 id=\"ustep10ucommityourchanges\"><u>Step 10</u>: Commit your changes</h2>\n<p>After you make a set of changes, use <code>git add -A</code> to stage your changes and <code>git commit -m \"DESCRIPTION OF CHANGES\"</code> to commit them.</p>\n<p>For example, I used <code>git commit -m \"fix typos in set_config docstring\"</code> for one of my commits.</p>\n<p>If you are making multiple sets of changes, it's a good practice to make a commit after each set.</p>\n<h2 id=\"ustep11upushyourchangestoyourfork\"><u>Step 11</u>: Push your changes to your fork</h2>\n<p>When you are done making all of your changes, upload these changes to your fork using <code>git push origin BRANCH_NAME</code>. This \"pushes\" your changes to the \"BRANCH_NAME\" branch of the \"origin\" (which is your fork on GitHub).</p>\n<p>For example, I used <code>git push origin doc-fixes</code>.</p>\n<h2 id=\"ustep12ubeginthepullrequest\"><u>Step 12</u>: Begin the pull request</h2>\n<p>Return to your fork on GitHub, and refresh the page. You may see a highlighted area that displays your recently pushed branch:</p>\n<div align=\"center\">\n<p><img src=\"https://www.dataschool.io/content/images/2020/06/github-12-revised.png\" alt=\"Step-by-step guide to contributing on GitHub\" loading=\"lazy\"></p>\n</div>\n<p>Click the green <strong>Compare & pull request</strong> button to begin the pull request.</p>\n<p>(Alternatively, if you don't see this highlighted area, you can switch to your branch using the <strong>Branch</strong> button and then click the <strong>New pull request</strong> button.)</p>\n<h2 id=\"ustep13ucreatethepullrequest\"><u>Step 13</u>: Create the pull request</h2>\n<p>When opening a \"pull request\", you are making a \"request\" that the project repository \"pull\" changes from your fork. You will see that the project repository is listed as the \"base repository\", and your fork is listed as the \"head repository\":</p>\n<div align=\"center\">\n<p><img src=\"https://www.dataschool.io/content/images/2020/06/github-13.png\" alt=\"Step-by-step guide to contributing on GitHub\" loading=\"lazy\"></p>\n</div>\n<p>Before submitting the pull request, you first need to describe the changes you made (rather than asking the project maintainers to figure them out on their own). You should write a descriptive title for your pull request, and then include more details in the body of the pull request. If there are any related GitHub issues, make sure to mention those by number. The body can include Markdown formatting, and you can click the <strong>Preview</strong> tab to see how it will look.</p>\n<p>On the right side, you may see a link to the project's <strong>Contributing</strong> guidelines. This is primarily worth reading through if you are submitting substantial code (rather than just fixing a typo), but it may still be worth scanning through at this point.</p>\n<p>Below the pull request form, you will see a list of the commits you made in your branch, as well as the \"diffs\" for all of the files you changed.</p>\n<p>If everything looks good, click the green <strong>Create pull request</strong> button!</p>\n<p>This diagram summarizes the entire pull request process process (steps 7 through 13):</p>\n<div align=\"center\">\n<p><img src=\"https://www.dataschool.io/content/images/2020/06/diagram-02.png\" alt=\"Step-by-step guide to contributing on GitHub\" loading=\"lazy\"></p>\n</div>\n<h2 id=\"ustep14ureviewthepullrequest\"><u>Step 14</u>: Review the pull request</h2>\n<p>You have now created a pull request, which is stored in the project's repository (not in your fork of the repository). It's a good idea to read through what you wrote, as well as clicking on the <strong>Commits</strong> tab and the <strong>Files changed</strong> tab to review the contents of your pull request:</p>\n<div align=\"center\">\n<p><img src=\"https://www.dataschool.io/content/images/2020/06/github-14.png\" alt=\"Step-by-step guide to contributing on GitHub\" loading=\"lazy\"></p>\n</div>\n<p>If you realize that you left out some important details, you can click the 3 dots in the upper right corner to edit your pull request description.</p>\n<h2 id=\"ustep15uaddmorecommitstoyourpullrequest\"><u>Step 15</u>: Add more commits to your pull request</h2>\n<p>You can continue to add more commits to your pull request even after opening it! For example, the project maintainers may ask you to make some changes, or you may just think of a change that you forgot to include:</p>\n<div align=\"center\">\n<p><img src=\"https://www.dataschool.io/content/images/2020/06/github-15a.png\" alt=\"Step-by-step guide to contributing on GitHub\" loading=\"lazy\"></p>\n</div>\n<p>Start by returning to your local repository, and use <code>git branch</code> to see which branch is currently checked out. If you are currently in the master branch (rather than the branch you created), then use <code>git checkout BRANCH_NAME</code> to switch. For example, I used <code>git checkout doc-fixes</code>.</p>\n<p>Then, you should repeat steps 9 through 11: make changes, commit them, and push them to your fork.</p>\n<p>Finally, return to your open pull request on GitHub and refresh the page. You will see that your new commits have automatically been added to the pull request:</p>\n<div align=\"center\">\n<p><img src=\"https://www.dataschool.io/content/images/2020/06/github-15b.png\" alt=\"Step-by-step guide to contributing on GitHub\" loading=\"lazy\"></p>\n</div>\n<h2 id=\"ustep16udiscussthepullrequest\"><u>Step 16</u>: Discuss the pull request</h2>\n<p>If there are questions or discussion about your pull request from the project maintainers, you can add to the conversation using the comment box at the bottom of the pull request:</p>\n<div align=\"center\">\n<p><img src=\"https://www.dataschool.io/content/images/2020/06/github-16a.png\" alt=\"Step-by-step guide to contributing on GitHub\" loading=\"lazy\"></p>\n</div>\n<p>If there are inline comments about specific changes you made, you can respond to those as well:</p>\n<div align=\"center\">\n<p><img src=\"https://www.dataschool.io/content/images/2020/06/github-16b.png\" alt=\"Step-by-step guide to contributing on GitHub\" loading=\"lazy\"></p>\n</div>\n<p>Click the <strong>Resolve conversation</strong> button once you have addressed any specific requests.</p>\n<h2 id=\"ustep17udeleteyourbranchfromyourfork\"><u>Step 17</u>: Delete your branch from your fork</h2>\n<p>If the project maintainers accept your pull request (congratulations!), they will merge your proposed changes into the project's master branch and close your pull request:</p>\n<div align=\"center\">\n<p><img src=\"https://www.dataschool.io/content/images/2020/06/github-17a.png\" alt=\"Step-by-step guide to contributing on GitHub\" loading=\"lazy\"></p>\n</div>\n<p>You will be given the option to delete your branch from your fork, since it's no longer of any use:</p>\n<div align=\"center\">\n<p><img src=\"https://www.dataschool.io/content/images/2020/06/github-17b.png\" alt=\"Step-by-step guide to contributing on GitHub\" loading=\"lazy\"></p>\n</div>\n<p>Click the <strong>Delete branch</strong> button:</p>\n<div align=\"center\">\n<p><img src=\"https://www.dataschool.io/content/images/2020/06/github-17c.png\" alt=\"Step-by-step guide to contributing on GitHub\" loading=\"lazy\"></p>\n</div>\n<h2 id=\"ustep18udeleteyourbranchfromyourlocalrepository\"><u>Step 18</u>: Delete your branch from your local repository</h2>\n<p>You should also delete the branch you created from your local repository, so that you don't accidentally start working in it the next time you want to make a contribution to this project.</p>\n<p>First, switch to the master branch: <code>git checkout master</code>.</p>\n<p>Then, delete the branch you created: <code>git branch -D BRANCH_NAME</code>. For example, I used <code>git branch -D doc-fixes</code>.</p>\n<h2 id=\"ustep19usynchronizeyourforkwiththeprojectrepository\"><u>Step 19</u>: Synchronize your fork with the project repository</h2>\n<p>At this point, your fork is out of sync with the project repository's master branch.</p>\n<p>To get it back in sync, you should first use Git to pull the latest changes from \"upstream\" (the project repository) into your local repository: <code>git pull upstream master</code>.</p>\n<p>Then, push those changes from your local repository to the \"origin\" (your fork): <code>git push origin master</code>.</p>\n<p>If you return to your fork on GitHub, you will see that the master branch is \"even\" with the project repository's master branch:</p>\n<div align=\"center\">\n<p><img src=\"https://www.dataschool.io/content/images/2020/06/github-19-revised.png\" alt=\"Step-by-step guide to contributing on GitHub\" loading=\"lazy\"></p>\n</div>\n<p>This step is not strictly necessary, since you will pull changes from upstream before you make your next contribution to this project (step 7). However, this step is useful if you are going to clone your fork from another machine.</p>\n<h2 id=\"congratulations\">Congratulations!</h2>\n<p>Congratulations on making your first open source contribution! &#x1F389; Please <strong>share a link to your successful pull request</strong> in the comments section below. If you ran into any unexpected problems, I'd love to hear about it so that I can continue to improve this guide.</p>\n<h2 id=\"tipsforcontributingcode\">Tips for contributing code</h2>\n<p>If you're ready to start making code contributions (beyond just fixing typos), here are a few tips:</p>\n<ul>\n<li>Browse through a repository's <strong>open issues</strong> (especially ones labeled \"good first issue\") to see if there is an issue you might be able to solve.</li>\n<li>If you're planning to contribute code that is unrelated to an existing issue, it's a good idea to <strong>open a new issue describing your proposal</strong> before starting work on it. The project maintainers might give you feedback that will help to shape your work, which will ultimately increase the likelihood that your pull request will be accepted.</li>\n<li>Read the project's <strong>contributing guide</strong>, which will usually be in the GitHub repository or the project documentation. It will likely contain many helpful tips for how to successfully contribute to the project.</li>\n</ul>\n<p>Good luck, and let me know if you have any questions!</p>\n<script async data-uid=\"d6d0f53c0f\" src=\"https://dataschool.ck.page/d6d0f53c0f/index.js\"></script><!--kg-card-end: markdown-->"
}