{
  "id": "tag:blogger.com,1999:blog-15045980.post-6878816982896642200",
  "published": "2019-12-03T08:22:00.000-08:00",
  "updated": "2019-12-11T08:25:10.618-08:00",
  "category": [
    "",
    "",
    ""
  ],
  "title": "Testing on the Toilet: Tests Too DRY? Make Them DAMP!",
  "content": "<span style=\"font-family: &quot;times&quot; , &quot;times new roman&quot; , serif;\"><span style=\"font-style: italic; vertical-align: baseline; white-space: pre-wrap;\">This article was adapted from a </span><a href=\"http://googletesting.blogspot.com/2007/01/introducing-testing-on-toilet.html\"><span style=\"color: #1155cc; font-style: italic; vertical-align: baseline; white-space: pre-wrap;\">Google Testing on the Toilet</span></a><span style=\"font-style: italic; vertical-align: baseline; white-space: pre-wrap;\"> (TotT) episode. You can download a </span><a href=\"https://docs.google.com/document/d/1mqIk9nrlySviWOP3yZfRpj6HQivXHYzeiI0bi4QdmBk/edit?usp=sharing\" rel=\"nofollow\"><span style=\"color: #1155cc; font-style: italic; vertical-align: baseline; white-space: pre-wrap;\">printer-friendly version</span></a><span style=\"font-style: italic; vertical-align: baseline; white-space: pre-wrap;\"> of this TotT episode and post it in your office.</span></span><br /><span style=\"font-family: &quot;times&quot; , &quot;times new roman&quot; , serif; font-style: italic; vertical-align: baseline; white-space: pre-wrap;\"><br /></span><span style=\"font-style: italic; vertical-align: baseline; white-space: pre-wrap;\"><span style=\"font-family: &quot;times&quot; , &quot;times new roman&quot; , serif; font-style: normal;\">By Derek Snyder and Erik Kuefler</span></span><br /><span style=\"font-family: &quot;times&quot; , &quot;times new roman&quot; , serif; font-style: italic; vertical-align: baseline; white-space: pre-wrap;\"><span style=\"font-style: normal;\"><br /></span></span><span style=\"vertical-align: baseline;\"><span style=\"font-family: &quot;times&quot; , &quot;times new roman&quot; , serif; white-space: pre-wrap;\"><span style=\"color: purple; font-weight: bold;\">The test below follows the <a href=\"https://en.wikipedia.org/wiki/Don%27t_repeat_yourself\">DRY principle</a> (“Don’t Repeat Yourself”)</span>, a best practice that encourages code reuse rather than duplication, e.g., by extracting helper methods or by using loops. But is it a well-written test?</span></span><br /><div style=\"overflow-x: auto;\"><table class=\"my-bordered-table\" style=\"width: 613px;\"><tbody><tr><td style=\"background-color: #f4cccc; vertical-align: top; width: 607px;\"><pre style=\"background-color: #f4cccc; border: 0px; color: black; margin: 0px; padding-bottom: 0px; padding-left: 0px; padding-top: 0px;\"><span style=\"font-family: &quot;consolas&quot; , &quot;courier new&quot; , &quot;courier&quot; , monospace;\">def setUp(self):<br />  self.users = [User('alice'), User('bob')]  # This field can be reused across tests.<br />  self.forum = Forum()<br /><br />def <span style=\"font-weight: bold;\">testCanRegisterMultipleUsers</span>(self):<br />  self._RegisterAllUsers()<br />  for user in self.users:  # Use a for-loop to verify that all users are registered.<br />    self.assertTrue(self.forum.HasRegisteredUser(user))<br /><br />def _RegisterAllUsers(self):  # This method can be reused across tests.<br />  for user in self.users:<br />    self.forum.Register(user)<br /></span></pre></td></tr></tbody></table></div><br /><span style=\"font-family: &quot;times&quot; , &quot;times new roman&quot; , serif;\">While the test body above is concise, the reader needs to do some mental computation to understand it, e.g., by following the flow of </span><span style=\"font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">self.users</span><span style=\"font-family: &quot;times&quot; , &quot;times new roman&quot; , serif;\"> from </span><span style=\"font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">setUp()</span><span style=\"font-family: &quot;times&quot; , &quot;times new roman&quot; , serif;\"> through </span><span style=\"font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">_RegisterAllUsers()</span><span style=\"font-family: &quot;times&quot; , &quot;times new roman&quot; , serif;\">. <span style=\"color: purple; font-weight: bold;\">Since tests don't have tests, it should be easy for humans to manually inspect them for correctness</span>, even at the expense of greater code duplication. This means that the DRY principle often isn’t a good fit for unit tests, even though it is a best practice for production code.</span><br /><span style=\"font-family: &quot;times&quot; , &quot;times new roman&quot; , serif;\"><br /></span><span style=\"font-family: &quot;times&quot; , &quot;times new roman&quot; , serif;\"><span style=\"color: purple; font-weight: bold;\">In tests we can use the <a href=\"https://stackoverflow.com/questions/6453235/what-does-damp-not-dry-mean-when-talking-about-unit-tests\">DAMP principle</a> (“Descriptive and Meaningful Phrases”), which emphasizes <i>readability over uniqueness</i></span></span>. Applying this principle can introduce code redundancy (e.g., by repeating similar code), but it makes tests more obviously correct. Let’s add some DAMP-ness to the above test:<br /><br /><div style=\"overflow-x: auto;\"><table class=\"my-bordered-table\" style=\"width: 613px;\"><tbody><tr><td style=\"background-color: #d9ead3; vertical-align: top; width: 607px;\"><pre style=\"background-color: #d9ead3; border: 0px; color: black; margin: 0px; padding-bottom: 0px; padding-left: 0px; padding-top: 0px;\"><span style=\"font-family: &quot;consolas&quot; , &quot;courier new&quot; , &quot;courier&quot; , monospace;\">def setUp(self):<br />  self.forum = Forum()<br /><br />def <span style=\"font-weight: bold;\">testCanRegisterMultipleUsers</span>(self):<br />  <span style=\"color: #1155cc; font-style: italic;\"># Create the users in the test instead of relying on users created in setUp.</span><br />  user1 = User('alice')<br />  user2 = User('bob')<br /><br />  <span style=\"color: #1155cc; font-style: italic;\"># Register the users in the test instead of in a helper method, and don't use a for-loop.</span><br />  self.forum.Register(user1)<br />  self.forum.Register(user2)<br /><br />  <span style=\"color: #1155cc; font-style: italic;\"># Assert each user individually instead of using a for-loop.</span><br />  self.assertTrue(self.forum.HasRegisteredUser(user1))<br />  self.assertTrue(self.forum.HasRegisteredUser(user2))<br /></span></pre></td></tr></tbody></table></div><br /><span style=\"font-family: &quot;times&quot; , &quot;times new roman&quot; , serif;\">Note that <span style=\"color: purple; font-weight: bold;\">the DRY principle is still relevant in tests</span>; for example, using a helper function for creating value objects can increase clarity by removing redundant details from the test body. Ideally, test code should be both readable and unique, but sometimes there’s a trade-off. <span style=\"color: purple; font-weight: bold;\">When writing unit tests and faced with a choice between the DRY and DAMP principles, lean more heavily toward DAMP</span>.</span><br /><br />",
  "link": [
    "",
    "",
    "",
    "",
    ""
  ],
  "author": {
    "name": "Google Testing Bloggers",
    "uri": "http://www.blogger.com/profile/03153388556673050910",
    "email": "noreply@blogger.com",
    "gd:image": ""
  },
  "thr:total": 11
}