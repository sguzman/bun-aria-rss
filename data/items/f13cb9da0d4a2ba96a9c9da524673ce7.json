{
  "id": "tag:blogger.com,1999:blog-1176949257541686127.post-2389034929342282972",
  "published": "2022-09-08T12:00:00.000-04:00",
  "updated": "2022-09-08T12:00:15.540-04:00",
  "title": "Fuzzing beyond memory corruption: Finding broader classes of vulnerabilities automatically",
  "content": "<span class=\"byline-author\">Posted by Jonathan Metzman, Dongge Liu and Oliver Chang, Google Open Source Security Team</span> <p>Recently, <a href=\"https://google.github.io/oss-fuzz/\">OSS-Fuzz</a>—our community fuzzing service that regularly checks <a href=\"https://github.com/google/oss-fuzz/tree/5675ec6958b74ebba5612b72dfe919c59e92d1df/projects\">700 critical open source projects</a> for bugs—detected a <a href=\"https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=49053\">serious vulnerability</a> (CVE-2022-3008): a bug in the <code><a href=\"https://github.com/syoyo/tinygltf\">TinyGLTF</a></code> project that could have allowed attackers to execute malicious code in projects using <code>TinyGLTF</code> as a dependency.   <p>The bug was soon <a href=\"https://github.com/syoyo/tinygltf/commit/52ff00a38447f06a17eab1caa2cf0730a119c751\">patched</a>, but the wider significance remains: OSS-Fuzz caught a trivially exploitable command injection vulnerability. This discovery shows that <a href=\"https://github.com/google/fuzzing/blob/master/docs/why-fuzz.md#introduction\">fuzzing</a>, a type of testing once primarily known for detecting memory corruption vulnerabilities in C/C++ code, has considerable untapped potential to find broader classes of vulnerabilities. Though the TinyGLTF library is written in C++, this vulnerability is easily applicable to all programming languages and confirms that fuzzing is a beneficial and necessary testing method for all software projects. </p><h2>Fuzzing as a public service</h2>  <p>OSS-Fuzz was launched in 2016 in response to the <a href=\"https://heartbleed.com/\">Heartbleed</a> vulnerability, discovered in one of the most popular open source projects for encrypting web traffic. The vulnerability had the potential to affect almost every internet user, yet was caused by a relatively simple memory buffer overflow bug that could have been detected by fuzzing—that is, by running the code on randomized inputs to intentionally cause unexpected behaviors or crashes that signal bugs. At the time, though, fuzzing was not widely used and was cumbersome for developers, requiring extensive manual effort.  </p><p>Google created OSS-Fuzz to fill this gap: it's a free service that runs fuzzers for open source projects and privately alerts developers to the bugs detected. Since its launch, OSS-Fuzz has become a critical service for the open source community, helping get <a href=\"https://bugs.chromium.org/p/oss-fuzz/issues/list?q=type%3Dbug-security%20status%3Averified%2Cfixed%20label%3Aclusterfuzz&can=1\">more than 8,000 security vulnerabilities</a> and more than <a href=\"https://bugs.chromium.org/p/oss-fuzz/issues/list?q=type%3Dbug%20status%3Averified%2Cfixed%20label%3Aclusterfuzz&can=1\">26,000 other bugs</a> in open source projects fixed. With time, OSS-Fuzz has grown beyond C/C++ to detect problems in memory-safe languages such as Go, Rust, and Python. </p><p>Google Cloud’s <a href=\"https://cloud.google.com/blog/products/identity-security/introducing-assured-open-source-software-service\">Assured Open Source Software Service</a>, which provides organizations a secure and curated set of open source dependencies, relies on OSS-Fuzz as a foundational layer of security scanning. OSS-Fuzz is also the basis for free fuzzing tools for the community, such as <a href=\"https://google.github.io/clusterfuzzlite/\">ClusterFuzzLite</a>, which gives developers a streamlined way to fuzz both open source and proprietary code before committing changes to their projects. All of these efforts are part of Google’s <a href=\"https://blog.google/technology/safety-security/why-were-committing-10-billion-to-advance-cybersecurity/\">$10B commitment to improving cybersecurity</a> and continued work to <a href=\"https://blog.google/technology/safety-security/shared-success-in-building-a-safer-open-source-community/\">make open source software more secure</a> for everyone.  </p><h2>New classes of vulnerabilities </h2>  <p>Last December, OSS-Fuzz <a href=\"https://security.googleblog.com/2021/12/improving-oss-fuzz-and-jazzer-to-catch.html\">announced an effort to improve our bug detectors</a> (known as <em>sanitizers</em>) to find more classes of vulnerabilities, by <a href=\"https://security.googleblog.com/2021/12/improving-oss-fuzz-and-jazzer-to-catch.html\">first showing that fuzzing can find Log4Shell</a>. The <code>TinyGLTF</code> bug was found using one of those new sanitizers, <code><a href=\"https://github.com/google/oss-fuzz/tree/5675ec6958b74ebba5612b72dfe919c59e92d1df/infra/experimental/SystemSan\">SystemSan</a></code>, which was developed specifically to find bugs that can be exploited to execute arbitrary commands in any programming language. This <a href=\"https://github.com/syoyo/tinygltf/issues/368\">vulnerability</a> shows that it was possible to inject backticks into the input glTF file format and allow commands to be executed during parsing.      <pre class=\"prettyprint\"># Craft an input that exploits the vulnerability to insert a string to poc<br />$ echo '{\"images\":[{\"uri\":\"a`echo iamhere > poc`\"}], \"asset\":{\"version\":\"\"}}' > payload.gltf<br /># Execute the vulnerable program with the input<br />$ ./loader_exampler payload.gltf<br /># The string was inserted to poc, proving the vulnerability was successfully exploited<br />$ cat poc<br />iamhere</pre>  <p><em>A proof of exploit in <code>TinyGLTF</code>, extended from the input found by OSS-Fuzz with <code>SystemSan</code>. The culprit was the use of the <a href=\"https://github.com/syoyo/tinygltf/blob/0fa56e239c77cc864dc248842e8887d985cf8e3f/tiny_gltf.h#L2640\">“wordexp”</a> function to expand file paths. </em> <p><code>SystemSan</code> uses <code><a href=\"https://man7.org/linux/man-pages/man2/ptrace.2.html#:~:text=The%20ptrace()%20system%20call,debugging%20and%20system%20call%20tracing.\">ptrace</a></code>, and is built in a language-independent and highly extensible way to allow new bug detectors to be added easily. For example, we’ve built <a href=\"https://github.com/google/oss-fuzz/tree/5675ec6958b74ebba5612b72dfe919c59e92d1df/infra/experimental/SystemSan/PoEs\">proofs of concept</a> to detect issues in JavaScript and Python libraries, and an external contributor recently added support for detecting <a href=\"https://github.com/google/oss-fuzz/pull/8009\">arbitrary file access</a> (e.g. through <a href=\"https://owasp.org/www-community/attacks/Path_Traversal\">path traversal</a>).  <p>OSS-Fuzz has also continued to work with <a href=\"https://www.code-intelligence.com/\">Code Intelligence</a> to improve Java fuzzing by integrating over 50 additional Java projects into OSS-Fuzz and developing <a href=\"https://github.com/CodeIntelligenceTesting/jazzer/tree/main/sanitizers/src/main/java/com/code_intelligence/jazzer/sanitizers\">sanitizers for detecting Java-specific issues</a> such as deserialization and LDAP injection vulnerabilities. A number of these types of vulnerabilities have been found already and are pending disclosure.  </p><h2>Rewards for getting involved</h2>  <p>Want to get involved with making fuzzing more widely used and get rewarded? There are two ways:  </p><ol> <li>Integrate a new sanitizer into OSS-Fuzz (or fuzzing engines like <a href=\"https://github.com/CodeIntelligenceTesting/jazzer/tree/main/sanitizers/src/main/java/com/code_intelligence/jazzer/sanitizers\">Jazzer</a>) to detect more classes of bugs. We will pay <strong>$11,337</strong> for integrations that find at least 2 new vulnerabilities in OSS-Fuzz projects.  <li>Integrate a new project into OSS-Fuzz. We currently support projects written in C/C++, Rust, Go, Swift, Python, and JVM-based languages; Javascript is coming soon. This is part of our existing OSS-Fuzz integration rewards.  </li></ol><p>To apply for these rewards, see the <a href=\"https://google.github.io/oss-fuzz/getting-started/integration-rewards/\">OSS-Fuzz integration reward program</a>.  </p><p>Fuzzing still has a lot of unexplored potential in discovering more classes of vulnerabilities. Through our combined efforts we hope to take this effective testing method to the next level and enable more of the open source community to enjoy the benefits of fuzzing.  </p>",
  "link": [
    "",
    "",
    "",
    "",
    ""
  ],
  "author": {
    "name": "Google",
    "uri": "http://www.blogger.com/profile/11822708545141062574",
    "email": "noreply@blogger.com",
    "gd:image": ""
  },
  "thr:total": 0
}