{
  "title": "Writing Python Extensions In Rust Using PyO3",
  "link": "",
  "updated": "2018-06-21T00:00:00-07:00",
  "id": "http://www.benfrederickson.com/writing-python-extensions-in-rust-using-pyo3/",
  "content": "\n        \n            <img src=\"http://www.benfrederickson.com/images/rust_python_pyo3/pyo3.png\" width=\"100%\" style=\"max-width:500px\">\n        \n        <p>Iâ€™ve been writing some code in Rust recently, and I thought it would be cool if I could take some\nof this Rust code and provide it as a native extension that I can call from Python.  It turns out\nthere are some amazing tools like <a href=\"https://github.com/PyO3/pyo3\">PyO3</a> that make it easy to write fully featured\nPython extensions in Rust, with considerably less effort than writing a CPython extension manually.</p>\n\n<p>To test out PyO3 I wrote a small Python extension in Rust, and I thought I would share some of the\ntips and tricks I encountered in getting this going. This post aims to serve as a quick tutorial\nshowing how to write extensions in Rust, talking about why you might want to use something more\npowerful than just exposing a C library called using CFFI, and how PyO3 lets you write Python aware extensions in Rust.\nThis post also goes through how to integrate your Rust code with setuptools, and automatically building Python wheels for your\nRust extension using <a href=\"https://github.com/joerick/cibuildwheel\">cibuildwheel</a>.</p>\n\n<p>The end result is a Python extension that can be distributed through PyPI without even usually requiring a\nrust compiler on the machine it will be installed on!</p>\n\n<p class='more'><a href='http://www.benfrederickson.com/writing-python-extensions-in-rust-using-pyo3/'>Read more ...</a></p>\n     "
}