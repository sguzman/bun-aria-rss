{
  "title": "e027: Trust Me; I Promise!",
  "link": "https://newrustacean.com/show_notes/e027/",
  "description": "<p>An intro to <code>unsafe</code> Rust and Rust’s idea of safety.</p>\n<h2 id=\"show-notes\">Show Notes</h2>\n<h3 id=\"errata\">Errata</h3>\n<p>A quick correction: on the show I said that a trait needed to be unsafe when it had an <code>unsafe fn</code> method. This isn’t correct: safe traits can have unsafe methods, and unsafe traits can exist without any methods at all (as implied by my reference to <code>Send</code> and <code>Sync</code>). You can see this in practice in the following example, which compiles just fine!</p>\n<pre><code>trait ASafeTrait {\n    unsafe fn unsafe_method() {}\n}\n\nunsafe AnUnsafeTrait {}</code></pre>\n<p>The idea of an <code>unsafe</code> trait is that it has some conditions which you must uphold to safely implement it – again, just as with <code>Send</code> and <code>Sync</code>. In the case of most traits, this will be because some trait method has invariants it needs to hold else it would cause undefined behavior. For another example of this, see the (unstable as of the time of recording) trait <a href=\"https://doc.rust-lang.org/nightly/std/iter/trait.TrustedLen.html\"><code>std::iter::TrustedLen</code></a>.</p>\n<p>Thanks to Rust language team member <a href=\"https://github.com/centril\">@centril</a> for noting this to me after listening when I was recording the show live!</p>\n<h3 id=\"links\">Links</h3>\n<ul>\n<li><a href=\"https://doc.rust-lang.org/book/2018-edition/ch19-01-unsafe-rust.html\"><em>The Rust Programming Language</em>, Chapter 19: Unsafe</a></li>\n<li><a href=\"https://doc.rust-lang.org/nomicon/README.html\">The Nomicon</a></li>\n<li><a href=\"http://nercury.github.io/rust/opengl/tutorial/2018/02/08/opengl-in-rust-from-scratch-00-setup.html\">“Rust and OpenGL from Scratch”, by Nerijus Arlauskas</a></li>\n</ul>\n<h3 id=\"examples\">Examples</h3>\n<h4 id=\"borrow-checked-code-in-unsafe\">Borrow-checked code in <code>unsafe</code></h4>\n<pre><code>let mut f = String::from(\"foo\");\n\nunsafe {\n    let borrowed = &mut f;\n    let borrow_again = &f;\n\n    println!(\"{}\", borrowed);\n\n    // This would be unsafe and throw an error:\n    // println!(\"{}\", borrow_again);\n}</code></pre>\n<p><a href=\"https://play.rust-lang.org/?version=beta&mode=release&edition=2018&gist=38d1089cdc3a4148609e9e3bbbfd002c\">(See it in a playground)</a></p>\n<h5 id=\"safely-mutating-a-raw-pointer\">Safely mutating a raw pointer</h5>\n<pre><code>let f = Box::new(12);\nlet mut g = Box::into_raw(f);\ng = &mut (g + 10);</code></pre>\n<p><a href=\"https://play.rust-lang.org/?version=stable&mode=debug&edition=2015&gist=3a7a9facd0f67d4a590afc3a3ecef95b\">(See it in a playground)</a></p>\n<h2 id=\"sponsors\">Sponsors</h2>\n<p>Thanks to Parity for sponsoring the show again. Go check out their <a href=\"https://paritytech.io/jobs/\"><strong><em>Rust jobs</em></strong></a>!</p>\n<h3 id=\"patreon-sponsors\">Patreon Sponsors</h3>\n<ul>\n<li>Adam Green</li>\n<li>Aleksey Pirogov</li>\n<li>Alexander Payne</li>\n<li>Alexander Kryvomaz</li>\n<li>Andrew Thompson</li>\n<li><a href=\"https://github.com/adeschamps\">Anthony Deschamps</a></li>\n<li>Anthony Scotti</li>\n<li><a href=\"https://github.com/behnam\">Behnam Esfahbod</a></li>\n<li>Benjamin Wasty</li>\n<li>Brandon ‘Spanky’ Mills</li>\n<li>Brian Casiello</li>\n<li>Brian Manning</li>\n<li><a href=\"https://skife.org/\">Brian McCallister</a></li>\n<li><a href=\"http://www.stitthappens.com/\">Bryan Stitt</a></li>\n<li>Bryce Johnston</li>\n<li>Caryn Finkelman</li>\n<li>Cass Costello</li>\n<li>Chap Lovejoy</li>\n<li><a href=\"https://charlieegan3.com\">Charlie Egan</a></li>\n<li>Chip</li>\n<li><a href=\"http://red-oxide.org/\">Chris Palmer</a></li>\n<li>Daniel</li>\n<li>Dan Abrams</li>\n<li>Daniel Bross</li>\n<li><a href=\"https://twitter.com/daniel_collin\">Daniel Collin</a></li>\n<li><a href=\"https://github.com/gisleburt\">Daniel Mason</a></li>\n<li>David Hewson</li>\n<li><a href=\"https://twitter.com/derekmorr\">Derek Morr</a></li>\n<li>Doug Reeves</li>\n<li>Eugene Bulkin</li>\n<li>Fábio Botelho</li>\n<li><a href=\"https://twitter.com/gaveen\">Gaveen Prabhasara</a></li>\n<li><a href=\"https://wihlidal.com/\">Graham Wihlidal</a></li>\n<li><a href=\"https://hsivonen.fi/\">Henri Sivonen</a></li>\n<li><a href=\"https://www.ianmjones.com/\">Ian Jones</a></li>\n<li>“Jake”“ferris”\" Taylor\"</li>\n<li>Jako Danar</li>\n<li>James Cooper</li>\n<li>James Hagans II</li>\n<li>Jerome Froelich</li>\n<li></li>\n<li><a href=\"http://www.cindur.com/\">John Rudnick</a></li>\n<li>Jon</li>\n<li><a href=\"https://www.coffeeandcode.com/\">Jonathan Knapp</a></li>\n<li>Jonathan Turner</li>\n<li>Joseph Hain</li>\n<li>Joseph Marhee</li>\n<li>Justin Ossevoort</li>\n<li>Kai Yao</li>\n<li>Keith Gray</li>\n<li>Kilian Rault</li>\n<li>Lee Jenkins</li>\n<li>Luca Schmid</li>\n<li><a href=\"http://luizirber.org/\">Luiz Irber</a></li>\n<li>Lukas Eller</li>\n<li><a href=\"https://github.com/epsilonhalbe\">Martin Heuschober</a></li>\n<li>Masashi Fujita</li>\n<li>Matt Rudder</li>\n<li>Matthew Brenner</li>\n<li>Matthias Ruszala</li>\n<li><a href=\"https://twitter.com/maxjacobson\">Max Jacobson</a></li>\n<li>Max R.R. Collada</li>\n<li><a href=\"https://github.com/messense\">Messense Lv</a></li>\n<li>Micael Bergeron</li>\n<li><a href=\"https://www.linkedin.com/in/michaelmcdonnell/\">Michael Mc Donnell</a></li>\n<li>Michael Sanders</li>\n<li><a href=\"http://influential.co/\">Nathan Sculli</a></li>\n<li><a href=\"http://github.com/ncoish\">Nick Coish</a></li>\n<li>Nick Gideo</li>\n<li><a href=\"https://github.com/nastevens\">Nick Stevens</a></li>\n<li><a href=\"https://github.com/n-pochet\">Nicolas Pochet</a></li>\n<li>Olaf Leidinger<br />\n</li>\n<li>Oliver Uvman</li>\n<li><a href=\"http://oluseyi.info/\">Oluseyi Sonaiya</a></li>\n<li>Ovidiu Curcan</li>\n<li><a href=\"https://pascalhertleif.de/\">Pascal</a></li>\n<li><a href=\"https://twitter.com/patrickod\">Patrick O’Doherty</a></li>\n<li>Paul Naranja</li>\n<li>Paul Osborne</li>\n<li>Peter Scholtens</li>\n<li>Peter Tillemans</li>\n<li>Ralph Giles</li>\n<li><a href=\"http://www.inosion.com\">Ramon Buckland</a></li>\n<li>Randy MacLeod</li>\n<li>Raph Levien</li>\n<li>Richard Dallaway</li>\n<li>Rob Tsuk</li>\n<li>Robert Chrzanowski</li>\n<li><a href=\"http://notryanb.github.io/\">Ryan Blecher</a></li>\n<li><a href=\"https://github.com/osialr\">Ryan Osial</a></li>\n<li>Scott Moeller</li>\n<li><a href=\"https://www.twitter.com/sebasmagri\">Sebastián Ramírez Magrí</a></li>\n<li><a href=\"https://www.simonhdickson.com/\">Simon Dickson</a></li>\n<li>Simon G</li>\n<li><a href=\"https://www.ntnu.edu/employees/steffen.sunde\">Steffen Loen Sunde</a></li>\n<li>Steve Jenson</li>\n<li>Steven Knight</li>\n<li>Steven Murawski</li>\n<li><a href=\"http://stuarth.github.io/\">Stuart Hinson</a></li>\n<li>Tim Brooks</li>\n<li>Tim Süberkrüb</li>\n<li>Tom Prince</li>\n<li>Toolmaker’s Guild</li>\n<li>Ty Overby</li>\n<li>Tyler Harper</li>\n<li>Victor Kruger</li>\n<li>Will Greenberg</li>\n<li><a href=\"http://willroe.me\">William Roe</a></li>\n<li>Zak van der Merwe</li>\n<li>Zachary Snyder</li>\n<li>Zaki</li>\n</ul>\n<p>(Thanks to the couple people donating who opted out of the reward tier, as well. You know who you are!)</p>\n<h3 id=\"become-a-sponsor\">Become a sponsor</h3>\n<ul>\n<li><a href=\"https://www.patreon.com/newrustacean\" rel=\"payment\">Patreon</a></li>\n<li><a href=\"https://venmo.com/chriskrycho\">Venmo</a></li>\n<li><a href=\"https://www.dwolla.com/hub/chriskrycho\">Dwolla</a></li>\n<li><a href=\"https://cash.me/$chriskrycho\">Cash.me</a></li>\n<li><a href=\"https://flattr.com/profile/chriskrycho\">Flattr</a></li>\n<li><a href=\"https://paypal.me/chriskrycho\">PayPal.me</a></li>\n</ul>\n<h2 id=\"contact\">Contact</h2>\n<ul>\n<li>New Rustacean: + Twitter: <a href=\"https://www.twitter.com/newrustacean\">@newrustacean</a> + Email: <a href=\"mailto:hello@newrustacean.com\">hello@newrustacean.com</a></li>\n<li>Chris Krycho + GitHub: <a href=\"https://github.com/chriskrycho\">chriskrycho</a> + Twitter: <a href=\"https://www.twitter.com/chriskrycho\">@chriskrycho</a></li>\n</ul>\n",
  "pubDate": "Fri, 30 Nov 2018 21:46:59 -0700",
  "enclosure": "",
  "guid": "F05FA5EA-F0E5-43A1-A05A-71061CAC6F1D",
  "itunes:subtitle": "An intro to `unsafe` Rust and Rust's idea of safety.",
  "itunes:summary": "An intro to `unsafe` Rust and Rust's idea of safety.",
  "itunes:duration": "21:27",
  "itunes:episodeType": "full"
}