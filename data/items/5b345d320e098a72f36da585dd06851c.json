{
  "title": "Towards Out-of-core ND-Arrays -- Dask + Toolz = Bag",
  "link": "",
  "updated": "2015-02-17T00:00:00+00:00",
  "id": "https://mrocklin.github.io/blog/work/2015/02/17/Towards-OOC-Bag",
  "content": "<p><em>This work is supported by <a href=\"http://continuum.io\">Continuum Analytics</a>\nand the <a href=\"http://www.darpa.mil/program/XDATA\">XDATA Program</a>\nas part of the <a href=\"http://blaze.pydata.org\">Blaze Project</a></em></p>\n\n<p><strong>tl;dr</strong> We use dask to build a parallel Python list.</p>\n\n<h2 id=\"introduction\">Introduction</h2>\n\n<p>This is the seventh in a sequence of posts constructing an out-of-core nd-array\nusing NumPy, and dask.  You can view these posts here:</p>\n\n<ol>\n  <li><a href=\"http://matthewrocklin.com/blog/work/2014/12/27/Towards-OOC/\">Simple task scheduling</a>,</li>\n  <li><a href=\"http://matthewrocklin.com/blog/work/2014/12/30/Towards-OOC-Frontend/\">Frontend usability</a></li>\n  <li><a href=\"http://matthewrocklin.com/blog/work/2015/01/06/Towards-OOC-Scheduling/\">A multi-threaded scheduler</a></li>\n  <li><a href=\"http://matthewrocklin.com/blog/work/2015/01/14/Towards-OOC-MatMul/\">Matrix Multiply Benchmark</a></li>\n  <li><a href=\"http://matthewrocklin.com/blog/work/2015/01/16/Towards-OOC-SpillToDisk/\">Spilling to disk</a></li>\n  <li><a href=\"http://matthewrocklin.com/blog/work/2015/02/13/Towards-OOC-Slicing-and-Stacking/\">Slicing and Stacking</a></li>\n</ol>\n\n<p>Today we take a break from ND-Arrays and show how task scheduling can attack\nother collections like the simple <code class=\"language-plaintext highlighter-rouge\">list</code> of Python objects.</p>\n\n<h2 id=\"unstructured-data\">Unstructured Data</h2>\n\n<p>Often before we have an <code class=\"language-plaintext highlighter-rouge\">ndarray</code> or a <code class=\"language-plaintext highlighter-rouge\">table/DataFrame</code> we have unstructured\ndata like log files.  In this case tuned subsets of the language (e.g.\n<code class=\"language-plaintext highlighter-rouge\">numpy</code>/<code class=\"language-plaintext highlighter-rouge\">pandas</code>) aren’t sufficient, we need the full Python language.</p>\n\n<p>My usual approach to the inconveniently large dump of log files is to use\nPython <a href=\"http://toolz.readthedocs.org/en/latest/streaming-analytics.html\">streaming\niterators</a>\nalong with <a href=\"http://toolz.readthedocs.org/en/latest/parallelism.html\">multiprocessing or IPython\nParallel</a> on a single\nlarge machine.  I often write/speak about this workflow when discussing\n<a href=\"http://toolz.readthedocs.org/\"><code class=\"language-plaintext highlighter-rouge\">toolz</code></a>.</p>\n\n<p>This workflow grows complex for most users when you introduce many processes.\nTo resolve this we build our normal tricks into a new <code class=\"language-plaintext highlighter-rouge\">dask.Bag</code> collection.</p>\n\n<h2 id=\"bag\">Bag</h2>\n\n<p>In the same way that <code class=\"language-plaintext highlighter-rouge\">dask.array</code> mimics NumPy operations (e.g. matrix\nmultiply, slicing), <code class=\"language-plaintext highlighter-rouge\">dask.bag</code> mimics functional operations like <code class=\"language-plaintext highlighter-rouge\">map</code>,\n<code class=\"language-plaintext highlighter-rouge\">filter</code>, <code class=\"language-plaintext highlighter-rouge\">reduce</code> found in the standard library as well as many of the\nstreaming functions found in <code class=\"language-plaintext highlighter-rouge\">toolz</code>.</p>\n\n<ul>\n  <li>Dask array = NumPy + threads</li>\n  <li>Dask bag = Python/Toolz + processes</li>\n</ul>\n\n<h2 id=\"example\">Example</h2>\n\n<p>Here’s the obligatory wordcount example</p>\n\n<figure class=\"highlight\">\n  <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">dask.bag</span> <span class=\"kn\">import</span> <span class=\"n\">Bag</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">Bag</span><span class=\"p\">.</span><span class=\"n\">from_filenames</span><span class=\"p\">(</span><span class=\"s\">'data/*.txt'</span><span class=\"p\">)</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">def</span> <span class=\"nf\">stem</span><span class=\"p\">(</span><span class=\"n\">word</span><span class=\"p\">):</span>\n<span class=\"p\">...</span>     <span class=\"s\">\"\"\" Stem word to primitive form \"\"\"</span>\n<span class=\"p\">...</span>     <span class=\"k\">return</span> <span class=\"n\">word</span><span class=\"p\">.</span><span class=\"n\">lower</span><span class=\"p\">().</span><span class=\"n\">rstrip</span><span class=\"p\">(</span><span class=\"s\">\",.!:;'-</span><span class=\"se\">\\\"</span><span class=\"s\">\"</span><span class=\"p\">).</span><span class=\"n\">lstrip</span><span class=\"p\">(</span><span class=\"s\">\"'</span><span class=\"se\">\\\"</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">.</span><span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">.</span><span class=\"n\">split</span><span class=\"p\">).</span><span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"n\">concat</span><span class=\"p\">).</span><span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"n\">stem</span><span class=\"p\">).</span><span class=\"n\">frequencies</span><span class=\"p\">())</span>\n<span class=\"p\">{...}</span></code></pre>\n</figure>\n\n<p>We use all of our cores and stream through memory on each core.  We use\n<code class=\"language-plaintext highlighter-rouge\">multiprocessing</code> but could get fancier with some work.</p>\n\n<h2 id=\"related-work\">Related Work</h2>\n\n<p>There are a lot of much larger much more powerful systems that have a similar\nAPI, notably <a href=\"http://spark.apache.org/\">Spark</a> and\n<a href=\"https://github.com/douban/dpark\">DPark</a>.  If you have <em>Big Data</em> and need to\nuse very many machines then you should stop reading this and go install them.</p>\n\n<p>I mostly made dask.bag because</p>\n\n<ol>\n  <li>It was very easy given the work already done on dask.array</li>\n  <li>I often only need multiprocessing + a heavy machine</li>\n  <li>I wanted something trivially pip installable that didn’t use the JVM</li>\n</ol>\n\n<p>But again, if you have <em>Big Data</em>, then this isn’t for you.</p>\n\n<h2 id=\"design\">Design</h2>\n\n<p>As before, a <code class=\"language-plaintext highlighter-rouge\">Bag</code> is just a dict holding tasks, along with a little meta data.</p>\n\n<figure class=\"highlight\">\n  <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"p\">{(</span><span class=\"s\">'x'</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">):</span> <span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">),</span>\n<span class=\"p\">...</span>      <span class=\"p\">(</span><span class=\"s\">'x'</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">):</span> <span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">),</span>\n<span class=\"p\">...</span>      <span class=\"p\">(</span><span class=\"s\">'x'</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">):</span> <span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)}</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">dask.bag</span> <span class=\"kn\">import</span> <span class=\"n\">Bag</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">Bag</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"s\">'x'</span><span class=\"p\">,</span> <span class=\"n\">npartitions</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span></code></pre>\n</figure>\n\n<p>In this way we break up one collection</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4]\n</code></pre></div></div>\n\n<p>into three independent pieces</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>[0, 1, 2, 3, 4]\n[0, 1, 2, 3, 4]\n[0, 1, 2, 3, 4]\n</code></pre></div></div>\n\n<p>When we abstractly operate on the large collection…</p>\n\n<figure class=\"highlight\">\n  <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">b2</span> <span class=\"o\">=</span> <span class=\"n\">b</span><span class=\"p\">.</span><span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">*</span> <span class=\"mi\">10</span><span class=\"p\">)</span></code></pre>\n</figure>\n\n<p>… we generate new tasks to operate on each of the components.</p>\n\n<figure class=\"highlight\">\n  <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">b2</span><span class=\"p\">.</span><span class=\"n\">dask</span>\n<span class=\"p\">{(</span><span class=\"s\">'x'</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">):</span> <span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">),</span>\n <span class=\"p\">(</span><span class=\"s\">'x'</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">):</span> <span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">),</span>\n <span class=\"p\">(</span><span class=\"s\">'x'</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">):</span> <span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)}</span>\n <span class=\"p\">(</span><span class=\"s\">'bag-1'</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">):</span> <span class=\"p\">(</span><span class=\"nb\">map</span><span class=\"p\">,</span> <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">*</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"s\">'x'</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)),</span>\n <span class=\"p\">(</span><span class=\"s\">'bag-1'</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">):</span> <span class=\"p\">(</span><span class=\"nb\">map</span><span class=\"p\">,</span> <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">*</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"s\">'x'</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)),</span>\n <span class=\"p\">(</span><span class=\"s\">'bag-1'</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">):</span> <span class=\"p\">(</span><span class=\"nb\">map</span><span class=\"p\">,</span> <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">*</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"s\">'x'</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">))}</span></code></pre>\n</figure>\n\n<p>And when we ask for concrete results (the call to <code class=\"language-plaintext highlighter-rouge\">list</code>) we spin up a\nscheduler to execute the resulting dependency graph of tasks.</p>\n\n<figure class=\"highlight\">\n  <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">b2</span><span class=\"p\">)</span>\n<span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"mi\">40</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"mi\">40</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"mi\">40</span><span class=\"p\">]</span></code></pre>\n</figure>\n\n<p>More complex operations yield more complex dasks.  Beware, dask code is pretty\nLispy.  Fortunately these dasks are internal; users don’t interact with them.</p>\n\n<figure class=\"highlight\">\n  <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">iseven</span> <span class=\"o\">=</span> <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">%</span> <span class=\"mi\">2</span> <span class=\"o\">==</span> <span class=\"mi\">0</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">b3</span> <span class=\"o\">=</span> <span class=\"n\">b</span><span class=\"p\">.</span><span class=\"nb\">filter</span><span class=\"p\">(</span><span class=\"n\">iseven</span><span class=\"p\">).</span><span class=\"n\">count</span><span class=\"p\">().</span><span class=\"n\">dask</span>\n<span class=\"p\">{</span><span class=\"s\">'bag-3'</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"nb\">sum</span><span class=\"p\">,</span> <span class=\"p\">[(</span><span class=\"s\">'bag-2'</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">'bag-2'</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">'bag-2'</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)]),</span>\n <span class=\"p\">(</span><span class=\"s\">'bag-2'</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">):</span> <span class=\"p\">(</span><span class=\"n\">count</span><span class=\"p\">,</span>\n                <span class=\"p\">(</span><span class=\"nb\">filter</span><span class=\"p\">,</span> <span class=\"n\">iseven</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">))),</span>\n <span class=\"p\">(</span><span class=\"s\">'bag-2'</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">):</span> <span class=\"p\">(</span><span class=\"n\">count</span><span class=\"p\">,</span>\n                <span class=\"p\">(</span><span class=\"nb\">filter</span><span class=\"p\">,</span> <span class=\"n\">iseven</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">))),</span>\n <span class=\"p\">(</span><span class=\"s\">'bag-2'</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">):</span> <span class=\"p\">(</span><span class=\"n\">count</span><span class=\"p\">,</span>\n                <span class=\"p\">(</span><span class=\"nb\">filter</span><span class=\"p\">,</span> <span class=\"n\">iseven</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)))}</span></code></pre>\n</figure>\n\n<p>The current interface for <code class=\"language-plaintext highlighter-rouge\">Bag</code> has the following operations:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>all             frequencies         min\nany             join                product\ncount           map                 std\nfilter          map_partitions      sum\nfold            max                 topk\nfoldby          mean                var\n</code></pre></div></div>\n\n<p>Manipulations of bags create task dependency graphs.  We eventually execute\nthese graphs in parallel.</p>\n\n<h2 id=\"execution\">Execution</h2>\n\n<p>We repurpose the threaded scheduler we used for arrays to support\n<code class=\"language-plaintext highlighter-rouge\">multiprocessing</code> to provide parallelism even on pure Python code.  We’re\ncareful to avoid unnecessary data transfer.  None of the operations listed above\nrequires significant communication.  Notably we don’t have any concept of\n<em>shuffling</em> or scatter/gather.</p>\n\n<p>We <a href=\"http://trac.mystic.cacr.caltech.edu/project/pathos/wiki/dill\">use dill</a> to\ntake care to serialize functions properly and collect/report errors, two issues\nthat <a href=\"http://matthewrocklin.com/blog/work/2013/12/05/Parallelism-and-Serialization/\">plague naive use of\n<code class=\"language-plaintext highlighter-rouge\">multiprocessing</code></a> in Python.</p>\n\n<figure class=\"highlight\">\n  <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">.</span><span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">*</span> <span class=\"mi\">10</span><span class=\"p\">))</span>  <span class=\"c1\"># This works!\n</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"mi\">40</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"mi\">40</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"mi\">40</span><span class=\"p\">]</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">.</span><span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">/</span> <span class=\"mi\">0</span><span class=\"p\">))</span>   <span class=\"c1\"># This errs gracefully!\n</span><span class=\"nb\">ZeroDivisionError</span><span class=\"p\">:</span>  <span class=\"n\">Execption</span> <span class=\"ow\">in</span> <span class=\"n\">remote</span> <span class=\"n\">Process</span>\n\n<span class=\"n\">integer</span> <span class=\"n\">division</span> <span class=\"ow\">or</span> <span class=\"n\">modulo</span> <span class=\"n\">by</span> <span class=\"n\">zero</span>\n\n<span class=\"n\">Traceback</span><span class=\"p\">:</span>\n    <span class=\"p\">...</span></code></pre>\n</figure>\n\n<p>These tricks remove need for user expertise.</p>\n\n<h2 id=\"productive-sweet-spot\">Productive Sweet Spot</h2>\n\n<p>I think that there is a productive sweet spot in the following configuration</p>\n\n<ol>\n  <li>Pure Python functions</li>\n  <li>Streaming/lazy data</li>\n  <li>Multiprocessing</li>\n  <li>A single large machine or a few machines in an informal cluster</li>\n</ol>\n\n<p>This setup is common and it’s capable of handling terabyte scale workflows.\nIn my brief experience people rarely take this route.  They use single-threaded\nin-memory Python until it breaks, and then seek out <em>Big Data Infrastructure</em>\nlike Hadoop/Spark at relatively high productivity overhead.</p>\n\n<p><em>Your workstation can scale bigger than you think.</em></p>\n\n<h2 id=\"example-1\">Example</h2>\n\n<p>Here is about a gigabyte of\n<a href=\"http://ita.ee.lbl.gov/html/contrib/UCB.home-IP-HTTP.html\">network flow data</a>,\nrecording which computers made connections to which other computers on the\nUC-Berkeley campus in 1996.</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>846890339:661920 846890339:755475 846890340:197141 168.237.7.10:1163 83.153.38.208:80 2 8 4294967295 4294967295 846615753 176 2462 39 GET 21068906053917068819..html HTTP/1.0\n\n846890340:989181 846890341:2147 846890341:2268 13.35.251.117:1269 207.83.232.163:80 10 0 842099997 4294967295 4294967295 64 1 38 GET 20271810743860818265..gif HTTP/1.0\n\n846890341:80714 846890341:90331 846890341:90451 13.35.251.117:1270 207.83.232.163:80 10 0 842099995 4294967295 4294967295 64 1 38 GET 38127854093537985420..gif HTTP/1.0\n</code></pre></div></div>\n\n<p>This is actually relatively clean.  Many of the fields are space delimited (not\nall) and I’ve already compiled and run the decade old C-code needed to\ndecompress it from its original format.</p>\n\n<p>Lets use Bag and regular expressions to parse this.</p>\n\n<figure class=\"highlight\">\n  <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]:</span> <span class=\"kn\">from</span> <span class=\"nn\">dask.bag</span> <span class=\"kn\">import</span> <span class=\"n\">Bag</span><span class=\"p\">,</span> <span class=\"n\">into</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]:</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">Bag</span><span class=\"p\">.</span><span class=\"n\">from_filenames</span><span class=\"p\">(</span><span class=\"s\">'UCB-home-IP*.log'</span><span class=\"p\">)</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]:</span> <span class=\"kn\">import</span> <span class=\"nn\">re</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]:</span> <span class=\"n\">pattern</span> <span class=\"o\">=</span> <span class=\"s\">\"\"\"\n   ...: (?P&lt;request_time&gt;\\d+:\\d+)\n   ...: (?P&lt;response_start&gt;\\d+:\\d+)\n   ...: (?P&lt;response_end&gt;\\d+:\\d+)\n   ...: (?P&lt;client_ip&gt;\\d+\\.\\d+\\.\\d+\\.\\d+):(?P&lt;client_port&gt;\\d+)\n   ...: (?P&lt;server_ip&gt;\\d+\\.\\d+\\.\\d+\\.\\d+):(?P&lt;server_port&gt;\\d+)\n   ...: (?P&lt;client_headers&gt;\\d+)\n   ...: (?P&lt;server_headers&gt;\\d+)\n   ...: (?P&lt;if_modified_since&gt;\\d+)\n   ...: (?P&lt;response_header_length&gt;\\d+)\n   ...: (?P&lt;response_data_length&gt;\\d+)\n   ...: (?P&lt;request_url_length&gt;\\d+)\n   ...: (?P&lt;expires&gt;\\d+)\n   ...: (?P&lt;last_modified&gt;\\d+)\n   ...: (?P&lt;method&gt;\\w+)\n   ...: (?P&lt;domain&gt;\\d+..)\\.(?P&lt;extension&gt;\\w*)(?P&lt;rest_of_url&gt;\\S*)\n   ...: (?P&lt;protocol&gt;.*)\"\"\"</span><span class=\"p\">.</span><span class=\"n\">strip</span><span class=\"p\">().</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s\">'</span><span class=\"se\">\\n</span><span class=\"s\">'</span><span class=\"p\">,</span> <span class=\"s\">'\\s+'</span><span class=\"p\">)</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">]:</span> <span class=\"n\">prog</span> <span class=\"o\">=</span> <span class=\"n\">re</span><span class=\"p\">.</span><span class=\"nb\">compile</span><span class=\"p\">(</span><span class=\"n\">pattern</span><span class=\"p\">)</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">]:</span> <span class=\"n\">records</span> <span class=\"o\">=</span> <span class=\"n\">b</span><span class=\"p\">.</span><span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"n\">prog</span><span class=\"p\">.</span><span class=\"n\">match</span><span class=\"p\">).</span><span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">m</span><span class=\"p\">:</span> <span class=\"n\">m</span><span class=\"p\">.</span><span class=\"n\">groupdict</span><span class=\"p\">())</span></code></pre>\n</figure>\n\n<p>This returns instantly.  We only compute results when necessary.  We trigger\ncomputation by calling <code class=\"language-plaintext highlighter-rouge\">list</code>.</p>\n\n<figure class=\"highlight\">\n  <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">]:</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">records</span><span class=\"p\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">]:</span>\n<span class=\"p\">[{</span><span class=\"s\">'client_headers'</span><span class=\"p\">:</span> <span class=\"s\">'2'</span><span class=\"p\">,</span>\n  <span class=\"s\">'client_ip'</span><span class=\"p\">:</span> <span class=\"s\">'168.237.7.10'</span><span class=\"p\">,</span>\n  <span class=\"s\">'client_port'</span><span class=\"p\">:</span> <span class=\"s\">'1163'</span><span class=\"p\">,</span>\n  <span class=\"s\">'domain'</span><span class=\"p\">:</span> <span class=\"s\">'21068906053917068819.'</span><span class=\"p\">,</span>\n  <span class=\"s\">'expires'</span><span class=\"p\">:</span> <span class=\"s\">'2462'</span><span class=\"p\">,</span>\n  <span class=\"s\">'extension'</span><span class=\"p\">:</span> <span class=\"s\">'html'</span><span class=\"p\">,</span>\n  <span class=\"s\">'if_modified_since'</span><span class=\"p\">:</span> <span class=\"s\">'4294967295'</span><span class=\"p\">,</span>\n  <span class=\"s\">'last_modified'</span><span class=\"p\">:</span> <span class=\"s\">'39'</span><span class=\"p\">,</span>\n  <span class=\"s\">'method'</span><span class=\"p\">:</span> <span class=\"s\">'GET'</span><span class=\"p\">,</span>\n  <span class=\"s\">'protocol'</span><span class=\"p\">:</span> <span class=\"s\">'HTTP/1.0'</span><span class=\"p\">,</span>\n  <span class=\"s\">'request_time'</span><span class=\"p\">:</span> <span class=\"s\">'846890339:661920'</span><span class=\"p\">,</span>\n  <span class=\"s\">'request_url_length'</span><span class=\"p\">:</span> <span class=\"s\">'176'</span><span class=\"p\">,</span>\n  <span class=\"s\">'response_data_length'</span><span class=\"p\">:</span> <span class=\"s\">'846615753'</span><span class=\"p\">,</span>\n  <span class=\"s\">'response_end'</span><span class=\"p\">:</span> <span class=\"s\">'846890340:197141'</span><span class=\"p\">,</span>\n  <span class=\"s\">'response_header_length'</span><span class=\"p\">:</span> <span class=\"s\">'4294967295'</span><span class=\"p\">,</span>\n  <span class=\"s\">'response_start'</span><span class=\"p\">:</span> <span class=\"s\">'846890339:755475'</span><span class=\"p\">,</span>\n  <span class=\"s\">'rest_of_url'</span><span class=\"p\">:</span> <span class=\"s\">''</span><span class=\"p\">,</span>\n  <span class=\"s\">'server_headers'</span><span class=\"p\">:</span> <span class=\"s\">'8'</span><span class=\"p\">,</span>\n  <span class=\"s\">'server_ip'</span><span class=\"p\">:</span> <span class=\"s\">'83.153.38.208'</span><span class=\"p\">,</span>\n  <span class=\"s\">'server_port'</span><span class=\"p\">:</span> <span class=\"s\">'80'</span><span class=\"p\">}]</span></code></pre>\n</figure>\n\n<p>Because bag operates lazily this small result also returns immediately.</p>\n\n<p>To demonstrate depth we find the ten client/server pairs with the most\nconnections.</p>\n\n<figure class=\"highlight\">\n  <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">]:</span> <span class=\"n\">counts</span> <span class=\"o\">=</span> <span class=\"n\">records</span><span class=\"p\">.</span><span class=\"n\">pluck</span><span class=\"p\">([</span><span class=\"s\">'client_ip'</span><span class=\"p\">,</span> <span class=\"s\">'server_ip'</span><span class=\"p\">]).</span><span class=\"n\">frequencies</span><span class=\"p\">()</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">9</span><span class=\"p\">]:</span> <span class=\"o\">%</span><span class=\"n\">time</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">counts</span><span class=\"p\">.</span><span class=\"n\">topk</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]))</span>\n<span class=\"n\">CPU</span> <span class=\"n\">times</span><span class=\"p\">:</span> <span class=\"n\">user</span> <span class=\"mf\">11.2</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">sys</span><span class=\"p\">:</span> <span class=\"mf\">1.15</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">total</span><span class=\"p\">:</span> <span class=\"mf\">12.3</span> <span class=\"n\">s</span>\n<span class=\"n\">Wall</span> <span class=\"n\">time</span><span class=\"p\">:</span> <span class=\"mf\">50.4</span> <span class=\"n\">s</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">9</span><span class=\"p\">]:</span>\n<span class=\"p\">[((</span><span class=\"s\">'247.193.34.56'</span><span class=\"p\">,</span> <span class=\"s\">'243.182.247.102'</span><span class=\"p\">),</span> <span class=\"mi\">35353</span><span class=\"p\">),</span>\n <span class=\"p\">((</span><span class=\"s\">'172.219.28.251'</span><span class=\"p\">,</span> <span class=\"s\">'47.61.128.1'</span><span class=\"p\">),</span> <span class=\"mi\">22333</span><span class=\"p\">),</span>\n <span class=\"p\">((</span><span class=\"s\">'240.97.200.0'</span><span class=\"p\">,</span> <span class=\"s\">'108.146.202.184'</span><span class=\"p\">),</span> <span class=\"mi\">17492</span><span class=\"p\">),</span>\n <span class=\"p\">((</span><span class=\"s\">'229.112.177.58'</span><span class=\"p\">,</span> <span class=\"s\">'47.61.128.1'</span><span class=\"p\">),</span> <span class=\"mi\">12993</span><span class=\"p\">),</span>\n <span class=\"p\">((</span><span class=\"s\">'146.214.34.69'</span><span class=\"p\">,</span> <span class=\"s\">'119.153.78.6'</span><span class=\"p\">),</span> <span class=\"mi\">12554</span><span class=\"p\">),</span>\n <span class=\"p\">((</span><span class=\"s\">'17.32.139.174'</span><span class=\"p\">,</span> <span class=\"s\">'179.135.20.36'</span><span class=\"p\">),</span> <span class=\"mi\">10166</span><span class=\"p\">),</span>\n <span class=\"p\">((</span><span class=\"s\">'97.166.76.88'</span><span class=\"p\">,</span> <span class=\"s\">'65.81.49.125'</span><span class=\"p\">),</span> <span class=\"mi\">8155</span><span class=\"p\">),</span>\n <span class=\"p\">((</span><span class=\"s\">'55.156.159.21'</span><span class=\"p\">,</span> <span class=\"s\">'157.229.248.255'</span><span class=\"p\">),</span> <span class=\"mi\">7533</span><span class=\"p\">),</span>\n <span class=\"p\">((</span><span class=\"s\">'55.156.159.21'</span><span class=\"p\">,</span> <span class=\"s\">'124.77.75.86'</span><span class=\"p\">),</span> <span class=\"mi\">7506</span><span class=\"p\">),</span>\n <span class=\"p\">((</span><span class=\"s\">'55.156.159.21'</span><span class=\"p\">,</span> <span class=\"s\">'97.5.181.76'</span><span class=\"p\">),</span> <span class=\"mi\">7501</span><span class=\"p\">)]</span></code></pre>\n</figure>\n\n<h2 id=\"comparison-with-spark\">Comparison with Spark</h2>\n\n<p>First, it is silly and unfair to compare with PySpark running locally.  PySpark\noffers much more in a distributed context.</p>\n\n<figure class=\"highlight\">\n  <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]:</span> <span class=\"kn\">import</span> <span class=\"nn\">pyspark</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]:</span> <span class=\"n\">sc</span> <span class=\"o\">=</span> <span class=\"n\">pyspark</span><span class=\"p\">.</span><span class=\"n\">SparkContext</span><span class=\"p\">(</span><span class=\"s\">'local'</span><span class=\"p\">)</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]:</span> <span class=\"kn\">from</span> <span class=\"nn\">glob</span> <span class=\"kn\">import</span> <span class=\"n\">glob</span>\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]:</span> <span class=\"n\">filenames</span> <span class=\"o\">=</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">glob</span><span class=\"p\">(</span><span class=\"s\">'UCB-home-*.log'</span><span class=\"p\">))</span>\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">]:</span> <span class=\"n\">rdd</span> <span class=\"o\">=</span> <span class=\"n\">sc</span><span class=\"p\">.</span><span class=\"n\">parallelize</span><span class=\"p\">(</span><span class=\"n\">filenames</span><span class=\"p\">,</span> <span class=\"n\">numSlices</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">]:</span> <span class=\"kn\">import</span> <span class=\"nn\">re</span>\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">]:</span> <span class=\"n\">pattern</span> <span class=\"o\">=</span> <span class=\"p\">...</span>\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">]:</span> <span class=\"n\">prog</span> <span class=\"o\">=</span> <span class=\"n\">re</span><span class=\"p\">.</span><span class=\"nb\">compile</span><span class=\"p\">(</span><span class=\"n\">pattern</span><span class=\"p\">)</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">9</span><span class=\"p\">]:</span> <span class=\"n\">lines</span> <span class=\"o\">=</span> <span class=\"n\">rdd</span><span class=\"p\">.</span><span class=\"n\">flatMap</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">fn</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">fn</span><span class=\"p\">)))</span>\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">]:</span> <span class=\"n\">records</span> <span class=\"o\">=</span> <span class=\"n\">lines</span><span class=\"p\">.</span><span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">line</span><span class=\"p\">:</span> <span class=\"n\">prog</span><span class=\"p\">.</span><span class=\"n\">match</span><span class=\"p\">(</span><span class=\"n\">line</span><span class=\"p\">).</span><span class=\"n\">groupdict</span><span class=\"p\">())</span>\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">11</span><span class=\"p\">]:</span> <span class=\"n\">ips</span> <span class=\"o\">=</span> <span class=\"n\">records</span><span class=\"p\">.</span><span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">rec</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"n\">rec</span><span class=\"p\">[</span><span class=\"s\">'client_ip'</span><span class=\"p\">],</span> <span class=\"n\">rec</span><span class=\"p\">[</span><span class=\"s\">'server_ip'</span><span class=\"p\">]))</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">12</span><span class=\"p\">]:</span> <span class=\"kn\">from</span> <span class=\"nn\">toolz</span> <span class=\"kn\">import</span> <span class=\"n\">topk</span>\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">13</span><span class=\"p\">]:</span> <span class=\"o\">%</span><span class=\"n\">time</span> <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">topk</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">ips</span><span class=\"p\">.</span><span class=\"n\">countByValue</span><span class=\"p\">().</span><span class=\"n\">items</span><span class=\"p\">(),</span> <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n<span class=\"n\">CPU</span> <span class=\"n\">times</span><span class=\"p\">:</span> <span class=\"n\">user</span> <span class=\"mf\">1.32</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">sys</span><span class=\"p\">:</span> <span class=\"mf\">52.2</span> <span class=\"n\">ms</span><span class=\"p\">,</span> <span class=\"n\">total</span><span class=\"p\">:</span> <span class=\"mf\">1.37</span> <span class=\"n\">s</span>\n<span class=\"n\">Wall</span> <span class=\"n\">time</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"nb\">min</span> <span class=\"mi\">21</span><span class=\"n\">s</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">13</span><span class=\"p\">]:</span>\n<span class=\"p\">{(</span><span class=\"s\">'146.214.34.69'</span><span class=\"p\">,</span> <span class=\"s\">'119.153.78.6'</span><span class=\"p\">):</span> <span class=\"mi\">12554</span><span class=\"p\">,</span>\n <span class=\"p\">(</span><span class=\"s\">'17.32.139.174'</span><span class=\"p\">,</span> <span class=\"s\">'179.135.20.36'</span><span class=\"p\">):</span> <span class=\"mi\">10166</span><span class=\"p\">,</span>\n <span class=\"p\">(</span><span class=\"s\">'172.219.28.251'</span><span class=\"p\">,</span> <span class=\"s\">'47.61.128.1'</span><span class=\"p\">):</span> <span class=\"mi\">22333</span><span class=\"p\">,</span>\n <span class=\"p\">(</span><span class=\"s\">'229.112.177.58'</span><span class=\"p\">,</span> <span class=\"s\">'47.61.128.1'</span><span class=\"p\">):</span> <span class=\"mi\">12993</span><span class=\"p\">,</span>\n <span class=\"p\">(</span><span class=\"s\">'240.97.200.0'</span><span class=\"p\">,</span> <span class=\"s\">'108.146.202.184'</span><span class=\"p\">):</span> <span class=\"mi\">17492</span><span class=\"p\">,</span>\n <span class=\"p\">(</span><span class=\"s\">'247.193.34.56'</span><span class=\"p\">,</span> <span class=\"s\">'243.182.247.102'</span><span class=\"p\">):</span> <span class=\"mi\">35353</span><span class=\"p\">,</span>\n <span class=\"p\">(</span><span class=\"s\">'55.156.159.21'</span><span class=\"p\">,</span> <span class=\"s\">'124.77.75.86'</span><span class=\"p\">):</span> <span class=\"mi\">7506</span><span class=\"p\">,</span>\n <span class=\"p\">(</span><span class=\"s\">'55.156.159.21'</span><span class=\"p\">,</span> <span class=\"s\">'157.229.248.255'</span><span class=\"p\">):</span> <span class=\"mi\">7533</span><span class=\"p\">,</span>\n <span class=\"p\">(</span><span class=\"s\">'55.156.159.21'</span><span class=\"p\">,</span> <span class=\"s\">'97.5.181.76'</span><span class=\"p\">):</span> <span class=\"mi\">7501</span><span class=\"p\">,</span>\n <span class=\"p\">(</span><span class=\"s\">'97.166.76.88'</span><span class=\"p\">,</span> <span class=\"s\">'65.81.49.125'</span><span class=\"p\">):</span> <span class=\"mi\">8155</span><span class=\"p\">}</span></code></pre>\n</figure>\n\n<p>So, given a compute-bound mostly embarrassingly parallel task (regexes are\ncomparatively expensive) on a single machine they are comparable.</p>\n\n<p>Reasons you would want to use Spark</p>\n\n<ul>\n  <li>You want to use many machines and interact with HDFS</li>\n  <li>Shuffling operations</li>\n</ul>\n\n<p>Reasons you would want to use dask.bag</p>\n\n<ul>\n  <li>Trivial installation</li>\n  <li>No mucking about with JVM heap sizes or config files</li>\n  <li>Nice error reporting.  Spark error reporting includes the typical giant\nJava Stack trace that comes with any JVM solution.</li>\n  <li>Easier/simpler for Python programmers to hack on.\nThe implementation is 350 lines including comments.</li>\n</ul>\n\n<p>Again, this is really just a toy experiment to show that the dask model isn’t\njust about arrays.  I absolutely do not want to throw Dask in the ring with\nSpark.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>However I do want to stress the importance of single-machine parallelism.\nDask.bag targets this application well and leverages common hardware in a\nsimple way that is both natural and accessible to most Python programmers.</p>\n\n<p>A skilled developer could extend this to work in a distributed memory context.\nThe logic to create the task dependency graphs is separate from the scheduler.</p>\n\n<p>Special thanks to <a href=\"http://github.com/eriknw\">Erik Welch</a> for finely crafting\nthe dask optimization passes that keep the data flowly smoothly.</p>"
}