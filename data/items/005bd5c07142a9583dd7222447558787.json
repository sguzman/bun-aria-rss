{
  "title": "Where to Write Prose?",
  "link": "",
  "updated": "2016-09-12T00:00:00+00:00",
  "id": "https://mrocklin.github.io/blog/work/2016/09/12/where-to-write-prose",
  "content": "<p><em>Code is only as good as its prose.</em></p>\n\n<p>Like many programmers I spend more time writing prose than code.  This is\ngreat; writing clean prose focuses my thoughts during design and disseminates\nunderstanding so that people see how a project can benefit them.</p>\n\n<p>However, I now question how and where I should write and publish prose.  When\ncommunicating to users there are generally two options:</p>\n\n<ol>\n  <li>Blogposts</li>\n  <li>Documentation</li>\n</ol>\n\n<p>Given that developer time is finite we need to strike some balance between\nthese two activities.  I used to blog frequently, then I switched to almost\nonly documentation, and I think I’m probably about to swing back a bit.  Here’s\nwhy:</p>\n\n<h2 id=\"blogposts\">Blogposts</h2>\n\n<p>Blogposts excel at generating interest, informing people of new functionality,\nand providing workable examples that people can copy and modify.  I used to\nblog about Dask (my current software project) pretty regularly here on my blog\nand continuously got positive feedback from it.  This felt great.</p>\n\n<p>However, blogging about evolving software also generates debt.  Such blogs grow\nstale and inaccurate and so when they’re the only source of information about a\nproject, users grow confused when they try things that no longer work, and\nthey’re stuck without a clear reference to turn.  Basing core understanding on\nblogs can be a frustrating experience.</p>\n\n<h2 id=\"documentation\">Documentation</h2>\n\n<p>So I switched from writing blogposts to spending a lot of time writing\ntechnical documentation.  This was a positive move.  User comprehension seemed\nto increase, the questions I was fielding were of a far higher level than\nbefore.</p>\n\n<p>Documentation gets updated as features mature.  New pages assimilate cleanly\nand obsolete pages get cleaned up.  Documentation is generally more densely\nlinked than linear blogs, and readers tend to explore more deeply within the\nwebsite.  Comparing the Google Analytics results for my blog and my documentation\nshow significantly increased engagement, both with longer page views as well as\nlonger chains of navigation throughout the site.  Documentation seems to engage\nreaders more strongly than do blogs (at least more strongly than my blog).</p>\n\n<p>However, documentation doesn’t get in front of people the same way that Blogs\ndo.  No one subscribes to receive documentation updates.  Doc pages for new\nfeatures rarely end up on Reddit or Hacker News.  The way people pass\naround blog links encourages Google to point people there way more often\nthan to doc pages.  There is no way for interested users to keep up with\nthe latest news except by subscribing to fairly dry release e-mails.</p>\n\n<p>Blogposts are way sexier.  This feels a little shallow if you’re not into sales\nand marketing, but lets remember that software dies without users and that\nusers are busy people who have to be stimulated into taking the time to learn\nnew things.</p>\n\n<h2 id=\"current-plan\">Current Plan</h2>\n\n<p>I still think its wise for core developers to focus 80% of their prose time on\ndocumentation, especially for new or in-flux features that haven’t had a decent\namount of time for users to provide feedback.</p>\n\n<p>However I personally hope to blog more about concepts or timely experiences\nthat have to do with development, if not the features themeselves.  For\nexample, right now I’m building a Mesos-powered Scheduler for Dask.distributed.\nI’ll probably write about the experiences of a developer meeting Mesos for the\nfirst time, but I probably won’t include a how-to of using Dask with Mesos.</p>\n\n<p>I also hope to find some way to polish existing doc pages into blogposts once\nthey have proven to be fairly stable.  This mostly involves finding a\nmeaningful and reproducible example to work through.</p>\n\n<h2 id=\"feedback\">Feedback</h2>\n\n<p>I would love to hear how other projects handle this tension between timely and\ntimeless documentation.</p>"
}