{
  "title": "Intro to pandas data structures",
  "link": "",
  "published": "2013-10-26T01:00:00-07:00",
  "updated": "2022-11-03T04:16:07-07:00",
  "author": {
    "name": "Greg Reda"
  },
  "id": "tag:www.gregreda.com,2013-10-26:/2013/10/26/intro-to-pandas-data-structures/",
  "summary": "<p><em>UPDATE: If you're interested in learning pandas from a SQL perspective and would prefer to watch a video, you can find video of my 2014 PyData NYC talk <a href=\"http://reda.io/sql2pandas\">here</a>.</em></p>\n<p><a href=\"/2013/01/23/translating-sql-to-pandas-part1/\">A while back I claimed</a> I was going to write a couple of posts on translating <a href=\"http://pandas.pydata.org\">pandas</a> to SQL. I never â€¦</p>",
  "content": "<p><em>UPDATE: If you're interested in learning pandas from a SQL perspective and would prefer to watch a video, you can find video of my 2014 PyData NYC talk <a href=\"http://reda.io/sql2pandas\">here</a>.</em></p>\n<p><a href=\"/2013/01/23/translating-sql-to-pandas-part1/\">A while back I claimed</a> I was going to write a couple of posts on translating <a href=\"http://pandas.pydata.org\">pandas</a> to SQL. I never followed up. However, the other week a couple of coworkers expressed their interest in learning a bit more about it - this seemed like a good reason to revisit the topic.\nWhat follows is a fairly thorough introduction to the library. I chose to break it into three parts as I felt it was too long and daunting as one.</p>\n<ul>\n<li><a href=\"/2013/10/26/intro-to-pandas-data-structures/\">Part 1: Intro to pandas data structures</a>, covers the basics of the library's two main data structures - Series and DataFrames.</li>\n<li><a href=\"/2013/10/26/working-with-pandas-dataframes/\">Part 2: Working with DataFrames</a>, dives a bit deeper into the functionality of DataFrames. It shows how to inspect, select, filter, merge, combine, and group your data.</li>\n<li><a href=\"/2013/10/26/using-pandas-on-the-movielens-dataset/\">Part 3: Using pandas with the MovieLens dataset</a>, applies the learnings of the first two parts in order to answer a few basic analysis questions about the MovieLens ratings data.</li>\n</ul>\n<p>If you'd like to follow along, you can find the necessary CSV files <a href=\"https://github.com/gjreda/gregreda.com/tree/master/content/notebooks/data\">here</a> and the MovieLens dataset <a href=\"http://files.grouplens.org/datasets/movielens/ml-100k.zip\">here</a>.\nMy goal for this tutorial is to teach the basics of pandas by comparing and contrasting its syntax with SQL. Since all of my coworkers are familiar with SQL, I feel this is the best way to provide a context that can be easily understood by the intended audience.\nIf you're interested in learning more about the library, pandas author <a href=\"https://twitter.com/wesmckinn\">Wes McKinney</a> has written <a href=\"http://www.amazon.com/gp/product/1449319793/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=1449319793&amp;linkCode=as2&amp;tag=gjreda-20&amp;linkId=MCGW4C4NOBRVV5OC\">Python for Data Analysis</a>, which covers it in much greater detail.</p>\n<h3>What is it?</h3>\n<p><a href=\"http://pandas.pydata.org/\">pandas</a> is an open source <a href=\"http://www.python.org/\">Python</a> library for data analysis. Python has always been great for prepping and munging data, but it's never been great for analysis - you'd usually end up using <a href=\"http://www.r-project.org/\">R</a> or loading it into a database and using SQL (or worse, Excel). pandas makes Python great for analysis.</p>\n<h2>Data Structures</h2>\n<p>pandas introduces two new data structures to Python - <a href=\"http://pandas.pydata.org/pandas-docs/dev/dsintro.html#series\">Series</a> and <a href=\"http://pandas.pydata.org/pandas-docs/dev/dsintro.html#dataframe\">DataFrame</a>, both of which are built on top of <a href=\"http://www.numpy.org/\">NumPy</a> (this means it's fast).</p>\n<div class=\"highlight\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">pandas</span> <span class=\"k\">as</span> <span class=\"nn\">pd</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">import</span> <span class=\"nn\">matplotlib.pyplot</span> <span class=\"k\">as</span> <span class=\"nn\">plt</span>\n<span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">set_option</span><span class=\"p\">(</span><span class=\"s1\">&#39;max_columns&#39;</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">)</span>\n<span class=\"o\">%</span><span class=\"n\">matplotlib</span> <span class=\"n\">inline</span>\n</code></pre></div>\n\n<h3>Series</h3>\n<p>A Series is a one-dimensional object similar to an array, list, or column in a table. It will assign a labeled index to each item in the Series. By default, each item will receive an index label from 0 to N, where N is the length of the Series minus one.</p>\n<div class=\"highlight\"><pre><span></span><code><span class=\"c1\"># create a Series with an arbitrary list</span>\n<span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Heisenberg&#39;</span><span class=\"p\">,</span> <span class=\"mf\">3.14</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1789710578</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Happy Eating!&#39;</span><span class=\"p\">])</span>\n<span class=\"n\">s</span>\n</code></pre></div>\n\n<pre>\n0                7\n1       Heisenberg\n2             3.14\n3      -1789710578\n4    Happy Eating!\ndtype: object\n</pre>\n\n<p>Alternatively, you can specify an index to use when creating the Series.</p>\n<div class=\"highlight\"><pre><span></span><code><span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Heisenberg&#39;</span><span class=\"p\">,</span> <span class=\"mf\">3.14</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1789710578</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Happy Eating!&#39;</span><span class=\"p\">],</span>\n              <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;A&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Z&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;C&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Y&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;E&#39;</span><span class=\"p\">])</span>\n<span class=\"n\">s</span>\n</code></pre></div>\n\n<pre>\nA                7\nZ       Heisenberg\nC             3.14\nY      -1789710578\nE    Happy Eating!\ndtype: object\n</pre>\n\n<p>The Series constructor can convert a dictonary as well, using the keys of the dictionary as its index.</p>\n<div class=\"highlight\"><pre><span></span><code><span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">&#39;Chicago&#39;</span><span class=\"p\">:</span> <span class=\"mi\">1000</span><span class=\"p\">,</span> <span class=\"s1\">&#39;New York&#39;</span><span class=\"p\">:</span> <span class=\"mi\">1300</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Portland&#39;</span><span class=\"p\">:</span> <span class=\"mi\">900</span><span class=\"p\">,</span> <span class=\"s1\">&#39;San Francisco&#39;</span><span class=\"p\">:</span> <span class=\"mi\">1100</span><span class=\"p\">,</span>\n     <span class=\"s1\">&#39;Austin&#39;</span><span class=\"p\">:</span> <span class=\"mi\">450</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Boston&#39;</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">}</span>\n<span class=\"n\">cities</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">)</span>\n<span class=\"n\">cities</span>\n</code></pre></div>\n\n<pre>\nAustin            450\nBoston            NaN\nChicago          1000\nNew York         1300\nPortland          900\nSan Francisco    1100\ndtype: float64\n</pre>\n\n<p>You can use the index to select specific items from the Series ...</p>\n<div class=\"highlight\"><pre><span></span><code><span class=\"n\">cities</span><span class=\"p\">[</span><span class=\"s1\">&#39;Chicago&#39;</span><span class=\"p\">]</span>\n</code></pre></div>\n\n<pre>\n1000.0\n</pre>\n\n<div class=\"highlight\"><pre><span></span><code><span class=\"n\">cities</span><span class=\"p\">[[</span><span class=\"s1\">&#39;Chicago&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Portland&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;San Francisco&#39;</span><span class=\"p\">]]</span>\n</code></pre></div>\n\n<pre>\nChicago          1000\nPortland          900\nSan Francisco    1100\ndtype: float64\n</pre>\n\n<p>Or you can use boolean indexing for selection.</p>\n<div class=\"highlight\"><pre><span></span><code><span class=\"n\">cities</span><span class=\"p\">[</span><span class=\"n\">cities</span> <span class=\"o\">&lt;</span> <span class=\"mi\">1000</span><span class=\"p\">]</span>\n</code></pre></div>\n\n<pre>\nAustin      450\nPortland    900\ndtype: float64\n</pre>\n\n<p>That last one might be a little weird, so let's make it more clear - cities &lt; 1000 returns a Series of True/False values, which we then pass to our Series cities, returning the corresponding True items.</p>\n<div class=\"highlight\"><pre><span></span><code><span class=\"n\">less_than_1000</span> <span class=\"o\">=</span> <span class=\"n\">cities</span> <span class=\"o\">&lt;</span> <span class=\"mi\">1000</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">less_than_1000</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">cities</span><span class=\"p\">[</span><span class=\"n\">less_than_1000</span><span class=\"p\">])</span>\n</code></pre></div>\n\n<pre>\nAustin            True\nBoston           False\nChicago          False\nNew York         False\nPortland          True\nSan Francisco    False\ndtype: bool\n\n\nAustin      450\nPortland    900\ndtype: float64\n</pre>\n\n<p>You can also change the values in a Series on the fly.</p>\n<div class=\"highlight\"><pre><span></span><code><span class=\"c1\"># changing based on the index</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Old value:&#39;</span><span class=\"p\">,</span> <span class=\"n\">cities</span><span class=\"p\">[</span><span class=\"s1\">&#39;Chicago&#39;</span><span class=\"p\">])</span>\n<span class=\"n\">cities</span><span class=\"p\">[</span><span class=\"s1\">&#39;Chicago&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1400</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;New value:&#39;</span><span class=\"p\">,</span> <span class=\"n\">cities</span><span class=\"p\">[</span><span class=\"s1\">&#39;Chicago&#39;</span><span class=\"p\">])</span>\n</code></pre></div>\n\n<pre>\n('Old value:', 1000.0)\n('New value:', 1400.0)\n</pre>\n\n<div class=\"highlight\"><pre><span></span><code><span class=\"c1\"># changing values using boolean logic</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">cities</span><span class=\"p\">[</span><span class=\"n\">cities</span> <span class=\"o\">&lt;</span> <span class=\"mi\">1000</span><span class=\"p\">])</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">cities</span><span class=\"p\">[</span><span class=\"n\">cities</span> <span class=\"o\">&lt;</span> <span class=\"mi\">1000</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">750</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">cities</span><span class=\"p\">[</span><span class=\"n\">cities</span> <span class=\"o\">&lt;</span> <span class=\"mi\">1000</span><span class=\"p\">])</span>\n</code></pre></div>\n\n<pre>\nAustin      450\nPortland    900\ndtype: float64\n\n\nAustin      750\nPortland    750\ndtype: float64\n</pre>\n\n<p>What if you aren't sure whether an item is in the Series? You can check using idiomatic Python.</p>\n<div class=\"highlight\"><pre><span></span><code><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Seattle&#39;</span> <span class=\"ow\">in</span> <span class=\"n\">cities</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;San Francisco&#39;</span> <span class=\"ow\">in</span> <span class=\"n\">cities</span><span class=\"p\">)</span>\n</code></pre></div>\n\n<pre>\nFalse\nTrue\n</pre>\n\n<p>Mathematical operations can be done using scalars and functions.</p>\n<div class=\"highlight\"><pre><span></span><code><span class=\"c1\"># divide city values by 3</span>\n<span class=\"n\">cities</span> <span class=\"o\">/</span> <span class=\"mi\">3</span>\n</code></pre></div>\n\n<pre>\nAustin           250.000000\nBoston                  NaN\nChicago          466.666667\nNew York         433.333333\nPortland         250.000000\nSan Francisco    366.666667\ndtype: float64\n</pre>\n\n<div class=\"highlight\"><pre><span></span><code><span class=\"c1\"># square city values</span>\n<span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">square</span><span class=\"p\">(</span><span class=\"n\">cities</span><span class=\"p\">)</span>\n</code></pre></div>\n\n<pre>\nAustin            562500\nBoston               NaN\nChicago          1960000\nNew York         1690000\nPortland          562500\nSan Francisco    1210000\ndtype: float64\n</pre>\n\n<p>You can add two Series together, which returns a union of the two Series with the addition occurring on the shared index values. Values on either Series that did not have a shared index will produce a NULL/NaN (not a number).</p>\n<div class=\"highlight\"><pre><span></span><code><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">cities</span><span class=\"p\">[[</span><span class=\"s1\">&#39;Chicago&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;New York&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Portland&#39;</span><span class=\"p\">]])</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">cities</span><span class=\"p\">[[</span><span class=\"s1\">&#39;Austin&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;New York&#39;</span><span class=\"p\">]])</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">cities</span><span class=\"p\">[[</span><span class=\"s1\">&#39;Chicago&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;New York&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Portland&#39;</span><span class=\"p\">]]</span> <span class=\"o\">+</span> <span class=\"n\">cities</span><span class=\"p\">[[</span><span class=\"s1\">&#39;Austin&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;New York&#39;</span><span class=\"p\">]])</span>\n</code></pre></div>\n\n<pre>\nChicago     1400\nNew York    1300\nPortland     750\ndtype: float64\n\n\nAustin       750\nNew York    1300\ndtype: float64\n\n\nAustin       NaN\nChicago      NaN\nNew York    2600\nPortland     NaN\ndtype: float64\n</pre>\n\n<p>Notice that because Austin, Chicago, and Portland were not found in both Series, they were returned with NULL/NaN values.</p>\n<p>NULL checking can be performed with <code>isnull</code> and <code>notnull</code>.</p>\n<div class=\"highlight\"><pre><span></span><code><span class=\"c1\"># returns a boolean series indicating which values aren&#39;t NULL</span>\n<span class=\"n\">cities</span><span class=\"o\">.</span><span class=\"n\">notnull</span><span class=\"p\">()</span>\n</code></pre></div>\n\n<pre>\nAustin            True\nBoston           False\nChicago           True\nNew York          True\nPortland          True\nSan Francisco     True\ndtype: bool\n</pre>\n\n<div class=\"highlight\"><pre><span></span><code><span class=\"c1\"># use boolean logic to grab the NULL cities</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">cities</span><span class=\"o\">.</span><span class=\"n\">isnull</span><span class=\"p\">())</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">cities</span><span class=\"p\">[</span><span class=\"n\">cities</span><span class=\"o\">.</span><span class=\"n\">isnull</span><span class=\"p\">()])</span>\n</code></pre></div>\n\n<pre>\nAustin           False\nBoston            True\nChicago          False\nNew York         False\nPortland         False\nSan Francisco    False\ndtype: bool\n\n\nBoston   NaN\ndtype: float64\n</pre>\n\n<h2>DataFrame</h2>\n<p>A DataFrame is a tablular data structure comprised of rows and columns, akin to a spreadsheet, database table, or R's data.frame object. You can also think of a DataFrame as a group of Series objects that share an index (the column names).\nFor the rest of the tutorial, we'll be primarily working with DataFrames.</p>\n<h3>Reading Data</h3>\n<p>To create a DataFrame out of common Python data structures, we can pass a dictionary of lists to the DataFrame constructor.</p>\n<p>Using the <code>columns</code> parameter allows us to tell the constructor how we'd like the columns ordered. By default, the DataFrame constructor will order the columns alphabetically (though this isn't the case when reading from a file - more on that next).</p>\n<div class=\"highlight\"><pre><span></span><code><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">&#39;year&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">2010</span><span class=\"p\">,</span> <span class=\"mi\">2011</span><span class=\"p\">,</span> <span class=\"mi\">2012</span><span class=\"p\">,</span> <span class=\"mi\">2011</span><span class=\"p\">,</span> <span class=\"mi\">2012</span><span class=\"p\">,</span> <span class=\"mi\">2010</span><span class=\"p\">,</span> <span class=\"mi\">2011</span><span class=\"p\">,</span> <span class=\"mi\">2012</span><span class=\"p\">],</span>\n        <span class=\"s1\">&#39;team&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">&#39;Bears&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Bears&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Bears&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Packers&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Packers&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Lions&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Lions&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Lions&#39;</span><span class=\"p\">],</span>\n        <span class=\"s1\">&#39;wins&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">],</span>\n        <span class=\"s1\">&#39;losses&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">]}</span>\n<span class=\"n\">football</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;year&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;team&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;wins&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;losses&#39;</span><span class=\"p\">])</span>\n<span class=\"n\">football</span>\n</code></pre></div>\n\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>year</th>\n      <th>team</th>\n      <th>wins</th>\n      <th>losses</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2010</td>\n      <td>Bears</td>\n      <td>11</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2011</td>\n      <td>Bears</td>\n      <td>8</td>\n      <td>8</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2012</td>\n      <td>Bears</td>\n      <td>10</td>\n      <td>6</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2011</td>\n      <td>Packers</td>\n      <td>15</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2012</td>\n      <td>Packers</td>\n      <td>11</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>2010</td>\n      <td>Lions</td>\n      <td>6</td>\n      <td>10</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>2011</td>\n      <td>Lions</td>\n      <td>10</td>\n      <td>6</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>2012</td>\n      <td>Lions</td>\n      <td>4</td>\n      <td>12</td>\n    </tr>\n  </tbody>\n</table>\n\n<p>Much more often, you'll have a dataset you want to read into a DataFrame. Let's go through several common ways of doing so.</p>\n<h4>CSV</h4>\n<p>Reading a CSV is as simple as calling the read_csv function. By default, the read_csv function expects the column separator to be a comma, but you can change that using the <code>sep</code> parameter.</p>\n<div class=\"highlight\"><pre><span></span><code>%cd ~/Dropbox/tutorials/pandas/\n</code></pre></div>\n\n<pre>\n/Users/gjreda/Dropbox (Personal)/tutorials/pandas\n</pre>\n\n<div class=\"highlight\"><pre><span></span><code><span class=\"c1\"># Source: baseball-reference.com/players/r/riverma01.shtml</span>\n!head -n <span class=\"m\">5</span> mariano-rivera.csv\n</code></pre></div>\n\n<pre>\nYear,Age,Tm,Lg,W,L,W-L%,ERA,G,GS,GF,CG,SHO,SV,IP,H,R,ER,HR,BB,IBB,SO,HBP,BK,WP,BF,ERA+,WHIP,H/9,HR/9,BB/9,SO/9,SO/BB,Awards\n1995,25,NYY,AL,5,3,.625,5.51,19,10,2,0,0,0,67.0,71,43,41,11,30,0,51,2,1,0,301,84,1.507,9.5,1.5,4.0,6.9,1.70,\n1996,26,NYY,AL,8,3,.727,2.09,61,0,14,0,0,5,107.2,73,25,25,1,34,3,130,2,0,1,425,240,0.994,6.1,0.1,2.8,10.9,3.82,CYA-3MVP-12\n1997,27,NYY,AL,6,4,.600,1.88,66,0,56,0,0,43,71.2,65,17,15,5,20,6,68,0,0,2,301,239,1.186,8.2,0.6,2.5,8.5,3.40,ASMVP-25\n1998,28,NYY,AL,3,0,1.000,1.91,54,0,49,0,0,36,61.1,48,13,13,3,17,1,36,1,0,0,246,233,1.060,7.0,0.4,2.5,5.3,2.12,\n</pre>\n\n<div class=\"highlight\"><pre><span></span><code><span class=\"n\">from_csv</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">read_csv</span><span class=\"p\">(</span><span class=\"s1\">&#39;mariano-rivera.csv&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">from_csv</span><span class=\"o\">.</span><span class=\"n\">head</span><span class=\"p\">()</span>\n</code></pre></div>\n\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Year</th>\n      <th>Age</th>\n      <th>Tm</th>\n      <th>Lg</th>\n      <th>W</th>\n      <th>L</th>\n      <th>W-L%</th>\n      <th>ERA</th>\n      <th>G</th>\n      <th>GS</th>\n      <th>GF</th>\n      <th>CG</th>\n      <th>SHO</th>\n      <th>SV</th>\n      <th>IP</th>\n      <th>H</th>\n      <th>R</th>\n      <th>ER</th>\n      <th>HR</th>\n      <th>BB</th>\n      <th>IBB</th>\n      <th>SO</th>\n      <th>HBP</th>\n      <th>BK</th>\n      <th>WP</th>\n      <th>BF</th>\n      <th>ERA+</th>\n      <th>WHIP</th>\n      <th>H/9</th>\n      <th>HR/9</th>\n      <th>BB/9</th>\n      <th>SO/9</th>\n      <th>SO/BB</th>\n      <th>Awards</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1995</td>\n      <td>25</td>\n      <td>NYY</td>\n      <td>AL</td>\n      <td>5</td>\n      <td>3</td>\n      <td>0.625</td>\n      <td>5.51</td>\n      <td>19</td>\n      <td>10</td>\n      <td>2</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>67.0</td>\n      <td>71</td>\n      <td>43</td>\n      <td>41</td>\n      <td>11</td>\n      <td>30</td>\n      <td>0</td>\n      <td>51</td>\n      <td>2</td>\n      <td>1</td>\n      <td>0</td>\n      <td>301</td>\n      <td>84</td>\n      <td>1.507</td>\n      <td>9.5</td>\n      <td>1.5</td>\n      <td>4.0</td>\n      <td>6.9</td>\n      <td>1.70</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1996</td>\n      <td>26</td>\n      <td>NYY</td>\n      <td>AL</td>\n      <td>8</td>\n      <td>3</td>\n      <td>0.727</td>\n      <td>2.09</td>\n      <td>61</td>\n      <td>0</td>\n      <td>14</td>\n      <td>0</td>\n      <td>0</td>\n      <td>5</td>\n      <td>107.2</td>\n      <td>73</td>\n      <td>25</td>\n      <td>25</td>\n      <td>1</td>\n      <td>34</td>\n      <td>3</td>\n      <td>130</td>\n      <td>2</td>\n      <td>0</td>\n      <td>1</td>\n      <td>425</td>\n      <td>240</td>\n      <td>0.994</td>\n      <td>6.1</td>\n      <td>0.1</td>\n      <td>2.8</td>\n      <td>10.9</td>\n      <td>3.82</td>\n      <td>CYA-3MVP-12</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1997</td>\n      <td>27</td>\n      <td>NYY</td>\n      <td>AL</td>\n      <td>6</td>\n      <td>4</td>\n      <td>0.600</td>\n      <td>1.88</td>\n      <td>66</td>\n      <td>0</td>\n      <td>56</td>\n      <td>0</td>\n      <td>0</td>\n      <td>43</td>\n      <td>71.2</td>\n      <td>65</td>\n      <td>17</td>\n      <td>15</td>\n      <td>5</td>\n      <td>20</td>\n      <td>6</td>\n      <td>68</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>301</td>\n      <td>239</td>\n      <td>1.186</td>\n      <td>8.2</td>\n      <td>0.6</td>\n      <td>2.5</td>\n      <td>8.5</td>\n      <td>3.40</td>\n      <td>ASMVP-25</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1998</td>\n      <td>28</td>\n      <td>NYY</td>\n      <td>AL</td>\n      <td>3</td>\n      <td>0</td>\n      <td>1.000</td>\n      <td>1.91</td>\n      <td>54</td>\n      <td>0</td>\n      <td>49</td>\n      <td>0</td>\n      <td>0</td>\n      <td>36</td>\n      <td>61.1</td>\n      <td>48</td>\n      <td>13</td>\n      <td>13</td>\n      <td>3</td>\n      <td>17</td>\n      <td>1</td>\n      <td>36</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>246</td>\n      <td>233</td>\n      <td>1.060</td>\n      <td>7.0</td>\n      <td>0.4</td>\n      <td>2.5</td>\n      <td>5.3</td>\n      <td>2.12</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1999</td>\n      <td>29</td>\n      <td>NYY</td>\n      <td>AL</td>\n      <td>4</td>\n      <td>3</td>\n      <td>0.571</td>\n      <td>1.83</td>\n      <td>66</td>\n      <td>0</td>\n      <td>63</td>\n      <td>0</td>\n      <td>0</td>\n      <td>45</td>\n      <td>69.0</td>\n      <td>43</td>\n      <td>15</td>\n      <td>14</td>\n      <td>2</td>\n      <td>18</td>\n      <td>3</td>\n      <td>52</td>\n      <td>3</td>\n      <td>1</td>\n      <td>2</td>\n      <td>268</td>\n      <td>257</td>\n      <td>0.884</td>\n      <td>5.6</td>\n      <td>0.3</td>\n      <td>2.3</td>\n      <td>6.8</td>\n      <td>2.89</td>\n      <td>ASCYA-3MVP-14</td>\n    </tr>\n  </tbody>\n</table>\n\n<p>Our file had headers, which the function inferred upon reading in the file. Had we wanted to be more explicit, we could have passed <code>header=None</code> to the function along with a list of column names to use:</p>\n<div class=\"highlight\"><pre><span></span><code><span class=\"c1\"># Source: pro-football-reference.com/players/M/MannPe00/touchdowns/passing/2012/</span>\n!head -n <span class=\"m\">5</span> peyton-passing-TDs-2012.csv\n</code></pre></div>\n\n<pre>\n1,1,2012-09-09,DEN,,PIT,W 31-19,3,71,Demaryius Thomas,Trail 7-13,Lead 14-13*\n2,1,2012-09-09,DEN,,PIT,W 31-19,4,1,Jacob Tamme,Trail 14-19,Lead 22-19*\n3,2,2012-09-17,DEN,@,ATL,L 21-27,2,17,Demaryius Thomas,Trail 0-20,Trail 7-20\n4,3,2012-09-23,DEN,,HOU,L 25-31,4,38,Brandon Stokley,Trail 11-31,Trail 18-31\n5,3,2012-09-23,DEN,,HOU,L 25-31,4,6,Joel Dreessen,Trail 18-31,Trail 25-31\n</pre>\n\n<div class=\"highlight\"><pre><span></span><code><span class=\"n\">cols</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;num&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;game&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;date&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;team&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;home_away&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;opponent&#39;</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;result&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;quarter&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;distance&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;receiver&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;score_before&#39;</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;score_after&#39;</span><span class=\"p\">]</span>\n<span class=\"n\">no_headers</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">read_csv</span><span class=\"p\">(</span><span class=\"s1\">&#39;peyton-passing-TDs-2012.csv&#39;</span><span class=\"p\">,</span> <span class=\"n\">sep</span><span class=\"o\">=</span><span class=\"s1\">&#39;,&#39;</span><span class=\"p\">,</span> <span class=\"n\">header</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n                         <span class=\"n\">names</span><span class=\"o\">=</span><span class=\"n\">cols</span><span class=\"p\">)</span>\n<span class=\"n\">no_headers</span><span class=\"o\">.</span><span class=\"n\">head</span><span class=\"p\">()</span>\n</code></pre></div>\n\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>num</th>\n      <th>game</th>\n      <th>date</th>\n      <th>team</th>\n      <th>home_away</th>\n      <th>opponent</th>\n      <th>result</th>\n      <th>quarter</th>\n      <th>distance</th>\n      <th>receiver</th>\n      <th>score_before</th>\n      <th>score_after</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>1</td>\n      <td>2012-09-09</td>\n      <td>DEN</td>\n      <td>NaN</td>\n      <td>PIT</td>\n      <td>W 31-19</td>\n      <td>3</td>\n      <td>71</td>\n      <td>Demaryius Thomas</td>\n      <td>Trail 7-13</td>\n      <td>Lead 14-13*</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>1</td>\n      <td>2012-09-09</td>\n      <td>DEN</td>\n      <td>NaN</td>\n      <td>PIT</td>\n      <td>W 31-19</td>\n      <td>4</td>\n      <td>1</td>\n      <td>Jacob Tamme</td>\n      <td>Trail 14-19</td>\n      <td>Lead 22-19*</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>2</td>\n      <td>2012-09-17</td>\n      <td>DEN</td>\n      <td>@</td>\n      <td>ATL</td>\n      <td>L 21-27</td>\n      <td>2</td>\n      <td>17</td>\n      <td>Demaryius Thomas</td>\n      <td>Trail 0-20</td>\n      <td>Trail 7-20</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>3</td>\n      <td>2012-09-23</td>\n      <td>DEN</td>\n      <td>NaN</td>\n      <td>HOU</td>\n      <td>L 25-31</td>\n      <td>4</td>\n      <td>38</td>\n      <td>Brandon Stokley</td>\n      <td>Trail 11-31</td>\n      <td>Trail 18-31</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>3</td>\n      <td>2012-09-23</td>\n      <td>DEN</td>\n      <td>NaN</td>\n      <td>HOU</td>\n      <td>L 25-31</td>\n      <td>4</td>\n      <td>6</td>\n      <td>Joel Dreessen</td>\n      <td>Trail 18-31</td>\n      <td>Trail 25-31</td>\n    </tr>\n  </tbody>\n</table>\n\n<p>pandas' various reader functions have many parameters allowing you to do things like skipping lines of the file, parsing dates, or specifying how to handle NA/NULL datapoints.</p>\n<p>There's also a set of writer functions for writing to a variety of formats (CSVs, HTML tables, JSON). They function exactly as you'd expect and are typically called <code>to_format</code>:</p>\n<div class=\"highlight\"><pre><span></span><code><span class=\"n\">my_dataframe</span><span class=\"o\">.</span><span class=\"n\">to_csv</span><span class=\"p\">(</span><span class=\"s1\">&#39;path_to_file.csv&#39;</span><span class=\"p\">)</span>\n</code></pre></div>\n\n<p><a href=\"https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html\">Take a look at the IO documentation</a> to familiarize yourself with file reading/writing functionality.</p>\n<h4>Excel</h4>\n<p>Know who hates VBA? Me. I bet you do, too. Thankfully, pandas allows you to read and write Excel files, so you can easily read from Excel, write your code in Python, and then write back out to Excel - no need for VBA.</p>\n<p>Reading Excel files requires the <a href=\"https://pypi.org/project/xlrd/\">xlrd</a> library. You can install it via pip (pip install xlrd).</p>\n<p>Let's first write a DataFrame to Excel.</p>\n<div class=\"highlight\"><pre><span></span><code><span class=\"c1\"># this is the DataFrame we created from a dictionary earlier</span>\n<span class=\"n\">football</span><span class=\"o\">.</span><span class=\"n\">head</span><span class=\"p\">()</span>\n</code></pre></div>\n\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>year</th>\n      <th>team</th>\n      <th>wins</th>\n      <th>losses</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2010</td>\n      <td>Bears</td>\n      <td>11</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2011</td>\n      <td>Bears</td>\n      <td>8</td>\n      <td>8</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2012</td>\n      <td>Bears</td>\n      <td>10</td>\n      <td>6</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2011</td>\n      <td>Packers</td>\n      <td>15</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2012</td>\n      <td>Packers</td>\n      <td>11</td>\n      <td>5</td>\n    </tr>\n  </tbody>\n</table>\n\n<div class=\"highlight\"><pre><span></span><code><span class=\"c1\"># since our index on the football DataFrame is meaningless, let&#39;s not write it</span>\n<span class=\"n\">football</span><span class=\"o\">.</span><span class=\"n\">to_excel</span><span class=\"p\">(</span><span class=\"s1\">&#39;football.xlsx&#39;</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n</code></pre></div>\n\n<div class=\"highlight\"><pre><span></span><code>!ls -l *.xlsx\n</code></pre></div>\n\n<pre>\n-rw-r--r--@ 1 gjreda  staff  5665 Mar 26 17:58 football.xlsx\n</pre>\n\n<div class=\"highlight\"><pre><span></span><code><span class=\"c1\"># delete the DataFrame</span>\n<span class=\"k\">del</span> <span class=\"n\">football</span>\n</code></pre></div>\n\n<div class=\"highlight\"><pre><span></span><code><span class=\"c1\"># read from Excel</span>\n<span class=\"n\">football</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">read_excel</span><span class=\"p\">(</span><span class=\"s1\">&#39;football.xlsx&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Sheet1&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">football</span>\n</code></pre></div>\n\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>year</th>\n      <th>team</th>\n      <th>wins</th>\n      <th>losses</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2010</td>\n      <td>Bears</td>\n      <td>11</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2011</td>\n      <td>Bears</td>\n      <td>8</td>\n      <td>8</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2012</td>\n      <td>Bears</td>\n      <td>10</td>\n      <td>6</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2011</td>\n      <td>Packers</td>\n      <td>15</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2012</td>\n      <td>Packers</td>\n      <td>11</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>2010</td>\n      <td>Lions</td>\n      <td>6</td>\n      <td>10</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>2011</td>\n      <td>Lions</td>\n      <td>10</td>\n      <td>6</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>2012</td>\n      <td>Lions</td>\n      <td>4</td>\n      <td>12</td>\n    </tr>\n  </tbody>\n</table>\n\n<h4>Database</h4>\n<p>pandas also has some support for <a href=\"https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html\">reading/writing DataFrames directly from/to a database</a>. You'll typically just need to pass a connection object or sqlalchemy engine to the <code>read_sql</code> or <code>to_sql</code> functions within the <code>pandas.io</code> module.</p>\n<p>Note that <code>to_sql</code> executes as a series of INSERT INTO statements and thus trades speed for simplicity. If you're writing a large DataFrame to a database, it might be quicker to write the DataFrame to CSV and load that directly using the database's file import arguments.</p>\n<div class=\"highlight\"><pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">pandas.io</span> <span class=\"kn\">import</span> <span class=\"n\">sql</span>\n<span class=\"kn\">import</span> <span class=\"nn\">sqlite3</span>\n\n<span class=\"n\">conn</span> <span class=\"o\">=</span> <span class=\"n\">sqlite3</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"s1\">&#39;/Users/gjreda/Dropbox/gregreda.com/_code/towed&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;SELECT * FROM towed WHERE make = &#39;FORD&#39;;&quot;</span>\n\n<span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"n\">sql</span><span class=\"o\">.</span><span class=\"n\">read_sql</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"p\">,</span> <span class=\"n\">con</span><span class=\"o\">=</span><span class=\"n\">conn</span><span class=\"p\">)</span>\n<span class=\"n\">results</span><span class=\"o\">.</span><span class=\"n\">head</span><span class=\"p\">()</span>\n</code></pre></div>\n\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>tow_date</th>\n      <th>make</th>\n      <th>style</th>\n      <th>model</th>\n      <th>color</th>\n      <th>plate</th>\n      <th>state</th>\n      <th>towed_address</th>\n      <th>phone</th>\n      <th>inventory</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>01/19/2013</td>\n      <td>FORD</td>\n      <td>LL</td>\n      <td></td>\n      <td>RED</td>\n      <td>N786361</td>\n      <td>IL</td>\n      <td>400 E. Lower Wacker</td>\n      <td>(312) 744-7550</td>\n      <td>877040</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>01/19/2013</td>\n      <td>FORD</td>\n      <td>4D</td>\n      <td></td>\n      <td>GRN</td>\n      <td>L307211</td>\n      <td>IL</td>\n      <td>701 N. Sacramento</td>\n      <td>(773) 265-7605</td>\n      <td>6738005</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>01/19/2013</td>\n      <td>FORD</td>\n      <td>4D</td>\n      <td></td>\n      <td>GRY</td>\n      <td>P576738</td>\n      <td>IL</td>\n      <td>701 N. Sacramento</td>\n      <td>(773) 265-7605</td>\n      <td>6738001</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>01/19/2013</td>\n      <td>FORD</td>\n      <td>LL</td>\n      <td></td>\n      <td>BLK</td>\n      <td>N155890</td>\n      <td>IL</td>\n      <td>10300 S. Doty</td>\n      <td>(773) 568-8495</td>\n      <td>2699210</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>01/19/2013</td>\n      <td>FORD</td>\n      <td>LL</td>\n      <td></td>\n      <td>TAN</td>\n      <td>H953638</td>\n      <td>IL</td>\n      <td>10300 S. Doty</td>\n      <td>(773) 568-8495</td>\n      <td>2699209</td>\n    </tr>\n  </tbody>\n</table>\n\n<h4>Clipboard</h4>\n<p>While the results of a query can be read directly into a DataFrame, I prefer to read the results directly from the clipboard. I'm often tweaking queries in my SQL client (<a href=\"http://www.sequelpro.com/\">Sequel Pro</a>), so I would rather see the results before I read it into pandas. Once I'm confident I have the data I want, then I'll read it into a DataFrame.</p>\n<p>This works just as well with any type of delimited data you've copied to your clipboard. The function does a good job of inferring the delimiter, but you can also use the sep parameter to be explicit.</p>\n<p><a href=\"https://www.baseball-reference.com/players/a/aaronha01.shtml\">Hank Aaron</a></p>\n<p><img src=\"http://i.imgur.com/xiySJ2e.png\" alt=\"hank-aaron-stats-screenshot\"></p>\n<div class=\"highlight\"><pre><span></span><code><span class=\"n\">hank</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">read_clipboard</span><span class=\"p\">()</span>\n<span class=\"n\">hank</span><span class=\"o\">.</span><span class=\"n\">head</span><span class=\"p\">()</span>\n</code></pre></div>\n\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Year</th>\n      <th>Age</th>\n      <th>Tm</th>\n      <th>Lg</th>\n      <th>G</th>\n      <th>PA</th>\n      <th>AB</th>\n      <th>R</th>\n      <th>H</th>\n      <th>2B</th>\n      <th>3B</th>\n      <th>HR</th>\n      <th>RBI</th>\n      <th>SB</th>\n      <th>CS</th>\n      <th>BB</th>\n      <th>SO</th>\n      <th>BA</th>\n      <th>OBP</th>\n      <th>SLG</th>\n      <th>OPS</th>\n      <th>OPS+</th>\n      <th>TB</th>\n      <th>GDP</th>\n      <th>HBP</th>\n      <th>SH</th>\n      <th>SF</th>\n      <th>IBB</th>\n      <th>Pos</th>\n      <th>Awards</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1954</td>\n      <td>20</td>\n      <td>MLN</td>\n      <td>NL</td>\n      <td>122</td>\n      <td>509</td>\n      <td>468</td>\n      <td>58</td>\n      <td>131</td>\n      <td>27</td>\n      <td>6</td>\n      <td>13</td>\n      <td>69</td>\n      <td>2</td>\n      <td>2</td>\n      <td>28</td>\n      <td>39</td>\n      <td>0.280</td>\n      <td>0.322</td>\n      <td>0.447</td>\n      <td>0.769</td>\n      <td>104</td>\n      <td>209</td>\n      <td>13</td>\n      <td>3</td>\n      <td>6</td>\n      <td>4</td>\n      <td>NaN</td>\n      <td>*79</td>\n      <td>RoY-4</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1955 â˜…</td>\n      <td>21</td>\n      <td>MLN</td>\n      <td>NL</td>\n      <td>153</td>\n      <td>665</td>\n      <td>602</td>\n      <td>105</td>\n      <td>189</td>\n      <td>37</td>\n      <td>9</td>\n      <td>27</td>\n      <td>106</td>\n      <td>3</td>\n      <td>1</td>\n      <td>49</td>\n      <td>61</td>\n      <td>0.314</td>\n      <td>0.366</td>\n      <td>0.540</td>\n      <td>0.906</td>\n      <td>141</td>\n      <td>325</td>\n      <td>20</td>\n      <td>3</td>\n      <td>7</td>\n      <td>4</td>\n      <td>5</td>\n      <td>*974</td>\n      <td>AS,MVP-9</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1956 â˜…</td>\n      <td>22</td>\n      <td>MLN</td>\n      <td>NL</td>\n      <td>153</td>\n      <td>660</td>\n      <td>609</td>\n      <td>106</td>\n      <td>200</td>\n      <td>34</td>\n      <td>14</td>\n      <td>26</td>\n      <td>92</td>\n      <td>2</td>\n      <td>4</td>\n      <td>37</td>\n      <td>54</td>\n      <td>0.328</td>\n      <td>0.365</td>\n      <td>0.558</td>\n      <td>0.923</td>\n      <td>151</td>\n      <td>340</td>\n      <td>21</td>\n      <td>2</td>\n      <td>5</td>\n      <td>7</td>\n      <td>6</td>\n      <td>*9</td>\n      <td>AS,MVP-3</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1957 â˜…</td>\n      <td>23</td>\n      <td>MLN</td>\n      <td>NL</td>\n      <td>151</td>\n      <td>675</td>\n      <td>615</td>\n      <td>118</td>\n      <td>198</td>\n      <td>27</td>\n      <td>6</td>\n      <td>44</td>\n      <td>132</td>\n      <td>1</td>\n      <td>1</td>\n      <td>57</td>\n      <td>58</td>\n      <td>0.322</td>\n      <td>0.378</td>\n      <td>0.600</td>\n      <td>0.978</td>\n      <td>166</td>\n      <td>369</td>\n      <td>13</td>\n      <td>0</td>\n      <td>0</td>\n      <td>3</td>\n      <td>15</td>\n      <td>*98</td>\n      <td>AS,MVP-1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1958 â˜…</td>\n      <td>24</td>\n      <td>MLN</td>\n      <td>NL</td>\n      <td>153</td>\n      <td>664</td>\n      <td>601</td>\n      <td>109</td>\n      <td>196</td>\n      <td>34</td>\n      <td>4</td>\n      <td>30</td>\n      <td>95</td>\n      <td>4</td>\n      <td>1</td>\n      <td>59</td>\n      <td>49</td>\n      <td>0.326</td>\n      <td>0.386</td>\n      <td>0.546</td>\n      <td>0.931</td>\n      <td>152</td>\n      <td>328</td>\n      <td>21</td>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>16</td>\n      <td>*98</td>\n      <td>AS,MVP-3,GG</td>\n    </tr>\n  </tbody>\n</table>\n\n<h4>URL</h4>\n<p>With <code>read_table</code>, we can also read directly from a URL.</p>\n<p>Let's use the <a href=\"https://raw.githubusercontent.com/gjreda/best-sandwiches/master/data/best-sandwiches-geocode.tsv\">best sandwiches data</a> that I <a href=\"/2013/05/06/more-web-scraping-with-python/\">wrote about scraping</a> a while back.</p>\n<div class=\"highlight\"><pre><span></span><code><span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;https://raw.github.com/gjreda/best-sandwiches/master/data/best-sandwiches-geocode.tsv&#39;</span>\n\n<span class=\"c1\"># fetch the text from the URL and read it into a DataFrame</span>\n<span class=\"n\">from_url</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">read_table</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"n\">sep</span><span class=\"o\">=</span><span class=\"s1\">&#39;</span><span class=\"se\">\\t</span><span class=\"s1\">&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">from_url</span><span class=\"o\">.</span><span class=\"n\">head</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n</code></pre></div>\n\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>rank</th>\n      <th>sandwich</th>\n      <th>restaurant</th>\n      <th>description</th>\n      <th>price</th>\n      <th>address</th>\n      <th>city</th>\n      <th>phone</th>\n      <th>website</th>\n      <th>full_address</th>\n      <th>formatted_address</th>\n      <th>lat</th>\n      <th>lng</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>BLT</td>\n      <td>Old Oak Tap</td>\n      <td>The B is applewood smoked&amp;mdash;nice and snapp...</td>\n      <td>$10</td>\n      <td>2109 W. Chicago Ave.</td>\n      <td>Chicago</td>\n      <td>773-772-0406</td>\n      <td>theoldoaktap.com</td>\n      <td>2109 W. Chicago Ave., Chicago</td>\n      <td>2109 West Chicago Avenue, Chicago, IL 60622, USA</td>\n      <td>41.895734</td>\n      <td>-87.679960</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>Fried Bologna</td>\n      <td>Au Cheval</td>\n      <td>Thought your bologna-eating days had retired w...</td>\n      <td>$9</td>\n      <td>800 W. Randolph St.</td>\n      <td>Chicago</td>\n      <td>312-929-4580</td>\n      <td>aucheval.tumblr.com</td>\n      <td>800 W. Randolph St., Chicago</td>\n      <td>800 West Randolph Street, Chicago, IL 60607, USA</td>\n      <td>41.884672</td>\n      <td>-87.647754</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>Woodland Mushroom</td>\n      <td>Xoco</td>\n      <td>Leave it to Rick Bayless and crew to come up w...</td>\n      <td>$9.50.</td>\n      <td>445 N. Clark St.</td>\n      <td>Chicago</td>\n      <td>312-334-3688</td>\n      <td>rickbayless.com</td>\n      <td>445 N. Clark St., Chicago</td>\n      <td>445 North Clark Street, Chicago, IL 60654, USA</td>\n      <td>41.890602</td>\n      <td>-87.630925</td>\n    </tr>\n  </tbody>\n</table>\n\n<p><em>Move onto the next section, which covers <a href=\"/2013/10/26/working-with-pandas-dataframes/\">working with DataFrames</a>.</em></p>",
  "category": [
    "",
    "",
    "",
    "",
    "",
    ""
  ]
}