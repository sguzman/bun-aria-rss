{
  "title": "Find similar words in ESG data with Natural Language Processing",
  "link": "https://blogs.sas.com/content/subconsciousmusings/2022/10/20/similar-words-esg-data-nlp/",
  "comments": "https://blogs.sas.com/content/subconsciousmusings/2022/10/20/similar-words-esg-data-nlp/#respond",
  "dc:creator": "Meilan Ji",
  "pubDate": "Thu, 20 Oct 2022 13:00:30 +0000",
  "category": [
    "Uncategorized",
    "Analytics R&D",
    "Corpus Analysis",
    "data culture and fluency",
    "data scientist",
    "ESG",
    "Natural Language Generation (NLG)",
    "natural language processing",
    "Text analytics"
  ],
  "guid": "https://blogs.sas.com/content/subconsciousmusings/?p=13956",
  "description": "<p>Using such features and Natural Language Processing capabilities like text parsing and information extraction in SAS Visual Text Analytics (VTA) helps us uncover emerging trends and unlock the value of unstructured text data. </p>\n<p>The post <a rel=\"nofollow\" href=\"https://blogs.sas.com/content/subconsciousmusings/2022/10/20/similar-words-esg-data-nlp/\">Find similar words in ESG data with Natural Language Processing</a> appeared first on <a rel=\"nofollow\" href=\"https://blogs.sas.com/content/subconsciousmusings\">The SAS Data Science Blog</a>.</p>\n",
  "content:encoded": "<p>When building information extraction models using rule-based approaches, one challenge is discovering the right vocabulary to add to the rule set. What if we could use a similarity metric to discover such words and quickly expand our model coverage? Using such features and Natural Language Processing capabilities like text parsing and information extraction in <a href=\"https://support.sas.com/en/software/visual-text-analytics-support.html\">SAS Visual Text Analytics</a> helps us uncover emerging trends and unlock the value of unstructured text data.</p>\n<p>As a data scientist, I want to build a model to extract information about company performance related to ESG metrics. ESG stands for Environmental, Social, and Governance, and these metrics and related strategies go hand in hand with strong financial performance. Investors want to know what ESG areas that companies are focusing on and what improvements they are targeting. I will build a model to discover this information from corporate ESG reports. In this blog post, I will explore how to use SAS Visual Text Analytics and <a href=\"https://support.sas.com/en/software/studio-support.html\">SAS Studio</a> interactively to achieve this goal.</p>\n<h2>Prepare the data and term list</h2>\n<p>The data consists of various company reports, such as CRI reports, CSR reports, Env Reports, 10K reports, etc. obtained from their official websites. Before feeding them to the model, the data was pre-processed including file conversion (convert PDF into text), splitting into paragraphs, and removing duplicates and noises. For data variables, I extracted and kept the “Company” and “Year” variables in the data for trend analysis. Finally, I came up with a 26MB-sized dataset, comprised of 157 reports for the companies of interest. I uploaded this data to <a href=\"https://support.sas.com/en/software/sas-data-preparation-support.html\">SAS Data Explorer</a> and visualized it using <a href=\"https://support.sas.com/en/software/visual-analytics-support.html\">SAS Visual Analytics</a>.</p>\n<p><a href=\"https://blogs.sas.com/content/subconsciousmusings/files/2022/10/Data-overview.png\"><img loading=\"lazy\" class=\"aligncenter size-large wp-image-13991\" src=\"https://blogs.sas.com/content/subconsciousmusings/files/2022/10/Data-overview-1024x754.png\" alt=\"\" width=\"702\" height=\"517\" srcset=\"https://blogs.sas.com/content/subconsciousmusings/files/2022/10/Data-overview-1024x754.png 1024w, https://blogs.sas.com/content/subconsciousmusings/files/2022/10/Data-overview-300x221.png 300w, https://blogs.sas.com/content/subconsciousmusings/files/2022/10/Data-overview-768x566.png 768w, https://blogs.sas.com/content/subconsciousmusings/files/2022/10/Data-overview.png 1472w\" sizes=\"(max-width: 702px) 100vw, 702px\" /></a></p>\n<p>I have a rough idea of how the data is distributed and want to gain more insights from the text data. For example, what areas of ESG do companies focus on most? How has their reporting changed in the past 5 years?</p>\n<p>To answer the questions, I collected a starting list of ESG terms from ESG-related websites.</p>\n<table>\n<tbody>\n<tr>\n<td><i><span style=\"padding-right: 20px\">Environmental</span><br />\n(21)</i></td>\n<td><i>environment, environmental, sustainable, sustainability, biodiversity, renewable, green, climate, material, energy, wind, solar, forest, water, waste, carbon, emission, effluent, pollutant, hazardous, disposal</i></td>\n</tr>\n<tr>\n<td><i>Social<br />\n(26)<br />\n</i></td>\n<td><i>reputation, ethic, ethics, labor, employment, employee, compensation, pay, occupational, health, safety, equity, equal, fairness, transparent, transparency, bias, training, education, diverse, diversity, discrimination, nondiscrimination, freedom, minority, woman</i></td>\n</tr>\n<tr>\n<td><i>Governance<br />\n(17)<br />\n</i></td>\n<td><i>compliance, regulation, planning, value, economic, financial, business, strategy, performance, risk, innovation, stakeholder, management, process, opportunity, responsible, responsibilityl</i></td>\n</tr>\n</tbody>\n</table>\n<p>&nbsp;</p>\n<p>This term list is not large. And the terms like \"emission\" and \"energy\" may have hyponyms such as \"air emission, co2 emission\", \"solar energy, wind energy\", etc. Also, when checking the terms on the Text Parsing node I found some high-frequency terms that were not on my list, such as \"recycle, electricity, security\". It seems that this list is not sufficient to cover the breadth of the ESG topic areas. I want to extend the term lists in the model with the relevant ones used in their reports without reading through all the data we collected.</p>\n<p>Next, let’s explore how to expand the terms on SAS Visual Text Analytics and SAS Studio.</p>\n<h2>Find similar words on SAS Visual Text Analytics</h2>\n<p>The Text Parsing node on SAS Visual Text Analytics finds all the terms in my data and groups the variants of terms via word tokenization and lemmatization. In addition, multiword concepts are detected as noun groups and added to the terms list. Another function, “Find similar”, finds terms in the training data that share a similar context with the target vocabulary and assigns them a similarity score. The similarity scores indicate how likely it is that other terms appear in the same context as a selected term.</p>\n<p>Now, I am using this function to expand our vocabulary. The table below shows the similar words for the search term “carbon” sorted by similarity score. We can see that similar words for the word ‘carbon’ contain many carbon-related phrases used in the data, such as “carbon offset, carbon emission, carbon footprint, carbon neutrality” and so on. Also, we can find the words that do not contain “carbon”, such as “footprint, net zero goal, removal solution”, etc., but are somewhat related.</p>\n<p><a href=\"https://blogs.sas.com/content/subconsciousmusings/files/2022/10/Similarities-for-the-term-carbon.png\"><img loading=\"lazy\" class=\"aligncenter size-large wp-image-13997\" src=\"https://blogs.sas.com/content/subconsciousmusings/files/2022/10/Similarities-for-the-term-carbon-1024x478.png\" alt=\"\" width=\"702\" height=\"328\" srcset=\"https://blogs.sas.com/content/subconsciousmusings/files/2022/10/Similarities-for-the-term-carbon-1024x478.png 1024w, https://blogs.sas.com/content/subconsciousmusings/files/2022/10/Similarities-for-the-term-carbon-300x140.png 300w, https://blogs.sas.com/content/subconsciousmusings/files/2022/10/Similarities-for-the-term-carbon-768x359.png 768w, https://blogs.sas.com/content/subconsciousmusings/files/2022/10/Similarities-for-the-term-carbon.png 1512w\" sizes=\"(max-width: 702px) 100vw, 702px\" /></a></p>\n<p>The similar words generated by the “Find Similar” function behind the SAS Visual Text Analytics look helpful although we need to manually filter out some less relevant words.</p>\n<p>Can we utilize this function to programmatically get similar words for a word list in batch? Before answering this question, let’s see how it is working behind the scenes. You’ll find the key points in the log for the “Text Parsing” node. Here, the tpAccumulate action outputs a 'parent' table that contains a compressed representation of the sparse term-by-document matrix and a 'term' table that contains the summary information about the terms in the document collection. The tmSvd reduces the dimensionality of the matrix into reduced dimensions using these two tables. Then, the tmFindSimilar action computes similarity scores of terms based on singular value decomposition (SVD) projections.</p>\n<h2>Find similar words programmatically in SAS Studio</h2>\n<p>Armed with this understanding, we can move to SAS Studio for programming. Here, you can write SAS or Python programs as you like. I will use Python to demonstrate.</p>\n<h3>Import libraries and connect to CAS server</h3>\n<p>Connect to the CAS server of the working environment and import the Python SWAT package to run CAS actions.</p>\n\n<div class=\"wp_syntax\"><table><tr><td class=\"code\"><pre class=\"sas\" style=\"font-family:monospace;\"># Import libraries\n<span style=\"color: #0000ff;\">from</span> swat import <span style=\"color: #006400; font-style: italic;\">*\nimport pandas as pd\n&nbsp;\n# Connect to CAS server\nhost = 'sas-cas-server-default-client'\n&nbsp;\ns = CAS(host , 5570, username, password, timeout=1e7)\ns.sessionprop.setsessopt(caslib='CASUSER', timeout=1e7)\n&nbsp;\n# Load CAS action sets\ns.loadactionset('textManagement')\ns.loadactionset('textMining')\ns.loadactionset('textUtil')\ns.loadactionset('fedSql')\ns.loadactionset('textParse')</span></pre></td></tr></table></div>\n\n<h3>Generate Document Term Matrix using tmMine action</h3>\n<p>You can write the program by referring to the code snippet from the log. I used the tmMine action which combines the tpParse, tpAccumulate, and SVD functionality into one. This action helps to make the code more concise.</p>\n\n<div class=\"wp_syntax\"><table><tr><td class=\"code\"><pre class=\"sas\" style=\"font-family:monospace;\"># Terms <span style=\"color: #0000ff;\">and</span> word projection tables are created using the tmMine action\ns.tmMine<span style=\"color: #66cc66;\">&#40;</span>docId=<span style=\"color: #a020f0;\">'did'</span>,\n         text=<span style=\"color: #a020f0;\">'text'</span>,\n         documents=dict<span style=\"color: #66cc66;\">&#40;</span>name=<span style=\"color: #a020f0;\">'ALL_REPORTS_ID'</span><span style=\"color: #66cc66;\">&#41;</span>,\n         terms=dict<span style=\"color: #66cc66;\">&#40;</span>name=<span style=\"color: #a020f0;\">'terms'</span>, <span style=\"color: #0000ff;\">replace</span>=True<span style=\"color: #66cc66;\">&#41;</span>,\n         parent=dict<span style=\"color: #66cc66;\">&#40;</span>name=<span style=\"color: #a020f0;\">'parent'</span>, <span style=\"color: #0000ff;\">replace</span>=True<span style=\"color: #66cc66;\">&#41;</span>,\n         reduce=<span style=\"color: #2e8b57; font-weight: bold;\">4</span>,\n         k=<span style=\"color: #2e8b57; font-weight: bold;\">160</span>,\n         wordPro=dict<span style=\"color: #66cc66;\">&#40;</span>name=<span style=\"color: #a020f0;\">'svdout'</span>, <span style=\"color: #0000ff;\">replace</span>=True<span style=\"color: #66cc66;\">&#41;</span><span style=\"color: #66cc66;\">&#41;</span></pre></td></tr></table></div>\n\n<h3>Convert Terms table to SAS data frame and create term to termnum map</h3>\n<p>Because the tmFindSimilar action searches by term ID, we need to get the term IDs for the seed term list. To do this, I converted the ‘terms’ table to a SASDataFrame and created a dictionary to map terms and term IDs. The terms have different term IDs for their different part-of-speech tags. Thus, one term may have more than one term ID.</p>\n\n<div class=\"wp_syntax\"><table><tr><td class=\"code\"><pre class=\"sas\" style=\"font-family:monospace;\"># <span style=\"color: #0000ff;\">Create</span> term-to-termnum map\ndf_terms = s.CASTable<span style=\"color: #66cc66;\">&#40;</span>name=<span style=\"color: #a020f0;\">'terms'</span><span style=\"color: #66cc66;\">&#41;</span>.to_frame<span style=\"color: #66cc66;\">&#40;</span><span style=\"color: #66cc66;\">&#41;</span>\ndict_termnum = <span style=\"color: #66cc66;\">&#123;</span><span style=\"color: #66cc66;\">&#125;</span>\nfor term, termnum <span style=\"color: #0000ff;\">in</span> <span style=\"color: #0000ff;\">list</span><span style=\"color: #66cc66;\">&#40;</span>zip<span style=\"color: #66cc66;\">&#40;</span>df_terms._Term_, df_terms._Termnum_<span style=\"color: #66cc66;\">&#41;</span><span style=\"color: #66cc66;\">&#41;</span>:\n    <span style=\"color: #0000ff;\">if</span> term <span style=\"color: #0000ff;\">in</span> dict_termnum:\n        dict_termnum<span style=\"color: #66cc66;\">&#91;</span>term<span style=\"color: #66cc66;\">&#93;</span>.<span style=\"color: #0000ff;\">add</span><span style=\"color: #66cc66;\">&#40;</span>termnum<span style=\"color: #66cc66;\">&#41;</span>\n    <span style=\"color: #0000ff;\">else</span>:\n        dict_termnum<span style=\"color: #66cc66;\">&#91;</span>term<span style=\"color: #66cc66;\">&#93;</span> = <span style=\"color: #0000ff;\">set</span><span style=\"color: #66cc66;\">&#40;</span><span style=\"color: #66cc66;\">&#41;</span>\n        dict_termnum<span style=\"color: #66cc66;\">&#91;</span>term<span style=\"color: #66cc66;\">&#93;</span>.<span style=\"color: #0000ff;\">add</span><span style=\"color: #66cc66;\">&#40;</span>termnum<span style=\"color: #66cc66;\">&#41;</span></pre></td></tr></table></div>\n\n<h3>Find top N similar words</h3>\n<p>Next, I created a findSimilar function that utilizes the tmFindSimilar action to generate the top N similar words for a targeted word. I also have some ideas on narrowing down the candidate terms given that:</p>\n<ul>\n<li>They are likely not <a href=\"https://en.wikipedia.org/wiki/Stop_word\">stop words</a></li>\n<li>They are more likely to be nouns, noun phrases, adjectives or verbs</li>\n</ul>\n\n<div class=\"wp_syntax\"><table><tr><td class=\"code\"><pre class=\"sas\" style=\"font-family:monospace;\">def findSimilar<span style=\"color: #66cc66;\">&#40;</span>termid, model=<span style=\"color: #a020f0;\">'svdout'</span>, <span style=\"color: #0000ff;\">n</span>=<span style=\"color: #2e8b57; font-weight: bold;\">20</span><span style=\"color: #66cc66;\">&#41;</span>:\n    s.tmFindSimilar<span style=\"color: #66cc66;\">&#40;</span><span style=\"color: #0000ff;\">table</span>=dict<span style=\"color: #66cc66;\">&#40;</span>name=model<span style=\"color: #66cc66;\">&#41;</span>,\n                    termnum=termid,\n                    nSVD=<span style=\"color: #2e8b57; font-weight: bold;\">160</span>,\n                    casout=dict<span style=\"color: #66cc66;\">&#40;</span>name=<span style=\"color: #a020f0;\">'casout'</span>, <span style=\"color: #0000ff;\">replace</span>=True<span style=\"color: #66cc66;\">&#41;</span>,\n                    prefix=<span style=\"color: #a020f0;\">'col'</span><span style=\"color: #66cc66;\">&#41;</span>\n&nbsp;\n    s.fedSql.execDirect<span style=\"color: #66cc66;\">&#40;</span>casout=dict<span style=\"color: #66cc66;\">&#40;</span>name=<span style=\"color: #a020f0;\">'outsimilarTerms'</span>, <span style=\"color: #0000ff;\">replace</span>=True<span style=\"color: #66cc66;\">&#41;</span>,\n                    query=<span style=\"color: #a020f0;\">\"select a._term_, a._role_, b.* from (select * from terms where _ispar_ != '.' and _keep_='Y' and _role_ in ('N','nlpNounGroup','A', 'V')) a join casout b on a._termnum_ =b._termnum_ \"</span><span style=\"color: #66cc66;\">&#41;</span>\n&nbsp;\n    df_similar = s.CASTable<span style=\"color: #66cc66;\">&#40;</span>name=<span style=\"color: #a020f0;\">'outsimilarTerms'</span>,<span style=\"color: #66cc66;\">&#41;</span>.sort_values<span style=\"color: #66cc66;\">&#40;</span><span style=\"color: #0000ff;\">by</span>=<span style=\"color: #a020f0;\">\"_Similar_\"</span>, ascending=False<span style=\"color: #66cc66;\">&#41;</span>.to_frame<span style=\"color: #66cc66;\">&#40;</span><span style=\"color: #66cc66;\">&#41;</span>.head<span style=\"color: #66cc66;\">&#40;</span><span style=\"color: #0000ff;\">n</span><span style=\"color: #66cc66;\">&#41;</span>\n&nbsp;\n    <span style=\"color: #0000ff;\">return</span> df_similar</pre></td></tr></table></div>\n\n<p>Now, I can use the findSimilar function to generate similar words for a word list and rank them by the times they are recommended. Also, I can exclude the candidates belonging to the seed list and those where the length is shorter than 4 characters.</p>\n\n<div class=\"wp_syntax\"><table><tr><td class=\"code\"><pre class=\"sas\" style=\"font-family:monospace;\">def findSimilarSet<span style=\"color: #66cc66;\">&#40;</span>word_list, dict_termnum<span style=\"color: #66cc66;\">&#41;</span>:\n    cand_dic = dict<span style=\"color: #66cc66;\">&#40;</span><span style=\"color: #66cc66;\">&#41;</span>\n    for word <span style=\"color: #0000ff;\">in</span> word_list:\n        <span style=\"color: #0000ff;\">if</span> word <span style=\"color: #0000ff;\">in</span> dict_termnum:\n            termids = dict_termnum<span style=\"color: #66cc66;\">&#91;</span>word<span style=\"color: #66cc66;\">&#93;</span>\n            for termid <span style=\"color: #0000ff;\">in</span> termids:\n                try:\n                    df_tmp = findSimilar<span style=\"color: #66cc66;\">&#40;</span>termid<span style=\"color: #66cc66;\">&#41;</span>\n                    for term <span style=\"color: #0000ff;\">in</span> <span style=\"color: #0000ff;\">list</span><span style=\"color: #66cc66;\">&#40;</span>df_tmp._Term_<span style=\"color: #66cc66;\">&#41;</span>:\n                        <span style=\"color: #0000ff;\">if</span> <span style=\"color: #0000ff;\">not</span> term <span style=\"color: #0000ff;\">in</span> word_list <span style=\"color: #0000ff;\">and</span> len<span style=\"color: #66cc66;\">&#40;</span>term<span style=\"color: #66cc66;\">&#41;</span><span style=\"color: #0000ff; font-weight: bold;\">&gt</span>;<span style=\"color: #2e8b57; font-weight: bold;\">4</span>:\n                            <span style=\"color: #0000ff;\">if</span> term <span style=\"color: #0000ff;\">in</span> cand_dic:\n                                cand_dic<span style=\"color: #66cc66;\">&#91;</span>term<span style=\"color: #66cc66;\">&#93;</span> += <span style=\"color: #2e8b57; font-weight: bold;\">1</span>\n                            <span style=\"color: #0000ff;\">else</span>:\n                                cand_dic<span style=\"color: #66cc66;\">&#91;</span>term<span style=\"color: #66cc66;\">&#93;</span> = <span style=\"color: #2e8b57; font-weight: bold;\">1</span>\n                except:\n                    pass\n    cand_dic = dict<span style=\"color: #66cc66;\">&#40;</span>sorted<span style=\"color: #66cc66;\">&#40;</span>cand_dic.items<span style=\"color: #66cc66;\">&#40;</span><span style=\"color: #66cc66;\">&#41;</span>, <span style=\"color: #0000ff;\">key</span>=lambda item: item<span style=\"color: #66cc66;\">&#91;</span><span style=\"color: #2e8b57; font-weight: bold;\">1</span><span style=\"color: #66cc66;\">&#93;</span>, <span style=\"color: #0000ff;\">reverse</span>=True<span style=\"color: #66cc66;\">&#41;</span><span style=\"color: #66cc66;\">&#41;</span>\n    <span style=\"color: #0000ff;\">return</span> cand_dic</pre></td></tr></table></div>\n\n<p>All set. Let’s try with the environmental term list.</p>\n\n<div class=\"wp_syntax\"><table><tr><td class=\"code\"><pre class=\"sas\" style=\"font-family:monospace;\">ESG_terms = <span style=\"color: #66cc66;\">&#91;</span><span style=\"color: #a020f0;\">\"environment\"</span>, <span style=\"color: #a020f0;\">\"environmental\"</span>, <span style=\"color: #a020f0;\">\"sustainable\"</span>, \n             <span style=\"color: #a020f0;\">\"sustainability\"</span>, <span style=\"color: #a020f0;\">\"biodiversity\"</span>, <span style=\"color: #a020f0;\">\"renewable\"</span>, <span style=\"color: #a020f0;\">\"green\"</span>, \n             <span style=\"color: #a020f0;\">\"climate\"</span>, <span style=\"color: #a020f0;\">\"material\"</span>, <span style=\"color: #a020f0;\">\"energy\"</span>, <span style=\"color: #a020f0;\">\"wind\"</span>, <span style=\"color: #a020f0;\">\"solar\"</span>, <span style=\"color: #a020f0;\">\"forest\"</span>, \n             <span style=\"color: #a020f0;\">\"water\"</span>, <span style=\"color: #a020f0;\">\"waste\"</span>, <span style=\"color: #a020f0;\">\"carbon\"</span>, <span style=\"color: #a020f0;\">\"emission\"</span>, <span style=\"color: #a020f0;\">\"effluent\"</span>, <span style=\"color: #a020f0;\">\"pollutant\"</span>, \n              <span style=\"color: #a020f0;\">\"hazardous\"</span>, <span style=\"color: #a020f0;\">\"disposal\"</span><span style=\"color: #66cc66;\">&#93;</span>\n&nbsp;\ncand_dic=findSimilarSet<span style=\"color: #66cc66;\">&#40;</span>ESG_terms, dict_termnum<span style=\"color: #66cc66;\">&#41;</span>\n&nbsp;\nprint<span style=\"color: #66cc66;\">&#40;</span><span style=\"color: #a020f0;\">'%s similar terms generated in total'</span> %len<span style=\"color: #66cc66;\">&#40;</span>cand_dic.items<span style=\"color: #66cc66;\">&#40;</span><span style=\"color: #66cc66;\">&#41;</span><span style=\"color: #66cc66;\">&#41;</span><span style=\"color: #66cc66;\">&#41;</span>\nsimilar_dic = <span style=\"color: #66cc66;\">&#123;</span><span style=\"color: #a020f0;\">\"similar_term\"</span>:<span style=\"color: #66cc66;\">&#91;</span><span style=\"color: #66cc66;\">&#93;</span>, <span style=\"color: #a020f0;\">\"recommended_times\"</span>:<span style=\"color: #66cc66;\">&#91;</span><span style=\"color: #66cc66;\">&#93;</span>, <span style=\"color: #a020f0;\">\"term_frequency\"</span>:<span style=\"color: #66cc66;\">&#91;</span><span style=\"color: #66cc66;\">&#93;</span><span style=\"color: #66cc66;\">&#125;</span>\nfor word, freq <span style=\"color: #0000ff;\">in</span> cand_dic.items<span style=\"color: #66cc66;\">&#40;</span><span style=\"color: #66cc66;\">&#41;</span>:\n    similar_dic<span style=\"color: #66cc66;\">&#91;</span><span style=\"color: #a020f0;\">\"similar_term\"</span><span style=\"color: #66cc66;\">&#93;</span>.append<span style=\"color: #66cc66;\">&#40;</span>word<span style=\"color: #66cc66;\">&#41;</span>\n    similar_dic<span style=\"color: #66cc66;\">&#91;</span><span style=\"color: #a020f0;\">\"recommended_times\"</span><span style=\"color: #66cc66;\">&#93;</span>.append<span style=\"color: #66cc66;\">&#40;</span>freq<span style=\"color: #66cc66;\">&#41;</span>\n&nbsp;\nprint<span style=\"color: #66cc66;\">&#40;</span>pd.DataFrame.from_dict<span style=\"color: #66cc66;\">&#40;</span>similar_dic<span style=\"color: #66cc66;\">&#41;</span>.head<span style=\"color: #66cc66;\">&#40;</span><span style=\"color: #2e8b57; font-weight: bold;\">20</span><span style=\"color: #66cc66;\">&#41;</span><span style=\"color: #66cc66;\">&#41;</span></pre></td></tr></table></div>\n\n<p>Output:</p>\n<p><a href=\"https://blogs.sas.com/content/subconsciousmusings/files/2022/10/Output.png\"><img loading=\"lazy\" class=\"alignnone size-full wp-image-14027\" src=\"https://blogs.sas.com/content/subconsciousmusings/files/2022/10/Output.png\" alt=\"\" width=\"544\" height=\"392\" srcset=\"https://blogs.sas.com/content/subconsciousmusings/files/2022/10/Output.png 1008w, https://blogs.sas.com/content/subconsciousmusings/files/2022/10/Output-300x216.png 300w, https://blogs.sas.com/content/subconsciousmusings/files/2022/10/Output-768x553.png 768w, https://blogs.sas.com/content/subconsciousmusings/files/2022/10/Output-536x386.png 536w\" sizes=\"(max-width: 544px) 100vw, 544px\" /></a></p>\n<p>It generated 635 similar words for this term list. “Renewable energy” was recommended 8 times and ‘solar energy’ was recommended 6 times. The table below shows similar words with a frequency greater than 2, which means they are recommended more than two times.</p>\n<h3>Similar words for Environmental term list (Frequency > 2)</h3>\n<table>\n<tbody>\n<tr>\n<td><i>renewable energy<br />\nenergy generation<br />\nsolar energy<br />\nunplanned water<br />\nenergy project<br />\nutility-scale<br />\npower capacity<br />\nenergy initiative<br />\nneutral<br />\n<span style=\"padding-right: 20px\">corporate renewable energy</span><br />\nrenewable power<br />\nnonhazardous waste</i></td>\n<td><i>wind farm<br />\nsolar array<br />\nsolar farm<br />\nenergy match<br />\nclean<br />\n<span style=\"padding-right: 20px\">carbon reduction</span><br />\ncarbon emission<br />\nsurface water<br />\nfreshwater<br />\nwater stress<br />\nlandfill<br />\nfinal disposal<br />\n</i></td>\n<td><i>non-hazardous<br />\nnonhazardous<br />\nhazardous waste<br />\nair emission<br />\nsustainability goal<br />\nelectricity demand<br />\ngrid mix<br />\ngeothermal<br />\n<span style=\"padding-right: 20px\">renewable electricity</span><br />\nenergy deal<br />\nnew wind<br />\nwind energy</i></td>\n<td><i>new solar farm<br />\nsolar power<br />\nwater-related<br />\nwater consumption<br />\nwater withdrawal<br />\nwater usage<br />\n<span style=\"padding-right: 20px\">waste management program</span><br />\ncarbon offset<br />\ncarbon footprint<br />\ndioxide<br />\ncarbon negative<br />\nfootprint</i></td>\n</tr>\n</tbody>\n</table>\n<p>The similar words generated for the environmental word list look promising! In addition, using a word list instead of a single word to generate similar words allows more “important” words to come first. I only need to review the suggested vocabulary list and filter out some irrelevant words.</p>\n<p>Similarly, I ended up with 717 and 542 similar words for my Governance and Social term list respectively.</p>\n<h2>Information extraction model and visualization</h2>\n<p>Now I have a richer vocabulary after a quick check and filtering out irrelevant words. Next, I want to build an information extraction model on the SAS Visual Text Analytics Concept node to continue the exploration. For such unstructured text data without any labels, the LITI rule-based model is a good choice. I can also take advantage of the predefined concepts such as nlpPercent, nlpMoney, and nlpMeasure to help identify ESG-related metrics. Then, create fact rules using ESG terms and metrics concepts. With expanded ESG-related terms, the model returned 1.7k more fact matches. This number wasn't noticeable since the refined terms didn't contribute much to the number. For example, the \"energy\" initially returned 825 results, while the refined model only returned 26 more results. But what I see in the results are more granular terms, such as \"renewable energy, clean energy, solar energy, carbon-free energy\", etc.</p>\n<p>After some post-processing of the results, I was ready to create a report in Visual Analytics. On the left part, I added a bar chart with the frequency of company on the ESG report and a pie chart with the frequency of ESG category. On the right part, I added a line chart to show how their reports changed over the years, and a word cloud with the frequency of ESG terms. Then connected these two charts with the bar chart and pie chart. Also, I added and connected a list table with the text, which was the ESG category, terms and metrics arguments, and the matched text span.</p>\n<p><a href=\"https://blogs.sas.com/content/subconsciousmusings/files/2022/10/Frequency-of-ESG.png\"><img loading=\"lazy\" class=\"aligncenter size-large wp-image-14000\" src=\"https://blogs.sas.com/content/subconsciousmusings/files/2022/10/Frequency-of-ESG-1024x468.png\" alt=\"\" width=\"702\" height=\"321\" srcset=\"https://blogs.sas.com/content/subconsciousmusings/files/2022/10/Frequency-of-ESG-1024x468.png 1024w, https://blogs.sas.com/content/subconsciousmusings/files/2022/10/Frequency-of-ESG-300x137.png 300w, https://blogs.sas.com/content/subconsciousmusings/files/2022/10/Frequency-of-ESG-768x351.png 768w, https://blogs.sas.com/content/subconsciousmusings/files/2022/10/Frequency-of-ESG-1536x702.png 1536w, https://blogs.sas.com/content/subconsciousmusings/files/2022/10/Frequency-of-ESG-2048x936.png 2048w\" sizes=\"(max-width: 702px) 100vw, 702px\" /></a></p>\n<p>Based on the visualization, IBM and Microsoft reported the most ESG-related metrics. This is somewhat consistent with the data distribution. When clicking on the companies in the bar chart to view the details, I found IBM focused most on \"energy\" and \"electricity\" and Microsoft focused most on \"business\" and \"indenture\". Also, I can see how the reports changed in the past 5 years from the line chart. By clicking on the ESG pie chart, I can check which areas the companies are most concerned about in each category.</p>\n<h2>Summary</h2>\n<p>This blog post aimed to provide a strategy for expanding terms using the SAS similar word detection technique to facilitate model development. The exploration with ESG data showed this approach works well in expanding domain-related vocabularies even on a relatively small amount of data. When I experimented with different data volumes with this method of term expanding, it showed that larger data is more likely to yield better results. Moreover, you can consider such extensions by leveraging open-source pre-trained word embedding models that are trained on large corpora. For expanding a word list that is not domain-related, for example, the expansion of a sentiment word list, using a word embedding model trained on more extensive data will achieve better results. To leverage the pre-trained models, you only need to import the pre-trained word embedding to SAS Data Explorer and use the example code shown above to find similar words. My experiments showed that this method also works well in expanding sentiment vocabularies. Try it out on your project and let us know what you find!</p>\n<h3>Learn more</h3>\n<ul>\n<li>Check out additional documentation on <a href=\"https://go.documentation.sas.com/doc/us/pgmsascdc/v_021/casanpg/p1e93w56dte67qn14kcy9njkxs1p.htm\">corpus analysis</a> and for <a href=\"https://support.sas.com/en/software/visual-text-analytics-support.html#documentation\">SAS Visual Text Analytics</a>.</li>\n<li>Keep exploring by checking out the ebook “<a href=\"https://www.sas.com/en/whitepapers/natural-language-processing-110641.html\">Make Every Voice Heard with Natural Language Processing</a>” or try <a href=\"https://www.sas.com/en_us/trials/software/viya/viya-trial-form.html\">SAS Viya</a> for free.</li>\n</ul>\n<p>The post <a rel=\"nofollow\" href=\"https://blogs.sas.com/content/subconsciousmusings/2022/10/20/similar-words-esg-data-nlp/\">Find similar words in ESG data with Natural Language Processing</a> appeared first on <a rel=\"nofollow\" href=\"https://blogs.sas.com/content/subconsciousmusings\">The SAS Data Science Blog</a>.</p>\n",
  "wfw:commentRss": "https://blogs.sas.com/content/subconsciousmusings/2022/10/20/similar-words-esg-data-nlp/feed/",
  "slash:comments": 0,
  "enclosure": ""
}