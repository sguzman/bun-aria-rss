{
  "title": "TPUs vs GPUs for Transformers (BERT)",
  "link": "https://timdettmers.com/2018/10/17/tpus-vs-gpus-for-transformers-bert/",
  "comments": "https://timdettmers.com/2018/10/17/tpus-vs-gpus-for-transformers-bert/#comments",
  "dc:creator": "Tim Dettmers",
  "pubDate": "Wed, 17 Oct 2018 18:13:03 +0000",
  "category": [
    "Hardware",
    "Accelerators",
    "GPU",
    "Matrix Multiplication"
  ],
  "guid": "http://timdettmers.com/?p=686",
  "description": "<p>On the computational side, there have been confusions about how TPUs and GPUs relate to BERT. BERT base was trained with 4 TPU pods (16 TPU chips) in 4 days and BERT large with 16 TPUs (64 TPU chips) in 4 days. Does this mean only Google can train a BERT model? Does this mean [&#8230;]</p>\n<p>The post <a rel=\"nofollow\" href=\"https://timdettmers.com/2018/10/17/tpus-vs-gpus-for-transformers-bert/\">TPUs vs GPUs for Transformers (BERT)</a> appeared first on <a rel=\"nofollow\" href=\"https://timdettmers.com\">Tim Dettmers</a>.</p>\n",
  "content:encoded": "<p>On the computational side, there have been confusions about how TPUs and GPUs relate to <a href=\"https://arxiv.org/abs/1810.04805\">BERT</a>. BERT base was trained with 4 TPU pods (16 TPU chips) in 4 days and BERT large with 16 TPUs (64 TPU chips) in 4 days. Does this mean only Google can train a BERT model? Does this mean that GPUs are dead? There are two fundamental things to understand here: (1) A TPU is a matrix multiplication engine — it does matrix multiplication and matrix operations, but not much else. It is fast at computing matrix multiplication, but one has to understand that (2) the slowest thing in matrix multiplication is to get the elements from the main memory and load it into the processing unit. In other words, the most expensive part in matrix multiplication is memory loads. Note the computational load for BERT should be about 90% for matrix multiplication. From these facts, we can do a small technical analysis on this topic.</p>\n<p><span id=\"more-686\"></span></p>\n<h2>Bandwidth Model for TPUs and GPUs</h2>\n<h3>Transformers for TPUs</h3>\n<p>A common operation in BERT is matrix multiplication A*B=C where A is 256&#215;1024 and B is 1024&#215;1024 in dimension. A TPU computes such a matrix multiplication by splitting the matrix into many smaller 128&#215;128 matrix multiplications. This means we need to load 16 128&#215;128 matrix tiles from matrix A — and due to the nature of matrix multiplication — we need to load 64 tiles from B for every tile in A. This is a total of 16*64=1024 128&#215;128 loads. At 16-bit that is a total of 32 MB of data.</p>\n<p><a href=\"https://i0.wp.com/timdettmers.com/wp-content/uploads/2018/10/Cloud-TPU-Feature.jpg\"><img data-attachment-id=\"698\" data-permalink=\"https://timdettmers.com/2018/10/17/tpus-vs-gpus-for-transformers-bert/cloud-tpu-feature/\" data-orig-file=\"https://i0.wp.com/timdettmers.com/wp-content/uploads/2018/10/Cloud-TPU-Feature.jpg?fit=1123%2C620&ssl=1\" data-orig-size=\"1123,620\" data-comments-opened=\"1\" data-image-meta=\"{\"aperture\":\"0\",\"credit\":\"\",\"camera\":\"\",\"caption\":\"\",\"created_timestamp\":\"0\",\"copyright\":\"\",\"focal_length\":\"0\",\"iso\":\"0\",\"shutter_speed\":\"0\",\"title\":\"\",\"orientation\":\"0\"}\" data-image-title=\"Cloud-TPU-Feature\" data-image-description=\"\" data-image-caption=\"\" data-medium-file=\"https://i0.wp.com/timdettmers.com/wp-content/uploads/2018/10/Cloud-TPU-Feature.jpg?fit=300%2C166&ssl=1\" data-large-file=\"https://i0.wp.com/timdettmers.com/wp-content/uploads/2018/10/Cloud-TPU-Feature.jpg?fit=1024%2C565&ssl=1\" class=\"aligncenter wp-image-698\" title=\"TPU vs GPU\" src=\"https://i0.wp.com/timdettmers.com/wp-content/uploads/2018/10/Cloud-TPU-Feature-1024x565.jpg?resize=745%2C411\" alt=\"TPU vs GPU\" width=\"745\" height=\"411\" srcset=\"https://i0.wp.com/timdettmers.com/wp-content/uploads/2018/10/Cloud-TPU-Feature.jpg?resize=1024%2C565&ssl=1 1024w, https://i0.wp.com/timdettmers.com/wp-content/uploads/2018/10/Cloud-TPU-Feature.jpg?resize=300%2C166&ssl=1 300w, https://i0.wp.com/timdettmers.com/wp-content/uploads/2018/10/Cloud-TPU-Feature.jpg?resize=768%2C424&ssl=1 768w, https://i0.wp.com/timdettmers.com/wp-content/uploads/2018/10/Cloud-TPU-Feature.jpg?w=1123&ssl=1 1123w\" sizes=\"(max-width: 745px) 100vw, 745px\" data-recalc-dims=\"1\" /></a></p>\n<p>Now we make a simplification: We assume that there is no latency if we do two memory loads after each other, which is actually not too unreasonable since often you can hide memory access latency under thread parallelism. In simple words, this means: While we wait for one 128&#215;128 matrix copy to complete, we already do the next one. In doing it this way, we only wait for the first memory copy and we do not wait for other copies. This is a <a href=\"https://www.quora.com/Why-are-GPUs-well-suited-to-deep-learning\">core reason why GPUs are fast</a> and why we use many threads in GPUs thus 0 latency for overlapping memory transfers is not too far off from the real world. Using this simplification, we can now plainly use the memory bandwidth to compute the time needed to load the memory for the matrix multiplication. If we look at the bandwidth of the TPU we find that we have 600 GB/s, so we need 5.2e-05 seconds to transfer the 32 MB of data.</p>\n<h3>Transformers on GPUs</h3>\n<p>For a GPU we have the same process, but we use smaller tiles with more processors. Similarly to the TPU, we use two loads in parallel to hide memory latency. For GPUs, however, we would have a tile size of 96&#215;96 for 16-bit data. If we take a V100 Tesla GPU, then we can run 160 of these in parallel at full bandwidth with low memory latency. What this means compared to a TPU: Instead of 2 matrix units which can hold 128&#215;128 matrices, the GPU has 160 units (80 SMs, 160 thread blocks, each thread block has two 96&#215;96 matrices) which hold two 96&#215;96 matrices. Again this ensures that we can hide the memory latency through parallelism.</p>\n<p><a href=\"https://i0.wp.com/timdettmers.com/wp-content/uploads/2018/10/010.jpg\"><img data-attachment-id=\"697\" data-permalink=\"https://timdettmers.com/2018/10/17/tpus-vs-gpus-for-transformers-bert/attachment/010/\" data-orig-file=\"https://i0.wp.com/timdettmers.com/wp-content/uploads/2018/10/010.jpg?fit=1024%2C576&ssl=1\" data-orig-size=\"1024,576\" data-comments-opened=\"1\" data-image-meta=\"{\"aperture\":\"0\",\"credit\":\"\",\"camera\":\"\",\"caption\":\"\",\"created_timestamp\":\"0\",\"copyright\":\"\",\"focal_length\":\"0\",\"iso\":\"0\",\"shutter_speed\":\"0\",\"title\":\"\",\"orientation\":\"0\"}\" data-image-title=\"010\" data-image-description=\"\" data-image-caption=\"\" data-medium-file=\"https://i0.wp.com/timdettmers.com/wp-content/uploads/2018/10/010.jpg?fit=300%2C169&ssl=1\" data-large-file=\"https://i0.wp.com/timdettmers.com/wp-content/uploads/2018/10/010.jpg?fit=1024%2C576&ssl=1\" class=\"aligncenter wp-image-697\" title=\"TPU vs GPU\" src=\"https://i0.wp.com/timdettmers.com/wp-content/uploads/2018/10/010-1024x576.jpg?resize=818%2C460\" alt=\"TPU vs GPU\" width=\"818\" height=\"460\" srcset=\"https://i0.wp.com/timdettmers.com/wp-content/uploads/2018/10/010.jpg?w=1024&ssl=1 1024w, https://i0.wp.com/timdettmers.com/wp-content/uploads/2018/10/010.jpg?resize=300%2C169&ssl=1 300w, https://i0.wp.com/timdettmers.com/wp-content/uploads/2018/10/010.jpg?resize=768%2C432&ssl=1 768w\" sizes=\"(max-width: 818px) 100vw, 818px\" data-recalc-dims=\"1\" /></a></p>\n<p>If we repeat the calculation from the top we receive the following: For matrix A with 256&#215;1024 we have 33 96&#215;96 tiles; for B with 1024&#215;1024 we have 121 96&#215;96 tiles. In total, we need to do 33*121=3993 loads of size 96&#215;96 for a total of 70 MB. A V100 runs at 900 GB/s and so the memory loads will take 7.6e-05 seconds. Thus our model predicts that a GPU is 32% slower than a TPU for this specific scenario. Note that matrix tiles stay the same for an RTX 2080 Ti GPU, but the memory bandwidth decreases to 616 GB/s. Which means an RTX 2080 Ti is 54% slower than a TPU.</p>\n<p>Note that both TPU and GPUs with Tensor Cores compute the respective matrix multiplication tile in one cycle. Thus the computation is about equally fast — the difference is only in how the memory is loaded.</p>\n<h3>BERT Training Time Estimate for GPUs</h3>\n<p>Using this data, a GPU cluster of V100s/RTX 2080 Tis with good networking (Infiniband +56GBits/s) and good parallelization algorithms (for example using Microsoft&#8217;s CNTK) we can expect to train BERT large on 64 GPUs (the equivalent to 16 TPUs) or BERT base on 16 GPUs in 5 1/3 days or 8 1/2 days. On an 8 GPU machine for V100/RTX 2080 Tis with any software and any parallelization algorithm (PyTorch, TensorFlow) one can expect to train BERT large in 21 days or 34 days and BERT base in 10 2/3 or 17 days. For a standard 4 GPU desktop with RTX 2080 Ti (much cheaper than other options), one can expect to replicate BERT large in 68 days and BERT base in 34 days.</p>\n<h2>Limitations of the Bandwidth Model</h2>\n<p>Note that all models are wrong, but some are useful. I would expect that this bandwidth model is in about 30% of the correct runtime values for TPU vs GPU.</p>\n<p>The biggest limitation is that these calculations&nbsp;are for specific matrices sizes. Computational differences can be amplified&nbsp;for certain sizes. For example, if your batch-size is 128, there is a slight speedup for GPUs compared to TPUs. If you go below a batch size of 128 you can expect GPUs to be significantly faster; increasing the matrix B further makes TPUs better and better compared to GPUs. Decreasing the size of matrix B will make the performance of GPUs better. Note that the BERT paper optimized matrix A and B sizes for the TPU — one would not choose these dimensions if you train with a GPU. So this comparison might favor TPUs slightly.</p>\n<p>Further direct limitations include fused operations. The TPU can calculate additional element-wise operations such as a non-linear activation function or a bias on the fly within a matrix multiplication. This means that the TPU does not need to load from slow global memory as often as a GPU. The GPU also supports these operations but NVIDIA has not implemented them and thus GPU users will not be able to benefit from this. Thus one can expect a slowdown of about 1.6% (loading and storing a 256&#215;1024 matrix) for each element-wise operation for a GPU. For example, if you apply a non-linear function and a bias, then the TPU would be about 3.2% faster compared to GPUs in this scenario.</p>\n<h2>The Importance of 32-bit vs 16-bit vs 8-bit</h2>\n<p>If we repeat the same calculations from above for 32-bit values (64x64x tiles) we find that TPUs would be 5.3x faster. So the datatype size has a much larger effect than switching from TPU to GPU and vice versa.</p>\n<p>TPUs do not support 8-bit training, but Turing GPUs do. So we can also have a look at how 8-bit matrix multiplication would impact performance.&nbsp;<a href=\"https://arxiv.org/abs/1511.04561\">I published research on 8-bit models</a> and it is not too difficult to train them with 8-bit alone. In fact, the <a href=\"https://arxiv.org/search/cs?searchtype=author&query=Courbariaux%2C+M\">literature</a> on <a href=\"https://arxiv.org/abs/1602.02830\">low-bit</a> computing is <a href=\"https://dawn.cs.stanford.edu/2018/03/09/low-precision/\">quite rich</a>. With 32-bit accumulation as supported by Turing GPUs 8-bit training should be even easier.&nbsp; If we can make 8-bit computing work for general models this would entail huge speedups for transformers. If we repeat the above calculations for 8-bit for GPUs (128&#215;128 tile) we find that GPUs are 3.0x faster than TPUs. 8-bit computation on an affordable standard machine with 4 RTX 2080 Ti would take about 11 days for BERT base and 22 days for BERT large. All of this makes 16-bit computational ability for a GPU and important criterion <a href=\"https://timdettmers.com/2020/09/07/which-gpu-for-deep-learning/\">if you are looking for a GPU</a> to work with transformers.</p>\n<h2>Conclusion</h2>\n<p>TPUs are about 32% to 54% faster for training BERT-like models. One can expect to replicate BERT base on an 8 GPU machine within about 10 to 17 days. On a standard, affordable GPU machine with 4 GPUs one can expect to train BERT base for about 34 days using 16-bit or about 11 days using 8-bit.</p>\n<p>The post <a rel=\"nofollow\" href=\"https://timdettmers.com/2018/10/17/tpus-vs-gpus-for-transformers-bert/\">TPUs vs GPUs for Transformers (BERT)</a> appeared first on <a rel=\"nofollow\" href=\"https://timdettmers.com\">Tim Dettmers</a>.</p>\n",
  "wfw:commentRss": "https://timdettmers.com/2018/10/17/tpus-vs-gpus-for-transformers-bert/feed/",
  "slash:comments": 26,
  "post-id": 686
}