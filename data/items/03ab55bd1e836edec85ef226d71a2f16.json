{
  "id": "tag:blogger.com,1999:blog-5547907074344788039.post-6935123343723423418",
  "published": "2012-11-29T22:06:00.000-08:00",
  "updated": "2012-12-01T16:40:43.178-08:00",
  "category": [
    "",
    "",
    "",
    ""
  ],
  "title": "Introduction to Sentiment Analysis",
  "content": "In this post we are going to explore sentiment analysis using python.&nbsp;Let us first define the problem. Given a <b>corpus</b>&nbsp;of <b>documents</b>, we want to train a <b>classifier</b> to classify documents into one of several classes:<br /><div class=\"p2\"><br /></div><div class=\"p1\"><b>positive</b>: e.g., \"that movie was awesome\"</div><div class=\"p1\"><b>negative</b>: e.g., \"that movie sucked\"</div><div class=\"p2\"><br /></div><div class=\"p1\">We may also want a third category:</div><div class=\"p2\"><br /></div><div class=\"p1\"><b>neutral</b>: e.g., \"I saw the movie at the Odeon\".</div><div class=\"p1\"><br /></div><div class=\"p1\"></div><div class=\"p1\">In reality, we may have a fourth category <b>unknown</b> where we cannot tell. For instance, it may contain a document in a foreign language, a set of stop words only, or a set of words that our classifier does not understand, e.g. SMS acronyms (e.g., \"cu l8r\"). For simplicity, we can simply not classify these documents or we can categorize them as neutral.</div><div class=\"p2\"><br /></div><div class=\"p1\">To train the classifier we will need to choose a set of <b>features</b>, the facets of data that the classifier will work on. The simplest scenario is to use each word in the document. (Later, we will discuss more complex features and other features.)</div><div class=\"p2\"><br /></div><div class=\"p1\">This is a supervised learning problem so we will need a labeled corpus of data. That is, a set of documents each of which has been labeled with one of our class names or IDs. One of the simplest ways is a CSV or a TSV file:</div><div class=\"p2\"><br /></div><div class=\"p1\"><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace;\">pos &nbsp; &nbsp; that movie was awesome</span></div><div class=\"p1\"><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace;\">neu &nbsp; &nbsp; I saw the movie at the Odeon</span></div><div class=\"p1\"><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace;\">pos &nbsp; &nbsp; I love this place</span></div><div class=\"p1\"><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace;\">pos &nbsp; &nbsp; I am happy</span></div><div class=\"p1\"><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace;\">....</span></div><div class=\"p2\"><br /></div><div class=\"p1\">We will need a <b>learner</b>, an algorithm that will learn to classify. In most examples that I've seen online, people have used a naive Bayes classifier but there are many others that one could choose.</div><div class=\"p2\"><br /></div><div class=\"p1\">Importantly, sentiment analysis is very context sensitive. If you train a classifier using movie review data, it likely will not fare well classifying documents about election results or your startup's product. A classifier trained on US english tweets may or may not classify UK tweets well.</div><div class=\"p2\"><br /></div><div class=\"p1\">Finally, we cannot expect to assign sentiment correctly 100% of the time. Even humans can often disagree about the sentiment of documents. There are several reasons:</div><ul class=\"ul1\"><li class=\"li1\">Cultural differences mentioned above. For example, \"rocking\" and \"sick\" are positive adjectives to members of some demographics and cultures but not others.</li><li class=\"li1\">English is a hard and ambiguous language. For instance, consider Chomsky's example: \"old men and women\". Is that [old men] and [old women] or does it mean [old men] and [women]. Another example is <a href=\"http://www.amazon.com/Eats-Shoots-Leaves-Tolerance-Punctuation/dp/1592402038/ref=sr_1_1?ie=UTF8&amp;qid=1354151510&amp;sr=8-1&amp;keywords=eats+shoots+and+leaves\">Eats, Shoots &amp; Leaves</a>.</li><li class=\"li1\">Sarcasm, innuendo, and double entendres. This is one of the current challenges in NLP. For a fun example take a look at the problem of detecting <a href=\"http://blog.echen.me/2011/05/05/twss-building-a-thats-what-she-said-classifier/\">that's what she said</a>.</li><li class=\"li1\">That people often use a bag of words model for sentiment analysis, at least as a first pass. That is, we analyze a document as a set of words and not a phrase. Thus, we will miss that the \"not\" in \"not good\" negates \"good\". In general, we will miss double negatives and other qualifiers.&nbsp;I love this <a href=\"http://en.wikipedia.org/wiki/Sidney_Morgenbesser\">illustrative example</a>:</li></ul><blockquote class=\"tr_bq\"><i>During a lecture the Oxford linguistic philosopher J.L. Austin&nbsp;made the claim that although a&nbsp;double negative in English implies a positive meaning, there is no language in which a&nbsp;double positive implies a negative. To which Morgenbesser responded in a dismissive tone, \"Yeah, yeah.\"</i></blockquote><div class=\"p3\">Now we have the background out of the way, let's starting building a concrete example.</div><div class=\"p4\"><br /></div><div class=\"p5\"><span class=\"s1\">First, let's grab a corpus. I'm taking the&nbsp;</span><i>UMICH SI650 - Sentiment Classification</i> training set from&nbsp;<a href=\"http://inclass.kaggle.com/c/si650winter11/data\">Kaggle</a>.</div><div class=\"p4\"><br /></div><div class=\"p3\">This is a tab-delimited file with 7086 sentences tagged as 1 or 0.&nbsp;</div><div class=\"p4\"><br /></div><div class=\"p3\"><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace;\">head training.txt</span></div><div class=\"p3\"><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace;\">1&nbsp;&nbsp;&nbsp;&nbsp; The Da Vinci Code book is just awesome.</span></div><div class=\"p3\"><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace;\">1&nbsp;&nbsp;&nbsp;&nbsp; this was the first clive cussler i've ever read, but even books like Relic, and Da Vinci code were more plausible than this.</span></div><div class=\"p3\"><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace;\">1&nbsp;&nbsp;&nbsp;&nbsp; i liked the Da Vinci Code a lot.</span></div><div class=\"p3\"><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace;\">1&nbsp;&nbsp;&nbsp;&nbsp; i liked the Da Vinci Code a lot.</span></div><div class=\"p3\"><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace;\">1&nbsp;&nbsp;&nbsp;&nbsp; I liked the Da Vinci Code but it ultimatly didn't seem to hold it's own.</span></div><div class=\"p3\"><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace;\">1&nbsp;&nbsp;&nbsp;&nbsp; that's not even an exaggeration ) and at midnight we went to Wal-Mart to buy the Da Vinci Code, which is amazing of course.</span></div><div class=\"p3\"><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace;\">1&nbsp;&nbsp;&nbsp;&nbsp; I loved the Da Vinci Code, but now I want something better and different!..</span></div><div class=\"p3\"><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace;\">1&nbsp;&nbsp;&nbsp;&nbsp; i thought da vinci code was great, same with kite runner.</span></div><div class=\"p3\"><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace;\">1&nbsp;&nbsp;&nbsp;&nbsp; The Da Vinci Code is actually a good movie...</span></div><div class=\"p3\"><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace;\">1&nbsp;&nbsp;&nbsp;&nbsp; I thought the Da Vinci Code was a pretty good book.</span></div><div class=\"p4\"><br /></div><div class=\"p3\">There are many duplicates. Let's remove them:</div><div class=\"p4\"><br /></div><div class=\"p3\"><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace;\">cat training.txt | sort | uniq &gt; uniq_training.txt</span></div><div class=\"p4\"><br /></div><div class=\"p3\">How many positive and negative samples remain?</div><div class=\"p4\"><br /></div><div class=\"p3\"><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace;\">cat uniq_training.txt | grep ^1 | wc -l</span></div><div class=\"p3\"><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace;\">772</span></div><div class=\"p3\"><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace;\">cat uniq_training.txt | grep ^0 | wc -l</span></div><div class=\"p3\"><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace;\">639</span></div><div class=\"p4\"><br /></div><div class=\"p3\">We need to extract features from a document. We'll take unique, lowercase words with more than two characters:</div><div class=\"p4\"><br /></div><div class=\"p3\"><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace;\">def extract_features(document):</span></div><div class=\"p3\"><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace;\">&nbsp;&nbsp; features={}</span></div><div class=\"p3\"><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace;\">&nbsp;&nbsp; for word in set(document.split()):</span></div><div class=\"p3\"><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if len(word) &gt; 2:</span></div><div class=\"p3\"><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; features['contains(%s)' % word.lower()] = True</span></div><div class=\"p3\"><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace;\">&nbsp;&nbsp; return features</span></div><div class=\"p4\"><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace;\"><br /></span></div><div class=\"p3\"><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace;\">&gt;&gt;&gt; extract_features('\" A couple of very liberal people I know thought Brokeback Mountain was \" stupid exploitation.')</span></div><div class=\"p3\"><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace;\">{'contains(very)': True, 'contains(people)': True, 'contains(couple)': True, 'contains(mountain)': True, 'contains(was)': True, 'contains(brokeback)': True, 'contains(liberal)': True, 'contains(exploitation.)': True, 'contains(know)': True, 'contains(thought)': True, 'contains(stupid)': True}</span></div><div class=\"p4\"><br /></div><div class=\"p3\">We need to read in our documents:</div><div class=\"p4\"><br /></div><div class=\"p3\"><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace;\">documents=[]</span></div><div class=\"p3\"><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace;\">f = open(\"uniq_training.txt\",\"r\")</span></div><div class=\"p3\"><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace;\">for document in f.readlines():</span></div><div class=\"p3\"><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace;\">&nbsp;&nbsp; parts= document.strip().split(\"\\t\")</span></div><div class=\"p3\"><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace;\">&nbsp;&nbsp; documents.append((parts[1],bool(int(parts[0]))))</span></div><div class=\"p4\"><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace;\"><br /></span></div><div class=\"p3\"><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace;\">&gt;&gt;&gt; documents[0]</span></div><div class=\"p3\"><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace;\">('\" A couple of very liberal people I know thought Brokeback Mountain was \" stupid exploitation.', True)</span></div><div class=\"p4\"><br /></div><div class=\"p3\">Now extract features from each document in our corpus and split into a training set (80%) and a test set (20%):</div><div class=\"p4\"><br /></div><div class=\"p3\"><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace;\">import random</span></div><div class=\"p3\"><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace;\">random.seed(1234) #so that you can reproduce my results if you wish</span></div><div class=\"p3\"><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace;\">random.shuffle(documents)</span></div><div class=\"p3\"><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace;\">import nltk</span></div><div class=\"p3\"><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace;\">n_train = int(0.8*len(documents))</span></div><div class=\"p3\"><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace;\">training_set = nltk.classify.apply_features(extract_features,documents[:n_train])</span></div><div class=\"p3\"><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace;\">test_set = nltk.classify.apply_features(extract_features,documents[n_train:])</span></div><div class=\"p4\"><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace;\"><br /></span></div><div class=\"p3\"><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace;\">&gt;&gt;&gt; training_set[0]</span></div><div class=\"p3\"><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace;\">({'contains(very)': True, 'contains(people)': True, 'contains(couple)': True, 'contains(mountain)': True, 'contains(was)': True, 'contains(brokeback)': True, 'contains(liberal)': True, 'contains(exploitation.)': True, 'contains(know)': True, 'contains(thought)': True, 'contains(stupid)': True}, True)</span></div><div class=\"p4\"><br /></div><div class=\"p3\">Finally, let's now train our classifier:</div><div class=\"p4\"><br /></div><div class=\"p3\"><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace;\">&gt;&gt;&gt; classifier = nltk.NaiveBayesClassifier.train(training_set)</span></div><div class=\"p4\"><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace;\"><br /></span></div><div class=\"p3\"><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace;\">&gt;&gt;&gt; nltk.classify.accuracy(classifier, test_set)</span></div><div class=\"p3\"><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace;\">0.911660777385159</span></div><div class=\"p4\"><br /></div><div class=\"p3\">Whoah, 91% accuracy isn't bad at all given that we had a fairly balanced training set:</div><div class=\"p4\"><br /></div><div class=\"p3\"><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace;\">ct_pos=0</span></div><div class=\"p3\"><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace;\">for d in training_set:</span></div><div class=\"p3\"><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace;\">&nbsp;&nbsp;&nbsp; if d[1]==True: ct_pos+=1</span></div><div class=\"p4\"><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace;\"><br /></span></div><div class=\"p3\"><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace;\">print ct_pos, len(training_set)-ct_pos</span></div><div class=\"p3\"><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace;\">617 511</span></div><div class=\"p4\"><br /></div><div class=\"p3\">By that I mean, I would have been suspicious if we had a very imbalanced training set and say 95% of samples were positive.<br /><br />The proper way to assess the performance is to examine precision, recall and F-scores:<br /><br /><br /><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace;\">import collections</span><br /><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace;\">refsets = collections.defaultdict(set)</span><br /><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace;\">testsets = collections.defaultdict(set)</span><br /><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace;\">for i, (feats, label) in enumerate(test_set):</span><br /><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace;\">&nbsp; &nbsp; refsets[label].add(i)</span><br /><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace;\">&nbsp; &nbsp; observed = classifier.classify(feats)</span><br /><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace;\">&nbsp; &nbsp; testsets[observed].add(i)</span><br /><br /><br /><div><div><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace;\">&gt;&gt;&gt; print 'pos precision: %2.3f' % nltk.metrics.precision(refsets[True], testsets[True])</span></div><div><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace;\">pos precision: 0.951</span></div><div><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace;\">&gt;&gt;&gt; print 'pos recall: %2.3f' % nltk.metrics.recall(refsets[True], testsets[True])</span></div><div><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace;\">pos recall: 0.884</span></div><div><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace;\">&gt;&gt;&gt; print 'pos F-measure: %2.3f' % nltk.metrics.f_measure(refsets[True], testsets[True])</span></div><div><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace;\">pos F-measure: 0.916</span></div><div><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace;\">&gt;&gt;&gt; print 'neg precision: %2.3f' % nltk.metrics.precision(refsets[False], testsets[False])</span></div><div><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace;\">neg precision: 0.871</span></div><div><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace;\">&gt;&gt;&gt; print 'neg recall: %2.3f' % nltk.metrics.recall(refsets[False], testsets[False])</span></div><div><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace;\">neg recall: 0.945</span></div><div><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace;\">&gt;&gt;&gt; print 'neg F-measure: %2.3f' % nltk.metrics.f_measure(refsets[False], testsets[False])</span></div><div><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace;\">neg F-measure: 0.906</span></div></div><div><br /></div><div>and now the confusion matrix:</div><div><br /></div><div><div><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace;\">observed=[]</span></div><div><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace;\">actual=[]</span></div><div><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace;\">for i, (feats, label) in enumerate(test_set):</span></div><div><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace;\">&nbsp; &nbsp; actual.append(label)</span></div><div><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace;\">&nbsp; &nbsp; observed.append(classifier.classify(feats))</span><span style=\"color: #9fc5e8; font-family: 'Courier New', Courier, monospace;\">&nbsp;</span></div><div><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace;\">print nltk.ConfusionMatrix(actual,observed)</span></div><div><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace;\"><br /></span></div><div><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace;\">&nbsp; &nbsp; &nbsp; | &nbsp; F &nbsp; &nbsp; |</span></div><div><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace;\">&nbsp; &nbsp; &nbsp; | &nbsp; a &nbsp; T |</span></div><div><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace;\">&nbsp; &nbsp; &nbsp; | &nbsp; l &nbsp; r |</span></div><div><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace;\">&nbsp; &nbsp; &nbsp; | &nbsp; s &nbsp; u |</span></div><div><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace;\">&nbsp; &nbsp; &nbsp; | &nbsp; e &nbsp; e |</span></div><div><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace;\">------+---------+</span></div><div><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace;\">False |&lt;121&gt; &nbsp;7 |</span></div><div><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace;\">&nbsp;True | &nbsp;18&lt;137&gt;|</span></div><div><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace;\">------+---------+</span></div><div><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace;\">(row = reference; col = test)</span></div></div><div><br /></div><br /><br />These are all great numbers.<br /><br /></div><div class=\"p3\">Now we can use it:</div><div class=\"p4\"><br /></div><div class=\"p3\"><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace;\">&gt;&gt;&gt; classifier.classify(extract_features(\"that movie was awful\"))</span></div><div class=\"p3\"><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace;\">False</span></div><div class=\"p3\"><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace;\">&gt;&gt;&gt; classifier.classify(extract_features(\"that movie was great\"))</span></div><div class=\"p3\"><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace;\">True</span></div><div class=\"p4\"><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace;\"><br /></span></div><div class=\"p3\"><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace; font-size: x-small;\">&gt;&gt;&gt; classifier.show_most_informative_features(16)</span></div><div class=\"p3\"><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace; font-size: x-small;\">Most Informative Features</span></div><div class=\"p3\"><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace; font-size: x-small;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; contains(awesome) = True&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; True : False&nbsp; =&nbsp;&nbsp;&nbsp;&nbsp; 37.8 : 1.0</span></div><div class=\"p3\"><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace; font-size: x-small;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; contains(sucked) = True&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; False : True&nbsp;&nbsp; =&nbsp;&nbsp;&nbsp;&nbsp; 31.0 : 1.0</span></div><div class=\"p3\"><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace; font-size: x-small;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; contains(hate) = True&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; False : True&nbsp;&nbsp; =&nbsp;&nbsp;&nbsp;&nbsp; 24.0 : 1.0</span></div><div class=\"p3\"><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace; font-size: x-small;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; contains(love) = True&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; True : False&nbsp; =&nbsp;&nbsp;&nbsp;&nbsp; 17.8 : 1.0</span></div><div class=\"p3\"><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace; font-size: x-small;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; contains(heard) = True&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; False : True&nbsp;&nbsp; =&nbsp;&nbsp;&nbsp;&nbsp; 10.1 : 1.0</span></div><div class=\"p3\"><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace; font-size: x-small;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; contains(kinda) = True&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; False : True&nbsp;&nbsp; =&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 8.4 : 1.0</span></div><div class=\"p3\"><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace; font-size: x-small;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; contains(it,) = True&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; False : True&nbsp;&nbsp; =&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 7.6 : 1.0</span></div><div class=\"p3\"><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace; font-size: x-small;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; contains(want) = True&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; True : False&nbsp; =&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 6.9 : 1.0</span></div><div class=\"p3\"><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace; font-size: x-small;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; contains(evil) = True&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; False : True&nbsp;&nbsp; =&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 5.6 : 1.0</span></div><div class=\"p3\"><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace; font-size: x-small;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; contains(those) = True&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; False : True&nbsp;&nbsp; =&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 5.2 : 1.0</span></div><div class=\"p3\"><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace; font-size: x-small;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; contains(didn't) = True&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; False : True&nbsp;&nbsp; =&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 5.2 : 1.0</span></div><div class=\"p3\"><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace; font-size: x-small;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; contains(has) = True&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; False : True&nbsp;&nbsp; =&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 5.2 : 1.0</span></div><div class=\"p3\"><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace; font-size: x-small;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; contains(think) = True&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; False : True&nbsp;&nbsp; =&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 4.7 : 1.0</span></div><div class=\"p3\"><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace; font-size: x-small;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; contains(miss) = True&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; True : False&nbsp; =&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 4.7 : 1.0</span></div><div class=\"p3\"><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace; font-size: x-small;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; contains(watch) = True&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; False : True&nbsp;&nbsp; =&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 4.6 : 1.0</span></div><div class=\"p3\"><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace; font-size: x-small;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; contains(liked) = True&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; True : False&nbsp; =&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 4.5 : 1.0</span></div><div class=\"p3\"><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace; font-size: x-small;\">&gt;&gt;&gt;&nbsp;</span></div><div class=\"p4\"><br /></div><div class=\"p3\">These terms make a lot of sense: <b>awesome, suck, hate, love...</b></div><div class=\"p4\"><br /></div><div class=\"p3\">For a more detailed tutorial using NLTK see&nbsp;<a href=\"http://nltk.googlecode.com/svn/trunk/doc/book/ch06.html\">offical docs</a>. See also this <a href=\"http://www.laurentluce.com/posts/twitter-sentiment-analysis-using-python-and-nltk\">post</a>.</div><div class=\"p2\"><br /></div><div class=\"p3\">We trained our classifier to learn keywords that have particularly positive or negative associations (the most informative features). Once it has learned that list it is then easy to apply to a new input document. There are list of these learned words available such as <a href=\"http://www2.imm.dtu.dk/pubdb/views/publication_details.php?id=6010\">AFINN</a>&nbsp;and&nbsp;<a href=\"http://www.clips.ua.ac.be/pages/pattern\">pattern</a>. For these then, running sentiment analysis is trivial.&nbsp;</div><div class=\"p4\"><br /></div><div class=\"p8\"><span class=\"s6\">In pattern, \"t</span>he&nbsp;<span class=\"s7\">sentiment()</span>&nbsp;function returns a&nbsp;<span class=\"s7\">(polarity, subjectivity)</span>-tuple for the given sentence (based on the adjectives in it),&nbsp;with polarity between&nbsp;<span class=\"s7\">-1.0</span>&nbsp;and&nbsp;<span class=\"s7\">1.0</span>&nbsp;and subjectivity between&nbsp;<span class=\"s7\">0.0</span>&nbsp;and&nbsp;<span class=\"s7\">1.0\"</span>.</div><div class=\"p9\"><br /></div><div class=\"p10\">Let's fire up a sentiment analyzer and use it</div><div class=\"p4\"><br /></div><div class=\"p3\"><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace;\">&gt;&gt;&gt; from pattern.en import sentiment</span></div><div class=\"p3\"><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace;\">&gt;&gt;&gt; print sentiment(\"that movie was awesome\")</span></div><div class=\"p3\"><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace;\">(1.0, 1.0)</span></div><div class=\"p3\"><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace;\">&gt;&gt;&gt; print sentiment(\"that movie sucked\")</span></div><div class=\"p3\"><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace;\">(0, 0)</span></div><div class=\"p3\"><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace;\">&gt;&gt;&gt; print sentiment(\"that movie was ok\")</span></div><div class=\"p3\"><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace;\">(0.5, 0.5)</span></div><div class=\"p3\"><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace;\">&gt;&gt;&gt; print sentiment(\"that movie was fairly good\")</span></div><div class=\"p3\"><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace;\">(0.6, 0.8500000000000001)</span></div><div class=\"p4\"><br /></div><div class=\"p3\">That's all there is to it.<br /><br />You can see that returning a continuous value from (-1,1) means that we could easily define neutral documents as those with some intermediate value, say (-0.1,0.1).</div><div class=\"p4\"><br /></div><div class=\"p3\">Let's return to the issue mentioned earlier that this is just a bag of words model and the issue \"not good\" versus \"good\". One thing we can do is to include <b>bigrams</b> in our features. That is, adjacent pairs of words:</div><div class=\"p4\"><br /><span style=\"color: #9fc5e8; font-family: 'Courier New', Courier, monospace;\">&gt;&gt;&gt;&nbsp;</span><span style=\"color: #9fc5e8; font-family: 'Courier New', Courier, monospace;\">from nltk import bigrams</span></div><div class=\"p3\"><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace;\">&gt;&gt;&gt; bigrams(\"That movie was awful\".split())</span></div><div class=\"p3\"><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace;\">[('That', 'movie'), ('movie', 'was'), ('was', 'awful')]</span></div><div class=\"p4\"><br /></div><div class=\"p3\">Let's add bigrams to our extract features function:</div><div class=\"p4\"><br /></div><div class=\"p3\"><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace;\">def extract_features(document):</span></div><div class=\"p3\"><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace;\">&nbsp;&nbsp; features={}</span></div><div class=\"p3\"><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace;\">&nbsp;&nbsp; for word in set(document.split()):</span></div><div class=\"p3\"><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if len(word) &gt; 2:</span></div><div class=\"p3\"><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; features['contains(%s)' % word.lower()] = True</span></div><div class=\"p3\"><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace;\">&nbsp;&nbsp; for bigram in bigrams(document.split()):</span></div><div class=\"p3\"><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; features['contains(%s)' % \"_\".join(i.lower() for i in bigram)] = True</span></div><div class=\"p3\"><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace;\">&nbsp;&nbsp; return features</span></div><div class=\"p4\"><br /></div><div class=\"p3\">Retraining our classifier with this, we get 93.6% accuracy and a more interesting feature list: <b>I hate, I love, I think, love the...</b></div><div class=\"p4\"><br /></div><div class=\"p3\"><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace; font-size: x-small;\">&gt;&gt;&gt; classifier.show_most_informative_features(16)</span></div><div class=\"p4\"><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace; font-size: x-small;\"><br /></span></div><div class=\"p3\"><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace; font-size: x-small;\">Most Informative Features</span></div><div class=\"p3\"><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace; font-size: x-small;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; contains(awesome) = True&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; True : False&nbsp; =&nbsp;&nbsp;&nbsp;&nbsp; 37.8 : 1.0</span></div><div class=\"p3\"><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace; font-size: x-small;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; contains(sucked) = True&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; False : True&nbsp;&nbsp; =&nbsp;&nbsp;&nbsp;&nbsp; 31.0 : 1.0</span></div><div class=\"p3\"><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace; font-size: x-small;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; contains(hate) = True&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; False : True&nbsp;&nbsp; =&nbsp;&nbsp;&nbsp;&nbsp; 24.0 : 1.0</span></div><div class=\"p3\"><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace; font-size: x-small;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; contains(love_the) = True&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; True : False&nbsp; =&nbsp;&nbsp;&nbsp;&nbsp; 22.4 : 1.0</span></div><div class=\"p3\"><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace; font-size: x-small;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; contains(i_hate) = True&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; False : True&nbsp;&nbsp; =&nbsp;&nbsp;&nbsp;&nbsp; 22.2 : 1.0</span></div><div class=\"p3\"><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace; font-size: x-small;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; contains(i_love) = True&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; True : False&nbsp; =&nbsp;&nbsp;&nbsp;&nbsp; 22.1 : 1.0</span></div><div class=\"p3\"><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace; font-size: x-small;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; contains(love) = True&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; True : False&nbsp; =&nbsp;&nbsp;&nbsp;&nbsp; 17.8 : 1.0</span></div><div class=\"p3\"><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace; font-size: x-small;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; contains(code_was) = True&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; True : False&nbsp; =&nbsp;&nbsp;&nbsp;&nbsp; 15.7 : 1.0</span></div><div class=\"p3\"><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace; font-size: x-small;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; contains(i_think) = True&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; False : True&nbsp;&nbsp; =&nbsp;&nbsp;&nbsp;&nbsp; 14.9 : 1.0</span></div><div class=\"p3\"><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace; font-size: x-small;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; contains(3_was) = True&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; True : False&nbsp; =&nbsp;&nbsp;&nbsp;&nbsp; 13.0 : 1.0</span></div><div class=\"p3\"><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace; font-size: x-small;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; contains(i_like) = True&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; True : False&nbsp; =&nbsp;&nbsp;&nbsp;&nbsp; 11.9 : 1.0</span></div><div class=\"p3\"><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace; font-size: x-small;\">&nbsp;&nbsp;&nbsp; contains(like_harry) = True&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; True : False&nbsp; =&nbsp;&nbsp;&nbsp;&nbsp; 10.2 : 1.0</span></div><div class=\"p3\"><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace; font-size: x-small;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; contains(heard) = True&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; False : True&nbsp;&nbsp; =&nbsp;&nbsp;&nbsp;&nbsp; 10.1 : 1.0</span></div><div class=\"p3\"><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace; font-size: x-small;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; contains(i_heard) = True&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; False : True&nbsp;&nbsp; =&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 9.3 : 1.0</span></div><div class=\"p3\"><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace; font-size: x-small;\">&nbsp;&nbsp; contains(the_mission) = True&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; True : False&nbsp; =&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 8.6 : 1.0</span></div><div class=\"p3\"><span style=\"color: #9fc5e8; font-family: Courier New, Courier, monospace; font-size: x-small;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; contains(kinda) = True&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; False : True&nbsp;&nbsp; =&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 8.4 : 1.0</span></div><div class=\"p4\"><br /></div>Hopefully you can see that you can get some good sentiment results with just a few tens of lines of python, if you have the right libraries.<br /><br />Here is the source code:&nbsp;<a href=\"https://github.com/leapingllamas/p-value.info\">p-value.info github</a><br /><br />",
  "link": [
    "",
    "",
    "",
    "",
    ""
  ],
  "author": {
    "name": "Carl Anderson",
    "uri": "http://www.blogger.com/profile/11930448254473684406",
    "email": "noreply@blogger.com",
    "gd:image": ""
  },
  "thr:total": 2
}