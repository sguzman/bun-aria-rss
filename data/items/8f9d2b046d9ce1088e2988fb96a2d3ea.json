{
  "title": "Render reports directly from R scripts",
  "link": "",
  "id": "http://brooksandrew.github.io/simpleblog/articles/render-reports-directly-from-R-scripts",
  "published": "2015-03-05T00:00:00+00:00",
  "updated": "2015-03-05T00:00:00+00:00",
  "author": {
    "name": "andrew brooks",
    "uri": "http://brooksandrew.github.io/simpleblog",
    "email": "andrewbrooksct@gmail.com"
  },
  "content": "<h4 id=\"workflow\">Workflow</h4>\n\n<p>This post is really about workflow.  Specifically a data-science workflow, although it should be relevant for others.  It will probably resonate most (if at all) with those who have some experience (mostly positive) generating reports from Rmarkdown files with knitr, but might have some gripes.  Maybe not gripes, maybe just feelings of uncertainty over whether it makes sense to contain your hard work in an Rmarkdown file or an R script, or both.</p>\n\n<h4 id=\"generate-reports-with-rmarkdown-rmd-files\">Generate reports with Rmarkdown (Rmd) files</h4>\n\n<p>With Rmarkdown, you can generate these stylish reports with <a href=\"http://rmarkdown.rstudio.com/\">code like this</a>.</p>\n\n<h4 id=\"generate-reports-directly-from-r-scripts\">Generate reports directly from R scripts</h4>\n\n<p>One can also cut out the middle-man (Rmd) and generate the exact same HTML, PDF and Word reports using native R scripts.  This was news to me until this week.  It’s a subtle difference, but one that I’ve found nimble and powerful in all the right places. <a href=\"http://rmarkdown.rstudio.com/r_notebook_format.html\">Check this out</a> for a quick intro.</p>\n\n<p><strong>How it works:</strong> Code as normal.  Tweak the comments in your code to render the document text, headers, format, style, etc. of your report however you like.  You can compile any old R script, regardless of it’s structure, but there are a lot of options at your disposal for formatting and prettifying, if that’s your thing.  Then it’s a one liner to compile into a report:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-r\" data-lang=\"r\"><span class=\"n\">library</span><span class=\"p\">(</span><span class=\"s1\">'rmarkdown'</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"n\">rmarkdown</span><span class=\"o\">::</span><span class=\"n\">render</span><span class=\"p\">(</span><span class=\"s1\">'/Users/you/Documents/yourscript.R'</span><span class=\"p\">)</span></code></pre></figure>\n\n<h4 id=\"rmarkdown-vs-r\">Rmarkdown vs R</h4>\n\n<ul>\n  <li>\n    <p><strong>Rmd != R:</strong> You can’t <code class=\"highlighter-rouge\">source</code> an Rmarkdown file like you would an R script.  I have no doubt there are tools that exist (or can be easily developed) to strip the code chunks from an Rmarkdown file, but this seems cumbersome.</p>\n  </li>\n  <li>\n    <p><strong>Competing incentives: presentation vs. workflow:</strong> When you’ve got tons of code chunks with just a few lines each, it can be annoying to test your code without knitting (compiling) your entire document.  I often purposely keep chunks big to facilitate running blocks of selected code interactively.  This makes for smooth coding, but slightly more obtuse documents.  One strategy I’ve tried is to “Rmarkdownify” my code only after I’ve thoroughly developed and tested it… but then when it comes time to re-examine, change or pipe code someplace else, you’ve got this Rmarkdown document to overhaul.  And in my work (many more parts analysis than development), I’m rarely ever done or know when I’m done.</p>\n  </li>\n  <li>\n    <p><strong>No need to duplicate Rmd and R scripts:</strong> Say you’re writing some data wrangling code that pulls from a handful of data sources, merges them all together, aggregates, scales and transforms them into an analytics ready dataset.  You want to document this process… but you also want to be able to pipe this piece of ETL code elsewhere.  I’ve been tempted in the past to maintain both a bare-bones R script and a verbose flowery Rmd file describing the process.  This keeps both the developers (on your team or within yourself) happy and the consumers of your analysis happy… but it will probably drive you crazy maintaining two versions of more-or-less the same thing.  With an R script formatted with markdown-style comments, you might be able to get the two birds with one stone.</p>\n  </li>\n  <li>\n    <p><strong>Run-time:</strong> This isn’t very well addressed by either method, but I certainly find it easier to work with bigger data anything computationally intensive using native R scripts.  When I knit a big Rmarkdown script, I often cross my fingers and hope it doesn’t bug 95% through and I have to start over.  By default, knitting .Rmd files does not persist objects to the Global Environment, although I’d be surprised if there wasn’t a way to change this.</p>\n  </li>\n  <li>\n    <p><strong>All pros, no cons:</strong>  If you’re working on a team that doesn’t want to use knitr and Rmarkdown, no matter.  Your team members might gaze at seemingly strange comments in your R scripts, but they can run, read, edit and pipe your code as if it was their own.  You can even compile their code into reports.  This will essentially just separate code from output and plots printed to the console.  It might not be the prettiest, but it sure beats saving off graphics and results and copying and pasting into slides somewhere.  And I find it’s easier to find your chart, finding, or what-have-you in a compiled document than within a script where you have to run code, dependencies and likely muddle up the current environment in which you’re working.</p>\n  </li>\n</ul>\n\n<h4 id=\"rendered-report-in-the-flesh\">Rendered report in the flesh</h4>\n\n<p>All the features I’m used to using with Rmarkdown documents worked when embedded in native R scripts.</p>\n\n<p>The script below (<a href=\"https://github.com/brooksandrew/simpleblog/blob/gh-pages/assets/R/renderRscript2markdown_sample.R\">also here</a>) generates <a href=\"http://htmlpreview.github.io/?https://raw.githubusercontent.com/brooksandrew/simpleblog/gh-pages/assets/R/renderRscript2markdown_sample.html\">this html document</a> (below).</p>\n\n<h4 id=\"html-report-generated-by-r-script-below\">HTML report generated by R script below</h4>\n<iframe src=\"http://htmlpreview.github.io/?https://raw.githubusercontent.com/brooksandrew/simpleblog/gh-pages/assets/R/renderRscript2markdown_sample.html\" width=\"700\" height=\"800\"></iframe>\n\n<h4 id=\"r-script-that-generates-the-html-report-above\">R script that generates the html report above</h4>\n\n<p>This is perhaps not a great example of how a typical R script would look.  A typical R script/document would probably have significantly more code and less comments.  However, I know how code appears in a report – my purpose is really to test the markdown functionality.</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-r\" data-lang=\"r\"><span class=\"cd\">#' ---</span><span class=\"w\">\n</span><span class=\"cd\">#' title: Sample HTML report generated from R script</span><span class=\"w\">\n</span><span class=\"cd\">#' author: Andrew Brooks</span><span class=\"w\">\n</span><span class=\"cd\">#' date: March 4, 2015</span><span class=\"w\">\n</span><span class=\"cd\">#' output:</span><span class=\"w\">\n</span><span class=\"cd\">#'    html_document:</span><span class=\"w\">\n</span><span class=\"cd\">#'      toc: true</span><span class=\"w\">\n</span><span class=\"cd\">#'      highlight: zenburn</span><span class=\"w\">\n</span><span class=\"cd\">#' ---</span><span class=\"w\">\n\n</span><span class=\"cd\">#' ## Generate document body from comments</span><span class=\"w\">\n</span><span class=\"cd\">#' All the features from markdown and markdown supported within .Rmd documents, I was able to</span><span class=\"w\">\n</span><span class=\"cd\">#' get from within R scripts.  Here are some that I tested and use most frequently:  </span><span class=\"w\">\n</span><span class=\"cd\">#' </span><span class=\"w\">\n</span><span class=\"cd\">#' * Smart comment fomatting in your R script generate the body and headers of the document</span><span class=\"w\">\n</span><span class=\"cd\">#'     * Simply tweak your comments to begin with `#'` instead of just `#`  </span><span class=\"w\">\n</span><span class=\"cd\">#' * Create markdown headers as normal: `#' #` for h1, `#' ##` for h2, etc.</span><span class=\"w\">\n</span><span class=\"cd\">#' * Add two spaces to the end of a comment line to start a new line (just like regular markdown)</span><span class=\"w\">\n</span><span class=\"cd\">#' * Add `toc: true` to YAML frontmatter to create a table of contents with links like the one at the </span><span class=\"w\">\n</span><span class=\"cd\">#' top of this page that links to h1, h2 &amp; h3's indented like so:</span><span class=\"w\">\n</span><span class=\"cd\">#'     * h1</span><span class=\"w\">\n</span><span class=\"cd\">#'         * h2</span><span class=\"w\">\n</span><span class=\"cd\">#'             * h3</span><span class=\"w\">\n</span><span class=\"cd\">#' * Modify YAML to change syntax highlighting style (I'm using zenburn), author, title, theme, and all the good stuff</span><span class=\"w\">\n</span><span class=\"cd\">#' you're used to setting in Rmd documents.</span><span class=\"w\">\n</span><span class=\"cd\">#' * Sub-bullets like the ones above are created by a `#' *` with 4 spaces per level of indentation.</span><span class=\"w\">\n</span><span class=\"cd\">#' * Surround text with `*` to *italicize*  </span><span class=\"w\">\n</span><span class=\"cd\">#' * Surround text with `**` to **bold**  </span><span class=\"w\">\n</span><span class=\"cd\">#' * Surround text with `***` to ***italicize &amp; bold***  </span><span class=\"w\">\n</span><span class=\"cd\">#' * Skip lines with `#' &lt;br&gt;`</span><span class=\"w\">\n</span><span class=\"cd\">#' * Keep comments in code, but hide from printing in report with `#' &lt;!-- this text will not print in report --&gt;`  </span><span class=\"w\">\n</span><span class=\"cd\">#' * Add hyperlinks:</span><span class=\"w\">\n</span><span class=\"cd\">#'     * [Rmarkdown cheatsheet](http://rmarkdown.rstudio.com/RMarkdownCheatSheet.pdf)</span><span class=\"w\">\n</span><span class=\"cd\">#'     * [Rmarkdown Reference Guide](http://rmarkdown.rstudio.com/RMarkdownReferenceGuide.pdf)</span><span class=\"w\">\n</span><span class=\"cd\">#'     * [Compiling R notebooks from R Scripts](http://rmarkdown.rstudio.com/r_notebook_format.html)</span><span class=\"w\">\n</span><span class=\"cd\">#' </span><span class=\"w\">\n\n</span><span class=\"c1\"># comments without the extra tick show up like this.  And get included in code blocks</span><span class=\"w\">\n</span><span class=\"c1\"># loading mtcars data</span><span class=\"w\">\n</span><span class=\"n\">data</span><span class=\"p\">(</span><span class=\"n\">mtcars</span><span class=\"p\">)</span><span class=\"w\">\n\n</span><span class=\"cd\">#' ## Messing with data</span><span class=\"w\">\n \n</span><span class=\"n\">library</span><span class=\"p\">(</span><span class=\"s1\">'knitr'</span><span class=\"p\">)</span><span class=\"w\">\n\n</span><span class=\"cd\">#' ### 3 ways to print an object</span><span class=\"w\">\n</span><span class=\"cd\">#' ...specifically a data.frame in this case.  Ordered from least to most pretty (in my opinion).</span><span class=\"w\">\n\n</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">(</span><span class=\"n\">mtcars</span><span class=\"p\">))</span><span class=\"w\">\n</span><span class=\"n\">knitr</span><span class=\"o\">::</span><span class=\"n\">kable</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">(</span><span class=\"n\">mtcars</span><span class=\"p\">))</span><span class=\"w\">\n</span><span class=\"cd\">#' including `#+ results='asis'` chunk option for formatting</span><span class=\"w\">\n</span><span class=\"c1\">#+ results='asis'</span><span class=\"w\">\n</span><span class=\"n\">knitr</span><span class=\"o\">::</span><span class=\"n\">kable</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">(</span><span class=\"n\">mtcars</span><span class=\"p\">))</span><span class=\"w\">\n\n</span><span class=\"cd\">#' ### Plotting</span><span class=\"w\">\n</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">mtcars</span><span class=\"o\">$</span><span class=\"n\">mpg</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">mtcars</span><span class=\"o\">$</span><span class=\"n\">disp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">col</span><span class=\"o\">=</span><span class=\"n\">mtcars</span><span class=\"o\">$</span><span class=\"n\">cyl</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">pch</span><span class=\"o\">=</span><span class=\"m\">19</span><span class=\"p\">)</span><span class=\"w\">\n\n</span><span class=\"cd\">#' We can change the chunk options we would use for a code block using `knitr` by using a comment that starts with `#+`.</span><span class=\"w\">\n</span><span class=\"cd\">#' For example, to change the plot size, we can specify `#+ fig.width=4, fig.height=4` before plotting.  </span><span class=\"w\">\n</span><span class=\"cd\">#' &lt;br&gt;</span><span class=\"w\">\n</span><span class=\"cd\">#' A new chunk is automatically generated (chunk settings reset) whenever we add document text with `#'` or change.</span><span class=\"w\">\n</span><span class=\"cd\">#' However, it is possible to specify global chunk options, if desired.</span><span class=\"w\">\n</span><span class=\"cd\">#' chunk options again with `#+`.  </span><span class=\"w\">\n\n</span><span class=\"cd\">#' `#+ fig.width=4, fig.height=4` &lt;!-- simply for illustrative purposes in the document--&gt;</span><span class=\"w\">\n</span><span class=\"c1\">#+ fig.width=4, fig.height=4</span><span class=\"w\">\n</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">mtcars</span><span class=\"o\">$</span><span class=\"n\">mpg</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">mtcars</span><span class=\"o\">$</span><span class=\"n\">disp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">col</span><span class=\"o\">=</span><span class=\"n\">mtcars</span><span class=\"o\">$</span><span class=\"n\">cyl</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">pch</span><span class=\"o\">=</span><span class=\"m\">19</span><span class=\"p\">)</span><span class=\"w\">\n\n\n</span><span class=\"cd\">#' Small plots often render with strange resolution and relative sizings of labels, axes, etc.  The `dpi` chunk option can be used </span><span class=\"w\">\n</span><span class=\"cd\">#' to fix this.  Just be sure to adjust the fig.width and fig.height accordingly.</span><span class=\"w\">\n</span><span class=\"cd\">#' </span><span class=\"w\">\n</span><span class=\"cd\">#' **Bad plot: ** `#+ fig.width=2, fig.height=2`</span><span class=\"w\">\n</span><span class=\"c1\">#+ fig.width=2, fig.height=2</span><span class=\"w\">\n</span><span class=\"n\">hist</span><span class=\"p\">(</span><span class=\"n\">mtcars</span><span class=\"o\">$</span><span class=\"n\">mpg</span><span class=\"p\">)</span><span class=\"w\">\n\n</span><span class=\"cd\">#' **Good plot: ** `#+ fig.width=4, fig.height=4, dpi=50`</span><span class=\"w\">\n</span><span class=\"c1\">#+ fig.width=4, fig.height=4, dpi=50</span><span class=\"w\">\n</span><span class=\"n\">hist</span><span class=\"p\">(</span><span class=\"n\">mtcars</span><span class=\"o\">$</span><span class=\"n\">mpg</span><span class=\"p\">)</span><span class=\"w\">\n\n</span><span class=\"cd\">#' Generate a series of plots from a loop</span><span class=\"w\">\n</span><span class=\"c1\">#+ fig.width=3, fig.height=3</span><span class=\"w\">\n</span><span class=\"k\">for</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"m\">1</span><span class=\"o\">:</span><span class=\"n\">ncol</span><span class=\"p\">(</span><span class=\"n\">mtcars</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"n\">hist</span><span class=\"p\">(</span><span class=\"n\">mtcars</span><span class=\"p\">[,</span><span class=\"n\">i</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">breaks</span><span class=\"o\">=</span><span class=\"m\">40</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">xlab</span><span class=\"o\">=</span><span class=\"s1\">''</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"o\">=</span><span class=\"nf\">names</span><span class=\"p\">(</span><span class=\"n\">mtcars</span><span class=\"p\">)[</span><span class=\"n\">i</span><span class=\"p\">])</span><span class=\"w\">\n\n</span><span class=\"cd\">#' ### Let's build a random forest model  </span><span class=\"w\">\n</span><span class=\"cd\">#' ... and explore some model output.  First here's a big chunk of text from the random forest documentation:  </span><span class=\"w\">\n</span><span class=\"cd\">#' &lt;br&gt;</span><span class=\"w\">\n</span><span class=\"cd\">#' **Random forest documentation:**  </span><span class=\"w\">\n</span><span class=\"cd\">#' randomForest implements Breiman's random forest algorithm (based on Breiman and Cutler's original Fortran code) </span><span class=\"w\">\n</span><span class=\"cd\">#' for classification and regression. It can also be used in unsupervised mode for assessing proximities among data points.  </span><span class=\"w\">\n</span><span class=\"cd\">#' &lt;br&gt;</span><span class=\"w\">\n</span><span class=\"cd\">#' **Note:**  </span><span class=\"w\">\n</span><span class=\"cd\">#' The forest structure is slightly different between classification and regression. For details on how the trees are stored, see the help page for getTree.    </span><span class=\"w\">\n</span><span class=\"cd\">#' &lt;br&gt;</span><span class=\"w\">\n</span><span class=\"cd\">#' If xtest is given, prediction of the test set is done “in place” as the trees are grown. If ytest is also given, and do.trace is set to some positive integer, </span><span class=\"w\">\n</span><span class=\"cd\">#' then for every do.trace trees, the test set error is printed. Results for the test set is returned in the test component of the resulting randomForest object. </span><span class=\"w\">\n</span><span class=\"cd\">#' For classification, the votes component (for training or test set data) contain the votes the cases received for the classes. If norm.votes=TRUE, the fraction </span><span class=\"w\">\n</span><span class=\"cd\">#' is given, which can be taken as predicted probabilities for the classes.  </span><span class=\"w\">\n</span><span class=\"cd\">#' &lt;br&gt;</span><span class=\"w\">\n</span><span class=\"cd\">#' For large data sets, especially those with large number of variables, calling randomForest via the formula interface is not advised: There may be too </span><span class=\"w\">\n</span><span class=\"cd\">#' much overhead in handling the formula.  </span><span class=\"w\">\n</span><span class=\"cd\">#' &lt;br&gt;</span><span class=\"w\">\n</span><span class=\"cd\">#' The “local” (or casewise) variable importance is computed as follows: For classification, it is the increase in percent of times a case is OOB </span><span class=\"w\">\n</span><span class=\"cd\">#' and misclassified when the variable is permuted. For regression, it is the average increase in squared OOB residuals when the variable is permuted.  </span><span class=\"w\">\n\n\n</span><span class=\"c1\"># OK. now let's actually use random.forest</span><span class=\"w\">\n</span><span class=\"n\">library</span><span class=\"p\">(</span><span class=\"s1\">'randomForest'</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"n\">mtcars</span><span class=\"o\">$</span><span class=\"n\">am</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">as.factor</span><span class=\"p\">(</span><span class=\"n\">mtcars</span><span class=\"o\">$</span><span class=\"n\">am</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"n\">rf</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">randomForest</span><span class=\"p\">(</span><span class=\"n\">am</span><span class=\"o\">~</span><span class=\"n\">.</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ntree</span><span class=\"o\">=</span><span class=\"m\">100</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">mtcars</span><span class=\"p\">)</span><span class=\"w\">\n\n</span><span class=\"cd\">#' Here's the resulting confusion matrix on the training data.  Not very clear to a non-technical or non-forest savvy audience.</span><span class=\"w\">\n</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"n\">rf</span><span class=\"p\">)</span><span class=\"w\">\n\n</span><span class=\"cd\">#' ### Dynamic comments</span><span class=\"w\">\n</span><span class=\"cd\">#' We can get fancy and actually dynamically generate some commentary around these results.  That is we can auto-fill parts of our document text</span><span class=\"w\">\n</span><span class=\"cd\">#' with objects from the R environment.  This could be useful with analyses that involve stochastic </span><span class=\"w\">\n</span><span class=\"cd\">#' elements changing from run to run like random forest.  Or any analysis where results are subject to change.    </span><span class=\"w\">\n</span><span class=\"cd\">#' &lt;br&gt;  </span><span class=\"w\">\n</span><span class=\"cd\">#' `r rf$confusion[1,1]` cars are correctly classified as 0.  </span><span class=\"w\">\n</span><span class=\"cd\">#' `r rf$confusion[2,2]` cars are correctly classified as 1.  </span><span class=\"w\">\n</span><span class=\"cd\">#' `r rf$confusion[1,2]` cars are misclassified as 1.  </span><span class=\"w\">\n</span><span class=\"cd\">#' `r rf$confusion[2,1]` cars are misclassified as 0.  </span><span class=\"w\">\n</span><span class=\"cd\">#' </span><span class=\"w\">\n</span><span class=\"cd\">#' These numbers were generated by wrapping the R expression to excute into the ticks like so: </span><span class=\"w\">\n</span><span class=\"cd\">#' I don't know how to write this within a `#'` comment without evaluating it, so I'm documenting here as a</span><span class=\"w\">\n</span><span class=\"cd\">#' character string:  </span><span class=\"w\">\n</span><span class=\"c1\">#+ echo=F, eval=T</span><span class=\"w\">\n</span><span class=\"n\">cat</span><span class=\"p\">(</span><span class=\"s2\">\"#' `r rf$confusion[2,1]` cars are misclassified as 0. \"</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"cd\">#' &lt;br&gt;</span><span class=\"w\">\n</span><span class=\"cd\">#' </span><span class=\"w\">\n</span><span class=\"cd\">#' ### Generate comments in a loop</span><span class=\"w\">\n</span><span class=\"cd\">#' </span><span class=\"w\">\n</span><span class=\"cd\">#' This is useful if you want to generate lots of text without writing it manually.  </span><span class=\"w\">\n\n</span><span class=\"cd\">#' `#+ results='asis'`</span><span class=\"w\">\n</span><span class=\"c1\">#+ results='asis'</span><span class=\"w\">\n</span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"m\">1</span><span class=\"o\">:</span><span class=\"m\">10</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"n\">rf</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">randomForest</span><span class=\"p\">(</span><span class=\"n\">am</span><span class=\"o\">~</span><span class=\"n\">.</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ntree</span><span class=\"o\">=</span><span class=\"m\">100</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">mtcars</span><span class=\"p\">)</span><span class=\"w\">\n  </span><span class=\"n\">cat</span><span class=\"p\">(</span><span class=\"s2\">\"iteration \"</span><span class=\"p\">,</span><span class=\"n\">i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">\": \"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">rf</span><span class=\"o\">$</span><span class=\"n\">confusion</span><span class=\"p\">[</span><span class=\"m\">1</span><span class=\"p\">,</span><span class=\"m\">1</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"s2\">\"cars are correctly classified as 0\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">\"\\n\"</span><span class=\"p\">)</span><span class=\"w\">\n  </span><span class=\"n\">cat</span><span class=\"p\">(</span><span class=\"s1\">'\\n'</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n\n</span><span class=\"cd\">#' ## Toggle chunk settings globally by R variables</span><span class=\"w\">\n</span><span class=\"cd\">#' Much like we used R objects to dynamically generate text to print in the document (in the form of comments),</span><span class=\"w\">\n</span><span class=\"cd\">#' we can use R objects to dynamically specify chunk options.  </span><span class=\"w\">\n\n</span><span class=\"cd\">#' When we set `evaluateStuff` to `TRUE` or `FALSE`, the following 3 chunks will evaluate (or not) as we choose.</span><span class=\"w\">\n</span><span class=\"cd\">#' We can toggle them all with one variable, instead of manually changing the chunk settings with `#+ eval=T`</span><span class=\"w\">\n</span><span class=\"cd\">#' in the R script multiple times.  Simply</span><span class=\"w\">\n</span><span class=\"cd\">#' include the variable you want to execute in the chunk comments with ticks.   </span><span class=\"w\">\n</span><span class=\"cd\">#' Like so:  **#+ eval=\\`evaluateStuff\\`**</span><span class=\"w\">\n\n</span><span class=\"n\">evaluateStuff</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"nb\">T</span><span class=\"w\">\n\n</span><span class=\"c1\">#+ eval=`evaluateStuff`</span><span class=\"w\">\n</span><span class=\"n\">cat</span><span class=\"p\">(</span><span class=\"s1\">'first thing to evaluate'</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"c1\">#+ eval=`evaluateStuff`</span><span class=\"w\">\n</span><span class=\"n\">cat</span><span class=\"p\">(</span><span class=\"s1\">'second thing to evaluate'</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"c1\">#+ eval=`evaluateStuff`</span><span class=\"w\">\n</span><span class=\"n\">cat</span><span class=\"p\">(</span><span class=\"s1\">'third thing to evaluate'</span><span class=\"p\">)</span><span class=\"w\">\n\n</span><span class=\"cd\">#' &lt;br&gt;</span><span class=\"w\">\n</span><span class=\"cd\">#' Now let's just print the code and not evaluate anything.</span><span class=\"w\">\n</span><span class=\"n\">evaluateStuff</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"nb\">F</span><span class=\"w\">\n\n</span><span class=\"c1\">#+ eval=`evaluateStuff`</span><span class=\"w\">\n</span><span class=\"n\">cat</span><span class=\"p\">(</span><span class=\"s1\">'first thing to evaluate'</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"c1\">#+ eval=`evaluateStuff`</span><span class=\"w\">\n</span><span class=\"n\">cat</span><span class=\"p\">(</span><span class=\"s1\">'second thing to evaluate'</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"c1\">#+ eval=`evaluateStuff`</span><span class=\"w\">\n</span><span class=\"n\">cat</span><span class=\"p\">(</span><span class=\"s1\">'third thing to evaluate'</span><span class=\"p\">)</span><span class=\"w\">\n\n</span><span class=\"cd\">#' ## Converting R Script to HTML/PDF  </span><span class=\"w\">\n</span><span class=\"cd\">#' If you did everyhing right, above this is the easy part.  Simply render the script as desired with the `render` function from `rmarkdown`.  </span><span class=\"w\">\n\n</span><span class=\"cd\">#' `rmarkdown::render('/Users/you/Documents/yourscript.R')`</span></code></pre></figure>\n\n\n  <p><a href=\"http://brooksandrew.github.io/simpleblog/articles/render-reports-directly-from-R-scripts/\">Render reports directly from R scripts</a> was originally published by andrew brooks at <a href=\"http://brooksandrew.github.io/simpleblog\">andrew brooks</a> on March 05, 2015.</p>"
}