{
  "title": "The Neal Kernel and Random Kitchen Sinks",
  "description": "<p>So you read a <a title=\"Learning with Kernels\" href=\"http://www.amazon.com/Learning-Kernels-Regularization-Optimization-Computation/dp/0262194759\">book</a> on <a title=\"Grace Wahba\" href=\"http://www.ec-securehost.com/SIAM/CB59.html\">Reproducing Kernel Hilbert Spaces</a> and you&rsquo;d like to try out this kernel thing. But you&rsquo;ve got a lot of data and most algorithms will give you an expansion that requires a number of kernel functions linear in the amount of data. Not good if you&rsquo;ve got millions to billions of instances.</p>\n<p>You could try out low rank expansions such as the Nystrom method of <a title=\"Nystrom\" href=\"http://lapmal.epfl.ch/papers/nystroem.pdf\">Seeger and Williams</a>, 2000, the randomized Sparse Greedy Matrix Approximation of <a title=\"SGMA\" href=\"http://arnetminer.org/dev.do?m=downloadpdf&amp;url=http://arnetminer.org/pdf/PDFFiles2/--d---d-1258203727680/Sparse%20Greedy%20Matrix%20Approximation%20for%20Machine%20Learning1258205169211.pdf\">Smola and Schölkopf</a>, 2000 (the Nyström method is a special case where we only randomize by a single term), or the very efficient positive diagonal pivoting trick of <a title=\"Pivoting\" href=\"http://www.ai.mit.edu/projects/jmlr/papers/volume2/fine01a/fine01a.pdf\">Scheinberg and Fine</a>, 2001. Alas, all those methods suffer from a serious problem: at training you need to multiply by the inverse of the reduced covariance matrix, which is \\(O(d^2)\\) cost for a d dimensional expansion. An example of an online algorithm that suffers from the same problem is this (NIPS award winning) paper of <a title=\"Csato Opper\" href=\"http://www.ki.tu-berlin.de/fileadmin/fg135/Publikationen/Opper/papers02/CsOp02.pdf\">Csato and Opper</a>, 2002. Assuming that we&rsquo;d like to have d grow with the sample size this is not a very useful strategy. Instead, we want to find a method which has \\(O(d)\\) cost for d attributes yet shares good regularization properties that can be properly analyzed.</p>\n<p>Enter Radford Neal&rsquo;s seminal paper from 1994 on <a title=\"GP\" href=\"http://www.cs.toronto.edu/~radford/ftp/pin.pdf\">Gaussian Processes</a> (a famous NIPS reject). In it he shows that a Neural Network with an infinite number of nodes and a Gaussian Prior over coefficients converges to a GP. More specifically, we get the kernel</p>\n<p>$$k(x,x&rsquo;) = E_{c}[\\phi_c(x) \\phi_c(x&rsquo;)]$$</p>\n<p>Here \\(\\phi_c(x)\\) is a function parametrized by c, e.g. the location of a basis function, the degree of a polynomial, or the direction of a Fourier basis function. There is also a discussion regarding RKHS in a paper by <a title=\"Regularization\" href=\"http://alex.smola.org/papers/1998/SmoSchMul98.pdf\">Smola, Schölkof and Müller</a>, 1998 that discusses this phenomenon in regularization networks. These ideas were promptly forgotten by its authors. One exception is the <a title=\"ekm\" href=\"http://noble.gs.washington.edu/papers/schoelkopf_kernel.html\">empirical kernel map</a> where one uses a <a title=\"svm linear\" href=\"ftp://ftp.cs.wisc.edu/math-prog/talks/afosr.ps\">generic design matrix</a> that is generated through the observations directly. </p>\n<p>It was not until the paper by <a title=\"rks\" href=\"http://books.nips.cc/papers/files/nips21/NIPS2008_0885.pdf\">Rahimi and Recht</a>, 2008 on random kitchen sinks that this idea regained popularity. In a nutshell the algorithm works as follows:  Draw d values \\(c_i\\) from the distribution over c. Use the corresponding basis functions in a linear model with quadratic penalty on the expansion coefficients.   This method works whenever the basis functions are well bounded. For instance, for the Fourier basis the functions are bounded by 1. The proof of convergence of the explicit function expansion to the kernel is then a simple consequence of Chernoff bounds.</p>\n<p>In the random kitchen sinks paper Rahimi and Recht discuss RBF kernels and binary indicator functions. However, this works more generally for any set of well behaved set of basis functions used in generating a random design matrix. A few examples:</p>\n<ul><li>Fourier basis with Gaussian parameters. Take functions of the form \\(e^{i w^\\top x}\\) where the coefficients \\(w\\) are drawn from a Gaussian. This is the random kitchen sinks paper. Obviously you can use hash functions rather than an actual random number generator. This ensures that you don&rsquo;t need to store all parameters \\(w\\).</li>\n<li>Pick random separating hyperplanes. This will effectively give you functions of bounded variation.</li>\n<li>Use the empirical kernel map, i.e. we use some function \\(k(x,x&rsquo;)\\) for which we employ for \\(x&rsquo;\\) a random subset of the data we wish to train on.</li>\n</ul>",
  "link": "https://blog.smola.org/post/10572672684",
  "guid": "https://blog.smola.org/post/10572672684",
  "pubDate": "Fri, 23 Sep 2011 16:01:51 -0700"
}