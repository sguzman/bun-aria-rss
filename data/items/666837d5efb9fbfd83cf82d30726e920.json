{
  "title": "Streaming Data with Tornado and WebSockets",
  "link": "",
  "id": "https://www.georgeho.org/tornado-websockets/",
  "updated": "2021-10-05T00:00:00Z",
  "published": "2021-10-05T00:00:00Z",
  "content": "<p>A lot of data science and machine learning practice assumes a static dataset,\nmaybe with some MLOps tooling for rerunning a model pipeline with the freshest\nversion of the dataset.</p>\n<p>Working with streaming data is an entirely different ball game, and it wasn&rsquo;t\nclear to me what tools a data scientist might reach for when dealing with\nstreaming data<sup id=\"fnref:1\"><a href=\"#fn:1\" class=\"footnote-ref\" role=\"doc-noteref\">1</a></sup>.</p>\n<p>I recently came across a pretty straightforward and robust solution:\n<a href=\"https://datatracker.ietf.org/doc/html/rfc6455\">WebSockets</a> and\n<a href=\"https://www.tornadoweb.org/en/stable/\">Tornado</a>. Tornado is a Python web\nframework with strong support for asynchronous networking. WebSockets are a\nway for two processes (or apps) to communicate with each other (similar to HTTP\nrequests with REST endpoints). Of course, Tornado has pretty good support for\nWebSockets as well.</p>\n<p>In this blog post I&rsquo;ll give a minimal example of using Tornado and WebSockets\nto handle streaming data. The toy example I have is one app (<code>server.py</code>)\nwriting samples of a Bernoulli to a WebSocket, and another app (<code>client.py</code>)\nlistening to the WebSocket and keeping track of the posterior distribution for\na <a href=\"https://www.georgeho.org/bayesian-bandits/\">Beta-Binomial conjugate model</a>.\nAfter walking through the code, I&rsquo;ll discuss these tools, and why they&rsquo;re good\nchoices for working with streaming data.</p>\n<p>For another tutorial on this same topic, you can check out <a href=\"https://en.proft.me/2014/05/16/realtime-web-application-tornado-and-websocket/\"><code>proft</code>&rsquo;s blog\npost</a>.</p>\n<h2 id=\"server\">Server</h2>\n<ul>\n<li>When <code>WebSocketServer</code> is registered to a REST endpoint (in <code>main</code>), it keeps\ntrack of any processes who are listening to that endpoint, and pushes\nmessages to them when <code>send_message</code> is called.\n<ul>\n<li>Note that <code>clients</code> is a class variable, so <code>send_message</code> is a class\nmethod.</li>\n<li>This class could be extended to also listen to the endpoint, instead of\njust blindly pushing messages out &mdash; after all, WebSockets allow for\nbidirectional data flow.</li>\n</ul>\n</li>\n<li>The <code>RandomBernoulli</code> and <code>PeriodicCallback</code> make a pretty crude example, but\nyou could write a class that transmits data in real-time to suit your use\ncase. For example, you could watch a file for any modifications using\n<a href=\"https://pythonhosted.org/watchdog/\"><code>watchdog</code></a>, and dump the changes into\nthe WebSocket.</li>\n<li>The <a href=\"https://www.tornadoweb.org/en/stable/web.html?highlight=websocket_ping#tornado.web.Application.settings\"><code>websocket_ping_interval</code> and <code>websocket_ping_timeout</code> arguments to\n<code>tornado.Application</code></a>\nconfigure periodic pings of WebSocket connections, keeping connections alive\nand allowing dropped connections to be detected and closed.</li>\n<li>It&rsquo;s also worth noting that there&rsquo;s a\n<a href=\"https://www.tornadoweb.org/en/stable/websocket.html?highlight=websocket_max_message_size#tornado.websocket.WebSocketHandler\"><code>tornado.websocket.WebSocketHandler.websocket_max_message_size</code></a>\nattribute. While this is set to a generous 10 MiB, it&rsquo;s important that the\nWebSocket messages don&rsquo;t exceed this limit!</li>\n</ul>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-python\" data-lang=\"python\"><span style=\"display:flex;\"><span><span style=\"color:#e6db74\">&#34;&#34;&#34; Every 100ms, sample from a Bernoulli and write the value to a WebSocket. &#34;&#34;&#34;</span>\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#f92672\">import</span> random\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#f92672\">import</span> tornado.ioloop\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#f92672\">import</span> tornado.web\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#f92672\">import</span> tornado.websocket\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">class</span> <span style=\"color:#a6e22e\">WebSocketServer</span>(tornado<span style=\"color:#f92672\">.</span>websocket<span style=\"color:#f92672\">.</span>WebSocketHandler):\n</span></span><span style=\"display:flex;\"><span> <span style=\"color:#e6db74\">&#34;&#34;&#34;Simple WebSocket handler to serve clients.&#34;&#34;&#34;</span>\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span> <span style=\"color:#75715e\"># Note that `clients` is a class variable and `send_message` is a</span>\n</span></span><span style=\"display:flex;\"><span> <span style=\"color:#75715e\"># classmethod.</span>\n</span></span><span style=\"display:flex;\"><span> clients <span style=\"color:#f92672\">=</span> set()\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span> <span style=\"color:#66d9ef\">def</span> <span style=\"color:#a6e22e\">open</span>(self):\n</span></span><span style=\"display:flex;\"><span> WebSocketServer<span style=\"color:#f92672\">.</span>clients<span style=\"color:#f92672\">.</span>add(self)\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span> <span style=\"color:#66d9ef\">def</span> <span style=\"color:#a6e22e\">on_close</span>(self):\n</span></span><span style=\"display:flex;\"><span> WebSocketServer<span style=\"color:#f92672\">.</span>clients<span style=\"color:#f92672\">.</span>remove(self)\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span> <span style=\"color:#a6e22e\">@classmethod</span>\n</span></span><span style=\"display:flex;\"><span> <span style=\"color:#66d9ef\">def</span> <span style=\"color:#a6e22e\">send_message</span>(cls, message: str):\n</span></span><span style=\"display:flex;\"><span> print(<span style=\"color:#e6db74\">f</span><span style=\"color:#e6db74\">&#34;Sending message </span><span style=\"color:#e6db74\">{</span>message<span style=\"color:#e6db74\">}</span><span style=\"color:#e6db74\"> to </span><span style=\"color:#e6db74\">{</span>len(cls<span style=\"color:#f92672\">.</span>clients)<span style=\"color:#e6db74\">}</span><span style=\"color:#e6db74\"> client(s).&#34;</span>)\n</span></span><span style=\"display:flex;\"><span> <span style=\"color:#66d9ef\">for</span> client <span style=\"color:#f92672\">in</span> cls<span style=\"color:#f92672\">.</span>clients:\n</span></span><span style=\"display:flex;\"><span> client<span style=\"color:#f92672\">.</span>write_message(message)\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">class</span> <span style=\"color:#a6e22e\">RandomBernoulli</span>:\n</span></span><span style=\"display:flex;\"><span> <span style=\"color:#66d9ef\">def</span> __init__(self):\n</span></span><span style=\"display:flex;\"><span> self<span style=\"color:#f92672\">.</span>p <span style=\"color:#f92672\">=</span> <span style=\"color:#ae81ff\">0.72</span>\n</span></span><span style=\"display:flex;\"><span> print(<span style=\"color:#e6db74\">f</span><span style=\"color:#e6db74\">&#34;True p = </span><span style=\"color:#e6db74\">{</span>self<span style=\"color:#f92672\">.</span>p<span style=\"color:#e6db74\">}</span><span style=\"color:#e6db74\">&#34;</span>)\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span> <span style=\"color:#66d9ef\">def</span> <span style=\"color:#a6e22e\">sample</span>(self):\n</span></span><span style=\"display:flex;\"><span> <span style=\"color:#66d9ef\">return</span> int(random<span style=\"color:#f92672\">.</span>uniform(<span style=\"color:#ae81ff\">0</span>, <span style=\"color:#ae81ff\">1</span>) <span style=\"color:#f92672\">&lt;=</span> self<span style=\"color:#f92672\">.</span>p)\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">def</span> <span style=\"color:#a6e22e\">main</span>():\n</span></span><span style=\"display:flex;\"><span> <span style=\"color:#75715e\"># Create a web app whose only endpoint is a WebSocket, and start the web</span>\n</span></span><span style=\"display:flex;\"><span> <span style=\"color:#75715e\"># app on port 8888.</span>\n</span></span><span style=\"display:flex;\"><span> app <span style=\"color:#f92672\">=</span> tornado<span style=\"color:#f92672\">.</span>web<span style=\"color:#f92672\">.</span>Application(\n</span></span><span style=\"display:flex;\"><span> [(<span style=\"color:#e6db74\">r</span><span style=\"color:#e6db74\">&#34;/websocket/&#34;</span>, WebSocketServer)],\n</span></span><span style=\"display:flex;\"><span> websocket_ping_interval<span style=\"color:#f92672\">=</span><span style=\"color:#ae81ff\">10</span>,\n</span></span><span style=\"display:flex;\"><span> websocket_ping_timeout<span style=\"color:#f92672\">=</span><span style=\"color:#ae81ff\">30</span>,\n</span></span><span style=\"display:flex;\"><span> )\n</span></span><span style=\"display:flex;\"><span> app<span style=\"color:#f92672\">.</span>listen(<span style=\"color:#ae81ff\">8888</span>)\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span> <span style=\"color:#75715e\"># Create an event loop (what Tornado calls an IOLoop).</span>\n</span></span><span style=\"display:flex;\"><span> io_loop <span style=\"color:#f92672\">=</span> tornado<span style=\"color:#f92672\">.</span>ioloop<span style=\"color:#f92672\">.</span>IOLoop<span style=\"color:#f92672\">.</span>current()\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span> <span style=\"color:#75715e\"># Before starting the event loop, instantiate a RandomBernoulli and</span>\n</span></span><span style=\"display:flex;\"><span> <span style=\"color:#75715e\"># register a periodic callback to write a sampled value to the WebSocket</span>\n</span></span><span style=\"display:flex;\"><span> <span style=\"color:#75715e\"># every 100ms.</span>\n</span></span><span style=\"display:flex;\"><span> random_bernoulli <span style=\"color:#f92672\">=</span> RandomBernoulli()\n</span></span><span style=\"display:flex;\"><span> periodic_callback <span style=\"color:#f92672\">=</span> tornado<span style=\"color:#f92672\">.</span>ioloop<span style=\"color:#f92672\">.</span>PeriodicCallback(\n</span></span><span style=\"display:flex;\"><span> <span style=\"color:#66d9ef\">lambda</span>: WebSocketServer<span style=\"color:#f92672\">.</span>send_message(str(random_bernoulli<span style=\"color:#f92672\">.</span>sample())), <span style=\"color:#ae81ff\">100</span>\n</span></span><span style=\"display:flex;\"><span> )\n</span></span><span style=\"display:flex;\"><span> periodic_callback<span style=\"color:#f92672\">.</span>start()\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span> <span style=\"color:#75715e\"># Start the event loop.</span>\n</span></span><span style=\"display:flex;\"><span> io_loop<span style=\"color:#f92672\">.</span>start()\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">if</span> __name__ <span style=\"color:#f92672\">==</span> <span style=\"color:#e6db74\">&#34;__main__&#34;</span>:\n</span></span><span style=\"display:flex;\"><span> main()\n</span></span></code></pre></div><h2 id=\"client\">Client</h2>\n<ul>\n<li><code>WebSocketClient</code> is a class that:\n<ol>\n<li>Can be <code>start</code>ed and <code>stop</code>ped to connect/disconnect to the WebSocket and\nstart/stop listening to it in a separate thread</li>\n<li>Can process every message (<code>on_message</code>) it hears from the WebSocket: in\nthis case it simply maintains <a href=\"https://www.georgeho.org/bayesian-bandits/#stochastic-aka-stationary-bandits\">a count of the number of trials and\nsuccesses</a>,\nbut this processing could theoretically be anything. For example, you\ncould do some further processing of the message and then dump that into a\nseparate WebSocket for other apps (or even users!) to subscribe to.</li>\n</ol>\n</li>\n<li>To connect to the WebSocket, we need to use a WebSocket library: thankfully\nTornado has a built-in WebSocket functionality (<code>tornado.websocket</code>), but\nwe&rsquo;re also free to use other libraries such as the creatively named\n<a href=\"https://github.com/aaugustin/websockets\"><code>websockets</code></a> or\n<a href=\"https://github.com/websocket-client/websocket-client\"><code>websocket-client</code></a>.</li>\n<li>Note that we run <code>on_message</code> on the same thread as we run\n<code>connect_and_read</code>. This isn&rsquo;t a problem so long as <code>on_message</code> is fast\nenough, but a potentially wiser choice would be to offload <code>connect_and_read</code>\nto a separate thread by instantiating a\n<a href=\"https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.ThreadPoolExecutor\"><code>concurrent.futures.ThreadPoolExecutor</code></a>\nand calling\n<a href=\"https://www.tornadoweb.org/en/stable/ioloop.html#tornado.ioloop.IOLoop.run_in_executor\"><code>tornado.ioloop.IOLoop.run_in_executor</code></a>,\nso as not to block the thread where the <code>on_message</code> processing happens.</li>\n<li>The <code>io_loop</code> instantiated in <code>main</code> (as well as in <code>server.py</code>) is\nimportant: it&rsquo;s how Tornado schedules tasks (a.k.a. <em>callbacks</em>) for delayed\n(a.k.a. <em>asynchronous</em>) execution. To add a callback, we simply call\n<code>io_loop.add_callback()</code>.</li>\n<li>The <a href=\"https://www.tornadoweb.org/en/stable/websocket.html?highlight=ping_#tornado.websocket.websocket_connect\"><code>ping_interval</code> and <code>ping_timeout</code> arguments to\n<code>websocket_connect</code></a>\nconfigure periodic pings of the WebSocket connection, keeping connections\nalive and allowing dropped connections to be detected and closed.</li>\n<li>The <code>callback=self.maybe_retry_connection</code> is <a href=\"https://github.com/tornadoweb/tornado/blob/1db5b45918da8303d2c6958ee03dbbd5dc2709e9/tornado/websocket.py#L1654-L1655\">run on a future\n<code>WebSocketClientConnection</code></a>.\n<code>websocket_connect</code> doesn&rsquo;t actually establish the connection directly, but\nrather returns a future. Hence, we try to get the <code>future.result()</code> itself\n(i.e. the WebSocket client connection) &mdash; I don&rsquo;t actually do anything with\nthe <code>self.connection</code>, but you could if you wanted. In the event of an\nexception while doing that, we assume there&rsquo;s a problem with the WebSocket\nconnection and retry <code>connect_and_read</code> after 3 seconds. This all has the\neffect of recovering gracefully if the WebSocket is dropped or <code>server.py</code>\nexperiences a brief outage for whatever reason (both of which are probably\ninevitable for long-running apps using WebSockets).</li>\n</ul>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-python\" data-lang=\"python\"><span style=\"display:flex;\"><span><span style=\"color:#e6db74\">&#34;&#34;&#34; Stream data from the WebSocket and update the Beta posterior parameters online. &#34;&#34;&#34;</span>\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#f92672\">import</span> tornado.ioloop\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#f92672\">import</span> tornado.websocket\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">class</span> <span style=\"color:#a6e22e\">WebSocketClient</span>:\n</span></span><span style=\"display:flex;\"><span> <span style=\"color:#66d9ef\">def</span> __init__(self, io_loop):\n</span></span><span style=\"display:flex;\"><span> self<span style=\"color:#f92672\">.</span>connection <span style=\"color:#f92672\">=</span> <span style=\"color:#66d9ef\">None</span>\n</span></span><span style=\"display:flex;\"><span> self<span style=\"color:#f92672\">.</span>io_loop <span style=\"color:#f92672\">=</span> io_loop\n</span></span><span style=\"display:flex;\"><span> self<span style=\"color:#f92672\">.</span>num_successes <span style=\"color:#f92672\">=</span> <span style=\"color:#ae81ff\">0</span>\n</span></span><span style=\"display:flex;\"><span> self<span style=\"color:#f92672\">.</span>num_trials <span style=\"color:#f92672\">=</span> <span style=\"color:#ae81ff\">0</span>\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span> <span style=\"color:#66d9ef\">def</span> <span style=\"color:#a6e22e\">start</span>(self):\n</span></span><span style=\"display:flex;\"><span> self<span style=\"color:#f92672\">.</span>connect_and_read()\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span> <span style=\"color:#66d9ef\">def</span> <span style=\"color:#a6e22e\">stop</span>(self):\n</span></span><span style=\"display:flex;\"><span> self<span style=\"color:#f92672\">.</span>io_loop<span style=\"color:#f92672\">.</span>stop()\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span> <span style=\"color:#66d9ef\">def</span> <span style=\"color:#a6e22e\">connect_and_read</span>(self):\n</span></span><span style=\"display:flex;\"><span> print(<span style=\"color:#e6db74\">&#34;Reading...&#34;</span>)\n</span></span><span style=\"display:flex;\"><span> tornado<span style=\"color:#f92672\">.</span>websocket<span style=\"color:#f92672\">.</span>websocket_connect(\n</span></span><span style=\"display:flex;\"><span> url<span style=\"color:#f92672\">=</span><span style=\"color:#e6db74\">f</span><span style=\"color:#e6db74\">&#34;ws://localhost:8888/websocket/&#34;</span>,\n</span></span><span style=\"display:flex;\"><span> callback<span style=\"color:#f92672\">=</span>self<span style=\"color:#f92672\">.</span>maybe_retry_connection,\n</span></span><span style=\"display:flex;\"><span> on_message_callback<span style=\"color:#f92672\">=</span>self<span style=\"color:#f92672\">.</span>on_message,\n</span></span><span style=\"display:flex;\"><span> ping_interval<span style=\"color:#f92672\">=</span><span style=\"color:#ae81ff\">10</span>,\n</span></span><span style=\"display:flex;\"><span> ping_timeout<span style=\"color:#f92672\">=</span><span style=\"color:#ae81ff\">30</span>,\n</span></span><span style=\"display:flex;\"><span> )\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span> <span style=\"color:#66d9ef\">def</span> <span style=\"color:#a6e22e\">maybe_retry_connection</span>(self, future) <span style=\"color:#f92672\">-&gt;</span> <span style=\"color:#66d9ef\">None</span>:\n</span></span><span style=\"display:flex;\"><span> <span style=\"color:#66d9ef\">try</span>:\n</span></span><span style=\"display:flex;\"><span> self<span style=\"color:#f92672\">.</span>connection <span style=\"color:#f92672\">=</span> future<span style=\"color:#f92672\">.</span>result()\n</span></span><span style=\"display:flex;\"><span> <span style=\"color:#66d9ef\">except</span>:\n</span></span><span style=\"display:flex;\"><span> print(<span style=\"color:#e6db74\">&#34;Could not reconnect, retrying in 3 seconds...&#34;</span>)\n</span></span><span style=\"display:flex;\"><span> self<span style=\"color:#f92672\">.</span>io_loop<span style=\"color:#f92672\">.</span>call_later(<span style=\"color:#ae81ff\">3</span>, self<span style=\"color:#f92672\">.</span>connect_and_read)\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span> <span style=\"color:#66d9ef\">def</span> <span style=\"color:#a6e22e\">on_message</span>(self, message):\n</span></span><span style=\"display:flex;\"><span> <span style=\"color:#66d9ef\">if</span> message <span style=\"color:#f92672\">is</span> <span style=\"color:#66d9ef\">None</span>:\n</span></span><span style=\"display:flex;\"><span> print(<span style=\"color:#e6db74\">&#34;Disconnected, reconnecting...&#34;</span>)\n</span></span><span style=\"display:flex;\"><span> self<span style=\"color:#f92672\">.</span>connect_and_read()\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span> message <span style=\"color:#f92672\">=</span> int(message)\n</span></span><span style=\"display:flex;\"><span> self<span style=\"color:#f92672\">.</span>num_successes <span style=\"color:#f92672\">+=</span> message\n</span></span><span style=\"display:flex;\"><span> self<span style=\"color:#f92672\">.</span>num_trials <span style=\"color:#f92672\">+=</span> <span style=\"color:#ae81ff\">1</span>\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span> alpha <span style=\"color:#f92672\">=</span> <span style=\"color:#ae81ff\">2</span> <span style=\"color:#f92672\">+</span> self<span style=\"color:#f92672\">.</span>num_successes\n</span></span><span style=\"display:flex;\"><span> beta <span style=\"color:#f92672\">=</span> <span style=\"color:#ae81ff\">2</span> <span style=\"color:#f92672\">+</span> self<span style=\"color:#f92672\">.</span>num_trials <span style=\"color:#f92672\">-</span> self<span style=\"color:#f92672\">.</span>num_successes\n</span></span><span style=\"display:flex;\"><span> mean <span style=\"color:#f92672\">=</span> self<span style=\"color:#f92672\">.</span>num_successes <span style=\"color:#f92672\">/</span> self<span style=\"color:#f92672\">.</span>num_trials\n</span></span><span style=\"display:flex;\"><span> print(<span style=\"color:#e6db74\">f</span><span style=\"color:#e6db74\">&#34;α = </span><span style=\"color:#e6db74\">{</span>alpha<span style=\"color:#e6db74\">}</span><span style=\"color:#e6db74\">; β = </span><span style=\"color:#e6db74\">{</span>beta<span style=\"color:#e6db74\">}</span><span style=\"color:#e6db74\">; mean = </span><span style=\"color:#e6db74\">{</span>mean<span style=\"color:#e6db74\">}</span><span style=\"color:#e6db74\">&#34;</span>)\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">def</span> <span style=\"color:#a6e22e\">main</span>():\n</span></span><span style=\"display:flex;\"><span> <span style=\"color:#75715e\"># Create an event loop (what Tornado calls an IOLoop).</span>\n</span></span><span style=\"display:flex;\"><span> io_loop <span style=\"color:#f92672\">=</span> tornado<span style=\"color:#f92672\">.</span>ioloop<span style=\"color:#f92672\">.</span>IOLoop<span style=\"color:#f92672\">.</span>current()\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span> <span style=\"color:#75715e\"># Before starting the event loop, instantiate a WebSocketClient and add a</span>\n</span></span><span style=\"display:flex;\"><span> <span style=\"color:#75715e\"># callback to the event loop to start it. This way the first thing the</span>\n</span></span><span style=\"display:flex;\"><span> <span style=\"color:#75715e\"># event loop does is to start the client.</span>\n</span></span><span style=\"display:flex;\"><span> client <span style=\"color:#f92672\">=</span> WebSocketClient(io_loop)\n</span></span><span style=\"display:flex;\"><span> io_loop<span style=\"color:#f92672\">.</span>add_callback(client<span style=\"color:#f92672\">.</span>start)\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span> <span style=\"color:#75715e\"># Start the event loop.</span>\n</span></span><span style=\"display:flex;\"><span> io_loop<span style=\"color:#f92672\">.</span>start()\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#66d9ef\">if</span> __name__ <span style=\"color:#f92672\">==</span> <span style=\"color:#e6db74\">&#34;__main__&#34;</span>:\n</span></span><span style=\"display:flex;\"><span> main()\n</span></span></code></pre></div><h2 id=\"why-tornado\">Why Tornado?</h2>\n<p>Tornado is a Python web framework, but unlike the more popular Python web\nframeworks like <a href=\"https://flask.palletsprojects.com/\">Flask</a> or\n<a href=\"https://www.djangoproject.com/\">Django</a>, it has strong support for\n<a href=\"https://www.tornadoweb.org/en/stable/guide/async.html#blocking\">asynchronous networking and non-blocking\ncalls</a> &mdash;\nessentially, Tornado apps have one (single-threaded) event loop\n(<code>tornado.ioloop.IOLoop</code>), which handles all requests asynchronously,\ndispatching incoming requests to the relevant non-blocking function as the\nrequest comes in. As far as I know, Tornado is the only Python web framework\nthat does this.</p>\n<p>As an aside, Tornado seems to be <a href=\"https://thehftguy.com/2020/10/27/my-experience-in-production-with-flask-bottle-tornado-and-twisted/\">more popular in\nfinance</a>,\nwhere streaming real-time data (e.g. market data) is very common.</p>\n<h2 id=\"why-websockets\">Why WebSockets?</h2>\n<p>A sharper question might be, why WebSockets over HTTP requests to a REST\nendpoint? After all, both theoretically allow a client to stream data in\nreal-time from a server.</p>\n<p><a href=\"https://stackoverflow.com/a/45464306\">A lot can be said</a> when comparing\nWebSockets and RESTful services, but I think the main points are accurately\nsummarized by <a href=\"https://www.baeldung.com/rest-vs-websockets#usage\">Kumar Chandrakant on\nBaeldung</a>:</p>\n<blockquote>\n<p>[A] WebSocket is more suitable for cases where a push-based and real-time\ncommunication defines the requirement more appropriately. Additionally,\nWebSocket works well for scenarios where a message needs to be pushed to\nmultiple clients simultaneously. These are the cases where client and server\ncommunication over RESTful services will find it difficult if not prohibitive.</p>\n</blockquote>\n<p>Tangentially, there&rsquo;s one alternative that seems to be better than WebSockets\nfrom a protocol standpoint, but unfortunately doesn&rsquo;t seem to have support from\nmany Python web frameworks, and that is <a href=\"https://www.smashingmagazine.com/2018/02/sse-websockets-data-flow-http2/\">Server-Sent Events (a.k.a.\nSSE)</a>:\nit seems to be a cleaner protocol for unidirectional data flow, which is really\nall that we need.</p>\n<p>Additionally, <a href=\"https://lucumr.pocoo.org/2012/9/24/websockets-101/\">Armin\nRonacher</a> has a much\nstarker view of WebSockets, seeing no value in using WebSockets over TCP/IP\nsockets for this application:</p>\n<blockquote>\n<p>Websockets make you sad. [&hellip;] Websockets are complex, way more complex than I\nanticipated. I can understand that they work that way but I definitely don&rsquo;t\nsee a value in using websockets instead of regular TCP connections if all you\nwant is to exchange data between different endpoints and neither is a browser.</p>\n</blockquote>\n<p>My thought after reading these criticisms is that perhaps WebSockets aren&rsquo;t the\nideal technology for handling streaming data (from a maintainability or\narchitectural point of view), but that doesn&rsquo;t mean that they aren&rsquo;t good\nscalable technologies when they do work.</p>\n<div class=\"footnotes\" role=\"doc-endnotes\">\n<hr>\n<ol>\n<li id=\"fn:1\">\n<p>There is <a href=\"https://sqlstream.com/real-time-vs-streaming-a-short-explanation/\">technically a difference</a> between &ldquo;real-time&rdquo; and &ldquo;streaming&rdquo;: &ldquo;real-time&rdquo; refers to data that comes in as it is created, whereas &ldquo;streaming&rdquo; refers to a system that processes data continuously. You stream your TV show from Netflix, but since the show was created long before you watched it, you aren&rsquo;t viewing it in real-time.&#160;<a href=\"#fnref:1\" class=\"footnote-backref\" role=\"doc-backlink\">&#x21a9;&#xfe0e;</a></p>\n</li>\n</ol>\n</div>"
}