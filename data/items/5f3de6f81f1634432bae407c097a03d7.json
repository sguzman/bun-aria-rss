{
  "title": "Pollen and Digital Publishing (a.k.a. _The Book is a Program_)",
  "link": "",
  "id": "https://www.georgeho.org/pollen-digital-publishing/",
  "updated": "2020-09-10T00:00:00Z",
  "published": "2020-09-10T00:00:00Z",
  "content": "<p>I&rsquo;ve picked up a new hobby (or perhaps just another fleeting fascination) &mdash;\ndigital publishing. The catalyst was the book <a href=\"https://practicaltypography.com/\"><em>Practical Typography</em> by\nMatthew Butterick</a>. There were so many\ninteresting things about it: it is gorgeous, it expounds well-argued (if\nslightly controversial) views on how the average writer should think about\ntypography, it has a little widget that would change the book&rsquo;s typeface to\nshowcase Buttericks&rsquo; fonts for sale, it is published online but &mdash; and\nButterick makes a big point of this &mdash; is not free.</p>\n<p>Most interesting to me, however, was how the book was written and published\nwith a tool written specifically for the book &mdash;\n<a href=\"https://docs.racket-lang.org/pollen/\">Pollen</a>. A good explanatory analogy (at\nleast for those in the data science and engineering world) is that it’s like R\nMarkdown (in that it’s a markup language that allows arbitrary R code to be\nembedded in it), but instead of R, it’s Racket, and instead of Markdown, it’s\nyour own domain-specific markup language that you build with Racket.</p>\n<p>After playing around with Pollen for a bit, I think I&rsquo;m sold. Two big reasons:</p>\n<ol>\n<li>Write your own markup\n<ul>\n<li>You can write your own &ldquo;HTML tags&rdquo; &mdash; so for example, if you&rsquo;re writing a\ntechnical document and want to emphasize certain jargon upon first\nmention, you can write a <code>firstmention</code> tag, and have it italicize the\ntagged text and append it to a glossary with a link to its first mention\nin your document. The cool thing is that tags are just functions in\nRacket, which allow you to transform the input text arbitrarily.</li>\n<li>As you can imagine, the ability to write your own markup really lets you\ntailor it to the content at hand.</li>\n</ul>\n</li>\n<li>Multi-format publishing\n<ul>\n<li>This lets you write in one input format, and output to multiple formats -\nso once I make changes to the source files, I can immediately have an\nHTML, LaTeX, PDF, and plain text format of my writing.</li>\n</ul>\n</li>\n</ol>\n<p><em>But what about Markdown or LaTeX or ReStructured Text or &mdash;</em> none of them\ngive you flexibility or extensibility that Pollen does. In the case of Markdown\nor ReStructured Text, you just get a subset of HTML features in a way that\nlooks more palatable to the average developer. If this suffices for your\npublishing needs, that&rsquo;s great - but if it doesn&rsquo;t, you&rsquo;re left in a tough\nplace. LaTeX - as Butterick readily admits - did a lot of things right, but at\nthe end of the day it&rsquo;s just another format that Pollen can target. (I think\nPollen was named in the spirit of LaTeX by the way - in the sense that people\nare commonly allergic to both of them.)</p>\n<p>Now here&rsquo;s the &ldquo;downside&rdquo; - Pollen is written in\n<a href=\"https://racket-lang.org\">Racket</a> (which is a dialect of Lisp), and any\nnon-trivial applications will probably involve you learning a bit of Racket.\nI&rsquo;d say that that&rsquo;s a good thing, if nothing else than for some self-education.</p>\n<p>Here&rsquo;s a very simple example to convince you (if you want a longer form answer,\nI&rsquo;d recommend Butterick&rsquo;s <a href=\"https://beautifulracket.com/appendix/why-racket-why-lisp.html\"><em>Why Racket? Why\nLisp?</em></a>)</p>\n<p>Most languages represent HTML as a string (which conceals the semantics of HTML\ntags), or as a tree (which conceals the sequential nature of the HTML). Neither\noption is great. Lisps, however, could represent a snippet of HTML as follows:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-bash\" data-lang=\"bash\"><span style=\"display:flex;\"><span><span style=\"color:#960050;background-color:#1e0010\">&#39;</span><span style=\"color:#f92672\">(</span>span <span style=\"color:#f92672\">((</span>class <span style=\"color:#e6db74\">&#34;author&#34;</span><span style=\"color:#f92672\">)(</span>id <span style=\"color:#e6db74\">&#34;primary&#34;</span><span style=\"color:#f92672\">)(</span>living <span style=\"color:#e6db74\">&#34;true&#34;</span><span style=\"color:#f92672\">))</span> <span style=\"color:#e6db74\">&#34;Prof. Leonard&#34;</span><span style=\"color:#f92672\">)</span>\n</span></span></code></pre></div><p>Keeping in mind that <code>(f x y)</code> is Lisp&rsquo;s way of saying <code>f(x, y)</code> and we see\nthat Lisps cleanly model HTML as <em>nested function application</em>, which really\nblows open the door to opportunities in marking up your text.</p>\n<p>At any rate, that&rsquo;s probably enough said about Pollen. Let me show you what I\nmanaged to put together with it in one or two spare weekends &mdash;\n<a href=\"https://cooper.georgeho.org/\"><code>cooper.georgeho.org</code></a>. I was hunting around for\ndummy text that I could use to play around with &mdash; Lorem Ipsum seemed trite,\nand the U.S. Constitution seemed overdone, so I reached for some historical\ndocuments of my alma mater. Hope you like it!</p>"
}