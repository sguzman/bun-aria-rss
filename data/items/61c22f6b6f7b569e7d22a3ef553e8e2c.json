{
  "title": "Ising models and Numba",
  "link": "",
  "updated": "2015-02-28T00:00:00+00:00",
  "id": "https://mrocklin.github.io/blog/work/2015/02/28/Ising",
  "content": "<p><em>This work is supported by <a href=\"http://continuum.io\">Continuum Analytics</a>\nand the <a href=\"http://www.darpa.mil/program/XDATA\">XDATA Program</a>\nas part of the <a href=\"http://blaze.pydata.org\">Blaze Project</a></em></p>\n\n<p><strong>tl;dr</strong> I play with Numba and find it effective.</p>\n\n<p><img src=\"https://mrocklin.github.io/blog/images/ising.gif\" alt=\"Ising model with numba\" width=\"50%\" align=\"right\" /></p>\n\n<h2 id=\"introduction\">Introduction</h2>\n\n<p>Confession, I’ve never actually used Numba.  Well that’s not\nquite true; I’ve indirectly used Numba thousands of times because <a href=\"http://continuum.io/blog/blaze-and-numba\">Blaze\nauto-generates numba ufuncs</a>.\nStill I’ve never used it for a particular problem.  I usually define problems\nwith large array operations and compile those down.  Numba takes a different\napproach and translates Python for loops to efficient LLVM code.\nThis is all lower in the hardware stack than where I usually think.</p>\n\n<p>But when I was looking for applications to motivate recent work in\n<a href=\"http://dask.readthedocs.org/en/latest/ghost.html\">nearest-neighbor communications in\ndask</a> <a href=\"https://github.com/maxhutch/\">a\nfriend</a> pointed me\ntowards the <a href=\"http://en.wikipedia.org/wiki/Ising_model\">Ising model</a>, a simple\nphysical system that is both easy to code up and has nice macro-scale\nproperties.  I took this as an example to play with Numba.  This post details\nmy experience.</p>\n\n<h2 id=\"ising-model\">Ising Model</h2>\n\n<p><em>Disclaimer: I am not a physicist</em></p>\n\n<p>The Ising model represents a regular grid of points where each point has two\npossible states, spin up and spin down.  States like to have the same spin as\ntheir immediate neighbors so when a spin-down state is surrounded by more\nspin-up states it will switch to spin-up and vice versa.  Also, due to random\nfluctuations, points might switch spins, even if this switch is not favorable.\nIn pseudocode an Ising update step might look like the following</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>for every point in the grid:\n    energy = my spin * sum of all of the spins (+1 or -1) of neighboring points\n    if energy is improved by switching:\n        switch\n    else if we're particulalry unlucky\n        switch anyway\n</code></pre></div></div>\n\n<p>For this kind of algorithm imperative for-loopy code is probably the most\nclear.  You can do this with high-level array operations too (e.g.\nNumPy/Blaze/Theano), but it’s a mess.</p>\n\n<h2 id=\"numba-code\">Numba code</h2>\n\n<p>Here is my solution to the problem with Numba and a gif of the solution</p>\n\n<p><img src=\"https://mrocklin.github.io/blog/images/ising.gif\" alt=\"Ising model with numba\" width=\"50%\" align=\"right\" /></p>\n\n<figure class=\"highlight\">\n  <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"kn\">import</span> <span class=\"nn\">numba</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"n\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">math</span> <span class=\"kn\">import</span> <span class=\"n\">exp</span><span class=\"p\">,</span> <span class=\"n\">log</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">sqrt</span>\n\n<span class=\"n\">kT</span> <span class=\"o\">=</span> <span class=\"mi\">2</span> <span class=\"o\">/</span> <span class=\"n\">log</span><span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">+</span> <span class=\"n\">sqrt</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"n\">e</span><span class=\"p\">)</span>\n\n<span class=\"o\">@</span><span class=\"n\">numba</span><span class=\"p\">.</span><span class=\"n\">jit</span><span class=\"p\">(</span><span class=\"n\">nopython</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">_update</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">):</span>\n    <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">shape</span>\n    <span class=\"n\">dE</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"o\">*</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"p\">(</span>\n                     <span class=\"n\">x</span><span class=\"p\">[(</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">%</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">j</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">%</span><span class=\"n\">m</span><span class=\"p\">]</span>\n                   <span class=\"o\">+</span> <span class=\"n\">x</span><span class=\"p\">[(</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">%</span><span class=\"n\">n</span><span class=\"p\">,</span>  <span class=\"n\">j</span>     <span class=\"p\">]</span>\n                   <span class=\"o\">+</span> <span class=\"n\">x</span><span class=\"p\">[(</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">%</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">j</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">%</span><span class=\"n\">m</span><span class=\"p\">]</span>\n\n                   <span class=\"o\">+</span> <span class=\"n\">x</span><span class=\"p\">[</span> <span class=\"n\">i</span>     <span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">j</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">%</span><span class=\"n\">m</span><span class=\"p\">]</span>\n                   <span class=\"o\">+</span> <span class=\"n\">x</span><span class=\"p\">[</span> <span class=\"n\">i</span>     <span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">j</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">%</span><span class=\"n\">m</span><span class=\"p\">]</span>\n\n                   <span class=\"o\">+</span> <span class=\"n\">x</span><span class=\"p\">[(</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">%</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">j</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">%</span><span class=\"n\">m</span><span class=\"p\">]</span>\n                   <span class=\"o\">+</span> <span class=\"n\">x</span><span class=\"p\">[(</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">%</span><span class=\"n\">n</span><span class=\"p\">,</span>  <span class=\"n\">j</span>     <span class=\"p\">]</span>\n                   <span class=\"o\">+</span> <span class=\"n\">x</span><span class=\"p\">[(</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">%</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">j</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">%</span><span class=\"n\">m</span><span class=\"p\">]</span>\n                   <span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">dE</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">0</span> <span class=\"ow\">or</span> <span class=\"n\">exp</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">dE</span> <span class=\"o\">/</span> <span class=\"n\">kT</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"n\">random</span><span class=\"p\">.</span><span class=\"n\">random</span><span class=\"p\">():</span>\n        <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">*=</span> <span class=\"o\">-</span><span class=\"mi\">1</span>\n\n<span class=\"o\">@</span><span class=\"n\">numba</span><span class=\"p\">.</span><span class=\"n\">jit</span><span class=\"p\">(</span><span class=\"n\">nopython</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">update</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>\n    <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">shape</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n        <span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">m</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">):</span>  <span class=\"c1\"># Even columns first to avoid overlap\n</span>            <span class=\"n\">_update</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">)</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n        <span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">m</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">):</span>  <span class=\"c1\"># Odd columns second to avoid overlap\n</span>            <span class=\"n\">_update</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"n\">__name__</span> <span class=\"o\">==</span> <span class=\"s\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"n\">random</span><span class=\"p\">.</span><span class=\"n\">randint</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1000</span><span class=\"p\">,</span> <span class=\"mi\">1000</span><span class=\"p\">)).</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"s\">'i1'</span><span class=\"p\">)</span>\n    <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">):</span>\n        <span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span></code></pre>\n</figure>\n\n<p>My old beater laptop executes one update step on a 1000x1000 grid in 50ms.\nWithout Numba this takes 12s.  This wasn’t a canned demo by an expert user /\nnumba developer; this was just my out-of-the-box experience.</p>\n\n<h2 id=\"thoughts\">Thoughts</h2>\n\n<p>I really like the following:</p>\n\n<ul>\n  <li>I can remove <code class=\"language-plaintext highlighter-rouge\">@numba.jit</code> and use the Python debugger</li>\n  <li>I can assert that I’m only using LLVM with <code class=\"language-plaintext highlighter-rouge\">nopython=True</code></li>\n  <li>I can manage data with NumPy (or dask.array) separately from managing\ncomputation with Numba</li>\n</ul>\n\n<p>I ran in to some issues and learned some things too:</p>\n\n<ul>\n  <li><code class=\"language-plaintext highlighter-rouge\">random</code> is only present in the developer preview builds of Numba\n (<code class=\"language-plaintext highlighter-rouge\">conda install -c numba numba</code>).  It will be officially released in the\n 0.18 version this March.</li>\n  <li>You don’t have to provide type signature strings.  I tried providing these\nat first but I didn’t know the syntax and so repeatedly failed to write down\nthe type signature correctly.  Turns out the cost of not writing it down is\nthat Numba will jit whenever it sees a new signature.  For my application\nthis is essentially free.</li>\n</ul>"
}