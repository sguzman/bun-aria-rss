{
  "title": "Java Home Made Face Recognition Application",
  "link": "http://ramok.tech/2018/09/12/java-home-made-face-recognition-application/",
  "dc:creator": "Klevis Ramo",
  "pubDate": "Wed, 12 Sep 2018 21:21:35 +0000",
  "category": [
    "Convolutional Neural Network",
    "Machine Learning",
    "deep learning",
    "deeplearning4j",
    "deeplearning4j deepleraning4j face recognition",
    "face recognition",
    "java deep learning",
    "java deeplearning",
    "java face recognition",
    "java face recognition application",
    "java machine learning",
    "machine learning"
  ],
  "guid": "http://ramok.tech/?p=1974",
  "description": "Are you Java Developer and eager to learn more about Deep Learning and his applications, but you are not feeling like learning another language at the moment ? Are you facing lack of the support or confusion with Machine Learning and Java? Well you are not alone , as a Java Developer with more than &#8230; <a href=\"http://ramok.tech/2018/09/12/java-home-made-face-recognition-application/\" class=\"more-link\">Continue reading<span class=\"screen-reader-text\"> \"Java Home Made Face Recognition Application\"</span></a>",
  "content:encoded": "<p style=\"text-align: center;\"><span style=\"font-weight: 400; font-family: arial, helvetica, sans-serif; font-size: 10pt;\">Are you<strong> Java Developer</strong> and eager to learn more about <a href=\"https://www.packtpub.com/big-data-and-business-intelligence/java-machine-learning-computer-vision-video\">Deep Learning and his applications</a>, but you are not feeling like learning another language at the moment ? Are you facing lack of the support or confusion with Machine Learning and Java?</span></p>\n<p style=\"text-align: center;\"><span style=\"font-weight: 400; font-family: arial, helvetica, sans-serif; font-size: 10pt;\">Well you are not alone , as a <strong>Java Developer</strong> with more than 10 years of experience and several java certification I understand the obstacles and how you feel.</span></p>\n<p style=\"text-align: center;\"><span style=\"font-family: arial, helvetica, sans-serif; font-size: 10pt;\"><span style=\"font-weight: 400;\">From my experience I know what obstacles a Java software engineering faces with the Deep Learning so I can</span><a href=\"https://www.packtpub.com/big-data-and-business-intelligence/java-machine-learning-computer-vision-video\"><span style=\"font-weight: 400;\"> be of a great</span><span style=\"font-weight: 400;\"> help </span></a><span style=\"font-weight: 400;\">to you in making the </span><span style=\"font-weight: 400;\">journey with <a href=\"https://www.packtpub.com/big-data-and-business-intelligence/java-machine-learning-computer-vision-video\">deep learning an exciting experience</a>.</span></span></p>\n<p>In this post we are going to develop a <strong>java face recognition application</strong> using <a href=\"https://deeplearning4j.org/\">deeplearning4j</a>. The application is offering a GUI and flexibility to register new faces so feel free to try with your own images. Additionally you can check out the <a href=\"https://github.com/PacktPublishing/Java-Machine-Learning-for-Computer-Vision\">free open source code</a> as part of the <a href=\"https://www.packtpub.com/\">PactPub</a> video course <a href=\"https://www.packtpub.com/big-data-and-business-intelligence/java-machine-learning-computer-vision-video\">Java Machine Learning for Computer Vision</a> together with many new improvements to previous posts applications in java.</p>\n<h3>Face Recognition Applications</h3>\n<p>Face recognition has always been an important problem to solve due its sensitivity in regards to security and because it closely related to people identity. For many years face recognition applications were well known especially in criminology and searching for wanted persons with cameras and sometimes even using satellites. Now days, in deep-learning era face recognition is widely found from simple applications to unlocking your phone offering state of the art accuracy.</p>\n<p>Lets first visit below the challenges related to the face recognition and than see how they are solved using deep learning techniques.</p>\n<h3>Face Recognition Challenges</h3>\n<h4>Face Verification Problem</h4>\n<p>In previous posts we have already seen <a href=\"http://ramok.tech/2018/01/03/java-image-cat-vs-dog-recognizer-with-deep-neural-networks/\">Image Classification</a> and <a href=\"http://ramok.tech/2018/01/18/java-autonomous-driving-car-detection/\">Object Detection</a> where we were concerned mostly in finding out if an image was representing certain class like: <em>is it a dog?</em> <em>is it a car?</em> and also we saw how to <a href=\"http://ramok.tech/2018/01/18/java-autonomous-driving-car-detection/#Bounding_Box_Specification\">mark the classified object</a> with bounding box.</p>\n<p><img decoding=\"async\" loading=\"lazy\" class=\"aligncenter size-full wp-image-1985\" src=\"https://i0.wp.com/ramok.tech/wp-content/uploads/2018/09/Picture2.png?resize=629%2C357\" alt=\"\" width=\"629\" height=\"357\" srcset=\"https://i0.wp.com/ramok.tech/wp-content/uploads/2018/09/Picture2.png?w=629 629w, https://i0.wp.com/ramok.tech/wp-content/uploads/2018/09/Picture2.png?resize=300%2C170 300w\" sizes=\"(max-width: 709px) 85vw, (max-width: 909px) 67vw, (max-width: 984px) 61vw, (max-width: 1362px) 45vw, 600px\" data-recalc-dims=\"1\" /></p>\n<p>Now we are going one step further by uniquely identifying the objects.<br />\nSo not just if the image <strong><em>is a car or not</em></strong> but additionally find out if it is specifically<strong><em> my car, your car or specifically someone&#8217;s car.(f</em></strong>or animal classification we will need to find out if this John dog or Maria dog rather than just a dog)</p>\n<p><strong>Face verification</strong> is not different , just the logic is extended to human face.<br />\nThe question is not if it is simply a human or not bur rather if:  <strong><em>is a person with identification X</em></strong> or <strong><em>is company employ with some identification number</em></strong>&#8230;.</p>\n<h4>Face Recognition Problem</h4>\n<p>Than we have the <strong>face recognition</strong> problem where we need to do the <strong>face verification</strong> for a group of people instead of just one. So to say if a new person is any of the persons in certain group.<br />\nAlthough face recognition and verification can be thought as same problem , the reason we treat it different is because face recognition can be much harder.<img decoding=\"async\" loading=\"lazy\" class=\"aligncenter size-full wp-image-1988\" src=\"https://i0.wp.com/ramok.tech/wp-content/uploads/2018/09/Picture3.png?resize=436%2C411\" alt=\"\" width=\"436\" height=\"411\" srcset=\"https://i0.wp.com/ramok.tech/wp-content/uploads/2018/09/Picture3.png?w=436 436w, https://i0.wp.com/ramok.tech/wp-content/uploads/2018/09/Picture3.png?resize=300%2C283 300w\" sizes=\"(max-width: 436px) 85vw, 436px\" data-recalc-dims=\"1\" /></p>\n<p>For instance lets suppose we achieved a face verification accuracy of 98% to verify if a person is the one it claims.<br />\nWhich maybe is not that bad , now if we apply that model with 2% error rate to the face recognition with lets say 16 people it obviously is not going to work well since the error is 2% on 16 persons(32% error rate).<br />\nSo for face recognition to work good and have reasonable accuracy taking also the sensitive nature of the problem we will need something like 99.99% accuracy.</p>\n<h4>One Shoot Learning Problem</h4>\n<p>Usually with face recognition we have only one photo of each of persons to recognize so next challenge is related to the problem know as &#8220;One shoot learning problem&#8221;.</p>\n<p>So lets say that we want to recognize the employees as they come in.<br />\nUsually we really could have only one photo of each of the employees or maybe really a few of them in best case.</p>\n<p>With the knowledge and application we have seen so fare we can of course feed all this photos to a neural network to learn and than have the network to predict classes for each of the employees. As much as may sound intuitive that will not really work well for below reasons.</p>\n<ul>\n<li><a href=\"http://ramok.tech/2018/01/03/java-image-cat-vs-dog-recognizer-with-deep-neural-networks/#Well_Known_Architectures\">Convolution architecture seen so fare</a> had great results but they were trained with thousand of images of just one type to millions of images in total. So we have really few data available.</li>\n<li>Additionally it will not scale well, for instance what will happen if we have a new employee? We need to modify the neural network by adding a new class and than we need to train the network all over again. In a few words each time we have a new employee the network needs re-train and modified.</li>\n</ul>\n<h3>Similarity Function</h3>\n<p>The high level solution to the above problems is implemented through the similarity function. Instead of try to learn to recognize specific persons faces as classes, what if we learn a function <span style=\"font-size: 14pt;\"><strong>d</strong></span> which measures how similar or different two images are ?</p>\n<p style=\"text-align: center;\"><b><i><span style=\"font-size: 14pt;\">d(face_1,face_2)</span> -></i></b> <strong><em>degree of difference between face images</em></strong></p>\n<p>If the function would return a value smaller than a constant <b><span style=\"font-size: 14pt;\">γ</span> </b>we know that the images are quite similar otherwise we know they are different so not same face or person.</p>\n<p><img decoding=\"async\" loading=\"lazy\" class=\"aligncenter size-full wp-image-1996\" src=\"https://i0.wp.com/ramok.tech/wp-content/uploads/2018/09/Picture4.png?resize=288%2C304\" alt=\"\" width=\"288\" height=\"304\" srcset=\"https://i0.wp.com/ramok.tech/wp-content/uploads/2018/09/Picture4.png?w=288 288w, https://i0.wp.com/ramok.tech/wp-content/uploads/2018/09/Picture4.png?resize=284%2C300 284w\" sizes=\"(max-width: 288px) 85vw, 288px\" data-recalc-dims=\"1\" /></p>\n<p>Supposing that on left we have the employees faces and on the right a person coming , now what will happen is that for each of the comparison we will have a number which will be big when the images are different and small when they are similar. So for above this case we know that the person is the third employee on our group since has the lowest number below e.x <b><span style=\"font-size: 14pt;\">γ=0.8. </span></b></p>\n<p>Additionally this solution also scales well since a new person joining would mean just a new comparison to execute. We do not need to retrain since the neural network has learnt a generic function to distinguish faces rather than specific faces.</p>\n<p>Similarity function is just a high level explanation of solution so lets see below two ways how is implemented in practice.</p>\n<h4>Siamese networks</h4>\n<p>We will still continue to use <a href=\"http://ramok.tech/2018/01/03/java-image-cat-vs-dog-recognizer-with-deep-neural-networks/#Well_Known_Architectures\">convolution architectures</a> with many convolution layers and fully connected layers. With the exception that the last prediction layer (soft max layer)we will not be used or it will be cut.</p>\n<p><img decoding=\"async\" loading=\"lazy\" class=\"aligncenter size-full wp-image-1998\" src=\"https://i0.wp.com/ramok.tech/wp-content/uploads/2018/09/Picture5.png?resize=840%2C305\" alt=\"\" width=\"840\" height=\"305\" srcset=\"https://i0.wp.com/ramok.tech/wp-content/uploads/2018/09/Picture5.png?w=1103 1103w, https://i0.wp.com/ramok.tech/wp-content/uploads/2018/09/Picture5.png?resize=300%2C109 300w, https://i0.wp.com/ramok.tech/wp-content/uploads/2018/09/Picture5.png?resize=768%2C279 768w, https://i0.wp.com/ramok.tech/wp-content/uploads/2018/09/Picture5.png?resize=1024%2C371 1024w\" sizes=\"(max-width: 709px) 85vw, (max-width: 909px) 67vw, (max-width: 1362px) 62vw, 840px\" data-recalc-dims=\"1\" />We will feed the the first image <strong>X<sub>1</sub></strong> to the network then grab the last fully connected layer activations  <strong>F(X<sub>1</sub>)</strong> and save in memory;</p>\n<p>We will repeat the same for the second image <strong>X<sub>2</sub></strong>  that we want to compare or the new coming employee. So now we have the encoded activations for the second image <strong>F(X<sub>2</sub>)</strong> saved in memory.</p>\n<p>Notice that the network here stays the same for both images.<br />\nThat&#8217;s where the Siamese name comes in since we use the same network(or to cloned networks) executions for both of images and in practice this happens in parallel.</p>\n<p>Now the neural network for each iteration(through <a href=\"http://ramok.tech/2017/11/29/digit-recognizer-with-neural-networks/#Minimizing_Cost_Function\">forward step and back-propagation</a> ) will learn the function <span style=\"font-size: 14pt;\">d</span> as shown in the picture.</p>\n<p><img decoding=\"async\" loading=\"lazy\" class=\"aligncenter size-full wp-image-2000\" src=\"https://i0.wp.com/ramok.tech/wp-content/uploads/2018/09/Picture6.png?resize=333%2C55\" alt=\"\" width=\"333\" height=\"55\" srcset=\"https://i0.wp.com/ramok.tech/wp-content/uploads/2018/09/Picture6.png?w=333 333w, https://i0.wp.com/ramok.tech/wp-content/uploads/2018/09/Picture6.png?resize=300%2C50 300w\" sizes=\"(max-width: 333px) 85vw, 333px\" data-recalc-dims=\"1\" /></p>\n<p>In a few words this will be the goal of our learning to shift the difference accordingly to small or large number depending if images are the same or different.</p>\n<p>And only when encoded values are similar we will predict that two images are the same.Recalling from previous section this is exactly what refereed as the similarity function, the<span style=\"font-size: 14pt;\"> d</span> denotes the distance so the distance between the activation of last layers of a very deep convolution network.</p>\n<h4>Triplet loss</h4>\n<p>Triplet loss is another great way to solve the face recognition problem and the one we will use for our java application. The name triplet come from the fact that we use three images as just one training sample. Similarly we will use the activations of last fully connected layer of some very deep neural network.</p>\n<p><img decoding=\"async\" loading=\"lazy\" class=\"aligncenter size-full wp-image-2003\" src=\"https://i0.wp.com/ramok.tech/wp-content/uploads/2018/09/Picture7.png?resize=840%2C278\" alt=\"\" width=\"840\" height=\"278\" srcset=\"https://i0.wp.com/ramok.tech/wp-content/uploads/2018/09/Picture7.png?w=1057 1057w, https://i0.wp.com/ramok.tech/wp-content/uploads/2018/09/Picture7.png?resize=300%2C99 300w, https://i0.wp.com/ramok.tech/wp-content/uploads/2018/09/Picture7.png?resize=768%2C254 768w, https://i0.wp.com/ramok.tech/wp-content/uploads/2018/09/Picture7.png?resize=1024%2C339 1024w\" sizes=\"(max-width: 709px) 85vw, (max-width: 909px) 67vw, (max-width: 1362px) 62vw, 840px\" data-recalc-dims=\"1\" /></p>\n<p>We are going to choose first the base image or the <strong>anchor image  </strong>which will be used as comparison with two other images and through a forward step we get the activation of last layer <strong>F(A)</strong>.</p>\n<p>Together with a different image but representing the same person so called the <strong>positive image </strong>similarly we get the activation of last layer <strong>F(P)</strong>. Recalling from our previous section we want our similarity function <span style=\"font-size: 14pt;\">d(A,P)</span> so the difference between <strong>anchor</strong> and <strong>positive</strong> image activations to be in this case as close to zero as possible since this images represent the same person after all.</p>\n<p>Now keeping the same <strong>anchor image</strong> we are going to choose an image that represent a different person so a <strong>negative image F(N)</strong>. Function <span style=\"font-size: 14pt;\">d(A,N)</span> so the difference between anchor and negative image activations in this case will bigger than zero so we want the difference to be big in order to emphasize the fact that this are different face images.</p>\n<p>Triplet loss is explained in more details through diagrams on <a href=\"https://www.packtpub.com/big-data-and-business-intelligence/java-machine-learning-computer-vision-video\"> Java Machine Learning for Computer Vision</a> by giving also a slightly more formal definition. Anyway after some simple math steps the combined formula for positive and negative case comparisons with anchor images looks like below:</p>\n<p><img decoding=\"async\" loading=\"lazy\" class=\"aligncenter size-full wp-image-2006\" src=\"https://i0.wp.com/ramok.tech/wp-content/uploads/2018/09/Picture8.png?resize=517%2C55\" alt=\"\" width=\"517\" height=\"55\" srcset=\"https://i0.wp.com/ramok.tech/wp-content/uploads/2018/09/Picture8.png?w=517 517w, https://i0.wp.com/ramok.tech/wp-content/uploads/2018/09/Picture8.png?resize=300%2C32 300w\" sizes=\"(max-width: 517px) 85vw, 517px\" data-recalc-dims=\"1\" /></p>\n<p><span style=\"font-size: 18pt;\"><strong>ε</strong></span> is introduced to prevent neural network from finding weights such that the distance between images for negative and positive case can be the same (therefore the difference will be zero and easily satisfy the condition). In this way neural network has to work harder to make sure that at least there is a minimum distance <span style=\"font-size: 14pt;\"><strong>ε</strong></span> between a positive and negative case.</p>\n<p>Iteration by iteration neural network will try to learn the above function in order to satisfy the equation. It will try to push the positive case case difference (green equation) to lower values and try to push the negative case difference to larger values(red equation) by a difference value at least  <span style=\"font-size: 18pt;\"><strong>-ε</strong></span> (moving <span style=\"font-size: 14pt;\"><strong>ε</strong><span style=\"font-size: 12pt;\"> on the other side of equation</span></span>).</p>\n<h5>Suggestions of Choosing triplets</h5>\n<p>Choosing triplets has a really big impact on how well and efficiently the network learns. So when we need to carefully choose the triplets following below guideline::</p>\n<ul>\n<li style=\"list-style-type: none;\">\n<ul>\n<li>When negative examples N are chosen randomly then the condition is easily satisfied:</li>\n</ul>\n</li>\n</ul>\n<p><img decoding=\"async\" loading=\"lazy\" class=\"aligncenter size-full wp-image-2008\" src=\"https://i0.wp.com/ramok.tech/wp-content/uploads/2018/09/Picture9.png?resize=777%2C41\" alt=\"\" width=\"777\" height=\"41\" srcset=\"https://i0.wp.com/ramok.tech/wp-content/uploads/2018/09/Picture9.png?w=777 777w, https://i0.wp.com/ramok.tech/wp-content/uploads/2018/09/Picture9.png?resize=300%2C16 300w, https://i0.wp.com/ramok.tech/wp-content/uploads/2018/09/Picture9.png?resize=768%2C41 768w\" sizes=\"(max-width: 709px) 85vw, (max-width: 909px) 67vw, (max-width: 984px) 61vw, (max-width: 1362px) 45vw, 600px\" data-recalc-dims=\"1\" /></p>\n<ul>\n<li>Choose Triplets that are hard to train. Positive cases(image of same face) that are as different as possible so <strong>d(A,P)</strong> will be big value and negative cases (different images) that are as similar to person face(anchor) so <strong>d(A,N)</strong> will be as low as possible.</li>\n</ul>\n<p><img decoding=\"async\" loading=\"lazy\" class=\"aligncenter size-full wp-image-2009\" src=\"https://i0.wp.com/ramok.tech/wp-content/uploads/2018/09/Picture10.png?resize=840%2C58\" alt=\"\" width=\"840\" height=\"58\" srcset=\"https://i0.wp.com/ramok.tech/wp-content/uploads/2018/09/Picture10.png?w=1006 1006w, https://i0.wp.com/ramok.tech/wp-content/uploads/2018/09/Picture10.png?resize=300%2C21 300w, https://i0.wp.com/ramok.tech/wp-content/uploads/2018/09/Picture10.png?resize=768%2C53 768w\" sizes=\"(max-width: 709px) 85vw, (max-width: 909px) 67vw, (max-width: 1362px) 62vw, 840px\" data-recalc-dims=\"1\" /></p>\n<ul>\n<li>During the training you still need a few positive picture per person or triplets</li>\n<li>After training you can apply the <b>one-shoot learning </b>problem of having only one picture per person</li>\n</ul>\n<h3>Java Application</h3>\n<p>The code can be freely found on <a href=\"https://github.com/PacktPublishing/Java-Machine-Learning-for-Computer-Vision/tree/master/FaceRecognition\">github</a>  as part of the <a href=\"https://www.packtpub.com/big-data-and-business-intelligence/java-machine-learning-computer-vision-video\">video course</a>. Although if offers all the flexibility to develop or borrow existing models, <a href=\"https://deeplearning4j.org/\">deeplearning4j</a> face recognition has some known issues and is not offering yet pre-trained weights through <a href=\"http://ramok.tech/2018/01/03/java-image-cat-vs-dog-recognizer-with-deep-neural-networks/#Transfer_Learning\">transfer learning</a>.</p>\n<h4>The Code</h4>\n<p>So in in order to build the java application we will need to use the weights from existing <strong>Keras OpenFace</strong> model found on <a href=\"https://github.com/iwantooxxoox/Keras-OpenFace\">github repository</a>.</p>\n<ul>\n<li>As first step we need to build the neural network architecture which is based on Inception Networks( first build by GoogLeNet, detailed information can be found <a href=\"https://www.packtpub.com/big-data-and-business-intelligence/java-machine-learning-computer-vision-video\">here</a>). The <a href=\"https://github.com/PacktPublishing/Java-Machine-Learning-for-Computer-Vision/blob/master/FaceRecognition/src/main/java/ramo/klevis/ml/recogntion/face/FaceNetSmallV2Model.java\">full implementation code</a> is not shown here as it is simple but long:</li>\n</ul>\n<pre> buildBlock3a(graph);\n buildBlock3b(graph);\n buildBlock3c(graph);\n\n buildBlock4a(graph);\n buildBlock4e(graph);\n\n buildBlock5a(graph);\n buildBlock5b(graph);\n\n graph.addLayer(\"avgpool\",\n         new SubsamplingLayer.Builder(SubsamplingLayer.PoolingType.AVG, new int[]{3, 3},\n                 new int[]{1, 1})\n                 .convolutionMode(ConvolutionMode.Truncate)\n                 .build(),\n         \"inception_5b\")\n         .addLayer(\"dense\", new DenseLayer.Builder().nIn(736).nOut(encodings)\n                 .activation(Activation.IDENTITY).build(), \"avgpool\")\n         .addVertex(\"encodings\", new L2NormalizeVertex(new int[]{}, 1e-12), \"dense\")\n         .setInputTypes(InputType.convolutional(96, 96, inputShape[0])).pretrain(true);\n\n/* Uncomment in case of training the network, graph.setOutputs should be lossLayer then\n .addLayer(\"lossLayer\", new CenterLossOutputLayer.Builder()\n                 .lossFunction(LossFunctions.LossFunction.SQUARED_LOSS)\n                 .activation(Activation.SOFTMAX).nIn(128).nOut(numClasses).lambda(1e-4).alpha(0.9)\n                 .gradientNormalization(GradientNormalization.RenormalizeL2PerLayer).build(),\n         \"embeddings\")*/\n graph.setOutputs(\"encodings\");\n\n</pre>\n<ul>\n<li>Training face recognition neural networks is especially computationally expensive and in same time requires quite a lot of effort due to carefully  triplet selections. Thanks to <a href=\"http://ramok.tech/2018/01/03/java-image-cat-vs-dog-recognizer-with-deep-neural-networks/#Transfer_Learning\">transfer learning</a> we can use already trained neural network weights even from other languages and frameworks. In this way we can use all the face detection knowledge those neural networks gained during training. The weights are read from excel files found originally at the <a href=\"https://github.com/iwantooxxoox/Keras-OpenFace\">Keras Open Face</a> and than copied to <a href=\"https://github.com/PacktPublishing/Java-Machine-Learning-for-Computer-Vision/tree/master/FaceRecognition/src/main/resources/face\">the java code</a>. The full code can be found at this <a href=\"https://github.com/PacktPublishing/Java-Machine-Learning-for-Computer-Vision/blob/master/FaceRecognition/src/main/java/ramo/klevis/ml/recogntion/face/FaceNetSmallV2Helper.java\">class on gitub repository</a>(loadWeights). Some effort is needed in order to adapt the weights from Keras to deeplearning4j internal organisation of convolution layers and dense. Notice how for dense first we need the <strong>weights(w)</strong> and than the <strong>bias(b)</strong> while for convolution is other way around.</li>\n</ul>\n<pre>static void loadWeights(ComputationGraph computationGraph) throws IOException {\n\n    Layer[] layers = computationGraph.getLayers();\n    for (Layer layer : layers) {\n        List<double[]> all = new ArrayList<>();\n        String layerName = layer.conf().getLayer().getLayerName();\n        if (layerName.contains(\"bn\")) {\n            all.add(readWightsValues(BASE + layerName + \"_w.csv\"));\n            all.add(readWightsValues(BASE + layerName + \"_b.csv\"));\n            all.add(readWightsValues(BASE + layerName + \"_m.csv\"));\n            all.add(readWightsValues(BASE + layerName + \"_v.csv\"));\n            layer.setParams(mergeAll(all));\n        } else if (layerName.contains(\"conv\")) {\n            all.add(readWightsValues(BASE + layerName + \"_b.csv\"));\n            all.add(readWightsValues(BASE + layerName + \"_w.csv\"));\n            layer.setParams(mergeAll(all));\n        } else if (layerName.contains(\"dense\")) {\n            double[] w = readWightsValues(BASE + layerName + \"_w.csv\");\n            all.add(w);\n            double[] b = readWightsValues(BASE + layerName + \"_b.csv\");\n            all.add(b);\n            layer.setParams(mergeAll(all));\n        }\n    }\n}</pre>\n<p>Basically this are the main parts of the application apart from Java SWING GUI and other low level utilities which can be freely explored <a href=\"https://github.com/PacktPublishing/Java-Machine-Learning-for-Computer-Vision/tree/master/FaceRecognition\">in the code</a>.</p>\n<h4>Running Application & SHowcase</h4>\n<p>It is possible to run the from <a href=\"https://github.com/PacktPublishing/Java-Machine-Learning-for-Computer-Vision/tree/master/FaceRecognition\">source </a>by simply executing the <strong><a href=\"https://github.com/PacktPublishing/Java-Machine-Learning-for-Computer-Vision/blob/master/FaceRecognition/src/main/java/ramo/klevis/ml/recogntion/face/RunFaceRecognition.java\">RunFaceRecognition</a> </strong>class. After running the application a Jaa GUI will be shown as below:</p>\n<p><img decoding=\"async\" loading=\"lazy\" class=\"aligncenter size-full wp-image-2016\" src=\"https://i0.wp.com/ramok.tech/wp-content/uploads/2018/09/Picture11.png?resize=840%2C341\" alt=\"\" width=\"840\" height=\"341\" srcset=\"https://i0.wp.com/ramok.tech/wp-content/uploads/2018/09/Picture11.png?w=1012 1012w, https://i0.wp.com/ramok.tech/wp-content/uploads/2018/09/Picture11.png?resize=300%2C122 300w, https://i0.wp.com/ramok.tech/wp-content/uploads/2018/09/Picture11.png?resize=768%2C312 768w\" sizes=\"(max-width: 709px) 85vw, (max-width: 909px) 67vw, (max-width: 1362px) 62vw, 840px\" data-recalc-dims=\"1\" /></p>\n<p>It was possible to register your own images(<span style=\"text-decoration: underline;\"><em>Register new Member</em></span> button) which will be shown as member below and than try if other picture of new member(<em><span style=\"text-decoration: underline;\">Choose Face Image</span></em>) will match or not(<span style=\"text-decoration: underline;\"><em>Who Is?</em></span> button ).</p>\n<h4>Limitations</h4>\n<p>In future further consolidation may needed in the way we load the weights. So right now the model may still need some tuning so please stay tuned as the code it will continually improved to a state of the art accuracy.</p>\n<p>Please notice that the open face model is quite small comparing to real systems so the accuracy may not be the best but it is quite promising and it clearly shows the power of the explored concept on this post.</p>\n<p><span style=\"font-size: 18pt; color: #339966;\"><strong>ENJOY :)!</strong></span></p>\n",
  "post-id": 1974
}