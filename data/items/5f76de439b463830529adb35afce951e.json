{
  "guid": "0d577bd0-6cb8-403f-85da-061a692c2f76",
  "title": "The Infrastructure Effect: COBOL and Go",
  "description": "<p>Languages used for IT infrastructure don’t have expiration dates. COBOL’s been around for 60 years—and isn’t going anywhere anytime soon. We maintain billions of lines of classic code for mainframes. But we’re also building new infrastructures for the cloud in languages like Go.</p>\n<p>COBOL was a giant leap for computers to make industries more efficient. <a href=\"https://twitter.com/chrisshort?lang=en\">Chris Short</a> describes how learning COBOL was seen as a safe long-term bet. Sixty years later, there are billions of lines of COBOL code that can’t easily be replaced—and few specialists who know the language. <a href=\"https://twitter.com/RitikaTrikha?ref_src=twsrc%5Egoogle%7Ctwcamp%5Eserp%7Ctwgr%5Eauthor\">Ritika Trikha</a> explains that something must change: Either more people must learn COBOL, or the industries that rely on it have to update their codebase. Both choices are difficult. But the future isn’t being written in COBOL. Today’s IT infrastructure is built in the cloud—and a lot of it is written in Go. <a href=\"https://twitter.com/carmatrocity?lang=en\">Carmen Hernández Andoh</a> shares how Go’s designers wanted a language more suited for the cloud. And <a href=\"https://twitter.com/kelseyhightower?lang=en\">Kelsey Hightower</a> points out that languages are typically hyper-focused for one task. But they’re increasingly open and flexible.</p>\n<p>You can learn more about COBOL or Go, or any of the languages we’re covering this season, by heading over to <a href=\"https://www.redhat.com/en/command-line-heroes\">redhat.com/CommandLineHeroes</a>.</p>\n<p>We're passing along a correction that Carmen Hernández Andoh shared on Twitter: she misspoke about Rob Pike inventing ASCII. <a href=\"https://en.wikipedia.org/wiki/Bob_Bemer\">Bob Bremer</a> is considered the main creator of ASCII.</p>\n<p>Follow along with <a href=\"https://www.redhat.com/en/command-line-heroes/season-3/the-infrastructure-effect#transcript-tray\">the episode transcript</a></p>\n",
  "pubDate": "Tue, 20 Aug 2019 07:05:17 +0000",
  "author": "info@pacific-content.com (Red Hat)",
  "link": "https://www.redhat.com/en/command-line-heroes/season-3/the-infrastructure-effect?sc_id=701f20000012rt4AAA",
  "content:encoded": "<p>Languages used for IT infrastructure don’t have expiration dates. COBOL’s been around for 60 years—and isn’t going anywhere anytime soon. We maintain billions of lines of classic code for mainframes. But we’re also building new infrastructures for the cloud in languages like Go.</p>\n<p>COBOL was a giant leap for computers to make industries more efficient. <a href=\"https://twitter.com/chrisshort?lang=en\">Chris Short</a> describes how learning COBOL was seen as a safe long-term bet. Sixty years later, there are billions of lines of COBOL code that can’t easily be replaced—and few specialists who know the language. <a href=\"https://twitter.com/RitikaTrikha?ref_src=twsrc%5Egoogle%7Ctwcamp%5Eserp%7Ctwgr%5Eauthor\">Ritika Trikha</a> explains that something must change: Either more people must learn COBOL, or the industries that rely on it have to update their codebase. Both choices are difficult. But the future isn’t being written in COBOL. Today’s IT infrastructure is built in the cloud—and a lot of it is written in Go. <a href=\"https://twitter.com/carmatrocity?lang=en\">Carmen Hernández Andoh</a> shares how Go’s designers wanted a language more suited for the cloud. And <a href=\"https://twitter.com/kelseyhightower?lang=en\">Kelsey Hightower</a> points out that languages are typically hyper-focused for one task. But they’re increasingly open and flexible.</p>\n<p>You can learn more about COBOL or Go, or any of the languages we’re covering this season, by heading over to <a href=\"https://www.redhat.com/en/command-line-heroes\">redhat.com/CommandLineHeroes</a>.</p>\n<p>We're passing along a correction that Carmen Hernández Andoh shared on Twitter: she misspoke about Rob Pike inventing ASCII. <a href=\"https://en.wikipedia.org/wiki/Bob_Bemer\">Bob Bremer</a> is considered the main creator of ASCII.</p>\n<p>Follow along with <a href=\"https://www.redhat.com/en/command-line-heroes/season-3/the-infrastructure-effect#transcript-tray\">the episode transcript</a></p>\n",
  "enclosure": "",
  "itunes:title": "The Infrastructure Effect: COBOL and Go",
  "itunes:author": "Red Hat",
  "itunes:image": "",
  "itunes:duration": "00:26:41",
  "itunes:summary": "Languages used for IT infrastructure don’t have expiration dates. COBOL’s been around for 60 years—and isn’t going anywhere anytime soon. We maintain billions of lines of classic code for mainframes. But we’re also building new infrastructures for the cloud in languages like Go.\n\nCOBOL was a giant leap for computers to make industries more efficient. Chris Short describes how learning COBOL was seen as a safe long-term bet. Sixty years later, there are billions of lines of COBOL code that can’t easily be replaced—and few specialists who know the language. Ritika Trikha explains that something must change: Either more people must learn COBOL, or the industries that rely on it have to update their codebase. Both choices are difficult. But the future isn’t being written in COBOL. Today’s IT infrastructure is built in the cloud—and a lot of it is written in Go. Carmen Hernández Andoh shares how Go’s designers wanted a language more suited for the cloud. And Kelsey Hightower points out that languages are typically hyper-focused for one task. But they’re increasingly open and flexible.",
  "itunes:subtitle": "Languages used for IT infrastructure don’t have expiration dates. COBOL’s been around for 60 years—and isn’t going anywhere anytime soon. We maintain billions of lines of classic code for mainframes. But we’re also building new infrastructures for the cloud in languages like Go.\n\nCOBOL was a giant leap for computers to make industries more efficient. Chris Short describes how learning COBOL was seen as a safe long-term bet. Sixty years later, there are billions of lines of COBOL code that can’t easily be replaced—and few specialists who know the language. Ritika Trikha explains that something must change: Either more people must learn COBOL, or the industries that rely on it have to update their codebase. Both choices are difficult. But the future isn’t being written in COBOL. Today’s IT infrastructure is built in the cloud—and a lot of it is written in Go. Carmen Hernández Andoh shares how Go’s designers wanted a language more suited for the cloud. And Kelsey Hightower points out that languages are typically hyper-focused for one task. But they’re increasingly open and flexible.",
  "itunes:keywords": "chris short, go, kelsey hightower, carmen hernández andoh, programming languages, red hat, saron yitbarek, cobol, programming language, command line heroes, ritika trikha",
  "itunes:explicit": "no",
  "itunes:episodeType": "full",
  "itunes:episode": 5,
  "itunes:season": 3
}