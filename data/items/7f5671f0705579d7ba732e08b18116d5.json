{
  "title": "Distributed Scheduling",
  "link": "",
  "updated": "2015-06-23T00:00:00+00:00",
  "id": "https://mrocklin.github.io/blog/work/2015/06/23/Distributed",
  "content": "<p><em>This work is supported by <a href=\"http://continuum.io\">Continuum Analytics</a>\nand the <a href=\"http://www.darpa.mil/program/XDATA\">XDATA Program</a>\nas part of the <a href=\"http://blaze.pydata.org\">Blaze Project</a></em></p>\n\n<p><strong>tl;dr: We evaluate dask graphs with a variety of schedulers and introduce a\nnew distributed memory scheduler.</strong></p>\n\n<p><em>Dask.distributed is new and is not battle-tested.  Use at your own risk and\nadjust expectations accordingly.</em></p>\n\n<h2 id=\"evaluate-dask-graphs\">Evaluate dask graphs</h2>\n\n<p>Most dask users use the dask collections, <code class=\"language-plaintext highlighter-rouge\">Array</code>, <code class=\"language-plaintext highlighter-rouge\">Bag</code>, and\n<code class=\"language-plaintext highlighter-rouge\">DataFrame</code>.  These collections are convenient ways to produce\ndask graphs.  A dask graph is a dictionary of tasks.  A task is a tuple with a\nfunction and arguments.</p>\n\n<p>The graph comprising a dask collection (like a dask.array) is available through\nits <code class=\"language-plaintext highlighter-rouge\">.dask</code> attribute.</p>\n\n<figure class=\"highlight\">\n  <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">dask.array</span> <span class=\"k\">as</span> <span class=\"n\">da</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">da</span><span class=\"p\">.</span><span class=\"n\">arange</span><span class=\"p\">(</span><span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"n\">chunks</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,))</span>  <span class=\"c1\"># 0..14 in three chunks of size five\n</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">dask</span>  <span class=\"c1\"># dask array holds the graph to create the full array\n</span><span class=\"p\">{(</span><span class=\"s\">'x'</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">):</span> <span class=\"p\">(</span><span class=\"n\">np</span><span class=\"p\">.</span><span class=\"n\">arange</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">),</span>\n <span class=\"p\">(</span><span class=\"s\">'x'</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">):</span> <span class=\"p\">(</span><span class=\"n\">np</span><span class=\"p\">.</span><span class=\"n\">arange</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">),</span>\n <span class=\"p\">(</span><span class=\"s\">'x'</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">):</span> <span class=\"p\">(</span><span class=\"n\">np</span><span class=\"p\">.</span><span class=\"n\">arange</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">)}</span></code></pre>\n</figure>\n\n<p>Further operations on <code class=\"language-plaintext highlighter-rouge\">x</code> create more complex graphs</p>\n\n<figure class=\"highlight\">\n  <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">z</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"mi\">100</span><span class=\"p\">).</span><span class=\"nb\">sum</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">z</span><span class=\"p\">.</span><span class=\"n\">dask</span>\n<span class=\"p\">{(</span><span class=\"s\">'x'</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">):</span> <span class=\"p\">(</span><span class=\"n\">np</span><span class=\"p\">.</span><span class=\"n\">arange</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">),</span>\n <span class=\"p\">(</span><span class=\"s\">'x'</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">):</span> <span class=\"p\">(</span><span class=\"n\">np</span><span class=\"p\">.</span><span class=\"n\">arange</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">),</span>\n <span class=\"p\">(</span><span class=\"s\">'x'</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">):</span> <span class=\"p\">(</span><span class=\"n\">np</span><span class=\"p\">.</span><span class=\"n\">arange</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">),</span>\n <span class=\"p\">(</span><span class=\"s\">'y'</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">):</span> <span class=\"p\">(</span><span class=\"n\">add</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"s\">'x'</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"mi\">100</span><span class=\"p\">),</span>\n <span class=\"p\">(</span><span class=\"s\">'y'</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">):</span> <span class=\"p\">(</span><span class=\"n\">add</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"s\">'x'</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"mi\">100</span><span class=\"p\">),</span>\n <span class=\"p\">(</span><span class=\"s\">'y'</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">):</span> <span class=\"p\">(</span><span class=\"n\">add</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"s\">'x'</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"mi\">100</span><span class=\"p\">),</span>\n <span class=\"p\">(</span><span class=\"s\">'z'</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">):</span> <span class=\"p\">(</span><span class=\"n\">np</span><span class=\"p\">.</span><span class=\"nb\">sum</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"s\">'y'</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)),</span>\n <span class=\"p\">(</span><span class=\"s\">'z'</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">):</span> <span class=\"p\">(</span><span class=\"n\">np</span><span class=\"p\">.</span><span class=\"nb\">sum</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"s\">'y'</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)),</span>\n <span class=\"p\">(</span><span class=\"s\">'z'</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">):</span> <span class=\"p\">(</span><span class=\"n\">np</span><span class=\"p\">.</span><span class=\"nb\">sum</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"s\">'y'</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)),</span>\n <span class=\"p\">(</span><span class=\"s\">'z'</span><span class=\"p\">,):</span> <span class=\"p\">(</span><span class=\"nb\">sum</span><span class=\"p\">,</span> <span class=\"p\">[(</span><span class=\"s\">'z'</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">'z'</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">'z'</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)])}</span></code></pre>\n</figure>\n\n<h2 id=\"hand-made-dask-graphs\">Hand-made dask graphs</h2>\n\n<p>We can make dask graphs by hand without dask collections.  This involves\ncreating a dictionary of tuples of functions.</p>\n\n<figure class=\"highlight\">\n  <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">def</span> <span class=\"nf\">add</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">):</span>\n<span class=\"p\">...</span>     <span class=\"k\">return</span> <span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">b</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># x = 1\n</span><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># y = 2\n</span><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># z = add(x, y)\n</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">dsk</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s\">'x'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n<span class=\"p\">...</span>        <span class=\"s\">'y'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span>\n<span class=\"p\">...</span>        <span class=\"s\">'z'</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"n\">add</span><span class=\"p\">,</span> <span class=\"s\">'x'</span><span class=\"p\">,</span> <span class=\"s\">'y'</span><span class=\"p\">)}</span></code></pre>\n</figure>\n\n<p>We evaluate these graphs with one of the dask schedulers</p>\n\n<figure class=\"highlight\">\n  <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">dask.threaded</span> <span class=\"kn\">import</span> <span class=\"n\">get</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">dsk</span><span class=\"p\">,</span> <span class=\"s\">'z'</span><span class=\"p\">)</span>   <span class=\"c1\"># Evaluate graph with multiple threads\n</span><span class=\"mi\">3</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">dask.multiprocessing</span> <span class=\"kn\">import</span> <span class=\"n\">get</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">dsk</span><span class=\"p\">,</span> <span class=\"s\">'z'</span><span class=\"p\">)</span>   <span class=\"c1\"># Evaluate graph with multiple processes\n</span><span class=\"mi\">3</span></code></pre>\n</figure>\n\n<p>We separate the evaluation of the graphs from their construction.</p>\n\n<h2 id=\"distributed-scheduling\">Distributed Scheduling</h2>\n\n<p>The separation of graphs from evaluation allows us to create new schedulers.\nIn particular there exists a scheduler that operates on multiple machines in\nparallel, communicating over ZeroMQ.</p>\n\n<p>This system has a single centralized scheduler, several workers, and\npotentially several clients.</p>\n\n<p><img src=\"https://mrocklin.github.io/blog/images/distributed-layout.png\" alt=\"\" /></p>\n\n<p>Clients send graphs to the central scheduler which farms out those tasks to\nworkers and coordinates the execution of the graph.  While the scheduler\ncentralizes metadata, the workers themselves handle transfer of intermediate\ndata in a peer-to-peer fashion.  Once the graph completes the workers send data\nto the scheduler which passes it through to the appropriate user/client.</p>\n\n<h2 id=\"example\">Example</h2>\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/uQro_CaP9Fo?rel=0\" frameborder=\"0\" allowfullscreen=\"\"></iframe>\n\n<p>And so now we can execute our dask graphs in parallel across multiple machines.</p>\n\n<figure class=\"highlight\">\n  <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"err\">$</span> <span class=\"n\">ipython</span>  <span class=\"c1\"># On your laptop                 $ ipython  # Remote Process #1:  Scheduler\n</span><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">def</span> <span class=\"nf\">add</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">):</span>                          <span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">dask.distributed</span> <span class=\"kn\">import</span> <span class=\"n\">Scheduler</span>\n<span class=\"p\">...</span>     <span class=\"k\">return</span> <span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">b</span>                        <span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">Scheduler</span><span class=\"p\">(</span><span class=\"n\">port_to_workers</span><span class=\"o\">=</span><span class=\"mi\">4444</span><span class=\"p\">,</span>\n                                            <span class=\"p\">...</span>               <span class=\"n\">port_to_clients</span><span class=\"o\">=</span><span class=\"mi\">5555</span><span class=\"p\">,</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">dsk</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s\">'x'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>                          <span class=\"p\">...</span>               <span class=\"n\">hostname</span><span class=\"o\">=</span><span class=\"s\">'notebook'</span><span class=\"p\">)</span>\n<span class=\"p\">...</span>        <span class=\"s\">'y'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span>\n<span class=\"p\">...</span>        <span class=\"s\">'z'</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"n\">add</span><span class=\"p\">,</span> <span class=\"s\">'x'</span><span class=\"p\">,</span> <span class=\"s\">'y'</span><span class=\"p\">)}</span>            <span class=\"err\">$</span> <span class=\"n\">ipython</span>  <span class=\"c1\"># Remote Process #2:  Worker\n</span>                                            <span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">dask.distributed</span> <span class=\"kn\">import</span> <span class=\"n\">Worker</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">dask.threaded</span> <span class=\"kn\">import</span> <span class=\"n\">get</span>           <span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">w</span> <span class=\"o\">=</span> <span class=\"n\">Worker</span><span class=\"p\">(</span><span class=\"s\">'tcp://notebook:4444'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">dsk</span><span class=\"p\">,</span> <span class=\"s\">'z'</span><span class=\"p\">)</span>  <span class=\"c1\"># use threads\n</span><span class=\"mi\">3</span>                                           <span class=\"err\">$</span> <span class=\"n\">ipython</span>  <span class=\"c1\"># Remote Process #3:  Worker\n</span>                                            <span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">dask.distributed</span> <span class=\"kn\">import</span> <span class=\"n\">Worker</span>\n                                            <span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">w</span> <span class=\"o\">=</span> <span class=\"n\">Worker</span><span class=\"p\">(</span><span class=\"s\">'tcp://notebook:4444'</span><span class=\"p\">)</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">dask.distributed</span> <span class=\"kn\">import</span> <span class=\"n\">Client</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">Client</span><span class=\"p\">(</span><span class=\"s\">'tcp://notebook:5555'</span><span class=\"p\">)</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">c</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">dsk</span><span class=\"p\">,</span> <span class=\"s\">'z'</span><span class=\"p\">)</span> <span class=\"c1\"># use distributed network\n</span><span class=\"mi\">3</span></code></pre>\n</figure>\n\n<h2 id=\"choose-your-scheduler\">Choose Your Scheduler</h2>\n\n<p>This graph is small.  We didn’t need a distributed network of machines\nto compute it (a single thread would have been much faster)\nbut this simple example can be easily extended to more important cases,\nincluding generic use with the dask collections (Array, Bag, DataFrame).  You\ncan control the scheduler with a keyword argument to any compute call.</p>\n\n<figure class=\"highlight\">\n  <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">dask.array</span> <span class=\"k\">as</span> <span class=\"n\">da</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">da</span><span class=\"p\">.</span><span class=\"n\">random</span><span class=\"p\">.</span><span class=\"n\">normal</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1000000000</span><span class=\"p\">,),</span> <span class=\"n\">chunks</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1000000</span><span class=\"p\">,))</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">mean</span><span class=\"p\">().</span><span class=\"n\">compute</span><span class=\"p\">(</span><span class=\"n\">get</span><span class=\"o\">=</span><span class=\"n\">get</span><span class=\"p\">)</span>    <span class=\"c1\"># use threads\n</span><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">mean</span><span class=\"p\">().</span><span class=\"n\">compute</span><span class=\"p\">(</span><span class=\"n\">get</span><span class=\"o\">=</span><span class=\"n\">c</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">)</span>  <span class=\"c1\"># use distributed network</span></code></pre>\n</figure>\n\n<p>Alternatively you can set the default scheduler in dask with <code class=\"language-plaintext highlighter-rouge\">dask.set_options</code></p>\n\n<figure class=\"highlight\">\n  <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">dask</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">dask</span><span class=\"p\">.</span><span class=\"n\">set_options</span><span class=\"p\">(</span><span class=\"n\">get</span><span class=\"o\">=</span><span class=\"n\">c</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">)</span>  <span class=\"c1\"># use distributed scheduler by default</span></code></pre>\n</figure>\n\n<h2 id=\"known-limitations\">Known Limitations</h2>\n\n<p>We intentionally made the simplest and dumbest distributed scheduler we could\nthink of.  Because dask separates graphs from schedulers we can iterate on this\nproblem many times; building better schedulers after learning what is\nimportant.  This current scheduler learns from our single-memory system but is\nthe first dask scheduler that has to think about distributed memory.  As a\nresult it has the following known limitations:</p>\n\n<ol>\n  <li>It does not consider data locality.  While linear chains of tasks will\nexecute on the same machine we don’t think much about executing multi-input\ntasks on nodes where only some of the data is local.</li>\n  <li>In particular, this scheduler isn’t optimized for data-local file-systems\nlike HDFS.  It’s still happy to read data from HDFS, but this results in\nunnecessary network communication.  We’ve found that it’s great when paired\nwith S3.</li>\n  <li>This scheduler is new and hasn’t yet had its tires kicked.  Vocal beta\nusers are most welcome.</li>\n  <li>We haven’t thought much about deployment.  E.g. somehow you need to ssh\ninto a bunch of machines and start up workers, then tear them down when you’re\ndone.  Dask.distributed can bootstrap off of an\n<a href=\"http://dask.readthedocs.org/en/latest/distributed.html#ipython-parallel\">IPython Parallel cluster</a>,\nand we’ve integrated it into\n<a href=\"http://continuum.io/anaconda-cluster\">anaconda-cluster</a> but deployment remains\na tough problem.</li>\n</ol>\n\n<p>The <code class=\"language-plaintext highlighter-rouge\">dask.distributed</code> module is available in the last release but I suggest\nusing the development master branch.  There will be another release in early\nJuly.</p>\n\n<h2 id=\"further-information\">Further Information</h2>\n\n<p><a href=\"https://github.com/cowlicks\">Blake Griffith</a> has been playing with\n<code class=\"language-plaintext highlighter-rouge\">dask.distributed</code> and <code class=\"language-plaintext highlighter-rouge\">dask.bag</code> together on data from\n<a href=\"http://githubarchive.org\">http://githubarchive.org</a>.  He plans to write a\nblogpost to give a better demonstration of the use of <code class=\"language-plaintext highlighter-rouge\">dask.distributed</code> on\nreal world problems.  Look for that post in the next week or two.</p>\n\n<p>You can read more about the internal design of <code class=\"language-plaintext highlighter-rouge\">dask.distributed</code> at the\n<a href=\"http://dask.pydata.org/en/latest/distributed.html\">dask docs</a>.</p>\n\n<h2 id=\"thanks\">Thanks</h2>\n\n<p>Special thanks to <a href=\"https://github.com/minrk\">Min Regan-Kelley</a>,\n<a href=\"http://eigenhombre.com/\">John Jacobsen</a>,\n<a href=\"https://twitter.com/quasiben\">Ben Zaitlen</a>,\nand <a href=\"https://www.linkedin.com/pub/hugo-shi/10/579/442\">Hugo Shi</a>\nfor their advice on building distributed systems.</p>\n\n<p>Also thanks to <a href=\"https://github.com/cowlicks\">Blake Griffith</a> for serving as\noriginal user/developer and for smoothing over the user experience.</p>"
}