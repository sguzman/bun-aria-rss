{
  "title": "Memoryview Benchmarks",
  "link": "",
  "published": "2012-08-08T18:50:00-07:00",
  "updated": "2012-08-08T18:50:00-07:00",
  "author": {
    "name": "Jake VanderPlas"
  },
  "id": "tag:jakevdp.github.io,2012-08-08:blog/2012/08/08/memoryview-benchmarks/",
  "summary": "<p>There was recently a <a href=\"https://groups.google.com/forum/?fromgroups#!topic/cython-users/8uuxjB_wbBQ[1-25]\" title=\"cython-users archive\">thread</a>\non cython-users which caught my eye.  It has to do with \n<a href=\"http://docs.cython.org/src/userguide/memoryviews.html\">memoryviews</a>, a new\nway of working with memory buffers in cython.</p>\n<p>I've been thinking recently about how to do fast\nand flexible memory buffer access in cython.  I contributed the\n<a href=\"http://scikit-learn.org/stable/modules/generated/sklearn.neighbors.BallTree.html\">BallTree</a>\nimplementation for nearest neighbors searching in\n<a href=\"http://www.scikit-learn.org\">scikit-learn</a>, and have been actively thinking\nabout how to make it faster and more flexible, including adding the ability\nto specify distance metrics other than euclidean and minkowski.</p>\n<p>In order to accomplish this, I'd like to have a set of distance metric\nfunctions which take two vectors and compute a distance.  There would\nbe many functions with similar call signatures which could then be\nplugged into a code that would iterate over a set of vectors and\ncompute the appropriate distances.</p>",
  "category": [
    "",
    "",
    ""
  ]
}