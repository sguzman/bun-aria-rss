{
  "title": "Discarded Hard Drives: Data Science as Debugging",
  "link": "",
  "published": "2017-03-14T00:00:00+00:00",
  "updated": "2017-03-14T00:00:00+00:00",
  "id": "http://inverseprobability.com/2017/03/14/data-science-as-debugging",
  "content": "<p>As a University professor, when setting data orientated projects to Computer Science undergraduates, I used to find it difficult to get students to interact properly with the data. Students tended to write programs to process the data, produce a couple of plots, but fail to develop any understanding of what useful information was in the data, and how best to extract it.</p>\n\n<p>Something that I feel really helped is an analogy that, I think, gets software engineers into the right mindset for working with data analysts.</p>\n\n<p>Data science is not like programming, it is like debugging.</p>\n\n<p>Imagine you are given a body of code, perhaps that was found on a discarded hard drive on the street. Imagine that you knew that the hard drive contained code that you need to make your production system run. You need to integrate some of the code on the hard drive.</p>\n\n<p>Unfortunately, there is a lot more code on the hard drive than the code you need. The code is undocumented, and it’s of uncertain provenance. How do you go about integrating this codebase? The answer is: very carefully.</p>\n\n<p>In the end, the new code you need to run in production may only be a couple of lines: the correctly formated API call to the relevant library on the hard drive. But the amount of thought and time placed into those lines of code will be more than you’ve placed into any line of code you’ve previously written.</p>\n\n<p>The tools we use for data science: interactive notebooks like jupyter, visualization techniques, plotting libraries etc.. These tools are sophisticated ways of peering into the memory of the computer, manipulating what’s in there, making sure the information inside is extracted in a safe way. You will write many lines of code exploring the data. Just as you would write many lines of test code to understand the behaviour of the discarded hard drive does. But the final lines of code that extract value from the data may be very few, like the short API call to code on the discarded hard drive.</p>\n\n<p>This perhaps also explains why it can be hard to plan and resource data science projects, it’s akin to planning and resourcing the debugging of a codebase of unknown provenance.</p>\n\n<p>So what are the lessons here?</p>\n\n<ol>\n  <li>When you begin an analysis, behave as a debugger.\n    <ul>\n      <li>Write test code as you go. Document those tests and ensure they are accessible by others.</li>\n      <li>Understand the landscape of your data. Be prepared to try several different approaches to the data set.</li>\n      <li>Be constantly skeptical.</li>\n      <li>Use the best tools available, develop a deep understand how they work.</li>\n      <li>Share your experience of what challenges you’re facing. Have others (software engineers, fellow data analysts, your manager) review your work.</li>\n      <li>Never go straight for the goal: you’d never try and write the API call straight away on the discarded hard drive, so why are you launching your classification algorithm before visualising the data?</li>\n      <li>Ensure your analysis is documented and accessible. If your code does go wrong in production you’ll need to be able to retrace to where the error crept in.</li>\n    </ul>\n  </li>\n  <li>When managing the data science process, don’t treat it as standard code development.\n    <ul>\n      <li>Don’t deploy a traditional agile development pipeline and expect it to work the same way it does for standard code development. Think about how you handle bugs, think about how you would handle very many bugs.</li>\n      <li><em>Don’t</em> leave the data scientist alone to wade through the mess.</li>\n      <li><em>Integrate</em> the data analysis with your other team activities. Have the software engineers work closely with the data scientists. This is vital for providing the data scientists with the technical support they need, but also managing the expectations of the engineers in terms of when and how the data will be able to deliver.</li>\n    </ul>\n  </li>\n</ol>",
  "author": {
    "name": "Neil D. Lawrence"
  },
  "summary": "As a University professor, when setting data orientated projects to Computer Science undergraduates, I used to find it difficult to get students to interact properly with the data. Students tended to write programs to process the data, produce a couple of plots, but fail to develop any understanding of what useful information was in the data, and how best to extract it."
}