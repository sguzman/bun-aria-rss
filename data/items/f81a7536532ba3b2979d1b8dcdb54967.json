{
  "title": "Generating Minimally Unsatisfiable Conjunctive Normal Forms",
  "link": "https://www.mathematica-journal.com/2020/10/29/generating-minimally-unsatisfiable-conjunctive-normal-forms/",
  "comments": "https://www.mathematica-journal.com/2020/10/29/generating-minimally-unsatisfiable-conjunctive-normal-forms/#respond",
  "pubDate": "Thu, 29 Oct 2020 20:06:45 +0000",
  "dc:creator": "Todd Akers",
  "category": "Volume 22",
  "guid": "https://www.mathematica-journal.com/?p=60427",
  "description": "https://doi.org/10.3888/tmj.22-4 A method of generating minimally unsatisfiable conjunctive normal forms is introduced. A conjunctive normal form (CNF) is minimally unsatisfiable if it is unsatisfiable and such that removing any one of its clauses results in a satisfiable CNF. Introduction Ivor Spence [1] introduced a method for producing small unsatisfiable formulas of propositional logic that were [&#8230;]",
  "content:encoded": "<div>\n<div class=\"DOIReference\"><span style=\"font-size: xx-small;\"><a href=\"https://doi.org/10.3888/tmj.22-4\">https://doi.org/10.3888/tmj.22-4</a></span></div>\n<div>\n<p>A method of generating minimally unsatisfiable conjunctive normal forms is introduced. A conjunctive normal form (CNF) is minimally unsatisfiable if it is unsatisfiable and such that removing any one of its clauses results in a satisfiable CNF.<span id=\"more-60427\"></span></p>\n<h3>Introduction</h3>\n<p>Ivor Spence [<a href=\"#Spence\">1</a>] introduced a method for producing small unsatisfiable formulas of propositional logic that were difficult to solve by most SAT solvers at the time, which we believe was because they were usually minimally (i.e. just barely) unsatisfiable. Kullmann and Zhao [<a href=\"#Kullmann-Zhao\">2</a>] claim that minimally unsatisfiable formulas are <span class=\"special-character OpenCurlyDoubleQuote\">“</span>the hardest examples for proof systems.<span class=\"special-character CloseCurlyDoubleQuote\">”</span> We will generalize Spence<span class=\"special-character CloseCurlyQuote\">’</span>s construction and show that it can be used to generate minimally unsatisfiable propositional formulas in conjunctive normal form, that is, formulas that are unsatisfiable but such that the removal of even a single clause produces a satisfiable formula. In addition to increasing our understanding of the satisfiability problem, these formulas have important connections to other combinatorial problems [<a href=\"#Aharoni-Linial\">3</a>].</p>\n<h3><strong>Definitions</strong></h3>\n<p>We assume the reader has at least a minimal acquaintance with propositional logic and truth tables. An <em>interpretation</em> <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_1.gif\" alt=\"\" width=\"5\" height=\"12\" /> of a propositional formula is an assignment of truth values to its propositional variables. A propositional formula is <em>satisfiable </em>if there is an interpretation <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_2.gif\" alt=\"\" width=\"5\" height=\"12\" /> that makes it true when evaluated using the usual truth table rules. A <em>literal</em> is a propositional variable or a negated propositional variable. A <em>clause</em> is a disjunction of literals; if it contains exactly <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_3.gif\" alt=\"\" width=\"6\" height=\"12\" /> literals, we call it a <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_4.gif\" alt=\"\" width=\"6\" height=\"12\" /><em>-clause</em>. A <em>conjunctive normal form</em> (or <em>CNF</em>) is a conjunction of clauses. A <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_5.gif\" alt=\"\" width=\"6\" height=\"12\" />-CNF is a conjunction of <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_6.gif\" alt=\"\" width=\"6\" height=\"12\" />-clauses.</p>\n<p>For example, <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_7.gif\" alt=\"\" width=\"150\" height=\"12\" /> is a 3-CNF. It is often convenient to think of CNFs as a list of lists of literals; in this format, the 3-CNF example would be written as <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_8.gif\" alt=\"\" width=\"172\" height=\"14\" />. This way of writing CNFs is quite common in computer science and is the approach that we took in [<a href=\"#Cowen\">4</a>], where we showed how the famous Davis<span class=\"special-character Dash\">–</span>Putnam algorithm for satisfiability testing could be easily programmed in Mathematica. <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_9.gif\" alt=\"\" width=\"86\" height=\"13\" />, Mathematica<span class=\"special-character CloseCurlyQuote\">’</span>s built-in function for satisfiability testing, requires replacing &#8220;<span class=\"special-character Not\">¬</span>&#8221; by &#8220;!&#8221;, &#8220;<span class=\"special-character Or\">∨</span>&#8221; by &#8220;||&#8221; and &#8220;<span class=\"special-character And\">∧</span>&#8221; by &#8220;&&&#8221;; so in Mathematica the 3-CNF example is written as <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_10.gif\" alt=\"\" width=\"200\" height=\"14\" />. In this article, we adopt the <span class=\"special-character OpenCurlyDoubleQuote\">“</span>list of lists<span class=\"special-character CloseCurlyDoubleQuote\">”</span> approach for programming purposes and then convert to Mathematica<span class=\"special-character CloseCurlyQuote\">’</span>s format when testing for satisfiability with <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_11.gif\" alt=\"\" width=\"86\" height=\"13\" />.</p>\n<h3><strong>Constructing Unsatisfiable CNFs</strong></h3>\n<p>In this section, we show how to generalize a construction of Ivor Spence [<a href=\"#Spence\">1</a>] that produces unsatisfiable 3-CNFs that are relatively short but take a relatively long time to verify that they are indeed unsatisfiable using standard computer programs, even though it is relatively easy, as we shall show, to demonstrate that they are unsatisfiable. (Perhaps humans are not replaceable by computers, after all!)</p>\n<p>Given positive integers <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_12.gif\" alt=\"\" width=\"6\" height=\"12\" /> and <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_13.gif\" alt=\"\" width=\"6\" height=\"12\" />, suppose the <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_14.gif\" alt=\"\" width=\"66\" height=\"12\" /> propositional variables <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_15.gif\" alt=\"\" width=\"13\" height=\"12\" />, <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_16.gif\" alt=\"\" width=\"13\" height=\"12\" />, <span class=\"special-character Ellipsis\">…</span>, <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_17.gif\" alt=\"\" width=\"54\" height=\"15\" /> are partitioned in order into <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_18.gif\" alt=\"\" width=\"24\" height=\"12\" /> sets of size <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_19.gif\" alt=\"\" width=\"32\" height=\"12\" /> and one set of size <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_20.gif\" alt=\"\" width=\"32\" height=\"12\" />. For each cell of the partition, form all <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_21.gif\" alt=\"\" width=\"6\" height=\"12\" />-clauses from the <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_22.gif\" alt=\"\" width=\"7\" height=\"12\" /><span class=\"special-character CloseCurlyQuote\">’</span>s in that cell and let <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_23.gif\" alt=\"\" width=\"14\" height=\"12\" /> be the conjunction of all these <img style=\"vertical-align: middle;\" title=\"k\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Image_1.gif\" alt=\"k\" width=\"6\" height=\"12\" />-clauses. If <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_24.gif\" alt=\"\" width=\"14\" height=\"12\" /> is to be true under an interpretation <img style=\"vertical-align: middle;\" title=\"I\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Image_3.gif\" alt=\"I\" width=\"5\" height=\"12\" />, no more than <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_25.gif\" alt=\"\" width=\"24\" height=\"12\" /> of the <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_26.gif\" alt=\"\" width=\"7\" height=\"12\" />-variables from each partition cell can be false, since if <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_27.gif\" alt=\"\" width=\"6\" height=\"12\" /> were false, the <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_32.gif\" alt=\"\" width=\"7\" height=\"12\" />-clause containing exactly these <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_29.gif\" alt=\"\" width=\"7\" height=\"12\" />-variables would be false, as would their conjunction <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_30.gif\" alt=\"\" width=\"14\" height=\"12\" />. Thus no more than <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_31.gif\" alt=\"\" width=\"40\" height=\"12\" /> of the <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_32.gif\" alt=\"\" width=\"7\" height=\"12\" />-variables can be false under <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_46.gif\" alt=\"\" width=\"7\" height=\"12\" />.</p>\n<p>Next let<img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_34.gif\" alt=\"\" width=\"14\" height=\"12\" />, <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_35.gif\" alt=\"\" width=\"12\" height=\"12\" />, <span class=\"special-character Ellipsis\">…</span>, <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_36.gif\" alt=\"\" width=\"53\" height=\"15\" /> be a random permutation of the <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_37.gif\" alt=\"\" width=\"7\" height=\"12\" /><span class=\"special-character CloseCurlyQuote\">’</span>s and partition these <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_38.gif\" alt=\"\" width=\"6\" height=\"12\" /><span class=\"special-character CloseCurlyQuote\">’</span>s just as the <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_39.gif\" alt=\"\" width=\"7\" height=\"12\" /><span class=\"special-character CloseCurlyQuote\">’</span>s were partitioned. However, this time, for each cell of the partition, form all <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_40.gif\" alt=\"\" width=\"6\" height=\"12\" />-clauses from the <u>negated</u> <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_41.gif\" alt=\"\" width=\"6\" height=\"12\" />-variables in that cell and let <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_42.gif\" alt=\"\" width=\"14\" height=\"12\" /> be the conjunction of all these <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_43.gif\" alt=\"\" width=\"6\" height=\"12\" />-clauses. Reasoning as before, no more than <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_44.gif\" alt=\"\" width=\"40\" height=\"12\" /> <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_32.gif\" alt=\"\" width=\"7\" height=\"12\" />-variables can be true under <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_46.gif\" alt=\"\" width=\"5\" height=\"12\" />.</p>\n<p>Let <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_47.gif\" alt=\"\" width=\"63\" height=\"12\" />. If <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_48.gif\" alt=\"\" width=\"8\" height=\"12\" /> is to be true under some interpretation <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_46.gif\" alt=\"\" width=\"5\" height=\"12\" />, both <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_50.gif\" alt=\"\" width=\"14\" height=\"12\" /> and <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_51.gif\" alt=\"\" width=\"14\" height=\"12\" /> must be true under <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_46.gif\" alt=\"\" width=\"5\" height=\"12\" />; thus no more than <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_53.gif\" alt=\"\" width=\"40\" height=\"12\" /> <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_54.gif\" alt=\"\" width=\"7\" height=\"12\" />-variables can be false and no more than <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_55.gif\" alt=\"\" width=\"40\" height=\"12\" /> <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_56.gif\" alt=\"\" width=\"6\" height=\"12\" />-variables can be true under <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_57.gif\" alt=\"\" width=\"5\" height=\"12\" />. Since the <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_58.gif\" alt=\"\" width=\"6\" height=\"12\" />-variables are permuted <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_59.gif\" alt=\"\" width=\"7\" height=\"12\" />-variables, it follows that no more than <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_60.gif\" alt=\"\" width=\"44\" height=\"12\" /> <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_61.gif\" alt=\"\" width=\"7\" height=\"12\" />-variables can be true under <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_62.gif\" alt=\"\" width=\"5\" height=\"12\" />. However, <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_63.gif\" alt=\"\" width=\"234\" height=\"12\" />, the number of <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_64.gif\" alt=\"\" width=\"7\" height=\"12\" />-variables in <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_65.gif\" alt=\"\" width=\"8\" height=\"12\" />! Thus <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_66.gif\" alt=\"\" width=\"8\" height=\"12\" /> is an unsatisfiable CNF, because there is no interpretation of all its <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_67.gif\" alt=\"\" width=\"66\" height=\"12\" /> <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_32.gif\" alt=\"\" width=\"7\" height=\"12\" />-variables that makes <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_69.gif\" alt=\"\" width=\"8\" height=\"12\" /> true.</p>\n<h3><strong>Minimally Unsatisfiable CNFs</strong></h3>\n<p>Suppose next that we drop one of the clauses in <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_70.gif\" alt=\"\" width=\"8\" height=\"12\" />, say for example, <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_71.gif\" alt=\"\" width=\"110\" height=\"12\" />; let <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_72.gif\" alt=\"\" width=\"58\" height=\"12\" /> and let <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_73.gif\" alt=\"\" width=\"73\" height=\"12\" />. Let <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_46.gif\" alt=\"\" width=\"7\" height=\"12\" /> be an interpretation that assigns false to <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_75.gif\" alt=\"\" width=\"13\" height=\"12\" />, <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_76.gif\" alt=\"\" width=\"13\" height=\"12\" />, <span class=\"special-character Ellipsis\">…</span>, <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_77.gif\" alt=\"\" width=\"12\" height=\"12\" /> and true to the remaining variables in the first <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_78.gif\" alt=\"\" width=\"7\" height=\"12\" />-cell. As long as no more than <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_79.gif\" alt=\"\" width=\"24\" height=\"12\" /> <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_80.gif\" alt=\"\" width=\"7\" height=\"12\" />-variables in each of the remaining cells of the partition of the <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_81.gif\" alt=\"\" width=\"7\" height=\"12\" /><span class=\"special-character CloseCurlyQuote\">’</span>s are assigned the value false, <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_82.gif\" alt=\"\" width=\"19\" height=\"12\" /> would be true under <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_46.gif\" alt=\"\" width=\"7\" height=\"12\" />. Whether or not <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_84.gif\" alt=\"\" width=\"14\" height=\"12\" /> and hence <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_85.gif\" alt=\"\" width=\"13\" height=\"12\" /> are true under <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_86.gif\" alt=\"\" width=\"5\" height=\"12\" /> depends on whether <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_87.gif\" alt=\"\" width=\"5\" height=\"12\" /> also has the property that at most <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_88.gif\" alt=\"\" width=\"24\" height=\"12\" /> <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_32.gif\" alt=\"\" width=\"7\" height=\"12\" />-variables in each cell of the partition of the randomly permuted variables (the <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_90.gif\" alt=\"\" width=\"6\" height=\"12\" /><span class=\"special-character CloseCurlyQuote\">’</span>s) are assigned the value true under <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_46.gif\" alt=\"\" width=\"7\" height=\"12\" />. While this is unlikely for any given interpretation <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_92.gif\" alt=\"\" width=\"5\" height=\"12\" />, there are so many interpretations satisfying <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_93.gif\" alt=\"\" width=\"19\" height=\"12\" /> that it is most likely that some such interpretation <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_46.gif\" alt=\"\" width=\"7\" height=\"12\" /> has this property and the reduced CNF <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_95.gif\" alt=\"\" width=\"13\" height=\"12\" /> will then be true under <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_96.gif\" alt=\"\" width=\"5\" height=\"12\" />.</p>\n<p>We will investigate this intuitive argument. For <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_97.gif\" alt=\"\" width=\"13\" height=\"12\" /> to be true, the <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_98.gif\" alt=\"\" width=\"6\" height=\"12\" /> <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_99.gif\" alt=\"\" width=\"7\" height=\"12\" />-variables <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_100.gif\" alt=\"\" width=\"13\" height=\"12\" />, <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_101.gif\" alt=\"\" width=\"13\" height=\"12\" />, <span class=\"special-character Ellipsis\">…</span>, <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_102.gif\" alt=\"\" width=\"12\" height=\"12\" /> can now be false in the first cell, as long as each of the remaining <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_103.gif\" alt=\"\" width=\"24\" height=\"12\" /> cells in the <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_32.gif\" alt=\"\" width=\"7\" height=\"12\" />-partition has at most <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_105.gif\" alt=\"\" width=\"24\" height=\"12\" /> false variables; thus <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_106.gif\" alt=\"\" width=\"84\" height=\"12\" /> <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_107.gif\" alt=\"\" width=\"7\" height=\"12\" />-variables can be false and, as above, <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_108.gif\" alt=\"\" width=\"40\" height=\"12\" /> <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_32.gif\" alt=\"\" width=\"7\" height=\"12\" />-variables can be true. However, <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_110.gif\" alt=\"\" width=\"216\" height=\"12\" />, and the argument showing <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_111.gif\" alt=\"\" width=\"8\" height=\"12\" /> to be unsatisfiable cannot be applied to <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_112.gif\" alt=\"\" width=\"13\" height=\"12\" />.</p>\n<h3><strong>Programming</strong></h3>\n<p>First we allow for different choices for the parameters <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_113.gif\" alt=\"\" width=\"6\" height=\"12\" /> and <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_114.gif\" alt=\"\" width=\"6\" height=\"12\" />. Initially we set <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_115.gif\" alt=\"\" width=\"26\" height=\"12\" /> and <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_116.gif\" alt=\"\" width=\"32\" height=\"12\" />. The next several steps serve to introduce the variables <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_117.gif\" alt=\"\" width=\"11\" height=\"12\" /> and partition them into cells.</p>\n<p class=\"input\"><img src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Input_1.gif\" alt=\"\" width=\"83\" height=\"14\" /></p>\n<p class=\"input\"><img src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Input_2.gif\" alt=\"\" width=\"212\" height=\"14\" /></p>\n<p class=\"output\"><img src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Output_1.gif\" alt=\"\" width=\"580\" height=\"30\" /></p>\n<p>Define the <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_118.gif\" alt=\"\" width=\"19\" height=\"12\" /> partition of the <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_32.gif\" alt=\"\" width=\"7\" height=\"12\" />-variables.</p>\n<p class=\"input\"><img src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Input_3.gif\" alt=\"\" width=\"260\" height=\"77\" /></p>\n<p>Here is the <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_120.gif\" alt=\"\" width=\"7\" height=\"12\" />-partition for our example.</p>\n<p class=\"input\"><img src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Input_4.gif\" alt=\"\" width=\"172\" height=\"14\" /></p>\n<p class=\"output\"><img src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Output_2.gif\" alt=\"\" width=\"540\" height=\"46\" /></p>\n<p>Next we generate, negate and partition the <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_121.gif\" alt=\"\" width=\"6\" height=\"12\" />-variables.</p>\n<p class=\"input\"><img src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Input_5.gif\" alt=\"\" width=\"315\" height=\"14\" /></p>\n<p class=\"output\"><img src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Output_3.gif\" alt=\"\" width=\"580\" height=\"46\" /></p>\n<p>We join <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_122.gif\" alt=\"\" width=\"14\" height=\"13\" /> and <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_123.gif\" alt=\"\" width=\"14\" height=\"13\" /> and form all <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_124.gif\" alt=\"\" width=\"6\" height=\"12\" />-sets from the result.</p>\n<p class=\"input\"><img src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Input_6.gif\" alt=\"\" width=\"298\" height=\"13\" /></p>\n<p class=\"output\"><img src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Output_4.gif\" alt=\"\" width=\"580\" height=\"270\" /></p>\n<p><img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_125.gif\" alt=\"\" width=\"72\" height=\"14\" /> puts these steps together. The argument <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_126.gif\" alt=\"\" width=\"7\" height=\"13\" /> is a permutation of <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_127.gif\" alt=\"\" width=\"132\" height=\"12\" />.</p>\n<p class=\"input\"><img src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Input_7.gif\" alt=\"\" width=\"247\" height=\"171\" /></p>\n<p>For the experiments that follow, leaving out the third argument uses a random permutation.</p>\n<p class=\"input\"><img src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Input_8.gif\" alt=\"\" width=\"495\" height=\"14\" /></p>\n<p>Because of <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_128.gif\" alt=\"\" width=\"86\" height=\"14\" />, the negated pieces can change from one run to the next.</p>\n<p class=\"input\"><img src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Input_9.gif\" alt=\"\" width=\"147\" height=\"14\" /></p>\n<p class=\"output\"><img src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Output_5.gif\" alt=\"\" width=\"580\" height=\"270\" /></p>\n<p>The function <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_129.gif\" alt=\"\" width=\"65\" height=\"14\" /> transforms a list of clauses into an expression that allows for satisfiability testing, as described in the section Definitions.</p>\n<p class=\"input\"><img src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Input_10.gif\" alt=\"\" width=\"235\" height=\"14\" /></p>\n<p>Equivalently, here is a longer form.</p>\n<p class=\"input\"><img src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Input_11.gif\" alt=\"\" width=\"327\" height=\"14\" /></p>\n<p>To test that a CNF is minimally unsatisfiable, we must show both that it is unsatisfiable and that the removal of any one clause always results in a satisfiable CNF. <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_130.gif\" alt=\"\" width=\"166\" height=\"14\" /> tests the satisfiability of a CNF in list form by converting it to a logical expression with <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_131.gif\" alt=\"\" width=\"65\" height=\"14\" /> and applying the built-in function <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_132.gif\" alt=\"\" width=\"86\" height=\"13\" />; then it tests if all the formulas with one clause deleted are indeed satisfiable.</p>\n<p class=\"input\"><img src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Input_12.gif\" alt=\"\" width=\"300\" height=\"125\" /></p>\n<p>This tests whether <span class=\"MR\">C3</span> is minimally unsatisfiable.</p>\n<p class=\"input\"><img src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Input_13.gif\" alt=\"\" width=\"263\" height=\"14\" /></p>\n<p class=\"output\"><img src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Output_6.gif\" alt=\"\" width=\"29\" height=\"13\" /></p>\n<p>Most of the unsatisfiable formulas generated in this way are, as we shall see, minimally unsatisfiable, but not always. However, we conjecture that the bigger we take <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_133.gif\" alt=\"\" width=\"6\" height=\"12\" /> and <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_134.gif\" alt=\"\" width=\"6\" height=\"12\" />, the more likely we are to get a minimally unsatisfiable formula. We have done some experiments on this conjecture and discuss them in the next section.</p>\n<p>If we remove two different clauses instead of one from our unsatisfiable formulas, the result is almost always a satisfiable formula. We define the function <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_135.gif\" alt=\"\" width=\"173\" height=\"14\" /> and experiment with it in the next section.</p>\n<p class=\"input\"><img src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Input_14.gif\" alt=\"\" width=\"456\" height=\"14\" /></p>\n<p class=\"input\"><img src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Input_15.gif\" alt=\"\" width=\"301\" height=\"62\" /></p>\n<h3><strong>Experiments</strong></h3>\n<p>We run some experiments to investigate the frequency of minimally unsatisfiable CNFs obtained with our Spence generalizations.</p>\n<p class=\"input\"><img src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Input_16.gif\" alt=\"\" width=\"517\" height=\"77\" /></p>\n<p class=\"input\"><img src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Input_17.gif\" alt=\"\" width=\"229\" height=\"14\" /></p>\n<p class=\"output\"><img src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Output_7.gif\" alt=\"\" width=\"196\" height=\"13\" /></p>\n<p class=\"input\"><img src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Input_18.gif\" alt=\"\" width=\"236\" height=\"14\" /></p>\n<p class=\"output\"><img src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Output_8.gif\" alt=\"\" width=\"236\" height=\"13\" /></p>\n<p class=\"input\"><img src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Input_19.gif\" alt=\"\" width=\"229\" height=\"14\" /></p>\n<p class=\"output\"><img src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Output_9.gif\" alt=\"\" width=\"203\" height=\"13\" /></p>\n<p>The table below summarizes some larger computer experiments we have conducted to test our conjecture that most of the formulas constructed by the above methods are minimally unsatisfiable. The third column, <span class=\"special-character OpenCurlyDoubleQuote\">“</span><img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_136.gif\" alt=\"\" width=\"36\" height=\"12\" /><span class=\"special-character CloseCurlyDoubleQuote\">”</span>, stands for the number of clauses in the CNF defined by <tt>SpenceCNF@SpenceList[k,g]</tt>. The fourth column gives the percentage of these clauses that were minimally unsatisfiable.</p>\n<p>Each line in the table represents results on 500 formulas. For example, the first line constructs 500 3-CNFs, based on <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_138.gif\" alt=\"\" width=\"68\" height=\"12\" /> variables and <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_139.gif\" alt=\"\" width=\"74\" height=\"12\" /> clauses in each. It turned out that 62% were minimally unsatisfiable.</p>\n<p class=\"input\"><img src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Input_20.gif\" alt=\"\" width=\"580\" height=\"62\" /></p>\n<p class=\"output\"><img src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Output_10.gif\" alt=\"\" width=\"150\" height=\"145\" /></p>\n<p>Next we look at what happens if we remove two different clauses from our Spence formulas. With <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_140.gif\" alt=\"\" width=\"26\" height=\"12\" />, <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_141.gif\" alt=\"\" width=\"32\" height=\"12\" />, there are 92 clauses in the Spence CNF; hence <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_142.gif\" alt=\"\" width=\"96\" height=\"12\" /> distinct ways to remove two different clauses. We count the number of times the resulting CNF is true in 100 trials.</p>\n<p class=\"input\"><img src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Input_21.gif\" alt=\"\" width=\"483\" height=\"61\" /></p>\n<p class=\"output\"><img src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Output_11.gif\" alt=\"\" width=\"580\" height=\"104\" /></p>\n<p class=\"input\"><img src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Input_22.gif\" alt=\"\" width=\"61\" height=\"13\" /></p>\n<p class=\"output\"><img src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Output_12.gif\" alt=\"\" width=\"50\" height=\"13\" /></p>\n<p>In this trial, we are very close to all Spence CNFs becoming satisfiable after removing two different clauses. We believe this is true in general.</p>\n<h3>Derangements</h3>\n<p>In this section we modify our construction to generate only derangements of the <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_143.gif\" alt=\"\" width=\"6\" height=\"12\" />-variables. A <em>derangement</em> is a permutation that leaves no number in its original position. There are three resource functions that deal with derangements.</p>\n<p class=\"input\"><img src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Input_23.gif\" alt=\"\" width=\"250\" height=\"14\" /></p>\n<p class=\"output\"><img src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Output_13.gif\" alt=\"\" width=\"434\" height=\"29\" /></p>\n<p class=\"input\"><img src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Input_24.gif\" alt=\"\" width=\"286\" height=\"14\" /></p>\n<p class=\"output\"><img src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Output_14.gif\" alt=\"\" width=\"75\" height=\"13\" /></p>\n<p class=\"input\"><img src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Input_25.gif\" alt=\"\" width=\"250\" height=\"14\" /></p>\n<p class=\"output\"><img src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Output_15.gif\" alt=\"\" width=\"29\" height=\"13\" /></p>\n<p>It is known that derangements constitute slightly more than a third of the permutations (see [<a href=\"#Wikipedia\">5</a>]), as the following calculation illustrates.</p>\n<p class=\"input\"><img src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Input_26.gif\" alt=\"\" width=\"572\" height=\"30\" /></p>\n<p class=\"output\"><img src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Output_16.gif\" alt=\"\" width=\"14\" height=\"13\" /></p>\n<p>We define the function <img style=\"vertical-align: middle;\" src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Math_144.gif\" alt=\"\" width=\"79\" height=\"14\" /> that does <span class=\"special-character OpenCurlyDoubleQuote\">“</span>derangement<span class=\"special-character CloseCurlyDoubleQuote\">”</span> experiments.</p>\n<p class=\"input\"><img src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Input_27.gif\" alt=\"\" width=\"580\" height=\"123\" /></p>\n<p class=\"input\"><img src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Input_28.gif\" alt=\"\" width=\"125\" height=\"14\" /></p>\n<p class=\"output\"><img src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Output_17.gif\" alt=\"\" width=\"29\" height=\"13\" /></p>\n<p class=\"input\"><img src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Input_29.gif\" alt=\"\" width=\"118\" height=\"14\" /></p>\n<p class=\"output\"><img src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Output_18.gif\" alt=\"\" width=\"29\" height=\"13\" /></p>\n<p class=\"input\"><img src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Input_30.gif\" alt=\"\" width=\"118\" height=\"14\" /></p>\n<p class=\"output\"><img src=\"https://content.wolfram.com/uploads/sites/19/2020/10/Cowen_Output_19.gif\" alt=\"\" width=\"29\" height=\"13\" /></p>\n<p>On the basis of these experiments we conjecture that the derangements are about as likely to produce minimally unsatisfiable formulas as permutations in general.</p>\n<h3>Conclusion</h3>\n<p>We have adapted a method of I. Spence [<a href=\"#Spence\">1</a>] to easily obtain large numbers of unsatisfiable CNFs that are usually but not always minimally unsatisfiable. We also ran some experiments to indicate what percentages would be minimally unsatisfiable. In addition, our experiments suggest that if two different clauses are removed rather than one, the resulting formula will almost always be satisfiable. Finally we restricted the random permutations in our construction by requiring them to be derangements and saw that this gave similar percentages of minimally unsatisfiable formulas.</p>\n<h3>Acknowledgements</h3>\n<p>I am grateful to the referee for his advice and to the editor, George Beck, for greatly improving my Mathematica coding throughout the paper.</p>\n<h3>References</h3>\n<table class=\"ReferenceTable\">\n<tbody>\n<tr>\n<td class=\"Reference\"><a name=\"Spence\"></a>[1]</td>\n<td>I. Spence, <span class=\"special-character OpenCurlyDoubleQuote\">“</span>sgen1: A Generator of Small but Difficult Satisfiability Benchmarks,<span class=\"special-character CloseCurlyDoubleQuote\">”</span> <em>ACM Journal of Experimental Algorithmics</em>, <strong>15</strong>, 2010 pp. 1.1<span class=\"special-character Dash\">–</span>1.15. <a href=\"https://doi.org/10.1145/1671970.1671972\" target=\"_blank\">doi:10.1145/1671970.1671972</a>.</td>\n</tr>\n<tr>\n<td class=\"Reference\"><a name=\"Kullmann-Zhao\"></a>[2]</td>\n<td>O. Kullmann and X. Zhao, <span class=\"special-character OpenCurlyDoubleQuote\">“</span>On Davis<span class=\"special-character Dash\">–</span>Putnam Reductions for Minimally Unsatisfiable Clause-Sets,<span class=\"special-character CloseCurlyDoubleQuote\">”</span> <em>Theoretical Computer Science</em>, <strong>492</strong>, 2013 pp. 70<span class=\"special-character Dash\">–</span>87. <a href=\"https://doi.org/10.1016/j.tcs.2013.04.020\" target=\"_blank\">doi:10.1007/978-3-642-31612-8_ 21</a>.</td>\n</tr>\n<tr>\n<td class=\"Reference\"><a name=\"Aharoni-Linial\"></a>[3]</td>\n<td>R. Aharoni and N. Linial, <span class=\"special-character OpenCurlyDoubleQuote\">“</span>Minimal Non-Two-Colorable Hypergraphs and Minimal Unsatisfiable Formulas,<span class=\"special-character CloseCurlyDoubleQuote\">”</span> <em>Journal of Combinatorial Theory, Series A</em> <strong>43</strong>(2), 1986 pp. 196<span class=\"special-character Dash\">–</span>204. <a href=\"https://doi.org/10.1016/0097-3165(86)90060-9\" target=\"_blank\">doi:10.1016/0097-3165(86)90060-9</a>.</td>\n</tr>\n<tr>\n<td class=\"Reference\"><a name=\"Cowen\"></a>[4]</td>\n<td>R.Cowen, M. Huq and W. MacDonald, <span class=\"special-character OpenCurlyDoubleQuote\">“</span>Implementing the Davis<span class=\"special-character Dash\">–</span>Putnam Algorithm in Mathematica,<span class=\"special-character CloseCurlyDoubleQuote\">”</span> <em>Mathematica in Education and Research</em>, <strong>10</strong>, 2005 pp, 46<span class=\"special-character Dash\">–</span>55. <a href=\"https://www.researchgate.net/publication/246429822_Implementing_the_Davis-Putnam_Algorithm_in_Mathematica\" target=\"_blank\">www.researchgate.net/publication/246429822_Implementing_the_Davis-Putnam_Algorithm_in_Mathematica</a>.</td>\n</tr>\n<tr>\n<td class=\"Reference\"><a name=\"Wikipedia\"></a>[5]</td>\n<td>Wikipedia. <span class=\"special-character OpenCurlyDoubleQuote\">“</span>Derangement.<span class=\"special-character CloseCurlyDoubleQuote\">”</span> (Jul 10, 2010) <a href=\"https://en.wikipedia.org/wiki/Derangement#Limit_of_ratio_of_derangement_to_permutation_as_n_approaches_%E2%88%9E\" target=\"_blank\">en.wikipedia.org/wiki/Derangement#Limit_of_ratio_of_derangement_to_permutation_as_n_approaches_<span class=\"special-character Infinity\">∞</span></a>.</td>\n</tr>\n<tr>\n<td id=\"1099737697\" class=\"DOIReference\" colspan=\"2\"><a name=\"1099737697\"></a>R. Cowen, <span class=\"special-character OpenCurlyDoubleQuote\">“</span>Generating Minimally Unsatisfiable Conjunctive Normal Forms,<span class=\"special-character CloseCurlyDoubleQuote\">”</span> <em>The Mathematica Journal</em>, 2020. <a href=\"https://doi.org/10.3888/tmj.22-4\">https://doi.org/10.3888/tmj.22–4</a>.</td>\n</tr>\n</tbody>\n</table>\n<h3 class=\"SectionAboutAuthor\">About the Author</h3>\n<p class=\"TextAboutAuthor\">Robert Cowen is a Professor Emeritus at Queens College, CUNY. His main research interests are logic and combinatorics. He has enjoyed teaching students how to use Mathematica to do research in mathematics for many years.</p>\n<p class=\"TextAboutAuthor\"><strong>Robert Cowen</strong><br />\n<em>16422 75th Avenue<br />\nFresh Meadows, NY 11366<br />\n</em><em><a href=\"mailto:robert.cowen@gmail.com\">robert.cowen@gmail.com</a></em></p>\n</div>\n</div>\n",
  "wfw:commentRss": "https://www.mathematica-journal.com/2020/10/29/generating-minimally-unsatisfiable-conjunctive-normal-forms/feed/",
  "slash:comments": 0
}