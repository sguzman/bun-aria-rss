{
  "title": "Revisiting Language Support for Generic Programming: When Genericity Is a Core Design Goal. (arXiv:2211.01678v1 [cs.PL])",
  "link": "http://arxiv.org/abs/2211.01678",
  "description": "<p>Context: Generic programming, as defined by Stepanov, is a methodology for\nwriting efficient and reusable algorithms by considering only the required\nproperties of their underlying data types and operations. Generic programming\nhas proven to be an effective means of constructing libraries of reusable\nsoftware components in languages that support it. Generics-related language\ndesign choices play a major role in how conducive generic programming is in\npractice.\n</p>\n<p>Inquiry: Several mainstream programming languages (e.g. Java and C++) were\nfirst created without generics; features to support generic programming were\nadded later, gradually. Much of the existing literature on supporting generic\nprogramming focuses thus on retrofitting generic programming into existing\nlanguages and identifying related implementation challenges. Is the programming\nexperience significantly better, or different when programming with a language\ndesigned for generic programming without limitations from prior language design\nchoices?\n</p>\n<p>Approach: We examine Magnolia, a language designed to embody generic\nprogramming. Magnolia is representative of an approach to language design\nrooted in algebraic specifications. We repeat a well-known experiment, where we\nput Magnolia's generic programming facilities under scrutiny by implementing a\nsubset of the Boost Graph Library, and reflect on our development experience.\n</p>\n<p>Knowledge: We discover that the idioms identified as key features for\nsupporting Stepanov-style generic programming in the previous studies and work\non the topic do not tell a full story. We clarify which of them are more of a\nmeans to an end, rather than fundamental features for supporting generic\nprogramming. Based on the development experience with Magnolia, we identify\nvariadics as an additional key feature for generic programming and point out\nlimitations and challenges of genericity by property.\n</p>\n<p>Grounding: Our work uses a well-known framework for evaluating the generic\nprogramming facilities of a language from the literature to evaluate the\nalgebraic approach through Magnolia, and we draw comparisons with well-known\nprogramming languages.\n</p>\n<p>Importance: This work gives a fresh perspective on generic programming, and\nclarifies what are fundamental language properties and their trade-offs when\nconsidering supporting Stepanov-style generic programming. The understanding of\nhow to set the ground for generic programming will inform future language\ndesign.\n</p>",
  "dc:creator": "<a href=\"http://arxiv.org/find/cs/1/au:+Chetioui_B/0/1/0/all/0/1\">Benjamin Chetioui</a> (University of Bergen, Norway), <a href=\"http://arxiv.org/find/cs/1/au:+Jarvi_J/0/1/0/all/0/1\">Jaakko J&#xe4;rvi</a> (University of Turku, Finland), <a href=\"http://arxiv.org/find/cs/1/au:+Haveraaen_M/0/1/0/all/0/1\">Magne Haveraaen</a> (University of Bergen, Norway)"
}