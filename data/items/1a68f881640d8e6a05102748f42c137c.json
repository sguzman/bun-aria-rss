{
  "id": "tag:drsimonj.svbtle.com,2014:Post/pretty-scatter-plots-with-ggplot2",
  "published": "2017-05-15T05:04:05-07:00",
  "updated": "2017-05-15T05:04:05-07:00",
  "link": "",
  "title": "Pretty scatter plots with ggplot2",
  "content": "<p><a href=\"https://twitter.com/drsimonj\" rel=\"nofollow\">@drsimonj</a> here to make pretty scatter plots of correlated variables with ggplot2!</p>\n\n<p>We’ll learn how to create plots that look like this:</p>\n\n<p><a href=\"https://svbtleusercontent.com/nvvxuthhlzemg.png\" rel=\"nofollow\"><img src=\"https://svbtleusercontent.com/nvvxuthhlzemg_small.png\" alt=\"init-example-1.png\"></a></p>\n<h2 id=\"data_2\">Data <a class=\"head_anchor\" href=\"#data_2\" rel=\"nofollow\">#</a>\n</h2>\n<p>In a data.frame <code class=\"prettyprint\">d</code>, we’ll simulate two correlated variables <code class=\"prettyprint\">a</code> and <code class=\"prettyprint\">b</code> of length <code class=\"prettyprint\">n</code>:</p>\n\n<pre><code class=\"prettyprint lang-r\">set.seed(170513)\nn &lt;- 200\nd &lt;- data.frame(a = rnorm(n))\nd$b &lt;- .4 * (d$a + rnorm(n))\n\nhead(d)\n#&gt;            a           b\n#&gt; 1 -0.9279965 -0.03795339\n#&gt; 2  0.9133158  0.21116682\n#&gt; 3  1.4516084  0.69060249\n#&gt; 4  0.5264596  0.22471694\n#&gt; 5 -1.9412516 -1.70890512\n#&gt; 6  1.4198574  0.30805526\n</code></pre>\n<h2 id=\"basic-scatter-plot_2\">Basic scatter plot <a class=\"head_anchor\" href=\"#basic-scatter-plot_2\" rel=\"nofollow\">#</a>\n</h2>\n<p>Using ggplot2, the basic scatter plot (with <code class=\"prettyprint\">theme_minimal</code>) is created via:</p>\n\n<pre><code class=\"prettyprint lang-r\">library(ggplot2)\n\nggplot(d, aes(a, b)) +\n  geom_point() +\n  theme_minimal()\n</code></pre>\n\n<p><a href=\"https://svbtleusercontent.com/hbhsdeonvjlvw.jpeg\" rel=\"nofollow\"><img src=\"https://svbtleusercontent.com/hbhsdeonvjlvw_small.jpeg\" alt=\"unnamed-chunk-3-1.JPEG\"></a></p>\n<h2 id=\"shape-and-size_2\">Shape and size <a class=\"head_anchor\" href=\"#shape-and-size_2\" rel=\"nofollow\">#</a>\n</h2>\n<p>There are many ways to tweak the <code class=\"prettyprint\">shape</code> and <code class=\"prettyprint\">size</code> of the points. Here’s the combination I settled on for this post:</p>\n\n<pre><code class=\"prettyprint lang-r\">ggplot(d, aes(a, b)) +\n  geom_point(shape = 16, size = 5) +\n  theme_minimal()\n</code></pre>\n\n<p><a href=\"https://svbtleusercontent.com/prd80u5fwjacw.jpeg\" rel=\"nofollow\"><img src=\"https://svbtleusercontent.com/prd80u5fwjacw_small.jpeg\" alt=\"unnamed-chunk-4-1.JPEG\"></a></p>\n<h2 id=\"color_2\">Color <a class=\"head_anchor\" href=\"#color_2\" rel=\"nofollow\">#</a>\n</h2>\n<p>We want to color the points in a way that helps to visualise the correlation between them.</p>\n\n<p>One option is to <code class=\"prettyprint\">color</code> by one of the variables. For example, color by <code class=\"prettyprint\">a</code> (and hide legend):</p>\n\n<pre><code class=\"prettyprint lang-r\">ggplot(d, aes(a, b, color = a)) +\n  geom_point(shape = 16, size = 5, show.legend = FALSE) +\n  theme_minimal()\n</code></pre>\n\n<p><a href=\"https://svbtleusercontent.com/iijlkiihme6rlw.jpeg\" rel=\"nofollow\"><img src=\"https://svbtleusercontent.com/iijlkiihme6rlw_small.jpeg\" alt=\"unnamed-chunk-5-1.JPEG\"></a></p>\n\n<p>Although it’s subtle in this plot, the problem is that the color is changing as the points go from left to right. Instead, we want the color to change in a direction that characterises the correlation - diagonally in this case.</p>\n\n<p>To do this, we can color points by the <strong>first</strong> principal component. Add it to the data frame as a variable <code class=\"prettyprint\">pc</code> and use it to color like so:</p>\n\n<pre><code class=\"prettyprint lang-r\">d$pc &lt;- predict(prcomp(~a+b, d))[,1]\n\nggplot(d, aes(a, b, color = pc)) +\n  geom_point(shape = 16, size = 5, show.legend = FALSE) +\n  theme_minimal()\n</code></pre>\n\n<p><a href=\"https://svbtleusercontent.com/acgkiogvjxz9w.jpeg\" rel=\"nofollow\"><img src=\"https://svbtleusercontent.com/acgkiogvjxz9w_small.jpeg\" alt=\"unnamed-chunk-6-1.JPEG\"></a></p>\n\n<p>Now we can add color, let’s pick something nice with the help of the <code class=\"prettyprint\">scale_color_gradient</code> functions and some nice hex codes (check out <a href=\"http://www.color-hex.com/\" rel=\"nofollow\">color-hex</a> for inspriation). For example:</p>\n\n<pre><code class=\"prettyprint lang-r\">ggplot(d, aes(a, b, color = pc)) +\n  geom_point(shape = 16, size = 5, show.legend = FALSE) +\n  theme_minimal() +\n  scale_color_gradient(low = \"#0091ff\", high = \"#f0650e\")\n</code></pre>\n\n<p><a href=\"https://svbtleusercontent.com/y3ffjbkmsdmr8w.jpeg\" rel=\"nofollow\"><img src=\"https://svbtleusercontent.com/y3ffjbkmsdmr8w_small.jpeg\" alt=\"unnamed-chunk-7-1.JPEG\"></a></p>\n<h2 id=\"transparency_2\">Transparency <a class=\"head_anchor\" href=\"#transparency_2\" rel=\"nofollow\">#</a>\n</h2>\n<p>Now it’s time to get rid of those offensive mushes by adjusting the transparency with <code class=\"prettyprint\">alpha</code>.</p>\n\n<p>We could adjust it to be the same for every point:</p>\n\n<pre><code class=\"prettyprint lang-r\">ggplot(d, aes(a, b, color = pc)) +\n  geom_point(shape = 16, size = 5, show.legend = FALSE, alpha = .4) +\n  theme_minimal() +\n  scale_color_gradient(low = \"#0091ff\", high = \"#f0650e\")\n</code></pre>\n\n<p><a href=\"https://svbtleusercontent.com/s7ukxd5q8lttqa.jpeg\" rel=\"nofollow\"><img src=\"https://svbtleusercontent.com/s7ukxd5q8lttqa_small.jpeg\" alt=\"unnamed-chunk-8-1.JPEG\"></a></p>\n\n<p>This is fine most of the time. However, what if you have many points? Let’s try with 5,000 points:</p>\n\n<pre><code class=\"prettyprint lang-r\"># Simulate data\nset.seed(170513)\nn &lt;- 5000\nd &lt;- data.frame(a = rnorm(n))\nd$b &lt;- .4 * (d$a + rnorm(n))\n\n# Compute first principal component\nd$pc &lt;- predict(prcomp(~a+b, d))[,1]\n\n# Plot\nggplot(d, aes(a, b, color = pc)) +\n  geom_point(shape = 16, size = 5, show.legend = FALSE, alpha = .4) +\n  theme_minimal() +\n  scale_color_gradient(low = \"#0091ff\", high = \"#f0650e\")\n</code></pre>\n\n<p><a href=\"https://svbtleusercontent.com/gqbax0bvlmxqyq.jpeg\" rel=\"nofollow\"><img src=\"https://svbtleusercontent.com/gqbax0bvlmxqyq_small.jpeg\" alt=\"unnamed-chunk-9-1.JPEG\"></a></p>\n\n<p>We’ve got another big mush. What if we take <code class=\"prettyprint\">alpha</code> down really low to .05?</p>\n\n<pre><code class=\"prettyprint lang-r\">ggplot(d, aes(a, b, color = pc)) +\n  geom_point(shape = 16, size = 5, show.legend = FALSE, alpha = .05) +\n  theme_minimal() +\n  scale_color_gradient(low = \"#0091ff\", high = \"#f0650e\")\n</code></pre>\n\n<p><a href=\"https://svbtleusercontent.com/zliuy0syanmwow.jpeg\" rel=\"nofollow\"><img src=\"https://svbtleusercontent.com/zliuy0syanmwow_small.jpeg\" alt=\"unnamed-chunk-10-1.JPEG\"></a></p>\n\n<p>Better, except it’s now hard to see extreme points that are alone in space.</p>\n\n<p>To solve this, we’ll map <code class=\"prettyprint\">alpha</code> to the <strong>inverse</strong> point density. That is, turn down <code class=\"prettyprint\">alpha</code> wherever there are lots of points! The trick is to use bivariate density, which can be added as follows:</p>\n\n<pre><code class=\"prettyprint lang-r\"># Add bivariate density for each point\nd$density &lt;- fields::interp.surface(\n  MASS::kde2d(d$a, d$b), d[,c(\"a\", \"b\")])\n</code></pre>\n\n<p>Now plot with <code class=\"prettyprint\">alpha</code> mapped to <code class=\"prettyprint\">1/density</code>:</p>\n\n<pre><code class=\"prettyprint lang-r\">ggplot(d, aes(a, b, color = pc, alpha = 1/density)) +\n  geom_point(shape = 16, size = 5, show.legend = FALSE) +\n  theme_minimal() +\n  scale_color_gradient(low = \"#0091ff\", high = \"#f0650e\")\n</code></pre>\n\n<p><a href=\"https://svbtleusercontent.com/cez6zj7g3gnpfa.jpeg\" rel=\"nofollow\"><img src=\"https://svbtleusercontent.com/cez6zj7g3gnpfa_small.jpeg\" alt=\"unnamed-chunk-12-1.JPEG\"></a></p>\n\n<p>You can see that distant points are now too vibrant. Our final fix is to use <code class=\"prettyprint\">scale_alpha</code> to tweak the alpha range. By default, this range is 0 to 1, making the most distant points have an alpha close to 1. Let’s restrict it to something better:</p>\n\n<pre><code class=\"prettyprint lang-r\">ggplot(d, aes(a, b, color = pc, alpha = 1/density)) +\n  geom_point(shape = 16, size = 5, show.legend = FALSE) +\n  theme_minimal() +\n  scale_color_gradient(low = \"#0091ff\", high = \"#f0650e\") +\n  scale_alpha(range = c(.05, .25))\n</code></pre>\n\n<p><a href=\"https://svbtleusercontent.com/hlqpu7p0exdqg.jpeg\" rel=\"nofollow\"><img src=\"https://svbtleusercontent.com/hlqpu7p0exdqg_small.jpeg\" alt=\"unnamed-chunk-13-1.JPEG\"></a></p>\n\n<p>Much better! No more mushy patches or lost points.</p>\n<h2 id=\"bringing-it-together_2\">Bringing it together <a class=\"head_anchor\" href=\"#bringing-it-together_2\" rel=\"nofollow\">#</a>\n</h2>\n<p>Here’s a complete example with new data and colors:</p>\n\n<pre><code class=\"prettyprint lang-r\"># Simulate data\nset.seed(170513)\nn &lt;- 2000\nd &lt;- data.frame(a = rnorm(n))\nd$b &lt;- -(d$a + rnorm(n, sd = 2))\n\n# Add first principal component\nd$pc &lt;- predict(prcomp(~a+b, d))[,1]\n\n# Add density for each point\nd$density &lt;- fields::interp.surface(\n  MASS::kde2d(d$a, d$b), d[,c(\"a\", \"b\")])\n\n# Plot\nggplot(d, aes(a, b, color = pc, alpha = 1/density)) +\n  geom_point(shape = 16, size = 5, show.legend = FALSE) +\n  theme_minimal() +\n  scale_color_gradient(low = \"#32aeff\", high = \"#f2aeff\") +\n  scale_alpha(range = c(.25, .6))\n</code></pre>\n\n<p><a href=\"https://svbtleusercontent.com/3svtcqfu4ynitg.png\" rel=\"nofollow\"><img src=\"https://svbtleusercontent.com/3svtcqfu4ynitg_small.png\" alt=\"unnamed-chunk-14-1.png\"></a></p>\n<h2 id=\"sign-off_2\">Sign off <a class=\"head_anchor\" href=\"#sign-off_2\" rel=\"nofollow\">#</a>\n</h2>\n<p>Thanks for reading and I hope this was useful for you.</p>\n\n<p>For updates of recent blog posts, follow <a href=\"https://twitter.com/drsimonj\" rel=\"nofollow\">@drsimonj</a> on Twitter, or email me at <a href=\"mailto:drsimonjackson@gmail.com\" rel=\"nofollow\">drsimonjackson@gmail.com</a> to get in touch.</p>\n\n<p>If you’d like the code that produced this blog, check out the <a href=\"https://github.com/drsimonj/blogR\" rel=\"nofollow\">blogR GitHub repository</a>.</p>"
}