{
  "id": "tag:drsimonj.svbtle.com,2014:Post/exploring-correlations-in-r-with-corrr",
  "published": "2018-08-21T00:53:40-07:00",
  "updated": "2018-08-21T00:53:40-07:00",
  "link": "",
  "title": "Exploring correlations in R with corrr",
  "content": "<p><a href=\"https://twitter.com/drsimonj\" rel=\"nofollow\">@drsimonj</a> here to share a (sort of) readable version of <a href=\"https://www.meetup.com/en-AU/amst-R-dam/events/251102944/\" rel=\"nofollow\">my presentation at the amst-R-dam meetup</a> on 14 August, 2018: “Exploring correlations in R with corrr”.</p>\n\n<p>Those who attended will know that I changed the topic of the talk, originally advertised as “R from academia to commerical business”. For anyone who’s interested, I gave that talk at useR! 2018 and, thanks to the R consortium, you can watch it <a href=\"https://www.youtube.com/embed/3eqJj7mj7lA\" rel=\"nofollow\">here</a>. I also gave a “Wrangling data in the Tidyverse” tutorial that you can follow at <a href=\"https://www.youtube.com/embed/E-Vvg8uzcVM\" rel=\"nofollow\">Part 1</a> and <a href=\"https://www.youtube.com/embed/DwWH1mTerOc\" rel=\"nofollow\">Part 2</a>.</p>\n<h1 id=\"the-story-of-corrr_1\">The story of corrr <a class=\"head_anchor\" href=\"#the-story-of-corrr_1\" rel=\"nofollow\">#</a>\n</h1>\n<p>Moving to corrr — the first package I ever created. It started when I was a postgrad student studying individual differences in decision making. My research data was responses to test batteries. My statistical bread and butter was regression-based techniques like multiple regression, path analysis, factor analysis (EFA and CFA), and structural equation modelling.</p>\n\n<p>I spent a lot of time exploring correlation matrices to make model decisions, and diagnose poor fits or unexpected results! If you need proof, check out some of the correlations tables published in my academic papers like <a href=\"https://onlinelibrary.wiley.com/doi/abs/10.1002/bdm.1939\" rel=\"nofollow\">“Individual Differences in Decision Making Depend on Cognitive Abilities, Monitoring and Control”</a></p>\n<h1 id=\"how-to-explore-correlations_1\">How to explore correlations? <a class=\"head_anchor\" href=\"#how-to-explore-correlations_1\" rel=\"nofollow\">#</a>\n</h1>\n<p>To illustrate some of the challenges I was facing, let’s try explore some correlations with some very fancy data:</p>\n\n<pre><code class=\"prettyprint lang-r\">d &lt;- mtcars\nd$hp[3] &lt;- NA\nhead(d)\n#&gt;                    mpg cyl disp  hp drat    wt  qsec vs am gear carb\n#&gt; Mazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4\n#&gt; Mazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4\n#&gt; Datsun 710        22.8   4  108  NA 3.85 2.320 18.61  1  1    4    1\n#&gt; Hornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1\n#&gt; Hornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2\n#&gt; Valiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1\n</code></pre>\n\n<p>We could be motivated by <a href=\"https://en.wikipedia.org/wiki/Multicollinearity\" rel=\"nofollow\">multicollinearity</a>:</p>\n\n<pre><code class=\"prettyprint lang-r\">fit_1 &lt;- lm(mpg ~ hp,        data = d)\nfit_2 &lt;- lm(mpg ~ hp + disp, data = d)\n</code></pre>\n\n<pre><code class=\"prettyprint lang-r\">summary(fit_1)\n#&gt; \n#&gt; Call:\n#&gt; lm(formula = mpg ~ hp, data = d)\n#&gt; \n#&gt; Residuals:\n#&gt;     Min      1Q  Median      3Q     Max \n#&gt; -5.7219 -2.2887 -0.8677  1.5815  8.1743 \n#&gt; \n#&gt; Coefficients:\n#&gt;             Estimate Std. Error t value Pr(&gt;|t|)    \n#&gt; (Intercept) 30.18457    1.69527  17.805  &lt; 2e-16 ***\n#&gt; hp          -0.06860    0.01039  -6.604 3.08e-07 ***\n#&gt; ---\n#&gt; Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n#&gt; \n#&gt; Residual standard error: 3.925 on 29 degrees of freedom\n#&gt;   (1 observation deleted due to missingness)\n#&gt; Multiple R-squared:  0.6006, Adjusted R-squared:  0.5868 \n#&gt; F-statistic: 43.61 on 1 and 29 DF,  p-value: 3.085e-07\n</code></pre>\n\n<pre><code class=\"prettyprint lang-r\">summary(fit_2)\n#&gt; \n#&gt; Call:\n#&gt; lm(formula = mpg ~ hp + disp, data = d)\n#&gt; \n#&gt; Residuals:\n#&gt;     Min      1Q  Median      3Q     Max \n#&gt; -4.9136 -2.3472 -0.7302  1.9798  6.7549 \n#&gt; \n#&gt; Coefficients:\n#&gt;              Estimate Std. Error t value Pr(&gt;|t|)    \n#&gt; (Intercept) 30.963202   1.373067  22.550  &lt; 2e-16 ***\n#&gt; hp          -0.024840   0.013480  -1.843 0.075991 .  \n#&gt; disp        -0.030992   0.007504  -4.130 0.000296 ***\n#&gt; ---\n#&gt; Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n#&gt; \n#&gt; Residual standard error: 3.149 on 28 degrees of freedom\n#&gt;   (1 observation deleted due to missingness)\n#&gt; Multiple R-squared:  0.7518, Adjusted R-squared:  0.7341 \n#&gt; F-statistic: 42.41 on 2 and 28 DF,  p-value: 3.368e-09\n</code></pre>\n\n<p>Strange result. Let’s check the correlations between <code class=\"prettyprint\">mpg</code>, <code class=\"prettyprint\">hp</code>, and <code class=\"prettyprint\">disp</code> to try and diagnose this problem. It should be simple using the base R function, <code class=\"prettyprint\">cor()</code>. Right?</p>\n\n<p>Err, what is with all the <code class=\"prettyprint\">NA</code>‘s ?</p>\n\n<pre><code class=\"prettyprint lang-r\">rs &lt;- cor(d)\nrs\n#&gt;             mpg        cyl       disp hp        drat         wt\n#&gt; mpg   1.0000000 -0.8521620 -0.8475514 NA  0.68117191 -0.8676594\n#&gt; cyl  -0.8521620  1.0000000  0.9020329 NA -0.69993811  0.7824958\n#&gt; disp -0.8475514  0.9020329  1.0000000 NA -0.71021393  0.8879799\n#&gt; hp           NA         NA         NA  1          NA         NA\n#&gt; drat  0.6811719 -0.6999381 -0.7102139 NA  1.00000000 -0.7124406\n#&gt; wt   -0.8676594  0.7824958  0.8879799 NA -0.71244065  1.0000000\n#&gt; qsec  0.4186840 -0.5912421 -0.4336979 NA  0.09120476 -0.1747159\n#&gt; vs    0.6640389 -0.8108118 -0.7104159 NA  0.44027846 -0.5549157\n#&gt; am    0.5998324 -0.5226070 -0.5912270 NA  0.71271113 -0.6924953\n#&gt; gear  0.4802848 -0.4926866 -0.5555692 NA  0.69961013 -0.5832870\n#&gt; carb -0.5509251  0.5269883  0.3949769 NA -0.09078980  0.4276059\n#&gt;             qsec         vs          am       gear        carb\n#&gt; mpg   0.41868403  0.6640389  0.59983243  0.4802848 -0.55092507\n#&gt; cyl  -0.59124207 -0.8108118 -0.52260705 -0.4926866  0.52698829\n#&gt; disp -0.43369788 -0.7104159 -0.59122704 -0.5555692  0.39497686\n#&gt; hp            NA         NA          NA         NA          NA\n#&gt; drat  0.09120476  0.4402785  0.71271113  0.6996101 -0.09078980\n#&gt; wt   -0.17471588 -0.5549157 -0.69249526 -0.5832870  0.42760594\n#&gt; qsec  1.00000000  0.7445354 -0.22986086 -0.2126822 -0.65624923\n#&gt; vs    0.74453544  1.0000000  0.16834512  0.2060233 -0.56960714\n#&gt; am   -0.22986086  0.1683451  1.00000000  0.7940588  0.05753435\n#&gt; gear -0.21268223  0.2060233  0.79405876  1.0000000  0.27407284\n#&gt; carb -0.65624923 -0.5696071  0.05753435  0.2740728  1.00000000\n</code></pre>\n\n<p>Check the help page <a href=\"https://stat.ethz.ch/R-manual/R-devel/library/stats/html/cor.html\" rel=\"nofollow\"><code class=\"prettyprint\">?cor</code></a>. Not so obvious. Default is <code class=\"prettyprint\">use = \"everything\"</code>, and buried down in the details:</p>\n<blockquote class=\"short\">\n<p>If use is “everything”, NAs will propagate conceptually, i.e., a resulting value will be NA whenever one of its contributing observations is NA.</p>\n</blockquote>\n<p>Have to handle missing values with <code class=\"prettyprint\">use</code>:</p>\n\n<pre><code class=\"prettyprint lang-r\">rs &lt;- cor(d, use = \"pairwise.complete.obs\")\nrs\n#&gt;             mpg        cyl       disp         hp        drat         wt\n#&gt; mpg   1.0000000 -0.8521620 -0.8475514 -0.7749843  0.68117191 -0.8676594\n#&gt; cyl  -0.8521620  1.0000000  0.9020329  0.8298025 -0.69993811  0.7824958\n#&gt; disp -0.8475514  0.9020329  1.0000000  0.7860001 -0.71021393  0.8879799\n#&gt; hp   -0.7749843  0.8298025  0.7860001  1.0000000 -0.44258306  0.6505927\n#&gt; drat  0.6811719 -0.6999381 -0.7102139 -0.4425831  1.00000000 -0.7124406\n#&gt; wt   -0.8676594  0.7824958  0.8879799  0.6505927 -0.71244065  1.0000000\n#&gt; qsec  0.4186840 -0.5912421 -0.4336979 -0.7064809  0.09120476 -0.1747159\n#&gt; vs    0.6640389 -0.8108118 -0.7104159 -0.7162015  0.44027846 -0.5549157\n#&gt; am    0.5998324 -0.5226070 -0.5912270 -0.2196179  0.71271113 -0.6924953\n#&gt; gear  0.4802848 -0.4926866 -0.5555692 -0.1161968  0.69961013 -0.5832870\n#&gt; carb -0.5509251  0.5269883  0.3949769  0.7437843 -0.09078980  0.4276059\n#&gt;             qsec         vs          am       gear        carb\n#&gt; mpg   0.41868403  0.6640389  0.59983243  0.4802848 -0.55092507\n#&gt; cyl  -0.59124207 -0.8108118 -0.52260705 -0.4926866  0.52698829\n#&gt; disp -0.43369788 -0.7104159 -0.59122704 -0.5555692  0.39497686\n#&gt; hp   -0.70648093 -0.7162015 -0.21961793 -0.1161968  0.74378428\n#&gt; drat  0.09120476  0.4402785  0.71271113  0.6996101 -0.09078980\n#&gt; wt   -0.17471588 -0.5549157 -0.69249526 -0.5832870  0.42760594\n#&gt; qsec  1.00000000  0.7445354 -0.22986086 -0.2126822 -0.65624923\n#&gt; vs    0.74453544  1.0000000  0.16834512  0.2060233 -0.56960714\n#&gt; am   -0.22986086  0.1683451  1.00000000  0.7940588  0.05753435\n#&gt; gear -0.21268223  0.2060233  0.79405876  1.0000000  0.27407284\n#&gt; carb -0.65624923 -0.5696071  0.05753435  0.2740728  1.00000000\n</code></pre>\n\n<p>Can we focus on subset with dplyr? Nope.</p>\n\n<pre><code class=\"prettyprint lang-r\">dplyr::select(rs, mpg, hp, disp)\n#&gt; Error in UseMethod(\"select_\"): no applicable method for 'select_' applied to an object of class \"c('matrix', 'double', 'numeric')\"\n</code></pre>\n\n<p>Riiiiiight! It’s a matrix and dplyr is for data frames.</p>\n\n<pre><code class=\"prettyprint lang-r\">class(rs)\n#&gt; [1] \"matrix\"\n</code></pre>\n\n<p>So we can use square brackets with matrices? Or not…</p>\n\n<pre><code class=\"prettyprint lang-r\">vars &lt;- c(\"mpg\", \"hp\", \"disp\")\nrs[rownames(rs) %in% vars]\n#&gt;  [1]  1.0000000 -0.8475514 -0.7749843 -0.8521620  0.9020329  0.8298025\n#&gt;  [7] -0.8475514  1.0000000  0.7860001 -0.7749843  0.7860001  1.0000000\n#&gt; [13]  0.6811719 -0.7102139 -0.4425831 -0.8676594  0.8879799  0.6505927\n#&gt; [19]  0.4186840 -0.4336979 -0.7064809  0.6640389 -0.7104159 -0.7162015\n#&gt; [25]  0.5998324 -0.5912270 -0.2196179  0.4802848 -0.5555692 -0.1161968\n#&gt; [31] -0.5509251  0.3949769  0.7437843\n</code></pre>\n\n<p>Mm, square brackets can take on different functions with matrices. Without a comma, it’s treated like a vector. With a comma, we can separately specify the dimensions.</p>\n\n<pre><code class=\"prettyprint lang-r\">vars &lt;- c(\"mpg\", \"hp\", \"disp\")\nrs[rownames(rs) %in% vars, colnames(rs) %in% vars]\n#&gt;             mpg       disp         hp\n#&gt; mpg   1.0000000 -0.8475514 -0.7749843\n#&gt; disp -0.8475514  1.0000000  0.7860001\n#&gt; hp   -0.7749843  0.7860001  1.0000000\n</code></pre>\n\n<p>Aha! High correlation between input variables (multicollinearity).</p>\n\n<p>But seriously, this syntax is pretty ugly.</p>\n\n<pre><code class=\"prettyprint lang-r\">vars &lt;- c(\"mpg\", \"hp\", \"disp\")\nrs[rownames(rs) %in% vars, colnames(rs) %in% vars]\n</code></pre>\n\n<p>We diagnosed our multicollinearity problem. What if we want to something a bit more complex like exploring clustering of variables in high dimensional space? Could use exploratory factor analysis.</p>\n\n<pre><code class=\"prettyprint lang-r\">factanal(na.omit(d), factors = 2)\n#&gt; \n#&gt; Call:\n#&gt; factanal(x = na.omit(d), factors = 2)\n#&gt; \n#&gt; Uniquenesses:\n#&gt;   mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb \n#&gt; 0.155 0.072 0.101 0.145 0.295 0.174 0.154 0.264 0.160 0.245 0.387 \n#&gt; \n#&gt; Loadings:\n#&gt;      Factor1 Factor2\n#&gt; mpg   0.694  -0.603 \n#&gt; cyl  -0.629   0.729 \n#&gt; disp -0.730   0.605 \n#&gt; hp   -0.335   0.862 \n#&gt; drat  0.810  -0.221 \n#&gt; wt   -0.809   0.414 \n#&gt; qsec -0.162  -0.905 \n#&gt; vs    0.280  -0.811 \n#&gt; am    0.910   0.110 \n#&gt; gear  0.859   0.133 \n#&gt; carb          0.781 \n#&gt; \n#&gt;                Factor1 Factor2\n#&gt; SS loadings      4.506   4.342\n#&gt; Proportion Var   0.410   0.395\n#&gt; Cumulative Var   0.410   0.804\n#&gt; \n#&gt; Test of the hypothesis that 2 factors are sufficient.\n#&gt; The chi square statistic is 68.49 on 34 degrees of freedom.\n#&gt; The p-value is 0.000414\n</code></pre>\n\n<pre><code class=\"prettyprint lang-r\">factanal(na.omit(d), factors = 5)\n#&gt; \n#&gt; Call:\n#&gt; factanal(x = na.omit(d), factors = 5)\n#&gt; \n#&gt; Uniquenesses:\n#&gt;   mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb \n#&gt; 0.112 0.044 0.012 0.066 0.275 0.005 0.091 0.128 0.136 0.143 0.045 \n#&gt; \n#&gt; Loadings:\n#&gt;      Factor1 Factor2 Factor3 Factor4 Factor5\n#&gt; mpg   0.647  -0.441  -0.483  -0.203         \n#&gt; cyl  -0.604   0.694   0.293   0.128         \n#&gt; disp -0.645   0.543   0.202   0.451   0.182 \n#&gt; hp   -0.264   0.659   0.544   0.205   0.305 \n#&gt; drat  0.806  -0.250                         \n#&gt; wt   -0.725   0.226   0.420   0.488         \n#&gt; qsec -0.184  -0.890  -0.269                 \n#&gt; vs    0.242  -0.848  -0.209  -0.155   0.163 \n#&gt; am    0.916   0.118                         \n#&gt; gear  0.892           0.237                 \n#&gt; carb  0.119   0.458   0.853                 \n#&gt; \n#&gt;                Factor1 Factor2 Factor3 Factor4 Factor5\n#&gt; SS loadings      4.186   3.255   1.739   0.582   0.180\n#&gt; Proportion Var   0.381   0.296   0.158   0.053   0.016\n#&gt; Cumulative Var   0.381   0.676   0.835   0.887   0.904\n#&gt; \n#&gt; Test of the hypothesis that 5 factors are sufficient.\n#&gt; The chi square statistic is 2.17 on 10 degrees of freedom.\n#&gt; The p-value is 0.995\n</code></pre>\n\n<p>So many questions! I’d much rather explore the correlations.</p>\n\n<p>Let’s try to find all variables with a correlation greater than 0.90. Why doesn’t this work?!</p>\n\n<pre><code class=\"prettyprint lang-r\">col_has_over_90 &lt;- apply(rs, 2, function(x) any(x &gt; .9))\nrs[, col_has_over_90]\n#&gt;             mpg        cyl       disp         hp        drat         wt\n#&gt; mpg   1.0000000 -0.8521620 -0.8475514 -0.7749843  0.68117191 -0.8676594\n#&gt; cyl  -0.8521620  1.0000000  0.9020329  0.8298025 -0.69993811  0.7824958\n#&gt; disp -0.8475514  0.9020329  1.0000000  0.7860001 -0.71021393  0.8879799\n#&gt; hp   -0.7749843  0.8298025  0.7860001  1.0000000 -0.44258306  0.6505927\n#&gt; drat  0.6811719 -0.6999381 -0.7102139 -0.4425831  1.00000000 -0.7124406\n#&gt; wt   -0.8676594  0.7824958  0.8879799  0.6505927 -0.71244065  1.0000000\n#&gt; qsec  0.4186840 -0.5912421 -0.4336979 -0.7064809  0.09120476 -0.1747159\n#&gt; vs    0.6640389 -0.8108118 -0.7104159 -0.7162015  0.44027846 -0.5549157\n#&gt; am    0.5998324 -0.5226070 -0.5912270 -0.2196179  0.71271113 -0.6924953\n#&gt; gear  0.4802848 -0.4926866 -0.5555692 -0.1161968  0.69961013 -0.5832870\n#&gt; carb -0.5509251  0.5269883  0.3949769  0.7437843 -0.09078980  0.4276059\n#&gt;             qsec         vs          am       gear        carb\n#&gt; mpg   0.41868403  0.6640389  0.59983243  0.4802848 -0.55092507\n#&gt; cyl  -0.59124207 -0.8108118 -0.52260705 -0.4926866  0.52698829\n#&gt; disp -0.43369788 -0.7104159 -0.59122704 -0.5555692  0.39497686\n#&gt; hp   -0.70648093 -0.7162015 -0.21961793 -0.1161968  0.74378428\n#&gt; drat  0.09120476  0.4402785  0.71271113  0.6996101 -0.09078980\n#&gt; wt   -0.17471588 -0.5549157 -0.69249526 -0.5832870  0.42760594\n#&gt; qsec  1.00000000  0.7445354 -0.22986086 -0.2126822 -0.65624923\n#&gt; vs    0.74453544  1.0000000  0.16834512  0.2060233 -0.56960714\n#&gt; am   -0.22986086  0.1683451  1.00000000  0.7940588  0.05753435\n#&gt; gear -0.21268223  0.2060233  0.79405876  1.0000000  0.27407284\n#&gt; carb -0.65624923 -0.5696071  0.05753435  0.2740728  1.00000000\n</code></pre>\n\n<p>The diagonal is 1. All cols have a value greater than .90!</p>\n\n<p>Exclude diagonal:</p>\n\n<pre><code class=\"prettyprint lang-r\">diag(rs) &lt;- NA\ncol_has_over_90 &lt;- apply(rs, 2, function(x) any(x &gt; .9, na.rm = TRUE))\nrs[, col_has_over_90]\n#&gt;             cyl       disp\n#&gt; mpg  -0.8521620 -0.8475514\n#&gt; cyl          NA  0.9020329\n#&gt; disp  0.9020329         NA\n#&gt; hp    0.8298025  0.7860001\n#&gt; drat -0.6999381 -0.7102139\n#&gt; wt    0.7824958  0.8879799\n#&gt; qsec -0.5912421 -0.4336979\n#&gt; vs   -0.8108118 -0.7104159\n#&gt; am   -0.5226070 -0.5912270\n#&gt; gear -0.4926866 -0.5555692\n#&gt; carb  0.5269883  0.3949769\n</code></pre>\n\n<p>Again, this syntax is pretty gross. Imagine showing this to a beginner and asking them to write down as much as they remember. Probably not much would be my guess.</p>\n\n<p>What about vizualising correlations? I’d suggest giving up at this point.</p>\n\n<p><a href=\"https://svbtleusercontent.com/vCAdmmx28nbzoKYcGVrh210xspap.gif\" rel=\"nofollow\"><img src=\"https://svbtleusercontent.com/vCAdmmx28nbzoKYcGVrh210xspap_small.gif\" alt=\"depressed.gif\"></a></p>\n<h2 id=\"exploring-data-with-the-tidyverse_2\">Exploring data with the tidyverse <a class=\"head_anchor\" href=\"#exploring-data-with-the-tidyverse_2\" rel=\"nofollow\">#</a>\n</h2>\n<p>Remember me as postgrad? I’d discovered the tidyverse and really liked it, because <em>exploring</em> data with the tidyverse is easy.</p>\n\n<pre><code class=\"prettyprint lang-r\">library(tidyverse)\nd %&gt;% \n  select(mpg:drat) %&gt;% \n  gather() %&gt;% \n  ggplot(aes(value)) +\n    geom_histogram() +\n    facet_wrap(~key, scales = \"free\")\n</code></pre>\n\n<p><a href=\"https://svbtleusercontent.com/v8a6SMH3qEUWDAnK2fbtr60xspap.png\" rel=\"nofollow\"><img src=\"https://svbtleusercontent.com/v8a6SMH3qEUWDAnK2fbtr60xspap_small.png\" alt=\"unnamed-chunk-17-1.png\"></a></p>\n\n<p>Can’t we have this for correlations? I don’t want to do any crazy mathematical operations or statistical tests. I just want to quickly explore the value. It’s not a big ask.</p>\n\n<p>Good news! This is why I developed corrr as a tidyverse-style package for exploring correlations in R.</p>\n<h1 id=\"a-hrefhttpgithubcomdrsimonjcorrrcorrra_1\">\n<a href=\"http://github.com/drsimonj/corrr/\" rel=\"nofollow\">corrr</a> <a class=\"head_anchor\" href=\"#a-hrefhttpgithubcomdrsimonjcorrrcorrra_1\" rel=\"nofollow\">#</a>\n</h1>\n<p><a href=\"https://svbtleusercontent.com/oDU6kAGErMQCpLiuDJoTRX0xspap.png\" rel=\"nofollow\"><img src=\"https://svbtleusercontent.com/oDU6kAGErMQCpLiuDJoTRX0xspap_small.png\" alt=\"corrr_logo.png\"></a></p>\n\n<p>Here’s a quick example to get a feel for the syntax:</p>\n\n<pre><code class=\"prettyprint lang-r\">library(corrr)\nd %&gt;% \n  correlate() %&gt;% \n  focus(mpg:drat, mirror = TRUE) %&gt;% \n  network_plot()\n#&gt; \n#&gt; Correlation method: 'pearson'\n#&gt; Missing treated using: 'pairwise.complete.obs'\n</code></pre>\n\n<p><a href=\"https://svbtleusercontent.com/u5EHjmYYpN2zSdm5i3ZTri0xspap.png\" rel=\"nofollow\"><img src=\"https://svbtleusercontent.com/u5EHjmYYpN2zSdm5i3ZTri0xspap_small.png\" alt=\"unnamed-chunk-18-1.png\"></a></p>\n\n<p>The first objective of corrr was to write a new function that uses <code class=\"prettyprint\">cor()</code> but:</p>\n\n<ul>\n<li>  Handles missing by default with <code class=\"prettyprint\">use = \"pairwise.complete.obs\"</code>\n</li>\n<li>  Stops diagonal from getting in the way by setting it to <code class=\"prettyprint\">NA</code>\n</li>\n<li>  Makes it possible to use tidyverse tools by returning a <code class=\"prettyprint\">data.frame</code> instead of a <code class=\"prettyprint\">matrix</code>\n</li>\n</ul>\n\n<p>Now, meet <code class=\"prettyprint\">correlate()</code></p>\n\n<pre><code class=\"prettyprint lang-r\">rs &lt;- correlate(d)\n#&gt; \n#&gt; Correlation method: 'pearson'\n#&gt; Missing treated using: 'pairwise.complete.obs'\nrs\n#&gt; # A tibble: 11 x 12\n#&gt;    rowname     mpg     cyl    disp      hp     drat      wt     qsec\n#&gt;    &lt;chr&gt;     &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;\n#&gt;  1 mpg      NA      -0.852  -0.848  -0.775   0.681   -0.868   0.419 \n#&gt;  2 cyl      -0.852  NA       0.902   0.830  -0.700    0.782  -0.591 \n#&gt;  3 disp     -0.848   0.902  NA       0.786  -0.710    0.888  -0.434 \n#&gt;  4 hp       -0.775   0.830   0.786  NA      -0.443    0.651  -0.706 \n#&gt;  5 drat      0.681  -0.700  -0.710  -0.443  NA       -0.712   0.0912\n#&gt;  6 wt       -0.868   0.782   0.888   0.651  -0.712   NA      -0.175 \n#&gt;  7 qsec      0.419  -0.591  -0.434  -0.706   0.0912  -0.175  NA     \n#&gt;  8 vs        0.664  -0.811  -0.710  -0.716   0.440   -0.555   0.745 \n#&gt;  9 am        0.600  -0.523  -0.591  -0.220   0.713   -0.692  -0.230 \n#&gt; 10 gear      0.480  -0.493  -0.556  -0.116   0.700   -0.583  -0.213 \n#&gt; 11 carb     -0.551   0.527   0.395   0.744  -0.0908   0.428  -0.656 \n#&gt; # ... with 4 more variables: vs &lt;dbl&gt;, am &lt;dbl&gt;, gear &lt;dbl&gt;, carb &lt;dbl&gt;\n</code></pre>\n\n<p>Same args as <code class=\"prettyprint\">cor()</code> with some extras</p>\n\n<pre><code class=\"prettyprint lang-r\">correlate(d, method = \"spearman\", diagonal = 1)\n#&gt; \n#&gt; Correlation method: 'spearman'\n#&gt; Missing treated using: 'pairwise.complete.obs'\n#&gt; # A tibble: 11 x 12\n#&gt;    rowname    mpg    cyl   disp     hp    drat     wt    qsec     vs\n#&gt;    &lt;chr&gt;    &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;   &lt;dbl&gt;  &lt;dbl&gt;   &lt;dbl&gt;  &lt;dbl&gt;\n#&gt;  1 mpg      1.00  -0.911 -0.909 -0.889  0.651  -0.886  0.467   0.707\n#&gt;  2 cyl     -0.911  1.00   0.928  0.899 -0.679   0.858 -0.572  -0.814\n#&gt;  3 disp    -0.909  0.928  1.00   0.845 -0.684   0.898 -0.460  -0.724\n#&gt;  4 hp      -0.889  0.899  0.845  1.00  -0.504   0.763 -0.660  -0.747\n#&gt;  5 drat     0.651 -0.679 -0.684 -0.504  1.00   -0.750  0.0919  0.447\n#&gt;  6 wt      -0.886  0.858  0.898  0.763 -0.750   1.00  -0.225  -0.587\n#&gt;  7 qsec     0.467 -0.572 -0.460 -0.660  0.0919 -0.225  1.00    0.792\n#&gt;  8 vs       0.707 -0.814 -0.724 -0.747  0.447  -0.587  0.792   1.00 \n#&gt;  9 am       0.562 -0.522 -0.624 -0.326  0.687  -0.738 -0.203   0.168\n#&gt; 10 gear     0.543 -0.564 -0.594 -0.316  0.745  -0.676 -0.148   0.283\n#&gt; 11 carb    -0.657  0.580  0.540  0.723 -0.125   0.500 -0.659  -0.634\n#&gt; # ... with 3 more variables: am &lt;dbl&gt;, gear &lt;dbl&gt;, carb &lt;dbl&gt;\n</code></pre>\n\n<p>The output of <code class=\"prettyprint\">correlate()</code></p>\n\n<ul>\n<li>  A helpful message to remind us of what’s happening (turned off with <code class=\"prettyprint\">quiet = TRUE</code>)</li>\n<li>  A correlation data frame (tibble) with class <code class=\"prettyprint\">cor_df</code> and:\n\n<ul>\n<li>  Diagonals set to <code class=\"prettyprint\">NA</code> (adjusted via <code class=\"prettyprint\">diagonal = NA</code>)</li>\n<li>  A <code class=\"prettyprint\">\"rowname\"</code> colum rather than rownames (more <a href=\"https://adv-r.hadley.nz/vectors-chap.html#rownames\" rel=\"nofollow\">here</a>)</li>\n</ul>\n</li>\n</ul>\n\n<p>It’s now super easy to pipe straight into tidyverse functions that work with data frames. For example:</p>\n\n<pre><code class=\"prettyprint lang-r\">rs %&gt;% \n  select(mpg:drat) %&gt;% \n  gather() %&gt;% \n  ggplot(aes(value)) +\n    geom_histogram() +\n    facet_wrap(~key)\n</code></pre>\n\n<p><a href=\"https://svbtleusercontent.com/tJ2drcGTPLtBBpks6AkPBP0xspap.png\" rel=\"nofollow\"><img src=\"https://svbtleusercontent.com/tJ2drcGTPLtBBpks6AkPBP0xspap_small.png\" alt=\"unnamed-chunk-21-1.png\"></a></p>\n\n<p>How about that challenge to find cols with a correlation greater than .9?</p>\n\n<pre><code class=\"prettyprint lang-r\">any_over_90 &lt;- function(x) any(x &gt; .9, na.rm = TRUE)\nrs %&gt;% select_if(any_over_90)\n#&gt; # A tibble: 11 x 3\n#&gt;    rowname     cyl    disp\n#&gt;    &lt;chr&gt;     &lt;dbl&gt;   &lt;dbl&gt;\n#&gt;  1 mpg      -0.852  -0.848\n#&gt;  2 cyl      NA       0.902\n#&gt;  3 disp      0.902  NA    \n#&gt;  4 hp        0.830   0.786\n#&gt;  5 drat     -0.700  -0.710\n#&gt;  6 wt        0.782   0.888\n#&gt;  7 qsec     -0.591  -0.434\n#&gt;  8 vs       -0.811  -0.710\n#&gt;  9 am       -0.523  -0.591\n#&gt; 10 gear     -0.493  -0.556\n#&gt; 11 carb      0.527   0.395\n</code></pre>\n\n<p><a href=\"https://svbtleusercontent.com/mf3pUQeQCFNio3s5ur5hJD0xspap.gif\" rel=\"nofollow\"><img src=\"https://svbtleusercontent.com/mf3pUQeQCFNio3s5ur5hJD0xspap_small.gif\" alt=\"self_five.gif\"></a></p>\n\n<p>Here’s a diagram to get you started after <code class=\"prettyprint\">library(corrr)</code>:</p>\n\n<p><a href=\"https://svbtleusercontent.com/jCGEz9c5hotdLGYy9ewnHP0xspap.png\" rel=\"nofollow\"><img src=\"https://svbtleusercontent.com/jCGEz9c5hotdLGYy9ewnHP0xspap_small.png\" alt=\"corrr_flow.png\"></a></p>\n<h2 id=\"correlation-data-frames-are-not-tidy_2\">Correlation data frames are not tidy <a class=\"head_anchor\" href=\"#correlation-data-frames-are-not-tidy_2\" rel=\"nofollow\">#</a>\n</h2>\n<p>Tidy data functions target columns OR rows, but I found myself frequently wanting to make changes to both. So next came the ability to <code class=\"prettyprint\">focus()</code> on columns and rows. This function acts just like dplyr’s <code class=\"prettyprint\">select()</code>, but also excludes the selected colums from the rows (or everything else with the <code class=\"prettyprint\">mirror</code> argument).</p>\n\n<pre><code class=\"prettyprint lang-r\">rs %&gt;% \n  focus(mpg, disp, hp)\n#&gt; # A tibble: 8 x 4\n#&gt;   rowname    mpg   disp     hp\n#&gt;   &lt;chr&gt;    &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;\n#&gt; 1 cyl     -0.852  0.902  0.830\n#&gt; 2 drat     0.681 -0.710 -0.443\n#&gt; 3 wt      -0.868  0.888  0.651\n#&gt; 4 qsec     0.419 -0.434 -0.706\n#&gt; 5 vs       0.664 -0.710 -0.716\n#&gt; 6 am       0.600 -0.591 -0.220\n#&gt; 7 gear     0.480 -0.556 -0.116\n#&gt; 8 carb    -0.551  0.395  0.744\n</code></pre>\n\n<pre><code class=\"prettyprint lang-r\">rs %&gt;% \n  focus(-mpg, -disp, -hp)\n#&gt; # A tibble: 3 x 9\n#&gt;   rowname    cyl   drat     wt   qsec     vs     am   gear   carb\n#&gt;   &lt;chr&gt;    &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;\n#&gt; 1 mpg     -0.852  0.681 -0.868  0.419  0.664  0.600  0.480 -0.551\n#&gt; 2 disp     0.902 -0.710  0.888 -0.434 -0.710 -0.591 -0.556  0.395\n#&gt; 3 hp       0.830 -0.443  0.651 -0.706 -0.716 -0.220 -0.116  0.744\n</code></pre>\n\n<pre><code class=\"prettyprint lang-r\">rs %&gt;% \n  focus(mpg, disp, hp, mirror = TRUE)\n#&gt; # A tibble: 3 x 4\n#&gt;   rowname     mpg    disp      hp\n#&gt;   &lt;chr&gt;     &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;\n#&gt; 1 mpg      NA      -0.848  -0.775\n#&gt; 2 disp     -0.848  NA       0.786\n#&gt; 3 hp       -0.775   0.786  NA\n</code></pre>\n\n<pre><code class=\"prettyprint lang-r\">rs %&gt;% \n  focus(matches(\"^d\"))\n#&gt; # A tibble: 9 x 3\n#&gt;   rowname   disp    drat\n#&gt;   &lt;chr&gt;    &lt;dbl&gt;   &lt;dbl&gt;\n#&gt; 1 mpg     -0.848  0.681 \n#&gt; 2 cyl      0.902 -0.700 \n#&gt; 3 hp       0.786 -0.443 \n#&gt; 4 wt       0.888 -0.712 \n#&gt; 5 qsec    -0.434  0.0912\n#&gt; 6 vs      -0.710  0.440 \n#&gt; 7 am      -0.591  0.713 \n#&gt; 8 gear    -0.556  0.700 \n#&gt; 9 carb     0.395 -0.0908\n</code></pre>\n\n<pre><code class=\"prettyprint lang-r\">rs %&gt;% \n  focus_if(any_over_90, mirror = TRUE)\n#&gt; # A tibble: 2 x 3\n#&gt;   rowname    cyl   disp\n#&gt;   &lt;chr&gt;    &lt;dbl&gt;  &lt;dbl&gt;\n#&gt; 1 cyl     NA      0.902\n#&gt; 2 disp     0.902 NA\n</code></pre>\n\n<p>One of my favourite uses is to <code class=\"prettyprint\">focus()</code> on correlations of one variable with all others and plot the results.</p>\n\n<pre><code class=\"prettyprint lang-r\">rs %&gt;% \n  focus(mpg)\n#&gt; # A tibble: 10 x 2\n#&gt;    rowname    mpg\n#&gt;    &lt;chr&gt;    &lt;dbl&gt;\n#&gt;  1 cyl     -0.852\n#&gt;  2 disp    -0.848\n#&gt;  3 hp      -0.775\n#&gt;  4 drat     0.681\n#&gt;  5 wt      -0.868\n#&gt;  6 qsec     0.419\n#&gt;  7 vs       0.664\n#&gt;  8 am       0.600\n#&gt;  9 gear     0.480\n#&gt; 10 carb    -0.551\n</code></pre>\n\n<pre><code class=\"prettyprint lang-r\">rs %&gt;%\n  focus(mpg) %&gt;%\n  mutate(rowname = reorder(rowname, mpg)) %&gt;%\n  ggplot(aes(rowname, mpg)) +\n    geom_col() + coord_flip()\n</code></pre>\n\n<p><a href=\"https://svbtleusercontent.com/iNTqBGjoFnZCbxPnRhHhF40xspap.png\" rel=\"nofollow\"><img src=\"https://svbtleusercontent.com/iNTqBGjoFnZCbxPnRhHhF40xspap_small.png\" alt=\"unnamed-chunk-29-1.png\"></a></p>\n\n<p>You can also <code class=\"prettyprint\">rearrange()</code> the entire data frame based on clustering algorithms:</p>\n\n<pre><code class=\"prettyprint lang-r\">rs %&gt;% rearrange()\n#&gt; # A tibble: 11 x 12\n#&gt;    rowname       am    gear     drat      wt    disp     mpg     cyl\n#&gt;    &lt;chr&gt;      &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;\n#&gt;  1 am       NA        0.794   0.713   -0.692  -0.591   0.600  -0.523\n#&gt;  2 gear      0.794   NA       0.700   -0.583  -0.556   0.480  -0.493\n#&gt;  3 drat      0.713    0.700  NA       -0.712  -0.710   0.681  -0.700\n#&gt;  4 wt       -0.692   -0.583  -0.712   NA       0.888  -0.868   0.782\n#&gt;  5 disp     -0.591   -0.556  -0.710    0.888  NA      -0.848   0.902\n#&gt;  6 mpg       0.600    0.480   0.681   -0.868  -0.848  NA      -0.852\n#&gt;  7 cyl      -0.523   -0.493  -0.700    0.782   0.902  -0.852  NA    \n#&gt;  8 vs        0.168    0.206   0.440   -0.555  -0.710   0.664  -0.811\n#&gt;  9 hp       -0.220   -0.116  -0.443    0.651   0.786  -0.775   0.830\n#&gt; 10 carb      0.0575   0.274  -0.0908   0.428   0.395  -0.551   0.527\n#&gt; 11 qsec     -0.230   -0.213   0.0912  -0.175  -0.434   0.419  -0.591\n#&gt; # ... with 4 more variables: vs &lt;dbl&gt;, hp &lt;dbl&gt;, carb &lt;dbl&gt;, qsec &lt;dbl&gt;\n</code></pre>\n\n<p>Or <code class=\"prettyprint\">shave()</code> the upper/lower triangle to missing values</p>\n\n<pre><code class=\"prettyprint lang-r\">rs %&gt;% shave()\n#&gt; # A tibble: 11 x 12\n#&gt;    rowname     mpg     cyl    disp      hp     drat      wt    qsec\n#&gt;    &lt;chr&gt;     &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;\n#&gt;  1 mpg      NA      NA      NA      NA      NA       NA      NA    \n#&gt;  2 cyl      -0.852  NA      NA      NA      NA       NA      NA    \n#&gt;  3 disp     -0.848   0.902  NA      NA      NA       NA      NA    \n#&gt;  4 hp       -0.775   0.830   0.786  NA      NA       NA      NA    \n#&gt;  5 drat      0.681  -0.700  -0.710  -0.443  NA       NA      NA    \n#&gt;  6 wt       -0.868   0.782   0.888   0.651  -0.712   NA      NA    \n#&gt;  7 qsec      0.419  -0.591  -0.434  -0.706   0.0912  -0.175  NA    \n#&gt;  8 vs        0.664  -0.811  -0.710  -0.716   0.440   -0.555   0.745\n#&gt;  9 am        0.600  -0.523  -0.591  -0.220   0.713   -0.692  -0.230\n#&gt; 10 gear      0.480  -0.493  -0.556  -0.116   0.700   -0.583  -0.213\n#&gt; 11 carb     -0.551   0.527   0.395   0.744  -0.0908   0.428  -0.656\n#&gt; # ... with 4 more variables: vs &lt;dbl&gt;, am &lt;dbl&gt;, gear &lt;dbl&gt;, carb &lt;dbl&gt;\n</code></pre>\n\n<p>Or <code class=\"prettyprint\">stretch()</code> into a more tidy format</p>\n\n<pre><code class=\"prettyprint lang-r\">rs %&gt;% stretch()\n#&gt; # A tibble: 121 x 3\n#&gt;    x     y           r\n#&gt;    &lt;chr&gt; &lt;chr&gt;   &lt;dbl&gt;\n#&gt;  1 mpg   mpg    NA    \n#&gt;  2 mpg   cyl    -0.852\n#&gt;  3 mpg   disp   -0.848\n#&gt;  4 mpg   hp     -0.775\n#&gt;  5 mpg   drat    0.681\n#&gt;  6 mpg   wt     -0.868\n#&gt;  7 mpg   qsec    0.419\n#&gt;  8 mpg   vs      0.664\n#&gt;  9 mpg   am      0.600\n#&gt; 10 mpg   gear    0.480\n#&gt; # ... with 111 more rows\n</code></pre>\n\n<p>And combine with tidyverse to do things like get a histogram of all correlations:</p>\n\n<pre><code class=\"prettyprint lang-r\">rs %&gt;%\n  shave() %&gt;% \n  stretch(na.rm = FALSE) %&gt;% \n  ggplot(aes(r)) +\n    geom_histogram()\n#&gt; `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n#&gt; Warning: Removed 66 rows containing non-finite values (stat_bin).\n</code></pre>\n\n<p><a href=\"https://svbtleusercontent.com/pA7uBfAFLB6dF3YTyL8RmF0xspap.png\" rel=\"nofollow\"><img src=\"https://svbtleusercontent.com/pA7uBfAFLB6dF3YTyL8RmF0xspap_small.png\" alt=\"unnamed-chunk-33-1.png\"></a></p>\n\n<p>As a tidyverse-style package, it’s important that the functions take a <strong><code class=\"prettyprint\">data.frame</code> in, <code class=\"prettyprint\">data.frame</code> out</strong> principle. This let’s you flow through pipelines and intermix functions from many packages with ease.</p>\n\n<pre><code class=\"prettyprint lang-r\">rs %&gt;%\n  focus(mpg:drat, mirror = TRUE) %&gt;% \n  rearrange() %&gt;% \n  shave(upper = FALSE) %&gt;% \n  select(-hp) %&gt;% \n  filter(rowname != \"drat\")\n#&gt; # A tibble: 4 x 5\n#&gt;   rowname    cyl     mpg    disp   drat\n#&gt;   &lt;chr&gt;    &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;  &lt;dbl&gt;\n#&gt; 1 hp       0.830  -0.775   0.786 -0.443\n#&gt; 2 cyl     NA      -0.852   0.902 -0.700\n#&gt; 3 mpg     NA      NA      -0.848  0.681\n#&gt; 4 disp    NA      NA      NA     -0.710\n</code></pre>\n<h2 id=\"seems-cool-but-it39s-still-hard-to-get-quick_2\">Seems cool, but it’s still hard to get quick insights <a class=\"head_anchor\" href=\"#seems-cool-but-it39s-still-hard-to-get-quick_2\" rel=\"nofollow\">#</a>\n</h2>\n<p>corrr also provides some helpful methods to interpret/visualize the correlations. You can get <code class=\"prettyprint\">fashion</code>able:</p>\n\n<pre><code class=\"prettyprint lang-r\">rs %&gt;% fashion()\n#&gt;    rowname  mpg  cyl disp   hp drat   wt qsec   vs   am gear carb\n#&gt; 1      mpg      -.85 -.85 -.77  .68 -.87  .42  .66  .60  .48 -.55\n#&gt; 2      cyl -.85       .90  .83 -.70  .78 -.59 -.81 -.52 -.49  .53\n#&gt; 3     disp -.85  .90       .79 -.71  .89 -.43 -.71 -.59 -.56  .39\n#&gt; 4       hp -.77  .83  .79      -.44  .65 -.71 -.72 -.22 -.12  .74\n#&gt; 5     drat  .68 -.70 -.71 -.44      -.71  .09  .44  .71  .70 -.09\n#&gt; 6       wt -.87  .78  .89  .65 -.71      -.17 -.55 -.69 -.58  .43\n#&gt; 7     qsec  .42 -.59 -.43 -.71  .09 -.17       .74 -.23 -.21 -.66\n#&gt; 8       vs  .66 -.81 -.71 -.72  .44 -.55  .74       .17  .21 -.57\n#&gt; 9       am  .60 -.52 -.59 -.22  .71 -.69 -.23  .17       .79  .06\n#&gt; 10    gear  .48 -.49 -.56 -.12  .70 -.58 -.21  .21  .79       .27\n#&gt; 11    carb -.55  .53  .39  .74 -.09  .43 -.66 -.57  .06  .27\n</code></pre>\n\n<pre><code class=\"prettyprint lang-r\">rs %&gt;%\n  focus(mpg:drat, mirror = TRUE) %&gt;% \n  rearrange() %&gt;% \n  shave(upper = FALSE) %&gt;% \n  select(-hp) %&gt;% \n  filter(rowname != \"drat\") %&gt;% \n  fashion()\n#&gt;   rowname  cyl  mpg disp drat\n#&gt; 1      hp  .83 -.77  .79 -.44\n#&gt; 2     cyl      -.85  .90 -.70\n#&gt; 3     mpg           -.85  .68\n#&gt; 4    disp                -.71\n</code></pre>\n\n<p>Make an <code class=\"prettyprint\">rplot()</code></p>\n\n<pre><code class=\"prettyprint lang-r\">rs %&gt;% rplot()\n</code></pre>\n\n<p><a href=\"https://svbtleusercontent.com/vSUUWL5Ur8piZsWQRoqNAb0xspap.png\" rel=\"nofollow\"><img src=\"https://svbtleusercontent.com/vSUUWL5Ur8piZsWQRoqNAb0xspap_small.png\" alt=\"unnamed-chunk-37-1.png\"></a></p>\n\n<pre><code class=\"prettyprint lang-r\">rs %&gt;%\n  rearrange(method = \"MDS\", absolute = FALSE) %&gt;%\n  shave() %&gt;% \n  rplot(shape = 15, colors = c(\"red\", \"green\"))\n</code></pre>\n\n<p><a href=\"https://svbtleusercontent.com/tWqQrSjZDakStTWqhuVNk60xspap.png\" rel=\"nofollow\"><img src=\"https://svbtleusercontent.com/tWqQrSjZDakStTWqhuVNk60xspap_small.png\" alt=\"unnamed-chunk-38-1.png\"></a></p>\n\n<p>Or make a <code class=\"prettyprint\">network_plot()</code></p>\n\n<pre><code class=\"prettyprint lang-r\">rs %&gt;% network_plot(min_cor = .6)\n</code></pre>\n\n<p><a href=\"https://svbtleusercontent.com/rhRX4PHzybDmmtXi2tfwYY0xspap.png\" rel=\"nofollow\"><img src=\"https://svbtleusercontent.com/rhRX4PHzybDmmtXi2tfwYY0xspap_small.png\" alt=\"unnamed-chunk-39-1.png\"></a></p>\n\n<p>But if you want to get custom, check out <a href=\"https://drsimonj.svbtle.com/how-to-create-correlation-network-plots-with-corrr-and-ggraph\" rel=\"nofollow\">my blog post combining corrr with ggraph</a>.</p>\n<h2 id=\"latest-addition-by-a-hrefhttpsgithubcomedgara_2\">Latest addition by <a href=\"https://github.com/edgararuiz\" rel=\"nofollow\">Edgar Ruiz</a> <a class=\"head_anchor\" href=\"#latest-addition-by-a-hrefhttpsgithubcomedgara_2\" rel=\"nofollow\">#</a>\n</h2>\n<p>So corrr was starting to look pretty good, but these days it’s not all me. There are <a href=\"https://github.com/drsimonj/corrr/graphs/contributors\" rel=\"nofollow\">three official contributors</a>, and many others who took the time to raise <a href=\"https://github.com/drsimonj/corrr/issues?utf8=%E2%9C%93&amp;q=is%3Aissue\" rel=\"nofollow\">issues that identified bugs or suggested features</a>.</p>\n\n<p>One of the latest editions by Edgar Ruiz lets you <code class=\"prettyprint\">correlate()</code> data frames in databases. To demonstrate (copying Edgar’s vignette), here’s a simple SQLite database with data pointer, <code class=\"prettyprint\">db_mtcars</code>:</p>\n\n<pre><code class=\"prettyprint lang-r\">con &lt;- DBI::dbConnect(RSQLite::SQLite(), path = \":dbname:\")\ndb_mtcars &lt;- copy_to(con, mtcars)\nclass(db_mtcars)\n#&gt; [1] \"tbl_dbi\"  \"tbl_sql\"  \"tbl_lazy\" \"tbl\"\n</code></pre>\n\n<p><code class=\"prettyprint\">correlate()</code> detects DB backend, uses <code class=\"prettyprint\">tidyeval</code> to calculate correlations in the database, and returns correlation data frame.</p>\n\n<pre><code class=\"prettyprint lang-r\">db_mtcars %&gt;% correlate(use = \"complete.obs\")\n#&gt; \n#&gt; Correlation method: 'pearson'\n#&gt; Missing treated using: 'complete.obs'\n#&gt; # A tibble: 11 x 12\n#&gt;    rowname     mpg     cyl    disp      hp     drat      wt     qsec\n#&gt;    &lt;chr&gt;     &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;\n#&gt;  1 mpg      NA      -0.852  -0.848  -0.776   0.681   -0.868   0.419 \n#&gt;  2 cyl      -0.852  NA       0.902   0.832  -0.700    0.782  -0.591 \n#&gt;  3 disp     -0.848   0.902  NA       0.791  -0.710    0.888  -0.434 \n#&gt;  4 hp       -0.776   0.832   0.791  NA      -0.449    0.659  -0.708 \n#&gt;  5 drat      0.681  -0.700  -0.710  -0.449  NA       -0.712   0.0912\n#&gt;  6 wt       -0.868   0.782   0.888   0.659  -0.712   NA      -0.175 \n#&gt;  7 qsec      0.419  -0.591  -0.434  -0.708   0.0912  -0.175  NA     \n#&gt;  8 vs        0.664  -0.811  -0.710  -0.723   0.440   -0.555   0.745 \n#&gt;  9 am        0.600  -0.523  -0.591  -0.243   0.713   -0.692  -0.230 \n#&gt; 10 gear      0.480  -0.493  -0.556  -0.126   0.700   -0.583  -0.213 \n#&gt; 11 carb     -0.551   0.527   0.395   0.750  -0.0908   0.428  -0.656 \n#&gt; # ... with 4 more variables: vs &lt;dbl&gt;, am &lt;dbl&gt;, gear &lt;dbl&gt;, carb &lt;dbl&gt;\n</code></pre>\n\n<p>Here’s another example using spark:</p>\n\n<pre><code class=\"prettyprint lang-r\">sc &lt;- sparklyr::spark_connect(master = \"local\")\n#&gt; * Using Spark: 2.1.0\nmtcars_tbl &lt;- copy_to(sc, mtcars)\ncorrelate(mtcars_tbl, use = \"complete.obs\")\n#&gt; \n#&gt; Correlation method: 'pearson'\n#&gt; Missing treated using: 'complete.obs'\n#&gt; # A tibble: 11 x 12\n#&gt;    rowname     mpg     cyl    disp      hp     drat      wt     qsec\n#&gt;    &lt;chr&gt;     &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;\n#&gt;  1 mpg      NA      -0.852  -0.848  -0.776   0.681   -0.868   0.419 \n#&gt;  2 cyl      -0.852  NA       0.902   0.832  -0.700    0.782  -0.591 \n#&gt;  3 disp     -0.848   0.902  NA       0.791  -0.710    0.888  -0.434 \n#&gt;  4 hp       -0.776   0.832   0.791  NA      -0.449    0.659  -0.708 \n#&gt;  5 drat      0.681  -0.700  -0.710  -0.449  NA       -0.712   0.0912\n#&gt;  6 wt       -0.868   0.782   0.888   0.659  -0.712   NA      -0.175 \n#&gt;  7 qsec      0.419  -0.591  -0.434  -0.708   0.0912  -0.175  NA     \n#&gt;  8 vs        0.664  -0.811  -0.710  -0.723   0.440   -0.555   0.745 \n#&gt;  9 am        0.600  -0.523  -0.591  -0.243   0.713   -0.692  -0.230 \n#&gt; 10 gear      0.480  -0.493  -0.556  -0.126   0.700   -0.583  -0.213 \n#&gt; 11 carb     -0.551   0.527   0.395   0.750  -0.0908   0.428  -0.656 \n#&gt; # ... with 4 more variables: vs &lt;dbl&gt;, am &lt;dbl&gt;, gear &lt;dbl&gt;, carb &lt;dbl&gt;\n</code></pre>\n\n<p>So no data is too big for corrr now! This opens up some nice possibilities. For example, most regression-based modelling packages (like <a href=\"http://lavaan.ugent.be/\" rel=\"nofollow\">lavaan</a>) cannot operate on large data sets in a database. However, they typically accept a correlation matrix as input. So you can use corrr to extract correlations from large data sets and do more complex modelling in memory.</p>\n<h2 id=\"thanks-simon-but-i39m-not-interested_2\">Thanks Simon, but I’m not interested. <a class=\"head_anchor\" href=\"#thanks-simon-but-i39m-not-interested_2\" rel=\"nofollow\">#</a>\n</h2>\n<p>In case corrr doesn’t float your boat, some other packages you might be interested in are <a href=\"https://cran.r-project.org/web/packages/corrplot/vignettes/corrplot-intro.html\" rel=\"nofollow\">corrplot</a> for <code class=\"prettyprint\">rplot()</code> style viz, and <a href=\"https://github.com/dgrtwo/widyr\" rel=\"nofollow\">widyr</a> for a more general way to handle relational data sets in a tidy framework.</p>\n<h2 id=\"sign-off_2\">Sign off <a class=\"head_anchor\" href=\"#sign-off_2\" rel=\"nofollow\">#</a>\n</h2>\n<p>Thanks for reading and I hope this was useful for you.</p>\n\n<p>For updates of recent blog posts, follow <a href=\"https://twitter.com/drsimonj\" rel=\"nofollow\">@drsimonj</a> on Twitter, or email me at <a href=\"mailto:drsimonjackson@gmail.com\" rel=\"nofollow\">drsimonjackson@gmail.com</a> to get in touch.</p>\n\n<p>If you’d like the code that produced this blog, check out the <a href=\"https://github.com/drsimonj/blogR\" rel=\"nofollow\">blogR GitHub repository</a>.</p>"
}