{
  "title": "Resizing Policy of std::vector",
  "link": "http://artem.sobolev.name/posts/2013-02-10-std-vector-growth.html",
  "description": "Sometime ago when Facebook opensourced their <a title=\"Folly is an open-source C++ library developed and used at Facebook\" href=\"https://github.com/facebook/folly\">Folly library</a> I was reading their docs and found <a title=\"folly/FBvector.h documentation\" href=\"https://github.com/facebook/folly/blob/master/folly/docs/FBVector.md\">something interesting</a>. In section “Memory Handling” they state\n<blockquote>\nIn fact it can be mathematically proven that a growth factor of 2 is rigorously the worst possible because it never allows the vector to reuse any of its previously-allocated memory\n</blockquote>\n<p>I haven’t got it first time. Recently I recalled that article and decided to deal with it. So after reading and googling for a while I finally understood the idea, so I’d like to say a few words about it.</p>\n<!--more-->\n<p>The problem is as follows: when a vector (or a similar structure with autoresize) gets filled, it should resize. It’s well known that it should grow exponentially in order to preserve constant amortized complexity of insertions, but what growth factor to choose? At first glance, 2 seems to be ok — it’s not so big and 2 is common for computer science :-). But it turns out that 2 is not so good. Let’s take a closer look by example:</p>\n<p><a href=\"/files/vector-resize-scheme.png\"><img src=\"/files/vector-resize-scheme.png\" alt=\"Vector resize scheme\" width=\"495\" height=\"350\" class=\"size-full\" /></a></p>\n<p>Suppose we’ve a vector of initial size <span class=\"math inline\">\\(C\\)</span>. When it gets filled, we increase its size twice. We allocate memory for a vector of size <span class=\"math inline\">\\(2C\\)</span> right after our original vector. So now we have vector of size <span class=\"math inline\">\\(2C\\)</span> and <span class=\"math inline\">\\(C\\)</span> bytes before it, where it was when it was small. Then expand it again and again and agian and so on. After <span class=\"math inline\">\\(n\\)</span> expansions we’ll get a vector of size <span class=\"math inline\">\\(2^n C\\)</span> preceded by <span class=\"math inline\">\\(C + 2C + 2^2 C + \\dots 2^{n-1} C\\)</span> bytes that were occupied by this vector before.</p>\n<p>So what’s the problem? The problem is that after every increasing your vector is too big to fit previously allocated memory. How much is it bigger? Well, as we know <span class=\"math inline\">\\(2^n - 1 = 1 + 2 + 4 + \\dots + 2^{n-1}\\)</span>, thus <span class=\"math inline\">\\(2^n C - C - 2C - 2^2 C - \\dots - 2^{n-1}C = C\\)</span>. Therefore you have permanent lack of <span class=\"math inline\">\\(C\\)</span> bytes to fit your vector in previously allocated space.</p>\n<p>Okay, let’s now solve this problem. First, let’s formalize it.</p>\n<p>Every time we increase vector of size <span class=\"math inline\">\\(C\\)</span> with growing factor <span class=\"math inline\">\\(k\\)</span> we do these steps:</p>\n<ol>\n<li>\nAllocate <span class=\"math inline\">\\(k C\\)</span> bytes\n</li>\n<li>\nCreate a new vector here and copy current vector’s content to the new one\n</li>\n<li>\nRemove the current vector, set the new one as the current\n</li>\n</ol>\n<p>So as you can see, formula for 2 is sort of upperbound: you can not use all of previously allocated <span class=\"math inline\">\\(n-1\\)</span> chunks when allocating nth, since you need to copy values from (n-1)th (though you can copy them in some temporary buffer, but it requires extra memory) chunk. So when we allocate nth chunk, we need it to be less than total free space from <span class=\"math inline\">\\(n-2\\)</span> allocations: <span class=\"math display\">\\[ k^n C \\le k^{n-2}C + k^{n-3}C + \\dots + kC + C \\]</span></p>\n<p>As you can see, we can get rid of C since it’s definetly positive. <span class=\"math display\">\\[ k^n \\le k^{n-2} + k^{n-3} + \\dots + k + 1 \\]</span></p>\n<p>Okay, time to solve some equations! We see something like a sum of a geometric progression, and we can use a formula for it. But I don’t retain it in my head, so I’ll use a little trick here. Let’s multiply both sides by <span class=\"math inline\">\\(k-1\\)</span>. We assume that <span class=\"math inline\">\\(k > 1\\)</span> (it’s very strange to use values greater than 1 as <em>growth</em> factor) <span class=\"math display\">\\[ (k-1) k^n \\le (k-1) (k^{n-2} + k^{n-3} + \\dots + k + 1) \\]</span></p>\n<p>Now we can notice that in the right side we have an expansion of <span class=\"math inline\">\\(k^{n-1}-1\\)</span> (well, maybe to remember this observation is harder than remembering a formula for sum of a geometric progression…)</p>\n<p><span class=\"math display\">\\[ (k-1) k^n \\le k^{n-1}-1 \\]</span> <span class=\"math display\">\\[ k^{n+1} - k^n \\le k^{n-1}-1 \\]</span> <span class=\"math display\">\\[ k^{n+1} \\le k^n + k^{n-1} - 1 \\]</span></p>\n<p>Oh, this obstructing 1… It would be so nice if we could throw it away! Wait, but we can! If we add 1 to the right side, we will merely increase its value, so it will still suit for an upper bound (or an approximation since 1 is a constant and is very small compared to <span class=\"math inline\">\\(k^n\\)</span>).</p>\n<p><span class=\"math display\">\\[ k^{n+1} \\le k^n + k^{n-1} - 1 < k^n + k^{n-1} \\]</span> <span class=\"math display\">\\[ k^2 < k + 1 \\]</span> <span class=\"math display\">\\[ k^2 - k - 1 < 0 \\]</span></p>\n<p>Solving this simple quadratic equation, we get <span class=\"math display\">\\[ k < \\frac{1+\\sqrt{5}}{2} \\approx 1.61 \\]</span></p>\n<p>So that’s why growth factor in many dynamic arrays is 1.5: it is pretty big to not cause reallocations too frequently and is small enough to not use memory too extensively.</p>",
  "pubDate": "Sun, 10 Feb 2013 00:00:00 UT",
  "guid": "http://artem.sobolev.name/posts/2013-02-10-std-vector-growth.html",
  "dc:creator": "Artem"
}