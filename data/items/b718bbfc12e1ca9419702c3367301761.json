{
  "title": "NumPy indexing peculiarities",
  "link": "",
  "published": "2011-09-23T00:00:00-07:00",
  "updated": "2011-09-23T00:00:00-07:00",
  "author": {
    "name": "Wes McKinney"
  },
  "id": "tag:wesmckinney.com,2011-09-23:/blog/numpy-indexing-peculiarities/",
  "summary": "<p>Many scientific Python users are surprised when I tell them that <code>ndarray.take</code> is faster than __getitem__-based (a.k.a. \"fancy\" as I call it) <a href=\"http://docs.scipy.org/doc/numpy/user/basics.indexing.html#index-arrays\" title=\"Array indexing\" target=\"_blank\">indexing</a>.</p>\n<div class=\"github\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">import</span> <span class=\"nn\">random</span>\n\n<span class=\"n\">arr</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">randn</span><span class=\"p\">(</span><span class=\"mi\">10000</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"n\">indexer</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">arange</span><span class=\"p\">(</span><span class=\"mi\">10000</span><span class=\"p\">)</span>\n<span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">shuffle</span><span class=\"p\">(</span><span class=\"n\">indexer</span><span class=\"p\">)</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">26</span><span class=\"p\">]:</span> <span class=\"n\">timeit</span> <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">indexer â€¦</span></code></pre></div>",
  "content": "<p>Many scientific Python users are surprised when I tell them that <code>ndarray.take</code> is faster than __getitem__-based (a.k.a. \"fancy\" as I call it) <a href=\"http://docs.scipy.org/doc/numpy/user/basics.indexing.html#index-arrays\" title=\"Array indexing\" target=\"_blank\">indexing</a>.</p>\n<div class=\"github\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">import</span> <span class=\"nn\">random</span>\n\n<span class=\"n\">arr</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">randn</span><span class=\"p\">(</span><span class=\"mi\">10000</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"n\">indexer</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">arange</span><span class=\"p\">(</span><span class=\"mi\">10000</span><span class=\"p\">)</span>\n<span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">shuffle</span><span class=\"p\">(</span><span class=\"n\">indexer</span><span class=\"p\">)</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">26</span><span class=\"p\">]:</span> <span class=\"n\">timeit</span> <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">indexer</span><span class=\"p\">]</span>\n<span class=\"mi\">1000</span> <span class=\"n\">loops</span><span class=\"p\">,</span> <span class=\"n\">best</span> <span class=\"n\">of</span> <span class=\"mi\">3</span><span class=\"p\">:</span> <span class=\"mf\">1.25</span> <span class=\"n\">ms</span> <span class=\"n\">per</span> <span class=\"n\">loop</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">27</span><span class=\"p\">]:</span> <span class=\"n\">timeit</span> <span class=\"n\">arr</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">indexer</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"mi\">10000</span> <span class=\"n\">loops</span><span class=\"p\">,</span> <span class=\"n\">best</span> <span class=\"n\">of</span> <span class=\"mi\">3</span><span class=\"p\">:</span> <span class=\"mi\">127</span> <span class=\"n\">us</span> <span class=\"n\">per</span> <span class=\"n\">loop</span>\n</code></pre></div>\n\n<p>It's actually kind of unbelievable when you think about it. What's going on here that <code>take</code> is almost <strong>10x faster</strong>? I really should take a closer at the internals of what __getitem__ does because this has always struck me as pretty bad. Maybe I shouldn't be complaining? I mean, R 2.13's indexing falls somewhere in the middle:</p>\n<div class=\"github\"><pre><span></span><code><span class=\"n\">mat</span> <span class=\"o\">&lt;-</span> <span class=\"nf\">matrix</span><span class=\"p\">(</span><span class=\"nf\">rnorm</span><span class=\"p\">(</span><span class=\"m\">50000</span><span class=\"p\">),</span> <span class=\"n\">nrow</span><span class=\"o\">=</span><span class=\"m\">10000</span><span class=\"p\">,</span> <span class=\"n\">ncol</span><span class=\"o\">=</span><span class=\"m\">5</span><span class=\"p\">)</span>\n<span class=\"nf\">set.seed</span><span class=\"p\">(</span><span class=\"m\">12345</span><span class=\"p\">)</span>\n<span class=\"n\">indexer</span> <span class=\"o\">&lt;-</span> <span class=\"nf\">sample</span><span class=\"p\">(</span><span class=\"m\">1</span><span class=\"o\">:</span><span class=\"m\">10000</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;</span> <span class=\"nf\">system.time</span><span class=\"p\">(</span><span class=\"nf\">for </span><span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"n\">in</span> <span class=\"m\">1</span><span class=\"o\">:</span><span class=\"m\">1000</span><span class=\"p\">)</span> <span class=\"n\">mat</span><span class=\"p\">[</span><span class=\"n\">indexer</span><span class=\"p\">,])</span>\n   <span class=\"n\">user</span>  <span class=\"n\">system</span> <span class=\"n\">elapsed</span>\n  <span class=\"m\">0.460</span>   <span class=\"m\">0.197</span>   <span class=\"m\">0.656</span>\n</code></pre></div>\n\n<p>So 656 microseconds per iteration. (In an earlier version of this post I used rpy2 to do the benchmark and got 1.05 ms, but there was apparently some overhead from rpy2)</p>\n<p>Another peculiarity that I noticed with <kdb>take</kdb> is that performance\ngets worse when you use the <strong>out</strong> argument, which tells the function to use\nan array you pass in to write out the result:</p>\n<div class=\"github\"><pre><span></span><code><span class=\"n\">out</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">empty_like</span><span class=\"p\">(</span><span class=\"n\">arr</span><span class=\"p\">)</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">50</span><span class=\"p\">]:</span> <span class=\"n\">timeit</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">arr</span><span class=\"p\">,</span> <span class=\"n\">indexer</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">out</span><span class=\"o\">=</span><span class=\"n\">out</span><span class=\"p\">)</span>\n<span class=\"mi\">10000</span> <span class=\"n\">loops</span><span class=\"p\">,</span> <span class=\"n\">best</span> <span class=\"n\">of</span> <span class=\"mi\">3</span><span class=\"p\">:</span> <span class=\"mi\">200</span> <span class=\"n\">us</span> <span class=\"n\">per</span> <span class=\"n\">loop</span>\n</code></pre></div>\n\n<p><strong>EDIT:</strong> I've been informed that using <code>mode='clip'</code> or <code>mode='wrap'</code> makes this run as fast as without the out argument.</p>\n<p>Weird! I was dissatisfied by this, so I got curious how fast a hand-coded little <a href=\"http://cython.org\" title=\"Cython\" target=\"_blank\">Cython</a> function can do this:</p>\n<div class=\"github\"><pre><span></span><code><span class=\"nd\">@cython</span><span class=\"o\">.</span><span class=\"n\">wraparound</span><span class=\"p\">(</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"nd\">@cython</span><span class=\"o\">.</span><span class=\"n\">boundscheck</span><span class=\"p\">(</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">take_axis0</span><span class=\"p\">(</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">float64_t</span><span class=\"p\">,</span> <span class=\"n\">ndim</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"n\">values</span><span class=\"p\">,</span>\n               <span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">int32_t</span><span class=\"p\">]</span> <span class=\"n\">indexer</span><span class=\"p\">,</span>\n               <span class=\"n\">out</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"n\">cdef</span><span class=\"p\">:</span>\n        <span class=\"n\">Py_ssize_t</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">idx</span>\n        <span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">float64_t</span><span class=\"p\">,</span> <span class=\"n\">ndim</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"n\">outbuf</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">out</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">outbuf</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">empty_like</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">outbuf</span> <span class=\"o\">=</span> <span class=\"n\">out</span>\n\n    <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">indexer</span><span class=\"p\">)</span>\n    <span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"n\">values</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"kn\">from</span> <span class=\"mi\">0</span> <span class=\"o\">&lt;=</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span><span class=\"p\">:</span>\n        <span class=\"n\">idx</span> <span class=\"o\">=</span> <span class=\"n\">indexer</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">idx</span> <span class=\"o\">==</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">:</span>\n            <span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"kn\">from</span> <span class=\"mi\">0</span> <span class=\"o\">&lt;=</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">k</span><span class=\"p\">:</span>\n                <span class=\"n\">outbuf</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">NaN</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"kn\">from</span> <span class=\"mi\">0</span> <span class=\"o\">&lt;=</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">k</span><span class=\"p\">:</span>\n                <span class=\"n\">outbuf</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">values</span><span class=\"p\">[</span><span class=\"n\">idx</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">]</span>\n</code></pre></div>\n\n<p>Don't worry about the -1 thingâ€” that's a specialization that I'm using inside pandas. Curiously, this function is a lot faster than <code>take</code> using <strong>out</strong> but faster than the regular <code>take</code> by a handful of microseconds.</p>\n<div class=\"github\"><pre><span></span><code><span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">53</span><span class=\"p\">]:</span> <span class=\"n\">timeit</span> <span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">take_axis0</span><span class=\"p\">(</span><span class=\"n\">arr</span><span class=\"p\">,</span> <span class=\"n\">indexer</span><span class=\"p\">)</span>\n<span class=\"mi\">10000</span> <span class=\"n\">loops</span><span class=\"p\">,</span> <span class=\"n\">best</span> <span class=\"n\">of</span> <span class=\"mi\">3</span><span class=\"p\">:</span> <span class=\"mi\">115</span> <span class=\"n\">us</span> <span class=\"n\">per</span> <span class=\"n\">loop</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">54</span><span class=\"p\">]:</span> <span class=\"n\">timeit</span> <span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">take_axis0</span><span class=\"p\">(</span><span class=\"n\">arr</span><span class=\"p\">,</span> <span class=\"n\">indexer</span><span class=\"p\">,</span> <span class=\"n\">out</span><span class=\"p\">)</span>\n<span class=\"mi\">10000</span> <span class=\"n\">loops</span><span class=\"p\">,</span> <span class=\"n\">best</span> <span class=\"n\">of</span> <span class=\"mi\">3</span><span class=\"p\">:</span> <span class=\"mi\">109</span> <span class=\"n\">us</span> <span class=\"n\">per</span> <span class=\"n\">loop</span>\n</code></pre></div>\n\n<p>Very interesting.</p>\n<h3>TL;DR</h3>\n<ul>\n<li>Use <code>take</code> not <code>[]</code>-based indexing to get best performance</li>\n<li>Cython is just as fast for my specific application and a lot faster if you're passing an <strong>out</strong> array (which I will be for the application that I needed this for)</li>\n<li>R's <code>matrix</code> indexing performance is better than NumPy's fancy indexing, but about 5-6x slower than <code>ndarray.take</code>. This can probably be improved.</li>\n</ul>"
}