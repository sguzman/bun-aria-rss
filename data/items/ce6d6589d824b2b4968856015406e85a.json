{
  "title": "Best practices when sharing your data analysis - Jupyter Notebooks",
  "description": "<h1 id=\"tips-to-make-you-data-analysis-easier-to-share\">Tips to make you data analysis easier to share</h1>\n\n<h3 id=\"context\">Context:</h3>\n\n<p>You work on a large dataset let’s say over 1Gb. You do an analysis. And you want to share</p>\n\n<ul>\n  <li>the data</li>\n  <li>the script / jupyter notebook</li>\n</ul>\n\n<p>so that other people can work / reproduce / tweak your results.</p>\n\n<p>Here are a few personal tips to make things easier for the poor schmuck / schmuckette who has to read your code.</p>\n\n<h3 id=\"compressed-data-in-a-bucket\">Compressed data in a bucket</h3>\n\n<p>Host your data on S3, google storage, Azure, dropbox etc …. whatever fits your mood as long as it can provide a unique URI.</p>\n\n<p>Sharing datasets in an email, or in google drive is flaky and confusing.\nDrive is not the right place to host datasets. Space is limited, and access control can be hazy.</p>\n\n<p>By hosting the dataset on the cloud:</p>\n\n<ul>\n  <li>your data has a unique URI. It is centralized, and you can easily enforce versions of the data.</li>\n  <li>You control who has access.</li>\n  <li>You are not limited in space.</li>\n</ul>\n\n<p>When you share your notebook, the data is downloaded using this unique URI instead of</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>&lt;this is my local path, don't forget to change it to your own local path&gt;.\n</code></pre></div></div>\n\n<p>However, managing access permissions on specific items in the cloud can be a <a href=\"https://www.trek10.com/blog/aws-s3-permissions/\">real pain</a>.</p>\n\n<p>By the way <code class=\"language-plaintext highlighter-rouge\">pd.read_csv</code> natively reads gzipped files :). Just add the <code class=\"language-plaintext highlighter-rouge\">compression='gzip'</code> parameter:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>df = pd.read_csv('S3_bucket/sample.tar.gz', compression='gzip')\n</code></pre></div></div>\n\n<h3 id=\"host-your-notebook-on-google-colab-or-on-a-similar-executable-platform\">host your notebook on google colab or on a similar executable platform</h3>\n\n<p>Your script may be efficient, bug free, superbly commented out etc … but still end up only working only on your platform.\nI’ve had the case recently of a friend, not particularly python savvy, trying to open a 1.9 Gb text file on a windows machine and being faced with abstruse unicode errors. He was stuck. However, the same script worked like a charm on my mac.</p>\n\n<p>So hosting the notebook on Google Colab will go a long way to make it reproducible without undue efforts.</p>\n\n<h3 id=\"demo-and-prod-mode\">Demo and Prod mode</h3>\n\n<p>If the data is large and running the whole notebook takes forever, it’s always a good idea to implement 2 modes: a sanbox and a production one with a simple test.\nSomething as simple as:\n    MODE = “demo”\n    MODE = “prod”</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>if MODE == 'demo':\n    # subsample the large initial dataset\nelse:\n    # basically do nothing\n\n# then the rest of the code and results etc ...\n</code></pre></div></div>\n\n<p>This way the recipient of your analysis can run the whole script quickly and start playing with the parameters and results right away instead of having to wait for loops or apply lambdas to finish.</p>\n\n<p>You can choose whichever mode as the default one depending on your audience.</p>\n\n<h3 id=\"one-operation-per-cell\">One operation per cell</h3>\n\n<p>Following the single responsibility principle, is an excellent practice when working with jupyter noteboooks.</p>\n\n<p>The single responsibility principle states that <em>every module, class, function should have responsibility over a single part of the functionality provided by the script.</em> <a href=\"https://en.wikipedia.org/wiki/Single_responsibility_principle\">wikipedia single responsibility principle</a></p>\n\n<p>This allow the user to insert other cells to explore the resulting objects and data. Very useful.</p>\n\n<p>The <a href=\"https://thoughtbot.com/blog/back-to-basics-solid\">ruby</a> community is very strong on that single responsibility principle with excellent results in terms of bug reduction, readability and maintainability of the code.</p>\n\n<h3 id=\"structure-your-code\">Structure your code</h3>\n<p>The more structure the better. By default</p>\n\n<ol>\n  <li>I always import all the libraries,</li>\n  <li>then define all the functions,</li>\n  <li>load the data (from AWS S3). (subset the datsaet in DEMO mode.)</li>\n  <li>make sure it’s as expected,</li>\n  <li>explore it (df.head(), df.describe())</li>\n  <li>and finally dive into the problem at hand</li>\n</ol>\n\n<h3 id=\"from-start-to-finish-is-your-notebook-really-running\">From start to finish, is your notebook really running?</h3>\n\n<p>The main default of Jupyter notebooks is the lost state problem where a cell depends on previous runs of other cells which may have already been modified. So just making sure everything works as intended from importing the libraries to the end results is adamant before sharing.</p>\n\n<h3 id=\"add-a-requirements-file\">Add a requirements file</h3>\n\n<p>I find this optional but that’s just my ingrained laziness. See this post for more on the subject by <a href=\"https://twitter.com/jakevdp?lang=en\">JakevanderPlas</a> on <a href=\"https://jakevdp.github.io/blog/2017/12/05/installing-python-packages-from-jupyter/\">Installing Python Packages from a Jupyter Notebook</a></p>\n\n<h3 id=\"super-meaningful-variables-names\">super meaningful variables names.</h3>\n<p>Can’t emphasize this one enough. I often spend significant amounts of time looking for synonyms that will convey precisely the true nature of an important variable to a reader, myself included.\nThe time gained by abbreviating any variable will be lost a thousand fold later on when trying to figure out what the variable stands for.</p>\n\n<h3 id=\"and-do-follow-coding-best-practice-such-as\">And do follow coding best practice such as:</h3>\n\n<ul>\n  <li>Alternate code with comments specific markdown cells and data exploration cells</li>\n  <li>Keep the code <a href=\"https://en.wikipedia.org/wiki/Don't_repeat_yourself\">DRY</a></li>\n  <li>comment and exploration cells</li>\n  <li>avoid loops and prefer array operations</li>\n  <li>comment and exploration cells</li>\n  <li>insert test cells dedicated to <a href=\"https://dbader.org/blog/python-assert-tutorial\">asserting</a> that what you have is what you expect</li>\n  <li>comment and exploration cells</li>\n  <li>etc …</li>\n</ul>\n\n<p>Comments should focus on explaining the choices made in terms of methods and parameters. Not simply rephrasing the code.</p>\n\n<h3 id=\"elsewhere\">Elsewhere:</h3>\n\n<p>Google has a longer, more precise list of excellent <a href=\"https://cloud.google.com/blog/products/ai-machine-learning/best-practices-that-can-improve-the-life-of-any-developer-using-jupyter-notebooks\">best practices when working on Google Colab</a>.</p>\n\n<p>A good paper on <a href=\"https://journals.plos.org/ploscompbiol/article?id=10.1371/journal.pcbi.1007007\">Ten simple rules for writing and sharing computational analyses in Jupyter Notebooks</a></p>\n\n<p>Please drop me a line on <a href=\"https://twitter.com/alexip\">twitter @alexip</a> if you’d like to add something or comment an item.</p>\n\n<p>Cheers!</p>",
  "pubDate": "Sat, 15 Feb 2020 14:00:00 +0000",
  "link": "https://alexisperrier.com/datascience/2020/02/15/jupyter_notebooks_sharing_best_practices.html",
  "guid": "https://alexisperrier.com/datascience/2020/02/15/jupyter_notebooks_sharing_best_practices.html",
  "category": "datascience"
}