{
  "title": "On Software Demos and Potemkin Villages",
  "link": "",
  "published": "2016-04-06T14:00:00-07:00",
  "updated": "2016-04-06T14:00:00-07:00",
  "author": {
    "name": "Wes McKinney"
  },
  "id": "tag:wesmckinney.com,2016-04-06:/blog/demos-potemkin-villages/",
  "summary": "<p><strong>Summary</strong>: It's much easier to create impressive demos than it is to create\ndependable, functionally-comprehensive production software. I discuss my\nthoughts on this topic.</p>",
  "content": "<p><strong>Summary</strong>: It's much easier to create impressive demos than it is to create\ndependable, functionally-comprehensive production software. I discuss my\nthoughts on this topic.</p>\n\n\n<h2>Post-Conference Lows</h2>\n<p>Last week was the annual California Strata-Hadoop World conference. I've now\nbeen to some variant of the Strata conference 12 times since Fall 2011.</p>\n<p>Having worked more than 8 out of the last 10 years on building production-grade\ndata analysis systems, conferences like Strata have grown emotionally draining\nfor me as the majority of the time I spend solving engineering problems that\ndon't lend themselves to especially exciting demos. So it's easy to walk away\nfrom the conference feeling pretty worthless, like everyone else is \"crushing\nit\" while I'm spending all my time dealing with Unicode bugs and GroupBy\noptimizations.</p>\n<p>Much software, both open source and proprietary, depends on the tireless\nefforts of many unsung heroes, folks like my fellow pandas team-member <a href=\"https://github.com/jreback\">Jeff\nReback</a>. A lot of the development work that's enabled pandas to become a\ndependable software component for hundreds of thousands of Python users is too\nesoteric to explain to most normal users!</p>\n<p>Of course, I recognize that the fame I've accrued in the Python community is a\nrarity (and not to be taken for granted). I wish more of it could be spread\naround to my hacker-compatriots fighting the good fights to make the community\nof users as successful as possible.</p>\n<p>It goes the other way, too. When I meet new software developers, rather than\nask them for their polished pitch about the cool things their code does, I try\nto find out what kinds of down-in-the-muck problems they had to solve to make\ntheir code a serious tool for doing real work. If that doesn't immediately\ndredge up horror stories about the most esoteric of bugs and software\nrefactoring problems, it's usually a clue that the software may not be as\nimpressive as it seems in a demo.</p>\n<h2>Demos and Potemkin Villages</h2>\n<p>In high school I learned about the <a href=\"https://en.wikipedia.org/wiki/Potemkin_village\">Potemkin villages</a> constructed during\nthe Russian Empire as a way to be impressive without doing that much work. I\nlike using that as an analogy for so-called \"demoware\", software crafted to\nshow nicely in a slide deck, conference talk, or publication.</p>\n<p>But, demoware is great! At least, it is until you sit down to do your day job\nwith it.</p>\n<p>Perhaps the most insidious trend I've seen in the industry is the Machiavellian\ntendency to build software solely for the purposes of impressing investors and\nprospective-customers. From a game theory point of view, this may be optimal\nbehavior, especially in the early days of a project where solving the \"hard\nproblems\" may have diminishing returns when you're bootstrapping a project from\nnothing.</p>\n<p>I personally have struggled with building purposeful demoware, because my\nconscience burdens me greatly when I show it to anyone. Some people have the\n\"used-car salesman\" bit in their brain that permits some freedom in the\ncommitment to integrity and intellectual honesty (\"she's got a great engine,\nhonest!\").</p>\n<p>Most of the stuff I work on is more of the \"submarine-and-periscope\" model --\nyou see a nice API on top, but there's a complex and painstakingly-constructed\nunseen machine under the hood. I prefer it that way, to be honest.</p>\n<h2>Moving forward</h2>\n<p>If I've learned anything from my time on this planet, it's that my personality\nand approach toward creating new things is unlikely to change all that much. So\nI'll keep doing what I'm doing: identifying and solving the hard problems, even\nthe ones that don't seem obvious.</p>\n<p>Luckily, I feel confident that when users venture below the surface (or look\ninside the proverbial Potemkin house), they'll be happy with what they find.</p>"
}