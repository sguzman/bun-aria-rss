{
  "id": "tag:blogger.com,1999:blog-5825758052688213474.post-6693193164123748208",
  "published": "2017-07-11T13:55:00.000-07:00",
  "updated": "2017-07-12T04:27:55.976-07:00",
  "title": "Fitting Bayesian structural time series with the bsts R package",
  "content": "by STEVEN L. SCOTT<br /><br /><i>Time series data are everywhere, but time series modeling is a fairly specialized area within statistics and data science.  This post describes the bsts software package, which makes it easy to fit some fairly sophisticated time series models with just a few lines of R code.</i><br /><br /><h2>Introduction</h2>Time series data appear in a surprising number of applications, ranging from business, to the physical and social sciences, to health, medicine, and engineering. Forecasting (e.g. next month's sales) is common in problems involving time series data, but explanatory models (e.g. finding drivers of sales) are also important. Time series data are having something of a moment in the tech blogs right now, with Facebook announcing their \"Prophet\" system for time series forecasting (Taylor and Letham 2017), and Google posting about its forecasting system in this blog (Tassone and Rohani 2017).<br /><br />This post summarizes the <span style=\"font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">bsts</span> R package, a tool for fitting Bayesian structural time series models. These are a widely useful class of time series models, known in various literatures as \"structural time series,\" \"state space models,\" \"Kalman filter models,\" and \"dynamic linear models,\" among others. Though the models need not be fit using Bayesian methods, they have a Bayesian flavor and the <span style=\"font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">bsts</span> package was built to use Bayesian posterior sampling.<br /><br />The <span style=\"font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">bsts</span> package is open source. You can download it from CRAN with the R command <span style=\"font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">install.packages(\"bsts\")</span>. It shares some features with Facebook and Google systems, but it was written with different goals in mind. The other systems were written to do \"forecasting at scale,\" a phrase that means something different in time series problems than in other corners of data science. The Google and Facebook systems focus on forecasting daily data into the distant future. The \"scale\" in question comes from having many time series to forecast, not from any particular time series being extraordinarily long. The bottleneck in both cases is the lack of analyst attention, so the systems aim to automate analysis as much as possible. The Facebook system accomplishes this using regularized regression, while the Google system works by averaging a large ensemble of forecasts. Both systems focus on daily data, and derive much of their efficiency through the careful treatment of holidays.<br /><br />There are aspects of <span style=\"font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">bsts</span> which can be similarly automated, and a specifically configured version of bsts is a powerful member of the Google ensemble. However, <span style=\"font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">bsts</span> can also be configured for specific tasks by an analyst who knows whether the goal is short term or long term forecasting, whether or not the data are likely to contain one or more seasonal effects, and whether the goal is actually to fit an explanatory model, and not primarily to do forecasting at all.<br /><br />The workhorse behind <span style=\"font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">bsts</span> is the structural time series model.  These models are briefly described in the section <b>Structural time series models</b>.  Then the software is introduced through a series of extended examples that focus on a few of the more advanced features of <span style=\"font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">bsts</span>. <b>Example 1: Nowcasting</b> includes descriptions of the local linear trend and seasonal state models, as well as spike and slab priors for regressions with large numbers of predictors.<b>  Example 2: Long term forecasting </b>describes a situation where the local level and local linear trend models would be inappropriate.  It offers a semilocal linear trend model as an alternative. <b>Example 3: Recession modeling</b> describes an model where the response variable is non-Gaussian.  The goal in Example 3 is not to predict the future, but to control for serial dependence in an explanatory model that seeks to identify relevant predictor variables.  A final section concludes with a discussion of other features in the package which we won't have space (maybe \"time\" is a better word) to explore with fully fleshed out examples. <br /><br /><h2>Structural time series models</h2>A structural time series model is defined by two equations.  The <i>observation equation</i> relates the observed data $y_t$ to a vector of latent variables $\\alpha_t$ known as the \"state.\"<br />$$  y_t = Z_t^T\\alpha_t + \\epsilon_t.$$<br />The <i>transition equation</i> describes how the latent state evolves through time.<br />$$  \\alpha_{t+1} = T_t \\alpha_t + R_t \\eta_t.$$<br />The error terms $\\epsilon_t$ and $\\eta_t$ are Gaussian and independent of everything else.  The arrays $Z_t$, $T_t$ and $R_t$ are <i>structural parameters.</i>  They may contain parameters in the statistical sense, but often they simply contain strategically placed 0's and 1's indicating which bits of $\\alpha_t$ are relevant for a particular computation.  An example will hopefully make things clearer.<br /><br />The simplest useful model is the \"local level model,\" in which the vector $\\alpha_t$ is just a scalar $\\mu_t$.  The local level model is a random walk observed in noise.<br />$$    y_t = \\mu_t + \\epsilon_t $$ $$    \\mu_{t+1} = \\mu_t + \\eta_t. $$<br />Here $\\alpha_t = \\mu_t$, and $Z_t$, $T_t$, and $R_t$ all collapse to the scalar value 1.  Similar to Bayesian hierarchical models for nested data, the local level model is a compromise between two extremes.  The compromise is determined by variances of $\\epsilon_t \\sim N(0, \\sigma^2)$ and $\\eta_t \\sim N(0,  \\tau^2)$.  If $\\tau^2 = 0$ then $\\mu_t$ is a constant, so the data are IID Gaussian noise. In that case the best estimator of $y_{t+1}$ is the mean of $y_1, \\dots, y_t$. Conversely, if $\\sigma^2 = 0$ then the data follow a random walk, in which case the best estimator of $y_{t+1}$ is $y_t$.  Notice that in one case the estimator depends on all past data (weighted equally) while in the other it depends only on the most recent data point, giving past data zero weight.  If both variances are positive then the optimal estimator of $y_{t+1}$ winds up being \"exponential smoothing,\" where past data are forgotten at an exponential rate determined by the ratio of the two variances.  Also notice that while the state in this model is Markov (i.e. it only depends on the previous state), the dependence among the observed data extends to the beginning of the series.<br /><br />Structural time series models are useful because they are flexible and modular. The analyst chooses the structure of $\\alpha_t$ based on things like whether short or long term predictions are more important, whether the data contains seasonal effects, and whether and how regressors are to be included.  Many of these models are standard, and can be fit using a variety of tools, such as the <span style=\"font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">StructTS</span> function distributed with base R or one of several R packages for fitting these models (with the <span style=\"font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">dlm</span> package (Petris 2010, Petris, Petrone, and Campagnoli 2009) deserving special mention).  The <span style=\"font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">bsts</span> package handles all the standard cases, but it also includes several useful extensions, described in the next few sections through a series of examples. Each example includes a mathematical description of the model and example <span style=\"font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">bsts</span> code showing how to work with the model using the <span style=\"font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">bsts</span> software.  To keep things short, details about prior assumptions are largely avoided.<br /><br /><br /><h2>Example 1: Nowcasting</h2>Scott and Varian (2014, 2015) used structural time series models to show how Google search data can be used to improve short term forecasts (\"nowcasts\") of economic time series.  Figure 1 shows the motivating data set from Scott and Varian (2014), which is also included with the <span style=\"font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">bsts</span> package.  The data consist of the weekly initial claims for unemployment insurance in the US, as reported by the US Federal Reserve.  Like many official statistics they are released with delay and subject to revision. At the end of the week, the economic activity determining these numbers has taken place, but the official numbers are not published until several days later.  For economic decisions based on these and similar numbers, it would help to have an early forecast of the current week's number as of the close of the week.  Thus the output of this analysis is truly a \"nowcast\" of data that has already happened rather than a \"forecast\" of data that will happen in the future.<br /><br /><div style=\"text-align: center;\"><span style=\"background-color: transparent; color: black; font-family: &quot;arial&quot;; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\"><img alt=\"initial-claims-nsa-data.png\" height=\"504\" src=\"https://lh5.googleusercontent.com/e9pS3At33PjZ4yO5JID4JEv6bzIsdEs_XhOO2b_Cv4WrKKaZ2OrCqaoRxCLFEHJD3U-zt5X7MB-x7BNukQKPFzuYsQJYQk9wgFO52YA_2yDvgsy8iKaSPhF0d7FRKkiDa6ydj-H0\" style=\"border: none; transform: rotate(0rad);\" width=\"504\" /></span></div><b>Figure 1:</b>  Weekly initial claims for unemployment in the US.<b style=\"font-weight: normal;\"><br /></b><br /><br />There are two sources of information about the current value $y_t$ in the initial claims series: past values $y_{t - \\tau}$ describing the time series behavior of the series, and contemporaneous predictors ${\\bf x}_t$ from a data source which is correlated with $y_t$, but which is available without the delay exhibited by $y_t$.  The time series structure shows an obvious trend (in which the financial and housing crises in 2008 - 2009 are apparent) as well as a strong annual seasonal pattern.  The external data source explored by Scott and Varian was search data from Google trends with search queries such as \"how to file for unemployment\" having obvious relevance. <br /><h3>State components</h3><div>Scott and Varian modeled the data in Figure 1 using a structural time series with three state components: a trend $\\mu_t$, a seasonal pattern $\\tau_t$ and a regression component $\\beta^T{\\bf x}_t$.  The model is<br />$$      y_t = \\mu_t + \\tau_t + \\beta^T{\\bf x}_t + \\epsilon_t $$ $$    \\mu_{t+1} = \\mu_t + \\delta_t + \\eta_{0t} $$ $$    \\delta_{t+1} = \\delta_t + \\eta_{1t} $$ $$    \\tau_{t+1} = -\\sum_{s = 1}^{S-1}\\tau_{t} + \\eta_{2t}.$$ <br />The trend component looks similar to the local level model above, but it has an extra term $\\delta_t$.  Notice that $\\delta_t$ is the amount of extra $\\mu$ you can expect as $t\\rightarrow t+1$, so it can be interpreted as the slope of the local linear trend.  Slopes normally multiply some $x$ variable, but in this case $x = \\Delta t$, which omitted from the equation because it is always 1. The slope evolves according to a random walk, which makes the trend an <i>integrated</i> random walk with an extra drift term.  The local linear trend is a better model than the local level model if you think the time series is trending in a particular direction and you want future forecasts to reflect a continued increase (or decrease) seen in recent observations.  Whereas the local level model bases forecasts around the average value of recent observations, the local linear trend model adds in recent upward or downward slopes as well.  As with most statistical models, the extra flexibility comes at the price of extra volatility.<br /><br />The best way to understand the seasonal component $\\tau_t$ is in terms of a regression with seasonal dummy variables.  Suppose you had quarterly data, so that $S = 4$.  You might include the annual seasonal cycle using 3 dummy variables, with one left out as a baseline.  Alternatively, you could include all four dummy variables but constrain their coefficients to sum to zero.  The seasonal state model takes the latter approach, but the constraint is that the $S$ most recent seasonal effects must sum to zero in expectation.  This allows the seasonal pattern to slowly evolve.  Scott and Varian described the annual cycle in the weekly initial claims data using a seasonal state component with $S = 52$.  Of course weeks don't neatly divide years, but given the small number of years for which Google data are available the occasional one-period seasonal discontinuity was deemed unimportant.<br /><br />Let's ignore the regression component for now and fit a <span style=\"font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">bsts</span> model with just the trend and seasonal components.<b style=\"font-weight: normal;\"><br /></b><br /><br /><span style=\"background-color: transparent; color: black; font-family: &quot;courier new&quot;; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">library(bsts)     </span><span style=\"color: black; font-family: &quot;courier new&quot;; font-size: 11pt; vertical-align: baseline; white-space: pre-wrap;\"># load the bsts package</span><br /><span style=\"color: black; font-family: &quot;courier new&quot;; font-size: 11pt; vertical-align: baseline; white-space: pre-wrap;\">data(iclaims)     </span><span style=\"color: black; font-family: &quot;courier new&quot;; font-size: 11pt; vertical-align: baseline; white-space: pre-wrap;\"># bring the initial.claims data into scope</span><br /><span style=\"color: black; font-family: &quot;courier new&quot;; font-size: 11pt; vertical-align: baseline; white-space: pre-wrap;\"><br /></span>  <span style=\"background-color: transparent; color: black; font-family: &quot;courier new&quot;; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">ss &lt;- AddLocalLinearTrend(list(), initial.claims$iclaimsNSA)</span><br /><span style=\"background-color: transparent; color: black; font-family: &quot;courier new&quot;; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">ss &lt;- AddSeasonal(ss, initial.claims$iclaimsNSA, nseasons = 52)</span><br /><span style=\"background-color: transparent; color: black; font-family: &quot;courier new&quot;; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">model1 &lt;- bsts(initial.claims$iclaimsNSA,</span><br /><span style=\"background-color: transparent; color: black; font-style: normal; font-weight: 400; text-decoration: none; vertical-align: baseline;\"></span><span style=\"background-color: transparent; color: black; font-family: &quot;courier new&quot;; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">               state.specification = ss,</span><br /><span style=\"background-color: transparent; color: black; font-family: &quot;courier new&quot;; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">               niter = 1000)</span><b style=\"font-weight: normal;\"><br /></b><br /><br />The first thing to do when fitting a <span style=\"font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">bsts</span> model is to specify the contents of the latent state vector $\\alpha_t$.  The <span style=\"font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">bsts</span> package offers a library of state models, which are included by adding them to a state specification (which is just a list with a particular format).  The call to <span style=\"font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">AddLocalLinearTrend</span> above adds a local linear trend state component to an empty state specification (the <span style=\"font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">list()</span> in its first argument).  The call to <span style=\"font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">AddSeasonal</span> adds a seasonal state component with 52 seasons to the state specification created on the previous line.  The state vector $\\alpha_t$ is formed by concatenating the state from each state model.  Similarly, the vector $Z_t$ is formed by concatenating the $Z$ vectors from the two state models, while the matrices $T_t$ and $R_t$ are combined in block-diagonal fashion.<br /><br />The state specification is passed as an argument to <span style=\"font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">bsts</span>, along with the data and the desired number of MCMC iterations.  The model is fit using an MCMC algorithm, which in this example takes about 20 seconds to produce 1000 MCMC iterations.  The returned object is a list (with class attribute \"<span style=\"font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">bsts</span>\").  You can see its contents by typing <span style=\"font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">names(model1)</span>.  The first few elements contain the MCMC draws of the model parameters.  Most of the other elements are data structures needed by various S3 methods (<span style=\"font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">plot</span><span style=\"font-family: inherit;\">,</span><span style=\"font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\"> print</span><span style=\"font-family: inherit;\">,</span><span style=\"font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\"> predict</span>, etc.) that can be used with the returned object.  MCMC output is stored in vectors (for scalar parameters) or arrays (for vector or matrix parameters) where the first index in the array corresponds to MCMC iteration number, and the remaining indices correspond to dimension of the deviate being drawn.<br /><br />Most users won't need to look inside the returned <span style=\"font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">bsts</span> object because standard tasks like plotting and prediction are available through familiar S3 methods. For example, there are several plot methods available.</div><div><br /><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: transparent; color: black; font-family: &quot;courier new&quot;; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">plot(model)</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: transparent; color: black; font-family: &quot;courier new&quot;; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">plot(model1, \"components\") &nbsp;# plot(model1, \"comp\") works too!</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: transparent; color: black; font-family: &quot;courier new&quot;; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">plot(model1, \"help\")</span></div><b style=\"font-weight: normal;\"><br /></b><br /><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt; text-align: center;\"><span style=\"background-color: transparent; color: black; font-family: &quot;arial&quot;; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\"><img alt=\"iclaims-bsm-model.png\" height=\"360\" src=\"https://lh6.googleusercontent.com/ak8QR1ohLsUdl9ts9-gYCwp_J4N1wEbdTT4Zh-liFtoAsOdvAis9Cj9JJJGNO5Ldc1iKQzAfRu-u0PKkrxiNAByMhp60Awvjhj2xE_TQDKXib71qpH5A1vfmO82-fzwrdNiu0czJ\" style=\"border: none; transform: rotate(0rad);\" width=\"360\" /></span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt; text-align: center;\"><span style=\"background-color: transparent; color: black; font-family: &quot;arial&quot;; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\"><img alt=\"iclaims-bsm-components.png\" height=\"312\" src=\"https://lh4.googleusercontent.com/hrM-6wrKLfChwMol9sxHOqfMMk2lyOaCgwoFIc6XzV63rTIFVGEItXed2wbeEYvwzMNZ1T3RQgNv4eEs_BekAjq1dvYQGqNH8wLA9ybOz9UUS_mxKk01kvyz--UU2C3z7G-ABzad\" style=\"border: none; transform: rotate(0rad);\" width=\"624\" /></span></div><br /><b>Figure 2:</b> (top) Posterior distribution of model state.  Blue circles are actual data points. (bottom) Individual state components.  The plot looks fuzzy because it is showing the marginal posterior distribution at each time point.<br /><br /><br />The default <span style=\"font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">plot</span> method plots the posterior distribution of the conditional mean $Z_t^T\\alpha_t$ given the full data ${\\bf y} = y_1, \\dots, y_T.$ Other plot methods can be accessed by passing a string to the plot function.  For example, to see the contributions of the individual state components, pass the string <span style=\"font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">\"components\"</span> as a second argument, as shown above. Figure 2 shows the output of these two plotting functions. You can get a list of all available plots by passing the string <span style=\"font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">\"<span style=\"font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">help</span>\"</span> as the second argument.<br /><br />To predict future values there is a <span style=\"font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">predict</span> method.  For example, to predict the next 12 time points you would use the following commands.<br /><br /><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: transparent; color: black; font-family: &quot;courier new&quot;; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">pred1 &lt;- predict(model1, horizon = 12)</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: transparent; color: black; font-family: &quot;courier new&quot;; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">plot(pred1, plot.original = 156)</span></div><b style=\"font-weight: normal;\"><br /></b><br />The output of <span style=\"font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">predict</span> is an object of class <span style=\"font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">bsts.prediction</span>, which has its own <span style=\"font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">plot</span> method.  The <span style=\"font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">plot.original = 156</span> argument says to plot the prediction along with the last 156 time points (3 years) of the original series.  The results are shown in Figure 3.<br /><br /><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><div style=\"text-align: center;\"><span style=\"background-color: transparent; color: black; font-family: &quot;arial&quot;; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\"><img alt=\"iclaims-bsm-prediction.png\" height=\"312\" src=\"https://lh6.googleusercontent.com/Zo0mdpiftu-T7Rl8YOUTXhnvsiWF2363YUJWFKyi0RlE46Eobk5AGHKh3OUT58RSkTnO-vIWCVU0Ih0TU3IXhi3PlpaIuGZCaFXPsgRrGRwmSdhRlPtGI3beeUzavXe-onamcUR1\" style=\"border: none; transform: rotate(0rad);\" width=\"624\" /></span></div></div><b>  Figure 3:</b> Posterior predictive distribution for the next 12 weeks of initial claims.</div><div><br /><h3>Regression with spike and slab  priors</h3>Now let's add a regression component to the model described above, so that we can use Google search data to improve the forecast.  The <span style=\"font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">bsts</span> package only includes 10 search terms with the initial claims data set, to keep the package size small, but Scott and Varian (2014) considered examples with several hundred predictor variables.  When faced with large numbers of potential predictors it is important to have a prior distribution that induces sparsity. A spike and slab prior is a natural way to express a prior belief that most of the regression coefficients are exactly zero.<br /><br />A spike and slab prior is a prior on a set of regression coefficients that assigns each coefficient a positive probability of being zero.  Upon observing data, Bayes' theorem updates the inclusion probability of each coefficient. When sampling from the posterior distribution of a regression model under a spike and slab prior, many of the simulated regression coefficients will be exactly zero.  This is unlike the \"lasso\" prior (the Laplace, or double-exponential distribution), which yields MAP estimates at zero but where posterior simulations will be all nonzero.  You can read about the mathematical details of spike and slab priors in Scott and Varian (2014).<br /><br />When fitting <span style=\"font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">bsts</span> models that contain a regression component, extra arguments captured by <span style=\"font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">...</span> are passed to the <span style=\"font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">SpikeSlabPrior</span> function from the <span style=\"font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">BoomSpikeSlab</span> package.  This allows the analyst to adjust the default prior settings for the regression component from the <span style=\"font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">bsts</span> function call.  To include a regression component in a <span style=\"font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">bsts</span> model, simply pass a model formula as the first argument.<b style=\"font-weight: normal;\"><br /></b><br /><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: transparent; color: black; font-family: &quot;courier new&quot;; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\"># Fit a bsts model with expected model size 1, the default.</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: transparent; color: black; font-family: &quot;courier new&quot;; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">model2 &lt;- bsts(iclaimsNSA ~ .,</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: transparent; color: black; font-family: &quot;courier new&quot;; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state.specification = ss,</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: transparent; color: black; font-family: &quot;courier new&quot;; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;niter = 1000,</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: transparent; color: black; font-family: &quot;courier new&quot;; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;data = initial.claims)</span></div><b style=\"font-weight: normal;\"><br /></b><br /><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: transparent; color: black; font-family: &quot;courier new&quot;; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\"># Fit a bsts model with expected model size 5, to include more coefficients.</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: transparent; color: black; font-family: &quot;courier new&quot;; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">model3 &lt;- bsts(iclaimsNSA ~ .,</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: transparent; color: black; font-family: &quot;courier new&quot;; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state.specification = ss,</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: transparent; color: black; font-family: &quot;courier new&quot;; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;niter = 1000,</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: transparent; color: black; font-family: &quot;courier new&quot;; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;data = initial.claims,</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: transparent; color: black; font-family: &quot;courier new&quot;; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;expected.model.size = 5) &nbsp;# Passed to SpikeSlabPrior.</span></div><b style=\"font-weight: normal;\"><br /></b><br />To examine the output you can use the same plotting functions as before.  For example, to see the contribution of each state component you can type <span style=\"font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">plot(model2, \"comp\")</span>, producing the output in Figure 4.  The regression component is explaining a substantial amount of variation in the initial claims series.<b style=\"font-weight: normal;\"><br /></b><br /><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><div style=\"text-align: center;\"><span style=\"background-color: transparent; color: black; font-family: &quot;arial&quot;; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\"><img alt=\"iclaims-reg-ems1-components.png\" height=\"312\" src=\"https://lh5.googleusercontent.com/iphojjZ4JOTPdLRPBxNzGw69-syYSqemNwvzW3nLRYNrj-YWSXZGY4TdbVO7wi5akODJhqldVBKBsEAzZ0fO3T8R_cbvhKsO_uxYTX5G6_21CD2giEeWow4oeOFebxT5rYDc3pUF\" style=\"border: none; transform: rotate(0rad);\" width=\"624\" /></span></div></div><b>Figure 4:</b> Contribution of each state component to the initial claims data, assuming a regression component with default prior.  Compare to Figure 2. <br /><br /><br />There are also plotting functions that you can use to visualize the regression coefficients.  The following commands<br /><br /><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: transparent; color: black; font-family: &quot;courier new&quot;; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">plot(model2, \"coef\")</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: transparent; color: black; font-family: &quot;courier new&quot;; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">plot(model3, \"coef\")</span></div><b style=\"font-weight: normal;\"><br /></b>produce the summary plots in Figure 5.  The search term \"unemployment office\" shows up with high probability in both models. Increasing the expected model size from 1 (the default) to 5 allows other variables into the model, though \"Idaho unemployment\" is the only one that shows up with high probability.<b style=\"font-weight: normal;\"><br /></b><br /><div dir=\"ltr\" style=\"margin-left: 0pt;\"><table style=\"border-collapse: collapse; border: none; width: 468pt;\"><colgroup><col width=\"*\"></col><col width=\"*\"></col></colgroup><tbody><tr style=\"height: 0pt;\"><td style=\"padding: 5pt 5pt 5pt 5pt; vertical-align: top;\"><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt; text-align: center;\"><span style=\"background-color: transparent; color: black; font-family: &quot;arial&quot;; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\"><img alt=\"iclaims-reg-ems1-coef.png\" height=\"297\" src=\"https://lh6.googleusercontent.com/1qrG5JFbvHvblYkU1ztGwlCOOSMR92H-csfVQV4XgTnlIhkTMsNn3gf9BhroBu-y6jcGz2OUavq1ntToTZzls7SV_DOvgdn5Xlwfzp7NbEIaHOs8MQwIcTiv4fYFIzDSMZWvQheD\" style=\"border: none; transform: rotate(0rad);\" width=\"298\" /></span></div></td><td style=\"padding: 5pt 5pt 5pt 5pt; vertical-align: top;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt; text-align: center;\"><span style=\"background-color: transparent; color: black; font-family: &quot;arial&quot;; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\"><img alt=\"iclaims-reg-ems5-coef.png\" height=\"297\" src=\"https://lh3.googleusercontent.com/krdpiG0EZUnccg9SlpD2yR4N4CjaGjWlN0KHeya7lRxlWozUi2x70dVEGqUzzwj_c0aUu57HsAwdo7UPHnbZIqapxbDON8GnXPcPdGHcqwXJRjWQ6I7lS3fj5vcbqCxCSvAivolZ\" style=\"border: none; transform: rotate(0rad);\" width=\"298\" /></span></div></td></tr><tr style=\"height: 0pt;\"><td style=\"padding: 5pt 5pt 5pt 5pt; vertical-align: top;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt; text-align: center;\"><span style=\"background-color: transparent; color: black; font-family: &quot;arial&quot;; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">(a)</span></div></td><td style=\"padding: 5pt 5pt 5pt 5pt; vertical-align: top;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt; text-align: center;\"><span style=\"background-color: transparent; color: black; font-family: &quot;arial&quot;; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">(b)</span></div></td></tr></tbody></table></div><b style=\"font-weight: normal;\"><br /></b><br /><b>Figure 5:</b> Posterior inclusion probabilities for predictors in the \"initial claims\" nowcasting example assuming an expected model size of (a) 1 and (b) 5.</div><div><br /></div><div><br /></div><h3>Model diagnostics: Did the Google data help?</h3>As part of the model fitting process, the algorithm generates the one-step-ahead prediction errors $y_t - E(y_t | Y_{t-1}, \\theta)$, where $Y_{t-1} = y_1, \\dots, y_{t-1}$, and the vector of model parameters $\\theta$ is fixed at its current value in the MCMC algorithm.  The one-step-ahead prediction errors can be obtained from the <span style=\"font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">bsts</span> model by calling <span style=\"font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">bsts.prediction.errors(model1)</span>.<br /><div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><br />The one step prediction errors are a useful diagnostic for comparing several <span style=\"font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">bsts</span> models that have been fit to the same data.  They are used to implement the function <span style=\"font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">CompareBstsModels</span>, which is called as shown below.<br /><br /><span style=\"font-family: &quot;courier new&quot;; font-size: 11pt; white-space: pre-wrap;\">CompareBstsModels(list(\"Model 1\" = model1,</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: transparent; color: black; font-family: &quot;courier new&quot;; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"Model 2\" = model2,</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: transparent; color: black; font-family: &quot;courier new&quot;; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"Model 3\" = model3),</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: transparent; color: black; font-family: &quot;courier new&quot;; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;colors = c(\"black\", \"red\", \"blue\"))</span></div><b style=\"font-weight: normal;\"><br /></b>The result of the call is the plot shown in Figure 6.  The bottom panel shows the original series.  The top panel shows the cumulative total of the mean absolute one step prediction errors for each model.  The final time point in the top plot is proportional to the mean absolute prediction error for each model, but plotting the errors as a cumulative total lets you see particular spots where each model encountered trouble, rather than just giving a single number describing each model’s predictive accuracy. Figure 6 shows that the Google data help explain the large spike near 2009, where model 1 accumulates errors at an accelerated rate, but models 2 and 3 continue accumulating errors at about the same rate they had been before.  The fact that the lines for models 2 and 3 overlap in Figure 6 means that the additional predictors allowed by the relaxed prior used to fit model 3 do not yield additional predictive accuracy.<br /><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><div style=\"text-align: center;\"><span style=\"background-color: transparent; color: black; font-family: &quot;arial&quot;; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\"><img alt=\"iclaims-compare-models.png\" height=\"437\" src=\"https://lh6.googleusercontent.com/w78qt2-5Yu7zJaHdJ6JiTq9GdfvxiKOLY7xHScy6-AJBeY3TcY8xHeeIGRo415ij34pFM9ZuBi2xRO22eH7I8MyhV8Abwbo5b2hjjDryIhnrhhsINtN4kT7bxi4_XVYL3Yb_rX4K\" style=\"border: none; transform: rotate(0rad);\" width=\"624\" /></span></div></div><b>Figure 6:</b> Comparing models 1 - 3 in terms of cumulative prediction error, for the nowcasting&nbsp;application.<br /><br /><br /><h2>Example 2: Long term forecasting</h2>A common question about <span style=\"font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">bsts</span> is \"which trend model should I use?\" To answer that question it helps to know a bit about the different models that the <span style=\"font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">bsts</span> software package provides, and what each model implies.<br />In the local level model the state evolves according to a random walk:<br /><br />$$ \\mu_{t+1} = \\mu_t + \\eta_t.$$<br />If you place your eye at time 0 and ask what happens at time $t$, you find that $\\mu_t \\sim N(\\mu_0, t \\sigma^2_\\eta)$.  The variance continues to grow with $t$, all the way to $t = \\infty$.  The local linear trend is even more volatile. When forecasting far into the future the flexibility provided by these models becomes a double edged sword, as local flexibility in the near term translates into extreme variance in the long term.<br /><br />An alternative is to replace the random walk with a stationary AR process.  For example<br /><br />$$ \\mu_{t+1} = \\rho \\mu_{t} + \\eta_t,$$<br />with $\\eta_t \\sim N(0, \\sigma^2_\\eta)$ and $|\\rho| &lt; 1$.  This model has stationary distribution<br />$$\\mu_\\infty \\sim N\\left(0, \\frac{\\sigma^2_\\eta}{1 - \\rho^2}\\right),$$<br />which means that uncertainty grows to a finite asymptote, rather than infinity, in the distant future.  Bsts offers autoregressive state models through the functions <span style=\"font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">AddAr</span>, when you want to specify a certain number of lags, and <span style=\"font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">AddAutoAr</span> when you want the software to choose the important lags for you. <br /><br />A hybrid model modifies the local linear trend model by replacing the random walk on the slope with a stationary AR(1) process, while keeping the random walk for the level of the process.  The <span style=\"font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">bsts</span> package refers to this is the \"semilocal linear trend\" model.<br />$$    \\mu_{t+1} = \\mu_t + \\delta_t + \\eta_{0t} $$ $$    \\delta_{t+1} = D + \\rho (\\delta_t - D) + \\eta_{1t} $$ The $D$ parameter is the long run slope of the trend component, to which $\\delta_t$ will eventually revert.  However $\\delta_t$ can have short term autoregressive deviations from the long term trend, with memory determined by $\\rho$.  Values of $\\rho$ close to 1 will lead to long deviations from $D$.  To see the impact this can have on long term forecasts, consider the time series of daily closing values for the S&amp;P 500 stock market index over the last 5 years, shown in Figure 7. <br /><br /><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><div style=\"text-align: center;\"><span style=\"background-color: transparent; color: black; font-family: &quot;arial&quot;; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\"><img alt=\"sp500-daily-data.png\" height=\"429\" src=\"https://lh6.googleusercontent.com/6pf2Y7KZ3BsN-XnEPHaBseRalFTaASjfg-zeWzF5kijZbXDpn_NnruLbnMK4e9MxJ3jqKlzy2ea0-OFcW726xU4LWCKfxSUJ_3pXalnO0k-nhQvy45GGPHi7I0htQil4zJDIqoii\" style=\"border: none; transform: rotate(0rad);\" width=\"429\" /></span></div></div><b>Figure 7:</b> Daily closing values for the S&amp;P 500 stock market index.<b style=\"font-weight: normal;\"><br /></b><br /><br /><br />Consider two forecasts of the daily values of this series for the next 360 days.  The first assumes the local linear trend model.  The second assumes the semilocal linear trend.<br /><br /><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: transparent; color: black; font-family: &quot;courier new&quot;; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">ss1 &lt;- AddLocalLinearTrend(list(), sp500)</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: transparent; color: black; font-family: &quot;courier new&quot;; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">model1 &lt;- bsts(sp500, state.specification = ss1, niter = 1000)</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: transparent; color: black; font-family: &quot;courier new&quot;; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">pred1 &lt;- predict(model1, horizon = 360)</span></div><b style=\"font-weight: normal;\"><br /></b><br /><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: transparent; color: black; font-family: &quot;courier new&quot;; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">ss2 &lt;- AddSemilocalLinearTrend(list(), sp500)</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: transparent; color: black; font-family: &quot;courier new&quot;; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">model2 &lt;- bsts(sp500, state.specification = ss2, niter = 1000)</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: transparent; color: black; font-family: &quot;courier new&quot;; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">pred2 &lt;- predict(model2, horizon = 360)</span></div><b style=\"font-weight: normal;\"><br /></b><br /><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: transparent; color: black; font-family: &quot;courier new&quot;; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">plot(pred2, plot.original = 360, ylim = range(pred1))</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: transparent; color: black; font-family: &quot;courier new&quot;; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">plot(pred1, plot.original = 360, ylim = range(pred1))</span></div><b style=\"font-weight: normal;\"><br /></b><br />The resulting forecasts are plotted in Figure 8.  The forecast expectations from the two models are quite similar, but the forecast errors from the local linear trend model are implausibly wide, including a small but nonzero probability that the S&amp;P 500 index could close near zero in the next 360 days.  The error bars from the semilocal linear trend model are far more plausible, and more closely match the uncertainty observed over the life of the series thus far.<b style=\"font-weight: normal;\"><br /></b><br /><div dir=\"ltr\" style=\"margin-left: 0pt;\"><table style=\"border-collapse: collapse; border: none; width: 468pt;\"><colgroup><col width=\"*\"></col><col width=\"*\"></col></colgroup><tbody><tr style=\"height: 0pt;\"><td style=\"padding: 5pt 5pt 5pt 5pt; vertical-align: top;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: transparent; color: black; font-family: &quot;arial&quot;; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\"><img alt=\"sp500-semilocal-linear-prediction.png\" height=\"297\" src=\"https://lh4.googleusercontent.com/bRXfuqLEonbjH3mYqphjswBj_9S1rrjbpHdNEci2c9IL0v5cK-J5z8MimP_owe7zYAKD95IDktar58J6ZMazc1AwZDDg4tGh01vWQIAJViUbmy2fB_0uSZTQmhAsMTtF2gXz3BZP\" style=\"-webkit-transform: rotate(0.00rad); border: none; transform: rotate(0.00rad);\" width=\"298\" /></span></div></td><td style=\"padding: 5pt 5pt 5pt 5pt; vertical-align: top;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: transparent; color: black; font-family: &quot;arial&quot;; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\"><img alt=\"sp500-local-linear-prediction.png\" height=\"297\" src=\"https://lh4.googleusercontent.com/bWZ70ULbepNj3mO70bri0vVuoTTAXWw682QkwWpgzFu81u3YEt2XmgH07V5o_8n3NYv1HVKMB0qDHn_TlBpleXDnPcly0VjHc4af2AYTUS87vR-ZHIkLU3vd6daC_DKH2l_npsqH\" style=\"-webkit-transform: rotate(0.00rad); border: none; transform: rotate(0.00rad);\" width=\"298\" /></span></div></td></tr><tr style=\"height: 0pt;\"><td style=\"padding: 5pt 5pt 5pt 5pt; vertical-align: top;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt; text-align: center;\"><span style=\"background-color: transparent; color: black; font-family: &quot;arial&quot;; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">(a)</span></div></td><td style=\"padding: 5pt 5pt 5pt 5pt; vertical-align: top;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt; text-align: center;\"><span style=\"background-color: transparent; color: black; font-family: &quot;arial&quot;; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">(b)</span></div></td></tr></tbody></table></div><b style=\"font-weight: normal;\"><br /></b><br /><b>Figure 8:</b> Long term forecasts of the S&amp;P 500 closing values under the (a) local linear trend and (b) semilocal linear trend state models.</div><div><br /><br /><h2> Example 3: Recession modeling using non-Gaussian data</h2>Although we have largely skipped details about how the <span style=\"font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">bsts</span> software fits models, the Gaussian error assumptions in the observation and transition equations are important for the model fitting process.  Part of that process involves running data through the Kalman filter, which assumes Gaussian errors in both the state and transition equations.  In many settings where Gaussian errors are obviously inappropriate, such as for binary or small count data, one can introduce latent variables that give the model a conditionally Gaussian representation.  Well known \"data augmentation\" methods exist for probit regression (Albert and Chib, 1993) and models with student T errors (Gelman et al. 2014).  Somewhat more complex methods exist for logistic regression (Frühwirth-Schnatter and Frühwirth 2005, Holmes and Held 2006, Gramacy and Polson 2012) and Poisson regression (Frühwirth-Schnatter et al 2008). Additional methods exist for quantile regression (Benoit and Van Den Poel 2012), support vector machines (Polson and Scott 2011), and multinomial logit regression (Frühwirth-Schnatter and Frühwirth 2010). These are not currently provided by the <span style=\"font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">bsts</span> package, but they might be added in the future.<br /><br />To see how non-Gaussian errors can be useful, consider the analysis done by Berge, Sinha, and Smolyansky (2016) who used Bayesian model averaging (BMA) to investigate which of several economic indicators would best predict the presence or absence of a recession.  We will focus on their nowcasting example, which models the probability of a recession at the same time point as the predictor variables.  Berge, Sinha, and Smolyansky (2016) also analyzed the data with the predictors at several lags.<b style=\"font-weight: normal;\"><br /></b><br /><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><div style=\"text-align: center;\"><span style=\"background-color: transparent; color: black; font-family: &quot;arial&quot;; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\"><img alt=\"gdp-training-data.png\" height=\"360\" src=\"https://lh5.googleusercontent.com/qeo1_lYUUBOgIG7tCWVZGDnjdC0NujPfCOyoGAdwWyQrmKqI82GMFvLij-B0biqrh1xM3POzCvtBv2tRt7a4IegHcdbs_QeaAg8yWWt9JHB-ElDtlCILi34-k3pnvdfxoAXG8eMw\" style=\"border: none; transform: rotate(0rad);\" width=\"360\" /></span></div></div><b>Figure 9:</b> US recession indicators, as determined by NBER.<b style=\"font-weight: normal;\"><br /></b><br /><b style=\"font-weight: normal;\"><br /></b><br />The model used in Berge, Sinha, and Smolyansky (2016) was a probit regression, with Bayesian model averaging used to determine which predictors should be included.  The response variable was the the presence or absence of a recession (as <a href=\"http://www.nber.org/cycles.html\" target=\"_blank\">determined by NBER</a>), plotted in Figure 9. The BMA done by Berge, Sinha, and Smolyansky (2016) is essentially the same as fitting a logistic regression under a spike-and-slab prior with the prior inclusion probability of each predictor set to $1/2$.  That analysis can be run using the <span style=\"font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">BoomSpikeSlab</span> R package (Scott 2010), which is similar to <span style=\"font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">bsts</span>, but with only a regression component and no time series.  The marginal posterior inclusion probabilities produced by <span style=\"font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">BoomSpikeSlab</span> are shown in Figure 10(a).  They largely replicate the findings of Berge, Sinha, and Smolyansky (2016), up to minor Monte Carlo error.<br /><br />The logistic regression model is highly predictive, but it ignores serial dependence in the data.  To capture serial dependence, consider the following dynamic logistic regression model with a local level trend model.<br />$$    \\text{logit}(p_t) = \\mu_t + \\beta^T{\\bf x}_t $$ $$    \\mu_{t+1} = \\mu_t + \\eta_t $$<br />Here $p_t$ is the probability of a recession at time $t$, and ${\\bf x}_t$ is the set of economic indicators used by Berge, Sinha, and Smolyansky (2016) in their analysis.  To fit this model, we can issue the commands shown below.<b style=\"font-weight: normal;\"><br /></b><br /><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: transparent; color: black; font-family: &quot;courier new&quot;; font-size: 9pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">## Because 'y' is 0/1 and the state is on the logit scale the default prior</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: transparent; color: black; font-family: &quot;courier new&quot;; font-size: 9pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">## assumed by AddLocalLevel won't work here, so we need to explicitly set the</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: transparent; color: black; font-family: &quot;courier new&quot;; font-size: 9pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">## priors for the variance of the state innovation errors and the initial value</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: transparent; color: black; font-family: &quot;courier new&quot;; font-size: 9pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">## of the state at time 0. &nbsp;The 'SdPrior' and 'NormalPrior' functions used to</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: transparent; color: black; font-family: &quot;courier new&quot;; font-size: 9pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">## define these priors are part of the Boom package. &nbsp;See R help for</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: transparent; color: black; font-family: &quot;courier new&quot;; font-size: 9pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">## documentation. &nbsp;Note the truncated support for the standard deviation of the</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: transparent; color: black; font-family: &quot;courier new&quot;; font-size: 9pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">## random walk increments in the local level model.</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: transparent; color: black; font-family: &quot;courier new&quot;; font-size: 9pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">ss &lt;- AddLocalLevel(list(),</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: transparent; color: black; font-family: &quot;courier new&quot;; font-size: 9pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sigma.prior = SdPrior(sigma.guess = .1,</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: transparent; color: black; font-family: &quot;courier new&quot;; font-size: 9pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sample.size = 1,</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: transparent; color: black; font-family: &quot;courier new&quot;; font-size: 9pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;upper.limit = 1),</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: transparent; color: black; font-family: &quot;courier new&quot;; font-size: 9pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;initial.state.prior = NormalPrior(0, 5))</span></div><b style=\"font-weight: normal;\"><br /></b><br /><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: transparent; color: black; font-family: &quot;courier new&quot;; font-size: 9pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">## Tell bsts that the observation equation should be a logistic regression by</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: transparent; color: black; font-family: &quot;courier new&quot;; font-size: 9pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">## passing the 'family = \"logit\"' argument.</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: transparent; color: black; font-family: &quot;courier new&quot;; font-size: 9pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">ts.model &lt;- bsts(nber ~ ., ss, data = gdp, niter = 20000,a</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: transparent; color: black; font-family: &quot;courier new&quot;; font-size: 9pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;family = \"logit\", expected.model.size = 10)</span></div><b style=\"font-weight: normal;\"><br /></b><br />The marginal posterior inclusion probabilities under this model are shown in Figure 10(b).  The top predictor is the same in both models, but posterior inclusion probabilities for the remaining predictors are smaller than in Figure 10(a).  To understand why, consider the distribution of $\\mu_t$ shown in Figure 11. The figure shows $\\mu_t$ moving to very large values during a recession, and to very small values outside of a recession.  This effect captures the strong serial dependence in the recession data.  Recessions are rare, but once they occur they tend to persist.  Assuming independent time points is therefore unrealistic, and it substantially overstates the amount of information available to identify logistic regression coefficients.  The spike and slab priors that <span style=\"font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">bsts</span> uses to identify predictors naturally produce sparser models in the face of less information, which is why Figure 10(b) shows fewer included coefficients.<b style=\"font-weight: normal;\"><br /></b><br /><div dir=\"ltr\" style=\"margin-left: 0pt;\"><table style=\"border-collapse: collapse; border: none; width: 468pt;\"><colgroup><col width=\"*\"></col><col width=\"*\"></col></colgroup><tbody><tr style=\"height: 0pt;\"><td style=\"padding: 5pt 5pt 5pt 5pt; vertical-align: top;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt; text-align: center;\"><span style=\"background-color: transparent; color: black; font-family: &quot;arial&quot;; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\"><img alt=\"nber-plain-regression-coefficients.png\" height=\"297\" src=\"https://lh6.googleusercontent.com/NZgat7vf_IkPSur9xhBblId_VWtgF7p2Y2pgd5R2EsUVGWPigTE9Ni8PjwwB-d6TqS0EjDfbmV6VjN20OIvaO-i6clgFsIAaFYr1R6u1Zg0lbSXK3owZCNZqjZovbJclTUZUzdkY\" style=\"-webkit-transform: rotate(0.00rad); border: none; transform: rotate(0.00rad);\" width=\"298\" /></span></div></td><td style=\"padding: 5pt 5pt 5pt 5pt; vertical-align: top;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt; text-align: center;\"><span style=\"background-color: transparent; color: black; font-family: &quot;arial&quot;; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\"><img alt=\"nber-ts-regression-coefficients.png\" height=\"297\" src=\"https://lh4.googleusercontent.com/ebS6FTc2-9rgLZAhYIXJVKPXHU7EN3eday67IyFfHXfrssxYQagwXWNGMDEOnX-a7C2VczXqR1I9GI8yRbAwSTGKjbp3CMZFcnCDAflFh6eNbOzUk60PFCW297wn-hVzoteQS6QJ\" style=\"border: none; transform: rotate(0rad);\" width=\"298\" /></span></div></td></tr><tr style=\"height: 0pt;\"><td style=\"padding: 5pt 5pt 5pt 5pt; vertical-align: top;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt; text-align: center;\"><span style=\"background-color: transparent; color: black; font-family: &quot;arial&quot;; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">(a)</span></div></td><td style=\"padding: 5pt 5pt 5pt 5pt; vertical-align: top;\"><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt; text-align: center;\"><span style=\"background-color: transparent; color: black; font-family: &quot;arial&quot;; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">(b)</span></div></td></tr></tbody></table></div><b style=\"font-weight: normal;\"><br /></b><br /><b>Figure 10:</b> Regression coefficients for the (a) plain logistic regression model and (b) time series logistic regression model under equivalent spike and slab priors.<b style=\"font-weight: normal;\"><br /></b><br /><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><div style=\"text-align: center;\"><span style=\"background-color: transparent; color: black; font-family: &quot;arial&quot;; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\"><img alt=\"nber-bsts-logit.png\" height=\"360\" src=\"https://lh6.googleusercontent.com/sqp4YXyWER4Dc1Z0Pv5a691sf1eFe9yqcjm9kpVWJrl-bTQMMvE95Puckx0Qljrq6GkovUeB_3QJ2fKLenGTw7l3Ig60BsFgJBX0p-1MjmrUDGgWqyPwRe36FGgjCDP0drvkF_fn\" style=\"border: none; transform: rotate(0rad);\" width=\"360\" /></span></div></div><b>Figure 11: </b>Distribution of state (on logit scale) for recession data.  Blue dots show the true presence or absence of a recession, as determined by official&nbsp;statistics.</div><div><br /><h2> Conclusion</h2>The preceding examples have shown that the <span style=\"font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">bsts</span> software package can handle several nonstandard, but useful, time series applications.  These include the ability to handle large numbers of contemporaneous predictors with spike and slab priors, the presence of trend models suitable for long term forecasting, and the ability to handle non-Gaussian data.  We have run out of space, but <span style=\"font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">bsts</span> can do much more.<br /><br />For starters there are other state models you can use.  Bsts has elementary support for holidays.  It knows about 18 US holidays, and has capacity to add more, including holidays that occur on the same date each year, holidays that occur on a fixed weekday of a fixed month (e.g. 3rd Tuesday in February, or last Monday in November).  The model for each holiday is a simple random walk, but look for future versions to have improved holiday support via Bayesian shrinkage.</div><div><br /></div><div>Bsts offers support for multiple seasonalities.  For example, if you have several weeks of hourly data then you will have an hour-of-day effect as well as a day-of-week effect.  You can model these using a single seasonal effect with 168 seasons (which would allow for different hourly effects on weekends and weekdays), or you can assume additive seasonal patterns using the <span style=\"font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">season.duration</span> argument to <span style=\"font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">AddSeasonal</span>,<b style=\"font-weight: normal;\"><br /></b><br /><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: transparent; color: black; font-family: &quot;courier new&quot;; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">ss &lt;- AddSeasonal(ss, y, nseasons = 24)</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: transparent; color: black; font-family: &quot;courier new&quot;; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">ss &lt;- AddSeasonal(ss, y, nseasons = 7, season.duration = 24)</span></div><b style=\"font-weight: normal;\"><br /></b><br />The latter specifies that each daily effect should remain constant for 24 hours. For modeling physical phenomena, <span style=\"font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">bsts</span> also offers trigonometric seasonal effects, which are sine and cosine waves with time varying coefficients.  You obtain these by calling <span style=\"font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">AddTrig</span>.  Time varying effects are available for arbitrary regressions with small numbers of predictor variables through a call to <span style=\"font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">AddDynamicRegression</span>.<br /><br />In addition to the trend models discussed so far, the function <span style=\"font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">AddStudentLocalLinearTrend</span> gives a version of the local linear trend model that assumes student $t$ errors instead of Gaussian errors.  This is a useful state model for short term predictions when the mean of the time series exhibits occasional dramatic jumps.  Student $t$ errors can be introduced into the observation equation by passing the <span style=\"font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">family = \"student\"</span> argument to the <span style=\"font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">bsts</span> function call.  Allowing for heavy tailed errors in the observation equation makes the model robust against individual outliers, while heavy tails in the state model provides robustness against sudden persistent shifts in level or slope.  This can lead to tighter prediction limits than Gaussian models when modeling data that have been polluted by outliers.  The observation equation can also be set to a Poisson model for small count data if desired.<br /><br />Finally, the most recent update to <span style=\"font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">bsts</span> supports data with multiple observations at each time stamp.  The Gaussian version of the model is<br />$$    y_{it} = \\beta^T {\\bf x}_{it} + Z_t^T\\alpha_t + \\epsilon_{it}$$ $$    \\alpha_{t+1} = T_t \\alpha_t + R_t \\eta_t, $$<br />which is best understood as a regression model with a time varying intercept.<br /><br />Bsts is a mature piece of software with a broad user base both inside and outside of Google.  It is the product of several years of development, and I expect to continue improving it for the foreseeable future.  I hope you find it useful. <br /><br /><br /><br /><h2>References</h2>Albert, J. H. and Chib, S. (1993). Bayesian analysis of binary and polychotomous response data. <i>Journal of the American Statistical Association</i> <b>88</b>, 669–679.</div><div><br /></div><div>Benoit, D. F. and Van Den Poel, D. (2012). Binary quantile regression: A Bayesian approach based on the asymmetric Laplace distribution. <i>Journal of Applied Econometrics</i> <b>27</b>, 1174–1188.<br /><br />Berge, T., Sinha, N., and Smolyansky, M. (2016). <a href=\"https://www.federalreserve.gov/econresdata/notes/feds-notes/2016/which-market-indicators-best-forecast-recessions-20160802.html\" target=\"_blank\">Which market indicators best forecast recessions</a>? Tech. rep., US Federal Reserve.<br /><br />Frühwirth-Schnatter, S. and Frühwirth, R. (2005). Auxiliary mixture sampling with applications to logistic models. Tech. rep., IFAS Research Paper Series, Department of Applied Statistics, Johannes Kepler University Linz.<br /><br />Frühwirth-Schnatter, S. and Frühwirth, R. (2010). <a href=\"http://www.jku.at/ifas/content/e108280/e146255/e146260/ifas_rp48.pdf\" target=\"_blank\">Data augmentation and MCMC for binary and multinomial logit models</a>. In T. Kneib and G. Tutz, eds., <i>Statistical Modelling and Regression Structures – Festschrift in Honour of Ludwig Fahrmeir</i>, 111–132. Physica-Verlag, Heidelberg. <br /><br />Frühwirth-Schnatter, S., Frühwirth, R., Held, L., and Rue, H. (2008). Improved auxiliary mixture sampling for hierarchical models of non-Gaussian data. <i>Statistics and Computing</i> <b>19</b>, 479.<br /><br />Gelman, A., Carlin, J. B., Stern, H. S., Dunson, D. B., Vehtari, A., and Rubin, D. B. (2014). <i>Bayesian Data Analysis</i>. Chapman &amp; Hall, 3rd edn.<br /><br />Gramacy, R. B. and Polson, N. G. (2012). Simulation-based regularized logistic regression. <i>Bayesian Analysis</i> <b>7</b>, 567–590.<br /><br />Holmes, C. C. and Held, L. (2006). Bayesian auxiliary variable models for binary and multinomial regression. <i>Bayesian Analysis</i> <b>1</b>, 145–168.<br /><br />Petris, G. (2010). An R package for dynamic linear models. <i>Journal of Statistical Software</i> <b>36</b>, 1–16.<br /><br />Petris, G., Petrone, S., and Campagnoli, P. (2009). <i>Dynamic Linear Models with R.</i> useR! Springer-Verlag, New York.<br /><br />Polson, N. G. and Scott, S. L. (2011). Data augmentation for support vector machines. <i>Bayesian Analysis</i> <b>6</b>, 1–24. (with discussion).<br /><br />Scott, S. L. (2010). BoomSpikeSlab: MCMC for spike and slab regression. R package version 0.4.1.<br /><br />Scott, S. L. and Varian, H. R. (2014). Predicting the present with Bayesian structural time series. <i>International Journal of Mathematical Modelling and Numerical Optimisation</i> <b>5</b>, 4–23.<br /><br />Scott, S. L. and Varian, H. R. (2015). Bayesian variable selection for nowcasting economic time series. In A. Goldfarb, S. Greenstein, and C. Tucker, eds., <i>Economics of Digitization</i>, 119 –136. NBER Press, London.<br /><br />Tassone, E. and Rohani, F. (2017). Our quest for robust time series forecasting at scale. <a href=\"http://www.unofficialgoogledatascience.com/2017/04/our-quest-for-robust-time-series.html\">http://www.unofficialgoogledatascience.com/2017/04/our-quest-for-robust-time-series.html</a>.<br /><br />Taylor, S. J. and Letham, B. (2017). Prophet: forecasting at scale. <a href=\"https://research.fb.com/prophet-forecasting-at-scale/\" target=\"_blank\">https://research.fb.com/prophet-forecasting-at-scale/</a></div>",
  "link": [
    "",
    "",
    "",
    "",
    ""
  ],
  "author": {
    "name": "Kay Brodersen",
    "uri": "http://www.blogger.com/profile/15877220456041691465",
    "email": "noreply@blogger.com",
    "gd:image": ""
  },
  "media:thumbnail": "",
  "thr:total": 18
}