{
  "title": "e008: Just like something else",
  "link": "https://newrustacean.com/show_notes/e008/",
  "description": "<h2 id=\"notes\">Notes</h2>\n<p>In this episode we cover—at a <em>very</em> high level—two more fundamental concepts in Rust programming: generics and traits.</p>\n<p>Generics gives us the abilitty to write types and functions which can be used with more than one type. Traits give us the ability to specify behavior which can be implemented for more than one type. The combination gives us powerful tools for higher-level programming constructs in Rust.</p>\n<h3 id=\"comments-on-source-code\">Comments on source code</h3>\n<p>Now that we have a handle on <a href=\"https://www.newrustacean.com/show_notes/e007/\">how tests work</a>, we’ll use them to validate the behavior of our code going forward. This is great: we can show that the tests do what we think.</p>\n<p>To today’s point, though: we actually know even apart from whether the tests <em>run</em> successfully that these generic functions and the associated traits are behaving as we want. Failure with generics is a <em>compile</em>-time error, not a runtime error.</p>\n<h2 id=\"links\">Links</h2>\n<ul>\n<li>Rust Book\n<ul>\n<li><a href=\"https://doc.rust-lang.org/book/generics.html\">Generics</a></li>\n<li><a href=\"https://doc.rust-lang.org/book/traits.html\">Traits</a> – includes a discussion of <em>trait bounds</em> and <em>generic </em>traits*</li>\n</ul></li>\n<li>Rust by Example\n<ul>\n<li><a href=\"http://rustbyexample.com/generics.html\">Generics</a></li>\n<li><a href=\"http://rustbyexample.com/trait.html\">Traits</a></li>\n<li><a href=\"http://rustbyexample.com/generics/gen_trait.html\">Generic <em>traits</em></a></li>\n<li><a href=\"http://rustbyexample.com/generics/bounds.html\">Traits <em>bounds</em></a></li>\n</ul></li>\n<li><a href=\"https://github.com/sgrif/diesel/blob/master/diesel/src/types/mod.rs\">Generics and traits in use in Diesel</a></li>\n</ul>\n<h2 id=\"sponsors\">Sponsors</h2>\n<ul>\n<li>Chris Palmer</li>\n<li><a href=\"https://twitter.com/derekmorr\">Derek Morr</a></li>\n<li>Luca Schmid</li>\n<li>Micael Bergeron</li>\n<li>Ralph Giles (“rillian”)</li>\n<li>reddraggone9</li>\n<li><a href=\"http://willroe.me\">William Roe</a></li>\n</ul>\n<h3 id=\"become-a-sponsor\">Become a sponsor</h3>\n<ul>\n<li><a href=\"https://www.patreon.com/newrustacean\" rel=\"payment\">Patreon</a></li>\n<li><a href=\"https://venmo.com/chriskrycho\">Venmo</a></li>\n<li><a href=\"https://www.dwolla.com/hub/chriskrycho\">Dwolla</a></li>\n<li><a href=\"https://cash.me/$chriskrycho\">Cash.me</a></li>\n</ul>\n<h2 id=\"follow\">Follow</h2>\n<ul>\n<li>New Rustacean:\n<ul>\n<li>Twitter: <a href=\"https://www.twitter.com/newrustacean\">@newrustacean</a></li>\n<li>App.net: <a href=\"https://alpha.app.net/newrustacean\">@newrustacean</a></li>\n<li>Email: <a href=\"mailto:hello@newrustacean.com\">hello@newrustacean.com</a></li>\n</ul></li>\n<li>Chris Krycho\n<ul>\n<li>Twitter: <a href=\"https://www.twitter.com/chriskrycho\">@chriskrycho</a></li>\n<li>App.net: <a href=\"https://alpha.app.net/chriskrycho\">@chriskrycho</a></li>\n</ul></li>\n</ul>",
  "pubDate": "Sun, 27 Dec 2015 09:19:47 -0700",
  "enclosure": "",
  "guid": "C41DFF97-B4A0-4A50-89AF-4803FD50B547",
  "itunes:author": "Chris Krycho",
  "itunes:subtitle": "Generics, traits, and shared behavior in Rust.",
  "itunes:summary": "Notes In this episode we cover—at a _very_ high level—two more fundamental concepts in Rust programming: generics and traits. Generics gives us the abilitty to write types and functions which can be used with more than one type. Traits give us the ability to specify behavior which can be implemented for more than one type. The combination gives us powerful tools for higher-level programming constructs in Rust. Comments on source code Now that we have a handle on how tests work, we’ll use them to validate the behavior of our code going forward. This is great: we can show that the tests do what we think. To today’s point, though: we actually know even apart from whether the tests _run_ successfully that these generic functions and the associated traits are behaving as we want. Failure with generics is a _compile_-time error, not a runtime error. Sponsors - Chris Palmer - Derek Morr - Luca Schmid - Micael Bergeron - Ralph Giles (“rillian”) - reddraggone9 - William Roe Become a sponsor - Patreon/newrustacean - Venmo.com/chriskrycho - Dwolla.com/hub/chriskrycho - Cash.me/$chriskrycho Follow - New Rustacean: - Twitter: @newrustacean - App.net: @newrustacean - Email: hello@newrustacean.com - Chris Krycho - Twitter: @chriskrycho - App.net: @chriskrycho",
  "itunes:duration": "17:37",
  "itunes:episodeType": "full"
}