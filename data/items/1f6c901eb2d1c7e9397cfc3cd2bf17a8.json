{
  "title": "Scraping pages behind login forms",
  "link": "",
  "published": "2020-11-17T00:00:00-08:00",
  "updated": "2022-11-03T04:16:07-07:00",
  "author": {
    "name": "Greg Reda"
  },
  "id": "tag:www.gregreda.com,2020-11-17:/2020/11/17/scraping-pages-behind-login-forms/",
  "summary": "<p><em>This is part of a series of posts I have written about web scraping with Python.</em></p>\n<ol>\n<li><a href=\"http://www.gregreda.com/2013/03/03/web-scraping-101-with-python/\">Web Scraping 101 with Python</a>, which covers the basics of using Python for web scraping.</li>\n<li><a href=\"http://www.gregreda.com/2015/02/15/web-scraping-finding-the-api/\">Web Scraping 201: Finding the API</a>, which covers when sites load data client-side with Javascript.</li>\n<li><a href=\"http://www.gregreda.com/2016/10/16/asynchronous-scraping-with-python/\">Asynchronous Scraping with Python â€¦</a></li></ol>",
  "content": "<p><em>This is part of a series of posts I have written about web scraping with Python.</em></p>\n<ol>\n<li><a href=\"http://www.gregreda.com/2013/03/03/web-scraping-101-with-python/\">Web Scraping 101 with Python</a>, which covers the basics of using Python for web scraping.</li>\n<li><a href=\"http://www.gregreda.com/2015/02/15/web-scraping-finding-the-api/\">Web Scraping 201: Finding the API</a>, which covers when sites load data client-side with Javascript.</li>\n<li><a href=\"http://www.gregreda.com/2016/10/16/asynchronous-scraping-with-python/\">Asynchronous Scraping with Python</a>, showing how to use multithreading to speed things up.</li>\n<li><a href=\"http://www.gregreda.com/2020/11/17/scraping-pages-behind-login-forms/\">Scraping Pages Behind Login Forms</a>, which shows how to log into sites using Python.</li>\n</ol>\n<hr>\n\n<p>The other day a friend asked whether there was an easier way for them to get 1000+ Goodreads reviews without manually doing it one-by-one. It sounded like a fun little scraping project to me.</p>\n<p>One small complexity was that the user's book reviews were not public, which meant you needed to log into Goodreads to access them. Thankfully, with a little understanding of how HTML forms work, Python's <a href=\"https://requests.readthedocs.io/en/master/\">requests</a> library makes this doable with a few lines of code.</p>\n<p>This post walks through how to tackle the problem. If you'd like to jump straight to the code, you can find it <a href=\"https://github.com/gjreda/goodreads-reviews\">on my Github</a>.</p>\n<p>While we'll use Goodreads here, the same concepts apply to most websites.</p>\n<p>First, you'll need to dig into how the site's login forms work. I find the best way to do this is by finding the page that is solely for login. Here's an example from Goodreads:</p>\n<p><img alt=\"example login page\" src=\"/images/goodreads-login-page.png\"></p>\n<p>From there, you'll need to find the necessary details of the login form. While this will include some sort of username/email and password, it will likely include a token and possibly other details.</p>\n<p>The best way to find these details is by launching your browser's developer tools inside one of the input fields (like username/email). This will bring you to the code that is responsible for the form and allow you to find the details required.</p>\n<p><img alt=\"example login form\" src=\"/images/goodreads-login-form.png\"></p>\n<p>Using the screenshot above as an example, we can see the form requires some user input fields and as well as some hidden fields:</p>\n<ol>\n<li>A hidden <code>utf8</code> field with a checkmark value. The checkmark value will be converted to its HTML hexcode on submission, which is <code>&amp;#x2713;</code>.</li>\n<li>A hidden <code>authenticity_token</code> with a provided value.</li>\n<li>A <code>user[email]</code> which is input via the form.</li>\n<li>A <code>user[password]</code> which is input via the form.</li>\n<li>A hidden <code>n</code> field with a provided value.</li>\n</ol>\n<p>When you enter your email and password into the form and press login, the first line in the highlighted red box tells us that the form data is sent via an HTTP POST request to <code>https://www.goodreads.com/user/sign_in</code> (seen in the <code>method</code> and <code>action</code> fields, respectively). The user and password fields are then checked against the site's database to validate the information. Essentially, it's saying \"Here are the credentials I was given. Is this a valid user?\" If the credentials are valid, you are redirected to some page within the app (like the user's home page).</p>\n<p>Once login is successful, a <a href=\"https://en.wikipedia.org/wiki/HTTP_cookie\">cookie</a> is then stored in your browser's memory. Every time you access one of the site's pages, the site checks to make sure the cookie is valid and that you are allowed to access the page you are trying to reach.</p>\n<p>To scrape data that is behind login forms, we'll need to replicate this behavior using the requests library. In particular, we'll need to use its <a href=\"https://requests.readthedocs.io/en/master/user/advanced/#session-objects\">Session object</a>, which will capture and store any cookie information for us.</p>\n<div class=\"highlight\"><pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">bs4</span> <span class=\"kn\">import</span> <span class=\"n\">BeautifulSoup</span>\n<span class=\"kn\">import</span> <span class=\"nn\">requests</span>\n\n<span class=\"n\">LOGIN_URL</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;https://www.goodreads.com/user/sign_in&quot;</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">get_authenticity_token</span><span class=\"p\">(</span><span class=\"n\">html</span><span class=\"p\">):</span>\n    <span class=\"n\">soup</span> <span class=\"o\">=</span> <span class=\"n\">BeautifulSoup</span><span class=\"p\">(</span><span class=\"n\">html</span><span class=\"p\">,</span> <span class=\"s2\">&quot;html.parser&quot;</span><span class=\"p\">)</span>\n    <span class=\"n\">token</span> <span class=\"o\">=</span> <span class=\"n\">soup</span><span class=\"o\">.</span><span class=\"n\">find</span><span class=\"p\">(</span><span class=\"s1\">&#39;input&#39;</span><span class=\"p\">,</span> <span class=\"n\">attrs</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">&#39;name&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;authenticity_token&#39;</span><span class=\"p\">})</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">token</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;could not find `authenticity_token` on login form&#39;</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">token</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;value&#39;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">()</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">get_login_n</span><span class=\"p\">(</span><span class=\"n\">html</span><span class=\"p\">):</span>\n    <span class=\"n\">soup</span> <span class=\"o\">=</span> <span class=\"n\">BeautifulSoup</span><span class=\"p\">(</span><span class=\"n\">html</span><span class=\"p\">,</span> <span class=\"s2\">&quot;html.parser&quot;</span><span class=\"p\">)</span>\n    <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">soup</span><span class=\"o\">.</span><span class=\"n\">find</span><span class=\"p\">(</span><span class=\"s1\">&#39;input&#39;</span><span class=\"p\">,</span> <span class=\"n\">attrs</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">&#39;name&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;n&#39;</span><span class=\"p\">})</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">n</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;could not find `n` on login form&#39;</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">n</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;value&#39;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">()</span>\n\n\n<span class=\"n\">email</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;some@email.com&quot;</span>  <span class=\"c1\"># login email</span>\n<span class=\"n\">password</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;somethingsecret&quot;</span>  <span class=\"c1\"># login password</span>\n\n<span class=\"n\">payload</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">&#39;user[email]&#39;</span><span class=\"p\">:</span> <span class=\"n\">email</span><span class=\"p\">,</span>\n    <span class=\"s1\">&#39;user[password]&#39;</span><span class=\"p\">:</span> <span class=\"n\">password</span><span class=\"p\">,</span>\n    <span class=\"s1\">&#39;utf8&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;&amp;#x2713;&#39;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">session</span> <span class=\"o\">=</span> <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">Session</span><span class=\"p\">()</span>\n<span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">headers</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">&#39;User-Agent&#39;</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"s1\">&#39;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) &#39;</span>\n    <span class=\"s1\">&#39;AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.121 Safari/537.36&#39;</span><span class=\"p\">)}</span>\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">LOGIN_URL</span><span class=\"p\">)</span>\n\n<span class=\"n\">token</span> <span class=\"o\">=</span> <span class=\"n\">get_authenticity_token</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">text</span><span class=\"p\">)</span>\n<span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">get_login_n</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">text</span><span class=\"p\">)</span>\n<span class=\"n\">payload</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">({</span>\n    <span class=\"s1\">&#39;authenticity_token&#39;</span><span class=\"p\">:</span> <span class=\"n\">token</span><span class=\"p\">,</span>\n    <span class=\"s1\">&#39;n&#39;</span><span class=\"p\">:</span> <span class=\"n\">n</span>\n<span class=\"p\">})</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;attempting to log in as </span><span class=\"si\">{</span><span class=\"n\">email</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">post</span><span class=\"p\">(</span><span class=\"n\">LOGIN_URL</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">payload</span><span class=\"p\">)</span>  <span class=\"c1\"># perform login</span>\n</code></pre></div>\n\n<p>If the POST request in the last line is successful, our session object should now contain a cookie that allows us to programmatically access the same pages that our user normally has access to. We'll simply need to request these pages using <code>session.get</code> and then can proceed as I've <a href=\"/2013/03/03/web-scraping-101-with-python/\">previously detailed</a>.</p>\n<p>You can find the complete code for this post <a href=\"https://github.com/gjreda/goodreads-reviews\">on my Github</a>.</p>",
  "category": [
    "",
    "",
    "",
    ""
  ]
}