{
  "id": "tag:blogger.com,1999:blog-15045980.post-7503626774796342483",
  "published": "2018-07-25T10:42:00.000-07:00",
  "updated": "2018-07-26T21:38:09.111-07:00",
  "category": [
    "",
    "",
    ""
  ],
  "title": "Code Health: Make Interfaces Hard to Misuse",
  "content": "<span id=\"docs-internal-guid-31239969-d272-57b1-3d6f-993ac1ed4155\" style=\"font-family: &quot;times&quot; , &quot;times new roman&quot; , serif;\"><span style=\"background-color: white; color: #222222; font-style: italic; vertical-align: baseline; white-space: pre-wrap;\">This is another post in our </span><a href=\"https://testing.googleblog.com/2017/04/code-health-googles-internal-code.html\" style=\"text-decoration-line: none;\"><span style=\"background-color: white; color: #1155cc; font-style: italic; vertical-align: baseline; white-space: pre-wrap;\">Code Health</span></a><span style=\"background-color: white; color: #222222; font-style: italic; vertical-align: baseline; white-space: pre-wrap;\"> series. A version of this post originally appeared in Google bathrooms worldwide as a Google </span><a href=\"https://testing.googleblog.com/2007/01/introducing-testing-on-toilet.html\" style=\"text-decoration-line: none;\"><span style=\"background-color: white; color: #1155cc; font-style: italic; vertical-align: baseline; white-space: pre-wrap;\">Testing on the Toilet</span></a><span style=\"background-color: white; color: #222222; font-style: italic; vertical-align: baseline; white-space: pre-wrap;\"> episode. You can download a </span><a href=\"https://docs.google.com/document/d/1GaMJ4e2Z7XibnYtSkA3_WvVQ_2zoR7S_oHkW2jJpqDE/edit?usp=sharing\" rel=\"nofollow\" style=\"text-decoration-line: none;\"><span style=\"background-color: white; color: #1155cc; font-style: italic; vertical-align: baseline; white-space: pre-wrap;\">printer-friendly version</span></a><span style=\"background-color: white; color: #222222; font-style: italic; vertical-align: baseline; white-space: pre-wrap;\"> to display in your office. </span></span><br /><span style=\"font-family: &quot;times&quot; , &quot;times new roman&quot; , serif;\"><span style=\"background-color: white; color: #222222; font-style: italic; vertical-align: baseline; white-space: pre-wrap;\"><br /></span></span><span style=\"font-family: &quot;times&quot; , &quot;times new roman&quot; , serif;\"><span style=\"background-color: white; color: #222222; vertical-align: baseline; white-space: pre-wrap;\">By Marek Kiszkis</span></span><br /><span style=\"font-family: &quot;times&quot; , &quot;times new roman&quot; , serif;\"><span style=\"background-color: white; color: #222222; vertical-align: baseline; white-space: pre-wrap;\"><br /></span></span><br /><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 8pt; margin-top: 0pt;\"><span style=\"font-family: &quot;times&quot; , &quot;times new roman&quot; , serif;\"><span style=\"background-color: transparent; color: black; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\">We all try to avoid errors in our code. But what about errors created by callers of your code? A good interface design can make it easy for callers to do the right thing, and hard for callers to do the wrong thing. </span><span style=\"background-color: transparent; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\"><span style=\"color: purple;\">Don't push the responsibility of maintaining invariants required by your class on to its callers.</span></span></span></div><span id=\"docs-internal-guid-4df0c685-d286-1fe9-e163-7ef142e954fb\"></span><span style=\"font-family: &quot;times&quot; , &quot;times new roman&quot; , serif;\"><span id=\"docs-internal-guid-e9a2f78f-d273-9b09-5695-86e07c3d6224\"><span style=\"vertical-align: baseline; white-space: pre-wrap;\">Can you see the issues that can arise with this code?</span></span></span><br /><div style=\"overflow-x: auto;\"><table class=\"my-bordered-table\" style=\"width: 613px;\"><tbody><tr><td style=\"background-color: #f4cccc; vertical-align: top; width: 607px;\"><pre style=\"background-color: #f4cccc; border: 0px; color: black; margin: 0px; padding-bottom: 0px; padding-left: 0px; padding-top: 0px;\"><span style=\"font-family: &quot;consolas&quot; , &quot;courier new&quot; , &quot;courier&quot; , monospace;\">class Vector {<br />  explicit <span style=\"font-weight: bold;\">Vector</span>(int num_slots);  // Creates an empty vector with `num_slots` slots.<br />  int <span style=\"font-weight: bold;\">RemainingSlots</span>() const;  // Returns the number of currently remaining slots.<br />  void <span style=\"font-weight: bold;\">AddSlots</span>(int num_slots);  // Adds `num_slots` more slots to the vector.<br />  // Adds a new element at the end of the vector. Caller must ensure that RemainingSlots()  <br />  // returns at least 1 before calling this, otherwise caller should call AddSlots().<br />  void <span style=\"font-weight: bold;\">Insert</span>(int value);<br />}<br /></span></pre></td></tr></tbody></table></div><span style=\"font-family: &quot;times new roman&quot;; font-size: 13pt; vertical-align: baseline; white-space: pre-wrap;\"><br /></span><span style=\"font-family: &quot;times&quot; , &quot;times new roman&quot; , serif; vertical-align: baseline; white-space: pre-wrap;\">If the caller forgets to call </span><span style=\"color: #00931e; font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace; vertical-align: baseline; white-space: pre-wrap;\">AddSlots()</span><span style=\"font-family: &quot;times&quot; , &quot;times new roman&quot; , serif; vertical-align: baseline; white-space: pre-wrap;\">, </span><span style=\"color: purple; font-family: &quot;times&quot; , &quot;times new roman&quot; , serif; font-weight: 700; vertical-align: baseline; white-space: pre-wrap;\">undefined behavior might be triggered</span><span style=\"color: #980000; font-family: &quot;times&quot; , &quot;times new roman&quot; , serif; font-weight: 700; vertical-align: baseline; white-space: pre-wrap;\"> </span><span style=\"font-family: &quot;times&quot; , &quot;times new roman&quot; , serif; vertical-align: baseline; white-space: pre-wrap;\">when </span><span style=\"color: #00931e; font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace; vertical-align: baseline; white-space: pre-wrap;\">Insert()</span><span style=\"font-family: &quot;times&quot; , &quot;times new roman&quot; , serif; vertical-align: baseline; white-space: pre-wrap;\"> is called. The interface pushes complexity onto the caller, exposing the caller to implementation details.</span><br /><span style=\"font-family: &quot;times new roman&quot;; font-size: 13pt; vertical-align: baseline; white-space: pre-wrap;\"><br /></span><span style=\"font-family: &quot;times&quot; , &quot;times new roman&quot; , serif; vertical-align: baseline; white-space: pre-wrap;\">Since maintaining the slots is not relevant to the caller-visible behaviors of the class, don't expose them in the interface; </span><span style=\"color: purple; font-family: &quot;times&quot; , &quot;times new roman&quot; , serif; font-weight: 700; vertical-align: baseline; white-space: pre-wrap;\">make it impossible to trigger undefined behavior</span><span style=\"font-family: &quot;times&quot; , &quot;times new roman&quot; , serif; vertical-align: baseline; white-space: pre-wrap;\"> by adding slots as needed in </span><span style=\"color: #00931e; font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace; vertical-align: baseline; white-space: pre-wrap;\">Insert()</span><span style=\"font-family: &quot;times&quot; , &quot;times new roman&quot; , serif; vertical-align: baseline; white-space: pre-wrap;\">.</span><span id=\"docs-internal-guid-dbfef7ae-d27a-fe35-f91e-3e483c0c5757\"></span><br /><div style=\"overflow-x: auto;\"><table class=\"my-bordered-table\" style=\"width: 613px;\"><tbody><tr><td style=\"background-color: #d9ead3; vertical-align: top; width: 607px;\"><pre style=\"background-color: #d9ead3; border: 0px; color: black; margin: 0px; padding-bottom: 0px; padding-left: 0px; padding-top: 0px;\"><span style=\"font-family: &quot;consolas&quot; , &quot;courier new&quot; , &quot;courier&quot; , monospace;\">class Vector {<br />  explicit <span style=\"font-weight: bold;\">Vector</span>(int num_slots);<br />  // Adds a new element at the end of the vector. If necessary,<br />  // allocates new slots to ensure that there is enough storage<br />  // for the new value.<br />  void <span style=\"font-weight: bold;\">Insert</span>(int value);<br />}</span></pre></td></tr></tbody></table></div><br /><span id=\"docs-internal-guid-1e587b0e-d27d-6aed-6be0-acff454eb88f\"></span><br /><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 8pt;\"><span style=\"background-color: transparent; color: black; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;\"><span style=\"font-family: &quot;times&quot; , &quot;times new roman&quot; , serif;\">Contracts enforced by the compiler are usually better than contracts enforced by runtime checks, or worse, documentation-only contracts that rely on callers to do the right thing. </span></span></div><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 8pt;\"><span style=\"font-weight: 700; white-space: pre-wrap;\"><span style=\"color: purple; font-family: &quot;times&quot; , &quot;times new roman&quot; , serif;\">Here are other examples that could signal that an interface is easy to misuse:</span></span></div><div dir=\"ltr\" style=\"line-height: 1.2; margin-bottom: 0pt; margin-top: 8pt;\"></div><ul><li><span style=\"white-space: pre-wrap;\"><b><span id=\"docs-internal-guid-1d1a60d3-d281-2571-7a40-d9f1438328fc\" style=\"font-weight: normal;\"><span style=\"font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline;\"><span style=\"font-family: &quot;times&quot; , &quot;times new roman&quot; , serif;\">Requiring callers to call an initialization function (alternative: expose factory methods that return your object fully initialized).</span></span></span></b></span></li><li><span style=\"font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;\"><span style=\"font-family: &quot;times&quot; , &quot;times new roman&quot; , serif;\">Requiring callers to perform custom cleanup (alternative: use language-specific constructs that ensure automated cleanup when your object goes out of scope).</span></span></li><li><span style=\"font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;\"><span style=\"font-family: &quot;times&quot; , &quot;times new roman&quot; , serif;\">Allowing code paths that create objects without required parameters (e.g. a user without an ID).</span></span></li><li><span style=\"font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;\"><span id=\"docs-internal-guid-9bcfb1b7-d281-e948-3630-7241750bd866\"><span style=\"font-family: &quot;times&quot; , &quot;times new roman&quot; , serif; vertical-align: baseline;\">Allowing parameters for which only some values are valid, especially if it is possible to use a more appropriate type (e.g. prefer </span><span style=\"color: #00931e; vertical-align: baseline;\"><span style=\"font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">Duration timeout</span></span><span style=\"color: #00931e; font-family: &quot;times&quot; , &quot;times new roman&quot; , serif; vertical-align: baseline;\"> </span><span style=\"font-family: &quot;times&quot; , &quot;times new roman&quot; , serif; vertical-align: baseline;\">instead of </span><span style=\"color: #00931e; vertical-align: baseline;\"><span style=\"font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">int timeout_in_millis</span></span><span style=\"font-family: &quot;times&quot; , &quot;times new roman&quot; , serif; vertical-align: baseline;\">). </span></span></span></li></ul><div><span id=\"docs-internal-guid-513985a7-d283-475f-4fce-615f7d3a6957\"><span style=\"font-family: &quot;times&quot; , &quot;times new roman&quot; , serif;\"><span style=\"font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;\">It is not always practical to have a foolproof interface. </span><span style=\"font-variant-east-asian: normal; font-variant-numeric: normal; font-weight: 700; vertical-align: baseline; white-space: pre-wrap;\"><span style=\"color: purple;\">In certain cases, relying on static analysis or documentation is necessary</span></span><span style=\"font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;\"> since some requirements are impossible to express in an interface (e.g. that a callback function needs to be thread-safe). </span></span></span></div><div><span style=\"font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;\"><span style=\"font-family: &quot;times&quot; , &quot;times new roman&quot; , serif;\"><br /></span></span></div><div><span id=\"docs-internal-guid-e6a18413-d283-6836-7054-8b987cc12163\"><span style=\"font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;\"><span style=\"font-family: &quot;times&quot; , &quot;times new roman&quot; , serif;\">Don’t enforce what you don’t need to enforce - avoid code that is too defensive. For example, extensive validation of function parameters can increase complexity and reduce performance.</span></span></span></div>",
  "link": [
    "",
    "",
    "",
    "",
    ""
  ],
  "author": {
    "name": "Google Testing Bloggers",
    "uri": "http://www.blogger.com/profile/03153388556673050910",
    "email": "noreply@blogger.com",
    "gd:image": ""
  },
  "thr:total": 4
}