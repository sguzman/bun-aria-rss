{
  "title": "So you want to contribute to open source",
  "link": "",
  "updated": "2018-10-12T00:00:00+00:00",
  "id": "https://mrocklin.github.io/blog/work/2018/10/12/so-you-want-to-contribute-to-open-source",
  "content": "<p>Welcome new open source contributor!</p>\n\n<p>I appreciated receiving the e-mail where you said you were excited about\ngetting into open source and were particularly interested in working on a\nproject that I maintain.  This post has a few thoughts on the topic.</p>\n\n<p>First, please forgive me for sending you to this post rather than responding\nwith a personal e-mail.  Your situation is common today, so I thought I’d write\nup thoughts in a public place, rather than respond personally.</p>\n\n<p>This post has two parts:</p>\n\n<ol>\n  <li>Some pragmatic steps on how to get started</li>\n  <li>A personal recommendation to think twice about where you focus your time</li>\n</ol>\n\n<h3 id=\"look-for-good-first-issues-on-github\">Look for good first issues on Github</h3>\n\n<p>Most open source software (OSS) projects have a “Good first issue” label on\ntheir Github issue tracker.  Here is a screenshot of how to find the “good\nfirst issue” label on the Pandas project:</p>\n\n<p><img src=\"https://mrocklin.github.io/blog/images/good-first-issue.png\" /></p>\n\n<p><em>(note that this may be named something else like “Easy to fix”)</em></p>\n\n<p>This contains a list of issues that are important, but also good introductions\nfor new contributors like yourself.  I recommend looking through that list to\nsee if something interests you.  The issue should include a clear description\nof the problem, and some suggestions on how it might be resolved.  If you need\nto ask questions, you can make an account on Github and ask them there.</p>\n\n<p>It is very common for people to ask questions on Github.  We understand that\nthis may cause some anxiety your first time (I always find it really hard to\nintroduce myself to a new community), but a “Good first issue” issue is a safe\nplace to get started.  People expect newcomers to show up there.</p>\n\n<h3 id=\"read-developer-guidelines\">Read developer guidelines</h3>\n\n<p>Many projects will specify developer guidelines like how to check out a\ncodebase, run tests, write and style code, formulate a pull request, and so on.\nThis is usually in their documentation under a label like “Developer\nguidelines”, “Developer docs”, or “Contributing”.</p>\n\n<p>If you do a web search for “pandas developer docs” then this page in the first\nhit:\n<a href=\"https://pandas.pydata.org/pandas-docs/stable/contributing.html\">pandas.pydata.org/pandas-docs/stable/contributing.html</a></p>\n\n<p><img src=\"https://mrocklin.github.io/blog/images/contributing-pandas.png\" /></p>\n\n<p>These pages can be long, but they have a lot of good information.  Reading\nthrough them is a good learning experience.</p>\n\n<h3 id=\"but-this-may-not-be-as-fun-as-you-think\">But this may not be as fun as you think</h3>\n\n<p>Open source software is a field of great public interest today, but day-to-day\nit may be more tedious than you expect.  Most OSS work is dull.  Maintainers\nspend most of their time discussing grammatical rules for documentation,\ndiscovering obscure compiler bugs, or handling e-mails.  They spend very little\ntime inventing cool algorithms.  You may notice this yourself as you look\nthrough the issue list.  What fraction of them excite you?</p>\n\n<p>I say this not to discourage you (indeed, please come help!) but just as a\nwarning.  Many people leave OSS pretty quickly.  This can be for many reasons,\nbut lack of interest is certainly one of them.</p>\n\n<p><em>The desire to maintain software is rarely enough to keep people engaged in\nopen source long term</em></p>\n\n<h3 id=\"so-work-on-projects-that-are-personal-to-you\">So work on projects that are personal to you</h3>\n\n<p>You are more than a programmer.  You already have life experience and skills\nthat can benefit your programming, and you have life needs that programming can\nenhance.</p>\n\n<p>The people who stay with an OSS project are often people who need that project\nfor something else.</p>\n\n<ul>\n  <li>A musician may contribute to a composition or recording software that they use at work</li>\n  <li>A teacher may contribute to educational software to help their students</li>\n  <li>Community organizers may contribute to geospatial software to help them plan\nactivities or understand local issues.</li>\n</ul>\n\n<p>So my biggest piece of advice to you is not to try to contribute to a package\nbecause it is popular or exciting, but rather wait until you run into a problem\nwith a piece of software that you use daily, and then contribute a fix to that\nproject.  It can be more rewarding to contribute to something that is already\nin your life and as an active user you already have a ton of experience and\na place in the community.  You are much more likely to be successful\ncontributing to a project if you have been using it for a long time.</p>"
}