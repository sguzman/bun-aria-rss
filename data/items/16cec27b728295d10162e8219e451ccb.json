{
  "title": "Reduce GPU costs with startup scripts on the Google Cloud Engine",
  "description": "<h1 id=\"reduce-gpu-costs-with-on-demand-instances-and-startup-scripts\">Reduce GPU costs with on demand instances and startup scripts</h1>\n\n<div style=\"clear: both; display: table; width: 100%; margin-left: 3%\">\n<img src=\"/assets/gcp/compute_engine.png\" alt=\"Google Compute Engine\" width=\"30%\" style=\" float: left\" />\n<img src=\"/assets/gcp/cloud_billing_API.png\" alt=\"Billing\" width=\"30%\" style=\" float: left;\" />\n<img src=\"/assets/gcp/GPU.png\" alt=\"GPU\" width=\"30%\" style=\" float: left;\" />\n</div>\n\n<p>This post is about leveraging on demand capabilities of costly virtual instances on the Google Cloud Engine using startup scripts.</p>\n\n<h1 id=\"deep-learning-is-expensive\">Deep Learning is expensive</h1>\n\n<p>Here’s the situation: You’re working on some large dataset, and you feel the irresistible urge to release the Deep Learning beast on your models with VMs armed to the teeth with GPUs.</p>\n\n<p>Since your local Macbook steps into the twilight zone every time you launch Keras, you decide to spin up a dragster style, GPU-powered VM on the Google Platform, AWS or Azure. Once the VM is ready, which in truth may take several days if it’s your first encounter with the CUDA Toolkit, you ssh into the VM and start working on your data and your models.</p>\n\n<p>After a few hours of work, you’re still working on your scripts, cleaning up the data, training models, evaluating, and on and on. Time passes on while the earth pursues its never ending spin in the interplanetary void. When you realize your brain has as much jitsu left as a greek yogurt, you decide to call it a day and give the whole thing a rest. And of course, you sometimes forget to stop the instance. Your cash reserves leak out cent after cent, dollar/euro/pound after dollar/euro/pound throughout the night.</p>\n\n<p>All these hours do add up. And at the end of the months you realize GPUs are way more expensive than you ever imagined. But hey Deep learning is really fun. Can’t stop now. Just need a few more hours. After all nobody really understands how these neural network work, do they? And you really need to practice to be able to call yourself a Deep Learning expert. Please just a few more hours of GPUs. Just 30 minutes, … I swear, …. come on!</p>\n\n<p>So what’s a data scientist to do?</p>\n\n<p>One solution is to go back to random forests and SVMs and give up on the whole deep learning thing. After all, as <a href=\"https://www.youtube.com/watch?v=5mvfpSdWsOo\">Vladimir Vapnik</a> says, Deep Learning is just <a href=\"https://medium.com/intuitionmachine/the-brute-force-method-of-deep-learning-innovation-58b497323ae5\">brute force</a> training with a whole lot of data.</p>\n\n<p>The other solution is to make the most of the <strong>on demand</strong> promise in cloud computing.</p>\n\n<h2 id=\"on-demand-and-serverless\">On demand and serverless</h2>\n\n<p>The whole promise of cloud computing is that you can spin up and release resources as needed.\nWay back in the early 2000s that mostly meant being able to add servers on the fly to support your traffic exploding when BoingBoing or Gizmodo suddenly put your startup on their front page.\nBut for machine learning the same on demand concept is relevant when extra high computing power is needed.\nWhen working with Deep Learning, most of the mundane work of data cleaning and shaping can probably be carried out on your local machine or a low level VM. The only time GPU enabled VMs are truly needed is to train the Deep Learning models.</p>\n\n<p>Which means that a resource conservative workflow should look like this:</p>\n\n<ul>\n  <li>1) Local: ETL, extract and explore dataset, clean and format data for consumption by Keras / Tensorflow / ….</li>\n  <li>2) Storage: Upload the properly formatted data to storage (GCS, S3, SQL, BQ) to make accessible by the VM</li>\n  <li>3) Local:<strong>Create a GPU enabled VM</strong></li>\n  <li>4) EC2, GCE: run your Keras / TF / Pytorch script to train your model</li>\n  <li>5) EC2, GCE: Store intermediate and final results to storage, so you can access it from local</li>\n  <li>6) <strong>Shutdown or delete the VM when the script has finished running</strong></li>\n  <li>7) Local: retrieve the models, make some predictions, evaluations, selections</li>\n</ul>\n\n<p>Here, <em>Local</em> can be replaced by a smaller, less powerful VM running on CPUs and not GPUs.</p>\n\n<p>With this workflow, you only spend money on expensive cloud resources on steps 3) and 4), potentially saving you significant amounts of cash at the end of the day. If you can manage to shutdown or even delete the VM once the script has finished running then you won’t even run the risk of leaving it running all through the night! Brilliant!</p>\n\n<p>So in order to limit our resources, we need to be able to</p>\n\n<ul>\n  <li>1) Create a VM in the fly</li>\n  <li>2) Run a script on the VM from your local</li>\n  <li>3) Terminate the VM when the script is done</li>\n</ul>\n\n<p>And we should do that (create, run, terminate) every time we want to  test a new version of the dataset, a new DL architecture or new parameters.\nWe could even potentially run several trials in parallel.</p>\n\n<p>Let’s go!</p>\n\n<h2 id=\"create-a-vm-on-the-fly-from-an-existing-disk\">Create a VM on the fly from an existing disk</h2>\n\n<p>I assume here that you already have created a VM and installed everything needed to run your scripts. Things like the conda distribution, scikit-learn, keras, GPUs and so forth. See <a href=\"https://www.datacamp.com/community/tutorials/google-cloud-data-science\">How to setup a VM for data science on GCP </a> and <a href=\"https://hackernoon.com/launch-a-gpu-backed-google-compute-engine-instance-and-setup-tensorflow-keras-and-jupyter-902369ed5272\">Launch a GPU-backed Google Compute Engine instance</a> for more details (also <a href=\"https://vxlabs.com/2017/03/17/miniconda3-tensorflow-keras-on-google-compute-engine-gpu-instance-the-step-by-step-guide/\">this one</a>) to install the <a href=\"https://developer.nvidia.com/cuda-toolkit\">CUDA Toolkit</a> and the <a href=\"https://developer.nvidia.com/rdp/cudnn-download\">cuDNN</a> library.</p>\n\n<p>For those in a hurry, here’s an example of the command line for creating a <a href=\"https://cloud.google.com/compute/docs/instances/create-start-preemptible-instance\">preemptible</a> VM on Google Cloud Engine (Ubuntu 17.10 with 50gb disk space). Preemptible VMs are temporary but way way cheaper than non preemptible ones. Great for research work not so much for production APIs.</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>gcloud beta compute --project \"&lt;project_name&gt;\" instances create \"&lt;instance_name&gt;\" --zone \"us-east1-c\" \\\n--machine-type \"n1-standard-1\" --subnet \"default\" --no-restart-on-failure --maintenance-policy \"TERMINATE\" \\\n--preemptible --service-account \"&lt;your_service_account&gt;\"  --image \"ubuntu-1710-artful-v20180126\" \\\n--image-project \"ubuntu-os-cloud\" --boot-disk-size \"50\" --no-boot-disk-auto-delete \\\n--boot-disk-type \"pd-standard\" --boot-disk-device-name \"&lt;disk_name&gt;\"\n</code></pre></div></div>\n\n<p>In the above and quite longish command, the non obvious but important flags are</p>\n\n<ul>\n  <li><code class=\"language-plaintext highlighter-rouge\">--no-boot-disk-auto-delete</code>: The disk will not be deleted when the instance is deleted</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">--preemptible</code>: makes the VM temporary and saves money</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">--service-account \"&lt;your_service_account&gt;\"</code>: A <a href=\"https://cloud.google.com/compute/docs/access/service-accounts\">service account</a> is used by your VM to interact with other Google Cloud Platform APIs. The default service account is identifiable with that email <code class=\"language-plaintext highlighter-rouge\">[PROJECT_NUMBER]-compute@developer.gserviceaccount.com</code> where the [PROJECT_NUMBER] can be found on your <a href=\"https://console.cloud.google.com/home/dashboard\">project dashboard</a></li>\n</ul>\n\n<p>So let’s assume that your have created your initial disk and deleted the associated VM. The disk is now free to be used to create a new VM.</p>\n\n<p>The following command line creates a preemptible VM from that disk</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>gcloud compute instances create &lt;instance name&gt; --disk name=&lt;disk name&gt;,boot=yes --preemptible\n</code></pre></div></div>\n\n<p>Ok so we can create a VM on the fly based on that disk. Now we want to run a script on that VM. Let’s say a python script.</p>\n\n<p>The simplest way is to use the SSH command with the <code class=\"language-plaintext highlighter-rouge\">--command</code> flag</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>gcloud compute ssh &lt;instance name&gt; \\\n--command '{Absolute path to }/python {absolute path to}&lt;the script&gt;.py'\n</code></pre></div></div>\n<p>and low and behold, that command will display the output of the remote python script on your local terminal. Try for instance <code class=\"language-plaintext highlighter-rouge\">gcloud compute ssh &lt;instance name&gt; --command 'ls -al'</code>.</p>\n\n<p>A more sophisticated way is to automatically run a script (shell, python, R, whatever…) when the VM is created by using startup scripts</p>\n\n<p>For instance, we could want to run the following shell script on creation</p>\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>#! /bin/bash\nsudo apt-get update\n\nprintf '%s %s Some log message \\n' $(date +%Y-%m-%d) $(date +%H:%M:%S) &gt;&gt; '{absolute_path}/startup_script.log'\n\n# add and activate the github keys\neval \"$(ssh-agent -s)\"\nssh-add  {path to github key}\n\n# log script start\ncd {path to application folder}\n\n# git update application\ngit pull origin master\n# run script\n{path to }/python {absolute path to}/&lt;the script&gt;.py\n\n</code></pre></div></div>\n\n<p>That script activates the github keys, updates the application from github, and runs the script. Pretty neat.\nCreating the VM and making sure the VM runs that script is just an extension of the above VM creation command line\nBut first you need to make the script available to the VM by uploading to Google Storage with gsutil</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>gsutil cp {local}/&lt;shell script&gt; gs://{bucket name}/\n</code></pre></div></div>\n\n<p>for more gsutil example check my post on <a href=\"Top gsutil examples for Google Cloud Storage\">https://alexisperrier.com/gcp/2018/01/01/google-storage-gsutil.html</a>.</p>\n\n<p>And now we can create the VM and have the script run on start.  The following command line will attach the script to the VM as a startup script.\nEvery time the VM is started the script will be executed.</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>gcloud compute instances create &lt;instance name&gt; --disk name=&lt;disk name&gt;,boot=yes --preemptible \\\n--scopes storage-ro \\\n--metadata startup-script-url=gs://{bucket name}/&lt;shell script&gt;  --preemptible\n</code></pre></div></div>\n\n<h2 id=\"now-shutdown-that-vm\">Now shutdown that VM!</h2>\n\n<p>So we are now able to</p>\n\n<ol>\n  <li>start a VM on demand from a disk</li>\n  <li>run a script on that VM from our local</li>\n</ol>\n\n<p>We just need to find a way to terminate that VM once the script has finished running.\nThis is where things get tricky mainly because it can be difficult to know with certainty when the script has finished running.</p>\n\n<p>The simplest solution is to add the following shutdown line at the end of the startup script</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>shutdown -h now\n</code></pre></div></div>\n\n<p>This forces the VM to stop once the script is done. The VM still exists and is not deleted.\nIn terms of pricing, this might just be enough as the VM is not priced when it’s idle. From the <a href=\"https://cloud.google.com/compute/docs/instances/stopping-or-deleting-an-instance#billing_for_stopped_instances\">google doc</a>: <em>Instances that are in a TERMINATED state are not charged …</em>. The associated disks, IPs, and other resources are still billed but  not the VM.</p>\n\n<p>It’s also possible to not only shutdown the VM but also delete it from within the VM. In other words having the VM commit seppuku.\nI mean specially if the script fails to run, the VM should take the blame for having failed its master (You) and rightly self suicide, makes sense. In a way maybe. The following code is from <a href=\"https://groups.google.com/forum/#!topic/gce-discussion/fgZIZFaDhp8\">this thread</a>. It can run from within the VM. It requires a bit of tuning on the <a href=\"https://cloud.google.com/compute/docs/authentication#using\">service account scopes</a> for it to have the proper permissions and actually work.</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>gcloud compute instances delete $myName --zone=$myZone --quiet\n</code></pre></div></div>\n\n<p>where the name of the VM comes from  <code class=\"language-plaintext highlighter-rouge\">myName=$(hostname)</code>\nand the zone from</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code># Get the zone\nzoneMetadata=$(curl \"https://metadata.google.internal/computeMetadata/v1/instance/zone\" -H \"Metadata-Flavor:Google\")\n# Split on / and get the 4th element to get the actual zone name\nIFS=$'/'\nzoneMetadataSplit=($zoneMetadata)\nmyZone=\"${zoneMetadataSplit[3]}\"\n</code></pre></div></div>\n\n<p>The only problem with that approach (stopping or deleting from the startup script) is that every time you start the VM, well, it will run the script and shutdown, and at the same time preventing you from ssh’ing into it to check the logs, make some modifications or inspect the results. Bummer!</p>\n\n<p>The other solution would be to have your main model training script write a status update to a file or an external storage bucket or database, and from your local, regularly check the status of the script before deciding to the the shutdown command.</p>\n\n<p>In the end, although a bit hacky, I think this is the best solution. Your whole workflow becomes now</p>\n\n<ol>\n  <li>Create the VM and set it up with all the right libraries and GPUs. Make sure the disk is persistent.</li>\n  <li>Delete the VM</li>\n  <li>Write the startup script that runs your model training python code. Make sure the python code exports its status (running, failed, done) to some external resources or some internal file as its being executed. Upload the startup script to a bucket on Google Storage</li>\n  <li>Create (1st time) / start (subsequent times) the VM and associate the startup script to it</li>\n  <li>Have a local <em>conductor shutdown</em> script regularly check the status of the training python execution on the VM and shutdown the VM when the status is <em>failed</em> or <em>done</em></li>\n</ol>\n\n<p>Note: Instead of using a startup script, you could also simply run the python model code using the <code class=\"language-plaintext highlighter-rouge\">gcloud compute ssh -- command &lt;python script&gt;</code> command in conjunction with the local <em>conductor shutdown</em> script. But I feel the use of start up scripts basically dedicates the VM to that usage and that usage only. Similarly to writing good quality code, where a method or function should do only one thing at a time, my feeling is that a VM should be used only for one goal and one goal only. After all you can have as many VMs as you like as long as they are idle. Disks prices are low and usually not a problem.</p>\n\n<h1 id=\"conclusion\">Conclusion</h1>\n\n<p>The whole point behind using cloud resources is to leverage its at-will / on-demand capabilities to reduce costs.\nDoing so requires using startup scripts and some external monitoring to shutdown the VM once the task has been completed.</p>\n\n<p>This is of course just one way of doing things.</p>\n\n<p>Please let me know in the comments, how <strong>YOU</strong> manage costly on demand instances. And thanks for reading this post until the end.</p>\n\n<p><br /></p>\n\n<blockquote>\n  <p>If you liked this post, please <a href=\"https://twitter.com/intent/tweet?url=https://alexisperrier.com/gcp/2018/02/21/gpu-costs-compute-engine.html&amp;text=Reduce GPU costs with startup scripts on the Google Cloud Engine&amp;via=alexip\" target=\"_blank\"> share it on twitter</a>\nAnd leave me your feedback, questions, comments, suggestions below.\nMuch appreciated :)\n<br /></p>\n</blockquote>",
  "pubDate": "Wed, 21 Feb 2018 14:00:00 +0000",
  "link": "https://alexisperrier.com/gcp/2018/02/21/gpu-costs-compute-engine.html",
  "guid": "https://alexisperrier.com/gcp/2018/02/21/gpu-costs-compute-engine.html",
  "category": "gcp"
}