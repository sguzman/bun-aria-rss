{
  "id": "tag:blogger.com,1999:blog-15045980.post-1411553411757866650",
  "published": "2020-07-16T09:10:00.000-07:00",
  "updated": "2020-07-16T09:25:06.610-07:00",
  "category": [
    "",
    "",
    ""
  ],
  "title": "Testing on the Toilet: Don’t Mock Types You Don’t Own",
  "content": "<span style=\"font-family: &quot;times&quot; , &quot;times new roman&quot; , serif;\"><span style=\"font-style: italic; vertical-align: baseline; white-space: pre-wrap;\">This article was adapted from a </span><a href=\"http://googletesting.blogspot.com/2007/01/introducing-testing-on-toilet.html\"><span style=\"color: #1155cc; font-style: italic; vertical-align: baseline; white-space: pre-wrap;\">Google Testing on the Toilet</span></a><span style=\"font-style: italic; vertical-align: baseline; white-space: pre-wrap;\"> (TotT) episode. You can download a </span><a href=\"https://docs.google.com/document/d/1sfN_B9MfVtRgXJ692y1G6AwwCF0duCAqS_JF_kEsEx0/edit?usp=sharing\" rel=\"nofollow\"><span style=\"color: #1155cc; font-style: italic; vertical-align: baseline; white-space: pre-wrap;\">printer-friendly version</span></a><span style=\"font-style: italic; vertical-align: baseline; white-space: pre-wrap;\"> of this TotT episode and post it in your office.</span></span><br /><span style=\"font-family: &quot;times&quot; , &quot;times new roman&quot; , serif; font-style: italic; vertical-align: baseline; white-space: pre-wrap;\"><br /></span><span style=\"font-style: italic; vertical-align: baseline; white-space: pre-wrap;\"><span style=\"font-family: &quot;times&quot; , &quot;times new roman&quot; , serif; font-style: normal;\">By Stefan Kennedy and Andrew Trenk</span></span><br /><span style=\"font-family: &quot;times&quot; , &quot;times new roman&quot; , serif;\"><span style=\"font-style: italic; vertical-align: baseline; white-space: pre-wrap;\"><span style=\"font-style: normal;\"><br /></span></span><span style=\"vertical-align: baseline;\"><span style=\"white-space: pre-wrap;\">The code below mocks a third-party library. What problems can arise when doing this?</span></span></span><br /><div style=\"overflow-x: auto;\"><table class=\"my-bordered-table\" style=\"width: 613px;\"><tbody><tr><td style=\"background-color: #f4cccc; vertical-align: top; width: 607px;\"><pre style=\"background-color: #f4cccc; border: 0px; color: black; margin: 0px; padding-bottom: 0px; padding-left: 0px; padding-top: 0px;\"><span style=\"font-family: &quot;consolas&quot; , &quot;courier new&quot; , &quot;courier&quot; , monospace;\"><span style=\"color: #1155cc;\">// Mock a salary payment library</span><br />@Mock <span style=\"font-weight: bold;\">SalaryProcessor mockSalaryProcessor</span>;<br />@Mock <span style=\"font-weight: bold;\">TransactionStrategy mockTransactionStrategy</span>;<br />...<br />when(<span style=\"font-weight: bold;\">mockSalaryProcessor</span>.addStrategy()).thenReturn(<span style=\"font-weight: bold;\">mockTransactionStrategy</span>);<br />when(<span style=\"font-weight: bold;\">mockSalaryProcessor</span>.paySalary()).thenReturn(TransactionStrategy.SUCCESS);<br />MyPaymentService myPaymentService = new MyPaymentService(<span style=\"font-weight: bold;\">mockSalaryProcessor</span>);<br />assertThat(myPaymentService.sendPayment()).isEqualTo(PaymentStatus.SUCCESS);</span></pre></td></tr></tbody></table></div><br /><span id=\"docs-internal-guid-66441720-7fff-bbea-64b4-ca2576bbcdcc\"><span style=\"color: purple; font-family: &quot;times&quot; , &quot;times new roman&quot; , serif;\"><span style=\"font-weight: 700; vertical-align: baseline; white-space: pre-wrap;\">Mocking types you don’t own can make maintenance more difficult</span><span style=\"vertical-align: baseline; white-space: pre-wrap;\">:</span></span></span><br /><ul><li><span style=\"font-family: &quot;times&quot; , &quot;times new roman&quot; , serif;\"><i>It can make it harder to upgrade the library to a new version:</i> The expectations of an API hardcoded in a mock can be wrong or get out of date. This may require time-consuming work to manually update your tests when upgrading the library version. In the above example, an update that changes </span><span style=\"color: #0f9d58; font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">addStrategy()</span><span style=\"font-family: &quot;times&quot; , &quot;times new roman&quot; , serif;\"> to return a new type derived from</span> <span style=\"color: #0f9d58; font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">TransactionStrategy</span><span style=\"font-family: &quot;times&quot; , &quot;times new roman&quot; , serif;\"> (e.g.</span> <span style=\"color: #0f9d58; font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">SalaryStrategy</span><span style=\"font-family: &quot;times&quot; , &quot;times new roman&quot; , serif;\">) requires the mock to be updated to return this type, even though the code under test doesn’t need to be changed since it can still reference </span><span style=\"color: #0f9d58; font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">TransactionStrategy</span>.</li><li><span style=\"font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;\"><span style=\"font-family: &quot;times new roman&quot;;\"><i>It can make it harder to know whether a library update introduced a bug in your code:</i> The assumptions built into mocks may get out of date as changes are made to the library, resulting in tests that pass even when the code under test has a bug. In the above example, if a library update changes <span style=\"color: #0f9d58; font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">paySalary()</span> to instead return <span style=\"color: #0f9d58; font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">TransactionStrategy.SCHEDULED</span>, a bug could potentially be introduced due to the code under test not handling this return value properly. However, the maintainer wouldn’t know because the mock would not return this value so the test would continue to pass.</span></span></li></ul><div><span id=\"docs-internal-guid-db81b340-7fff-66ce-68b9-87506e05722c\" style=\"font-family: &quot;times&quot; , &quot;times new roman&quot; , serif;\"><span style=\"font-weight: 700; vertical-align: baseline; white-space: pre-wrap;\"><span style=\"color: purple;\">Instead of using a mock, use the real implementation, or if that’s not feasible, use a</span></span><span style=\"color: #980000; font-weight: 700; vertical-align: baseline; white-space: pre-wrap;\"> </span><a href=\"https://testing.googleblog.com/2013/06/testing-on-toilet-fake-your-way-to.html\" style=\"text-decoration-line: none;\"><span style=\"color: #1155cc; font-weight: 700; vertical-align: baseline; white-space: pre-wrap;\">fake implementation</span></a><span style=\"color: #980000; font-weight: 700; vertical-align: baseline; white-space: pre-wrap;\"> </span><span style=\"vertical-align: baseline; white-space: pre-wrap;\">that is ideally provided by the library owner. This reduces the maintenance burden since the issues with mocks listed above don’t occur when using a real or fake implementation. For example: </span></span></div><div style=\"overflow-x: auto;\"><table class=\"my-bordered-table\" style=\"width: 613px;\"><tbody><tr><td style=\"background-color: #d9ead3; vertical-align: top; width: 607px;\"><pre style=\"background-color: #d9ead3; border: 0px; color: black; margin: 0px; padding-bottom: 0px; padding-left: 0px; padding-top: 0px;\"><span style=\"font-family: &quot;consolas&quot; , &quot;courier new&quot; , &quot;courier&quot; , monospace;\"><span style=\"font-weight: bold;\">FakeSalaryProcessor fakeProcessor</span> = <span style=\"font-weight: bold;\">new FakeSalaryProcessor();</span> <span style=\"color: #1155cc;\">// Designed for tests</span><br />MyPaymentService myPaymentService = new MyPaymentService(<span style=\"font-weight: bold;\">fakeProcessor</span>);<br />assertThat(myPaymentService.sendPayment()).isEqualTo(PaymentStatus.SUCCESS);</span></pre></td></tr></tbody></table></div><br /><span id=\"docs-internal-guid-3edfd492-7fff-0dc3-a7d1-3a6009a5bf5a\" style=\"font-family: &quot;times&quot; , &quot;times new roman&quot; , serif;\"><span style=\"color: purple;\"><span style=\"font-weight: 700; vertical-align: baseline; white-space: pre-wrap;\">If you can’t use the real implementation and a fake implementation doesn’t exist (and library owners aren’t able to create one), </span><span style=\"background-color: white; font-weight: 700; vertical-align: baseline; white-space: pre-wrap;\">create a wrapper class that calls the type, and mock this instead</span><span style=\"font-weight: 700; vertical-align: baseline; white-space: pre-wrap;\">.</span></span><span style=\"vertical-align: baseline; white-space: pre-wrap;\"> This reduces the maintenance burden by avoiding mocks that rely on the signatures of the library API. For example:</span></span><br /><span style=\"font-family: &quot;times new roman&quot;; font-size: 12pt; vertical-align: baseline; white-space: pre-wrap;\"><br /></span>  <br /><div style=\"overflow-x: auto;\"><table class=\"my-bordered-table\" style=\"width: 613px;\"><tbody><tr><td style=\"background-color: #fff2cc; vertical-align: top; width: 607px;\"><pre style=\"background-color: #fff2cc; border: 0px; color: black; margin: 0px; padding-bottom: 0px; padding-left: 0px; padding-top: 0px;\"><span style=\"font-family: &quot;consolas&quot; , &quot;courier new&quot; , &quot;courier&quot; , monospace;\">@Mock <span style=\"font-weight: bold;\">MySalaryProcessor mockMySalaryProcessor</span>; <span style=\"color: #1155cc;\">// Wraps the SalaryProcessor library</span><br />...<br /><span style=\"color: #1155cc;\">// Mock the wrapper class rather than the library itself</span><br />when(<span style=\"font-weight: bold;\">mockMySalaryProcessor</span>.sendSalary()).thenReturn(PaymentStatus.SUCCESS);<br /><br />MyPaymentService myPaymentService = new MyPaymentService(<span style=\"font-weight: bold;\">mockMySalaryProcessor</span>);<br />assertThat(myPaymentService.sendPayment()).isEqualTo(PaymentStatus.SUCCESS);<br /></span></pre></td></tr></tbody></table></div><br /><span id=\"docs-internal-guid-05127cef-7fff-4938-1a89-b28f378ad8a8\"><span style=\"font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;\"><span style=\"font-family: &quot;times&quot; , &quot;times new roman&quot; , serif;\">To avoid the problems listed above, prefer to test the wrapper class with calls to the real implementation. The downsides of testing with the real implementation (e.g. tests taking longer to run) are limited only to the tests for this wrapper class rather than tests throughout your codebase.</span></span></span><br /><span style=\"font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;\"><span style=\"font-family: &quot;times&quot; , &quot;times new roman&quot; , serif;\"><br /></span></span><span style=\"font-family: &quot;times&quot; , &quot;times new roman&quot; , serif;\"><span style=\"white-space: pre-wrap;\">“Don’t mock types you don’t own” is also described by Steve Freeman and Nat Pryce in their book, <a href=\"http://www.growing-object-oriented-software.com/\">Growing Object Oriented Software, Guided by Tests</a>.&nbsp;</span><span style=\"white-space: pre-wrap;\">For more details about the downsides of overusing mocks (even for types you do own), see <a href=\"https://testing.googleblog.com/2013/05/testing-on-toilet-dont-overuse-mocks.html\">this</a> Google Testing Blog post.</span></span>",
  "link": [
    "",
    "",
    "",
    "",
    ""
  ],
  "author": {
    "name": "Google Testing Bloggers",
    "uri": "http://www.blogger.com/profile/03153388556673050910",
    "email": "noreply@blogger.com",
    "gd:image": ""
  },
  "thr:total": 1
}