{
  "title": "Python and Tidyverse",
  "link": "https://itsalocke.com/blog/python-and-tidyverse/",
  "pubDate": "Fri, 01 Jun 2018 00:00:00 +0000",
  "guid": "https://itsalocke.com/blog/python-and-tidyverse/",
  "description": "<h2 id=\"introduction\">Introduction</h2>\n\n<p>One of the great things about the R world has been a collection of R\npackages called tidyverse that are easy for beginners to learn and\nprovide a consistent data manipulation and visualisation space. The\nvalue of these tools has been so great that many of them have been\nported to Python. That&rsquo;s why we thought we should provide an\nintroduction to tidyverse for Python blog post.</p>\n\n<h2 id=\"what-is-tidyverse\">What is tidyverse?</h2>\n\n<p><a href=\"https://www.tidyverse.org/\">Tidyverse</a> is an opinionated collection of\nR packages designed for data science. All packages share an underlying\ndesign philosophy, grammar, and data structures. The core R tidyverse\npackages are: ggplot2, dplyr, tidyr, readr, purrr, tibble, stringr and\nforcats.</p>\n\n<h2 id=\"python-implementation-of-dplyr\">Python implementation of dplyr</h2>\n\n<p>The tidyverse package <a href=\"https://dplyr.tidyverse.org/\">dplyr</a> is a grammar\nof data manipulation, providing a consistent set of verbs that help you\nsolve the most common data manipulation challenges. Here are some of the\nfunctions dplyr provides that are commonly used:</p>\n\n<ul>\n<li>mutate() - adds new variables that are functions of existing\nvariables</li>\n<li>select() - picks variables based on their names.</li>\n<li>filter() - picks cases based on their values.</li>\n<li>summarise() - reduces multiple values down to a single summary.</li>\n<li>arrange() - changes the ordering of the rows.</li>\n</ul>\n\n<p><a href=\"https://github.com/dodger487/dplython\">Dplython</a> is a Python\nimplementation of dplyr which can be installed using pip and the\nfollowing command:</p>\n\n<p><code>pip install dplython</code></p>\n\n<p>Instructions on how to use pip to install python packages can be found\n<a href=\"https://packaging.python.org/tutorials/installing-packages/\">here</a>.</p>\n\n<p>The <a href=\"https://github.com/dodger487/dplython\">Dplython</a> README provides\nsome clear examples of how the package can be used. Below is an summary\nof the common functions:</p>\n\n<ul>\n<li>select() - used to get specific columns of the data-frame.</li>\n<li>sift() - used to filter out rows based on the value of a variable in\nthat row.</li>\n<li>sample_n() and sample_frac() - used to provide a random sample of\nrows from the data-frame.</li>\n<li>arrange() - used to sort results.</li>\n<li>mutate() - used to create new columns based on existing columns.</li>\n</ul>\n\n<p>For more functions and example code visit the Dplython\n<a href=\"https://github.com/dodger487/dplython\">README</a> page.</p>\n\n<p>At the bottom of the README a comparison is provided to\n<a href=\"https://pythonhosted.org/pandas-ply/\">pandas-ply</a> which is another\npython implementation of dplyr.</p>\n\n<p>Dplython comes with a sample data-set called &lsquo;diamonds&rsquo;. Here are some\nbasic examples of how to use Dplython.</p>\n\n<p>Import Python packages and the &lsquo;diamonds&rsquo; data-frame:</p>\n\n<pre><code>import pandas\nfrom dplython import (DplyFrame, X, diamonds, select, sift, sample_n,\n    sample_frac, head, arrange, mutate, group_by, summarize, DelayFunction) \n</code></pre>\n\n<p>Create a new data-frame by selecting columns of the &lsquo;diamonds&rsquo;\ndata-frame:</p>\n\n<pre><code>diamondsSmall = diamonds &gt;&gt; select(X.carat, X.cut, X.price, X.color, X.clarity  , X.depth  , X.table)\n</code></pre>\n\n<p>Display the top 4 rows of the &lsquo;diamondsSmall&rsquo; data-frame:</p>\n\n<pre><code>print(diamondsSmall &gt;&gt; head(4)) \n\n##    carat      cut  price color clarity  depth  table\n## 0   0.23    Ideal    326     E     SI2   61.5   55.0\n## 1   0.21  Premium    326     E     SI1   59.8   61.0\n## 2   0.23     Good    327     E     VS1   56.9   65.0\n## 3   0.29  Premium    334     I     VS2   62.4   58.0\n</code></pre>\n\n<p>Filter the data-frame for rows where the price is higher than 18,000 and\nthe carat less than 1.2 and sort them by depth:</p>\n\n<pre><code>print((diamondsSmall &gt;&gt; sift(X.price &gt; 18000, X.carat &lt; 1.2) &gt;&gt; arrange(X.depth)))\n\n##        carat        cut  price color clarity  depth  table\n## 27455   1.14  Very Good  18112     D      IF   59.1   58.0\n## 27457   1.07  Very Good  18114     D      IF   60.9   58.0\n## 27530   1.07    Premium  18279     D      IF   60.9   58.0\n## 27635   1.04  Very Good  18542     D      IF   61.3   56.0\n## 27507   1.09  Very Good  18231     D      IF   61.7   58.0\n</code></pre>\n\n<p>Provide a random sample of 5 rows from the data-frame</p>\n\n<pre><code>print(diamondsSmall &gt;&gt; sample_n(5))\n\n##        carat        cut  price color clarity  depth  table\n## 320     0.71       Good   2801     F     VS2   57.8   60.0\n## 9813    0.91    Premium   4670     H     VS1   61.8   54.0\n## 11795   1.18  Very Good   5088     E     SI2   62.5   60.0\n## 11845   0.95  Very Good   5101     D     SI1   63.7   55.0\n## 11552   1.17      Ideal   5032     F     SI1   63.0   54.0\n</code></pre>\n\n<p>Add a column to the data-frame containing the rounded value of &lsquo;carat&rsquo;</p>\n\n<pre><code>print((diamondsSmall &gt;&gt; mutate(carat_bin=X.carat.round()) &gt;&gt;  sample_n(5)))\n\n##        carat        cut  price color clarity  depth  table  carat_bin\n## 11883   0.99  Very Good   5112     F     SI1   62.5   58.0        1.0\n## 45123   0.77       Fair   1651     D     SI2   65.1   63.0        1.0\n## 51630   0.31    Premium    544     E     SI1   59.2   60.0        0.0\n## 49382   0.51  Very Good   2102     G      IF   62.6   56.0        1.0\n## 18296   1.54  Very Good   7437     I     SI2   63.3   60.0        2.0\n</code></pre>\n\n<h2 id=\"python-implementation-of-ggplot2\">Python implementation of ggplot2</h2>\n\n<p>The tidyverse package <a href=\"http://ggplot2.tidyverse.org/\">ggplot2</a> is a\nsystem for declaratively creating graphics, based on The Grammar of\nGraphics. You provide the data, tell ggplot2 how to map variables to\naesthetics, what graphical primitives to use, and it takes care of the\ndetails.</p>\n\n<p>A Python port of ggplot2 has long been requested and there are now a few\nPython implementations of it; <a href=\"http://plotnine.readthedocs.io\">Plotnine</a>\nis the one we will explore here. Plotting with a grammar is powerful, it\nmakes custom (and otherwise complex) plots easy to think about and\ncreate, while the plots remain simple.</p>\n\n<p>Plotnine can be installed using pip:</p>\n\n<p><code>pip install plotnine</code></p>\n\n<p>Plotnine splits plotting into three distinct parts which are data,\naesthetics and layers. The data step adds the data to the graph, the\naesthetics (aes) step adds visual attributes and the layers step creates\nthe objects on a plot. Multiple aesthetics and layers functions can be\nadded to a Plotnine graph.</p>\n\n<p>If you are a python user used to Matplotlib it can take some getting\nused to a Grammar of Graphics plotting tool which is partly due to the\n<a href=\"https://goo.gl/QVf76X\">difference in philosophy</a>. Plotnine provides\nsome\n<a href=\"http://plotnine.readthedocs.io/en/stable/tutorials.html\">tutorials</a> to\nhelp with getting to grips with the package and there is also the\n<a href=\"https://github.com/has2k1/plotnine\">Plotnine README</a>. However if you\nare new to Grammar of Graphics plotting then this highly recommended\n<a href=\"https://goo.gl/y1GBRu\">kaggle notebook for Plotnine</a> is probably the\nbest place to start.</p>\n\n<p>Here are some examples of how to use plotnine to visualize data from the\n&lsquo;diamonds&rsquo; data-frame that comes with Dplython.</p>\n\n<p>Import Python packages, the &lsquo;diamonds&rsquo; data-frame and create a sample\ndata-frame:</p>\n\n<pre><code>import warnings; warnings.filterwarnings(&quot;ignore&quot;) # hide Python warnings \nimport pandas\nimport dplython as dplython\nfrom plotnine import *\ndiamondsSample = dplython.diamonds &gt;&gt; dplython.sample_n(5000)\n</code></pre>\n\n<p>Create a scatter plot of &lsquo;carat&rsquo; vs &lsquo;price&rsquo;:</p>\n\n<pre><code>print(ggplot(diamondsSample) # diamondsSample is the data  \n + aes('carat', 'price') # plot 'carat' vs 'price'\n + geom_point() # display the results as a scatter plot\n )\n\n## &lt;ggplot: (41012744)&gt;\n</code></pre>\n\n<p><img src=\"2018-05-04-python-tidyverse_files/figure-markdown_strict/unnamed-chunk-8-1.png\" alt=\"\" /></p>\n\n<p>Add additional layers e.g. a line of best fit:</p>\n\n<pre><code>print(ggplot(diamondsSample)  \n + aes('carat', 'price') \n + stat_smooth() # add a line of best fit\n + geom_point()) \n\n## &lt;ggplot: (-9223372036813567705)&gt;\n</code></pre>\n\n<p><img src=\"2018-05-04-python-tidyverse_files/figure-markdown_strict/unnamed-chunk-9-1.png\" alt=\"\" /></p>\n\n<p>Add another aesthetic, here the data is coloured by the &lsquo;cut&rsquo; variable:</p>\n\n<pre><code>print(ggplot(diamondsSample)\n + aes('carat', 'price')\n + aes(color='cut') # colour the data by the variable cut and create a ledgend \n + geom_point())\n\n## &lt;ggplot: (-9223372036816020904)&gt;\n</code></pre>\n\n<p><img src=\"2018-05-04-python-tidyverse_files/figure-markdown_strict/unnamed-chunk-10-1.png\" alt=\"\" /></p>\n\n<p>Add a layer which separates the data into graphs based on &lsquo;colour&rsquo;</p>\n\n<pre><code>print(ggplot(diamondsSample)\n + aes('carat', 'price')\n + aes(color='cut')\n + facet_wrap('color') # seperate the data by 'colour' and graph seperately  \n + geom_point())\n\n## &lt;ggplot: (64014519)&gt;\n</code></pre>\n\n<p><img src=\"2018-05-04-python-tidyverse_files/figure-markdown_strict/unnamed-chunk-11-1.png\" alt=\"\" /></p>\n\n<p>This <a href=\"https://goo.gl/rdlJSa\">article</a> compares a variety of alternative\nplotting packages for Python.</p>\n\n<h2 id=\"next-steps\">Next steps</h2>\n\n<ul>\n<li>Read the documents that are linked in this blog post.</li>\n<li>Learn the basics of <a href=\"https://pandas.pydata.org/\">Pandas</a>.</li>\n<li>Use Dplython and Plotnine to practice data manipulation &amp;\nvisualization. For example complete some of the exercises at\n<a href=\"https://www.kaggle.com/\">kaggle</a>.</li>\n</ul>\n\n<p>Do you know of other good Python implementations of tidyverse? If so let\nus know about them!</p>"
}