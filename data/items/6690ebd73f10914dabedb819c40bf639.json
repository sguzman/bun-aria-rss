{
  "title": "Introducing Blaze - Expressions",
  "link": "",
  "updated": "2014-09-01T00:00:00+00:00",
  "id": "https://mrocklin.github.io/blog/work/2014/09/01/Blaze-Expressions",
  "content": "<p><em>This work is supported by <a href=\"http://continuum.io\">Continuum Analytics</a>\nand the <a href=\"http://www.darpa.mil/program/XDATA\">XDATA Grant</a>\nas part of the <a href=\"http://blaze.pydata.org\">Blaze Project</a></em></p>\n\n<p><strong>tl;dr Blaze abstracts tabular computation, providing uniform access to a\nvariety of database technologies</strong></p>\n\n<h2 id=\"introduction\">Introduction</h2>\n\n<p>NumPy and Pandas couple a high level interface with fast low-level computation.\nThey allow us to manipulate data intuitively and efficiently.</p>\n\n<p>Occasionally we run across a dataset that is too big to fit in our computer’s\nmemory.  In this case NumPy and Pandas don’t fit our needs and we look to\nother tools to manage and analyze our data.  Popular choices include databases\nlike Postgres and MongoDB, out-of-disk storage systems like PyTables and BColz\nand the menagerie of tools on top of the Hadoop File System (Hadoop, Spark,\nImpala and derivatives.)</p>\n\n<p>Each of these systems has their own strengths and weaknesses and an experienced\ndata analyst will choose the right tool for the problem at hand.  Unfortunately\nlearning how each system works and pushing data into the proper form often\ntakes most of the data scientist’s time.</p>\n\n<p><em>The startup costs of learning to munge and migrate data between new\ntechnologies often dominate biggish-data analytics.</em></p>\n\n<p>Blaze strives to reduce this friction.  Blaze provides a uniform interface to\na variety of database technologies and abstractions for migrating data.</p>\n\n<h2 id=\"expressions\">Expressions</h2>\n\n<p>At its core, Blaze is a way to express data and computations.</p>\n\n<p>In the following example we build an abstract table for accounts in a\nsimple bank.  We then describe a query, <code class=\"language-plaintext highlighter-rouge\">deadbeats</code>, to find the names of the\naccount holders with a negative balance.</p>\n\n<figure class=\"highlight\">\n  <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"kn\">from</span> <span class=\"nn\">blaze</span> <span class=\"kn\">import</span> <span class=\"n\">TableSymbol</span><span class=\"p\">,</span> <span class=\"n\">compute</span>\n<span class=\"n\">accounts</span> <span class=\"o\">=</span> <span class=\"n\">TableSymbol</span><span class=\"p\">(</span><span class=\"s\">'accounts'</span><span class=\"p\">,</span> <span class=\"s\">'{id: int, name: string, amount: int}'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># The names of account holders with negative balance\n</span><span class=\"n\">deadbeats</span> <span class=\"o\">=</span> <span class=\"n\">accounts</span><span class=\"p\">[</span><span class=\"n\">accounts</span><span class=\"p\">[</span><span class=\"s\">'amount'</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"s\">'name'</span><span class=\"p\">]</span></code></pre>\n</figure>\n\n<p>Programmers familiar with Pandas should find the syntax to create <code class=\"language-plaintext highlighter-rouge\">deadbeats</code>\nfamiliar.  Note that we haven’t actually done any work yet.  The table\n<code class=\"language-plaintext highlighter-rouge\">accounts</code> is purely imaginary and so the <code class=\"language-plaintext highlighter-rouge\">deadbeats</code> expression is just an\nexpression of intent.  The Pandas-like syntax builds up a graph of operations\nto perform later.</p>\n\n<p>However, if we happen to have some similarly shaped data lying around</p>\n\n<figure class=\"highlight\">\n  <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"n\">L</span> <span class=\"o\">=</span> <span class=\"p\">[[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s\">'Alice'</span><span class=\"p\">,</span>   <span class=\"mi\">100</span><span class=\"p\">],</span>\n     <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s\">'Bob'</span><span class=\"p\">,</span>    <span class=\"o\">-</span><span class=\"mi\">200</span><span class=\"p\">],</span>\n     <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s\">'Charlie'</span><span class=\"p\">,</span> <span class=\"mi\">300</span><span class=\"p\">],</span>\n     <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"s\">'Dennis'</span><span class=\"p\">,</span>  <span class=\"mi\">400</span><span class=\"p\">],</span>\n     <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"s\">'Edith'</span><span class=\"p\">,</span>  <span class=\"o\">-</span><span class=\"mi\">500</span><span class=\"p\">]]</span></code></pre>\n</figure>\n\n<p>We can combine our expression, <code class=\"language-plaintext highlighter-rouge\">deadbeats</code> with our data <code class=\"language-plaintext highlighter-rouge\">L</code> to compute an\nactual result</p>\n\n<figure class=\"highlight\">\n  <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">compute</span><span class=\"p\">(</span><span class=\"n\">deadbeats</span><span class=\"p\">,</span> <span class=\"n\">L</span><span class=\"p\">)</span> <span class=\"c1\"># an iterator as a result\n</span><span class=\"o\">&lt;</span><span class=\"n\">itertools</span><span class=\"p\">.</span><span class=\"n\">imap</span> <span class=\"n\">at</span> <span class=\"mh\">0x7fdd7fcde450</span><span class=\"o\">&gt;</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">compute</span><span class=\"p\">(</span><span class=\"n\">deadbeats</span><span class=\"p\">,</span> <span class=\"n\">L</span><span class=\"p\">))</span>\n<span class=\"p\">[</span><span class=\"s\">'Bob'</span><span class=\"p\">,</span> <span class=\"s\">'Edith'</span><span class=\"p\">]</span></code></pre>\n</figure>\n\n<p>So in its simplest incarnation, Blaze is a way to write down computations\nabstractly which can later be applied to real data.</p>\n\n<h3 id=\"multiple-backends---pandas\">Multiple Backends - Pandas</h3>\n\n<p>Fortunately the <code class=\"language-plaintext highlighter-rouge\">deadbeats</code> expression can run against many different kinds of\ndata.  We just computed <code class=\"language-plaintext highlighter-rouge\">deadbeats</code> against Python lists, here we compute it\nagainst a Pandas DataFrame</p>\n\n<figure class=\"highlight\">\n  <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"kn\">from</span> <span class=\"nn\">pandas</span> <span class=\"kn\">import</span> <span class=\"n\">DataFrame</span>\n<span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">DataFrame</span><span class=\"p\">([[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s\">'Alice'</span><span class=\"p\">,</span>   <span class=\"mi\">100</span><span class=\"p\">],</span>\n                <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s\">'Bob'</span><span class=\"p\">,</span>    <span class=\"o\">-</span><span class=\"mi\">200</span><span class=\"p\">],</span>\n                <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s\">'Charlie'</span><span class=\"p\">,</span> <span class=\"mi\">300</span><span class=\"p\">],</span>\n                <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"s\">'Dennis'</span><span class=\"p\">,</span>  <span class=\"mi\">400</span><span class=\"p\">],</span>\n                <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"s\">'Edith'</span><span class=\"p\">,</span>  <span class=\"o\">-</span><span class=\"mi\">500</span><span class=\"p\">]],</span>\n               <span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s\">'id'</span><span class=\"p\">,</span> <span class=\"s\">'name'</span><span class=\"p\">,</span> <span class=\"s\">'amount'</span><span class=\"p\">])</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">compute</span><span class=\"p\">(</span><span class=\"n\">deadbeats</span><span class=\"p\">,</span> <span class=\"n\">df</span><span class=\"p\">)</span>\n<span class=\"mi\">1</span>      <span class=\"n\">Bob</span>\n<span class=\"mi\">4</span>    <span class=\"n\">Edith</span>\n<span class=\"n\">Name</span><span class=\"p\">:</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">dtype</span><span class=\"p\">:</span> <span class=\"nb\">object</span></code></pre>\n</figure>\n\n<p>Note that Blaze didn’t perform the computation here, Pandas did (it’s good at\nthat), Blaze just told Pandas what to do.  Blaze doesn’t compute results; Blaze\ndrives other systems to compute results.</p>\n\n<h3 id=\"multiple-backends---mongodb\">Multiple Backends - MongoDB</h3>\n\n<p>To demonstrate some breadth, let’s show Blaze driving a Mongo Database.</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>$ # We install and run MongoDB locally\n$ sudo apt-get install mongodb-server\n$ mongod &amp;\n$ pip install pymongo\n</code></pre></div></div>\n\n<figure class=\"highlight\">\n  <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"kn\">import</span> <span class=\"nn\">pymongo</span>\n<span class=\"n\">db</span> <span class=\"o\">=</span> <span class=\"n\">pymongo</span><span class=\"p\">.</span><span class=\"n\">MongoClient</span><span class=\"p\">().</span><span class=\"n\">db</span>\n<span class=\"n\">db</span><span class=\"p\">.</span><span class=\"n\">mycollection</span><span class=\"p\">.</span><span class=\"n\">insert</span><span class=\"p\">([{</span><span class=\"s\">'id'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s\">'name'</span><span class=\"p\">:</span> <span class=\"s\">'Alice'</span><span class=\"p\">,</span>   <span class=\"s\">'amount'</span><span class=\"p\">:</span>  <span class=\"mi\">100</span><span class=\"p\">},</span>\n                        <span class=\"p\">{</span><span class=\"s\">'id'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s\">'name'</span><span class=\"p\">:</span> <span class=\"s\">'Bob'</span><span class=\"p\">,</span>     <span class=\"s\">'amount'</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mi\">200</span><span class=\"p\">},</span>\n                        <span class=\"p\">{</span><span class=\"s\">'id'</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s\">'name'</span><span class=\"p\">:</span> <span class=\"s\">'Charlie'</span><span class=\"p\">,</span> <span class=\"s\">'amount'</span><span class=\"p\">:</span>  <span class=\"mi\">300</span><span class=\"p\">},</span>\n                        <span class=\"p\">{</span><span class=\"s\">'id'</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"s\">'name'</span><span class=\"p\">:</span> <span class=\"s\">'Dennis'</span><span class=\"p\">,</span>  <span class=\"s\">'amount'</span><span class=\"p\">:</span>  <span class=\"mi\">400</span><span class=\"p\">},</span>\n                        <span class=\"p\">{</span><span class=\"s\">'id'</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"s\">'name'</span><span class=\"p\">:</span> <span class=\"s\">'Edith'</span><span class=\"p\">,</span>   <span class=\"s\">'amount'</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mi\">500</span><span class=\"p\">}])</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">compute</span><span class=\"p\">(</span><span class=\"n\">deadbeats</span><span class=\"p\">,</span> <span class=\"n\">db</span><span class=\"p\">.</span><span class=\"n\">mycollection</span><span class=\"p\">)</span>\n<span class=\"p\">[</span><span class=\"sa\">u</span><span class=\"s\">'Bob'</span><span class=\"p\">,</span> <span class=\"sa\">u</span><span class=\"s\">'Edith'</span><span class=\"p\">]</span></code></pre>\n</figure>\n\n<h2 id=\"recap\">Recap</h2>\n\n<p>To remind you we created a single Blaze query</p>\n\n<figure class=\"highlight\">\n  <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"n\">accounts</span> <span class=\"o\">=</span> <span class=\"n\">TableSymbol</span><span class=\"p\">(</span><span class=\"s\">'accounts'</span><span class=\"p\">,</span> <span class=\"s\">'{id: int, name: string, amount: int}'</span><span class=\"p\">)</span>\n<span class=\"n\">deadbeats</span> <span class=\"o\">=</span> <span class=\"n\">accounts</span><span class=\"p\">[</span><span class=\"n\">accounts</span><span class=\"p\">[</span><span class=\"s\">'amount'</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"s\">'name'</span><span class=\"p\">]</span></code></pre>\n</figure>\n\n<p>And then executed that same query against multiple backends</p>\n\n<figure class=\"highlight\">\n  <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">compute</span><span class=\"p\">(</span><span class=\"n\">deadbeats</span><span class=\"p\">,</span> <span class=\"n\">L</span><span class=\"p\">))</span>          <span class=\"c1\"># Python\n</span><span class=\"p\">[</span><span class=\"s\">'Bob'</span><span class=\"p\">,</span> <span class=\"s\">'Edith'</span><span class=\"p\">]</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">compute</span><span class=\"p\">(</span><span class=\"n\">deadbeats</span><span class=\"p\">,</span> <span class=\"n\">df</span><span class=\"p\">)</span>               <span class=\"c1\"># Pandas\n</span><span class=\"mi\">1</span>      <span class=\"n\">Bob</span>\n<span class=\"mi\">4</span>    <span class=\"n\">Edith</span>\n<span class=\"n\">Name</span><span class=\"p\">:</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">dtype</span><span class=\"p\">:</span> <span class=\"nb\">object</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">compute</span><span class=\"p\">(</span><span class=\"n\">deadbeats</span><span class=\"p\">,</span> <span class=\"n\">db</span><span class=\"p\">.</span><span class=\"n\">mycollection</span><span class=\"p\">)</span>  <span class=\"c1\"># MongoDB\n</span><span class=\"p\">[</span><span class=\"sa\">u</span><span class=\"s\">'Bob'</span><span class=\"p\">,</span> <span class=\"sa\">u</span><span class=\"s\">'Edith'</span><span class=\"p\">]</span></code></pre>\n</figure>\n\n<p>At the time of this writing Blaze supports the following backends</p>\n\n<ul>\n  <li>Pure Python</li>\n  <li>Pandas</li>\n  <li>MongoDB</li>\n  <li>SQL</li>\n  <li>PySpark</li>\n  <li>PyTables</li>\n  <li>BColz</li>\n</ul>\n\n<h2 id=\"interactivity\">Interactivity</h2>\n\n<p>The separation of expressions and computation is core to Blaze.  It’s also\nconfusing for new Blaze users.\nNumPy and Pandas demonstrated the value of immediate data interaction and\nhaving to explicitly call <code class=\"language-plaintext highlighter-rouge\">compute</code> is a step backward from that goal.</p>\n\n<p>To this end we create the <code class=\"language-plaintext highlighter-rouge\">Table</code> abstraction, a <code class=\"language-plaintext highlighter-rouge\">TableSymbol</code> that knows about\na particular data resource.  Operations on this <code class=\"language-plaintext highlighter-rouge\">Table</code> object produce abstract\nexpressions just like normal, but statements that would normally print results\nto the screen initiate calls to <code class=\"language-plaintext highlighter-rouge\">compute</code> and then print those results, giving\nan interactive feel in a console or notebook</p>\n\n<figure class=\"highlight\">\n  <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">blaze</span> <span class=\"kn\">import</span> <span class=\"n\">Table</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">Table</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"p\">.</span><span class=\"n\">mycollection</span><span class=\"p\">)</span>  <span class=\"c1\"># give MongoDB resource to Table\n</span><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">t</span>\n   <span class=\"n\">amount</span>  <span class=\"nb\">id</span>     <span class=\"n\">name</span>\n<span class=\"mi\">0</span>     <span class=\"mi\">100</span>   <span class=\"mi\">1</span>    <span class=\"n\">Alice</span>\n<span class=\"mi\">1</span>    <span class=\"o\">-</span><span class=\"mi\">200</span>   <span class=\"mi\">2</span>      <span class=\"n\">Bob</span>\n<span class=\"mi\">2</span>     <span class=\"mi\">300</span>   <span class=\"mi\">3</span>  <span class=\"n\">Charlie</span>\n<span class=\"mi\">3</span>     <span class=\"mi\">400</span>   <span class=\"mi\">4</span>   <span class=\"n\">Dennis</span>\n<span class=\"mi\">4</span>    <span class=\"o\">-</span><span class=\"mi\">500</span>   <span class=\"mi\">5</span>    <span class=\"n\">Edith</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">t</span><span class=\"p\">[</span><span class=\"n\">t</span><span class=\"p\">.</span><span class=\"n\">amount</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n   <span class=\"n\">amount</span>  <span class=\"nb\">id</span>   <span class=\"n\">name</span>\n<span class=\"mi\">0</span>    <span class=\"o\">-</span><span class=\"mi\">200</span>   <span class=\"mi\">2</span>    <span class=\"n\">Bob</span>\n<span class=\"mi\">1</span>    <span class=\"o\">-</span><span class=\"mi\">500</span>   <span class=\"mi\">5</span>  <span class=\"n\">Edith</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">[</span><span class=\"n\">t</span><span class=\"p\">.</span><span class=\"n\">amount</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"p\">])</span>        <span class=\"c1\"># Still just an expression\n</span><span class=\"n\">blaze</span><span class=\"p\">.</span><span class=\"n\">expr</span><span class=\"p\">.</span><span class=\"n\">table</span><span class=\"p\">.</span><span class=\"n\">Selection</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">print</span> <span class=\"nb\">repr</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">[</span><span class=\"n\">t</span><span class=\"p\">.</span><span class=\"n\">amount</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"p\">])</span>  <span class=\"c1\"># repr triggers call to compute\n</span>   <span class=\"n\">amount</span>  <span class=\"nb\">id</span>   <span class=\"n\">name</span>\n<span class=\"mi\">0</span>    <span class=\"o\">-</span><span class=\"mi\">200</span>   <span class=\"mi\">2</span>    <span class=\"n\">Bob</span>\n<span class=\"mi\">1</span>    <span class=\"o\">-</span><span class=\"mi\">500</span>   <span class=\"mi\">5</span>  <span class=\"n\">Edith</span></code></pre>\n</figure>\n\n<p>These expressions generate the appropriate MongoDB queries, call <code class=\"language-plaintext highlighter-rouge\">compute</code> only\nwhen we print a result to the screen, and then push the result into a\n<code class=\"language-plaintext highlighter-rouge\">DataFrame</code> to use Pandas’ excellent tabular printing.  For large datasets we\nalways append a <code class=\"language-plaintext highlighter-rouge\">.head(10)</code> call to the expression to only retrieve the sample\nof the output necessary to print to the screen;  this avoids large data\ntransfers when not necessary.</p>\n\n<p>Using the interactive <code class=\"language-plaintext highlighter-rouge\">Table</code> object we can interact with a variety of\ncomputational backends with the familiarity of a local DataFrame.</p>\n\n<h2 id=\"more-information\">More Information</h2>\n\n<ul>\n  <li>Documentation: <a href=\"http://blaze.pydata.org/\">blaze.pydata.org/</a></li>\n  <li>Source: <a href=\"http://github.com/ContinuumIO/blaze/\">github.com/ContinuumIO/blaze/</a></li>\n  <li>\n    <p>Install with <a href=\"https://store.continuum.io/cshop/anaconda/\">Anaconda</a>:</p>\n\n    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>conda install blaze\n</code></pre></div>    </div>\n  </li>\n</ul>"
}