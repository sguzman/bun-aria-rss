{
  "title": "Quick tutorial on MySQL",
  "link": "",
  "published": "2015-01-16T16:07:00-08:00",
  "updated": "2015-01-16T16:07:00-08:00",
  "author": {
    "name": "Jonathan Landy"
  },
  "id": "tag:efavdb.com,2015-01-16:/quick-tutorial-on-mysql",
  "summary": "<p>Here, we give a quick (&lt; 30 mins) introduction to the open source database software package MySQL. The post is intended to be useful for folks totally new to the program, as well as for those who find that they often need reminders on its basic syntax (that is, people like …</p>",
  "content": "<p>Here, we give a quick (&lt; 30 mins) introduction to the open source database software package MySQL. The post is intended to be useful for folks totally new to the program, as well as for those who find that they often need reminders on its basic syntax (that is, people like&nbsp;us).</p>\n<p><a href=\"http://twitter.com/efavdb\">Follow&nbsp;@efavdb</a></p>\n<p>Follow us on twitter for new submission&nbsp;alerts!</p>\n<h4><strong>Getting&nbsp;started</strong></h4>\n<p>MySQL is a database software package that allows users to quickly access subsets of data contained within tables, and also to carry out simple operations on this data. The software is quite powerful, but it can be surprisingly unintuitive for beginners. The best way to get the hang of it is to play around with it a bit. This post provides a set of commands that should help you get a feel for how it works. If you&#8217;re a beginner reading this, we suggest <a href=\"http://dev.mysql.com/doc/refman/5.5/en/installing.html\">installing</a> it on your personal computer or server, and following along by trying each of the commands we go through here. Once it&#8217;s installed and you have its server running, you can often access MySQL from the command line by&nbsp;typing</p>\n<div class=\"highlight\"><pre><span></span>mysql\n</pre></div>\n\n\n<p>On a mac, you may need to use the following&nbsp;though</p>\n<div class=\"highlight\"><pre><span></span>/usr/local/mysql/bin/mysql -uroot\n</pre></div>\n\n\n<p>Once mysql is loaded, you can see what databases are available by&nbsp;typing</p>\n<div class=\"highlight\"><pre><span></span><span class=\"k\">SHOW</span> <span class=\"n\">DATABASES</span><span class=\"p\">;</span>\n</pre></div>\n\n\n<p>Notice that a semi-colon is used to terminate commands: In general, these can extend across multiple lines and the semi-colon tells the program where the command stops. Also, MySQL is case-insensitive, but it is considered good form to have all command calls capitalized for easier reading. If no databases yet exist, you can create one as&nbsp;follows:</p>\n<div class=\"highlight\"><pre><span></span><span class=\"k\">CREATE</span> <span class=\"k\">DATABASE</span> <span class=\"n\">animalDB</span><span class=\"p\">;</span>\n</pre></div>\n\n\n<p>Here, <code>animalDB</code> is the name of the database. From the list of available databases,\nyou can select one of interest with the <code>USE</code> command. For&nbsp;example,</p>\n<div class=\"highlight\"><pre><span></span><span class=\"n\">USE</span> <span class=\"n\">animalDB</span><span class=\"p\">;</span>\n</pre></div>\n\n\n<p>Each database can contain many tables. To see the tables contained in a database, use the <span class=\"caps\">SHOW</span>&nbsp;command,</p>\n<div class=\"highlight\"><pre><span></span><span class=\"k\">SHOW</span> <span class=\"n\">tables</span><span class=\"p\">;</span>\n</pre></div>\n\n\n<h4><strong>Table creation and&nbsp;alteration</strong></h4>\n<p><span class=\"caps\">SQL</span> tables have a name and a set of rows and columns. The columns have types that are defined upon table creation (<code>INT, BIGINT, FLOAT, DOUBLE, CHAR, VARCHAR</code>, etc.). The rows correspond to individual table entries. To illustrate, we’ll now create a table called “MyPets”, with a column for pet name, species, and age. This is done with the&nbsp;command</p>\n<div class=\"highlight\"><pre><span></span><span class=\"k\">CREATE</span> <span class=\"k\">TABLE</span> <span class=\"n\">MyPets</span> <span class=\"p\">(</span><span class=\"n\">name</span> <span class=\"nb\">VARCHAR</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">),</span>\n    <span class=\"n\">species</span> <span class=\"nb\">VARCHAR</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">),</span> <span class=\"n\">age</span> <span class=\"nb\">INT</span><span class=\"p\">);</span>\n</pre></div>\n\n\n<p>Here, we are using the <code>VARCHAR</code> type for our two string columns. The argument supplied allows us to use strings up to length <code>10</code> for these entries. We could also have used the <code>CHAR(10)</code> type here, but that would result in trailing spaces following names shorter than <code>10</code> characters. We now insert some entries using the <code>INSERT</code> command,</p>\n<div class=\"highlight\"><pre><span></span><span class=\"k\">INSERT</span> <span class=\"k\">INTO</span> <span class=\"n\">MyPets</span> <span class=\"k\">VALUES</span> <span class=\"p\">(</span><span class=\"ss\">&quot;Bottles&quot;</span><span class=\"p\">,</span> <span class=\"ss\">&quot;Dog&quot;</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">);</span>\n<span class=\"k\">INSERT</span> <span class=\"k\">INTO</span> <span class=\"n\">MyPets</span> <span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">species</span><span class=\"p\">)</span> <span class=\"k\">VALUES</span> <span class=\"p\">(</span><span class=\"ss\">&quot;Mac&quot;</span><span class=\"p\">,</span> <span class=\"ss\">&quot;Dog&quot;</span><span class=\"p\">);</span>\n<span class=\"k\">INSERT</span> <span class=\"k\">INTO</span> <span class=\"n\">MyPets</span> <span class=\"k\">VALUES</span> <span class=\"p\">(</span><span class=\"ss\">&quot;Hector&quot;</span><span class=\"p\">,</span> <span class=\"ss\">&quot;Cat&quot;</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n</pre></div>\n\n\n<p>Here, we’ve illustrated two different methods to do insertion. In the first and third lines, we have values for all columns. However, in the second, no age is supplied, so we have to specify which columns the values we are supplying correspond to. The age column for this entry will read <code>NULL</code>, since no value was provided for it. To view the table, we write – with <code>SELECT</code> and <code>∗</code> meaning &#8220;retrieve&#8221; and “all”, respectively&nbsp;–</p>\n<div class=\"highlight\"><pre><span></span><span class=\"k\">SELECT</span> <span class=\"o\">*</span> <span class=\"k\">FROM</span> <span class=\"n\">MyPets</span><span class=\"p\">;</span>\n<span class=\"o\">&gt;&gt;</span>\n    <span class=\"o\">+</span><span class=\"c1\">---------+---------+------+</span>\n    <span class=\"o\">|</span> <span class=\"n\">name</span> <span class=\"o\">|</span> <span class=\"n\">species</span> <span class=\"o\">|</span> <span class=\"n\">age</span> <span class=\"o\">|</span>\n    <span class=\"o\">+</span><span class=\"c1\">---------+---------+------+</span>\n    <span class=\"o\">|</span> <span class=\"n\">Bottles</span> <span class=\"o\">|</span> <span class=\"n\">Dog</span> <span class=\"o\">|</span> <span class=\"mi\">3</span> <span class=\"o\">|</span>\n    <span class=\"o\">|</span> <span class=\"n\">Mac</span> <span class=\"o\">|</span> <span class=\"n\">Dog</span> <span class=\"o\">|</span> <span class=\"k\">NULL</span> <span class=\"o\">|</span>\n    <span class=\"o\">|</span> <span class=\"n\">Hector</span> <span class=\"o\">|</span> <span class=\"n\">Cat</span> <span class=\"o\">|</span> <span class=\"mi\">1</span> <span class=\"o\">|</span>\n    <span class=\"o\">+</span><span class=\"c1\">---------+---------+------+</span>\n</pre></div>\n\n\n<p>Additional <code>SELECT</code> queries are given below that illustrate how one can select and operate on subsets of the columns and rows. To add an age for Mac, we use the <code>UPDATE, SET</code>, and <code>WHERE</code> commands,&nbsp;writing</p>\n<div class=\"highlight\"><pre><span></span><span class=\"k\">UPDATE</span> <span class=\"n\">MyPets</span>\n    <span class=\"k\">SET</span> <span class=\"n\">age</span> <span class=\"o\">=</span> <span class=\"mi\">7</span>\n    <span class=\"k\">WHERE</span> <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"ss\">&quot;Mac&quot;</span><span class=\"p\">;</span>\n</pre></div>\n\n\n<p>To see that this and the other commands that follow work as expected, try running the <code>SELECT</code> command above after each application. To delete a row from the table, we use the <span class=\"caps\">DELETE</span>&nbsp;command,</p>\n<div class=\"highlight\"><pre><span></span><span class=\"k\">DELETE</span> <span class=\"k\">from</span> <span class=\"n\">MyPets</span>\n    <span class=\"k\">WHERE</span> <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"ss\">&quot;Hector&quot;</span><span class=\"p\">;</span>\n</pre></div>\n\n\n<p>It is also possible to add or subtract columns from a table. To add a column, we use\nthe <code>ALTER</code> and <code>ADD COLUMN</code> commands,</p>\n<div class=\"highlight\"><pre><span></span><span class=\"k\">ALTER</span> <span class=\"k\">TABLE</span> <span class=\"n\">MyPets</span>\n    <span class=\"k\">ADD</span> <span class=\"k\">COLUMN</span> <span class=\"n\">litters</span> <span class=\"nb\">INT</span>\n    <span class=\"k\">DEFAULT</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n</pre></div>\n\n\n<p>The last line here is not necessary. Without it, the command would create the column and set each row’s value there to <code>NULL</code>. To delete a column, we use the <code>DROP</code> command,</p>\n<div class=\"highlight\"><pre><span></span><span class=\"k\">ALTER</span> <span class=\"k\">TABLE</span> <span class=\"n\">MyPets</span>\n    <span class=\"k\">DROP</span> <span class=\"n\">litters</span><span class=\"p\">;</span>\n</pre></div>\n\n\n<p><em>Caveat:</em> While row addition and removal can always be carried out quickly, addition and removal of columns scales linearly with table size. The reason is that these operations are generally carried out by copying the original table into a second table having the desired new structure. For this reason, it is generally a good idea to plan ahead and make sure any new table has all the columns you foresee might be&nbsp;needed.</p>\n<h4><strong><span class=\"caps\">SELECTION</span> queries &#8212; learn by&nbsp;example</strong></h4>\n<p>Example conditional&nbsp;commands:</p>\n<ol>\n<li>What is the name and age each of my&nbsp;pets?</li>\n</ol>\n<div class=\"highlight\"><pre><span></span>    <span class=\"k\">SELECT</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">age</span> <span class=\"k\">FROM</span> <span class=\"n\">mypets</span><span class=\"p\">;</span>\n</pre></div>\n\n\n<ol>\n<li>How many dogs have I&nbsp;got?</li>\n</ol>\n<div class=\"highlight\"><pre><span></span>    <span class=\"k\">SELECT</span> <span class=\"k\">COUNT</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"p\">)</span>\n    <span class=\"k\">FROM</span> <span class=\"n\">mypets</span>\n    <span class=\"k\">WHERE</span> <span class=\"n\">species</span> <span class=\"o\">=</span> <span class=\"ss\">&quot;dog&quot;</span><span class=\"p\">;</span>\n</pre></div>\n\n\n<ol>\n<li>Show me just the first two pets in my&nbsp;table.</li>\n</ol>\n<div class=\"highlight\"><pre><span></span>    <span class=\"k\">SELECT</span> <span class=\"o\">*</span>\n    <span class=\"k\">FROM</span> <span class=\"n\">mypets</span>\n    <span class=\"k\">LIMIT</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n</pre></div>\n\n\n<ol>\n<li>Show me my pets in age-descending&nbsp;order.</li>\n</ol>\n<div class=\"highlight\"><pre><span></span>    <span class=\"k\">SELECT</span> <span class=\"o\">*</span>\n    <span class=\"k\">FROM</span> <span class=\"n\">MyPets</span>\n    <span class=\"k\">ORDER</span> <span class=\"k\">BY</span> <span class=\"n\">age</span><span class=\"p\">;</span>\n</pre></div>\n\n\n<ol>\n<li>Which of my dogs are under 4 years&nbsp;old?</li>\n</ol>\n<div class=\"highlight\"><pre><span></span>    <span class=\"k\">SELECT</span> <span class=\"o\">*</span>\n    <span class=\"k\">FROM</span> <span class=\"n\">MyPets</span>\n    <span class=\"k\">WHERE</span> <span class=\"n\">age</span> <span class=\"o\">&lt;</span> <span class=\"mi\">4</span>\n      <span class=\"k\">AND</span> <span class=\"n\">species</span> <span class=\"o\">=</span> <span class=\"ss\">&quot;dog&quot;</span><span class=\"p\">;</span>\n</pre></div>\n\n\n<ol>\n<li>Which animals have names that start with the letter&nbsp;“M”?</li>\n</ol>\n<div class=\"highlight\"><pre><span></span>    <span class=\"k\">SELECT</span> <span class=\"o\">*</span>\n    <span class=\"k\">FROM</span> <span class=\"n\">mypets</span>\n    <span class=\"k\">WHERE</span> <span class=\"n\">name</span> <span class=\"k\">LIKE</span> <span class=\"ss\">&quot;M%&quot;</span><span class=\"p\">;</span>\n</pre></div>\n\n\n<ol>\n<li>Which animals have the letter “E” somewhere in their&nbsp;name?</li>\n</ol>\n<div class=\"highlight\"><pre><span></span>    <span class=\"k\">SELECT</span> <span class=\"o\">*</span>\n    <span class=\"k\">FROM</span> <span class=\"n\">mypets</span>\n    <span class=\"k\">WHERE</span> <span class=\"n\">name</span> <span class=\"k\">LIKE</span> <span class=\"ss\">&quot;%E%&quot;</span><span class=\"p\">;</span>\n</pre></div>\n\n\n<p>Example <span class=\"caps\">GROUP</span> <span class=\"caps\">BY</span> commands (see also <code>MIN, MAX, SUM, STD</code>,&nbsp;etc.):</p>\n<ol>\n<li>How many pets have I got of each&nbsp;species?</li>\n</ol>\n<div class=\"highlight\"><pre><span></span>    <span class=\"k\">SELECT</span> <span class=\"n\">species</span><span class=\"p\">,</span> <span class=\"k\">count</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"p\">)</span>\n    <span class=\"k\">FROM</span> <span class=\"n\">mypets</span>\n    <span class=\"k\">GROUP</span> <span class=\"k\">BY</span> <span class=\"n\">species</span><span class=\"p\">;</span>\n</pre></div>\n\n\n<ol>\n<li>What is the average age of my pets, grouped by&nbsp;species?</li>\n</ol>\n<div class=\"highlight\"><pre><span></span>    <span class=\"k\">SELECT</span> <span class=\"n\">species</span><span class=\"p\">,</span> <span class=\"k\">AVG</span><span class=\"p\">(</span><span class=\"n\">age</span><span class=\"p\">)</span>\n    <span class=\"k\">FROM</span> <span class=\"n\">mypets</span>\n    <span class=\"k\">GROUP</span> <span class=\"k\">BY</span> <span class=\"n\">species</span><span class=\"p\">;</span>\n</pre></div>\n\n\n<h4><strong>Actions on multiple&nbsp;tables</strong></h4>\n<ol>\n<li>To solidify what we&#8217;ve learned above, try to now create a second table, called <code>PetDetails</code>, like that above but with different age and species values. You can add other columns to it if you like. Once that&#8217;s done, apply the <code>SHOW TABLES</code> command to see that both tables are available. Next, learn to copy specific values from this new table into the first one, using commands&nbsp;like</li>\n</ol>\n<div class=\"highlight\"><pre><span></span>    <span class=\"k\">UPDATE</span> <span class=\"n\">MyPets</span><span class=\"p\">,</span> <span class=\"n\">PetDetails</span>\n      <span class=\"k\">SET</span> <span class=\"n\">MyPets</span><span class=\"p\">.</span><span class=\"n\">age</span> <span class=\"o\">=</span> <span class=\"n\">PetDetails</span><span class=\"p\">.</span><span class=\"n\">age</span>\n      <span class=\"k\">WHERE</span> <span class=\"n\">MyPets</span><span class=\"p\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">PetDetails</span><span class=\"p\">.</span><span class=\"n\">name</span><span class=\"p\">;</span>\n</pre></div>\n\n\n<div class=\"highlight\"><pre><span></span><span class=\"err\">Note the use of the period here to specify from which table a certain column is to be selected from.</span>\n</pre></div>\n\n\n<ol>\n<li><em>The</em> <code>JOIN/ON</code> <em>commands</em>. The <code>JOIN</code> command essentially creates something like a flattened outer product of two tables: If there are <span class=\"math\">\\(n\\)</span> entries in the first table and <span class=\"math\">\\(m\\)</span> in the second, the command returns a table with <span class=\"math\">\\(n \\times m\\)</span> rows. There is one row for each possible pairing, one entry taken from the first table and one from the second. All columns from both tables are then included in the new table. The <span class=\"caps\">ON</span> command can be used to specify conditions on which pairs are to be included in the combined table. To illustrate, let’s define a new table of pet-trick&nbsp;pairs</li>\n</ol>\n<div class=\"highlight\"><pre><span></span>    <span class=\"k\">CREATE</span> <span class=\"k\">TABLE</span> <span class=\"n\">PetTricks</span> <span class=\"p\">(</span><span class=\"n\">name</span> <span class=\"nb\">VARCHAR</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">),</span> <span class=\"n\">trick</span> <span class=\"nb\">VARCHAR</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">));</span>\n    <span class=\"k\">INSERT</span> <span class=\"k\">INTO</span> <span class=\"n\">PetTricks</span> <span class=\"k\">VALUES</span> <span class=\"p\">(</span><span class=\"ss\">&quot;Bottles&quot;</span><span class=\"p\">,</span> <span class=\"ss\">&quot;Shake&quot;</span><span class=\"p\">);</span>\n    <span class=\"k\">INSERT</span> <span class=\"k\">INTO</span> <span class=\"n\">PetTricks</span> <span class=\"k\">VALUES</span> <span class=\"p\">(</span><span class=\"ss\">&quot;Bottles&quot;</span><span class=\"p\">,</span> <span class=\"ss\">&quot;Play dead&quot;</span><span class=\"p\">);</span>\n    <span class=\"k\">INSERT</span> <span class=\"k\">INTO</span> <span class=\"n\">PetTricks</span> <span class=\"k\">VALUES</span> <span class=\"p\">(</span><span class=\"ss\">&quot;Mac&quot;</span><span class=\"p\">,</span> <span class=\"ss\">&quot;Shake&quot;</span><span class=\"p\">);</span>\n    <span class=\"k\">INSERT</span> <span class=\"k\">INTO</span> <span class=\"n\">PetTricks</span> <span class=\"k\">VALUES</span> <span class=\"p\">(</span><span class=\"ss\">&quot;Dogbert&quot;</span><span class=\"p\">,</span> <span class=\"ss\">&quot;Consulting&quot;</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<p>With the following, we get the number of tricks each of my pets can&nbsp;do</p>\n<div class=\"highlight\"><pre><span></span>    <span class=\"k\">SELECT</span> <span class=\"n\">MyPets</span><span class=\"p\">.</span><span class=\"n\">name</span> <span class=\"k\">AS</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"k\">count</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"k\">AS</span> <span class=\"n\">num_tricks</span>\n    <span class=\"k\">FROM</span> <span class=\"p\">(</span><span class=\"n\">MyPets</span> <span class=\"k\">JOIN</span> <span class=\"n\">PetTricks</span>\n    <span class=\"k\">ON</span> <span class=\"n\">MyPets</span><span class=\"p\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">PetTricks</span><span class=\"p\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n    <span class=\"k\">GROUP</span> <span class=\"k\">BY</span> <span class=\"n\">MyPets</span><span class=\"p\">.</span><span class=\"n\">name</span><span class=\"p\">;</span>\n</pre></div>\n\n\n<p>Here, we see for the first time that it is possible to select values from a table created &#8220;on the fly&#8221; (the table in parentheses, which you can print using the <code>SELECT</code> command). We also see for the first time the concept of aliasing, applied through use of the <code>AS</code> command.</p>\n<ol>\n<li>Our last &#8212; and most complicated &#8212; example combines many of the ideas discussed above. If you can get to the point where you can replicate commands like this one, you&#8217;ll be pretty much set to construct your own complex <span class=\"caps\">SQL</span> queries: Let’s add a trick count to our first table, and then fill it in by querying the PetTricks&nbsp;table.</li>\n</ol>\n<div class=\"highlight\"><pre><span></span>    <span class=\"k\">ALTER</span> <span class=\"k\">TABLE</span> <span class=\"n\">MyPets</span>\n      <span class=\"k\">ADD</span> <span class=\"k\">COLUMN</span> <span class=\"n\">num_tricks</span> <span class=\"nb\">INT</span>\n      <span class=\"k\">DEFAULT</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\n    <span class=\"k\">UPDATE</span> <span class=\"n\">MyPets</span> <span class=\"k\">AS</span> <span class=\"n\">T1</span><span class=\"p\">,</span>\n        <span class=\"p\">(</span><span class=\"k\">Select</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"k\">count</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"k\">AS</span> <span class=\"n\">tot</span>\n        <span class=\"k\">FROM</span> <span class=\"n\">PetTricks</span>\n        <span class=\"k\">GROUP</span> <span class=\"k\">BY</span> <span class=\"n\">name</span><span class=\"p\">)</span> <span class=\"k\">AS</span> <span class=\"n\">T2</span>\n        <span class=\"k\">SET</span> <span class=\"n\">T1</span><span class=\"p\">.</span><span class=\"n\">num_tricks</span> <span class=\"o\">=</span> <span class=\"n\">T2</span><span class=\"p\">.</span><span class=\"n\">tot</span>\n        <span class=\"k\">WHERE</span> <span class=\"n\">T1</span><span class=\"p\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">T2</span><span class=\"p\">.</span><span class=\"n\">name</span><span class=\"p\">;</span>\n\n    <span class=\"k\">SELECT</span> <span class=\"o\">*</span> <span class=\"k\">FROM</span> <span class=\"n\">MyPets</span><span class=\"p\">;</span>\n    <span class=\"o\">&gt;&gt;</span>\n        <span class=\"o\">+</span><span class=\"c1\">---------+---------+------+------------+</span>\n        <span class=\"o\">|</span> <span class=\"n\">name</span> <span class=\"o\">|</span> <span class=\"n\">species</span> <span class=\"o\">|</span> <span class=\"n\">age</span> <span class=\"o\">|</span> <span class=\"n\">num_tricks</span> <span class=\"o\">|</span>\n        <span class=\"o\">+</span><span class=\"c1\">---------+---------+------+------------+</span>\n        <span class=\"o\">|</span> <span class=\"n\">Bottles</span> <span class=\"o\">|</span> <span class=\"n\">Dog</span> <span class=\"o\">|</span> <span class=\"mi\">3</span> <span class=\"o\">|</span> <span class=\"mi\">2</span> <span class=\"o\">|</span>\n        <span class=\"o\">|</span> <span class=\"n\">Mac</span> <span class=\"o\">|</span> <span class=\"n\">Dog</span> <span class=\"o\">|</span> <span class=\"mi\">7</span> <span class=\"o\">|</span> <span class=\"mi\">1</span> <span class=\"o\">|</span>\n        <span class=\"o\">|</span> <span class=\"n\">Hector</span> <span class=\"o\">|</span> <span class=\"n\">Cat</span> <span class=\"o\">|</span> <span class=\"mi\">1</span> <span class=\"o\">|</span> <span class=\"mi\">0</span> <span class=\"o\">|</span>\n        <span class=\"o\">+</span><span class=\"c1\">---------+---------+------+------------+</span>\n</pre></div>\n\n\n<h4><strong>Other&nbsp;tips</strong></h4>\n<p>Lastly, a few one-off tips that can be very&nbsp;helpful.</p>\n<ol>\n<li><em>Creating a new table similar another.</em> The following command can come in handy when you’re dealing with tables that have many&nbsp;columns:</li>\n</ol>\n<div class=\"highlight\"><pre><span></span>    <span class=\"k\">CREATE</span> <span class=\"k\">TABLE</span> <span class=\"n\">TNew</span> <span class=\"k\">LIKE</span> <span class=\"n\">T1</span><span class=\"p\">;</span>\n</pre></div>\n\n\n<p>Here, the command creates <code>TNew</code>, a new table with column names and types like those of <code>T1</code>. The entries of <code>T1</code> are not copied over. If you want to copy some of them over, you can do that with a command&nbsp;like</p>\n<div class=\"highlight\"><pre><span></span>    <span class=\"k\">INSERT</span> <span class=\"k\">INTO</span> <span class=\"n\">TNew</span> <span class=\"p\">(</span><span class=\"k\">SELECT</span> <span class=\"o\">*</span> <span class=\"k\">FROM</span> <span class=\"n\">T1</span> <span class=\"k\">WHERE</span> <span class=\"p\">...);</span>\n</pre></div>\n\n\n<ol>\n<li><em>Saving to a text file.</em> Printing a table to a text file can sometimes be useful. To proceed, you first need to create a directory that MySQL can have write access to. On a mac, you can accomplish this from the terminal with the&nbsp;following</li>\n</ol>\n<div class=\"highlight\"><pre><span></span>    <span class=\"nb\">cd</span> /usr/local\n    mkdir MySQLOutput\n    sudo chmod -R <span class=\"m\">777</span> MySQLOutput\n</pre></div>\n\n\n<p>This creates the directory <code>/usr/local/MYSQLOutput</code> with global read, write, and execute permissions. With this setup, we can write to a file from within MySQL with a command&nbsp;like</p>\n<div class=\"highlight\"><pre><span></span>    <span class=\"k\">SELECT</span> <span class=\"o\">*</span> <span class=\"k\">FROM</span> <span class=\"n\">MyPets</span>\n        <span class=\"k\">INTO</span> <span class=\"n\">OUTFILE</span> <span class=\"ss\">&quot;/usr/local/MySQLOutput/test.txt&quot;</span>\n</pre></div>\n\n\n<ol>\n<li><em>Scripts.</em> For complicated queries, or queries that you would like to be able to run multiple times, it is useful to employ scripts. These can then be executed from within mysql using the <code>SOURCE</code> command. To illustrate, suppose we have a text file called <code>/usr/local/MySQLOutput/test.txt</code> within which we have written the&nbsp;commands</li>\n</ol>\n<div class=\"highlight\"><pre><span></span>    <span class=\"k\">CREATE</span> <span class=\"k\">table</span> <span class=\"n\">Bad_dogs</span> <span class=\"p\">(</span><span class=\"n\">DogID</span> <span class=\"nb\">BIGINT</span><span class=\"p\">,</span> <span class=\"n\">Barks</span> <span class=\"nb\">INT</span><span class=\"p\">);</span>\n    <span class=\"k\">INSERT</span> <span class=\"k\">INTO</span> <span class=\"n\">Bad_dogs</span> <span class=\"k\">VALUES</span> <span class=\"p\">(</span><span class=\"mi\">1234567890</span><span class=\"p\">,</span> <span class=\"mi\">666</span><span class=\"p\">);</span>\n</pre></div>\n\n\n<p>We can run this from within MySQL using the&nbsp;command</p>\n<div class=\"highlight\"><pre><span></span>    <span class=\"k\">SOURCE</span> <span class=\"o\">/</span><span class=\"n\">usr</span><span class=\"o\">/</span><span class=\"k\">local</span><span class=\"o\">/</span><span class=\"n\">MySQLOutput</span><span class=\"o\">/</span><span class=\"n\">test</span><span class=\"p\">.</span><span class=\"n\">txt</span><span class=\"p\">;</span>\n</pre></div>\n\n\n<p>This creates the table and inserts the example&nbsp;entry.</p>\n<ol>\n<li><em>Indexing.</em> By creating an index, one can speed up <code>SELECT</code> calls on large tables. You can think of an index heuristically as a second table having two columns: The first is a sorted version of one of the original table’s columns, and the second column is a pointer to the memory block where its corresponding entry sits (actually, an index usually sits in a B-tree, a structure similar to a binary-search tree). Entries can be quickly accessed via the index, generally in logarithmic time. To add a key to our first table,&nbsp;write</li>\n</ol>\n<div class=\"highlight\"><pre><span></span>    <span class=\"k\">ALTER</span> <span class=\"k\">TABLE</span> <span class=\"n\">MyPets</span>\n        <span class=\"k\">ADD</span> <span class=\"k\">PRIMARY</span> <span class=\"k\">KEY</span> <span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">);</span>\n</pre></div>\n\n\n<p>This selects the name column as our index, which will speed up all <code>SELECT</code> calls seeking entries with <code>name</code> values satisfying some condition &#8212; specified using <code>WHERE name = ...</code>. You can actually index as many columns of a table as you like. However, this takes up disk space, and so should be avoided when the extra indexes are not useful. It is also possible to specify that you want one or more columns to be keys upon table&nbsp;creation.</p>\n<ol>\n<li><em>Further study.</em> At this point, we have covered most of the basics, but only the basics. If you get stumped by any tricky queries moving forward, we suggest visiting both <a href=\"http://stackoverflow.com/\">stackoverflow.com</a> &#8212; which has tons of interesting discussions on the topic &#8212; and the <a href=\"http://dev.mysql.com/doc/\">MySQL documentation page</a>, which goes over most everything and includes a tutorial in chapter 3 similar to this one. Both are excellent&nbsp;resources.</li>\n</ol>\n<script type=\"text/javascript\">if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {\n    var align = \"center\",\n        indent = \"0em\",\n        linebreak = \"false\";\n\n    if (false) {\n        align = (screen.width < 768) ? \"left\" : align;\n        indent = (screen.width < 768) ? \"0em\" : indent;\n        linebreak = (screen.width < 768) ? 'true' : linebreak;\n    }\n\n    var mathjaxscript = document.createElement('script');\n    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';\n    mathjaxscript.type = 'text/javascript';\n    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';\n\n    var configscript = document.createElement('script');\n    configscript.type = 'text/x-mathjax-config';\n    configscript[(window.opera ? \"innerHTML\" : \"text\")] =\n        \"MathJax.Hub.Config({\" +\n        \"    config: ['MMLorHTML.js'],\" +\n        \"    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" +\n        \"    jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" +\n        \"    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" +\n        \"    displayAlign: '\"+ align +\"',\" +\n        \"    displayIndent: '\"+ indent +\"',\" +\n        \"    showMathMenu: true,\" +\n        \"    messageStyle: 'normal',\" +\n        \"    tex2jax: { \" +\n        \"        inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" +\n        \"        displayMath: [ ['$$','$$'] ],\" +\n        \"        processEscapes: true,\" +\n        \"        preview: 'TeX',\" +\n        \"    }, \" +\n        \"    'HTML-CSS': { \" +\n        \"        availableFonts: ['STIX', 'TeX'],\" +\n        \"        preferredFont: 'STIX',\" +\n        \"        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" +\n        \"        linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" +\n        \"    }, \" +\n        \"}); \" +\n        \"if ('default' !== 'default') {\" +\n            \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" +\n                \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" +\n                \"VARIANT['normal'].fonts.unshift('MathJax_default');\" +\n                \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" +\n                \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" +\n                \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" +\n            \"});\" +\n            \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" +\n                \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" +\n                \"VARIANT['normal'].fonts.unshift('MathJax_default');\" +\n                \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" +\n                \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" +\n                \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" +\n            \"});\" +\n        \"}\";\n\n    (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript);\n    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);\n}\n</script>",
  "category": ""
}