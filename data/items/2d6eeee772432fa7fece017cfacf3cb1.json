{
  "id": "tag:blogger.com,1999:blog-1176949257541686127.post-4502032642401357362",
  "published": "2022-05-18T09:03:00.000-04:00",
  "updated": "2022-05-18T09:03:33.408-04:00",
  "title": "Privileged pod escalations in Kubernetes and GKE",
  "content": "<span class=\"byline-author\">Posted by GKE and Anthos Platform Security Teams&nbsp;</span><div><span class=\"byline-author\"><br /></span></div><br /><br />At the KubeCon EU 2022 conference in Valencia, security researchers from Palo Alto Networks presented research findings on “trampoline pods”—pods with an elevated set of privileges required to do their job, but that could conceivably be used as a jumping off point to gain escalated privileges.<br /><br />The research mentions GKE, including how developers should look at the privileged pod problem today, what the GKE team is doing to minimize the use of privileged pods, and actions GKE users can take to protect their clusters.<div><br /><span style=\"font-size: medium;\"><b>Privileged pods within the context of GKE security<br /></b></span><br />While privileged pods can pose a security issue, it’s important to look at them within the overall context of GKE security. To use a privileged pod as a “trampoline” in GKE, there is a major prerequisite – the attacker has to first execute a successful application compromise and container breakout attack. <br /><br />Because the use of privileged pods in an attack requires a first step such as a container breakout to be effective, let’s look at two areas:<br /><ol style=\"text-align: left;\"><li>features of GKE you can use to reduce the likelihood of a container breakout</li><li>steps the GKE team is taking to minimize the use of privileged pods and the privileges needed in them.</li></ol></div><div><span style=\"font-size: medium;\"><b>Reducing container breakouts<br /></b></span><br />There are a number of features in GKE along with some best practices that you can use to reduce the likelihood of a container breakout:<br /><br /><ul style=\"text-align: left;\"><li>Use <a href=\"https://cloud.google.com/kubernetes-engine/docs/concepts/sandbox-pods\">GKE Sandbox</a> to strengthen the container security boundary. Over the last few months, GKE Sandbox has protected containers running it against several newly discovered <a href=\"https://cloud.google.com/anthos/clusters/docs/security-bulletins\">Linux kernel breakout CVEs</a>.</li><li>Adopt <a href=\"https://cloud.google.com/kubernetes-engine/docs/concepts/autopilot-overview\">GKE Autopilot</a> for new clusters. Autopilot clusters have default policies that prevent host access through mechanisms like host path volumes and host network. The container runtime default seccomp profile is also <a href=\"https://cloud.google.com/kubernetes-engine/docs/concepts/autopilot-overview#security-limitations\">enabled by default on Autopilot</a> which has prevented <a href=\"https://cloud.google.com/anthos/clusters/docs/security-bulletins#gcp-2022-006\">several</a> <a href=\"https://cloud.google.com/anthos/clusters/docs/security-bulletins#gcp-2022-002\">breakouts</a>.</li><li>Subscribe to <a href=\"https://cloud.google.com/kubernetes-engine/docs/concepts/release-channels\">GKE Release Channels</a> and use autoupgrade to keep nodes patched automatically against kernel vulnerabilities.</li><li>Run <a href=\"https://cloud.google.com/kubernetes-engine/docs/concepts/node-images#cos\">Google’s Container Optimized OS</a>, the minimal and <a href=\"https://cloud.google.com/container-optimized-os/docs/concepts/security\">hardened</a> container optimized OS that makes much of the disk read-only.</li><li>Incorporate <a href=\"https://cloud.google.com/binary-authorization\">binary authorization</a> into your SDLC to require that containers admitted into the cluster are from trusted build systems and up-to-date on patching.</li><li>Use <a href=\"https://cloud.google.com/security-command-center/docs/concepts-container-threat-detection-overview\">Secure Command Center’s Container Threat Detection</a> or supported third-party tools to detect the most common runtime attacks.</li></ul>More information can be found in the <a href=\"https://cloud.google.com/kubernetes-engine/docs/how-to/hardening-your-cluster\">GKE Hardening Guide</a>.</div><div><br /><span style=\"font-size: medium;\"><b>How GKE is reducing the use of privileged pods.<br /></b></span><br />While it’s not uncommon for customers to install privileged pods into their clusters, GKE works to minimize the privilege levels held by our system components, especially those that are enabled by default. However, there are limits as to how many privileges can be removed from certain features. For example, Anthos Config Management requires permissions to modify most Kubernetes objects to be able to create and manage those objects. <br /><br />Some other privileges are baked into the system, such as those held by Kubelet. Previously, we worked with the Kubernetes community to build the <a href=\"https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/#noderestriction\">Node Restriction</a> and<a href=\"https://kubernetes.io/docs/reference/access-authn-authz/node/\"> Node Authorizer</a> features to limit Kubelet's access to highly sensitive objects, such as secrets, adding protection against an attacker with access to the Kubelet credentials. <br /><br />More recently, we have taken steps to reduce the number of privileged pods across GKE and have added additional documentation on privileges used in system pods as well as information on how to improve pod isolation. Below are the steps we’ve taken: <br /><ol style=\"text-align: left;\"><li>We have added <a href=\"https://cloud.google.com/kubernetes-engine/docs/how-to/hardening-your-cluster#restrict_self_modify\">an admission controller to GKE Autopilot and GKE Standard (on by default) and GKE/Anthos (opt-in)</a> that stops attempts to run as a more privileged service account, which blocks a method of escalating privileges using privileged pods.</li><li>We created a permission scanning tool that identifies pods that have privileges that could be used for escalation, and we used that tool to perform an audit across GKE and Anthos.</li><li>The permission scanning tool is now integrated into our standard code review and testing processes to reduce the risk of introducing privileged pods into the system. As mentioned earlier, some features require privileges to perform their function.</li><li>We are using the audit results to reduce permissions available to pods. For example, we removed “update nodes and pods” permissions from anetd in GKE.</li><li>Where privileged pods are required for the operation of a feature, we’ve added additional documentation to illustrate that fact.</li><li>We added <a href=\"https://cloud.google.com/kubernetes-engine/docs/how-to/isolate-workloads-dedicated-nodes\">documentation </a>that outlines how to isolate GKE-managed workloads in dedicated node pools when you’re unable to use GKE Sandbox to reduce the risk of privilege escalation attacks.</li></ol>In addition to the measures above, we recommend users take advantage of tools that can scan RBAC settings to detect overprivileged pods used in their applications. As part of their presentation, the Palo Alto researchers announced an open source tool, called <a href=\"https://github.com/PaloAltoNetworks/rbac-police\">rbac-police</a>, that can be used for the task. So, while it only takes a single overprivileged workload to trampoline to the cluster, there are a number of actions you can take to minimize the likelihood of the prerequisite container breakout and the number of privileges used by a pod.</div>",
  "link": [
    "",
    "",
    "",
    "",
    ""
  ],
  "author": {
    "name": "Unknown",
    "email": "noreply@blogger.com",
    "gd:image": ""
  },
  "thr:total": 0
}