{
  "title": "Start deep learning with Jupyter notebooks in the cloud",
  "link": "",
  "published": "2016-03-10T20:41:00-08:00",
  "updated": "2016-03-10T20:41:00-08:00",
  "author": {
    "name": "Cathy Yeh"
  },
  "id": "tag:efavdb.com,2016-03-10:/deep-learning-with-jupyter-on-aws",
  "summary": "<p>Want a quick and easy way to play around with deep learning libraries? Puny <span class=\"caps\">GPU</span> got you down? Thanks to Amazon Web Services (<span class=\"caps\">AWS</span>) &#8212; specifically, <span class=\"caps\">AWS</span> Elastic Compute Cloud (<span class=\"caps\">EC2</span>) &#8212; no data scientist need be left&nbsp;behind.</p>\n<p>Jupyter/IPython notebooks are indispensable tools for learning and tinkering. This post shows …</p>",
  "content": "<p>Want a quick and easy way to play around with deep learning libraries? Puny <span class=\"caps\">GPU</span> got you down? Thanks to Amazon Web Services (<span class=\"caps\">AWS</span>) &#8212; specifically, <span class=\"caps\">AWS</span> Elastic Compute Cloud (<span class=\"caps\">EC2</span>) &#8212; no data scientist need be left&nbsp;behind.</p>\n<p>Jupyter/IPython notebooks are indispensable tools for learning and tinkering. This post shows how to set up a public Jupyter notebook server in <span class=\"caps\">EC2</span> and then access it remotely through your web browser, just as you would if you were using a notebook launched from your own&nbsp;laptop.</p>\n<p>For a beginner, having to both set up deep learning libraries and navigate the <span class=\"caps\">AWS</span> menagerie feels like getting thrown into the deep end when you just want to stick a toe in. You can skip the hassle of setting up deep learning frameworks from scratch by choosing an Amazon Machine Image (<span class=\"caps\">AMI</span>) that comes pre-installed with the libraries and their dependencies. (Concerned about costs? &#8212; see the note<a href=\"#note1\">*</a> at the bottom of this&nbsp;post.)</p>\n<p>For example, the Stanford class, <a href=\"http://cs231n.stanford.edu/\">CS231n: Convolutional Neural Networksfor Visual Recognition</a>, has provided a public <span class=\"caps\">AMI</span> with these&nbsp;specs:</p>\n<ul>\n<li>cs231n_caffe_torch7_keras_lasagne_v2</li>\n<li><span class=\"caps\">AMI</span> <span class=\"caps\">ID</span>: ami-125b2c72 in the us-west-1&nbsp;region</li>\n<li>Use a g2.2xlarge&nbsp;instance.</li>\n<li>Caffe, Torch7, Theano, Keras and Lasagne are pre-installed. Python bindings of caffe are available. It has <span class=\"caps\">CUDA</span> 7.5 and CuDNN&nbsp;v3.</li>\n</ul>\n<p>If you&#8217;re new to <span class=\"caps\">AWS</span>, CS231n provides a nice step-by-step <a href=\"http://cs231n.github.io/aws-tutorial/\"><span class=\"caps\">AWS</span> tutorial</a> with lots of screenshots. We&#8217;re just going to tweak their procedure to enable access to Jupyter/IPython&nbsp;notebooks.</p>\n<p>After you&#8217;re done, you&#8217;ll be able to work through tutorials in notebook format like those provided by caffe in their examples folder, e.g. <a href=\"http://nbviewer.jupyter.org/github/BVLC/caffe/blob/master/examples/00-classification.ipynb\">00-classification.ipynb</a>.</p>\n<p>We&#8217;ve written a little bash script <code>jupyter_userdata.sh</code> to execute Jupyter&#8217;s <a href=\"http://jupyter-notebook.readthedocs.org/en/latest/public_server.html\">instructions</a> for setting up a public notebook server, so you don&#8217;t have to manually configure the notebook server every time you want to spin up a new <span class=\"caps\">AMI</span>&nbsp;instance.</p>\n<p>For the script to work, Jupyter itself should already be installed &#8212; which it is in the CS231n <span class=\"caps\">AMI</span>.</p>\n<p>You just have to edit the password in the script. To generate a hashed password, use&nbsp;IPython:</p>\n<div class=\"highlight\"><pre><span></span><span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]:</span> <span class=\"kn\">from</span> <span class=\"nn\">notebook.auth</span> <span class=\"kn\">import</span> <span class=\"n\">passwd</span>\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]:</span> <span class=\"n\">passwd</span><span class=\"p\">()</span>\n<span class=\"n\">Enter</span> <span class=\"n\">password</span><span class=\"p\">:</span>\n<span class=\"n\">Verify</span> <span class=\"n\">password</span><span class=\"p\">:</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]:</span> <span class=\"s1\">&#39;sha1:bcd259ccf...&lt;your hashed password here&gt;&#39;</span>\n</pre></div>\n\n\n<p>Replace the right hand side of line 24 in the script with the hashed password you just&nbsp;generated.</p>\n<hr>\n<p>Then, follow these steps to launch an <span class=\"caps\">EC2</span>&nbsp;instance.</p>\n<p><strong>1.</strong> First, follow the CS231n <a href=\"http://cs231n.github.io/aws-tutorial/\"><span class=\"caps\">AWS</span> tutorial</a> up until the step <em>&#8220;Choose the instance type <code>g2.2xlarge</code>, and click on &#8220;Review and Launch&#8221;</em>.</p>\n<p>Don&#8217;t click on &#8220;Review and Launch&#8221;&nbsp;yet!</p>\n<p><strong>2.</strong> Here&#8217;s where we add a couple extra steps to the tutorial.<a href=\"#note2\">**</a></p>\n<p>We&#8217;re going to supply the shell script as <a href=\"http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/user-data.html\">user-data</a>, a way to pass in scripts to automate configurations to your <span class=\"caps\">AMI</span>. Instead of clicking on &#8220;Review and Launch&#8221;, click on the gray button in the lower right &#8220;Next: Configure Instance&nbsp;Details&#8221;.</p>\n<p>In the next page, click on the arrowhead next to &#8220;Advanced Details&#8221; to expand its options. Click on the radio button next to &#8220;As text&#8221;, then copy and paste the text from <code>jupyter_userdata.sh</code> (modified with your password) into the&nbsp;field.</p>\n<p>Warning: if you click on &#8220;As file&#8221; instead and browse to wherever you saved <code>jupyter_userdata.sh</code>, the file must first be <a href=\"http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html\">base64-encoded</a>.</p>\n<p><a href=\"https://efavdb.com/wp-content/uploads/2016/03/Step3_Configure-Instance-Details.png\"><img alt=\"\" src=\"https://efavdb.com/wp-content/uploads/2016/03/Step3_Configure-Instance-Details.png\"></a></p>\n<p><strong>3.</strong> Next, (skipping steps 4. and 5.) click on the link to &#8220;6. Configure Security Group&#8221; near the top of the page. By default, <span class=\"caps\">SSH</span> is enabled, but we need to enable access to the notebook server, whose port we&#8217;ve set as 8888 in the bash&nbsp;script.</p>\n<p>Click on the grey button &#8220;Add Rule&#8221;, then for the new rule, choose Type: Custom <span class=\"caps\">TCP</span> Rule; Protocol: <span class=\"caps\">TCP</span>; Port Range: 8888; Source:&nbsp;Anywhere.</p>\n<p><a href=\"https://efavdb.com/wp-content/uploads/2016/03/Step6_Configure-Security-Group.png\"><img alt=\"\" src=\"https://efavdb.com/wp-content/uploads/2016/03/Step6_Configure-Security-Group.png\"></a></p>\n<p><strong>4.</strong> Now, pick up where you left off in the CS231n tutorial (&#8220;<em>&#8230; click on &#8220;Review and Launch</em>&#8220;.), which takes you to &#8220;Step 7. Review Instance Launch&#8221;. Complete the&nbsp;tutorial.</p>\n<hr>\n<p>Check that the Jupyter notebook server was set up&nbsp;correctly:</p>\n<ol>\n<li>ssh into your instance (see CS231n&nbsp;instructions).</li>\n<li>Navigate to <code>~/caffe/examples</code>.</li>\n<li>Start the notebook server using the <code>jupyter notebook</code> command.</li>\n<li>\n<p>In your web browser, access the notebook server with https://PUBLIC_IP:8888, where PUBLIC_IP is the public <span class=\"caps\">IP</span> of your instance, displayed from the instance description on your <span class=\"caps\">AWS</span> dashboard. Your browser will warn that your self-signed certificate is insecure or&nbsp;unrecognized.</p>\n<p><a href=\"https://efavdb.com/wp-content/uploads/2016/03/scary-browser-warning.png\"><img alt=\"\" src=\"https://efavdb.com/wp-content/uploads/2016/03/scary-browser-warning.png\"></a></p>\n<p>That&#8217;s ok &#8212; click past the warnings, and you should get a sign-in page. Type in your&nbsp;password.</p>\n</li>\n<li>\n<p>Next, you should see the files and directories in <code>/home/ubuntu/caffe/examples</code></p>\n</li>\n<li>Open one of the example notebooks, e.g. <code>00-classification.ipynb</code>, and try running some cells to make sure everything is&nbsp;working.</li>\n</ol>\n<p>Voila! We hope this guide removes some obstacles to getting started. Happy&nbsp;learning!</p>\n<hr>\n<ul>\n<li>The cost of running a <span class=\"caps\">GPU</span> instance is high compared to many other instance types, but still very reasonable if you&#8217;re just tinkering for a few hours on a pre-trained model, not training a whole neural network from&nbsp;scratch.</li>\n</ul>\n<p>Check out the <a href=\"https://aws.amazon.com/ec2/pricing/\">pricing</a> for an <span class=\"caps\">EC2</span> instance in the section &#8220;On-Demand Instance Prices&#8221; and selecting the region of your <span class=\"caps\">AMI</span>. At the time of writing, the cost of an on-demand <code>g2.2xlarge</code> instance in the <span class=\"caps\">US</span> West (Northern California) region was $0.7/hour, whereas the price of a <a href=\"https://aws.amazon.com/ec2/spot/pricing/\">spot</a> instance (a cheaper alternative which will automatically terminate when the spot pricing exceeds your bid) was&nbsp;$0.3/hour.</p>\n<p><strong> If you followed the CS231n tutorial exactly and forgot to supply user data, you can still use this script. First modify the security configuration of your instance according to step </strong>3**. Then use the <code>scp</code> command to copy the script from your local computer to your instance, <code>ssh</code> into your instance, then execute the script: <code>source jupyter_userdata.sh</code>. If you need help with using <code>scp</code>, see &#8220;To use <span class=\"caps\">SCP</span> to transfer a file&#8221; in this <a href=\"http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/AccessingInstancesLinux.html\">guide</a>.</p>",
  "category": [
    "",
    "",
    "",
    "",
    "",
    ""
  ]
}