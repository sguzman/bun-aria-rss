{
  "id": "tag:blogger.com,1999:blog-15045980.post-5619282728573005751",
  "published": "2020-12-09T11:05:00.002-08:00",
  "updated": "2020-12-09T12:35:18.810-08:00",
  "category": [
    "",
    "",
    ""
  ],
  "title": "Testing on the Toilet: Separation of Concerns? That's a Wrap!",
  "content": "<p><i><span style=\"font-family: times;\">This article was adapted from a Google&nbsp;<a href=\"http://googletesting.blogspot.com/2007/01/introducing-testing-on-toilet.html\">Testing on the Toilet</a>&nbsp;(TotT) episode. You can download a&nbsp;<a href=\"https://docs.google.com/document/d/16865gKSr3QXh6kRyKw8g9B6Q13L48t3lNNWfWdg21Ng/edit?usp=sharing\" rel=\"nofollow\">printer-friendly version</a>&nbsp;of this TotT episode and post it in your office.</span></i></p><div><i><span style=\"font-family: times;\"><br /></span></i></div><div><span style=\"font-family: times;\">By&nbsp;Stefan Kennedy</span></div><div><span style=\"font-family: times;\"><br /></span></div><div><span style=\"font-family: times;\"><br /></span></div><div><span style=\"font-family: times;\"><div>The following function decodes a byte array as an image using an API named SpeedyImg. What maintenance problems might arise due to referencing an API owned by a different team?</div><div><br /></div></span></div> <div style=\"overflow-x: auto;\"><table class=\"my-bordered-table\" style=\"width: 613px;\"><tbody><tr><td style=\"background-color: #f4cccc; vertical-align: top; width: 607px;\"><pre style=\"background-color: #f4cccc; border: 0px; color: black; margin: 0px; padding-bottom: 0px; padding-left: 0px; padding-top: 0px;\"><span style=\"font-family: consolas, &quot;courier new&quot;, courier, monospace;\"><span style=\"font-weight: bold;\">SpeedyImgImage</span> decodeImage(List&lt;<span style=\"font-weight: bold;\">SpeedyImgDecoder</span>&gt; <span style=\"font-weight: bold;\">decoders</span>, byte[] data) {<br />  <span style=\"font-weight: bold;\">SpeedyImgOptions options</span> = getDefaultConvertOptions();<br />  for (<span style=\"font-weight: bold;\">SpeedyImgDecoder decoder</span> : <span style=\"font-weight: bold;\">decoders</span>) {<br />    <span style=\"font-weight: bold;\">SpeedyImgResult decodeResult</span> = <span style=\"font-weight: bold;\">decoder</span>.decode(<span style=\"font-weight: bold;\">decoder</span>.formatBytes(data));<br />    <span style=\"font-weight: bold;\">SpeedyImgImage image</span> = <span style=\"font-weight: bold;\">decodeResult</span>.getImage(<span style=\"font-weight: bold;\">options</span>);<br />    if (validateGoodImage(<span style=\"font-weight: bold;\">image</span>)) { return <span style=\"font-weight: bold;\">image</span>; }<br />  }<br />  throw new RuntimeException();<br />}</span></pre></td></tr></tbody></table><br /></div>   <div style=\"overflow-x: auto;\"><span style=\"font-family: times;\"><span style=\"color: #800180; font-weight: bold;\"><br /></span></span></div><div style=\"overflow-x: auto;\"><span style=\"font-family: times;\"><span style=\"color: #800180; font-weight: bold;\"><br /></span></span></div><div style=\"overflow-x: auto;\"><span style=\"font-family: times;\"><span style=\"color: #800180; font-weight: bold;\">Details about how to call the API are mixed with domain logic</span>, which can make the code harder to understand. For example, the call to <span style=\"color: #0f9d58; font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">decoder.formatBytes()</span> is required by the API, but how the bytes are formatted isn’t relevant to the domain logic.</span></div><div style=\"overflow-x: auto;\"><br /></div><div style=\"overflow-x: auto;\"><div style=\"overflow-x: auto;\"><span style=\"font-family: times;\"><br /></span></div><div style=\"overflow-x: auto;\"><span style=\"font-family: times;\">Additionally, if this API is used in many places across a codebase, then <span style=\"color: #800180; font-weight: bold;\">all usages may need to change if the way the API is used changes.</span> For example, if the return type of this function is changed to the more generic <span style=\"color: #0f9d58; font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">SpeedyImgResult</span> type, usages of <span style=\"color: #0f9d58; font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">SpeedyImgImage</span> would need to be updated.</span></div><div><br /></div><div><br /></div><div><div><span style=\"font-family: times;\">To avoid these maintenance problems, <span style=\"color: #800180; font-weight: bold;\">create <i>wrapper types</i> to hide API details behind an abstraction</span>:</span></div></div><div><br /></div>      <div style=\"overflow-x: auto;\"><table class=\"my-bordered-table\" style=\"width: 613px;\"><tbody><tr><td style=\"background-color: #d9ead3; vertical-align: top; width: 607px;\"><pre style=\"background-color: #d9ead3; border: 0px; color: black; margin: 0px; padding-bottom: 0px; padding-left: 0px; padding-top: 0px;\"><span style=\"font-family: consolas, &quot;courier new&quot;, courier, monospace;\"><span style=\"font-weight: bold;\">Image</span> decodeImage(List&lt;<span style=\"font-weight: bold;\">ImageDecoder</span>&gt; <span style=\"font-weight: bold;\">decoders</span>, byte[] data) {<br />  for (<span style=\"font-weight: bold;\">ImageDecoder</span> decoder : decoders) {<br />    <span style=\"font-weight: bold;\">Image decodedImage</span> = decoder.decode(data);<br />    if (validateGoodImage(<span style=\"font-weight: bold;\">decodedImage</span>)) { return <span style=\"font-weight: bold;\">decodedImage</span>; }<br />  }<br />  throw new RuntimeException();<br />}</span></pre></td></tr></tbody></table>            <div><br /></div><div><br /></div><div><span style=\"font-family: times;\"><span style=\"color: #800180; font-weight: bold;\">Wrapping an external API follows the <a href=\"https://en.wikipedia.org/wiki/Separation_of_concerns\">Separation of Concerns</a></span> principle, since the logic for how the API is called is separated from the domain logic. This has many benefits, including:</span></div><div><ul style=\"text-align: left;\"><li><span style=\"font-family: times;\">If the way the API is used changes, encapsulating the API in a wrapper insulates how far those changes can propagate across your codebase.</span></li><li><span style=\"font-family: times;\">You can modify the interface or the implementation of types you own, but you can’t for API types.</span></li><li><span style=\"font-family: times;\">It is easier to switch or add another API, since they can still be represented by the introduced types (e.g. <span style=\"color: #0f9d58; font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">ImageDecoder/Image</span>).</span></li><li><span style=\"font-family: times;\">Readability can improve as you don’t need to sift through API code to understand core logic.</span></li></ul><br /></div><div><div><span style=\"font-family: times;\"><span style=\"color: #800180; font-weight: bold;\">Not all external APIs need to be wrapped</span>. For example, if an API would take a huge effort to separate or is simple enough that it doesn't pollute the codebase, it may be better not to introduce wrapper types (e.g. library types like <span style=\"color: #0f9d58; font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">List</span> in Java or <span style=\"color: #0f9d58; font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">std::vector</span> in C++). When in doubt, keep in mind that a wrapper should only be added if it will clearly improve the code (see the <a href=\"https://en.wikipedia.org/wiki/You_aren%27t_gonna_need_it\">YAGNI</a> principle).</span></div></div><div><br /></div><div><br /></div></div><div style=\"overflow-x: auto;\"><p dir=\"ltr\" style=\"font-family: times; line-height: 1.2; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"font-family: &quot;Times New Roman&quot;; font-size: 13pt; font-style: italic; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;\">“Separation of Concerns” in the context of external APIs is also described by Martin Fowler in his blog post, </span><a href=\"https://martinfowler.com/articles/refactoring-external-service.html\" style=\"text-decoration-line: none;\"><span style=\"color: #1155cc; font-family: &quot;Times New Roman&quot;; font-size: 13pt; font-style: italic; font-variant-east-asian: normal; font-variant-numeric: normal; text-decoration-line: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;\">Refactoring code that accesses external services</span></a><span style=\"font-family: &quot;Times New Roman&quot;; font-size: 13pt; font-style: italic; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;\">.&nbsp;</span></p><div><span style=\"font-family: &quot;Times New Roman&quot;; font-size: 13pt; font-style: italic; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;\"><br /></span></div></div>  </div>",
  "link": [
    "",
    "",
    "",
    "",
    ""
  ],
  "author": {
    "name": "Google Testing Bloggers",
    "uri": "http://www.blogger.com/profile/03153388556673050910",
    "email": "noreply@blogger.com",
    "gd:image": ""
  },
  "thr:total": 2
}