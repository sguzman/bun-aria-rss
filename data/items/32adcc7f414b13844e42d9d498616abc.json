{
  "title": "Move Amazon SageMaker Autopilot ML models from experimentation to production using Amazon SageMaker Pipelines",
  "link": "https://aws.amazon.com/blogs/machine-learning/move-amazon-sagemaker-autopilot-ml-models-from-experimentation-to-production-using-amazon-sagemaker-pipelines/",
  "dc:creator": "Pierre de Malliard",
  "pubDate": "Tue, 01 Nov 2022 16:51:41 +0000",
  "category": [
    "Advanced (300)",
    "Amazon SageMaker",
    "Amazon SageMaker Autopilot"
  ],
  "guid": "5a730eff798e696ca66a9005b37c175867a671e0",
  "description": "Amazon SageMaker Autopilot automatically builds, trains, and tunes the best custom machine learning (ML) models based on your data. It’s an automated machine learning (AutoML) solution that eliminates the heavy lifting of handwritten ML models that requires ML expertise. Data scientists need to only provide a tabular dataset and select the target column to predict, […]",
  "content:encoded": "<p><a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/autopilot-automate-model-development.html\" target=\"_blank\" rel=\"noopener noreferrer\">Amazon SageMaker Autopilot</a> automatically builds, trains, and tunes the best custom machine learning (ML) models based on your data. It’s an automated machine learning (AutoML) solution that eliminates the heavy lifting of handwritten ML models that requires ML expertise. Data scientists need to only provide a tabular dataset and select the target column to predict, and Autopilot automatically infers the problem type, performs data preprocessing and feature engineering, selects the algorithms and training mode, and explores different configurations to find the best ML model. Then you can directly deploy the model to an <a href=\"https://aws.amazon.com/sagemaker/\" target=\"_blank\" rel=\"noopener noreferrer\">Amazon SageMaker</a> endpoint or iterate on the recommended solutions to further improve the model quality.</p> \n<p>Although Autopilot eliminates the heavy lifting of building ML models, MLOps engineers still have to create, automate, and manage end-to-end ML workflows. <a href=\"https://aws.amazon.com/sagemaker/pipelines/\" target=\"_blank\" rel=\"noopener noreferrer\">Amazon SageMaker Pipelines</a> helps you automate the different steps of the ML lifecycle, including data preprocessing, training, tuning and evaluating ML models, and deploying them.</p> \n<p>In this post, we show how to create an end-to-end ML workflow to train and evaluate an Autopilot generated ML model using Pipelines and register it in the <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/model-registry.html\" target=\"_blank\" rel=\"noopener noreferrer\">SageMaker model registry</a>. The ML model with the best performance can be deployed to a SageMaker endpoint.</p> \n<h2>Dataset overview</h2> \n<p>We use the publicly available hospital readmission dataset for diabetic patients to predict readmission of diabetic patients within 30 days after discharge. It is a sampled version of the&nbsp;“<a href=\"https://archive.ics.uci.edu/ml/datasets/diabetes+130-us+hospitals+for+years+1999-2008\" target=\"_blank\" rel=\"noopener noreferrer\">Diabetes 130-US hospitals for years 1999-2008 Data Set”.</a> This is a multi-class classification problem because the readmission options are either <code>&lt; 30</code> if the patient is readmitted within 30 days, <code>&gt; 30</code> if the patient is readmitted after 30 days, or no for no record of readmission.</p> \n<p>The dataset contains 50,000 rows and 15 columns. This includes demographic information about patients along with their hospital visit records and <code>readmitted</code> as the target column. The following table summarizes the column details.</p> \n<table border=\"1px\"> \n <tbody> \n  <tr style=\"background-color: #000000\"> \n   <td><span style=\"color: #ffffff\"><strong>Column Name</strong></span></td> \n   <td><span style=\"color: #ffffff\"><strong>Description</strong></span></td> \n  </tr> \n  <tr> \n   <td>Race_Caucasian</td> \n   <td>Values: 0 for no, 1 for yes</td> \n  </tr> \n  <tr> \n   <td>Race_African_American</td> \n   <td>Values: 0 for no, 1 for yes</td> \n  </tr> \n  <tr> \n   <td>Race_Hispanic</td> \n   <td>Values: 0 for no, 1 for yes</td> \n  </tr> \n  <tr> \n   <td>Race_Asian</td> \n   <td>Values: 0 for no, 1 for yes</td> \n  </tr> \n  <tr> \n   <td>Race_Other</td> \n   <td>Values: 0 for no, 1 for yes</td> \n  </tr> \n  <tr> \n   <td>Age</td> \n   <td>0–100 age range</td> \n  </tr> \n  <tr> \n   <td>Time in Hospital</td> \n   <td>Number of days between admission and discharge</td> \n  </tr> \n  <tr> \n   <td>Number of lab procedures</td> \n   <td>Number of lab tests performed during the encounter</td> \n  </tr> \n  <tr> \n   <td>Number of medications</td> \n   <td>Number of distinct generic names administered during the encounter</td> \n  </tr> \n  <tr> \n   <td>Number of emergency visits</td> \n   <td>Number of emergency visits of the patient in the year preceding the encounter</td> \n  </tr> \n  <tr> \n   <td>Number of inpatient visits</td> \n   <td>Number of inpatient visits of the patient in the year preceding the encounter</td> \n  </tr> \n  <tr> \n   <td>Number of diagnoses</td> \n   <td>Number of diagnoses entered to the system</td> \n  </tr> \n  <tr> \n   <td>Change of medications</td> \n   <td>Indicates if there was a change in diabetic medications (either dosage or generic name); values: 0 and 1</td> \n  </tr> \n  <tr> \n   <td>Diabetic medications</td> \n   <td>Indicates if there was any diabetic medication prescribed; values: 0 for no changes in prescription and 1 for change in prescription</td> \n  </tr> \n  <tr> \n   <td>Readmitted</td> \n   <td>Days to inpatient readmission; values: &lt;30 if the patient was readmitted in less than 30 days, &gt;30 if the patient was readmitted in more than 30 days, and no for no record of readmission</td> \n  </tr> \n </tbody> \n</table> \n<h2>Solution overview</h2> \n<p>We use Pipelines in <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/studio.html\" target=\"_blank\" rel=\"noopener noreferrer\">Amazon SageMaker Studio</a> to orchestrate different <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/build-and-manage-steps.html\" target=\"_blank\" rel=\"noopener noreferrer\">pipeline steps</a> required to train an Autopilot model. An <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/autopilot-automate-model-development-create-experiment.html\" target=\"_blank\" rel=\"noopener noreferrer\">Autopilot experiment</a> is created and run using the AWS SDKs as described in this post. Autopilot training jobs start their own dedicated SageMaker backend processes, and dedicated <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/autopilot-reference.html\" target=\"_blank\" rel=\"noopener noreferrer\">SageMaker API calls</a> are required to start new training jobs, monitor training job statuses, and invoke trained Autopilot models.</p> \n<p>The following are the steps required for this end-to-end Autopilot training process:</p> \n<ol> \n <li>Create an Autopilot training job.</li> \n <li>Monitor the training job status.</li> \n <li>Evaluate performance of the trained model on a test dataset.</li> \n <li>Register the model in the model registry.</li> \n</ol> \n<div id=\"attachment_44593\" style=\"width: 516px\" class=\"wp-caption aligncenter\">\n <img aria-describedby=\"caption-attachment-44593\" loading=\"lazy\" class=\"wp-image-44593\" src=\"https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2022/10/21/image001-8.jpg\" alt=\"Overview of the SageMaker pipeline steps\" width=\"506\" height=\"452\">\n <p id=\"caption-attachment-44593\" class=\"wp-caption-text\">SageMaker pipeline steps</p>\n</div> \n<p>When the registered model meets the expected performance requirements after a manual review, you can deploy the model to a <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateEndpoint.html\" target=\"_blank\" rel=\"noopener noreferrer\">SageMaker endpoint</a> using a standalone deployment script.</p> \n<p>The following architecture diagram illustrates the different pipeline steps necessary to package all the steps in a reproducible, automated, and scalable Autopilot training pipeline. Each step is responsible for a specific task in the workflow:</p> \n<ol> \n <li>An <a href=\"http://aws.amazon.com/lambda\" target=\"_blank\" rel=\"noopener noreferrer\">AWS Lambda</a> function starts the Autopilot training job.</li> \n <li>A Callback step continuously monitors that job status.</li> \n <li>When the training job status is complete, we use a SageMaker processing job to evaluate the model’s performance.</li> \n <li>Finally, we use another Lambda function to register the ML model and the performance metrics to the SageMaker model registry.</li> \n</ol> \n<p>The data files are read from the <a href=\"http://aws.amazon.com/s3\" target=\"_blank\" rel=\"noopener noreferrer\">Amazon Simple Storage Service</a> (Amazon S3) bucket and the pipeline steps are called sequentially.</p> \n<div id=\"attachment_44594\" style=\"width: 1548px\" class=\"wp-caption aligncenter\">\n <img aria-describedby=\"caption-attachment-44594\" loading=\"lazy\" class=\"wp-image-44594 size-full\" src=\"https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2022/10/21/image002-4.jpg\" alt=\"Architecture diagram of the SageMaker pipeline\" width=\"1538\" height=\"704\">\n <p id=\"caption-attachment-44594\" class=\"wp-caption-text\">Architecture diagram of the SageMaker pipeline</p>\n</div> \n<p>In the following sections, we review the code and discuss the components of each step. To deploy the solution, reference the <a href=\"https://github.com/aws/amazon-sagemaker-examples/tree/main/autopilot/sagemaker-autopilot-pipelines\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub repo</a>, which provides step-by-step instructions for implementing an Autopilot MLOps workflow using Pipelines.</p> \n<h2>Prerequisites</h2> \n<p>For this walkthrough, complete the following prerequisite steps:</p> \n<ol> \n <li>Set up an <a href=\"https://aws.amazon.com/premiumsupport/knowledge-center/create-and-activate-aws-account/\" target=\"_blank\" rel=\"noopener noreferrer\">AWS account</a>.</li> \n <li>Create a Studio environment.</li> \n <li>Create two <a href=\"http://aws.amazon.com/iam\" target=\"_blank\" rel=\"noopener noreferrer\">AWS Identity and Access Management</a> (IAM) roles: <code>LambdaExecutionRole</code> and <code>SageMakerExecutionRole</code>, with permissions as outlined in the SageMaker notebook. The managed policies should be scoped down further for improved security. For instructions, refer to <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_create_for-user.html\" target=\"_blank\" rel=\"noopener noreferrer\">Creating a role to delegate permissions to an IAM user</a>.</li> \n <li>On the Studio console, upload the code from the <a href=\"https://github.com/aws/amazon-sagemaker-examples/tree/main/autopilot/sagemaker-autopilot-pipelines\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub repo</a>.</li> \n <li>Open the SageMaker notebook <code>autopilot_pipelines_demo_notebook.ipynb</code> and run the cells under <strong>Get dataset</strong> to download the data and upload it to your S3 bucket. \n  <ol type=\"a\"> \n   <li>Download the data and unzip it to a folder named data: \n    <div class=\"hide-language\"> \n     <pre><code class=\"lang-bash\">!unzip -o data/data.zip -d data\n!mkdir data\n!wget https://static.us-east-1.prod.workshops.aws/public/d56bf7ad-9738-4edf-9be0-f03cd22d8cf2/static/resources/hcls/diabetic.zip -nc -O data/data.zip\n</code></pre> \n    </div> </li> \n   <li>Split the data into train-val and test files and upload them to your S3 bucket. The train-val file is automatically split into training and validation datasets by Autopilot. The test file is split into two separate files: one file without the target column and another file with only the target column. \n    <div class=\"hide-language\"> \n     <pre><code class=\"lang-bash\">data = pd.read_csv(DATASET_PATH)\ntrain_val_data = data.sample(frac=0.8)\ntest_data = data.drop(train_val_data.index)\ntrain_val_data.to_csv(train_val_dataset_s3_path.default_value, index=False, header=True)\ntest_data.drop(target_attribute_name.default_value, axis=1).to_csv(\nx_test_s3_path.default_value, index=False, header=False\n)\ntest_data[target_attribute_name.default_value].to_csv(\ny_test_s3_path.default_value, index=False, header=True)\n</code></pre> \n    </div> </li> \n  </ol> </li> \n</ol> \n<p>When the dataset is ready to use, we can now set up Pipelines to establish a repeatable process to build and train custom ML models using Autopilot. We use <a href=\"https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/sagemaker.html\" target=\"_blank\" rel=\"noopener noreferrer\">Boto3</a> and the <a href=\"https://sagemaker.readthedocs.io/en/stable/\" target=\"_blank\" rel=\"noopener noreferrer\">SageMaker SDK</a> to launch, track, and evaluate the AutoML jobs in an automated fashion.</p> \n<h2>Define the pipeline steps</h2> \n<p>In this section, we walk you through setting up the four steps in the pipeline.</p> \n<h3>Start the Autopilot job</h3> \n<p>This pipeline step uses a <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/build-and-manage-steps.html#step-type-lambda\" target=\"_blank\" rel=\"noopener noreferrer\">Lambda step</a>, which runs a serverless Lambda function. We use a Lambda step because the API call to Autopilot is lightweight. Lambda functions are serverless and well suited for this task. For more information about Lambda steps, refer to <a href=\"https://aws.amazon.com/blogs/machine-learning/use-a-sagemaker-pipeline-lambda-step-for-lightweight-model-deployments/\" target=\"_blank\" rel=\"noopener noreferrer\">Use a SageMaker Pipeline Lambda step for lightweight model deployments</a>. The Lambda function in the <code>start_autopilot_job.py</code> script <a href=\"https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/sagemaker.html#SageMaker.Client.create_auto_ml_job\" target=\"_blank\" rel=\"noopener noreferrer\">creates an Autopilot job</a>.</p> \n<p>We use the Boto3 Autopilot API call <a href=\"https://docs.aws.amazon.com/cli/latest/reference/sagemaker/create-auto-ml-job.html\" target=\"_blank\" rel=\"noopener noreferrer\">create_auto_ml_job</a> to specify the Autopilot job configuration, with the following parameters:</p> \n<ul> \n <li><strong>AutoMLJobName</strong> – The Autopilot job name.</li> \n <li><strong>InputDataConfig</strong> – The training data, data location in Amazon S3, and <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_S3DataSource.html#:~:text=Required%3A%20No-,S3DataType,-If%20you%20choose\" target=\"_blank\" rel=\"noopener noreferrer\">S3 data type</a> with valid values such as <code>S3Prefix</code>, <code>ManifestFile</code>, and <code>AugmentedManifestFile</code>.</li> \n <li><strong>OutputDataConfig</strong> – The S3 output path where artifacts from the AutoML job are stored.</li> \n <li><strong>ProblemType</strong> – The <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/autopilot-datasets-problem-types.html\" target=\"_blank\" rel=\"noopener noreferrer\">problem type</a> (<code>MulticlassClassification</code> for our use case).</li> \n <li><strong>AutoMLJobObjective</strong> – <code>F1macro</code> is our <a href=\"https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/sagemaker.html#SageMaker.Client.create_auto_ml_job:~:text=algorithm%20support%20.-,AutoMLJobObjective%20(dict)%20%2D%2D,-Defines%20the%20objective\" target=\"_blank\" rel=\"noopener noreferrer\">objective metric</a> for our use case.</li> \n <li><strong>AutoMLJobConfig</strong> – The <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/autopilot-model-support-validation.html\" target=\"_blank\" rel=\"noopener noreferrer\">training mode</a> is specified here. We use the newly released <a href=\"https://aws.amazon.com/blogs/machine-learning/amazon-sagemaker-autopilot-is-up-to-eight-times-faster-with-new-ensemble-training-mode-powered-by-autogluon/\" target=\"_blank\" rel=\"noopener noreferrer\">ensemble training mode</a> powered by <a href=\"https://auto.gluon.ai/stable/index.html\" target=\"_blank\" rel=\"noopener noreferrer\">AutoGluon</a>.</li> \n</ul> \n<p>See the following code:</p> \n<div class=\"hide-language\"> \n <pre><code class=\"lang-code\">def lambda_handler(event, context):\nsagemaker_client.create_auto_ml_job(\nAutoMLJobName=event[\"AutopilotJobName\"],\nInputDataConfig=[\n{\n\"DataSource\": {\n\"S3DataSource\": {\n\"S3DataType\": \"S3Prefix\",\n\"S3Uri\": event[\"TrainValDatasetS3Path\"],\n}\n},\n\"TargetAttributeName\": event[\"TargetAttributeName\"],\n}\n],\nOutputDataConfig={\"S3OutputPath\": event[\"TrainingOutputS3Path\"]},\nProblemType=event[\"ProblemType\"],\nAutoMLJobObjective={\"MetricName\": event[\"AutopilotObjectiveMetricName\"]},\nAutoMLJobConfig={\n\"CompletionCriteria\": {\n\"MaxCandidates\": event[\"MaxCandidates\"],\n\"MaxRuntimePerTrainingJobInSeconds\": event[\n\"MaxRuntimePerTrainingJobInSeconds\"\n],\n\"MaxAutoMLJobRuntimeInSeconds\": event[\"MaxAutoMLJobRuntimeInSeconds\"],\n},\n\"Mode\": event[\"AutopilotMode\"],\n},\nRoleArn=event[\"AutopilotExecutionRoleArn\"],\n)\n</code></pre> \n</div> \n<h3>Check Autopilot job status</h3> \n<p>A <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/build-and-manage-steps.html#step-type-callback\" target=\"_blank\" rel=\"noopener noreferrer\">Callback step</a> helps us keep track of the status of the Autopilot training job.</p> \n<p>The step repeatedly keeps track of the training job status by using a separate Lambda function in <code>check_autopilot_job_status.py</code> until its completion.</p> \n<p>The Callback step places a token in an <a href=\"https://aws.amazon.com/sqs/\" target=\"_blank\" rel=\"noopener noreferrer\">Amazon Simple Queue Service</a> (Amazon SQS) queue that triggers a Lambda function to check the training job status:</p> \n<ul> \n <li>If the job is still running, the Lambda function raises an exception and the message is placed back into the SQS queue</li> \n <li>If the job is complete, the Lambda function sends a success message back to the <code>Callback</code> step and the pipeline continues with the next step</li> \n</ul> \n<p>We use a combination of a <code>Callback</code> step and a Lambda function. There is an alternate option of using a SageMaker processing job instead.</p> \n<h3>Evaluate the best Autopilot model</h3> \n<p>The <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/build-and-manage-steps.html#step-type-processing\" target=\"_blank\" rel=\"noopener noreferrer\">SageMaker processing step</a> launches a <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/batch-transform.html\" target=\"_blank\" rel=\"noopener noreferrer\">SageMaker batch transform job</a> to evaluate the trained Autopilot model against an evaluation dataset (the test set that was saved to the S3 bucket) and generates the performance metrics evaluation report and model explainability metrics. The evaluation script takes the Autopilot job name as an input argument and launches the batch transform job.</p> \n<p>When the batch transform job is complete, we get output predictions for the test set. The output predictions are compared to the actual (ground truth) labels using Scikit-learn metrics functions. We evaluate our results based on the <a href=\"https://scikit-learn.org/stable/modules/generated/sklearn.metrics.f1_score.html\" target=\"_blank\" rel=\"noopener noreferrer\">F1 score</a>, <a href=\"https://scikit-learn.org/stable/modules/generated/sklearn.metrics.precision_score.html\" target=\"_blank\" rel=\"noopener noreferrer\">precision</a>, and <a href=\"https://scikit-learn.org/stable/modules/generated/sklearn.metrics.recall_score.html\" target=\"_blank\" rel=\"noopener noreferrer\">recall</a>. The performance metrics are saved to a JSON file, which is referenced when registering the model in the subsequent step.</p> \n<h3>Register the Autopilot model</h3> \n<p>We use another Lambda step, in which the Lambda function in <code>register_autopilot_job.py</code> registers the Autopilot model to the SageMaker model registry using the evaluation report obtained in the previous SageMaker processing step. A Lambda step is used here for cost efficiency and latency.</p> \n<p>At this point, we have successfully registered our new Autopilot model to the SageMaker model registry. You can view the new model on Studio by choosing <strong>Model registry </strong>on the <strong>SageMaker resources </strong>menu and opening <code>autopilot-demo-package</code>. Choose any version of a training job to view the objective metrics under <strong>Model quality</strong>.</p> \n<p><img loading=\"lazy\" class=\"alignnone size-full wp-image-44595\" style=\"margin: 10px 0px 10px 0px;border: 1px solid #CCCCCC\" src=\"https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2022/10/21/image003-4.jpg\" alt=\"\" width=\"1289\" height=\"295\"></p> \n<p>You can use the explainability report on the <strong>Explainability</strong> tab to understand your model’s predictions.</p> \n<p><img loading=\"lazy\" class=\"alignnone size-full wp-image-44596\" style=\"margin: 10px 0px 10px 0px;border: 1px solid #CCCCCC\" src=\"https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2022/10/21/image004-4.jpg\" alt=\"\" width=\"1289\" height=\"727\"></p> \n<p>To view the experiments run for each model created, navigate to the <strong>Experiments and trials </strong>page. Choose (right-click) one of the listed experiments and choose <strong>Describe AutoML job</strong> to view the model leaderboard.</p> \n<p><img loading=\"lazy\" class=\"alignnone size-full wp-image-44597\" style=\"margin: 10px 0px 10px 0px;border: 1px solid #CCCCCC\" src=\"https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2022/10/21/image005-3.jpg\" alt=\"\" width=\"1287\" height=\"382\"></p> \n<p>To view the pipeline steps on the <strong>Experiments and trials </strong>page, choose (right-click) the experiment and choose <strong>Open pipeline details</strong>.</p> \n<p><img loading=\"lazy\" class=\"alignnone size-full wp-image-44598\" style=\"margin: 10px 0px 10px 0px;border: 1px solid #CCCCCC\" src=\"https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2022/10/21/image006-2.jpg\" alt=\"\" width=\"1287\" height=\"739\"></p> \n<h2>Create and run the pipeline</h2> \n<p>After we define the pipeline steps, we combine them into a <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/define-pipeline.html#:~:text=Step%2010%3A%20Create%20a%20pipeline\" target=\"_blank\" rel=\"noopener noreferrer\">SageMaker pipeline</a>. The steps are run sequentially. The pipeline runs all of the steps for an AutoML job, using Autopilot for training, model evaluation, and model registration. See the following code:</p> \n<div class=\"hide-language\"> \n <pre><code class=\"lang-code\">pipeline = Pipeline(\nname=\"autopilot-demo-pipeline\",\nparameters=[\nautopilot_job_name,\ntarget_attribute_name,\ntrain_val_dataset_s3_path,\nx_test_s3_path,\ny_test_s3_path,\nmax_autopilot_candidates,\nmax_autopilot_job_runtime,\nmax_autopilot_training_job_runtime,\ninstance_count,\ninstance_type,\nmodel_approval_status,\n],\nsteps=[\nstep_start_autopilot_job,\nstep_check_autopilot_job_status_callback,\nstep_autopilot_model_evaluation,\nstep_register_autopilot_model,\n],\nsagemaker_session=sagemaker_session,\n)\n</code></pre> \n</div> \n<h2>Deploy the model</h2> \n<p>After we have manually reviewed the ML model’s performance, we can deploy our newly created model to a SageMaker endpoint. For this, we can run the cell in the notebook that creates the model endpoint using the model configuration saved in the SageMaker model registry.</p> \n<p>Note that this script is shared for demonstration purposes, but it’s recommended to follow a more robust CI/CD pipeline for production deployment. For more information, refer to <a href=\"https://aws.amazon.com/blogs/machine-learning/building-automating-managing-and-scaling-ml-workflows-using-amazon-sagemaker-pipelines/\" target=\"_blank\" rel=\"noopener noreferrer\">Building, automating, managing, and scaling ML workflows using Amazon SageMaker Pipelines</a>.</p> \n<h2>Conclusion</h2> \n<p>This post described an easy-to-use ML pipeline approach to automatically train tabular ML models (AutoML) using Autopilot, Pipelines, and Studio. AutoML improves ML practitioners’ efficiency, accelerating the path from ML experimentation to production without the need for extensive ML expertise. We outlined the respective pipeline steps needed for ML model creation, evaluation, and registration.</p> \n<p>Get started by accessing the code on the <a href=\"https://github.com/aws/amazon-sagemaker-examples/tree/main/autopilot/sagemaker-autopilot-pipelines\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub repo</a> to train and deploy your own custom AutoML models.</p> \n<p>For more information on Pipelines and Autopilot, refer to <a href=\"https://aws.amazon.com/sagemaker/pipelines/\" target=\"_blank\" rel=\"noopener noreferrer\">Amazon SageMaker Pipelines</a> and <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/autopilot-automate-model-development.html\" target=\"_blank\" rel=\"noopener noreferrer\">Automate model development with Amazon SageMaker Autopilot</a>, respectively.</p> \n<hr> \n<h3>About the Authors</h3> \n<p style=\"clear: both\"><strong> <a href=\"https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2022/10/25/Screen-Shot-2022-10-21-at-8.14.27-PM-274x300-1.png\"><img loading=\"lazy\" class=\"size-full wp-image-44858 alignleft\" src=\"https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2022/10/25/Screen-Shot-2022-10-21-at-8.14.27-PM-274x300-1.png\" alt=\"\" width=\"100\" height=\"109\"></a>Pierre de Malliard</strong> is a Full-Stack Data Scientist for AWS and is passionate about helping customers improve their business outcomes with machine learning. He has been building AI/ML solutions across the healthcare sector. He holds multiple AWS certifications. In his free time, Pierre enjoys backcountry skiing and spearfishing.</p> \n<p style=\"clear: both\"><strong><a href=\"https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2022/10/25/paavani-dua.jpg\"><img loading=\"lazy\" class=\"size-full wp-image-44857 alignleft\" src=\"https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2022/10/25/paavani-dua.jpg\" alt=\"\" width=\"100\" height=\"133\"></a>Paavani Dua</strong> is an Applied Scientist in the AWS AI organization. At the Amazon ML Solutions Lab, she works with customers to solve their business problems using ML solutions. Outside of work, she enjoys hiking, reading, and baking.</p> \n<p style=\"clear: both\"><img loading=\"lazy\" class=\"alignleft wp-image-44624 size-full\" src=\"https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2022/10/21/marcelo_aberle.jpg\" alt=\"\" width=\"100\" height=\"100\"><strong>Marcelo Aberle</strong> is an ML Engineer in the AWS AI organization. He is leading MLOps efforts at the Amazon ML Solutions Lab, helping customers design and implement scalable ML systems. His mission is to guide customers on their enterprise ML journey and accelerate their ML path to production. He is an admirer of California nature and enjoys hiking and cycling around San Francisco.</p>"
}