{
  "title": "The Role of a Maintainer",
  "link": "",
  "updated": "2019-05-18T00:00:00+00:00",
  "id": "https://mrocklin.github.io/blog/2019/05/18/maintainer",
  "content": "<p>What are the expectations and best practices for maintainers of open source software libraries?\nHow can we do this better?</p>\n\n<p>This post frames the discussion and then follows with best practices based on my personal experience and opinions.  <em>I make no claim that these are correct.</em></p>\n\n<h2 id=\"let-us-assume-external-responsibility\">Let us Assume External Responsibility</h2>\n\n<p>First, the most common answer to this question is the following:</p>\n\n<ul>\n  <li><strong>Q:</strong> <em>What are expectations on OSS maintainers?</em></li>\n  <li><strong>A:</strong> <em>Nothing at all.  They’re volunteers.</em></li>\n</ul>\n\n<p>However, let’s assume for a moment that these maintainers are paid to maintain\nthe project some modest amount, like 10 hours a week.</p>\n\n<p>How can they best spend this time?</p>\n\n<h2 id=\"what-is-a-maintainer\">What is a Maintainer?</h2>\n\n<p>Next, let’s disambiguate the role of <em>developer</em>, <em>reviewer</em>, and <em>maintainer</em></p>\n\n<ol>\n  <li>\n    <p><strong>Developers</strong> fix bugs and create features.  They write code and docs and\ngenerally are agents of change in a software project.  There are often many\nmore developers than reviewers or maintainers.</p>\n  </li>\n  <li>\n    <p><strong>Reviewers</strong> are known experts in a part of a project and are called on to\nreview the work of developers, mostly to make sure that the developers\ndon’t break anything, but also to point them to related work, ensure common\ndevelopment practices, and pass on institutional knowledge.  There are\noften more developers than reviewers, and more reviewers than maintainers.</p>\n  </li>\n  <li>\n    <p><strong>Maintainers</strong> are loosely aware of the entire project.\nThey track ongoing work and make sure that it gets reviewed and merged in a\ntimely manner.  They direct the orchestra of developers and reviewers,\nmaking sure that they connect to each other appropriately, often serving\nas dispatcher.</p>\n\n    <p>Maintainers also have final responsibility.\nIf no reviewer can be found for an important contribution, they review.\nIf no developer can be found to fix an important bug, they develop.\nIf something goes wrong, it’s eventually the maintainer’s fault.</p>\n  </li>\n</ol>\n\n<h2 id=\"best-practices\">Best Practices</h2>\n\n<p>Now let’s get into the best practices of a maintainer, again assuming the\ncontext that they are paid to do this about 25% time for a moderately busy\nsoftware project (perhaps 10-50 issues/contributions per day).</p>\n\n<h3 id=\"timely-response\">Timely Response</h3>\n\n<p><em>“Welcome Bob!  Nice question.  I’m currently a bit busy right now, but I\nthink that if you look through <a href=\"\">these notes</a> that they might point you in the\nright direction.  I should have time to check back here by Thursday.”</em></p>\n\n<p>The maintainer is often the first person a new contributor meets.\nLike a concierge or greeter at a hotel or restaurant, it’s good to say “Hi”\nwhen someone shows up, even if that’s all you can say at that moment.</p>\n\n<p>When someone is raising an issue or contributing a patch, try to give them a\nresponse within 24 hours, <em>even if it’s not a very helpful response</em>.  It’s\nscary to ask something in public, and much scarier to try write code and\ncontribute it to a project.  Acknowledging the contributor’s question or work\nhelps them to relax and feel welcome.</p>\n\n<h3 id=\"answer-easy-questions-easily\">Answer Easy Questions Easily</h3>\n\n<p><em>“Thanks for the question Bob.  I think that what you’re looking for is\ndescribed in <a href=\"\">these docs</a>.  Also, in the future we welcome these sorts of\nquestions on Stack Overflow.”</em></p>\n\n<p>Answer simple questions quickly, and move on.</p>\n\n<p>After answering, you might also direct new users and contributors to places\nlike Stack Overflow where they can ask questions in the future.</p>\n\n<h3 id=\"find-help-for-hard-problems\">Find Help for Hard Problems</h3>\n\n<p><em>“Hey Alice, you’re an expert on X, would you mind checking this out?”</em></p>\n\n<p>You probably have a small team of expert reviewers to ask for help for tricky\nproblems.  Get to know them well and use them.  It’s not your job to solve\nevery problem, and you probably don’t have time anyway.  It’s your job to make\nsure that the right reviewer sees the problem, and then track that it gets\nresolved.</p>\n\n<p>But also, don’t <em>overuse</em> your reviewers.  Everyone has a tolerance for how\nmuch they’re willing to help.  You may have to spread things out a little.\nGetting to know your reviewers personally and learning their interests can help\nyou to make decisions about when and where to use them.</p>\n\n<h3 id=\"but-follow-up\">But follow up</h3>\n\n<p><em>“Just checking in here.  It looks like Reviewer Alice has asked for X,\nDeveloper Bob is this something that you have time to do?  Also it looks like\nDeveloper Bob has a question about Y.  Reviewer Alice do you have any\nsuggestions for Bob on this?”</em></p>\n\n<p>The reviewers you rely on are likely to swoop in, convey expertise, and then\ndisappear back to their normal lives.  Thank them for their help, and don’t\nrely on them to track the work to completion, that’s your job.  You may have to\ndirect conversation a bit.</p>\n\n<p>We often see the following timeline:</p>\n\n<ul>\n  <li><strong>Developer:</strong> “Hi! I made a patch for X!”</li>\n  <li><strong>Maintainer:</strong> “Welcome!  Nice patch!  Hey Reviewer, you know X really well,\ncould you take a look?”</li>\n  <li><strong>Reviewer:</strong> “Hi Developer!  Great patch!  I found a bunch of things that\nwere wrong with it, but I think that you can probably fix them easily!”</li>\n  <li><strong>Developer:</strong> “Oh yeah!  You’re right, great, I’ve fixed everything you\nsaid!”</li>\n  <li>…</li>\n  <li><em>silence</em></li>\n</ul>\n\n<p>At this point, jump in again!</p>\n\n<ul>\n  <li>\n    <p><strong>Maintainer:</strong> “OK, it looks like you’ve handled everything that the\nreviewer asked for.  Nice work!  Reviewer, anything else?  Otherwise, I plan\nto merge this shortly”</p>\n\n    <p>“Also, I notice that your code didn’t pass the linter.  Please check out\nthis doc for how to run our auto-linter.”</p>\n  </li>\n  <li><strong>Developer:</strong> “Done!”</li>\n  <li><strong>Maintainer:</strong> “OK, merging. Thanks Developer!”</li>\n</ul>\n\n<p>This situation is nice, but not ideal from the maintainer’s perspective.\nIdeally the reviewer would finish things up, but often they don’t.\nIn some cases it might even be <em>their job</em> to finish things up,\nbut even then, it’s also <em>your job</em> to make sure that things finish up so if\nthey don’t show up, then it’s on the maintainer.</p>\n\n<p><em>All responsibility eventually falls back onto the maintainer.</em></p>\n\n<h3 id=\"prioritize-your-time\">Prioritize your time</h3>\n\n<p><em>“It’d be great if you could provide a minimal example as described\n<a href=\"https://matthewrocklin.com/blog/work/2018/02/28/minimal-bug-reports\">here</a>.\nPlease let us know if you’re able to manage this.  otherwise given time\nconstraints I’m not sure what we can do to help further.”</em></p>\n\n<p>Some contributors are awesome and do everything right.\nThey ask questions with minimal reproducible examples.\nThey provide well-tested code.\nEverything.  <a href=\"https://matthewrocklin.com/blog/work/2016/08/25/supporting-users\">They’re awesome.</a></p>\n\n<p>Others aren’t as awesome.\nThey ask for a lot of your time to help them solve problems that have\nlittle to do with your software.\nYou probably can’t solve every problem well, and working on their problems\nsteals important time away that you could be spending improving documentation\nor process.</p>\n\n<p>Politely thank misinformed users and direct them towards\nstandard documentation on expectations on asking questions and raising bug\nreports like <a href=\"https://stackoverflow.com/help/mcve\">Stack Overflow’s MCVE</a>\nor possibly <a href=\"https://matthewrocklin.com/blog/work/2018/02/28/minimal-bug-reports\">this post on crafting minimal bug\nreports</a></p>\n\n<h3 id=\"get-used-to-a-lot-of-e-mail\">Get used to a lot of e-mail</h3>\n\n<p><em>“Ah, the joy of e-mail filters”</em></p>\n\n<p>If you’re tracking every conversation then you’ll be getting hundreds of\ne-mails a day.  You don’t need to read all of these in depth (this would take\nmost of your 10 hours a week) but you probably should skim them.  Don’t worry,\nwith practice you can do this quickly.</p>\n\n<p>You certainly don’t want this in your personal inbox, so you may want to invest\na bit of time in organizing e-mail filters and labels.\nPersonally I use GMail and with their filters and keyboard shortcuts I can\nusually blast through e-mail pretty quickly.  (Hooray for j/k Vim-style bindings in GMail)</p>\n\n<p>I check my Github inbox a few times a day.  It usually takes 20-30 minutes in\nthe morning (due to all of the people active when I’m asleep) and 10 minutes\nduring other times in the day.  I look forward to this time.  It’s nice seeing\na lot of people being productive.</p>\n\n<p>Mostly during this period I’m looking for anyone who is blocked, and if\nnecessary I respond with something to help unblock them.</p>\n\n<h3 id=\"but-check-the-issue-tracker-periodically\">But check the issue tracker periodically</h3>\n\n<p><em>“Whoops!  I totally dropped this!  Sorry!”</em></p>\n\n<p>You’ll miss things.  People will force-push to Github (which triggers no alert)\nor the last person to reply to an issue will be you with no response. There are\nalso just old issues and PRs that have slipped through and aren’t coming up on\nyour e-mail.</p>\n\n<p>So every day or two, it’s good to go through all issues and PRs that have a\nglimmer of life in them and check in.  Often you’ll find that someone has done\nwork and the reviewer has left, or that the developer has just left.  Now is a\ngood time to ask a gentle message</p>\n\n<p><em>Just checking in, what’s the status here?</em></p>\n\n<p>Sometimes they’ll be busy at work and will come back in a couple days.\nSometimes they’ll need a push in the right direction.\nSometimes they’ll disappear completely, and you have to decide whether to\nfinish the work or let it linger.</p>\n\n<h3 id=\"weekends\">Weekends</h3>\n\n<p><em>“Now that I’m done with work for the week, I can finally finish up this PR.\nWait, where did everybody go?”</em></p>\n\n<p>This is hard, but a lot of the developers aren’t contributing as part of\ntheir day job, and so they work primarily on the weekends.  If they only work\non the weekends and you only respond during the week then we’re going to have\nvery long iteration cycles, which is frustrating for everyone and unlikely to\nresult in successful work.</p>\n\n<p>Personally I spend a bit of time in the morning and evening doing light\nmaintenance.  That’s a personal choice though.</p>\n\n<h3 id=\"dont-let-reviewers-drag-things-out-too-long\">Don’t let reviewers drag things out too long</h3>\n\n<p><em>“Can you just add one more thing?”</em></p>\n\n<p>Developers want to get their work in quickly.\nReviewers sometimes want to ask lots of questions, make small suggestions,\nand sometimes have very long conversations.\nAt some point you need to step in and ask for a definitive set of necessary changes.\nThis gives the developer a sense of finality, a light at the end of the tunnel.</p>\n\n<p>Very long review periods are a common anti-behavior today, they are destructive to\nattracting new developers and contribute to reviewer burnout.  A reviewer\nshould ideally iterate once or twice with a developer with in-depth comments\nand then we should be done.  This breaks down in a few ways:</p>\n\n<ol>\n  <li><strong>The Slow Rollout:</strong> The reviewer provides a few small suggestions, waits\nfor changes, then provides a few more, and so on, resulting in many\niterations.</li>\n  <li><strong>Serial Reviewers:</strong> After one reviewer finishes up, a second reviewer\narrives with their own set of requested changes.</li>\n  <li><strong>Reviewer Disagreement:</strong> The two reviewers provide different suggestions\nand the developer makes changes and undoes those changes based on who spoke\nlast.</li>\n  <li><strong>Endless Discussion:</strong> The reviewers then engage in very long and detailed\ntechnical conversation, scaring away the original developer.</li>\n</ol>\n\n<p>This is reviewer breakdown, and it’s up to the maintainer to identify that\nit’s happening, step in and say the following:</p>\n\n<p><em>OK, I think that what we have is a sufficient start.  I recommend that we\nmerge what we have here and continue the rest of this conversation in a\nseparate issue</em></p>\n\n<h3 id=\"thank-developers\">Thank Developers</h3>\n\n<p><em>“I appreciate all your work here.  In particular I’m really happy about these tests!”</em></p>\n\n<p>They look up to you.\nA small amount of praise from you can make their day and encourage them to\ncontinue contributing to open source.</p>\n\n<p>Also, as with normal life, if you can call out some specific thing that they\ndid well it becomes more personal.</p>\n\n<h3 id=\"encourage-excellent-developers-to-review-and-allow-excellent-reviewers-to-maintain\">Encourage Excellent Developers to Review, and Allow Excellent Reviewers to Maintain</h3>\n\n<p><em>“Hey Bob, this new work is similar to work that you’ve done before.  Any\ninterest in taking a look?”</em></p>\n\n<p>Over time you will notice that a repeat developer returns to the project\nfrequently, often to work on a particular topic.  When a new contribution\narrives in that part of the code, you might intentionally invite the repeat\ndeveloper to review that work.  You might invite them to become a reviewer.</p>\n\n<p>Similarly, when you find that a skilled reviewer frequently handles issues on\ntheir own, you should find ways to give them ownership over that section of the\ncode.  Defer to their judgement.  Make sure that they have commit rights and\nthe ability to publish new packages (if the code is separate enough to allow\nfor that).  You should clear the way for them to become a maintainer.</p>\n\n<p>To be clear, I wouldn’t encourage everyone.  Even very good developers can be\nbad reviewers or maintainers.  Bad reviewers can be unwelcoming and destructive\nto the process in a variety of ways.  This activity requires social skills\nthat aren’t universally held, regardless of programming skill.</p>\n\n<h3 id=\"take-a-vacation-but-tell-someone\">Take a Vacation (But Tell Someone)</h3>\n\n<p><em>“I’d like to checking out for a week.  Alice, would you mind keeping an eye on\nthings?”</em></p>\n\n<p>Maintaining a project with a few peers is wonderful because it’s easier for\npeople to take breaks and attend to their mental health.  However, it’s\nimportant to make people aware of your absence during vacations or illness.\nA quick word to a colleague about an absence, expected or otherwise, can help\nto keep things running smoothly.</p>\n\n<p><em>Many</em> OSS projects today have a single core maintainer.  This is hard on them\nand hard on the project (solo-maintainers tend to quickly become gruff).\nThis post is designed with this problem in mind.\nHopefully as we develop a vocabulary and conversation around the administrative\nsides of maintenance it will become easier to identify and encourage these\nbehaviors in new maintainers.</p>\n\n<h2 id=\"summary\">Summary</h2>\n\n<p><em>“Thanks for taking the time”</em></p>\n\n<p>Maintaining a project is not about being a great developer or a clever\nreviewer.  It’s about enabling others, removing road-blocks before they arise,\nand identifying and resolving difficult social situations.  It has much more to\ndo with logistics, coordination, and social behaviors than it has to do with\nalgorithms and version control.</p>\n\n<p>I have to admit, I’m not great at this, but I’m trying to become better.\nMaintaining a software project is a learned skill and takes effort.\nThe reward can be significant though.</p>\n\n<p>A well maintained project is pleasant to work on and attracts a productive team\nof friendly developers and reviewers that support each other.  It’s also a\ngreat way to learn more about how people use your software project than you\never could while writing code.  The activity of maintaining software gives you\nenough exposure to see where the project is headed and what’s possible going\nforward.</p>"
}