{
  "title": "How to Build Your Own Blockchain Part 4.1 &#8212; Bitcoin Proof of Work Difficulty Explained",
  "link": "https://bigishdata.com/2017/11/13/how-to-build-a-blockchain-part-4-1-bitcoin-proof-of-work-difficulty-explained/",
  "comments": "https://bigishdata.com/2017/11/13/how-to-build-a-blockchain-part-4-1-bitcoin-proof-of-work-difficulty-explained/#comments",
  "dc:creator": "Jack Schultz",
  "pubDate": "Mon, 13 Nov 2017 01:47:31 +0000",
  "category": [
    "Blockchains",
    "How To",
    "Python",
    "Bitcoin",
    "blockchain",
    "Difficulty",
    "Ethereum",
    "jbc",
    "Proof of Work"
  ],
  "guid": "http://bigishdata.com/?p=902",
  "description": "If you&#8217;re wondering why this is part 4.1 instead of part 4, and why I&#8217;m not talking about continuing to build the local jbc, it&#8217;s because explaining Bitcoin&#8217;s Proof of Work difficulty at a somewhat lower level takes a lot of &#8230; <a href=\"https://bigishdata.com/2017/11/13/how-to-build-a-blockchain-part-4-1-bitcoin-proof-of-work-difficulty-explained/\">Continue reading <span class=\"meta-nav\">&#8594;</span></a>",
  "content:encoded": "<p>If you&#8217;re wondering why this is part 4.1 instead of part 4, and why I&#8217;m not talking about continuing to build the local jbc, it&#8217;s because explaining Bitcoin&#8217;s Proof of Work difficulty at a somewhat lower level takes a lot of space. So unlike what this title says, this post in part 4 is not how to build a blockchain. It&#8217;s about how an existing blockchain is built.</p>\n<p>My main goal of the part 4 post was to have one section on the Bitcoin PoW, the next on Ethereum&#8217;s PoW, and finally talk about how jbc is going to run and validate proof or work. After writing all of part 1 to explain how Bitcoin&#8217;s PoW difficulty, it wasn&#8217;t going to fit in a single section. People, me included, tend get bored in the middle reading a long post and don&#8217;t finish.</p>\n<p>So part 4.1 will be going through Bitcoin&#8217;s PoW difficulty calculations. Part 4.2 will be going through Ethereum&#8217;s PoW calculations. And then part 4.3 will be me deciding how I want the jbc PoW to be as well as doing time calculations to see how long the mining will take.</p>\n<p>The sections of this post are:</p>\n<ol>\n<li>Calculate Target from Bits</li>\n<li>Determining if a Hash is less than the Target</li>\n<li>Calculating Difficulty</li>\n<li>How and when block difficulty is updated</li>\n<li>Full code</li>\n<li>Final Questions</li>\n</ol>\n<h3>TL;DR</h3>\n<p>The overall term of difficulty refers to how much work has to be done for a node to find a hash that is smaller than the target. There is one value stored in a block that talks about difficulty &#8212; <code>bits</code>. In order to calculate the <code>target</code> value that the hash, when converted to a hex value has to be less than, we use the <code>bits</code> field and run it through an equation that returns the target. We then use the <code>target</code> to calculate <code>difficulty</code>, where <code>difficulty</code> is only a number for a human to understand how difficult the proof of work is for that block.</p>\n<p>If you read on, <b>I go through how the blockchain determines what target number the mined block&#8217;s hash needs to be less than to be valid, and how that target is calculated.</b></p>\n<h3>Other Posts in This Series</h3>\n<ul>\n<li><a href=\"https://bigishdata.com/2017/10/17/write-your-own-blockchain-part-1-creating-storing-syncing-displaying-mining-and-proving-work/\">Part 1 — Creating, Storing, Syncing, Displaying, Mining, and Proving Work</a></li>\n<li><a href=\"https://bigishdata.com/2017/10/27/build-your-own-blockchain-part-2-syncing-chains-from-different-nodes/\">Part 2 — Syncing Chains From Different Nodes</a></li>\n<li><a href=\"https://bigishdata.com/2017/11/02/build-your-own-blockchain-part-3-writing-nodes-that-mine/\">Part 3 — Nodes that Mine</a></li>\n<li><a href=\"https://bigishdata.com/2017/11/21/how-to-build-your-own-blockchain-part-4-2-ethereum-proof-of-work-difficulty-explained/\">Part 4.2 &#8212; Ethereum Proof of Work Difficulty Explained</a></li>\n</ul>\n<h3>Calculate Target from Bits</h3>\n<p>In order to go through Bitcoin&#8217;s PoW, I need to use the values on actual blocks and explain the calculations, so a reader can verify all this code themselves. To start, I&#8217;m going to grab a random block number to work with and go through the calculations using that.</p>\n<pre>>>>import random\n>>> random.randint(0, 493928)\n111388</pre>\n<p><a href=\"https://blockchain.info/block/00000000000019c6573a179d385f6b15f4b0645764c4960ee02b33a3c7117d1e\">Block number 11138</a> it is! Back in time to March of 2011 we go.</p>\n<p><span id=\"more-902\"></span></p>\n<p>We&#8217;re going to start with assigning variables with the <code>bits</code> and <code>difficulty</code> values from the block, as well as the <code>hash</code>, so we can test its validity at the end.</p>\n<pre>>>> bits = '453062093'\n>>> difficulty = float('55,589.52'.replace(',',''))\n>>> block_hash = '00000000000019c6573a179d385f6b15f4b0645764c4960ee02b33a3c7117d1e'\n</pre>\n<p>Next part shows how to go from the <code>bits</code> field to the target. There are at least two different ways to do this &#8212; the first<strong> involves string manipulation and string to integer conversion, and the other uses bit manipulation.</strong></p>\n<p>For the first string manipulation part, we convert the bits string to an integer and then to a hex string. The first two characters of the hex_bits string are in one variable, which I call <code>shift</code>, and the remaining six are called the <code>value</code>.  From there, we use those values in the integer equation that will calculate the integer value of the <code>target</code>, which we can convert to a hex string to look at how pretty it is!</p>\n<p>Note that &#8216;L&#8217; on the back of the <code>target</code> and <code>hex(target)</code> is only Python telling you that the numbexr is too long to be stored as an int, and that it&#8217;s stored as a <a href=\"https://docs.python.org/2/library/functions.html#long\">long</a>.</p>\n<pre>>>> hex_bits = hex(int(bits))\n>>> hex_bits\n'0x1b012dcd'\n>>> shift = '0x%s' % hex_bits[2:4]\n>>> shift\n'0x1b'\n>>> shift_int = int(exponent, 16)\n27\n>>> value = '0x%s' % hex_bits[4:]\n>>> value\n'0x012dcd'\n>>> value_int = int(coefficient, 16)\n77261\n>>> target = value_int * 2 ** (8 * (shift_int - 3))\n>>> target\n484975157177710342494716926626447514974484083994735770500857856L\n>>> hex_target = hex(target)\n>>> hex_target\n'0x12dcd000000000000000000000000000000000000000000000000L'</pre>\n<p>It seems a little fake when we slice a string to calculate the target like we do above. When looking through the <a href=\"https://github.com/bitcoin/bitcoin/blob/87e69c2549c44b862558f1c025dc0c4449fca272/src/arith_uint256.cpp#L206\">c++ bitcoin implementation</a>, it shows the other, more technical, main method of using <code>bits</code> to calculate <code>target</code>. Here&#8217;s the Python implementation.</p>\n<p>I&#8217;ll go through the lines and print values here to show a little better what&#8217;s going on. One thing to know before reading is that a character in a hex string represents 4 bits. So when we shift the bits variable by 24 bits with <code>bits >> 24</code> that affectively removes the last 6 characters of the hex string leaving the first two. To get the <code>value</code> variable, we use the bitwise and operator <code>&</code>  to have the final 23 bits be the value. The 23 bits is usually (defined by the number of bits in 0x7fffff) the final 6 characters of the hex string,</p>\n<p>Now, the <code>8 * (shift - 3)</code> value determines how many bits we&#8217;re going to shift <code>value</code> over. In this case, it&#8217;s determined to be 192 bits. If we divide the 192 by 4, we&#8217;ll have the number of zeros characters that will be behind the value in the hex string representation of the target number. You&#8217;ll see that it&#8217;s 48 zeros. Another thing to think of if this is confusing is that <code>value << y</code> is the same as <code>value * 2**y</code>. That&#8217;s how the equations are related.</p>\n<pre>>>> bits = '453062093'\n>>> hex(int(bits))\n'0x1b012dcd'\n>>> shift = bits >> 24\n>>> shift\n27\n>>> hex(shift)\n'0x1b'\n>>> value = bits & 0x007fffff\n>>> hex(value)\n'0x12dcd'\n>>> 8 * (shift - 3)\n192\n>>> 192 / 4 #each character in a hex string represents 4 bits\n48\n>>> value <<= 8 * (shift - 3)\n>>> hex(value)\n'0x12dcd000000000000000000000000000000000000000000000000L'\n>>> hex(value).count('0') - 1 #don't count the leading zero\n48</pre>\n<p>The full function version of this is only a few lines long.</p>\n<pre>>>> def get_target_from_bits(bits):\n...   shift = bits >> 24\n...   value = bits & 0x007fffff\n...   value <<= 8 * (shift - 3)\n...   return value\n...\n>>> target = def get_target_from_bits(int(bits))\n>>> hex(target)\n'0x12dcd000000000000000000000000000000000000000000000000L'\n\n</pre>\n<p>So nice. If you look way above to see the string manipulation code it&#8217;s way more confusing and has so many extra lines than the function above. It&#8217;s great to go through both to really understand the meaning, but then stick with the simple one. Moving on.</p>\n<h3>Determining if a Hash is less than the Target</h3>\n<p>As always it seems, there are two simple ways to see if a block&#8217;s hash is valid according to the target. The first way is to use full, 64 character, 256 bit, hex strings and compare those. This works great since we&#8217;ll be able to see this easily eye to eye. To show this is the case, we&#8217;re going to pad the hex_target with the zeros to fill all 64 characters.</p>\n<pre id=\"target__coeffi\" class=\"screen\">>>> hex_target = hex(target)\n>>> len(hex_target)\n56\n>>> len(hex_target[2:-1]) #[2:-1] removes the leading '0x' and ending 'L'\n53\n>>> num_padded_zeros = 64 - hex_target_len\n>>> num_padded_zeros\n11\n>>> padded_hex_target = \"0x%s%sL\" % ('0' * (64-num_padded_zeros), hex_target[2:-1])\n>>> padded_hex_target\n'0x0000000000012dcd000000000000000000000000000000000000000000000000L'\n\n</pre>\n<p>Finally, we want to verify that the block&#8217;s hash is less than the target. And also, since strings can be considered less than or greater than, we&#8217;ll go with that.</p>\n<pre id=\"target__coeffi\" class=\"screen\">>>> len(block_hash)\n64\n>>> padded_block_hash = '0x%sL' % block_hash\n>>> padded_block_hash\n0x00000000000019c6573a179d385f6b15f4b0645764c4960ee02b33a3c7117d1eL\n>>> padded_hex_target\n0x0000000000012dcd000000000000000000000000000000000000000000000000L\n>>> assert padded_block_hash < padded_hex_target\n>>></pre>\n<p>In this case, you&#8217;ll see the hex target is larger than the block&#8217;s hash. Comparing which string is larger is as simple as either <code><</code> or <code>></code>. If you&#8217;re wondering how Python can determine that the characters like <code>'f' > '1'</code>, see  the questions below.</p>\n<p>The other way to confirm is by using the integers for both values. But as you&#8217;ll see, it&#8217;s very difficult, if not impossible, to eyeball which is value larger, and how much larger one value is to than the other.</p>\n<pre id=\"target__coeffi\" class=\"screen\">>>> block_hash_int = int(block_hash, 16)\n>>> block_hash_int\n41418456048005639864974238890271849696605172030151526454492446L\n>>> target\n484975157177710342494716926626447514974484083994735770500857856L\n>>> assert(block_hash_int < target)\n>>> target - block_hash_int\n443556701129704702629742687736175665277878911964584244046365410L</pre>\n<p>Those ints are so huge that looking at one by itself is pretty much impossible to know if it&#8217;s easy or difficult to be lower than. But since block_hash_int is lower than target int by one character, you can see that&#8217;s the case. When you subtract those two giant numbers you get another giant number.</p>\n<p>Both are valid methods, but being able to look at the hex strings is better than looking at the integers. But really, when the code is running, there&#8217;s no real benefit to pick one over the other.</p>\n<h3>Calculating Difficulty</h3>\n<p>The most important part of <code>difficulty</code> is to remember from above that <code>difficulty</code> is simply a human representation of the <code>target</code>. I talked about how integer values of <code>target</code>s are pointless since it&#8217;s hard to humanly compare two values that are giant integer. Likewise, it&#8217;s tough to compare two targets to each other using the hex strings. The <code>difficulty</code> values in a block are to make that easier.</p>\n<p>Below, <code>difficulty_one_target</code> is defined as the easiest allowed target value. To calculate the difficulty of another block, we simply divide the <code>difficulty_one_target</code> by the <code>target</code> we&#8217;ve calculated using <code>bits</code>. You&#8217;ll see that <code>difficulty_one_target</code> will be larger than any other <code>target</code> number since <code>target</code>s go lower with more difficulty. When you divide the larger numerator by a smaller denominator, you&#8217;ll have a greater than one value.</p>\n<pre id=\"target__coeffi\" class=\"screen\">>>> difficulty_one_target = 0x00ffff * 2**(8*(0x1d - 3))\n>>> difficulty_one_target\n26959535291011309493156476344723991336010898738574164086137773096960L #calculated using \n>>> pad_leading_zeros(hex(difficulty_one_target)) #pad_leading_zeros is function defined below\n'0x00000000ffff0000000000000000000000000000000000000000000000000000'\n>>> calculated_difficulty = difficulty_one_target / float(target) #float() to make it decimal devision\n55589.518126868665 #this is the same as the difficulty on the block.\n>>> allowed_error = 0.01\n>>> assert abs(float(block_difficulty) - calculated_difficulty) <= allowed_error\n>>></pre>\n<p>Feel free to go back and read this over slowly. It took me a long time to figure out the relationship between <code>bits</code>, <code>difficulty</code>, and <code>target</code>. Whether we need ints, hex values, or strings to verify. There are a bunch of ways to do this, and hopefully I&#8217;ve listed them all here.</p>\n<h3>How and when block difficulty is updated</h3>\n<p>The final big part of Bitcoin&#8217;s proof of work is to show how and when the difficulty is changed. Pretty much every post on this topic will say that the chain will recalculate the required new difficulty every 2016 blocks. But they don&#8217;t dive too deep at all into the topic. That&#8217;s what I&#8217;m going to do here.</p>\n<p>The first part I have to start with is how to start with a <code>target</code>, and go back to <code>bits</code>. The <code>get_bits_from_target</code> function takes a target, calculates the the highest ranking bit that&#8217;s set and uses that to calculate the size. Knowing the size, we shift the target all the way down, removing the zeros we don&#8217;t need anymore, and finally put the value of size at the front of the <code>bits</code> so we keep it stored.</p>\n<pre>>>> bits = '403088579'\n>>> hex(int(bits))\n'0x1806a4c3'\n>>> target = get_target_from_bits(int(bits))\n>>> hex(target)\n'0x6a4c3000000000000000000000000000000000000000000L'\n>>> def get_bits_from_target(target):\n...   bitlength = target.bit_length() + 1 #look on bitcoin cpp for info\n...   size = (bitlength + 7) / 8\n...   value = target >> 8 * (size - 3)\n...   value |= size << 24 #shift size 24 bits to the left, and taks those on the front of compact\n...   return value\n...\n>>> bits = get_bits_from_target(target)\n>>> bits\n403088579L\n>>> hex(bits)\n'0x1806a4c3L</pre>\n<p>They match, so we know the code correctly returns a <code>target</code> to <code>bits</code>.</p>\n<p>Time to show how to calculate the next block&#8217;s <code>bits</code> for an actual set of blocks on the blockchain. For the example here, I&#8217;m going to say we&#8217;ve just received block #<a href=\"https://blockchain.info/block/0000000000000000034656c96781091b5fbc799c881ea85b41cba0b88128eff7\">405215</a> and are looking to mine block #<a href=\"https://blockchain.info/block/000000000000000006969473ee3a2126d9a953ad00eee6443b4d2d2e0881fc07\">405216</a>. Looking back 2016 blocks, <a href=\"https://blockchain.info/block/000000000000000000c4272a5c68b4f55e5af734e88ceab09abf73e9ac3b6d01\">403200</a> will be considered the starting block.</p>\n<p>We have a starting <code>target</code> calculated from that block&#8217;s <code>bits</code>. We use that difficulty for the next 2016 blocks. When we come to the 2017th block after the first, we calculate the time in seconds it took for us to go from the original block to the 2016th. We divide that by the 2016 block in seconds, multiply the current target by that value, and then calculate the new bits from that target.</p>\n<pre>TARGET_TIMESPAN = 1209600\n\ndef change_target(prev_bits, starting_time_secs, prev_time_secs):\n  old_target = get_target_from_bits(int(prev_bits))\n  time_span = prev_time_secs - starting_time_secs\n  time_span_seconds = int(time_span.total_seconds())\n  new_target = old_target\n  new_target *= time_span_seconds\n  new_target /= TARGET_TIMESPAN\n  return new_target\n\n#starting_block is the initial block on this 2016 block runtime #403200\nstarting_block_timestamp = '2016-03-18 09:07:48' #timestamp on block\nstarting_block_time_seconds = datetime.datetime.strptime(starting_block_timestamp, '%Y-%m-%d %H:%M:%S')\n\n#prev_block is the block right before the difficulty conversion #405215\nprev_block_bits = '403088579' #bits on block\nprev_block_timestamp = '2016-04-01 06:24:09' #timestamp on block\nprev_block_time_seconds = datetime.datetime.strptime(prev_block_timestamp, '%Y-%m-%d %H:%M:%S')\n\ncalculated_new_target = change_target(prev_block_bits, starting_block_time_seconds, prev_block_time_seconds)\ncalculated_new_bits = get_bits_from_target(calculated_new_target)\n\n#new_block is the first block of the next block #405216\nnew_bits = '403085044'\nnew_target = get_target_from_bits(new_bits)\n\nprint hex(calculated_new_target)\nprint hex(new_target)\n\nprint hex(calculated_new_bits)\nprint hex(int(new_bits))</pre>\n<p>Which spits out</p>\n<pre>Calculated new target: 0x696f4a7b94b94b94b94b94b94b94b94b94b94b94b94b94bL\nNew target from block: 0x696f4000000000000000000000000000000000000000000L\nCalculated new bits: 0x180696f4L\nNew bits from block: 0x180696f4</pre>\n<p>The calculated new target is very specific. But we don&#8217;t really care about making sure a block&#8217;s hash is that specific. They only need to know the leading 23 bits. Ditch the rest of them, shove them down, and throw the shift on the front.</p>\n<h3>Full Code</h3>\n<p>I was going to copy and paste the giant amount of code I wrote above so <em>you</em> could copy and paste it and run it yourself. But that would take up too much space. So <a href=\"https://gist.github.com/jackschultz/19cbb54b8637f854c3d99571b34bf4a7\">here&#8217;s a gist</a> where you&#8217;ll be able to see everything.</p>\n<h3>Final Questions</h3>\n<p><span style=\"font-size:1rem;\">Congrats if you&#8217;ve made it this far! Here&#8217;s a set of questions that I had when learning and writing this. If you have any more, get in contact and I&#8217;ll throw and answer on.</span></p>\n<p><strong>Why are the hex values only strings?</strong></p>\n<p>Because hex values are only representations of integers. If you&#8217;re looking to see the hex value of an integer, we need a string to look at the different base 16 values. Look at the <a href=\"https://docs.python.org/2/library/functions.html#hex\">Python definition of hex()</a> slightly more info.</p>\n<p><strong>How can a string comparison know that <code>'f' > '9'</code>?</strong></p>\n<p>In memory, characters are stored as unicode values. So when you compare two characters, the one with the larger unicode value is shown as being the biggest. Note that ASCII also has the same values as unicode for 0-127. When comparing strings, they go through each character one by one and whichever has the largest value first wins the race.</p>\n<pre>>>> ord('f')\n102\n>>> ord('a')\n97\n>>> ord('b')\n98\n>>> ord('9')\n57\n>>> ord('1')\n49\n>>> ord('2')\n50\n>>> ord('a')\n97\n>>> ord('b')\n98\n>>> ord('f')\n102\n>>> 'f' > 'a'\nTrue\n>>> 'a' > '1'\nTrue</pre>\n<p>&nbsp;</p>\n<p><strong>How has Bitcoin difficulty changed over time?</strong></p>\n<p>There are a bunch of sites that have interactive graphs showing the change over time; quick google will find one. But, here&#8217;s the pic from <a href=\"https://en.wikipedia.org/wiki/Bitcoin_network\">Bitcoin&#8217;s actual Wikipedia page</a> that shows how that difficulty number has changed over time.</p>\n<div data-shortcode=\"caption\" id=\"attachment_906\" style=\"width: 406px\" class=\"wp-caption alignnone\"><a href=\"https://bigishdata.files.wordpress.com/2017/11/history-bitcoin-difficulty.png\"><img loading=\"lazy\" aria-describedby=\"caption-attachment-906\" data-attachment-id=\"906\" data-permalink=\"https://bigishdata.com/2017/11/13/how-to-build-a-blockchain-part-4-1-bitcoin-proof-of-work-difficulty-explained/history-bitcoin-difficulty/\" data-orig-file=\"https://bigishdata.files.wordpress.com/2017/11/history-bitcoin-difficulty.png\" data-orig-size=\"1222,696\" data-comments-opened=\"1\" data-image-meta=\"{\"aperture\":\"0\",\"credit\":\"\",\"camera\":\"\",\"caption\":\"\",\"created_timestamp\":\"0\",\"copyright\":\"\",\"focal_length\":\"0\",\"iso\":\"0\",\"shutter_speed\":\"0\",\"title\":\"\",\"orientation\":\"0\"}\" data-image-title=\"history-bitcoin-difficulty\" data-image-description=\"\" data-image-caption=\"<p>Decently linear, with a flat spot in the middle. Someone should do a history on that.</p>\n\" data-medium-file=\"https://bigishdata.files.wordpress.com/2017/11/history-bitcoin-difficulty.png?w=300\" data-large-file=\"https://bigishdata.files.wordpress.com/2017/11/history-bitcoin-difficulty.png?w=584\" class=\"wp-image-906\" src=\"https://bigishdata.files.wordpress.com/2017/11/history-bitcoin-difficulty.png?w=396&#038;h=226\" alt=\"\" width=\"396\" height=\"226\" srcset=\"https://bigishdata.files.wordpress.com/2017/11/history-bitcoin-difficulty.png?w=396&h=226 396w, https://bigishdata.files.wordpress.com/2017/11/history-bitcoin-difficulty.png?w=792&h=452 792w, https://bigishdata.files.wordpress.com/2017/11/history-bitcoin-difficulty.png?w=150&h=85 150w, https://bigishdata.files.wordpress.com/2017/11/history-bitcoin-difficulty.png?w=300&h=171 300w, https://bigishdata.files.wordpress.com/2017/11/history-bitcoin-difficulty.png?w=768&h=437 768w\" sizes=\"(max-width: 396px) 100vw, 396px\" /></a><p id=\"caption-attachment-906\" class=\"wp-caption-text\">Decently linear, with a flat spot in the middle. Someone should do a history on that.</p></div>\n<p><strong>What&#8217;s the deal with mid 2011 to beginning of 2013 difficulty being flat?</strong></p>\n<p>Look at this screenshot from <a href=\"https://charts.bitcoin.com/chart/price\">Bitcoin.com</a> for the time period of 2011 and 2013.</p>\n<div data-shortcode=\"caption\" id=\"attachment_914\" style=\"width: 473px\" class=\"wp-caption alignnone\"><a href=\"https://bigishdata.files.wordpress.com/2017/11/bitcoin-price-chart-2011-2013.png\"><img loading=\"lazy\" aria-describedby=\"caption-attachment-914\" data-attachment-id=\"914\" data-permalink=\"https://bigishdata.com/2017/11/13/how-to-build-a-blockchain-part-4-1-bitcoin-proof-of-work-difficulty-explained/bitcoin-price-chart-2011-2013/\" data-orig-file=\"https://bigishdata.files.wordpress.com/2017/11/bitcoin-price-chart-2011-2013.png\" data-orig-size=\"2796,1326\" data-comments-opened=\"1\" data-image-meta=\"{\"aperture\":\"0\",\"credit\":\"\",\"camera\":\"\",\"caption\":\"\",\"created_timestamp\":\"0\",\"copyright\":\"\",\"focal_length\":\"0\",\"iso\":\"0\",\"shutter_speed\":\"0\",\"title\":\"\",\"orientation\":\"0\"}\" data-image-title=\"bitcoin-price-chart-2011-2013\" data-image-description=\"\" data-image-caption=\"<p>Hmmm</p>\n\" data-medium-file=\"https://bigishdata.files.wordpress.com/2017/11/bitcoin-price-chart-2011-2013.png?w=300\" data-large-file=\"https://bigishdata.files.wordpress.com/2017/11/bitcoin-price-chart-2011-2013.png?w=584\" class=\"wp-image-914\" src=\"https://bigishdata.files.wordpress.com/2017/11/bitcoin-price-chart-2011-2013.png?w=463&#038;h=219\" alt=\"\" width=\"463\" height=\"219\" srcset=\"https://bigishdata.files.wordpress.com/2017/11/bitcoin-price-chart-2011-2013.png?w=463&h=219 463w, https://bigishdata.files.wordpress.com/2017/11/bitcoin-price-chart-2011-2013.png?w=924&h=438 924w, https://bigishdata.files.wordpress.com/2017/11/bitcoin-price-chart-2011-2013.png?w=150&h=71 150w, https://bigishdata.files.wordpress.com/2017/11/bitcoin-price-chart-2011-2013.png?w=300&h=142 300w, https://bigishdata.files.wordpress.com/2017/11/bitcoin-price-chart-2011-2013.png?w=768&h=364 768w\" sizes=\"(max-width: 463px) 100vw, 463px\" /></a><p id=\"caption-attachment-914\" class=\"wp-caption-text\">Hmmm</p></div>\n<p>A giant spike in price all the way up to an astonishing $29 a coin that crashed until the beginning of 2013 where it starts flying up again. I&#8217;ll go ahead and say there&#8217;s a nice correlation there where miners saw the crash and said screw it, stopped their mining, and left fewer nodes trying to mine a new block. Fewer nodes means the longer it takes to find a valid hash so we had to keep difficulty down.</p>\n<p><strong>Does a larger bit value imply a larger difficulty?</strong></p>\n<p>Nope. Remember, bit values are stored so we can split it into two numbers used to calculate the target. When looked at as an integer, it&#8217;s definitely not comparable.</p>\n<p>If you want examples, look at the couple blocks listed in the code above. Comparing blocks 0 and 32256, you&#8217;ll see opposite difference in <code>bits</code> and <code>difficulty</code>.</p>\n<p><strong>How is the header hash calculated?</strong></p>\n<p>By smashing values together. <a href=\"https://en.bitcoin.it/wiki/Block_hashing_algorithm\">Take a look here</a> and you&#8217;ll see more about it.</p>\n<p><strong>I see people mentioning we only calculate new bits from 2015 blocks and not 2016. What&#8217;s that mean?</strong></p>\n<p>You&#8217;ll see that a lot when looking at other posts. What this means is if we included all 2016 blocks in a set, we&#8217;d start with the timestamp before the start of a new 2016 set of blocks since that&#8217;s says when nodes started trying to find the next block.</p>\n<p>This doesn&#8217;t work out when you think of calculating the new bits for actual block 2017. If we took into account how long it took to mine the first 2016, we wouldn&#8217;t know that since we didn&#8217;t know when we started running the first miners.</p>\n<p><strong>Why didn&#8217;t you talk about how much time it takes to find a valid hash?</strong></p>\n<p>That&#8217;s a different topic. There&#8217;s <a href=\"https://en.bitcoin.it/wiki/Difficulty#What_network_hash_rate_results_in_a_given_difficulty.3F\">some material</a> on calculating that if there&#8217;s a single node doing the mining, but that&#8217;s tough to figure out unless you have a bigger amount of nodes. When I write the part for jbc&#8217;s difficulty, I&#8217;ll have tests to show time.</p>\n<p><strong>What&#8217;s your Twitter handle so I can follow you??</strong></p>\n<p><a href=\"https://twitter.com/jack_schultz\">@jack_schultz</a></p>\n<p><strong>What if I only want to ask you a question?</strong></p>\n<p><a href=\"https://bigishdata.com/contact/\">Contact</a> is a great way to do this. Just make sure you type your email correctly; I&#8217;ve gotten some emails before that I couldn&#8217;t reply to since that email address didn&#8217;t exist. Also feel free to comment on this post as well.</p>\n<p><strong>What&#8217;s next?</strong></p>\n<p>Part 4.2 about the Ethereum proof of work difficulty! It&#8217;s somewhat similar, but the target is calculated in a different way. Also, the time when difficulties change is different as well. <a href=\"https://www.coinwarz.com/difficulty-charts/ethereum-difficulty-chart\">Check out the chart</a> that show difficulty over time to see what I mean.</p>\n<p>After that, part 4.3 will be about how I want to calculate difficulty for jbc.</p>\n",
  "wfw:commentRss": "https://bigishdata.com/2017/11/13/how-to-build-a-blockchain-part-4-1-bitcoin-proof-of-work-difficulty-explained/feed/",
  "slash:comments": 1,
  "media:content": [
    {
      "media:title": "jackschultz23"
    },
    "",
    ""
  ]
}