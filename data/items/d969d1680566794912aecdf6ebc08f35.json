{
  "title": "Working with Credentials and Configurations in Python",
  "link": "",
  "published": "2022-01-11T00:00:00-06:00",
  "updated": "2022-01-11T00:00:00-06:00",
  "id": "http://janakiev.com/blog/python-credentials-and-configuration",
  "content": "<p>When writing programs, there is often a large set of configuration and credentials that should not be hard-coded in the program. This also makes the customization of the program much easier and more generally applicable. There are various ways to handle configuration and credentials and you will see here a few of the popular and common ways to do that with Python.</p>\n\n<p><strong>One important note right from the start:</strong> When using version control always make sure to not commit credentials and configuration into the repository as this could become a serious security issue. You can add those to .gitignore to avoid pushing those files to version control. Sometimes is useful to have general configuration also in version control, but that depends on your use case.</p>\n\n<h1 id=\"python-configuration-files\">Python Configuration Files</h1>\n\n<p>The first and probably most straight forward way is to have a <code class=\"language-plaintext highlighter-rouge\">config.py</code> file somewhere in the project folder that you add to your <code class=\"language-plaintext highlighter-rouge\">.gitignore</code> file. A similar pattern can be found in <a href=\"https://flask.palletsprojects.com/en/2.0.x/\">Flask</a>, where you can also structure the configuration based on different contexts like development, production, and testing. The <code class=\"language-plaintext highlighter-rouge\">config.py</code> would look something like:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">host</span> <span class=\"o\">=</span> <span class=\"s\">'localhost'</span><span class=\"p\">,</span>\n<span class=\"n\">port</span> <span class=\"o\">=</span> <span class=\"mi\">8080</span><span class=\"p\">,</span>\n<span class=\"n\">username</span> <span class=\"o\">=</span> <span class=\"s\">'user'</span>\n<span class=\"n\">password</span> <span class=\"o\">=</span> <span class=\"s\">'password'</span>\n</code></pre></div></div>\n\n<p>You would simply import it and use it like this:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"nn\">config</span>\n\n<span class=\"n\">host</span> <span class=\"o\">=</span> <span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">host</span>\n<span class=\"n\">port</span> <span class=\"o\">=</span> <span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">port</span>\n<span class=\"n\">username</span> <span class=\"o\">=</span> <span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">username</span>\n<span class=\"n\">password</span> <span class=\"o\">=</span> <span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">password</span>\n</code></pre></div></div>\n\n<h1 id=\"environment-variables\">Environment Variables</h1>\n\n<p>You can access environment variables with <a href=\"https://docs.python.org/3/library/os.html#os.environ\">os.environ</a>:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n\n<span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s\">'SHELL'</span><span class=\"p\">]</span>\n</code></pre></div></div>\n\n<p>This will throw a <code class=\"language-plaintext highlighter-rouge\">KeyError</code> if the variable does not exists. You can check if the variable exists with <code class=\"language-plaintext highlighter-rouge\">\"SHELL\" in os.environ</code>. Sometimes its more elegant to get <code class=\"language-plaintext highlighter-rouge\">None</code> or a default value instead of getting an error when a variable does not exist. This can be done like this:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># return None if VAR does not exists\n</span><span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">environ</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s\">'VAR'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># return \"default\" if VAR does not exists\n</span><span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">environ</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s\">'VAR'</span><span class=\"p\">,</span> <span class=\"s\">\"default\"</span><span class=\"p\">)</span>  \n</code></pre></div></div>\n\n<p>You can combine this with the previous way to have a <code class=\"language-plaintext highlighter-rouge\">config.py</code> with the following contents:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n\n<span class=\"n\">host</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">environ</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s\">'APP_HOST'</span><span class=\"p\">,</span> <span class=\"s\">'localhost'</span><span class=\"p\">)</span>\n<span class=\"n\">port</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">environ</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s\">'APP_PORT'</span><span class=\"p\">,</span> <span class=\"mi\">8080</span><span class=\"p\">)</span>\n<span class=\"n\">username</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">environ</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s\">'APP_USERNAME'</span><span class=\"p\">)</span>\n<span class=\"n\">password</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">environ</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s\">'APP_PASSWORD'</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<h1 id=\"python-dotenv\">Python Dotenv</h1>\n\n<p>Oftentimes you want to have the environment variables in a dedicated <code class=\"language-plaintext highlighter-rouge\">.env</code> file outside of version control. One way is to load the file before with:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">source</span> .env\n</code></pre></div></div>\n<p>This is sometimes error-prone or not possible depending on the setup, so its sometimes better to load the file dynamically with <a href=\"https://github.com/theskumar/python-dotenv\">python-dotenv</a>. You can install the package with:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>pip <span class=\"nb\">install</span> <span class=\"nt\">-U</span> python-dotenv\n</code></pre></div></div>\n\n<p>Load the <code class=\"language-plaintext highlighter-rouge\">.env</code> file in your program with:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">dotenv</span> <span class=\"kn\">import</span> <span class=\"n\">load_dotenv</span>\n\n<span class=\"n\">load_dotenv</span><span class=\"p\">()</span>\n</code></pre></div></div>\n\n<p>If your environment file is located somewhere else, you can load it with:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">load_dotenv</span><span class=\"p\">(</span><span class=\"s\">\"/path/to/.env\"</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>Now, you can use the environment file as you saw before.</p>\n\n<h1 id=\"javascript-object-notation-json\">JavaScript Object Notation (JSON)</h1>\n\n<p>JSON is another handy file format to store your configuration as it has native support. If you are working with frontend code, you are already familiar with its usefulness and ubiquity.</p>\n\n<p>You can prepare your configurations as a <a href=\"https://www.json.org/json-en.html\">JSON</a> (JavaScript Object Notation) in a <code class=\"language-plaintext highlighter-rouge\">config.json</code> with the following example configuration:</p>\n\n<div class=\"language-json highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"nl\">\"host\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"localhost\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"nl\">\"port\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">8080</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"nl\">\"credentials\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n        </span><span class=\"nl\">\"username\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"user\"</span><span class=\"p\">,</span><span class=\"w\">\n        </span><span class=\"nl\">\"password\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"password\"</span><span class=\"w\">\n    </span><span class=\"p\">}</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></code></pre></div></div>\n\n<p>You can load this configuration then with the built-in <code class=\"language-plaintext highlighter-rouge\">json</code> package:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"nn\">json</span>\n\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s\">'config.json'</span><span class=\"p\">,</span> <span class=\"s\">'r'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n    <span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">json</span><span class=\"p\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>This returns the data as (nested) dictionaries and lists which you can access the way you are used to (<code class=\"language-plaintext highlighter-rouge\">config['host']</code> or <code class=\"language-plaintext highlighter-rouge\">config.get('host')</code>).</p>\n\n<h1 id=\"yet-another-markup-language-yaml\">Yet Another Markup Language (YAML)</h1>\n\n<p>Another popular way to store configurations and credentials is the (in)famous <a href=\"https://yaml.org/\">YAML</a> format. It is much simpler to use but has some minor quirks when using more complicated formatting. Here is the previous configuration as a YAML file:</p>\n\n<div class=\"language-yml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"na\">host</span><span class=\"pi\">:</span> <span class=\"s\">localhost</span>\n<span class=\"na\">port</span><span class=\"pi\">:</span> <span class=\"m\">8080</span>\n<span class=\"na\">credentials</span><span class=\"pi\">:</span>\n  <span class=\"na\">username</span><span class=\"pi\">:</span> <span class=\"s\">user</span>\n  <span class=\"na\">password</span><span class=\"pi\">:</span> <span class=\"s\">password</span>\n</code></pre></div></div>\n\n<p>There are various packages that you can use. Most commonly <a href=\"https://pyyaml.org/\">PyYAML</a>. You can install it with:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">pip</span> <span class=\"n\">install</span> <span class=\"o\">-</span><span class=\"n\">U</span> <span class=\"n\">PyYAML</span>\n</code></pre></div></div>\n\n<p>To load the configuration, you can type:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s\">\"config.yml\"</span><span class=\"p\">,</span> <span class=\"s\">'r'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n    <span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">yaml</span><span class=\"p\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"n\">Loader</span><span class=\"o\">=</span><span class=\"n\">yaml</span><span class=\"p\">.</span><span class=\"n\">FullLoader</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>The <code class=\"language-plaintext highlighter-rouge\">config</code> can be used as previously seen with the JSON example.</p>\n\n<p>Note, that you need to add a <code class=\"language-plaintext highlighter-rouge\">Loader</code> in <code class=\"language-plaintext highlighter-rouge\">PyYAML 5.1+</code> because of a vulnerability. Read more about it <a href=\"https://github.com/yaml/pyyaml/wiki/PyYAML-yaml.load(input)-Deprecation\">here</a>. Another common alternative to <code class=\"language-plaintext highlighter-rouge\">PyYAML</code> is <a href=\"https://github.com/omry/omegaconf\">omegaconf</a>, which includes many other useful parsers for various different file types.</p>\n\n<h1 id=\"using-a-configuration-parser\">Using a Configuration Parser</h1>\n\n<p>The Python standard library includes the <a href=\"https://docs.python.org/3/library/configparser.html\">configparser</a> module which can work with configuration files similar to the Microsoft Windows INI files. You can prepare the configuration in <code class=\"language-plaintext highlighter-rouge\">config.ini</code> with the following contents:</p>\n\n<div class=\"language-ini highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nn\">[DEFAULT]</span>\n<span class=\"py\">host</span> <span class=\"p\">=</span> <span class=\"s\">localhost</span>\n<span class=\"py\">port</span> <span class=\"p\">=</span> <span class=\"s\">8080</span>\n\n<span class=\"nn\">[credentials]</span>\n<span class=\"py\">username</span> <span class=\"p\">=</span> <span class=\"s\">user</span>\n<span class=\"py\">password</span> <span class=\"p\">=</span> <span class=\"s\">password</span>\n</code></pre></div></div>\n\n<p>The configuration is seperated into sections like <code class=\"language-plaintext highlighter-rouge\">[credentials]</code> and within those sections the configuration is stored as key-value pairs like <code class=\"language-plaintext highlighter-rouge\">host = localhost</code>.</p>\n\n<p>You can load and use the previous configuration as follows:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"nn\">configparser</span>\n\n<span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">configparser</span><span class=\"p\">.</span><span class=\"n\">ConfigParser</span><span class=\"p\">()</span>\n<span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"s\">\"test.ini\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">host</span> <span class=\"o\">=</span> <span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s\">'DEFAULT'</span><span class=\"p\">][</span><span class=\"s\">'host'</span><span class=\"p\">]</span>\n<span class=\"n\">port</span> <span class=\"o\">=</span> <span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s\">'DEFAULT'</span><span class=\"p\">][</span><span class=\"s\">'port'</span><span class=\"p\">]</span>\n<span class=\"n\">username</span> <span class=\"o\">=</span> <span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s\">'credentials'</span><span class=\"p\">][</span><span class=\"s\">'username'</span><span class=\"p\">]</span>\n<span class=\"n\">password</span> <span class=\"o\">=</span> <span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s\">'credentials'</span><span class=\"p\">][</span><span class=\"s\">'password'</span><span class=\"p\">]</span>\n</code></pre></div></div>\n\n<p>As you can see, to access the values you have to type <code class=\"language-plaintext highlighter-rouge\">config[section][element]</code>. To get all sections as a list, you can type <code class=\"language-plaintext highlighter-rouge\">config.sections()</code>. For more information, have a look at the <a href=\"https://docs.python.org/3/library/configparser.html\">documentation</a>.</p>\n\n<h1 id=\"parsing-command-line-options\">Parsing Command-line Options</h1>\n\n<p>It is also possible to get credentials and configuration through arguments by using the built-in <a href=\"https://docs.python.org/3/library/argparse.html\">argparse</a> module.</p>\n\n<p>You can initialize the argument parser with:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"nn\">argparse</span>\n\n<span class=\"n\">parser</span> <span class=\"o\">=</span> <span class=\"n\">argparse</span><span class=\"p\">.</span><span class=\"n\">ArgumentParser</span><span class=\"p\">(</span>\n    <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"s\">\"Example Program\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Required arguments\n</span><span class=\"n\">parser</span><span class=\"p\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span><span class=\"n\">action</span><span class=\"o\">=</span><span class=\"s\">'store'</span><span class=\"p\">,</span>\n    <span class=\"n\">dest</span><span class=\"o\">=</span><span class=\"s\">'username'</span><span class=\"p\">,</span> <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s\">\"session username\"</span><span class=\"p\">)</span>\n<span class=\"n\">parser</span><span class=\"p\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span><span class=\"n\">action</span><span class=\"o\">=</span><span class=\"s\">'store'</span><span class=\"p\">,</span>\n    <span class=\"n\">dest</span><span class=\"o\">=</span><span class=\"s\">'password'</span><span class=\"p\">,</span> <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s\">\"session password\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Optional arguments with default values\n</span><span class=\"n\">parser</span><span class=\"p\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span><span class=\"s\">\"-H\"</span><span class=\"p\">,</span> <span class=\"s\">\"--host\"</span><span class=\"p\">,</span> <span class=\"n\">action</span><span class=\"o\">=</span><span class=\"s\">'store'</span><span class=\"p\">,</span>\n    <span class=\"n\">dest</span><span class=\"o\">=</span><span class=\"s\">'host'</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"s\">\"localhost\"</span><span class=\"p\">,</span>\n    <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s\">\"connection host\"</span><span class=\"p\">)</span>\n<span class=\"c1\"># Allow only arguments of type int\n</span><span class=\"n\">parser</span><span class=\"p\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span><span class=\"s\">\"-P\"</span><span class=\"p\">,</span> <span class=\"s\">\"--port\"</span><span class=\"p\">,</span> <span class=\"n\">action</span><span class=\"o\">=</span><span class=\"s\">'store'</span><span class=\"p\">,</span>\n    <span class=\"n\">dest</span><span class=\"o\">=</span><span class=\"s\">'port'</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"mi\">8080</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"nb\">int</span><span class=\"p\">,</span>\n    <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s\">\"connection port\"</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>Now, you can parse the arguments with:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"n\">parser</span><span class=\"p\">.</span><span class=\"n\">parse_args</span><span class=\"p\">()</span>\n\n<span class=\"n\">host</span> <span class=\"o\">=</span> <span class=\"n\">args</span><span class=\"p\">.</span><span class=\"n\">host</span>\n<span class=\"n\">port</span> <span class=\"o\">=</span> <span class=\"n\">args</span><span class=\"p\">.</span><span class=\"n\">port</span>\n<span class=\"n\">username</span> <span class=\"o\">=</span> <span class=\"n\">args</span><span class=\"p\">.</span><span class=\"n\">username</span>\n<span class=\"n\">password</span> <span class=\"o\">=</span> <span class=\"n\">args</span><span class=\"p\">.</span><span class=\"n\">password</span>\n</code></pre></div></div>\n\n<p>If you save this program in <code class=\"language-plaintext highlighter-rouge\">example.py</code> and type <code class=\"language-plaintext highlighter-rouge\">python example.py -h</code>, you will receive the following help description:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>usage: untitled.py [-h] [-H HOST] [-P PORT] username password\n\nExample Program\n\npositional arguments:\n  username              session username\n  password              session password\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -H HOST, --host HOST  connection host\n  -P PORT, --port PORT  connection port\n</code></pre></div></div>\n\n<p>Another alternative to <code class=\"language-plaintext highlighter-rouge\">argparse</code> is <a href=\"https://github.com/tiangolo/typer\">typer</a> which makes some of the parsing easier for complex CLI tools.</p>\n\n<h1 id=\"conclusion\">Conclusion</h1>\n\n<p>Here you saw a few common and popular ways to load configuration and credentials in Python, but there are many more ways if those are not sufficient for your usecase. You can always resort to XML if you really wish. If you miss some way that you particularly find useful, feel free to add it in the comments bellow.</p>\n\n<h1 id=\"resources\">Resources</h1>\n\n<ul>\n  <li>2014 - <a href=\"https://martin-thoma.com/configuration-files-in-python/\">Configuration files in Python</a></li>\n  <li><a href=\"https://www.digitalocean.com/community/tutorials/how-to-read-and-set-environmental-and-shell-variables-on-a-linux-vps\">How To Read and Set Environmental and Shell Variables on a Linux VPS</a></li>\n  <li>Github - <a href=\"https://github.com/theskumar/python-dotenv\">theskumar/python-dotenv</a></li>\n  <li>Github - <a href=\"https://github.com/omry/omegaconf\">omry/omegaconf</a></li>\n  <li>Github - <a href=\"https://github.com/tiangolo/typer\">tiangolo/typer</a></li>\n</ul>",
  "author": {
    "name": "Nikolai Janakiev"
  },
  "category": [
    "",
    ""
  ],
  "summary": "When writing programs, there is often a large set of configuration and credentials that should not be hard-coded in the program. This also makes the customization of the program much easier and more generally applicable. There are various ways to handle configuration and credentials and you will see here a few of the popular and common ways to do that with Python.",
  "media:thumbnail": "",
  "media:content": ""
}