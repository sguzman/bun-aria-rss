{
  "title": "The need for an embedded array expression compiler for NumPy",
  "link": "",
  "published": "2012-04-15T00:00:00-07:00",
  "updated": "2012-04-15T00:00:00-07:00",
  "author": {
    "name": "Wes McKinney"
  },
  "id": "tag:wesmckinney.com,2012-04-15:/blog/the-need-for-an-embedded-array-expression-compiler-for-numpy/",
  "summary": "<p>Yesterday I found myself adding some additional Cython methods for doing fast grouped aggregations in pandas. To my disappointment, I found myself duplicating a lot of code and not having much alternative beyond cooking up some kind of ad hoc code generation framework. So, here's the problem: array of data …</p>",
  "content": "<p>Yesterday I found myself adding some additional Cython methods for doing fast grouped aggregations in pandas. To my disappointment, I found myself duplicating a lot of code and not having much alternative beyond cooking up some kind of ad hoc code generation framework. So, here's the problem: array of data (possibly with NAs), array of labels, with the number of distinct labels known (range from 0 to N — 1). Aggregate data based on label using some function in {sum, min, max, product, mean, variance, &#8230;}. Here is a Cython function to add all the values in a group:</p>\n<div class=\"github\"><pre><span></span><code><span class=\"k\">def</span> <span class=\"nf\">group_add</span><span class=\"p\">(</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">float64_t</span><span class=\"p\">]</span> <span class=\"n\">out</span><span class=\"p\">,</span> <span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">int32_t</span><span class=\"p\">]</span> <span class=\"n\">counts</span><span class=\"p\">,</span>\n              <span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">float64_t</span><span class=\"p\">]</span> <span class=\"n\">values</span><span class=\"p\">,</span> <span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">int32_t</span><span class=\"p\">]</span> <span class=\"n\">labels</span><span class=\"p\">):</span>\n    <span class=\"k\">cdef</span><span class=\"p\">:</span>\n        <span class=\"nb\">Py_ssize_t</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"n\">lab</span>\n        <span class=\"n\">float64_t</span> <span class=\"n\">val</span><span class=\"p\">,</span> <span class=\"n\">count</span>\n        <span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">float64_t</span><span class=\"p\">]</span> <span class=\"n\">sumx</span><span class=\"p\">,</span> <span class=\"n\">nobs</span>\n\n    <span class=\"n\">nobs</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">zeros_like</span><span class=\"p\">(</span><span class=\"n\">out</span><span class=\"p\">)</span>\n    <span class=\"n\">sumx</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">zeros_like</span><span class=\"p\">(</span><span class=\"n\">out</span><span class=\"p\">)</span>\n\n    <span class=\"n\">N</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"p\">)</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"p\">):</span>\n        <span class=\"n\">lab</span> <span class=\"o\">=</span> <span class=\"n\">labels</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"n\">lab</span> <span class=\"o\">&lt;</span> <span class=\"mf\">0</span><span class=\"p\">:</span>\n            <span class=\"k\">continue</span>\n\n        <span class=\"n\">counts</span><span class=\"p\">[</span><span class=\"n\">lab</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"mf\">1</span>\n        <span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">values</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span>\n\n        <span class=\"c\"># not NA</span>\n        <span class=\"k\">if</span> <span class=\"n\">val</span> <span class=\"o\">==</span> <span class=\"n\">val</span><span class=\"p\">:</span>\n            <span class=\"n\">nobs</span><span class=\"p\">[</span><span class=\"n\">lab</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"mf\">1</span>\n            <span class=\"n\">sumx</span><span class=\"p\">[</span><span class=\"n\">lab</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"n\">val</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">counts</span><span class=\"p\">)):</span>\n        <span class=\"k\">if</span> <span class=\"n\">nobs</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mf\">0</span><span class=\"p\">:</span>\n            <span class=\"n\">out</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">nan</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">out</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">sumx</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span>\n</code></pre></div>\n\n<p>Now suppose we want to take the product of the values:</p>\n<div class=\"github\"><pre><span></span><code><span class=\"k\">def</span> <span class=\"nf\">group_prod</span><span class=\"p\">(</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">float64_t</span><span class=\"p\">]</span> <span class=\"n\">out</span><span class=\"p\">,</span> <span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">int32_t</span><span class=\"p\">]</span> <span class=\"n\">counts</span><span class=\"p\">,</span>\n              <span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">float64_t</span><span class=\"p\">]</span> <span class=\"n\">values</span><span class=\"p\">,</span> <span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">int32_t</span><span class=\"p\">]</span> <span class=\"n\">labels</span><span class=\"p\">):</span>\n    <span class=\"k\">cdef</span><span class=\"p\">:</span>\n        <span class=\"nb\">Py_ssize_t</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"n\">lab</span>\n        <span class=\"n\">float64_t</span> <span class=\"n\">val</span><span class=\"p\">,</span> <span class=\"n\">count</span>\n        <span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">float64_t</span><span class=\"p\">]</span> <span class=\"n\">prodx</span><span class=\"p\">,</span> <span class=\"n\">nobs</span>\n\n    <span class=\"n\">nobs</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">zeros_like</span><span class=\"p\">(</span><span class=\"n\">out</span><span class=\"p\">)</span>\n    <span class=\"n\">prodx</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ones_like</span><span class=\"p\">(</span><span class=\"n\">out</span><span class=\"p\">)</span>\n\n    <span class=\"n\">N</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"p\">)</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"p\">):</span>\n        <span class=\"n\">lab</span> <span class=\"o\">=</span> <span class=\"n\">labels</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"n\">lab</span> <span class=\"o\">&lt;</span> <span class=\"mf\">0</span><span class=\"p\">:</span>\n            <span class=\"k\">continue</span>\n\n        <span class=\"n\">counts</span><span class=\"p\">[</span><span class=\"n\">lab</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"mf\">1</span>\n        <span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">values</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span>\n\n        <span class=\"c\"># not nan</span>\n        <span class=\"k\">if</span> <span class=\"n\">val</span> <span class=\"o\">==</span> <span class=\"n\">val</span><span class=\"p\">:</span>\n            <span class=\"n\">nobs</span><span class=\"p\">[</span><span class=\"n\">lab</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"mf\">1</span>\n            <span class=\"n\">prodx</span><span class=\"p\">[</span><span class=\"n\">lab</span><span class=\"p\">]</span> <span class=\"o\">*=</span> <span class=\"n\">val</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">counts</span><span class=\"p\">)):</span>\n        <span class=\"k\">if</span> <span class=\"n\">nobs</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mf\">0</span><span class=\"p\">:</span>\n            <span class=\"n\">out</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">nan</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">out</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">prodx</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span>\n</code></pre></div>\n\n<p>However, the amount of code duplication here is kind of ridiculous; the only changes are: different reduction function, and different starting values. Ideally I would like to write code that looks like:</p>\n<div class=\"github\"><pre><span></span><code><span class=\"k\">def</span> <span class=\"nf\">group_reduce</span><span class=\"p\">(</span><span class=\"n\">how</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">reducer</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">labels</span><span class=\"p\">,</span> <span class=\"n\">out</span><span class=\"p\">):</span>\n        <span class=\"n\">filtered</span> <span class=\"o\">=</span> <span class=\"n\">notna</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n        <span class=\"n\">grouped</span> <span class=\"o\">=</span> <span class=\"n\">groupby</span><span class=\"p\">(</span><span class=\"n\">filtered</span><span class=\"p\">,</span> <span class=\"n\">labels</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">reduce</span><span class=\"p\">(</span><span class=\"n\">how</span><span class=\"p\">,</span> <span class=\"n\">grouped</span><span class=\"p\">,</span> <span class=\"n\">out</span><span class=\"o\">=</span><span class=\"n\">out</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">reducer</span>\n<span class=\"n\">group_add</span> <span class=\"o\">=</span> <span class=\"n\">group_reduce</span><span class=\"p\">(</span><span class=\"n\">add</span><span class=\"p\">)</span>\n<span class=\"n\">group_prod</span> <span class=\"o\">=</span> <span class=\"n\">group_reduce</span><span class=\"p\">(</span><span class=\"n\">multiply</span><span class=\"p\">)</span>\n</code></pre></div>\n\n<p>IMHO there is plenty of information here to generate C or LLVM that is at least as fast as the above code. However, this isn't completely extensible-- suppose we wanted to compute group variance. In that case what you actually need is</p>\n<div class=\"github\"><pre><span></span><code><span class=\"n\">nobs</span> <span class=\"o\">=</span> <span class=\"n\">reduce</span><span class=\"p\">(</span><span class=\"n\">count</span><span class=\"p\">,</span> <span class=\"n\">grouped</span><span class=\"p\">)</span>\n<span class=\"n\">X</span> <span class=\"o\">=</span> <span class=\"n\">reduce</span><span class=\"p\">(</span><span class=\"n\">add</span><span class=\"p\">,</span> <span class=\"n\">grouped</span><span class=\"p\">)</span>\n<span class=\"n\">XX</span> <span class=\"o\">=</span> <span class=\"n\">reduce</span><span class=\"p\">(</span><span class=\"n\">add</span><span class=\"p\">,</span> <span class=\"n\">grouped</span> <span class=\"o\">*</span> <span class=\"n\">grouped</span><span class=\"p\">)</span>\n<span class=\"n\">variance</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">nobs</span> <span class=\"o\">*</span> <span class=\"n\">XX</span> <span class=\"o\">-</span> <span class=\"n\">X</span><span class=\"o\">**</span><span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"p\">(</span><span class=\"n\">nos</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">nobs</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n</code></pre></div>\n\n<p>The only thing you care about here is the variance result. Ideally, you want the generated code to:</p>\n<ul>\n<li>Only make one pass over the data</li>\n<li>Have no unnecessary temporary variables, except the X and XX arrays; the full reductions are necessary for computing the variance.\nUnder this framework, something like mean becomes even more trivial:</li>\n</ul>\n<div class=\"github\"><pre><span></span><code><span class=\"n\">grouped</span> <span class=\"o\">=</span> <span class=\"n\">groupby</span><span class=\"p\">(</span><span class=\"n\">notna</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">),</span> <span class=\"n\">labels</span><span class=\"p\">)</span>\n<span class=\"n\">nobs</span> <span class=\"o\">=</span> <span class=\"n\">reduce</span><span class=\"p\">(</span><span class=\"n\">count</span><span class=\"p\">,</span> <span class=\"n\">grouped</span><span class=\"p\">)</span>\n<span class=\"n\">X</span> <span class=\"o\">=</span> <span class=\"n\">reduce</span><span class=\"p\">(</span><span class=\"n\">add</span><span class=\"p\">,</span> <span class=\"n\">grouped</span><span class=\"p\">)</span>\n<span class=\"n\">mean</span> <span class=\"o\">=</span> <span class=\"n\">X</span> <span class=\"o\">/</span> <span class=\"n\">nobs</span>\n</code></pre></div>\n\n<p>Now, I can live with creating a C/Cython code generation framework, enabling me to write code like the above and get code that's at least as good as something hand-written. But it would be best, of course, if the translation / machine code generation were dynamic to remove the compile step. Is there an existing toolchain here that can help with the machine code generation? Perhaps Numba is the place to do this with LLVM: <a href=\"https://github.com/ContinuumIO/numba\" title=\"Numba\" target=\"_blank\">Numba</a>.</p>\n<p>Perhaps the eventual result of something like this is an embedded JIT-ing APL-like language with Python syntax running inside CPython. You would like to make Numexpr (which is an awesome project!) effective obsolete while you're at it. In the meantime, I'll keep thinking about the best way forward.</p>"
}