{
  "guid": "tag:blogger.com,1999:blog-6300367579216018061.post-9157088403367201566",
  "pubDate": "Sat, 26 Jan 2013 00:22:00 +0000",
  "atom:updated": "2013-02-01T22:10:22.526-08:00",
  "category": [
    "c#",
    "coding rocks",
    "computable numbers",
    "information theory",
    "universal turing machine"
  ],
  "title": "Universal Turing Machine in C#",
  "description": "<div><div style=\"text-align: right;\"></div><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"http://3.bp.blogspot.com/-8NOa0ghIuMc/UQyttWVMT-I/AAAAAAAAAlM/esDCP6HHf2s/s1600/Photo+to+Painting+Turing.png\" imageanchor=\"1\" style=\"clear: right; float: right; margin-bottom: 1em; margin-left: 1em;\"><img border=\"0\" height=\"320\" src=\"http://3.bp.blogspot.com/-8NOa0ghIuMc/UQyttWVMT-I/AAAAAAAAAlM/esDCP6HHf2s/s320/Photo+to+Painting+Turing.png\" width=\"256\" /></a></div>I realized that this blog is fairly absent of any actual programming posts, even though it takes up a majority of my time on any given day (or night). <br /><br />Here is a complete Universal Turing Machine I wrote in C#. The state table computes general relativity, based on my \"theory of everything\" down in another blog post. Each bit on the tape represents a photon and each full cycle represents a frame of reference.<br /><br />I've excluded some code from my implementation so that it is easier to read, specifically if you run this, make sure you change the stopping criteria or run it in a console application in debug mode with a break point.<br /><br />This is easily ported to JavaScript, so look forward to a jQuery plugin soon.<br /><br />A paper where Turing first proposed the idea of computable numbers:<br /><b><i><br /></i></b><b><i><a href=\"http://www.cs.virginia.edu/~robins/Turing_Paper_1936.pdf\" target=\"_blank\">http://www.cs.virginia.edu/~robins/Turing_Paper_1936.pdf</a></i></b><br /><span style=\"font-size: small;\"><span style=\"font-size: small;\"><span style=\"font-family: Arial,Helvetica,sans-serif;\"><span style=\"font-size: small;\"><span style=\"font-size: small;\"><span style=\"font-size: small;\"><span style=\"font-size: small;\"><span style=\"font-size: small;\"><span style=\"font-size: small;\"></span></span></span></span></span></span></span></span></span><br /><span style=\"font-size: small;\"><span style=\"font-size: small;\"><span style=\"font-family: Arial,Helvetica,sans-serif;\"><span style=\"font-size: small;\"><span style=\"font-size: small;\"><span style=\"font-size: small;\"><span style=\"font-size: small;\"><span style=\"font-size: small;\"><span style=\"font-size: small;\">&nbsp;</span></span></span></span></span></span></span></span></span>&nbsp; <span style=\"font-family: Arial,Helvetica,sans-serif;\"><span style=\"font-size: small;\"></span></span></div><pre class=\"brush: csharp\">// DIGITAL UNIVERSAL TURING MACHINE – C# <br />// -------------------------------------<br />// Author: Kenny Bastani<br />//<br />// Based on the theory of computable numbers by Alan Turing<br />// Inspired by James Gleick’s “The Information: A History, a Theory, a Flood\"<br />// <br />// positions[] table is an infinite length: <br />// ----------------------------------------<br />// positions[i] = (positions[i] &gt;= tape.Length ? positions[i] % tape.Length : positions[i]) <br />// OR <br />// positions[i] = (positions[i] &lt; 0 ? tape.Length – 1 : positions[i])<br />//<br />// STATE A:<br />//          0: move forward 1 space; state A<br />//          1: write 0; state B<br />// STATE B:<br />//          0: move forward 1 space; state C<br />//          1: move forward 1 space; state A<br />// STATE C:<br />//          0: stay; state B<br />//          1: move backward 1 space; state D<br />// STATE D:<br />//          0: write 1; state B<br />//          1: stay; state C<br /><br />byte i = 0;<br />while (true)<br />{<br />    // The positions table stores the position of the Turing machine on the tape,<br />    // where byte i represents multiple Turing machines operating on the same tape<br />    byte bit = tape[positions[i]];<br />    switch (turingMachines[i])<br />    {<br />        // State A is the ready state, it holds no memory of erasing a bit. This is the \"ZERO STATE\".<br />        case \"A\":<br />            if (bit == 0)<br />            {<br />                // Advance until a bit 1 is found<br />                positions[i]++;<br />                turingMachines[i] = \"A\";<br />            }<br />            else if (bit == 1)<br />            {<br />                // Erase the bit from the tape and store it in memory as state B  <br />                tape[positions[i]] = 0;<br />                turingMachines[i] = \"B\";<br />            }<br />            break;<br />        case \"B\":<br />            if (bit == 0)<br />            {<br />                // Advance until a bit 1 is found<br />                positions[i]++;<br />                turingMachines[i] = \"C\";<br />            }<br />            else if (bit == 1)<br />            {<br />                // If a bit in state B is equal to 1, it is because the machine <br />                // just wrote it to the tape<br />                positions[i]++;<br />                turingMachines[i] = \"A\";<br />            }<br />            break;<br />        case \"C\":<br />            if (bit == 0)<br />            {<br />                // A bit 1 is held in memory, switch to B state and continue oscillating<br />                // until colliding with bit 1<br />                turingMachines[i] = \"B\";<br />            }<br />            else if (bit == 1)<br />            {<br />                // A bit 1 has been found and cannot be erased because a bit is already <br />                // in memory, move back one space and switch to the D state<br />                positions[i]--;<br />                turingMachines[i] = \"D\";<br />            }<br />            break;<br />        case \"D\":<br />            if (bit == 0)<br />            {<br />                // Release the bit from memory and write it back to the tape, <br />                // revert to state B<br />                tape[positions[i]] = 1;<br />                turingMachines[i] = \"B\";<br />            }<br />            else if (bit == 1)<br />            {<br />                // This state is rare and happens when another Turing machine has released <br />                // a bit in a parallel operation, revert to state C<br />                turingMachines[i] = \"C\";<br />            }<br />            break;<br />        default:<br />            break;<br />    }<br />}<br /></pre>",
  "link": "https://www.kennybastani.com/2013/01/universal-turing-machine-in-c.html",
  "author": "noreply@blogger.com (Kenny Bastani)",
  "media:thumbnail": "",
  "thr:total": 0
}