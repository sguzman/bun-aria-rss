{
  "title": "Support Python 2 with Cython",
  "link": "",
  "updated": "2018-11-28T00:00:00+00:00",
  "id": "https://mrocklin.github.io/blog/work/2018/11/28/python-2-and-cython",
  "content": "<h2 id=\"summary\">Summary</h2>\n\n<p>Many popular Python packages are dropping support for Python 2 next month.\nThis will be painful for several large institutions.\nCython can provide a temporary fix by letting us compile a Python 3 codebase into something usable by Python 2 in\nmany cases.</p>\n\n<p>It’s not clear if we should do this, but it’s an interesting and little known feature of Cython.</p>\n\n<h2 id=\"background-dropping-python-2-might-be-harder-than-we-expect\">Background: Dropping Python 2 Might be Harder than we Expect</h2>\n\n<p>Many major numeric Python packages are dropping support for Python 2 at the end\nof this year.  This includes packages like Numpy, Pandas, and Scikit-Learn.\nJupyter already dropped Python 2 earlier this year.</p>\n\n<p>For most <em>developers</em> in the ecosystem this isn’t a problem.\nMost of our packages are Python-3 compatible and we’ve learned how to switch libraries.\nHowever, for larger companies or government organizations it’s often far harder to switch.\nThe <a href=\"https://www.youtube.com/watch?v=66XoCk79kjM\">PyCon 2017 keynote by Lisa Guo and Hui Ding from Instagram</a>\ngives a good look into why this can be challenging for large production codebases\nand also gives a good example of someone successfully navigating this transition.</p>\n\n<p>It will be interesting to see what happens when Numpy, Pandas, and Scikit-Learn start publishing Python-3 only releases.\nWe may uncover a lot of pain within larger institutions.\nIn that case, what should we do?</p>\n\n<p><em>(Although, to be fair, the data science stack tends to get used more often in\nisolated user environments, which tend to be more amenable to making the Python\n2-3 switch than web-services production codebases).</em></p>\n\n<h2 id=\"cython\">Cython</h2>\n\n<p>The Cython compiler provides a possible solution that I don’t hear discussed\nvery often, so I thought I’d cover it briefly.</p>\n\n<p>The Cython compiler can convert a Python 3 codebase into a C-Extension\nmodule that is usable by both Python 2 and 3.  We could probably use Cython\nto prepare Python 2 packages for a large subset of the numeric Python\necosystem after that ecosystem drops Python 2.</p>\n\n<p>Lets see an example…</p>\n\n<h2 id=\"example\">Example</h2>\n\n<p>Here we show a small Python project that uses Python 3 language features.\n<a href=\"https://github.com/mrocklin/py32test\">(source code here)</a></p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>py32test$ tree .\n.\n├── py32test\n│   ├── core.py\n│   └── __init__.py\n└── setup.py\n\n1 directory, 3 files\n</code></pre></div></div>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># py32test/core.py\n</span><span class=\"k\">def</span> <span class=\"nf\">inc</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">int</span><span class=\"p\">:</span>         <span class=\"c1\"># Uses typing annotations\n</span>    <span class=\"k\">return</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">greet</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n    <span class=\"k\">return</span> <span class=\"sa\">f</span><span class=\"s\">'Hello, </span><span class=\"si\">{</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s\">!'</span>    <span class=\"c1\"># Uses format strings\n</span></code></pre></div></div>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># py32test/__init__.py\n</span><span class=\"kn\">from</span> <span class=\"nn\">.core</span> <span class=\"kn\">import</span> <span class=\"n\">inc</span><span class=\"p\">,</span> <span class=\"n\">greet</span>\n</code></pre></div></div>\n\n<p>We see that this code uses both typing annotations and format strings, two\nlanguage features that are well-loved by Python-3 enthusiasts, and entirely\ninaccessible if you want to continue supporting Python-2 users.</p>\n\n<p>We also show the <code class=\"language-plaintext highlighter-rouge\">setup.py</code> script, which includes a bit of Cython code if\nwe’re running under Python 2.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># setup.py\n</span>\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">from</span> <span class=\"nn\">setuptools</span> <span class=\"kn\">import</span> <span class=\"n\">setup</span><span class=\"p\">,</span> <span class=\"n\">find_packages</span>\n<span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n\n\n<span class=\"k\">if</span> <span class=\"n\">sys</span><span class=\"p\">.</span><span class=\"n\">version_info</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">2</span><span class=\"p\">:</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">Cython.Build</span> <span class=\"kn\">import</span> <span class=\"n\">cythonize</span>\n    <span class=\"n\">kwargs</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s\">'ext_modules'</span><span class=\"p\">:</span> <span class=\"n\">cythonize</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"s\">\"py32test\"</span><span class=\"p\">,</span> <span class=\"s\">\"*.py\"</span><span class=\"p\">),</span>\n                                       <span class=\"n\">language_level</span><span class=\"o\">=</span><span class=\"s\">'3'</span><span class=\"p\">)}</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n    <span class=\"n\">kwargs</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n\n<span class=\"n\">setup</span><span class=\"p\">(</span>\n    <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s\">'py32test'</span><span class=\"p\">,</span>\n    <span class=\"n\">version</span><span class=\"o\">=</span><span class=\"s\">'1.0.0'</span><span class=\"p\">,</span>\n    <span class=\"n\">packages</span><span class=\"o\">=</span><span class=\"n\">find_packages</span><span class=\"p\">(),</span>\n    <span class=\"o\">**</span><span class=\"n\">kwargs</span>\n<span class=\"p\">)</span>\n</code></pre></div></div>\n\n<h2 id=\"this-package-works-fine-in-python-2\">This package works fine in Python 2</h2>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">sys</span><span class=\"p\">.</span><span class=\"n\">version_info</span>\n<span class=\"n\">sys</span><span class=\"p\">.</span><span class=\"n\">version_info</span><span class=\"p\">(</span><span class=\"n\">major</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">minor</span><span class=\"o\">=</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"n\">micro</span><span class=\"o\">=</span><span class=\"mi\">14</span><span class=\"p\">,</span> <span class=\"n\">releaselevel</span><span class=\"o\">=</span><span class=\"s\">'final'</span><span class=\"p\">,</span> <span class=\"n\">serial</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">py32test</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">py32test</span><span class=\"p\">.</span><span class=\"n\">inc</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">)</span>\n<span class=\"mi\">101</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">py32test</span><span class=\"p\">.</span><span class=\"n\">greet</span><span class=\"p\">(</span><span class=\"sa\">u</span><span class=\"s\">'user'</span><span class=\"p\">)</span>\n<span class=\"sa\">u</span><span class=\"s\">'Hello, user!'</span>\n</code></pre></div></div>\n\n<p>In general things seem to work fine.  There are a couple of gotchas though</p>\n\n<h2 id=\"potential-problems\">Potential problems</h2>\n\n<ol>\n  <li>\n    <p>We can’t use any libraries that are Python 3 only, like asyncio.</p>\n  </li>\n  <li>\n    <p>Semantics may differ slightly, for example I was surprised (though pleased)\nto see the following behavior.</p>\n\n    <div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">py32test</span><span class=\"p\">.</span><span class=\"n\">greet</span><span class=\"p\">(</span><span class=\"s\">'user'</span><span class=\"p\">)</span>  <span class=\"c1\"># &lt;&lt;--- note that I'm sending a str, not unicode object\n</span><span class=\"nb\">TypeError</span><span class=\"p\">:</span> <span class=\"n\">Argument</span> <span class=\"s\">'name'</span> <span class=\"n\">has</span> <span class=\"n\">incorrect</span> <span class=\"nb\">type</span> <span class=\"p\">(</span><span class=\"n\">expected</span> <span class=\"nb\">unicode</span><span class=\"p\">,</span> <span class=\"n\">got</span> <span class=\"nb\">str</span><span class=\"p\">)</span>\n</code></pre></div>    </div>\n\n    <p>I suspect that this is tunable with a keyword parameter somewhere in\nCython.  More generally this is a warning that we would need to be careful\nbecause semantics may differ slightly between Cython and CPython.</p>\n  </li>\n  <li>\n    <p>Introspection becomes difficult.  Tools like <code class=\"language-plaintext highlighter-rouge\">pdb</code>, getting frames and\nstack traces, and so forth will probably not be as easy when going through\nCython.</p>\n  </li>\n  <li>\n    <p>Python 2 users would have to go through a compilation step to get\ndevelopment versions.  More Python 2 users will probably just wait for\nproper releases or will install compilers locally.</p>\n  </li>\n  <li>\n    <p>Moved imports like the <code class=\"language-plaintext highlighter-rouge\">from collections.abc import Mapping</code> are not\nsupported, though presumably changes like this could be baked into Cython\nin the future.</p>\n  </li>\n</ol>\n\n<p>So this would probably take a bit of work to make clean, but fortunately\nmost of this work wouldn’t affect the project’s development day-to-day.</p>\n\n<h2 id=\"should-we-do-this\">Should we do this?</h2>\n\n<p>Just because we can support Python 2 in this way doesn’t mean that we should.\nLong term, institutions do need to drop Python 2 and either move on to Python 3\nor to some other language.  Tricks like using Cython only extend the inevitable\nand, due to the complexities above, may end up adding as much headache for\ndevelopers as Python 2.</p>\n\n<p>However, as someone who maintains a sizable Python-2 compatible project that is\nused by large institutions, and whose livelihood depends a bit on continued\nuptake, I’ll admit that I’m hesitant to jump onto the\n<a href=\"https://python3statement.org/\">Python 3 Statement</a>.\nFor me personally, seeing Cython as an option to provide continued support\nmakes me much more comfortable with dropping Python 2.</p>\n\n<p>I also think that maintaining a conda channel of Cython-compiled\nPython-2-compatible packages would be an excellent effort for a for-profit\ncompany like Anaconda Inc, Enthought, or Quansight (or someone new).\nCompanies may be willing to pay for access to such a channel, and presumably\nthe company providing these packages would then be incentivized to improve\nsupport for the Cython compiler.</p>"
}