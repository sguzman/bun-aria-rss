{
  "guid": "tag:blogger.com,1999:blog-6300367579216018061.post-337994707669735079",
  "pubDate": "Thu, 27 Nov 2014 17:26:00 +0000",
  "atom:updated": "2014-11-29T07:50:52.971-08:00",
  "category": [
    "apache spark",
    "docker",
    "graph analytics",
    "graphx",
    "Mazerunner",
    "neo4j",
    "open source",
    "PageRank"
  ],
  "title": "A Docker Image for Graph Analytics on Neo4j with Apache Spark GraphX",
  "description": "<p>I've just released a useful new <a href=\"https://registry.hub.docker.com/u/kbastani/neo4j-graph-analytics/\">Docker image for graph analytics</a> on a <a href=\"http://www.neo4j.com\">Neo4j graph database</a> with Apache Spark GraphX. This image deploys a container with <a href=\"https://spark.apache.org/\">Apache Spark</a> and uses <a href=\"https://spark.apache.org/graphx/\">GraphX</a> to perform ETL graph analysis on subgraphs exported from Neo4j. This docker image is a great addition to Neo4j if you're looking to do easy PageRank or community detection on your graph data. Additionally, the results of the graph analysis are applied back to Neo4j.</p><p>This gives you the ability to optimize your recommendation-based Cypher queries by filtering and sorting on the results of the analysis.</p> <table cellspacing=\"0\" cellpadding=\"0\" align=\"center\" style=\"margin-left: auto; margin-right: auto; text-align: center; margin-bottom: 2em; margin-top: 2em;\" class=\"tr-caption-container\"><tbody><tr><td style=\"text-align: center;\"><a href=\"http://ampcamp.berkeley.edu/big-data-mini-course/img/tables_and_graphs.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"><img width=\"500\" border=\"0\" src=\"http://ampcamp.berkeley.edu/big-data-mini-course/img/tables_and_graphs.png\" /></a></td></tr><tr><td style=\"text-align: center;\" class=\"tr-caption\"><a href=\"http://ampcamp.berkeley.edu/big-data-mini-course/graph-analytics-with-graphx.html\" target=\"_blank\">Photo credit AMPLab Berkley</a></td></tr></tbody></table> <a name='more'></a> <p>As an example, if I wanted to calculate the popularity of my Twitter network, I could run a PageRank and Triangle Count analysis on my community subgraph and calculate the popularity of users using Cypher.</p> <div class=\"separator\" style=\"clear: both; text-align: center; margin-top: 2em; margin-bottom: 2em;\"><a href=\"http://i.imgur.com/NqhjGbK.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" width=\"640\" src=\"http://i.imgur.com/NqhjGbK.png\" /></a></div> <h2><a id=\"user-content-supported-algorithms\" class=\"anchor\" href=\"#supported-algorithms\" aria-hidden=\"true\"><span class=\"octicon octicon-link\"></span></a>Supported Algorithms</h2><p>There are four supported graph analysis algorithms available in this version of the image.</p><ul> <li><p><em>PageRank</em></p></li> <li><p><em>Triangle Counting</em></p></li> <li><p><em>Connected Components</em></p></li> <li><p><em>Strongly Connected Components</em></p></li></ul><p>Each of these algorithms come default with Spark GraphX.</p> <h3><a id=\"user-content-neo4j-mazerunner-service\" class=\"anchor\" href=\"#neo4j-mazerunner-service\" aria-hidden=\"true\"><span class=\"octicon octicon-link\"></span></a>Extending the Neo4j Server</h3> <p>The Neo4j server is extended using an <a href=\"http://neo4j.com/docs/stable/server-unmanaged-extensions.html\">unmanaged extension</a> that adds a REST API endpoint to Neo4j for submitting graph analysis jobs to Apache Spark GraphX. The results of the analysis are applied back to the nodes in Neo4j as property values, making the results queryable using Cypher.</p> <h2><a id=\"user-content-installationdeployment\" class=\"anchor\" href=\"#installationdeployment\" aria-hidden=\"true\"><span class=\"octicon octicon-link\"></span></a>Installation/Deployment</h2> <p>Installation requires 3 docker image deployments, each containing a separate linked component.</p> <ul class=\"task-list\"><li><em>Hadoop HDFS</em> (sequenceiq/hadoop-docker:2.4.1)</li><li><em>Neo4j Graph Database</em> (kbastani/docker-neo4j:latest)</li><li><em>Apache Spark Service</em> (kbastani/neo4j-graph-analytics:latest)</li></ul> <p>Pull the following docker images:</p> <pre class=\"zsh highlight\"><code>docker pull sequenceiq/hadoop-docker:2.4.1<br />docker pull kbastani/docker-neo4j:latest<br />docker pull kbastani/neo4j-graph-analytics:latest<br /></code></pre> <p>After each image has been downloaded to your Docker server, run the following commands in order to create the linked containers.</p> <pre class=\"zsh highlight\"><code># Create HDFS<br />docker run -i -t --name hdfs sequenceiq/hadoop-docker:2.4.1 /etc/bootstrap.sh -bash<br /><br /># Create Mazerunner Apache Spark Service<br />docker run -i -t --name mazerunner --link hdfs:hdfs kbastani/neo4j-graph-analytics<br /><br /># Create Neo4j database with links to HDFS and Mazerunner<br /># Replace &lt;user&gt; and &lt;neo4j-path&gt;<br /># with the location to your existing Neo4j database store directory<br />docker run -d -P -v /Users/&lt;user&gt;/&lt;neo4j-path&gt;/data:/opt/data --name graphdb --link mazerunner:mazerunner --link hdfs:hdfs kbastani/docker-neo4j<br /></code></pre> <h3><a id=\"user-content-use-existing-neo4j-database\" class=\"anchor\" href=\"#use-existing-neo4j-database\" aria-hidden=\"true\"><span class=\"octicon octicon-link\"></span></a>Use Your Existing Neo4j Database</h3> <p>To use an existing Neo4j database, make sure that the database store directory, typically <code>data/graph.db</code>, is available on your host OS. Read the <a href=\"https://github.com/kbastani/docker-neo4j#start-neo4j-container\">setup guide</a> for <em>kbastani/docker-neo4j</em> for additional details.</p> <h3><a id=\"user-content-accessing-the-neo4j-browser\" class=\"anchor\" href=\"#accessing-the-neo4j-browser\" aria-hidden=\"true\"><span class=\"octicon octicon-link\"></span></a>Accessing the Neo4j Browser</h3> <p>The Neo4j browser is exposed as a container on port 7474. If you're wanting to test this deployment on your development machine and are using <a href=\"http://boot2docker.io/\" target=\"_blank\">boot2docker</a> on MacOSX, follow the directions <a href=\"https://github.com/kbastani/docker-neo4j#boot2docker\" target=\"_blank\">here</a> to access the Neo4j browser on your environment.</p> <h2><a id=\"user-content-usage-directions\" class=\"anchor\" href=\"#usage-directions\" aria-hidden=\"true\"><span class=\"octicon octicon-link\"></span></a>Usage Directions</h2> <p>Graph analysis jobs are started by accessing the following endpoint:</p> <pre><code>http://localhost:7474/service/mazerunner/analysis/{analysis}/{relationship_type}<br /></code></pre> <p>To choose an analysis to start running, replace <code>{analysis}</code> in the URL above with one of the following keys:</p> <ul class=\"task-list\"><li>pagerank</li><li>triangle_count</li><li>connected_components</li><li>strongly_connected_components</li></ul> <p>To select a subgraph from Neo4j that you would like to analyze, replace the <code>{relationship_type}</code> in the URL above with a relationship type in your Neo4j database. The nodes that are connected by that relationship will form the graph that will be analyzed. For example, the equivalent Cypher query would be the following:</p> <pre data-lang=\"cypher\">MATCH (a)-[:FOLLOWS]-&gt;(b)<br />RETURN id(a) as src, id(b) as dst<br /></pre> Just to illustrate, if you ran a <code>pagerank</code> analysis on the <code>FOLLOWS</code> relationship type, the following Cypher query will display the results:</p> <pre data-lang=\"cypher\">MATCH (a)-[:FOLLOWS]-()<br />RETURN DISTINCT id(a) as id, a.pagerank as pagerank<br />ORDER BY pagerank DESC</pre> <h2><a id=\"user-content-usage-examples\" class=\"anchor\" href=\"#usage-examples\" aria-hidden=\"true\"><span class=\"octicon octicon-link\"></span></a>Usage Examples</h2> <p>To run graph analysis algorithms, HTTP GET request on the following Neo4j server endpoints:</p> <h3><a id=\"user-content-pagerank\" class=\"anchor\" href=\"#pagerank\" aria-hidden=\"true\"><span class=\"octicon octicon-link\"></span></a>PageRank</h3> <pre><code>http://172.17.0.21:7474/service/mazerunner/analysis/pagerank/FOLLOWS<br /></code></pre> <ul class=\"task-list\"><li><p>Gets all nodes connected by the <code>FOLLOWS</code> relationship and updates each node with the property key <code>pagerank</code>.</p></li><li><p>The value of the <code>pagerank</code> property is a float data type, ex. <code>pagerank: 3.14159265359</code>.</p></li><li><p>PageRank is used to find the relative importance of a node within a set of connected nodes.</p></li></ul> <h3><a id=\"user-content-triangle-counting\" class=\"anchor\" href=\"#triangle-counting\" aria-hidden=\"true\"><span class=\"octicon octicon-link\"></span></a>Triangle Counting</h3> <pre><code>http://172.17.0.21:7474/service/mazerunner/analysis/triangle_count/FOLLOWS<br /></code></pre> <ul class=\"task-list\"><li><p>Gets all nodes connected by the <code>FOLLOWS</code> relationship and updates each node with the property key <code>triangle_count</code>.</p></li><li><p>The value of the <code>triangle_count</code> property is an integer data type, ex. <code>triangle_count: 2</code>.</p></li><li><p>The value of <code>triangle_count</code> represents the count of the triangles that a node is connected to.</p></li><li><p>A node is part of a triangle when it has two adjacent nodes with a relationship between them. The <code>triangle_count</code> property provides a measure of clustering for each node.</p></li></ul> <h3><a id=\"user-content-connected-components\" class=\"anchor\" href=\"#connected-components\" aria-hidden=\"true\"><span class=\"octicon octicon-link\"></span></a>Connected Components</h3> <pre><code>http://172.17.0.21:7474/service/mazerunner/analysis/connected_components/FOLLOWS<br /></code></pre> <ul class=\"task-list\"><li><p>Gets all nodes connected by the <code>FOLLOWS</code> relationship and updates each node with the property key <code>connected_components</code>.</p></li><li><p>The value of <code>connected_components</code> property is an integer data type, ex. <code>connected_components: 181</code>.</p></li><li><p>The value of <code>connected_components</code> represents the <em>Neo4j internal node ID</em> that has the lowest integer value for a set of connected nodes.</p></li><li><p>Connected components are used to find isolated clusters, that is, a group of nodes that can reach every other node in the group through a <em>bidirectional</em> traversal.</p></li></ul> <h3><a id=\"user-content-strongly-connected-components\" class=\"anchor\" href=\"#strongly-connected-components\" aria-hidden=\"true\"><span class=\"octicon octicon-link\"></span></a>Strongly Connected Components</h3> <pre><code>http://172.17.0.21:7474/service/mazerunner/analysis/strongly_connected_components/FOLLOWS<br /></code></pre> <ul class=\"task-list\"><li><p>Gets all nodes connected by the <code>FOLLOWS</code> relationship and updates each node with the property key <code>strongly_connected_components</code>.</p></li><li><p>The value of <code>strongly_connected_components</code> property is an integer data type, ex. <code>strongly_connected_components: 26</code>.</p></li><li><p>The value of <code>strongly_connected_components</code> represents the <em>Neo4j internal node ID</em> that has the lowest integer value for a set of strongly connected nodes.</p></li><li><p>Strongly connected components are used to find clusters, that is, a group of nodes that can reach every other node in the group through a <em>directed</em> traversal.</p></li></ul> <h2>Getting started</h2> <p>To get started, head over to the <a href=\"https://registry.hub.docker.com/u/kbastani/neo4j-graph-analytics/\">neo4j-graph-analytics Docker Repository</a> and follow the directions to get started. If you're new to Docker and looking to get your feet wet, take a look at this great online tutorial: <a href=\"https://www.docker.com/tryit/\">https://www.docker.com/tryit/</a></p> <p>If you have any questions or need help getting setup, please feel free to comment below. Also, comment your ideas for additional graph analytics algorithms that could be added to this library.</p> <p>Have fun!</p>",
  "link": "https://www.kennybastani.com/2014/11/graph-analytics-docker-spark-neo4j.html",
  "author": "noreply@blogger.com (Kenny Bastani)",
  "thr:total": 0
}