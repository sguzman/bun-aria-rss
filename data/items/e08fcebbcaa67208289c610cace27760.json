{
  "title": "Portfolio Optimization with Python",
  "link": "https://wellecks.wordpress.com/2014/03/23/portfolio-optimization-with-python/",
  "comments": "https://wellecks.wordpress.com/2014/03/23/portfolio-optimization-with-python/#comments",
  "dc:creator": "wellecks",
  "pubDate": "Sun, 23 Mar 2014 05:38:51 +0000",
  "category": [
    "artificial intelligence",
    "Artificial intelligence",
    "convex optimization",
    "finance",
    "optimization",
    "python",
    "stocks"
  ],
  "guid": "http://wellecks.wordpress.com/?p=604",
  "description": "There are a lot of interesting applications of convex optimization; in this post I&#8217;ll explore an application of convex optimization in finance. I&#8217;ll walk through using convex optimization to allocate a stock portfolio so that it maximizes return for a given risk level. We&#8217;ll use real data for a mock portfolio, and solve the problem [&#8230;]",
  "content:encoded": "<p><span style=\"line-height:1.6;\">There are a lot of interesting applications of </span><a style=\"line-height:1.6;\" href=\"http://en.wikipedia.org/wiki/Convex_optimization\">convex optimization</a><span style=\"line-height:1.6;\">; in this post I&#8217;ll explore an application of convex optimization in finance. I&#8217;ll walk through using convex optimization to allocate a stock portfolio so that it maximizes return for a given risk level. We&#8217;ll use real data for a mock portfolio, and solve the problem using Python. All of the code can be found on </span><a style=\"line-height:1.6;\" title=\"GitHub - Portfolio Optimization\" href=\"https://github.com/wellecks/port_opt\">GitHub</a><span style=\"line-height:1.6;\"> </span><span style=\"line-height:1.6;\">&#8211;</span><span style=\"line-height:1.6;\"> the code shown here is from </span><a href=\"https://github.com/wellecks/port_opt/blob/master/portfolio_opt.py\"><strong style=\"line-height:1.6;\">portfolio_opt.py</strong></a><span style=\"line-height:1.6;\"> and uses code in </span><a href=\"https://github.com/wellecks/port_opt/blob/master/stocks.py\"><strong style=\"line-height:1.6;\">stocks.py</strong></a><span style=\"line-height:1.6;\">, which pulls stock data</span><span style=\"line-height:1.6;\"> from Yahoo Finance.</span></p>\n<h3>Motivation</h3>\n<p>Let&#8217;s say you want to invest some money in the stock market. You choose a set of stocks and have a sum of money to invest. How should you distribute the money into the different stocks? There is a general tradeoff between risk and return; with higher potential return we often face higher risk. If we have a goal return in mind, then we should choose the portfolio allocation that minimizes the risk for that return. How can we do this?</p>\n<p>Borrowing ideas from <a title=\"Wikipedia\" href=\"http://en.wikipedia.org/wiki/Modern_portfolio_theory\">modern portfolio theory</a>, we can view the return of each stock as a random variable, and estimate the variable&#8217;s parameters &#8211; namely the mean return and covariance &#8211; with past data. Then we solve an optimization problem to find the combination of stocks that maximizes expected return for a given risk level.</p>\n<p>We&#8217;ll choose <img src=\"https://s0.wp.com/latex.php?latex=n&#038;bg=ffffff&#038;fg=404040&#038;s=0&#038;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=n&#038;bg=ffffff&#038;fg=404040&#038;s=0&#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=n&#038;bg=ffffff&#038;fg=404040&#038;s=0&#038;c=20201002&#038;zoom=4.5 4x\" alt=\"n\" class=\"latex\" /> different assets, viewing the portfolio as a vector <img src=\"https://s0.wp.com/latex.php?latex=x+%5Cin+R%5E%7Bn%7D.+&#038;bg=ffffff&#038;fg=404040&#038;s=0&#038;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=x+%5Cin+R%5E%7Bn%7D.+&#038;bg=ffffff&#038;fg=404040&#038;s=0&#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=x+%5Cin+R%5E%7Bn%7D.+&#038;bg=ffffff&#038;fg=404040&#038;s=0&#038;c=20201002&#038;zoom=4.5 4x\" alt=\"x &#92;in R^{n}. \" class=\"latex\" /> Each <img src=\"https://s0.wp.com/latex.php?latex=x_%7Bi%7D&#038;bg=ffffff&#038;fg=404040&#038;s=0&#038;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=x_%7Bi%7D&#038;bg=ffffff&#038;fg=404040&#038;s=0&#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=x_%7Bi%7D&#038;bg=ffffff&#038;fg=404040&#038;s=0&#038;c=20201002&#038;zoom=4.5 4x\" alt=\"x_{i}\" class=\"latex\" /> will represent the percentage of our budget invested in asset <img src=\"https://s0.wp.com/latex.php?latex=i&#038;bg=ffffff&#038;fg=404040&#038;s=0&#038;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=i&#038;bg=ffffff&#038;fg=404040&#038;s=0&#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=i&#038;bg=ffffff&#038;fg=404040&#038;s=0&#038;c=20201002&#038;zoom=4.5 4x\" alt=\"i\" class=\"latex\" />. As a running example, we&#8217;ll have <img src=\"https://s0.wp.com/latex.php?latex=n%3D10&#038;bg=ffffff&#038;fg=404040&#038;s=0&#038;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=n%3D10&#038;bg=ffffff&#038;fg=404040&#038;s=0&#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=n%3D10&#038;bg=ffffff&#038;fg=404040&#038;s=0&#038;c=20201002&#038;zoom=4.5 4x\" alt=\"n=10\" class=\"latex\" /> different stocks, identified by their ticker symbols:</p>\n<pre>symbols = ['GOOG', 'AIMC', 'GS', 'BH', 'TM', \n           'F', 'HLS', 'DIS', 'LUV', 'MSFT']</pre>\n<p>So for instance, <img src=\"https://s0.wp.com/latex.php?latex=x_%7B1%7D%3D0.14&#038;bg=ffffff&#038;fg=404040&#038;s=0&#038;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=x_%7B1%7D%3D0.14&#038;bg=ffffff&#038;fg=404040&#038;s=0&#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=x_%7B1%7D%3D0.14&#038;bg=ffffff&#038;fg=404040&#038;s=0&#038;c=20201002&#038;zoom=4.5 4x\" alt=\"x_{1}=0.14\" class=\"latex\" /> would mean that we invested 14% of our budget in Google. A naive allocation could be investing equal amounts (10%) into each stock, so that <img src=\"https://s0.wp.com/latex.php?latex=x%3D%5B0.10%2C0.10%2C0.10%2C0.10%2C0.10%2C0.10%2C0.10%2C0.10%2C0.10%2C0.10%5D&#038;bg=ffffff&#038;fg=404040&#038;s=0&#038;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=x%3D%5B0.10%2C0.10%2C0.10%2C0.10%2C0.10%2C0.10%2C0.10%2C0.10%2C0.10%2C0.10%5D&#038;bg=ffffff&#038;fg=404040&#038;s=0&#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=x%3D%5B0.10%2C0.10%2C0.10%2C0.10%2C0.10%2C0.10%2C0.10%2C0.10%2C0.10%2C0.10%5D&#038;bg=ffffff&#038;fg=404040&#038;s=0&#038;c=20201002&#038;zoom=4.5 4x\" alt=\"x=[0.10,0.10,0.10,0.10,0.10,0.10,0.10,0.10,0.10,0.10]\" class=\"latex\" />. Our goal is to do better, and choose the best possible <img src=\"https://s0.wp.com/latex.php?latex=x&#038;bg=ffffff&#038;fg=404040&#038;s=0&#038;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=x&#038;bg=ffffff&#038;fg=404040&#038;s=0&#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=x&#038;bg=ffffff&#038;fg=404040&#038;s=0&#038;c=20201002&#038;zoom=4.5 4x\" alt=\"x\" class=\"latex\" />.</p>\n<h3>Looking to the Past</h3>\n<p>First we need an estimate of the expected returns and covariance for the portfolio, which will be used in our optimization. A simple way of estimating a stock&#8217;s expected return is to look to its past performance; we&#8217;ll use average yearly return from the past four years. Four is somewhat arbitrary, but the emphasis here is illustrating the optimization approach rather than the estimation of a stock&#8217;s return. The average historical return will be an <img src=\"https://s0.wp.com/latex.php?latex=n&#038;bg=ffffff&#038;fg=404040&#038;s=0&#038;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=n&#038;bg=ffffff&#038;fg=404040&#038;s=0&#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=n&#038;bg=ffffff&#038;fg=404040&#038;s=0&#038;c=20201002&#038;zoom=4.5 4x\" alt=\"n\" class=\"latex\" /> dimensional vector <img src=\"https://s0.wp.com/latex.php?latex=r_%7Bavg%7D+%5Cin+R%5E%7Bn%7D+&#038;bg=ffffff&#038;fg=404040&#038;s=0&#038;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=r_%7Bavg%7D+%5Cin+R%5E%7Bn%7D+&#038;bg=ffffff&#038;fg=404040&#038;s=0&#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=r_%7Bavg%7D+%5Cin+R%5E%7Bn%7D+&#038;bg=ffffff&#038;fg=404040&#038;s=0&#038;c=20201002&#038;zoom=4.5 4x\" alt=\"r_{avg} &#92;in R^{n} \" class=\"latex\" />, where <img src=\"https://s0.wp.com/latex.php?latex=r_%7Bavg_%7Bi%7D%7D+&#038;bg=ffffff&#038;fg=404040&#038;s=0&#038;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=r_%7Bavg_%7Bi%7D%7D+&#038;bg=ffffff&#038;fg=404040&#038;s=0&#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=r_%7Bavg_%7Bi%7D%7D+&#038;bg=ffffff&#038;fg=404040&#038;s=0&#038;c=20201002&#038;zoom=4.5 4x\" alt=\"r_{avg_{i}} \" class=\"latex\" /> is the average return of asset <em>i</em><span style=\"line-height:1.6;\">. </span></p>\n<p>Using <code>avg_return()</code> from <a title=\"Github - stocks.py\" href=\"https://github.com/wellecks/port_opt/blob/master/stocks.py\"><strong>stocks.py</strong></a>, we have:</p>\n<pre id=\"LC46\">start = '1/1/2010'\nend = '1/1/2014'\n\n# average yearly return for each stock\nr_avg = map(lambda s: stocks.avg_return(s, start, end, 'y'), symbols)</pre>\n<p><span style=\"line-height:1.6;\">Similarly, we can find the portfolio&#8217;s </span><span style=\"line-height:1.6;\">covariance using past data; the covariance of asset returns is <img src=\"https://s0.wp.com/latex.php?latex=%5CSigma+%5Cin+R%5E%7Bn+%5Ctimes+n%7D+&#038;bg=ffffff&#038;fg=404040&#038;s=0&#038;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=%5CSigma+%5Cin+R%5E%7Bn+%5Ctimes+n%7D+&#038;bg=ffffff&#038;fg=404040&#038;s=0&#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5CSigma+%5Cin+R%5E%7Bn+%5Ctimes+n%7D+&#038;bg=ffffff&#038;fg=404040&#038;s=0&#038;c=20201002&#038;zoom=4.5 4x\" alt=\"&#92;Sigma &#92;in R^{n &#92;times n} \" class=\"latex\" />. Using <code>cov_matrix()</code> from <strong><a title=\"Github - stocks.py\" href=\"https://github.com/wellecks/port_opt/blob/master/stocks.py\">stocks.py</a></strong>:<br />\n</span></p>\n<pre># covariance of asset returns\nsigma = numpy.array(stocks.cov_matrix(symbols, start, end, 'y'))</pre>\n<p><span style=\"line-height:1.6;\">The last parameter is our goal return threshold, <img src=\"https://s0.wp.com/latex.php?latex=r_%7Bmin%7D&#038;bg=ffffff&#038;fg=404040&#038;s=0&#038;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=r_%7Bmin%7D&#038;bg=ffffff&#038;fg=404040&#038;s=0&#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=r_%7Bmin%7D&#038;bg=ffffff&#038;fg=404040&#038;s=0&#038;c=20201002&#038;zoom=4.5 4x\" alt=\"r_{min}\" class=\"latex\" />:</span></p>\n<pre># minimum expected return threshold\nr_min = 0.10</pre>\n<p><span style=\"line-height:1.6;\">With these quantities in mind, we can now formulate a convex optimization problem to find the optimal portfolio allocation; that is, the portfolio that achieves the lowest amount of risk while meeting our return goal <img src=\"https://s0.wp.com/latex.php?latex=r_%7Bmin%7D&#038;bg=ffffff&#038;fg=404040&#038;s=0&#038;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=r_%7Bmin%7D&#038;bg=ffffff&#038;fg=404040&#038;s=0&#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=r_%7Bmin%7D&#038;bg=ffffff&#038;fg=404040&#038;s=0&#038;c=20201002&#038;zoom=4.5 4x\" alt=\"r_{min}\" class=\"latex\" />.</span></p>\n<h3>The problem</h3>\n<p>We can use the quantity <img src=\"https://s0.wp.com/latex.php?latex=x%5E%7BT%7D+%5CSigma+x&#038;bg=ffffff&#038;fg=404040&#038;s=0&#038;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=x%5E%7BT%7D+%5CSigma+x&#038;bg=ffffff&#038;fg=404040&#038;s=0&#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=x%5E%7BT%7D+%5CSigma+x&#038;bg=ffffff&#038;fg=404040&#038;s=0&#038;c=20201002&#038;zoom=4.5 4x\" alt=\"x^{T} &#92;Sigma x\" class=\"latex\" /> as a measure of risk for a given portfolio allocation <img src=\"https://s0.wp.com/latex.php?latex=x&#038;bg=ffffff&#038;fg=404040&#038;s=0&#038;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=x&#038;bg=ffffff&#038;fg=404040&#038;s=0&#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=x&#038;bg=ffffff&#038;fg=404040&#038;s=0&#038;c=20201002&#038;zoom=4.5 4x\" alt=\"x\" class=\"latex\" /> with covariance <img src=\"https://s0.wp.com/latex.php?latex=%5CSigma&#038;bg=ffffff&#038;fg=404040&#038;s=0&#038;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=%5CSigma&#038;bg=ffffff&#038;fg=404040&#038;s=0&#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5CSigma&#038;bg=ffffff&#038;fg=404040&#038;s=0&#038;c=20201002&#038;zoom=4.5 4x\" alt=\"&#92;Sigma\" class=\"latex\" />. Our objective is to minimize <img src=\"https://s0.wp.com/latex.php?latex=x%5E%7BT%7D+%5CSigma+x&#038;bg=ffffff&#038;fg=404040&#038;s=0&#038;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=x%5E%7BT%7D+%5CSigma+x&#038;bg=ffffff&#038;fg=404040&#038;s=0&#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=x%5E%7BT%7D+%5CSigma+x&#038;bg=ffffff&#038;fg=404040&#038;s=0&#038;c=20201002&#038;zoom=4.5 4x\" alt=\"x^{T} &#92;Sigma x\" class=\"latex\" />. This<span style=\"line-height:1.6;\"> objective function is a convex function, meaning that we&#8217;re able to formulate a convex optimization problem, specifically a quadratic program (QP), to find its minimum. To start out, we have the problem:</span></p>\n<p style=\"text-align:left;padding-left:150px;\"><strong>minimize <img src=\"https://s0.wp.com/latex.php?latex=x%5E%7BT%7D+%5CSigma+x&#038;bg=ffffff&#038;fg=404040&#038;s=0&#038;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=x%5E%7BT%7D+%5CSigma+x&#038;bg=ffffff&#038;fg=404040&#038;s=0&#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=x%5E%7BT%7D+%5CSigma+x&#038;bg=ffffff&#038;fg=404040&#038;s=0&#038;c=20201002&#038;zoom=4.5 4x\" alt=\"x^{T} &#92;Sigma x\" class=\"latex\" /></strong><code><br />\n</code></p>\n<p>We can build in our goal return as a constraint <img src=\"https://s0.wp.com/latex.php?latex=r_%7Bavg%7D%5E%7BT%7Dx+%5Cgeq+r_%7Bmin%7D&#038;bg=ffffff&#038;fg=404040&#038;s=0&#038;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=r_%7Bavg%7D%5E%7BT%7Dx+%5Cgeq+r_%7Bmin%7D&#038;bg=ffffff&#038;fg=404040&#038;s=0&#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=r_%7Bavg%7D%5E%7BT%7Dx+%5Cgeq+r_%7Bmin%7D&#038;bg=ffffff&#038;fg=404040&#038;s=0&#038;c=20201002&#038;zoom=4.5 4x\" alt=\"r_{avg}^{T}x &#92;geq r_{min}\" class=\"latex\" />. Since we want each <img src=\"https://s0.wp.com/latex.php?latex=x_%7Bi%7D&#038;bg=ffffff&#038;fg=404040&#038;s=0&#038;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=x_%7Bi%7D&#038;bg=ffffff&#038;fg=404040&#038;s=0&#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=x_%7Bi%7D&#038;bg=ffffff&#038;fg=404040&#038;s=0&#038;c=20201002&#038;zoom=4.5 4x\" alt=\"x_{i}\" class=\"latex\" /> to be a percentage (of the budget), we can also add the constraints <img src=\"https://s0.wp.com/latex.php?latex=%5Csum_%7Bi%3D1%7D%5E%7Bn%7D+x_%7Bi%7D%3D1&#038;bg=ffffff&#038;fg=404040&#038;s=0&#038;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=%5Csum_%7Bi%3D1%7D%5E%7Bn%7D+x_%7Bi%7D%3D1&#038;bg=ffffff&#038;fg=404040&#038;s=0&#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Csum_%7Bi%3D1%7D%5E%7Bn%7D+x_%7Bi%7D%3D1&#038;bg=ffffff&#038;fg=404040&#038;s=0&#038;c=20201002&#038;zoom=4.5 4x\" alt=\"&#92;sum_{i=1}^{n} x_{i}=1\" class=\"latex\" /> and <img src=\"https://s0.wp.com/latex.php?latex=x+%5Cgeq+0&#038;bg=ffffff&#038;fg=404040&#038;s=0&#038;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=x+%5Cgeq+0&#038;bg=ffffff&#038;fg=404040&#038;s=0&#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=x+%5Cgeq+0&#038;bg=ffffff&#038;fg=404040&#038;s=0&#038;c=20201002&#038;zoom=4.5 4x\" alt=\"x &#92;geq 0\" class=\"latex\" />. These are simple linear constraints, maintaining convexity of the new problem:</p>\n<p style=\"text-align:left;padding-left:150px;\"><strong>minimize   <img src=\"https://s0.wp.com/latex.php?latex=x%5E%7BT%7D+%5CSigma+x&#038;bg=ffffff&#038;fg=404040&#038;s=0&#038;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=x%5E%7BT%7D+%5CSigma+x&#038;bg=ffffff&#038;fg=404040&#038;s=0&#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=x%5E%7BT%7D+%5CSigma+x&#038;bg=ffffff&#038;fg=404040&#038;s=0&#038;c=20201002&#038;zoom=4.5 4x\" alt=\"x^{T} &#92;Sigma x\" class=\"latex\" /></strong></p>\n<p style=\"text-align:left;padding-left:150px;\"><strong>subject to  <img src=\"https://s0.wp.com/latex.php?latex=r_%7Bavg%7D%5E%7BT%7Dx+%5Cgeq+r_%7Bmin%7D&#038;bg=ffffff&#038;fg=404040&#038;s=0&#038;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=r_%7Bavg%7D%5E%7BT%7Dx+%5Cgeq+r_%7Bmin%7D&#038;bg=ffffff&#038;fg=404040&#038;s=0&#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=r_%7Bavg%7D%5E%7BT%7Dx+%5Cgeq+r_%7Bmin%7D&#038;bg=ffffff&#038;fg=404040&#038;s=0&#038;c=20201002&#038;zoom=4.5 4x\" alt=\"r_{avg}^{T}x &#92;geq r_{min}\" class=\"latex\" /></strong></p>\n<p style=\"text-align:left;padding-left:210px;\"><strong>     <img src=\"https://s0.wp.com/latex.php?latex=%5Csum_%7Bi%3D1%7D%5E%7Bn%7D+x_%7Bi%7D+%3D+1&#038;bg=ffffff&#038;fg=404040&#038;s=0&#038;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=%5Csum_%7Bi%3D1%7D%5E%7Bn%7D+x_%7Bi%7D+%3D+1&#038;bg=ffffff&#038;fg=404040&#038;s=0&#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Csum_%7Bi%3D1%7D%5E%7Bn%7D+x_%7Bi%7D+%3D+1&#038;bg=ffffff&#038;fg=404040&#038;s=0&#038;c=20201002&#038;zoom=4.5 4x\" alt=\"&#92;sum_{i=1}^{n} x_{i} = 1\" class=\"latex\" /></strong></p>\n<p style=\"text-align:left;padding-left:210px;\"><strong>     <img src=\"https://s0.wp.com/latex.php?latex=x+%5Cgeq+0&#038;bg=ffffff&#038;fg=404040&#038;s=0&#038;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=x+%5Cgeq+0&#038;bg=ffffff&#038;fg=404040&#038;s=0&#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=x+%5Cgeq+0&#038;bg=ffffff&#038;fg=404040&#038;s=0&#038;c=20201002&#038;zoom=4.5 4x\" alt=\"x &#92;geq 0\" class=\"latex\" /></strong></p>\n<h3>Solving with Python</h3>\n<p>Now it&#8217;s time to translate the math into code. In order to setup and solve the problem in Python, we&#8217;ll use the <a title=\"CVXOPT\" href=\"http://cvxopt.org/\">CVXOPT library</a>. CVXOPT allows us to solve a convex optimization problem as long as we can put it into the proper form. First, we convert the covariance and average return arrays into CVXOPT matrices:</p>\n<pre>r_avg = matrix(r_avg)\nsigma = matrix(sigma)\n# that was easy</pre>\n<p>Since the portfolio allocation problem is a quadratic program, we need to put our problem <a href=\"http://abel.ee.ucla.edu/cvxopt/userguide/coneprog.html#quadratic-programming\">into the form</a>:</p>\n<p style=\"padding-left:150px;\"><strong>minimize   <img src=\"https://s0.wp.com/latex.php?latex=x%5E%7BT%7D+P+x+%2B+q%5E%7BT%7Dx&#038;bg=ffffff&#038;fg=404040&#038;s=0&#038;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=x%5E%7BT%7D+P+x+%2B+q%5E%7BT%7Dx&#038;bg=ffffff&#038;fg=404040&#038;s=0&#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=x%5E%7BT%7D+P+x+%2B+q%5E%7BT%7Dx&#038;bg=ffffff&#038;fg=404040&#038;s=0&#038;c=20201002&#038;zoom=4.5 4x\" alt=\"x^{T} P x + q^{T}x\" class=\"latex\" /></strong></p>\n<p style=\"padding-left:150px;\"><strong>subject to  <img src=\"https://s0.wp.com/latex.php?latex=Gx+%5Cleq+h&#038;bg=ffffff&#038;fg=404040&#038;s=0&#038;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=Gx+%5Cleq+h&#038;bg=ffffff&#038;fg=404040&#038;s=0&#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=Gx+%5Cleq+h&#038;bg=ffffff&#038;fg=404040&#038;s=0&#038;c=20201002&#038;zoom=4.5 4x\" alt=\"Gx &#92;leq h\" class=\"latex\" /></strong></p>\n<p style=\"padding-left:210px;\"><strong>     <img src=\"https://s0.wp.com/latex.php?latex=Ax+%3D+b&#038;bg=ffffff&#038;fg=404040&#038;s=0&#038;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=Ax+%3D+b&#038;bg=ffffff&#038;fg=404040&#038;s=0&#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=Ax+%3D+b&#038;bg=ffffff&#038;fg=404040&#038;s=0&#038;c=20201002&#038;zoom=4.5 4x\" alt=\"Ax = b\" class=\"latex\" /></strong></p>\n<p style=\"text-align:left;\">In our case, <em>P = sigma</em>, and <em>q = 0</em>:</p>\n<pre>P = sigma\nq = matrix(numpy.zeros((n, 1)))</pre>\n<p style=\"text-align:left;\">The inequality constraints <img src=\"https://s0.wp.com/latex.php?latex=x+%5Cgeq+r_%7Bmin%7D&#038;bg=ffffff&#038;fg=404040&#038;s=0&#038;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=x+%5Cgeq+r_%7Bmin%7D&#038;bg=ffffff&#038;fg=404040&#038;s=0&#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=x+%5Cgeq+r_%7Bmin%7D&#038;bg=ffffff&#038;fg=404040&#038;s=0&#038;c=20201002&#038;zoom=4.5 4x\" alt=\"x &#92;geq r_{min}\" class=\"latex\" /> and <img src=\"https://s0.wp.com/latex.php?latex=x+%5Cgeq+0&#038;bg=ffffff&#038;fg=404040&#038;s=0&#038;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=x+%5Cgeq+0&#038;bg=ffffff&#038;fg=404040&#038;s=0&#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=x+%5Cgeq+0&#038;bg=ffffff&#038;fg=404040&#038;s=0&#038;c=20201002&#038;zoom=4.5 4x\" alt=\"x &#92;geq 0\" class=\"latex\" /> are captured using <img src=\"https://s0.wp.com/latex.php?latex=Gx+%5Cleq+h&#038;bg=ffffff&#038;fg=404040&#038;s=0&#038;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=Gx+%5Cleq+h&#038;bg=ffffff&#038;fg=404040&#038;s=0&#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=Gx+%5Cleq+h&#038;bg=ffffff&#038;fg=404040&#038;s=0&#038;c=20201002&#038;zoom=4.5 4x\" alt=\"Gx &#92;leq h\" class=\"latex\" />:</p>\n<pre># inequality constraints Gx <= h\n# captures the constraints (avg_ret'x >= r_min) and (x >= 0)\nG = matrix(numpy.concatenate((\n             -numpy.transpose(numpy.array(avg_ret)), \n             -numpy.identity(n)), 0))\nh = matrix(numpy.concatenate((\n             -numpy.ones((1,1))*r_min, \n              numpy.zeros((n,1))), 0))</pre>\n<p>And the equality constraint <img src=\"https://s0.wp.com/latex.php?latex=%5Csum_%7Bi%3D1%7D%5E%7Bn%7D+x_%7Bi%7D%3D1&#038;bg=ffffff&#038;fg=404040&#038;s=0&#038;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=%5Csum_%7Bi%3D1%7D%5E%7Bn%7D+x_%7Bi%7D%3D1&#038;bg=ffffff&#038;fg=404040&#038;s=0&#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Csum_%7Bi%3D1%7D%5E%7Bn%7D+x_%7Bi%7D%3D1&#038;bg=ffffff&#038;fg=404040&#038;s=0&#038;c=20201002&#038;zoom=4.5 4x\" alt=\"&#92;sum_{i=1}^{n} x_{i}=1\" class=\"latex\" /> is captured using <img src=\"https://s0.wp.com/latex.php?latex=Ax+%3D+b&#038;bg=ffffff&#038;fg=404040&#038;s=0&#038;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=Ax+%3D+b&#038;bg=ffffff&#038;fg=404040&#038;s=0&#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=Ax+%3D+b&#038;bg=ffffff&#038;fg=404040&#038;s=0&#038;c=20201002&#038;zoom=4.5 4x\" alt=\"Ax = b\" class=\"latex\" />:</p>\n<pre># equality constraint Ax = b; captures the constraint sum(x) == 1\nA = matrix(1.0, (1,n))\nb = matrix(1.0)</pre>\n<p>We&#8217;re ready to solve! Throw it into the solver and brace yourself for optimality:</p>\n<pre>sol = solvers.qp(P, q, G, h, A, b)</pre>\n<h2></h2>\n<h2><strong>The Results and the Expansions</strong></h2>\n<p>Here&#8217;s the result:</p>\n<pre>Optimal solution found.\n[0.0, 0.0, 0.0, 0.7, 0.16, 0.0, 0.0, 0.0, 0.0, 0.13]</pre>\n<p>Surprisingly, we should only invest in the 3 of the stocks! Keep in mind that the model that we&#8217;ve used here contains <em>many</em> simplifying assumptions; the emphasis here is outlining the approach to casting the problem as a convex optimization problem using real stock data. T<span style=\"line-height:1.6;\">he great thing is that we can easily change the estimation of expected return, use a different objective function, or introduce new constraints that better reflect our goals, and more generally, the real-world.</span></p>\n<h3>Credits</h3>\n<p>This post was originally inspired by content from Stephen Boyd&#8217;s great book <a href=\"http://www.stanford.edu/~boyd/\">Convex Optimization</a>. Boyd is also teaching an ongoing online-course called <a href=\"https://class.stanford.edu/courses/Engineering/CVX101/Winter2014/about\">CVX 101</a> if you are interested in learning more about convex optimization.</p>\n",
  "wfw:commentRss": "https://wellecks.wordpress.com/2014/03/23/portfolio-optimization-with-python/feed/",
  "slash:comments": 5,
  "media:content": {
    "media:title": "wellecks"
  }
}