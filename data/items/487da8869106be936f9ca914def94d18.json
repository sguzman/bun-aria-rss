{
  "title": "Working with DataFrames",
  "link": "",
  "published": "2013-10-26T02:00:00-07:00",
  "updated": "2022-11-03T04:16:07-07:00",
  "author": {
    "name": "Greg Reda"
  },
  "id": "tag:www.gregreda.com,2013-10-26:/2013/10/26/working-with-pandas-dataframes/",
  "summary": "<p><em>UPDATE: If you're interested in learning pandas from a SQL perspective and would prefer to watch a video, you can find video of my 2014 PyData NYC talk <a href=\"http://reda.io/sql2pandas\">here</a>.</em></p>\n<p><em>This is part two of a three part introduction to <a href=\"http://pandas.pydata.org\">pandas</a>, a Python library for data analysis. The tutorial is primarily â€¦</em></p>",
  "content": "<p><em>UPDATE: If you're interested in learning pandas from a SQL perspective and would prefer to watch a video, you can find video of my 2014 PyData NYC talk <a href=\"http://reda.io/sql2pandas\">here</a>.</em></p>\n<p><em>This is part two of a three part introduction to <a href=\"http://pandas.pydata.org\">pandas</a>, a Python library for data analysis. The tutorial is primarily geared towards SQL users, but is useful for anyone wanting to get started with the library.</em></p>\n<ul>\n<li><a href=\"/2013/10/26/intro-to-pandas-data-structures/\">Part 1: Intro to pandas data structures</a>, covers the basics of the library's two main data structures - Series and DataFrames.</li>\n<li><a href=\"/2013/10/26/working-with-pandas-dataframes/\">Part 2: Working with DataFrames</a>, dives a bit deeper into the functionality of DataFrames. It shows how to inspect, select, filter, merge, combine, and group your data.</li>\n<li><a href=\"/2013/10/26/using-pandas-on-the-movielens-dataset/\">Part 3: Using pandas with the MovieLens dataset</a>, applies the learnings of the first two parts in order to answer a few basic analysis questions about the MovieLens ratings data.</li>\n</ul>\n<h2>Working with DataFrames</h2>\n<p>Now that we can get data into a DataFrame, we can finally start working with them. pandas has an abundance of functionality, far too much for me to cover in this introduction. I'd encourage anyone interested in diving deeper into the library to check out its <a href=\"https://pandas.pydata.org/pandas-docs/stable/\">excellent documentation</a>. Or just use Google - there are a lot of Stack Overflow questions and blog posts covering specifics of the library.</p>\n<p>We'll be using the <a href=\"https://grouplens.org/datasets/movielens/\">MovieLens</a> dataset in many examples going forward. The dataset contains 100,000 ratings made by 943 users on 1,682 movies.</p>\n<div class=\"highlight\"><pre><span></span><code><span class=\"c1\"># pass in column names for each CSV</span>\n<span class=\"n\">u_cols</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;user_id&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;age&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;sex&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;occupation&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;zip_code&#39;</span><span class=\"p\">]</span>\n<span class=\"n\">users</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">read_csv</span><span class=\"p\">(</span><span class=\"s1\">&#39;ml-100k/u.user&#39;</span><span class=\"p\">,</span> <span class=\"n\">sep</span><span class=\"o\">=</span><span class=\"s1\">&#39;|&#39;</span><span class=\"p\">,</span> <span class=\"n\">names</span><span class=\"o\">=</span><span class=\"n\">u_cols</span><span class=\"p\">,</span>\n                    <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"s1\">&#39;latin-1&#39;</span><span class=\"p\">)</span>\n\n<span class=\"n\">r_cols</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;user_id&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;movie_id&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;rating&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;unix_timestamp&#39;</span><span class=\"p\">]</span>\n<span class=\"n\">ratings</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">read_csv</span><span class=\"p\">(</span><span class=\"s1\">&#39;ml-100k/u.data&#39;</span><span class=\"p\">,</span> <span class=\"n\">sep</span><span class=\"o\">=</span><span class=\"s1\">&#39;</span><span class=\"se\">\\t</span><span class=\"s1\">&#39;</span><span class=\"p\">,</span> <span class=\"n\">names</span><span class=\"o\">=</span><span class=\"n\">r_cols</span><span class=\"p\">,</span>\n                      <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"s1\">&#39;latin-1&#39;</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># the movies file contains columns indicating the movie&#39;s genres</span>\n<span class=\"c1\"># let&#39;s only load the first five columns of the file with usecols</span>\n<span class=\"n\">m_cols</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;movie_id&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;title&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;release_date&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;video_release_date&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;imdb_url&#39;</span><span class=\"p\">]</span>\n<span class=\"n\">movies</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">read_csv</span><span class=\"p\">(</span><span class=\"s1\">&#39;ml-100k/u.item&#39;</span><span class=\"p\">,</span> <span class=\"n\">sep</span><span class=\"o\">=</span><span class=\"s1\">&#39;|&#39;</span><span class=\"p\">,</span> <span class=\"n\">names</span><span class=\"o\">=</span><span class=\"n\">m_cols</span><span class=\"p\">,</span> <span class=\"n\">usecols</span><span class=\"o\">=</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">),</span>\n                     <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"s1\">&#39;latin-1&#39;</span><span class=\"p\">)</span>\n</code></pre></div>\n\n<h3>Inspection</h3>\n<div class=\"highlight\"><pre><span></span><code><span class=\"n\">movies</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">()</span>\n</code></pre></div>\n\n<div class=\"highlight\"><pre><span></span><code><span class=\"go\">&lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;</span>\n<span class=\"go\">Int64Index: 1682 entries, 0 to 1681</span>\n<span class=\"go\">Data columns (total 5 columns):</span>\n<span class=\"go\">movie_id              1682 non-null int64</span>\n<span class=\"go\">title                 1682 non-null object</span>\n<span class=\"go\">release_date          1681 non-null object</span>\n<span class=\"go\">video_release_date    0 non-null float64</span>\n<span class=\"go\">imdb_url              1679 non-null object</span>\n<span class=\"go\">dtypes: float64(1), int64(1), object(3)</span>\n<span class=\"go\">memory usage: 78.8+ KB</span>\n</code></pre></div>\n\n<p>The output tells a few things about our DataFrame.</p>\n<ol>\n<li>It's obviously an instance of a DataFrame.</li>\n<li>Each row was assigned an index of 0 to N-1, where N is the number of rows in the DataFrame. pandas will do this by default if an index is not specified. Don't worry, this can be changed later.</li>\n<li>There are 1,682 rows (every row must have an index).</li>\n<li>Our dataset has five total columns, one of which isn't populated at all (video_release_date) and two that are missing some values (release_date and imdb_url).</li>\n<li>The last datatypes of each column, but not necessarily in the corresponding order to the listed columns. You should use the <code>dtypes</code> method to get the datatype for each column.</li>\n<li>An approximate amount of RAM used to hold the DataFrame. See the <code>.memory_usage</code> method</li>\n</ol>\n<div class=\"highlight\"><pre><span></span><code><span class=\"n\">movies</span><span class=\"o\">.</span><span class=\"n\">dtypes</span>\n</code></pre></div>\n\n<div class=\"highlight\"><pre><span></span><code><span class=\"go\">movie_id                int64</span>\n<span class=\"go\">title                  object</span>\n<span class=\"go\">release_date           object</span>\n<span class=\"go\">video_release_date    float64</span>\n<span class=\"go\">imdb_url               object</span>\n<span class=\"go\">dtype: object</span>\n</code></pre></div>\n\n<p>DataFrame's also have a <code>describe</code> method, which is great for seeing basic statistics about the dataset's numeric columns. Be careful though, since this will return information on all columns of a numeric datatype.</p>\n<div class=\"highlight\"><pre><span></span><code><span class=\"n\">users</span><span class=\"o\">.</span><span class=\"n\">describe</span><span class=\"p\">()</span>\n</code></pre></div>\n\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>user_id</th>\n      <th>age</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>943.000000</td>\n      <td>943.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>472.000000</td>\n      <td>34.051962</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>272.364951</td>\n      <td>12.192740</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>1.000000</td>\n      <td>7.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>236.500000</td>\n      <td>25.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>472.000000</td>\n      <td>31.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>707.500000</td>\n      <td>43.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>943.000000</td>\n      <td>73.000000</td>\n    </tr>\n  </tbody>\n</table>\n\n<p>Notice user_id was included since it's numeric. Since this is an ID value, the stats for it don't really matter.</p>\n<p>We can quickly see the average age of our users is just above 34 years old, with the youngest being 7 and the oldest being 73. The median age is 31, with the youngest quartile of users being 25 or younger, and the oldest quartile being at least 43.</p>\n<p>You've probably noticed that I've used the <code>head</code> method regularly throughout this post - by default, <code>head</code> displays the first five records of the dataset, while <code>tail</code> displays the last five.</p>\n<div class=\"highlight\"><pre><span></span><code><span class=\"n\">movies</span><span class=\"o\">.</span><span class=\"n\">head</span><span class=\"p\">()</span>\n</code></pre></div>\n\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>movie_id</th>\n      <th>title</th>\n      <th>release_date</th>\n      <th>video_release_date</th>\n      <th>imdb_url</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>Toy Story (1995)</td>\n      <td>01-Jan-1995</td>\n      <td>NaN</td>\n      <td>http://us.imdb.com/M/title-exact?Toy%20Story%2...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>GoldenEye (1995)</td>\n      <td>01-Jan-1995</td>\n      <td>NaN</td>\n      <td>http://us.imdb.com/M/title-exact?GoldenEye%20(...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>Four Rooms (1995)</td>\n      <td>01-Jan-1995</td>\n      <td>NaN</td>\n      <td>http://us.imdb.com/M/title-exact?Four%20Rooms%...</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>Get Shorty (1995)</td>\n      <td>01-Jan-1995</td>\n      <td>NaN</td>\n      <td>http://us.imdb.com/M/title-exact?Get%20Shorty%...</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>Copycat (1995)</td>\n      <td>01-Jan-1995</td>\n      <td>NaN</td>\n      <td>http://us.imdb.com/M/title-exact?Copycat%20(1995)</td>\n    </tr>\n  </tbody>\n</table>\n\n<div class=\"highlight\"><pre><span></span><code><span class=\"n\">movies</span><span class=\"o\">.</span><span class=\"n\">tail</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n</code></pre></div>\n\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>movie_id</th>\n      <th>title</th>\n      <th>release_date</th>\n      <th>video_release_date</th>\n      <th>imdb_url</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1679</th>\n      <td>1680</td>\n      <td>Sliding Doors (1998)</td>\n      <td>01-Jan-1998</td>\n      <td>NaN</td>\n      <td>http://us.imdb.com/Title?Sliding+Doors+(1998)</td>\n    </tr>\n    <tr>\n      <th>1680</th>\n      <td>1681</td>\n      <td>You So Crazy (1994)</td>\n      <td>01-Jan-1994</td>\n      <td>NaN</td>\n      <td>http://us.imdb.com/M/title-exact?You%20So%20Cr...</td>\n    </tr>\n    <tr>\n      <th>1681</th>\n      <td>1682</td>\n      <td>Scream of Stone (Schrei aus Stein) (1991)</td>\n      <td>08-Mar-1996</td>\n      <td>NaN</td>\n      <td>http://us.imdb.com/M/title-exact?Schrei%20aus%...</td>\n    </tr>\n  </tbody>\n</table>\n\n<p>Alternatively, Python's regular <a href=\"https://docs.python.org/release/2.3.5/whatsnew/section-slices.html\">slicing</a> syntax works as well.</p>\n<div class=\"highlight\"><pre><span></span><code><span class=\"n\">movies</span><span class=\"p\">[</span><span class=\"mi\">20</span><span class=\"p\">:</span><span class=\"mi\">22</span><span class=\"p\">]</span>\n</code></pre></div>\n\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>movie_id</th>\n      <th>title</th>\n      <th>release_date</th>\n      <th>video_release_date</th>\n      <th>imdb_url</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>20</th>\n      <td>21</td>\n      <td>Muppet Treasure Island (1996)</td>\n      <td>16-Feb-1996</td>\n      <td>NaN</td>\n      <td>http://us.imdb.com/M/title-exact?Muppet%20Trea...</td>\n    </tr>\n    <tr>\n      <th>21</th>\n      <td>22</td>\n      <td>Braveheart (1995)</td>\n      <td>16-Feb-1996</td>\n      <td>NaN</td>\n      <td>http://us.imdb.com/M/title-exact?Braveheart%20...</td>\n    </tr>\n  </tbody>\n</table>\n\n<h3>Selecting</h3>\n<p>You can think of a DataFrame as a group of Series that share an index (in this case the column headers). This makes it easy to select specific columns.</p>\n<p>Selecting a single column from the DataFrame will return a Series object.</p>\n<div class=\"highlight\"><pre><span></span><code><span class=\"n\">users</span><span class=\"p\">[</span><span class=\"s1\">&#39;occupation&#39;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">head</span><span class=\"p\">()</span>\n</code></pre></div>\n\n<div class=\"highlight\"><pre><span></span><code><span class=\"go\">0    technician</span>\n<span class=\"go\">1         other</span>\n<span class=\"go\">2        writer</span>\n<span class=\"go\">3    technician</span>\n<span class=\"go\">4         other</span>\n<span class=\"go\">Name: occupation, dtype: object</span>\n</code></pre></div>\n\n<p>To select multiple columns, simply pass a list of column names to the DataFrame, the output of which will be a DataFrame.</p>\n<div class=\"highlight\"><pre><span></span><code><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">users</span><span class=\"p\">[[</span><span class=\"s1\">&#39;age&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;zip_code&#39;</span><span class=\"p\">]]</span><span class=\"o\">.</span><span class=\"n\">head</span><span class=\"p\">())</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># can also store in a variable to use later</span>\n<span class=\"n\">columns_you_want</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;occupation&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;sex&#39;</span><span class=\"p\">]</span> \n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">users</span><span class=\"p\">[</span><span class=\"n\">columns_you_want</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">head</span><span class=\"p\">())</span>\n</code></pre></div>\n\n<div class=\"highlight\"><pre><span></span><code><span class=\"go\">   age zip_code</span>\n<span class=\"go\">0   24    85711</span>\n<span class=\"go\">1   53    94043</span>\n<span class=\"go\">2   23    32067</span>\n<span class=\"go\">3   24    43537</span>\n<span class=\"go\">4   33    15213</span>\n\n\n<span class=\"go\">   occupation sex</span>\n<span class=\"go\">0  technician   M</span>\n<span class=\"go\">1       other   F</span>\n<span class=\"go\">2      writer   M</span>\n<span class=\"go\">3  technician   M</span>\n<span class=\"go\">4       other   F</span>\n</code></pre></div>\n\n<p>Row selection can be done multiple ways, but doing so by an individual index or boolean indexing are typically easiest.</p>\n<div class=\"highlight\"><pre><span></span><code><span class=\"c1\"># users older than 25</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">users</span><span class=\"p\">[</span><span class=\"n\">users</span><span class=\"o\">.</span><span class=\"n\">age</span> <span class=\"o\">&gt;</span> <span class=\"mi\">25</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">head</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># users aged 40 AND male</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">users</span><span class=\"p\">[(</span><span class=\"n\">users</span><span class=\"o\">.</span><span class=\"n\">age</span> <span class=\"o\">==</span> <span class=\"mi\">40</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span> <span class=\"p\">(</span><span class=\"n\">users</span><span class=\"o\">.</span><span class=\"n\">sex</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;M&#39;</span><span class=\"p\">)]</span><span class=\"o\">.</span><span class=\"n\">head</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># users younger than 30 OR female</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">users</span><span class=\"p\">[(</span><span class=\"n\">users</span><span class=\"o\">.</span><span class=\"n\">sex</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;F&#39;</span><span class=\"p\">)</span> <span class=\"o\">|</span> <span class=\"p\">(</span><span class=\"n\">users</span><span class=\"o\">.</span><span class=\"n\">age</span> <span class=\"o\">&lt;</span> <span class=\"mi\">30</span><span class=\"p\">)]</span><span class=\"o\">.</span><span class=\"n\">head</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">))</span>\n</code></pre></div>\n\n<div class=\"highlight\"><pre><span></span><code><span class=\"go\">   user_id  age sex occupation zip_code</span>\n<span class=\"go\">1        2   53   F      other    94043</span>\n<span class=\"go\">4        5   33   F      other    15213</span>\n<span class=\"go\">5        6   42   M  executive    98101</span>\n\n\n<span class=\"go\">     user_id  age sex  occupation zip_code</span>\n<span class=\"go\">18        19   40   M   librarian    02138</span>\n<span class=\"go\">82        83   40   M       other    44133</span>\n<span class=\"go\">115      116   40   M  healthcare    97232</span>\n\n\n<span class=\"go\">   user_id  age sex  occupation zip_code</span>\n<span class=\"go\">0        1   24   M  technician    85711</span>\n<span class=\"go\">1        2   53   F       other    94043</span>\n<span class=\"go\">2        3   23   M      writer    32067</span>\n</code></pre></div>\n\n<p>Since our index is kind of meaningless right now, let's set it to the user_id using the <code>set_index</code> method. By default, <code>set_index</code> returns a new DataFrame, so you'll have to specify if you'd like the changes to occur in place.</p>\n<p>This has confused me in the past, so look carefully at the code and output below.</p>\n<div class=\"highlight\"><pre><span></span><code><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">users</span><span class=\"o\">.</span><span class=\"n\">set_index</span><span class=\"p\">(</span><span class=\"s1\">&#39;user_id&#39;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">head</span><span class=\"p\">())</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">users</span><span class=\"o\">.</span><span class=\"n\">head</span><span class=\"p\">())</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">^^^ I didn&#39;t actually change the DataFrame. ^^^</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n\n<span class=\"n\">with_new_index</span> <span class=\"o\">=</span> <span class=\"n\">users</span><span class=\"o\">.</span><span class=\"n\">set_index</span><span class=\"p\">(</span><span class=\"s1\">&#39;user_id&#39;</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">with_new_index</span><span class=\"o\">.</span><span class=\"n\">head</span><span class=\"p\">())</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">^^^ set_index actually returns a new DataFrame. ^^^</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n</code></pre></div>\n\n<div class=\"highlight\"><pre><span></span><code><span class=\"go\">         age sex  occupation zip_code</span>\n<span class=\"go\">user_id                              </span>\n<span class=\"go\">1         24   M  technician    85711</span>\n<span class=\"go\">2         53   F       other    94043</span>\n<span class=\"go\">3         23   M      writer    32067</span>\n<span class=\"go\">4         24   M  technician    43537</span>\n<span class=\"go\">5         33   F       other    15213</span>\n\n\n<span class=\"go\">   user_id  age sex  occupation zip_code</span>\n<span class=\"go\">0        1   24   M  technician    85711</span>\n<span class=\"go\">1        2   53   F       other    94043</span>\n<span class=\"go\">2        3   23   M      writer    32067</span>\n<span class=\"go\">3        4   24   M  technician    43537</span>\n<span class=\"go\">4        5   33   F       other    15213</span>\n\n<span class=\"go\">^^^ I didn&#39;t actually change the DataFrame. ^^^</span>\n\n<span class=\"go\">         age sex  occupation zip_code</span>\n<span class=\"go\">user_id                              </span>\n<span class=\"go\">1         24   M  technician    85711</span>\n<span class=\"go\">2         53   F       other    94043</span>\n<span class=\"go\">3         23   M      writer    32067</span>\n<span class=\"go\">4         24   M  technician    43537</span>\n<span class=\"go\">5         33   F       other    15213</span>\n\n<span class=\"go\">^^^ set_index actually returns a new DataFrame. ^^^</span>\n</code></pre></div>\n\n<p>If you want to modify your existing DataFrame, use the <code>inplace</code> parameter. Most DataFrame methods return new a DataFrames, while offering an <code>inplace</code> parameter. Note that the <code>inplace</code> version might not actually be any more efficient (in terms of speed or memory usage) than the regular version.</p>\n<div class=\"highlight\"><pre><span></span><code><span class=\"n\">users</span><span class=\"o\">.</span><span class=\"n\">set_index</span><span class=\"p\">(</span><span class=\"s1\">&#39;user_id&#39;</span><span class=\"p\">,</span> <span class=\"n\">inplace</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">users</span><span class=\"o\">.</span><span class=\"n\">head</span><span class=\"p\">()</span>\n</code></pre></div>\n\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>age</th>\n      <th>sex</th>\n      <th>occupation</th>\n      <th>zip_code</th>\n    </tr>\n    <tr>\n      <th>user_id</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>24</td>\n      <td>M</td>\n      <td>technician</td>\n      <td>85711</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>53</td>\n      <td>F</td>\n      <td>other</td>\n      <td>94043</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>23</td>\n      <td>M</td>\n      <td>writer</td>\n      <td>32067</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>24</td>\n      <td>M</td>\n      <td>technician</td>\n      <td>43537</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>33</td>\n      <td>F</td>\n      <td>other</td>\n      <td>15213</td>\n    </tr>\n  </tbody>\n</table>\n\n<p>Notice that we've lost the default pandas 0-based index and moved the user_id into its place. We can select rows by position using the <code>iloc</code> method.</p>\n<div class=\"highlight\"><pre><span></span><code><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">users</span><span class=\"o\">.</span><span class=\"n\">iloc</span><span class=\"p\">[</span><span class=\"mi\">99</span><span class=\"p\">])</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">users</span><span class=\"o\">.</span><span class=\"n\">iloc</span><span class=\"p\">[[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"mi\">300</span><span class=\"p\">]])</span>\n</code></pre></div>\n\n<div class=\"highlight\"><pre><span></span><code><span class=\"go\">age                  36</span>\n<span class=\"go\">sex                   M</span>\n<span class=\"go\">occupation    executive</span>\n<span class=\"go\">zip_code          90254</span>\n<span class=\"go\">Name: 100, dtype: object</span>\n\n\n<span class=\"go\">         age sex occupation zip_code</span>\n<span class=\"go\">user_id                             </span>\n<span class=\"go\">2         53   F      other    94043</span>\n<span class=\"go\">51        28   M   educator    16509</span>\n<span class=\"go\">301       24   M    student    55439</span>\n</code></pre></div>\n\n<p>And we can select rows by label with the <code>loc</code> method.</p>\n<div class=\"highlight\"><pre><span></span><code><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">users</span><span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"mi\">100</span><span class=\"p\">])</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">users</span><span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">51</span><span class=\"p\">,</span> <span class=\"mi\">301</span><span class=\"p\">]])</span>\n</code></pre></div>\n\n<div class=\"highlight\"><pre><span></span><code><span class=\"go\">age                  36</span>\n<span class=\"go\">sex                   M</span>\n<span class=\"go\">occupation    executive</span>\n<span class=\"go\">zip_code          90254</span>\n<span class=\"go\">Name: 100, dtype: object</span>\n\n\n<span class=\"go\">         age sex occupation zip_code</span>\n<span class=\"go\">user_id                             </span>\n<span class=\"go\">2         53   F      other    94043</span>\n<span class=\"go\">51        28   M   educator    16509</span>\n<span class=\"go\">301       24   M    student    55439</span>\n</code></pre></div>\n\n<p>If we realize later that we liked the old pandas default index, we can just <code>reset_index</code>. The same rules for <code>inplace</code> apply.</p>\n<div class=\"highlight\"><pre><span></span><code><span class=\"n\">users</span><span class=\"o\">.</span><span class=\"n\">reset_index</span><span class=\"p\">(</span><span class=\"n\">inplace</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">users</span><span class=\"o\">.</span><span class=\"n\">head</span><span class=\"p\">()</span>\n</code></pre></div>\n\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>user_id</th>\n      <th>age</th>\n      <th>sex</th>\n      <th>occupation</th>\n      <th>zip_code</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>24</td>\n      <td>M</td>\n      <td>technician</td>\n      <td>85711</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>53</td>\n      <td>F</td>\n      <td>other</td>\n      <td>94043</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>23</td>\n      <td>M</td>\n      <td>writer</td>\n      <td>32067</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>24</td>\n      <td>M</td>\n      <td>technician</td>\n      <td>43537</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>33</td>\n      <td>F</td>\n      <td>other</td>\n      <td>15213</td>\n    </tr>\n  </tbody>\n</table>\n\n<p>The simplified rules of indexing are\n- Use <code>loc</code> for label-based indexing\n- Use <code>iloc</code> for positional indexing\nI've found that I can usually get by with boolean indexing, <code>loc</code> and <code>iloc</code>, but pandas has a whole host of <a href=\"https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html\">other ways to do selection</a>.</p>\n<h3>Joining</h3>\n<p>Throughout an analysis, we'll often need to merge/join datasets as data is typically stored in a <a href=\"https://en.wikipedia.org/wiki/Relational_database\">relational</a> manner.</p>\n<p>Our MovieLens data is a good example of this - a rating requires both a user and a movie, and the datasets are linked together by a key - in this case, the user_id and movie_id. It's possible for a user to be associated with zero or many ratings and movies. Likewise, a movie can be rated zero or many times, by a number of different users.</p>\n<p>Like SQL's JOIN clause, <code>pandas.merge</code> allows two DataFrames to be joined on one or more keys. The function provides a series of parameters (<code>on, left_on, right_on, left_index, right_index</code>) allowing you to specify the columns or indexes on which to join.</p>\n<p>By default, <code>pandas.merge</code> operates as an inner join, which can be changed using the <code>how</code> parameter.</p>\n<p>From the function's docstring:</p>\n<blockquote>\n<p>how : {'left', 'right', 'outer', 'inner'}, default 'inner' \n- left: use only keys from left frame (SQL: left outer join) \n- right: use only keys from right frame (SQL: right outer join)\n- outer: use union of keys from both frames (SQL: full outer join)\n- inner: use intersection of keys from both frames (SQL: inner join)</p>\n</blockquote>\n<p>Below are some examples of what each look like.</p>\n<div class=\"highlight\"><pre><span></span><code><span class=\"n\">left_frame</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">({</span><span class=\"s1\">&#39;key&#39;</span><span class=\"p\">:</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">),</span> \n                           <span class=\"s1\">&#39;left_value&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;d&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;e&#39;</span><span class=\"p\">]})</span>\n<span class=\"n\">right_frame</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">({</span><span class=\"s1\">&#39;key&#39;</span><span class=\"p\">:</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">),</span> \n                           <span class=\"s1\">&#39;right_value&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">&#39;f&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;g&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;h&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;i&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;j&#39;</span><span class=\"p\">]})</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">left_frame</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">right_frame</span><span class=\"p\">)</span>\n</code></pre></div>\n\n<div class=\"highlight\"><pre><span></span><code><span class=\"go\">   key left_value</span>\n<span class=\"go\">0    0          a</span>\n<span class=\"go\">1    1          b</span>\n<span class=\"go\">2    2          c</span>\n<span class=\"go\">3    3          d</span>\n<span class=\"go\">4    4          e</span>\n\n\n<span class=\"go\">   key right_value</span>\n<span class=\"go\">0    2           f</span>\n<span class=\"go\">1    3           g</span>\n<span class=\"go\">2    4           h</span>\n<span class=\"go\">3    5           i</span>\n<span class=\"go\">4    6           j</span>\n</code></pre></div>\n\n<h4>inner join (default)</h4>\n<div class=\"highlight\"><pre><span></span><code><span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">merge</span><span class=\"p\">(</span><span class=\"n\">left_frame</span><span class=\"p\">,</span> <span class=\"n\">right_frame</span><span class=\"p\">,</span> <span class=\"n\">on</span><span class=\"o\">=</span><span class=\"s1\">&#39;key&#39;</span><span class=\"p\">,</span> <span class=\"n\">how</span><span class=\"o\">=</span><span class=\"s1\">&#39;inner&#39;</span><span class=\"p\">)</span>\n</code></pre></div>\n\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>key</th>\n      <th>left_value</th>\n      <th>right_value</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2</td>\n      <td>c</td>\n      <td>f</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>3</td>\n      <td>d</td>\n      <td>g</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>4</td>\n      <td>e</td>\n      <td>h</td>\n    </tr>\n  </tbody>\n</table>\n\n<p>We lose values from both frames since certain keys do not match up. The SQL equivalent is:</p>\n<div class=\"highlight\"><pre><span></span><code><span class=\"k\">SELECT</span><span class=\"w\"> </span><span class=\"n\">left_frame</span><span class=\"p\">.</span><span class=\"k\">key</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">left_frame</span><span class=\"p\">.</span><span class=\"n\">left_value</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">right_frame</span><span class=\"p\">.</span><span class=\"n\">right_value</span><span class=\"w\"></span>\n<span class=\"k\">FROM</span><span class=\"w\"> </span><span class=\"n\">left_frame</span><span class=\"w\"></span>\n<span class=\"k\">INNER</span><span class=\"w\"> </span><span class=\"k\">JOIN</span><span class=\"w\"> </span><span class=\"n\">right_frame</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">ON</span><span class=\"w\"> </span><span class=\"n\">left_frame</span><span class=\"p\">.</span><span class=\"k\">key</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">right_frame</span><span class=\"p\">.</span><span class=\"k\">key</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n\n<p>Had our key columns not been named the same, we could have used the <code>left_on</code> and <code>right_on</code> parameters to specify which fields to join from each frame.</p>\n<div class=\"highlight\"><pre><span></span><code><span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">merge</span><span class=\"p\">(</span><span class=\"n\">left_frame</span><span class=\"p\">,</span> <span class=\"n\">right_frame</span><span class=\"p\">,</span> <span class=\"n\">left_on</span><span class=\"o\">=</span><span class=\"s1\">&#39;left_key&#39;</span><span class=\"p\">,</span> <span class=\"n\">right_on</span><span class=\"o\">=</span><span class=\"s1\">&#39;right_key&#39;</span><span class=\"p\">)</span>\n</code></pre></div>\n\n<p>Alternatively, if our keys were indexes, we could use the <code>left_index</code> or <code>right_index</code> parameters, which accept a True/False value. You can mix and match columns and indexes like so:</p>\n<div class=\"highlight\"><pre><span></span><code><span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">merge</span><span class=\"p\">(</span><span class=\"n\">left_frame</span><span class=\"p\">,</span> <span class=\"n\">right_frame</span><span class=\"p\">,</span> <span class=\"n\">left_on</span><span class=\"o\">=</span><span class=\"s1\">&#39;key&#39;</span><span class=\"p\">,</span> <span class=\"n\">right_index</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</code></pre></div>\n\n<h4>left outer join</h4>\n<div class=\"highlight\"><pre><span></span><code><span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">merge</span><span class=\"p\">(</span><span class=\"n\">left_frame</span><span class=\"p\">,</span> <span class=\"n\">right_frame</span><span class=\"p\">,</span> <span class=\"n\">on</span><span class=\"o\">=</span><span class=\"s1\">&#39;key&#39;</span><span class=\"p\">,</span> <span class=\"n\">how</span><span class=\"o\">=</span><span class=\"s1\">&#39;left&#39;</span><span class=\"p\">)</span>\n</code></pre></div>\n\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>key</th>\n      <th>left_value</th>\n      <th>right_value</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>a</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>b</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>c</td>\n      <td>f</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3</td>\n      <td>d</td>\n      <td>g</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>4</td>\n      <td>e</td>\n      <td>h</td>\n    </tr>\n  </tbody>\n</table>\n\n<p>We keep everything from the left frame, pulling in the value from the right frame where the keys match up. The right_value is NULL where keys do not match (NaN).</p>\n<p>SQL Equivalent:</p>\n<div class=\"highlight\"><pre><span></span><code><span class=\"k\">SELECT</span><span class=\"w\"> </span><span class=\"n\">left_frame</span><span class=\"p\">.</span><span class=\"k\">key</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">left_frame</span><span class=\"p\">.</span><span class=\"n\">left_value</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">right_frame</span><span class=\"p\">.</span><span class=\"n\">right_value</span><span class=\"w\"></span>\n<span class=\"k\">FROM</span><span class=\"w\"> </span><span class=\"n\">left_frame</span><span class=\"w\"></span>\n<span class=\"k\">LEFT</span><span class=\"w\"> </span><span class=\"k\">JOIN</span><span class=\"w\"> </span><span class=\"n\">right_frame</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">ON</span><span class=\"w\"> </span><span class=\"n\">left_frame</span><span class=\"p\">.</span><span class=\"k\">key</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">right_frame</span><span class=\"p\">.</span><span class=\"k\">key</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n\n<h4>right outer join</h4>\n<div class=\"highlight\"><pre><span></span><code><span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">merge</span><span class=\"p\">(</span><span class=\"n\">left_frame</span><span class=\"p\">,</span> <span class=\"n\">right_frame</span><span class=\"p\">,</span> <span class=\"n\">on</span><span class=\"o\">=</span><span class=\"s1\">&#39;key&#39;</span><span class=\"p\">,</span> <span class=\"n\">how</span><span class=\"o\">=</span><span class=\"s1\">&#39;right&#39;</span><span class=\"p\">)</span>\n</code></pre></div>\n\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>key</th>\n      <th>left_value</th>\n      <th>right_value</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2</td>\n      <td>c</td>\n      <td>f</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>3</td>\n      <td>d</td>\n      <td>g</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>4</td>\n      <td>e</td>\n      <td>h</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>5</td>\n      <td>NaN</td>\n      <td>i</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>6</td>\n      <td>NaN</td>\n      <td>j</td>\n    </tr>\n  </tbody>\n</table>\n\n<p>This time we've kept everything from the right frame with the left_value being NULL where the right frame's key did not find a match.</p>\n<p>SQL Equivalent:</p>\n<div class=\"highlight\"><pre><span></span><code><span class=\"k\">SELECT</span><span class=\"w\"> </span><span class=\"n\">right_frame</span><span class=\"p\">.</span><span class=\"k\">key</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">left_frame</span><span class=\"p\">.</span><span class=\"n\">left_value</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">right_frame</span><span class=\"p\">.</span><span class=\"n\">right_value</span><span class=\"w\"></span>\n<span class=\"k\">FROM</span><span class=\"w\"> </span><span class=\"n\">left_frame</span><span class=\"w\"></span>\n<span class=\"k\">RIGHT</span><span class=\"w\"> </span><span class=\"k\">JOIN</span><span class=\"w\"> </span><span class=\"n\">right_frame</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">ON</span><span class=\"w\"> </span><span class=\"n\">left_frame</span><span class=\"p\">.</span><span class=\"k\">key</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">right_frame</span><span class=\"p\">.</span><span class=\"k\">key</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n\n<h4>full outer join</h4>\n<div class=\"highlight\"><pre><span></span><code><span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">merge</span><span class=\"p\">(</span><span class=\"n\">left_frame</span><span class=\"p\">,</span> <span class=\"n\">right_frame</span><span class=\"p\">,</span> <span class=\"n\">on</span><span class=\"o\">=</span><span class=\"s1\">&#39;key&#39;</span><span class=\"p\">,</span> <span class=\"n\">how</span><span class=\"o\">=</span><span class=\"s1\">&#39;outer&#39;</span><span class=\"p\">)</span>\n</code></pre></div>\n\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>key</th>\n      <th>left_value</th>\n      <th>right_value</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>a</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>b</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>c</td>\n      <td>f</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3</td>\n      <td>d</td>\n      <td>g</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>4</td>\n      <td>e</td>\n      <td>h</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>5</td>\n      <td>NaN</td>\n      <td>i</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>6</td>\n      <td>NaN</td>\n      <td>j</td>\n    </tr>\n  </tbody>\n</table>\n\n<p>We've kept everything from both frames, regardless of whether or not there was a match on both sides. Where there was not a match, the values corresponding to that key are NULL.</p>\n<p>SQL Equivalent (though some databases don't allow FULL JOINs (e.g. MySQL)):</p>\n<div class=\"highlight\"><pre><span></span><code><span class=\"k\">SELECT</span><span class=\"w\"> </span><span class=\"n\">IFNULL</span><span class=\"p\">(</span><span class=\"n\">left_frame</span><span class=\"p\">.</span><span class=\"k\">key</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">right_frame</span><span class=\"p\">.</span><span class=\"k\">key</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">key</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">left_frame</span><span class=\"p\">.</span><span class=\"n\">left_value</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">right_frame</span><span class=\"p\">.</span><span class=\"n\">right_value</span><span class=\"w\"></span>\n<span class=\"k\">FROM</span><span class=\"w\"> </span><span class=\"n\">left_frame</span><span class=\"w\"></span>\n<span class=\"k\">FULL</span><span class=\"w\"> </span><span class=\"k\">OUTER</span><span class=\"w\"> </span><span class=\"k\">JOIN</span><span class=\"w\"> </span><span class=\"n\">right_frame</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">ON</span><span class=\"w\"> </span><span class=\"n\">left_frame</span><span class=\"p\">.</span><span class=\"k\">key</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">right_frame</span><span class=\"p\">.</span><span class=\"k\">key</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n\n<h3>Combining</h3>\n<p>pandas also provides a way to combine DataFrames along an axis - <code>pandas.concat</code>. While the function is equivalent to SQL's UNION clause, there's a lot more that can be done with it.</p>\n<p><code>pandas.concat</code> takes a list of Series or DataFrames and returns a Series or DataFrame of the concatenated objects. Note that because the function takes list, you can combine many objects at once.</p>\n<div class=\"highlight\"><pre><span></span><code><span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">concat</span><span class=\"p\">([</span><span class=\"n\">left_frame</span><span class=\"p\">,</span> <span class=\"n\">right_frame</span><span class=\"p\">])</span>\n</code></pre></div>\n\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>key</th>\n      <th>left_value</th>\n      <th>right_value</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>a</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>b</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>c</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3</td>\n      <td>d</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>4</td>\n      <td>e</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>0</th>\n      <td>2</td>\n      <td>NaN</td>\n      <td>f</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>3</td>\n      <td>NaN</td>\n      <td>g</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>4</td>\n      <td>NaN</td>\n      <td>h</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>5</td>\n      <td>NaN</td>\n      <td>i</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>6</td>\n      <td>NaN</td>\n      <td>j</td>\n    </tr>\n  </tbody>\n</table>\n\n<p>By default, the function will vertically append the objects to one another, combining columns with the same name. We can see above that values not matching up will be NULL.</p>\n<p>Additionally, objects can be concatentated side-by-side using the function's axis parameter.</p>\n<div class=\"highlight\"><pre><span></span><code><span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">concat</span><span class=\"p\">([</span><span class=\"n\">left_frame</span><span class=\"p\">,</span> <span class=\"n\">right_frame</span><span class=\"p\">],</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n</code></pre></div>\n\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>key</th>\n      <th>left_value</th>\n      <th>key</th>\n      <th>right_value</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>a</td>\n      <td>2</td>\n      <td>f</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>b</td>\n      <td>3</td>\n      <td>g</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>c</td>\n      <td>4</td>\n      <td>h</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3</td>\n      <td>d</td>\n      <td>5</td>\n      <td>i</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>4</td>\n      <td>e</td>\n      <td>6</td>\n      <td>j</td>\n    </tr>\n  </tbody>\n</table>\n\n<p><code>pandas.concat</code> can be used in a variety of ways; however, I've typically only used it to combine Series/DataFrames into one unified object. The <a href=\"https://pandas.pydata.org/pandas-docs/stable/user_guide/merging.html#concatenating-objects\">documentation</a> has some examples on the ways it can be used.</p>\n<h3>Grouping</h3>\n<p>Grouping in pandas took some time for me to grasp, but it's pretty awesome once it clicks.</p>\n<p>pandas <code>groupby</code> method draws largely from the <a href=\"https://vita.had.co.nz/papers/plyr.html\">split-apply-combine strategy for data analysis</a>. If you're not familiar with this methodology, I highly suggest you read up on it. It does a great job of illustrating how to properly think through a data problem, which I feel is more important than any technical skill a data analyst/scientist can possess.</p>\n<p>When approaching a data analysis problem, you'll often break it apart into manageable pieces, perform some operations on each of the pieces, and then put everything back together again (this is the gist split-apply-combine strategy). pandas <code>groupby</code> is great for these problems (R users should check out the <a href=\"http://plyr.had.co.nz/\">plyr</a> and <a href=\"https://github.com/tidyverse/dplyr\">dplyr</a> packages).</p>\n<p>If you've ever used SQL's GROUP BY or an Excel Pivot Table, you've thought with this mindset, probably without realizing it.</p>\n<p>Assume we have a DataFrame and want to get the average for each group - visually, the split-apply-combine method looks like this:\n<img src=\"http://i.imgur.com/yjNkiwL.png\" alt=\"Source: Gratuitously borrowed from <a href=\"http://courses.had.co.nz/12-oscon/\">Hadley Wickham's Data Science in R slides</a>\"></p>\n<p>The City of Chicago is kind enough to publish all city employee salaries to its open data portal. Let's go through some basic <code>groupby</code> examples using this data.</p>\n<div class=\"highlight\"><pre><span></span><code>!head -n <span class=\"m\">3</span> city-of-chicago-salaries.csv\n</code></pre></div>\n\n<div class=\"highlight\"><pre><span></span><code><span class=\"go\">Name,Position Title,Department,Employee Annual Salary</span>\n<span class=\"go\">&quot;AARON,  ELVIA J&quot;,WATER RATE TAKER,WATER MGMNT,$85512.00</span>\n<span class=\"go\">&quot;AARON,  JEFFERY M&quot;,POLICE OFFICER,POLICE,$75372.00</span>\n</code></pre></div>\n\n<p>Since the data contains a dollar sign for each salary, python will treat the field as a series of strings. We can use the <code>converters</code> parameter to change this when reading in the file.</p>\n<blockquote>\n<p>converters : dict. optional\n- Dict of functions for converting values in certain columns. Keys can either be integers or column labels</p>\n</blockquote>\n<div class=\"highlight\"><pre><span></span><code><span class=\"n\">headers</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;name&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;title&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;department&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;salary&#39;</span><span class=\"p\">]</span>\n<span class=\"n\">chicago</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">read_csv</span><span class=\"p\">(</span><span class=\"s1\">&#39;city-of-chicago-salaries.csv&#39;</span><span class=\"p\">,</span> \n                      <span class=\"n\">header</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n                      <span class=\"n\">names</span><span class=\"o\">=</span><span class=\"n\">headers</span><span class=\"p\">,</span>\n                      <span class=\"n\">converters</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">&#39;salary&#39;</span><span class=\"p\">:</span> <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s1\">&#39;$&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;&#39;</span><span class=\"p\">))})</span>\n<span class=\"n\">chicago</span><span class=\"o\">.</span><span class=\"n\">head</span><span class=\"p\">()</span>\n</code></pre></div>\n\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>name</th>\n      <th>title</th>\n      <th>department</th>\n      <th>salary</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>AARON,  ELVIA J</td>\n      <td>WATER RATE TAKER</td>\n      <td>WATER MGMNT</td>\n      <td>85512</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>AARON,  JEFFERY M</td>\n      <td>POLICE OFFICER</td>\n      <td>POLICE</td>\n      <td>75372</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>AARON,  KIMBERLEI R</td>\n      <td>CHIEF CONTRACT EXPEDITER</td>\n      <td>GENERAL SERVICES</td>\n      <td>80916</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>ABAD JR,  VICENTE M</td>\n      <td>CIVIL ENGINEER IV</td>\n      <td>WATER MGMNT</td>\n      <td>99648</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>ABBATACOLA,  ROBERT J</td>\n      <td>ELECTRICAL MECHANIC</td>\n      <td>AVIATION</td>\n      <td>89440</td>\n    </tr>\n  </tbody>\n</table>\n\n<p>pandas <code>groupby</code> returns a DataFrameGroupBy object which has a variety of methods, many of which are similar to standard SQL aggregate functions.</p>\n<div class=\"highlight\"><pre><span></span><code><span class=\"n\">by_dept</span> <span class=\"o\">=</span> <span class=\"n\">chicago</span><span class=\"o\">.</span><span class=\"n\">groupby</span><span class=\"p\">(</span><span class=\"s1\">&#39;department&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">by_dept</span>\n</code></pre></div>\n\n<div class=\"highlight\"><pre><span></span><code><span class=\"go\">&lt;pandas.core.groupby.DataFrameGroupBy object at 0x1128ca1d0&gt;</span>\n</code></pre></div>\n\n<p>Calling <code>count</code> returns the total number of NOT NULL values within each column. If we were interested in the total number of records in each group, we could use <code>size</code>.</p>\n<div class=\"highlight\"><pre><span></span><code><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">by_dept</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">head</span><span class=\"p\">())</span> <span class=\"c1\"># NOT NULL records within each column</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">by_dept</span><span class=\"o\">.</span><span class=\"n\">size</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">tail</span><span class=\"p\">())</span> <span class=\"c1\"># total records for each department</span>\n</code></pre></div>\n\n<div class=\"highlight\"><pre><span></span><code><span class=\"go\">                   name  title  salary</span>\n<span class=\"go\">department                            </span>\n<span class=\"go\">ADMIN HEARNG         42     42      42</span>\n<span class=\"go\">ANIMAL CONTRL        61     61      61</span>\n<span class=\"go\">AVIATION           1218   1218    1218</span>\n<span class=\"go\">BOARD OF ELECTION   110    110     110</span>\n<span class=\"go\">BOARD OF ETHICS       9      9       9</span>\n\n\n<span class=\"go\">department</span>\n<span class=\"go\">PUBLIC LIBRARY     926</span>\n<span class=\"go\">STREETS &amp; SAN     2070</span>\n<span class=\"go\">TRANSPORTN        1168</span>\n<span class=\"go\">TREASURER           25</span>\n<span class=\"go\">WATER MGMNT       1857</span>\n<span class=\"go\">dtype: int64</span>\n</code></pre></div>\n\n<p>Summation can be done via <code>sum</code>, averaging by <code>mean</code>, etc. (if it's a SQL function, chances are it exists in pandas). Oh, and there's median too, something not available in most databases.</p>\n<div class=\"highlight\"><pre><span></span><code><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">by_dept</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">()[</span><span class=\"mi\">20</span><span class=\"p\">:</span><span class=\"mi\">25</span><span class=\"p\">])</span> <span class=\"c1\"># total salaries of each department</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">by_dept</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">()[</span><span class=\"mi\">20</span><span class=\"p\">:</span><span class=\"mi\">25</span><span class=\"p\">])</span> <span class=\"c1\"># average salary of each department</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">by_dept</span><span class=\"o\">.</span><span class=\"n\">median</span><span class=\"p\">()[</span><span class=\"mi\">20</span><span class=\"p\">:</span><span class=\"mi\">25</span><span class=\"p\">])</span> <span class=\"c1\"># take that, RDBMS!</span>\n</code></pre></div>\n\n<div class=\"highlight\"><pre><span></span><code><span class=\"go\">                       salary</span>\n<span class=\"go\">department                   </span>\n<span class=\"go\">HUMAN RESOURCES     4850928.0</span>\n<span class=\"go\">INSPECTOR GEN       4035150.0</span>\n<span class=\"go\">IPRA                7006128.0</span>\n<span class=\"go\">LAW                31883920.2</span>\n<span class=\"go\">LICENSE APPL COMM     65436.0</span>\n\n\n<span class=\"go\">                         salary</span>\n<span class=\"go\">department                     </span>\n<span class=\"go\">HUMAN RESOURCES    71337.176471</span>\n<span class=\"go\">INSPECTOR GEN      80703.000000</span>\n<span class=\"go\">IPRA               82425.035294</span>\n<span class=\"go\">LAW                70853.156000</span>\n<span class=\"go\">LICENSE APPL COMM  65436.000000</span>\n\n\n<span class=\"go\">                   salary</span>\n<span class=\"go\">department               </span>\n<span class=\"go\">HUMAN RESOURCES     68496</span>\n<span class=\"go\">INSPECTOR GEN       76116</span>\n<span class=\"go\">IPRA                82524</span>\n<span class=\"go\">LAW                 66492</span>\n<span class=\"go\">LICENSE APPL COMM   65436</span>\n</code></pre></div>\n\n<p>Operations can also be done on an individual Series within a grouped object. Say we were curious about the five departments with the most distinct titles - the pandas equivalent to:</p>\n<div class=\"highlight\"><pre><span></span><code><span class=\"k\">SELECT</span><span class=\"w\"> </span><span class=\"n\">department</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">COUNT</span><span class=\"p\">(</span><span class=\"k\">DISTINCT</span><span class=\"w\"> </span><span class=\"n\">title</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"k\">FROM</span><span class=\"w\"> </span><span class=\"n\">chicago</span><span class=\"w\"></span>\n<span class=\"k\">GROUP</span><span class=\"w\"> </span><span class=\"k\">BY</span><span class=\"w\"> </span><span class=\"n\">department</span><span class=\"w\"></span>\n<span class=\"k\">ORDER</span><span class=\"w\"> </span><span class=\"k\">BY</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"k\">DESC</span><span class=\"w\"></span>\n<span class=\"k\">LIMIT</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n\n<p>pandas is a lot less verbose here ...</p>\n<div class=\"highlight\"><pre><span></span><code><span class=\"n\">by_dept</span><span class=\"o\">.</span><span class=\"n\">title</span><span class=\"o\">.</span><span class=\"n\">nunique</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">sort_values</span><span class=\"p\">(</span><span class=\"n\">ascending</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)[:</span><span class=\"mi\">5</span><span class=\"p\">]</span>\n</code></pre></div>\n\n<div class=\"highlight\"><pre><span></span><code><span class=\"go\">department</span>\n<span class=\"go\">WATER MGMNT    153</span>\n<span class=\"go\">TRANSPORTN     150</span>\n<span class=\"go\">POLICE         130</span>\n<span class=\"go\">AVIATION       125</span>\n<span class=\"go\">HEALTH         118</span>\n<span class=\"go\">Name: title, dtype: int64</span>\n</code></pre></div>\n\n<h3>split-apply-combine</h3>\n<p>The real power of <code>groupby</code> comes from it's split-apply-combine ability.</p>\n<p>What if we wanted to see the highest paid employee within each department. Given our current dataset, we'd have to do something like this in SQL:</p>\n<div class=\"highlight\"><pre><span></span><code><span class=\"k\">SELECT</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"></span>\n<span class=\"k\">FROM</span><span class=\"w\"> </span><span class=\"n\">chicago</span><span class=\"w\"> </span><span class=\"k\">c</span><span class=\"w\"></span>\n<span class=\"k\">INNER</span><span class=\"w\"> </span><span class=\"k\">JOIN</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">SELECT</span><span class=\"w\"> </span><span class=\"n\">department</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">max</span><span class=\"p\">(</span><span class=\"n\">salary</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">max_salary</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">FROM</span><span class=\"w\"> </span><span class=\"n\">chicago</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">GROUP</span><span class=\"w\"> </span><span class=\"k\">BY</span><span class=\"w\"> </span><span class=\"n\">department</span><span class=\"w\"></span>\n<span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"></span>\n<span class=\"k\">ON</span><span class=\"w\"> </span><span class=\"k\">c</span><span class=\"p\">.</span><span class=\"n\">department</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"p\">.</span><span class=\"n\">department</span><span class=\"w\"></span>\n<span class=\"k\">AND</span><span class=\"w\"> </span><span class=\"k\">c</span><span class=\"p\">.</span><span class=\"n\">salary</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"p\">.</span><span class=\"n\">max_salary</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n\n<p>This would give you the highest paid person in each department, but it would return multiple if there were many equally high paid people within a department.</p>\n<p>Alternatively, you could alter the table, add a column, and then write an update statement to populate that column. However, that's not always an option.</p>\n<p><em>Note: This would be a lot easier in PostgreSQL, T-SQL, and possibly Oracle due to the existence of partition/window/analytic functions. I've chosen to use MySQL syntax throughout this tutorial because of it's popularity. Unfortunately, MySQL doesn't have similar functions.</em></p>\n<p>Using <code>groupby</code> we can define a function (which we'll call <code>ranker</code>) that will label each record from 1 to N, where N is the number of employees within the department. We can then call <code>apply</code> to, well, apply that function to each group (in this case, each department).</p>\n<div class=\"highlight\"><pre><span></span><code><span class=\"k\">def</span> <span class=\"nf\">ranker</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Assigns a rank to each employee based on salary, with 1 being the highest paid.</span>\n<span class=\"sd\">    Assumes the data is DESC sorted.&quot;&quot;&quot;</span>\n    <span class=\"n\">df</span><span class=\"p\">[</span><span class=\"s1\">&#39;dept_rank&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">arange</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">))</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n    <span class=\"k\">return</span> <span class=\"n\">df</span>\n\n<span class=\"n\">chicago</span><span class=\"o\">.</span><span class=\"n\">sort_values</span><span class=\"p\">(</span><span class=\"s1\">&#39;salary&#39;</span><span class=\"p\">,</span> <span class=\"n\">ascending</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">inplace</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">chicago</span> <span class=\"o\">=</span> <span class=\"n\">chicago</span><span class=\"o\">.</span><span class=\"n\">groupby</span><span class=\"p\">(</span><span class=\"s1\">&#39;department&#39;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">apply</span><span class=\"p\">(</span><span class=\"n\">ranker</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">chicago</span><span class=\"p\">[</span><span class=\"n\">chicago</span><span class=\"o\">.</span><span class=\"n\">dept_rank</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">head</span><span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">))</span>\n</code></pre></div>\n\n<div class=\"highlight\"><pre><span></span><code><span class=\"go\">                         name                     title      department  \\</span>\n<span class=\"go\">18039     MC CARTHY,  GARRY F  SUPERINTENDENT OF POLICE          POLICE   </span>\n<span class=\"go\">8004           EMANUEL,  RAHM                     MAYOR  MAYOR&#39;S OFFICE   </span>\n<span class=\"go\">25588       SANTIAGO,  JOSE A         FIRE COMMISSIONER            FIRE   </span>\n<span class=\"go\">763    ANDOLINO,  ROSEMARIE S  COMMISSIONER OF AVIATION        AVIATION   </span>\n<span class=\"go\">4697     CHOUCAIR,  BECHARA N    COMMISSIONER OF HEALTH          HEALTH   </span>\n<span class=\"go\">21971      PATTON,  STEPHEN R       CORPORATION COUNSEL             LAW   </span>\n<span class=\"go\">12635      HOLT,  ALEXANDRA D                BUDGET DIR   BUDGET &amp; MGMT   </span>\n\n<span class=\"go\">       salary  dept_rank  </span>\n<span class=\"go\">18039  260004          1  </span>\n<span class=\"go\">8004   216210          1  </span>\n<span class=\"go\">25588  202728          1  </span>\n<span class=\"go\">763    186576          1  </span>\n<span class=\"go\">4697   177156          1  </span>\n<span class=\"go\">21971  173664          1  </span>\n<span class=\"go\">12635  169992          1  </span>\n</code></pre></div>\n\n<p><em>Move onto part three, <a href=\"/2013/10/26/using-pandas-on-the-movielens-dataset/\">using pandas with the MovieLens dataset</a>.</em></p>",
  "category": [
    "",
    "",
    "",
    "",
    "",
    ""
  ]
}