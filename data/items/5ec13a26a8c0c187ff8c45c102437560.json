{
  "title": "GroupBy and Package Management",
  "link": "",
  "updated": "2013-05-21T00:00:00+00:00",
  "id": "https://mrocklin.github.io/blog/work/2013/05/21/GroupBy",
  "content": "<p>I believe that packages are an artificial abstraction.  I’ll  demonstrate this with my favorite function, <code class=\"language-plaintext highlighter-rouge\">groupby</code>.</p>\n\n<h2 id=\"groupby\">Groupby</h2>\n\n<p><code class=\"language-plaintext highlighter-rouge\">groupby</code> partitions a collection by a key function.  Here is a test demonstrating two examples</p>\n\n<script src=\"https://gist.github.com/5722155.js\"> </script>\n\n<p>Groupby is a cousin of <code class=\"language-plaintext highlighter-rouge\">map</code> and <code class=\"language-plaintext highlighter-rouge\">filter</code>, other higher order functions that take a function and a collection as inputs.  Groupby returns a dictionary that associates groups of that collection to their value under that function.  For example names <code class=\"language-plaintext highlighter-rouge\">'Bob'</code> and <code class=\"language-plaintext highlighter-rouge\">'Dan'</code> have value <code class=\"language-plaintext highlighter-rouge\">3</code> under the function <code class=\"language-plaintext highlighter-rouge\">len</code> and so were associated to the group with key <code class=\"language-plaintext highlighter-rouge\">3</code> while <code class=\"language-plaintext highlighter-rouge\">'Alice'</code> was put into the group associated to <code class=\"language-plaintext highlighter-rouge\">5</code>.  It places all items of the collection into the proper group in one pass of the data.</p>\n\n<p>Groupby is a common function implemented in several standard libraries.  It exists in C#, Lisp languages (Scheme, Clojure), and is a keyword in SQL.  It doesn’t exist in Python (see footnote) but fortunately is easy to implement.</p>\n\n<script src=\"https://gist.github.com/5618992.js\"> </script>\n\n<p>A final example, the common function <code class=\"language-plaintext highlighter-rouge\">histogram</code> is a trivial extension of <code class=\"language-plaintext highlighter-rouge\">groupby</code></p>\n\n<script src=\"https://gist.github.com/5722752.js\"> </script>\n\n<p>Map, filter, and reduce/fold each replace a commonly occuring programming pattern.  When these functions don’t fit we often revert to traditional for loops or list comprehensions.  Groupby efficiently handles another surprisingly large class of problems.  You probably implement groupby relatively frequently without realizing it.</p>\n\n<h2 id=\"package-management\">Package Management</h2>\n\n<p>As I mentioned, this is my favorite function; I implement it in every project I have.  It lives in a <code class=\"language-plaintext highlighter-rouge\">util.py</code> file at the base of each project’s directory structure.  This is code duplication.  Code duplication is bad.  The common solution is to put <code class=\"language-plaintext highlighter-rouge\">groupby</code> into a separate package and then import that single package within each project.</p>\n\n<p><em>In which project should <code class=\"language-plaintext highlighter-rouge\">groupby</code> live?</em></p>\n\n<p>I’ve often thought of making an <code class=\"language-plaintext highlighter-rouge\">itertools2</code> (in my head often called <code class=\"language-plaintext highlighter-rouge\">itertoolz</code>) that contains more utility functions for iterables.  Or perhaps a <code class=\"language-plaintext highlighter-rouge\">rocklin_util</code> project the for general utility functions that I often use.  At times I’ve thought of just a <code class=\"language-plaintext highlighter-rouge\">groupby</code> project that has only one function, also named <code class=\"language-plaintext highlighter-rouge\">groupby</code>, e.g.</p>\n\n<figure class=\"highlight\">\n  <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"kn\">from</span> <span class=\"nn\">groupby</span> <span class=\"kn\">import</span> <span class=\"n\">groupby</span></code></pre>\n</figure>\n\n<p>Which decision is best?  What other functions should live in the project that houses <code class=\"language-plaintext highlighter-rouge\">groupby</code>?</p>\n\n<p>To me this question is subjective and all answers I can come up with feel artificial.  If you have ideas I’d love to hear them.  Please post in the comments below.</p>\n\n<p>At the moment my answer is that package management is not the correct abstraction.  Instead perhaps the solution is to manage functions directly.  I have some thoughts on this but this post is already longer than I like.</p>\n\n<h3 id=\"footnote\">Footnote</h3>\n\n<ol>\n  <li><code class=\"language-plaintext highlighter-rouge\">itertools</code> has a function called groupby.  It is a streaming variant of this operation.  It requires that all elements of a group be adjacent to one another and so does not satisfy the traditional interface.  I know of no other implementation within the standard library.  SymPy has a version which it calls <code class=\"language-plaintext highlighter-rouge\">sift</code>.</li>\n</ol>"
}