{
  "title": "Tech stack and common tools for developing AI",
  "link": "https://datasciencevademecum.com/2019/12/17/tech-stack-and-common-tools-for-developing-ai/",
  "dc:creator": "Gianmario",
  "pubDate": "Tue, 17 Dec 2019 15:00:00 +0000",
  "category": [
    "Amazon EC2",
    "Big Data",
    "Cloud",
    "Machine Learning",
    "Open Source",
    "Python",
    "Software Development",
    "Spark",
    "machine learning pipelines",
    "serverless",
    "technolgy trends"
  ],
  "guid": "https://datasciencevademecum.wordpress.com/?p=2303",
  "description": "<p>The enterprise applications of Machine Learning are converging into a common tech stack as illustrated in the following picture.</p>\n<p>The post <a rel=\"nofollow\" href=\"https://datasciencevademecum.com/2019/12/17/tech-stack-and-common-tools-for-developing-ai/\">Tech stack and common tools for developing AI</a> appeared first on <a rel=\"nofollow\" href=\"https://datasciencevademecum.com\">Vademecum of Practical Data Science</a>.</p>\n",
  "content:encoded": "<p><i><span style=\"font-weight: 400;\">This piece is part of a series on 2019 trends in the AI and Machine Learning industry. You can read my full thoughts on the past year in </span></i><a href=\"https://www.helixa.ai/blog/ai-trends-2019\"><i><span style=\"font-weight: 400;\">this summary I wrote for the Helixa blog</span></i></a><i><span style=\"font-weight: 400;\">, which also includes links to the other in-depth pieces in this series.</span></i></p>\n<p><i><span style=\"font-weight: 400;\">&#8212;&#8212;&#8212;-</span></i></p>\n<p><span style=\"font-weight: 400;\">The enterprise applications of Machine Learning are converging into a common tech stack as illustrated in the following picture.</span></p>\n<p><a href=\"https://datasciencevademecum.files.wordpress.com/2019/12/imagelikeembed.png\"><img decoding=\"async\" loading=\"lazy\" class=\"alignnone size-large wp-image-2305\" src=\"https://datasciencevademecum.files.wordpress.com/2019/12/imagelikeembed.png?w=660&#038;resize=660%2C371\" alt=\"\" width=\"660\" height=\"371\" srcset=\"https://i0.wp.com/datasciencevademecum.com/wp-content/uploads/2019/12/imagelikeembed.png?w=1600&ssl=1 1600w, https://i0.wp.com/datasciencevademecum.com/wp-content/uploads/2019/12/imagelikeembed.png?resize=300%2C169&ssl=1 300w, https://i0.wp.com/datasciencevademecum.com/wp-content/uploads/2019/12/imagelikeembed.png?resize=1024%2C576&ssl=1 1024w, https://i0.wp.com/datasciencevademecum.com/wp-content/uploads/2019/12/imagelikeembed.png?resize=768%2C432&ssl=1 768w, https://i0.wp.com/datasciencevademecum.com/wp-content/uploads/2019/12/imagelikeembed.png?resize=1536%2C864&ssl=1 1536w, https://i0.wp.com/datasciencevademecum.com/wp-content/uploads/2019/12/imagelikeembed.png?resize=1200%2C675&ssl=1 1200w, https://i0.wp.com/datasciencevademecum.com/wp-content/uploads/2019/12/imagelikeembed.png?w=1320&ssl=1 1320w\" sizes=\"(max-width: 660px) 100vw, 660px\" data-recalc-dims=\"1\" /></a></p>\n<p><a href=\"https://www.python.org/\"><span style=\"font-weight: 400;\">Python</span></a><span style=\"font-weight: 400;\"> dominates the language arena for most professional Data Scientists due to its extensive set of machine learning libraries, data crunching and visualization tools, general-purpose coding, wrappers around famous frameworks implemented in lower-level and more efficient languages, and established developers’ community.</span></p>\n<p><span style=\"font-weight: 400;\">JVM languages such as </span><a href=\"https://www.scala-lang.org/\"><span style=\"font-weight: 400;\">Scala</span></a><span style=\"font-weight: 400;\"> and </span><a href=\"https://www.java.com/\"><span style=\"font-weight: 400;\">Java</span></a><span style=\"font-weight: 400;\"> remain popular among Data Engineers due to the native Map/Reduce ecosystem and the built-in multi-threading capabilities.</span></p>\n<p><span style=\"font-weight: 400;\">A recent trend is </span><a href=\"https://golang.org/\"><span style=\"font-weight: 400;\">Golang</span></a><span style=\"font-weight: 400;\">, which represents a valid choice for DevOps and Machine Learning Engineer looking for low footprint and high scalability, especially for inference and deployment tasks.</span></p>\n<p><a href=\"https://jupyter.org/\"><span style=\"font-weight: 400;\">Jupyter Notebooks</span></a><span style=\"font-weight: 400;\"> and related tools are the first choices for exploratory analysis and prototyping. In terms of public notebooks that are consuming public datasets, tutorials or paper demonstrations, </span><a href=\"https://colab.research.google.com/\"><span style=\"font-weight: 400;\">Google Colab</span></a><span style=\"font-weight: 400;\"> has established itself as the default repository system.</span></p>\n<p><a href=\"http://spark.apache.org/\"><span style=\"font-weight: 400;\">Apache Spark</span></a><span style=\"font-weight: 400;\"> dominates data processing and distributed computation for very large data processing tasks (TBs to PBs) that require multiple machines (dozens to hundreds). Other alternatives are currently in consideration for those middle-sized data processing problems that are bigger than just one processor but that don’t require a cluster of dozens of workers. A popular choice is </span><a href=\"https://rise.cs.berkeley.edu/projects/ray/\"><span style=\"font-weight: 400;\">Ray</span></a><span style=\"font-weight: 400;\"> developed by the </span><a href=\"https://rise.cs.berkeley.edu\"><span style=\"font-weight: 400;\">RISELab at UC Berkeley</span></a><span style=\"font-weight: 400;\">. </span></p>\n<p><span style=\"font-weight: 400;\">When implementing deep learning models, </span><a href=\"https://www.tensorflow.org/\"><span style=\"font-weight: 400;\">Tensorflow</span></a><span style=\"font-weight: 400;\"> is the de-facto framework and ecosystem for research and production systems. </span><a href=\"https://pytorch.org/\"><span style=\"font-weight: 400;\">PyTorch</span></a><span style=\"font-weight: 400;\"> is the second alternative for deep learning frameworks, although is used more for research purposes.</span></p>\n<p><span style=\"font-weight: 400;\">What about deployments? Code, models, tasks, and services are often shipped inside Docker containers, which offer reproducibility, environment separation, and simplified scalability. When the Docker container is running a service that needs to remain up-and-running, the default orchestrator choice is Kubernetes.</span></p>\n<p><span style=\"font-weight: 400;\">Another advantage of Kubernetes is to abstract away from the cloud provider and make the whole system portable and infrastructure-agnostic.</span></p>\n<p><span style=\"font-weight: 400;\">On that note, the battle of cloud providers does not seem to have a clear winner as of yet. </span><a href=\"https://aws.amazon.com/\"><span style=\"font-weight: 400;\">AWS</span></a><span style=\"font-weight: 400;\"> still retrieving the biggest slice of the pie, with </span><a href=\"https://azure.microsoft.com/en-us/\"><span style=\"font-weight: 400;\">Microsoft Azure</span></a><span style=\"font-weight: 400;\"> and </span><a href=\"https://cloud.google.com/\"><span style=\"font-weight: 400;\">Google Cloud</span></a><span style=\"font-weight: 400;\"> close behind, especially for machine learning projects. </span><a href=\"https://www.ibm.com/cloud\"><span style=\"font-weight: 400;\">IBM</span></a><span style=\"font-weight: 400;\"> fits more like a hybrid provider of AI services on top of their cloud environment and external ones. Another player that is expanding from China and Asia to other continents is </span><a href=\"https://www.alibabacloud.com/\"><span style=\"font-weight: 400;\">Alibaba</span></a><span style=\"font-weight: 400;\">, but so far I could not collect any customer testimonials.</span></p>\n<p><span style=\"font-weight: 400;\">For Machine Learning pipelines and lifecycle, there are many platforms out there for simplifying the workflow and making it more production-ready for enterprise use. Companies working with cloud computing commonly choose the AI platforms provided natively by those providers (see </span><a href=\"https://aws.amazon.com/sagemaker/\"><span style=\"font-weight: 400;\">AWS Sagemaker</span></a><span style=\"font-weight: 400;\">, </span><a href=\"https://cloud.google.com/ai-platform/\"><span style=\"font-weight: 400;\">Google Cloud AI Platform</span></a><span style=\"font-weight: 400;\">, or Azure ML Studio). For open-source alternatives or extensions, I found the following to be very popular choices: </span><a href=\"https://mlflow.org/\"><span style=\"font-weight: 400;\">MLFlow</span></a><span style=\"font-weight: 400;\">, </span><a href=\"https://www.kubeflow.org\"><span style=\"font-weight: 400;\">Kubleflow</span></a><span style=\"font-weight: 400;\">, </span><a href=\"https://www.tensorflow.org/tfx\"><span style=\"font-weight: 400;\">Tensorflow TFX</span></a><span style=\"font-weight: 400;\">, and </span><a href=\"https://www.hops.io/\"><span style=\"font-weight: 400;\">HopsWorks</span></a><span style=\"font-weight: 400;\">.</span></p>\n<p><span style=\"font-weight: 400;\">Finally, I want to address serverless architectures. Beyond solutions architects working for cloud providers, I have only met a few companies adopting serverless infrastructures in production. Like any revolutionizing technology, it will take a while to be adopted and integrated with mainstream, established technologies. Migrating an existing system to a different infrastructure is often costly and not worthwhile in the short-term. </span></p>\n<p><span style=\"font-weight: 400;\">If we consider serverless for scientific computing and machine learning applications, it is a sort of uncharted territory with many fruitful rewards. If you are starting a greenfield application, I found serverless to be a convenient trade-off among costs, ease-of-deployment, and quality. </span></p>\n<p><span style=\"font-weight: 400;\">&#8212;&#8212;&#8212;-</span></p>\n<p><i><span style=\"font-weight: 400;\">For curious, AI-focused professionals who want to innovate responsibly, Helixa derives complex human insights through ethical and intentional machine learning. We do this more effectively than anyone else by aggregating multiple data sources, prioritizing consumer privacy, and returning results in seconds. Visit </span></i><a href=\"http://www.helixa.ai\"><i><span style=\"font-weight: 400;\">www.helixa.ai</span></i></a><i><span style=\"font-weight: 400;\"> to learn more.</span></i></p>\n<p>The post <a rel=\"nofollow\" href=\"https://datasciencevademecum.com/2019/12/17/tech-stack-and-common-tools-for-developing-ai/\">Tech stack and common tools for developing AI</a> appeared first on <a rel=\"nofollow\" href=\"https://datasciencevademecum.com\">Vademecum of Practical Data Science</a>.</p>\n",
  "post-id": 2303
}