{
  "title": "2 + 1 = 4, by quinoa",
  "link": "",
  "published": "2020-07-03T00:00:00-07:00",
  "updated": "2020-07-03T00:00:00-07:00",
  "author": {
    "name": "Jonathan Landy"
  },
  "id": "tag:efavdb.com,2020-07-03:/quinoa packing",
  "summary": "<p align=\"center\">\n         <img src=\"images/quinoa.jpg\">\n</p>\n\n<p>I was struck the other day by the following:  The cooking instructions on my\nBob&#8217;s tri-colored quinoa package said to combine 2 cups of water with 1 cup of\ndried quinoa, which would ultimately create 4 cups of cooked quinoa.  See image&nbsp;above.</p>\n<p>My first reaction was to believe …</p>",
  "content": "<p align=\"center\">\n         <img src=\"images/quinoa.jpg\">\n</p>\n\n<p>I was struck the other day by the following:  The cooking instructions on my\nBob&#8217;s tri-colored quinoa package said to combine 2 cups of water with 1 cup of\ndried quinoa, which would ultimately create 4 cups of cooked quinoa.  See image&nbsp;above.</p>\n<p>My first reaction was to believe that some error had been made.  However, I\nthen realized that the explanation was packing:  When one packs spheres or\nother awkward solid geometric shapes into a container, they cannot fill the\nspace completely.  Little pockets of air sit between the spheres.  A quick\ngoogle search for the packing fraction of spheres gives a value of <span class=\"math\">\\(0.75\\)</span> for a\ncrystalline structure and about <span class=\"math\">\\(0.64\\)</span> for random packings &#8212; apparently a\nuniversal&nbsp;law.</p>\n<p>We can get a similar number out from my quinoa instructions: Suppose that\nbefore the quinoa is cooked, the water fills its volume completely.  However,\nafter cooking, the water is absorbed into the quinoa and forced to share its\npacking fraction.  The quinoa stays at the same packing fraction before and\nafter cooking, so the water must be responsible for the volume growth.  This\nimplies it went from 2 cups to 3,&nbsp;or\n</p>\n<div class=\"math\">\\begin{eqnarray} \\tag{1} \\label{1}\n2 = \\rho \\times 3,\n\\end{eqnarray}</div>\n<p>\nwhere <span class=\"math\">\\(\\rho\\)</span> is the packing fraction of the quinoa &#8220;spheres&#8221;. We conclude that\nthe packing fraction is <span class=\"math\">\\(\\rho = 2/3\\)</span>, very close to the googled value of <span class=\"math\">\\(\\rho\n= 0.64\\)</span>.</p>\n<script type=\"text/javascript\">if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {\n    var align = \"center\",\n        indent = \"0em\",\n        linebreak = \"false\";\n\n    if (false) {\n        align = (screen.width < 768) ? \"left\" : align;\n        indent = (screen.width < 768) ? \"0em\" : indent;\n        linebreak = (screen.width < 768) ? 'true' : linebreak;\n    }\n\n    var mathjaxscript = document.createElement('script');\n    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';\n    mathjaxscript.type = 'text/javascript';\n    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';\n\n    var configscript = document.createElement('script');\n    configscript.type = 'text/x-mathjax-config';\n    configscript[(window.opera ? \"innerHTML\" : \"text\")] =\n        \"MathJax.Hub.Config({\" +\n        \"    config: ['MMLorHTML.js'],\" +\n        \"    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" +\n        \"    jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" +\n        \"    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" +\n        \"    displayAlign: '\"+ align +\"',\" +\n        \"    displayIndent: '\"+ indent +\"',\" +\n        \"    showMathMenu: true,\" +\n        \"    messageStyle: 'normal',\" +\n        \"    tex2jax: { \" +\n        \"        inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" +\n        \"        displayMath: [ ['$$','$$'] ],\" +\n        \"        processEscapes: true,\" +\n        \"        preview: 'TeX',\" +\n        \"    }, \" +\n        \"    'HTML-CSS': { \" +\n        \"        availableFonts: ['STIX', 'TeX'],\" +\n        \"        preferredFont: 'STIX',\" +\n        \"        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" +\n        \"        linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" +\n        \"    }, \" +\n        \"}); \" +\n        \"if ('default' !== 'default') {\" +\n            \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" +\n                \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" +\n                \"VARIANT['normal'].fonts.unshift('MathJax_default');\" +\n                \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" +\n                \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" +\n                \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" +\n            \"});\" +\n            \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" +\n                \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" +\n                \"VARIANT['normal'].fonts.unshift('MathJax_default');\" +\n                \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" +\n                \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" +\n                \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" +\n            \"});\" +\n        \"}\";\n\n    (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript);\n    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);\n}\n</script>",
  "category": ""
}