{
  "title": "Adventures in Aggregating Data",
  "link": "",
  "published": "2011-07-12T00:00:00-07:00",
  "updated": "2011-07-12T00:00:00-07:00",
  "author": {
    "name": "Wes McKinney"
  },
  "id": "tag:wesmckinney.com,2011-07-12:/blog/aggregating-data-adventures/",
  "summary": "<p>I'm a big fan of <a href=\"http://interactivebrokers.com\" title=\"Interactive Brokers\">Interactive Brokers</a>. Cheap trading, great APIs, lightning fast execution with no frills, designed for the professional trader. Perfect for people like me. Here's the background for this article: I started writing short-dated out-of-the-money <a href=\"http://en.wikipedia.org/wiki/Call_option\" title=\"Call options\">call options</a> on my stock and ETF positions last year as a …</p>",
  "content": "<p>I'm a big fan of <a href=\"http://interactivebrokers.com\" title=\"Interactive Brokers\">Interactive Brokers</a>. Cheap trading, great APIs, lightning fast execution with no frills, designed for the professional trader. Perfect for people like me. Here's the background for this article: I started writing short-dated out-of-the-money <a href=\"http://en.wikipedia.org/wiki/Call_option\" title=\"Call options\">call options</a> on my stock and ETF positions last year as a way to hedge my downside risk (while limiting upside) and maybe even make a little extra income on the side in this volatile and frequently sideways market. Recently I was looking over my brokerage statements and trying to get a grasp on my realized and mark-to-market PnL (profit-and-loss) this year and last since we're talking about equity positions plus options that expired in each month since the beginning of the year. After poring over the various forms of reports I can get from IB I concluded the quickest-and-dirtiest (not to mention the most fun) way was to write a little Python program to do it for me.</p>\n<p>I'll spare you the munging bit of getting the data out of the HTML activity statement using <a href=\"http://pypi.python.org/pypi/BeautifulSoup/3.2.0\" title=\"BeautifulSoup\">BeautifulSoup</a> and skip to where I've scraped the relevant data into a <a href=\"http://pandas.sourceforge.net/dataframe.html\" title=\"DataFrame\">DataFrame</a>. Here's some faux data for illustration purposes:</p>\n<div class=\"github\"><pre><span></span><code><span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">65</span><span class=\"p\">]:</span> <span class=\"n\">data</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">65</span><span class=\"p\">]:</span>\n     <span class=\"n\">Symbol</span>                 <span class=\"n\">Underlying</span>   <span class=\"n\">Kind</span>     <span class=\"n\">MTM</span>     <span class=\"n\">Realized</span>\n<span class=\"mi\">0</span>    <span class=\"n\">AAPL</span>                   <span class=\"n\">AAPL</span>         <span class=\"n\">Stock</span>    <span class=\"mf\">120.5</span>   <span class=\"mf\">108.5</span>\n<span class=\"mi\">1</span>    <span class=\"n\">CTXS</span>                   <span class=\"n\">CTXS</span>         <span class=\"n\">Stock</span>    <span class=\"mf\">101.5</span>   <span class=\"mf\">91.39</span>\n<span class=\"mi\">2</span>    <span class=\"n\">NFLX</span>                   <span class=\"n\">NFLX</span>         <span class=\"n\">Stock</span>   <span class=\"o\">-</span><span class=\"mf\">193.5</span>  <span class=\"o\">-</span><span class=\"mf\">174.1</span>\n<span class=\"mi\">3</span>    <span class=\"n\">SPY</span>                    <span class=\"n\">SPY</span>          <span class=\"n\">Stock</span>    <span class=\"mf\">67.77</span>   <span class=\"mf\">60.99</span>\n<span class=\"mi\">4</span>    <span class=\"n\">USO</span>                    <span class=\"n\">USO</span>          <span class=\"n\">Stock</span>   <span class=\"o\">-</span><span class=\"mf\">3.355</span>  <span class=\"o\">-</span><span class=\"mf\">3.019</span>\n<span class=\"mi\">5</span>    <span class=\"n\">VMW</span>                    <span class=\"n\">VMW</span>          <span class=\"n\">Stock</span>    <span class=\"mf\">39.13</span>   <span class=\"mf\">35.21</span>\n<span class=\"mi\">6</span>    <span class=\"n\">AAPL</span> <span class=\"mi\">18</span><span class=\"n\">JUN11</span> <span class=\"mf\">350.0</span> <span class=\"n\">C</span>   <span class=\"n\">AAPL</span>         <span class=\"n\">Option</span>  <span class=\"o\">-</span><span class=\"mf\">52.76</span>  <span class=\"o\">-</span><span class=\"mf\">47.48</span>\n<span class=\"mi\">7</span>    <span class=\"n\">AAPL</span> <span class=\"mi\">18</span><span class=\"n\">JUN11</span> <span class=\"mf\">355.0</span> <span class=\"n\">C</span>   <span class=\"n\">AAPL</span>         <span class=\"n\">Option</span>   <span class=\"mf\">211.2</span>   <span class=\"mf\">190.1</span>\n<span class=\"mi\">8</span>    <span class=\"n\">CTXS</span> <span class=\"mi\">18</span><span class=\"n\">JUN11</span> <span class=\"mf\">87.5</span> <span class=\"n\">C</span>    <span class=\"n\">CTXS</span>         <span class=\"n\">Option</span>   <span class=\"mf\">65.17</span>   <span class=\"mf\">58.65</span>\n<span class=\"mi\">9</span>    <span class=\"n\">CTXS</span> <span class=\"mi\">18</span><span class=\"n\">JUN11</span> <span class=\"mf\">90.0</span> <span class=\"n\">C</span>    <span class=\"n\">CTXS</span>         <span class=\"n\">Option</span>  <span class=\"o\">-</span><span class=\"mf\">33.16</span>  <span class=\"o\">-</span><span class=\"mf\">29.84</span>\n<span class=\"mi\">10</span>   <span class=\"n\">NFLX</span> <span class=\"mi\">18</span><span class=\"n\">JUN11</span> <span class=\"mf\">270.0</span> <span class=\"n\">C</span>   <span class=\"n\">NFLX</span>         <span class=\"n\">Option</span>   <span class=\"mf\">80.38</span>   <span class=\"mf\">72.34</span>\n<span class=\"mi\">11</span>   <span class=\"n\">NFLX</span> <span class=\"mi\">18</span><span class=\"n\">JUN11</span> <span class=\"mf\">280.0</span> <span class=\"n\">C</span>   <span class=\"n\">NFLX</span>         <span class=\"n\">Option</span>   <span class=\"mf\">76.82</span>   <span class=\"mf\">69.14</span>\n<span class=\"mi\">12</span>   <span class=\"n\">SPY</span> <span class=\"mi\">16</span><span class=\"n\">APR11</span> <span class=\"mf\">132.0</span> <span class=\"n\">C</span>    <span class=\"n\">SPY</span>          <span class=\"n\">Option</span>   <span class=\"mf\">54.25</span>   <span class=\"mf\">48.83</span>\n<span class=\"mi\">13</span>   <span class=\"n\">USO</span> <span class=\"mi\">16</span><span class=\"n\">APR11</span> <span class=\"mf\">44.0</span> <span class=\"n\">C</span>     <span class=\"n\">USO</span>          <span class=\"n\">Option</span>  <span class=\"o\">-</span><span class=\"mf\">122.4</span>  <span class=\"o\">-</span><span class=\"mf\">110.1</span>\n<span class=\"mi\">14</span>   <span class=\"n\">USO</span> <span class=\"mi\">16</span><span class=\"n\">APR11</span> <span class=\"mf\">45.0</span> <span class=\"n\">C</span>     <span class=\"n\">USO</span>          <span class=\"n\">Option</span>   <span class=\"mf\">73.06</span>   <span class=\"mf\">65.76</span>\n<span class=\"mi\">15</span>   <span class=\"n\">USO</span> <span class=\"mi\">18</span><span class=\"n\">JUN11</span> <span class=\"mf\">40.0</span> <span class=\"n\">C</span>     <span class=\"n\">USO</span>          <span class=\"n\">Option</span>   <span class=\"mf\">50.96</span>   <span class=\"mf\">45.86</span>\n<span class=\"mi\">16</span>   <span class=\"n\">VMW</span> <span class=\"mi\">18</span><span class=\"n\">JUN11</span> <span class=\"mf\">100.0</span> <span class=\"n\">C</span>    <span class=\"n\">VMW</span>          <span class=\"n\">Option</span>   <span class=\"mf\">25.59</span>   <span class=\"mf\">23.03</span>\n<span class=\"mi\">17</span>   <span class=\"n\">VMW</span> <span class=\"mi\">18</span><span class=\"n\">JUN11</span> <span class=\"mf\">105.0</span> <span class=\"n\">C</span>    <span class=\"n\">VMW</span>          <span class=\"n\">Option</span>   <span class=\"mf\">91.11</span>   <span class=\"mi\">82</span>\n</code></pre></div>\n\n<p>So, I want to aggregate the Realized and MTM columns by Underlying and\nby whether it was an equity or option instrument. Were this data in a SQL\ntable, this operation could be expressed extremely concisely:</p>\n<div class=\"github\"><pre><span></span><code><span class=\"k\">SELECT</span><span class=\"w\"> </span><span class=\"n\">Underlying</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Kind</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"k\">SUM</span><span class=\"p\">(</span><span class=\"n\">Realized</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">AS</span><span class=\"w\"> </span><span class=\"n\">Realized</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">SUM</span><span class=\"p\">(</span><span class=\"n\">MTM</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">AS</span><span class=\"w\"> </span><span class=\"n\">MTM</span><span class=\"w\"></span>\n<span class=\"k\">FROM</span><span class=\"w\"> </span><span class=\"n\">MTMReport</span><span class=\"w\"></span>\n<span class=\"k\">GROUP</span><span class=\"w\"> </span><span class=\"k\">BY</span><span class=\"w\"> </span><span class=\"n\">Underlying</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Kind</span><span class=\"w\"></span>\n<span class=\"k\">ORDER</span><span class=\"w\"> </span><span class=\"k\">BY</span><span class=\"w\"> </span><span class=\"n\">Underlying</span><span class=\"w\"></span>\n</code></pre></div>\n\n<p>But since I like doing interactive data analysis in Python (and loath\nwriting lots of SQL queries), I'd rather do this with <a href=\"http://pandas.sourceforge.net\" title=\"pandas\">pandas</a> and also\nproduce some easier-to-read console output. Here's what I ended up with:</p>\n<div class=\"github\"><pre><span></span><code><span class=\"n\">mtm</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n<span class=\"n\">realized</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n<span class=\"k\">for</span> <span class=\"n\">kind</span><span class=\"p\">,</span> <span class=\"n\">group</span> <span class=\"ow\">in</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">groupby</span><span class=\"p\">(</span><span class=\"s1\">&#39;Kind&#39;</span><span class=\"p\">):</span>\n    <span class=\"n\">mtm_by_underlying</span> <span class=\"o\">=</span> <span class=\"n\">group</span><span class=\"p\">[</span><span class=\"s1\">&#39;MTM&#39;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">groupby</span><span class=\"p\">(</span><span class=\"n\">group</span><span class=\"p\">[</span><span class=\"s1\">&#39;Underlying&#39;</span><span class=\"p\">])</span>\n    <span class=\"n\">realized_by_underlying</span> <span class=\"o\">=</span> <span class=\"n\">group</span><span class=\"p\">[</span><span class=\"s1\">&#39;Realized&#39;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">groupby</span><span class=\"p\">(</span><span class=\"n\">group</span><span class=\"p\">[</span><span class=\"s1\">&#39;Underlying&#39;</span><span class=\"p\">])</span>\n    <span class=\"n\">mtm</span><span class=\"p\">[</span><span class=\"n\">kind</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">mtm_by_underlying</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">()</span>\n    <span class=\"n\">realized</span><span class=\"p\">[</span><span class=\"n\">kind</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">realized_by_underlying</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Convert to DataFrame and fill NA values with 0</span>\n<span class=\"n\">mtm</span> <span class=\"o\">=</span> <span class=\"n\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">mtm</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">fillna</span><span class=\"p\">()</span>\n<span class=\"n\">realized</span> <span class=\"o\">=</span> <span class=\"n\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">realized</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">fillna</span><span class=\"p\">()</span>\n</code></pre></div>\n\n<p>And it outputs exactly what I'm looking for:</p>\n<div class=\"github\"><pre><span></span><code>In [77]: mtm\nOut[77]:\n       Option   Stock\nAAPL   158.4    120.5\nCTXS   32.01    101.5\nNFLX   157.2   -193.5\nSPY    54.25    67.77\nUSO    1.668   -3.355\nVMW    116.7    39.13\n\nIn [79]: mtm.sum(1)\nOut[79]:\nAAPL    278.941528842\nCTXS    133.551244568\nNFLX    -36.2669453776\nSPY     122.022253941\nUSO     -1.68704136356\nVMW     155.829013419\n</code></pre></div>\n\n<p>It occurred to me after writing this code that, with some changes to the <a href=\"http://pandas.sourceforge.net/groupby.html\" title=\"GroupBy\">GroupBy</a> functionality in pandas, this could be made *much easier*. Ideally I'd like to write:</p>\n<div class=\"github\"><pre><span></span><code><span class=\"n\">grouped</span> <span class=\"o\">=</span> <span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">groupby</span><span class=\"p\">(</span><span class=\"s1\">&#39;Underlying&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Kind&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">mtm</span> <span class=\"o\">=</span> <span class=\"n\">grouped</span><span class=\"p\">[</span><span class=\"s1\">&#39;MTM&#39;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">()</span>\n<span class=\"n\">realized</span> <span class=\"o\">=</span> <span class=\"n\">grouped</span><span class=\"p\">[</span><span class=\"s1\">&#39;Realized&#39;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">()</span>\n</code></pre></div>\n\n<p>I'll get to work on this in the <a href=\"http://github.com/wesm/pandas\" title=\"pandas repo\">pandas repo</a>.</p>\n<p>Here's the <a href=\"https://gist.github.com/1079577\" title=\"Gist\">Gist</a> of the full script</p>"
}