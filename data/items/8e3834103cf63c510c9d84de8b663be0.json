{
  "title": "Recurrent Neural Network Tutorial for Artists",
  "link": "https://blog.otoro.net/2017/01/01/recurrent-neural-network-artist/",
  "guid": "https://blog.otoro.net/2017/01/01/recurrent-neural-network-artist/",
  "description": "<center>\n<img src=\"https://cdn.rawgit.com/hardmaru/rnn-tutorial/master/neural.svg\" width=\"100%\" />\n</center>\n<p></p>\n\n<p>This post is not meant to be a comprehensive overview of recurrent neural networks.  It is intended for readers without any machine learning background.  The goal is to show artists and designers how to use a pre-trained neural network to produce interactive digital works using simple Javascript and <a href=\"https://p5js.org/\">p5.js</a> library.</p>\n\n<h2 id=\"introduction\">Introduction</h2>\n\n<div id=\"sketch01\"></div>\n<p><br /></p>\n<center><i><a target=\"_blank\" href=\"https://otoro.net/ml/rnn-tutorial\">Handwriting Generation with Javascript</a></i></center>\n<p></p>\n\n<p>Machine learning has become a popular tool for the creative community in recent years. Techniques such as <a href=\"https://github.com/lengstrom/fast-style-transfer\">style transfer</a>, <a href=\"https://aiexperiments.withgoogle.com/drum-machine\">t-sne</a>, <a href=\"https://gabgoh.github.io/ThoughtVectors/\">autoencoders</a>, <a href=\"https://opendot.github.io/ml4a-invisible-cities/\">generative adversarial networks</a>, and <a href=\"http://www.evolvingai.org/InnovationEngine\">countless</a> other methods have made their way into the digital artist’s toolbox. Many <a href=\"http://golancourses.net/2016/lectures/3-15/3-15-machine-learning/\">techniques</a> take advantage of <a href=\"https://medium.com/@kcimc/a-return-to-machine-learning-2de3728558eb\">convolutional neural networks</a> for feature extraction and feature processing.</p>\n\n<p>On the other end of the spectrum, recurrent neural networks, and other <a href=\"https://www.asimovinstitute.org/analyzing-deep-learning-tools-music/\">autoregressive models</a> enable powerful tools that can generate realistic sequential data.  Artists have employed such techniques to <a href=\"https://medium.com/@samim/obama-rnn-machine-generated-political-speeches-c8abd18a2ea0#.jikh6uesi\">generate</a> <a href=\"https://www.robinsloan.com/notes/writing-with-the-machine/\">text</a>, and <a href=\"https://www.technologyreview.com/s/603003/ai-songsmith-cranks-out-surprisingly-catchy-tunes/\">music</a> and <a href=\"https://github.com/ibab/tensorflow-wavenet\">sounds</a>.  One of the areas I feel lacking focus at the moment is on the generation of vector artwork, perhaps due to the lack of available data.</p>\n\n<p>Handwriting is a form of sketch artwork.  Recently, I have collaborated with <a href=\"https://twitter.com/shancarter\">Shan Carter</a>, <a href=\"https://twitter.com/enjalot\">Ian Johnson</a>, and <a href=\"https://twitter.com/ch402\">Chris Olah</a> to publish a <a href=\"https://distill.pub/2016/handwriting/\">post</a> on <a href=\"https://distill.pub/2016/handwriting/\">distill.pub</a> on handwriting generation.  In particular, the experiments in the post help visualise the internals of a recurrent neural network trained to generate handwriting.  The truth is, that project also served as a kind of meta-experiment for myself.  Rather than directly working on the visualisation experiments and writeup, I set out to create a pre-trained handwriting model with an easy-to-use Javascript interface, and have my collaborators, who are highly talented data visualisation artists, experiment with the model to create something out of it.  They ended up creating the beautiful interactive visualization experiments in the <a href=\"https://distill.pub/2016/handwriting/\">distill.pub</a> post.</p>\n\n<!--The experiment made me appreciate the power of abstraction, in the context of complex systems.  Architects design beautiful buildings without the need to understand low-level physical properties of glass, steel, or concrete.  The materials are engineered with high-level specification of safety limits, and beautiful structures can be built from these materials as long as they operate within a safety framework.  Although there are architects who are also capable engineers who understand both professions, I feel the need to constantly think of low level details will limit the creative process during design.  By hiding complexity, these abstraction layers help designers to focus on creative output.-->\n\n<p>I decided to write this post and make available the same handwriting model used in the <a href=\"https://distill.pub/2016/handwriting/\">distill.pub</a> project along with explanations, with the hope that other artists and designers can also take advantage of these technologies and even go deeper into the field.</p>\n\n<h2 id=\"modelling-a-handwriting-brain\">Modelling a Handwriting Brain</h2>\n\n<p>There are many things going on in our brain when we are writing a letter.  Based on what we set out to accomplish by writing, we make a plan about what we are going to write, select a suitable choice of vocabulary, how neat our handwriting needs to be, and then pick up then pen and start writing something on a pad of paper, making decisions about where to place the pen, where to move it, and when to pick it up.</p>\n\n<p>It would be difficult to create a Javascript model to simulate the entire human brain for writing a letter, but we can instead try to <em>model</em> the handwriting brain approximately by focusing on the last part of the handwriting process, namely where to place the pen, where to move it, and when to pick it up.  So our model of the handwriting process will only care about the location of the pen, and whether the pen is touching the paper pad.</p>\n\n<p>We also make two assumptions about the model.  The first assumption is that the decision of what the model will write next will only depend on whatever it wrote in the past.  However, when we write things, while we remember precisely the details of the last pen stroke, we don’t actually remember exactly what we wrote many strokes ago, and only have a vague idea about what was written.  This <em>vague idea</em> about what was written before can in fact be modelled within the context of a <em>recurrent neural network</em>.</p>\n\n<p>With an RNN, we can store this type of vague knowledge directly into the neurons of the RNN, and we refer to this object as the <em>hidden state</em> of the RNN.  This hidden state is just a vector of floating point numbers that keep track of how active each neuron is.  What our model will write next, will therefore depend on its hidden state.  This hidden state object will keep on getting updated after something is written, so it will be constantly changing.  We will demonstrate how this works in the next section.</p>\n\n<p>The second assumption about the model, is that that the model will not be <em>absolutely certain</em> about what it should write next.  In fact, the decision of what the model will write next is <em>random</em>.  For example, when the model is writing the character <script type=\"math/tex\">y</script>, it may decide to either continue writing the character to make the bottom hook of the <script type=\"math/tex\">y</script> character larger, or it can decide to suddenly finish off the character and move the pen to another location.  Therefore, the output of our model will not be precisely what to write next, but actually a <em>probability distribution</em> of what to write next.  We will need to sample from this probability distribution to decide what to actually write next.</p>\n\n<p>These two assumptions can be summarised in the following diagram, which describes the process of using a Recurrent Neural Network model with a hidden state to generate a random sequence.</p>\n\n<center>\n  <br />\n  <div id=\"state_diagram\" class=\"wp-caption center\">\n    <a target=\"_blank\" href=\"    /wp-content/uploads/sites/2/2015/12/state_diagram.svg\"><img src=\"    /wp-content/uploads/sites/2/2015/12/state_diagram.svg\" alt=\"state_diagram\" class=\"alignnone size-medium wp-image-983\" /></a>\n    <p class=\"wp-caption-text\">\n      Generative Sequence Model Framework<br />\n    </p>\n  </div>\n  <br />\n</center>\n\n<p>Don’t worry if you don’t fully understand this diagram.  In the next section, we will demonstrate what is going on line-by-line with Javascript.</p>\n\n<h2 id=\"recurrent-neural-network-for-handwriting\">Recurrent Neural Network for Handwriting</h2>\n\n<p>We have pre-trained a recurrent neural network <a href=\"https://github.com/hardmaru/rnn-tutorial\">model</a> to preform the handwriting task described in the previous section.  In this section, we will describe how to use this model in Javascript with <a href=\"https://p5js.org/\">p5.js</a>.  Below is the entire <a href=\"https://p5js.org/\">p5.js</a> sketch for handwriting generation.</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-javascript\" data-lang=\"javascript\"><span class=\"kd\">var</span> <span class=\"nx\">x</span><span class=\"p\">,</span> <span class=\"nx\">y</span><span class=\"p\">;</span>\n<span class=\"kd\">var</span> <span class=\"nx\">dx</span><span class=\"p\">,</span> <span class=\"nx\">dy</span><span class=\"p\">;</span>\n<span class=\"kd\">var</span> <span class=\"nx\">pen</span><span class=\"p\">;</span>\n<span class=\"kd\">var</span> <span class=\"nx\">prev_pen</span><span class=\"p\">;</span>\n<span class=\"kd\">var</span> <span class=\"nx\">rnn_state</span><span class=\"p\">;</span>\n<span class=\"kd\">var</span> <span class=\"nx\">pdf</span><span class=\"p\">;</span>\n<span class=\"kd\">var</span> <span class=\"nx\">temperature</span> <span class=\"o\">=</span> <span class=\"mf\">0.65</span><span class=\"p\">;</span>\n<span class=\"kd\">var</span> <span class=\"nx\">screen_width</span> <span class=\"o\">=</span> <span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">innerWidth</span><span class=\"p\">;</span>\n<span class=\"kd\">var</span> <span class=\"nx\">screen_height</span> <span class=\"o\">=</span> <span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">innerHeight</span><span class=\"p\">;</span>\n<span class=\"kd\">var</span> <span class=\"nx\">line_color</span><span class=\"p\">;</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">restart</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"nx\">x</span> <span class=\"o\">=</span> <span class=\"mi\">50</span><span class=\"p\">;</span>\n  <span class=\"nx\">y</span> <span class=\"o\">=</span> <span class=\"nx\">screen_height</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"p\">;</span>\n  <span class=\"nx\">dx</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n  <span class=\"nx\">dy</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n  <span class=\"nx\">prev_pen</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n  <span class=\"nx\">rnn_state</span> <span class=\"o\">=</span> <span class=\"nx\">Model</span><span class=\"p\">.</span><span class=\"nx\">random_state</span><span class=\"p\">();</span>\n  <span class=\"nx\">line_color</span> <span class=\"o\">=</span> <span class=\"nx\">color</span><span class=\"p\">(</span><span class=\"nx\">random</span><span class=\"p\">(</span><span class=\"mi\">255</span><span class=\"p\">),</span> <span class=\"nx\">random</span><span class=\"p\">(</span><span class=\"mi\">255</span><span class=\"p\">),</span> <span class=\"nx\">random</span><span class=\"p\">(</span><span class=\"mi\">255</span><span class=\"p\">))</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">setup</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"nx\">restart</span><span class=\"p\">();</span>\n  <span class=\"nx\">createCanvas</span><span class=\"p\">(</span><span class=\"nx\">screen_width</span><span class=\"p\">,</span> <span class=\"nx\">screen_height</span><span class=\"p\">);</span>\n  <span class=\"nx\">frameRate</span><span class=\"p\">(</span><span class=\"mi\">60</span><span class=\"p\">);</span>\n  <span class=\"nx\">background</span><span class=\"p\">(</span><span class=\"mi\">255</span><span class=\"p\">);</span>\n  <span class=\"nx\">fill</span><span class=\"p\">(</span><span class=\"mi\">255</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">draw</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"nx\">rnn_state</span> <span class=\"o\">=</span> <span class=\"nx\">Model</span><span class=\"p\">.</span><span class=\"nx\">update</span><span class=\"p\">([</span><span class=\"nx\">dx</span><span class=\"p\">,</span> <span class=\"nx\">dy</span><span class=\"p\">,</span> <span class=\"nx\">prev_pen</span><span class=\"p\">],</span> <span class=\"nx\">rnn_state</span><span class=\"p\">);</span>\n  <span class=\"nx\">pdf</span> <span class=\"o\">=</span> <span class=\"nx\">Model</span><span class=\"p\">.</span><span class=\"nx\">get_pdf</span><span class=\"p\">(</span><span class=\"nx\">rnn_state</span><span class=\"p\">);</span>\n  <span class=\"p\">[</span><span class=\"nx\">dx</span><span class=\"p\">,</span> <span class=\"nx\">dy</span><span class=\"p\">,</span> <span class=\"nx\">pen</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nx\">Model</span><span class=\"p\">.</span><span class=\"nx\">sample</span><span class=\"p\">(</span><span class=\"nx\">pdf</span><span class=\"p\">,</span> <span class=\"nx\">temperature</span><span class=\"p\">);</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">prev_pen</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">stroke</span><span class=\"p\">(</span><span class=\"nx\">line_color</span><span class=\"p\">);</span>\n    <span class=\"nx\">strokeWeight</span><span class=\"p\">(</span><span class=\"mf\">2.0</span><span class=\"p\">);</span>\n    <span class=\"nx\">line</span><span class=\"p\">(</span><span class=\"nx\">x</span><span class=\"p\">,</span> <span class=\"nx\">y</span><span class=\"p\">,</span> <span class=\"nx\">x</span><span class=\"o\">+</span><span class=\"nx\">dx</span><span class=\"p\">,</span> <span class=\"nx\">y</span><span class=\"o\">+</span><span class=\"nx\">dy</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n  <span class=\"nx\">x</span> <span class=\"o\">+=</span> <span class=\"nx\">dx</span><span class=\"p\">;</span>\n  <span class=\"nx\">y</span> <span class=\"o\">+=</span> <span class=\"nx\">dy</span><span class=\"p\">;</span>\n  <span class=\"nx\">prev_pen</span> <span class=\"o\">=</span> <span class=\"nx\">pen</span><span class=\"p\">;</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">x</span> <span class=\"o\">&gt;</span> <span class=\"nx\">screen_width</span> <span class=\"o\">-</span> <span class=\"mi\">50</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">restart</span><span class=\"p\">();</span>\n    <span class=\"nx\">background</span><span class=\"p\">(</span><span class=\"mi\">255</span><span class=\"p\">);</span>\n    <span class=\"nx\">fill</span><span class=\"p\">(</span><span class=\"mi\">255</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span></code></pre></figure>\n\n<p>We will explain how each line works.  First, we will need to define a few variables to keep track of where the pen actually is (<code class=\"highlighter-rouge\">x, y</code>).  Our model will be working with smaller coordinate offsets (<code class=\"highlighter-rouge\">dx, dy</code>) and determine where the pen should go next, and <code class=\"highlighter-rouge\">(x, y)</code> will be the accumulation of <code class=\"highlighter-rouge\">(dx, dy)</code>.</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-javascript\" data-lang=\"javascript\"><span class=\"kd\">var</span> <span class=\"nx\">x</span><span class=\"p\">,</span> <span class=\"nx\">y</span><span class=\"p\">;</span> <span class=\"c1\">// absolute coordinates of where the pen is</span>\n<span class=\"kd\">var</span> <span class=\"nx\">dx</span><span class=\"p\">,</span> <span class=\"nx\">dy</span><span class=\"p\">;</span> <span class=\"c1\">// offsets of the pen strokes, in pixels</span></code></pre></figure>\n\n<p>In addition, our pen will not always be touching the paper.  We would need a variable, called <code class=\"highlighter-rouge\">pen</code>, to model this.  If <code class=\"highlighter-rouge\">pen</code> is zero, then our pen is touching the paper at the current time step.  We also need to keep track of the <code class=\"highlighter-rouge\">pen</code> variable at the previous time step, and store this into <code class=\"highlighter-rouge\">prev_pen</code>.</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-javascript\" data-lang=\"javascript\"><span class=\"c1\">// keep track of whether pen is touching paper. 0 or 1.</span>\n<span class=\"kd\">var</span> <span class=\"nx\">pen</span><span class=\"p\">;</span>\n<span class=\"kd\">var</span> <span class=\"nx\">prev_pen</span><span class=\"p\">;</span> <span class=\"c1\">// pen at the previous timestep</span></code></pre></figure>\n\n<p>If we have a list of <code class=\"highlighter-rouge\">(dx, dy, pen)</code> variables generated by our model at every time step, it will be enough for us to use this data to draw out what the model has generated on the screen.  At the beginning, all of these variables (<code class=\"highlighter-rouge\">dx, dy, x, y, pen, prev_pen</code>) will be initialised to zero.</p>\n\n<p>We will also define some variable objects that will be used by our RNN model:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-javascript\" data-lang=\"javascript\"><span class=\"kd\">var</span> <span class=\"nx\">rnn_state</span><span class=\"p\">;</span> <span class=\"c1\">// store the hidden states the rnn</span>\n\n<span class=\"c1\">// store all the parameters of a mixture-density distribution</span>\n<span class=\"kd\">var</span> <span class=\"nx\">pdf</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// controls the amount of uncertainty of the model</span>\n<span class=\"c1\">// the higher the temperature, the more uncertainty.</span>\n<span class=\"kd\">var</span> <span class=\"nx\">temperature</span> <span class=\"o\">=</span> <span class=\"mf\">0.65</span><span class=\"p\">;</span> <span class=\"c1\">// a non-negative number.</span></code></pre></figure>\n\n<p>As described in the previous section, the <code class=\"highlighter-rouge\">rnn_state</code> variable will represent the <em>hidden state</em> of the RNN.  This variable will hold all the vague ideas about what the RNN <em>thought</em> it has written in the past.  To update <code class=\"highlighter-rouge\">rnn_state</code>, we will use the <code class=\"highlighter-rouge\">update</code> function in the model later on in the code.</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-javascript\" data-lang=\"javascript\"><span class=\"nx\">rnn_state</span> <span class=\"o\">=</span> <span class=\"nx\">Model</span><span class=\"p\">.</span><span class=\"nx\">update</span><span class=\"p\">([</span><span class=\"nx\">dx</span><span class=\"p\">,</span> <span class=\"nx\">dy</span><span class=\"p\">,</span> <span class=\"nx\">prev_pen</span><span class=\"p\">],</span> <span class=\"nx\">rnn_state</span><span class=\"p\">);</span></code></pre></figure>\n\n<p>The object <code class=\"highlighter-rouge\">rnn_state</code> will be used to generate the probability distribution of what the model will write next.  That probability distribution will be represented as the object called <code class=\"highlighter-rouge\">pdf</code>.  To obtain the <code class=\"highlighter-rouge\">pdf</code> object from <code class=\"highlighter-rouge\">rnn_state</code>, we will use the <code class=\"highlighter-rouge\">get_pdf</code> function later, like this:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-javascript\" data-lang=\"javascript\"><span class=\"nx\">pdf</span> <span class=\"o\">=</span> <span class=\"nx\">Model</span><span class=\"p\">.</span><span class=\"nx\">get_pdf</span><span class=\"p\">(</span><span class=\"nx\">rnn_state</span><span class=\"p\">);</span></code></pre></figure>\n\n<p>An additional variable called <code class=\"highlighter-rouge\">temperature</code> allows us to control how confident or how uncertain we want to make the model.  Combined with <code class=\"highlighter-rouge\">pdf</code> object, we can use the <code class=\"highlighter-rouge\">sample</code> function in the model to sample the next set of <code class=\"highlighter-rouge\">(dx, dy, pen)</code> values from our probability distribution.  We will use the following function later on:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-javascript\" data-lang=\"javascript\"><span class=\"p\">[</span><span class=\"nx\">dx</span><span class=\"p\">,</span> <span class=\"nx\">dy</span><span class=\"p\">,</span> <span class=\"nx\">pen</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nx\">Model</span><span class=\"p\">.</span><span class=\"nx\">sample</span><span class=\"p\">(</span><span class=\"nx\">pdf</span><span class=\"p\">,</span> <span class=\"nx\">temperature</span><span class=\"p\">);</span></code></pre></figure>\n\n<p>The only other variables we need now are to control the colour of the handwriting, and also keep track of the screen’s dimensions of the browser:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-javascript\" data-lang=\"javascript\"><span class=\"c1\">// stores the browser's dimensions</span>\n<span class=\"kd\">var</span> <span class=\"nx\">screen_width</span> <span class=\"o\">=</span> <span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">innerWidth</span><span class=\"p\">;</span>\n<span class=\"kd\">var</span> <span class=\"nx\">screen_height</span> <span class=\"o\">=</span> <span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">innerHeight</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// colour for the handwriting</span>\n<span class=\"kd\">var</span> <span class=\"nx\">line_color</span><span class=\"p\">;</span></code></pre></figure>\n\n<p>Now we are ready to initialise all these variables we just declared for the actual handwriting generation.  We will create a function called <code class=\"highlighter-rouge\">restart</code> to initialise these variables since we will be reinitialising them many times later.</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-javascript\" data-lang=\"javascript\"><span class=\"kd\">function</span> <span class=\"nx\">restart</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// set x to be 50 pixels from the left of the canvas</span>\n  <span class=\"nx\">x</span> <span class=\"o\">=</span> <span class=\"mi\">50</span><span class=\"p\">;</span>\n  <span class=\"c1\">// set y somewhere in middle of the canvas</span>\n  <span class=\"nx\">y</span> <span class=\"o\">=</span> <span class=\"nx\">screen_height</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"p\">;</span>\n\n  <span class=\"c1\">// initialize pen's states to zero.</span>\n  <span class=\"nx\">dx</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n  <span class=\"nx\">dy</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n  <span class=\"nx\">prev_pen</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n  <span class=\"c1\">// note: we draw lines based off previous pen's state</span>\n\n  <span class=\"c1\">// randomise the rnn's initial hidden states</span>\n  <span class=\"nx\">rnn_state</span> <span class=\"o\">=</span> <span class=\"nx\">Model</span><span class=\"p\">.</span><span class=\"nx\">random_state</span><span class=\"p\">();</span>\n\n  <span class=\"c1\">// randomise colour of line by choosing RGB values</span>\n  <span class=\"nx\">line_color</span> <span class=\"o\">=</span> <span class=\"nx\">color</span><span class=\"p\">(</span><span class=\"nx\">random</span><span class=\"p\">(</span><span class=\"mi\">255</span><span class=\"p\">),</span> <span class=\"nx\">random</span><span class=\"p\">(</span><span class=\"mi\">255</span><span class=\"p\">),</span> <span class=\"nx\">random</span><span class=\"p\">(</span><span class=\"mi\">255</span><span class=\"p\">))</span>\n<span class=\"p\">}</span></code></pre></figure>\n\n<p>After creating the <code class=\"highlighter-rouge\">restart</code> function, we can define the usual <a href=\"https://p5js.org/\">p5.js</a> <code class=\"highlighter-rouge\">setup</code> function to initialise the sketch.</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-javascript\" data-lang=\"javascript\"><span class=\"kd\">function</span> <span class=\"nx\">setup</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"nx\">restart</span><span class=\"p\">();</span> <span class=\"c1\">// initialize variables for this demo</span>\n  <span class=\"nx\">createCanvas</span><span class=\"p\">(</span><span class=\"nx\">screen_width</span><span class=\"p\">,</span> <span class=\"nx\">screen_height</span><span class=\"p\">);</span>\n  <span class=\"nx\">frameRate</span><span class=\"p\">(</span><span class=\"mi\">60</span><span class=\"p\">);</span> <span class=\"c1\">// 60 frames per second</span>\n  <span class=\"c1\">// clear the background to be blank white colour</span>\n  <span class=\"nx\">background</span><span class=\"p\">(</span><span class=\"mi\">255</span><span class=\"p\">);</span>\n  <span class=\"nx\">fill</span><span class=\"p\">(</span><span class=\"mi\">255</span><span class=\"p\">);</span>\n<span class=\"p\">}</span></code></pre></figure>\n\n<p>Our handwriting generation will take place in the <code class=\"highlighter-rouge\">draw</code> function of the <a href=\"https://p5js.org/\">p5.js</a> framework.  This function is called 60 times per second.  Each time this function is called, the RNN will draw something on the screen.</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-javascript\" data-lang=\"javascript\"><span class=\"kd\">function</span> <span class=\"nx\">draw</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n\n  <span class=\"c1\">// using the previous pen states, and hidden state</span>\n  <span class=\"c1\">// to get next hidden state </span>\n  <span class=\"nx\">rnn_state</span> <span class=\"o\">=</span> <span class=\"nx\">Model</span><span class=\"p\">.</span><span class=\"nx\">update</span><span class=\"p\">([</span><span class=\"nx\">dx</span><span class=\"p\">,</span> <span class=\"nx\">dy</span><span class=\"p\">,</span> <span class=\"nx\">prev_pen</span><span class=\"p\">],</span> <span class=\"nx\">rnn_state</span><span class=\"p\">);</span>\n\n  <span class=\"c1\">// get the parameters of the probability distribution</span>\n  <span class=\"c1\">// from the hidden state</span>\n  <span class=\"nx\">pdf</span> <span class=\"o\">=</span> <span class=\"nx\">Model</span><span class=\"p\">.</span><span class=\"nx\">get_pdf</span><span class=\"p\">(</span><span class=\"nx\">rnn_state</span><span class=\"p\">);</span>\n\n  <span class=\"c1\">// sample the next pen's states</span>\n  <span class=\"c1\">// using our probability distribution and temperature</span>\n  <span class=\"p\">[</span><span class=\"nx\">dx</span><span class=\"p\">,</span> <span class=\"nx\">dy</span><span class=\"p\">,</span> <span class=\"nx\">pen</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nx\">Model</span><span class=\"p\">.</span><span class=\"nx\">sample</span><span class=\"p\">(</span><span class=\"nx\">pdf</span><span class=\"p\">,</span> <span class=\"nx\">temperature</span><span class=\"p\">);</span>\n\n  <span class=\"c1\">// only draw on the paper if pen is touching the paper</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">prev_pen</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// set colour of the line</span>\n    <span class=\"nx\">stroke</span><span class=\"p\">(</span><span class=\"nx\">line_color</span><span class=\"p\">);</span>\n    <span class=\"c1\">// set width of the line to 2 pixels</span>\n    <span class=\"nx\">strokeWeight</span><span class=\"p\">(</span><span class=\"mf\">2.0</span><span class=\"p\">);</span>\n    <span class=\"c1\">// draw line connecting prev point to current point.</span>\n    <span class=\"nx\">line</span><span class=\"p\">(</span><span class=\"nx\">x</span><span class=\"p\">,</span> <span class=\"nx\">y</span><span class=\"p\">,</span> <span class=\"nx\">x</span><span class=\"o\">+</span><span class=\"nx\">dx</span><span class=\"p\">,</span> <span class=\"nx\">y</span><span class=\"o\">+</span><span class=\"nx\">dy</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"c1\">// update the absolute coordinates from the offsets</span>\n  <span class=\"nx\">x</span> <span class=\"o\">+=</span> <span class=\"nx\">dx</span><span class=\"p\">;</span>\n  <span class=\"nx\">y</span> <span class=\"o\">+=</span> <span class=\"nx\">dy</span><span class=\"p\">;</span>\n\n  <span class=\"c1\">// update the previous pen's state</span>\n  <span class=\"c1\">// to the current one we just sampled</span>\n  <span class=\"nx\">prev_pen</span> <span class=\"o\">=</span> <span class=\"nx\">pen</span><span class=\"p\">;</span>\n\n  <span class=\"c1\">// if the rnn starts drawing close to the right side</span>\n  <span class=\"c1\">// of the screen, restart our demo</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">x</span> <span class=\"o\">&gt;</span> <span class=\"nx\">screen_width</span> <span class=\"o\">-</span> <span class=\"mi\">50</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">restart</span><span class=\"p\">();</span>\n    <span class=\"c1\">// reset screen</span>\n    <span class=\"nx\">background</span><span class=\"p\">(</span><span class=\"mi\">255</span><span class=\"p\">);</span>\n    <span class=\"nx\">fill</span><span class=\"p\">(</span><span class=\"mi\">255</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n\n<span class=\"p\">}</span></code></pre></figure>\n\n<p>At each frame, the <code class=\"highlighter-rouge\">draw</code> function will update the hidden state of the model based on what it has previously drawn on the screen.  From this hidden state, the model will generate a probability distribution of what will be generated next.  Based on this probability distribution, along with the <code class=\"highlighter-rouge\">temperature</code> parameter, we will randomly sample what action it will take in the form of a new set of <code class=\"highlighter-rouge\">(dx, dy, pen)</code> variables.  Based on this new set of variables, it will draw a line on the screen if the pen was previously touching the paper pad, and update the global location of the pen.  Once the global location of the pen gets close to the right side of the screen, it will reset the sketch and start again.</p>\n\n<p>Putting all of this together, we get the following handwriting generation sketch.</p>\n\n<div id=\"sketch02\"></div>\n<p></p>\n\n<p>So there you have it, handwriting generation in your web browser in with a few lines of Javascript using <a href=\"https://p5js.org/\">p5.js</a>.</p>\n\n<h3 id=\"sampling-from-a-probability-distribution-with-varying-temperature\">Sampling from a Probability Distribution with Varying Temperature</h3>\n\n<p>The variable <code class=\"highlighter-rouge\">pdf</code> is supposed to store the probability distribution of the next pen stroke at each time step.  Under the hood, the object <code class=\"highlighter-rouge\">pdf</code> actually just contains the parameters of a complicated probability distribution (i.e. the means and the standard deviations of a bunch of Normal Distributions).  We have chosen to model the probability distribution of <code class=\"highlighter-rouge\">dx</code> and <code class=\"highlighter-rouge\">dy</code> as a <em>Mixture Density Distribution</em>.</p>\n\n<p>But what exactly is a mixture density distribution?  Well, statisticians (<em>data scientists</em>) like to model probability distributions with well known, mathematically tractable distributions such as the Normal Distribution, and they try to determine the parameters of the distribution (such as the mean and standard deviation for a Normal Distribution) to best fit the data.  However, when dealing with something complicated, like the strokes of handwriting data, we find that a simple Normal Distribution is not good enough to model the data.  Intuitively, handwriting strokes either stay close to the previous location, or jump to another location when a word or character is finished.</p>\n\n<p>A straight forward way to deal with this problem is to model a probability distribution as the sum of many Normal distributions added together.  In our case, we model the handwriting strokes as the sum of 20 Normal distributions.  With a Mixture of 20 Normal distributions, our model can do an okay job of modelling the actual handwriting data.  More technical details can be obtained in this other <a href=\"https://blog.otoro.net/2015/12/12/handwriting-generation-demo-in-tensorflow/\">post</a>.</p>\n\n<p>When we take this probability distribution, and sample from this distribution to get the set of <code class=\"highlighter-rouge\">(dx, dy, pen)</code> values to determine what to draw next, we use the <code class=\"highlighter-rouge\">temperature</code> parameter to control the level of uncertainty of the model.  If the temperature parameter is very high, then we are more likely to obtain samples in less probable regions of the probability distribution.  If the temperature parameter is very low, or close to zero, then we will only obtain samples from the most probable parts of the distribution.</p>\n\n<p>In the sketch below, you can visualise how the probability distribution becomes augmented by varying the temperature parameter.  You can control the temperature parameter by dragging around the top orange bar.</p>\n\n<div id=\"sketch04\"></div>\n<center><i>Visualise a Mixture Density Distribution by adjusting the Temperature.</i></center>\n<p></p>\n\n<p>For simplicity, the above demo simulates a mixture of twenty, one-dimensional normal distributions with a temperature parameter.  In the handwriting model, the probability distribution is a mixture of twenty, two-dimensional normal distributions.  In the next sketch, you can modify the temperature of the handwriting model while it is writing something, to see how the handwriting changes with varying temperatures.</p>\n\n<div id=\"sketch03\"></div>\n<p></p>\n\n<p>When the temperature is kept low, the handwriting model becomes very deterministic, so the handwriting is generally more neat and more realistic.  Increasing the temperature will increase the likelihood of choosing less likely probable of the probability distribution, so the handwriting samples will tend to be more funky and uncertain.</p>\n\n<h2 id=\"extending-the-handwriting-demo\">Extending the Handwriting Demo</h2>\n\n<p>One of the more interesting aspects of combining machine learning with design is to explore the interaction between human and machine.  The typical machine learning framework + python stack makes it difficult to deploy truly interactive web applications, as they often require dedicated web services to be written on the server side to process user interaction on the client side.  The nice thing about Javascript frameworks such as <a href=\"https://p5js.org/\">p5.js</a> is interactive programming can be done with ease, and deployed without much effort in a web browser.</p>\n\n<div id=\"sketch05\"></div>\n<p></p>\n\n<p>A possible <a target=\"_blank\" href=\"https://otoro.net/ml/rnn-tutorial/multi.html\">interactive extension</a> we can build from the basic handwriting demo is to have the user interactively write some handwriting onto the screen, and when the user is idle, have the model continuously predict the rest of the handwriting sample.  Another <a target=\"_blank\" href=\"https://otoro.net/ml/rnn-tutorial/predict.html\">extension</a> we can build, similar to the one is the <a href=\"https://distill.pub/2016/handwriting/\">distill.pub</a> post, is to have the model sample multiple possible paths that follow the handwriting path created by the user.</p>\n\n<div id=\"sketch06\"></div>\n\n<p>There are countless other possibilities one can experiment with this model.  It will also be interesting to combine this model with more advanced frameworks such as <a href=\"https://paperjs.org/\">paper.js</a> or <a href=\"https://bl.ocks.org/\">d3.js</a> to generate better looking strokes.</p>\n\n<h2 id=\"use-this-code\">Use this code!</h2>\n\n<p>If you are an artist or designer interested in machine learning, you can fork the <a href=\"https://github.com/hardmaru/rnn-tutorial\">github repository</a> containing the code used for this post, and use it to your liking.</p>\n\n<p>This post only scratches the surface of recurrent neural networks.  If you want to be more involved into the whole machine learning development process and train your own models, there are excellent <a href=\"https://ml4a.github.io/\">resources</a> to learn how to build models with <a href=\"https://github.com/jtoy/awesome-tensorflow\">TensorFlow</a>, or <a href=\"https://github.com/fchollet/keras-resources\">keras</a>.  If you use <a href=\"https://keras.io\">keras</a> to build and train your models, there is even a tool called <a href=\"https://github.com/transcranial/keras-js\">keras.js</a> that allow you to export pre-trained models for web browser usage, so you can build model interfaces like the Javascript handwriting model used in this post.  I haven’t personally used <a href=\"https://github.com/transcranial/keras-js\">keras.js</a>, and I found it fun to just write the handwriting model from scratch in Javascript.</p>\n\n<p><em>Update:</em></p>\n\n<p>This model has already been ported to <a href=\"https://bl.ocks.org/dribnet/cd6ee08b7658e5c744307b44b438221f\">bl.ocks</a>, and extended by a few people to do some <a href=\"https://bl.ocks.org/dribnet/8284e82ecefefeb391298356d3ab6732\">very</a>, <a href=\"https://bl.ocks.org/dribnet/f27c6167fcf4157cd0da0d9d5d016aa7\">interesting</a>, <a href=\"https://naoyashiga.github.io/my-dying-message/\">things</a>.</p>\n\n<script src=\"/js/p5/handwriting/numjs.js\"></script>\n\n<script src=\"/js/p5/handwriting/weights.js\"></script>\n\n<script src=\"/js/p5/handwriting/model.js\"></script>\n\n<script src=\"/js/p5/handwriting/handwriting.js\"></script>",
  "pubDate": "Sun, 01 Jan 2017 00:00:00 -0600"
}