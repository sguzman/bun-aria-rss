{
  "title": "Regularization in Machine Learning (with Code Examples)",
  "link": "https://www.dataquest.io/blog/regularization-in-machine-learning/",
  "comments": "https://www.dataquest.io/blog/regularization-in-machine-learning/#respond",
  "dc:creator": "Mehdi Lotfinejad",
  "pubDate": "Tue, 11 Oct 2022 08:00:50 +0000",
  "category": [
    "Data Science Tutorials",
    "Data Science",
    "Machine Learning",
    "Tutorials"
  ],
  "guid": "https://www.dataquest.io/?p=41297",
  "description": "In this tutorial, we&#8217;ll learn what regularization is and why we use it. We&#8217;ll also discuss regularization techniques and how to use them. After you finish this tutorial, you&#8217;ll understand the following: Regularization in machine learning L1 regularization (lasso regression) L2 regularization (ridge regression) Elastic Net How to use these regularization techniques In this tutorial, [&#8230;]",
  "content:encoded": "<p>In this tutorial, we&#8217;ll learn what regularization is and why we use it. We&#8217;ll also discuss regularization techniques and how to use them. </p>\n<p>After you finish this tutorial, you&#8217;ll understand the following:</p>\n<ul>\n<li>Regularization in machine learning </li>\n<li>L1 regularization (lasso regression)</li>\n<li>L2 regularization (ridge regression)</li>\n<li>Elastic Net</li>\n<li>How to use these regularization techniques</li>\n</ul>\n<p>In this tutorial, we assume you know the fundamentals of machine learning, including the basic concepts of linear regression. If you&#8217;re not familiar with machine learning or are eager to refresh your machine learning skills, you might like to try our <a href=\"https://www.dataquest.io/path/data-scientist/\">Data Scientist in Python Career Path</a>.</p>\n<h2>Introduction</h2>\n<p>Basically, we use regularization techniques to fix overfitting in our machine learning models. Before discussing regularization in more detail, let&#8217;s discuss overfitting.</p>\n<p>Overfitting happens when a machine learning model fits tightly to the training data and tries to learn all the details in the data; in this case, the model cannot generalize well to the unseen data. The following illustration, called the generalization curve, shows that the training loss keeps decreasing by increasing the number of training iterations:</p>\n<p><img src=\"https://i.imgur.com/j6P8EPq.png\" alt=\"\" /></p>\n<p>Although minimizing the training loss is a good thing, the validation loss starts to increase after a specific number of iterations. The increasing trend of the validation loss means that while we are trying to reduce the training loss, we increase the model&#8217;s complexity, so it cannot generalize to new data points.</p>\n<p>In other words, a high variance machine learning model captures all the details of the training data along with the existing noise in the data. So, as you&#8217;ve seen in the generalization curve, the difference between training loss and validation loss is becoming more and more noticeable. On the contrary, a high bias machine learning model is loosely coupled to the training data, which leads to a low difference between training loss and validation loss.</p>\n<p>So far, we&#8217;ve learned that preventing overfitting is crucial to improve the performance of our machine learning model. In the following sections, we&#8217;ll learn about regularization and its techniques.</p>\n<h2>What Is Regularization?</h2>\n<p>Regularization means restricting a model to avoid overfitting by shrinking the coefficient estimates to zero. When a model suffers from overfitting, we should control the model&#8217;s complexity. Technically, regularization avoids overfitting by adding a penalty to the model&#8217;s loss function:</p>\n<p>$$\\text{Regularization = Loss Function + Penalty}$$</p>\n<p>There are three commonly used regularization techniques to control the complexity of machine learning models, as follows:</p>\n<ul>\n<li>L2 regularization</li>\n<li>L1 regularization</li>\n<li>Elastic Net</li>\n</ul>\n<p>Let’s discuss these standard techniques in detail.</p>\n<h2>L2 Regularization</h2>\n<p>A linear regression that uses the L2 regularization technique is called <em>ridge</em> regression. In other words, in ridge regression, a regularization term is added to the cost function of the linear regression, which keeps the magnitude of the model’s weights (coefficients) as small as possible. The L2 regularization technique tries to keep the model’s weights close to zero, but not zero, which means each feature should have a low impact on the output while the model&#8217;s accuracy should be as high as possible.</p>\n<p>$$\\text{Ridge Regression Cost Function} = \\text{Loss Function} + \\dfrac{1}{2} \\lambda\\sum_{j=1}^m w_j^2$$</p>\n<p>Where $\\lambda$ controls the strength of regularization, and $w_j$ are the model&#8217;s weights (coefficients).</p>\n<p>By increasing $\\lambda$, the model becomes flattered and underfit. On the other hand, by decreasing $\\lambda$, the model becomes more overfit, and with $\\lambda$ = 0, the regularization term will be eliminated.</p>\n<h2>L1 Regularization</h2>\n<p>Least Absolute Shrinkage and Selection Operator (<em>lasso</em>) regression is an alternative to ridge for regularizing linear regression. Lasso regression also adds a penalty term to the cost function, but slightly different, called L1 regularization. L1 regularization makes some coefficients zero, meaning the model will ignore those features. Ignoring the least important features helps emphasize the model&#8217;s essential features.</p>\n<p>$$\\text{Lasso Regression Cost Function} = \\text{Loss Function} + \\lambda \\sum_{j=1}^m |w_j|$$</p>\n<p>Where $\\lambda$ controls the strength of regularization, and $w_j$ are the model&#8217;s weights (coefficients).</p>\n<p>Lasso regression automatically performs feature selection by eliminating the least important features.</p>\n<h2>Elastic Net</h2>\n<p>The Elastic Net is a regularized regression technique combining ridge and lasso&#8217;s regularization terms. The $r$ parameter controls the combination ratio. When $r=1$, the L2 term will be eliminated, and when $r=1$, the L1 term will be removed.</p>\n<p>$$\\text{Elastic Net Cost Function} = \\text{Loss Function} + r \\lambda \\sum_{j=1}^m |w<em>j|+ \\dfrac{(1-r)}{2} \\lambda\\sum</em>{j=1}^m w_j^2$$</p>\n<p>Although combining the penalties of lasso and ridge usually works better than only using one of the regularization techniques, adjusting two parameters, $\\lambda$ and $r$, is a little tricky.</p>\n<h2>Demonstrating Regularization Techniques with Python</h2>\n<p>In this section, we&#8217;re going to apply L2 and L1 regularization techniques to the Boston Housing dataset and compare the training set score and test set score before and after using these techniques.</p>\n<p>First, let&#8217;s load the dataset and split it into a training set and a test set, as follows:</p>\n<pre><code class=\"language-python\">import mglearn as ml\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\nfrom numpy import genfromtxt\n\ndataset = genfromtxt(&#039;https://raw.githubusercontent.com/m-mehdi/tutorials/main/boston_housing.csv&#039;, delimiter=&#039;,&#039;)\nX = dataset[:,:-1]\ny = dataset[:,-1]\nX_train, X_test, y_train, y_test = train_test_split(\n    X, y, test_size=0.25, random_state=0)\n</code></pre>\n<p>Now, we can train the Linear regression model and then print the training set score and the test set score:</p>\n<pre><code class=\"language-python\">lr = LinearRegression().fit(X_train, y_train)\n\nprint(f\"Linear Regression-Training set score: {lr.score(X_train, y_train):.2f}\")\nprint(f\"Linear Regression-Test set score: {lr.score(X_test, y_test):.2f}\")</code></pre>\n<pre><code class=\"language-text\">    Linear Regression-Training set score: 0.95\n    Linear Regression-Test set score: 0.61</code></pre>\n<p>Comparing the model performance on the training set and the test set reveals that the model suffers from overfitting.</p>\n<p>To avoid overfitting and control the complexity of the model, let&#8217;s use ridge regression (L2 regularization) and see how well it does on the dataset:</p>\n<pre><code class=\"language-python\">from sklearn.linear_model import Ridge\nridge = Ridge(alpha=0.7).fit(X_train, y_train)\nprint(f\"Ridge Regression-Training set score: {ridge.score(X_train, y_train):.2f}\")\nprint(f\"Ridge Regression-Test set score: {ridge.score(X_test, y_test):.2f}\")</code></pre>\n<pre><code class=\"language-text\">    Ridge Regression-Training set score: 0.90\n    Ridge Regression-Test set score: 0.76</code></pre>\n<p>Although the training set score of ridge regression is slightly lower than the linear regression training score, the test set score of ridge is significantly higher than the linear regression test set score. These scores confirm that ridge regression reduces the model&#8217;s complexity, leading to a less-overfit-but-more-general model.</p>\n<p>The <code>alpha</code> parameter specifies a trade-off between the model&#8217;s performance on the training set and its simplicity. So, increasing the <code>alpha</code> value (its default value is 1.0) simplifies the model by shrinking the coefficients.</p>\n<p>Now, let&#8217;s apply the lasso regression to the dataset and explore the results.</p>\n<pre><code class=\"language-python\">from sklearn.linear_model import Lasso\nlasso = Lasso(alpha=1.0).fit(X_train, y_train)\nprint(f\"Lasso Regression-Training set score: {lasso.score(X_train, y_train):.2f}\")\nprint(f\"Lasso Regression-Test set score: {lasso.score(X_test, y_test):.2f}\")</code></pre>\n<pre><code class=\"language-text\">    Lasso Regression-Training set score: 0.29\n    Lasso Regression-Test set score: 0.21</code></pre>\n<p>As shown, lasso performs quite disappointingly, and it&#8217;s a sign of underfitting. The lasso model doesn&#8217;t work well because most of the coefficients have become exactly zero. If we want to know the exact number of features that have been used in the model, we can use the following code:</p>\n<pre><code class=\"language-python\">print(f\"Number of features: {sum(lasso.coef_ != 0)}\")</code></pre>\n<pre><code class=\"language-text\">    Number of features: 4</code></pre>\n<p>This means that only 4 of the 104 features in the training set are used in the lasso regression model, while the rest are ignored.</p>\n<p>Let&#8217;s adjust <code>alpha</code> to reduce underfitting by decreasing its value to 0.01:</p>\n<pre><code class=\"language-python\">lasso = Lasso(alpha=0.01).fit(X_train, y_train)\nprint(\"Lasso Regression-Training set score: {:.2f}\".format(lasso.score(X_train, y_train)))\nprint(\"Lasso Regression-Test set score: {:.2f}\".format(lasso.score(X_test, y_test)))</code></pre>\n<pre><code class=\"language-text\">    Lasso Regression-Training set score: 0.90\n    Lasso Regression-Test set score: 0.77</code></pre>\n<pre><code class=\"language-text\">    /Users/mohammadmehdi/opt/anaconda3/lib/python3.8/site-packages/sklearn/linear_model/_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 4.690e+01, tolerance: 3.233e+00\n      model = cd_fast.enet_coordinate_descent(</code></pre>\n<p>Rerunning the code below shows that by decreasing <code>alpha</code>, the Lasso model uses 32 of the 104 features: </p>\n<pre><code class=\"language-python\">print(f\"Number of features: {sum(lasso.coef_ != 0)}\")</code></pre>\n<pre><code class=\"language-text\">    Number of features: 32</code></pre>\n<p>Although we can reduce <code>alpha</code> even more, it seems that its optimum value is <code>0.01</code>.</p>\n<p>The last technique that we&#8217;re going to use is elastic net. Let&#8217;s see how well it does.</p>\n<pre><code class=\"language-python\">from sklearn.linear_model import ElasticNet\nelastic_net = ElasticNet(alpha=0.01, l1_ratio=0.01).fit(X_train, y_train)\nprint(f\"Elastic Net-Training set score: {elastic_net.score(X_train, y_train):.2f}\")\nprint(f\"Elastic Net-Test set score: {elastic_net.score(X_test, y_test):.2f}\")</code></pre>\n<pre><code class=\"language-text\">    Elastic Net-Training set score: 0.84\n    Elastic Net-Test set score: 0.70</code></pre>\n<pre><code class=\"language-text\">    /Users/mohammadmehdi/opt/anaconda3/lib/python3.8/site-packages/sklearn/linear_model/_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.474e+02, tolerance: 3.233e+00\n      model = cd_fast.enet_coordinate_descent(</code></pre>\n<hr />\n<p><strong>NOTE</strong></p>\n<p>In general, to avoid overfitting, the regularized models are preferable to a plain linear regression model. In most scenarios, ridge works well. But in case you&#8217;re not certain about using lasso or elastic net, elastic net is a better choice because, as we&#8217;ve seen, lasso removes strongly correlated features.</p>\n<hr />\n<h2>Conclusion</h2>\n<p>This tutorial explored different ways of avoiding overfitting in linear machine learning models. We discussed why overfitting happens and what ridge, lasso, and elastic net regression methods are. We also applied these techniques to the Boston housing dataset and compared the results. Some other techniques, such as early stop and dropout, can be used for regularizing complex models, while the latter is mainly used for regularizing artificial neural networks.</p>\n<p>I hope that you have learned something new today. Feel free to connect with me on <a href=\"https://www.linkedin.com/in/lotfinejad/\">LinkedIn</a> or <a href=\"https://twitter.com/lotfinejad\">Twitter</a>.</p>\n",
  "wfw:commentRss": "https://www.dataquest.io/blog/regularization-in-machine-learning/feed/",
  "slash:comments": 0
}