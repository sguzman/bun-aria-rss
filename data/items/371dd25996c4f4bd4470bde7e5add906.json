{
  "id": "tag:blogger.com,1999:blog-8698702854482141883.post-3114568738774268307",
  "published": "2022-07-19T09:00:00.001-07:00",
  "updated": "2022-09-06T14:16:33.655-07:00",
  "category": [
    "",
    "",
    "",
    ""
  ],
  "title": "Cirq Turns 1.0",
  "content": "<div><br /></div><div style=\"text-align: left;\"><a href=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjFFmF26AncEHQik8JLSjlyjXkv0Tm6KcOksXFnIzgOhhKL_qv-mrOIcXedLtRXZgrOkleJlbz54SEVB8uSwG2Egy9fcO6bW39NeH7m4x__gIPi2eXoXGedKsbRMkL3ty6YEouWwiSvoiTOE1qkc2b3ZqJgKfFMXP46exaRsnGEXD1PP4xGEI2UEjtJ/s1600/quantumai-cirq-1.0-02.png\" style=\"margin-left: 1em; margin-right: 1em; text-align: center;\"><img border=\"0\" data-original-height=\"700\" data-original-width=\"1600\" height=\"288\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjFFmF26AncEHQik8JLSjlyjXkv0Tm6KcOksXFnIzgOhhKL_qv-mrOIcXedLtRXZgrOkleJlbz54SEVB8uSwG2Egy9fcO6bW39NeH7m4x__gIPi2eXoXGedKsbRMkL3ty6YEouWwiSvoiTOE1qkc2b3ZqJgKfFMXP46exaRsnGEXD1PP4xGEI2UEjtJ/w658-h288/quantumai-cirq-1.0-02.png\" width=\"658\" /></a></div><div style=\"text-align: left;\"><br /></div>Today we are excited to announce the first full version release of the open source quantum programming <a href=\"https://quantumai.google/cirq\" target=\"_blank\">framework Cirq: Cirq 1.0</a>. Cirq is a Python framework for writing, running, and analyzing the results of quantum computer programs. It was designed for near-term quantum computers, those with a few hundred qubits and few thousands of quantum gates. The significance of the 1.0 release is that Cirq has support for the vast majority of workflows for these systems and is considered to be a stable API that we will only update with breaking changes at major version numbers.<div><br />Getting to Cirq 1.0 is the culmination of a large amount of hard work by hundreds of contributors from Google, industry, and academia. We have been running a weekly meeting, called the “Cirq Cync”, for over four years where community members gather to discuss work on Cirq, bugs, and to generally tell terrible but amusing quantum programming jokes. We’re proud of this inclusive community, and we’ve been particularly happy to see the growth of many software developers into quantum computing experts, and quantum computing experts into solid software developers. One of our contributors, Victory Omole, <a href=\"https://unitary.fund/posts/2022_wittek_prize.html\">won</a> the 2021 Witteck Quantum Prize for Open Source Software. Way to go Victory!<br /><br />The first commit to Cirq on GitHub (an internal version of Cirq at Google existed prior to this) was on Dec 19, 2017 by Craig Gidney, and we publicly <a href=\"https://ai.googleblog.com/2018/07/announcing-cirq-open-source-framework.html\" target=\"_blank\">announced</a> Cirq in July of 2018. 3,200+ commits later to the GitHub repo, in the hands of the team at Google and the Cirq community, we’ve seen Cirq help accomplish some amazing things:<br /><ul style=\"text-align: left;\"><li>Cirq is the lingua franca that Google’s hardware team uses to write quantum programs that run on Google’s quantum computing hardware. Because of this, we have been able to post open source code in our <a href=\"https://github.com/quantumlib/ReCirq\" target=\"_blank\">ReCirq</a> repo for these experiments for anyone to examine and extend. A few highlights of the past few years:</li></ul><ul style=\"text-align: left;\"><ul><li> “Realizing topologically ordered states on a quantum processor”, K. J. Satzinger et al., Science 374 6572, 1237-1241 (2021) [<a href=\"https://www.science.org/stoken/author-tokens/ST-191/full\" target=\"_blank\">paper</a>] [<a href=\"https://quantumai.google/cirq/experiments/toric_code/toric_code_ground_state\" target=\"_blank\">ReCirq code</a>]</li></ul></ul><ul style=\"text-align: left;\"><ul><li>“Information scrambling in quantum circuits”, X. Mi, P. Roushan, C. Quintana et al, Science 374, 6574 1479-1483 (2021) [<a href=\"https://www.science.org/doi/10.1126/science.abg5029\" target=\"_blank\">paper</a>] [<a href=\"https://quantumai.google/cirq/experiments/otoc/otoc_example\" target=\"_blank\">ReCirq code</a>]</li></ul></ul><ul style=\"text-align: left;\"><ul><li>“Hartree-Fock on a superconducting qubit quantum computer”, F. Arute et al., Science 369, 6507 1084--1089 (2020) [<a href=\"https://www.science.org/doi/10.1126/science.abb9811\" target=\"_blank\">paper</a>] [<a href=\"https://quantumai.google/cirq/experiments/hfvqe/quickstart\" target=\"_blank\">ReCirq code</a>]</li></ul></ul><ul style=\"text-align: left;\"><li>A healthy community of libraries have now been built on top of Cirq, enabling different quantum computing research areas. <a href=\"https://github.com/quantumlib/Cirq/network/dependents?package_id=UGFja2FnZS03MzM0NTIzNA%3D%3D\" target=\"_blank\">These libraries</a> include:</li></ul><ul style=\"text-align: left;\"><ul><li><a href=\"https://www.tensorflow.org/quantum\" target=\"_blank\">TensorFlow Quantum</a>: a tool for exploring quantum machine learning. Using TensorFlow Quantum researchers <a href=\"https://www.nature.com/articles/s41467-021-22539-9\" target=\"_blank\">trained</a> a machine learning model on 30 qubits at a rate of 1.1 petaflops per second (1.1 x 1015 operations per second).</li></ul></ul><ul style=\"text-align: left;\"><ul><li><a href=\"https://quantumai.google/openfermion\" target=\"_blank\">OpenFermion</a>: an open source tool for quantum computations involved in chemistry simulations.</li></ul></ul><ul style=\"text-align: left;\"><ul><li><a href=\"https://cqcl.github.io/tket/pytket/api/index.html\">Pytket</a> (<a href=\"https://pypi.org/project/pytket-cirq\" target=\"_blank\">pytkey-cirq</a>): an open source Python tool for optimizing and manipulating quantum circuits.</li></ul></ul><ul style=\"text-align: left;\"><ul><li><a href=\"https://mitiq.readthedocs.io/en/v.0.1a2/read_README.html\" target=\"_blank\">Mitiq</a>: an open source library developed by the non-profit Unitary fund for error mitigation techniques developed by the non-profit Unitary fund.</li></ul></ul><ul style=\"text-align: left;\"><ul><li><a href=\"https://quantumai.google/qsim\" target=\"_blank\">Qsim</a>: a high performance state vector simulator written using AVX/FMA vectorized instructions with <a href=\"https://quantumai.google/qsim/tutorials/gcp_gpu\" target=\"_blank\">optional GPU acceleration</a>. <a href=\"https://quantumai.google/qsim/tutorials/qsimcirq\">qsimcirq</a> is the Cirq interface one can use to access qsim from Cirq.</li></ul></ul><ul style=\"text-align: left;\"><li>Numerous quantum computing cloud services from companies in the industry have also integrated/standardized Cirq. Programs written in Cirq can be used to run through <a href=\"https://quantumai.google/cirq/tutorials/aqt/getting_started\" target=\"_blank\">AQT</a>, <a href=\"https://quantumai.google/cirq/tutorials/ionq/getting_started\" target=\"_blank\">IonQ</a>, <a href=\"https://quantumai.google/cirq/tutorials/pasqal/getting_started\" target=\"_blank\">Pascal</a>, <a href=\"https://quantumai.google/cirq/tutorials/rigetti/getting_started\" target=\"_blank\">Rigetti</a>, and <a href=\"https://github.com/iqm-finland/cirq-on-iqm\" target=\"_blank\">IQM</a> vendors. In addition, Cirq can be used on <a href=\"https://quantumai.google/cirq/tutorials/azure-quantum/getting_started_honeywell\" target=\"_blank\">Azure Quantum</a> to run on the hardware supported by Azure Quantum. Finally, one can get realistic noise simulations of Google’s quantum computing hardware using our newly released <a href=\"https://blog.google/technology/research/our-new-quantum-virtual-machine-will-accelerate-research-and-help-people-learn-quantum-computing/\" target=\"_blank\">Quantum Virtual Machine</a>.</li></ul><ul style=\"text-align: left;\"><li>Cirq is not just for stuffy research. Cirq has also been used to help develop Quantum Chess, a version of chess that uses superposition and entanglement. <a href=\"https://quantumai.google/cirq/experiments/unitary/quantum_chess/concepts\" target=\"_blank\">This notebook</a> shows you how the game of Quantum Chess can be programmed using Cirq.</li></ul><span id=\"docs-internal-guid-d5e102b6-7fff-c1c8-c213-c7ecfe804a59\">Cirq moving to its first full version does not just come with new features (see <a href=\"https://github.com/quantumlib/Cirq/releases/tag/v1.0.0\">1.0 release notes</a>), but also with more guarantees about stability. Cirq uses <a href=\"https://semver.org/\" target=\"_blank\">semantic versioning</a>, which means that future point release of Cirq will be compatible with the full version release. For example, version 1.1 of Cirq will not introduce breaking changes to Cirq’s interfaces from version 1.0; only at major version bumps (from 1.x to 2.0, for example) will breaking changes occur. <br /><br />When we began working on Cirq, quantum computers consisted of only a few qubits and a few quantum gates on these qubits. Building Cirq and the supporting software for these custom systems and having them start to scale to hundreds of qubits over the past (nearly) five years has taught us many lessons. One key takeaway from these lessons is that: <b>As quantum computing hardware continues to grow in scale and complexity, we expect that making software to support this growth will be essential to continue meaningful research and progress.</b> In the next five years, with hardware expected to reach hundreds or even thousands of qubits, the software that is developed for quantum computing will need to have a careful eye set on supporting these bigger and bigger systems. Going forward we will need an ever wider set of frameworks, programming languages, and libraries to achieve quantum computing’s promise. <br /><br /><b>Acknowledgements<br /></b><br />We are indebted to all <a href=\"https://github.com/quantumlib/Cirq/graphs/contributors\" target=\"_blank\">169 contributors</a> to the Cirq github repo, and the many more who have filed issues and used Cirq in their own software. A particular shout out to the original lead of Cirq, Craig Gidney, to Cirq’s second lead, ‪Bálint Pató who guided Cirq through its middle ages, and to Alan Ho and Catherine Vollgraff Heidweiller for product wisdom.  A special thanks to the core Cirq contributors including Doug Strain, Matthew Neely, Tanuj Khatter, Dax Fohl, Adam Zalcman, Kevin Sung, Matt Harrigan, Casey Duckering, Orion Martin, Smit Sanghavi, Bryan O'Gorman, Wojciech Mruczkiewicz, Ryan LaRose, Tony Bruguier, Victory Omole, and Cheng Xing, and our documentarians Auguste Hirth and Abe Asfaw.<br /><br /><i>By Dave Bacon and Michael Broughton – Quantum AI Team</i><br /></span></div>",
  "link": [
    "",
    "",
    ""
  ],
  "author": {
    "name": "Open Source Programs Office",
    "uri": "http://www.blogger.com/profile/11192158996903493674",
    "email": "noreply@blogger.com",
    "gd:image": ""
  },
  "media:thumbnail": ""
}