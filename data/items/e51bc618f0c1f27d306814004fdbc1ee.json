{
  "title": "solving y=mx+b... with jax on a tpu pod slice",
  "link": "http://matpalm.com/blog/ymxb_pod_slice",
  "category": [
    "tpu",
    "ensemble_nets",
    "jax",
    "projects",
    "haiku"
  ],
  "guid": "http://matpalm.com/blog/ymxb_pod_slice",
  "description": "solving y=mx+b... with jax on a tpu pod slice",
  "content:encoded": "<h1>from jax fundamentals to running on a tpu pod slice</h1>\n<p>this 4 (and a bit) part tute series starts with\n   <a href=\"https://jax.readthedocs.io/en/latest/\">jax</a>\n   fundamentals, builds up to describing a data parallel approach to training on a\n   <a href=\"https://cloud.google.com/tpu\">cloud tpu pod slice</a>, and\n   finishes with a tpu pod slice implementation of\n   <a href=\"http://matpalm.com/blog/ensemble_nets\">ensemble nets</a>....\n   all with the goal of solving 1d <code>y=mx+b</code>\n</p>\n<p>and though it may seem like a bit of overkill it turns out it's a good example\n   to work through so that we can focus on the library support without having\n   to worry about the modelling.\n</p>\n\n<h2>part 1: some jax basics</h2>\n<p>in this first section we introduce some jax fundamentals;\n   e.g. make_jaxpr, grad, jit, vmap & pmap.\n</p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/W1vfBDFLm7Q\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n\n<p>colab: <a href=\"https://colab.research.google.com/drive/1vmEckPE6o9pDJF1tctPW5yyuAIVZ817B\">01 pmap jit vmap oh my.ipynb</a>\n</p>\n\n<h2>part 2: solving y=mx+b</h2>\n<p>in part 2 we use the techniques from part 1 to solve <code>y=mx+b</code> in pure jax. we'll also\n   introduce\n   <a href=\"https://jax.readthedocs.io/en/latest/pytrees.html\">pytrees</a>\n   and various\n   <a href=\"https://jax.readthedocs.io/en/latest/jax.tree_util.html\">tree_utils</a>\n   for manipulating them.\n</p>\n<p>we run first on a single device and work up to using\n   <a href=\"https://jax.readthedocs.io/en/latest/jax.html#jax.pmap\">pmap</a> to demonstrate a\n   simple data parallelism approach. along the way we'll do a small detour to a tpu pod slice\n   to illustrate the difference in a multi host setup.\n</p>\n<p>( note: the experience as described here for a pod slice isn't publically available yet; but sign up via the\n   <a href=\"http://goo.gle/jax-tpu-signup\">JAX on Cloud TPU Interest Form</a> to get more info. see also this\n   <a href=\"https://docs.google.com/presentation/d/1eBfNKT3D3lEWtcn4mkgvvitKZTU7HSn4f3fGHqYgpeA/\">JAX on Cloud TPUs (NeurIPS 2020)</a> talk )\n</p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/XXsSZlHzHcw\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n\n<p>colab: <a href=\"https://colab.research.google.com/drive/1qkjyNtmPzQIYHAY7l1YqvMgTOfbQAfgA?usp=sharing\">02 y mx b on a tpu.ipynb</a>\n</p>\n\n<h2>part 3: introducing haiku and optax</h2>\n<p>next we introduce <a href=\"https://github.com/deepmind/dm-haiku\">haiku</a> as a way\n   of defining our model and <a href=\"https://github.com/deepmind/dm-haiku\">optax</a> as a\n   library to provide standard optimisers. to illustrate there use we'll do a minimal\n   port of our model and training loop to use them.\n</p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/8-N1-7lPWOs\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n\n<p>colab: <a href=\"https://colab.research.google.com/drive/1_MDXCnwmLTPPm4qJnpHYj-X0E-a-ev6H?usp=sharing\">03 y mx b in haiku.ipynb</a>\n</p>\n\n<h2>part 4: ensemble nets</h2>\n<p>in part 4 we'll reimplement <a href=\"http://matpalm.com/blog/ensemble_nets\">ensemble nets</a>\n   for this trivial model, continuing to do things in a way that supports\n   running on a tpu pod slice.\n</p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/_-ftTbABKuk\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n\n<p>colab: <a href=\"https://colab.research.google.com/drive/1uWZQQfp5T4nKRdg_kgV93tIzkA316f2O?usp=sharing\">04 y mx b haiku ensemble.ipynb</a>\n</p>\n\n<h2>part 5: some sanity</h2>\n<p>to wrap up we acknowledge that though tpu pod slices and data parallel\n   approaches <em>are</em> fun we could have just solved this in a single\n   calculation using the normal equation... :D\n</p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/5hKse-PUo0k\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n\n<p>colab: <a href=\"https://colab.research.google.com/drive/1sX5plJfIesT-5IUU-d9U-mimXtWOXEE3?usp=sharing\">05 booooooooooooooooring.ipynb</a>\n</p>\n\n<h1>what a way to solve <code>y=mx+b</code> !!!</h1>\n<img src=\"/blog/imgs/2021/ymxb/tenor.gif\"/>"
}