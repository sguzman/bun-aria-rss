{
  "title": "Newton’s method with 10 lines of Python",
  "link": "",
  "published": "2016-02-09T14:51:00+00:00",
  "updated": "2016-02-09T14:51:00+00:00",
  "id": "https://danielhomola.com/learning/newtons-method-with-10-lines-of-python",
  "content": "<h2 id=\"problem-setting\">Problem setting</h2>\n<p style=\"text-align: justify;\">Newton's method, which is an old numerical approximation technique that could be used to find the roots of complex polynomials and any differentiable function. We'll code it up in 10 lines of Python in this post.</p>\n<p style=\"text-align: justify;\">Let's say we have a complicated polynomial:</p>\n<p style=\"text-align: center;\">$latex f(x)=6x^5-5x^4-4x^3+3x^2 $</p>\n<p style=\"text-align: justify;\">and we want to find its roots. Unfortunately we know from the <a href=\"https://www.wikiwand.com/en/Galois_theory\">Galois theory</a> that there is no formula for a 5th degree polynomial so we'll have to use numeric methods. Wait a second. What's going on? We all learned the quadratic formula in school, and there are formulas for cubic and quartic polynomials, but Galois proved that no such \"root-finding\" formula exist for fifth or higher degree polynomials, that uses only the usual algebraic operations (addition, subtraction, multiplication, division) and application of radicals (square roots, cube roots, etc).</p>\n\n<h3 id=\"bit-more-maths-context\">Bit more maths context</h3>\n<p style=\"text-align: justify;\">Some <a href=\"https://www.reddit.com/user/pqnelson\">nice</a> <a href=\"https://www.reddit.com/user/KalROFL\">guys</a> pointed out on reddit that I didn't quite get the theory right. Sorry about that, I'm no mathematician by any means. It turns out that this polynomial could be factored into $latex x^2(x-1)(6x^2 + x - 3)$ and solved with traditional cubic formula.</p>\n<p>Also the theorem I referred to is the <a href=\"https://en.wikipedia.org/wiki/Abel%E2%80%93Ruffini_theorem\">Abel-Ruffini Theorem</a> and it only applies to the solution to the general polynomial of degree five or greater. Nonetheless the example is still valid, and demonstrates how would you apply Newton's method, to any polynomial, so let's crack on.</p>\n\n<h3 id=\"simplest-way-to-solve-it\">Simplest way to solve it</h3>\n<p style=\"text-align: justify;\">So in these cases we have to resort to numeric linear approximation. A simple way would be to use the <a href=\"https://www.wikiwand.com/en/Intermediate_value_theorem\">intermediate value theorem</a>, which states that if $latex f(x)$ is continuous on $latex [a,b]$ and $latex f(a) &lt; y&lt; f(b)$, then there is an $latex x$ between $latex a$ and $latex b$ so that $latex f(x)=y$.</p>\n<p style=\"text-align: justify;\">We could exploit this by looking for an $latex x_1$ where $latex f(x_1)&gt;0$ and an $latex x_2$ where $latex f(x_2)&lt;0$, and then we could be certain that $latex f(x)=0$ must be between $latex x_1$ and $latex x_2$. So we could  check $latex x_3=\\frac{x_2-x_1}{2}$, and find that $latex f(x_3)$ will be positive, then continue with$latex x_4=\\frac{x_2-x_3}{2}$ which would be negative and our proposed $latex x_n$ would become closer and closer to $latex f(x_n)=0$. This method however can be pretty slow, so Newton devised a better way to speed things up (when it works).</p>\n\n<h3 id=\"how-newton-solved-it\">How Newton solved it</h3>\n<p style=\"text-align: justify;\">If you look at the figure below, you'll see the plot of our polynomial. It has three roots at 0, 1, and somewhere in-between. So how do we find these?</p>\n<p style=\"text-align: justify;\">In Newton's method we take a random point $latex f(x_0)$, then draw a tangent line through $latex x_0, f(x_0)$, using the derivative $latex f'(x_0)$. The point $latex x_1$ where this tangent line crosses the $latex x$ axis will become the next proposal we check. We calculate the tangent line at $latex f'(x_1)$ and find $latex x_2$. We carry on, and as we do $latex |f(x_n)| \\to 0$, or in other words we can make our approximation as close to zero as we want, provided we are willing to continue with the number crunching. Using the fact that the slope of tangent (by the definition of derivatives) at $latex x_n$ is $latex f'(x_n)$ we can derive the formula for $latex x_{n+1}$, i.e. where the tangent crosses the $latex x$ axis:</p>\n<p style=\"text-align: center;\">$latex x_{n+1}=x_n-\\frac{f(x_n)}{f'(x_n)}$</p>\n<p><img src=\"/assets/images/newton_polynomial.png\" alt=\"Newton's method\" /></p>\n\n<h2 id=\"code\">Code</h2>\n<p style=\"text-align: justify;\">With all this in mind it's easy to write an algorithm that approximates $f(x)=0$ with arbitrary error $latex \\varepsilon$. Obviously in this example depending on where we start $latex x_0$ we might find different roots.</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-python\" data-lang=\"python\"><table class=\"rouge-table\"><tbody><tr><td class=\"gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre></td><td class=\"code\"><pre><span class=\"k\">def</span> <span class=\"nf\">dx</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"nb\">abs</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"o\">-</span><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">))</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">newtons_method</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"n\">df</span><span class=\"p\">,</span> <span class=\"n\">x0</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">):</span>\n    <span class=\"n\">delta</span> <span class=\"o\">=</span> <span class=\"n\">dx</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"n\">x0</span><span class=\"p\">)</span>\n    <span class=\"k\">while</span> <span class=\"n\">delta</span> <span class=\"o\">&amp;</span><span class=\"n\">gt</span><span class=\"p\">;</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n        <span class=\"n\">x0</span> <span class=\"o\">=</span> <span class=\"n\">x0</span> <span class=\"o\">-</span> <span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">x0</span><span class=\"p\">)</span><span class=\"o\">/</span><span class=\"n\">df</span><span class=\"p\">(</span><span class=\"n\">x0</span><span class=\"p\">)</span>\n        <span class=\"n\">delta</span> <span class=\"o\">=</span> <span class=\"n\">dx</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"n\">x0</span><span class=\"p\">)</span>\n    <span class=\"k\">print</span> <span class=\"s\">'Root is at: '</span><span class=\"p\">,</span> <span class=\"n\">x0</span>\n    <span class=\"k\">print</span> <span class=\"s\">'f(x) at root is: '</span><span class=\"p\">,</span> <span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">x0</span><span class=\"p\">)</span>\n</pre></td></tr></tbody></table></code></pre></figure>\n\n<p>There you go, we’are done in 10 lines (9 without the blank line), even less without the print statements.</p>\n\n<h3 id=\"in-use\">In use</h3>\n\n<p style=\"text-align: justify;\">So in order to use this, we need two functions, $latex f(x)$ and $latex f'(x)$. For this polynomial these are:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-python\" data-lang=\"python\"><table class=\"rouge-table\"><tbody><tr><td class=\"gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n</pre></td><td class=\"code\"><pre><span class=\"k\">def</span> <span class=\"nf\">f</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"mi\">6</span><span class=\"o\">*</span><span class=\"n\">x</span><span class=\"o\">**</span><span class=\"mi\">5</span><span class=\"o\">-</span><span class=\"mi\">5</span><span class=\"o\">*</span><span class=\"n\">x</span><span class=\"o\">**</span><span class=\"mi\">4</span><span class=\"o\">-</span><span class=\"mi\">4</span><span class=\"o\">*</span><span class=\"n\">x</span><span class=\"o\">**</span><span class=\"mi\">3</span><span class=\"o\">+</span><span class=\"mi\">3</span><span class=\"o\">*</span><span class=\"n\">x</span><span class=\"o\">**</span><span class=\"mi\">2</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">df</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"mi\">30</span><span class=\"o\">*</span><span class=\"n\">x</span><span class=\"o\">**</span><span class=\"mi\">4</span><span class=\"o\">-</span><span class=\"mi\">20</span><span class=\"o\">*</span><span class=\"n\">x</span><span class=\"o\">**</span><span class=\"mi\">3</span><span class=\"o\">-</span><span class=\"mi\">12</span><span class=\"o\">*</span><span class=\"n\">x</span><span class=\"o\">**</span><span class=\"mi\">2</span><span class=\"o\">+</span><span class=\"mi\">6</span><span class=\"o\">*</span><span class=\"n\">x</span>\n</pre></td></tr></tbody></table></code></pre></figure>\n\n<p style=\"text-align: justify;\">Now we can simply find the three roots with:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-python\" data-lang=\"python\"><table class=\"rouge-table\"><tbody><tr><td class=\"gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre></td><td class=\"code\"><pre><span class=\"n\">x0s</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"p\">.</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"k\">for</span> <span class=\"n\">x0</span> <span class=\"ow\">in</span> <span class=\"n\">x0s</span><span class=\"p\">:</span>\n    <span class=\"n\">newtons_method</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"n\">df</span><span class=\"p\">,</span> <span class=\"n\">x0</span><span class=\"p\">,</span> <span class=\"mf\">1e-5</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Root is at:  0\n# f(x) at root is:  0\n# Root is at:  0.628668078167\n# f(x) at root is:  -1.37853879978e-06\n# Root is at:  1\n# f(x) at root is:  0</span>\n</pre></td></tr></tbody></table></code></pre></figure>\n\n<h1 id=\"summary\">Summary</h1>\n<p>All of the above code, and some additional comparison test with the <code class=\"language-plaintext highlighter-rouge\">scipy.optimize.newton</code> method can be found in this <a href=\"https://gist.github.com/danielhomola/de1726bfc7330b2c9b2a\">Gist</a>. And don’t forget, if you find it too much trouble differentiating your functions, just use <a href=\"http://live.sympy.org/\">SymPy</a>, I wrote about it <a href=\"http://danielhomola.com/2016/02/06/solving-real-world-problems-with-sympy/\">here</a>.</p>\n\n<p>Newton’s method is pretty powerful but there could be problems with the speed of convergence, and awfully wrong initial guesses might make it not even converge ever, see <a href=\"https://www.wikiwand.com/en/Newton's_method#/Practical_considerations\">here</a>. Nonetheless I hope you found this relatively useful.. Let me know in the comments.</p>",
  "author": {
    "name": "danielhomola"
  },
  "category": [
    "",
    "",
    "",
    ""
  ],
  "summary": "One of the oldest tricks in the book of numerical optimization"
}