{
  "title": "How random is JavaScript's Math.random()?",
  "link": "",
  "published": "2013-06-30T00:00:00-07:00",
  "updated": "2022-11-03T04:16:07-07:00",
  "author": {
    "name": "Greg Reda"
  },
  "id": "tag:www.gregreda.com,2013-06-30:/2013/06/30/testing-javascripts-random-function/",
  "summary": "<p>A few weeks back, I was talking with my friend <a href=\"http://mollybierman.tumblr.com\">Molly</a> about personal domains and realized that her nickname, Bierface, was available.  The exchange basically went like this:</p>\n<blockquote>\n<p>Me: I should buy bierface.com and just put up a ridiculous picture of you.</p>\n<p>Molly: You would have to do a â€¦</p></blockquote>",
  "content": "<p>A few weeks back, I was talking with my friend <a href=\"http://mollybierman.tumblr.com\">Molly</a> about personal domains and realized that her nickname, Bierface, was available.  The exchange basically went like this:</p>\n<blockquote>\n<p>Me: I should buy bierface.com and just put up a ridiculous picture of you.</p>\n<p>Molly: You would have to do a slideshow. Too many gems.</p>\n</blockquote>\n<p><a href=\"http://www.bierface.com\">So I did just that</a>, switching randomly between 14 pictures every time the page is loaded.  The laughs from it have been well worth the $10 spent purchasing the domain.</p>\n<p>She started to question the randomness though.  Here's what the code that loads each image looks like:</p>\n<div class=\"highlight\"><pre><span></span><code><span class=\"p\">&lt;</span><span class=\"nt\">a</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">&quot;http://mollybierman.tumblr.com&quot;</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">img</span> <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">&quot;bierface&quot;</span> <span class=\"na\">src</span><span class=\"o\">=</span><span class=\"s\">&quot;&quot;</span><span class=\"p\">/&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">a</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">script</span> <span class=\"na\">type</span><span class=\"o\">=</span><span class=\"s\">&quot;text/javascript&quot;</span><span class=\"p\">&gt;</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"kd\">var</span><span class=\"w\"> </span><span class=\"nx\">n</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Math</span><span class=\"p\">.</span><span class=\"nx\">ceil</span><span class=\"p\">(</span><span class=\"nb\">Math</span><span class=\"p\">.</span><span class=\"nx\">random</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"mf\">14</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">getElementById</span><span class=\"p\">(</span><span class=\"s2\">&quot;bierface&quot;</span><span class=\"p\">).</span><span class=\"nx\">src</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">&quot;./pictures/&quot;</span><span class=\"o\">+</span><span class=\"nx\">n</span><span class=\"o\">+</span><span class=\"s2\">&quot;.jpg&quot;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n</code></pre></div>\n\n<p>All we're doing is creating an empty <em><code>&lt;img&gt;</code></em> element, and then changing the src attribute of that element via JavaScript.  The first line of JavaScript uses a combination of <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/ceil\">Math.ceil()</a> and <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random\">Math.random()</a> to get a random integer between 1 and 14 (which are how the images are named).  The second line uses that integer to create a file path and tells our <em><code>&lt;img&gt;</code></em> element to use that path as the src for the image.</p>\n<p>Since the image is loaded by your web client, this seemed like a great opportunity to learn the very basics of grabbing client-side data - I could write some code to repeatedly get which image was loaded in order to determine how random <em>Math.random()</em> truly is.</p>\n<h4>The Setup</h4>\n<p>We're going to be using <a href=\"http://jeanphix.me/Ghost.py/\">Ghost.py</a> to simulate a <a href=\"http://en.wikipedia.org/wiki/WebKit\">WebKit</a> client.  Ghost.py requires <a href=\"http://en.wikipedia.org/wiki/PyQt\">PyQt</a> or <a href=\"http://en.wikipedia.org/wiki/PySide\">PySide</a>, so you'll want to grab one of those, too.  I'm on OSX 1.8.2 and using PySide 1.1.0 for Python 2.7, which you can get <a href=\"http://qt-project.org/wiki/PySide_Binaries_MacOSX\">here</a>.  You'll also need to grab Qt 4.7, which you can find <a href=\"http://packages.kitware.com/item/3736\">here</a>.</p>\n<h4>The Code</h4>\n<p>With a little Python and Ghost.py, we can simulate a browser, allowing us to execute JavaScript telling us which image was loaded.  We can also use <a href=\"http://matplotlib.org/\">matplotlib</a> to plot the distribution.</p>\n<div class=\"highlight\"><pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">ghost</span> <span class=\"kn\">import</span> <span class=\"n\">Ghost</span>\n<span class=\"kn\">import</span> <span class=\"nn\">matplotlib.pyplot</span> <span class=\"k\">as</span> <span class=\"nn\">plt</span>\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n\n<span class=\"n\">ghost</span> <span class=\"o\">=</span> <span class=\"n\">Ghost</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># JavaScript to grab the src file name for the image loaded</span>\n<span class=\"n\">js</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;document.getElementById(&#39;bierface&#39;).src.substr(33);&quot;</span>\n\n<span class=\"c1\"># initialize zero&#39;d out dictionary to hold image counts</span>\n<span class=\"c1\"># this way we can draw a nice, empty, base plot before we have actual values</span>\n<span class=\"n\">counts</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">),</span> <span class=\"p\">[</span><span class=\"mi\">0</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">)]))</span>\n\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">xrange</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1002</span><span class=\"p\">):</span>\n    <span class=\"c1\"># draw empty plot on first pass</span>\n    <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"o\">!=</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n        <span class=\"n\">page</span><span class=\"p\">,</span> <span class=\"n\">page_resources</span> <span class=\"o\">=</span> <span class=\"n\">ghost</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"s1\">&#39;http://www.bierface.com&#39;</span><span class=\"p\">)</span>\n        <span class=\"n\">image</span> <span class=\"o\">=</span> <span class=\"n\">ghost</span><span class=\"o\">.</span><span class=\"n\">evaluate</span><span class=\"p\">(</span><span class=\"n\">js</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"n\">image</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">image</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s1\">&#39;.&#39;</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">])</span> <span class=\"c1\"># grab just the image number</span>\n        <span class=\"n\">counts</span><span class=\"p\">[</span><span class=\"n\">image</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n\n    <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">bar</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">),</span> <span class=\"n\">counts</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">(),</span> <span class=\"n\">align</span><span class=\"o\">=</span><span class=\"s1\">&#39;center&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">xticks</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">),</span> <span class=\"n\">counts</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">())</span>\n    <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">xlabel</span><span class=\"p\">(</span><span class=\"s1\">&#39;Image&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">ylabel</span><span class=\"p\">(</span><span class=\"s1\">&#39;# of times shown&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">title</span><span class=\"p\">(</span><span class=\"s1\">&#39;n = </span><span class=\"si\">{0}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">zfill</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)))</span>\n    <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">grid</span><span class=\"p\">()</span>\n\n    <span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;</span><span class=\"si\">{0}</span><span class=\"s1\">/images/</span><span class=\"si\">{1}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">getcwd</span><span class=\"p\">(),</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">zfill</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">))</span>\n    <span class=\"n\">save</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"n\">close</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n<span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">system</span><span class=\"p\">(</span><span class=\"s1\">&#39;ffmpeg -f image2 -r 10 -i images/</span><span class=\"si\">%04d</span><span class=\"s1\">.png -s 480x360 random.avi&#39;</span><span class=\"p\">)</span>\n</code></pre></div>\n\n<p>Let's walk though the code:</p>\n<ol>\n<li>Load our libraries and create an instance of the Ghost class.</li>\n<li>Store the JavaScript we'll need to execute in order to grab the image file name into a variable named <em>js</em>.</li>\n<li>The comment should explain this one - we're initializing a zero'd out dictionary called <em>counts</em> so that our first plot doesn't have an x-axis with just one value.  Each key of the dictionary will correspond to one of the images.</li>\n<li>The <a href=\"http://docs.python.org/2/reference/compound_stmts.html#for\">for loop</a> is used to run 1,000 simulations.  My <a href=\"http://docs.python.org/2/library/functions.html#xrange\">xrange</a> usage is a little wacky because I'm using it to title and name the plots - typically <em>xrange</em> starts with 0 and runs up <em>until</em> the number specified (e.g. 1,001 will be the last loop, not 1,002).</li>\n<li>\n<p>This is the section that grabs which image was loaded by simulating a WebKit client with Ghost.py.  This section does not get run on the first pass since we want to start with an empty plot.</p>\n<ol>\n<li>Load bierface.com into our <em>page</em> variable.</li>\n<li>Execute the JavaScript mentioned in #2 and store it in the <em>image</em> variable.  Remember that this will be a string.</li>\n<li>Split the <em>image</em> string so that we just grab the image number loaded.</li>\n<li>Update our dictionary of counts for the given <em>image</em>.</li>\n</ol>\n</li>\n<li>\n<p>Here we're using <a href=\"http://matplotlib.org/api/pyplot_api.html\">matplotlib.pyplot</a> to draw a bar chart.  Thanks to <a href=\"http://www.jesshamrick.com/\">Jess Hamrick</a> for some awesome <a href=\"http://www.jesshamrick.com/2012/09/03/saving-figures-from-pyplot/\">plot-saving boilerplate</a>, which I'm using behind the <em>save</em> function.</p>\n</li>\n<li>Finally, use <a href=\"https://en.wikipedia.org/wiki/FFmpeg\">ffmpeg</a> to stitch our plots together into a video.</li>\n</ol>\n<h4>The Results</h4>\n<p><em>Math.random()</em> is pretty random (though #7 is the clear loser in the video below).  It's easy to think it's not when working with a small sample size, but it's clear the numbers start to even out as the sample size increases.</p>\n<p><center><iframe width=\"480\" height=\"360\" src=\"//www.youtube.com/embed/y-tRXCyBk4w\" frameborder=\"0\" allowfullscreen></iframe></center></p>",
  "category": [
    "",
    "",
    "",
    "",
    ""
  ]
}