{
  "title": "Assuming assumptions",
  "link": "",
  "updated": "2013-02-05T00:00:00+00:00",
  "id": "https://mrocklin.github.io/blog/work/2013/02/05/Assuming",
  "content": "<p>SymPy has two assumptions systems called (unimaginatively) “old assumptions” and “new assumptions.”  They differ in how they manage mathematical attributes.</p>\n\n<h3 id=\"old-assumptions\">Old Assumptions</h3>\n\n<p>In old assumptions attributes are bound to variables</p>\n\n<figure class=\"highlight\">\n  <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">Symbol</span><span class=\"p\">(</span><span class=\"s\">'x'</span><span class=\"p\">,</span> <span class=\"n\">positive</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">Symbol</span><span class=\"p\">(</span><span class=\"s\">'y'</span><span class=\"p\">,</span> <span class=\"n\">positive</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span></code></pre>\n</figure>\n\n<p>These are then composed into expressions.</p>\n\n<figure class=\"highlight\">\n  <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">expr</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"n\">y</span></code></pre>\n</figure>\n\n<p>And we query these expressions directly</p>\n\n<figure class=\"highlight\">\n  <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">expr</span><span class=\"p\">.</span><span class=\"n\">is_positive</span>\n<span class=\"bp\">True</span></code></pre>\n</figure>\n\n<p>The expression and the attributes are woven into the same object.</p>\n\n<h3 id=\"new-assumptions\">New Assumptions</h3>\n\n<p>In new assumptions variables and attributes are maintained separately.</p>\n\n<figure class=\"highlight\">\n  <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">Symbol</span><span class=\"p\">(</span><span class=\"s\">'x'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">Symbol</span><span class=\"p\">(</span><span class=\"s\">'y'</span><span class=\"p\">)</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">facts</span> <span class=\"o\">=</span> <span class=\"n\">Q</span><span class=\"p\">.</span><span class=\"n\">positive</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span> <span class=\"n\">Q</span><span class=\"p\">.</span><span class=\"n\">positive</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">)</span></code></pre>\n</figure>\n\n<p>The construction of mathematical expressions remains unchanged</p>\n\n<figure class=\"highlight\">\n  <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">expr</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"n\">y</span></code></pre>\n</figure>\n\n<p>But querying now requires two inputs, both the expression and the facts.</p>\n\n<figure class=\"highlight\">\n  <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">ask</span><span class=\"p\">(</span><span class=\"n\">Q</span><span class=\"p\">.</span><span class=\"n\">positive</span><span class=\"p\">(</span><span class=\"n\">expr</span><span class=\"p\">),</span> <span class=\"n\">facts</span><span class=\"p\">)</span>\n<span class=\"bp\">True</span></code></pre>\n</figure>\n\n<p>The separation of facts from expressions enables rich logical inference but it\nrequires the management of two separate variables, <code class=\"language-plaintext highlighter-rouge\">expr</code> and <code class=\"language-plaintext highlighter-rouge\">facts</code>, rather\nthan just one, <code class=\"language-plaintext highlighter-rouge\">expr</code>.  It is difficult to consistently pass the extra variable\nthrough all relevant function calls.</p>\n\n<h3 id=\"global-assumptions\">Global assumptions</h3>\n\n<p>One solution to the management problem is to keep all facts in a globally accessible collection.  This removes the need to pass an extra argument between function calls.</p>\n\n<p>This little known feature is already accessible in SymPy</p>\n\n<figure class=\"highlight\">\n  <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># Setup\n</span><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">global_assumptions</span><span class=\"p\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">Q</span><span class=\"p\">.</span><span class=\"n\">positive</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">))</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">global_assumptions</span><span class=\"p\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">Q</span><span class=\"p\">.</span><span class=\"n\">positive</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">))</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># Compute in this context\n</span><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">ask</span><span class=\"p\">(</span><span class=\"n\">Q</span><span class=\"p\">.</span><span class=\"n\">positive</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"n\">y</span><span class=\"p\">))</span>\n<span class=\"bp\">True</span></code></pre>\n</figure>\n\n<p>Unfortunately global variables often cause confusion.  We will invariably add an experimental fact to the global collection and then forget to clean up, polluting future computations.  In this case we need to always remember to clean up after we’re done.</p>\n\n<figure class=\"highlight\">\n  <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># Cleanup\n</span><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">global_assumptions</span><span class=\"p\">.</span><span class=\"n\">remove</span><span class=\"p\">(</span><span class=\"n\">Q</span><span class=\"p\">.</span><span class=\"n\">positive</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">))</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">global_assumptions</span><span class=\"p\">.</span><span class=\"n\">remove</span><span class=\"p\">(</span><span class=\"n\">Q</span><span class=\"p\">.</span><span class=\"n\">positive</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">))</span></code></pre>\n</figure>\n\n<p>This cleanup step is both crucial and forgettable.  We can not trust ourselves\nto remember it.</p>\n\n<h2 id=\"introducing-assuming\">Introducing <code class=\"language-plaintext highlighter-rouge\">assuming</code></h2>\n\n<p>Context managers provide the convenience of global variables with side-effect free security.  This is accomplished through consistent cleanup.</p>\n\n<p>SymPy now includes, <code class=\"language-plaintext highlighter-rouge\">assuming</code>, a context manager for mathematical assumptions.  Here is an example</p>\n\n<figure class=\"highlight\">\n  <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">facts</span> <span class=\"o\">=</span> <span class=\"n\">Q</span><span class=\"p\">.</span><span class=\"n\">positive</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">),</span> <span class=\"n\">Q</span><span class=\"p\">.</span><span class=\"n\">positive</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">)</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">with</span> <span class=\"n\">assuming</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">facts</span><span class=\"p\">):</span>\n<span class=\"p\">...</span>     <span class=\"n\">ask</span><span class=\"p\">(</span><span class=\"n\">Q</span><span class=\"p\">.</span><span class=\"n\">positive</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"n\">y</span><span class=\"p\">))</span>\n<span class=\"bp\">True</span></code></pre>\n</figure>\n\n<p>All <code class=\"language-plaintext highlighter-rouge\">ask</code> calls within this block have global-like access to the knowledge <code class=\"language-plaintext highlighter-rouge\">Q.positive(x)</code> and <code class=\"language-plaintext highlighter-rouge\">Q.positive(y)</code>.  These calls may be at top level as in the example above or buried deeply within function calls.  This arrangement is convenient because we do not need to pass down <code class=\"language-plaintext highlighter-rouge\">facts</code> through all function calls.  This knowledge is pervasive like a global variable but contained within the <code class=\"language-plaintext highlighter-rouge\">with assuming</code> clause.</p>"
}