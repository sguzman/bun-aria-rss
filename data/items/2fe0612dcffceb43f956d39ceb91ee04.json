{
  "title": "Portfolio Risk Analytics and Performance Attribution with Pyfolio",
  "link": "",
  "id": "https://www.georgeho.org/pyfolio/",
  "updated": "2017-12-16T00:00:00Z",
  "published": "2017-12-16T00:00:00Z",
  "content": "<p>I was lucky enough to have the chance to intern at\n<a href=\"https://www.quantopian.com/\">Quantopian</a> this summer. During that time I\ncontributed some exciting stuff to their open-source portfolio analytics engine,\n<a href=\"https://github.com/quantopian/pyfolio\"><code>pyfolio</code></a>, and learnt a truckload of\nstuff while doing it! In this blog post, I&rsquo;ll describe and walk through two of\nthe new features that I authored: the risk and performance attribution tear\nsheets.</p>\n<center>\n<img\nsrc=\"https://www.georgeho.org/assets/images/pyfolio-logo.png\"\nalt=\"Pyfolio logo\">\n</center>\n<h2 id=\"risk-analytics\">Risk Analytics</h2>\n<p>A well-known truth of algorithmic trading is that it&rsquo;s insufficient to merely\nmaximize the returns of your algorithm: you must also do so while minimizing the\nrisk it takes on board. This idea is probably most famously codified in the\n<a href=\"https://en.wikipedia.org/wiki/Sharpe_ratio#Definition\">Sharpe ratio</a>, which\ndivides by the volatility of the returns stream in order to give a measure of\nthe “risk-adjusted returns”.</p>\n<p>However, the volatility of returns is a rather poor proxy for the amount of\n“risk” that an algorithm takes on. What if our algo loaded all of its money in\nthe real estate sector? What if the algo shorted extremely large-cap stocks?\nWhat if half of our portfolio is in illiquid, impossible-to-exit positions?</p>\n<p>These are all “risky” behavior for an algorithm to have, and we&rsquo;d like to know\nabout and understand this kind of behavior before we seriously consider investing\nmoney in the algo. However, these formulations of risk are neither captured nor\nquantified by the volatility of returns (as in the Sharpe ratio). Finally,\nthere is no easy, free, open-source way to get this sort of analysis.</p>\n<p>Enter <code>pyfolio</code>&rsquo;s new risk tear sheet! It addresses all the problems outlined\nabove, and more. Let&rsquo;s jump right in with an example.</p>\n<p><img src=\"https://www.georgeho.org/assets/images/pyfolio-risk-tear-sheet.png\" alt=\"Example risk tear sheet\"></p>\n<p>(This example risk tear sheet came from the <a href=\"https://github.com/quantopian/pyfolio/pull/391\">original pull\nrequest</a>, and may therefore be\nout of date)</p>\n<p>The first 4 plots show the exposure to common style factors: specifically, the\nsize of the company (natural log of the market cap), mean reversion (measured\nby the <a href=\"http://www.investopedia.com/terms/m/macd.asp\">MACD Signal</a>), long-term\nmomentum, and volatility.\nA style factor is best explained with examples: mean reversion, momentum,\nvolatility and the Fama-French canonical factors (SMB, HML, UMD) are all\nexamples of style factors. They are factors that indicate broad market trends\n(instead of being characteristic to individual stocks, like sectors or market\ncaps) and characterize a particular <em>style</em> of investing (e.g. mean reversion,\ntrend-following strategies, etc.).\nThe analysis is not limited to 4 style factors, though: <code>pyfolio</code> will handle\nas many as you pass in (but see below for a possible complication). As we can\nsee, the algorithm has a significant exposure to the MACD signal, which may or\nmay not worry us. For instance, it wouldn&rsquo;t worry us if we knew that it was a\nmean-reversion algo, but we would raise some eyebrows if it was something\nelse… perhaps the author <em>wanted</em> to write a wonderful, event-driven\nsentiment algo, but inadvertently <em>ended up</em> writing a mean reversion algo!\nOne important caveat here is that <code>pyfolio</code> requires you to supply your own\nstyle factors, for every stock in your universe. This is an unfortunately large\ncomplication for the average user, as it would require you to formulate and\nimplement your own risk model — I explain this in greater detail below.</p>\n<p>The next 3 plots show the exposures to sectors. This first plot shows us how much\nthe algorithm longed or shorted a specific sector: above the x-axis if it\nlonged, and below if it shorted. The second plot simply shows the gross exposure\nto each sector: taking the absolute value of the positions before normalizing.\nThe last plot shows the net exposure to each sector: taking the long position\n<em>less the short position</em> before normalizing. This particular algo looks\nbeautiful: it is equally exposed to all sectors, and not overly exposed to any\none of them. Evidently, this algo must be taking account its sector exposures\nin its trading logic: given what we know from above, perhaps it is longing the\ntop 10 most “mean reverting” stocks in each sector at the start of every\nweek… This analysis requires no addition data other than your algorithm&rsquo;s\npositions: you can supply your own sectors if you like, but if not, the analysis\nwill default to the <a href=\"https://www.quantopian.com/help/fundamentals#asset-classification\">Morningstar sector\nmappings</a>\n(specifically, the <code>morningstar_sector_code</code> field), available for free on the\nQuantopian platform.</p>\n<p>The next 3 plots show the exposures to market caps. In every other respect, it\nis identical to the previous 3 plots. These plots look fairly reasonable: most\nalgos spend most of their positions in large and mega cap names, and have almost\nno positions in micro cap stocks. (Quantopian actually discourages investing in\nmicro cap stocks by pushing users towards using the <a href=\"https://www.quantopian.com/posts/the-q500us-and-q1500us\">Q500 or\nQ1500</a> as a tradeable\nuniverse). This analysis uses <a href=\"https://www.quantopian.com/help/fundamentals#valuation\">Morningstar&rsquo;s <code>market cap</code>\nfield</a>.</p>\n<p>The last 2 plots show the portfolio&rsquo;s exposure to illiquidity (or low trading\nvolume). This one is a bit trickier to understand: every the end of every day,\nwe take the number of shares held in each position and divide that by the\ntotal volume. That gives us a number per position per day. We find the 10th\npercentile of this number (i.e. the most illiquid) and plot that as a time\nseries. So it is a measure of how exposed our portfolio is to illiquid stocks.\nThe first plot shows the illiquid exposure in our long and short positions,\nrespectively: that is, it takes the number of shares held in each long/short\nposition, and divides it by the daily total volume. The second plot shows the\ngross illiquid exposure, taking the absolute value of positions before\ndividing. So it looks like for this particular algo, for the 10% most illiquid\nstock in our portfolio, our position accounts for around 0.2–0.6% (<em>not</em>\n0.002–0.006%!) of market volume, on any given day. That&rsquo;s an acceptably low\nnumber! This analysis obviously requires daily volume data per stock, but that&rsquo;s\nfreely available on Quantopian&rsquo;s platform.</p>\n<p>That&rsquo;s it for the risk tear sheet! There are some more cool ideas in the\nworks (there always are), such as including plots to show a portfolio&rsquo;s\nconcentration risk exposure, or a portfolio&rsquo;s exposure to penny stocks. If you\nhave any suggestions, please file a <a href=\"https://github.com/quantopian/pyfolio/issues\">new GitHub\nissue</a> to let the dev team know!\nPyfolio is open-source and under active development, and outside contributions\nare always loved and appreciated. Alternatively, if you just want to find out\nmore about the nuts and bolts (i.e. the math and the data) that goes into risk\ntear sheet, you can dig around <a href=\"https://github.com/quantopian/pyfolio/tree/master/pyfolio\">the source code\nitself</a>!</p>\n<h2 id=\"risk-models-and-performance-attribution\">Risk Models and Performance Attribution</h2>\n<p>There are two things in the discussion of the risk tear sheet that are worth\ntalking about in further detail:</p>\n<ol>\n<li>I mentioned how the computation of style factor exposures (i.e. the first 4\nplots) required your own “risk model” (whatever that is), and</li>\n<li>It was nice that we can guess at the inner workings of the algo, just by\nseeing its exposure to common factors. E.g., I guessed that the example algo\nwas a sector-neutral mean reversion algo, because it was equally exposed to\nall 11 sectors, and had a high (in magnitude) exposure to the MACD signal.</li>\n</ol>\n<p>I&rsquo;ll talk about both points in order.</p>\n<p>In order to find out your exposure to a style factor, you obviously must first\nknow how much each stock is affected by the style factor. But how do you get\nthat? That is what a risk model is for!</p>\n<p>At the end of every period (usually every trading day), the risk model wakes\nup, looks at all the pricing data and style factor data for that day.\nIt then tries to explain as best it can how much each stock was affected by\neach style factor. The end result is that each stock will have a couple of\nnumbers associated with it, one for every style factor. These numbers indicate\nhow sensitive the stock&rsquo;s returns were to movements in the style factors. These\nnumbers are called <em>factor loadings</em> or <em>betas</em> (although I prefer “factor\nloadings” because a lot of things in quant finance are called “beta”).</p>\n<p>Even better, there&rsquo;s no reason why the risk model should limit itself to style\nfactors! I previously made the distinction between style factors and other\nfactors such as sectors: theoretically, a risk model should also be able to find\nout how sensitive a stock&rsquo;s returns are to movements in its sector: compute a\n“sector factor loading”, if you will. Collectively, all the factors that we want\nthe risk model to consider — be they sector, style or otherwise — are called\n<em>common factors</em>.</p>\n<p>Clearly, having a risk model allows us to do a whole lot of stuff! This is\nbecause, if we want to know how style factors and other prevailing market trends\nare affecting our <em>portfolio</em>, we must first know how they affect the <em>stocks</em>\nin our portfolio. Or, to be a bit more ambitious, if we knew how style factors\nand prevailing market trends are impacting our <em>universe</em> of stocks, then we&rsquo;re\nwell on the way to knowing how they&rsquo;re impacting our portfolio! The value of\nthis kind of portfolio analysis should, of course, be self-evident.</p>\n<p>So, suppose we have a risk model. How do we get from a <em>stock-level</em> understanding\nof how market trends are affecting us, to a <em>portfolio-level</em> understanding of the\nsame? The answer to this question is called <em>performance attribution</em>, and is\none of the main reasons a risk model is worth having.</p>\n<p>Instead of prattling on about performance attribution, it&rsquo;d just be easier to\nshow you the miracles it can do. Below are some (fake, made up) examples of some\nanalysis performance attribution can give us:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-txt\" data-lang=\"txt\"><span style=\"display:flex;\"><span>Date: 08–23–2017\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>Factor PnL ($)\n</span></span><span style=\"display:flex;\"><span>-------------- --------\n</span></span><span style=\"display:flex;\"><span>Total PnL -1,000\n</span></span><span style=\"display:flex;\"><span>Technology 70\n</span></span><span style=\"display:flex;\"><span>Real Estate -40\n</span></span><span style=\"display:flex;\"><span>Momentum -780\n</span></span><span style=\"display:flex;\"><span>Mean Reversion 100\n</span></span><span style=\"display:flex;\"><span>Volatility -110\n</span></span><span style=\"display:flex;\"><span>Stock-Specific 480\n</span></span></code></pre></div><p>The table shows that today, our algo suffered a $1000 loss, and the breakdown of\nthat loss indicates that the main culprit is momentum. In other words, our poor\nperformance today is mostly attributable to the poor performance of the momentum\nfactor (hence the name, “performance attribution”). The sector factors account\nfor very little PnL, while the other style factors (mean reversion and\nvolatility) drive fairly significant profits and losses, but the real smoking\ngun here is the fact that momentum completely tanked today.</p>\n<p>There are a few more useful summary statistics that performance attribution can\ngive us! Traditional computations for the alpha and the Sharpe ratio of a\nstrategy usually take into account the performance of the market: i.e., the\ntraditional alpha is a measure of how much our strategy <em>outperformed</em> the\nmarket, and the traditional Sharpe ratio is a measure of the same, but\naccounting for the volatility of returns. These may be dubbed <em>single-factor\nalphas</em>, because they only measure performance once one factor has been\naccounted for — namely, the market. In reality, we would like to not only\naccount for the market, but also any other common factors, such as style or\nsector. This leads to the concept of the <em>multi-factor alpha and Sharpe ratio</em>,\nwhich is exactly the same as the alpha and Sharpe ratio we&rsquo;re familiar with, but\ntaking into account a lot more factors. In other words, whereas the returns in\nexcess of the market is quantified by the single factor alpha, the returns in\nexcess of the market, momentum, mean reversion, volatility etc., is\nquantified by the multi factor alpha. The same goes for the single factor and\nmulti factor Sharpe, in the case of risk-adjusted returns.</p>\n<p>Adding performance attribution capabilities to <code>pyfolio</code> is an active project! A\ncouple of pull requests have already been merged to this effect, so definitely\nstay tuned! A new version of <code>pyfolio</code> will probably be made once performance\nattribution is up and running. As always, feel free to\n<a href=\"https://github.com/quantopian/pyfolio\">contribute to <code>pyfolio</code></a>, be it by\nmaking feature requests, issues with bugs, or submitting a pull request!</p>\n<hr>\n<p><strong>Update (12–16–2017):</strong> Quantopian recently launched their risk model for\nanyone to use &mdash; this is a great resource that usually only large and\ndeep-pocketed financial institutions have access to. Check it out\n<a href=\"https://www.quantopian.com/risk-model\">here</a>.</p>\n<p><strong>Update (05–11–2018):</strong> Quantopian&rsquo;s now integrated pyfolio analytics into\ntheir backtest engine! This makes it much easier to see how your algorithm\nstacks up against expectations. Check out the announcement\n<a href=\"https://www.quantopian.com/posts/improved-backtest-analysis\">here</a>.</p>\n<p><strong>Update (05–29–2018):</strong> Quantopian recently published a white paper on how the\nrisk model works! Read all about it\n<a href=\"https://www.quantopian.com/papers/risk\">here</a>.</p>\n<p><strong>Update (12-16-2020):</strong> <a href=\"https://www.bloomberg.com/news/articles/2020-12-16/quant-trading-platform-quantopian-closes-down\">Quantopian has been acquired by\nRobinhood.</a>\nSorry for all the broken links to <code>www.quantopian.com</code>.</p>"
}