{
  "title": "The TensorFlow perspective on neural networks",
  "link": "https://shapeofdata.wordpress.com/2015/11/30/the-tensorflow-perspective-on-neural-networks/",
  "comments": "https://shapeofdata.wordpress.com/2015/11/30/the-tensorflow-perspective-on-neural-networks/#comments",
  "dc:creator": "Jesse Johnson",
  "pubDate": "Mon, 30 Nov 2015 14:02:47 +0000",
  "category": "Neural Networks",
  "guid": "http://shapeofdata.wordpress.com/?p=1235",
  "description": "A few weeks ago, Google announced that it was open sourcing an internal system called TensorFlow that allows one to build neural networks, as well as other types of machine learning models. (Disclaimer: I work for Google.) Because TensorFlow is designed &#8230; <a href=\"https://shapeofdata.wordpress.com/2015/11/30/the-tensorflow-perspective-on-neural-networks/\">Continue reading <span class=\"meta-nav\">&#8594;</span></a>",
  "content:encoded": "<p><span style=\"font-weight:400;\">A few weeks ago, Google announced that it was open sourcing an internal system called <a href=\"http://www.tensorflow.org/\">TensorFlow</a> that allows one to build neural networks, as well as other types of machine learning models. (Disclaimer: I work for Google.) Because TensorFlow is designed to be more general than just a neural network framework, it takes a fairly abstract perspective compared to the way we usually talk about neural networks. But (not coincidentally) this perspective is very close to what I described in my <a href=\"https://shapeofdata.wordpress.com/2015/11/09/neural-networks-linear-transformations-and-word-embeddings/\">last post</a>, with rows of neurons defining output vectors and the connections between these rows defining matrices of weights. In today’s post, I want to describe the TensorFlow perspective, explain how it matches up with the traditional way of thinking about neural networks, and explain how TensorFlow generalizes the vector and matrix approach to include more general structures called </span><i><span style=\"font-weight:400;\">tensors</span></i><span style=\"font-weight:400;\">.</span></p>\n<p><span id=\"more-1235\"></span>Recall that the standard view of an artificial neural network is a directed graph of neurons, where each neuron calculates a weighted sum of inputs from other neurons, then applies a non-linear function to determine its own output. Many neural networks have neurons arranged into rows or layers, with the neurons from one layer connected to the neurons in the next layer according to some pattern.</p>\n<p>In my last post, I pointed out that you can think of each neuron as actually being two neurons &#8211; a linear neuron that calculates the weighted sum, which it sends to a non-linear neuron that applies the non-linear function to the output from the linear neuron. From this perspective, the linear neurons in each layer collect the output from the  previous layer, and the non-linear neurons send their outputs to the next layer. As I described last time, you can then think of the output from each layer as a vector with one dimension/feature for each neuron. The connections between successive layers define a matrix such that the outputs of the linear neurons in one layer define a vector that&#8217;s equal to the outputs from the non-linear neurons of the previous layer multiplied by this matrix.</p>\n<p>For a basic feed-forward network, we just have a sequence of layers, one after the other, as in the Figure below. I&#8217;ve indicated which parts of the Figure correspond to these vectors and matrices, and it&#8217;s possible to translate the diagram into the equations that describe how these all relate to each other. But the translation can be a bit tricky, and for more complex networks such as convolutional networks and RNNs, it becomes even harder to understand how the network functions from this perspective.</p>\n<p><a href=\"https://shapeofdata.files.wordpress.com/2015/11/annlabeled.png\"><img data-attachment-id=\"1239\" data-permalink=\"https://shapeofdata.wordpress.com/2015/11/30/the-tensorflow-perspective-on-neural-networks/annlabeled/\" data-orig-file=\"https://shapeofdata.files.wordpress.com/2015/11/annlabeled.png\" data-orig-size=\"513,268\" data-comments-opened=\"1\" data-image-meta=\"{\"aperture\":\"0\",\"credit\":\"\",\"camera\":\"\",\"caption\":\"\",\"created_timestamp\":\"0\",\"copyright\":\"\",\"focal_length\":\"0\",\"iso\":\"0\",\"shutter_speed\":\"0\",\"title\":\"\",\"orientation\":\"0\"}\" data-image-title=\"ANNlabeled\" data-image-description=\"\" data-image-caption=\"\" data-medium-file=\"https://shapeofdata.files.wordpress.com/2015/11/annlabeled.png?w=300\" data-large-file=\"https://shapeofdata.files.wordpress.com/2015/11/annlabeled.png?w=513\" class=\"size-full wp-image-1239 aligncenter\" src=\"https://shapeofdata.files.wordpress.com/2015/11/annlabeled.png?w=640\" alt=\"ANNlabeled\" srcset=\"https://shapeofdata.files.wordpress.com/2015/11/annlabeled.png 513w, https://shapeofdata.files.wordpress.com/2015/11/annlabeled.png?w=150 150w, https://shapeofdata.files.wordpress.com/2015/11/annlabeled.png?w=300 300w\" sizes=\"(max-width: 513px) 100vw, 513px\"   /></a></p>\n<p>TensorFlow improves on this by dropping the biological analogy in favor of a graph that directly encodes the mathematical relationships between the elements. A TensorFlow graph for the neural network in the above Figure is shown in the Figure below. Instead of individual neurons, the elements of this graph are vectors, matrices and operations, with edges indicating how the operations are applied. (The v&#8217;s are vectors, W&#8217;s are matrices, and circles/ellipses are operators.) To figure out how each element is calculated, you simply follow the arrows backwards.</p>\n<p><a href=\"https://shapeofdata.files.wordpress.com/2015/11/anntf1.png\"><img data-attachment-id=\"1242\" data-permalink=\"https://shapeofdata.wordpress.com/2015/11/30/the-tensorflow-perspective-on-neural-networks/anntf/\" data-orig-file=\"https://shapeofdata.files.wordpress.com/2015/11/anntf1.png\" data-orig-size=\"544,87\" data-comments-opened=\"1\" data-image-meta=\"{\"aperture\":\"0\",\"credit\":\"\",\"camera\":\"\",\"caption\":\"\",\"created_timestamp\":\"0\",\"copyright\":\"\",\"focal_length\":\"0\",\"iso\":\"0\",\"shutter_speed\":\"0\",\"title\":\"\",\"orientation\":\"0\"}\" data-image-title=\"ANNtf\" data-image-description=\"\" data-image-caption=\"\" data-medium-file=\"https://shapeofdata.files.wordpress.com/2015/11/anntf1.png?w=300\" data-large-file=\"https://shapeofdata.files.wordpress.com/2015/11/anntf1.png?w=544\" class=\"size-full wp-image-1242 aligncenter\" src=\"https://shapeofdata.files.wordpress.com/2015/11/anntf1.png?w=640\" alt=\"ANNtf\" srcset=\"https://shapeofdata.files.wordpress.com/2015/11/anntf1.png 544w, https://shapeofdata.files.wordpress.com/2015/11/anntf1.png?w=150 150w, https://shapeofdata.files.wordpress.com/2015/11/anntf1.png?w=300 300w\" sizes=\"(max-width: 544px) 100vw, 544px\"   /></a></p>\n<p>You can create a graph like this in TensorFlow by writing a script in Python. This graph includes operators for matrix multiplication and a non-linear operator (such as the sigmoid or the ReLu), but TensorFlow has a number of other operators as well, such as convolutional multiplication and pooling. Plus, since TensorFlow is open source, anyone can write their own operators. There are a number of <a href=\"http://tensorflow.org/tutorials\">tutorials</a> on the official site where you can find details and examples.</p>\n<p>Once you have this graph, you can ask TensorFlow to evaluate it for a given collection of inputs, but the more interesting part is, of course, the training. In other words, we want to select the values in the weight matrices by incrementally adjusting them via back propagation. This involves evaluating data points (following the graph forward), then determining the error and pushing it back to the weight matrices by calculating gradients. TensorFlow is able do this automatically because each of the operators is required to provide a pre-calculated gradient function. TensorFlow combines these using the chain rule, so if you tell it which of the vectors and matrices you want it to update, it can run back propagation automatically.</p>\n<p>So that should give you an idea of how TensorFlow allows you to define neural networks, and other types of models, in terms of graphs of vectors, matrices and operators. But often it&#8217;s useful to create a neural network where each layer of neurons isn&#8217;t a just single row. For example, if you&#8217;re working with images, then the input layer would be more naturally described as a rectangular grid of values. Of course, this rectangle could be encoded as a vector, but it&#8217;s more natural to think of it as a matrix, particularly for something like a convolutional net, where the sliding windows are defined in terms of a rectangle. In fact, if it&#8217;s a RGB image then you really want to think of the input as three parallel rectangles, forming a rectangular box of values.</p>\n<p>Now, I&#8217;m about to start using the term &#8220;dimension&#8221; in a way that&#8217;s a bit different than usual, so I want to be especially careful. Recall that a vector is defined by a list of numbers of some specified length. The set of all possible vectors of a given length define a vector space whose dimension is the length that we chose. But we&#8217;re going to say that every vector, no matter its length, is a <em>one-dimensional tensor</em>. So a one-dimensional tensor can define a vector space of any dimension you want. The one-dimensional part refers to the fact that we write the values of the vector along a one-dimensional line.</p>\n<p>A matrix, on the other hand, is a grid of numbers with a certain number of rows and a certain number of columns. The set of all matrices of a given size also defines a vector space, whose dimension is the number of rows times the number of columns. But we&#8217;ll still say that a matrix is a two-dimensional tensor. (One dimension is rows. The other is columns.) So, as promised, we have two different meanings of the word &#8220;dimension&#8221; &#8211; one for the dimension of the space defined a vector or a matrix, one for the way in which the values are arranged when they&#8217;re written down.</p>\n<p>Similarly, the rectangular box of values defined by the three rectangular layers of our RGB image defines a three-dimensional tensor, since we think of the values as being arranged into a three-dimensional shape. The space of all possible images defines a vector space whose dimension is much larger (three times the number of pixels to be precise), but it&#8217;s still a three-dimensional tensor.</p>\n<p>To be even more precise about this, each of the features that make up a vector can be specified by a single index <em>i.</em> Each &#8220;feature&#8221; in a matrix is specified by two indices, <em>i </em>and<em> j</em>. Each feature in the rectangular box for the RGB image is specified by three coordinates <em>i, j, k</em>. These are one-, two- and three-dimensional tensors, respectively. But there&#8217;s no reason to stop there. For example, if we want to keep track of the connections/weights between two layers we&#8217;ll need to index them by the both indices for the layer where they start and the indices for the layer where they end. For example, the weight from neuron <em>i, j, k</em> of one layer to neuron <em>x, y, z</em> of the next layer is defined by the indices <em>i, j, k, x, y, z</em>. This is a six-dimensional tensor.</p>\n<p>TensorFlow is designed to handle tensors of any dimension, and the operators that can be used to combine them. This, combined with the abstract and general nature of its approach to defining computation graphs makes it an extremely powerful and flexible platform for building machine learning models.</p>\n",
  "wfw:commentRss": "https://shapeofdata.wordpress.com/2015/11/30/the-tensorflow-perspective-on-neural-networks/feed/",
  "slash:comments": 2,
  "media:content": [
    {
      "media:title": "jessejohnson"
    },
    {
      "media:title": "ANNlabeled"
    },
    {
      "media:title": "ANNtf"
    }
  ]
}