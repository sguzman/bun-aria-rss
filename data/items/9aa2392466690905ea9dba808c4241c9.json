{
  "id": "tag:blogger.com,1999:blog-5547907074344788039.post-629038915319633652",
  "published": "2013-01-22T09:21:00.001-08:00",
  "updated": "2013-01-22T09:21:21.737-08:00",
  "category": "",
  "title": "When is a meat sandwich like a merchant? A python joke generator",
  "content": "<br /><div class=\"p1\"><i>When is a meat sandwich like a merchant?&nbsp;When it is a burgher.</i>&nbsp;</div><div class=\"p1\"><br /></div><div class=\"p1\">Yes, you can groan but don't blame me, heckle the computer.</div><div class=\"p4\"><br /></div><div class=\"p5\">I enjoyed a recent New York Times piece, <a href=\"http://www.nytimes.com/2013/01/06/opinion/sunday/can-computers-be-funny.html?_r=0\">A Motherboard Walks Into a Bar ...</a>\" on how and whether computer can learn what is or is not funny. I'm a big fan of groan-inducing puns and <i>Physics particle X&nbsp;walks into a bar</i> type jokes.&nbsp;As I read the article, it occurred to me that there must be some simple lexical patterns that a computer could pick up on and auto-generate jokes. Consider the following:</div><div class=\"p7\"><br /></div><div class=\"p6\"><i>What do you call a strange market?&nbsp;A bizarre bazaar.</i></div><div class=\"p7\"><br /></div><div class=\"p6\">That has the structure \"What do you call a&nbsp;<b><span style=\"color: #6fa8dc;\">[Adjective1]</span> <span style=\"color: #6fa8dc;\">[Noun1]</span></b>? A <b><span style=\"color: #6fa8dc;\">[Adjective2] [Noun2]</span></b>\" where <b><span style=\"color: #6fa8dc;\">[Adjective2]</span></b> and <b><span style=\"color: #6fa8dc;\">[Noun2]</span></b> are homonyms and<b> <span style=\"color: #6fa8dc;\">[Adjective1]</span></b> and<span style=\"color: #6fa8dc;\"> </span><b><span style=\"color: #6fa8dc;\">[Adjective2]</span> </b>and <b><span style=\"color: #6fa8dc;\">[Noun1]</span></b> and <b><span style=\"color: #6fa8dc;\">[Noun2]</span> </b>are synonym pairs.<br /><br />(A homonym is a word pronounced the same as another but differing in meaning, whether spelled the same way or not. Example: hare and hair. Synonyms as two or more different words with the same meaning. Example: lazy and idle.)</div><div class=\"p6\"><br /></div>If we take a look through a list of <a href=\"http://www.cooper.com/alan/homonym_list.html\">english homonyms</a>, we can easily pick out such joke material:<br /><div class=\"p6\"><br /></div><div class=\"p6\"><b>suite</b>: ensemble</div><div class=\"p6\"><b>sweet</b>: sugary</div><div class=\"p6\"></div><table cellpadding=\"0\" cellspacing=\"0\" class=\"t1\"><tbody><tr><td class=\"td1\" colspan=\"3\" valign=\"middle\"><div class=\"p8\"><br /></div><div class=\"p10\">leads to \"<i>What do you call a sugary ensemble? A sweet suite</i>.\"</div></td></tr></tbody></table><div class=\"p7\"><br /></div><div class=\"p6\">Similarly,</div><div class=\"p6\"><i>What do you call a breezy eagle's nest? An airy aerie.</i></div><div class=\"p6\"><i>What do you call a coarse pleated collar? A rough ruff.</i></div><div class=\"p7\"><br /></div><div class=\"p6\">Another structure is when the homonyms are both nouns:</div><div class=\"p6\"><br /></div><div class=\"p6\"><b>stake</b>: wooden pole</div><div class=\"p6\"><b>steak</b>: slice of meat</div><div class=\"p6\"><br /></div><div class=\"p6\">leads to \"<i>When is a slice of meat like a wooden pole? When it is a stake</i>.\"</div><div class=\"p6\"><br /></div><div class=\"p6\">(Slightly more complicated is \"<i>When is a car like a frog? When it is being toad?</i>\")</div><div class=\"p7\"><br /></div><div class=\"p6\">This suggests that we can easily auto-generate jokes such as these. So, let's do it.</div><div class=\"p7\"><br /></div><div class=\"p6\">First, I downloaded that homonym webpage and parsed the HTML using the python <a href=\"http://www.crummy.com/software/BeautifulSoup/\">BeautifulSoup</a> library to extract the homonyms. There is one short function to parse the HTML to obtain two homonyms and their short definitions, and for each homonym I call a second function function which calls a unofficial google dictionary API to obtain the part of speech (noun, adjective etc.) of the homonym. Calling &nbsp;<b><i>python extract_homonyms.py &gt; processed_homonyms.txt</i></b> processes a flat text file of the six pieces of information: <i>homonym1, definition1, pos1, homonym2, definition2, pos2</i></div><div class=\"p7\">Here is the <a href=\"https://github.com/leapingllamas/p-value.info/blob/master/jokes_2013_01/extract_homonyms.py\">code</a>.</div><div class=\"p6\"><br /></div><div class=\"p6\">With the hard work out the way, generating the jokes is simple. A second short script,&nbsp;<a href=\"https://github.com/leapingllamas/p-value.info/blob/master/jokes_2013_01/generate_jokes.py\">generate_jokes.py</a>, has two type of jokes: 1) one homonym is an adjective and the other is a noun, 2) both homonyms are nouns:&nbsp;</div><div class=\"p7\"><br /></div><div class=\"p12\"><span style=\"color: #6fa8dc;\"><span class=\"s1\"><b>def</b> </span><b>indefinite_article</b><span class=\"s1\">(</span><span class=\"s2\">w</span><span class=\"s1\">):</span></span></div><div class=\"p13\"><span style=\"color: #6fa8dc;\">&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <span class=\"s2\">w</span><b>.</b><span class=\"s2\">lower</span>()<b>.</b><span class=\"s2\">startswith</span>(<span class=\"s3\">\"a \"</span>) <b>or</b> <span class=\"s2\">w</span><b>.</b><span class=\"s2\">lower</span>()<b>.</b><span class=\"s2\">startswith</span>(<span class=\"s3\">\"an \"</span>): <b>return</b> <span class=\"s3\">\"\"</span></span></div><div class=\"p13\"><span style=\"color: #6fa8dc;\">&nbsp;&nbsp;&nbsp;&nbsp;<b>return</b> <span class=\"s3\">\"an \"</span> <b>if</b> <span class=\"s2\">w</span><b>.</b><span class=\"s2\">lower</span>()[<span class=\"s4\">0</span>] <b>in</b> <span class=\"s5\">list</span>(<span class=\"s3\">'aeiou'</span>) <b>else</b> <span class=\"s3\">\"a \"</span></span></div><div class=\"p14\"><span style=\"color: #6fa8dc;\"><br /></span></div><div class=\"p13\"><span style=\"color: #6fa8dc;\"><b>def</b> <span class=\"s6\"><b>camel</b></span>(<span class=\"s2\">s</span>):</span></div><div class=\"p13\"><span style=\"color: #6fa8dc;\">&nbsp;&nbsp;&nbsp;&nbsp;<b>return</b> <span class=\"s2\">s</span>[<span class=\"s4\">0</span>]<b>.</b><span class=\"s2\">upper</span>() <b>+</b> <span class=\"s2\">s</span>[<span class=\"s4\">1</span>:]</span></div><div class=\"p14\"><span style=\"color: #6fa8dc;\"><br /></span></div><div class=\"p13\"><span style=\"color: #6fa8dc;\"><b>def</b> <span class=\"s6\"><b>joke_type1</b></span>(<span class=\"s2\">d1</span>,<span class=\"s2\">d2</span>,<span class=\"s2\">w1</span>,<span class=\"s2\">w2</span>):</span></div><div class=\"p13\"><span style=\"color: #6fa8dc;\">&nbsp;&nbsp;&nbsp;&nbsp;<b>return</b> <span class=\"s3\">\"What do you call \"</span> <b>+</b> <span class=\"s2\">indefinite_article</span>(<span class=\"s2\">d1</span>) <b>+</b> <span class=\"s2\">d1</span> <b>+</b> <span class=\"s3\">\" \"</span> <b>+</b> <span class=\"s2\">d2</span> <b>+</b> <span class=\"s3\">\"? \"</span> <b>+</b> \\</span></div><div class=\"p15\"><span style=\"color: #6fa8dc;\"><span class=\"s1\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>camel<span class=\"s1\">(</span>indefinite_article<span class=\"s1\">(</span>w1<span class=\"s1\">)) <b>+</b> </span>w1<span class=\"s1\"> <b>+</b> </span><span class=\"s3\">\" \"</span><span class=\"s1\"> <b>+</b> </span>w2<span class=\"s1\"> <b>+</b> </span><span class=\"s3\">\".\"</span></span></div><div class=\"p14\"><span style=\"color: #6fa8dc;\"><br /></span></div><div class=\"p13\"><span style=\"color: #6fa8dc;\"><b>def</b> <span class=\"s6\"><b>joke_type2</b></span>(<span class=\"s2\">d1</span>,<span class=\"s2\">d2</span>,<span class=\"s2\">w1</span>,<span class=\"s2\">w2</span>):</span></div><div class=\"p15\"><span style=\"color: #6fa8dc;\"><span class=\"s1\">&nbsp;&nbsp;&nbsp;&nbsp;<b>return</b> </span><span class=\"s3\">\"When is \"</span><span class=\"s1\"> <b>+</b> </span>indefinite_article<span class=\"s1\">(</span>d1<span class=\"s1\">) <b>+</b> </span>d1<span class=\"s1\"> <b>+</b> </span><span class=\"s3\">\" like \"</span><span class=\"s1\"> <b>+</b> </span>indefinite_article<span class=\"s1\">(</span>d2<span class=\"s1\">) <b>+</b> </span>d2<span class=\"s1\"> <b>+</b> </span><span class=\"s3\">\"? \"</span><span class=\"s1\"> <b>+</b> \\</span></span></div><div class=\"p13\"><span style=\"color: #6fa8dc;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"s3\">\"When it is \"</span> <b>+</b> <span class=\"s2\">indefinite_article</span>(<span class=\"s2\">w2</span>) <b>+</b> <span class=\"s2\">w2</span> <b>+</b> <span class=\"s3\">\".\"</span></span></div><div class=\"p14\"><span style=\"color: #6fa8dc;\"><br /></span></div><div class=\"p16\"><span style=\"color: #6fa8dc;\"><span class=\"s2\">data</span><span class=\"s1\"> <b>=</b> </span><span class=\"s5\">open</span><span class=\"s1\">(</span>\"processed_homonyms.txt\"<span class=\"s1\">,</span>\"r\"<span class=\"s1\">)<b>.</b></span><span class=\"s2\">readlines</span><span class=\"s1\">()</span></span></div><div class=\"p14\"><span style=\"color: #6fa8dc;\"><br /></span></div><div class=\"p13\"><span style=\"color: #6fa8dc;\"><b>for</b> <span class=\"s2\">line</span> <b>in</b> <span class=\"s2\">data</span>:</span></div><div class=\"p15\"><span style=\"color: #6fa8dc;\"><span class=\"s1\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[</span>w1<span class=\"s1\">,</span>d1<span class=\"s1\">,</span>pos1<span class=\"s1\">,</span>w2<span class=\"s1\">,</span>d2<span class=\"s1\">,</span>pos2<span class=\"s1\">]<b>=</b></span>line<span class=\"s1\"><b>.</b></span>strip<span class=\"s1\">()<b>.</b></span>split<span class=\"s1\">(</span><span class=\"s3\">\"\\t\"</span><span class=\"s1\">)</span></span></div><div class=\"p13\"><span style=\"color: #6fa8dc;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <span class=\"s2\">pos1</span><b>==</b><span class=\"s3\">'adjective'</span> <b>and</b> <span class=\"s2\">pos2</span><b>==</b><span class=\"s3\">'noun'</span>:</span></div><div class=\"p13\"><span style=\"color: #6fa8dc;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>print</b> <span class=\"s2\">joke_type1</span>(<span class=\"s2\">d1</span>,<span class=\"s2\">d2</span>,<span class=\"s2\">w1</span>,<span class=\"s2\">w2</span>)</span></div><div class=\"p13\"><span style=\"color: #6fa8dc;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>elif</b> <span class=\"s2\">pos1</span><b>==</b><span class=\"s3\">'noun'</span> <b>and</b> <span class=\"s2\">pos2</span><b>==</b><span class=\"s3\">'adjective'</span>:</span></div><div class=\"p13\"><span style=\"color: #6fa8dc;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>print</b> <span class=\"s2\">joke_type1</span>(<span class=\"s2\">d2</span>,<span class=\"s2\">d1</span>,<span class=\"s2\">w2</span>,<span class=\"s2\">w1</span>)</span></div><div class=\"p13\"><span style=\"color: #6fa8dc;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>elif</b> <span class=\"s2\">pos1</span><b>==</b><span class=\"s3\">'noun'</span> <b>and</b> <span class=\"s2\">pos2</span><b>==</b><span class=\"s3\">'noun'</span>:</span></div><div class=\"p13\"><span style=\"color: #6fa8dc;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>print</b> <span class=\"s2\">joke_type2</span>(<span class=\"s2\">d1</span>,<span class=\"s2\">d2</span>,<span class=\"s2\">w1</span>,<span class=\"s2\">w2</span>)&nbsp;</span></div><div class=\"p17\"><span style=\"color: #6fa8dc;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>print</b><span class=\"s7\"> </span>joke_type2(d2,d1,w2,w1)</span></div><div class=\"p5\"><br /></div><div class=\"p6\">When we run this, we output <a href=\"https://github.com/leapingllamas/p-value.info/blob/master/jokes_2013_01/jokes.txt\">493 wonderful, classy jokes</a>&nbsp;(from just 70 lines of code). A few of my favorites are:</div><div class=\"p21\"></div><ul><li><i>What do you call an accomplished young woman? A made maid.</i></li><li><i>When is a disparaging sounds from fans like a whiskey? When it is a booze.</i></li><li><i>When is a fish eggs like a seventeenth letter of Greek alphabet? When it is a rho.</i></li><li><i>When is a bench-mounted clamp like a bad habit? When it is a vice.</i></li><li><i>When is a fermented grape juice like an annoying cry? When it is a whine.</i></li><li><i>When is a location like a flounder? When it is a plaice.</i></li><li><i>What do you call a fake enemy? A faux foe.</i></li><li><div class=\"p13\"><i>What do you call a beloved Bambi? A dear deer.</i></div></li></ul><br /><div class=\"p23\">Not bad, not bad although even <a href=\"http://carrottop.com/\">Carrot Top</a>'s career is probably safe with these.</div><div class=\"p23\"><br /></div><div class=\"p23\">This is the <a href=\"https://github.com/leapingllamas/p-value.info/tree/master/jokes_2013_01\">complete source code</a>.</div><div class=\"p23\"><br /></div><div class=\"p23\">(Another potential joke pattern comes from \"What is the difference between a pretty glove and a silent cat?<span class=\"s1\">&nbsp;</span>One is a cute mitten, the other is a mute kitten.\" where we can observe a transposition of the first letters of two pairs of words. You can discern some other patterns in this <a href=\"http://www.abdn.ac.uk/jokingcomputer/home.shtml\">joke generator site</a>.)</div><div class=\"p1\"><br /></div><div class=\"p1\">So, we can conceive that a computer could be programmed with, or learn, the structure of jokes. This is a generative approach (e.g.,&nbsp;<a href=\"http://www.moreawesomethanyou.com/uglybutt/punbot.pdf\">Manurung et al</a>.).</div><div class=\"p1\"><br /></div><div class=\"p1\">A second approach is to learn which jokes are considered funny by humans. Given a suitable corpus and a reasonable set of features, any number of classifiers could learn, at least statistically, to sort the funny from the unfunny (e.g., Kiddon &amp; Brun, <a href=\"http://people.cs.umass.edu/~brun/pubs/pubs/Kiddon11.pdf\">That's what she said detector</a>).</div><div class=\"p20\"><br /></div><div class=\"p13\">Finally, given a set of jokes, a system could learn which are funny to you given some basic training. <a href=\"http://eigentaste.berkeley.edu/user/about.php\">Jester</a> is a system where you are asked to rate 10 jokes. After that, you are presented with a series of jokes that you are more likely to find funny than other jokes. In web terms, it is an old site with what amounts to an early recommender system (<a href=\"http://www.ieor.berkeley.edu/~goldberg/pubs/eigentaste.pdf\">Goldberg et al. 2000</a>).</div><div class=\"p13\"><br /></div><div class=\"p13\">One final joke from my code:</div><div class=\"p13\"><br /></div><div class=\"p13\"><i>What do you call a least best sausage? A worst wurst.</i></div><div class=\"p13\"><br /></div><div class=\"p13\">Ba dum dum, Thanks, folks! I'll be here all week.</div><div class=\"p13\"><br /></div><div class=\"p13\"><br /></div><div class=\"p13\"><br /></div><div class=\"p13\"><br /></div>",
  "link": [
    "",
    "",
    "",
    "",
    ""
  ],
  "author": {
    "name": "Carl Anderson",
    "uri": "http://www.blogger.com/profile/11930448254473684406",
    "email": "noreply@blogger.com",
    "gd:image": ""
  },
  "thr:total": 0
}