{
  "title": "How to use undocumented web APIs",
  "link": "",
  "updated": "2022-03-10T09:03:51+00:00",
  "id": "https://jvns.ca/blog/2022/03/10/how-to-use-undocumented-web-apis/",
  "content": "\n\n<p>Hello! A couple of days I wrote about <a href=\"https://jvns.ca/blog/2022/03/08/tiny-programs/\">tiny personal programs</a>, and I mentioned that\nit can be fun to use &ldquo;secret&rdquo; undocumented APIs where you need to copy your\ncookies out of the browser to get access to them.</p>\n\n<p>A couple of people asked how to do this, so I wanted to explain how because\nit&rsquo;s pretty straightforward. We&rsquo;ll also talk a tiny bit about what can go\nwrong, ethical issues, and how this applies to your undocumented APIs.</p>\n\n<p>As an example, let&rsquo;s use Google Hangouts. I&rsquo;m picking this not because it&rsquo;s the\nmost useful example (I think there&rsquo;s an official API which would be much more\npractical to use), but because many sites where this is actually useful are\nsmaller sites that are more vulnerable to abuse. So we&rsquo;re just going to use\nGoogle Hangouts because I&rsquo;m 100% sure that the Google Hangouts backend is\ndesigned to be resilient to this kind of poking around.</p>\n\n<p>Let&rsquo;s get started!</p>\n\n<h3 id=\"step-1-look-in-developer-tools-for-a-promising-json-response\">step 1: look in developer tools for a promising JSON response</h3>\n\n<p>I start out by going to <a href=\"https://hangouts.google.com\">https://hangouts.google.com</a>, opening the network tab in\nFirefox developer tools and looking for JSON responses. You can use Chrome developer tools too.</p>\n\n<p>Here&rsquo;s what that looks like</p>\n\n<p><img src=\"https://jvns.ca/images/network-tab.png\"></p>\n\n<p>The request is a good candidate if it says &ldquo;json&rdquo; in the &ldquo;Type&rdquo; column&rdquo;</p>\n\n<p>I had to look around for a while until I found something interesting, but\neventually I found a &ldquo;people&rdquo; endpoint that seems to return information about\nmy contacts. Sounds fun, let&rsquo;s take a look at that.</p>\n\n<h3 id=\"step-2-copy-as-curl\">step 2: copy as cURL</h3>\n\n<p>Next, I right click on the request I&rsquo;m interested in, and click &ldquo;Copy&rdquo; -> &ldquo;Copy as cURL&rdquo;.</p>\n\n<p>Then I paste the <code>curl</code> command in my terminal and run it. Here&rsquo;s what happens.</p>\n\n<pre><code>$ curl 'https://people-pa.clients6.google.com/v2/people/?key=REDACTED' -X POST ........ (a bunch of headers removed)\nWarning: Binary output can mess up your terminal. Use \"--output -\" to tell \nWarning: curl to output it to your terminal anyway, or consider \"--output \nWarning: <FILE>\" to save to a file.\n</code></pre>\n\n<p>You might be thinking &ndash; that&rsquo;s weird, what&rsquo;s this &ldquo;binary output can mess up\nyour terminal&rdquo; error?  That&rsquo;s because by default, browsers send an\n<code>Accept-Encoding: gzip, deflate</code> header to the server, to get compressed\noutput.</p>\n\n<p>We could decompress it by piping the output to <code>gunzip</code>, but I find it simpler\nto just not send that header. So let&rsquo;s remove some irrelevant headers.</p>\n\n<h3 id=\"step-3-remove-irrelevant-headers\">step 3: remove irrelevant headers</h3>\n\n<p>Here&rsquo;s the full <code>curl</code> command line that I got from the browser. There&rsquo;s a lot here!\nI start out by splitting up the request with backslashes (<code>\\</code>) so that each header is on a different line to make it easier to work with:</p>\n\n<pre><code>curl 'https://people-pa.clients6.google.com/v2/people/?key=REDACTED' \\\n-X POST \\\n-H 'User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:96.0) Gecko/20100101 Firefox/96.0' \\\n-H 'Accept: */*' \\\n-H 'Accept-Language: en' \\\n-H 'Accept-Encoding: gzip, deflate' \\\n-H 'X-HTTP-Method-Override: GET' \\\n-H 'Authorization: SAPISIDHASH REDACTED' \\\n-H 'Cookie: REDACTED'\n-H 'Content-Type: application/x-www-form-urlencoded' \\\n-H 'X-Goog-AuthUser: 0' \\\n-H 'Origin: https://hangouts.google.com' \\\n-H 'Connection: keep-alive' \\\n-H 'Referer: https://hangouts.google.com/' \\\n-H 'Sec-Fetch-Dest: empty' \\\n-H 'Sec-Fetch-Mode: cors' \\\n-H 'Sec-Fetch-Site: same-site' \\\n-H 'Sec-GPC: 1' \\\n-H 'DNT: 1' \\\n-H 'Pragma: no-cache' \\\n-H 'Cache-Control: no-cache' \\\n-H 'TE: trailers' \\\n--data-raw 'personId=101777723309&personId=1175339043204&personId=1115266537043&personId=116731406166&extensionSet.extensionNames=HANGOUTS_ADDITIONAL_DATA&extensionSet.extensionNames=HANGOUTS_OFF_NETWORK_GAIA_GET&extensionSet.extensionNames=HANGOUTS_PHONE_DATA&includedProfileStates=ADMIN_BLOCKED&includedProfileStates=DELETED&includedProfileStates=PRIVATE_PROFILE&mergedPersonSourceOptions.includeAffinity=CHAT_AUTOCOMPLETE&coreIdParams.useRealtimeNotificationExpandedAcls=true&requestMask.includeField.paths=person.email&requestMask.includeField.paths=person.gender&requestMask.includeField.paths=person.in_app_reachability&requestMask.includeField.paths=person.metadata&requestMask.includeField.paths=person.name&requestMask.includeField.paths=person.phone&requestMask.includeField.paths=person.photo&requestMask.includeField.paths=person.read_only_profile_info&requestMask.includeField.paths=person.organization&requestMask.includeField.paths=person.location&requestMask.includeField.paths=person.cover_photo&requestMask.includeContainer=PROFILE&requestMask.includeContainer=DOMAIN_PROFILE&requestMask.includeContainer=CONTACT&key=REDACTED'\n</code></pre>\n\n<p>This can seem like an overwhelming amount of stuff at first, but you don&rsquo;t need\nto think about what any of it means at this stage. You just need to delete\nirrelevant lines.</p>\n\n<p>I usually just figure out which headers I can delete with trial and error &ndash; I\nkeep removing headers until the request starts failing. In general you probably\ndon&rsquo;t need <code>Accept*</code>, <code>Referer</code>, <code>Sec-*</code>, <code>DNT</code>, <code>User-Agent</code>, and caching\nheaders though.</p>\n\n<p>In this example, I was able to cut the request down to this:</p>\n\n<pre><code>curl 'https://people-pa.clients6.google.com/v2/people/?key=REDACTED' \\\n-X POST \\\n-H 'Authorization: SAPISIDHASH REDACTED' \\\n-H 'Content-Type: application/x-www-form-urlencoded' \\\n-H 'Origin: https://hangouts.google.com' \\\n-H 'Cookie: REDACTED'\\\n--data-raw 'personId=101777723309&personId=1175339043204&personId=1115266537043&personId=116731406166&extensionSet.extensionNames=HANGOUTS_ADDITIONAL_DATA&extensionSet.extensionNames=HANGOUTS_OFF_NETWORK_GAIA_GET&extensionSet.extensionNames=HANGOUTS_PHONE_DATA&includedProfileStates=ADMIN_BLOCKED&includedProfileStates=DELETED&includedProfileStates=PRIVATE_PROFILE&mergedPersonSourceOptions.includeAffinity=CHAT_AUTOCOMPLETE&coreIdParams.useRealtimeNotificationExpandedAcls=true&requestMask.includeField.paths=person.email&requestMask.includeField.paths=person.gender&requestMask.includeField.paths=person.in_app_reachability&requestMask.includeField.paths=person.metadata&requestMask.includeField.paths=person.name&requestMask.includeField.paths=person.phone&requestMask.includeField.paths=person.photo&requestMask.includeField.paths=person.read_only_profile_info&requestMask.includeField.paths=person.organization&requestMask.includeField.paths=person.location&requestMask.includeField.paths=person.cover_photo&requestMask.includeContainer=PROFILE&requestMask.includeContainer=DOMAIN_PROFILE&requestMask.includeContainer=CONTACT&key=REDACTED'\n</code></pre>\n\n<p>So I just need 4 headers: <code>Authorization</code>, <code>Content-Type</code>, <code>Origin</code>, and <code>Cookie</code>. That&rsquo;s a lot more manageable.</p>\n\n<h3 id=\"step-4-translate-it-into-python\">step 4: translate it into Python</h3>\n\n<p>Now that we know what headers we need, we can translate our <code>curl</code> command into a Python program!\nThis part is also a pretty mechanical process, the goal is just to send exactly the same data with Python as we were with curl.</p>\n\n<p>Here&rsquo;s what that looks like. This is exactly the same as the previous <code>curl</code>\ncommand, but using Python&rsquo;s <code>requests</code>. I also broke up the very long request body\nstring into an array of tuples to make it easier to work with\nprogrammmatically.</p>\n\n<pre><code>import requests\nimport urllib\n\ndata = [\n    ('personId','101777723'), # I redacted these IDs a bit too\n    ('personId','117533904'),\n    ('personId','111526653'),\n    ('personId','116731406'),\n    ('extensionSet.extensionNames','HANGOUTS_ADDITIONAL_DATA'),\n    ('extensionSet.extensionNames','HANGOUTS_OFF_NETWORK_GAIA_GET'),\n    ('extensionSet.extensionNames','HANGOUTS_PHONE_DATA'),\n    ('includedProfileStates','ADMIN_BLOCKED'),\n    ('includedProfileStates','DELETED'),\n    ('includedProfileStates','PRIVATE_PROFILE'),\n    ('mergedPersonSourceOptions.includeAffinity','CHAT_AUTOCOMPLETE'),\n    ('coreIdParams.useRealtimeNotificationExpandedAcls','true'),\n    ('requestMask.includeField.paths','person.email'),\n    ('requestMask.includeField.paths','person.gender'),\n    ('requestMask.includeField.paths','person.in_app_reachability'),\n    ('requestMask.includeField.paths','person.metadata'),\n    ('requestMask.includeField.paths','person.name'),\n    ('requestMask.includeField.paths','person.phone'),\n    ('requestMask.includeField.paths','person.photo'),\n    ('requestMask.includeField.paths','person.read_only_profile_info'),\n    ('requestMask.includeField.paths','person.organization'),\n    ('requestMask.includeField.paths','person.location'),\n    ('requestMask.includeField.paths','person.cover_photo'),\n    ('requestMask.includeContainer','PROFILE'),\n    ('requestMask.includeContainer','DOMAIN_PROFILE'),\n    ('requestMask.includeContainer','CONTACT'),\n    ('key','REDACTED')\n]\nresponse = requests.post('https://people-pa.clients6.google.com/v2/people/?key=REDACTED',\n    headers={\n        'X-HTTP-Method-Override': 'GET',\n        'Authorization': 'SAPISIDHASH REDACTED',\n        'Content-Type': 'application/x-www-form-urlencoded',\n        'Origin': 'https://hangouts.google.com',\n        'Cookie': 'REDACTED',\n    },\n    data=urllib.parse.urlencode(data),\n)\n\nprint(response.text)\n</code></pre>\n\n<p>I ran this program and it works &ndash; it prints out a bunch of JSON! Hooray!</p>\n\n<p>You&rsquo;ll notice that I replaced a bunch of things with <code>REDACTED</code>, that&rsquo;s because\nif I included those values you could access the Google Hangouts API for my\naccount which would be no good.</p>\n\n<h3 id=\"and-we-re-done\">and we&rsquo;re done!</h3>\n\n<p>Now I can modify the Python program to do whatever I want, like passing\ndifferent parameters or parsing the output.</p>\n\n<p>I&rsquo;m not going to do anything interesting with it because I&rsquo;m not actually\ninterested in using this API at all, I just wanted to show what the process looks like.</p>\n\n<p>But we get back a bunch of JSON that you could definitely do something with.</p>\n\n<h3 id=\"curlconverter-looks-great\">curlconverter looks great</h3>\n\n<p>Someone commented that you can translate curl to Python (and a bunch of other\nlanguages!) automatically with <a href=\"https://curlconverter.com/\">https://curlconverter.com/</a> which looks amazing\n&ndash; I&rsquo;ve always done it manually.  I tried it out on this example and it seems\nto work great.</p>\n\n<h3 id=\"figuring-out-how-the-api-works-is-nontrivial\">figuring out how the API works is nontrivial</h3>\n\n<p>I don&rsquo;t want to undersell how difficult it can be to figure out how an unknown\nAPI works &ndash; it&rsquo;s not obvious! I have no idea what a lot of the parameters to\nthis Google Hangouts API do!</p>\n\n<p>But a lot of the time there are some parameters that seem pretty straightforward,\nlike <code>requestMask.includeField.paths=person.email</code> probably means &ldquo;include each\nperson&rsquo;s email address&rdquo;. So I try to focus on the parameters I <em>do</em> understand\nmore than the ones I <em>don&rsquo;t</em> understand.</p>\n\n<h3 id=\"this-always-works-in-theory\">this always works (in theory)</h3>\n\n<p>Some of you might be wondering &ndash; can you always do this?</p>\n\n<p>The answer is sort of yes &ndash; browsers aren&rsquo;t magic! All the information\nbrowsers send to your backend is just HTTP requests. So if I copy all of the\nHTTP headers that my browser is sending, I think there&rsquo;s literally no way for\nthe backend to tell that the request <em>isn&rsquo;t</em> sent by my browser and is actually\nbeing sent by a random Python program.</p>\n\n<p>Of course, we removed a bunch of the headers the browser sent so theoretically\nthe backend <em>could</em> tell, but usually they won&rsquo;t check.</p>\n\n<p>There are some caveats though &ndash; for example a lot of Google services have\nbackends that communicate with the frontend in a totally inscrutable (to me)\nway, so even though in theory you could mimic what they&rsquo;re doing, in practice\nit might be almost impossible. And bigger APIs that encounter more abuse\nwill have more protections.</p>\n\n<p>Now that we&rsquo;ve seen how to use undocumented APIs like this, let&rsquo;s talk about\nsome things that can go wrong.</p>\n\n<h3 id=\"problem-1-expiring-session-cookies\">problem 1: expiring session cookies</h3>\n\n<p>One big problem here is that I&rsquo;m using my Google session cookie for\nauthentication, so this script will stop working whenever my browser session\nexpires.</p>\n\n<p>That means that this approach wouldn&rsquo;t work for a long running program (I&rsquo;d\nwant to use a real API), but if I just need to quickly grab a little bit of data as a\n1-time thing, it can work great!</p>\n\n<h3 id=\"problem-2-abuse\">problem 2: abuse</h3>\n\n<p>If I&rsquo;m using a small website, there&rsquo;s a chance that my little Python script\ncould take down their service because it&rsquo;s doing way more requests than they&rsquo;re\nable to handle. So when I&rsquo;m doing this I try to be respectful and not make too\nmany requests too quickly.</p>\n\n<p>This is especially important because a lot of sites which don&rsquo;t have official\nAPIs are smaller sites with less resources.</p>\n\n<p>In this example obviously this isn&rsquo;t a problem &ndash; I think I made 20 requests\ntotal to the Google Hangouts backend while writing this blog post, which they\ncan definitely handle.</p>\n\n<p>Also if you&rsquo;re using your account credentials to access the API in a excessive\nway and you cause problems, you might (very reasonably) get your account\nsuspended.</p>\n\n<p>I also stick to downloading data that&rsquo;s either mine or that&rsquo;s intended to be\npublicly accessible &ndash; I&rsquo;m not searching for vulnerabilities.</p>\n\n<h3 id=\"remember-that-anyone-can-use-your-undocumented-apis\">remember that anyone can use your undocumented APIs</h3>\n\n<p>I think the most important thing to know about this isn&rsquo;t actually how to use <em>other\npeople&rsquo;s</em> undocumented APIs. It&rsquo;s fun to do, but it has a lot\nof limitations and I don&rsquo;t actually do it that often.</p>\n\n<p>It&rsquo;s much more important to understand that anyone can do this to <em>your</em>\nbackend API!  Everyone has developer tools and the network tab, and it&rsquo;s pretty\neasy to see which parameters you&rsquo;re passing to the backend and to change them.</p>\n\n<p>So if anyone can just change some parameters to get another user&rsquo;s information,\nthat&rsquo;s no good. I think most developers building publicly availble APIs know\nthis, but I&rsquo;m mentioning it because everyone needs to learn it for the first\ntime at some point :)</p>\n"
}