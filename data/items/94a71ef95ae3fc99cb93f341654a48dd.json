{
  "title": "DataPipeline 7.1 Released",
  "link": "https://northconcepts.com/blog/2022/01/24/datapipeline-7-1-released/",
  "comments": "https://northconcepts.com/blog/2022/01/24/datapipeline-7-1-released/#respond",
  "pubDate": "Mon, 24 Jan 2022 13:12:49 +0000",
  "dc:creator": "The DataPipeline Team",
  "category": [
    "Data Pipeline",
    "News"
  ],
  "guid": "https://northconcepts.com/blog/?p=2338",
  "description": "<p> [&#8230;]</p>\n<p>The post <a rel=\"nofollow\" href=\"https://northconcepts.com/blog/2022/01/24/datapipeline-7-1-released/\">DataPipeline 7.1 Released</a> appeared first on <a rel=\"nofollow\" href=\"https://northconcepts.com/blog\">Data Pipeline</a>.</p>\n",
  "content:encoded": "<p>DataPipeline 7.1 is now available.  It includes improvements in the areas of file I/O, data mapping, database integration, decisioning, debugging, and more.  You can <a href=\"https://northconcepts.com/docs/user-guide/#getting-started\">get started with Maven or Gradle</a>, <a href=\"https://northconcepts.com/docs/examples/\">browse our Java examples</a>, and <a href=\"https://northconcepts.com/changelog/\">review the changelog</a>.</p>\n<p><span id=\"more-2338\"></span></p>\n<h2>Upgrade Log4J from v1.2.17 to v2.17.0</h2>\n<p>DataPipeline has been using an older version of Log4J that was not affected by the recent set of issues.  However, since we were already moving from 1.x to 2.x, we&#8217;ll step over the issues you&#8217;ve been hearing about.  This release uses the 1.2 API bridge allowing for an upgrade without code changes.</p>\n<p>&nbsp;</p>\n<h2>EventBus Listeners</h2>\n<p>EventBus now uses strong references for listeners by default instead of SoftReferences.  No more disappearing listeners when the JVM runs out of memory.  See EventBus.setUseStrongListenerReference(boolean useStrongListenerReference) to toggle.</p>\n<p>&nbsp;</p>\n<h2>Database Improvements</h2>\n<ul>\n<li>Added a JdbcLookup.autoCloseConnection property to force database connection closing when the lookup is closed</li>\n<li>The dynamic SQL code builder classes under <strong>northconcepts.datapipeline.jdbc.sql</strong> now include a Delete class as well as new getParameterValues() methods to retrieve candidate values for insert and update.</li>\n<li>GenericUpsert, MergeUpsert, MySqlUpsert, PostgreSqlUpsert, and SybaseUpsert now support upserts with no non-key fields.</li>\n<li>The overloaded JdbcConnectionFactory.wrap() to accept driverClassName, url, username, and password for direct connection creation.</li>\n<li>JdbcMultiWriter, JdbcReader, JdbcUpsertWriter, JdbcWriter, and JdbcLookup now accept JdbcConnectionFactory to wrap DataSource and other connection creation options</li>\n<li>Added JdbcWriter.setJdbcType(Class<?> type, int jdbcType) to allow overriding of the JDBC type sent to the database based on the Java class type</li>\n<li>JdbcWriter now uses the type overrides for both null and non-null values</li>\n</ul>\n<p>&nbsp;</p>\n<h2>API Improvements</h2>\n<ul>\n<li>Added Record.getFieldValueAsBytes(String fieldPath, byte[] defaultValue):bye[]</li>\n<li>Overrode the setter methods to return the superclass in the following classes: CSVReader, CSVWriter, ExcelReader, ExcelWriter, FixedWidthReader, FixedWidthWriter, JdbcReader, JdbcWriter, JsonReader, JsonWriter, XmlReader, XmlWriter</li>\n<li>Added open() and close() methods to the Filter, Transformer, and Lookup classes as callbacks from the endpoints that use them</li>\n<li>Added default constructor to MemoryReader and add(Record record) method</li>\n<li>Excluded more method prefixes in DPEL (for example java.security, java.util.concurrent, java.util.prefs, and more)</li>\n</ul>\n<p>&nbsp;</p>\n<h2>I/O Improvements</h2>\n<ul>\n<li>FileWriter now flushes on close if autoCloseWriter is false</li>\n<li>ParsingReader now accepts a charsetName</li>\n<li>Added support for XML 1.1 declarations to XmlSerializable interface: XmlSerializable.writeXml(T bean, StreamResult outputTarget, boolean closeStream, boolean addXml11Delcaration)</li>\n<li>Added an <strong>autoCloseReader</strong> property to JsonRecordPipelineInput, XmlPipelineInput, and XmlRecordPipelineInput</li>\n</ul>\n<p>&nbsp;</p>\n<h2>Debugging Improvements</h2>\n<ul>\n<li>Added DebugWriter to ease logging of outgoing records</li>\n<li>Added a JdbcWriter.debug property to turn on logging of the generated SQL</li>\n<li>The SQL builder classes under the <strong>northconcepts.datapipeline.jdbc.*</strong> packages now support a &#8220;debug&#8221; property</li>\n<li>toString() now includes its key-value properties</li>\n</ul>\n<p>&nbsp;</p>\n<h2>DecisionTable and DecisionTree Improvements</h2>\n<ul>\n<li>Added an optional <strong>defaultOutcomes</strong> property to DecisionTable to explicitly define the results when no rules match/fire</li>\n<li>Overloaded <strong>addField(String variable, String expression, boolean includeInOutcome)</strong> on DecisionTable and DecisionTree to easily include a calculated field in the results</li>\n<li>DecisionTableCondition now allows null variable names</li>\n</ul>\n<p>&nbsp;</p>\n<h2>Pipeline and Dataset Improvements</h2>\n<ul>\n<li>Dataset has several new ways to read its cached data including an overloaded createDataReader() and getRecordList(long offset, int count) methods.</li>\n<li>Added an optional <strong>maxColumnStatsRecords</strong> property to Dataset to indicate the number of records to use when calculating column-based stats</li>\n<li>Since column stats calculation is done asynchronously, Dataset add a <strong>columnStatsReaderThreads</strong> property for the number of threads to use when processing column stats (default is 2)</li>\n<li>Several overloaded waitForColumnStatsToLoad() methods are now in Dataset to block until asynchronous column stats processing completes</li>\n<li>Dataset&#8217;s asynchronous data loading and column stats calculation can be terminated with the new cancelLoad() method</li>\n<li>Column now includes new counts and date-time inferencing for the data loaded: getNonNullCount(), getNonNullNonBlankCount(), getInferredNumericValueCount(), getInferredTemporalValueCount(), getInferredBooleanValueCount(), getTemporalPatternCount(), getTemporalPatterns()</li>\n<li>Added AbstractPipeline now includes a dateTimePatternDetector property to configure the date-time patterns tested during column processing</li>\n</ul>\n<p>&nbsp;</p>\n<h2>Other DataPipeline Foundations Improvements</h2>\n<ul>\n<li>FieldMapping now has an optional <strong>type</strong> property for automatic conversion</li>\n<li>FieldDef includes a new <strong>example</strong> property to aid in schema documentation</li>\n<li>19-digit whole numbers are mapped to <strong>long</strong> instead <strong>BigDecimal</strong> in the JdbcTableColumn class and code generators</li>\n<li>Maps on Bean subclasses are now sorted by key when serialized to JSON</li>\n<li>DataMapping now implements the JavaCodeGenerator interface for use-cases that need to emit Java code</li>\n<li>Added <strong>getTablesSorted()</strong> and <strong>getTablesSortedTopologically()</strong> to JdbcConnection to retrieve tables sorted by name or by dependencies</li>\n<li>JdbcTable and JdbcTableColumn now have getNameAsJavaClassName() and getNameAsJavaIdentifier() methods to aide in code generation</li>\n<li>Added com.northconcepts.datapipeline.foundations.time.<strong>DataTimePatternMatch</strong>, <strong>DateTimePattern</strong>, and <strong>DateTimePatternDetector</strong> for use in dataset date-time inferencing or on their own</li>\n<li>Added GenerateTableDaoClasses and GenerateQueryDaoClasses to generate data access Java beans using the table metadata from a live database</li>\n<li>Added GenerateSpringDataJpaClasses to generate Spring Data JPA entities and repositories using the table metadata from a live database</li>\n</ul>\n<p>&nbsp;</p>\n<h2>DataPipeline Integration Improvements</h2>\n<ul>\n<li>Added AvroPipelineInput, AvroPipelineOutput, ParquetPipelineInput, ParquetPipelineOutput to allow Avro and Parquet endpoints to more easily participate in pipelines</li>\n<li>Added ParquetDataWriter.setSchema(String schema) to allow override of the schema used when reading Parquet files</li>\n<li>AsymmetricEncryptingReader and AsymmetricDecryptingReader now explicitly rely on PublicKey and PrivateKey respectively for clarity instead of their Key superclass</li>\n</ul>\n<p>&nbsp;</p>\n<h2>Bugfixes</h2>\n<ul>\n<li>AsyncWriter ensures that its threads are shutdown when exceptions are thrown during the nested endpoint&#8217;s open() and close() methods. This fix also ensures that the JobCallback.onFailure() method is called if an asynchronous failure occurs while JdbcMultiWriter.close() is executing.</li>\n<li>XmlReader and XmlRecordReader will always use <strong>sun.xml.internal.stream.XMLInputFactoryImpl</strong> as the XML input factory regardless of the JDK. This release also introduces an optional <strong>com.northconcepts.datapipeline.xml.XMLInputFactory</strong> JVM param to override the Sun class if needed.</li>\n<li>getTypedListenerCount() and getUntypedEventListenerCount() now account for nullified SoftReferences before they are removed by the event bus&#8217;s next cleanup. There was a small window in which the count would reflect the old numbers.</li>\n<li>Binary deserialization now returns DATETIME field values as java.util.Date instead java.sql.Timestamp while reading in FileReader</li>\n<li>CombinedLogReader now explicitly uses Locale.ENGLISH to prevent month name parsing issues outside of English locales</li>\n<li>AbstractFieldMapping now clones more types to prevent side effects on the source data during mapping</li>\n<li>ExcelPipelineInput now escapes the file path in the generated Java code to open Excel files</li>\n<li>OrcDataReader and OrcDataWriter now treat Orc&#8217;s TIMESTAMP type as a local datetime instead of adjusting it for the current time zone</li>\n<li>NPE when record doesn&#8217;t contain an optional field during mapping</li>\n</ul>\n<p>Happy 2022!</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>The post <a rel=\"nofollow\" href=\"https://northconcepts.com/blog/2022/01/24/datapipeline-7-1-released/\">DataPipeline 7.1 Released</a> appeared first on <a rel=\"nofollow\" href=\"https://northconcepts.com/blog\">Data Pipeline</a>.</p>\n",
  "wfw:commentRss": "https://northconcepts.com/blog/2022/01/24/datapipeline-7-1-released/feed/",
  "slash:comments": 0
}