{
  "title": "New Features In Rust Include Generic Associated Types (GATs) After Six-Year Wait",
  "link": "https://developers.slashdot.org/story/22/11/05/2048240/new-features-in-rust-include-generic-associated-types-gats-after-six-year-wait?utm_source=rss1.0mainlinkanon&utm_medium=feed",
  "description": "The newest stable version of Rust, 1.65.0 includes generic associated types (GATs) &mdash; the ability to declare lifetime, type, and const generics on associated types. \"It's hard to put into few words just how useful these can be,\" writes the official Rust blog. \n\nAn earlier post pointed out that \"There have been a good amount of changes that have had to have been made to the compiler to get GATs to work,\" noting that the request-for-comments for this feature was first opened in 2016. \n\nAnd Rust's types team also created a blog post with more detail:\nNote that this is really just rounding out the places where you can put generics: for example, you can already have generics on freestanding type aliases and on functions in traits. Now you can just have generics on type aliases in traits (which we just call associated types).... \n\nIn general, GATs provide a foundational basis for a vast range of patterns and APIs. If you really want to get a feel for how many projects have been blocked on GATs being stable, go scroll through either the tracking issue: you will find numerous issues from other projects linking to those threads over the years saying something along the lines of \"we want the API to look like X, but for that we need GATs\" (or see this comment that has some of these put together already). If you're interested in how GATs enable a library to do zero-copy parsing, resulting in nearly a ten-fold performance increase, you might be interested in checking out a blog post on it by Niko Matsakis. \n\nAll in all, even if you won't need to use GATs directly, it's very possible that the libraries you use will use GATs either internally or publically for ergonomics, performance, or just because that's the only way the implementation works.... [A]ll the various people involved in getting this stabilization to happen deserve the utmost thanks. As said before, it's been 6.5 years coming and it couldn't have happened without everyone's support and dedication. \nRust 1.65.0 also contains let-else statements &mdash; a new kind of let statement \"with a refutable pattern and a diverging else block that executes when that pattern doesn't match,\" according to the release announcement. \n\nAnd it highlights another new feature:\n\nPlain block expressions can now be labeled as a break target, terminating that block early. This may sound a little like a goto statement, but it's not an arbitrary jump, only from within a block to its end. This was already possible with loop blocks, and you may have seen people write loops that always execute only once, just to get a labeled break. \n\nNow there's a language feature specifically for that! Labeled break may also include an expression value, just as with loops, letting a multi-statement block have an early \"return\" value.<p><div class=\"share_submission\" style=\"position:relative;\">\n<a class=\"slashpop\" href=\"http://twitter.com/home?status=New+Features+In+Rust+Include+Generic+Associated+Types+(GATs)+After+Six-Year+Wait%3A+https%3A%2F%2Fbit.ly%2F3sYs0bk\"><img src=\"https://a.fsdn.com/sd/twitter_icon_large.png\"></a>\n<a class=\"slashpop\" href=\"http://www.facebook.com/sharer.php?u=https%3A%2F%2Fdevelopers.slashdot.org%2Fstory%2F22%2F11%2F05%2F2048240%2Fnew-features-in-rust-include-generic-associated-types-gats-after-six-year-wait%3Futm_source%3Dslashdot%26utm_medium%3Dfacebook\"><img src=\"https://a.fsdn.com/sd/facebook_icon_large.png\"></a>\n\n\n\n</div></p><p><a href=\"https://developers.slashdot.org/story/22/11/05/2048240/new-features-in-rust-include-generic-associated-types-gats-after-six-year-wait?utm_source=rss1.0moreanon&amp;utm_medium=feed\">Read more of this story</a> at Slashdot.</p><iframe src=\"https://slashdot.org/slashdot-it.pl?op=discuss&amp;id=22337965&amp;smallembed=1\" style=\"height: 300px; width: 100%; border: none;\"></iframe>",
  "dc:creator": "EditorDavid",
  "dc:date": "2022-11-05T21:34:00+00:00",
  "dc:subject": "programming",
  "slash:department": "Rust-never-sleeps",
  "slash:section": "developers",
  "slash:comments": 20,
  "slash:hit_parade": "20,19,15,12,2,1,1"
}