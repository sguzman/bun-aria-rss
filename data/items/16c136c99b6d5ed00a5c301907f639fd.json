{
  "guid": "tag:blogger.com,1999:blog-6300367579216018061.post-4292285671140210900",
  "pubDate": "Fri, 07 Jul 2017 04:35:00 +0000",
  "atom:updated": "2017-07-06T21:37:21.236-07:00",
  "category": [
    "cloud native java",
    "cqrs",
    "event sourcing",
    "event-driven microservices",
    "serverless",
    "service block architecture",
    "service blocks",
    "spring boot",
    "spring cloud",
    "spring cloud function"
  ],
  "title": "From Microservices to Service Blocks using Spring Cloud Function and AWS Lambda",
  "description": "<link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Open+Sans:300,300italic,400,400italic,600,600italic%7CNoto+Serif:400,400italic,700,700italic%7CDroid+Sans:400,700\"><style>.hljs-title, .hljs-id, .scss .hljs-preprocessor {    font-weight: 400 !important; } .hljs-class .hljs-title, .hljs-type, .vhdl .hljs-literal, .tex .hljs-command {    font-weight: 400 !important; } .hljs-keyword, .css .rule .hljs-keyword, .hljs-winutils, .nginx .hljs-title, .hljs-subst, .hljs-request, .hljs-status {    font-weight: 400 !important; } .sect1{padding-bottom:0!important} .sect1+.sect1{border:0!important} .conum[data-value]{display:inline-block;color:#fff!important;background-color:rgba(0,0,0,.8);-webkit-border-radius:100px;border-radius:100px;text-align:center;font-size:.75em;width:1.67em;height:1.67em;line-height:1.67em;font-family:\"Open Sans\",\"DejaVu Sans\",sans-serif;font-style:normal;font-weight:bold} .conum[data-value] *{color:#fff!important} .conum[data-value]+b{display:none} .conum[data-value]:after{content:attr(data-value)} .fa-caret-up {     color: green;     text-shadow: 1px 1px 1px #ccc;     font-size: 1.75em !important; }  .fa-caret-down {     color: red;     text-shadow: 1px 1px 1px #ccc;     font-size: 1.75em !important; }  .fa-minus {     color: #999;     text-shadow: 1px 1px 1px #ccc;     font-size: 1em !important; }  .fa-plus {     font-size: 1em !important;     color: green;     text-shadow: 1px 1px 1px #ccc; }   @media screen and (min-width: 768px) { .table-responsive { font-size: 0.8em; max-width: 50em; } }  @media screen and (max-width: 768px) {     .table-responsive {     font-size: 0.65em; } }  .table-responsive th, .table-responsive tr, .table-responsive td { padding: 4px 4px 4px 4px !important; } p {     margin-bottom: 1.25em !important; line-height: 1.4; } li p { line-height: 1.4 !important; margin: 0 !important; } .blog-post-asciidoc .content img {  max-height: none;  width: 100% !important; } .admonitionblock > table {     background: rgba(0, 0, 0, 0) none repeat scroll 0 0;     border: 0 none;     border-collapse: separate;     width: 100%; } table {     background: #fff none repeat scroll 0 0;     border: 1px solid #dedede;     margin-bottom: 1.25em; } pre .conum[data-value]{position:relative;top:-.125em} b.conum *{color:inherit!important} .conum:not([data-value]):empty{display:none} .hdlist>table,.colist>table{border:0;background:none} .hdlist>table>tbody>tr,.colist>table>tbody>tr{background:none} td.hdlist1{padding-right:.75em;font-weight:bold} td.hdlist1,td.hdlist2{vertical-align:top} .literalblock+.colist,.listingblock+.colist{margin-top:-.5em} .colist>table tr>td:first-of-type{padding:0 .75em;line-height:1} .colist>table tr>td:last-of-type{padding:.25em 0} h1,h2,h3,#toctitle,.sidebarblock>.content>.title,h3,h4,h6{font-family:\"Open Sans\",sans-serif;font-style:normal;text-rendering:optimizeLegibility;margin-top:1em;margin-bottom:.5em;} .blog-post-asciidoc p{margin-bottom:1.25rem} @media only screen and (min-width:768px){.sect1{padding-bottom:1.25em}}.sect1+.sect1{border-top:1px solid #efefed} pre, pre > code {     -moz-osx-font-smoothing: auto;     color: rgba(0, 0, 0, 0.9);     font-family: monospace,monospace;     font-weight: 400;     line-height: 1.45;     text-rendering: optimizelegibility; } .blog-post-asciidoc code,kbd,pre,samp{font-size:.9em;font-weight:400;} .blog-post-asciidoc .admonitionblock>table{border-collapse:separate;border:0;background:none;width:100%} .blog-post-asciidoc .admonitionblock>table td.icon{text-align:center;width:80px} .blog-post-asciidoc .admonitionblock>table td.icon img{max-width:none} .blog-post-asciidoc .admonitionblock>table td.icon .title{font-weight:bold;font-family:\"Open Sans\",\"DejaVu Sans\",sans-serif;text-transform:uppercase} .blog-post-asciidoc .admonitionblock>table td.content{padding-left:1.125em;padding-right:1.25em;border-left:1px solid #ddddd8;color:rgba(0,0,0,.6)} .blog-post-asciidoc .admonitionblock>table td.content>:last-child>:last-child{margin-bottom:0} .blog-post-asciidoc .admonitionblock td.icon [class^=\"fa icon-\"]{font-size:2.5em;text-shadow:1px 1px 2px rgba(0,0,0,.5);cursor:default} .blog-post-asciidoc .admonitionblock td.icon .icon-note:before{content:\"\\f05a\";color:#19407c} .blog-post-asciidoc .admonitionblock td.icon .icon-tip:before{content:\"\\f0eb\";text-shadow:1px 1px 2px rgba(155,155,0,.8);color:#111} .blog-post-asciidoc .admonitionblock td.icon .icon-warning:before{content:\"\\f071\";color:#bf6900} .blog-post-asciidoc .admonitionblock td.icon .icon-caution:before{content:\"\\f06d\";color:#bf3400} .blog-post-asciidoc .admonitionblock td.icon .icon-important:before{content:\"\\f06a\";color:#bf0000} #personDataTable td {     vertical-align: middle; } .rank-col {     text-align: center; } #personDataTable img {     max-width: 35px;     padding: 0; } .table-responsive {     font-weight: 400; } .table > thead > tr > th {     border-bottom: 2px solid #ddd;     font-weight: 400;     padding: 8px !important;     vertical-align: bottom; } .table-responsive {     font-family: Helvetica,sans-serif; } .exampleblock pre {     margin-top: auto; } .exampleblock .content {     margin-top: auto; } blockquote {     border-left: 5px solid #eee;     color: #666;     font-size: 16px;     margin: 0;     padding: 10px 20px; } .attribution {     font-size: small;     text-align: right; } .table-responsive p { margin: 0 !important; } p.tableblock {   font-size: 14px;   margin: 0 !important; } table.tableblock { max-width: 100%; border-collapse: separate; } table.tableblock td > .paragraph:last-child p > p:last-child, table.tableblock th > p:last-child, table.tableblock td > p:last-child { margin-bottom: 0; }  table.tableblock, th.tableblock, td.tableblock { border: 0 solid #dddddd; }  table.grid-all th.tableblock, table.grid-all td.tableblock { border-width: 0 1px 1px 0; }  table.grid-all tfoot > tr > th.tableblock, table.grid-all tfoot > tr > td.tableblock { border-width: 1px 1px 0 0; }  table.grid-cols th.tableblock, table.grid-cols td.tableblock { border-width: 0 1px 0 0; }  table.grid-all * > tr > .tableblock:last-child, table.grid-cols * > tr > .tableblock:last-child { border-right-width: 0; }  table.grid-rows th.tableblock, table.grid-rows td.tableblock { border-width: 0 0 1px 0; }  table.grid-all tbody > tr:last-child > th.tableblock, table.grid-all tbody > tr:last-child > td.tableblock, table.grid-all thead:last-child > tr > th.tableblock, table.grid-rows tbody > tr:last-child > th.tableblock, table.grid-rows tbody > tr:last-child > td.tableblock, table.grid-rows thead:last-child > tr > th.tableblock { border-bottom-width: 0; }  table.grid-rows tfoot > tr > th.tableblock, table.grid-rows tfoot > tr > td.tableblock { border-width: 1px 0 0 0; }  table.frame-all { border-width: 1px; }  table.frame-sides { border-width: 0 1px; }  table.frame-topbot { border-width: 1px 0; }  th.halign-left, td.halign-left { text-align: left; }  th.halign-right, td.halign-right { text-align: right; }  th.halign-center, td.halign-center { text-align: center; }  th.valign-top, td.valign-top { vertical-align: top; }  th.valign-bottom, td.valign-bottom { vertical-align: bottom; }  th.valign-middle, td.valign-middle { vertical-align: middle; }  table thead th, table tfoot th { font-weight: bold; }  tbody tr th { display: table-cell; line-height: 1.4; background: whitesmoke; }  tbody tr th, tbody tr th p, tfoot tr th, tfoot tr th p { color: #222222; font-weight: bold; }  p.tableblock > code:only-child { background: none; padding: 0; }  table tr.even, table tr.alt, table tr:nth-of-type(2n) {     background: #f9f9f9 none repeat scroll 0 0; } div.table-responsive {  border: 0; }  .sql p {  font-family: courier; } </style><link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.2.0/css/font-awesome.min.css\"><div id=\"content\" class=\"blog-post-asciidoc\"><div class=\"article\">           <div id=\"preamble\"><div class=\"sectionbody\"><div id=\"__asciidoctor-preview-472__\" class=\"paragraph\"><p>This blog post will introduce you to building service block architectures using <a href=\"https://spring.io/blog/2017/07/05/introducing-spring-cloud-function\" target=\"_blank\">Spring Cloud Function</a> and <a href=\"https://en.wikipedia.org/wiki/AWS_Lambda\" target=\"_blank\">AWS Lambda</a>.</p></div></div></div><div class=\"sect1\"><h2 id=\"_what_is_spring_cloud_function\">What is Spring Cloud Function?</h2><div class=\"sectionbody\"><div id=\"__asciidoctor-preview-494__\" class=\"paragraph\"><p><a href=\"https://github.com/spring-cloud/spring-cloud-function\" target=\"_blank\">Spring Cloud Function</a> is a project from <a href=\"https://pivotal.io/\" target=\"_blank\">Pivotal</a> that brings the same popular fundamentals behind <a href=\"https://projects.spring.io/spring-boot/\" target=\"_blank\">Spring Boot</a> to <a href=\"https://martinfowler.com/articles/serverless.html\" target=\"_blank\">serverless functions</a>.</p></div></div></div><div class=\"sect1\"><h2 id=\"_service_block_architecture\">Service Block Architecture</h2><div class=\"sectionbody\"><div id=\"__asciidoctor-preview-512__\" class=\"paragraph\"><p>One of the most important considerations in software design is modularity. If we think about modularity in the mechanical sense, components of a system are designed as modules that can be replaced in the event of a mechanical failure. In the engine of a car, for example, you do not need to replace the entire engine if a single spark plug fails.</p></div><div id=\"__asciidoctor-preview-516__\" class=\"paragraph\"><p>In software, modularity allows you to <em>design</em> for change.</p></div><div id=\"__asciidoctor-preview-520__\" class=\"paragraph\"><p>Modularity also gives developers a shared map that can be used to <em>reason</em> about the functionality of an application. By being able to visualize and map out the complex processes that are orchestrated by an application’s source code, developers and architects alike can more easily visualize where to make a change with surgical precision.</p></div><div class=\"sect2\"><h3 id=\"_changing_software\">Changing software</h3><div id=\"__asciidoctor-preview-534__\" class=\"paragraph\"><p>In many ways, we should consider ourselves lucky to be building software instead of cars. Some of today’s most valuable companies are created using bits and bytes instead of plastic and metal. But despite these advances, the very best car company releases less often than the world’s very worst software company.</p></div><div id=\"__asciidoctor-preview-538__\" class=\"paragraph\"><p>An application’s source code is a system of connected bits and bytes that is always evolving—one change after another. But, as the source code of a system expands or contracts, small changes require us to build and deploy entire applications.</p></div><div id=\"__asciidoctor-preview-542__\" class=\"paragraph\"><p>To make one small code change to a production environment, we are required to deploy everything else we didn’t change.</p></div><div id=\"__asciidoctor-preview-546__\" class=\"paragraph\"><p>When teams share a deployment pipeline for an application, teams become forced to plan around a schedule they have little or no control over. For this reason, innovation is stifled—as developers must wait for the next bus before they can get any feedback about their changes.</p></div><div id=\"__asciidoctor-preview-550__\" class=\"paragraph\"><p>The result of building microservices is an ever increasing number of pathways to production. With more and more microservices, the amount of unchanged code per deployment decreases when measured across all applications. It’s the decomposition in microservices that ends up breeding lower unchanged code deployed over time—an <em>important</em> metric. Serverless functions can help to get this number even lower—as the unit of change becomes the function. But, how do microservices and serverless functions fit together?</p></div></div></div></div><div class=\"sect1\"><h2 id=\"_service_blocks\">Service Blocks</h2><div class=\"sectionbody\"><div id=\"__asciidoctor-preview-568__\" class=\"paragraph\"><p>Service blocks are <a href=\"https://pivotal.io/cloud-native\" target=\"_blank\">cloud-native applications</a> that share many characteristics with microservices. The key difference with microservices is that a service block is a <a href=\"http://scs-architecture.org/\" target=\"_blank\">self-contained system</a> that has <em>multiple</em> independently deployable units—mixing together serverless functions with <a href=\"https://linuxcontainers.org/\" target=\"_blank\">containers</a>.</p></div><div id=\"__asciidoctor-preview-572__\" class=\"paragraph\"><p></p><div class=\"imageblock\" style=\"display: block; padding: inherit; max-width:30em;\"><div class=\"content\"><img alt=\"Service Block Spring Cloud Function\" src=\"http://imgur.com/yLwadYi.png\"></div></div><p></p></div><div id=\"__asciidoctor-preview-576__\" class=\"paragraph\"><p>While microservices can be created entirely as serverless functions, a service block focuses on a contextual model that combines together traditional \"always-on\" applications with portable on-demand functions.</p></div></div></div><div class=\"sect1\"><h2 id=\"_the_patterns\">The Patterns</h2><div class=\"sectionbody\"><div id=\"__asciidoctor-preview-592__\" class=\"paragraph\"><p>The basic pattern of a service block combines a core application running in a container with a collection of serverless functions.</p></div><div id=\"__asciidoctor-preview-596__\" class=\"paragraph\"><p></p><div class=\"imageblock\" style=\"display: block; padding: inherit; max-width:60em;\"><div class=\"content\"><img alt=\"Service Block Patterns Spring Cloud Function\" src=\"http://imgur.com/iWAEQBw.png\"></div></div><a name='more'></a><p></p></div><div id=\"__asciidoctor-preview-600__\" class=\"paragraph\"><p>A basic service block will contain a single Spring Boot application (service core) that communicates with serverless functions.</p></div><div id=\"__asciidoctor-preview-604__\" class=\"paragraph\"><p>In this post we will focus on a basic service block, which are composed of two things:</p></div><div id=\"__asciidoctor-preview-610__\" class=\"ulist\"><ul><li><p>Service Cores</p></li><li><p>Functions</p></li></ul></div></div></div><div class=\"sect1\"><h2 id=\"_service_cores\">Service Cores</h2><div class=\"sectionbody\"><div id=\"__asciidoctor-preview-644__\" class=\"paragraph\"><p>Each service block will have a primary application container that communicates with other <a href=\"https://12factor.net/backing-services\" target=\"_blank\">backing services</a>, such as a database or a message broker. These application containers are called <em>service cores</em>. Cores are responsible for dispatching events to serverless functions that are deployed inside of the boundary of a service block.</p></div><div id=\"__asciidoctor-preview-658__\" class=\"exampleblock\"><div class=\"title\">Example 1. The core of a service block</div><div class=\"content\"><div id=\"__asciidoctor-preview-664__\" class=\"paragraph\"><p></p><div class=\"imageblock\" style=\"display: block; padding: inherit; max-width:40em;\"><div class=\"content\"><img alt=\"Service Block Cores Spring Cloud Function\" src=\"http://i.imgur.com/bHe0D5p.png\"></div></div><p></p></div></div></div><div id=\"__asciidoctor-preview-668__\" class=\"paragraph\"><p>In the diagram above, you’ll see a service core that is sending events to two different functions deployed to <a href=\"https://aws.amazon.com/lambda/\" target=\"_blank\">AWS Lambda</a>. For this example, the functions contain the business logic for most of the application. The <em>State Machine Function</em> includes the recipe for each domain aggregate. This function will use event sourcing to replicate the current state of domain aggregates from a stream of events, which is an approach called <a href=\"http://www.kennybastani.com/2016/04/event-sourcing-microservices-spring-cloud.html\" target=\"_blank\">event sourcing</a>.</p></div><div id=\"__asciidoctor-preview-672__\" class=\"paragraph\"><p>The <em>Metrics Function</em> does something similar. Each instance of a service core will emit operational events to the <em>Metrics Function</em>. These metrics can then be event sourced into reactive views that are exposed as a REST API to service consumers. You can also feed these events into an operational matrix of functions that can be used to automate tasks that keep each application instance healthy.</p></div><div class=\"sect2\"><h3 id=\"_anatomy_of_a_function\">Anatomy of a Function</h3><div id=\"__asciidoctor-preview-690__\" class=\"paragraph\"><p>The anatomy of a basic Spring Cloud Function project is quite simple.</p></div><div id=\"__asciidoctor-preview-702__\" class=\"exampleblock\"><div class=\"title\">Example 2. A simple metrics function</div><div class=\"content\"><div id=\"__asciidoctor-preview-716__\" class=\"listingblock\"><div class=\"content\"><pre class=\"highlightjs highlight\"><code class=\"language-java hljs\" data-lang=\"java\"><span class=\"hljs-meta\">@SpringBootApplication</span><br /><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MetricsFunction</span> </span>{<br /><br />    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>{<br />        SpringApplication.run(MetricsFunction.class, args);<br />    }<br /><br />    <span class=\"hljs-meta\">@Bean</span><br />    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Function&lt;MetricEvent, View&gt; <span class=\"hljs-title\">function</span><span class=\"hljs-params\">(MongoTemplate mongoTemplate)</span> </span>{<br />        <span class=\"hljs-keyword\">return</span> metricEvent -&gt; {<br />            <span class=\"hljs-comment\">// Get the event's key to lookup a view</span><br />            String key = metricEvent.getKey();<br /><br />            <span class=\"hljs-comment\">// Find the view's document if it exists, if not, insert a new one</span><br />            Query updateQuery = <span class=\"hljs-keyword\">new</span> Query(Criteria.where(<span class=\"hljs-string\">\"_id\"</span>).is(key));<br /><br />            <span class=\"hljs-comment\">// Increment the event's match count</span><br />            Update update = <span class=\"hljs-keyword\">new</span> Update().inc(<span class=\"hljs-string\">\"matches\"</span>, <span class=\"hljs-number\">1</span>)<br />                    .set(<span class=\"hljs-string\">\"lastModified\"</span>, metricEvent.getLastModified());<br /><br />            <span class=\"hljs-comment\">// Apply the increment or insert a new document and return the result</span><br />            View viewResult = mongoTemplate.findAndModify(updateQuery, update,<br />                    <span class=\"hljs-keyword\">new</span> FindAndModifyOptions().returnNew(<span class=\"hljs-keyword\">true</span>).upsert(<span class=\"hljs-keyword\">true</span>), View.class);<br /><br />            <span class=\"hljs-keyword\">if</span> (viewResult.getMatches() &lt;= <span class=\"hljs-number\">1</span>) {<br />                mongoTemplate.save(viewResult);<br />            }<br /><br />            <span class=\"hljs-keyword\">return</span> viewResult;<br />        };<br />    }<br />}</code></pre></div></div></div></div><div id=\"__asciidoctor-preview-720__\" class=\"paragraph\"><p>The example above is a Spring Boot application that uses Spring Cloud Function to collect metric events from a service core and update a view in a <a href=\"https://en.wikipedia.org/wiki/MongoDB\" target=\"_blank\">MongoDB</a> database. Now, going back to the diagram from earlier, we can begin to connect the dots on how events get generated from the service core.</p></div><div id=\"__asciidoctor-preview-724__\" class=\"paragraph\"><p></p><div class=\"imageblock\" style=\"display: block; padding: inherit; max-width:40em;\"><div class=\"content\"><img alt=\"Service Block Cores Spring Cloud Function\" src=\"http://i.imgur.com/bHe0D5p.png\"></div></div><p></p></div><div id=\"__asciidoctor-preview-728__\" class=\"paragraph\"><p>Incoming requests to the service core will come in the form of commands. These commands map to <a href=\"https://docs.spring.io/spring/docs/current/spring-framework-reference/html/mvc.html\" target=\"_blank\">Spring MVC controllers</a> that will emit events to functions that are deployed to AWS Lambda. The service core in this example shares a MongoDB database with its functions. By sharing this data source, view updates can be subscribed to without waiting for a response to return from a Lambda function.</p></div><div id=\"__asciidoctor-preview-732__\" class=\"paragraph\"><p>Further, with <a href=\"https://github.com/spring-projects/spring-data-examples/tree/master/mongodb/reactive\" target=\"_blank\">reactive repository support</a> in MongoDB, consumers can reactively monitor for events in real-time from AWS Lambda functions.</p></div><div id=\"__asciidoctor-preview-744__\" class=\"exampleblock\"><div class=\"title\">Example 3. Reactive stream of metric events from MongoDB</div><div class=\"content\"><div id=\"__asciidoctor-preview-758__\" class=\"listingblock\"><div class=\"content\"><pre class=\"highlightjs highlight\"><code class=\"language-java hljs\" data-lang=\"java\"><span class=\"hljs-meta\">@GetMapping</span>(value = <span class=\"hljs-string\">\"/metricEvents\"</span>, produces = MediaType.TEXT_EVENT_STREAM_VALUE)<br />    <span class=\"hljs-keyword\">public</span> Flux&lt;ServerSentEvent&lt;MetricView&gt;&gt; streamEvents(<span class=\"hljs-meta\">@PathVariable</span> String key,<br />      HttpServletRequest request) {<br />        <span class=\"hljs-comment\">// Stream the events from MongoDB</span><br />        Flux&lt;MetricView&gt; events = eventRepository.findByKey(key);<br /><br />        <span class=\"hljs-comment\">// Check if this is an SSE reconnection from a client</span><br />        String lastEventId = request.getHeader(<span class=\"hljs-string\">\"Last-Event-Id\"</span>);<br /><br />        <span class=\"hljs-comment\">// On SSE client reconnect, skip ahead in the stream to play back only new events</span><br />        <span class=\"hljs-keyword\">if</span> (lastEventId != <span class=\"hljs-keyword\">null</span>)<br />            events = events.skipUntil(e -&gt; e.getId().equals(lastEventId)).skip(<span class=\"hljs-number\">1</span>);<br /><br />        <span class=\"hljs-comment\">// Subscribe to the tailing events from the reactive repository query</span><br />        <span class=\"hljs-keyword\">return</span> events.map(event -&gt; ServerSentEvent.builder(event)<br />                .event(s.getCreatedDate().toString())<br />                .id(event.getId())<br />                .build())<br />                .delayElements(Duration.ofMillis(<span class=\"hljs-number\">100</span>));<br />}</code></pre></div></div></div></div><div id=\"__asciidoctor-preview-762__\" class=\"paragraph\"><p>In the example above, you’ll see a controller method that returns a <code>Flux</code> of <code>ServerSentEvent&lt;MetricView&gt;</code>. This method sits on the service core, and will monitor a MongoDB collection for new events and emit them every 100ms. A <a href=\"https://en.wikipedia.org/wiki/Server-sent_events\" target=\"_blank\">Server-Sent Event</a> is a technology that allows consumers to subscribe to events emitted by an HTTP server. In the case that an HTTP disconnect occurs, which is a frequent scenario, the client will send another request with the <code>Last-Event-Id</code> field in the headers. This allows the reactive event stream to resume where it last left off.</p></div></div></div></div><div class=\"sect1\"><h2 id=\"_example_project\">Example Project</h2><div class=\"sectionbody\"><div id=\"__asciidoctor-preview-780__\" class=\"paragraph\"><p>I’ve put together an <a href=\"https://github.com/kbastani/service-block-samples/tree/master/basic-block\" target=\"_blank\">example project</a> that demonstrates the basics of a service block architecture with Spring Cloud Function. This will be the first of <a href=\"https://github.com/kbastani/service-block-samples\" target=\"_blank\">multiple examples</a>, each demonstrating a different service block pattern. For this first service block, we’ll create an account service that dispatches events to a Spring Cloud Function app on AWS Lambda.</p></div><div id=\"__asciidoctor-preview-784__\" class=\"paragraph\"><p>The concerns we’ll be going over in this post:</p></div><div id=\"__asciidoctor-preview-790__\" class=\"ulist\"><ul><li><p>Service Core</p></li><li><p>Functions</p></li><li><p>Deployment</p></li><li><p>Lambda Invocation</p></li></ul></div><div class=\"sect2\"><h3 id=\"_service_core\">Service Core</h3><div id=\"__asciidoctor-preview-842__\" class=\"paragraph\"><p>In this example, an <a href=\"https://github.com/kbastani/service-block-samples/tree/master/basic-block/account-core\" target=\"_blank\">account service core</a> allows consumers to manage records using a workflow that is common to <a href=\"https://martinfowler.com/bliki/CQRS.html\" target=\"_blank\">CQRS</a> and Event Sourcing applications.</p></div><div id=\"__asciidoctor-preview-856__\" class=\"exampleblock\"><div class=\"title\">Example 4. Events and commands are attached to an account aggregate</div><div class=\"content\"><div id=\"__asciidoctor-preview-862__\" class=\"paragraph\"><p></p><div class=\"imageblock\" style=\"display: block; padding: inherit; max-width:40em;\"><div class=\"content\"><img alt=\"CQRS Hypermedia Resource\" src=\"http://imgur.com/2R2w79p.png\"></div></div><p></p></div></div></div><div id=\"__asciidoctor-preview-866__\" class=\"paragraph\"><p>In the diagram above you’ll see an account resource that is connected to a set of <em>commands</em> and <em>events</em>. One of the goals in the <em>account service core</em> is to enable a CQRS workflow for interacting with <a href=\"https://martinfowler.com/bliki/DDD_Aggregate.html\" target=\"_blank\">domain aggregates</a>. To make it easy for other microservices to consume this <a href=\"https://en.wikipedia.org/wiki/Event-driven_architecture\" target=\"_blank\">event-driven</a> workflow, we can conveniently embed hypermedia links to both the event log and commands.</p></div><div class=\"sect3\"><h4 id=\"_creating_an_account\">Creating an Account</h4><div id=\"__asciidoctor-preview-882__\" class=\"paragraph\"><p>The first concern we should address in the service core is to create an endpoint for creating new accounts.</p></div><div id=\"__asciidoctor-preview-894__\" class=\"exampleblock\"><div class=\"title\">Example 5. Snippet from the <code>AccountController</code> class</div><div class=\"content\"><div id=\"__asciidoctor-preview-908__\" class=\"listingblock\"><div class=\"content\"><pre class=\"highlightjs highlight\"><code class=\"language-java hljs\" data-lang=\"java\"><span class=\"hljs-meta\">@RestController</span><br /><span class=\"hljs-meta\">@RequestMapping</span>(<span class=\"hljs-string\">\"/v1\"</span>)<br /><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">AccountController</span> </span>{<br /><br />    <span class=\"hljs-meta\">@PostMapping</span>(path = <span class=\"hljs-string\">\"/accounts\"</span>)<br />    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> ResponseEntity <span class=\"hljs-title\">createAccount</span><span class=\"hljs-params\">(@RequestBody Account account)</span> </span>{<br />        <span class=\"hljs-keyword\">return</span> Optional.ofNullable(createAccountResource(account))<br />                .map(e -&gt; <span class=\"hljs-keyword\">new</span> ResponseEntity&lt;&gt;(e, HttpStatus.CREATED))<br />                .orElseThrow(() -&gt; <span class=\"hljs-keyword\">new</span> RuntimeException(<span class=\"hljs-string\">\"Account creation failed\"</span>));<br />    }</code></pre></div></div></div></div><div id=\"__asciidoctor-preview-912__\" class=\"paragraph\"><p>The snippet above is from the service core’s <a href=\"https://github.com/kbastani/service-block-samples/blob/master/basic-block/account-core/src/main/java/demo/account/AccountController.java\" target=\"_blank\">AccountController</a> class. Let’s see what happens when we try to create a new <code>Account</code> over HTTP.</p></div><div id=\"__asciidoctor-preview-924__\" class=\"exampleblock\"><div class=\"title\">Example 6. HTTP POST request to <code>/v1/accounts</code></div><div class=\"content\"><div id=\"__asciidoctor-preview-938__\" class=\"listingblock\"><div class=\"content\"><pre class=\"highlightjs highlight\"><code class=\"language-bash hljs\" data-lang=\"bash\">HTTP POST /v1/accounts<br /><br />{<br />  <span class=\"hljs-string\">\"firstName\"</span>: <span class=\"hljs-string\">\"Taylor\"</span>,<br />  <span class=\"hljs-string\">\"lastName\"</span>: <span class=\"hljs-string\">\"Swift\"</span>,<br />  <span class=\"hljs-string\">\"email\"</span>: <span class=\"hljs-string\">\"tswift@cloud.com\"</span><br />}</code></pre></div></div></div></div><div id=\"__asciidoctor-preview-942__\" class=\"paragraph\"><p>In the snippet above, we’ve sent a POST request with the information of the new account we’d like to create. After sending the request, we’ll get back an <a href=\"https://github.com/kbastani/service-block-samples/blob/master/basic-block/account-core/src/main/java/demo/account/Account.java\" target=\"_blank\">Account</a> resource that contains the newly minted account.</p></div><div id=\"__asciidoctor-preview-954__\" class=\"exampleblock\"><div class=\"title\">Example 7. The new account resource with hypermedia links</div><div class=\"content\"><div id=\"__asciidoctor-preview-968__\" class=\"listingblock\"><div class=\"content\"><pre class=\"highlightjs highlight\"><code class=\"language-json hljs\" data-lang=\"json\">{<br />  <span class=\"hljs-attr\">\"createdAt\"</span>: <span class=\"hljs-number\">1491473123758</span>,<br />  <span class=\"hljs-attr\">\"lastModified\"</span>: <span class=\"hljs-number\">1491473123758</span>,<br />  <span class=\"hljs-attr\">\"firstName\"</span>: <span class=\"hljs-string\">\"Taylor\"</span>,<br />  <span class=\"hljs-attr\">\"lastName\"</span>: <span class=\"hljs-string\">\"Swift\"</span>,<br />  <span class=\"hljs-attr\">\"email\"</span>: <span class=\"hljs-string\">\"tswift@cloud.com\"</span>,<br />  <span class=\"hljs-attr\">\"status\"</span>: <span class=\"hljs-string\">\"ACCOUNT_CREATED\"</span>,<br />  <span class=\"hljs-attr\">\"_links\"</span>: {<br />    <span class=\"hljs-attr\">\"commands\"</span>: {<br />      <span class=\"hljs-attr\">\"href\"</span>: <span class=\"hljs-string\">\"http://localhost:8080/v1/accounts/1/commands\"</span><br />    },<br />    <span class=\"hljs-attr\">\"events\"</span>: {<br />      <span class=\"hljs-attr\">\"href\"</span>: <span class=\"hljs-string\">\"http://localhost:8080/v1/accounts/1/events\"</span><br />    }<br />  },<br />  <span class=\"hljs-attr\">\"accountId\"</span>: <span class=\"hljs-number\">1</span><br />}</code></pre></div></div></div></div><div id=\"__asciidoctor-preview-972__\" class=\"paragraph\"><p>Here we see the <code>Account</code> that we just created. Notice that there are two hypermedia links in the response body for the <code>_links</code> property. We can think of these <a href=\"https://spring.io/understanding/HATEOAS\" target=\"_blank\">hypermedia links</a> as if they were methods in the <code>Account</code> class. If we want to access the available commands for an <code>Account</code>, we can simply traverse the link for <code>commands</code>, which returns a response containing the commands that can be executed on the account.</p></div><div id=\"__asciidoctor-preview-978__\" class=\"admonitionblock tip\"><table><tbody><tr><td class=\"icon\"><i class=\"fa icon-tip\" title=\"Tip\"></i></td><td class=\"content\">By keeping the event log attached as a link on the account resource, all consumers will be able to easily locate the events that have affected the account’s current state. </td></tr></tbody></table></div></div></div><div class=\"sect2\"><h3 id=\"_the_commands\">The Commands</h3><div id=\"__asciidoctor-preview-996__\" class=\"paragraph\"><p>Next, let’s fetch the commands that are available for the <code>Account</code> resource. To do this, we’ll send an HTTP GET request to the location <code>href</code> listed on the hypermedia link named <code>commands</code>.</p></div><div id=\"__asciidoctor-preview-1008__\" class=\"exampleblock\"><div class=\"title\">Example 8. HTTP GET request to <code>/v1/accounts/1/commands</code></div><div class=\"content\"><div id=\"__asciidoctor-preview-1022__\" class=\"listingblock\"><div class=\"content\"><pre class=\"highlightjs highlight\"><code class=\"language-json hljs\" data-lang=\"json\">{<br />  <span class=\"hljs-attr\">\"_links\"</span>: {<br />    <span class=\"hljs-attr\">\"activate\"</span>: {<br />      <span class=\"hljs-attr\">\"href\"</span>: <span class=\"hljs-string\">\"http://localhost:8080/v1/accounts/1/commands/activate\"</span><br />    },<br />    <span class=\"hljs-attr\">\"suspend\"</span>: {<br />      <span class=\"hljs-attr\">\"href\"</span>: <span class=\"hljs-string\">\"http://localhost:8080/v1/accounts/1/commands/suspend\"</span><br />    }<br />  }<br />}</code></pre></div></div></div></div><div id=\"__asciidoctor-preview-1028__\" class=\"admonitionblock tip\"><table><tbody><tr><td class=\"icon\"><i class=\"fa icon-tip\" title=\"Tip\"></i></td><td class=\"content\">By attaching the commands to an account resource as a hypermedia link, all consumers will be able to easily lookup the commands that can be executed on the resource. </td></tr></tbody></table></div><div id=\"__asciidoctor-preview-1032__\" class=\"paragraph\"><p>After traversing to <code>commands</code>, we are provided back another set of links that we can continue to follow. We see that we can either <code>activate</code> or <code>suspend</code> this account. First, let’s try executing the <code>activate</code> command. To do this, we make an HTTP GET request to the <code>href</code> associated with the command.</p></div><div id=\"__asciidoctor-preview-1044__\" class=\"exampleblock\"><div class=\"title\">Example 9. HTTP GET request to <code>/v1/accounts/1/commands/activate</code></div><div class=\"content\"><div id=\"__asciidoctor-preview-1058__\" class=\"listingblock\"><div class=\"content\"><pre class=\"highlightjs highlight\"><code class=\"language-json hljs\" data-lang=\"json\">{<br />  <span class=\"hljs-attr\">\"createdAt\"</span>: <span class=\"hljs-number\">1491459939554</span>,<br />  <span class=\"hljs-attr\">\"lastModified\"</span>: <span class=\"hljs-number\">1491473977565</span>,<br />  <span class=\"hljs-attr\">\"firstName\"</span>: <span class=\"hljs-string\">\"Taylor\"</span>,<br />  <span class=\"hljs-attr\">\"lastName\"</span>: <span class=\"hljs-string\">\"Swift\"</span>,<br />  <span class=\"hljs-attr\">\"email\"</span>: <span class=\"hljs-string\">\"tswift@cloud.com\"</span>,<br />  <span class=\"hljs-attr\">\"status\"</span>: <span class=\"hljs-string\">\"ACCOUNT_ACTIVATED\"</span>,<br />  <span class=\"hljs-attr\">\"_links\"</span>: {<br />    <span class=\"hljs-attr\">\"commands\"</span>: {<br />      <span class=\"hljs-attr\">\"href\"</span>: <span class=\"hljs-string\">\"http://localhost:8080/v1/accounts/1/commands\"</span><br />    },<br />    <span class=\"hljs-attr\">\"events\"</span>: {<br />      <span class=\"hljs-attr\">\"href\"</span>: <span class=\"hljs-string\">\"http://localhost:8080/v1/accounts/1/events\"</span><br />    }<br />  },<br />  <span class=\"hljs-attr\">\"accountId\"</span>: <span class=\"hljs-number\">1</span><br />}</code></pre></div></div></div></div><div id=\"__asciidoctor-preview-1062__\" class=\"paragraph\"><p>In the example above, we see the command returned back the account resource with a new value for the <code>status</code> property. After executing the command, the account’s status transitioned from <code>ACCOUNT_CREATED</code> to <code>ACCOUNT_ACTIVATED</code>. Let’s try sending the same <code>activate</code> command twice in a row and see what happens.</p></div><div id=\"__asciidoctor-preview-1074__\" class=\"exampleblock\"><div class=\"title\">Example 10. 2nd HTTP GET request to <code>/v1/accounts/1/commands/activate</code></div><div class=\"content\"><div id=\"__asciidoctor-preview-1088__\" class=\"listingblock\"><div class=\"content\"><pre class=\"highlightjs highlight\"><code class=\"language-json hljs\" data-lang=\"json\">{<br />  <span class=\"hljs-attr\">\"timestamp\"</span>: <span class=\"hljs-number\">1491474077084</span>,<br />  <span class=\"hljs-attr\">\"status\"</span>: <span class=\"hljs-number\">400</span>,<br />  <span class=\"hljs-attr\">\"error\"</span>: <span class=\"hljs-string\">\"Bad Request\"</span>,<br />  <span class=\"hljs-attr\">\"exception\"</span>: <span class=\"hljs-string\">\"java.lang.RuntimeException\"</span>,<br />  <span class=\"hljs-attr\">\"message\"</span>: <span class=\"hljs-string\">\"Account already activated\"</span>,<br />  <span class=\"hljs-attr\">\"path\"</span>: <span class=\"hljs-string\">\"/v1/accounts/1/commands/activate\"</span><br />}</code></pre></div></div></div></div><div id=\"__asciidoctor-preview-1092__\" class=\"paragraph\"><p>As expected, we’ve received an error. This is because the account we created had already been activated. Which means that we cannot issue the same command twice in a row. Now, what’s interesting about this response is that the validation logic is not coming from within the core Spring Boot application. Instead, we have two stateless functions that are deployed to AWS Lambda. These two functions will act as an event handlers — <em>mutating state</em> based on the current context and command of an account.</p></div><div id=\"__asciidoctor-preview-1096__\" class=\"paragraph\"><p>Now, let’s try the only <em>other</em> command that is listed on the account resource: <code>suspend</code>.</p></div><div id=\"__asciidoctor-preview-1108__\" class=\"exampleblock\"><div class=\"title\">Example 11. HTTP GET to <code>/v1/accounts/1/suspend</code></div><div class=\"content\"><div id=\"__asciidoctor-preview-1122__\" class=\"listingblock\"><div class=\"content\"><pre class=\"highlightjs highlight\"><code class=\"language-json hljs\" data-lang=\"json\">{<br />  <span class=\"hljs-attr\">\"createdAt\"</span>: <span class=\"hljs-number\">1491459939554</span>,<br />  <span class=\"hljs-attr\">\"lastModified\"</span>: <span class=\"hljs-number\">1491474306296</span>,<br />  <span class=\"hljs-attr\">\"firstName\"</span>: <span class=\"hljs-string\">\"Taylor\"</span>,<br />  <span class=\"hljs-attr\">\"lastName\"</span>: <span class=\"hljs-string\">\"Swift\"</span>,<br />  <span class=\"hljs-attr\">\"email\"</span>: <span class=\"hljs-string\">\"tswift@cloud.com\"</span>,<br />  <span class=\"hljs-attr\">\"status\"</span>: <span class=\"hljs-string\">\"ACCOUNT_SUSPENDED\"</span>,<br />  <span class=\"hljs-attr\">\"_links\"</span>: {<br />    <span class=\"hljs-attr\">\"commands\"</span>: {<br />      <span class=\"hljs-attr\">\"href\"</span>: <span class=\"hljs-string\">\"http://localhost:8080/v1/accounts/1/commands\"</span><br />    },<br />    <span class=\"hljs-attr\">\"events\"</span>: {<br />      <span class=\"hljs-attr\">\"href\"</span>: <span class=\"hljs-string\">\"http://localhost:8080/v1/accounts/1/events\"</span><br />    }<br />  },<br />  <span class=\"hljs-attr\">\"accountId\"</span>: <span class=\"hljs-number\">1</span><br />}</code></pre></div></div></div></div><div id=\"__asciidoctor-preview-1126__\" class=\"paragraph\"><p>Now we see that the account response successfully transitioned from <code>ACCOUNT_ACTIVATED</code> to <code>ACCOUNT_SUSPENDED</code>, without error. This is a fairly trivial example, where we have two different states that can be transitioned to and from without being applied twice in a row.</p></div><div id=\"__asciidoctor-preview-1132__\" class=\"admonitionblock tip\"><table><tbody><tr><td class=\"icon\"><i class=\"fa icon-tip\" title=\"Tip\"></i></td><td class=\"content\">Imagine the complexity of a domain aggregate with many different states and rules between transitions. Things can get complicated quickly. To simplify the system design, we can start out by modeling these state transitions as a directed graph, called a <a href=\"https://en.wikipedia.org/wiki/Finite-state_machine\" target=\"_blank\">state machine</a>. </td></tr></tbody></table></div></div><div class=\"sect2\"><h3 id=\"_functions\">Functions</h3><div id=\"__asciidoctor-preview-1146__\" class=\"paragraph\"><p>Now that we’ve seen the workflow in the <em>account service core</em> for creating and managing accounts, let’s see how the core makes requests to Spring Cloud Function apps deployed to AWS Lambda.</p></div><div id=\"__asciidoctor-preview-1158__\" class=\"exampleblock\"><div class=\"title\">Example 12. This interface defines functions to invoke on AWS Lambda</div><div class=\"content\"><div id=\"__asciidoctor-preview-1172__\" class=\"listingblock\"><div class=\"content\"><pre class=\"highlightjs highlight\"><code class=\"language-java hljs\" data-lang=\"java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">LambdaFunctionService</span> </span>{<br /><br />    <span class=\"hljs-meta\">@LambdaFunction</span>(functionName=<span class=\"hljs-string\">\"account-activated\"</span>, logType = LogType.Tail)<br />    <span class=\"hljs-function\">Account <span class=\"hljs-title\">accountActivated</span><span class=\"hljs-params\">(AccountEvent event)</span></span>;<br /><br />    <span class=\"hljs-meta\">@LambdaFunction</span>(functionName=<span class=\"hljs-string\">\"account-suspended\"</span>, logType = LogType.Tail)<br />    <span class=\"hljs-function\">Account <span class=\"hljs-title\">accountSuspended</span><span class=\"hljs-params\">(AccountEvent event)</span></span>;<br />}</code></pre></div></div></div></div><div id=\"__asciidoctor-preview-1176__\" class=\"paragraph\"><p>In the <a href=\"https://github.com/kbastani/service-block-samples/blob/master/basic-block/account-core/src/main/java/demo/function/LambdaFunctionService.java\" target=\"_blank\">interface above</a> we see two AWS Lambda functions that will handle events for an account, which are triggered by the <code>suspend</code> and <code>activate</code> commands.</p></div><div id=\"__asciidoctor-preview-1190__\" class=\"exampleblock\"><div class=\"title\">Example 13. For transitions in an account’s state, we can invoke an AWS Lambda function</div><div class=\"content\"><div id=\"__asciidoctor-preview-1196__\" class=\"paragraph\"><p></p><div class=\"imageblock\" style=\"display: block; padding: inherit; max-width:40em;\"><div class=\"content\"><img alt=\"Account Service Block\" src=\"http://imgur.com/S7Xenu0.png\"></div></div><p></p></div></div></div></div><div class=\"sect2\"><h3 id=\"_the_event_log\">The Event Log</h3><div id=\"__asciidoctor-preview-1214__\" class=\"paragraph\"><p>The goal for each function is to validate the state of the <code>Account</code> aggregate. This is a simple use case to start out, and as this series continues, we’ll see what more complex service blocks look like. For now, we want our functions to be able to change the <code>status</code> field on an account. This means that the function will need a history of events that have previously been applied to an <code>Account</code> aggregate. To be able to see the account’s historical events, we just follow the <code>events</code> link to fetch the account’s event log.</p></div><div id=\"__asciidoctor-preview-1226__\" class=\"exampleblock\"><div class=\"title\">Example 14. HTTP GET request to <code>/v1/accounts/1/events</code></div><div class=\"content\"><div id=\"__asciidoctor-preview-1240__\" class=\"listingblock\"><div class=\"content\"><pre class=\"highlightjs highlight\"><code class=\"language-json hljs\" data-lang=\"json\">[<br />  {<br />    <span class=\"hljs-attr\">\"eventId\"</span>: <span class=\"hljs-number\">1</span>,<br />    <span class=\"hljs-attr\">\"type\"</span>: <span class=\"hljs-string\">\"ACCOUNT_ACTIVATED\"</span>,<br />    <span class=\"hljs-attr\">\"accountId\"</span>: <span class=\"hljs-number\">1</span>,<br />    <span class=\"hljs-attr\">\"createdAt\"</span>: <span class=\"hljs-number\">1491459944711</span>,<br />    <span class=\"hljs-attr\">\"lastModified\"</span>: <span class=\"hljs-number\">1491459944711</span><br />  },<br />  {<br />    <span class=\"hljs-attr\">\"eventId\"</span>: <span class=\"hljs-number\">2</span>,<br />    <span class=\"hljs-attr\">\"type\"</span>: <span class=\"hljs-string\">\"ACCOUNT_SUSPENDED\"</span>,<br />    <span class=\"hljs-attr\">\"accountId\"</span>: <span class=\"hljs-number\">1</span>,<br />    <span class=\"hljs-attr\">\"createdAt\"</span>: <span class=\"hljs-number\">1491459950342</span>,<br />    <span class=\"hljs-attr\">\"lastModified\"</span>: <span class=\"hljs-number\">1491459950342</span><br />  }<br />]</code></pre></div></div></div></div><div id=\"__asciidoctor-preview-1244__\" class=\"paragraph\"><p>After retrieving the event log for the account, we see two events that were added after executing the <code>activate</code> and <code>suspend</code> commands. Each time a command is executed on an account — and if the state of the aggregate is valid — we will apply one new event and append it to the log.</p></div><div id=\"__asciidoctor-preview-1248__\" class=\"paragraph\"><p>Since it’s not practical for a Lambda function to callback to retrieve the event log, we’ll go ahead and send it as an \"attachment\" to the event’s payload. By doing this, we provide the full context on what has previously happened to the account.</p></div><div id=\"__asciidoctor-preview-1252__\" class=\"paragraph\"><p>The next thing we need to do is to figure out how events are dispatched to Lambda functions. Let’s see how routing is handled from commands that are executed on an account, to events dispatched to functions.</p></div></div><div class=\"sect2\"><h3 id=\"_routing_to_aws_lambda\">Routing to AWS Lambda</h3><div id=\"__asciidoctor-preview-1272__\" class=\"paragraph\"><p>As we saw earlier, the <em>account service core</em> has a controller class named <code>AccountController</code>. Yet, we only observed the behavior of this component from the perspective of a REST API consumer. In addition to more basic CRUD operations on an account, the <code>AccountController</code> allows API consumers to execute commands. These commands will then generate events that are handled by a Spring Cloud Function app.</p></div><div id=\"__asciidoctor-preview-1284__\" class=\"exampleblock\"><div class=\"title\">Example 15. Activate account command</div><div class=\"content\"><div id=\"__asciidoctor-preview-1298__\" class=\"listingblock\"><div class=\"content\"><pre class=\"highlightjs highlight\"><code class=\"language-java hljs\" data-lang=\"java\"><span class=\"hljs-meta\">@RequestMapping</span>(path = <span class=\"hljs-string\">\"/accounts/{id}/commands/activate\"</span>)<br /><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> ResponseEntity <span class=\"hljs-title\">activate</span><span class=\"hljs-params\">(@PathVariable Long id)</span> </span>{<br />    <span class=\"hljs-keyword\">return</span> Optional.ofNullable(accountRepository.findOne(id))<br />            .map(a -&gt; eventService<br />                    .apply(<span class=\"hljs-keyword\">new</span> AccountEvent(AccountEventType.ACCOUNT_ACTIVATED, id)))<br />            .map(<span class=\"hljs-keyword\">this</span>::getAccountResource)<br />            .map(e -&gt; <span class=\"hljs-keyword\">new</span> ResponseEntity&lt;&gt;(e, HttpStatus.OK))<br />            .orElseThrow(() -&gt; <span class=\"hljs-keyword\">new</span> RuntimeException(<span class=\"hljs-string\">\"The command could not be applied\"</span>));<br />}</code></pre></div></div></div></div><div id=\"__asciidoctor-preview-1302__\" class=\"paragraph\"><p>Here we see the method body for a command that activates an account. First, we fetch the <code>Account</code> from the <code>AccountRepository</code> by its ID. Next we create a new <code>AccountEvent</code>. We then send the event to the <a href=\"https://github.com/kbastani/service-block-samples/blob/master/basic-block/account-core/src/main/java/demo/event/EventService.java\" target=\"_blank\">EventService</a> where the <code>apply</code> method will figure out where to route this event to.</p></div><div id=\"__asciidoctor-preview-1314__\" class=\"exampleblock\"><div class=\"title\">Example 16. The apply method routes events to functions</div><div class=\"content\"><div id=\"__asciidoctor-preview-1328__\" class=\"listingblock\"><div class=\"content\"><pre class=\"highlightjs highlight\"><code class=\"language-java hljs\" data-lang=\"java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Account <span class=\"hljs-title\">apply</span><span class=\"hljs-params\">(AccountEvent accountEvent)</span> </span>{<br />    Assert.notNull(accountEvent.getAccountId(),<br />            <span class=\"hljs-string\">\"Account event must contain a valid account id\"</span>);<br /><br />    <span class=\"hljs-comment\">// Get the account referenced by the event</span><br />    Account account = accountRepository.findOne(accountEvent.getAccountId());<br />    Assert.notNull(account, <span class=\"hljs-string\">\"An account for that ID does not exist\"</span>);<br /><br />    <span class=\"hljs-comment\">// Get a history of events for this account</span><br />    List&lt;AccountEvent&gt; events = accountEventRepository<br />            .findEventsByAccountId(accountEvent.getAccountId());<br /><br />    <span class=\"hljs-comment\">// Sort the events reverse chronological</span><br />    events.sort(Comparator.comparing(AccountEvent::getCreatedAt).reversed());<br /><br />    LambdaResponse&lt;Account&gt; result = <span class=\"hljs-keyword\">null</span>;<br /><br />    <span class=\"hljs-comment\">// Route requests to serverless functions</span><br />    <span class=\"hljs-keyword\">switch</span> (accountEvent.getType()) {<br />        <span class=\"hljs-keyword\">case</span> ACCOUNT_ACTIVATED:<br />            result = accountCommandService.getActivateAccount()<br />                    .apply(withPayload(accountEvent, events, account));<br />            <span class=\"hljs-keyword\">break</span>;<br />        <span class=\"hljs-keyword\">case</span> ACCOUNT_SUSPENDED:<br />            result = accountCommandService.getSuspendAccount()<br />                    .apply(withPayload(accountEvent, events, account));<br />            <span class=\"hljs-keyword\">break</span>;<br />    }<br /><br />    <span class=\"hljs-comment\">// ...</span><br /><br />    <span class=\"hljs-keyword\">return</span> account;<br />}</code></pre></div></div></div></div><div id=\"__asciidoctor-preview-1332__\" class=\"paragraph\"><p>The example snippet above shows how account events are dispatched to AWS Lambda functions. Depending on the <code>AccountEventType</code>, the <a href=\"https://github.com/kbastani/service-block-samples/blob/master/basic-block/account-core/src/main/java/demo/function/AccountCommandService.java\" target=\"_blank\">AccountCommandService</a> will route the event request to a specific function deployed to AWS Lambda.</p></div></div><div class=\"sect2\"><h3 id=\"_functions_2\">Functions</h3><div id=\"__asciidoctor-preview-1346__\" class=\"paragraph\"><p>Now that the <em>account service core</em> is ready to start dispatching events to AWS Lambda, it’s time to set up our Spring Cloud Function handlers.</p></div><div id=\"__asciidoctor-preview-1350__\" class=\"paragraph\"><p>This example contains two Spring Cloud Function projects:</p></div><div id=\"__asciidoctor-preview-1356__\" class=\"ulist\"><ul><li><p><a href=\"https://github.com/kbastani/service-block-samples/tree/master/basic-block/account-functions/account-activated\" target=\"_blank\">Account Activated</a></p></li><li><p><a href=\"https://github.com/kbastani/service-block-samples/tree/master/basic-block/account-functions/account-suspended\" target=\"_blank\">Account Suspended</a></p></li></ul></div><div id=\"__asciidoctor-preview-1378__\" class=\"paragraph\"><p>Each of these projects are near identical, for simplicity’s sake. In the next part of this series we will look at consolidating the business logic for state transitions into a single function.</p></div><div id=\"__asciidoctor-preview-1382__\" class=\"paragraph\"><p>Let’s explore the <code>account-activated</code> function, assuming that <code>account-suspended</code> has near to the same source code.</p></div><div class=\"sect3\"><h4 id=\"_handler\">Handler</h4><div id=\"__asciidoctor-preview-1394__\" class=\"paragraph\"><p>Each Spring Cloud Function project has a handler that describes the inputs and outputs of a function.</p></div><div id=\"__asciidoctor-preview-1406__\" class=\"exampleblock\"><div class=\"title\">Example 17. The essential Spring Boot request handler</div><div class=\"content\"><div id=\"__asciidoctor-preview-1420__\" class=\"listingblock\"><div class=\"content\"><pre class=\"highlightjs highlight\"><code class=\"language-java hljs\" data-lang=\"java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Handler</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">SpringBootRequestHandler</span>&lt;<span class=\"hljs-title\">AccountEvent</span>, <span class=\"hljs-title\">Account</span>&gt; </span>{<br />}</code></pre></div></div></div></div><div id=\"__asciidoctor-preview-1424__\" class=\"paragraph\"><p>In the example above, not much is going on—but this little class is essential to a Spring Cloud Function application. This class describes how this function should be requested, and what the input and output types are. The only other requirement is that we define a functional bean that implements the business logic of the function.</p></div><div id=\"__asciidoctor-preview-1436__\" class=\"exampleblock\"><div class=\"title\">Example 18. A function’s application class</div><div class=\"content\"><div id=\"__asciidoctor-preview-1450__\" class=\"listingblock\"><div class=\"content\"><pre class=\"highlightjs highlight\"><code class=\"language-java hljs\" data-lang=\"java\"><span class=\"hljs-meta\">@SpringBootApplication</span><br /><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">AccountActivatedFunction</span> </span>{<br /><br />    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>{<br />        SpringApplication.run(AccountActivatedFunction.class, args);<br />    }<br /><br />    <span class=\"hljs-meta\">@Bean</span><br />    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Function&lt;AccountEvent, Account&gt; <span class=\"hljs-title\">function</span><span class=\"hljs-params\">()</span> </span>{<br />        <span class=\"hljs-keyword\">return</span> accountEvent -&gt; {<br />            <span class=\"hljs-comment\">// Get event log from payload</span><br />            List&lt;AccountEvent&gt; events = accountEvent.getPayload().getEvents();<br /><br />            <span class=\"hljs-comment\">// Get account</span><br />            Account account = accountEvent.getPayload().getAccount();<br /><br />            <span class=\"hljs-keyword\">if</span>(events != <span class=\"hljs-keyword\">null</span> &amp;&amp; account != <span class=\"hljs-keyword\">null</span>) {<br />                <span class=\"hljs-comment\">// Get the most recent event</span><br />                AccountEvent lastEvent = events.stream().findFirst().orElse(<span class=\"hljs-keyword\">null</span>);<br /><br />                <span class=\"hljs-keyword\">if</span>(lastEvent == <span class=\"hljs-keyword\">null</span> || lastEvent.getType() != ACCOUNT_ACTIVATED) {<br />                    account.setStatus(AccountStatus.ACCOUNT_ACTIVATED);<br />                } <span class=\"hljs-keyword\">else</span> {<br />                    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> RuntimeException(<span class=\"hljs-string\">\"Account already activated\"</span>);<br />                }<br />            } <span class=\"hljs-keyword\">else</span> {<br />                <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> RuntimeException(<span class=\"hljs-string\">\"Payload did not supply account events\"</span>);<br />            }<br /><br />            <span class=\"hljs-keyword\">return</span> account;<br />        };<br />    }<br />}</code></pre></div></div></div></div><div id=\"__asciidoctor-preview-1454__\" class=\"paragraph\"><p>In the example above, we have our Spring Boot application class. This will be our entry point into the function. Here we describe a function bean that each and every event dispatched by the <em>account service core</em> will be handled from.</p></div><div id=\"__asciidoctor-preview-1458__\" class=\"paragraph\"><p>Now we have a runnable function that we can ship to AWS Lambda. We can even run this function locally for testing purposes. But to invoke the function from the <em>account service core</em>, we’ll need to deploy it to AWS Lambda.</p></div><div id=\"__asciidoctor-preview-1464__\" class=\"admonitionblock caution\"><table><tbody><tr><td class=\"icon\"><i class=\"fa icon-caution\" title=\"Caution\"></i></td><td class=\"content\">There are some other things that we do need to worry about in the <code>pom.xml</code>, but for now we’ll leave that to some upcoming documentation efforts. </td></tr></tbody></table></div></div></div><div class=\"sect2\"><h3 id=\"_deployment\">Deployment</h3><div id=\"__asciidoctor-preview-1480__\" class=\"paragraph\"><p>If you’re familiar with AWS Lambda, you can manually deploy each of the artifacts for the functions using the <a href=\"https://console.aws.amazon.com/lambda/home\" target=\"_blank\">AWS console</a>. The problem with what I just said is that no one in their right mind would manually deploy artifacts to the cloud, right? To make the DevOps part easy, I’ve created a CI/CD pipeline with a tool named <a href=\"http://concourse.ci/\" target=\"_blank\">Concourse</a> that will automate the Lambda deployment.</p></div><div id=\"__asciidoctor-preview-1484__\" class=\"paragraph\"><p>To automate the deployment, we’re going to use <a href=\"https://aws.amazon.com/cloudformation/\" target=\"_blank\">CloudFormation</a>, which provides an easy way to deploy changes for a set of components (known as a stack) as one atomic transaction from the <a href=\"https://aws.amazon.com/cli/\" target=\"_blank\">AWS CLI</a>. The first thing that is required for CloudFormation is a <a href=\"https://aws.amazon.com/cloudformation/aws-cloudformation-templates/\" target=\"_blank\">template</a> that describes what it is we want to deploy.</p></div><div id=\"__asciidoctor-preview-1496__\" class=\"exampleblock\"><div class=\"title\">Example 19. The CloudFormation template for the activated function</div><div class=\"content\"><div id=\"__asciidoctor-preview-1510__\" class=\"listingblock\"><div class=\"content\"><pre class=\"highlightjs highlight\"><code class=\"language-yaml hljs\" data-lang=\"yaml\"><span class=\"hljs-attr\">AWSTemplateFormatVersion:</span> <span class=\"hljs-string\">'2010-09-09'</span><br /><span class=\"hljs-attr\">Transform:</span> <span class=\"hljs-string\">'AWS::Serverless-2016-10-31'</span><br /><span class=\"hljs-attr\">Description:</span> Account activated<br /><span class=\"hljs-attr\">Resources:</span><br /><span class=\"hljs-attr\">  accountActivated:</span><br /><span class=\"hljs-attr\">    Type:</span> <span class=\"hljs-string\">'AWS::Serverless::Function'</span><br /><span class=\"hljs-attr\">    Properties:</span><br /><span class=\"hljs-attr\">      Handler:</span> demo.functions.Handler<br /><span class=\"hljs-attr\">      Runtime:</span> java8<br /><span class=\"hljs-attr\">      FunctionName:</span> account-activated<br /><span class=\"hljs-attr\">      CodeUri:</span> ./account-activated<span class=\"hljs-bullet\">-1.0</span><span class=\"hljs-number\">.0</span>-SNAPSHOT-aws.jar<br /><span class=\"hljs-attr\">      Description:</span> Implements business logic for activating an account<br /><span class=\"hljs-attr\">      MemorySize:</span> <span class=\"hljs-number\">1024</span><br /><span class=\"hljs-attr\">      Timeout:</span> <span class=\"hljs-number\">30</span><br /><span class=\"hljs-attr\">      Role:</span> <span class=\"hljs-string\">'arn:aws:iam::194021864310:role/service-role/public'</span><br /><span class=\"hljs-attr\">      Events:</span><br /><span class=\"hljs-attr\">        Api1:</span><br /><span class=\"hljs-attr\">          Type:</span> Api<br /><span class=\"hljs-attr\">          Properties:</span><br /><span class=\"hljs-attr\">            Path:</span> /accountActivated<br /><span class=\"hljs-attr\">            Method:</span> ANY</code></pre></div></div></div></div><div id=\"__asciidoctor-preview-1514__\" class=\"paragraph\"><p>In the snippet above we see a CloudFormation template for deploying the <code>account-activated</code> function. <a href=\"https://github.com/kbastani/service-block-samples/blob/master/basic-block/account-functions/account-activated/package.yaml\" target=\"_blank\">This template</a> will create a package that is uploaded to an <a href=\"https://aws.amazon.com/s3/\" target=\"_blank\">Amazon S3</a> bucket and then deployed to Lambda.</p></div><div id=\"__asciidoctor-preview-1518__\" class=\"paragraph\"><p>There’s nothing tremendously exciting about this process. To make this as simple and boring as possible, I’ve created a <a href=\"https://github.com/kbastani/service-block-samples/blob/master/basic-block/deployment/scripts/deploy-function.sh\" target=\"_blank\">deploy-function.sh</a> script that will be used by Concourse to automate function deployments.</p></div><div id=\"__asciidoctor-preview-1530__\" class=\"exampleblock\"><div class=\"title\">Example 20. Package and deploy Lambda functions using CloudFormation</div><div class=\"content\"><div id=\"__asciidoctor-preview-1544__\" class=\"listingblock\"><div class=\"content\"><pre class=\"highlightjs highlight\"><code class=\"language-bash hljs\" data-lang=\"bash\"><span class=\"hljs-built_in\">export</span> AWS_ACCESS_KEY_ID=<span class=\"hljs-variable\">$aws_access_key_id</span><br /><span class=\"hljs-built_in\">export</span> AWS_SECRET_ACCESS_KEY=<span class=\"hljs-variable\">$aws_secret_access_key</span><br /><span class=\"hljs-built_in\">export</span> AWS_DEFAULT_REGION=<span class=\"hljs-variable\">$aws_default_region</span><br /><br /><span class=\"hljs-function\"><span class=\"hljs-title\">package</span></span>() {<br />  <span class=\"hljs-comment\"># Create a CloudFormation package for this AWS Lambda function</span><br />  <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-_\">-e</span> <span class=\"hljs-string\">\"Packaging deployment...\"</span><br /><br />  aws cloudformation package \\<br />     --template-file package.yaml \\<br />     --output-template-file deployment.yaml \\<br />     -<span class=\"hljs-_\">-s</span>3-bucket <span class=\"hljs-variable\">$bucket_name</span> || error_exit <span class=\"hljs-string\">\"Packaging failed: Invalid S3 bucket...\"</span><br /><br />     deploy<br />}<br /><br /><span class=\"hljs-function\"><span class=\"hljs-title\">deploy</span></span>() {<br />  <span class=\"hljs-comment\"># Deploy the CloudFormation package</span><br />  <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-_\">-e</span> <span class=\"hljs-string\">\"Deploying package from s3://<span class=\"hljs-variable\">$bucket_name</span>...\"</span><br /><br />  aws -- cloudformation deploy \\<br />     --template-file deployment.yaml \\<br />     --stack-name <span class=\"hljs-variable\">$function_name</span> || error_exit <span class=\"hljs-string\">\"Deployment failed...\"</span><br /><br />  <span class=\"hljs-comment\"># Remove the deployment package</span><br />  rm ./deployment.yaml<br />}</code></pre></div></div></div></div><div id=\"__asciidoctor-preview-1548__\" class=\"paragraph\"><p>In the snippet above we see the magic of the <code>deploy-function.sh</code> script. To make sure that this script works, we need to provide the following crucial bits of information.</p></div><div id=\"__asciidoctor-preview-1554__\" class=\"ulist\"><ul><li><p>AWS access key ID</p></li><li><p>AWS secret access key</p></li><li><p>AWS default region</p></li><li><p>S3 bucket name</p></li><li><p>Function name</p></li></ul></div><div id=\"__asciidoctor-preview-1606__\" class=\"paragraph\"><p>The last and final concern we’ll take care of is the invocation of Lambda functions from a Spring Boot application.</p></div></div><div class=\"sect2\"><h3 id=\"_lambda_invocation\">Lambda Invocation</h3><div id=\"__asciidoctor-preview-1622__\" class=\"paragraph\"><p>Once our Spring Cloud Function apps have been deployed to AWS Lambda, we can begin invoking them from the <em>account service core</em>. To make this easy, I’ve created a <a href=\"https://github.com/kbastani/service-block-samples/tree/master/starters/spring-boot-starter-aws-lambda\" target=\"_blank\">helper starter project</a> that will manage the invocation context to AWS.</p></div><div id=\"__asciidoctor-preview-1626__\" class=\"paragraph\"><p>This project makes it easy to start invoking AWS Lambda functions from a Spring Boot application. All we have to do is to update the <em>account service core</em> <a href=\"https://github.com/kbastani/service-block-samples/blob/master/basic-block/account-core/src/main/resources/application.yml\" target=\"_blank\">configuration</a> with the AWS IAM credentials that we used to deploy the CloudFormation package. I’ve created <a href=\"https://github.com/kbastani/service-block-samples/blob/master/starters/spring-boot-starter-aws-lambda/src/main/java/amazon/aws/AmazonProperties.java\" target=\"_blank\">a configuration class</a> that will allow you to populate this in the <code>application.yml</code> of the service core.</p></div><div id=\"__asciidoctor-preview-1638__\" class=\"exampleblock\"><div class=\"title\">Example 21. The application properties of the <code>account-core</code></div><div class=\"content\"><div id=\"__asciidoctor-preview-1652__\" class=\"listingblock\"><div class=\"content\"><pre class=\"highlightjs highlight\"><code class=\"language-yaml hljs\" data-lang=\"yaml\"><span class=\"hljs-attr\">spring:</span><br /><span class=\"hljs-attr\">  profiles:</span><br /><span class=\"hljs-attr\">    active:</span> development<br /><span class=\"hljs-attr\">server:</span><br /><span class=\"hljs-attr\">  port:</span> <span class=\"hljs-number\">0</span><br /><span class=\"hljs-meta\">---</span><br /><span class=\"hljs-attr\">spring:</span><br /><span class=\"hljs-attr\">  profiles:</span> development<br /><span class=\"hljs-attr\">amazon:</span><br /><span class=\"hljs-attr\">  aws:</span><br /><span class=\"hljs-attr\">    access-key-id:</span> replace<br /><span class=\"hljs-attr\">    access-key-secret:</span> replace</code></pre></div></div></div></div><div id=\"__asciidoctor-preview-1656__\" class=\"paragraph\"><p>Now, I’m not a fan of saving sensitive credentials to disk, and neither should you. That’s why Spring Boot supports overriding configuration properties using environment variables.</p></div><div id=\"__asciidoctor-preview-1668__\" class=\"exampleblock\"><div class=\"title\">Example 22. Set the AWS credentials using environment variables</div><div class=\"content\"><div id=\"__asciidoctor-preview-1682__\" class=\"listingblock\"><div class=\"content\"><pre class=\"highlightjs highlight\"><code class=\"language-bash hljs\" data-lang=\"bash\"><span class=\"hljs-built_in\">export</span> AMAZON_AWS_ACCESS_KEY_ID=&lt;replace&gt;<br /><span class=\"hljs-built_in\">export</span> AMAZON_AWS_ACCESS_KEY_SECRET=&lt;replace&gt;</code></pre></div></div></div></div><div id=\"__asciidoctor-preview-1686__\" class=\"paragraph\"><p>Now you can run the <em>account service core</em> locally using the following command.</p></div><div id=\"__asciidoctor-preview-1698__\" class=\"listingblock\"><div class=\"content\"><pre class=\"highlightjs highlight\"><code class=\"language-java hljs\" data-lang=\"java\">mvn spring-boot:run</code></pre></div></div><div id=\"__asciidoctor-preview-1702__\" class=\"paragraph\"><p>The service core will start up—and if the IAM keys were configured correctly—you can start calling your functions from the Spring Boot application. To verify that this is working, try creating a new account and executing the <code>suspend</code> command.</p></div><div id=\"__asciidoctor-preview-1714__\" class=\"listingblock\"><div class=\"content\"><pre class=\"highlightjs highlight\"><code class=\"language-bash hljs\" data-lang=\"bash\">2017-07-06 18:47:29.027  INFO 64845 --- [uspendAccount-2] demo.function.LambdaFunctionService      : accountSuspended <span class=\"hljs-built_in\">log</span>:<br /> START RequestId: 78824b17-62a5-11e7-bd48<span class=\"hljs-_\">-e</span>3bbbc0eed75 Version: <span class=\"hljs-variable\">$LATEST</span><br /> END RequestId: 78824b17-62a5-11e7-bd48<span class=\"hljs-_\">-e</span>3bbbc0eed75<br /> REPORT RequestId: 78824b17-62a5-11e7-bd48<span class=\"hljs-_\">-e</span>3bbbc0eed75 Duration: 5.05 ms Billed Duration: 100 ms  Memory Size: 1024 MB Max Memory Used: 106 MB</code></pre></div></div><div id=\"__asciidoctor-preview-1718__\" class=\"paragraph\"><p>In the snippet above we can see that the Lambda function for <code>suspend-account</code> was successfully invoked.</p></div><div id=\"__asciidoctor-preview-1724__\" class=\"admonitionblock tip\"><table><tbody><tr><td class=\"icon\"><i class=\"fa icon-tip\" title=\"Tip\"></i></td><td class=\"content\">The cold start time of a Spring Cloud Function app isn’t exactly ideal. The first time a function is invoked it will take up to 20 seconds to start the app. After the first request, things will run much faster. We’ll cover this more in the next post. </td></tr></tbody></table></div></div></div></div><div class=\"sect1\"><h2 id=\"_summary\">Summary</h2><div class=\"sectionbody\"><div id=\"__asciidoctor-preview-1740__\" class=\"paragraph\"><p>In this post we looked at the basics behind a service block architecture. While this post tries to be comprehensive, there are a lot of moving parts that it may have left out. Spring Cloud Function is in its early days, but shows powerful promise of being a great serverless framework.</p></div><div id=\"__asciidoctor-preview-1744__\" class=\"paragraph\"><p>In the next post, we’ll cover more of the logistics for creating a serverless CI/CD pipeline using Concourse. We’ll also look at how we can use the open source platform <a href=\"https://en.wikipedia.org/wiki/Cloud_Foundry\" target=\"_blank\">Cloud Foundry</a> to inject in service credentials into a Lambda function. This is an important goal because Cloud Foundry provides a portable abstraction that doesn’t lock you into a single cloud provider. Which means that you can use Lambda functions with your own services!</p></div></div></div><div class=\"sect1\"><h2 id=\"_special_thanks\">Special thanks</h2><div class=\"sectionbody\"><div id=\"__asciidoctor-preview-1760__\" class=\"paragraph\"><p>Spring Cloud Function is a very exciting new project in the Spring ecosystem. I would like to give a special thanks to <a href=\"https://twitter.com/david_syer\" target=\"_blank\">Dr. Dave Syer</a> for helping me out with the examples in this post. There are many others to thank on the Spring Engineering team for this awesome new project, namely <a href=\"https://twitter.com/m_f_\" target=\"_blank\">Mark Fisher</a> for incubating and driving the project forward. Also, the one and only <a href=\"https://github.com/mp911de\" target=\"_blank\">Mark Paluch</a> who was kind enough to review my usage of Spring Data reactive repositories.</p></div><div id=\"__asciidoctor-preview-1764__\" class=\"paragraph\"><p>Also, a huge thanks to <a href=\"https://twitter.com/wattersjames\" target=\"_blank\">James Watters</a> for being such a huge supporter, advocate, and driver of Spring. Back in December James <a href=\"https://twitter.com/wattersjames/status/806329482114043904\" target=\"_blank\">tweeted</a> the lone words <em>Spring Cloud Function</em> as kind of a teaser, which initially got me very excited about this project. This blog post took months of research and experimentation, so if you found it useful, please share it.</p></div><div id=\"__asciidoctor-preview-1768__\" class=\"paragraph\"><p>Until next time!</p></div></div></div>                 </div></div>",
  "enclosure": "",
  "link": "https://www.kennybastani.com/2017/07/microservices-to-service-blocks-spring-cloud-function-aws-lambda.html",
  "author": "noreply@blogger.com (Kenny Bastani)",
  "thr:total": 0
}