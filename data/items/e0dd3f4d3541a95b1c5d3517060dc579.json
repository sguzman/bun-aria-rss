{
  "title": "e001: Document All the Things",
  "link": "https://newrustacean.com/show_notes/e001/",
  "description": "<h1 id=\"document-all-the-things\">Document all the things!</h1>\n<p><strong>Subject:</strong> Documentation in general, and <code>rustdoc</code> and <code>cargo doc</code> in particular.</p>\n<h1 id=\"followsupport\">Follow/Support</h1>\n<ul>\n<li>New Rustacean:\n<ul>\n<li>Twitter: <a href=\"https://www.twitter.com/newrustacean\">@newrustacean</a></li>\n<li>App.net: <a href=\"https://alpha.app.net/newrustacean\">@newrustacean</a></li>\n<li><a href=\"https://www.patreon.com/newrustacean\" rel=\"payment\">Patreon</a></li>\n<li>Email: <a href=\"mailto:hello@newrustacean.com\">hello@newrustacean.com</a></li>\n</ul></li>\n<li>Chris Krycho\n<ul>\n<li>Twitter: <a href=\"https://www.twitter.com/chriskrycho\">@chriskrycho</a></li>\n<li>App.net: <a href=\"https://alpha.app.net/chriskrycho\">@chriskrycho</a></li>\n</ul></li>\n</ul>\n<h1 id=\"notes\">Notes</h1>\n<p>This is a mostly-empty module, and it is intended as such. Why? Well, because <em>almost</em> all the sample code exists in these comments, which serve as the show notes. If you listen to the episode or take a look at the <a href=\"/src/show_notes/e001.rs.html\">source files</a>, you’ll see how it works!</p>\n<p>The components below are included <em>solely</em> so you can see how the docstrings work with each kind of thing. Make sure to click on the names of the items: there is more documentation there. Again, take a look at the <a href=\"/src/show_notes/e001.rs.html\">source</a> to see how it looks in the context of a file module.</p>\n<p>Note that this module-level docstring uses <code>rather than `///`-style comments. This is because this docstring is documenting the item which contains it, rather than the following item. Per [Rust RFC 505][1], the preferred approach is always to use the \"following\" form (`///`) rather than the \"containing\" form (</code>), except for module-level docs like these. (I will be following RFC 505 throughout.)</p>\n<h1 id=\"links\">Links</h1>\n<ul>\n<li><a href=\"https://github.com/rust-lang/rfcs/issues/1061\">Rust and MSVC tracking issue</a></li>\n<li>Other documentation tools:\n<ul>\n<li>Predecessors:\n<ul>\n<li><a href=\"http://sphinx-doc.org\">Python’s Sphinx tool</a></li>\n<li><a href=\"http://www.stack.nl/~dimitri/doxygen/\">Doxygen</a></li>\n<li><a href=\"http://usejsdoc.org\">JSDoc</a></li>\n<li><a href=\"http://www.oracle.com/technetwork/articles/java/index-jsp-135444.html\">JavaDoc</a></li>\n</ul></li>\n<li>Other new languages with Markdown tooling\n<ul>\n<li><a href=\"http://julialang.org\">Julia</a> has a <a href=\"http://julia.readthedocs.org/en/latest/manual/documentation/\">built-in documentation system</a></li>\n<li><a href=\"http://elixir-lang.org\">Elixir</a> has <a href=\"https://github.com/elixir-lang/ex_doc\">ex_doc</a></li>\n</ul></li>\n</ul></li>\n<li><a href=\"http://blog.rust-lang.org/2015/09/17/Rust-1.3.html\">Rust 1.3 release announcement</a></li>\n<li>Rust’s package hosting: <a href=\"https://crates.io\">crates.io</a>\n<ul>\n<li><a href=\"https://github.com/brson/taskcluster-crater\">Crater</a> for testing for backwards compatibility</li>\n</ul></li>\n<li><a href=\"http://semver.org\">Semantic versioning</a>\n<ul>\n<li><a href=\"http://blog.rust-lang.org/2014/10/30/Stability.html\">“Stability as a Deliverable”</a>: Rust official blog post on version stability, backwards compatibility, and release channels.</li>\n</ul></li>\n<li><a href=\"https://doc.rust-lang.org/book/documentation.html\">The Rust book chapter on <code>rustdoc</code></a></li>\n</ul>",
  "pubDate": "Sat, 03 Oct 2015 14:04:28 -0600",
  "enclosure": "",
  "guid": "9846F954-2459-4E89-BAF6-0DB4DA62E6D3",
  "itunes:author": "Chris Krycho",
  "itunes:subtitle": "Documentation in general, and rustdoc and cargo doc in particular.",
  "itunes:summary": "Documentation in general, and rustdoc and cargo doc in particular. Document all the things! * Date: October 3, 2015 * Subject: Documentation in general, and rustic and cargo doc in particular. * Audio: * M4A * MP3 Follow/Support * New Rustacean: * Twitter: @newrustacean * App.net: @newrustacean * Patreon * Email: hello@newrustacean.com * Chris Krycho * Twitter: @chriskrycho * App.net: @chriskrycho Notes This is a mostly-empty module, and it is intended as such. Why? Well, because almost all the sample code exists in these comments, which serve as the show notes. If you listen to the episode or take a look at the source files, you’ll see how it works! The components below are included solely so you can see how the docstrings work with each kind of thing. Make sure to click on the names of the items: there is more documentation there. Again, take a look at the source to see how it looks in the context of a file module. Note that this module-level docstring uses rather than `///`-style comments. This is because this docstring is documenting the item which contains it, rather than the following item. Per [Rust RFC 505][1], the preferred approach is always to use the &quot;following&quot; form (`///`) rather than the &quot;containing&quot; form (), except for module-level docs like these. (I will be following RFC 505 throughout.) Links * Rust and MSVC tracking issue * Other documentation tools: * Predecessors: * Python’s Sphinx tool * Oxygen * JSDoc * JavaDoc * Other new languages with Markdown tooling * Julia has a built-in documentation system * Elixir has ex_doc * Rust 1.3 release announcement * Rust’s package hosting: crates.io * Crater for testing for backwards compatibility * Semantic versioning * “Stability as a Deliverable”: Rust official blog post on version stability, backwards compatibility, and release channels. * The Rust book chapter on rustc",
  "itunes:duration": "17:06",
  "itunes:episodeType": "full"
}