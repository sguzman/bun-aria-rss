{
  "id": "tag:blogger.com,1999:blog-15045980.post-4368690219079281355",
  "published": "2018-02-20T14:11:00.000-08:00",
  "updated": "2018-02-20T15:17:39.808-08:00",
  "category": [
    "",
    ""
  ],
  "title": "Testing on the Toilet: Cleanly Create Test Data",
  "content": "<i><span style=\"font-family: &quot;times&quot; , &quot;times new roman&quot; , serif;\">This article was adapted from a&nbsp;<a href=\"http://googletesting.blogspot.com/2007/01/introducing-testing-on-toilet.html\">Google Testing on the Toilet</a>&nbsp;(TotT) episode. You can download a&nbsp;<a href=\"https://docs.google.com/document/d/1ntYzDmcBgs1uaRnLFqA96Ou1G9h-92pXujjENrbPa-8/edit?usp=sharing\" rel=\"nofollow\">printer-friendly version</a>&nbsp;of this TotT episode and post it in your office.</span></i><br /><i><br /></i><span style=\"font-family: &quot;times&quot; , &quot;times new roman&quot; , serif;\">By Ben Yu</span><br /><span style=\"font-family: &quot;times&quot; , &quot;times new roman&quot; , serif;\"><br /></span><span style=\"font-family: &quot;times&quot; , &quot;times new roman&quot; , serif;\"><span style=\"color: purple; font-weight: bold;\">Helper methods make it easier to create test data. But they can become difficult to read over time</span> as you need more variations of the test data to satisfy constantly evolving requirements from new tests:</span><br /><div style=\"overflow-x: auto;\"><table class=\"my-bordered-table\" style=\"width: 613px;\"><tbody><tr><td style=\"background-color: #f4cccc; vertical-align: top; width: 607px;\"><pre style=\"background-color: #f4cccc; border: 0px; color: black; margin: 0px; padding-bottom: 0px; padding-left: 0px; padding-top: 0px;\"><span style=\"color: black; font-family: &quot;consolas&quot; , &quot;courier new&quot; , &quot;courier&quot; , monospace;\"><span style=\"color: #006600;\">// This helper method starts with just a single parameter:</span><br />Company company = <span style=\"font-weight: bold;\">newCompany</span>(PUBLIC);</span></pre><pre style=\"background-color: #f4cccc; border: 0px; margin: 0px; padding-bottom: 0px; padding-left: 0px; padding-top: 0px;\"><span style=\"color: black; font-family: &quot;consolas&quot; , &quot;courier new&quot; , &quot;courier&quot; , monospace;\"><br /><span style=\"color: #006600;\">// But soon it acquires more and more parameters.<br />// Conditionals creep into the newCompany() method body to handle the nulls,<br />// and the method calls become hard to read due to the long parameter lists:<br /></span>Company small = <span style=\"font-weight: bold;\">newCompany</span>(2, 2, null, PUBLIC);<br />Company privatelyOwned = <span style=\"font-weight: bold;\">newCompany</span>(null, null, null, PRIVATE);<br />Company bankrupt = <span style=\"font-weight: bold;\">newCompany</span>(null, null, PAST_DATE, PUBLIC);<br /><br /><span style=\"color: #006600;\">// Or a new method is added each time a test needs a different combination of fields:<br /></span>Company small = <span style=\"font-weight: bold;\">newCompanyWithEmployeesAndBoardMembers</span>(2, 2, PUBLIC);<br />Company privatelyOwned = <span style=\"font-weight: bold;\">newCompanyWithType</span>(PRIVATE);<br />Company bankrupt = <span style=\"font-weight: bold;\">newCompanyWithBankruptcyDate</span>(PAST_DATE, PUBLIC);</span></pre></td></tr></tbody></table></div><span style=\"font-family: &quot;times&quot; , &quot;times new roman&quot; , serif;\"><br /></span><span style=\"font-family: &quot;times&quot; , &quot;times new roman&quot; , serif;\">Instead, <span style=\"color: purple; font-weight: bold;\">use the test data builder pattern: create a helper method that returns a partially-built object</span> (e.g., a Builder in languages such as Java, or a mutable object) whose state can be overridden in tests. The helper method initializes logically-required fields to reasonable defaults, so <span style=\"color: purple; font-weight: bold;\">each test can specify only fields relevant to the case being tested</span>:  </span><br /><div style=\"overflow-x: auto;\"><table class=\"my-bordered-table\" style=\"width: 613px;\"><tbody><tr><td style=\"background-color: #d9ead3; vertical-align: top; width: 607px;\"><pre style=\"background-color: #d9ead3; border: 0px; color: black; margin: 0px; padding-bottom: 0px; padding-left: 0px; padding-top: 0px;\"><span style=\"font-family: &quot;consolas&quot; , &quot;courier new&quot; , &quot;courier&quot; , monospace;\">Company small = <span style=\"font-weight: bold;\">newCompany</span>().setEmployees(2).setBoardMembers(2).build();<br />Company privatelyOwned = <span style=\"font-weight: bold;\">newCompany</span>().setType(PRIVATE).build();<br />Company bankrupt = <span style=\"font-weight: bold;\">newCompany</span>().setBankruptcyDate(PAST_DATE).build();<br />Company arbitraryCompany = <span style=\"font-weight: bold;\">newCompany</span>().build();<br /></span></pre><pre style=\"background-color: #d9ead3; border: 0px; margin: 0px; padding-bottom: 0px; padding-left: 0px; padding-top: 0px;\"><span style=\"font-family: &quot;consolas&quot; , &quot;courier new&quot; , &quot;courier&quot; , monospace;\"><span style=\"color: blue;\"><br /></span></span></pre><pre style=\"background-color: #d9ead3; border: 0px; color: black; margin: 0px; padding-bottom: 0px; padding-left: 0px; padding-top: 0px;\"><span style=\"font-family: &quot;consolas&quot; , &quot;courier new&quot; , &quot;courier&quot; , monospace;\"><span style=\"color: blue;\">// Zero parameters makes this method reusable for different variations of Company.<br />// It also doesn’t need conditionals to ignore parameters that aren’t set (e.g. null<br />// values) since a test can simply not set a field if it doesn’t care about it.<br /></span>private static <span style=\"font-weight: bold;\">Company.Builder newCompany</span>() {<br />  return Company.newBuilder().setType(PUBLIC).setEmployees(100); <span style=\"color: blue;\">// Set required fields</span><br />}</span></pre></td></tr></tbody></table></div><br /><span style=\"font-family: &quot;times&quot; , &quot;times new roman&quot; , serif;\">Also note that <span style=\"color: purple; font-weight: bold;\">tests should never rely on default values that are specified by a helper method</span> since that forces readers to read the helper method’s implementation details in order to understand the test.</span><br /><div style=\"overflow-x: auto;\"><table class=\"my-bordered-table\" style=\"width: 613px;\"><tbody><tr><td style=\"background-color: #cfe2f3; vertical-align: top; width: 607px;\"><pre style=\"background-color: #cfe2f3; border: 0px; margin: 0px; padding-bottom: 0px; padding-left: 0px; padding-top: 0px;\"><span style=\"color: black; font-family: &quot;consolas&quot; , &quot;courier new&quot; , &quot;courier&quot; , monospace;\"><span style=\"color: #006600;\">// This test needs a public company, so explicitly set it.<br />// It also needs a company with no board members, so explicitly clear it.<br /></span>Company publicNoBoardMembers = newCompany().<span style=\"font-weight: bold;\">setType(PUBLIC).clearBoardMembers</span>().build();</span></pre></td></tr></tbody></table></div><i><br /></i><i><span style=\"font-family: &quot;times&quot; , &quot;times new roman&quot; , serif;\">You can learn more about this topic at <a href=\"http://www.natpryce.com/articles/000714.html\">http://www.natpryce.com/articles/000714.html</a></span></i>",
  "link": [
    "",
    "",
    "",
    "",
    ""
  ],
  "author": {
    "name": "Google Testing Bloggers",
    "uri": "http://www.blogger.com/profile/03153388556673050910",
    "email": "noreply@blogger.com",
    "gd:image": ""
  },
  "thr:total": 7
}