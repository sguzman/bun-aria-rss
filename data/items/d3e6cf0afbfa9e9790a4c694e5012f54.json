{
  "title": "Feather: it's about metadata",
  "link": "",
  "published": "2016-04-26T07:00:00-07:00",
  "updated": "2016-04-26T07:00:00-07:00",
  "author": {
    "name": "Wes McKinney"
  },
  "id": "tag:wesmckinney.com,2016-04-26:/blog/feather-its-the-metadata/",
  "summary": "<p><strong>Summary</strong>: Feather's good performance is a side effect of its design, but the\nprimary goal of the project is to have a common memory layout (Apache Arrow)\nand metadata (type information) for use in multiple programming languages.</p>",
  "content": "<p><strong>Summary</strong>: Feather's good performance is a side effect of its design, but the\nprimary goal of the project is to have a common memory layout (Apache Arrow)\nand metadata (type information) for use in multiple programming languages.</p>\n\n\n<h2>Feather performance</h2>\n<p>Several people asked me about <a href=\"https://blog.h2o.ai/2016/04/fast-csv-writing-for-r/\">Matt Dowle's blog post</a> about fast CSV\nwriting. I say: bravo!</p>\n<p>The dirty secret with Feather's performance is that neither Hadley or I spent\nmuch effort on performance optimization. Through the <a href=\"https://github.com/wesm/feather/commits/master\">project's complete git\nhistory</a>, you'll be hard pressed to find anything relating to performance\ntuning.</p>\n<p>Due to Feather's design (using Arrow's columnar memory layout and simple\nmetadata using Google's Flatbuffers library), there was <strong>simply no way for it\nto be slow</strong> (ruling out some gross programming error). I was pleased, but not\ntoo surprised, to find that the first <code>feather.read_dataframe</code> call in Python\nnearly saturated my laptop's IO bandwidth.</p>\n<p>Feather does perform a limited amount of conversion between Arrow memory layout\nand R or Python data frame. As a result, there are several performance\noptimization opportunities available:</p>\n<ul>\n<li>Multi-threaded conversion to/from Arrow (convert multiple columns\n  simultaneously)</li>\n<li>Pipeline reads or writes: perform disk IO concurrent with conversion to or\n  from data frames.</li>\n</ul>\n<p>We haven't spent any energy on this, because the performance in the project's\nfirst draft was good enough. Patches welcome, of course.</p>\n<h2>Metadata and metadata-free file formats</h2>\n<p>One of my personal goals in working on Feather was to start a broader\ndiscussion about what I call <strong>metadata-free file formats</strong>, with CSV being the\nmost popular one. By \"metadata-free\", I mean that in storing data in these\nformats, you lose type information (for example: factor levels) that may be\nimpossible to recover. You may also lose numerical precision. When you read the\nfiles, you have to perform expensive type inference to \"guess\" the data types\nof columns. As you can imagine, there are a large number of esoteric edge cases\nfor any type inference engine for CSVs.</p>\n<p>That being said, metadata-free formats like CSV are still unfortunately a\nlowest-common denominator for data exchange in many systems. In both the Python\nand R communities, we've spent an extraordinary amount of time writing fast\ncode for parsing and doing type inference on all of the bizarre delimited text\nfiles generated in the real world. In my opinion, this has been time well\nspent.</p>\n<p>I often tell people that one of the things that made pandas successful early on\nwas that <code>pandas.read_csv</code> usually <em>just worked</em> and was fairly fast, and that\nwasn't true of any other Python CSV readers at the time.</p>\n<h2>Code sharing</h2>\n<p>Another goal of Feather was to share a common C++ library between the Python\nand R implementations. As Python and R libraries nowadays are often wrappers\naround C, C++, and Fortran code, it has bummed me out that so little of the\nnative code used in Python and R packages is reusable. I'd like to see more\nsharing of user-invisible compiled C or C++ code.</p>\n<p>Code sharing is hard, though, because much of it relates to \"proprietary\" data\nstructures and memory layouts. This is why <a href=\"https://arrow.apache.org\">Apache Arrow</a> is so important:\nit gives the community a common table / data frame memory layout on which we\ncan collaborate more easily.</p>\n<h2>Summary</h2>\n<p>Feather's priorities in order have been:</p>\n<ol>\n<li>Interoperable metadata and a shared memory layout</li>\n<li>Shared code</li>\n<li>Performance</li>\n</ol>\n<p>I look forward to more interoperability and more code sharing in the Python and\nR communities. If we can also make things fast, of course, let's do that, too.</p>"
}