{
  "title": "Propagating nerve impulse in  Hodgkin-Huxley model. Modeling with R. Part 2",
  "link": "https://datascienceplus.com/propagating-nerve-impulse-in-hodgkin-huxley-model-modeling-with-r-part-2/",
  "comments": "https://datascienceplus.com/propagating-nerve-impulse-in-hodgkin-huxley-model-modeling-with-r-part-2/#respond",
  "dc:creator": "Abderrahim Lyoubi-Idrissi",
  "pubDate": "Thu, 10 Feb 2022 19:05:00 +0000",
  "category": [
    "Advanced Modeling",
    "Data Visualisation",
    "Hodgkin & Huxley model",
    "Shiny app"
  ],
  "guid": "https://datascienceplus.com/?p=31908",
  "description": "<div style=\"border-top: 1px solid; font-size: 14px;text-align: center; border-bottom: 1px solid; padding: 5px 2px;\"><a href=\"https://datascienceplus.com/posting-from-r-markdown-to-datascienceplus/\">Are you interested in guest posting? Publish at DataScience+  via your RStudio editor.</a></div><h2>Category</h2><ul><li><a href=\"https://datascienceplus.com/category/advanced-modeling/\" rel=\"bookmark\" title=\"Permanent Link toAdvanced Modeling\">Advanced Modeling</a></li></ul><h2>Tags</h2><ul><li><a href=\"https://datascienceplus.com/tag/data-visualisation/\" rel=\"bookmark\" title=\"Permanent Link toData Visualisation\">Data Visualisation</a></li><li><a href=\"https://datascienceplus.com/tag/hodgkin-huxley-model/\" rel=\"bookmark\" title=\"Permanent Link toHodgkin & Huxley model\">Hodgkin & Huxley model</a></li><li><a href=\"https://datascienceplus.com/tag/rstats/\" rel=\"bookmark\" title=\"Permanent Link toR Programming\">R Programming</a></li><li><a href=\"https://datascienceplus.com/tag/shiny-app/\" rel=\"bookmark\" title=\"Permanent Link toShiny app\">Shiny app</a></li></ul>Introduction In this second part we will present a numerical method for solving the PDE system, which describes the propagation of action potential. We will make use of the R-Packages deSolve and ReacTran to simulate the model. The underlying Hodgkin-Huxley model used for our simulation is actually based on the telegraph equations. In contrast to [&#8230;]<strong><p>Related Post</p></strong><ul><li><a href=\"https://datascienceplus.com/forecast-using-arima-model-in-r/\" rel=\"bookmark\" title=\"Permanent Link toForecast using Arima Model in R\">Forecast using Arima Model in R</a></li><li><a href=\"https://datascienceplus.com/text-processing-and-word-stemming-for-classification-models-in-master-data-management-mdm-context-in-r/\" rel=\"bookmark\" title=\"Permanent Link toText processing and word stemming for classification models  in master data management (MDM) context in R\">Text processing and word stemming for classification models  in master data management (MDM) context in R</a></li><li><a href=\"https://datascienceplus.com/propagating-nerve-impulse-in-hodgkin-huxley-model-modeling-with-r-part-1/\" rel=\"bookmark\" title=\"Permanent Link toPropagating nerve impulse in  Hodgkin-Huxley model. Modeling with R. Part 1\">Propagating nerve impulse in  Hodgkin-Huxley model. Modeling with R. Part 1</a></li><li><a href=\"https://datascienceplus.com/an-introduction-to-k-gram-language-models-in-r/\" rel=\"bookmark\" title=\"Permanent Link toAn introduction to k-gram language models in R\">An introduction to k-gram language models in R</a></li><li><a href=\"https://datascienceplus.com/whats-the-intuition-behind-continuous-naive-bayes-behind-the-scenes-in-r/\" rel=\"bookmark\" title=\"Permanent Link toWhat’s the intuition behind continuous Naive Bayes &#8211; ‘behind-the-scenes’ in R\">What’s the intuition behind continuous Naive Bayes &#8211; ‘behind-the-scenes’ in R</a></li></ul>",
  "content:encoded": "<div style=\"border-top: 1px solid; font-size: 14px;text-align: center; border-bottom: 1px solid; padding: 5px 2px;\"><a href=\"https://datascienceplus.com/posting-from-r-markdown-to-datascienceplus/\">Are you interested in guest posting? Publish at DataScience+  via your RStudio editor.</a></div><h2>Category</h2><ul><li><a href=\"https://datascienceplus.com/category/advanced-modeling/\" rel=\"bookmark\" title=\"Permanent Link toAdvanced Modeling\">Advanced Modeling</a></li></ul><h2>Tags</h2><ul><li><a href=\"https://datascienceplus.com/tag/data-visualisation/\" rel=\"bookmark\" title=\"Permanent Link toData Visualisation\">Data Visualisation</a></li><li><a href=\"https://datascienceplus.com/tag/hodgkin-huxley-model/\" rel=\"bookmark\" title=\"Permanent Link toHodgkin & Huxley model\">Hodgkin & Huxley model</a></li><li><a href=\"https://datascienceplus.com/tag/rstats/\" rel=\"bookmark\" title=\"Permanent Link toR Programming\">R Programming</a></li><li><a href=\"https://datascienceplus.com/tag/shiny-app/\" rel=\"bookmark\" title=\"Permanent Link toShiny app\">Shiny app</a></li></ul><h2>Introduction</h2>\n<p>  In this second part we will present a numerical method for solving the PDE system, which describes the propagation of action potential. We will make use of the R-Packages deSolve and ReacTran to simulate the model. The underlying Hodgkin-Huxley model used for our simulation is actually based on the telegraph equations. In contrast to the standard models, where the inductance is nelegted, here we will also use the Hodgkin-Huxley model but without neglecting the self conductance of the axon <a href=\"https://europepmc.org/article/MED/28989835\" rel=\"noopener\" target=\"_blank\"> Isn&#8217;t there an inductance factor in the plasma membrane of nerves?</a>. This model is based on the \\((RLC)\\)(Resistance-Inductance-Capacitance) electric circuit analogue in which ionic currents through the cylindrical membrane are also taken into account.</p>\n<h2>Propagation Action Potential</h2>\n<p>  The mathematical equation describing the propagation in space and time of the action potential \\(V_m\\) along a neural axon is given by :<br />\n  $$ \\begin{align}\\frac{\\partial^2 V_m}{\\partial^2x}- LC_a\\frac{\\partial^2V_m}{\\partial^2t}= \\frac{2}{a}RC_a\\frac{\\partial V_m}{\\partial t} + \\frac{2}{a}L\\frac{\\partial I_{}ion}{\\partial t} + \\frac{2}{a}RI_{ion} \\hspace{30pt} (C.6)\\end{align} $$<br />\nWhere:<br />\n \\(V_m\\) is the potential difference across the membrane (dependent variable, depends on \\(x\\) and \\(t\\)).<br />\n  \\(x \\) is independent variable representing one dimension of three-dimensional space.<br />\n  \\(t\\) is independent variable representing time.<br />\n  \\(L\\) is the axon specific self-inductance.<br />\n  \\(R\\) is the specific resistance of an axon.<br />\n  \\(C_a\\) is the axon self-capacitance per unit area per unit length.<br />\n  \\(I_{ion}\\) is the sum of ions currents.<br />\n  \\(a\\) is the axon radius.<br />\nThe derivation of the equation \\((C.6)\\) for axon represented by the \\(RLC\\) (Resistance-Inductance-Capacitance) circuit is performed in Appendix A (In case you are interested in the derivation of the equation \\((C.6)\\) so just send me a mail at kritiker2017@gmail.com.). Note if the presence of induction in the system is neglected \\((L=0)\\), the equation \\((C.6)\\) becomes the non-linear cable equation, which is not resistant to analytical approaches.<br />\nIn the Hodgkin-Huxley model the ion current \\(I_{ion}\\) is defined as the sum of ions currents of potassium and sodium ( \\(I_K\\) and \\(I_{Na}\\)), and a smaller current (\\(I_L\\) ) made up of chloride and other ions:<br />\n  $$I_{ion} = I_K + I_{Na} + I_L= g_K(V_m -V_K)+g_{Na}(V_m &#8211; V_{Na}) + g_L(V_m &#8211; V_L) \\hspace{30pt} (C.7)$$ where \\(g_K\\) , \\(g_{Na}\\) and \\(g_L\\) are potassium, sodium and leakage conductances, respectively.<br />\n  We define:<br />\n  the diffusion coefficient as \\(D^2 = \\frac{a}{2LC_m}\\)<br />\n  the relaxation time as \\(\\tau = \\frac{L}{R}\\)<br />\n  the parameter \\(\\mu = \\frac{\\tau}{C_m}\\) characterizes the inductance in the system.</p>\n<p>  Substituting the equation \\((C.7)\\) into equation \\((C.6)\\) we obtain the final nerve propagation equation in the Hodgkin & Huxley model, which will be used for our simulation.<br />\n  $$<br />\n  \\begin{align}\\tau\\frac{\\partial^2 V_m}{\\partial^2t} = \\tau D^2\\frac{\\partial^2 V_m }{\\partial^2 x} &#8211; \\big[1+\\mu(g_{K}n^4 + g_{Na}m^3h+g_{L})\\big]\\frac{\\partial V_m}{\\partial t} &#8211; \\\\ g_{K}(\\frac{\\mu}{\\tau}n^4 + 4\\mu n^3\\frac{\\partial n}{\\partial t})(V_m &#8211; V_K)<br />\n  &#8211; \\\\ g_{Na}\\big[\\frac{\\mu}{\\tau}m^3h + \\mu(3m^2h\\frac{\\partial m}{\\partial t}+ m^3\\frac{\\partial h}{\\partial t}) \\big](V_m &#8211; V_{Na}) &#8211; \\\\ g_L\\frac{\\mu}{\\tau}(V_m &#8211; V_L) \\hspace{40pt} (C.8)\\end{align} $$</p>\n<h2>Numeric solution</h2>\n<p> To solve the equation \\((C.8)\\) we will make use of the R-Packages {deSolve} and {ReacTran}. The <a href=\"https://desolve.r-forge.r-project.org\" rel=\"noopener\" target=\"_blank\">[Package deSolve is an add-on package of the open source data analysis system R for the numerical treatment of systems of differential equations.].</a><br />\nIn this blog post we solve the equation \\((C.8)\\) on a one-dimensional domain \\(\\Omega = [0,15]\\), with the initial conditions \\(V_{m}(x, 0) = -15 \\exp{-\\frac{x^2}{D^2}}\\) and \\(\\frac{\\partial V_{m}(x,0)}{\\partial t} = 0 \\) and boundary conditions of Dirichlet type \\( V_{m}(x = 0, t) = 0\\), \\(V_{m}(x = 15, t) = 0\\). The &#8220;method of lines&#8221;, where space(\\(\\Omega\\)) is discretized in fixed steps while time is left in continuous form, will be used.</p>\n<pre>\nlibrary(ReacTran)\n  # Create one-dimensional finite difference grid\n  dx <- 1\n  xgrid <- setup.grid.1D(x.up = 0, x.down = 10, dx.1 = dx) \n  x <- xgrid$x.mid\n  N <- xgrid$N\n  # Model Parameters\n  ## Passive parameters of the neuron\n  a <- 238*10^(-4) # axon radius (cm)\n  R <- 35.4        # Membrane Capacitance (Ohm cm)\n  L <- 15          # Axon specific self-inductance\n  C_m <- 0.001     # Membrane capacitance density Cm 1.0 micro F/cm2\n  D_coefficient <- sqrt(a/(2*L*C_m))\n  tau <- L/R\n  mu <- tau/C_m\n  Iinj <- 0       # injected current \n  # Values of the neuron \n  g_K  <- 0.036       # conductance density g_K\n  g_Na <- 0.12        # conductance density g_Na\n  g_L  <- 0.0003      # conductance density g_L\n  v_K  <- 12          # K reversal potential\n  v_Na <- -115        # Na reversal potential\n  v_L <- -10.5989     # Leak reversal potential\n  # Function ion Channel\n  ## Rate functions for K activation (variable n)\n  alpha_n <- function(v) 0.01*(v+10)/(-1+exp((v+10)/10))\n  beta_n  <- function(v) 0.125*exp(v/80)\n  ## Rate functions for Na activation (variable m)\n  alpha_m <- function(v) 0.1*(v+25)/(-1+exp((v+25)/10))\n  beta_m  <- function(v) 4*exp(v/18) \n  # Rate functions for Na inactivation (variable h)\n  alpha_h <- function(v) 0.07*exp(v/20)\n  beta_h  <- function(v) (1+exp((v+30)/10))^-1\n  # Derivatives of ion channel functions/Kinetic equations for channel variables\n  dndt <- function(n,v)(alpha_n(v)*(1-n)-beta_n(v)*n)\n  dmdt <- function(m,v)(alpha_m(v)*(1-m)-beta_m(v)*m)\n  dhdt <- function(h,v)(alpha_h(v)*(1-h)-beta_h(v)*h)\n  # Initial conditions  \n  ## In the resting state V = 0\n  V_0  <- 0\n  n_0  <- alpha_n(V_0)/(alpha_n(V_0)+beta_n(V_0))\n  m_0  <- alpha_m(V_0)/(alpha_m(V_0)+ beta_m(V_0))\n  h_0  <- alpha_h(V_0)/(alpha_h(V_0)+beta_h(V_0))\n  vini <- (-15)*exp(-x^2/D_coefficient^2)\n  # vini <- -15*sin(pi*x)\n  # vini <- rep(-15, N)\n  uini  <- rep(0, N)\n  nini  <- rep(n_0, N)\n  mini  <- rep(m_0, N)\n  hini  <- rep(h_0, N)\n  yini  <- c(vini, uini, nini, mini, hini)\n  # Model equations/Differential equations \n  Pulse_propagation <- function (t, y, parms) {\n    v <- y[1:N]\n    u <- y[(N+1):(2*N)]\n    n <- y[(2*N+1):(3*N)]\n    m <- y[(3*N+1):(4*N)]\n    h <- y[(4*N+1):(5*N)]\n    \n    dv <- u\n    du <- tran.1D(C = v, C.up = 0, C.down = 0,  D = D_coefficient, dx = xgrid)$dC - \n      (1/tau + (mu/tau)*(g_K*n^4 + g_Na*m^3*h + g_L))*u - \n      g_K*((mu/tau^2)*n^4 + 4*(mu/tau)*n^3*dndt(n,v))*(v-v_K) - \n      g_Na*((mu/tau^2)*m^3*h + (mu/tau)*(3*m^2*h*dmdt(m,v) + m^3*dhdt(h,v)))*(v -v_Na) - \n      g_L*(mu/tau^2)*(v - v_L) + Iinj \n      \n    dn <- (alpha_n(v)*(1-n)-beta_n(v)*n)\n    dm <- (alpha_m(v)*(1-m)-beta_m(v)*m)\n    dh <- (alpha_h(v)*(1-h)-beta_h(v)*h)\n    return(list(c(dv,du, dn, dm, dh)))\n  }\n</pre>\n<p>We&#8217;ve done with building the model. In the above model code the action potential \\(V_m\\) is represented by the state variable v, which represents the dynamical attitude of the transmission for the nerve impulses of a nervous system. We define now the time simulation and run the model to solve the equation \\((C.8)\\).</p>\n<pre>\n # Specify the time at which the output is wanted  \n  time_3 <- seq(0,15, 0.01)\n</pre>\n<p> The defined model is one-dimensional (one  spatial independent variable), so we use the function ode.1D here. The time it takes to solve the model (in seconds) is also printed.</p>\n<pre>\n print(system.time(\n    out_3 <- ode.1D(y = yini, func = Pulse_propagation, \n                    times = time_3, method = \"adams\", parms = NULL, \n                    dimens = N, nspec = 5,  \n                    names = c(\"v\", \"u\", \"n\", \"m\", \"h\"))))\n<em>       User      System     verstrichen \n       0.21        0.00        0.20 \n</em>\n</pre>\n<p>The model output/results &#8220;out_3&#8221; is a matrix, which contains all the data needed to analyse and visualize the results of the simulation.<br />\nBefore plotting the numeric solution of the PDE \\((C.8)\\), we will first check if the integration was successful, and to get detailed information about the success of our simulation we use the function diagnostics{deSolve} and the function summary{deSolve}</p>\n<h3>Diagnostics and Summary</h3>\n<pre>\n# Print detailed information about the success of our \n  diagnostics(out_3)\n<em>--------------------\nlsode return code\n--------------------\n\n  return code (idid) =  2 \n  Integration was successful.\n\n--------------------\nINTEGER values\n--------------------\n\n  1 The return code : 2 \n  2 The number of steps taken for the problem so far: 1950 \n  3 The number of function evaluations for the problem so far: 2120 \n  5 The method order last used (successfully): 4 \n  6 The order of the method to be attempted on the next step: 4 \n  7 If return flag =-4,-5: the largest component in error vector 0 \n  8 The length of the real work array actually required: 820 \n  9 The length of the integer work array actually required: 20 \n 14 The number of Jacobian evaluations and LU decompositions so far: 0 \n \n--------------------\nRSTATE values\n--------------------\n\n  1 The step size in t last used (successfully): 0.01 \n  2 The step size to be attempted on the next step: 0.01 \n  3 The current value of the independent variable which the solver has reached: 15.00627 \n  4 Tolerance scale factor > 1.0 computed when requesting too much accuracy: 0 \n</em>\n</pre>\n<pre>\n  summary(out_3)\n<em>\n                    v             u            n            m            h\nMin.    -1.052214e+02 -3.101267e+02 3.176769e-01 1.396179e-02 7.750275e-02\n1st Qu. -2.231145e+00 -1.013699e+00 3.177112e-01 2.289523e-02 2.584720e-01\nMedian  -4.608204e-06 -7.997909e-02 3.706068e-01 5.293269e-02 5.108495e-01\nMean    -8.208256e+00  5.239505e-01 4.551956e-01 1.883197e-01 4.269989e-01\n3rd Qu.  7.670459e+00  4.150809e-06 5.910743e-01 7.744576e-02 5.960693e-01\nMax.     1.204040e+01  7.670492e+01 7.681718e-01 9.940305e-01 5.961208e-01\nN        1.501000e+04  1.501000e+04 1.501000e+04 1.501000e+04 1.501000e+04\nsd       2.720432e+01  3.933037e+01 1.595711e-01 3.139004e-01 1.858227e-01 \n\n</em>\n</pre>\n<h2>Plot the results</h2>\n<h3>Time evolution of membrane potential of H&H neuron at various distances along the axon.</h3>\n<p>As we can see in the following plot, when an excitable membrane is incorporated into a nonlinear equation \\((C.6)\\) and we use accommodated initial and boundary conditions, the model can give rise to traveling waves of electrical excitation and the action potential repeats itself at successive locations along the axon. The magnitude and duration of action potential remains the same throughout the propagation along the neuron&#8217;s axon.</p>\n<pre>\n library(plotly)\n  library(see)\n  # Gather columns into key-value pairs\n  ldata % tidyr::gather(Shape, Action_Potential, -time) \n  # head(ldata)\n  ldata_1_9 %filter(Shape == (1):(N-1))\n  plot_ldata <- ggplot(ldata_1_9, \n         aes(x = time,\n             y = - Action_Potential, \n             group = Shape,\n             col = Shape\n             )) + labs(title = \"Action Potential profiles through time \\n at various axon distances\") + geom_line() + theme_abyss() # + geom_hline(yintercept = 15, color = \"red\", lwl =2)\n  ggplotly(plot_ldata) \n</pre>\n<p><a href=\"https://datascienceplus.com/wp-content/uploads/2022/02/unnamed-chunk-6-1.png\"><img src=\"https://datascienceplus.com/wp-content/uploads/2022/02/unnamed-chunk-6-1-490x490.png\" alt=\"\" width=\"490\" height=\"490\" class=\"alignnone size-medium wp-image-31899\" srcset=\"https://datascienceplus.com/wp-content/uploads/2022/02/unnamed-chunk-6-1-490x490.png 490w, https://datascienceplus.com/wp-content/uploads/2022/02/unnamed-chunk-6-1.png 504w\" sizes=\"(max-width: 490px) 100vw, 490px\" /></a><br />\nFigure 1: Numerical solution of equation \\((C.8)\\) showing the time course of action potential. The action potential repeats itself at successive locations along the axon.</p>\n<h3>3D Plot of the numeric solution</h3>\n<p>To visualize the results in 3D the R version of the package{plotly} is used.</p>\n<pre>\n action_potential <- subset(out_3, which = c(\"v\"))\n  fig_surface % \n    layout(title = list(text = \" 3D Plot of the numeric solution\", y = 0.95 ), scene = list(\n            xaxis = list(title = \"Distance\"),\n            yaxis = list(title = \"Time\"),\n            zaxis = list(title = \"v: Action Potential\")\n            )\n           )\n  fig_surface \n</pre>\n<p><a href=\"https://datascienceplus.com/wp-content/uploads/2022/02/Action_potential_3D_plot.jpg\"><img src=\"https://datascienceplus.com/wp-content/uploads/2022/02/Action_potential_3D_plot-490x304.jpg\" alt=\"\" width=\"490\" height=\"304\" class=\"alignnone size-medium wp-image-31939\" srcset=\"https://datascienceplus.com/wp-content/uploads/2022/02/Action_potential_3D_plot-490x304.jpg 490w, https://datascienceplus.com/wp-content/uploads/2022/02/Action_potential_3D_plot-768x476.jpg 768w, https://datascienceplus.com/wp-content/uploads/2022/02/Action_potential_3D_plot.jpg 800w\" sizes=\"(max-width: 490px) 100vw, 490px\" /></a><br />\nFigure 2: 3D Presentation of the numerical solution of equation \\((C.8)\\). </p>\n<p>The following plots are showing the time course of the other dependent variables, n, m, h and dv/dt.</p>\n<pre>\nPlot_all_gatting <- function(x,y, my_title){\n    library(plotly)\n    library(see)\n      ldata %tidyr::gather(Shape, variable, -time) \n    # head(ldata)\n      ldata_1_9 %filter(Shape == x:y)\n      plot_ldata <- ggplot(ldata_1_9, aes(x = time, y = variable , group = Shape, col = Shape )) + \n      labs(title = my_title ) +\n       geom_line() + theme_radar_dark()\n      }\n  n <- Plot_all_gatting(2*N+1, 3*N, \"n profiles through time \\n at various axon distances\")\n  m <- Plot_all_gatting(3*N+1,4*N, \"m profiles through time \\n at various axon distances\")\n  h <- Plot_all_gatting(4*N+1,5*N, \" h profiles through time \\n at various axon distances\")\n  u <- Plot_all_gatting(N+1, 2*N, \"dV/dt profiles through time \\n at various axon distances\")\n  gridExtra::grid.arrange(n, m, h, u, ncol =2)\n</pre>\n<p><a href=\"https://datascienceplus.com/wp-content/uploads/2022/02/App_independet_variable.jpg\"><img src=\"https://datascienceplus.com/wp-content/uploads/2022/02/App_independet_variable-490x304.jpg\" alt=\"\" width=\"490\" height=\"304\" class=\"alignnone size-medium wp-image-31942\" srcset=\"https://datascienceplus.com/wp-content/uploads/2022/02/App_independet_variable-490x304.jpg 490w, https://datascienceplus.com/wp-content/uploads/2022/02/App_independet_variable.jpg 723w\" sizes=\"(max-width: 490px) 100vw, 490px\" /></a><br />\nFigure 3: Time courses of dv/dt and the gating functions n,m,h.</p>\n<h3>3D Plots of action Potential, and the gating variables n,m,h</h3>\n<pre>\ndVdt <- subset(out_3, which = c(\"u\"))\n  M <-   subset(out_3, which = c(\"m\"))\n  N <-   subset(out_3, which = c(\"n\"))\n  H <-   subset(out_3, which = c(\"h\"))\n  # custom grid style\n  axx <- list(\n    gridcolor=&#039;rgb(255, 255, 255)&#039;,\n    zerolinecolor=&#039;rgb(255, 255, 255)&#039;,\n    showbackground= TRUE,\n    backgroundcolor=&#039;rgb(230, 230,230)&#039;)\n  \n  # individual plots\n  fig1 <- plot_ly(x = x, y = time_3,  z = - dVdt , scene=&#039;scene&#039;)\n  fig1 % add_surface(showscale=FALSE)\n  \n  fig2 <- plot_ly(x = x, y = time_3,z = M, scene=&#039;scene2&#039;)\n  fig2 % add_surface(showscale=FALSE)\n  \n  fig3 <- plot_ly(x = x, y = time_3,z = N, scene=&#039;scene3&#039;)\n  fig3 % add_surface(showscale=FALSE)\n  \n  fig4 <- plot_ly(x = x, y = time_3,z = H, scene=&#039;scene4&#039;)\n  fig4 % add_surface(showscale=FALSE)\n  \n  # subplot and define scene\n  fig <- subplot(fig1, fig2, fig3, fig4) \n  fig % layout(title = \"3D Plots of the numeric solution for dv/dt, n,m and h\", \n                        scene = list(domain=list(x=c(0,0.5),y=c(0.5,1)),\n                                     xaxis = c(axx, list(title = \"Distance\")),\n                                     yaxis = c(axx, list(title = \"Time\")),\n                                     zaxis = c(axx, list(title = \"dv/dt\")),\n                                     aspectmode='cube'),\n                        scene2 = list(domain=list(x=c(0.5,1),y=c(0.5,1)),\n                                      xaxis = c(axx, list(title = \"Distance\")),\n                                      yaxis = c(axx, list(title = \"Time\")),\n                                      zaxis = c(axx, list(title = \"Gatting \\n variable m\")),\n                                      aspectmode='cube'),\n                        scene3 = list(domain=list(x=c(0,0.5),y=c(0,0.5)),\n                                      xaxis = c(axx, list(title = \"Distance\")),\n                                      yaxis = c(axx, list(title = \"Time\")),\n                                      zaxis = c(axx, list(title = \"Gatting \\n variable n\")),\n                                      aspectmode='cube'),\n                        scene4 = list(domain=list(x=c(0.5,1),y=c(0,0.5)),\n                                      xaxis = c(axx, list(title = \"Distance\")),\n                                      yaxis = c(axx, list(title = \"Time\")),\n                                      zaxis = c(axx, list(title = \"Gatting \\n variable h\")),\n                                      aspectmode='cube'))\n  \n  \n  fig\n</pre>\n<p><a href=\"https://datascienceplus.com/wp-content/uploads/2022/02/All_independet_variable_3D.jpg\"><img src=\"https://datascienceplus.com/wp-content/uploads/2022/02/All_independet_variable_3D-490x283.jpg\" alt=\"\" width=\"490\" height=\"283\" class=\"alignnone size-medium wp-image-31944\" srcset=\"https://datascienceplus.com/wp-content/uploads/2022/02/All_independet_variable_3D-490x283.jpg 490w, https://datascienceplus.com/wp-content/uploads/2022/02/All_independet_variable_3D-1024x592.jpg 1024w, https://datascienceplus.com/wp-content/uploads/2022/02/All_independet_variable_3D-768x444.jpg 768w, https://datascienceplus.com/wp-content/uploads/2022/02/All_independet_variable_3D-1536x889.jpg 1536w, https://datascienceplus.com/wp-content/uploads/2022/02/All_independet_variable_3D.jpg 1694w\" sizes=\"(max-width: 490px) 100vw, 490px\" /></a><br />\nFig 4: 3D representation of the numerical solution of dv/dt, n, m and h.<br />\nand finally the contour plot </p>\n<h3>Contour Plot</h3>\n<pre>\n action_potential <- subset(out_3, which = \"v\")\n  fig_prop <- plot_ly(visible = TRUE, \n                 x = x ,\n                 y = time_3, \n                 z = action_potential, \n                 type = \"contour\", contours = list(showlabels = TRUE))\n  fig_prop % colorbar(title = \"The independent \\n variable\") %>% \n    layout(title = list(text = \"Variable density\", y = 0.98), xaxis = list(title = \"Distance \"), yaxis = list(title =  \"Time\" ))\n  fig_prop \n</pre>\n<p><a href=\"https://datascienceplus.com/wp-content/uploads/2022/02/Contour_plot.jpg\"><img src=\"https://datascienceplus.com/wp-content/uploads/2022/02/Contour_plot-490x297.jpg\" alt=\"\" width=\"490\" height=\"297\" class=\"alignnone size-medium wp-image-31946\" srcset=\"https://datascienceplus.com/wp-content/uploads/2022/02/Contour_plot-490x297.jpg 490w, https://datascienceplus.com/wp-content/uploads/2022/02/Contour_plot-1024x620.jpg 1024w, https://datascienceplus.com/wp-content/uploads/2022/02/Contour_plot-768x465.jpg 768w, https://datascienceplus.com/wp-content/uploads/2022/02/Contour_plot.jpg 1181w\" sizes=\"(max-width: 490px) 100vw, 490px\" /></a></p>\n<h3>Shiny application</h3>\n<p>Using my new Shiny application (not yet published, it is still under development), one can explore the spatiotemporal dynamics of the action potential and the ionic currents. Just to show an example, when we change the initial value of the action potential in the Shiny application to -65mv (instead of -15mv in the above model) the model produces more than one spike and generates a periodic response. With this app one can also study the influence of the axon specific self-inductance on the spatiotemporal dynamics of the action potential and its proprieties (all-or-none rule, &#8230;.). In the Shiny application if we change the initial value of the action potential and then just click the update button, so one can get the results as shown below:<br />\n<a href=\"https://datascienceplus.com/wp-content/uploads/2022/02/Pulse_propgation_pic_1.jpg\"><img src=\"https://datascienceplus.com/wp-content/uploads/2022/02/Pulse_propgation_pic_1-490x174.jpg\" alt=\"\" width=\"490\" height=\"174\" class=\"alignnone size-medium wp-image-31947\" srcset=\"https://datascienceplus.com/wp-content/uploads/2022/02/Pulse_propgation_pic_1-490x174.jpg 490w, https://datascienceplus.com/wp-content/uploads/2022/02/Pulse_propgation_pic_1-1024x365.jpg 1024w, https://datascienceplus.com/wp-content/uploads/2022/02/Pulse_propgation_pic_1-768x273.jpg 768w, https://datascienceplus.com/wp-content/uploads/2022/02/Pulse_propgation_pic_1-1536x547.jpg 1536w, https://datascienceplus.com/wp-content/uploads/2022/02/Pulse_propgation_pic_1.jpg 1918w\" sizes=\"(max-width: 490px) 100vw, 490px\" /></a><br />\n<a href=\"https://datascienceplus.com/wp-content/uploads/2022/02/2.jpg\"><img src=\"https://datascienceplus.com/wp-content/uploads/2022/02/2-490x228.jpg\" alt=\"\" width=\"490\" height=\"228\" class=\"alignnone size-medium wp-image-31948\" srcset=\"https://datascienceplus.com/wp-content/uploads/2022/02/2-490x228.jpg 490w, https://datascienceplus.com/wp-content/uploads/2022/02/2-1024x477.jpg 1024w, https://datascienceplus.com/wp-content/uploads/2022/02/2-768x358.jpg 768w, https://datascienceplus.com/wp-content/uploads/2022/02/2-1536x715.jpg 1536w, https://datascienceplus.com/wp-content/uploads/2022/02/2.jpg 1915w\" sizes=\"(max-width: 490px) 100vw, 490px\" /></a><br />\n<a href=\"https://datascienceplus.com/wp-content/uploads/2022/02/Pulse_propgation_pic_3.jpg\"><img src=\"https://datascienceplus.com/wp-content/uploads/2022/02/Pulse_propgation_pic_3-490x194.jpg\" alt=\"\" width=\"490\" height=\"194\" class=\"alignnone size-medium wp-image-31949\" srcset=\"https://datascienceplus.com/wp-content/uploads/2022/02/Pulse_propgation_pic_3-490x194.jpg 490w, https://datascienceplus.com/wp-content/uploads/2022/02/Pulse_propgation_pic_3-1024x405.jpg 1024w, https://datascienceplus.com/wp-content/uploads/2022/02/Pulse_propgation_pic_3-768x304.jpg 768w, https://datascienceplus.com/wp-content/uploads/2022/02/Pulse_propgation_pic_3-1536x607.jpg 1536w, https://datascienceplus.com/wp-content/uploads/2022/02/Pulse_propgation_pic_3.jpg 1918w\" sizes=\"(max-width: 490px) 100vw, 490px\" /></a></p>\n<h2>Summary and Outlook</h2>\n<p>In this blog post we solved the one dimensional PDE using only R-Packages, this hyperbolic PDE is describing the dynamics of the action potential along an axon. Our numerical solution shows the well known results, namely the transmission/production of the action potential along the axon does not change its magnitude and shape.<br />\nNext I will investigate a more realistic model, the two dimension nerve pulse propagation model.</p>\n<h2>References</h2>\n<ul>\n<li>Mathematical Modelling of Nerve Pulse Transmission : <a href=\"https://core.ac.uk/download/pdf/236625972.pdf\" rel=\"noopener\" target=\"_blank\">https://core.ac.uk/download/pdf/236625972.pdf</a>  </li>\n<li> Cable Theory: <a href=\"https://pages.jh.edu/motn/coursenotes/cable.pdf\" rel=\"noopener\" target=\"_blank\">https://pages.jh.edu/motn/coursenotes/cable.pdf</a></li>\n<li>Solving Differential Equations in R :<br />\n<a href=\"https://www.researchgate.net/publication/41530790_Solving_Differential_Equations_in_R_Package_deSolve\" rel=\"noopener\" target=\"_blank\">https://www.researchgate.net/publication/41530790_Solving_Differential_Equations_in_R_Package_deSolve</a>  </li>\n<li>Plotly in R: <a href=\"https://plotly.com/r/getting-started\" rel=\"noopener\" target=\"_blank\">https://plotly.com/r/getting-started</a></li>\n<li>Creating Shiny Application with bs4Dash: <a href=\"https://rinterface.github.io/bs4Dash/index.html\" rel=\"noopener\" target=\"_blank\">https://rinterface.github.io/bs4Dash/index.html</a></li>\n</ul>\n<h2>Contact:</h2>\n<p>kritiker2017@gmail.com. </p>\n<strong><p>Related Post</p></strong><ul><li><a href=\"https://datascienceplus.com/forecast-using-arima-model-in-r/\" rel=\"bookmark\" title=\"Permanent Link toForecast using Arima Model in R\">Forecast using Arima Model in R</a></li><li><a href=\"https://datascienceplus.com/text-processing-and-word-stemming-for-classification-models-in-master-data-management-mdm-context-in-r/\" rel=\"bookmark\" title=\"Permanent Link toText processing and word stemming for classification models  in master data management (MDM) context in R\">Text processing and word stemming for classification models  in master data management (MDM) context in R</a></li><li><a href=\"https://datascienceplus.com/propagating-nerve-impulse-in-hodgkin-huxley-model-modeling-with-r-part-1/\" rel=\"bookmark\" title=\"Permanent Link toPropagating nerve impulse in  Hodgkin-Huxley model. Modeling with R. Part 1\">Propagating nerve impulse in  Hodgkin-Huxley model. Modeling with R. Part 1</a></li><li><a href=\"https://datascienceplus.com/an-introduction-to-k-gram-language-models-in-r/\" rel=\"bookmark\" title=\"Permanent Link toAn introduction to k-gram language models in R\">An introduction to k-gram language models in R</a></li><li><a href=\"https://datascienceplus.com/whats-the-intuition-behind-continuous-naive-bayes-behind-the-scenes-in-r/\" rel=\"bookmark\" title=\"Permanent Link toWhat’s the intuition behind continuous Naive Bayes &#8211; ‘behind-the-scenes’ in R\">What’s the intuition behind continuous Naive Bayes &#8211; ‘behind-the-scenes’ in R</a></li></ul>",
  "wfw:commentRss": "https://datascienceplus.com/propagating-nerve-impulse-in-hodgkin-huxley-model-modeling-with-r-part-2/feed/",
  "slash:comments": 0
}