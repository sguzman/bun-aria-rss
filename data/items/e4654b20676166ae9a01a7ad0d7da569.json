{
  "id": "tag:blogger.com,1999:blog-6894866515532737257.post-4927049258717267263",
  "published": "2018-04-18T11:15:00.000-07:00",
  "updated": "2018-04-18T11:15:50.451-07:00",
  "title": "Computing at Olin Q&A",
  "content": "<br />I was recently interviewed by Sally Phelps, the Director of Postgraduate Planning at Olin.&nbsp; We talked about computer science at Olin, which is something we are often asked to explain to prospective students and their parents, employers, and other external audiences.<br /><br />Afterward, I wrote the following approximation of our conversation, which I have edited to be much more coherent than what I actually said.<br /><br />I should note: My answers to the following questions are my opinions.&nbsp; I believe that other Olin professors who teach software classes would say similar things, but I am sure we would not all say the same things.<br /><br /><table align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: center;\"><tbody><tr><td style=\"text-align: center;\"><a href=\"https://2.bp.blogspot.com/-JxbI3YvAHuI/WteKWu16vdI/AAAAAAAAE_A/mubgzZuMJ2Y5fYnHiOy-9tVIAczKfYXeQCLcBGAs/s1600/Image-2.png\" imageanchor=\"1\" style=\"margin-left: auto; margin-right: auto;\"><img border=\"0\" data-original-height=\"1200\" data-original-width=\"1600\" height=\"240\" src=\"https://2.bp.blogspot.com/-JxbI3YvAHuI/WteKWu16vdI/AAAAAAAAE_A/mubgzZuMJ2Y5fYnHiOy-9tVIAczKfYXeQCLcBGAs/s320/Image-2.png\" width=\"320\" /></a></td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\"><i>Photo Credit: Sarah Deng</i></td></tr></tbody></table><br /><b>Q: What is the philosophy of Olin when it comes to training software engineers of the future?</b><br /><br />To understand computer science at Olin, you have to understand that Olin really has one curriculum, and it's engineering.<br /><br />We have degrees in Engineering, Mechanical Engineering, and Electrical and Computer Engineering.&nbsp; But everyone sees the same approach to engineering: it starts with people and it ends with people.&nbsp; That means you can't wait for someone to hand you a well-formulated problem from a textbook; you have to understand the people you are designing for, and the context of the problem.&nbsp; You have to know when an engineering solution can help and when it might not.&nbsp; And then when you have a solution, you have to be able to get it out of the lab and into the world.<br /><br /><br /><b>Q: That sounds very different from a traditional computer science degree.&nbsp;&nbsp;</b><br /><br />It is.&nbsp; Because we already have a lot of computer scientists who know how data structures work; we don't have as many who can identify opportunities, work on open-ended problems, work on teams with people from other disciplines, work on solutions that might involve electrical and mechanical systems as well as software.<br /><br />And we don't have a lot of computer scientists who can communicate clearly about their work; to have impact, they have to be able to explain the value of what they are doing.&nbsp; Most computer science programs don't teach those things very well.<br /><br />Also most CS programs don't do a great job of preparing students to work as software engineers.&nbsp; A lot of classes are too theoretical, too mathematical, and too focused on the computer itself, not the things you want to do with it, the applications.<br /><br />At Olin, we've got some theory, some mathematical foundations, some focus on the design of software systems.&nbsp; But we've turned that dial down because the truth is that a lot of that material is not relevant to practice.&nbsp; I always get a fight when I say that, because you can never take anything out of the curriculum.&nbsp; There's always someone who says you have to know how to balance a red-black tree or you can't be a computer scientist; or you have to know about Belady's anomaly, or you have to know X, Y, and Z.<br /><br />Well, you don't.&nbsp; For the vast majority of our students, for all the things they are going to do, a big chunk of the traditional curriculum is irrelevant.&nbsp; So we look at the traditional curriculum with some skepticism, and we make cuts.<br /><br />We have to; there's only so much time.&nbsp; In four years, students take about 32 classes.&nbsp; We have to spend them wisely.&nbsp; We have to think about where they are going after graduation.&nbsp; Some will go to grad school, some will start companies, some will work in industry,&nbsp; Some of them will be software engineers, some will be product managers, some will work in other fields; they might develop software, or work with software developers.&nbsp;<br /><br /><br /><b>Q: So how do you prepare people for all of that?</b><br /><br />It depends what \"prepare\" means.&nbsp; If it means teach them everything they need to know, it's impossible.&nbsp; But you can identify the knowledge, skills and attitudes they are most likely to need.<br /><br />It helps if you have faculty with industry experience.&nbsp; A lot of professors go straight to grad school and straight into academics, and then they have long arguments about what software engineers need to know.&nbsp; Sometimes they don't know what they are talking about.<br /><br />If you're designing a curriculum, just like a good engineer, you have to understand the people you're designing for and the context of the solution.&nbsp; Who are your students, where are they going, and what are they going to need?&nbsp; Then you can decide what to teach.<br /><br /><br /><b>Q: So if a student is interested in CS and they're deciding between Olin and another school, what do you tell them?</b><br /><br />I usually tell them about the Olin curriculum, what I just explained.&nbsp; And I suggest they look at our graduation requirements.&nbsp; Students at Olin who do the Engineering major with a concentration in computing, they take a relatively small number of computer science classes, usually around seven.&nbsp; And they take a lot of other engineering classes.<br /><br />In the first semester, everyone takes the same three engineering classes, so everyone does some mechanical design, some circuits and measurement, and some computational modeling.<br /><br />Everyone takes a foundation class in humanities, and another in entrepreneurship.&nbsp; Everyone takes Principles of Engineering, where they design and build a mechatronic system.<br /><br />In the fourth semester everyone takes user-centric design, and finally, in the senior year, everyone does a two-semester engineering capstone, which is usually interdisciplinary.<br /><br />If a prospective student looks at those classes and they're excited about doing design and engineering -- and several kinds of engineering -- along with computer science, then Olin is probably a good choice for them.<br /><br />If they look at the requirements and they dread them -- if the requirements are preventing them from doing what they really want -- then maybe Olin's not the right place.<br /><br /><br /><b>Q: I understand there are student-taught software classes – can you tell us more about that?</b><br /><br />We do, and a lot of them have been related to software, because that's an area where we have students doing internships, and sometimes starting companies, and they get a lot of industry experience.<br /><br />And they come back with skills and knowledge they can share with their peers.&nbsp; Sometimes that happens in classes, especially on projects.&nbsp; But it can also be a student-led class where student instructors propose a class, and they they work with faculty advisors to develop and present the material.&nbsp; As an advisor, I can help with curriculum design and the pedagogy, and sometimes I have a good view of the context or the big picture.&nbsp; And then a lot of times the students have a better view of the details.&nbsp; They've spent the summer working in a particular domain, or with a particular technology, and they can help their peers get a jump start.<br /><br />They also bring some of the skills and attitudes of software engineering.&nbsp; For example, we teach students about testing, and version control, and code quality.&nbsp; But in a class it can be artificial; a lot of times students want to get code working and they have to move on to the next thing.&nbsp; They don't want to hear from me about coding \"style\".<br /><br />It can be more effective when it's coming from peers, and when it's based on industry experience.&nbsp; The student instructors might say they worked at Pivotal, and they had to do pair programming, or they worked at Google, and all of their code was reviewed for readability before they could check it in.&nbsp; Sometimes that's got more credibility than I do.<br /><br /><br /><b>Q: What does the future look like for computing at Olin?</b><br /><br />A big part of it is programming in context.&nbsp; For example, the first software class is Modeling and Simulation, which is about computational models in science, including physics, chemistry, medicine, ecology…&nbsp; So right from the beginning, we're not just learning to program, we're applying it to real world problems.<br /><br />Programming isn't just a way of translation well understood solutions into code.&nbsp; It's a way of communicating, teaching, learning, and thinking.&nbsp; Students with basic programming skills can use coding as a \"pedagogic lever\" to learn other topics in engineering, math, natural and social science, arts and humanities.<br /><br />I think we are only starting to figure out what that looks like.&nbsp; We have some classes that use computation in these ways, but I think there are a lot more opportunities.&nbsp; A lot of ideas that we teach mathematically, we could be doing computationally, maybe in addition to, or maybe instead of the math.<br /><br />One of my examples is signal processing, where probably the most important idea is the Fourier transform.&nbsp; If you do that mathematically, you have to start with complex numbers and work your way up.&nbsp; It takes a long time before you get to anything interesting.<br /><br />With a computational approach, I can give you a program on the first day to compute the Fourier transform, and you can use it, and apply it to real problems, and see what it does, and run experiments and listen to the results, all on day one.&nbsp; And now that you know what it's good for, maybe you'll want to know how it works.&nbsp; So we can go top-down, start with applications, and then open the hood and look at the engine.<br /><br />I'd like to see us apply this approach throughout the curriculum, especially engineering, math, and science, but also arts, humanities and social science.<br /><br />",
  "link": [
    "",
    "",
    "",
    "",
    ""
  ],
  "author": {
    "name": "Allen Downey",
    "uri": "http://www.blogger.com/profile/01633071333405221858",
    "email": "noreply@blogger.com",
    "gd:image": ""
  },
  "media:thumbnail": "",
  "thr:total": 0
}