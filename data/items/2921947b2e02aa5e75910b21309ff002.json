{
  "id": "tag:drsimonj.svbtle.com,2014:Post/embarking-on-a-tidy-git-analysis",
  "published": "2018-03-26T04:56:52-07:00",
  "updated": "2018-03-26T04:56:52-07:00",
  "link": "",
  "title": "Guide to tidy git analysis",
  "content": "<p><a href=\"https://twitter.com/drsimonj\" rel=\"nofollow\">@drsimonj</a> here to help you embark on git repo analyses!</p>\n\n<p>Ever wondered who contributes to git repos? How their contributions have changed over time? What sort of conventions different authors use in their commit messages? Maybe you were inspired by <a href=\"https://twitter.com/dataandme\" rel=\"nofollow\">Mara Averick</a> to <a href=\"https://www.rstudio.com/resources/videos/contributing-to-tidyverse-packages/\" rel=\"nofollow\">contribute to tidyverse packages</a> and wonder how you fit in?</p>\n\n<p>This post – intended for intermediate R users – will help you answer these sorts of questions using tidy R tools.</p>\n\n<p>Install and load these packages to follow along:</p>\n\n<pre><code class=\"prettyprint lang-r\"># Parts 1 and 2\nlibrary(tidyverse)\nlibrary(glue)\nlibrary(stringr)\nlibrary(forcats)\n\n# Part 3\nlibrary(tidygraph)\nlibrary(ggraph)\nlibrary(tidytext)\n</code></pre>\n<h1 id=\"part-1-git-repo-to-a-tidy-data-frame_1\">Part 1: Git repo to a tidy data frame <a class=\"head_anchor\" href=\"#part-1-git-repo-to-a-tidy-data-frame_1\" rel=\"nofollow\">#</a>\n</h1><h2 id=\"get-a-git-repo_2\">Get a git repo <a class=\"head_anchor\" href=\"#get-a-git-repo_2\" rel=\"nofollow\">#</a>\n</h2>\n<p>We’ll explore the open-source <a href=\"https://github.com/tidyverse/ggplot2\" rel=\"nofollow\">ggplot2 repo</a> by copying it to our local machine with <a href=\"https://git-scm.com/docs/git-clone\" rel=\"nofollow\"><code class=\"prettyprint\">git clone</code></a>, typically run on a command-line like:</p>\n\n<pre><code class=\"prettyprint lang-bash\">git clone &lt;repository_url&gt; &lt;directory&gt;\n</code></pre>\n\n<p>Find the <code class=\"prettyprint\">&lt;repository_url&gt;</code> for <a href=\"https://github.com/\" rel=\"nofollow\">github.com</a> projects by clicking “Clone or download”.</p>\n\n<p><a href=\"https://svbtleusercontent.com/m4hctxlk1schvq.png\" rel=\"nofollow\"><img src=\"https://svbtleusercontent.com/m4hctxlk1schvq_small.png\" alt=\"ggplot2_gitclone.png\"></a></p>\n\n<p><code class=\"prettyprint\">&lt;directory&gt;</code> is optional but useful for us to clone into a specific location.</p>\n\n<p>The R code below clones the ggplot2 git repo into a temporary directory called <code class=\"prettyprint\">\"git_repo\"</code> (let <a href=\"https://twitter.com/matrunich\" rel=\"nofollow\">Alexander Matrunich</a> teach you more about temp directories and files <a href=\"http://rstat.consulting/blog/temporary-dir-and-files-in-r/?utm_content=buffer0d542&amp;utm_medium=social&amp;utm_source=twitter.com&amp;utm_campaign=buffer\" rel=\"nofollow\">here</a>). <code class=\"prettyprint\">system()</code> invokes these commands from R (instead of using a command-line directly) and the <a href=\"http://glue.tidyverse.org/\" rel=\"nofollow\">glue package</a> beautifully handles the strings for us.</p>\n\n<pre><code class=\"prettyprint lang-r\"># Remote repository URL\nrepo_url &lt;- \"https://github.com/tidyverse/ggplot2.git\"\n\n# Directory into which git repo will be cloned\nclone_dir &lt;- file.path(tempdir(), \"git_repo\")\n\n# Create command\nclone_cmd &lt;- glue(\"git clone {repo_url} {clone_dir}\")\n\n# Invoke command\nsystem(clone_cmd)\n</code></pre>\n\n<p>Check the directory contents:</p>\n\n<pre><code class=\"prettyprint lang-r\">list.files(clone_dir)\n#&gt;  [1] \"_pkgdown.yml\"      \"appveyor.yml\"      \"codecov.yml\"      \n#&gt;  [4] \"CONTRIBUTING.md\"   \"cran-comments.md\"  \"data\"             \n#&gt;  [7] \"data-raw\"          \"DESCRIPTION\"       \"ggplot2.Rproj\"    \n#&gt; [10] \"icons\"             \"inst\"              \"ISSUE_TEMPLATE.md\"\n#&gt; [13] \"LICENSE\"           \"man\"               \"NAMESPACE\"        \n#&gt; [16] \"NEWS\"              \"NEWS.md\"           \"R\"                \n#&gt; [19] \"README.md\"         \"README.Rmd\"        \"revdep\"           \n#&gt; [22] \"tests\"             \"vignettes\"\n</code></pre>\n<h2 id=\"get-tidy-git-history_2\">Get tidy git history <a class=\"head_anchor\" href=\"#get-tidy-git-history_2\" rel=\"nofollow\">#</a>\n</h2>\n<p>You can now access the git history of the local repo using <a href=\"https://git-scm.com/docs/git-log\" rel=\"nofollow\"><code class=\"prettyprint\">git log</code></a> (making sure to target the right directory with <code class=\"prettyprint\">-C</code>). Examine the last few commits via:</p>\n\n<pre><code class=\"prettyprint lang-r\">system(glue('git -C {clone_dir} log -3'))\n</code></pre>\n\n<pre><code class=\"prettyprint\">#&gt; commit 3c9c504fdb2f2c6b70a98d5a02f6cdf2c8cc62c9\n#&gt; Merge: cab8a54e 449bc039\n#&gt; Author: Lionel Henry &lt;lionel.hry@gmail.com&gt;\n#&gt; Date:   Thu Mar 22 18:42:25 2018 +0100\n#&gt; \n#&gt;     Merge pull request #2491 from tidyverse/tidyeval-facets\n#&gt;     \n#&gt;     Port facets to tidy eval\n#&gt; \n#&gt; commit 449bc039a75dd06e0ff52233c5d747f81b4d7c30\n#&gt; Author: Lionel Henry &lt;lionel.hry@gmail.com&gt;\n#&gt; Date:   Thu Mar 22 17:54:12 2018 +0100\n#&gt; \n#&gt;     Remove dependency on plyr::as.quoted()\n#&gt; \n#&gt; commit dc3c9855fd18f78ba8ef14d7e485334ac47e3b16\n#&gt; Author: Lionel Henry &lt;lionel.hry@gmail.com&gt;\n#&gt; Date:   Thu Mar 22 16:39:12 2018 +0100\n#&gt; \n#&gt;     Call formula interface classic instead of historical\n</code></pre>\n\n<p>This default output is nice but difficult to parse. Fortunately, <code class=\"prettyprint\">git log</code> has the <code class=\"prettyprint\">--pretty</code> option, which the code below uses to create a command to return nicely formatted logs (learn more about log formatting <a href=\"https://git-scm.com/book/en/v2/Git-Basics-Viewing-the-Commit-History\" rel=\"nofollow\">here</a>):</p>\n\n<pre><code class=\"prettyprint lang-r\">log_format_options &lt;- c(datetime = \"cd\", commit = \"h\", parents = \"p\", author = \"an\", subject = \"s\")\noption_delim &lt;- \"\\t\"\nlog_format   &lt;- glue(\"%{log_format_options}\") %&gt;% collapse(option_delim)\nlog_options  &lt;- glue('--pretty=format:\"{log_format}\" --date=format:\"%Y-%m-%d %H:%M:%S\"')\nlog_cmd      &lt;- glue('git -C {clone_dir} log {log_options}')\nlog_cmd\n#&gt; git -C /var/folders/f3/0qlt4tvx7lld3r1wx8q6z9gnrc2yg8/T//RtmpHj21yK/git_repo log --pretty=format:\"%cd    %h  %p  %an %s\" --date=format:\"%Y-%m-%d %H:%M:%S\"\n</code></pre>\n\n<p>This outputs each commit as a string of tab-separated values:</p>\n\n<pre><code class=\"prettyprint lang-r\">system(glue('{log_cmd} -3'))\n</code></pre>\n\n<pre><code class=\"prettyprint\">#&gt; 2018-03-22 18:42:25  3c9c504f    cab8a54e 449bc039   Lionel Henry    Merge pull request #2491 from tidyverse/tidyeval-facets\n#&gt; 2018-03-22 17:55:23  449bc039    dc3c9855    Lionel Henry    Remove dependency on plyr::as.quoted()\n#&gt; 2018-03-22 17:55:23  dc3c9855    1182b9f3    Lionel Henry    Call formula interface classic instead of historical\n</code></pre>\n\n<p>The R code below executes this for the entire repo, captures the output (via <code class=\"prettyprint\">intern = TRUE</code>), splits commit strings into vectors of values (thanks to <a href=\"http://stringr.tidyverse.org/\" rel=\"nofollow\">stringr</a>), and converts them to a named <a href=\"http://tibble.tidyverse.org/\" rel=\"nofollow\">tibble</a>.</p>\n\n<pre><code class=\"prettyprint lang-r\">history_logs &lt;- system(log_cmd, intern = TRUE) %&gt;% \n  str_split_fixed(option_delim, length(log_format_options)) %&gt;% \n  as_tibble() %&gt;% \n  setNames(names(log_format_options))\n\nhistory_logs\n#&gt; # A tibble: 3,946 x 5\n#&gt;    datetime            commit   parents           author       subject    \n#&gt;    &lt;chr&gt;               &lt;chr&gt;    &lt;chr&gt;             &lt;chr&gt;        &lt;chr&gt;      \n#&gt;  1 2018-03-22 18:42:25 3c9c504f cab8a54e 449bc039 Lionel Henry Merge pull…\n#&gt;  2 2018-03-22 17:55:23 449bc039 dc3c9855          Lionel Henry Remove dep…\n#&gt;  3 2018-03-22 17:55:23 dc3c9855 1182b9f3          Lionel Henry Call formu…\n#&gt;  4 2018-03-22 17:55:23 1182b9f3 b2144a8e          Lionel Henry Document t…\n#&gt;  5 2018-03-22 17:55:23 b2144a8e 13db76d2          Lionel Henry Mention ti…\n#&gt;  6 2018-03-22 17:55:23 13db76d2 95253c66          Lionel Henry Accept var…\n#&gt;  7 2018-03-22 17:55:23 95253c66 2983aa0d          Lionel Henry Accept var…\n#&gt;  8 2018-03-22 17:55:23 2983aa0d 64a00c7d          Lionel Henry Rename as_…\n#&gt;  9 2018-03-22 17:55:23 64a00c7d f186615a          Lionel Henry Use proper…\n#&gt; 10 2018-03-22 17:55:23 f186615a cab8a54e          Lionel Henry Support qu…\n#&gt; # ... with 3,936 more rows\n</code></pre>\n\n<p>The entire git commit history is now a tidy data frame (tibble)! We’ll finish this section with two minor additions.</p>\n\n<p>First, the <code class=\"prettyprint\">parents</code> column can contain space-separated strings when a commit was a merge of multiple, for example. The code below converts this to a list-column of character vectors (let <a href=\"https://twitter.com/JennyBryan\" rel=\"nofollow\">Jenny Bryan</a> teach you more about this <a href=\"https://www.rstudio.com/resources/videos/using-list-cols-in-your-dataframe/\" rel=\"nofollow\">here</a>):</p>\n\n<pre><code class=\"prettyprint lang-r\">history_logs &lt;- history_logs %&gt;% \n  mutate(parents = str_split(parents, \" \"))\n\nhistory_logs\n#&gt; # A tibble: 3,946 x 5\n#&gt;    datetime            commit   parents   author       subject            \n#&gt;    &lt;chr&gt;               &lt;chr&gt;    &lt;list&gt;    &lt;chr&gt;        &lt;chr&gt;              \n#&gt;  1 2018-03-22 18:42:25 3c9c504f &lt;chr [2]&gt; Lionel Henry Merge pull request…\n#&gt;  2 2018-03-22 17:55:23 449bc039 &lt;chr [1]&gt; Lionel Henry Remove dependency …\n#&gt;  3 2018-03-22 17:55:23 dc3c9855 &lt;chr [1]&gt; Lionel Henry Call formula inter…\n#&gt;  4 2018-03-22 17:55:23 1182b9f3 &lt;chr [1]&gt; Lionel Henry Document tidy eval…\n#&gt;  5 2018-03-22 17:55:23 b2144a8e &lt;chr [1]&gt; Lionel Henry Mention tidy eval …\n#&gt;  6 2018-03-22 17:55:23 13db76d2 &lt;chr [1]&gt; Lionel Henry Accept vars() spec…\n#&gt;  7 2018-03-22 17:55:23 95253c66 &lt;chr [1]&gt; Lionel Henry Accept vars() spec…\n#&gt;  8 2018-03-22 17:55:23 2983aa0d &lt;chr [1]&gt; Lionel Henry Rename as_facets_s…\n#&gt;  9 2018-03-22 17:55:23 64a00c7d &lt;chr [1]&gt; Lionel Henry Use proper quosure…\n#&gt; 10 2018-03-22 17:55:23 f186615a &lt;chr [1]&gt; Lionel Henry Support quosures i…\n#&gt; # ... with 3,936 more rows\n</code></pre>\n\n<p>Finally, be sure to assign branch numbers to commits. There’s surely a better way to do this, but here’s one (very untidy) method:</p>\n\n<pre><code class=\"prettyprint lang-r\"># Start with NA\nhistory_logs &lt;- history_logs %&gt;% mutate(branch = NA_integer_)\n\n# Create a boolean vector to represent free columns (1000 should be plenty!)\nfree_col &lt;- rep(TRUE, 1000)\n\nfor (i in seq_len(nrow(history_logs) - 1)) { # - 1 to ignore root\n  # Check current branch col and assign open col if NA\n  branch &lt;- history_logs$branch[i]\n\n  if (is.na(branch)) {\n    branch &lt;- which.max(free_col)\n    free_col[branch] &lt;- FALSE\n    history_logs$branch[i] &lt;- branch\n  }\n\n  # Go through parents\n  parents &lt;- history_logs$parents[[i]]\n\n  for (p in parents) {\n    parent_col &lt;- history_logs$branch[history_logs$commit == p]\n\n    # If col is missing, assign it to same branch (if first parent) or new\n    # branch (if other)\n    if (is.na(parent_col)) {\n      parent_col &lt;- if_else(p == parents[1], branch, which.max(free_col))\n\n    # If NOT missing this means a split has occurred. Assign parent the lowest\n    # and re-open both cols (parent closed at the end)\n    } else {\n      free_col[c(branch, parent_col)] &lt;- TRUE\n      parent_col &lt;- min(branch, parent_col)\n\n    }\n\n    # Close parent col and assign\n    free_col[parent_col] &lt;- FALSE\n    history_logs$branch[history_logs$commit == p] &lt;- parent_col\n  }\n}\n</code></pre>\n\n<p>We now also have branch values with <code class=\"prettyprint\">1</code> being the root.</p>\n\n<pre><code class=\"prettyprint lang-r\">history_logs\n#&gt; # A tibble: 3,946 x 6\n#&gt;    datetime            commit   parents   author       subject      branch\n#&gt;    &lt;chr&gt;               &lt;chr&gt;    &lt;list&gt;    &lt;chr&gt;        &lt;chr&gt;         &lt;int&gt;\n#&gt;  1 2018-03-22 18:42:25 3c9c504f &lt;chr [2]&gt; Lionel Henry Merge pull …      1\n#&gt;  2 2018-03-22 17:55:23 449bc039 &lt;chr [1]&gt; Lionel Henry Remove depe…      2\n#&gt;  3 2018-03-22 17:55:23 dc3c9855 &lt;chr [1]&gt; Lionel Henry Call formul…      2\n#&gt;  4 2018-03-22 17:55:23 1182b9f3 &lt;chr [1]&gt; Lionel Henry Document ti…      2\n#&gt;  5 2018-03-22 17:55:23 b2144a8e &lt;chr [1]&gt; Lionel Henry Mention tid…      2\n#&gt;  6 2018-03-22 17:55:23 13db76d2 &lt;chr [1]&gt; Lionel Henry Accept vars…      2\n#&gt;  7 2018-03-22 17:55:23 95253c66 &lt;chr [1]&gt; Lionel Henry Accept vars…      2\n#&gt;  8 2018-03-22 17:55:23 2983aa0d &lt;chr [1]&gt; Lionel Henry Rename as_f…      2\n#&gt;  9 2018-03-22 17:55:23 64a00c7d &lt;chr [1]&gt; Lionel Henry Use proper …      2\n#&gt; 10 2018-03-22 17:55:23 f186615a &lt;chr [1]&gt; Lionel Henry Support quo…      2\n#&gt; # ... with 3,936 more rows\n</code></pre>\n\n<p>This rounds off the section on getting a git commit history into a tidy data frame. Remove the local git repo, which is no longer needed:</p>\n\n<pre><code class=\"prettyprint lang-r\">unlink(clone_dir, recursive = TRUE)\n</code></pre>\n<h1 id=\"part-2-tidy-analysis_1\">Part 2: Tidy Analysis <a class=\"head_anchor\" href=\"#part-2-tidy-analysis_1\" rel=\"nofollow\">#</a>\n</h1>\n<p>You’re now ready to embark on a tidy git repo analysis! For example, which authors make the most commits?</p>\n\n<pre><code class=\"prettyprint lang-r\">history_logs %&gt;% \n  count(author, sort = TRUE)\n#&gt; # A tibble: 165 x 2\n#&gt;    author                         n\n#&gt;    &lt;chr&gt;                      &lt;int&gt;\n#&gt;  1 hadley                      2285\n#&gt;  2 Winston Chang                650\n#&gt;  3 Hadley Wickham               104\n#&gt;  4 Kohske Takahashi @ jurina    103\n#&gt;  5 Kohske Takahashi at Haruna    70\n#&gt;  6 hadley wickham                69\n#&gt;  7 Jean-Olivier Irisson          63\n#&gt;  8 Lionel Henry                  50\n#&gt;  9 Thomas Lin Pedersen           47\n#&gt; 10 Kirill Müller                 40\n#&gt; # ... with 155 more rows\n</code></pre>\n\n<p>Some authors appear under different names, which we can quickly correct based on these top cases:</p>\n\n<pre><code class=\"prettyprint lang-r\">history_logs &lt;- history_logs %&gt;% \n  mutate(author = case_when(\n    str_detect(tolower(author), \"hadley\") ~ \"Hadley Wickham\",\n    str_detect(tolower(author), \"kohske takahashi\") ~ \"Kohske Takahashi\",\n    TRUE ~ str_to_title(author)\n  ))\n</code></pre>\n\n<p>Now, again, authors by commit frequency:</p>\n\n<pre><code class=\"prettyprint lang-r\">history_logs %&gt;% \n  count(author) %&gt;% \n  arrange(desc(n))\n#&gt; # A tibble: 157 x 2\n#&gt;    author                   n\n#&gt;    &lt;chr&gt;                &lt;int&gt;\n#&gt;  1 Hadley Wickham        2458\n#&gt;  2 Winston Chang          650\n#&gt;  3 Kohske Takahashi       232\n#&gt;  4 Jean-Olivier Irisson    63\n#&gt;  5 Lionel Henry            50\n#&gt;  6 Thomas Lin Pedersen     47\n#&gt;  7 Kirill Müller           40\n#&gt;  8 Kara Woo                36\n#&gt;  9 Brian Diggs             27\n#&gt; 10 Jake Russ               20\n#&gt; # ... with 147 more rows\n</code></pre>\n\n<p>And top-ten visualized with <a href=\"http://ggplot2.tidyverse.org/reference/\" rel=\"nofollow\">ggplot2</a>:</p>\n\n<pre><code class=\"prettyprint lang-r\">history_logs %&gt;% \n  count(author) %&gt;% \n  top_n(10, n) %&gt;% \n  mutate(author = fct_reorder(author, n)) %&gt;% \n  ggplot(aes(author, n)) +\n    geom_col(aes(fill = n), show.legend = FALSE) +\n    coord_flip() +\n    theme_minimal() +\n    ggtitle(\"ggplot2 authors with most commits\") +\n    labs(x = NULL, y = \"Number of commits\", caption = \"Post by @drsimonj\")\n</code></pre>\n\n<p><a href=\"https://svbtleusercontent.com/ysvukrswqvmvma.png\" rel=\"nofollow\"><img src=\"https://svbtleusercontent.com/ysvukrswqvmvma_small.png\" alt=\"unnamed-chunk-18-1.png\"></a></p>\n\n<p>Not surprising to see <a href=\"https://twitter.com/hadleywickham\" rel=\"nofollow\">Hadley Wikham</a> topping the charts. Otherwise, the analysis options are pretty endless from here!</p>\n<h1 id=\"part-3-advanced-topics_1\">Part 3: Advanced Topics <a class=\"head_anchor\" href=\"#part-3-advanced-topics_1\" rel=\"nofollow\">#</a>\n</h1>\n<p>I’d like to touch on two advanced topics before leaving you to embark on astounding git repo analyses.</p>\n<h2 id=\"git-repo-as-a-relational-graph_2\">Git repo as a relational graph <a class=\"head_anchor\" href=\"#git-repo-as-a-relational-graph_2\" rel=\"nofollow\">#</a>\n</h2>\n<p>A git history is a relational structure where commits are nodes and connections between them are directed edges (from parent to child).</p>\n\n<p>The code below converts our tidy data frame into a tidy relational structure made up of two data frames (nodes and edges) thanks to <a href=\"https://github.com/thomasp85/tidygraph\" rel=\"nofollow\">tidygraph</a> (learn more from the package creator, <a href=\"https://twitter.com/thomasp85\" rel=\"nofollow\">Thomas Lin Pedersen</a>, in <a href=\"https://www.data-imaginist.com/2017/introducing-tidygraph/\" rel=\"nofollow\">blog posts like this</a>).</p>\n\n<pre><code class=\"prettyprint lang-r\"># Convert commit to a factor (for ordering nodes)\nhistory_logs &lt;- history_logs %&gt;% \n  mutate(commit = factor(commit))\n\n# Nodes are the commits (keeping relevant info)\nnodes &lt;- history_logs %&gt;% \n  select(-parents) %&gt;% \n  arrange(commit)\n\n# Edges are connections between commits and their parents\nedges &lt;- history_logs %&gt;% \n  select(commit, parents) %&gt;% \n  unnest(parents) %&gt;% \n  mutate(parents = factor(parents, levels = levels(commit))) %&gt;% \n  transmute(from = as.integer(parents), to = as.integer(commit)) %&gt;% \n  drop_na()\n\n# Create tidy directed graph object\ngit_graph &lt;- tbl_graph(nodes = nodes, edges = edges, directed = TRUE)\n</code></pre>\n\n<pre><code class=\"prettyprint lang-r\">git_graph\n#&gt; # A tbl_graph: 3946 nodes and 4371 edges\n#&gt; #\n#&gt; # A directed acyclic simple graph with 1 component\n#&gt; #\n#&gt; # Node Data: 3,946 x 5 (active)\n#&gt;   datetime            commit   author           subject             branch\n#&gt;   &lt;chr&gt;               &lt;fct&gt;    &lt;chr&gt;            &lt;chr&gt;                &lt;int&gt;\n#&gt; 1 2011-07-19 22:40:33 002e510d Kohske Takahashi remove style param…      4\n#&gt; 2 2008-07-05 20:00:50 0036ad7f Hadley Wickham   HAcks to get tile …      1\n#&gt; 3 2010-02-05 10:25:26 0072cf4c Hadley Wickham   Fix bug with empty…      1\n#&gt; 4 2013-12-02 13:51:05 008018cc Josef Fruehwald  added stat_ellipse       9\n#&gt; 5 2010-12-23 10:22:36 00821913 Hadley Wickham   Fix doc name             1\n#&gt; 6 2011-12-23 06:24:28 008312c0 Hadley Wickham   Merge pull request…      1\n#&gt; # ... with 3,940 more rows\n#&gt; #\n#&gt; # Edge Data: 4,371 x 2\n#&gt;    from    to\n#&gt;   &lt;int&gt; &lt;int&gt;\n#&gt; 1  3070   968\n#&gt; 2  1071   968\n#&gt; 3  3370  1071\n#&gt; # ... with 4,368 more rows\n</code></pre>\n\n<p>Using <a href=\"https://github.com/thomasp85/ggraph\" rel=\"nofollow\">ggraph</a> (another of Thomas’ awesome packages with more detailed info in <a href=\"https://www.data-imaginist.com/2017/ggraph-introduction-layouts/\" rel=\"nofollow\">posts like this</a>) a default visualization could look something like this:</p>\n\n<pre><code class=\"prettyprint lang-r\">git_graph %&gt;% \n  ggraph() +\n    geom_edge_link(alpha = .1) +\n    geom_node_point(aes(color = factor(branch)), alpha = .3) +\n    theme_graph() +\n    theme(legend.position = \"none\")\n#&gt; Using `nicely` as default layout\n</code></pre>\n\n<p><a href=\"https://svbtleusercontent.com/u3np4yfpxvlrq.png\" rel=\"nofollow\"><img src=\"https://svbtleusercontent.com/u3np4yfpxvlrq_small.png\" alt=\"unnamed-chunk-21-1.png\"></a></p>\n\n<p>This looks cool but not right! A <code class=\"prettyprint\">\"manual\"</code> layout is needed for a linear visualisation of the git history (see the <a href=\"https://github.com/tidyverse/dplyr/network\" rel=\"nofollow\">dplyr network</a> for example).</p>\n\n<p>For convenience, this is a template pipeline that will take the tidy graph object, ensure the proper layout is used, and create the basic plot:</p>\n\n<pre><code class=\"prettyprint lang-r\">ggraph_git &lt;- . %&gt;%\n  # Set node x,y coordinates\n  activate(nodes) %&gt;% \n  mutate(x = datetime, y = branch) %&gt;% \n  # Plot with correct layout\n  create_layout(layout = \"manual\", node.positions = as_tibble(activate(., nodes))) %&gt;% \n  {ggraph(., layout = \"manual\") + theme_graph() + labs(caption = \"Post by @drsimonj\")}\n</code></pre>\n\n<p>Using this pipeline:</p>\n\n<pre><code class=\"prettyprint lang-r\">git_graph %&gt;% \n  ggraph_git() +\n    geom_edge_link(alpha = .1) +\n    geom_node_point(aes(color = factor(branch)), alpha = .3) +\n    theme(legend.position = \"none\") +\n    ggtitle(\"Commit history of ggplot2\")\n</code></pre>\n\n<p><a href=\"https://svbtleusercontent.com/2sdczckaimxuhw.png\" rel=\"nofollow\"><img src=\"https://svbtleusercontent.com/2sdczckaimxuhw_small.png\" alt=\"unnamed-chunk-23-1.png\"></a></p>\n\n<p>Much better! You can go crazy with how you’d like to visualise the repo. For example, here we filter on a specific date range:</p>\n\n<pre><code class=\"prettyprint lang-r\">git_graph %&gt;% \n  activate(nodes) %&gt;% \n  filter(datetime &gt; \"2015-11-01\", datetime &lt; \"2016-08-01\") %&gt;% \n  ggraph_git() +\n    geom_edge_link(alpha = .1) +\n    geom_node_point(aes(color = factor(branch)), alpha = .3) +\n    theme(legend.position = \"none\") +\n    ggtitle(\"Git history of ggplot2\",\n            subtitle = \"2015-11 to 2016-08\")\n</code></pre>\n\n<p><a href=\"https://svbtleusercontent.com/hks3lk75atbbyw.png\" rel=\"nofollow\"><img src=\"https://svbtleusercontent.com/hks3lk75atbbyw_small.png\" alt=\"unnamed-chunk-24-1.png\"></a></p>\n\n<p>Here commits are highlighted for the top authors:</p>\n\n<pre><code class=\"prettyprint lang-r\"># 10 most-common authors\ntop_authors &lt;- git_graph %&gt;% \n  activate(nodes) %&gt;% \n  as_tibble() %&gt;% \n  count(author, sort = TRUE) %&gt;% \n  top_n(10, n) %&gt;% \n  pull(author)\n\n# Plot\ngit_graph %&gt;% \n  activate(nodes) %&gt;%\n  filter(datetime &gt; \"2015-11-01\", datetime &lt; \"2016-08-01\") %&gt;% \n  mutate(author = factor(author, levels = top_authors),\n         author = fct_explicit_na(author, na_level = \"Other\")) %&gt;% \n  ggraph_git() +\n    geom_edge_link(alpha = .1) +\n    geom_node_point(aes(color = author), alpha = .3) +\n    theme(legend.position = \"bottom\") +\n    ggtitle(\"ggplot2 commits by author\",\n            subtitle = \"2015-11 to 2016-08\")\n</code></pre>\n\n<p><a href=\"https://svbtleusercontent.com/ruisfywffoekw.png\" rel=\"nofollow\"><img src=\"https://svbtleusercontent.com/ruisfywffoekw_small.png\" alt=\"unnamed-chunk-25-1.png\"></a></p>\n\n<p>I hope this gives you enough to start having fun with these sorts of visualisations!</p>\n<h2 id=\"text-mining-commit-messages_2\">Text Mining Commit Messages <a class=\"head_anchor\" href=\"#text-mining-commit-messages_2\" rel=\"nofollow\">#</a>\n</h2>\n<p>Commit messages are simple but great material for tidy text-mining tools like the brilliant <a href=\"https://github.com/juliasilge/tidytext\" rel=\"nofollow\">tidytext package</a>, best learned from <a href=\"https://www.tidytextmining.com/\" rel=\"nofollow\">Text Mining with R: A Tidy Approach</a>, by <a href=\"https://twitter.com/juliasilge\" rel=\"nofollow\">Julia Silge</a> and <a href=\"https://twitter.com/drob\" rel=\"nofollow\">David Robinson</a>. Here are some examples using commit subjects to get you started.</p>\n\n<p>Get commit subjects into a tidy format and remove stop words.</p>\n\n<pre><code class=\"prettyprint lang-r\">data(stop_words)\n\ntidy_subjects &lt;- history_logs %&gt;%\n  unnest_tokens(word, subject) %&gt;% \n  anti_join(stop_words)\n#&gt; Joining, by = \"word\"\n\ntidy_subjects\n#&gt; # A tibble: 16,477 x 6\n#&gt;    datetime            commit   parents   author       branch word      \n#&gt;    &lt;chr&gt;               &lt;fct&gt;    &lt;list&gt;    &lt;chr&gt;         &lt;int&gt; &lt;chr&gt;     \n#&gt;  1 2018-03-22 18:42:25 3c9c504f &lt;chr [2]&gt; Lionel Henry      1 merge     \n#&gt;  2 2018-03-22 18:42:25 3c9c504f &lt;chr [2]&gt; Lionel Henry      1 pull      \n#&gt;  3 2018-03-22 18:42:25 3c9c504f &lt;chr [2]&gt; Lionel Henry      1 request   \n#&gt;  4 2018-03-22 18:42:25 3c9c504f &lt;chr [2]&gt; Lionel Henry      1 2491      \n#&gt;  5 2018-03-22 18:42:25 3c9c504f &lt;chr [2]&gt; Lionel Henry      1 tidyverse \n#&gt;  6 2018-03-22 18:42:25 3c9c504f &lt;chr [2]&gt; Lionel Henry      1 tidyeval  \n#&gt;  7 2018-03-22 18:42:25 3c9c504f &lt;chr [2]&gt; Lionel Henry      1 facets    \n#&gt;  8 2018-03-22 17:55:23 449bc039 &lt;chr [1]&gt; Lionel Henry      2 remove    \n#&gt;  9 2018-03-22 17:55:23 449bc039 &lt;chr [1]&gt; Lionel Henry      2 dependency\n#&gt; 10 2018-03-22 17:55:23 449bc039 &lt;chr [1]&gt; Lionel Henry      2 plyr      \n#&gt; # ... with 16,467 more rows\n</code></pre>\n\n<p>What are the ten most frequently used words?</p>\n\n<pre><code class=\"prettyprint lang-r\">tidy_subjects %&gt;%\n  count(word) %&gt;% \n  top_n(10, n) %&gt;% \n  mutate(word = fct_reorder(word, n)) %&gt;% \n  ggplot(aes(word, n)) +\n    geom_col(aes(fill = n), show.legend = FALSE) +\n    coord_flip() +\n    theme_minimal() +\n    ggtitle(\"Most-used words in ggplot2 commit subjects\") +\n    labs(x = NULL, y = \"Word frequency\", caption = \"Post by @drsimonj\")\n</code></pre>\n\n<p><a href=\"https://svbtleusercontent.com/9xew9hfr9irfg.png\" rel=\"nofollow\"><img src=\"https://svbtleusercontent.com/9xew9hfr9irfg_small.png\" alt=\"unnamed-chunk-27-1.png\"></a></p>\n\n<p>Or how about the words that most-frequently follow “fix”, the most-used word:</p>\n\n<pre><code class=\"prettyprint lang-r\">history_logs %&gt;% \n  select(commit, author, subject) %&gt;% \n  unnest_tokens(bigram, subject, token = \"ngrams\", n = 2) %&gt;% \n  separate(bigram, c(\"word1\", \"word2\"), sep = \" \") %&gt;% \n  filter(word1 == \"fix\") %&gt;%\n  anti_join(stop_words, by = c(\"word2\" = \"word\")) %&gt;% \n  count(word2, sort = TRUE)\n#&gt; # A tibble: 223 x 2\n#&gt;    word2             n\n#&gt;    &lt;chr&gt;         &lt;int&gt;\n#&gt;  1 bug              57\n#&gt;  2 typo             37\n#&gt;  3 geom             11\n#&gt;  4 guides           11\n#&gt;  5 bugs              7\n#&gt;  6 doc               7\n#&gt;  7 boxplot           6\n#&gt;  8 axis              5\n#&gt;  9 documentation     5\n#&gt; 10 dumb              5\n#&gt; # ... with 213 more rows\n</code></pre>\n\n<p>Unsurprisingly, it seems like many of the commits involve fixing bugs and typos, as well as challenges with geoms and guides.</p>\n\n<p>We’ve now covered more than enough for you to explore and analyse git repos in a tidy R framework. Don’t forget to share your findings with the world and let me know about it!</p>\n<h2 id=\"sign-off_2\">Sign off <a class=\"head_anchor\" href=\"#sign-off_2\" rel=\"nofollow\">#</a>\n</h2>\n<p>Thanks for reading and I hope this was useful for you.</p>\n\n<p>For updates of recent blog posts, follow <a href=\"https://twitter.com/drsimonj\" rel=\"nofollow\">@drsimonj</a> on Twitter, or email me at <a href=\"mailto:drsimonjackson@gmail.com\" rel=\"nofollow\">drsimonjackson@gmail.com</a> to get in touch.</p>\n\n<p>If you’d like the code that produced this blog, check out the <a href=\"https://github.com/drsimonj/blogR\" rel=\"nofollow\">blogR GitHub repository</a>.</p>"
}