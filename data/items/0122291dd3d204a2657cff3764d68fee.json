{
  "title": "Programmatic Bokeh Servers",
  "link": "",
  "updated": "2017-06-28T00:00:00+00:00",
  "id": "https://mrocklin.github.io/blog/work/2017/06/28/simple-bokeh-server",
  "content": "<p><em>This work is supported by <a href=\"http://continuum.io\">Continuum Analytics</a></em></p>\n\n<p><em>This was cross posted to the Bokeh blog <a href=\"https://bokeh.github.io/blog/2017/6/29/simple_bokeh_server/\">here</a>.  Please consider referencing and sharing that post via social media instead of this one.</em></p>\n\n<p>This blogpost shows how to start a <em>very simple</em> bokeh server application\n<em>programmatically</em>.  For more complex examples, or for the more standard\ncommand line interface, see the <a href=\"http://bokeh.pydata.org/en/latest/docs/user_guide/server.html\">Bokeh\ndocumentation</a>.</p>\n\n<h2 id=\"motivation\">Motivation</h2>\n\n<p>Many people know Bokeh as a tool for building web visualizations from languages\nlike Python.  However I find that Bokeh’s true value is in serving\nlive-streaming, interactive visualizations that update with real-time data.  I\npersonally use Bokeh to serve <a href=\"http://distributed.readthedocs.io/en/latest/web.html\">real-time diagnostics for a distributed computing\nsystem</a>.  In this case I\nembed Bokeh directly into my library.  I’ve found it incredibly useful and easy\nto deploy sophisticated and beautiful visualizations that help me understand\nthe deep inner-workings of my system.</p>\n\n<p><img src=\"https://raw.githubusercontent.com/dask/dask-org/master/images/daskboard.gif\" width=\"70%\" /></p>\n\n<p>Most of the (excellent) documentation focuses on stand-alone applications using\nthe Bokeh server</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>$ bokeh serve myapp.py\n</code></pre></div></div>\n\n<p>However as a developer who wants to integrate Bokeh into my application\nstarting up a separate process from the command line doesn’t work for me. Also,\nI find that starting things from Python tends to be a bit simpler on my brain.\nI thought I’d provide some examples on how to do this within a Jupyter\nnotebook.</p>\n\n<h2 id=\"launch-bokeh-servers-from-a-notebook\">Launch Bokeh Servers from a Notebook</h2>\n\n<p>The code below starts a Bokeh server running on port 5000 that provides a\nsingle route to <code class=\"language-plaintext highlighter-rouge\">/</code> that serves a single figure with a line-plot.  The imports\nare a bit wonky, but the amount of code necessary here is relatively small.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">bokeh.server.server</span> <span class=\"kn\">import</span> <span class=\"n\">Server</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bokeh.application</span> <span class=\"kn\">import</span> <span class=\"n\">Application</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bokeh.application.handlers.function</span> <span class=\"kn\">import</span> <span class=\"n\">FunctionHandler</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bokeh.plotting</span> <span class=\"kn\">import</span> <span class=\"n\">figure</span><span class=\"p\">,</span> <span class=\"n\">ColumnDataSource</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">make_document</span><span class=\"p\">(</span><span class=\"n\">doc</span><span class=\"p\">):</span>\n    <span class=\"n\">fig</span> <span class=\"o\">=</span> <span class=\"n\">figure</span><span class=\"p\">(</span><span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s\">'Line plot!'</span><span class=\"p\">,</span> <span class=\"n\">sizing_mode</span><span class=\"o\">=</span><span class=\"s\">'scale_width'</span><span class=\"p\">)</span>\n    <span class=\"n\">fig</span><span class=\"p\">.</span><span class=\"n\">line</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"n\">y</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">])</span>\n\n    <span class=\"n\">doc</span><span class=\"p\">.</span><span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"s\">\"Hello, world!\"</span>\n    <span class=\"n\">doc</span><span class=\"p\">.</span><span class=\"n\">add_root</span><span class=\"p\">(</span><span class=\"n\">fig</span><span class=\"p\">)</span>\n\n<span class=\"n\">apps</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s\">'/'</span><span class=\"p\">:</span> <span class=\"n\">Application</span><span class=\"p\">(</span><span class=\"n\">FunctionHandler</span><span class=\"p\">(</span><span class=\"n\">make_document</span><span class=\"p\">))}</span>\n\n<span class=\"n\">server</span> <span class=\"o\">=</span> <span class=\"n\">Server</span><span class=\"p\">(</span><span class=\"n\">apps</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"mi\">5000</span><span class=\"p\">)</span>\n<span class=\"n\">server</span><span class=\"p\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n</code></pre></div></div>\n\n<p><img src=\"https://mrocklin.github.io/blog/images/bokeh-server-line-plot.png\" align=\"right\" width=\"40%\" /></p>\n\n<p>We make a function <code class=\"language-plaintext highlighter-rouge\">make_document</code> which is called every time someone visits\nour website.  This function can create plots, call functions, and generally do\nwhatever it wants.  Here we make a simple line plot and register that plot with\nthe document with the <code class=\"language-plaintext highlighter-rouge\">doc.add_root(...)</code> method.</p>\n\n<p>This starts a Tornado web server and creates a new image whenever someone\nconnects, similar to libraries like Tornado, or Flask.  In this case our web\nserver piggybacks on the Jupyter notebook’s own IOLoop.  Because Bokeh is built\non Tornado it can play nicely with other async applications like Tornado or\nAsyncio.</p>\n\n<h2 id=\"live-updates\">Live Updates</h2>\n\n<p>I find that Bokeh’s real strength comes when you want to stream live data into\nthe browser.  Doing this by hand generally means serializing your data on the\nserver, figuring out how web sockets work, sending the data to the\nclient/browser and then updating plots in the browser.</p>\n\n<p>Bokeh handles this by keeping a synchronized table of data on the client and\nthe server, the <code class=\"language-plaintext highlighter-rouge\">ColumnDataSource</code>.  If you define plots around the column data\nsource and then push more data into the source then Bokeh will handle the rest.\nUpdating your plots in the browser just requires pushing more data into the\ncolumn data source on the server.</p>\n\n<p>In the example below every time someone connects to our server we make a new\n<code class=\"language-plaintext highlighter-rouge\">ColumnDataSource</code>, make an update function that adds a new record into it,\nand set up a callback to call that function every 100ms.  We then make a plot\naround that data source to render the data as colored circles.</p>\n\n<p>Because this is a new Bokeh server we start this on a new port, though in\npractice if we had multiple pages we would just add them as multiple routes in\nthe <code class=\"language-plaintext highlighter-rouge\">apps</code> variable.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"nn\">random</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">make_document</span><span class=\"p\">(</span><span class=\"n\">doc</span><span class=\"p\">):</span>\n    <span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"n\">ColumnDataSource</span><span class=\"p\">({</span><span class=\"s\">'x'</span><span class=\"p\">:</span> <span class=\"p\">[],</span> <span class=\"s\">'y'</span><span class=\"p\">:</span> <span class=\"p\">[],</span> <span class=\"s\">'color'</span><span class=\"p\">:</span> <span class=\"p\">[]})</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">update</span><span class=\"p\">():</span>\n        <span class=\"n\">new</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s\">'x'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">random</span><span class=\"p\">.</span><span class=\"n\">random</span><span class=\"p\">()],</span>\n               <span class=\"s\">'y'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">random</span><span class=\"p\">.</span><span class=\"n\">random</span><span class=\"p\">()],</span>\n               <span class=\"s\">'color'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">random</span><span class=\"p\">.</span><span class=\"n\">choice</span><span class=\"p\">([</span><span class=\"s\">'red'</span><span class=\"p\">,</span> <span class=\"s\">'blue'</span><span class=\"p\">,</span> <span class=\"s\">'green'</span><span class=\"p\">])]}</span>\n        <span class=\"n\">source</span><span class=\"p\">.</span><span class=\"n\">stream</span><span class=\"p\">(</span><span class=\"n\">new</span><span class=\"p\">)</span>\n\n    <span class=\"n\">doc</span><span class=\"p\">.</span><span class=\"n\">add_periodic_callback</span><span class=\"p\">(</span><span class=\"n\">update</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">)</span>\n\n    <span class=\"n\">fig</span> <span class=\"o\">=</span> <span class=\"n\">figure</span><span class=\"p\">(</span><span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s\">'Streaming Circle Plot!'</span><span class=\"p\">,</span> <span class=\"n\">sizing_mode</span><span class=\"o\">=</span><span class=\"s\">'scale_width'</span><span class=\"p\">,</span>\n                 <span class=\"n\">x_range</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">y_range</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">])</span>\n    <span class=\"n\">fig</span><span class=\"p\">.</span><span class=\"n\">circle</span><span class=\"p\">(</span><span class=\"n\">source</span><span class=\"o\">=</span><span class=\"n\">source</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"o\">=</span><span class=\"s\">'x'</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"o\">=</span><span class=\"s\">'y'</span><span class=\"p\">,</span> <span class=\"n\">color</span><span class=\"o\">=</span><span class=\"s\">'color'</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n\n    <span class=\"n\">doc</span><span class=\"p\">.</span><span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"s\">\"Now with live updating!\"</span>\n    <span class=\"n\">doc</span><span class=\"p\">.</span><span class=\"n\">add_root</span><span class=\"p\">(</span><span class=\"n\">fig</span><span class=\"p\">)</span>\n\n<span class=\"n\">apps</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s\">'/'</span><span class=\"p\">:</span> <span class=\"n\">Application</span><span class=\"p\">(</span><span class=\"n\">FunctionHandler</span><span class=\"p\">(</span><span class=\"n\">make_document</span><span class=\"p\">))}</span>\n\n<span class=\"n\">server</span> <span class=\"o\">=</span> <span class=\"n\">Server</span><span class=\"p\">(</span><span class=\"n\">apps</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"mi\">5001</span><span class=\"p\">)</span>\n<span class=\"n\">server</span><span class=\"p\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n</code></pre></div></div>\n\n<p><img src=\"https://mrocklin.github.io/blog/images/bokeh-server-circle-plot.gif\" width=\"40%\" /></p>\n\n<p>By changing around the figures (or combining multiple figures, text, other\nvisual elements, and so on) you have full freedom over the visual styling of your\nweb service.  By changing around the update function you can pull data from\nsensors, shove in more interesting data, and so on.  This toy example is meant to\nprovide the skeleton of a simple application; hopefully you can fill in details\nfrom your application.</p>\n\n<h2 id=\"real-example\">Real example</h2>\n\n<p>Here is a simple example taken from Dask’s dashboard that maintains a streaming\ntime series plot with the number of idle and saturated workers in a Dask\ncluster.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">make_document</span><span class=\"p\">(</span><span class=\"n\">doc</span><span class=\"p\">):</span>\n    <span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"n\">ColumnDataSource</span><span class=\"p\">({</span><span class=\"s\">'time'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">time</span><span class=\"p\">(),</span> <span class=\"n\">time</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">],</span>\n                               <span class=\"s\">'idle'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mf\">0.1</span><span class=\"p\">],</span>\n                               <span class=\"s\">'saturated'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mf\">0.1</span><span class=\"p\">]})</span>\n\n    <span class=\"n\">x_range</span> <span class=\"o\">=</span> <span class=\"n\">DataRange1d</span><span class=\"p\">(</span><span class=\"n\">follow</span><span class=\"o\">=</span><span class=\"s\">'end'</span><span class=\"p\">,</span> <span class=\"n\">follow_interval</span><span class=\"o\">=</span><span class=\"mi\">20000</span><span class=\"p\">,</span> <span class=\"n\">range_padding</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n\n    <span class=\"n\">fig</span> <span class=\"o\">=</span> <span class=\"n\">figure</span><span class=\"p\">(</span><span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s\">\"Idle and Saturated Workers Over Time\"</span><span class=\"p\">,</span>\n                 <span class=\"n\">x_axis_type</span><span class=\"o\">=</span><span class=\"s\">'datetime'</span><span class=\"p\">,</span> <span class=\"n\">y_range</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">scheduler</span><span class=\"p\">.</span><span class=\"n\">workers</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mf\">0.1</span><span class=\"p\">],</span>\n                 <span class=\"n\">height</span><span class=\"o\">=</span><span class=\"mi\">150</span><span class=\"p\">,</span> <span class=\"n\">tools</span><span class=\"o\">=</span><span class=\"s\">''</span><span class=\"p\">,</span> <span class=\"n\">x_range</span><span class=\"o\">=</span><span class=\"n\">x_range</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n    <span class=\"n\">fig</span><span class=\"p\">.</span><span class=\"n\">line</span><span class=\"p\">(</span><span class=\"n\">source</span><span class=\"o\">=</span><span class=\"n\">source</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"o\">=</span><span class=\"s\">'time'</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"o\">=</span><span class=\"s\">'idle'</span><span class=\"p\">,</span> <span class=\"n\">color</span><span class=\"o\">=</span><span class=\"s\">'red'</span><span class=\"p\">)</span>\n    <span class=\"n\">fig</span><span class=\"p\">.</span><span class=\"n\">line</span><span class=\"p\">(</span><span class=\"n\">source</span><span class=\"o\">=</span><span class=\"n\">source</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"o\">=</span><span class=\"s\">'time'</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"o\">=</span><span class=\"s\">'saturated'</span><span class=\"p\">,</span> <span class=\"n\">color</span><span class=\"o\">=</span><span class=\"s\">'green'</span><span class=\"p\">)</span>\n    <span class=\"n\">fig</span><span class=\"p\">.</span><span class=\"n\">yaxis</span><span class=\"p\">.</span><span class=\"n\">minor_tick_line_color</span> <span class=\"o\">=</span> <span class=\"bp\">None</span>\n\n    <span class=\"n\">fig</span><span class=\"p\">.</span><span class=\"n\">add_tools</span><span class=\"p\">(</span>\n        <span class=\"n\">ResetTool</span><span class=\"p\">(</span><span class=\"n\">reset_size</span><span class=\"o\">=</span><span class=\"bp\">False</span><span class=\"p\">),</span>\n        <span class=\"n\">PanTool</span><span class=\"p\">(</span><span class=\"n\">dimensions</span><span class=\"o\">=</span><span class=\"s\">\"width\"</span><span class=\"p\">),</span>\n        <span class=\"n\">WheelZoomTool</span><span class=\"p\">(</span><span class=\"n\">dimensions</span><span class=\"o\">=</span><span class=\"s\">\"width\"</span><span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"n\">doc</span><span class=\"p\">.</span><span class=\"n\">add_root</span><span class=\"p\">(</span><span class=\"n\">fig</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">update</span><span class=\"p\">():</span>\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s\">'time'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">time</span><span class=\"p\">()</span> <span class=\"o\">*</span> <span class=\"mi\">1000</span><span class=\"p\">],</span>\n                  <span class=\"s\">'idle'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">scheduler</span><span class=\"p\">.</span><span class=\"n\">idle</span><span class=\"p\">)],</span>\n                  <span class=\"s\">'saturated'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">scheduler</span><span class=\"p\">.</span><span class=\"n\">saturated</span><span class=\"p\">)]}</span>\n        <span class=\"n\">source</span><span class=\"p\">.</span><span class=\"n\">stream</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">,</span> <span class=\"mi\">10000</span><span class=\"p\">)</span>\n\n    <span class=\"n\">doc</span><span class=\"p\">.</span><span class=\"n\">add_periodic_callback</span><span class=\"p\">(</span><span class=\"n\">update</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>You can also have buttons, sliders, widgets, and so on.  I rarely use these\npersonally though so they don’t interest me as much.</p>\n\n<h2 id=\"final-thoughts\">Final Thoughts</h2>\n\n<p>I’ve found the Bokeh server to be incredibly helpful in my work and also very\napproachable once you understand how to set one up (as you now do).  I hope\nthat this post serves people well.\nThis blogpost is available as a <a href=\"https://gist.github.com/e014f11aab7eb3fd12d83a746d8c87df\">Jupyter\nnotebook</a> if you want\nto try it out yourself.</p>"
}