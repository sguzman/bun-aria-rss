{
  "title": "Thermal Vision: Fever Detector with Python and OpenCV (starter project)",
  "link": "https://pyimagesearch.com/2022/10/24/thermal-vision-fever-detector-with-python-and-opencv-starter-project/",
  "dc:creator": "Raul Garcia-Martin",
  "pubDate": "Mon, 24 Oct 2022 13:00:00 +0000",
  "category": [
    "Infrared Vision",
    "IR Vision",
    "OpenCV Tutorials",
    "Tutorials",
    "infrared vision",
    "night vision",
    "opencv",
    "python",
    "tutorials"
  ],
  "guid": "https://pyimagesearch.com/?p=29512",
  "description": "<p>Table of Contents Thermal Vision: Fever Detector with Python and OpenCV (starter project) Simple Face Detection in Thermal Images Introduction Thermal Face Detection with Haar Cascades Configuring Your Development Environment Having Problems Configuring Your Development Environment? Project Structure Face Detection&#8230;</p>\n<p>The post <a rel=\"nofollow\" href=\"https://pyimagesearch.com/2022/10/24/thermal-vision-fever-detector-with-python-and-opencv-starter-project/\">Thermal Vision: Fever Detector with Python and OpenCV (starter project)</a> appeared first on <a rel=\"nofollow\" href=\"https://pyimagesearch.com\">PyImageSearch</a>.</p>\n",
  "content:encoded": "\n<script src=\"https://fast.wistia.com/embed/medias/rba00qnphk.jsonp\" async=\"\"></script><script src=\"https://fast.wistia.com/assets/external/E-v1.js\" async=\"\"></script><div class=\"wistia_responsive_padding\" style=\"padding:56.25% 0 0 0;position:relative;\"><div class=\"wistia_responsive_wrapper\" style=\"height:100%;left:0;position:absolute;top:0;width:100%;\"><div class=\"wistia_embed wistia_async_rba00qnphk videoFoam=true\" style=\"height:100%;position:relative;width:100%\"><div class=\"wistia_swatch\" style=\"height:100%;left:0;opacity:0;overflow:hidden;position:absolute;top:0;transition:opacity 200ms;width:100%;\"><img src=\"https://fast.wistia.com/embed/medias/rba00qnphk/swatch\" style=\"filter:blur(5px);height:100%;object-fit:contain;width:100%;\" alt=\"\" aria-hidden=\"true\" onload=\"this.parentNode.style.opacity=1;\"></div></div></div></div>\n\n\n\n<hr class=\"wp-block-separator has-alpha-channel-opacity\" id=\"TOC\"/>\n\n\n\n<h2><strong>Table of Contents</strong></h2>\n\n\n\n<div class=\"toc\">\n<ul>\n    <li><a rel=\"noopener\" target=\"_blank\" href=\"#h2BPTitle\">Thermal Vision: Fever Detector with Python and OpenCV (starter project)</a></li>\n        <ul>\n            <li><a rel=\"noopener\" target=\"_blank\" href=\"#h3Simple\">Simple Face Detection in Thermal Images</a></li>\n<ul>\n           <li><a rel=\"noopener\" target=\"_blank\" href=\"#h4Introduction\">Introduction</a></li>\n            <li><a rel=\"noopener\" target=\"_blank\" href=\"#h4Haar\">Thermal Face Detection with Haar Cascades</a></li>\n</ul>\n            <li><a rel=\"noopener\" target=\"_blank\" href=\"#h3Configuring\">Configuring Your Development Environment</a></li>\n            <li><a rel=\"noopener\" target=\"_blank\" href=\"#h3Problems\">Having Problems Configuring Your Development Environment?</a></li>\n            <li><a rel=\"noopener\" target=\"_blank\" href=\"#h3Structure\">Project Structure</a></li>        \n    <li><a rel=\"noopener\" target=\"_blank\" href=\"#h3FaceDetection\">Face Detection</a></li>\n\n                <ul>\n                    <li><a rel=\"noopener\" target=\"_blank\" href=\"#h4ThermalImage\">Face Detection in a Thermal Image</a></li>\n                   <li><a rel=\"noopener\" target=\"_blank\" href=\"#h4ThermalVideo\">Face Detection in a Thermal Video Sequence</a></li>          \n                </ul>\n            <li><a rel=\"noopener\" target=\"_blank\" href=\"#h3Detection\">Fever Detection</a></li>\n                <ul>\n                    <li><a rel=\"noopener\" target=\"_blank\" href=\"#h4Image\">Fever Detection in a Thermal Image</a></li>                \n            <li><a rel=\"noopener\" target=\"_blank\" href=\"#h4Video\">Fever Detection in a Thermal Video Sequence</a></li>\n         </ul>\n            <li><a rel=\"noopener\" target=\"_blank\" href=\"#h3Fever\">Real-Time Fever Detection on your Raspberry Pi in 2 Steps</a></li>\n        </ul>\n    <li><a rel=\"noopener\" target=\"_blank\" href=\"#h2Summary\">Summary</a></li>\n        <ul>\n            <li><a rel=\"noopener\" target=\"_blank\" href=\"#h3Citation\">Citation Information</a></li>\n        </ul>\n</ul>\n</div>\n\n\n\n<hr class=\"wp-block-separator has-alpha-channel-opacity\" id=\"h2BPTitle\"/>\n\n\n\n<h2><a href=\"#TOC\"><strong>Thermal Vision: Fever Detector with Python and OpenCV (starter project)</strong></a></h2>\n\n\n\n<p>In this lesson, you will apply the knowledge previously learned in the last two classes to a starter project, including:</p>\n\n\n\n<ul><li>Simple face detection in thermal images</li><li>Fever detection (approximate solution)</li><li>Real-time fever detection on your Raspberry Pi in 3 steps</li></ul>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-large\"><img width=\"1024\" height=\"575\" src=\"https://929687.smushcdn.com/2633864/wp-content/uploads/2022/10/thermal_vision_fever_detector_with_python_and_opencv-featured-v2-1024x575.png?lossy=1&strip=1&webp=1\" alt=\"\" class=\"wp-image-35625\" srcset=\"https://929687.smushcdn.com/2633864/wp-content/uploads/2022/10/thermal_vision_fever_detector_with_python_and_opencv-featured-v2.png?size=126x71&lossy=1&strip=1&webp=1 126w, https://929687.smushcdn.com/2633864/wp-content/uploads/2022/10/thermal_vision_fever_detector_with_python_and_opencv-featured-v2-300x169.png?lossy=1&strip=1&webp=1 300w, https://929687.smushcdn.com/2633864/wp-content/uploads/2022/10/thermal_vision_fever_detector_with_python_and_opencv-featured-v2.png?size=378x212&lossy=1&strip=1&webp=1 378w, https://929687.smushcdn.com/2633864/wp-content/uploads/2022/10/thermal_vision_fever_detector_with_python_and_opencv-featured-v2.png?size=504x283&lossy=1&strip=1&webp=1 504w, https://929687.smushcdn.com/2633864/wp-content/uploads/2022/10/thermal_vision_fever_detector_with_python_and_opencv-featured-v2.png?size=630x354&lossy=1&strip=1&webp=1 630w, https://929687.smushcdn.com/2633864/wp-content/uploads/2022/10/thermal_vision_fever_detector_with_python_and_opencv-featured-v2-768x431.png?lossy=1&strip=1&webp=1 768w, https://929687.smushcdn.com/2633864/wp-content/uploads/2022/10/thermal_vision_fever_detector_with_python_and_opencv-featured-v2-1024x575.png?lossy=1&strip=1&webp=1 1024w, https://929687.smushcdn.com/2633864/wp-content/uploads/2022/10/thermal_vision_fever_detector_with_python_and_opencv-featured-v2-1536x863.png?lossy=1&strip=1&webp=1 1536w, https://929687.smushcdn.com/2633864/wp-content/uploads/2022/10/thermal_vision_fever_detector_with_python_and_opencv-featured-v2-2048x1151.png?lossy=1&strip=1&webp=1 2048w\" sizes=\"(max-width: 630px) 100vw, 630px\" /></figure></div>\n\n\n<p>This tutorial is the 3rd in a 4-part series on <strong>Infrared Vision Basics</strong>:</p>\n\n\n\n<ol><li><a href=\"https://pyimg.co/oj6kb\" target=\"_blank\" rel=\"noreferrer noopener\"><em>Introduction to Infrared Vision: Near vs. Mid-Far Infrared Images</em></a></li><li><a href=\"https://pyimg.co/mns3e\" target=\"_blank\" rel=\"noreferrer noopener\"><em>Thermal Vision: Measuring your First Temperature from an Image with Python and OpenCV</em></a></li><li><strong><em><a href=\"http://pyimg.co/6nxs0\" target=\"_blank\" rel=\"noreferrer noopener\">Thermal Vision: Fever Detector with Python and OpenCV (starter project)</a> </em>(today’s tutorial)</strong></li><li><em>Thermal Vision: Night Object Detection with PyTorch and YOLOv5 (real project)</em> </li></ol>\n\n\n\n<p>By the end of this lesson, you’ll be able to detect human faces in real-time on a thermal image, video, or camera video stream by estimating their temperatures.</p>\n\n\n\n<p>We hope this tutorial inspires you to apply temperature measurement to images in your projects.</p>\n\n\n\n<hr class=\"wp-block-separator has-alpha-channel-opacity\" id=\"Disclaimer\"/>\n\n\n\n<p class=\"has-green-background-color has-background\"><strong><em>Disclaimer</em>:</strong> <em>This tutorial attempts to estimate human body temperature using thermal images. It doesn’t mean that COVID-19 or other diseases could be detected with the proposed methods. We encourage you to follow the U.S. Food and Drug Administration (FDA) </em><a href=\"https://www.fda.gov/regulatory-information/search-fda-guidance-documents/enforcement-policy-telethermographic-systems-during-coronavirus-disease-2019-covid-19-public-health\" target=\"_blank\" rel=\"noreferrer noopener\"></a><em><a href=\"https://www.fda.gov/regulatory-information/search-fda-guidance-documents/enforcement-policy-telethermographic-systems-during-coronavirus-disease-2019-covid-19-public-health\" target=\"_blank\" rel=\"noreferrer noopener\"><em><u>guidance</u></em></a></em> <em>that indicates the required standards to travel deeper into this topic.</em></p>\n\n\n\n<hr class=\"wp-block-separator has-alpha-channel-opacity\" id=\"h3Simple\"/>\n\n\n\n<h3><a href=\"#TOC\"><strong>Simple Face Detection in Thermal Images</strong></a></h3>\n\n\n\n<hr class=\"wp-block-separator has-alpha-channel-opacity\" id=\"h4Introduction\"/>\n\n\n\n<h4><a href=\"#TOC\"><strong>Introduction</strong></a></h4>\n\n\n\n<p>As you have probably noticed, due to the COVID pandemic, demand for thermal infrared cameras and thermal infrared thermometers for use in mass access control has experienced an enormous increase.</p>\n\n\n\n<p>We can find this kind of device, for example, in airports or other mass events, as <strong>Figure 1</strong> shows.</p>\n\n\n\n<figure class=\"wp-container-11 wp-block-gallery-10 wp-block-gallery aligncenter has-nested-images columns-1 is-cropped\">\n<figure class=\"wp-block-image size-full\"><a href=\"https://pyimagesearch.com/wp-content/uploads/2022/09/figure-1-a-manual-thermal-thermometer-control-in-an-airport-scaled.jpg\" target=\"_blank\" rel=\"noreferrer noopener\"><img width=\"1080\" height=\"608\" data-id=\"35171\"  src=\"https://929687.smushcdn.com/2633864/wp-content/uploads/2022/09/figure-1-a-manual-thermal-thermometer-control-in-an-airport-scaled.jpg?lossy=1&strip=1&webp=1\" alt=\"\" class=\"wp-image-35171\" srcset=\"https://929687.smushcdn.com/2633864/wp-content/uploads/2022/09/figure-1-a-manual-thermal-thermometer-control-in-an-airport-scaled.jpg?size=126x71&lossy=1&strip=1&webp=1 126w, https://929687.smushcdn.com/2633864/wp-content/uploads/2022/09/figure-1-a-manual-thermal-thermometer-control-in-an-airport-300x169.jpg?lossy=1&strip=1&webp=1 300w, https://929687.smushcdn.com/2633864/wp-content/uploads/2022/09/figure-1-a-manual-thermal-thermometer-control-in-an-airport-scaled.jpg?size=378x213&lossy=1&strip=1&webp=1 378w, https://929687.smushcdn.com/2633864/wp-content/uploads/2022/09/figure-1-a-manual-thermal-thermometer-control-in-an-airport-scaled.jpg?size=504x284&lossy=1&strip=1&webp=1 504w, https://929687.smushcdn.com/2633864/wp-content/uploads/2022/09/figure-1-a-manual-thermal-thermometer-control-in-an-airport-scaled.jpg?size=630x355&lossy=1&strip=1&webp=1 630w, https://929687.smushcdn.com/2633864/wp-content/uploads/2022/09/figure-1-a-manual-thermal-thermometer-control-in-an-airport-768x432.jpg?lossy=1&strip=1&webp=1 768w, https://929687.smushcdn.com/2633864/wp-content/uploads/2022/09/figure-1-a-manual-thermal-thermometer-control-in-an-airport-1024x576.jpg?lossy=1&strip=1&webp=1 1024w, https://929687.smushcdn.com/2633864/wp-content/uploads/2022/09/figure-1-a-manual-thermal-thermometer-control-in-an-airport-scaled.jpg?lossy=1&strip=1&webp=1 1080w, https://929687.smushcdn.com/2633864/wp-content/uploads/2022/09/figure-1-a-manual-thermal-thermometer-control-in-an-airport-1536x864.jpg?lossy=1&strip=1&webp=1 1536w\" sizes=\"(max-width: 630px) 100vw, 630px\" /></a></figure>\n\n\n\n<figure class=\"wp-block-image size-full\"><a href=\"https://pyimagesearch.com/wp-content/uploads/2022/09/figure-1-b-automatic-thermal-camera-control-in-anairport-scaled.jpg\" target=\"_blank\" rel=\"noreferrer noopener\"><img width=\"1080\" height=\"712\" data-id=\"35172\"  src=\"https://929687.smushcdn.com/2633864/wp-content/uploads/2022/09/figure-1-b-automatic-thermal-camera-control-in-anairport-scaled.jpg?lossy=1&strip=1&webp=1\" alt=\"\" class=\"wp-image-35172\" srcset=\"https://929687.smushcdn.com/2633864/wp-content/uploads/2022/09/figure-1-b-automatic-thermal-camera-control-in-anairport-scaled.jpg?size=126x83&lossy=1&strip=1&webp=1 126w, https://929687.smushcdn.com/2633864/wp-content/uploads/2022/09/figure-1-b-automatic-thermal-camera-control-in-anairport-300x198.jpg?lossy=1&strip=1&webp=1 300w, https://929687.smushcdn.com/2633864/wp-content/uploads/2022/09/figure-1-b-automatic-thermal-camera-control-in-anairport-scaled.jpg?size=378x249&lossy=1&strip=1&webp=1 378w, https://929687.smushcdn.com/2633864/wp-content/uploads/2022/09/figure-1-b-automatic-thermal-camera-control-in-anairport-scaled.jpg?size=504x332&lossy=1&strip=1&webp=1 504w, https://929687.smushcdn.com/2633864/wp-content/uploads/2022/09/figure-1-b-automatic-thermal-camera-control-in-anairport-scaled.jpg?size=630x415&lossy=1&strip=1&webp=1 630w, https://929687.smushcdn.com/2633864/wp-content/uploads/2022/09/figure-1-b-automatic-thermal-camera-control-in-anairport-768x506.jpg?lossy=1&strip=1&webp=1 768w, https://929687.smushcdn.com/2633864/wp-content/uploads/2022/09/figure-1-b-automatic-thermal-camera-control-in-anairport-1024x675.jpg?lossy=1&strip=1&webp=1 1024w, https://929687.smushcdn.com/2633864/wp-content/uploads/2022/09/figure-1-b-automatic-thermal-camera-control-in-anairport-scaled.jpg?lossy=1&strip=1&webp=1 1080w\" sizes=\"(max-width: 630px) 100vw, 630px\" /></a></figure>\n<figcaption class=\"blocks-gallery-caption\"><strong>Figure 1:</strong> <em>Top</em>: Manual thermal thermometer control in an airport (<a href=\"https://edition.cnn.com/2020/02/19/health/coronavirus-airport-temperature-checks/index.html\" target=\"_blank\" rel=\"noreferrer noopener\">source</a>). <em>Bottom</em>: Automatic thermal camera control in an airport (<a href=\"https://www.reviewjournal.com/business/casinos-gaming/thermal-cameras-latest-eyes-in-the-sky-at-las-vegas-casinos-2039614/\" target=\"_blank\" rel=\"noreferrer noopener\">source</a>).</figcaption></figure>\n\n\n\n<p>As we’ve already learned, thermal cameras allow us to contribute to this real-life issue by applying our knowledge as Computer Vision beginners/ practitioners/researchers/experts.</p>\n\n\n\n<p>Therefore, let’s start with facial detection in our thermal images!</p>\n\n\n\n<p>Computer Vision offers us many ways to detect a face in a standard color visible-light/RGB image: Haar Cascades, Histogram of Oriented Gradients (HOG) + Linear Support Vector Machines (SVM), Deep Learning methods, etc.</p>\n\n\n\n<p>There are tons of online tutorials, but<a href=\"https://pyimagesearch.com/2021/04/26/face-detection-tips-suggestions-and-best-practices/\" target=\"_blank\" rel=\"noreferrer noopener\"> here</a> and at<a href=\"https://pyimagesearch.com/pyuni/?utm_source=newsletter&utm_medium=email&utm_campaign=BP-2022-mm-dd\" target=\"_blank\" rel=\"noreferrer noopener\"> PyImageSearch University</a>, you can find the 4 most popular face detection methods explained in a straightforward manner.</p>\n\n\n\n<p>But what happened with a thermal image?</p>\n\n\n\n<p>We are going to try to answer this question quickly.</p>\n\n\n\n<p>Let’s simplify the issue by classifying the methods above into 2 groups:</p>\n\n\n\n<ul><li><strong>Traditional Machine Learning for face detection:</strong> Haar Cascades and Histogram of Oriented Gradients (HOG) + Linear Support Vector Machines (SVM).</li><li><strong>Deep Learning (Convolutional Neural Networks) methods for face detection:</strong> Max-Margin Object Detector (MMOD) and Single Shot Detector (SSD).</li></ul>\n\n\n\n<p>At first glance, we could consider using any of them.</p>\n\n\n\n<p>Nevertheless, looking at Face detection tips, suggestions, and best practices, we should verify if the libraries used, OpenCV and Dlib, implement algorithms trained over thermal images.</p>\n\n\n\n<p>Alternatively, we could train our own face detector model, which is clearly out of the scope of our Infrared Vision Basics course.</p>\n\n\n\n<p>In addition, we should consider that as a starter project of this tutorial, we want to integrate our solution into a Raspberry Pi. Therefore, we need a fast and small model.</p>\n\n\n\n<p>So, for these reasons and to simplify this tutorial, we will use the <strong>Haar Cascade</strong> method (<strong>Figure 2</strong>).</p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter is-resized\"><a href=\"https://lh4.googleusercontent.com/2u9xwe4UpLCrTrAVKgd7fmxzD9jDxp9PdeTUol7swH1N_bXaUtNVciyzy16b9hQPXhEyBCB89MeWq6nNBt6FHq3NSvSzp-dwmtZXl2cubav6jfe4juzj6OwjYZfdD9Gdx6ygQooNGFQP9BxKL7uhzST9xT1Vg9a_oSw1UKk0OWJTrS3fz838xaK4\" target=\"_blank\" rel=\"noreferrer noopener\"><img src=\"https://lh4.googleusercontent.com/2u9xwe4UpLCrTrAVKgd7fmxzD9jDxp9PdeTUol7swH1N_bXaUtNVciyzy16b9hQPXhEyBCB89MeWq6nNBt6FHq3NSvSzp-dwmtZXl2cubav6jfe4juzj6OwjYZfdD9Gdx6ygQooNGFQP9BxKL7uhzST9xT1Vg9a_oSw1UKk0OWJTrS3fz838xaK4\" alt=\"\" width=\"341\" height=\"325\"/></a><figcaption><strong>Figure 2:</strong> Visualization of the face detection process using the Haar Cascade algorithm (<a href=\"https://vimeo.com/12774628\" target=\"_blank\" rel=\"noreferrer noopener\">source</a>).</figcaption></figure></div>\n\n\n<hr class=\"wp-block-separator has-alpha-channel-opacity\" id=\"h4Haar\"/>\n\n\n\n<h4><a href=\"#TOC\"><strong>Thermal Face Detection with Haar Cascades</strong></a></h4>\n\n\n\n<p>Paul Viola and Michael Jones proposed this well-known object detector in <a href=\"https://www.cs.cmu.edu/~efros/courses/LBMV07/Papers/viola-cvpr-01.pdf\" target=\"_blank\" rel=\"noreferrer noopener\">Rapid Object Detection using a Boosted Cascade of Simple Features</a> in 2001.</p>\n\n\n\n<p>Yes, 2001, “a few” years ago.</p>\n\n\n\n<p>And yes! We have tested it over thermal images, and it works without any training on our part!</p>\n\n\n\n<hr class=\"wp-block-separator has-alpha-channel-opacity\" id=\"h3Configuring\"/>\n\n\n\n<h3><a href=\"#TOC\"><strong>Configuring Your Development Environment</strong></a></h3>\n\n\n\n<p>To follow this guide, you need to have the OpenCV library installed on your system.</p>\n\n\n\n<p>Luckily, OpenCV is pip-installable:</p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"shell\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"true\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"Thermal Vision: Fever Detector with Python and OpenCV (starter project)\" data-enlighter-group=\"101\">$ pip install opencv-contrib-python</pre>\n\n\n\n<p><strong>If you need help configuring your development environment for OpenCV, we <em>highly recommend</em> that you read our </strong><a href=\"https://pyimagesearch.com/2018/09/19/pip-install-opencv/\" target=\"_blank\" rel=\"noreferrer noopener\"><strong><em>pip install OpenCV</em> guide</strong></a> — it will have you up and running in a matter of minutes.</p>\n\n\n\n<hr class=\"wp-block-separator has-alpha-channel-opacity\" id=\"h3Problems\"/>\n\n\n\n<h3><a href=\"#TOC\"><strong>Having Problems Configuring Your Development Environment?</strong></a></h3>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-full is-resized\"><a href=\"https://pyimagesearch.com/pyimagesearch-university/\" target=\"_blank\" rel=\"noreferrer noopener\"><img src=\"https://929687.smushcdn.com/2633864/wp-content/uploads/2021/05/pyimagesearch_plus_jupyter.png?lossy=1&strip=1&webp=1\" alt=\"\" class=\"wp-image-19836\" width=\"500\" height=\"334\" srcset=\"https://929687.smushcdn.com/2633864/wp-content/uploads/2021/05/pyimagesearch_plus_jupyter.png?size=126x84&lossy=1&strip=1&webp=1 126w, https://929687.smushcdn.com/2633864/wp-content/uploads/2021/05/pyimagesearch_plus_jupyter-300x200.png?lossy=1&strip=1&webp=1 300w, https://929687.smushcdn.com/2633864/wp-content/uploads/2021/05/pyimagesearch_plus_jupyter.png?size=378x253&lossy=1&strip=1&webp=1 378w, https://929687.smushcdn.com/2633864/wp-content/uploads/2021/05/pyimagesearch_plus_jupyter.png?lossy=1&strip=1&webp=1 500w\" sizes=\"(max-width: 500px) 100vw, 500px\" /></a><figcaption>Having trouble configuring your dev environment? Want access to pre-configured Jupyter Notebooks running on Google Colab? Be sure to join <a href=\"https://pyimagesearch.com/pyimagesearch-university/\" target=\"_blank\" rel=\"noreferrer noopener\">PyImageSearch University</a> — you’ll be up and running with this tutorial in a matter of minutes.</figcaption></figure></div>\n\n\n<p>All that said, are you:</p>\n\n\n\n<ul><li>Short on time?</li><li>Learning on your employer’s administratively locked system?</li><li>Wanting to skip the hassle of fighting with the command line, package managers, and virtual environments?</li><li><strong>Ready to run the code </strong><strong><em>right now</em></strong><strong> on your Windows, macOS, or Linux system?</strong></li></ul>\n\n\n\n<p>Then join <a href=\"https://pyimagesearch.com/pyimagesearch-university/\" target=\"_blank\" rel=\"noreferrer noopener\">PyImageSearch University</a> today!</p>\n\n\n\n<p><strong>Gain access to Jupyter Notebooks for this tutorial and other PyImageSearch guides that are </strong><strong><em>pre-configured</em></strong><strong> to run on Google Colab’s ecosystem right in your web browser!</strong> No installation required.</p>\n\n\n\n<p>And best of all, these Jupyter Notebooks will run on Windows, macOS, and Linux!</p>\n\n\n\n<hr class=\"wp-block-separator has-alpha-channel-opacity\" id=\"h3Structure\"/>\n\n\n\n<h3><a href=\"#TOC\"><strong>Project Structure</strong></a></h3>\n\n\n\n<p>Start by accessing this tutorial’s <strong><em>“Downloads”</em></strong> section to retrieve the source code and example images.</p>\n\n\n\n<p>Let’s start coding.</p>\n\n\n\n<p>First, take a look at our project structure:</p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"shell\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"true\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"Thermal Vision: Fever Detector with Python and OpenCV (starter project)\" data-enlighter-group=\"1\">$ tree --dirsfirst\n.\n├── fever_detector_image.py\n├── fever_detector_video.py\n├── fever_detector_camera.py\n├── faces_gray16_image.tiff\n├── haarcascade_frontalface_alt2.xml\n└── gray16_sequence\n    ├── gray16_frame_000.tiff\n    ├── gray16_frame_001.tiff\n    ├── gray16_frame_002.tiff\n    ├── ...\n    └── gray16_frame_069.tiff\n\n\n1 directory, 76 files</pre>\n\n\n\n<p>We’ll apply the Haar Cascade algorithm to a face in a thermal image, then in a thermal video sequence, and finally, using a USB Video Class (UVC) thermal camera. These parts are implemented, respectively, in:</p>\n\n\n\n<ol><li><code class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">fever_detector_image.py</code>: Applies the Haar Cascade face detection algorithm to an input image (<code class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">faces_gray16_image.tiff</code>).</li><li><code class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">fever_detector_video.py</code>: The Haar Cascade face detection algorithm is applied to input video frames (<code class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">gray16_sequence</code> folder).</li><li><code class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">fever_detector_camera.py</code>: Applies the Haar Cascade face detection to the video input stream of a UVC thermal camera.</li></ol>\n\n\n\n<p>We are going to follow this structure during the entire class.</p>\n\n\n\n<p>The <code class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">faces_gray16_image.tiff</code> is our raw gray16 thermal image shown in <strong>Figure 3</strong>, <em>right</em>, and extracted from the thermal camera<a href=\"https://www.rgmvision.com/\" target=\"_blank\" rel=\"noreferrer noopener\"> <strong>RGMVision ThermalCAM 1</strong></a>.</p>\n\n\n\n<p>The <code class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">gray16_sequence</code> folder contains a sample video sequence.</p>\n\n\n\n<p>The <code data-enlighter-language=\"python\" class=\"EnlighterJSRAW\">haarcascade_frontalface_alt2.xml</code> file is our pre-trained face detector, provided by the developers and maintainers of the OpenCV library (<a href=\"https://github.com/opencv/opencv/tree/master/data/haarcascades\" target=\"_blank\" rel=\"noreferrer noopener\">GitHub</a>).</p>\n\n\n\n<hr class=\"wp-block-separator has-alpha-channel-opacity\" id=\"h3FaceDetection\"/>\n\n\n\n<h2><a href=\"#TOC\"><strong>Face Detection</strong></a></h2>\n\n\n\n<hr class=\"wp-block-separator has-alpha-channel-opacity\" id=\"h4ThermalImage\"/>\n\n\n\n<h4><a href=\"#TOC\"><strong>Face Detection in a Thermal Image</strong></a></h4>\n\n\n\n<p>Open your <code class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">fever_detector_image.py</code> file and import the NumPy and OpenCV libraries:</p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"true\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"Thermal Vision: Fever Detector with Python and OpenCV (starter project)\" data-enlighter-group=\"2\"># import the necessary packages\nimport cv2\nimport numpy as np</pre>\n\n\n\n<p>You should have installed the NumPy and OpenCV libraries.</p>\n\n\n\n<p>First, we are going to start opening the thermal gray16 image, <code class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">faces_gray16_image.tiff</code>:</p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"true\" data-enlighter-lineoffset=\"5\" data-enlighter-title=\"Thermal Vision: Fever Detector with Python and OpenCV (starter project)\" data-enlighter-group=\"3\"># open the gray16 image\ngray16_image = cv2.imread(\"faces_gray16_image.tiff\", cv2.IMREAD_ANYDEPTH)</pre>\n\n\n\n<p>The <code class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">cv2.IMREAD_ANYDEPTH</code> flag allows us to open the gray16 image in 16-bit format.</p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"true\" data-enlighter-lineoffset=\"8\" data-enlighter-title=\"Thermal Vision: Fever Detector with Python and OpenCV (starter project)\" data-enlighter-group=\"4\"># convert the gray16 image into a gray8\ngray8_image = np.zeros((120,160), dtype=np.uint8)\ngray8_image = cv2.normalize(gray16_image, gray8_image, 0, 255, cv2.NORM_MINMAX)\ngray8_image = np.uint8(gray8_image)</pre>\n\n\n\n<p>On <strong>Lines 9-11</strong>, respectively, we create an empty <code class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">160x120</code> image, we normalize the gray16 image from 0-65,553 (16 bits) to 0-255 (8 bits), and we ensure that the final image is an 8-bit image.</p>\n\n\n\n<p>We use the <code class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">160x120</code> resolution because the <code class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">faces_gray16_image.tiff</code> gray16 image has this size.</p>\n\n\n\n<p>Then we color the gray8 image using our favorite OpenCV colormap* to get the different thermal color palettes (<strong>Figure 3</strong>, middle):</p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"true\" data-enlighter-lineoffset=\"13\" data-enlighter-title=\"Thermal Vision: Fever Detector with Python and OpenCV (starter project)\" data-enlighter-group=\"5\"># color the gray8 image using OpenCV colormaps\ngray8_image = cv2.applyColorMap(gray8_image, cv2.COLORMAP_INFERNO)</pre>\n\n\n\n<p>(*) Please, visit<a href=\"https://docs.opencv.org/4.5.4/d3/d50/group__imgproc__colormap.html\" target=\"_blank\" rel=\"noreferrer noopener\"> ColorMaps in OpenCV</a> to ensure that your selected colormap is available on your OpenCV version. In this case, we are using OpenCV 4.5.4.</p>\n\n\n\n<p>Finally, we implement our Haar Cascade algorithm.</p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"true\" data-enlighter-lineoffset=\"16\" data-enlighter-title=\"Thermal Vision: Fever Detector with Python and OpenCV (starter project)\" data-enlighter-group=\"6\"># load the haar cascade face detector\nhaar_cascade_face = cv2.CascadeClassifier('haarcascade_frontalface_alt2.xml')</pre>\n\n\n\n<p>On <strong>Line 17</strong>, the XML <code class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">haarcascade_frontalface_alt2.xml</code> file with our pre-trained face detector, provided by the developers and maintainers of the OpenCV library (GitHub), is loaded.</p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"true\" data-enlighter-lineoffset=\"19\" data-enlighter-title=\"Thermal Vision: Fever Detector with Python and OpenCV (starter project)\" data-enlighter-group=\"7\"># detect faces in the input image using the haar cascade face detector\nfaces = haar_cascade_face.detectMultiScale(gray8_image, scaleFactor=1.1, minNeighbors=5, minSize=(10, 10), flags=cv2.CASCADE_SCALE_IMAGE)</pre>\n\n\n\n<p>On <strong>Line 20</strong>, the Haar Cascade detector is applied.</p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"true\" data-enlighter-lineoffset=\"22\" data-enlighter-title=\"Thermal Vision: Fever Detector with Python and OpenCV (starter project)\" data-enlighter-group=\"8\"># loop over the bounding boxes\nfor (x, y, w, h) in faces:\n# draw the rectangles\ncv2.rectangle(gray8_image, (x, y), (x + w, y + h), (255, 255, 255), 1)</pre>\n\n\n\n<p>On <strong>Lines 23-25</strong>, we loop over our detected faces and draw the corresponding rectangle.</p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"true\" data-enlighter-lineoffset=\"27\" data-enlighter-title=\"Thermal Vision: Fever Detector with Python and OpenCV (starter project)\" data-enlighter-group=\"9\"># show result\ncv2.imshow(\"gray8-face-detected\", gray8_image)\ncv2.waitKey(0)</pre>\n\n\n\n<p>Finally, we show the results (<strong>Lines 28 and 29</strong>).</p>\n\n\n\n<p>That’s right! We are detecting faces on thermal infrared images (<strong>Figure 3</strong>, <em>right</em>).</p>\n\n\n\n<figure class=\"wp-container-13 wp-block-gallery-12 wp-block-gallery aligncenter has-nested-images columns-default is-cropped\">\n<figure class=\"wp-block-image\"><a href=\"https://lh3.googleusercontent.com/_Xnk2VstxAkppUv8Lf3JzWPv4jo7UQasw1dQk9BvApJcRN_orfSWCaWAI_qhhUuGCtuBZ78HPzufX-nOBOn2FqQDx7-vb6l2qBwjiHcqM7GCQ6__fHygzTQ-K-IwH8WtSnMDfFcSSQEZxXwxcyPDNEkPpOpxCBRTcyxP2YWCxw6WzGbVkzQi6nTP\" target=\"_blank\" rel=\"noreferrer noopener\"><img src=\"https://lh3.googleusercontent.com/_Xnk2VstxAkppUv8Lf3JzWPv4jo7UQasw1dQk9BvApJcRN_orfSWCaWAI_qhhUuGCtuBZ78HPzufX-nOBOn2FqQDx7-vb6l2qBwjiHcqM7GCQ6__fHygzTQ-K-IwH8WtSnMDfFcSSQEZxXwxcyPDNEkPpOpxCBRTcyxP2YWCxw6WzGbVkzQi6nTP\" alt=\"\"/></a></figure>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://lh6.googleusercontent.com/wYDxpxH2hSm8qk3q1qKxS0OLfkKznIao9OPlTX8Clq05-L-INO8BILfMiUYPM1yecpnNtGCJwGkJaeCH5t1oDactqKKLhD3OJkoJSEuxp-AhwiibBfPiSZN1PRlc7NelkRi73tOL2wbGc7me6a_brBKx5Cun9oiB8CS2ADi3rDMgOr36cBtqMQF3\" target=\"_blank\" rel=\"noreferrer noopener\"><img src=\"https://lh6.googleusercontent.com/wYDxpxH2hSm8qk3q1qKxS0OLfkKznIao9OPlTX8Clq05-L-INO8BILfMiUYPM1yecpnNtGCJwGkJaeCH5t1oDactqKKLhD3OJkoJSEuxp-AhwiibBfPiSZN1PRlc7NelkRi73tOL2wbGc7me6a_brBKx5Cun9oiB8CS2ADi3rDMgOr36cBtqMQF3\" alt=\"\"/></a></figure>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://lh4.googleusercontent.com/fTrCjx-H3VqEsaHJ0QfY2dt6Ns5rkPaqKY-B1BvC3Iif_U07gMpqS3tDbtyC_gt48azhcgZ3TxsvDccYomxtiAZ-gXDO-GX8CWo0jGmDFE2lw67gomFJIiDt_nD2QkxGj8PqIqfI-Jse5tdeUrunGdoErUZhwmeDMY84XrvWv4KTiYfjkA6RTkux\" target=\"_blank\" rel=\"noreferrer noopener\"><img src=\"https://lh4.googleusercontent.com/fTrCjx-H3VqEsaHJ0QfY2dt6Ns5rkPaqKY-B1BvC3Iif_U07gMpqS3tDbtyC_gt48azhcgZ3TxsvDccYomxtiAZ-gXDO-GX8CWo0jGmDFE2lw67gomFJIiDt_nD2QkxGj8PqIqfI-Jse5tdeUrunGdoErUZhwmeDMY84XrvWv4KTiYfjkA6RTkux\" alt=\"\"/></a></figure>\n<figcaption class=\"blocks-gallery-caption\"><strong>Figure 3:</strong> <em>Left</em>: Thermal gray16 image showing a face, <code data-enlighter-language=\"shell\" class=\"EnlighterJSRAW\">faces_gray16_image.tiff</code>. <em>Middle</em>: Thermal gray8 image after converting the gray16  <code data-enlighter-language=\"shell\" class=\"EnlighterJSRAW\">faces_gray16_image.tiff</code> and coloring it with the Inferno OpenCV colormap. <em>Right</em>: Haar Cascade face detector applied on the thermal gray8 image.</figcaption></figure>\n\n\n\n<hr class=\"wp-block-separator has-alpha-channel-opacity\" id=\"h4ThermalVideo\"/>\n\n\n\n<h4><a href=\"#TOC\"><strong>Face Detection in a Thermal Video Sequence</strong></a></h4>\n\n\n\n<p>Assuming we don’t have a thermal camera on hand and want to detect faces on thermal video streams, we follow the same previous steps.</p>\n\n\n\n<p>To simplify, we will use the video sequence stored in our <code class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">gray16_sequence</code>. This folder contains TIFF frames instead of a gray16 video file because standard compressed video files tend to lose information. The gray16 frames maintain the temperature value of each pixel that we use then to estimate face temperatures.</p>\n\n\n\n<p>After importing the necessary libraries, we use the <code class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">fever_detector_video.py</code> file to  follow  the same processes that we saw in the previous section, looping over each frame:</p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"true\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"Thermal Vision: Fever Detector with Python and OpenCV (starter project)\" data-enlighter-group=\"10\"># import the necessary packages\nimport numpy as np\nimport cv2\nimport os\nimport argparse</pre>\n\n\n\n<p>In this case, we also import the argparse and the os libraries.</p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"true\" data-enlighter-lineoffset=\"7\" data-enlighter-title=\"Thermal Vision: Fever Detector with Python and OpenCV (starter project)\" data-enlighter-group=\"11\"># construct the argument parse and parse the arguments\nap = argparse.ArgumentParser()\nap.add_argument(\"-v\", \"--video\", required=True, help=\"path of the video sequence\")\nargs = vars(ap.parse_args())</pre>\n\n\n\n<p>If you are familiar with the PyImageSearch tutorials, you already know the argparse Python library. We use it to give additional information (e.g., command line arguments) to a program at runtime. In this case, we’ll use it to specify our thermal video path (<strong>Lines 8-10</strong>).</p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"true\" data-enlighter-lineoffset=\"12\" data-enlighter-title=\"Thermal Vision: Fever Detector with Python and OpenCV (starter project)\" data-enlighter-group=\"12\"># load the haar cascade face detector\nhaar_cascade_face = cv2.CascadeClassifier(\"haarcascade_frontalface_alt2.xml\")\n\n# create thermal video fps variable (8 fps in this case)\nfps = 8</pre>\n\n\n\n<p>Let’s load the pre-trained Haar Cascade face detector and define the sequence Frames Per Second value (<strong>Lines 13-16</strong>):</p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"true\" data-enlighter-lineoffset=\"18\" data-enlighter-title=\"Thermal Vision: Fever Detector with Python and OpenCV (starter project)\" data-enlighter-group=\"122\"># loop over the thermal video frames to detect faces\nfor image in sorted(os.listdir(args[\"video\"])):\n\n    # filter .tiff files (gray16 images)\n    if image.endswith(\".tiff\"):\n\n        # define the gray16 frame path\n        file_path = os.path.join(args[\"video\"], image)\n\n        # open the gray16 frame\n        gray16_image = cv2.imread(args[\"video\"], cv2.IMREAD_ANYDEPTH)\n\n        # convert the gray16 image into a gray8\n        gray8_frame = np.zeros((120, 160), dtype=np.uint8)\n        gray8_frame = cv2.normalize(gray16_frame, gray8_frame, 0, 255, cv2.NORM_MINMAX)\n        gray8_frame = np.uint8(gray8_frame)\n\n        # color the gray8 image using OpenCV colormaps\n        gray8_frame = cv2.applyColorMap(gray8_frame, cv2.COLORMAP_INFERNO)\n\n        # detect faces in the input image using the haar cascade face detector\n        faces = haar_cascade_face.detectMultiScale(gray8_frame, scaleFactor=1.1, minNeighbors=5, minSize=(10, 10),\n                                                   flags=cv2.CASCADE_SCALE_IMAGE)\n        # loop over the bounding boxes\n        for (x, y, w, h) in faces:\n            # draw the rectangles\n            cv2.rectangle(gray8_frame, (x, y), (x + w, y + h), (255, 255, 255), 1)\n\n        # show results\n        cv2.imshow(\"gray8-face-detected\", gray8_frame)\n\n        # wait 125 ms: RGMVision ThermalCAM1 frames per second = 8\n        cv2.waitKey(int((1 / fps) * 1000))</pre>\n\n\n\n<p><strong>Lines 19-50</strong> include the loop process that detects faces for each frame.</p>\n\n\n\n<p><strong>Figure 4</strong> shows face detection in the video scene.</p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter is-resized\"><a href=\"https://lh5.googleusercontent.com/SxjXbtX5G9abTaoHps-8p1WWFnCeAH1KUDFHSIKrhL7ESo3Ge2caSqq3a60GpwmQ0eZI0NzuJ_ks3crsCTOvYDWiPdXBr3L8rB8aWGoe1UZ-yewz3vs-LgIfQfaraWGF1ex4s51nJ_pMbiXCSsaIWUsKSRGjE6mc8NaUxPaaacRd-VgVF3ZQVOHO\" target=\"_blank\" rel=\"noreferrer noopener\"><img src=\"https://lh5.googleusercontent.com/SxjXbtX5G9abTaoHps-8p1WWFnCeAH1KUDFHSIKrhL7ESo3Ge2caSqq3a60GpwmQ0eZI0NzuJ_ks3crsCTOvYDWiPdXBr3L8rB8aWGoe1UZ-yewz3vs-LgIfQfaraWGF1ex4s51nJ_pMbiXCSsaIWUsKSRGjE6mc8NaUxPaaacRd-VgVF3ZQVOHO\" alt=\"\" width=\"333\" height=\"250\"/></a><figcaption><strong>Figure 4:</strong> Haar Cascade face detector applied on the thermal gray8 video sequence.</figcaption></figure></div>\n\n\n<hr class=\"wp-block-separator has-alpha-channel-opacity\" id=\"h3Detection\"/>\n\n\n\n<h3><a href=\"#TOC\"><strong>Fever Detection</strong></a></h3>\n\n\n\n<hr class=\"wp-block-separator has-alpha-channel-opacity\" id=\"h4Image\"/>\n\n\n\n<h4><a href=\"#TOC\"><strong>Fever Detection in a Thermal Image</strong></a></h4>\n\n\n\n<p>Once we have learned how to easily detect faces in our thermal image, we need to measure the temperature of each pixel to decide if a person has a normal value.</p>\n\n\n\n<p>So, we divide this process into 2 steps:</p>\n\n\n\n<ol><li>Measure the temperature value of our Region of Interest (ROI), that is, a specific area of the detected faces.</li><li>Set a threshold for our ROI temperature value to establish when we detect a fevered person (or a person with a temperature higher than usual).</li></ol>\n\n\n\n<p>Let’s continue coding!  First, we open our <code data-enlighter-language=\"python\" class=\"EnlighterJSRAW\">fever_detector_image.py</code> file.</p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"true\" data-enlighter-lineoffset=\"35\" data-enlighter-title=\"Thermal Vision: Fever Detector with Python and OpenCV (starter project)\" data-enlighter-group=\"13\"># loop over the bounding boxes to measure their temperature\nfor (x, y, w, h) in faces:\n    \n    # draw the rectangles\n    cv2.rectangle(gray8_image, (x, y), (x + w, y + h), (255, 255, 255), 1)\n\n    # define the roi with a circle at the haar cascade origin coordinate\n\n    # haar cascade center for the circle\n    haar_cascade_circle_origin = x + w // 2, y + h // 2\n    # circle radius\n    radius = w // 4\n\n    # get the 8 most significant bits of the gray16 image\n    # (we follow this process because we can't extract a circle\n    # roi in a gray16 image directly)\n    gray16_high_byte = (np.right_shift(gray16_image, 8)).astype('uint8')\n\n    # get the 8 less significant bits of the gray16 image\n    # (we follow this process because we can't extract a circle\n    # roi in a gray16 image directly)\n    gray16_low_byte = (np.left_shift(gray16_image, 8) / 256).astype('uint16')\n\n    # apply the mask to our 8 most significant bits\n    mask = np.zeros_like(gray16_high_byte)\n    cv2.circle(mask, haar_cascade_circle_origin, radius, (255, 255, 255), -1)\n    gray16_high_byte = np.bitwise_and(gray16_high_byte, mask)\n\n    # apply the mask to our 8 less significant bits\n    mask = np.zeros_like(gray16_low_byte)\n    cv2.circle(mask, haar_cascade_circle_origin, radius, (255, 255, 255), -1)\n    gray16_low_byte = np.bitwise_and(gray16_low_byte, mask)\n\n    # create/recompose our gray16 roi\n    gray16_roi = np.array(gray16_high_byte, dtype=np.uint16)\n    gray16_roi = gray16_roi * 256\n    gray16_roi = gray16_roi | gray16_low_byte\n\n    # estimate the face temperature by obtaining the higher value\n    higher_temperature = np.amax(gray16_roi)\n\n    # calculate the temperature\n    higher_temperature = (higher_temperature / 100) - 273.15\n    # higher_temperature = (higher_temperature / 100) * 9 / 5 - 459.67\n\n    # write temperature value in gray8\n    if higher_temperature < fever_temperature_threshold:\n\n        # white text: normal temperature\n        cv2.putText(gray8_image, \"{0:.1f} Celsius\".format(higher_temperature), (x - 10, y - 10), cv2.FONT_HERSHEY_PLAIN,\n                    1, (255, 255, 255), 1)\n    else:\n        # - red text + red circle: fever temperature\n        cv2.putText(gray8_image, \"{0:.1f} Celsius\".format(higher_temperature), (x - 10, y - 10), cv2.FONT_HERSHEY_PLAIN,\n                    1, (0, 0, 255), 2)\n        cv2.circle(gray8_image, haar_cascade_circle_origin, radius, (0, 0, 255), 2)</pre>\n\n\n\n<p>Again, we loop over the detected faces on <strong>Lines 36-90</strong>. This time we’ll define our ROI.</p>\n\n\n\n<p>The current ISO standards establish that the inner eye canthus is the best place to determine the body temperature using a thermal face image.</p>\n\n\n\n<p>For this reason and to simplify the process, we will define an ROI with a circle shape around the center point of our Haar Cascade face detection.</p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"true\" data-enlighter-lineoffset=\"38\" data-enlighter-title=\"Thermal Vision: Fever Detector with Python and OpenCV (starter project)\" data-enlighter-group=\"14\"># draw the rectangles\ncv2.rectangle(gray8_image, (x, y), (x + w, y + h), (255, 255, 255), 1)</pre>\n\n\n\n<p>For this purpose, first, we draw a Haar Cascade rectangle again for each detected face (<strong>Line 39</strong>).</p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"true\" data-enlighter-lineoffset=\"41\" data-enlighter-title=\"Thermal Vision: Fever Detector with Python and OpenCV (starter project)\" data-enlighter-group=\"15\"># define the roi with a circle at the haar cascade origin coordinate\n\n# haar cascade center for the circle\nhaar_cascade_circle_origin = x + w // 2, y + h // 2    \n# circle radius\nradius = w // 4</pre>\n\n\n\n<p>Then, we define our ROI circle by establishing the center of the face, that is, the center of the circle (<strong>Line 44</strong>) and the circle’s radius (<strong>Line 46</strong>).</p>\n\n\n\n<p>As OpenCV doesn’t allow us to draw a circle in a 16-bit image and we need the gray16 information to measure the temperature, we will use the following trick.</p>\n\n\n\n<p>First, we split each pixel value of our 16-bit thermal image into 2 groups of 8 bits (2 bytes), as <strong>Figure 5</strong> shows.</p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-full is-resized\"><a href=\"https://pyimagesearch.com/wp-content/uploads/2022/10/figure-5-split-operation-16-bit-circle-scaled.jpg\" target=\"_blank\" rel=\"noreferrer noopener\"><img src=\"https://929687.smushcdn.com/2633864/wp-content/uploads/2022/10/figure-5-split-operation-16-bit-circle-scaled.jpg?lossy=1&strip=1&webp=1\" alt=\"\" class=\"wp-image-35210\" width=\"700\" height=\"204\" srcset=\"https://929687.smushcdn.com/2633864/wp-content/uploads/2022/10/figure-5-split-operation-16-bit-circle-scaled.jpg?size=126x37&lossy=1&strip=1&webp=1 126w, https://929687.smushcdn.com/2633864/wp-content/uploads/2022/10/figure-5-split-operation-16-bit-circle-300x87.jpg?lossy=1&strip=1&webp=1 300w, https://929687.smushcdn.com/2633864/wp-content/uploads/2022/10/figure-5-split-operation-16-bit-circle-scaled.jpg?size=378x110&lossy=1&strip=1&webp=1 378w, https://929687.smushcdn.com/2633864/wp-content/uploads/2022/10/figure-5-split-operation-16-bit-circle-scaled.jpg?size=504x147&lossy=1&strip=1&webp=1 504w, https://929687.smushcdn.com/2633864/wp-content/uploads/2022/10/figure-5-split-operation-16-bit-circle-scaled.jpg?size=630x184&lossy=1&strip=1&webp=1 630w, https://929687.smushcdn.com/2633864/wp-content/uploads/2022/10/figure-5-split-operation-16-bit-circle-768x223.jpg?lossy=1&strip=1&webp=1 768w, https://929687.smushcdn.com/2633864/wp-content/uploads/2022/10/figure-5-split-operation-16-bit-circle-1024x298.jpg?lossy=1&strip=1&webp=1 1024w, https://929687.smushcdn.com/2633864/wp-content/uploads/2022/10/figure-5-split-operation-16-bit-circle-scaled.jpg?lossy=1&strip=1&webp=1 1080w, https://929687.smushcdn.com/2633864/wp-content/uploads/2022/10/figure-5-split-operation-16-bit-circle-1536x447.jpg?lossy=1&strip=1&webp=1 1536w, https://929687.smushcdn.com/2633864/wp-content/uploads/2022/10/figure-5-split-operation-16-bit-circle-2048x596.jpg?lossy=1&strip=1&webp=1 2048w\" sizes=\"(max-width: 630px) 100vw, 630px\" /></a><figcaption><strong>Figure 5:</strong> We split each pixel value of our thermal gray16 image into 2 bytes (8 Most Significant Bits and 8 Less Significant Bits). We follow this process because we can’t extract a circle ROI in a gray16 image directly.</figcaption></figure></div>\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"true\" data-enlighter-lineoffset=\"48\" data-enlighter-title=\"Thermal Vision: Fever Detector with Python and OpenCV (starter project)\" data-enlighter-group=\"16\"># get the 8 most significant bits of the gray16 image\n# (we follow this process because we can't extract a circle\n# roi in a gray16 image directly)\ngray16_high_byte = (np.right_shift(gray16_image, 8)).astype('uint8')</pre>\n\n\n\n<p>We right shift the 16 bits on <strong>Line 51</strong>, losing the 8 Less Significant Bits and removing the new Most Significant Bits (8 zeros) by converting the image into a gray8.</p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"true\" data-enlighter-lineoffset=\"53\" data-enlighter-title=\"Thermal Vision: Fever Detector with Python and OpenCV (starter project)\" data-enlighter-group=\"17\"># get the 8 less significant bits of the gray16 image\n# (we follow this process because we can't extract a circle\n# roi in a gray16 image directly)\ngray16_low_byte = (np.left_shift(gray16_image, 8) / 256).astype('uint16')</pre>\n\n\n\n<p>We left shift the 16 bits on <strong>Line 56</strong>, losing the 8 Most Significant Bits (MSBs) and translating the new 8 MSBs by dividing the values by 256.</p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"true\" data-enlighter-lineoffset=\"58\" data-enlighter-title=\"Thermal Vision: Fever Detector with Python and OpenCV (starter project)\" data-enlighter-group=\"18\"># apply the mask to our 8 most significant bits\nmask = np.zeros_like(gray16_high_byte)\ncv2.circle(mask, haar_cascade_circle_origin, radius, (255, 255, 255), -1)\ngray16_high_byte = np.bitwise_and(gray16_high_byte, mask)\n\n# apply the mask to our 8 less significant bits\nmask = np.zeros_like(gray16_low_byte)\ncv2.circle(mask, haar_cascade_circle_origin, radius, (255, 255, 255), -1)\ngray16_low_byte = np.bitwise_and(gray16_low_byte, mask)</pre>\n\n\n\n<p>Then, we separately apply the mask and the bitwise operation to our 2 split bytes to isolate our ROI that contains the temperature information (<strong>Lines 59-66</strong>).</p>\n\n\n\n<p>If you are not familiar with these operations, we encourage you to follow the<a href=\"https://pyimagesearch.com/2021/01/19/opencv-bitwise-and-or-xor-and-not/\" target=\"_blank\" rel=\"noreferrer noopener\"> OpenCV Bitwise AND, OR, XOR, and NOT</a>. </p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"true\" data-enlighter-lineoffset=\"68\" data-enlighter-title=\"Thermal Vision: Fever Detector with Python and OpenCV (starter project)\" data-enlighter-group=\"19\"># create/recompose our gray16 roi\ngray16_roi = np.array(gray16_high_byte, dtype=np.uint16)\ngray16_roi = gray16_roi * 256\ngray16_roi = gray16_roi | gray16_low_byte</pre>\n\n\n\n<p>On <strong>Lines 69-71</strong>, we recompose the image obtaining our 16-bit circle ROI with the temperature value of the inner eye canthus area.</p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"true\" data-enlighter-lineoffset=\"73\" data-enlighter-title=\"Thermal Vision: Fever Detector with Python and OpenCV (starter project)\" data-enlighter-group=\"20\"># estimate the face temperature by obtaining the higher value\nhigher_temperature = np.amax(gray16_roi)\n\n# calculate the temperature\nhigher_temperature = (higher_temperature / 100) - 273.15\n#higher_temperature = (higher_temperature / 100) * 9 / 5 - 459.67</pre>\n\n\n\n<p>Finally, to easily determine if the detected face has a temperature above the normal range, i.e., more than 99-100.5 °F (around 37-38 °C), we calculate the maximum temperature value of our circle ROI on <strong>Lines 74-78</strong>.</p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"31\" data-enlighter-title=\"Thermal Vision: Fever Detector with Python and OpenCV (starter project)\" data-enlighter-group=\"21\"># fever temperature threshold in Celsius or Fahrenheit\nfever_temperature_threshold = 37.0\nfever_temperature_threshold = 99.0</pre>\n\n\n\n<p>Then, we show a fever red alert text (<strong>Line 88</strong>) if this value is higher (<strong>Line 81</strong>) than our threshold (<code data-enlighter-language=\"python\" class=\"EnlighterJSRAW\">fever_temperature_threshold</code>, <strong>Lines 32 and 33</strong>). Again we should remember the above-mentioned <strong><em>Disclaimer</em></strong>.</p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"true\" data-enlighter-lineoffset=\"80\" data-enlighter-title=\"Thermal Vision: Fever Detector with Python and OpenCV (starter project)\" data-enlighter-group=\"22\">    # write temperature value in gray8\n    if higher_temperature < fever_temperature_threshold:\n\n     # white text: normal temperature\n     cv2.putText(gray8_image, \"{0:.1f} Celsius\".format(higher_temperature), (x - 10, y - 10), cv2.FONT_HERSHEY_PLAIN, \n                 1, (255, 255, 255), 1)\n    else:\n        # - red text + red circle: fever temperature\n        cv2.putText(gray8_image, \"{0:.1f} Celsius\".format(higher_temperature), (x - 10, y - 10), cv2.FONT_HERSHEY_PLAIN, \n                    1, (0, 0, 255), 2)\n        cv2.circle(gray8_image, haar_cascade_circle_origin, radius, (0, 0, 255), 2)\n\n# show result\ncv2.imshow(\"gray8-face-detected\", gray8_image)\ncv2.waitKey(0)</pre>\n\n\n\n<p>And that’s it: we have our fever detector using Computer Vision!</p>\n\n\n\n<p><strong>Figure 6</strong> shows the face temperature value in the thermal gray8 image.</p>\n\n\n\n<figure class=\"wp-container-15 wp-block-gallery-14 wp-block-gallery aligncenter has-nested-images columns-default is-cropped\">\n<figure class=\"wp-block-image\"><a href=\"https://lh4.googleusercontent.com/rYhFr_F5FuUOjjsvzfZkJoH4ls_URVXRXt5m7zQ_yXxrjzlepXVgYPQP9iCYXYxpzN9qs4syJ76jLO6U86GrQ3wS8jL9ebCysN-pnhRtq3LdR7jMoyqxpIDdmexOXgEGu3O6Yms6V7Qn4OjRgQ537tu_jpKG__PNQe0ABdpC0TEXrBq9As_6zpe5\" target=\"_blank\" rel=\"noreferrer noopener\"><img src=\"https://lh4.googleusercontent.com/rYhFr_F5FuUOjjsvzfZkJoH4ls_URVXRXt5m7zQ_yXxrjzlepXVgYPQP9iCYXYxpzN9qs4syJ76jLO6U86GrQ3wS8jL9ebCysN-pnhRtq3LdR7jMoyqxpIDdmexOXgEGu3O6Yms6V7Qn4OjRgQ537tu_jpKG__PNQe0ABdpC0TEXrBq9As_6zpe5\" alt=\"\"/></a></figure>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://lh4.googleusercontent.com/SM6-bIFrhPV1fOWc_aNcK_NAkvC7ciSFn_EvbkiQfdU7rD7MuXK_Uw028JnOnqR-L6aVnDmfUNQ8PpWX4yv5867ZiaP83vaYDwksJO-ais95GZ5V0fen07vf2sf8pxNHk9LHUbB1DNMSMKKFwvztHiISVZzykFR3QJvBvpln5IF6stqav34LR6TX\" target=\"_blank\" rel=\"noreferrer noopener\"><img src=\"https://lh4.googleusercontent.com/SM6-bIFrhPV1fOWc_aNcK_NAkvC7ciSFn_EvbkiQfdU7rD7MuXK_Uw028JnOnqR-L6aVnDmfUNQ8PpWX4yv5867ZiaP83vaYDwksJO-ais95GZ5V0fen07vf2sf8pxNHk9LHUbB1DNMSMKKFwvztHiISVZzykFR3QJvBvpln5IF6stqav34LR6TX\" alt=\"\"/></a></figure>\n<figcaption class=\"blocks-gallery-caption\"><strong>Figure 6:</strong> <em>Left</em>: The face temperature measurement result in the thermal gray8 image (in °C). <em>Right</em>: The face temperature measurement result in the thermal gray8 image (in °F).</figcaption></figure>\n\n\n\n<hr class=\"wp-block-separator has-alpha-channel-opacity\" id=\"h4Video\"/>\n\n\n\n<h4><a href=\"#TOC\"><strong>Fever Detection in a Thermal Video Sequence</strong></a></h4>\n\n\n\n<p>Again, as in the previous tutorial section, we follow the same steps as in a “static” image. We loop over each frame of our video sequence, measuring and showing the maximum temperature value of the ROI of each detected face.</p>\n\n\n\n<p><strong>Figure 7</strong> shows the results.</p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter is-resized\"><a href=\"https://lh3.googleusercontent.com/dUWcKBfPiGVsjhmOLd41ll7EsCppPZ-CX6n42N4loY8fxMx-vvOqzFftVRWNw5V-WxWJyzOhh7dxEG4iNe5Y5funeCf6qKxHUUEAc3WNw0eMMuM8Fg7QqQMhdl73NRKHm2W1aHqjeWmwl_flE95VgmNa8AdHkI_xFluDQ2vjMzHjpf3C_U7Rje4-\" target=\"_blank\" rel=\"noreferrer noopener\"><img src=\"https://lh3.googleusercontent.com/dUWcKBfPiGVsjhmOLd41ll7EsCppPZ-CX6n42N4loY8fxMx-vvOqzFftVRWNw5V-WxWJyzOhh7dxEG4iNe5Y5funeCf6qKxHUUEAc3WNw0eMMuM8Fg7QqQMhdl73NRKHm2W1aHqjeWmwl_flE95VgmNa8AdHkI_xFluDQ2vjMzHjpf3C_U7Rje4-\" alt=\"\" width=\"333\" height=\"250\"/></a><figcaption><strong>Figure 7:</strong> Our fever detector on a gray16 video sequence.</figcaption></figure></div>\n\n\n<hr class=\"wp-block-separator has-alpha-channel-opacity\" id=\"h3Fever\"/>\n\n\n\n<h3><a href=\"#TOC\"><strong>Real-Time Fever Detection on your Raspberry Pi in 2 Steps</strong></a></h3>\n\n\n\n<p>In this last section of the class, we will apply everything we have learned so far in this course.</p>\n\n\n\n<p>We will implement our easy fever detector process using OpenCV and Python on our Raspberry Pi and using one of the best price-performance thermal cameras, the RGMVision ThermalCAM 1.</p>\n\n\n\n<p>Whether you have this camera or any other UVC thermal camera, you’ll have fun implementing a real-time fever detector. If you don’t have a thermal camera on hand, you can also run everything shown so far in this class on your Raspberry Pi.</p>\n\n\n\n<p>You’ll implement this project successfully just by following these 3 CPP steps:</p>\n\n\n\n<ol><li>Code</li><li>Plug</li><li>Play</li></ol>\n\n\n\n<p>Let’s code!</p>\n\n\n\n<p>Open <code class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">fever_detector_camera.py</code> and import the NumPy and OpenCV libraries:</p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"true\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"Thermal Vision: Fever Detector with Python and OpenCV (starter project)\" data-enlighter-group=\"23\"># import the necessary packages\nimport cv2\nimport numpy as np</pre>\n\n\n\n<p>Of course, your Raspberry Pi should have both libraries installed. If not, please look at<a href=\"https://pyimagesearch.com/2019/09/16/install-opencv-4-on-raspberry-pi-4-and-raspbian-buster/\" target=\"_blank\" rel=\"noreferrer noopener\"> Install OpenCV 4 on Raspberry Pi 4 and Raspbian Buster</a>.</p>\n\n\n\n<p>Set up the thermal camera index and resolution, in our case, <code class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">160x120</code>:</p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"5\" data-enlighter-title=\"Thermal Vision: Fever Detector with Python and OpenCV (starter project)\" data-enlighter-group=\"24\"># set up the thermal camera index (thermal_camera = cv2.VideoCapture(0, cv2.CAP_DSHOW) on Windows OS)\nthermal_camera = cv2.VideoCapture(0)\n\n# set up the thermal camera resolution\nthermal_camera.set(cv2.CAP_PROP_FRAME_WIDTH, 160)\nthermal_camera.set(cv2.CAP_PROP_FRAME_HEIGHT, 120)</pre>\n\n\n\n<p>On <strong>Line 6</strong>, you should select your camera ID. If you are using Windows OS, be sure to specify your backend video library, for example, Direct Show (DSHOW): <code class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">thermal_camera = cv2.VideoCapture(0, cv2.CAP_DSHOW)</code>.</p>\n\n\n\n<p>For more information, please visit<a href=\"https://docs.opencv.org/4.5.4/d0/da7/videoio_overview.html\" target=\"_blank\" rel=\"noreferrer noopener\"> Video I/O with OpenCV Overview</a>.</p>\n\n\n\n<p>Set up the thermal camera to work as a gray16 source and to receive the data in raw format:</p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"true\" data-enlighter-lineoffset=\"12\" data-enlighter-title=\"Thermal Vision: Fever Detector with Python and OpenCV (starter project)\" data-enlighter-group=\"25\"># set up the thermal camera to get the gray16 stream and raw data\nthermal_camera.set(cv2.CAP_PROP_FOURCC, cv2.VideoWriter.fourcc('Y','1','6',' '))\nthermal_camera.set(cv2.CAP_PROP_CONVERT_RGB, 0)</pre>\n\n\n\n<p><strong>Line 14</strong> prevents the RGB conversion.</p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"true\" data-enlighter-lineoffset=\"16\" data-enlighter-title=\"Thermal Vision: Fever Detector with Python and OpenCV (starter project)\" data-enlighter-group=\"26\"># load the haar cascade face detector\nhaar_cascade_face = cv2.CascadeClassifier(\"haarcascade_frontalface_alt2.xml\")\n\n# fever temperature threshold in Celsius or Fahrenheit\nfever_temperature_threshold = 37.0\n#fever_temperature_threshold = 99.0</pre>\n\n\n\n<p>Let’s load the pre-trained Haar Cascade face detector and define our fever threshold (<code data-enlighter-language=\"python\" class=\"EnlighterJSRAW\">fever_temperature_threshold</code>, <strong>Lines 20 and 21</strong>).</p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"true\" data-enlighter-lineoffset=\"23\" data-enlighter-title=\"Thermal Vision: Fever Detector with Python and OpenCV (starter project)\" data-enlighter-group=\"27\"># loop over the thermal camera frames\nwhile True:\n\n    # grab the frame from the thermal camera stream\n    (grabbed, gray16_frame) = thermal_camera.read()\n\n    # convert the gray16 image into a gray8\n    gray8_frame = np.zeros((120, 160), dtype=np.uint8)\n    gray8_frame = cv2.normalize(gray16_frame, gray8_frame, 0, 255, cv2.NORM_MINMAX)\n    gray8_frame = np.uint8(gray8_frame)\n\n    # color the gray8 image using OpenCV colormaps\n    gray8_frame = cv2.applyColorMap(gray8_frame, cv2.COLORMAP_INFERNO)\n\n    # detect faces in the input frame using the haar cascade face detector\n    faces = haar_cascade_face.detectMultiScale(gray8_frame, scaleFactor=1.1, minNeighbors=5, minSize=(10, 10),\n                                               flags=cv2.CASCADE_SCALE_IMAGE)\n    # loop over the bounding boxes to measure their temperature\n    for (x, y, w, h) in faces:\n\n        # draw the rectangles\n        cv2.rectangle(gray8_frame, (x, y), (x + w, y + h), (255, 255, 255), 1)\n\n        # define the roi with a circle at the haar cascade origin coordinate\n\n        # haar cascade center for the circle\n        haar_cascade_circle_origin = x + w // 2, y + h // 2\n\n        # circle radius\n        radius = w // 4\n\n        # get the 8 most significant bits of the gray16 image\n        # (we follow this process because we can't extract a circle\n        # roi in a gray16 image directly)\n        gray16_high_byte = (np.right_shift(gray16_frame, 8)).astype('uint8')\n\n        # get the 8 less significant bits of the gray16 image\n        # (we follow this process because we can't extract a circle\n        # roi in a gray16 image directly)\n        gray16_low_byte = (np.left_shift(gray16_frame, 8) / 256).astype('uint16')\n\n        # apply the mask to our 8 most significant bits\n        mask = np.zeros_like(gray16_high_byte)\n        cv2.circle(mask, haar_cascade_circle_origin, radius, (255, 255, 255), -1)\n        gray16_high_byte = np.bitwise_and(gray16_high_byte, mask)\n\n        # apply the mask to our 8 less significant bits\n        mask = np.zeros_like(gray16_low_byte)\n        cv2.circle(mask, haar_cascade_circle_origin, radius, (255, 255, 255), -1)\n        gray16_low_byte = np.bitwise_and(gray16_low_byte, mask)\n\n        # create/recompose our gray16 roi\n        gray16_roi = np.array(gray16_high_byte, dtype=np.uint16)\n        gray16_roi = gray16_roi * 256\n        gray16_roi = gray16_roi | gray16_low_byte\n\n        # estimate the face temperature by obtaining the higher value\n        higher_temperature = np.amax(gray16_roi)\n\n        # calculate the temperature\n        higher_temperature = (higher_temperature / 100) - 273.15\n        # higher_temperature = (higher_temperature / 100) * 9 / 5 - 459.67\n\n        # write temperature value in gray8\n        if higher_temperature < fever_temperature_threshold:\n\n            # white text: normal temperature\n            cv2.putText(gray8_frame, \"{0:.1f} Celsius\".format(higher_temperature), (x, y - 10), cv2.FONT_HERSHEY_PLAIN,\n                        1, (255, 255, 255), 1)\n        else:\n            # - red text + red circle: fever temperature\n            cv2.putText(gray8_frame, \"{0:.1f} Celsius\".format(higher_temperature), (x, y - 10), cv2.FONT_HERSHEY_PLAIN,\n                        1, (0, 0, 255), 2)\n            cv2.circle(gray8_frame, haar_cascade_circle_origin, radius, (0, 0, 255), 2)\n\n    # show the temperature results\n    cv2.imshow(\"final\", gray8_frame)\n    cv2.waitKey(1)\n    \n# do a bit of cleanup\nthermal_camera.release()\ncv2.destroyAllWindows()</pre>\n\n\n\n<p>Loop over the thermal camera frames by detecting the faces using the Haar Cascade algorithm, isolating the circle ROI, and thresholding the maximum temperature value as in the previous sections (<strong>Lines 24-100</strong>).</p>\n\n\n\n<p>Let’s plug your thermal camera into 1 of your 4 Raspberry Pi USB sockets (<strong>Figure 8</strong>)!</p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter is-resized\"><a href=\"https://lh6.googleusercontent.com/lHrmE7kBht1DWGm6_gXTkXf9NIA1KVavoATPwci4wqidWBPJsSPgGHGs4z-yzikUHpXcv7TMwq726PQDpwENHyonzJYL1-szR_QpE5EpRpEH7WoswJBho7HW7MB1qMZ98DD5btB2sjiOuX6Oc0ja75kyvVc8ZGb1H5bpmVdVm6hneAEUfwmYRCs3\" target=\"_blank\" rel=\"noreferrer noopener\"><img src=\"https://lh6.googleusercontent.com/lHrmE7kBht1DWGm6_gXTkXf9NIA1KVavoATPwci4wqidWBPJsSPgGHGs4z-yzikUHpXcv7TMwq726PQDpwENHyonzJYL1-szR_QpE5EpRpEH7WoswJBho7HW7MB1qMZ98DD5btB2sjiOuX6Oc0ja75kyvVc8ZGb1H5bpmVdVm6hneAEUfwmYRCs3\" alt=\"\" width=\"667\" height=\"500\"/></a><figcaption><strong>Figure 8:</strong> Plug your UVC thermal camera into a Raspberry Pi 4 USB socket.</figcaption></figure></div>\n\n\n<p>And finally, let’s play/run the code via command or using your favorite Python IDE (<strong>Figure 9</strong>)!</p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter is-resized\"><a href=\"https://lh3.googleusercontent.com/KaPKs2E30EysE9YuNjj5wR5_jma6BEuh39XVFiGCh_WcFYZ-3OoaqsHuQDg8-wwJeCC2eoIL7V8pPaJryEF6OPpMVZNYufRqkrRTeS0ZAEXAIUkW0pejhW97o4e2y7bibZWLOnRNg_UPbZjX7KJM3EYtVqYa_jhKlo_9U2dJbBUGV_61I1XkTZll\" target=\"_blank\" rel=\"noreferrer noopener\"><img src=\"https://lh3.googleusercontent.com/KaPKs2E30EysE9YuNjj5wR5_jma6BEuh39XVFiGCh_WcFYZ-3OoaqsHuQDg8-wwJeCC2eoIL7V8pPaJryEF6OPpMVZNYufRqkrRTeS0ZAEXAIUkW0pejhW97o4e2y7bibZWLOnRNg_UPbZjX7KJM3EYtVqYa_jhKlo_9U2dJbBUGV_61I1XkTZll\" alt=\"\" width=\"700\" height=\"448\"/></a><figcaption><strong>Figure 9:</strong> Screenshot of our real-time fever detector running on the Raspberry Pi 4 and Raspbian Buster.</figcaption></figure></div>\n\n\n<p>And that’s all! Enjoy your project!</p>\n\n\n\n<hr class=\"wp-block-separator has-alpha-channel-opacity\"/>\n\n\n\n<div id=\"pitch\" style=\"padding: 40px; width: 100%; background-color: #F4F6FA;\">\n\t<h3>What's next? I recommend <a target=\"_blank\" href=\"https://pyimagesearch.com/pyimagesearch-university/?utm_source=blogPost&utm_medium=bottomBanner&utm_campaign=What%27s%20next%3F%20I%20recommend\">PyImageSearch University</a>.</h3>\n\n\t<script src=\"https://fast.wistia.com/embed/medias/kno0cmko2z.jsonp\" async></script><script src=\"https://fast.wistia.com/assets/external/E-v1.js\" async></script><div class=\"wistia_responsive_padding\" style=\"padding:56.25% 0 0 0;position:relative;\"><div class=\"wistia_responsive_wrapper\" style=\"height:100%;left:0;position:absolute;top:0;width:100%;\"><div class=\"wistia_embed wistia_async_kno0cmko2z videoFoam=true\" style=\"height:100%;position:relative;width:100%\"><div class=\"wistia_swatch\" style=\"height:100%;left:0;opacity:0;overflow:hidden;position:absolute;top:0;transition:opacity 200ms;width:100%;\"><img src=\"https://fast.wistia.com/embed/medias/kno0cmko2z/swatch\" style=\"filter:blur(5px);height:100%;object-fit:contain;width:100%;\" alt=\"\" aria-hidden=\"true\" onload=\"this.parentNode.style.opacity=1;\" /></div></div></div></div>\n\n\t<div style=\"margin-top: 32px; margin-bottom: 32px; \">\n\t\t<strong>Course information:</strong><br/>\n\t\t53+ total classes • 57+ hours of on-demand code walkthrough videos • Last updated: October 2022<br/>\n\t\t<span style=\"color: #169FE6;\">★★★★★</span> 4.84 (128 Ratings) • 15,800+ Students Enrolled\n\t</div>\n\n\t<p><strong>I strongly believe that if you had the right teacher you could <em>master</em> computer vision and deep learning.</strong></p>\n\n\t<p>Do you think learning computer vision and deep learning has to be time-consuming, overwhelming, and complicated? Or has to involve complex mathematics and equations? Or requires a degree in computer science?</p>\n\n\t<p>That’s <em>not</em> the case.</p>\n\n\t<p>All you need to master computer vision and deep learning is for someone to explain things to you in <em>simple, intuitive</em> terms. <em>And that’s exactly what I do</em>. My mission is to change education and how complex Artificial Intelligence topics are taught.</p>\n\n\t<p>If you're serious about learning computer vision, your next stop should be PyImageSearch University, the most comprehensive computer vision, deep learning, and OpenCV course online today. Here you’ll learn how to <em>successfully</em> and <em>confidently</em> apply computer vision to your work, research, and projects. Join me in computer vision mastery.</p>\n\n\t<p><strong>Inside PyImageSearch University you'll find:</strong></p>\n\n\t<ul style=\"margin-left: 0px;\">\n\t\t<li style=\"list-style: none;\">&check; <strong>53+ courses</strong> on essential computer vision, deep learning, and OpenCV topics</li>\n\t\t<li style=\"list-style: none;\">&check; <strong>53+ Certificates</strong> of Completion</li>\n\t\t<li style=\"list-style: none;\">&check; <strong>57+ hours</strong> of on-demand video</li>\n\t\t<li style=\"list-style: none;\">&check; <strong>Brand new courses released <em>regularly</em></strong>, ensuring you can keep up with state-of-the-art techniques</li>\n\t\t<li style=\"list-style: none;\">&check; <strong>Pre-configured Jupyter Notebooks in Google Colab</strong></li>\n\t\t<li style=\"list-style: none;\">&check; Run all code examples in your web browser — works on Windows, macOS, and Linux (no dev environment configuration required!)</li>\n\t\t<li style=\"list-style: none;\">&check; Access to <strong>centralized code repos for <em>all</em> 450+ tutorials</strong> on PyImageSearch</li>\n\t\t<li style=\"list-style: none;\">&check; <strong> Easy one-click downloads</strong> for code, datasets, pre-trained models, etc.</li>\n\t\t<li style=\"list-style: none;\">&check; <strong>Access</strong> on mobile, laptop, desktop, etc.</li>\n\t</ul>\n\n\t<p style=\"text-align: center;\">\n\t\t<a target=\"_blank\" class=\"button link\" href=\"https://pyimagesearch.com/pyimagesearch-university/?utm_source=blogPost&utm_medium=bottomBanner&utm_campaign=What%27s%20next%3F%20I%20recommend\" style=\"background-color: #6DC713; border-bottom: none;\">Click here to join PyImageSearch University</a>\n\t</p>\n</div>\n\n\n\n<hr class=\"wp-block-separator has-alpha-channel-opacity\" id=\"h2Summary\"/>\n\n\n\n<h2><a href=\"#TOC\"><strong>Summary</strong></a></h2>\n\n\n\n<p>In this tutorial, we learned how to implement an easy fever detector as a thermal starter project. </p>\n\n\n\n<p>First, for this purpose, we have discovered how to detect faces in a thermal image/video/camera stream by implementing the Haar Cascade Machine Learning algorithm. </p>\n\n\n\n<p>Then, we isolated a Region of Interest (ROI) in the detected faces using a circle shape mask without losing the gray16 temperature information. </p>\n\n\n\n<p>After that, we thresholded the maximum temperature value of the defined ROI to determine if the detected face belongs to a person who has a temperature above the normal range.</p>\n\n\n\n<p>Finally, we implemented a real-time fever detector in 3 steps, using a UVC thermal camera and your Raspberry Pi. </p>\n\n\n\n<p>In the following tutorial, we will travel into Deep Learning applied to Thermal Vision, and you will learn to detect different objects even in complete darkness at night.</p>\n\n\n\n<p>See you there!</p>\n\n\n\n<hr class=\"wp-block-separator has-alpha-channel-opacity\" id=\"h3Citation\"/>\n\n\n\n<h3><a href=\"#TOC\"><strong>Citation Information</strong></a></h3>\n\n\n\n<p><strong>Garcia-Martin, R. </strong>“Thermal Vision: Fever Detector with Python and OpenCV (starter project),” <em>PyImageSearch</em>, P. Chugh, A. R. Gosthipaty, S. Huot, K. Kidriavsteva, and R. Raha, eds., 2022, <a href=\"https://pyimg.co/6nxs0\" target=\"_blank\" rel=\"noreferrer noopener\">https://pyimg.co/6nxs0</a>  </p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"raw\" data-enlighter-theme=\"classic\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"false\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">@incollection{Garcia-Martin_2022_Fever,\n  author = {Raul Garcia-Martin},\n  title = {Thermal Vision: Fever Detector with {P}ython and {OpenCV} (starter project)},\n  booktitle = {PyImageSearch},\n  editor = {Puneet Chugh and Aritra Roy Gosthipaty and Susan Huot and Kseniia Kidriavsteva and Ritwik Raha},\n  year = {2022},\n  note = {https://pyimg.co/6nxs0},\n}</pre>\n\n\n\n<hr class=\"wp-block-separator has-alpha-channel-opacity\"/>\n\n\n\n<div style=\"padding: 40px; width: 100%; background-color: #F4F6FA;\">\n\t<h3>Want free GPU credits to train models?</h3>\n\n\t<ul style=\"margin-left: 0px;\">\n\t\t<li style=\"list-style: none;\">We used <a target=\"_blank\" href=\"https://cloud.jarvislabs.ai/\">Jarvislabs.ai</a>, a GPU cloud, for all the experiments.</li>\n\t\t<li style=\"list-style: none;\">We are proud to offer PyImageSearch University students $20 worth of Jarvislabs.ai GPU cloud credits. Join PyImageSearch University and claim your $20 credit <a target=\"_blank\" href=\"https://pyimagesearch.com/pyimagesearch-university/\">here</a>.</li>\n\t</ul>\n\n\n\t<p>In Deep Learning, we need to train Neural Networks. These Neural Networks can be trained on a CPU but take a lot of time. Moreover, sometimes these networks do not even fit (run) on a CPU.</p>\n\n\t<p>To overcome this problem, we use <strong>GPUs</strong>.  The problem is these GPUs are <strong>expensive</strong> and become outdated quickly. </p>\n\n\t<p>GPUs are great because they take your Neural Network and train it quickly.  The problem is that GPUs are expensive, so you don’t want to buy one and use it only occasionally.  Cloud GPUs let you use a GPU and <strong>only pay for the time you are running the GPU</strong>.  It’s a brilliant idea that saves you money.</p>\n\n\t<p><strong>JarvisLabs</strong> provides the best-in-class GPUs, and <strong>PyImageSearch University students</strong> get between 10-50 hours on a world-class GPU (time depends on the specific GPU you select).</p>\n\n\n\t<p>This gives you a chance to <strong>test-drive a monstrously powerful GPU</strong> on any of our tutorials in a jiffy. So join <a target=\"_blank\" href=\"https://pyimagesearch.com/pyimagesearch-university/\">PyImageSearch University</a> today and try it for yourself.</p>\n\n\n\t<p style=\"text-align: center;\">\n\t\t<a target=\"_blank\" class=\"button link\" href=\"https://pyimagesearch.com/pyimagesearch-university/\" style=\"background-color: #6DC713; border-bottom: none;\">Click here to get Jarvislabs credits now</a>\n\t</p>\n</div>\n\n\n\n<hr class=\"wp-block-separator has-alpha-channel-opacity\"/>\n\n\n\n<p><strong>To download the source code to this post (and be notified when future tutorials are published here on PyImageSearch), <em>simply enter your email address in the form below!</em></strong></p>\n\n\n\n<div id=\"download-the-code\" class=\"post-cta-wrap\">\n<div class=\"gpd-post-cta\">\n\t<div class=\"gpd-post-cta-content\">\n\t\t\n\n\t\t\t<div class=\"gpd-post-cta-top\">\n\t\t\t\t<div class=\"gpd-post-cta-top-image\"><img src=\"https://929687.smushcdn.com/2633864/wp-content/uploads/2020/01/cta-source-guide-1.png?lossy=1&strip=1&webp=1\" alt=\"\" srcset=\"https://929687.smushcdn.com/2633864/wp-content/uploads/2020/01/cta-source-guide-1.png?lossy=1&strip=1&webp=1 410w,https://929687.smushcdn.com/2633864/wp-content/uploads/2020/01/cta-source-guide-1.png?size=126x174&lossy=1&strip=1&webp=1 126w,https://929687.smushcdn.com/2633864/wp-content/uploads/2020/01/cta-source-guide-1.png?size=252x348&lossy=1&strip=1&webp=1 252w\" sizes=\"(max-width: 410px) 100vw, 410px\" /></div>\n\t\t\t\t\n\t\t\t\t<div class=\"gpd-post-cta-top-title\"><h4>Download the Source Code and FREE 17-page Resource Guide</h4></div>\n\t\t\t\t<div class=\"gpd-post-cta-top-desc\"><p>Enter your email address below to get a .zip of the code and a <strong>FREE 17-page Resource Guide on Computer Vision, OpenCV, and Deep Learning.</strong> Inside you'll find my hand-picked tutorials, books, courses, and libraries to help you master CV and DL!</p></div>\n\n\n\t\t\t</div>\n\n\t\t\t<div class=\"gpd-post-cta-bottom\">\n\t\t\t\t<form id=\"footer-cta-code\" class=\"footer-cta\" action=\"https://www.getdrip.com/forms/4130035/submissions\" method=\"post\" target=\"blank\" data-drip-embedded-form=\"4130035\">\n\t\t\t\t\t<input name=\"fields[email]\" type=\"email\" value=\"\" placeholder=\"Your email address\" class=\"form-control\" />\n\n\t\t\t\t\t<button type=\"submit\">Download the code!</button>\n\n\t\t\t\t\t<div style=\"display: none;\" aria-hidden=\"true\"><label for=\"website\">Website</label><br /><input type=\"text\" id=\"website\" name=\"website\" tabindex=\"-1\" autocomplete=\"false\" value=\"\" /></div>\n\t\t\t\t</form>\n\t\t\t</div>\n\n\n\t\t\n\t</div>\n\n</div>\n</div>\n<p>The post <a rel=\"nofollow\" href=\"https://pyimagesearch.com/2022/10/24/thermal-vision-fever-detector-with-python-and-opencv-starter-project/\">Thermal Vision: Fever Detector with Python and OpenCV (starter project)</a> appeared first on <a rel=\"nofollow\" href=\"https://pyimagesearch.com\">PyImageSearch</a>.</p>\n"
}