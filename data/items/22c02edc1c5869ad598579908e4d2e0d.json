{
  "title": "Beginners Guide: Apache Spark Machine Learning Scenario With A Large Input Dataset",
  "link": "https://fullstackml.com/beginners-guide-apache-spark-machine-learning-scenario-with-a-large-input-dataset-1f0c6bc53f8f?source=rss----46e065078cc1---4",
  "guid": "https://medium.com/p/1f0c6bc53f8f",
  "category": [
    "dataset",
    "machine-learning",
    "apache-spark"
  ],
  "dc:creator": "Dmitry Petrov",
  "pubDate": "Thu, 29 Oct 2015 16:43:00 GMT",
  "atom:updated": "2017-03-06T05:51:39.074Z",
  "content:encoded": "<p>What if you want to create a machine learning model but realized that your input dataset doesn’t fit your computer memory? Usual you would use distributed computing tools like Hadoop and Apache Spark for that computation in a cluster with many machines. However, Apache Spark is able to process your data in local machine standalone mode and even build models when the input data set is larger than the amount of memory your computer has. In this blog post, I’ll show you an <strong>end-to-end scenario with Apache Spark where we will be creating a binary classification model using a 34.6 gigabytes of input dataset</strong>. Run this scenario in your laptop (yes, yours with its 4–8 gigabytes of memory and 50+ gigabytes of disk space) to test this.</p><figure><img alt=\"Choose dataset\" src=\"https://cdn-images-1.medium.com/max/660/0*6NimKLpTiK6_8-9p.\" /><figcaption>Choose dataset</figcaption></figure><h3>1. Input data and expected results</h3><p>In the previous post we discussed “<a href=\"http://fullstackml.com/2015/10/17/how-to-find-simple-and-interesting-multi-gigabytes-data-set/\">How To Find Simple And Interesting Multi-Gigabytes Data Set</a>”. The Posts.xml file from this dataset will be used in the current post. The file size is 34.6 gigabytes. This xml file contains the stackoverflow.com posts data as xml attributes:</p><ol><li>Title — post title</li><li>Body — post text</li><li>Tags — list of tags for post</li><li>10+ more xml-attributes that we won’t use.</li></ol><p><strong>The full dataset with stackoverflow.com Posts.xml file is available here at </strong><a href=\"https://archive.org/details/stackexchange\"><strong>https://archive.org/details/stackexchange</strong></a><strong>.</strong> Additionally I created a smaller version of this file with only 10 items\\posts in it. This file contains a small size of original dataset. This data is licensed under the Creative Commons license (<a href=\"http://creativecommons.org/licenses/by-sa/2.5/\">cc-by-sa</a>).</p><p>As you might expect, this small file is not the best choice for model training. This file is only good for experimenting with your data preparation code. However, <strong>the end-to-end Spark scenario from this article works with this small file as well. Please download the file from</strong><a href=\"https://www.dropbox.com/s/n2skgloqoadpa30/Posts.small.xml?dl=0\"><strong> here</strong></a>.</p><p>Our goal is to create a predictive model which predicts post Tags based on Body and Title. To simplify the task and reduce the amount of code, we are going to concatenate Title and Body and use that as a single text column.</p><p>It might be easy to imagine how this model should work in the stackoverflow.com web site — the user types a question and the web size automatically gives tags suggestion.</p><p>Assume that we need as many correct tags as possible and that the user would remove the unnecessary tags. Because of this assumption we are choosing recall as a high priority target for our model.</p><h3>2. Binary and multi-label classification</h3><p>The problem of stackoverflow tag prediction is a multi-label classification one because the model should predict many classes, which are not exclusive. The same text might be classified as “Java” and “Multithreading”. Note that multi-label classification is a generalization of different problems — multi-class classification problem which predict only one class from a set of classes.</p><p>To simplify our the first Apache Spark problem and reduce the amount of code, let’s simplify our problem. <strong>Instead of training a multi-label classifier, let’s train a simple binary classifier for a given tag.</strong> For instance, for the tag “Java” one classifier will be created which can predict a post that is about the Java language.</p><p>By using this simple approach, many classifiers might be created for almost all frequent labels (Java, C++, Python, multi-threading etc…). This approach is simple and good for studying. However, it is not perfect in practice because by splitting predictive models by separate classifiers, you are ignoring the correlations between classes. Another reason — training many classifiers might be computationally expensive.</p><h3>3. Setup and Run Apache Spark in a standalone mode</h3><p>If you don’t have Apache Spark in your machine you can simply download it from the Spark web page <a href=\"http://spark.apache.org/\">http://spark.apache.org/</a>. Please use version 1.5.1. Direct link to a pre-built version — <a href=\"http://d3kbcqa49mib13.cloudfront.net/spark-1.5.1-bin-hadoop2.6.tgz\">http://d3kbcqa49mib13.cloudfront.net/spark-1.5.1-bin-hadoop2.6.tgz</a></p><p>You are ready to run Spark in Standalone mode if Java is installed in your computer. If not — install Java.</p><p>For Unix systems and Macs, uncompress the file and copy to any directory. This is a Spark directory now.</p><p>Run spark master, slave and shell:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/daad816521d1fe3d753dc968c0819bf5/href\">https://medium.com/media/daad816521d1fe3d753dc968c0819bf5/href</a></iframe><p>Spark shell can run your Scala command in interactive mode.</p><p>Windows users can find the instruction here: <a href=\"http://nishutayaltech.blogspot.in/2015/04/how-to-run-apache-spark-on-windows7-in.html\">http://nishutayaltech.blogspot.in/2015/04/how-to-run-apache-spark-on-windows7-in.html</a></p><p>If you are working in cluster mode in a Hadoop environment, I’m assuming you already know how to run the Spark shell.</p><h3>4. Importing libraries</h3><p>For this end-to-end scenario we are going to use Scala, the primary language for Apache Spark.</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/01c10a5581fc0255604c59c16ee4bd79/href\">https://medium.com/media/01c10a5581fc0255604c59c16ee4bd79/href</a></iframe><h3>5. Parsing XML</h3><p>We need to extract Body, Text and Tags from the input xml file and create a single data-frame with these columns. First, let's remove the xml header and footer. I assume that the input file is located in the same directory where you run the spark shell command.</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/effbb5a79c939586d5f6acee867962e1/href\">https://medium.com/media/effbb5a79c939586d5f6acee867962e1/href</a></iframe><p>Spark has good functions for parsing json and csv formats. For Xml we need to write several additional lines of code to create a data frame by specifying the schema programmatically.</p><p>Note, Scala language automatically converts all xml codes like “<a>” to actual tags “<a>”. Also we are going to concatenate title and body and remove all unnecessary tags and new line characters from the body and all space duplications.</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/0dc62aa5807f48c24444c1e30129080b/href\">https://medium.com/media/0dc62aa5807f48c24444c1e30129080b/href</a></iframe><p>To create a data-frame, schema should be applied to RDD.</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/c89be330e3298b336c2d9d5b494f4d79/href\">https://medium.com/media/c89be330e3298b336c2d9d5b494f4d79/href</a></iframe><h3>6. Preparing training and testing datasets</h3><p>The next step – creating binary labels for a binary classifier. For this code examples, we are using “java” as a label that we would like to predict by a binary classifier. All rows with the “java” label should be marked as a “1” and rows with no “java” as a “0”. Let's identify our target tag \"java\" and create binary labels based on this tag. Then dataset can be split into negative and positive subsets by using the new label.</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/9e876be8a92e69b7e5ced8528d8bb373/href\">https://medium.com/media/9e876be8a92e69b7e5ced8528d8bb373/href</a></iframe><p>We are going to use 90% of our data for the model training and 10% as a testing dataset. Let's create a training dataset by sampling the positive and negative datasets separately.</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/3f26ebd754654a3cbaef0031eae16a30/href\">https://medium.com/media/3f26ebd754654a3cbaef0031eae16a30/href</a></iframe><p>The testing dataset should include all rows which are not included in the training datasets. And again – positive and negative examples separately.</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/2d8bf5160d4d46bcadac41ad267907f7/href\">https://medium.com/media/2d8bf5160d4d46bcadac41ad267907f7/href</a></iframe><h3>7. Training a model</h3><p>Let's identify training parameters:</p><ol><li>Number of features</li><li>Regression parameters</li><li>Number of epoch for gradient decent</li></ol><p>Spark API creates a model based on columns from the data-frame and the training parameters:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/cecc64cd54e69139de87372baa1d8543/href\">https://medium.com/media/cecc64cd54e69139de87372baa1d8543/href</a></iframe><h3>8. Testing a model</h3><p>This is our final code for the binary “Java” classifier which returns a prediction (0.0 or 1.0):</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/2cd20c957947dc3146b6de4449d81a69/href\">https://medium.com/media/2cd20c957947dc3146b6de4449d81a69/href</a></iframe><p>Let's evaluate the quality of the model based on training dataset.</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/b691e6d4fae2b54f85b4cfd495558db7/href\">https://medium.com/media/b691e6d4fae2b54f85b4cfd495558db7/href</a></iframe><p>If you use the small dataset then the quality of your model is probably not the best. Area under the ROC value will be very low (close to 50%) which indicates a poor quality of the model. With an entire Posts.xml dataset, the quality is no so bad. Area under the ROC is 0.64. Probably you can improve this result by playing with different transformations such as TF-IDF and normalization. Not in this blog post.</p><h3>Conclusion</h3><p>Apache Spark could be a great option for data processing and for machine learning scenarios if your dataset is larger than your computer memory can hold. It might not be easy to use Spark in a cluster mode within the Hadoop Yarn environment. However, in a local (or standalone) mode, Spark is as simple as any other analytical tool.</p><p>Please let me know if you encountered any problem or had future questions. I would really like to head your feedback.</p><p>The complete source code of this program could be found <a href=\"https://www.dropbox.com/s/4ljc2jtew6fbgn2/beginner_spark_ml.scala?dl=0\">here</a>.</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=1f0c6bc53f8f\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://fullstackml.com/beginners-guide-apache-spark-machine-learning-scenario-with-a-large-input-dataset-1f0c6bc53f8f\">Beginners Guide: Apache Spark Machine Learning Scenario With A Large Input Dataset</a> was originally published in <a href=\"https://fullstackml.com\">FullStackML</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"
}