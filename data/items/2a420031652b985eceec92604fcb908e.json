{
  "title": "Dask Release 0.15.3",
  "link": "",
  "updated": "2017-09-24T00:00:00+00:00",
  "id": "https://mrocklin.github.io/blog/work/2017/09/24/dask-0.15.3",
  "content": "<p><em>This work is supported by <a href=\"http://anaconda.com\">Anaconda Inc.</a>\nand the Data Driven Discovery Initiative from the <a href=\"https://www.moore.org/\">Moore\nFoundation</a>.</em></p>\n\n<p>I’m pleased to announce the release of Dask version 0.15.3.  This release\ncontains stability enhancements and bug fixes.  This blogpost outlines\nnotable changes since the 0.15.2 release on August 30th.</p>\n\n<p>You can conda install Dask:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>conda install -c conda-forge dask\n</code></pre></div></div>\n\n<p>or pip install from PyPI</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>pip install dask[complete] --upgrade\n</code></pre></div></div>\n\n<p>Conda packages are available both on conda-forge channels.  They will be on\ndefaults in a few days.</p>\n\n<p>Full changelogs are available here:</p>\n\n<ul>\n  <li><a href=\"https://github.com/dask/dask/blob/master/docs/source/changelog.rst\">dask/dask</a></li>\n  <li><a href=\"https://github.com/dask/distributed/blob/master/docs/source/changelog.rst\">dask/distributed</a></li>\n</ul>\n\n<p>Some notable changes follow.</p>\n\n<h2 id=\"masked-arrays\">Masked Arrays</h2>\n\n<p>Dask.array now supports <a href=\"https://docs.scipy.org/doc/numpy-1.13.0/reference/maskedarray.html\">masked arrays similar to NumPy</a>.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]:</span> <span class=\"kn\">import</span> <span class=\"nn\">dask.array</span> <span class=\"k\">as</span> <span class=\"n\">da</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]:</span> <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">da</span><span class=\"p\">.</span><span class=\"n\">arange</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">chunks</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,))</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]:</span> <span class=\"n\">mask</span> <span class=\"o\">=</span> <span class=\"n\">x</span> <span class=\"o\">%</span> <span class=\"mi\">2</span> <span class=\"o\">==</span> <span class=\"mi\">0</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]:</span> <span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"n\">da</span><span class=\"p\">.</span><span class=\"n\">ma</span><span class=\"p\">.</span><span class=\"n\">masked_array</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">mask</span><span class=\"p\">)</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">]:</span> <span class=\"n\">m</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">]:</span> <span class=\"n\">dask</span><span class=\"p\">.</span><span class=\"n\">array</span><span class=\"o\">&lt;</span><span class=\"n\">masked_array</span><span class=\"p\">,</span> <span class=\"n\">shape</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,),</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">int64</span><span class=\"p\">,</span> <span class=\"n\">chunksize</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,)</span><span class=\"o\">&gt;</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">]:</span> <span class=\"n\">m</span><span class=\"p\">.</span><span class=\"n\">compute</span><span class=\"p\">()</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">]:</span>\n<span class=\"n\">masked_array</span><span class=\"p\">(</span><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"o\">--</span> <span class=\"mi\">1</span> <span class=\"o\">--</span> <span class=\"mi\">3</span> <span class=\"o\">--</span> <span class=\"mi\">5</span> <span class=\"o\">--</span> <span class=\"mi\">7</span> <span class=\"o\">--</span> <span class=\"mi\">9</span><span class=\"p\">],</span>\n             <span class=\"n\">mask</span> <span class=\"o\">=</span> <span class=\"p\">[</span> <span class=\"bp\">True</span> <span class=\"bp\">False</span>  <span class=\"bp\">True</span> <span class=\"bp\">False</span>  <span class=\"bp\">True</span> <span class=\"bp\">False</span>  <span class=\"bp\">True</span> <span class=\"bp\">False</span>  <span class=\"bp\">True</span> <span class=\"bp\">False</span><span class=\"p\">],</span>\n       <span class=\"n\">fill_value</span> <span class=\"o\">=</span> <span class=\"mi\">999999</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>This work was primarily done by <a href=\"\">Jim Crist</a> and partially funded by the UK\nMet office in support of the <a href=\"http://scitools.org.uk/iris/\">Iris project</a>.</p>\n\n<h2 id=\"constants-in-atop\">Constants in <code class=\"language-plaintext highlighter-rouge\">atop</code></h2>\n\n<p>Dask.array experts will be familiar with the <a href=\"http://dask.pydata.org/en/latest/array-api.html#dask.array.core.atop\">atop\nfunction</a>, which powers a non-trivial amount of dask.array and is commonly used by people building custom algorithms.  This function now supports constants when the index given is <code class=\"language-plaintext highlighter-rouge\">None</code>.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">atop</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">,</span> <span class=\"s\">'ijk'</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"s\">'ik'</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"s\">'kj'</span><span class=\"p\">,</span> <span class=\"n\">CONSTANT</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<h2 id=\"memory-management-for-workers\">Memory management for workers</h2>\n\n<p>Dask workers spill excess data to disk when they reach 60% of their alloted\nmemory limit.  Previously we only measured memory use by adding up the memory\nuse of every piece of data produce by the worker.  This could fail under a few\nsituations</p>\n\n<ol>\n  <li>Our per-data estiamtes were faulty</li>\n  <li>User code consumed a large amount of memory without our tracking it</li>\n</ol>\n\n<p>To compensate we now also periodically check the memory use of the worker using\nsystem utilities with the psutil module.  We dump data to disk if the process\nrises about 70% use, stop running new tasks if it rises above 80%, and restart\nthe worker if it rises above 95% (assuming that the worker has a nanny\nprocess).</p>\n\n<p><strong>Breaking Change:</strong> Previously the <code class=\"language-plaintext highlighter-rouge\">--memory-limit</code> keyword to the\n<code class=\"language-plaintext highlighter-rouge\">dask-worker</code> process specified the 60% “start pushing to disk” limit.  So if\nyou had 100GB of RAM then you previously might have started a dask-worker as\nfollows:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>dask-worker ... --memory-limit 60e9  # before specify 60% target\n</code></pre></div></div>\n\n<p>And the worker would start pushing to disk once it had 60GB of data in memory.\nHowever, now we are changing this meaning to be the full amount of memory given\nto the process.</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>dask-worker ... --memory-limit 100e9A  # now specify 100% target\n</code></pre></div></div>\n\n<p>Of course, you don’t have to sepcify this limit (many don’t).  It will be\nchosen for you automatically.  If you’ve never cared about this then you\nshouldn’t start caring now.</p>\n\n<p>More about memory management here: <a href=\"http://distributed.readthedocs.io/en/latest/worker.html?highlight=memory-limit#memory-management\">http://distributed.readthedocs.io/en/latest/worker.html?highlight=memory-limit#memory-management</a></p>\n\n<h2 id=\"statistical-profiling\">Statistical Profiling</h2>\n\n<p>Workers now poll their worker threads every 10ms and keep a running count of\nwhich functions are being used.  This information is available on the\ndiagnostic dashboard as a new “Profile” page.  It provides information that is\northogonal, and generally more detailed than the typical task-stream plot.</p>\n\n<p><img src=\"https://mrocklin.github.io/blog/images/daskboard-profile.gif\" width=\"70%\" /></p>\n\n<p>These plots are available on each worker, and an aggregated view is available\non the scheduler.  The timeseries on the bottom allows you to select time\nwindows of your computation to restrict the parallel profile.</p>\n\n<p>More information about diagnosing performance available here:\n<a href=\"http://distributed.readthedocs.io/en/latest/diagnosing-performance.html\">http://distributed.readthedocs.io/en/latest/diagnosing-performance.html</a></p>\n\n<h2 id=\"acknowledgements\">Acknowledgements</h2>\n\n<p>The following people contributed to the dask/dask repository since the 0.15.2\nrelease on August 30th</p>\n\n<ul>\n  <li>Adonis</li>\n  <li>Christopher Prohm</li>\n  <li>Danilo Horta</li>\n  <li>jakirkham</li>\n  <li>Jim Crist</li>\n  <li>Jon Mease</li>\n  <li>jschendel</li>\n  <li>Keisuke Fujii</li>\n  <li>Martin Durant</li>\n  <li>Matthew Rocklin</li>\n  <li>Tom Augspurger</li>\n  <li>Will Warner</li>\n</ul>\n\n<p>The following people contributed to the dask/distributed repository since the\n1.18.3 release on September 2nd:</p>\n\n<ul>\n  <li>Casey Law</li>\n  <li>Edrian Irizarry</li>\n  <li>Matthew Rocklin</li>\n  <li>rbubley</li>\n  <li>Tom Augspurger</li>\n  <li>ywangd</li>\n</ul>"
}