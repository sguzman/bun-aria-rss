{
  "id": "tag:blogger.com,1999:blog-6894866515532737257.post-5252986266885764344",
  "published": "2018-02-16T09:15:00.000-08:00",
  "updated": "2018-02-19T07:58:43.906-08:00",
  "title": "Learning to program is getting harder",
  "content": "I have written several books that use Python to explain topics like Bayesian Statistics and Digital Signal Processing.&nbsp; Along with the books, I provide code that readers can download from GitHub.&nbsp; In order to work with this code, readers have to know some Python, but that's not enough.&nbsp; They also need a computer with Python and its supporting libraries, they have to know how to download code from GitHub, and then they have to know how to run the code they downloaded.<br /><div><br /></div><div>And that's where a lot of readers get into trouble.</div><div><br /></div><div>Some of them send me email.&nbsp; They often express frustration, because they are trying to learn Python, or Bayesian Statistics, or Digital Signal Processing.&nbsp; They are not interested in installing software, cloning repositories, or setting the Python search path!</div><div><br /></div><div>I am very sympathetic to these reactions.&nbsp; And in one sense, their frustration is completely justified:&nbsp; it should not be as hard as it is to download a program and run it.</div><div><br /></div><div>But sometimes their frustration is misdirected.&nbsp; Sometimes they blame Python, and sometimes they blame me.&nbsp; And that's not entirely fair.</div><div><br /></div><div>Let me explain what I think the problems are, and then I'll suggest some solutions (or maybe just workarounds).</div><div><br /></div><div>The fundamental problem is that the barrier between <i>using</i> a computer and <i>programming</i> a computer is getting higher.</div><div><br /></div><div>When I got a Commodore 64 (in 1982, I think) this barrier was non-existent.&nbsp; When you turned on the computer, it loaded and ran a software development environment (SDE).&nbsp; In order to do anything, you had to type at least one line of code, even if all it did was another program (like <a href=\"https://en.wikipedia.org/wiki/Archon:_The_Light_and_the_Dark\">Archon</a>).</div><div><br /></div><div>Since then, three changes have made it incrementally harder for users to become programmers</div><div><br /></div><div>1) Computer retailers stopped installing development environments by default.&nbsp; As a result, anyone learning to program has to start by installing an SDE -- and that's a bigger barrier than you might expect.&nbsp; Many users have never installed anything, don't know how to, or might not be allowed to.&nbsp; Installing software is easier now than it used to be, but it is still error prone and can be frustrating.&nbsp; If someone just wants to learn to program, they shouldn't have to learn system administration first.</div><div><br /></div><div>2) User interfaces shifted from command-line interfaces (CLIs) to graphical user interfaces (GUIs).&nbsp; GUIs are generally easier to use, but they hide information from users about what's really happening.&nbsp; When users really don't need to know, hiding information can be a good thing.&nbsp; The problem is that GUIs hide a lot of information <i>programmers</i> need to know.&nbsp; So when a user decides to become a programmer, they are suddenly confronted with all the information that's been hidden from them.&nbsp; If someone just wants to learn to program, they shouldn't have to learn operating system concepts first.</div><div><br /></div><div>3) Cloud computing has taken information hiding to a whole new level.&nbsp; People using web applications often have only a vague idea of where their data is stored and what applications they can use to access it.&nbsp; Many users, especially on mobile devices, don't distinguish between operating systems, applications, web browsers, and web applications.&nbsp; When they upload and download data, they are often confused about where is it coming from and where it is going.&nbsp; When they install something, they are often confused about what is being installed where.</div><div><br /></div><div>For someone who grew up with a Commodore 64, learning to program was hard enough.&nbsp; For someone growing up with a cloud-connected mobile device, it is much harder.</div><div><br /></div><div>Well, what can we do about that?&nbsp; Here are a few options (which I have given clever names):</div><div><br /></div><div>1) <b>Back to the future</b>: One option is to create computers, like my Commodore 64, that break down the barrier between using and programming a computer.&nbsp; Part of the motivation for the Raspberry Pi, <a href=\"https://www.youtube.com/watch?v=6xFzVuxldqs\">according to Eben Upton</a>, is to re-create the kind of environment that turns users into programmers.</div><div><br /></div><div>2) <b>Face the pain</b>: Another option is to teach students how to set up and use a software development environment before they start programming (or at the same time).</div><div><br /></div><div>3) <b>Delay the pain</b>: A third option is to use cloud resources to let students start programming right away, and postpone creating their own environments.</div><div><br /></div><div>In one of my classes, we face the pain; students learn to use the UNIX command line interface at the same time they are learning C.&nbsp; But the students in that class already know how to program, and they have live instructors to help out.</div><div><br /></div><div>For beginners, and especially for people working on their own, I recommend delaying the pain.&nbsp; Here are some of the tools I have used:</div><div><br /></div><div>1) Interactive tutorials that run code in a browser, like this adaptation of <a href=\"http://interactivepython.org/runestone/static/thinkcspy/index.html\"><i>How To Think Like a Computer Scientist</i></a>;</div><div><br /></div><div>2) Entire development environments that run in a browser, like <a href=\"https://www.pythonanywhere.com/\">PythonAnywhere</a>; and</div><div><br /></div><div>3) Virtual machines that contain complete development environments, which users can download and run (providing that they have, or can install, the software that runs the virtual machine).</div><div><br /></div><div>4) Services like <a href=\"https://mybinder.org/\">Binder</a> that run development environments on remote servers, allowing users to connect using browsers.</div><div><br /></div><div>On various projects of mine, I have used all of these tools.&nbsp; In addition to the interactive version of \"<i>How To Think...</i>\", there is also this <a href=\"https://books.trinket.io/thinkjava/\">interactive version of<i> Think Java</i></a>, adapted and hosted by <a href=\"https://trinket.io/\">Trinket</a>.</div><div><br /></div><div>In <i>Think Python</i>, I encourage readers to use PythonAnywhere for at least the first four chapters, and then I <a href=\"http://www.allendowney.com/wp/books/think-python-2e/\">provide instructions for making the transition to a local installation</a>.</div><div><br /></div><div>I have used virtual machines for some of my classes in the past, but recently I have used more online services, like this <a href=\"https://www.oreilly.com/learning/downey-thinkdsp-excerpt\">notebook from <i>Think DSP,</i>&nbsp;hosted by O'Reilly Media</a>.&nbsp; And the repositories for all of my books are set up to run under Binder.</div><div><br /></div><div>These options help people get started, but they have limitations.&nbsp; Sooner or later, students will want or need to install a development environment on their own computers.&nbsp; But if we separate learning to program from learning to install software, their chances of success are higher.<br /><br />UPDATE: Nick Coghlan suggests a fourth option, which I might call <b>Embrace the Future</b>: Maybe beginners can start with cloud-based development environments, and stay there.<br /><br /><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"https://1.bp.blogspot.com/-7tyt8mwAIfc/WociHw7ingI/AAAAAAAAEwY/-6CBZaeLv-ENh-DBjiM7gML5UlEb1UlygCLcBGAs/s1600/Screenshot%2Bat%2B2018-02-16%2B13%253A24%253A32.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" data-original-height=\"288\" data-original-width=\"613\" height=\"150\" src=\"https://1.bp.blogspot.com/-7tyt8mwAIfc/WociHw7ingI/AAAAAAAAEwY/-6CBZaeLv-ENh-DBjiM7gML5UlEb1UlygCLcBGAs/s320/Screenshot%2Bat%2B2018-02-16%2B13%253A24%253A32.png\" width=\"320\" /></a></div><div class=\"separator\" style=\"clear: both; text-align: center;\"><br /></div><div class=\"separator\" style=\"clear: both; text-align: left;\">UPDATE: Thank you for all the great comments!&nbsp; My general policy is that I will publish a comment if it is on topic, coherent, and civil.&nbsp; I might not publish a comment if it seems too much like an ad for a product or service.&nbsp; If you submitted a comment and I did not publish it, please consider submitting a revision.&nbsp; I really appreciate the wide range of opinion in the comments so far.</div><br /></div><div><br /></div><div><br /></div>",
  "link": [
    "",
    "",
    "",
    "",
    ""
  ],
  "author": {
    "name": "Allen Downey",
    "uri": "http://www.blogger.com/profile/01633071333405221858",
    "email": "noreply@blogger.com",
    "gd:image": ""
  },
  "media:thumbnail": "",
  "thr:total": 45
}