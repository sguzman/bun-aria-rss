{
  "id": "tag:blogger.com,1999:blog-6894866515532737257.post-8384907613601369301",
  "published": "2018-05-03T09:02:00.000-07:00",
  "updated": "2018-05-03T09:06:35.142-07:00",
  "title": "Some people hate custom libraries",
  "content": "For most of my books, I provide a Python module that defines the functions and objects I use in the book.&nbsp; That makes some people angry.<br /><br />The following Amazon review does a nice job of summarizing the objections, and it demonstrates the surprising passion this issue evokes: <br /><br /><hr /><span style=\"background-color: #f3f3f3;\"><i><br /></i></span><br /><div class=\"a-row a-spacing-mini\" style=\"box-sizing: border-box; color: #111111; font-family: &quot;amazon ember&quot;, arial, sans-serif; font-size: 13px; margin-bottom: 6px; width: 550px;\"><a class=\"a-profile\" data-a-size=\"small\" href=\"https://www.amazon.com/gp/profile/amzn1.account.AHNT5EFII6GNBJ2TBK7WP7V24UJA/ref=cm_cr_dp_d_gw_tr?ie=UTF8\" style=\"box-sizing: border-box; color: #0066c0; display: table; text-decoration-line: none;\"></a><br /></div><div class=\"a-row\" style=\"box-sizing: border-box; color: #111111; font-family: &quot;amazon ember&quot;, arial, sans-serif; font-size: 13px; width: 550px;\"><span style=\"background-color: #f3f3f3;\"><i><a class=\"a-link-normal\" href=\"https://www.amazon.com/gp/customer-reviews/RAV2OUFIMDK0M/ref=cm_cr_dp_d_rvw_ttl?ie=UTF8&amp;ASIN=1491938455\" style=\"box-sizing: border-box; color: #0066c0; text-decoration-line: none;\" title=\"1.0 out of 5 stars\"><span class=\"a-icon a-icon-star a-star-1 review-rating\" data-hook=\"review-star-rating\" style=\"background-image: url(&quot;https://m.media-amazon.com/images/G/01/AUIClients/AmazonUIBaseCSS-sprite_1x-7233320d393c05a5508cf7d579641c4b327cbda4._V2_.png&quot;); background-position: -69px -368px; background-repeat: no-repeat; background-size: 400px 900px; box-sizing: border-box; display: inline-block; height: 18px; position: relative; vertical-align: text-top; width: 80px;\"><span class=\"a-icon-alt\" style=\"box-sizing: border-box; display: block; font-size: inherit; height: 18px; left: auto; line-height: normal; opacity: 0; overflow: hidden; position: absolute; top: auto; width: 80px;\">1.0 out of 5 stars</span></span></a><span class=\"a-letter-space\" style=\"box-sizing: border-box; display: inline-block; width: 0.385em;\"></span><a class=\"a-size-base a-link-normal review-title a-color-base a-text-bold\" data-hook=\"review-title\" href=\"https://www.amazon.com/gp/customer-reviews/RAV2OUFIMDK0M/ref=cm_cr_dp_d_rvw_ttl?ie=UTF8&amp;ASIN=1491938455\" style=\"box-sizing: border-box; color: #111111; font-weight: 700 !important; line-height: 19px !important; text-decoration-line: none;\">Ruined by idiotic and unnecessary and MASSIVE complexity in stupidly designed custom code</a></i></span></div><span class=\"a-size-base a-color-secondary review-date\" data-hook=\"review-date\" style=\"background-color: #f3f3f3; box-sizing: border-box; color: rgb(85 , 85 , 85); font-family: &quot;amazon ember&quot; , &quot;arial&quot; , sans-serif; font-size: 13px; line-height: 19px;\"><i>March 29, 2018</i></span><br /><div class=\"a-row a-spacing-mini review-data review-format-strip\" style=\"box-sizing: border-box; color: #111111; font-family: &quot;amazon ember&quot;, arial, sans-serif; font-size: 13px; margin-bottom: 6px; width: 550px;\"><span class=\"a-color-secondary\" data-hook=\"format-strip-linkless\" style=\"background-color: #f3f3f3; box-sizing: border-box; color: rgb(85 , 85 , 85);\"><i>Format: Paperback</i></span></div><div class=\"a-row review-data\" style=\"box-sizing: border-box; color: #111111; font-size: 13px; width: 550px;\"><div style=\"font-family: &quot;amazon ember&quot;, arial, sans-serif;\"><span style=\"background-color: #f3f3f3;\"><i><span class=\"a-size-base review-text\" data-hook=\"review-body\" style=\"box-sizing: border-box; line-height: 19px !important;\"></span></i></span></div><div aria-live=\"polite\" class=\"a-expander-collapsed-height a-row a-expander-container a-spacing-base a-expander-partial-collapse-container\" data-a-expander-collapsed-height=\"300\" data-a-expander-name=\"review_text_read_more\" style=\"box-sizing: border-box; height: auto; margin-bottom: 14px !important; max-height: none; overflow: hidden; position: relative; width: 550px;\"><div aria-expanded=\"true\" class=\"a-expander-content a-expander-partial-collapse-content a-expander-content-expanded\" data-hook=\"review-collapsed\" style=\"box-sizing: border-box; overflow: hidden; padding-bottom: 19px; position: relative;\"><div style=\"font-family: &quot;amazon ember&quot;, arial, sans-serif;\"><span class=\"a-size-base review-text\" data-hook=\"review-body\" style=\"background-color: #f3f3f3; box-sizing: border-box; line-height: 19px;\"><i>Echoing another reviewer, the custom code requirement means you learn their custom code rather than, you know, the standard modules numpy and scipy. For example, at least four separate classes are required, representing hundreds of lines of code, are required just to execute the first six lines of code in the book. All those lines do is define two signals, a cosine and a sine, sums them, then plots them. This, infuriatingly, hides some basic steps. Here's how you can create a cosine wave with frequency 440Hz:</i></span></div><div style=\"font-family: &quot;amazon ember&quot;, arial, sans-serif;\"><span class=\"a-size-base review-text\" data-hook=\"review-body\" style=\"background-color: #f3f3f3; box-sizing: border-box; line-height: 19px;\"><i><br style=\"box-sizing: border-box;\" /></i></span></div><span class=\"a-size-base review-text\" data-hook=\"review-body\" style=\"background-color: #f3f3f3; box-sizing: border-box; font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace; line-height: 19px;\"><i>duration = 0.5</i></span><br /><span class=\"a-size-base review-text\" data-hook=\"review-body\" style=\"background-color: #f3f3f3; box-sizing: border-box; font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace; line-height: 19px;\"><i>framerate = 11025</i></span><br /><span class=\"a-size-base review-text\" data-hook=\"review-body\" style=\"background-color: #f3f3f3; box-sizing: border-box; font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace; line-height: 19px;\"><i>n = round(duration*framerate)</i></span><br /><span class=\"a-size-base review-text\" data-hook=\"review-body\" style=\"background-color: #f3f3f3; box-sizing: border-box; font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace; line-height: 19px;\"><i>ts = np.arange(n)/framerate</i></span><br /><span class=\"a-size-base review-text\" data-hook=\"review-body\" style=\"background-color: #f3f3f3; box-sizing: border-box; font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace; line-height: 19px;\"><i>amp = 1.0</i></span><br /><span class=\"a-size-base review-text\" data-hook=\"review-body\" style=\"background-color: #f3f3f3; box-sizing: border-box; font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace; line-height: 19px;\"><i>freq = 440</i></span><br /><span class=\"a-size-base review-text\" data-hook=\"review-body\" style=\"background-color: #f3f3f3; box-sizing: border-box; font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace; line-height: 19px;\"><i>offset = 0.0</i></span><br /><span class=\"a-size-base review-text\" data-hook=\"review-body\" style=\"background-color: #f3f3f3; box-sizing: border-box; font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace; line-height: 19px;\"><i>cos_sig = amp * numpy.cos( 2*numpy.pi*ts*freq + offset)</i></span><br /><span class=\"a-size-base review-text\" data-hook=\"review-body\" style=\"background-color: #f3f3f3; box-sizing: border-box; font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace; line-height: 19px;\"><i>freq = 880</i></span><br /><span class=\"a-size-base review-text\" data-hook=\"review-body\" style=\"background-color: #f3f3f3; box-sizing: border-box; font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace; line-height: 19px;\"><i>sin_sig = amp * numpy.sin( 2*numpy.pi*ts*freq + offset)</i></span><br /><div style=\"font-family: &quot;amazon ember&quot;, arial, sans-serif;\"><span class=\"a-size-base review-text\" data-hook=\"review-body\" style=\"background-color: #f3f3f3; box-sizing: border-box; line-height: 19px;\"><i><br style=\"box-sizing: border-box;\" /></i></span></div><div style=\"font-family: &quot;amazon ember&quot;, arial, sans-serif;\"><span class=\"a-size-base review-text\" data-hook=\"review-body\" style=\"background-color: #f3f3f3; box-sizing: border-box; line-height: 19px;\"><i>Instead, these clowns have</i></span></div><div style=\"font-family: &quot;amazon ember&quot;, arial, sans-serif;\"><span class=\"a-size-base review-text\" data-hook=\"review-body\" style=\"background-color: #f3f3f3; box-sizing: border-box; line-height: 19px;\"><i><br style=\"box-sizing: border-box;\" /></i></span></div><span class=\"a-size-base review-text\" data-hook=\"review-body\" style=\"background-color: #f3f3f3; box-sizing: border-box; font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace; line-height: 19px;\"><i>cos_sig = thinkdsp.CosSignal(freq=440,amp=1.0,offset=0)</i></span><br /><span class=\"a-size-base review-text\" data-hook=\"review-body\" style=\"background-color: #f3f3f3; box-sizing: border-box; font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace; line-height: 19px;\"><i>sin_sig = thinkdsp.SinSignal(freq=440,amp=1.0,offset=0)</i></span><br /><span class=\"a-size-base review-text\" data-hook=\"review-body\" style=\"background-color: #f3f3f3; box-sizing: border-box; font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace; line-height: 19px;\"><i>mix = cos_sig + sin_sig</i></span><br /><div style=\"font-family: &quot;amazon ember&quot;, arial, sans-serif;\"><span class=\"a-size-base review-text\" data-hook=\"review-body\" style=\"background-color: #f3f3f3; box-sizing: border-box; line-height: 19px;\"><i><br style=\"box-sizing: border-box;\" /></i></span></div><div style=\"font-family: &quot;amazon ember&quot;, arial, sans-serif;\"><span class=\"a-size-base review-text\" data-hook=\"review-body\" style=\"background-color: #f3f3f3; box-sizing: border-box; line-height: 19px;\"><i>where CosSignal and SinSignal are custom classes, not functions, which inherits four separate classes, NONE of which are necessary, and all of which serve to make things more complex than necessary, on the pretense this makes things easier. The classes these class inherit are a generic Sinusoid and SumSignal classes, which inherits a Signal class, which depends on a Wave class, which performs plotting using pyplot in matplotlib. None of which make anything really any easier, but does serve to hide a lot of basic functionality, like hiding how to use numpy, matplotlib, and pyplot.</i></span></div><div style=\"font-family: &quot;amazon ember&quot;, arial, sans-serif;\"><span class=\"a-size-base review-text\" data-hook=\"review-body\" style=\"background-color: #f3f3f3; box-sizing: border-box; line-height: 19px;\"><i><br style=\"box-sizing: border-box;\" /></i></span></div><div style=\"font-family: &quot;amazon ember&quot;, arial, sans-serif;\"><span class=\"a-size-base review-text\" data-hook=\"review-body\" style=\"background-color: #f3f3f3; box-sizing: border-box; line-height: 19px;\"><i>In short, just to get through the first two pages, you have to have access to github to import their ridiculous thinkdsp, thinkplot, and thinkstats, totalling around 5500 lines of code, or you are just screwed and can't use this book. All decent teaching books develops code you need as necessary and do NOT require half a dozen files with thousands of lines of custom code just to get to page 2. What kind of clown does this when trying to write a book to show how to do basic signal processing? Someone not interested in teaching you DSP, but trying to show off their subpar programming skills by adding unnecessary complexity (a sure sign of a basic programmer, not a good).</i></span></div><div style=\"font-family: &quot;amazon ember&quot;, arial, sans-serif;\"><span class=\"a-size-base review-text\" data-hook=\"review-body\" style=\"background-color: #f3f3f3; box-sizing: border-box; line-height: 19px;\"><i><br style=\"box-sizing: border-box;\" /></i></span></div><div style=\"font-family: &quot;amazon ember&quot;, arial, sans-serif;\"><span class=\"a-size-base review-text\" data-hook=\"review-body\" style=\"background-color: #f3f3f3; box-sizing: border-box; line-height: 19px;\"><i>The authors openly admit their custom code is nothing more than wrappers in numpy and scipy, so the authors KNEW they were writing a crappy book and filling it with a LOT of unnecessary complexity. Bad code is bad code. Using bad code to teach makes bad teaching. It's obvious Allen B. Downey has spent his career in academia, where writing quality code doesn't matter.</i></span></div></div></div><span class=\"a-size-base review-text\" data-hook=\"review-body\" style=\"background-color: white; box-sizing: border-box; font-family: &quot;amazon ember&quot; , &quot;arial&quot; , sans-serif; line-height: 19px;\"></span><br /><div style=\"background-color: white; font-family: &quot;amazon ember&quot;, arial, sans-serif;\"></div></div><hr /><br />Well, at least he spelled my name right.<br /><br />Maybe I should explain why I think it's a good idea to provide a custom library along with a book like <i>Think DSP</i>.&nbsp; Importantly, the goal of the book is to help people learn the core ideas of signal processing; the software is a means to this end.<br /><br />Here's what I said in the preface:<br /><blockquote class=\"tr_bq\"><i>The premise of this book is that if you know how to program, you can use that skill to learn other things, and have fun doing it.</i>&nbsp;</blockquote><blockquote class=\"tr_bq\"><i>With a programming-based approach, I can present the most important ideas right away. By the end of the first chapter, you can analyze sound recordings and other signals, and generate new sounds. Each chapter introduces a new technique and an application you can apply to real signals. At each step you learn how to use a technique first, and then how it works.</i></blockquote>For example, in the first chapter, I introduce two objects defined in <a href=\"http://greenteapress.com/thinkdsp/thinkdsp.html\">thinkdsp.py</a>: <span style=\"color: #6aa84f; font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">Wave</span> and <span style=\"color: #6aa84f; font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">Spectrum</span>.&nbsp;&nbsp;<span style=\"color: #6aa84f; font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">Wave</span>&nbsp;provides a method called <span style=\"color: #6aa84f; font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">make_spectrum</span>&nbsp;that creates a Spectrum object, and&nbsp;<span style=\"color: #6aa84f; font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">Spectrum</span>&nbsp;provides <span style=\"color: #6aa84f; font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">make_wave</span>, which creates a&nbsp;<span style=\"color: #6aa84f; font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">Wave</span>.<br /><br />When readers use these objects and methods, they are implicitly learning one of the fundamental ideas of signal processing: that a&nbsp;<span style=\"color: #6aa84f; font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">Wave</span>&nbsp;and its&nbsp;<span style=\"color: #6aa84f; font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">Spectrum</span>&nbsp;are equivalent representations of the same information -- given one, you can always compute the other.<br /><br />This example demonstrates one reason I use custom libraries in my books: <b>The API is the lesson</b>.&nbsp; As you learn about these objects and how they interact, you are also learning the core ideas of the topic.<br /><br />Another reason I think these libraries are a good idea is that <b>they let me introduce ideas top-down</b>: that is, I can show what a method does -- and why it is useful -- first; then I can present details when they necessary or most useful.<br /><br />For example, I introduce the&nbsp;<span style=\"color: #6aa84f; font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">Spectrum</span>&nbsp;object in Chapter 1.&nbsp; I use it to apply a low pass filter, and the reader can hear what that sounds like.&nbsp; You can too, by <a href=\"https://mybinder.org/v2/gh/AllenDowney/ThinkDSP/master?filepath=chap01.ipynb\">running the Chapter 1 notebook on Binder</a>.<br /><br />In Chapter 2, I reveal that my&nbsp;<span style=\"color: #6aa84f; font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">make_spectrum</span>&nbsp;function is a thin wrapper on two NumPy functions, and present the source code:<br /><br /><pre class=\"verbatim\" style=\"margin-left: 0ex; margin-right: auto;\"><span class=\"c003\" style=\"color: #6aa84f;\">from np.fft import rfft, rfftfreq<br /><br /># class Wave:<br />    def make_spectrum(self):<br />        n = len(self.ys)<br />        d = 1 / self.framerate<br /><br />        hs = rfft(self.ys)<br />        fs = rfftfreq(n, d)<br /><br />        return Spectrum(hs, fs, self.framerate)</span></pre><br />At this point, anyone who prefers to use NumPy directly, rather than my wrappers, knows how.<br /><br />In Chapter 7, I unwrap one more layer and show how the FFT algorithm works.&nbsp; Why Chapter 7?&nbsp; Because I introduce correlation in Chapter 5, which helps me explain the Discrete Cosine Transform in Chapter 6, which helps me explain the Discrete Fourier Transform.<br /><br />Using custom libraries lets me organize the material in the way I think works best, based on my experience working with students and seeing how they learn.<br /><br />This example demonstrates another benefit of defining my own objects: <b>data encapsulation</b>.&nbsp; When you use NumPy's <span style=\"color: #6aa84f; font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">rfft</span> to compute a spectrum, you get an array of amplitudes, but not the frequencies they correspond to.&nbsp; You can call <span style=\"color: #6aa84f; font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">rfftfreq</span> to get the frequencies, and that's fine, but now you have two arrays that represent one spectrum.&nbsp; Wouldn't it be nice to wrap them up in an object?&nbsp; That's what a&nbsp;<span style=\"color: #6aa84f; font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">Spectrum</span>&nbsp;object is.<br /><br />Finally, I think these examples demonstrate good software engineering practice, particularly <b>bottom-up design</b>.&nbsp; When you work with libraries like NumPy, it is common and generally considered a good idea to define functions and objects that encapsulate data, hide details, eliminate repeated code, and create new abstractions.&nbsp; Paul Graham wrote about this idea in <a href=\"http://www.paulgraham.com/progbot.html\">one of his essays on software</a>:<br /><blockquote class=\"tr_bq\"><i>[...] you don't just write your program down toward the language, you also build the language up toward your program. [...] the boundary between language and program is drawn and redrawn, until eventually it comes to rest along [...] the natural frontiers of your problem. In the end your program will look as if the language had been designed for it.</i></blockquote>That's why, in the example that makes my correspondent so angry, it takes just three lines to create and add the signals; and more importantly, those lines contain exactly the information relevant to the operations and no more.&nbsp; I think that's good quality code.<br /><br />In summary, I provide custom libraries for my books because:<br /><br />1) They demonstrate good software engineering practice, including bottom-up design and data encapsulation.<br /><br />2) They let me present ideas top-down, showing how they are used before how they are implemented.<br /><br />3) And as readers learn the APIs I defined, they are implicitly learning the key ideas.<br /><br />I understand that not everyone agrees with this design decision, and maybe it doesn't work for everyone.&nbsp; But I am still surprised that it makes people so angry.<br /><br /><br /><br />",
  "link": [
    "",
    "",
    "",
    "",
    ""
  ],
  "author": {
    "name": "Allen Downey",
    "uri": "http://www.blogger.com/profile/01633071333405221858",
    "email": "noreply@blogger.com",
    "gd:image": ""
  },
  "thr:total": 1
}