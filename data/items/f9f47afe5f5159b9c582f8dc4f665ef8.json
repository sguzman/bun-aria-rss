{
  "title": "Building JSON in R: Three Methods",
  "description": "<p>When I set out to build <a href=\"https://github.com/randyzwitch/RSiteCatalyst\">RSiteCatalyst</a>, I had a few major goals: learn R, build <a href=\"http://cran.r-project.org/web/packages/RSiteCatalyst/index.html\">CRAN</a>-worthy package and learn the <a href=\"https://marketing.adobe.com/developer/en_US/documentation\">Adobe Analytics API</a>. As I reflect back on how the package has evolved over the past two years and what I’ve learned, I think my greatest learning was around how to deal with JSON (and strings in general).  </p>",
  "pubDate": "Tue, 13 May 2014 13:27:39 +0000",
  "link": "http://randyzwitch.com/r-json-jsonlite-sprintf-paste/",
  "guid": "http://randyzwitch.com/r-json-jsonlite-sprintf-paste/",
  "content": "<p>When I set out to build <a href=\"https://github.com/randyzwitch/RSiteCatalyst\">RSiteCatalyst</a>, I had a few major goals: learn R, build <a href=\"http://cran.r-project.org/web/packages/RSiteCatalyst/index.html\">CRAN</a>-worthy package and learn the <a href=\"https://marketing.adobe.com/developer/en_US/documentation\">Adobe Analytics API</a>. As I reflect back on how the package has evolved over the past two years and what I’ve learned, I think my greatest learning was around how to deal with JSON (and strings in general).  </p>\n\n<p>JSON is ubiquitous as a data-transfer mechanism over the web, and R does a decent job providing the functionality to not only read JSON but also to create JSON. There are at least three methods I know of to build JSON strings, and this post will cover the pros and cons of each method.</p>\n\n<h3 id=\"method-1-building-json-using-paste\">Method 1: Building JSON using paste</h3>\n\n<p>As a beginning R user, I didn’t have the awareness of how many great user-contributed packages are out there. So throughout the RSiteCatalyst source code you can see <a href=\"https://github.com/randyzwitch/RSiteCatalyst/blob/master/R/QueueOvertime.R#L75-78\">gems</a> like:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-r\" data-lang=\"r\"><table class=\"rouge-table\"><tbody><tr><td class=\"gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n</pre></td><td class=\"code\"><pre><span class=\"c1\">#\"metrics\" would be a user input into a function arguments</span><span class=\"w\">\n</span><span class=\"n\">metrics</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"nf\">c</span><span class=\"p\">(</span><span class=\"s2\">\"a\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">\"b\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">\"c\"</span><span class=\"p\">)</span><span class=\"w\">\n\n</span><span class=\"c1\">#Loop over the metrics list, appending proper curly braces</span><span class=\"w\">\n</span><span class=\"n\">metrics_conv</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">lapply</span><span class=\"p\">(</span><span class=\"n\">metrics</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">function</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">paste</span><span class=\"p\">(</span><span class=\"s1\">'{\"id\":'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s1\">'\"'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s1\">'\"'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s1\">'}'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">sep</span><span class=\"o\">=</span><span class=\"s2\">\"\"</span><span class=\"p\">))</span><span class=\"w\">\n\n</span><span class=\"c1\">#Collapse the list into a proper comma separated string</span><span class=\"w\">\n</span><span class=\"n\">metrics_final</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">paste</span><span class=\"p\">(</span><span class=\"n\">metrics_conv</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">collapse</span><span class=\"o\">=</span><span class=\"s2\">\", \"</span><span class=\"p\">)</span>\n</pre></td></tr></tbody></table></code></pre></figure>\n\n<p>The code above loops over a character vector (using <code class=\"language-plaintext highlighter-rouge\">lapply</code> instead of a for loop like a good R user!), appending curly braces, then flattening the list down to a string. While this code works, it’s a quite brittle way to build JSON. You end up needing to worry about matching quotation marks, remembering if you need curly braces, brackets or singletons…overall, it’s a maintenance nightmare to build strings this way.</p>\n\n<p>Of course, if you have a <em>really simple</em> JSON string you need to build, <code class=\"language-plaintext highlighter-rouge\">paste()</code> doesn’t have to be off-limits, but for a majority of the cases I’ve seen, it’s probably not a good idea.</p>\n\n<h3 id=\"method-2-building-json-using-sprintf\">Method 2: Building JSON using sprintf</h3>\n\n<p>Somewhere in the middle of building version 1 of RSiteCatalyst, I started learning Python. For those of you who aren’t familiar, Python has a <a href=\"https://docs.python.org/2/library/stdtypes.html#string-formatting\">string interpolation operator</a> <code class=\"language-plaintext highlighter-rouge\">%</code>, which allows you to do things like the following:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-python\" data-lang=\"python\"><table class=\"rouge-table\"><tbody><tr><td class=\"gutter gl\"><pre class=\"lineno\">1\n2\n3\n</pre></td><td class=\"code\"><pre><span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]:</span> <span class=\"k\">print</span> <span class=\"s\">\"Here's a string subtitution for my name: %s\"</span> <span class=\"o\">%</span><span class=\"p\">(</span><span class=\"s\">\"Randy\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]:</span> <span class=\"s\">\"Here's a string subtitution for my name: Randy\"</span>\n</pre></td></tr></tbody></table></code></pre></figure>\n\n<p>Thinking that this was the most useful thing I’d ever seen in programming, I naturally searched to see if R had the same functionality. Of course, I quickly learned that all C-based languages have <a href=\"http://en.wikipedia.org/wiki/Printf_format_string\"><code class=\"language-plaintext highlighter-rouge\">printf/sprintf</code></a>, and R is no exception. So I started <a href=\"https://github.com/randyzwitch/RSiteCatalyst/blob/master/R/QueueTrended.R#L115-119\">building JSON using sprintf</a> in the following manner:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-r\" data-lang=\"r\"><table class=\"rouge-table\"><tbody><tr><td class=\"gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n</pre></td><td class=\"code\"><pre><span class=\"n\">elements_list</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">sprintf</span><span class=\"p\">(</span><span class=\"s1\">'{\"id\":\"%s\",\n                          \"top\": \"%s\",\n                          \"startingWith\":\"%s\",\n                          \"search\":{\"type\":\"%s\", \"keywords\":[%s]}\n                          }'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">element</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">top</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">startingWith</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">searchType</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">searchKW2</span><span class=\"p\">)</span>\n</pre></td></tr></tbody></table></code></pre></figure>\n\n<p>In this example, we’re now passing R objects into the <code class=\"language-plaintext highlighter-rouge\">sprintf()</code> function, with <code class=\"language-plaintext highlighter-rouge\">%s</code> tokens everywhere we need to substitute text. This is certainly an improvement over <code class=\"language-plaintext highlighter-rouge\">paste()</code>, especially given that Adobe provides example JSON via their <a href=\"https://marketing.adobe.com/developer/en_US/get-started/api-explorer\">API explorer</a>. So I copied the example strings, replaced their examples with my tokens and voilà! Better JSON string building.</p>\n\n<h3 id=\"method-3-building-json-using-a-packagejsonlite-rjson-or-rjsonio\">Method 3: Building JSON using a package (jsonlite, rjson or RJSONIO)</h3>\n\n<p>While <code class=\"language-plaintext highlighter-rouge\">sprintf()</code> allowed for much easier JSON, there is still a frequent code smell in RSiteCatalyst, as evidenced by the <a href=\"https://github.com/randyzwitch/RSiteCatalyst/blob/master/R/GetTrafficVars.R#L31-39\">following</a>:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-r\" data-lang=\"r\"><table class=\"rouge-table\"><tbody><tr><td class=\"gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre></td><td class=\"code\"><pre><span class=\"c1\">#Converts report_suites to JSON</span><span class=\"w\">\n</span><span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nf\">length</span><span class=\"p\">(</span><span class=\"n\">report_suites</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"m\">1</span><span class=\"p\">){</span><span class=\"w\">\n  </span><span class=\"n\">report_suites</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">toJSON</span><span class=\"p\">(</span><span class=\"n\">report_suites</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"n\">report_suites</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">toJSON</span><span class=\"p\">(</span><span class=\"nf\">list</span><span class=\"p\">(</span><span class=\"n\">report_suites</span><span class=\"p\">))</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n\n</span><span class=\"c1\">#API request</span><span class=\"w\">\n</span><span class=\"n\">json</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">postRequest</span><span class=\"p\">(</span><span class=\"s2\">\"ReportSuite.GetTrafficVars\"</span><span class=\"p\">,</span><span class=\"n\">paste</span><span class=\"p\">(</span><span class=\"s1\">'{\"rsid_list\":'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">report_suites</span><span class=\"w\"> </span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s1\">'}'</span><span class=\"p\">))</span>\n</pre></td></tr></tbody></table></code></pre></figure>\n\n<p>At some point, I realized that using the <code class=\"language-plaintext highlighter-rouge\">toJSON()</code> function from <a href=\"http://cran.r-project.org/web/packages/rjson/index.html\">rjson</a> would take care of the formatting R objects to strings, yet I didn’t make the leap to understanding that I could build the <em>whole string</em> using R objects translated by <code class=\"language-plaintext highlighter-rouge\">toJSON()</code>! So I have more hard-to-maintain code where I’m checking the class/length of objects and formatting them. The efficient way to do this using rjson would be:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-r\" data-lang=\"r\"><table class=\"rouge-table\"><tbody><tr><td class=\"gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n</pre></td><td class=\"code\"><pre><span class=\"c1\">#Efficient method</span><span class=\"w\">\n</span><span class=\"n\">library</span><span class=\"p\">(</span><span class=\"n\">rjson</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"n\">report_suites</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"nf\">list</span><span class=\"p\">(</span><span class=\"n\">rsid_list</span><span class=\"o\">=</span><span class=\"nf\">c</span><span class=\"p\">(</span><span class=\"s2\">\"A\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">\"B\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">\"C\"</span><span class=\"p\">))</span><span class=\"w\">\n</span><span class=\"n\">request.body</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">toJSON</span><span class=\"p\">(</span><span class=\"n\">report_suites</span><span class=\"p\">)</span><span class=\"w\">\n\n</span><span class=\"c1\">#API request</span><span class=\"w\">\n</span><span class=\"n\">json</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">postRequest</span><span class=\"p\">(</span><span class=\"s2\">\"ReportSuite.GetTrafficVars\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">request.body</span><span class=\"p\">)</span>\n</pre></td></tr></tbody></table></code></pre></figure>\n\n<p>With the code above, we’re building JSON in a very R-looking manner; just R objects and functions, and in return getting the output we want. While it’s slightly less obvious what is being created by <code class=\"language-plaintext highlighter-rouge\">request.body</code>, there’s literally zero bracket-matching, quoting issues or anything else to worry about in building our JSON. That’s not to say that there isn’t a learning curve to using a JSON package, but I’d rather figure out whether I need a character vector or list than burn my eyes out looking for mismatched quotes and brackets!</p>\n\n<h3 id=\"collaborating-makes-you-a-better-programmer\">Collaborating Makes You A Better Programmer</h3>\n\n<p>Like any pursuit, you can get pretty far on your own through hard work and self-study. However, I wouldn’t be nearly where I am without collaborating with others (especially learning about how to build JSON properly in R!). A majority of the RSiteCatalyst code for the upcoming version 1.4 was re-written by <a href=\"https://github.com/WillemPaling\" title=\"Willem Paling GitHub\" target=\"_blank\">Willem Paling</a>, where he added consistency to keyword arguments, switched to <a href=\"http://cran.r-project.org/web/packages/jsonlite/index.html\" title=\"jsonlite CRAN\" target=\"_blank\">jsonlite</a> for better JSON parsing to Data Frames, and most importantly for the topic of this post, cleaned up the method of building all the required JSON strings!</p>\n\n<p>Edit 5/13: For a more thorough example of building complex JSON using jsonlite, check out <a href=\"https://github.com/randyzwitch/RSiteCatalyst/blob/version_1_4/R/QueueRanked.R#L67-114\" title=\"Complex R jsonlite example\" target=\"_blank\">this example</a> from the v1.4 branch of RSiteCatalyst. The linked example R code populates the required arguments from this <a href=\"https://gist.github.com/randyzwitch/762343d5e8d8501af522\" title=\"Example JSON call from Adobe API Explorer\" target=\"_blank\">JSON outline</a> provide by Adobe.</p>"
}