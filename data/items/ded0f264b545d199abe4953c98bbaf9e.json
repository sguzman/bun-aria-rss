{
  "title": "Recurrent Neural Networks in Tensorflow II",
  "link": "",
  "published": "2016-07-25T00:00:00-04:00",
  "updated": "2016-07-25T00:00:00-04:00",
  "author": {
    "name": "Silviu Pitis"
  },
  "id": "tag:r2rt.com,2016-07-25:/recurrent-neural-networks-in-tensorflow-ii.html",
  "summary": "This is the second in a series of posts about recurrent neural networks in Tensorflow. In this post, we will build upon our vanilla RNN by learning how to use Tensorflow's scan and dynamic_rnn models, upgrading the RNN cell and stacking multiple RNNs, and adding dropout and layer normalization. We will then use our upgraded RNN to generate some text, character by character.",
  "content": "<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"generator\" content=\"pandoc\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\">\n  <title></title>\n  <style type=\"text/css\">code{white-space: pre;}</style>\n  <style type=\"text/css\">\ndiv.sourceCode { overflow-x: auto; }\ntable.sourceCode, tr.sourceCode, td.lineNumbers, td.sourceCode {\n  margin: 0; padding: 0; vertical-align: baseline; border: none; }\ntable.sourceCode { width: 100%; line-height: 100%; }\ntd.lineNumbers { text-align: right; padding-right: 4px; padding-left: 4px; color: #aaaaaa; border-right: 1px solid #aaaaaa; }\ntd.sourceCode { padding-left: 5px; }\ncode > span.kw { color: #007020; font-weight: bold; } /* Keyword */\ncode > span.dt { color: #902000; } /* DataType */\ncode > span.dv { color: #40a070; } /* DecVal */\ncode > span.bn { color: #40a070; } /* BaseN */\ncode > span.fl { color: #40a070; } /* Float */\ncode > span.ch { color: #4070a0; } /* Char */\ncode > span.st { color: #4070a0; } /* String */\ncode > span.co { color: #60a0b0; font-style: italic; } /* Comment */\ncode > span.ot { color: #007020; } /* Other */\ncode > span.al { color: #ff0000; font-weight: bold; } /* Alert */\ncode > span.fu { color: #06287e; } /* Function */\ncode > span.er { color: #ff0000; font-weight: bold; } /* Error */\ncode > span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */\ncode > span.cn { color: #880000; } /* Constant */\ncode > span.sc { color: #4070a0; } /* SpecialChar */\ncode > span.vs { color: #4070a0; } /* VerbatimString */\ncode > span.ss { color: #bb6688; } /* SpecialString */\ncode > span.im { } /* Import */\ncode > span.va { color: #19177c; } /* Variable */\ncode > span.cf { color: #007020; font-weight: bold; } /* ControlFlow */\ncode > span.op { color: #666666; } /* Operator */\ncode > span.bu { } /* BuiltIn */\ncode > span.ex { } /* Extension */\ncode > span.pp { color: #bc7a00; } /* Preprocessor */\ncode > span.at { color: #7d9029; } /* Attribute */\ncode > span.do { color: #ba2121; font-style: italic; } /* Documentation */\ncode > span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */\ncode > span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */\ncode > span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */\n  </style>\n  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-MML-AM_CHTML\" type=\"text/javascript\"></script>\n  <!--[if lt IE 9]>\n    <script src=\"//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js\"></script>\n  <![endif]-->\n</head>\n<body>\n<p>This is the second in a series of posts about recurrent neural networks in Tensorflow. The first post lives <a href=\"https://r2rt.com/recurrent-neural-networks-in-tensorflow-i.html\">here</a>. In this post, we will build upon our vanilla RNN by learning how to use Tensorflow’s scan and dynamic_rnn models, upgrading the RNN cell and stacking multiple RNNs, and adding dropout and layer normalization. We will then use our upgraded RNN to generate some text, character by character.</p>\n<p><strong>Note 3/14/2017</strong>: This tutorial is quite a bit deprecated by changes to the TF api. Leaving it up since it may still be useful, and most changes to the API are cosmetic (biggest change is that many of the RNN cells and functions are in the tf.contrib.rnn module). There was also a change to the ptb_iterator. A (slightly modified) copy of the old version which should work until I update this tutorial is uploaded <a href=\"https://gist.github.com/spitis/2dd1720850154b25d2cec58d4b75c4a0\">here</a>.</p>\n<h3 id=\"recap-of-our-model\">Recap of our model</h3>\n<p>In the last post, we built a very simple, no frills RNN that was quickly able to learn to solve the toy task we created for it.</p>\n<p>Here is the formal statement of our model from last time:</p>\n<p><span class=\"math inline\">\\(S_t = \\text{tanh}(W(X_t \\ @ \\ S_{t-1}) + b_s)\\)</span></p>\n<p><span class=\"math inline\">\\(P_t = \\text{softmax}(US_t + b_p)\\)</span></p>\n<p>where <span class=\"math inline\">\\(@\\)</span> represents vector concatenation, <span class=\"math inline\">\\(X_t \\in R^n\\)</span> is an input vector, <span class=\"math inline\">\\(W \\in R^{d \\times (n + d)}, \\  b_s \\in R^d, \\ U \\in R^{n \\times d}\\)</span>, <span class=\"math inline\">\\(b_p \\in R^n\\)</span>, <span class=\"math inline\">\\(n\\)</span> is the size of the input and output vectors, and d is the size of the hidden state vector. At time step 0, <span class=\"math inline\">\\(S_{-1}\\)</span> (the initial state) is initialized as a vector of zeros.</p>\n<h3 id=\"task-and-data\">Task and data</h3>\n<p>This time around we will be building a character-level language model to generate character sequences, a la Andrej Karpathy’s <a href=\"https://github.com/karpathy/char-rnn\">char-rnn</a> (and see, e.g., a Tensorflow implementation by Sherjil Ozair <a href=\"https://github.com/sherjilozair/char-rnn-tensorflow\">here</a>).</p>\n<p>Why do something that’s already been done? Well, this is a much harder task than the toy model from last time. This model needs to handle long sequences and learn long time dependencies. That makes a great task for learning about adding features to our RNN, and seeing how our changes affect the results as we go.</p>\n<p>To start, let’s create our data generator. We’ll use the tiny-shakespeare corpus as our data, though we could use any plain text file. We’ll choose to use all of the characters in the text file as our vocabulary, treating lowercase and capital letters are separate characters. In practice, there may be some advantage to forcing the network to use similar representations for capital and lowercase letters by using the same one-hot representations for each, plus a binary flag to indicate whether or not the letter is a capital. Additionally, it is likely a good idea to restrict the vocabulary (i.e., the set of characters) used, by replacing uncommon characters with an UNK token (like a square: □).</p>\n<div class=\"sourceCode\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span class=\"co\">&quot;&quot;&quot;</span>\n<span class=\"co\">Imports</span>\n<span class=\"co\">&quot;&quot;&quot;</span>\n<span class=\"im\">import</span> numpy <span class=\"im\">as</span> np\n<span class=\"im\">import</span> tensorflow <span class=\"im\">as</span> tf\n<span class=\"op\">%</span>matplotlib inline\n<span class=\"im\">import</span> matplotlib.pyplot <span class=\"im\">as</span> plt\n<span class=\"im\">import</span> time\n<span class=\"im\">import</span> os\n<span class=\"im\">import</span> urllib.request\n<span class=\"im\">from</span> tensorflow.models.rnn.ptb <span class=\"im\">import</span> reader</code></pre></div>\n<div class=\"sourceCode\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span class=\"co\">&quot;&quot;&quot;</span>\n<span class=\"co\">Load and process data, utility functions</span>\n<span class=\"co\">&quot;&quot;&quot;</span>\n\nfile_url <span class=\"op\">=</span> <span class=\"st\">&#39;https://raw.githubusercontent.com/jcjohnson/torch-rnn/master/data/tiny-shakespeare.txt&#39;</span>\nfile_name <span class=\"op\">=</span> <span class=\"st\">&#39;tinyshakespeare.txt&#39;</span>\n<span class=\"cf\">if</span> <span class=\"kw\">not</span> os.path.exists(file_name):\n    urllib.request.urlretrieve(file_url, file_name)\n\n<span class=\"cf\">with</span> <span class=\"bu\">open</span>(file_name,<span class=\"st\">&#39;r&#39;</span>) <span class=\"im\">as</span> f:\n    raw_data <span class=\"op\">=</span> f.read()\n    <span class=\"bu\">print</span>(<span class=\"st\">&quot;Data length:&quot;</span>, <span class=\"bu\">len</span>(raw_data))\n\nvocab <span class=\"op\">=</span> <span class=\"bu\">set</span>(raw_data)\nvocab_size <span class=\"op\">=</span> <span class=\"bu\">len</span>(vocab)\nidx_to_vocab <span class=\"op\">=</span> <span class=\"bu\">dict</span>(<span class=\"bu\">enumerate</span>(vocab))\nvocab_to_idx <span class=\"op\">=</span> <span class=\"bu\">dict</span>(<span class=\"bu\">zip</span>(idx_to_vocab.values(), idx_to_vocab.keys()))\n\ndata <span class=\"op\">=</span> [vocab_to_idx[c] <span class=\"cf\">for</span> c <span class=\"kw\">in</span> raw_data]\n<span class=\"kw\">del</span> raw_data\n\n<span class=\"kw\">def</span> gen_epochs(n, num_steps, batch_size):\n    <span class=\"cf\">for</span> i <span class=\"kw\">in</span> <span class=\"bu\">range</span>(n):\n        <span class=\"cf\">yield</span> reader.ptb_iterator(data, batch_size, num_steps)\n\n<span class=\"kw\">def</span> reset_graph():\n    <span class=\"cf\">if</span> <span class=\"st\">&#39;sess&#39;</span> <span class=\"kw\">in</span> <span class=\"bu\">globals</span>() <span class=\"kw\">and</span> sess:\n        sess.close()\n    tf.reset_default_graph()\n\n<span class=\"kw\">def</span> train_network(g, num_epochs, num_steps <span class=\"op\">=</span> <span class=\"dv\">200</span>, batch_size <span class=\"op\">=</span> <span class=\"dv\">32</span>, verbose <span class=\"op\">=</span> <span class=\"va\">True</span>, save<span class=\"op\">=</span><span class=\"va\">False</span>):\n    tf.set_random_seed(<span class=\"dv\">2345</span>)\n    <span class=\"cf\">with</span> tf.Session() <span class=\"im\">as</span> sess:\n        sess.run(tf.initialize_all_variables())\n        training_losses <span class=\"op\">=</span> []\n        <span class=\"cf\">for</span> idx, epoch <span class=\"kw\">in</span> <span class=\"bu\">enumerate</span>(gen_epochs(num_epochs, num_steps, batch_size)):\n            training_loss <span class=\"op\">=</span> <span class=\"dv\">0</span>\n            steps <span class=\"op\">=</span> <span class=\"dv\">0</span>\n            training_state <span class=\"op\">=</span> <span class=\"va\">None</span>\n            <span class=\"cf\">for</span> X, Y <span class=\"kw\">in</span> epoch:\n                steps <span class=\"op\">+=</span> <span class=\"dv\">1</span>\n\n                feed_dict<span class=\"op\">=</span>{g[<span class=\"st\">&#39;x&#39;</span>]: X, g[<span class=\"st\">&#39;y&#39;</span>]: Y}\n                <span class=\"cf\">if</span> training_state <span class=\"kw\">is</span> <span class=\"kw\">not</span> <span class=\"va\">None</span>:\n                    feed_dict[g[<span class=\"st\">&#39;init_state&#39;</span>]] <span class=\"op\">=</span> training_state\n                training_loss_, training_state, _ <span class=\"op\">=</span> sess.run([g[<span class=\"st\">&#39;total_loss&#39;</span>],\n                                                      g[<span class=\"st\">&#39;final_state&#39;</span>],\n                                                      g[<span class=\"st\">&#39;train_step&#39;</span>]],\n                                                             feed_dict)\n                training_loss <span class=\"op\">+=</span> training_loss_\n            <span class=\"cf\">if</span> verbose:\n                <span class=\"bu\">print</span>(<span class=\"st\">&quot;Average training loss for Epoch&quot;</span>, idx, <span class=\"st\">&quot;:&quot;</span>, training_loss<span class=\"op\">/</span>steps)\n            training_losses.append(training_loss<span class=\"op\">/</span>steps)\n\n        <span class=\"cf\">if</span> <span class=\"bu\">isinstance</span>(save, <span class=\"bu\">str</span>):\n            g[<span class=\"st\">&#39;saver&#39;</span>].save(sess, save)\n\n    <span class=\"cf\">return</span> training_losses</code></pre></div>\n<pre><code>Data length: 1115394</code></pre>\n<h3 id=\"using-tf.scan-and-dynamic_rnn-to-speed-things-up\">Using tf.scan and dynamic_rnn to speed things up</h3>\n<p>Recall from <a href=\"https://r2rt.com/recurrent-neural-networks-in-tensorflow-i.html\">last post</a> that we represented each duplicate tensor of our RNN (e.g., the rnn inputs, rnn outputs, the predictions and the loss) as a <em>list</em> of tensors:</p>\n<figure>\n<img src=\"https://r2rt.com/static/images/BasicRNNLabeled.png\" alt=\"Diagram of Basic RNN - Labeled\" /><figcaption>Diagram of Basic RNN - Labeled</figcaption>\n</figure>\n<p>This worked quite well for our toy task, because our longest dependency was 7 steps back and we never really needed to backpropagate errors more than 10 steps. Even with a word-level RNN, using lists will probably be sufficient. See, e.g., my post on <a href=\"http://r2rt.com/styles-of-truncated-backpropagation.html\">Styles of Truncated Backpropagation</a>, where I build a 40-step graph with no problems. But for a character-level model, 40 characters isn’t a whole lot. We might want to capture much longer dependencies. So let’s see what happens when we build a graph that is 200 time steps wide:</p>\n<div class=\"sourceCode\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span class=\"kw\">def</span> build_basic_rnn_graph_with_list(\n    state_size <span class=\"op\">=</span> <span class=\"dv\">100</span>,\n    num_classes <span class=\"op\">=</span> vocab_size,\n    batch_size <span class=\"op\">=</span> <span class=\"dv\">32</span>,\n    num_steps <span class=\"op\">=</span> <span class=\"dv\">200</span>,\n    learning_rate <span class=\"op\">=</span> <span class=\"fl\">1e-4</span>):\n\n    reset_graph()\n\n    x <span class=\"op\">=</span> tf.placeholder(tf.int32, [batch_size, num_steps], name<span class=\"op\">=</span><span class=\"st\">&#39;input_placeholder&#39;</span>)\n    y <span class=\"op\">=</span> tf.placeholder(tf.int32, [batch_size, num_steps], name<span class=\"op\">=</span><span class=\"st\">&#39;labels_placeholder&#39;</span>)\n\n    x_one_hot <span class=\"op\">=</span> tf.one_hot(x, num_classes)\n    rnn_inputs <span class=\"op\">=</span> [tf.squeeze(i,squeeze_dims<span class=\"op\">=</span>[<span class=\"dv\">1</span>]) <span class=\"cf\">for</span> i <span class=\"kw\">in</span> tf.split(<span class=\"dv\">1</span>, num_steps, x_one_hot)]\n\n    cell <span class=\"op\">=</span> tf.nn.rnn_cell.BasicRNNCell(state_size)\n    init_state <span class=\"op\">=</span> cell.zero_state(batch_size, tf.float32)\n    rnn_outputs, final_state <span class=\"op\">=</span> tf.nn.rnn(cell, rnn_inputs, initial_state<span class=\"op\">=</span>init_state)\n\n    <span class=\"cf\">with</span> tf.variable_scope(<span class=\"st\">&#39;softmax&#39;</span>):\n        W <span class=\"op\">=</span> tf.get_variable(<span class=\"st\">&#39;W&#39;</span>, [state_size, num_classes])\n        b <span class=\"op\">=</span> tf.get_variable(<span class=\"st\">&#39;b&#39;</span>, [num_classes], initializer<span class=\"op\">=</span>tf.constant_initializer(<span class=\"fl\">0.0</span>))\n    logits <span class=\"op\">=</span> [tf.matmul(rnn_output, W) <span class=\"op\">+</span> b <span class=\"cf\">for</span> rnn_output <span class=\"kw\">in</span> rnn_outputs]\n\n    y_as_list <span class=\"op\">=</span> [tf.squeeze(i, squeeze_dims<span class=\"op\">=</span>[<span class=\"dv\">1</span>]) <span class=\"cf\">for</span> i <span class=\"kw\">in</span> tf.split(<span class=\"dv\">1</span>, num_steps, y)]\n\n    loss_weights <span class=\"op\">=</span> [tf.ones([batch_size]) <span class=\"cf\">for</span> i <span class=\"kw\">in</span> <span class=\"bu\">range</span>(num_steps)]\n    losses <span class=\"op\">=</span> tf.nn.seq2seq.sequence_loss_by_example(logits, y_as_list, loss_weights)\n    total_loss <span class=\"op\">=</span> tf.reduce_mean(losses)\n    train_step <span class=\"op\">=</span> tf.train.AdamOptimizer(learning_rate).minimize(total_loss)\n\n    <span class=\"cf\">return</span> <span class=\"bu\">dict</span>(\n        x <span class=\"op\">=</span> x,\n        y <span class=\"op\">=</span> y,\n        init_state <span class=\"op\">=</span> init_state,\n        final_state <span class=\"op\">=</span> final_state,\n        total_loss <span class=\"op\">=</span> total_loss,\n        train_step <span class=\"op\">=</span> train_step\n    )</code></pre></div>\n<div class=\"sourceCode\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\">t <span class=\"op\">=</span> time.time()\nbuild_basic_rnn_graph_with_list()\n<span class=\"bu\">print</span>(<span class=\"st\">&quot;It took&quot;</span>, time.time() <span class=\"op\">-</span> t, <span class=\"st\">&quot;seconds to build the graph.&quot;</span>)</code></pre></div>\n<pre><code>It took 5.626644849777222 seconds to build the graph.</code></pre>\n<p>It took over 5 seconds to build the graph of the most basic RNN model! This could bad… what happens when we move up to a 3-layer LSTM?</p>\n<p>Below, we switch out the RNN cell for a Multi-layer LSTM cell. We’ll go over the details of how to do this in the next section.</p>\n<div class=\"sourceCode\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span class=\"kw\">def</span> build_multilayer_lstm_graph_with_list(\n    state_size <span class=\"op\">=</span> <span class=\"dv\">100</span>,\n    num_classes <span class=\"op\">=</span> vocab_size,\n    batch_size <span class=\"op\">=</span> <span class=\"dv\">32</span>,\n    num_steps <span class=\"op\">=</span> <span class=\"dv\">200</span>,\n    num_layers <span class=\"op\">=</span> <span class=\"dv\">3</span>,\n    learning_rate <span class=\"op\">=</span> <span class=\"fl\">1e-4</span>):\n\n    reset_graph()\n\n    x <span class=\"op\">=</span> tf.placeholder(tf.int32, [batch_size, num_steps], name<span class=\"op\">=</span><span class=\"st\">&#39;input_placeholder&#39;</span>)\n    y <span class=\"op\">=</span> tf.placeholder(tf.int32, [batch_size, num_steps], name<span class=\"op\">=</span><span class=\"st\">&#39;labels_placeholder&#39;</span>)\n\n    embeddings <span class=\"op\">=</span> tf.get_variable(<span class=\"st\">&#39;embedding_matrix&#39;</span>, [num_classes, state_size])\n    rnn_inputs <span class=\"op\">=</span> [tf.squeeze(i) <span class=\"cf\">for</span> i <span class=\"kw\">in</span> tf.split(<span class=\"dv\">1</span>,\n                                num_steps, tf.nn.embedding_lookup(embeddings, x))]\n\n    cell <span class=\"op\">=</span> tf.nn.rnn_cell.LSTMCell(state_size, state_is_tuple<span class=\"op\">=</span><span class=\"va\">True</span>)\n    cell <span class=\"op\">=</span> tf.nn.rnn_cell.MultiRNNCell([cell] <span class=\"op\">*</span> num_layers, state_is_tuple<span class=\"op\">=</span><span class=\"va\">True</span>)\n    init_state <span class=\"op\">=</span> cell.zero_state(batch_size, tf.float32)\n    rnn_outputs, final_state <span class=\"op\">=</span> tf.nn.rnn(cell, rnn_inputs, initial_state<span class=\"op\">=</span>init_state)\n\n    <span class=\"cf\">with</span> tf.variable_scope(<span class=\"st\">&#39;softmax&#39;</span>):\n        W <span class=\"op\">=</span> tf.get_variable(<span class=\"st\">&#39;W&#39;</span>, [state_size, num_classes])\n        b <span class=\"op\">=</span> tf.get_variable(<span class=\"st\">&#39;b&#39;</span>, [num_classes], initializer<span class=\"op\">=</span>tf.constant_initializer(<span class=\"fl\">0.0</span>))\n    logits <span class=\"op\">=</span> [tf.matmul(rnn_output, W) <span class=\"op\">+</span> b <span class=\"cf\">for</span> rnn_output <span class=\"kw\">in</span> rnn_outputs]\n\n    y_as_list <span class=\"op\">=</span> [tf.squeeze(i, squeeze_dims<span class=\"op\">=</span>[<span class=\"dv\">1</span>]) <span class=\"cf\">for</span> i <span class=\"kw\">in</span> tf.split(<span class=\"dv\">1</span>, num_steps, y)]\n\n    loss_weights <span class=\"op\">=</span> [tf.ones([batch_size]) <span class=\"cf\">for</span> i <span class=\"kw\">in</span> <span class=\"bu\">range</span>(num_steps)]\n    losses <span class=\"op\">=</span> tf.nn.seq2seq.sequence_loss_by_example(logits, y_as_list, loss_weights)\n    total_loss <span class=\"op\">=</span> tf.reduce_mean(losses)\n    train_step <span class=\"op\">=</span> tf.train.AdamOptimizer(learning_rate).minimize(total_loss)\n\n    <span class=\"cf\">return</span> <span class=\"bu\">dict</span>(\n        x <span class=\"op\">=</span> x,\n        y <span class=\"op\">=</span> y,\n        init_state <span class=\"op\">=</span> init_state,\n        final_state <span class=\"op\">=</span> final_state,\n        total_loss <span class=\"op\">=</span> total_loss,\n        train_step <span class=\"op\">=</span> train_step\n    )</code></pre></div>\n<div class=\"sourceCode\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\">t <span class=\"op\">=</span> time.time()\nbuild_multilayer_lstm_graph_with_list()\n<span class=\"bu\">print</span>(<span class=\"st\">&quot;It took&quot;</span>, time.time() <span class=\"op\">-</span> t, <span class=\"st\">&quot;seconds to build the graph.&quot;</span>)</code></pre></div>\n<pre><code>It took 25.640846967697144 seconds to build the graph.</code></pre>\n<p>Yikes, almost 30 seconds.</p>\n<p>Now this isn’t that big of an issue for training, because we only need to build the graph once. It could be a big issue, however, if we need to build the graph multiple times at test time.</p>\n<p>To get around this long compile time, Tensorflow allows us to create the graph at runtime. Here is a quick demonstration of the difference, using Tensorflow’s dynamic_rnn function:</p>\n<div class=\"sourceCode\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span class=\"kw\">def</span> build_multilayer_lstm_graph_with_dynamic_rnn(\n    state_size <span class=\"op\">=</span> <span class=\"dv\">100</span>,\n    num_classes <span class=\"op\">=</span> vocab_size,\n    batch_size <span class=\"op\">=</span> <span class=\"dv\">32</span>,\n    num_steps <span class=\"op\">=</span> <span class=\"dv\">200</span>,\n    num_layers <span class=\"op\">=</span> <span class=\"dv\">3</span>,\n    learning_rate <span class=\"op\">=</span> <span class=\"fl\">1e-4</span>):\n\n    reset_graph()\n\n    x <span class=\"op\">=</span> tf.placeholder(tf.int32, [batch_size, num_steps], name<span class=\"op\">=</span><span class=\"st\">&#39;input_placeholder&#39;</span>)\n    y <span class=\"op\">=</span> tf.placeholder(tf.int32, [batch_size, num_steps], name<span class=\"op\">=</span><span class=\"st\">&#39;labels_placeholder&#39;</span>)\n\n    embeddings <span class=\"op\">=</span> tf.get_variable(<span class=\"st\">&#39;embedding_matrix&#39;</span>, [num_classes, state_size])\n\n    <span class=\"co\"># Note that our inputs are no longer a list, but a tensor of dims batch_size x num_steps x state_size</span>\n    rnn_inputs <span class=\"op\">=</span> tf.nn.embedding_lookup(embeddings, x)\n\n    cell <span class=\"op\">=</span> tf.nn.rnn_cell.LSTMCell(state_size, state_is_tuple<span class=\"op\">=</span><span class=\"va\">True</span>)\n    cell <span class=\"op\">=</span> tf.nn.rnn_cell.MultiRNNCell([cell] <span class=\"op\">*</span> num_layers, state_is_tuple<span class=\"op\">=</span><span class=\"va\">True</span>)\n    init_state <span class=\"op\">=</span> cell.zero_state(batch_size, tf.float32)\n    rnn_outputs, final_state <span class=\"op\">=</span> tf.nn.dynamic_rnn(cell, rnn_inputs, initial_state<span class=\"op\">=</span>init_state)\n\n    <span class=\"cf\">with</span> tf.variable_scope(<span class=\"st\">&#39;softmax&#39;</span>):\n        W <span class=\"op\">=</span> tf.get_variable(<span class=\"st\">&#39;W&#39;</span>, [state_size, num_classes])\n        b <span class=\"op\">=</span> tf.get_variable(<span class=\"st\">&#39;b&#39;</span>, [num_classes], initializer<span class=\"op\">=</span>tf.constant_initializer(<span class=\"fl\">0.0</span>))\n\n    <span class=\"co\">#reshape rnn_outputs and y so we can get the logits in a single matmul</span>\n    rnn_outputs <span class=\"op\">=</span> tf.reshape(rnn_outputs, [<span class=\"op\">-</span><span class=\"dv\">1</span>, state_size])\n    y_reshaped <span class=\"op\">=</span> tf.reshape(y, [<span class=\"op\">-</span><span class=\"dv\">1</span>])\n\n    logits <span class=\"op\">=</span> tf.matmul(rnn_outputs, W) <span class=\"op\">+</span> b\n\n    total_loss <span class=\"op\">=</span> tf.reduce_mean(tf.nn.sparse_softmax_cross_entropy_with_logits(logits, y_reshaped))\n    train_step <span class=\"op\">=</span> tf.train.AdamOptimizer(learning_rate).minimize(total_loss)\n\n    <span class=\"cf\">return</span> <span class=\"bu\">dict</span>(\n        x <span class=\"op\">=</span> x,\n        y <span class=\"op\">=</span> y,\n        init_state <span class=\"op\">=</span> init_state,\n        final_state <span class=\"op\">=</span> final_state,\n        total_loss <span class=\"op\">=</span> total_loss,\n        train_step <span class=\"op\">=</span> train_step\n    )</code></pre></div>\n<div class=\"sourceCode\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\">t <span class=\"op\">=</span> time.time()\nbuild_multilayer_lstm_graph_with_dynamic_rnn()\n<span class=\"bu\">print</span>(<span class=\"st\">&quot;It took&quot;</span>, time.time() <span class=\"op\">-</span> t, <span class=\"st\">&quot;seconds to build the graph.&quot;</span>)</code></pre></div>\n<pre><code>It took 0.5314393043518066 seconds to build the graph.</code></pre>\n<p>Much better. One would think that pushing the graph construction to execution time would cause execution of the graph to go slower, but in this case, using dynamic_rnn actually speeds things up:</p>\n<div class=\"sourceCode\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\">g <span class=\"op\">=</span> build_multilayer_lstm_graph_with_list()\nt <span class=\"op\">=</span> time.time()\ntrain_network(g, <span class=\"dv\">3</span>)\n<span class=\"bu\">print</span>(<span class=\"st\">&quot;It took&quot;</span>, time.time() <span class=\"op\">-</span> t, <span class=\"st\">&quot;seconds to train for 3 epochs.&quot;</span>)</code></pre></div>\n<pre><code>Average training loss for Epoch 0 : 3.53323210245\nAverage training loss for Epoch 1 : 3.31435756163\nAverage training loss for Epoch 2 : 3.21755325109\nIt took 117.78161263465881 seconds to train for 3 epochs.</code></pre>\n<div class=\"sourceCode\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\">g <span class=\"op\">=</span> build_multilayer_lstm_graph_with_dynamic_rnn()\nt <span class=\"op\">=</span> time.time()\ntrain_network(g, <span class=\"dv\">3</span>)\n<span class=\"bu\">print</span>(<span class=\"st\">&quot;It took&quot;</span>, time.time() <span class=\"op\">-</span> t, <span class=\"st\">&quot;seconds to train for 3 epochs.&quot;</span>)</code></pre></div>\n<pre><code>Average training loss for Epoch 0 : 3.55792756053\nAverage training loss for Epoch 1 : 3.3225021006\nAverage training loss for Epoch 2 : 3.28286816745\nIt took 96.69413661956787 seconds to train for 3 epochs.</code></pre>\n<p>It’s not a breeze to work through and understand the dynamic_rnn code (which lives <a href=\"https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/ops/rnn_cell.py\">here</a>), but we can obtain a similar result ourselves by using tf.scan (dynamic_rnn does not use scan). Scan runs just a tad slower than Tensorflow’s optimized code, but is easier to understand and write yourself.</p>\n<p>Scan is a higher-order function that you might be familiar with if you’ve done any programming in OCaml, Haskell or the like. In general, it takes a function (<span class=\"math inline\">\\(f: (x_t, y_{t-1}) \\mapsto y_t\\)</span>), a sequence (<span class=\"math inline\">\\([x_0, x_1 \\dots x_n]\\)</span>) and an initial value (<span class=\"math inline\">\\(y_{-1}\\)</span>) and returns a sequence (<span class=\"math inline\">\\([y_0, y_1 \\dots y_n]\\)</span>) according to the rule: <span class=\"math inline\">\\(y_t = f(x_t, y_{t-1})\\)</span>. In Tensorflow, scan treats the first dimension of a Tensor as the sequence. Thus, if fed a Tensor of shape [n, m, o] as the sequence, scan would unpack it into a sequence of n-tensors, each with shape [m, o]. You can learn more about Tensorflow’s scan <a href=\"https://github.com/tensorflow/tensorflow/blob/master/tensorflow/g3doc/api_docs/python/functional_ops.md#tfscanfn-elems-initializernone-parallel_iterations10-back_proptrue-swap_memoryfalse-namenone-scan\">here</a>.</p>\n<p>Below, I use scan with an LSTM so as to compare to the dynamic_rnn using Tensorflow above. Because LSTMs store their state in a 2-tuple, and we’re using a 3-layer network, the scan function produces, as <code>final_states</code> below, a 3-tuple (one for each layer) of 2-tuples (one for each LSTM state), each of shape [num_steps, batch_size, state_size]. We need only the last state, which is why we unpack, slice and repack <code>final_states</code> to get <code>final_state</code> below.</p>\n<p>Another thing to note is that scan produces rnn_outputs with shape [num_steps, batch_size, state_size], whereas the dynamic_rnn produces rnn_outputs with shape [batch_size, num_steps, state_size] (the first two dimensions are switched). Dynamic_rnn has the flexibility to switch this behavior, using the “time_major” argument. Tf.scan does not have this flexibility, which is why we transpose <code>rnn_inputs</code> and <code>y</code> in the code below.</p>\n<div class=\"sourceCode\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span class=\"kw\">def</span> build_multilayer_lstm_graph_with_scan(\n    state_size <span class=\"op\">=</span> <span class=\"dv\">100</span>,\n    num_classes <span class=\"op\">=</span> vocab_size,\n    batch_size <span class=\"op\">=</span> <span class=\"dv\">32</span>,\n    num_steps <span class=\"op\">=</span> <span class=\"dv\">200</span>,\n    num_layers <span class=\"op\">=</span> <span class=\"dv\">3</span>,\n    learning_rate <span class=\"op\">=</span> <span class=\"fl\">1e-4</span>):\n\n    reset_graph()\n\n    x <span class=\"op\">=</span> tf.placeholder(tf.int32, [batch_size, num_steps], name<span class=\"op\">=</span><span class=\"st\">&#39;input_placeholder&#39;</span>)\n    y <span class=\"op\">=</span> tf.placeholder(tf.int32, [batch_size, num_steps], name<span class=\"op\">=</span><span class=\"st\">&#39;labels_placeholder&#39;</span>)\n\n    embeddings <span class=\"op\">=</span> tf.get_variable(<span class=\"st\">&#39;embedding_matrix&#39;</span>, [num_classes, state_size])\n\n    rnn_inputs <span class=\"op\">=</span> tf.nn.embedding_lookup(embeddings, x)\n\n    cell <span class=\"op\">=</span> tf.nn.rnn_cell.LSTMCell(state_size, state_is_tuple<span class=\"op\">=</span><span class=\"va\">True</span>)\n    cell <span class=\"op\">=</span> tf.nn.rnn_cell.MultiRNNCell([cell] <span class=\"op\">*</span> num_layers, state_is_tuple<span class=\"op\">=</span><span class=\"va\">True</span>)\n    init_state <span class=\"op\">=</span> cell.zero_state(batch_size, tf.float32)\n    rnn_outputs, final_states <span class=\"op\">=</span> <span class=\"op\">\\</span>\n        tf.scan(<span class=\"kw\">lambda</span> a, x: cell(x, a[<span class=\"dv\">1</span>]),\n                tf.transpose(rnn_inputs, [<span class=\"dv\">1</span>,<span class=\"dv\">0</span>,<span class=\"dv\">2</span>]),\n                initializer<span class=\"op\">=</span>(tf.zeros([batch_size, state_size]), init_state))\n\n    <span class=\"co\"># there may be a better way to do this:</span>\n    final_state <span class=\"op\">=</span> <span class=\"bu\">tuple</span>([tf.nn.rnn_cell.LSTMStateTuple(\n                  tf.squeeze(tf.<span class=\"bu\">slice</span>(c, [num_steps<span class=\"dv\">-1</span>,<span class=\"dv\">0</span>,<span class=\"dv\">0</span>], [<span class=\"dv\">1</span>, batch_size, state_size])),\n                  tf.squeeze(tf.<span class=\"bu\">slice</span>(h, [num_steps<span class=\"dv\">-1</span>,<span class=\"dv\">0</span>,<span class=\"dv\">0</span>], [<span class=\"dv\">1</span>, batch_size, state_size])))\n                       <span class=\"cf\">for</span> c, h <span class=\"kw\">in</span> final_states])\n\n    <span class=\"cf\">with</span> tf.variable_scope(<span class=\"st\">&#39;softmax&#39;</span>):\n        W <span class=\"op\">=</span> tf.get_variable(<span class=\"st\">&#39;W&#39;</span>, [state_size, num_classes])\n        b <span class=\"op\">=</span> tf.get_variable(<span class=\"st\">&#39;b&#39;</span>, [num_classes], initializer<span class=\"op\">=</span>tf.constant_initializer(<span class=\"fl\">0.0</span>))\n\n    rnn_outputs <span class=\"op\">=</span> tf.reshape(rnn_outputs, [<span class=\"op\">-</span><span class=\"dv\">1</span>, state_size])\n    y_reshaped <span class=\"op\">=</span> tf.reshape(tf.transpose(y,[<span class=\"dv\">1</span>,<span class=\"dv\">0</span>]), [<span class=\"op\">-</span><span class=\"dv\">1</span>])\n\n    logits <span class=\"op\">=</span> tf.matmul(rnn_outputs, W) <span class=\"op\">+</span> b\n\n    total_loss <span class=\"op\">=</span> tf.reduce_mean(tf.nn.sparse_softmax_cross_entropy_with_logits(logits, y_reshaped))\n    train_step <span class=\"op\">=</span> tf.train.AdamOptimizer(learning_rate).minimize(total_loss)\n\n    <span class=\"cf\">return</span> <span class=\"bu\">dict</span>(\n        x <span class=\"op\">=</span> x,\n        y <span class=\"op\">=</span> y,\n        init_state <span class=\"op\">=</span> init_state,\n        final_state <span class=\"op\">=</span> final_state,\n        total_loss <span class=\"op\">=</span> total_loss,\n        train_step <span class=\"op\">=</span> train_step\n    )</code></pre></div>\n<div class=\"sourceCode\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\">t <span class=\"op\">=</span> time.time()\ng <span class=\"op\">=</span> build_multilayer_lstm_graph_with_scan()\n<span class=\"bu\">print</span>(<span class=\"st\">&quot;It took&quot;</span>, time.time() <span class=\"op\">-</span> t, <span class=\"st\">&quot;seconds to build the graph.&quot;</span>)\nt <span class=\"op\">=</span> time.time()\ntrain_network(g, <span class=\"dv\">3</span>)\n<span class=\"bu\">print</span>(<span class=\"st\">&quot;It took&quot;</span>, time.time() <span class=\"op\">-</span> t, <span class=\"st\">&quot;seconds to train for 3 epochs.&quot;</span>)</code></pre></div>\n<pre><code>It took 0.6475389003753662 seconds to build the graph.\nAverage training loss for Epoch 0 : 3.55362293501\nAverage training loss for Epoch 1 : 3.32045680079\nAverage training loss for Epoch 2 : 3.27433713688\nIt took 101.60246014595032 seconds to train for 3 epochs.</code></pre>\n<p>Using scan was only marginally slower than using dynamic_rnn, and gives us the flexibility and understanding to tweak the code if we ever need to (e.g., if for some reason we wanted to create a skip connection from the state at timestep t-2 to timestep t, it would be easy to do with scan).</p>\n<h3 id=\"upgrading-the-rnn-cell\">Upgrading the RNN cell</h3>\n<p>Above, we seamlessly swapped out the BasicRNNCell we were using for a Multi-layered LSTM cell. This was possible because the RNN cells conform to a general structure: every RNN cell is a function of the current input, <span class=\"math inline\">\\(X_t\\)</span>, and the prior state, <span class=\"math inline\">\\(S_{t-1}\\)</span>, that outputs a current state, <span class=\"math inline\">\\(S_{t}\\)</span>, and a current output, <span class=\"math inline\">\\(Y_t\\)</span>. Thus, in the same way that we can swap out activation functions in a feedforward net (e.g., change the tanh activation to a sigmoid or a relu activation), we can swap out the entire recurrence function (cell) in an RNN.</p>\n<p>Note that while for basic RNN cells, the current output equals the current state (<span class=\"math inline\">\\(Y_t = S_t\\)</span>), this does not have to be the case. We’ll see how LSTMs and multi-layered RNNs diverge from this below.</p>\n<p>Two popular choices for RNN cells are the GRU cell and the LSTM cell. By using gates, GRU and LSTM cells avoid the vanishing gradient problem and allow the network to learn longer-term dependencies. Their internals are quite complicated, and I would refer you to my post <a href=\"https://r2rt.com/written-memories-understanding-deriving-and-extending-the-lstm.html\">Written Memories: Understanding, Deriving and Extending the LSTM</a> for a good starting point to learn about them.</p>\n<p>All we have to do to upgrade our vanilla RNN cell is to replace this line:</p>\n<pre><code>cell = tf.nn.rnn_cell.BasicRNNCell(state_size)</code></pre>\n<p>with this for LSTM:</p>\n<pre><code>cell = tf.nn.rnn_cell.LSTMCell(state_size)</code></pre>\n<p>or this for GRU:</p>\n<pre><code>cell = tf.nn.rnn_cell.GRUCell(state_size)</code></pre>\n<p>The LSTM keeps two sets of internal state vectors, <span class=\"math inline\">\\(c\\)</span> (for memory <strong>c</strong>ell or <strong>c</strong>onstant error carousel) and <span class=\"math inline\">\\(h\\)</span> (for <strong>h</strong>idden state). By default, they are concatenated into a single vector, but as of this writing, using the default arguments to LSTMCell will produce a warning message:</p>\n<pre><code>WARNING:tensorflow:&lt;tensorflow.python.ops.rnn_cell.LSTMCell object at 0x7faade1708d0&gt;: Using a concatenated state is slower and will soon be deprecated.  Use state_is_tuple=True.</code></pre>\n<p>This error tells us that it’s faster to represent the LSTM state as a tuple of <span class=\"math inline\">\\(c\\)</span> and <span class=\"math inline\">\\(h\\)</span>, rather than as a concatenation of <span class=\"math inline\">\\(c\\)</span> and <span class=\"math inline\">\\(h\\)</span>. You can tack on the argument <code>state_is_tuple=True</code> to have it do that.</p>\n<p>By using a tuple for the state, we can also easily replace the base cell with a “MultiRNNCell” for multiple layers. To see why this works, consider that while a single cell:</p>\n<figure>\n<img src=\"https://r2rt.com/static/images/RNN_BasicRNNCell.png\" alt=\"Diagram of Basic RNN Cell\" /><figcaption>Diagram of Basic RNN Cell</figcaption>\n</figure>\n<p>looks different from a two cells stacked on top of each other:</p>\n<figure>\n<img src=\"https://r2rt.com/static/images/RNN_MultiRNNCellUngrouped.png\" alt=\"Diagram of Multi RNN Cell 1\" /><figcaption>Diagram of Multi RNN Cell 1</figcaption>\n</figure>\n<p>we can wrap the two cells into a single two-layer cell to make them look and behave as a single cell:</p>\n<figure>\n<img src=\"https://r2rt.com/static/images/RNN_MultiRNNCellGrouped.png\" alt=\"Diagram of Multi RNN Cell 2\" /><figcaption>Diagram of Multi RNN Cell 2</figcaption>\n</figure>\n<p>To make this switch, we call <code>tf.nn.rnn_cell.MultiRNNCell</code>, which takes a <em>list</em> of RNNCells as its inputs and wraps them into a single cell:</p>\n<pre><code>cell = tf.nn.rnn_cell.MultiRNNCell([tf.nn.rnn_cell.BasicRNNCell(state_size)] * num_layers)</code></pre>\n<p>Note that if you are wrapping an LSTMCell that uses <code>state_is_tuple=True</code>, you should pass this same argument to the MultiRNNCell as well.</p>\n<h3 id=\"writing-a-custom-rnn-cell\">Writing a custom RNN cell</h3>\n<p>It’s almost too easy to use the standard GRU or LSTM cells, so let’s define our own RNN cell. Here’s a random idea that may or may not work: starting with a GRU cell, instead of taking a single transformation of its input, we enable it to take a weighted average of multiple transformations of its input. That is, using the notation from <a href=\"http://arxiv.org/pdf/1406.1078v3.pdf\">Cho et al. (2014)</a>, instead of using <span class=\"math inline\">\\(Wx\\)</span> in our candidate state, <span class=\"math inline\">\\(\\tilde h^{(t)} = \\text{tanh}(Wx + U(r \\odot h^{(t-1)})\\)</span>, we use a weighted average of <span class=\"math inline\">\\(W_1 x, \\ W_2 x \\dots W_n x\\)</span> for some n. In other words, we will replace <span class=\"math inline\">\\(Wx\\)</span> with <span class=\"math inline\">\\(\\Sigma\\lambda_iW_ix\\)</span> for some weights <span class=\"math inline\">\\(\\lambda_i\\)</span> that sum to 1. The vector of weights, <span class=\"math inline\">\\(\\lambda\\)</span>, will be calculated as <span class=\"math inline\">\\(\\lambda = \\text{softmax}(W_{avg}x^{(t)} + U_{avg}h^{(t-1)} + b)\\)</span>. The idea is that we might benefit from treat the input differently in different scenarios (e.g., we may want to treat verbs differently than nouns).</p>\n<p>To write the custom cell, we need to extend tf.nn.rnn_cell.RNNCell. Specifically, we need to fill in 3 abstract methods and write an <code>__init__</code> method (take a look at the Tensorflow code <a href=\"https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/ops/rnn_cell.py\">here</a>). First, let’s start with a GRU cell, adapted from Tensorflow’s implementation:</p>\n<div class=\"sourceCode\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span class=\"kw\">class</span> GRUCell(tf.nn.rnn_cell.RNNCell):\n    <span class=\"co\">&quot;&quot;&quot;Gated Recurrent Unit cell (cf. http://arxiv.org/abs/1406.1078).&quot;&quot;&quot;</span>\n\n    <span class=\"kw\">def</span> <span class=\"fu\">__init__</span>(<span class=\"va\">self</span>, num_units):\n        <span class=\"va\">self</span>._num_units <span class=\"op\">=</span> num_units\n\n    <span class=\"at\">@property</span>\n    <span class=\"kw\">def</span> state_size(<span class=\"va\">self</span>):\n        <span class=\"cf\">return</span> <span class=\"va\">self</span>._num_units\n\n    <span class=\"at\">@property</span>\n    <span class=\"kw\">def</span> output_size(<span class=\"va\">self</span>):\n        <span class=\"cf\">return</span> <span class=\"va\">self</span>._num_units\n\n    <span class=\"kw\">def</span> <span class=\"fu\">__call__</span>(<span class=\"va\">self</span>, inputs, state, scope<span class=\"op\">=</span><span class=\"va\">None</span>):\n        <span class=\"cf\">with</span> tf.variable_scope(scope <span class=\"kw\">or</span> <span class=\"bu\">type</span>(<span class=\"va\">self</span>).<span class=\"va\">__name__</span>):  <span class=\"co\"># &quot;GRUCell&quot;</span>\n            <span class=\"cf\">with</span> tf.variable_scope(<span class=\"st\">&quot;Gates&quot;</span>):  <span class=\"co\"># Reset gate and update gate.</span>\n                <span class=\"co\"># We start with bias of 1.0 to not reset and not update.</span>\n                ru <span class=\"op\">=</span> tf.nn.rnn_cell._linear([inputs, state],\n                                        <span class=\"dv\">2</span> <span class=\"op\">*</span> <span class=\"va\">self</span>._num_units, <span class=\"va\">True</span>, <span class=\"fl\">1.0</span>)\n                ru <span class=\"op\">=</span> tf.nn.sigmoid(ru)\n                r, u <span class=\"op\">=</span> tf.split(<span class=\"dv\">1</span>, <span class=\"dv\">2</span>, ru)\n            <span class=\"cf\">with</span> tf.variable_scope(<span class=\"st\">&quot;Candidate&quot;</span>):\n                c <span class=\"op\">=</span> tf.nn.tanh(tf.nn.rnn_cell._linear([inputs, r <span class=\"op\">*</span> state],\n                                             <span class=\"va\">self</span>._num_units, <span class=\"va\">True</span>))\n            new_h <span class=\"op\">=</span> u <span class=\"op\">*</span> state <span class=\"op\">+</span> (<span class=\"dv\">1</span> <span class=\"op\">-</span> u) <span class=\"op\">*</span> c\n        <span class=\"cf\">return</span> new_h, new_h</code></pre></div>\n<p>We modify the <code>__init__</code> method to take a parameter <span class=\"math inline\">\\(n\\)</span> at initialization, which will determine the number of transformation matrices <span class=\"math inline\">\\(W_i\\)</span> it will create:</p>\n<pre><code>def __init__(self, num_units, num_weights):\n    self._num_units = num_units\n    self._num_weights = num_weights</code></pre>\n<p>Then, we modify the <code>Candidate</code> variable scope of the <code>__call__</code> method to do a weighted average as shown below (note that all of the <span class=\"math inline\">\\(W_i\\)</span> matrices are created as a single variable and then split into multiple tensors):</p>\n<div class=\"sourceCode\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span class=\"kw\">class</span> CustomCell(tf.nn.rnn_cell.RNNCell):\n    <span class=\"co\">&quot;&quot;&quot;Gated Recurrent Unit cell (cf. http://arxiv.org/abs/1406.1078).&quot;&quot;&quot;</span>\n\n    <span class=\"kw\">def</span> <span class=\"fu\">__init__</span>(<span class=\"va\">self</span>, num_units, num_weights):\n        <span class=\"va\">self</span>._num_units <span class=\"op\">=</span> num_units\n        <span class=\"va\">self</span>._num_weights <span class=\"op\">=</span> num_weights\n\n    <span class=\"at\">@property</span>\n    <span class=\"kw\">def</span> state_size(<span class=\"va\">self</span>):\n        <span class=\"cf\">return</span> <span class=\"va\">self</span>._num_units\n\n    <span class=\"at\">@property</span>\n    <span class=\"kw\">def</span> output_size(<span class=\"va\">self</span>):\n        <span class=\"cf\">return</span> <span class=\"va\">self</span>._num_units\n\n    <span class=\"kw\">def</span> <span class=\"fu\">__call__</span>(<span class=\"va\">self</span>, inputs, state, scope<span class=\"op\">=</span><span class=\"va\">None</span>):\n        <span class=\"cf\">with</span> tf.variable_scope(scope <span class=\"kw\">or</span> <span class=\"bu\">type</span>(<span class=\"va\">self</span>).<span class=\"va\">__name__</span>):  <span class=\"co\"># &quot;GRUCell&quot;</span>\n            <span class=\"cf\">with</span> tf.variable_scope(<span class=\"st\">&quot;Gates&quot;</span>):  <span class=\"co\"># Reset gate and update gate.</span>\n                <span class=\"co\"># We start with bias of 1.0 to not reset and not update.</span>\n                ru <span class=\"op\">=</span> tf.nn.rnn_cell._linear([inputs, state],\n                                        <span class=\"dv\">2</span> <span class=\"op\">*</span> <span class=\"va\">self</span>._num_units, <span class=\"va\">True</span>, <span class=\"fl\">1.0</span>)\n                ru <span class=\"op\">=</span> tf.nn.sigmoid(ru)\n                r, u <span class=\"op\">=</span> tf.split(<span class=\"dv\">1</span>, <span class=\"dv\">2</span>, ru)\n            <span class=\"cf\">with</span> tf.variable_scope(<span class=\"st\">&quot;Candidate&quot;</span>):\n                lambdas <span class=\"op\">=</span> tf.nn.rnn_cell._linear([inputs, state], <span class=\"va\">self</span>._num_weights, <span class=\"va\">True</span>)\n                lambdas <span class=\"op\">=</span> tf.split(<span class=\"dv\">1</span>, <span class=\"va\">self</span>._num_weights, tf.nn.softmax(lambdas))\n\n                Ws <span class=\"op\">=</span> tf.get_variable(<span class=\"st\">&quot;Ws&quot;</span>,\n                        shape <span class=\"op\">=</span> [<span class=\"va\">self</span>._num_weights, inputs.get_shape()[<span class=\"dv\">1</span>], <span class=\"va\">self</span>._num_units])\n                Ws <span class=\"op\">=</span> [tf.squeeze(i) <span class=\"cf\">for</span> i <span class=\"kw\">in</span> tf.split(<span class=\"dv\">0</span>, <span class=\"va\">self</span>._num_weights, Ws)]\n\n                candidate_inputs <span class=\"op\">=</span> []\n\n                <span class=\"cf\">for</span> idx, W <span class=\"kw\">in</span> <span class=\"bu\">enumerate</span>(Ws):\n                    candidate_inputs.append(tf.matmul(inputs, W) <span class=\"op\">*</span> lambdas[idx])\n\n                Wx <span class=\"op\">=</span> tf.add_n(candidate_inputs)\n\n                c <span class=\"op\">=</span> tf.nn.tanh(Wx <span class=\"op\">+</span> tf.nn.rnn_cell._linear([r <span class=\"op\">*</span> state],\n                                            <span class=\"va\">self</span>._num_units, <span class=\"va\">True</span>, scope<span class=\"op\">=</span><span class=\"st\">&quot;second&quot;</span>))\n            new_h <span class=\"op\">=</span> u <span class=\"op\">*</span> state <span class=\"op\">+</span> (<span class=\"dv\">1</span> <span class=\"op\">-</span> u) <span class=\"op\">*</span> c\n        <span class=\"cf\">return</span> new_h, new_h</code></pre></div>\n<p>Let’s see how the custom cell stacks up to a regular GRU cell (using <code>num_steps = 30</code>, since this performs much better than <code>num_steps = 200</code> after 5 epochs – can you see why that might happen?):</p>\n<div class=\"sourceCode\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span class=\"kw\">def</span> build_multilayer_graph_with_custom_cell(\n    cell_type <span class=\"op\">=</span> <span class=\"va\">None</span>,\n    num_weights_for_custom_cell <span class=\"op\">=</span> <span class=\"dv\">5</span>,\n    state_size <span class=\"op\">=</span> <span class=\"dv\">100</span>,\n    num_classes <span class=\"op\">=</span> vocab_size,\n    batch_size <span class=\"op\">=</span> <span class=\"dv\">32</span>,\n    num_steps <span class=\"op\">=</span> <span class=\"dv\">200</span>,\n    num_layers <span class=\"op\">=</span> <span class=\"dv\">3</span>,\n    learning_rate <span class=\"op\">=</span> <span class=\"fl\">1e-4</span>):\n\n    reset_graph()\n\n    x <span class=\"op\">=</span> tf.placeholder(tf.int32, [batch_size, num_steps], name<span class=\"op\">=</span><span class=\"st\">&#39;input_placeholder&#39;</span>)\n    y <span class=\"op\">=</span> tf.placeholder(tf.int32, [batch_size, num_steps], name<span class=\"op\">=</span><span class=\"st\">&#39;labels_placeholder&#39;</span>)\n\n    embeddings <span class=\"op\">=</span> tf.get_variable(<span class=\"st\">&#39;embedding_matrix&#39;</span>, [num_classes, state_size])\n\n    rnn_inputs <span class=\"op\">=</span> tf.nn.embedding_lookup(embeddings, x)\n\n    <span class=\"cf\">if</span> cell_type <span class=\"op\">==</span> <span class=\"st\">&#39;Custom&#39;</span>:\n        cell <span class=\"op\">=</span> CustomCell(state_size, num_weights_for_custom_cell)\n    <span class=\"cf\">elif</span> cell_type <span class=\"op\">==</span> <span class=\"st\">&#39;GRU&#39;</span>:\n        cell <span class=\"op\">=</span> tf.nn.rnn_cell.GRUCell(state_size)\n    <span class=\"cf\">elif</span> cell_type <span class=\"op\">==</span> <span class=\"st\">&#39;LSTM&#39;</span>:\n        cell <span class=\"op\">=</span> tf.nn.rnn_cell.LSTMCell(state_size, state_is_tuple<span class=\"op\">=</span><span class=\"va\">True</span>)\n    <span class=\"cf\">else</span>:\n        cell <span class=\"op\">=</span> tf.nn.rnn_cell.BasicRNNCell(state_size)\n\n    <span class=\"cf\">if</span> cell_type <span class=\"op\">==</span> <span class=\"st\">&#39;LSTM&#39;</span>:\n        cell <span class=\"op\">=</span> tf.nn.rnn_cell.MultiRNNCell([cell] <span class=\"op\">*</span> num_layers, state_is_tuple<span class=\"op\">=</span><span class=\"va\">True</span>)\n    <span class=\"cf\">else</span>:\n        cell <span class=\"op\">=</span> tf.nn.rnn_cell.MultiRNNCell([cell] <span class=\"op\">*</span> num_layers)\n\n    init_state <span class=\"op\">=</span> cell.zero_state(batch_size, tf.float32)\n    rnn_outputs, final_state <span class=\"op\">=</span> tf.nn.dynamic_rnn(cell, rnn_inputs, initial_state<span class=\"op\">=</span>init_state)\n\n    <span class=\"cf\">with</span> tf.variable_scope(<span class=\"st\">&#39;softmax&#39;</span>):\n        W <span class=\"op\">=</span> tf.get_variable(<span class=\"st\">&#39;W&#39;</span>, [state_size, num_classes])\n        b <span class=\"op\">=</span> tf.get_variable(<span class=\"st\">&#39;b&#39;</span>, [num_classes], initializer<span class=\"op\">=</span>tf.constant_initializer(<span class=\"fl\">0.0</span>))\n\n    <span class=\"co\">#reshape rnn_outputs and y</span>\n    rnn_outputs <span class=\"op\">=</span> tf.reshape(rnn_outputs, [<span class=\"op\">-</span><span class=\"dv\">1</span>, state_size])\n    y_reshaped <span class=\"op\">=</span> tf.reshape(y, [<span class=\"op\">-</span><span class=\"dv\">1</span>])\n\n    logits <span class=\"op\">=</span> tf.matmul(rnn_outputs, W) <span class=\"op\">+</span> b\n\n    total_loss <span class=\"op\">=</span> tf.reduce_mean(tf.nn.sparse_softmax_cross_entropy_with_logits(logits, y_reshaped))\n    train_step <span class=\"op\">=</span> tf.train.AdamOptimizer(learning_rate).minimize(total_loss)\n\n    <span class=\"cf\">return</span> <span class=\"bu\">dict</span>(\n        x <span class=\"op\">=</span> x,\n        y <span class=\"op\">=</span> y,\n        init_state <span class=\"op\">=</span> init_state,\n        final_state <span class=\"op\">=</span> final_state,\n        total_loss <span class=\"op\">=</span> total_loss,\n        train_step <span class=\"op\">=</span> train_step\n    )</code></pre></div>\n<div class=\"sourceCode\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\">g <span class=\"op\">=</span> build_multilayer_graph_with_custom_cell(cell_type<span class=\"op\">=</span><span class=\"st\">&#39;GRU&#39;</span>, num_steps<span class=\"op\">=</span><span class=\"dv\">30</span>)\nt <span class=\"op\">=</span> time.time()\ntrain_network(g, <span class=\"dv\">5</span>, num_steps<span class=\"op\">=</span><span class=\"dv\">30</span>)\n<span class=\"bu\">print</span>(<span class=\"st\">&quot;It took&quot;</span>, time.time() <span class=\"op\">-</span> t, <span class=\"st\">&quot;seconds to train for 5 epochs.&quot;</span>)</code></pre></div>\n<pre><code>Average training loss for Epoch 0 : 2.92919953048\nAverage training loss for Epoch 1 : 2.35888109404\nAverage training loss for Epoch 2 : 2.21945820894\nAverage training loss for Epoch 3 : 2.12258511006\nAverage training loss for Epoch 4 : 2.05038544733\nIt took 284.6971204280853 seconds to train for 5 epochs.</code></pre>\n<div class=\"sourceCode\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\">g <span class=\"op\">=</span> build_multilayer_graph_with_custom_cell(cell_type<span class=\"op\">=</span><span class=\"st\">&#39;Custom&#39;</span>, num_steps<span class=\"op\">=</span><span class=\"dv\">30</span>)\nt <span class=\"op\">=</span> time.time()\ntrain_network(g, <span class=\"dv\">5</span>, num_steps<span class=\"op\">=</span><span class=\"dv\">30</span>)\n<span class=\"bu\">print</span>(<span class=\"st\">&quot;It took&quot;</span>, time.time() <span class=\"op\">-</span> t, <span class=\"st\">&quot;seconds to train for 5 epochs.&quot;</span>)</code></pre></div>\n<pre><code>Average training loss for Epoch 0 : 3.04418995892\nAverage training loss for Epoch 1 : 2.5172702761\nAverage training loss for Epoch 2 : 2.37068433601\nAverage training loss for Epoch 3 : 2.27533404217\nAverage training loss for Epoch 4 : 2.20167231745\nIt took 537.6112766265869 seconds to train for 5 epochs.</code></pre>\n<p>So much for that idea. Our custom cell took almost twice as long to train and seems to perform worse than a standard GRU cell.</p>\n<h3 id=\"adding-dropout\">Adding Dropout</h3>\n<p>Adding features like dropout to the network is easy: we figure out where they belong and drop them in.</p>\n<p>Dropout belongs <em>in between layers, not on the state or in intra-cell connections</em>. See <a href=\"https://arxiv.org/pdf/1409.2329.pdf\">Zaremba et al. (2015), Recurrent Neural Network Regularization</a> (“The main idea is to apply the dropout operator only to the non-recurrent connections.”)</p>\n<p>Thus, to apply dropout, we need to wrap the input and/or output of <em>each</em> cell. In our RNN implementation using list, we might do something like this:</p>\n<pre><code>rnn_inputs = [tf.nn.dropout(rnn_input, keep_prob) for rnn_input in rnn_inputs]\nrnn_outputs = [tf.nn.dropout(rnn_output, keep_prob) for nn_output in rnn_outputs]</code></pre>\n<p>In our dynamic_rnn or scan implementations, we might apply dropout directly to the rnn_inputs or rnn_outputs:</p>\n<pre><code>rnn_inputs = tf.nn.dropout(rnn_inputd, keep_prob)\nrnn_outputs = tf.nn.dropout(rnn_outputd, keep_prob)</code></pre>\n<p>But what happens when we use <code>MultiRNNCell</code>? How can we have dropout in between layers like in Zaremba et al. (2015)? The answer is to wrap our base RNN cell with dropout, thereby including it as part of the base cell, similar to how we wrapped our three RNN cells into a single MultiRNNCell above. Tensorflow allows us to do this without writing a new RNNCell by using <code>tf.nn.rnn_cell.DropoutWrapper</code>:</p>\n<pre><code>cell = tf.nn.rnn_cell.LSTMCell(state_size, state_is_tuple=True)\ncell = tf.nn.rnn_cell.DropoutWrapper(cell, input_keep_prob=input_dropout, output_keep_prob=output_dropout)\ncell = tf.nn.rnn_cell.MultiRNNCell([cell] * num_layers, state_is_tuple=True)</code></pre>\n<p>Note that if we wrap a base cell with dropout and then use it to build a MultiRNNCell, both input dropout and output dropout will be applied between layers (so if both are, say, 0.9, the dropout in between layers will be 0.9 * 0.9 = 0.81). If we want equal dropout on all inputs and outputs of a multi-layered RNN, we can use only output or input dropout on the base cell, and then wrap the entire MultiRNNCell with the input or output dropout like so:</p>\n<pre><code>cell = tf.nn.rnn_cell.LSTMCell(state_size, state_is_tuple=True)\ncell = tf.nn.rnn_cell.DropoutWrapper(cell, input_keep_prob=global_dropout)\ncell = tf.nn.rnn_cell.MultiRNNCell([cell] * num_layers, state_is_tuple=True)\ncell = tf.nn.rnn_cell.DropoutWrapper(cell, output_keep_prob=global_dropout)</code></pre>\n<h3 id=\"layer-normalization\">Layer normalization</h3>\n<p>Layer normalization is a feature that was published just a few days ago by <a href=\"https://arxiv.org/abs/1607.06450\">Lei Ba et al. (2016)</a>, which we can use to improve our RNN. It was inspired by batch normalization, which you can read about and learn how to implement in my post <a href=\"http://r2rt.com/implementing-batch-normalization-in-tensorflow.html\">here</a>. Batch normalization (for feed-forward and convolutional neural networks) and layer normalization (for recurrent neural networks) generally improve training time and achieve better overall performance. In this section, we’ll apply what we’ve learned in this post to implement layer normalization in Tensorflow.</p>\n<p>Layer normalization is applied as follows: the initial layer normalization function is applied individually to each training example so as to normalize the output vector of a linear transformation to have a mean of 0 and a variance of 1. In math: <span class=\"math inline\">\\(LN_{initial}: v \\mapsto \\frac{v - \\mu_v}{\\sqrt{\\sigma_v^2 + \\epsilon}}\\)</span> for some vector <span class=\"math inline\">\\(v\\)</span> and some small value of <span class=\"math inline\">\\(\\epsilon\\)</span> for numerical stability. For some the same reasons we add scale and shift parameters to the initial batch normalization transform (see my <a href=\"http://r2rt.com/implementing-batch-normalization-in-tensorflow.html\">batch normalization post</a> for details), we add scale, <span class=\"math inline\">\\(\\alpha\\)</span>, and shift, <span class=\"math inline\">\\(\\beta\\)</span>, parameters here as well, so that the final layer normalization function is:</p>\n<p><span class=\"math display\">\\[LN: v \\mapsto \\alpha \\odot \\frac{v - \\mu_v}{\\sqrt{\\sigma_v^2 + \\epsilon}} + \\beta\\]</span></p>\n<p>Note that <span class=\"math inline\">\\(\\odot\\)</span> is point-wise multiplication.</p>\n<p>To add layer normalization to our network, we first write a function that will layer normalization a 2D tensor along its second dimension:</p>\n<div class=\"sourceCode\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span class=\"kw\">def</span> ln(tensor, scope <span class=\"op\">=</span> <span class=\"va\">None</span>, epsilon <span class=\"op\">=</span> <span class=\"fl\">1e-5</span>):\n    <span class=\"co\">&quot;&quot;&quot; Layer normalizes a 2D tensor along its second axis &quot;&quot;&quot;</span>\n    <span class=\"cf\">assert</span>(<span class=\"bu\">len</span>(tensor.get_shape()) <span class=\"op\">==</span> <span class=\"dv\">2</span>)\n    m, v <span class=\"op\">=</span> tf.nn.moments(tensor, [<span class=\"dv\">1</span>], keep_dims<span class=\"op\">=</span><span class=\"va\">True</span>)\n    <span class=\"cf\">if</span> <span class=\"kw\">not</span> <span class=\"bu\">isinstance</span>(scope, <span class=\"bu\">str</span>):\n        scope <span class=\"op\">=</span> <span class=\"st\">&#39;&#39;</span>\n    <span class=\"cf\">with</span> tf.variable_scope(scope <span class=\"op\">+</span> <span class=\"st\">&#39;layer_norm&#39;</span>):\n        scale <span class=\"op\">=</span> tf.get_variable(<span class=\"st\">&#39;scale&#39;</span>,\n                                shape<span class=\"op\">=</span>[tensor.get_shape()[<span class=\"dv\">1</span>]],\n                                initializer<span class=\"op\">=</span>tf.constant_initializer(<span class=\"dv\">1</span>))\n        shift <span class=\"op\">=</span> tf.get_variable(<span class=\"st\">&#39;shift&#39;</span>,\n                                shape<span class=\"op\">=</span>[tensor.get_shape()[<span class=\"dv\">1</span>]],\n                                initializer<span class=\"op\">=</span>tf.constant_initializer(<span class=\"dv\">0</span>))\n    LN_initial <span class=\"op\">=</span> (tensor <span class=\"op\">-</span> m) <span class=\"op\">/</span> tf.sqrt(v <span class=\"op\">+</span> epsilon)\n\n    <span class=\"cf\">return</span> LN_initial <span class=\"op\">*</span> scale <span class=\"op\">+</span> shift</code></pre></div>\n<p>Let’s apply it our layer normalization function as it was applied by Lei Ba et al. (2016) to LSTMs (in their experiments “Teaching machines to read and comprehend” and “Handwriting sequence generation”). Lei Ba et al. apply layer normalization to the output of each gate <em>inside</em> the LSTM cell, which means that we get to take a second shot at writing a new type of RNN cell. We’ll start with Tensorflow’s official code, located <a href=\"https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/ops/rnn_cell.py\">here</a>, and modify it accordingly:</p>\n<div class=\"sourceCode\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span class=\"kw\">class</span> LayerNormalizedLSTMCell(tf.nn.rnn_cell.RNNCell):\n    <span class=\"co\">&quot;&quot;&quot;</span>\n<span class=\"co\">    Adapted from TF&#39;s BasicLSTMCell to use Layer Normalization.</span>\n<span class=\"co\">    Note that state_is_tuple is always True.</span>\n<span class=\"co\">    &quot;&quot;&quot;</span>\n\n    <span class=\"kw\">def</span> <span class=\"fu\">__init__</span>(<span class=\"va\">self</span>, num_units, forget_bias<span class=\"op\">=</span><span class=\"fl\">1.0</span>, activation<span class=\"op\">=</span>tf.nn.tanh):\n        <span class=\"va\">self</span>._num_units <span class=\"op\">=</span> num_units\n        <span class=\"va\">self</span>._forget_bias <span class=\"op\">=</span> forget_bias\n        <span class=\"va\">self</span>._activation <span class=\"op\">=</span> activation\n\n    <span class=\"at\">@property</span>\n    <span class=\"kw\">def</span> state_size(<span class=\"va\">self</span>):\n        <span class=\"cf\">return</span> tf.nn.rnn_cell.LSTMStateTuple(<span class=\"va\">self</span>._num_units, <span class=\"va\">self</span>._num_units)\n\n    <span class=\"at\">@property</span>\n    <span class=\"kw\">def</span> output_size(<span class=\"va\">self</span>):\n        <span class=\"cf\">return</span> <span class=\"va\">self</span>._num_units\n\n    <span class=\"kw\">def</span> <span class=\"fu\">__call__</span>(<span class=\"va\">self</span>, inputs, state, scope<span class=\"op\">=</span><span class=\"va\">None</span>):\n        <span class=\"co\">&quot;&quot;&quot;Long short-term memory cell (LSTM).&quot;&quot;&quot;</span>\n        <span class=\"cf\">with</span> tf.variable_scope(scope <span class=\"kw\">or</span> <span class=\"bu\">type</span>(<span class=\"va\">self</span>).<span class=\"va\">__name__</span>):\n            c, h <span class=\"op\">=</span> state\n\n            <span class=\"co\"># change bias argument to False since LN will add bias via shift</span>\n            concat <span class=\"op\">=</span> tf.nn.rnn_cell._linear([inputs, h], <span class=\"dv\">4</span> <span class=\"op\">*</span> <span class=\"va\">self</span>._num_units, <span class=\"va\">False</span>)\n\n            i, j, f, o <span class=\"op\">=</span> tf.split(<span class=\"dv\">1</span>, <span class=\"dv\">4</span>, concat)\n\n            <span class=\"co\"># add layer normalization to each gate</span>\n            i <span class=\"op\">=</span> ln(i, scope <span class=\"op\">=</span> <span class=\"st\">&#39;i/&#39;</span>)\n            j <span class=\"op\">=</span> ln(j, scope <span class=\"op\">=</span> <span class=\"st\">&#39;j/&#39;</span>)\n            f <span class=\"op\">=</span> ln(f, scope <span class=\"op\">=</span> <span class=\"st\">&#39;f/&#39;</span>)\n            o <span class=\"op\">=</span> ln(o, scope <span class=\"op\">=</span> <span class=\"st\">&#39;o/&#39;</span>)\n\n            new_c <span class=\"op\">=</span> (c <span class=\"op\">*</span> tf.nn.sigmoid(f <span class=\"op\">+</span> <span class=\"va\">self</span>._forget_bias) <span class=\"op\">+</span> tf.nn.sigmoid(i) <span class=\"op\">*</span>\n                   <span class=\"va\">self</span>._activation(j))\n\n            <span class=\"co\"># add layer_normalization in calculation of new hidden state</span>\n            new_h <span class=\"op\">=</span> <span class=\"va\">self</span>._activation(ln(new_c, scope <span class=\"op\">=</span> <span class=\"st\">&#39;new_h/&#39;</span>)) <span class=\"op\">*</span> tf.nn.sigmoid(o)\n            new_state <span class=\"op\">=</span> tf.nn.rnn_cell.LSTMStateTuple(new_c, new_h)\n\n            <span class=\"cf\">return</span> new_h, new_state</code></pre></div>\n<p>And that’s it! Let’s try this out.</p>\n<h3 id=\"final-model\">Final model</h3>\n<p>At this point, we’ve covered all of the graph modifications we planned to cover, so here is our final model, which allows for dropout and layer normalized LSTM cells:</p>\n<div class=\"sourceCode\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span class=\"kw\">def</span> build_graph(\n    cell_type <span class=\"op\">=</span> <span class=\"va\">None</span>,\n    num_weights_for_custom_cell <span class=\"op\">=</span> <span class=\"dv\">5</span>,\n    state_size <span class=\"op\">=</span> <span class=\"dv\">100</span>,\n    num_classes <span class=\"op\">=</span> vocab_size,\n    batch_size <span class=\"op\">=</span> <span class=\"dv\">32</span>,\n    num_steps <span class=\"op\">=</span> <span class=\"dv\">200</span>,\n    num_layers <span class=\"op\">=</span> <span class=\"dv\">3</span>,\n    build_with_dropout<span class=\"op\">=</span><span class=\"va\">False</span>,\n    learning_rate <span class=\"op\">=</span> <span class=\"fl\">1e-4</span>):\n\n    reset_graph()\n\n    x <span class=\"op\">=</span> tf.placeholder(tf.int32, [batch_size, num_steps], name<span class=\"op\">=</span><span class=\"st\">&#39;input_placeholder&#39;</span>)\n    y <span class=\"op\">=</span> tf.placeholder(tf.int32, [batch_size, num_steps], name<span class=\"op\">=</span><span class=\"st\">&#39;labels_placeholder&#39;</span>)\n\n    dropout <span class=\"op\">=</span> tf.constant(<span class=\"fl\">1.0</span>)\n\n    embeddings <span class=\"op\">=</span> tf.get_variable(<span class=\"st\">&#39;embedding_matrix&#39;</span>, [num_classes, state_size])\n\n    rnn_inputs <span class=\"op\">=</span> tf.nn.embedding_lookup(embeddings, x)\n\n    <span class=\"cf\">if</span> cell_type <span class=\"op\">==</span> <span class=\"st\">&#39;Custom&#39;</span>:\n        cell <span class=\"op\">=</span> CustomCell(state_size, num_weights_for_custom_cell)\n    <span class=\"cf\">elif</span> cell_type <span class=\"op\">==</span> <span class=\"st\">&#39;GRU&#39;</span>:\n        cell <span class=\"op\">=</span> tf.nn.rnn_cell.GRUCell(state_size)\n    <span class=\"cf\">elif</span> cell_type <span class=\"op\">==</span> <span class=\"st\">&#39;LSTM&#39;</span>:\n        cell <span class=\"op\">=</span> tf.nn.rnn_cell.LSTMCell(state_size, state_is_tuple<span class=\"op\">=</span><span class=\"va\">True</span>)\n    <span class=\"cf\">elif</span> cell_type <span class=\"op\">==</span> <span class=\"st\">&#39;LN_LSTM&#39;</span>:\n        cell <span class=\"op\">=</span> LayerNormalizedLSTMCell(state_size)\n    <span class=\"cf\">else</span>:\n        cell <span class=\"op\">=</span> tf.nn.rnn_cell.BasicRNNCell(state_size)\n\n    <span class=\"cf\">if</span> build_with_dropout:\n        cell <span class=\"op\">=</span> tf.nn.rnn_cell.DropoutWrapper(cell, input_keep_prob<span class=\"op\">=</span>dropout)\n\n    <span class=\"cf\">if</span> cell_type <span class=\"op\">==</span> <span class=\"st\">&#39;LSTM&#39;</span> <span class=\"kw\">or</span> cell_type <span class=\"op\">==</span> <span class=\"st\">&#39;LN_LSTM&#39;</span>:\n        cell <span class=\"op\">=</span> tf.nn.rnn_cell.MultiRNNCell([cell] <span class=\"op\">*</span> num_layers, state_is_tuple<span class=\"op\">=</span><span class=\"va\">True</span>)\n    <span class=\"cf\">else</span>:\n        cell <span class=\"op\">=</span> tf.nn.rnn_cell.MultiRNNCell([cell] <span class=\"op\">*</span> num_layers)\n\n    <span class=\"cf\">if</span> build_with_dropout:\n        cell <span class=\"op\">=</span> tf.nn.rnn_cell.DropoutWrapper(cell, output_keep_prob<span class=\"op\">=</span>dropout)\n\n    init_state <span class=\"op\">=</span> cell.zero_state(batch_size, tf.float32)\n    rnn_outputs, final_state <span class=\"op\">=</span> tf.nn.dynamic_rnn(cell, rnn_inputs, initial_state<span class=\"op\">=</span>init_state)\n\n    <span class=\"cf\">with</span> tf.variable_scope(<span class=\"st\">&#39;softmax&#39;</span>):\n        W <span class=\"op\">=</span> tf.get_variable(<span class=\"st\">&#39;W&#39;</span>, [state_size, num_classes])\n        b <span class=\"op\">=</span> tf.get_variable(<span class=\"st\">&#39;b&#39;</span>, [num_classes], initializer<span class=\"op\">=</span>tf.constant_initializer(<span class=\"fl\">0.0</span>))\n\n    <span class=\"co\">#reshape rnn_outputs and y</span>\n    rnn_outputs <span class=\"op\">=</span> tf.reshape(rnn_outputs, [<span class=\"op\">-</span><span class=\"dv\">1</span>, state_size])\n    y_reshaped <span class=\"op\">=</span> tf.reshape(y, [<span class=\"op\">-</span><span class=\"dv\">1</span>])\n\n    logits <span class=\"op\">=</span> tf.matmul(rnn_outputs, W) <span class=\"op\">+</span> b\n\n    predictions <span class=\"op\">=</span> tf.nn.softmax(logits)\n\n    total_loss <span class=\"op\">=</span> tf.reduce_mean(tf.nn.sparse_softmax_cross_entropy_with_logits(logits, y_reshaped))\n    train_step <span class=\"op\">=</span> tf.train.AdamOptimizer(learning_rate).minimize(total_loss)\n\n    <span class=\"cf\">return</span> <span class=\"bu\">dict</span>(\n        x <span class=\"op\">=</span> x,\n        y <span class=\"op\">=</span> y,\n        init_state <span class=\"op\">=</span> init_state,\n        final_state <span class=\"op\">=</span> final_state,\n        total_loss <span class=\"op\">=</span> total_loss,\n        train_step <span class=\"op\">=</span> train_step,\n        preds <span class=\"op\">=</span> predictions,\n        saver <span class=\"op\">=</span> tf.train.Saver()\n    )</code></pre></div>\n<p>Let’s compare the GRU, LSTM and LN_LSTM after training each for 20 epochs using 80 step sequences.</p>\n<div class=\"sourceCode\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\">g <span class=\"op\">=</span> build_graph(cell_type<span class=\"op\">=</span><span class=\"st\">&#39;GRU&#39;</span>, num_steps<span class=\"op\">=</span><span class=\"dv\">80</span>)\nt <span class=\"op\">=</span> time.time()\nlosses <span class=\"op\">=</span> train_network(g, <span class=\"dv\">20</span>, num_steps<span class=\"op\">=</span><span class=\"dv\">80</span>, save<span class=\"op\">=</span><span class=\"st\">&quot;saves/GRU_20_epochs&quot;</span>)\n<span class=\"bu\">print</span>(<span class=\"st\">&quot;It took&quot;</span>, time.time() <span class=\"op\">-</span> t, <span class=\"st\">&quot;seconds to train for 20 epochs.&quot;</span>)\n<span class=\"bu\">print</span>(<span class=\"st\">&quot;The average loss on the final epoch was:&quot;</span>, losses[<span class=\"op\">-</span><span class=\"dv\">1</span>])</code></pre></div>\n<pre><code>It took 1051.6652357578278 seconds to train for 20 epochs.\nThe average loss on the final epoch was: 1.75318197903</code></pre>\n<div class=\"sourceCode\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\">g <span class=\"op\">=</span> build_graph(cell_type<span class=\"op\">=</span><span class=\"st\">&#39;LSTM&#39;</span>, num_steps<span class=\"op\">=</span><span class=\"dv\">80</span>)\nt <span class=\"op\">=</span> time.time()\nlosses <span class=\"op\">=</span> train_network(g, <span class=\"dv\">20</span>, num_steps<span class=\"op\">=</span><span class=\"dv\">80</span>, save<span class=\"op\">=</span><span class=\"st\">&quot;saves/LSTM_20_epochs&quot;</span>)\n<span class=\"bu\">print</span>(<span class=\"st\">&quot;It took&quot;</span>, time.time() <span class=\"op\">-</span> t, <span class=\"st\">&quot;seconds to train for 20 epochs.&quot;</span>)\n<span class=\"bu\">print</span>(<span class=\"st\">&quot;The average loss on the final epoch was:&quot;</span>, losses[<span class=\"op\">-</span><span class=\"dv\">1</span>])</code></pre></div>\n<pre><code>It took 614.4890048503876 seconds to train for 20 epochs.\nThe average loss on the final epoch was: 2.02813237837</code></pre>\n<div class=\"sourceCode\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\">g <span class=\"op\">=</span> build_graph(cell_type<span class=\"op\">=</span><span class=\"st\">&#39;LN_LSTM&#39;</span>, num_steps<span class=\"op\">=</span><span class=\"dv\">80</span>)\nt <span class=\"op\">=</span> time.time()\nlosses <span class=\"op\">=</span> train_network(g, <span class=\"dv\">20</span>, num_steps<span class=\"op\">=</span><span class=\"dv\">80</span>, save<span class=\"op\">=</span><span class=\"st\">&quot;saves/LN_LSTM_20_epochs&quot;</span>)\n<span class=\"bu\">print</span>(<span class=\"st\">&quot;It took&quot;</span>, time.time() <span class=\"op\">-</span> t, <span class=\"st\">&quot;seconds to train for 20 epochs.&quot;</span>)\n<span class=\"bu\">print</span>(<span class=\"st\">&quot;The average loss on the final epoch was:&quot;</span>, losses[<span class=\"op\">-</span><span class=\"dv\">1</span>])</code></pre></div>\n<pre><code>It took 3867.550405740738 seconds to train for 20 epochs.\nThe average loss on the final epoch was: 1.71850851623</code></pre>\n<p>It looks like the layer normalized LSTM just managed to edge out the GRU in the last few epochs, though the increase in training time hardly seems worth it (perhaps my implementation could be improved?). It would be interesting to see how they would perform on a validation or test set and also to try out a layer normalized GRU. For now, let’s use the GRU to generate some text.</p>\n<h3 id=\"generating-text\">Generating text</h3>\n<p>To generate text, were going to rebuild the graph so as to accept a single character at a time and restore our saved model. We’ll give the network a single character prompt, grab its predicted probability distribution for the next character, use that distribution to pick the next character, and repeat. When picking the next character, our <code>generate_characters</code> function can be set to use the whole probability distribution (default), or be forced to pick one of the top n most likely characters in the distribution. The latter option should obtain more English-like results.</p>\n<div class=\"sourceCode\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span class=\"kw\">def</span> generate_characters(g, checkpoint, num_chars, prompt<span class=\"op\">=</span><span class=\"st\">&#39;A&#39;</span>, pick_top_chars<span class=\"op\">=</span><span class=\"va\">None</span>):\n    <span class=\"co\">&quot;&quot;&quot; Accepts a current character, initial state&quot;&quot;&quot;</span>\n\n    <span class=\"cf\">with</span> tf.Session() <span class=\"im\">as</span> sess:\n        sess.run(tf.initialize_all_variables())\n        g[<span class=\"st\">&#39;saver&#39;</span>].restore(sess, checkpoint)\n\n        state <span class=\"op\">=</span> <span class=\"va\">None</span>\n        current_char <span class=\"op\">=</span> vocab_to_idx[prompt]\n        chars <span class=\"op\">=</span> [current_char]\n\n        <span class=\"cf\">for</span> i <span class=\"kw\">in</span> <span class=\"bu\">range</span>(num_chars):\n            <span class=\"cf\">if</span> state <span class=\"kw\">is</span> <span class=\"kw\">not</span> <span class=\"va\">None</span>:\n                feed_dict<span class=\"op\">=</span>{g[<span class=\"st\">&#39;x&#39;</span>]: [[current_char]], g[<span class=\"st\">&#39;init_state&#39;</span>]: state}\n            <span class=\"cf\">else</span>:\n                feed_dict<span class=\"op\">=</span>{g[<span class=\"st\">&#39;x&#39;</span>]: [[current_char]]}\n\n            preds, state <span class=\"op\">=</span> sess.run([g[<span class=\"st\">&#39;preds&#39;</span>],g[<span class=\"st\">&#39;final_state&#39;</span>]], feed_dict)\n\n            <span class=\"cf\">if</span> pick_top_chars <span class=\"kw\">is</span> <span class=\"kw\">not</span> <span class=\"va\">None</span>:\n                p <span class=\"op\">=</span> np.squeeze(preds)\n                p[np.argsort(p)[:<span class=\"op\">-</span>pick_top_chars]] <span class=\"op\">=</span> <span class=\"dv\">0</span>\n                p <span class=\"op\">=</span> p <span class=\"op\">/</span> np.<span class=\"bu\">sum</span>(p)\n                current_char <span class=\"op\">=</span> np.random.choice(vocab_size, <span class=\"dv\">1</span>, p<span class=\"op\">=</span>p)[<span class=\"dv\">0</span>]\n            <span class=\"cf\">else</span>:\n                current_char <span class=\"op\">=</span> np.random.choice(vocab_size, <span class=\"dv\">1</span>, p<span class=\"op\">=</span>np.squeeze(preds))[<span class=\"dv\">0</span>]\n\n            chars.append(current_char)\n\n    chars <span class=\"op\">=</span> <span class=\"bu\">map</span>(<span class=\"kw\">lambda</span> x: idx_to_vocab[x], chars)\n    <span class=\"bu\">print</span>(<span class=\"st\">&quot;&quot;</span>.join(chars))\n    <span class=\"cf\">return</span>(<span class=\"st\">&quot;&quot;</span>.join(chars))</code></pre></div>\n<div class=\"sourceCode\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\">g <span class=\"op\">=</span> build_graph(cell_type<span class=\"op\">=</span><span class=\"st\">&#39;LN_LSTM&#39;</span>, num_steps<span class=\"op\">=</span><span class=\"dv\">1</span>, batch_size<span class=\"op\">=</span><span class=\"dv\">1</span>)\ngenerate_characters(g, <span class=\"st\">&quot;saves/LN_LSTM_20_epochs&quot;</span>, <span class=\"dv\">750</span>, prompt<span class=\"op\">=</span><span class=\"st\">&#39;A&#39;</span>, pick_top_chars<span class=\"op\">=</span><span class=\"dv\">5</span>)</code></pre></div>\n<pre><code>ATOOOS\n\n UIEAOUYOUZZZZZZUZAAAYAYf n fsflflrurctuateot t ta&#39;s  a  wtutss ESGNANO:\nWhith then, a do makes and them and to sees,\nI wark on this ance may string take thou honon\nTo sorriccorn of the bairer, whither, all\nI&#39;d see if yiust the would a peid.\n\nLARYNGLe:\nTo would she troust they fould.\n\nPENMES:\nThou she so the havin to my shald woust of\nAs tale we they all my forder have\nAs to say heant thy wansing thag and\nWhis it thee shath his breact, I be and might, she\nTirs you desarvishensed and see thee: shall,\nWhat he hath with that is all time,\nAnd sen the have would be sectiens, way thee,\nThey are there to man shall with me to the mon,\nAnd mere fear would be the balte, as time an at\nAnd the say oun touth, thy way womers thee.</code></pre>\n<p>You can see that this network has learned something. It’s definitely not random, though there is a bit of a warm up at the beginning (the state starts at 0). I was expecting something a bit better, however, given <a href=\"http://karpathy.github.io/2015/05/21/rnn-effectiveness/#shakespeare\">Karpathy’s Shakespeare results</a>. His model used more data, a state_size of 512, and was trained quite a bit longer than this one. Let’s see if we can match that. I couldn’t find a suitable premade dataset, so I had to make one myself: I concatenated the scripts from the Star Wars movies, the Star Trek movies, Tarantino and the Matrix. The final file size is 3.3MB, which is a bit smaller than the full works of William Shakespeare. Let’s load these up and try this again, with a larger state size:</p>\n<div class=\"sourceCode\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span class=\"co\">&quot;&quot;&quot;</span>\n<span class=\"co\">Load new data</span>\n<span class=\"co\">&quot;&quot;&quot;</span>\n\nfile_url <span class=\"op\">=</span> <span class=\"st\">&#39;https://gist.githubusercontent.com/spitis/59bfafe6966bfe60cc206ffbb760269f/&#39;</span><span class=\"op\">+\\</span>\n<span class=\"co\">&#39;raw/030a08754aada17cef14eed6fac7797cda830fe8/variousscripts.txt&#39;</span>\nfile_name <span class=\"op\">=</span> <span class=\"st\">&#39;variousscripts.txt&#39;</span>\n<span class=\"cf\">if</span> <span class=\"kw\">not</span> os.path.exists(file_name):\n    urllib.request.urlretrieve(file_url, file_name)\n\n<span class=\"cf\">with</span> <span class=\"bu\">open</span>(file_name,<span class=\"st\">&#39;r&#39;</span>) <span class=\"im\">as</span> f:\n    raw_data <span class=\"op\">=</span> f.read()\n    <span class=\"bu\">print</span>(<span class=\"st\">&quot;Data length:&quot;</span>, <span class=\"bu\">len</span>(raw_data))\n\nvocab <span class=\"op\">=</span> <span class=\"bu\">set</span>(raw_data)\nvocab_size <span class=\"op\">=</span> <span class=\"bu\">len</span>(vocab)\nidx_to_vocab <span class=\"op\">=</span> <span class=\"bu\">dict</span>(<span class=\"bu\">enumerate</span>(vocab))\nvocab_to_idx <span class=\"op\">=</span> <span class=\"bu\">dict</span>(<span class=\"bu\">zip</span>(idx_to_vocab.values(), idx_to_vocab.keys()))\n\ndata <span class=\"op\">=</span> [vocab_to_idx[c] <span class=\"cf\">for</span> c <span class=\"kw\">in</span> raw_data]\n<span class=\"kw\">del</span> raw_data</code></pre></div>\n<pre><code>Data length: 3299132</code></pre>\n<div class=\"sourceCode\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\">g <span class=\"op\">=</span> build_graph(cell_type<span class=\"op\">=</span><span class=\"st\">&#39;GRU&#39;</span>,\n                num_steps<span class=\"op\">=</span><span class=\"dv\">80</span>,\n                state_size <span class=\"op\">=</span> <span class=\"dv\">512</span>,\n                batch_size <span class=\"op\">=</span> <span class=\"dv\">50</span>,\n                num_classes<span class=\"op\">=</span>vocab_size,\n                learning_rate<span class=\"op\">=</span><span class=\"fl\">5e-4</span>)\nt <span class=\"op\">=</span> time.time()\nlosses <span class=\"op\">=</span> train_network(g, <span class=\"dv\">30</span>, num_steps<span class=\"op\">=</span><span class=\"dv\">80</span>, batch_size <span class=\"op\">=</span> <span class=\"dv\">50</span>, save<span class=\"op\">=</span><span class=\"st\">&quot;saves/GRU_30_epochs_variousscripts&quot;</span>)\n<span class=\"bu\">print</span>(<span class=\"st\">&quot;It took&quot;</span>, time.time() <span class=\"op\">-</span> t, <span class=\"st\">&quot;seconds to train for 30 epochs.&quot;</span>)\n<span class=\"bu\">print</span>(<span class=\"st\">&quot;The average loss on the final epoch was:&quot;</span>, losses[<span class=\"op\">-</span><span class=\"dv\">1</span>])</code></pre></div>\n<pre><code>It took 4877.8002140522 seconds to train for 30 epochs.\nThe average loss on the final epoch was: 0.726858645461</code></pre>\n<div class=\"sourceCode\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\">g <span class=\"op\">=</span> build_graph(cell_type<span class=\"op\">=</span><span class=\"st\">&#39;GRU&#39;</span>, num_steps<span class=\"op\">=</span><span class=\"dv\">1</span>, batch_size<span class=\"op\">=</span><span class=\"dv\">1</span>, num_classes<span class=\"op\">=</span>vocab_size, state_size <span class=\"op\">=</span> <span class=\"dv\">512</span>)\ngenerate_characters(g, <span class=\"st\">&quot;saves/GRU_30_epochs_variousscripts&quot;</span>, <span class=\"dv\">750</span>, prompt<span class=\"op\">=</span><span class=\"st\">&#39;D&#39;</span>, pick_top_chars<span class=\"op\">=</span><span class=\"dv\">5</span>)</code></pre></div>\n<pre><code>DENT&#39;SUEENCK\n\nBartholomew of the TIE FIGHTERS are stunned. There is a crowd and armored\nswitcheroos.\n\nPICARD\n(continuing)\nCouns two dim is tired. In order to the sentence...\n\nThe sub    bottle appears on the screen into a small shuttle shift of the\nceiling. The DAMBA FETT splash fires and matches them into the top, transmit to stable high above upon their statels,\nfalling from an alien shaft.\n\nANAKIN and OBI-WAN stand next to OBI-WAN down the control plate of smoke at the TIE fighter. They stare at the centre of the station loose into a comlink cover -- comes up to the General, the GENERAL HUNTAN AND FINNFURMBARD from the PICADOR to a beautiful Podracisly.\n\nENGINEER\nNaboo from an army seventy medical\nsecurity team area re-weilergular.\n\nEXT.</code></pre>\n<p>Not sure these are that much better than before, but it’s sort of readable?</p>\n<h3 id=\"conclusion\">Conclusion</h3>\n<p>In this post, we used a character sequence generation task to learn how to use Tensorflow’s scan and dynamic_rnn functions, how to use advanced RNN cells and stack multiple RNNs, and how to add features to our RNN like dropout and layer normalization. In the next post, we will use a machine translation task to look at handling variable length sequences and building RNN encoders and decoders.</p>\n</body>\n</html>"
}