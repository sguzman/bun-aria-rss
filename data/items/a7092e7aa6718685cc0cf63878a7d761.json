{
  "title": "Visualizing Analytics Languages With VennEuler.jl",
  "description": "<p>It often doesn’t take much to get me off track, and on a holiday weekend…well, I was just begging for a fun way to shirk. Enter Harlan Harris:</p>",
  "pubDate": "Fri, 29 Aug 2014 15:16:24 +0000",
  "link": "http://randyzwitch.com/visualizing-analytics-languages-venneuler-jl/",
  "guid": "http://randyzwitch.com/visualizing-analytics-languages-venneuler-jl/",
  "content": "<p>It often doesn’t take much to get me off track, and on a holiday weekend…well, I was just begging for a fun way to shirk. Enter Harlan Harris:</p>\n\n<blockquote class=\"twitter-tweet\" data-cards=\"hidden\" data-partner=\"tweetdeck\">\n  <p>\n    someone redo this area-prop'l Venn w/ my Julia pkg! <a href=\"http://t.co/Mh8rXZbRgY\">http://t.co/Mh8rXZbRgY</a> <a href=\"http://t.co/RDWNQHTw3S\">http://t.co/RDWNQHTw3S</a> <a href=\"http://t.co/ljujd9DG0T\">http://t.co/ljujd9DG0T</a> via <a href=\"https://twitter.com/revodavid\">@revodavid</a>\n  </p>\n\n  <p>\n    — Harlan Harris (@HarlanH) <a href=\"https://twitter.com/HarlanH/statuses/505365468363100160\">August 29, 2014</a>\n  </p>\n</blockquote>\n\n<p>Hey, I’m someone looking for something to do! And I like writing Julia code! So let’s have a look at recreating this diagram in Julia using VennEuler.jl (<a title=\"VennEuler.jl example\" href=\"http://nbviewer.ipython.org/gist/randyzwitch/860e1d9ae5a12cb61b1b\" target=\"_blank\">IJulia Notebook link</a>):</p>\n\n<div style=\"width: 490px\" class=\"wp-caption alignnone\">\n  <img src=\"http://revolution-computing.typepad.com/.a/6a010534b1db25970b01a73e0af9c7970d-800wi\" alt=\"\" width=\"480\" height=\"427\" />\n\n  <p class=\"wp-caption-text\">\n    Source: Revolution R/KDNuggets\n  </p>\n</div>\n\n<p><a href=\"http://blog.revolutionanalytics.com/2014/08/r-tops-kdnuggets-data-analysis-software-poll-for-4th-consecutive-year.html\" target=\"_blank\">http://blog.revolutionanalytics.com/2014/08/r-tops-kdnuggets-data-analysis-software-poll-for-4th-consecutive-year.html</a></p>\n\n<h2 id=\"installing-venneulerjl\">Installing VennEuler.jl</h2>\n\n<p>Because VennEuler.jl is not in METADATA as of the time of writing, instead of using Pkg.add() you’ll need to run:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-julia\" data-lang=\"julia\"><table class=\"rouge-table\"><tbody><tr><td class=\"gutter gl\"><pre class=\"lineno\">1\n</pre></td><td class=\"code\"><pre><span class=\"n\">Pkg</span><span class=\"o\">.</span><span class=\"n\">clone</span><span class=\"x\">(</span><span class=\"s\">\"https://github.com/HarlanH/VennEuler.jl.git\"</span><span class=\"x\">)</span>\n</pre></td></tr></tbody></table></code></pre></figure>\n\n<p>Note that VennEuler uses some of the more exotic packages (at least to me) like NLopt and Cairo, so you might need to have a few additional dependencies installed with the package.</p>\n\n<h2 id=\"data\">Data</h2>\n\n<p>The data was a bit confusing to me at first, since the percentages add up to more than 100% (people could vote multiple times). In order to create a dataset to use, I took the percentages, multiplied by 1000, then re-created the voting pattern. The data for the graph can be downloaded from <a title=\"Dataset\" href=\"http://randyzwitch.com/wp-content/uploads/2014/08/kdnuggets_language_survey_2014.csv\" target=\"_blank\">this link</a>.</p>\n\n<h2 id=\"code---circles\">Code - Circles</h2>\n\n<p>With a few modifications, I basically re-purposed Harlan’s code from the <a href=\"https://github.com/HarlanH/VennEuler.jl/blob/master/test/DC2.jl\">package test files</a>. The circle result is as follows:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-julia\" data-lang=\"julia\"><table class=\"rouge-table\"><tbody><tr><td class=\"gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n</pre></td><td class=\"code\"><pre><span class=\"k\">using</span> <span class=\"n\">VennEuler</span>\n\n<span class=\"n\">data</span><span class=\"x\">,</span> <span class=\"n\">labels</span> <span class=\"o\">=</span> <span class=\"n\">readcsv</span><span class=\"x\">(</span><span class=\"s\">\"/home/rzwitch/Desktop/kdnuggets_language_survey_2014.csv\"</span><span class=\"x\">,</span> <span class=\"n\">header</span><span class=\"o\">=</span><span class=\"nb\">true</span><span class=\"x\">)</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">bool</span><span class=\"x\">(</span><span class=\"n\">data</span><span class=\"x\">)</span>\n<span class=\"n\">labels</span> <span class=\"o\">=</span> <span class=\"n\">vec</span><span class=\"x\">(</span><span class=\"n\">labels</span><span class=\"x\">)</span>\n\n<span class=\"c\">#Circles</span>\n<span class=\"n\">eo</span> <span class=\"o\">=</span> <span class=\"n\">make_euler_object</span><span class=\"x\">(</span><span class=\"n\">labels</span><span class=\"x\">,</span> <span class=\"n\">data</span><span class=\"x\">,</span> <span class=\"n\">EulerSpec</span><span class=\"x\">())</span> <span class=\"c\"># circles, for now</span>\n\n<span class=\"x\">(</span><span class=\"n\">minf</span><span class=\"x\">,</span><span class=\"n\">minx</span><span class=\"x\">,</span><span class=\"n\">ret</span><span class=\"x\">)</span> <span class=\"o\">=</span> <span class=\"n\">optimize</span><span class=\"x\">(</span><span class=\"n\">eo</span><span class=\"x\">,</span> <span class=\"n\">random_state</span><span class=\"x\">(</span><span class=\"n\">eo</span><span class=\"x\">),</span> <span class=\"n\">ftol</span><span class=\"o\">=-</span><span class=\"mi\">1</span><span class=\"x\">,</span> <span class=\"n\">xtol</span><span class=\"o\">=</span><span class=\"mf\">0.0025</span><span class=\"x\">,</span> <span class=\"n\">maxtime</span><span class=\"o\">=</span><span class=\"mi\">120</span><span class=\"x\">,</span> <span class=\"n\">pop</span><span class=\"o\">=</span><span class=\"mi\">1000</span><span class=\"x\">)</span>\n<span class=\"n\">println</span><span class=\"x\">(</span><span class=\"s\">\"got </span><span class=\"si\">$</span><span class=\"s\">minf at </span><span class=\"si\">$</span><span class=\"s\">minx (returned </span><span class=\"si\">$</span><span class=\"s\">ret)\"</span><span class=\"x\">)</span>\n\n<span class=\"n\">render</span><span class=\"x\">(</span><span class=\"s\">\"/home/rzwitch/Desktop/kd.svg\"</span><span class=\"x\">,</span> <span class=\"n\">eo</span><span class=\"x\">,</span> <span class=\"n\">minx</span><span class=\"x\">)</span>\n</pre></td></tr></tbody></table></code></pre></figure>\n\n<p><img src=\"/wp-content/uploads/2014/08/venneulercircles.png\" alt=\"venneulercircles\" /></p>\n\n<p>Since the percentage of R, SAS, and Python users isn’t too dramatically different (<code class=\"language-plaintext highlighter-rouge\">49.81%</code>, <code class=\"language-plaintext highlighter-rouge\">33.42%</code>, <code class=\"language-plaintext highlighter-rouge\">40.97%</code> respectively) and the visualizations are circles, it’s a bit hard to tell that R is about 16% points higher than SAS and 9% points higher than Python.</p>\n\n<h2 id=\"code--rectangles\">Code - Rectangles</h2>\n\n<p>Alternatively, we can use rectangles to represent the areas:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-julia\" data-lang=\"julia\"><table class=\"rouge-table\"><tbody><tr><td class=\"gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n</pre></td><td class=\"code\"><pre><span class=\"k\">using</span> <span class=\"n\">VennEuler</span>\n\n<span class=\"n\">data</span><span class=\"x\">,</span> <span class=\"n\">labels</span> <span class=\"o\">=</span> <span class=\"n\">readcsv</span><span class=\"x\">(</span><span class=\"s\">\"/home/rzwitch/Desktop/kdnuggets_language_survey_2014.csv\"</span><span class=\"x\">,</span> <span class=\"n\">header</span><span class=\"o\">=</span><span class=\"nb\">true</span><span class=\"x\">)</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">bool</span><span class=\"x\">(</span><span class=\"n\">data</span><span class=\"x\">)</span>\n<span class=\"n\">labels</span> <span class=\"o\">=</span> <span class=\"n\">vec</span><span class=\"x\">(</span><span class=\"n\">labels</span><span class=\"x\">)</span>\n\n<span class=\"c\"># Rectangles</span>\n<span class=\"n\">eo</span> <span class=\"o\">=</span> <span class=\"n\">make_euler_object</span><span class=\"x\">(</span><span class=\"n\">labels</span><span class=\"x\">,</span> <span class=\"n\">data</span><span class=\"x\">,</span> <span class=\"x\">[</span><span class=\"n\">EulerSpec</span><span class=\"x\">(</span><span class=\"o\">:</span><span class=\"n\">rectangle</span><span class=\"x\">),</span> <span class=\"n\">EulerSpec</span><span class=\"x\">(</span><span class=\"o\">:</span><span class=\"n\">rectangle</span><span class=\"x\">,</span> <span class=\"x\">[</span><span class=\"o\">.</span><span class=\"mi\">5</span><span class=\"x\">,</span> <span class=\"o\">.</span><span class=\"mi\">5</span><span class=\"x\">,</span> <span class=\"o\">.</span><span class=\"mi\">4</span><span class=\"x\">],</span> <span class=\"x\">[</span><span class=\"mi\">0</span><span class=\"x\">,</span> <span class=\"mi\">0</span><span class=\"x\">,</span> <span class=\"mi\">0</span><span class=\"x\">]),</span>\n    <span class=\"n\">EulerSpec</span><span class=\"x\">(</span><span class=\"o\">:</span><span class=\"n\">rectangle</span><span class=\"x\">)],</span>\n    <span class=\"n\">sizesum</span><span class=\"o\">=.</span><span class=\"mi\">3</span><span class=\"x\">)</span>\n\n\n<span class=\"x\">(</span><span class=\"n\">minf</span><span class=\"x\">,</span><span class=\"n\">minx</span><span class=\"x\">,</span><span class=\"n\">ret</span><span class=\"x\">)</span> <span class=\"o\">=</span> <span class=\"n\">optimize_iteratively</span><span class=\"x\">(</span><span class=\"n\">eo</span><span class=\"x\">,</span> <span class=\"n\">random_state</span><span class=\"x\">(</span><span class=\"n\">eo</span><span class=\"x\">),</span> <span class=\"n\">ftol</span><span class=\"o\">=-</span><span class=\"mi\">1</span><span class=\"x\">,</span> <span class=\"n\">xtol</span><span class=\"o\">=</span><span class=\"mf\">0.0025</span><span class=\"x\">,</span> <span class=\"n\">maxtime</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"x\">,</span> <span class=\"n\">pop</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"x\">)</span>\n<span class=\"n\">println</span><span class=\"x\">(</span><span class=\"s\">\"phase 1: got </span><span class=\"si\">$</span><span class=\"s\">minf at </span><span class=\"si\">$</span><span class=\"s\">minx (returned </span><span class=\"si\">$</span><span class=\"s\">ret)\"</span><span class=\"x\">)</span>\n<span class=\"x\">(</span><span class=\"n\">minf</span><span class=\"x\">,</span><span class=\"n\">minx</span><span class=\"x\">,</span><span class=\"n\">ret</span><span class=\"x\">)</span> <span class=\"o\">=</span> <span class=\"n\">optimize</span><span class=\"x\">(</span><span class=\"n\">eo</span><span class=\"x\">,</span> <span class=\"n\">minx</span><span class=\"x\">,</span> <span class=\"n\">ftol</span><span class=\"o\">=-</span><span class=\"mi\">1</span><span class=\"x\">,</span> <span class=\"n\">xtol</span><span class=\"o\">=</span><span class=\"mf\">0.001</span><span class=\"x\">,</span> <span class=\"n\">maxtime</span><span class=\"o\">=</span><span class=\"mi\">30</span><span class=\"x\">,</span> <span class=\"n\">pop</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"x\">)</span>\n<span class=\"n\">println</span><span class=\"x\">(</span><span class=\"s\">\"phase 2: got </span><span class=\"si\">$</span><span class=\"s\">minf at </span><span class=\"si\">$</span><span class=\"s\">minx (returned </span><span class=\"si\">$</span><span class=\"s\">ret)\"</span><span class=\"x\">)</span>\n\n<span class=\"n\">render</span><span class=\"x\">(</span><span class=\"s\">\"/home/rzwitch/Desktop/kd-rects.svg\"</span><span class=\"x\">,</span> <span class=\"n\">eo</span><span class=\"x\">,</span> <span class=\"n\">minx</span><span class=\"x\">)</span>\n</pre></td></tr></tbody></table></code></pre></figure>\n\n<p><img src=\"/wp-content/uploads/2014/08/venneulerrectangles.png\" alt=\"venneulerrectangles\" /></p>\n\n<p>Here, it’s a slight bit easier to see that SAS and Python are about the same area-wise and that R is larger, although the different dimensions do obscure this fact a bit.</p>\n\n<h2 id=\"summary\">Summary</h2>\n\n<p>If I spent more time with this package, I’m sure I could make something even more aesthetically pleasing. And for that matter, it’s still a pre-production package that will no doubt get better in the future. But at the very least, there is a way to create an area-proportional representation of relationships using VennEuler.jl in Julia.</p>"
}