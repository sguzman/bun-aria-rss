{
  "title": "Bulk Loading Shapefiles Into Postgres/Postgis",
  "description": "<p>Recently I’ve been doing a fair bit of work with geospatial data, mostly on the data preparation side. While there are common data formats, I have found that because so much of this data are sourced from government agencies, the data are often in many files that can be concatenated.</p>",
  "pubDate": "Fri, 01 Jun 2018 00:00:00 +0000",
  "link": "http://randyzwitch.com/bulk-loading-postgis/",
  "guid": "http://randyzwitch.com/bulk-loading-postgis/",
  "content": "<p>Recently I’ve been doing a fair bit of work with geospatial data, mostly on the data preparation side. While there are common data formats, I have found that because so much of this data are sourced from government agencies, the data are often in many files that can be concatenated.</p>\n\n<p>In this example, I will show how to take a few dozen county-level shapefiles of parcel data from Utah and load it into a single table in <a href=\"https://www.postgresql.org/\">Postgres</a>/<a href=\"https://postgis.net/\">Postgis</a>.</p>\n\n<h2 id=\"step-1-downloading-shapefiles\">Step 1: Downloading Shapefiles</h2>\n\n<p>The following shell commands come from an in-progress collaboration with a friend, where we are going to analyze daily air quality in Utah over the past several years. <a href=\"https://opendata.utah.gov/browse\">Utah is open-data-friendly</a>, providing <a href=\"https://gis.utah.gov/data/cadastre/parcels/#UtahLIRParcels\">shapefiles for every parcel of land in Utah</a>.</p>\n\n<p>While it may have been possible to use <code class=\"language-plaintext highlighter-rouge\">wget</code> or <code class=\"language-plaintext highlighter-rouge\">curl</code> to download every shapefile, they are stored within Google Drive with a bunch of hashed URLs, so I just clicked on each file instead of trying to be clever. So if you want to follow along with this blog post exactly, you’ll need to download the 25 zip files of Utah shapefiles:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-bash\" data-lang=\"bash\"><span class=\"nv\">$ </span><span class=\"nb\">ls</span> <span class=\"nt\">-lrt</span> utah_lir_shapefiles/\ntotal 408688\n<span class=\"nt\">-rw-rw-r--</span> 1 rzwitch rzwitch    954984 Jun  1 13:10 Parcels_Beaver_LIR.zip\n<span class=\"nt\">-rw-rw-r--</span> 1 rzwitch rzwitch   7183466 Jun  1 13:10 Parcels_BoxElder_LIR.zip\n<span class=\"nt\">-rw-rw-r--</span> 1 rzwitch rzwitch   9152777 Jun  1 13:10 Parcels_Cache_LIR.zip\n<span class=\"nt\">-rw-rw-r--</span> 1 rzwitch rzwitch   3279384 Jun  1 13:10 Parcels_Carbon_LIR.zip\n<span class=\"nt\">-rw-rw-r--</span> 1 rzwitch rzwitch    356058 Jun  1 13:10 Parcels_Daggett_LIR.zip\n<span class=\"nt\">-rw-rw-r--</span> 1 rzwitch rzwitch  18908413 Jun  1 13:10 Parcels_Davis_LIR.zip\n<span class=\"nt\">-rw-rw-r--</span> 1 rzwitch rzwitch   3900415 Jun  1 13:10 Parcels_Duchesne_LIR.zip\n<span class=\"nt\">-rw-rw-r--</span> 1 rzwitch rzwitch   2689950 Jun  1 13:10 Parcels_Garfield_LIR.zip\n<span class=\"nt\">-rw-rw-r--</span> 1 rzwitch rzwitch   2156109 Jun  1 13:10 Parcels_Grand_LIR.zip\n<span class=\"nt\">-rw-rw-r--</span> 1 rzwitch rzwitch   8107608 Jun  1 13:10 Parcels_Iron_LIR.zip\n<span class=\"nt\">-rw-rw-r--</span> 1 rzwitch rzwitch   1975537 Jun  1 13:10 Parcels_Juab_LIR.zip\n<span class=\"nt\">-rw-rw-r--</span> 1 rzwitch rzwitch   3273485 Jun  1 13:10 Parcels_Kane_LIR.zip\n<span class=\"nt\">-rw-rw-r--</span> 1 rzwitch rzwitch   2741403 Jun  1 13:10 Parcels_Millard_LIR.zip\n<span class=\"nt\">-rw-rw-r--</span> 1 rzwitch rzwitch   1110627 Jun  1 13:10 Parcels_Morgan_LIR.zip\n<span class=\"nt\">-rw-rw-r--</span> 1 rzwitch rzwitch   2970626 Jun  1 13:10 Parcels_Rich_LIR.zip\n<span class=\"nt\">-rw-rw-r--</span> 1 rzwitch rzwitch 200183664 Jun  1 13:11 Parcels_SaltLake_LIR.zip\n<span class=\"nt\">-rw-rw-r--</span> 1 rzwitch rzwitch   1397522 Jun  1 13:11 Parcels_SanJuan_LIR.zip\n<span class=\"nt\">-rw-rw-r--</span> 1 rzwitch rzwitch   1576757 Jun  1 13:11 Parcels_Sanpete_LIR.zip\n<span class=\"nt\">-rw-rw-r--</span> 1 rzwitch rzwitch   7911261 Jun  1 13:11 Parcels_Summit_LIR.zip\n<span class=\"nt\">-rw-rw-r--</span> 1 rzwitch rzwitch   4480456 Jun  1 13:11 Parcels_Tooele_LIR.zip\n<span class=\"nt\">-rw-rw-r--</span> 1 rzwitch rzwitch  69690149 Jun  1 13:11 Parcels_Utah_LIR.zip\n<span class=\"nt\">-rw-rw-r--</span> 1 rzwitch rzwitch   5025674 Jun  1 13:11 Parcels_Wasatch_LIR.zip\n<span class=\"nt\">-rw-rw-r--</span> 1 rzwitch rzwitch  35896908 Jun  1 13:11 Parcels_Washington_LIR.zip\n<span class=\"nt\">-rw-rw-r--</span> 1 rzwitch rzwitch    298313 Jun  1 13:11 Parcels_Wayne_LIR.zip\n<span class=\"nt\">-rw-rw-r--</span> 1 rzwitch rzwitch  23225130 Jun  1 13:11 Parcels_Weber_LIR.zip</code></pre></figure>\n\n<h2 id=\"step-2-bulk-unzip\">Step 2: Bulk Unzip</h2>\n\n<p>With all of these files in the same directory at the same level (i.e. no subfolders), it’s pretty easy to bulk unzip the files, with one caveat: to move the contents of the unzipped files into a new directory, you need to use the <code class=\"language-plaintext highlighter-rouge\">-d</code> flag:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-bash\" data-lang=\"bash\"><span class=\"nb\">mkdir </span>utah_lir_shapefiles_unzipped <span class=\"o\">&amp;&amp;</span> unzip utah_lir_shapefiles/<span class=\"se\">\\*</span>.zip <span class=\"nt\">-d</span> utah_lir_shapefiles_unzipped</code></pre></figure>\n\n<p>The reason I created a new directory (<code class=\"language-plaintext highlighter-rouge\">mkdir</code>) and then unzipped the files into a new directory is that when doing analysis, I always like to keep the source data separate, so that I always have the option of starting completely over. It also can make regular expression globs easier :)</p>\n\n<h2 id=\"step-3-creating-postgis-table-definition\">Step 3: Creating Postgis Table Definition</h2>\n\n<p>After all of the county zip files are unzipped, you get 25 sub-directories structured like the following:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-bash\" data-lang=\"bash\"><span class=\"nb\">ls</span> <span class=\"nt\">-ltr</span>\ntotal 10916\n<span class=\"nt\">-rw-rw-rw-</span> 1 rzwitch rzwitch   67868 Sep  3  2017 Parcels_Beaver_LIR.shx\n<span class=\"nt\">-rw-rw-rw-</span> 1 rzwitch rzwitch   28280 Sep  3  2017 Parcels_Beaver_LIR.shp.xml\n<span class=\"nt\">-rw-rw-rw-</span> 1 rzwitch rzwitch 1503304 Sep  3  2017 Parcels_Beaver_LIR.shp\n<span class=\"nt\">-rw-rw-rw-</span> 1 rzwitch rzwitch    3036 Sep  3  2017 Parcels_Beaver_LIR.sbx\n<span class=\"nt\">-rw-rw-rw-</span> 1 rzwitch rzwitch   83052 Sep  3  2017 Parcels_Beaver_LIR.sbn\n<span class=\"nt\">-rw-rw-rw-</span> 1 rzwitch rzwitch     425 Sep  3  2017 Parcels_Beaver_LIR.prj\n<span class=\"nt\">-rw-rw-rw-</span> 1 rzwitch rzwitch 9471508 Sep  3  2017 Parcels_Beaver_LIR.dbf\n<span class=\"nt\">-rw-rw-rw-</span> 1 rzwitch rzwitch       5 Sep  3  2017 Parcels_Beaver_LIR.cpg</code></pre></figure>\n\n<p>The .shp files from the 25 counties all have the same format, which is very convenient. In this step, we can use the <code class=\"language-plaintext highlighter-rouge\">shp2pgsql</code> utility that comes with Postgis to read a shapefile, determine the proper schema, then create the table in the database:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-bash\" data-lang=\"bash\">shp2pgsql <span class=\"nt\">-I</span> <span class=\"nt\">-s</span> 26912 <span class=\"nt\">-p</span> utah_lir_shapefiles_unzipped/Parcels_Beaver_LIR/Parcels_Beaver_LIR.shp <span class=\"se\">\\</span>\nutahlirparcels  | psql <span class=\"nt\">-h</span> localhost <span class=\"nt\">-U</span> &lt;username&gt; &lt;database&gt;<span class=\"p\">;</span></code></pre></figure>\n\n<p>The key flag here is <code class=\"language-plaintext highlighter-rouge\">-p</code>, which means ‘prepare mode’; the shapefile will get read, a table created, but no data loaded. By not loading the data in this step, it makes looping over the files easier later, as no special logic is required to keep the <code class=\"language-plaintext highlighter-rouge\">Parcels_Beaver_LIR.shp</code> from being duplicated in Postgis (because it was never loaded in the first place).</p>\n\n<h2 id=\"step-4-bulk-loading-shapefiles-into-postgis\">Step 4: Bulk Loading Shapefiles into Postgis</h2>\n\n<p>The last steps of the loading process are to 1) get all of the shapefile locations and 2) feed them to shp2pgsql:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-bash\" data-lang=\"bash\"><span class=\"k\">for </span>i <span class=\"k\">in</span> <span class=\"si\">$(</span>find utah_lir_shapefiles_unzipped/ <span class=\"nt\">-type</span> f <span class=\"nt\">-name</span> <span class=\"s1\">'*.shp'</span><span class=\"si\">)</span><span class=\"p\">;</span> <span class=\"k\">do\n  </span>shp2pgsql <span class=\"nt\">-I</span> <span class=\"nt\">-s</span> 26912 <span class=\"nt\">-a</span> <span class=\"nv\">$i</span> utahlirparcels  | psql <span class=\"nt\">-h</span> localhost <span class=\"nt\">-U</span> &lt;username&gt; &lt;database&gt;<span class=\"p\">;</span>\n<span class=\"k\">done</span><span class=\"p\">;</span></code></pre></figure>\n\n<p>To get all of the shapefile locations, I use <code class=\"language-plaintext highlighter-rouge\">find</code> with flags <code class=\"language-plaintext highlighter-rouge\">-type f</code> (files type) and <code class=\"language-plaintext highlighter-rouge\">name</code> to search for the pattern within the directory. This command goes through the entire set of subdirectories and gets all the <code class=\"language-plaintext highlighter-rouge\">.shp</code> files. From there, I iterate over the list of files using <code class=\"language-plaintext highlighter-rouge\">for i in...</code>, then pass the value of <code class=\"language-plaintext highlighter-rouge\">$i</code> into a similar <code class=\"language-plaintext highlighter-rouge\">shp2pgsql</code> as above. However, rather than using flag <code class=\"language-plaintext highlighter-rouge\">-p</code> for ‘prepare’, we are now going to use flag <code class=\"language-plaintext highlighter-rouge\">-a</code> for ‘append’. This will perform an <code class=\"language-plaintext highlighter-rouge\">INSERT INTO utahlirparcels()</code> statement for Postgres, loading in the actual data from the 25 shapefiles.</p>\n\n<h2 id=\"spend-time-now-to-save-time-later\">Spend Time Now To Save Time Later</h2>\n\n<p>Like so much of shell scripting, figuring out these commands took longer than I would’ve expected. Certainly, they took longer to figure out than it would’ve taken to copy-paste a <code class=\"language-plaintext highlighter-rouge\">shp2pgsql</code> 25 times! But by taking the time upfront to figure out a generic method of looping over shapefiles, the next time (and every time after that) I find myself needing to do this, this code will be available to load multiple shapefiles into Postgis.</p>"
}