{
  "title": "Avoid Indirection in Code",
  "link": "",
  "updated": "2019-06-23T00:00:00+00:00",
  "id": "https://mrocklin.github.io/blog/work/2019/06/23/avoid-indirection",
  "content": "<p>This post argues for avoiding indirection in community code.</p>\n\n<h2 id=\"we-are-taught-to-hide-away-details\">We are taught to hide away details</h2>\n\n<p>I often see code where authors abstract away details by placing them in some\nexternal function.  Here is a toy example:</p>\n\n<h3 id=\"before-indirection\">Before indirection</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># main.py\n</span>\n<span class=\"k\">if</span> <span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"s\">\"foo\"</span><span class=\"p\">):</span>\n    <span class=\"n\">do_something_with</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<h3 id=\"after-indirection\">After indirection</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># main.py\n</span>\n<span class=\"k\">if</span> <span class=\"n\">is_foolike</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>\n    <span class=\"n\">do_something_with</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># utils.py\n</span>\n<span class=\"k\">def</span> <span class=\"nf\">is_foolike</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"s\">\"foo\"</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>There are good reasons for this behavior:</p>\n\n<ol>\n  <li>If this code is repeated several times\nit can make things more compact</li>\n  <li>If this code is repeated several times\nit creates a central place for that logic\nso that it can be changed centrally in the future</li>\n  <li>It hides away details that may not be relevant to the main point of the function.\nIt’s like a footnote in prose.</li>\n  <li>It gives a name to a set of operations,\nusing the function name as inline documentation</li>\n  <li>If often feels cleaner and more abstract</li>\n</ol>\n\n<p>We’re taught to do this in school.\nFind some chunk of functionality,\nabstract it away,\nmove on.</p>\n\n<h2 id=\"the-case-to-avoid-indirection\">The case to avoid indirection</h2>\n\n<p>However, there is also a cost to this behavior.\nWhen a new reader encounters this code,\nthey need to jump between many function definitions in many files.\nThis non-linear reading process requires more mental focus\nthan reading linear code.</p>\n\n<p>This indirection isn’t as much of a problem during the writing process,\nthe original author is focused on building up an abstraction model in their head,\nand so writing this abstraction into code makes sense and feels good.\nHowever, it’s much more of a problem when a reader is asked\nto inspect and understand a piece of code quickly.\nThis happens in two important situations:</p>\n\n<ol>\n  <li><strong>During review</strong>, when a reviewer is asked to verify that code is\nsensible before it can be merged into the main project.\nThat reviewer probably has about a tenth as much time to spend\nas the original author does on that code.</li>\n  <li><strong>While debugging</strong> future issues.\nThis code will eventually be involved in a bug and some completely\ndifferent developer will have to glance at this code to figure out what’s going on.\nThey’ll have to understand some small section this code within a few minutes\nto determine what is relevant.\nThey won’t be able to invest the time to understand the full thought process behind it,\nand a web of function definitions can slow down this process considerably.</li>\n</ol>\n\n<p>Both review and debugging are far more often bottlenecks in modern community\ncode than is original development.  Because of this, I often encourage\ndevelopers to avoid abstraction, and “please inline this function definition”.</p>\n\n<h2 id=\"but-functions-are-still-a-good-idea\">But functions are still a good idea</h2>\n\n<p>Just to be clear,\nthere are plenty of reasons to separate complex logic into multiple functions,\nparticularly when there is repetition,\nor when some important policy is likely to change in the future.\nThere is some balance to find here.</p>\n\n<p>Mostly, I want authors to be aware that there is a human cost to indirection\nthat is felt more acutely by everyone reading the code except the original author.</p>\n\n<h2 id=\"further-reading\">Further reading</h2>\n\n<p>This post extends the broad theme in the post <a href=\"https://matthewrocklin.com/blog/work/2018/01/27/write-dumb-code\">Write Dumb Code</a></p>"
}