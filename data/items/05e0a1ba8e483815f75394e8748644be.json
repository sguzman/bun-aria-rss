{
  "title": "Using Microsoft365R with Shiny",
  "link": [
    "",
    ""
  ],
  "id": "tag:typepad.com,2003:post-6a010534b1db25970b0278804a2888200d",
  "published": "2021-09-27T09:46:43-07:00",
  "updated": "2021-09-24T05:12:02-07:00",
  "summary": "by Hong Ooi This article is a lightly-edited version of the \"Microsoft365R and Shiny\" vignette in the latest Microsoft365R release. We describe how to incorporate Microsoft365R and interactive authentication with Azure Active Directory (AAD) into a Shiny web app. There are a few steps involved: Register your app with AAD Use the app ID to authenticate and get an OAuth token Pass the token to the Microsoft365R functions App registration The default Microsoft365R app registration only works when the package is used on a local machine; it does not support running in a remote server. Because of this, when you...",
  "author": {
    "name": "Hong Ooi"
  },
  "category": [
    "",
    ""
  ],
  "content": {
    "div": {
      "p": [
        {
          "em": "by Hong Ooi"
        },
        {
          "em": {
            "a": "Microsoft365R",
            "#text": "This article is a lightly-edited version of the \"Microsoft365R and Shiny\" vignette in the latestrelease."
          }
        },
        {
          "a": [
            "Microsoft365R",
            "Azure Active Directory"
          ],
          "#text": "We describe how to incorporateand interactive authentication with(AAD) into a Shiny web app. There are a few steps involved:"
        }
      ],
      "ul": {
        "li": [
          "Register your app with AAD",
          "Use the app ID to authenticate and get an OAuth token",
          "Pass the token to the Microsoft365R functions"
        ]
      },
      "div": [
        {
          "h2": "App registration",
          "p": [
            "The default Microsoft365R app registration only works when the package is used on a local machine; it does not support running in a remote server. Because of this, when you use Microsoft365R inside a Shiny app, you (or your friendly local sysadmin) must register that app in AAD.",
            "The main things to set in your app registration are:",
            "The following pages at the AAD documentation will be helpful:"
          ],
          "ul": [
            {
              "li": [
                {
                  "p": {
                    "strong": "redirect URI",
                    "code": "https://youraccount.shinyapps.io/appname",
                    "#text": "Theof your app, ie, your user-facing site address. For example if your app is hosted in shinyapps.io, this would be a URL of the form. If your app uses a special port number rather than the default port 443 for HTTPS, don’t forget to include that as well. It’s possible to set more than one redirect, so you can reuse a single app registration for multiple Shiny apps."
                  }
                },
                {
                  "p": {
                    "strong": "type of redirect",
                    "#text": "The, either native (mobile & desktop) or webapp. There are also other types of redirects, but these are the only ones relevant to R. The difference between a mobile & desktop and a webapp redirect is that you supply a client secret when authenticating with the latter, but not the former. It’s recommended to use a webapp redirect for a Shiny app, as the client secret helps prevent third parties from hijacking your app registration. The client secret is also set as part of the app registration."
                  }
                },
                {
                  "p": {
                    "strong": "intended audience",
                    "#text": "Theof your app, ie, who is allowed to use it. This can be only members of your AAD tenant; members of any AAD tenant; or anyone with a Microsoft account (including personal accounts)."
                  }
                },
                {
                  "p": {
                    "strong": "permissions required",
                    "a": "app_registration.md",
                    "#text": "Theby your app. Refer to thefile for the list of permissions Microsoft365R uses. You can omit any permissions that you don’t need if your app doesn’t use all of Microsoft365R’s functionality, eg if you don’t handle emails you can omit Mail.Send and Mail.ReadWrite."
                  }
                }
              ]
            },
            {
              "li": [
                {
                  "p": {
                    "a": "A step-by-step guide",
                    "#text": "to registering an app in the Azure portal."
                  }
                },
                {
                  "p": {
                    "a": "How to set permissions for an app",
                    "em": "delegated",
                    "#text": ". For a Shiny app, note that you wantpermissions from the Microsoft Graph API, not application permissions."
                  }
                }
              ]
            }
          ]
        },
        {
          "h2": "Shiny code skeleton",
          "p": [
            "Below is a basic app that logs the user in, retrieves their OneDrive, and lists the contents of the root folder.",
            {
              "code": [
                "get_sharepoint_site",
                "get_team"
              ],
              "#text": "One thing to note is that the regular Microsoft365R client functions like,etc are intended for use on a local machine. While they will still work when called in a web app, it’s a better idea to call the underlying R6 methods directly: Microsoft365R extends AzureGraph with several R6 classes and methods, which do the actual work of interacting with the Microsoft 365 REST API."
            },
            {
              "code": [
                "get_drive()",
                "AzureGraph::az_user",
                "?add_methods"
              ],
              "#text": "Here, we call themethod for theclass, which retrieves the OneDrive for a user. For more information, see the online help page in R for the Microsoft365R “add_methods” topic:."
            }
          ],
          "div": {
            "pre": {
              "br": [
                "",
                "",
                ""
              ],
              "#text": "library(AzureAuth)\nlibrary(AzureGraph)\nlibrary(Microsoft365R)\nlibrary(shiny)\n\ntenant <- \"your-tenant-here\"\n\n# the application/client ID of your app registration\n# - not to be confused with the 'object ID' or 'service principal ID'\napp <- \"your-app-id-here\"\n\n# the address/redirect URI of your app\n# - AAD allows only HTTPS for non-localhost redirects, not HTTP\nredirect <- \"https://example.com/mysite\"\nport <- httr::parse_url(redirect)$port\noptions(shiny.port=if(is.null(port)) 443 else as.numeric(port))\n\n# the client secret of your app registration\n# - NEVER put secrets in code:# - here we get it from an environment variable\n# - unnecessary if you have a 'desktop & mobile' redirect\npwd <- Sys.getenv(\"EXAMPLE_SHINY_CLIENT_SECRET\", \"\")\nif(pwd == \"\") pwd <- NULL\n\n# get the Graph permissions listed for the app, plus an ID token\nresource <- c(\"https://graph.microsoft.com/.default\", \"openid\")\n\n# a simple UI: display the user's OneDrive\nui <- fluidPage(\n    verbatimTextOutput(\"drv\")\n)\n\nui_func <- function(req)\n{\n    opts <- parseQueryString(req$QUERY_STRING)\n    if(is.null(opts$code))\n    {\n        auth_uri <- build_authorization_uri(resource, tenant, app,redirect_uri=redirect, version=2)\n        redir_js <- sprintf(\"location.replace(\\\"%s\\\");\", auth_uri)\n        tags$script(HTML(redir_js))\n    }\n    else ui\n}\n\nserver <- function(input, output, session)\n{\n    opts <- parseQueryString(isolate(session$clientData$url_search))\n    if(is.null(opts$code))\n        return()\n\n    token <- get_azure_token(resource, tenant, app, password=pwd,&#0160;&#0160;&#0160;   auth_type=\"authorization_code\",\n       authorize_args=list(redirect_uri=redirect), version=2,\n       use_cache=FALSE, auth_code=opts$code)\n\n    # display the contents of the user's OneDrive root folder\n    drv <- ms_graph$\n        new(token=token)$\n        get_user()$\n        get_drive()\n    output$drv <- renderPrint(drv$list_files())\n}\n\nshinyApp(ui_func, server)"
            }
          }
        }
      ]
    }
  }
}