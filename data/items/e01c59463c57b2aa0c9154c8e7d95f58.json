{
  "title": "Optimizing a Daily Fantasy Sports NBA lineup &#8212; Knapsack, NumPy, and Giannis",
  "link": "https://bigishdata.com/2019/07/28/optimizing-a-daily-fantasy-sports-nba-lineup-knapsack-numpy-and-giannis/",
  "comments": "https://bigishdata.com/2019/07/28/optimizing-a-daily-fantasy-sports-nba-lineup-knapsack-numpy-and-giannis/#comments",
  "dc:creator": "Jack Schultz",
  "pubDate": "Sun, 28 Jul 2019 15:08:21 +0000",
  "category": [
    "General",
    "Machine Learning",
    "Python",
    "DFS",
    "dynamic programming",
    "FanDuel",
    "giannis",
    "knapsack",
    "NBA",
    "numpy",
    "pandas"
  ],
  "guid": "http://bigishdata.com/?p=1539",
  "description": "Opener In the data world, when looking for projects or an interesting problem, sports almost always gives you the opportunity. For a lot of what I write, I talk about getting the data because the sports leagues rarely if ever &#8230; <a href=\"https://bigishdata.com/2019/07/28/optimizing-a-daily-fantasy-sports-nba-lineup-knapsack-numpy-and-giannis/\">Continue reading <span class=\"meta-nav\">&#8594;</span></a>",
  "content:encoded": "<div data-shortcode=\"caption\" id=\"attachment_1568\" style=\"width: 555px\" class=\"wp-caption alignnone\"><a href=\"https://bigishdata.files.wordpress.com/2019/07/giannis-2018-10-24.jpg\"><img loading=\"lazy\" aria-describedby=\"caption-attachment-1568\" data-attachment-id=\"1568\" data-permalink=\"https://bigishdata.com/2019/07/28/optimizing-a-daily-fantasy-sports-nba-lineup-knapsack-numpy-and-giannis/giannis-2018-10-24/\" data-orig-file=\"https://bigishdata.files.wordpress.com/2019/07/giannis-2018-10-24.jpg\" data-orig-size=\"3493,2587\" data-comments-opened=\"1\" data-image-meta=\"{\"aperture\":\"1.8\",\"credit\":\"\",\"camera\":\"Pixel 2 XL\",\"caption\":\"\",\"created_timestamp\":\"1540414039\",\"copyright\":\"\",\"focal_length\":\"4.459\",\"iso\":\"55\",\"shutter_speed\":\"0.007993\",\"title\":\"\",\"orientation\":\"1\"}\" data-image-title=\"giannis-2018-10-24\" data-image-description=\"\" data-image-caption=\"<p>If you zoom in a little, you can see Giannis about to make a screen, while Embiid watches from the other side of the court to help out if the screen is successful.</p>\n\" data-medium-file=\"https://bigishdata.files.wordpress.com/2019/07/giannis-2018-10-24.jpg?w=300\" data-large-file=\"https://bigishdata.files.wordpress.com/2019/07/giannis-2018-10-24.jpg?w=584\" class=\" wp-image-1568\" src=\"https://bigishdata.files.wordpress.com/2019/07/giannis-2018-10-24.jpg?w=545&#038;h=410\" alt=\"\" width=\"545\" height=\"410\" /></a><p id=\"caption-attachment-1568\" class=\"wp-caption-text\">Pic when I was sitting courtside on Oct 24th, 2018. If you zoom in a little, you can see Giannis about to make a screen, while Embiid watches from the other side of the court to help out if the screen is successful. Both players were in the optimal lineup that night.</p></div>\n<h2>Opener</h2>\n<p>In the data world, when looking for projects or an interesting problem, sports almost always gives you the opportunity. For a lot of what I write, I talk about <a href=\"https://bigishdata.com/2016/03/05/gather-all-the-pga-tour-stats/\">getting the data</a> because the sports leagues rarely if ever give the data away. That gets a little repetitive, so I wanted to change it up to something interesting that&#8217;s done <em>after</em> you get the data, like <strong>how to optimize a lineup for NBA Daily Fantasy Sports (DFS)</strong>.</p>\n<p>Before continuing, I&#8217;ll say that this isn&#8217;t about me making money from betting. In the past season I made lineups for some of the nights, but realized quickly that in order to win, you really need to know a ton about the sport. I love watching the NBA in the winter, love watching the Bucks, but don&#8217;t follow all other teams close to enough compared to others. Still, I found it worth it to keep getting the data during the regular season and found it most interesting to find out who would have been in the best lineup that night, and then look back at the highlights to see why a certain player did well.</p>\n<p>Because of that, I took the code I used, refactored it some, and wrote this up to show what I did to get to the point where I can calculate the best lineup.</p>\n<h2>Knapsacking</h2>\n<p>This optimization is generally categorized as a Knapsack problem. The wiki page for the <a href=\"https://en.wikipedia.org/wiki/Knapsack_problem\">Knapsack Problem</a> defines it as follows:</p>\n<p>&#8220;&#8221;&#8221;Given a set of items, each with a weight and a value, determine the number of each item to include in a collection so that the total weight is less than or equal to a given limit and the total value is as large as possible.&#8221;&#8221;&#8221;</p>\n<p>Or, self described &#8211; If you’re stealing items of known value, but only are able to carry a certain amount of weight, how do you figure out which items to take?</p>\n<p>This DFS problem though is slightly different than the standard Knapsack problem, and makes it much more interesting.</p>\n<h2>FanDuel Rules</h2>\n<p>The DFS site I&#8217;m using for this is <a href=\"https://www.fanduel.com/\">FanDuel</a>, one of the two main Daily Fantasy Sports sites. Their rules for the NBA are that all players are assigned a position, Point Guard (PG), Shooting Guard (SG), Small Forward (SF), Power Forward (PF), and Center (C). A line up will have 2 PGs, 2 SGs, 2 SFs, 2 PFs, and 1 C. Each player is given a salary, and the combined salary of the players in your lineup must not be above $60,000. For reference, to give a sense of salary distribution, and what you&#8217;ll see in the final solution for best lineup of October 24th, 2018, MVP Giannis Antetokounmpo had a salary of $11,700, and ear blower and member of the Lakers Meme-Team, Lance Stephenson has a salary of $3,900. This data was given in csv files from FanDuel that we can download.</p>\n<p>The amount of points a player gets depends on a bunch of stats for the night, positive points for things like actual points, rebounds, 3 point attempts made, assists, steals, and negative points for things like turnovers. This data comes from nba.com which I scraped and loaded into postgres.</p>\n<h2>Data</h2>\n<p>Below is a screenshot of what an example salary csv file that we can download looks like. Note that this is for a different date than the example day I&#8217;m using. I didn&#8217;t get the csv from FanDuel on that date, I had to scrape it from somewhere else, but it&#8217;s still important to give a look of what the csv file looks like. For our simple optimization, we only need the name, the position, and the salary of all the players.</p>\n<p><a href=\"https://bigishdata.files.wordpress.com/2019/07/screen-shot-2019-07-26-at-6.49.57-pm.png\"><img loading=\"lazy\" data-attachment-id=\"1590\" data-permalink=\"https://bigishdata.com/2019/07/28/optimizing-a-daily-fantasy-sports-nba-lineup-knapsack-numpy-and-giannis/screen-shot-2019-07-26-at-6-49-57-pm/\" data-orig-file=\"https://bigishdata.files.wordpress.com/2019/07/screen-shot-2019-07-26-at-6.49.57-pm.png\" data-orig-size=\"2350,1516\" data-comments-opened=\"1\" data-image-meta=\"{\"aperture\":\"0\",\"credit\":\"\",\"camera\":\"\",\"caption\":\"\",\"created_timestamp\":\"0\",\"copyright\":\"\",\"focal_length\":\"0\",\"iso\":\"0\",\"shutter_speed\":\"0\",\"title\":\"\",\"orientation\":\"0\"}\" data-image-title=\"FD download csv\" data-image-description=\"\" data-image-caption=\"\" data-medium-file=\"https://bigishdata.files.wordpress.com/2019/07/screen-shot-2019-07-26-at-6.49.57-pm.png?w=300\" data-large-file=\"https://bigishdata.files.wordpress.com/2019/07/screen-shot-2019-07-26-at-6.49.57-pm.png?w=584\" class=\"alignnone wp-image-1590\" src=\"https://bigishdata.files.wordpress.com/2019/07/screen-shot-2019-07-26-at-6.49.57-pm.png?w=410&#038;h=271\" alt=\"\" width=\"410\" height=\"271\" /></a></p>\n<p>Secondly, we need the stat lines which I then use to calculate the number of points a player got in a night. Below is a screenshot from stats.nba.com where it show&#8217;s how a player did that night. I have a script that scrapes that data the next day and puts that into the db.</p>\n<p><a href=\"https://bigishdata.files.wordpress.com/2019/07/screen-shot-2019-07-26-at-7.01.23-pm.png\"><img loading=\"lazy\" data-attachment-id=\"1592\" data-permalink=\"https://bigishdata.com/2019/07/28/optimizing-a-daily-fantasy-sports-nba-lineup-knapsack-numpy-and-giannis/screen-shot-2019-07-26-at-7-01-23-pm/\" data-orig-file=\"https://bigishdata.files.wordpress.com/2019/07/screen-shot-2019-07-26-at-7.01.23-pm.png\" data-orig-size=\"2898,1222\" data-comments-opened=\"1\" data-image-meta=\"{\"aperture\":\"0\",\"credit\":\"\",\"camera\":\"\",\"caption\":\"\",\"created_timestamp\":\"0\",\"copyright\":\"\",\"focal_length\":\"0\",\"iso\":\"0\",\"shutter_speed\":\"0\",\"title\":\"\",\"orientation\":\"0\"}\" data-image-title=\"Bucks-6ers-boxscore\" data-image-description=\"\" data-image-caption=\"\" data-medium-file=\"https://bigishdata.files.wordpress.com/2019/07/screen-shot-2019-07-26-at-7.01.23-pm.png?w=300\" data-large-file=\"https://bigishdata.files.wordpress.com/2019/07/screen-shot-2019-07-26-at-7.01.23-pm.png?w=584\" class=\"alignnone wp-image-1592\" src=\"https://bigishdata.files.wordpress.com/2019/07/screen-shot-2019-07-26-at-7.01.23-pm.png?w=492&#038;h=219\" alt=\"\" width=\"492\" height=\"219\" /></a></p>\n<p>If you look at the data csv files in the repo, all I have here is the name, position, salary, and points earned. This is a post about optimization, not about data gathering. If you&#8217;re wondering a little, here&#8217;s the query I used to get the data. I have players, positions, stat_lines, games, and some other tables. A lot of work goes into getting all this data synced up.</p>\n<pre>select p.id as pid, p.fd_name as name, sl.fd_positions as pos, sl.fd_salary as sal, sl.fd_points as pts from stat_lines sl join games g on sl.game_id=g.id join players p on p.id=sl.player_id where g.date='2018-10-24' and sl.fd_salary is not null order by sal desc</pre>\n<h2>Code</h2>\n<p>Here&#8217;s <strong><a href=\"https://github.com/jackschultz/nba-optimize\" target=\"_blank\" rel=\"noopener\">the link to all the code on github</a></strong>. In it, you&#8217;ll find the csv files of data, three separate scripts to run the three different optimization methods, and three files for the Jupyter notebooks to look at a simplified example of the code.</p>\n<h2>Continuing</h2>\n<p>In the rest of the post, I&#8217;ll go through the three slightly different solutions for the problem. The first uses basic python elements and is pretty slow. The second brisk solution uses libraries like Pandas and NumPy to speed up the calculation quite a bit. The final fast solution goes beyond the second, ignoring most python structures, and uses matrices to improve the quickness an impressive amount.</p>\n<p>In all cases, I made simple Jupyter files that go through how they each combine positions which hopefully give a little interactive example of the differences to try to show it more than words can do. In each case, when you go through them, you&#8217;ll see at the bottom they all return the same answer of what are the best players, what their combined salary is, and what their point totals are.</p>\n<p>I talk about salaries, points, and indexes a lot. Salaries are the combined salaries of the players in a group, points are the combined points of the players in a group, and indexes are the the indexes from the csv file or the pandas dataframe which represent which players are in a group. Instead of indexes, we could use their names instead. Don&#8217;t get this confused when I talk about the indexes in the numpy arrays / matrixes that are needed to find which groupings are the best. To keep the index talk apart, I&#8217;ll refer to the indexes of the players as the player indexes. Also, I sometimes mix salary and cost, so if you see either of those words, they refer to the same thing.</p>\n<p>If you have any questions, want clarification, or find mistakes, <a href=\"https://bigishdata.com/contact/\">get in contact</a>. Also I have <a href=\"https://twitter.com/jack_schultz\">twitter</a> if you feel like looking at how little I tweet.</p>\n<h2>Basic solution</h2>\n<p>Time to talk about the solutions. There are effectively two parts to the problem at the start of basic. The first is combining the positions themselves together. From the FD rules, we need two PGs together. The goal of this is to return, for each salary as an input, the combination of players of the same position who have a combined salary less than the inputted salary with the most combined points.</p>\n<p>Said a different way, for each salary of the test, we want to double loop through the same initial position array, and find the most successful combination where the combined salary is less than the salary we&#8217;re testing against.</p>\n<p>The second part deals with combining each of those returned values together. Say we have the information about the best two PGs and the best two SGs. Again, for each salary as input, it returns the best combination of players below that salary. This is pretty much identical to what I said about the first part, with the only difference being that we didn&#8217;t start with two groups of the same players. Loop through the possible values of the salary possibilities, double loop through the arrays of positions, find the players who have the max points where the sum of their salaries is less than the salary value we&#8217;re testing.</p>\n<p>There&#8217;s a lot of code in the solution, so I&#8217;ll post only a little, which was taken from <a href=\"https://github.com/jackschultz/nba-optimize/blob/master/example_basic_optimize.ipynb\">the Jupyter file</a> I created to further demonstrate. Click that, go through the lines of example code, and look at the double loops and see how the combinations are created. If you&#8217;re reading this, it&#8217;s worth it. To get a full look look here&#8217;s the link <a href=\"https://github.com/jackschultz/nba-optimize/blob/master/slow_optimize.py\">directly to the file on github</a>.</p>\n<pre><span class=\"n\">#pgs, and sgs have the format of [(salary, points, [inds...])...]\n#where salary is the combined cost of the players with inds in inds, points is the sum of points.\n\ntest_salary = 45000 #example test salary.\nmax_found_points</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"k\">for</span> <span class=\"n\">g1</span> <span class=\"ow\">in</span> <span class=\"n\">pgs</span><span class=\"p\">:</span>\n    <span class=\"k\">for</span> <span class=\"n\">g2</span> <span class=\"ow\">in</span> <span class=\"n\">sgs</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"n\">g1</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">g2</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">></span> <span class=\"n\">test_salary</span><span class=\"p\">:</span>\n            <span class=\"k\">break</span> <span class=\"c1\">#assuming in sorted salary order, which they are</span>\n        <span class=\"n\">points</span> <span class=\"o\">=</span> <span class=\"n\">g1</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">g2</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"n\">points</span> <span class=\"o\">></span> <span class=\"n\">max_found_points</span><span class=\"p\">:</span>\n            <span class=\"n\">max_found_points</span> <span class=\"o\">=</span> <span class=\"n\">points</span>\n            <span class=\"n\">top_players</span> <span class=\"o\">=</span> <span class=\"n\">g1</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">g2</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">] #combining two lists</span>\n            <span class=\"n\">top_points</span> <span class=\"o\">=</span> <span class=\"n\">points</span>\n            <span class=\"n\">top_sal</span> <span class=\"o\">=</span> <span class=\"n\">g1</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">g2</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]\nreturn (top_sal, top_points, top_players)\n#after the loop we have a new tuple of the same format (salary, points, [inds])\n#where this is the best combo of players in pgs and sgs who don't have a total salary\n#sum greater than the test salary</span></pre>\n<p>Here&#8217;s a slow gif of it running where you can see the time it takes to do the combinations. In the end, it prints out the names and info for the winners in the lineup. I also use cProfile and pstats to time the script, and also show where it&#8217;s being slow. This run took a tiny bit under 50 seconds to run (as you&#8217;ll see from the timing logs) so don&#8217;t think you&#8217;ll have to sit there and wait for minutes.</p>\n<p><a href=\"https://bigishdata.files.wordpress.com/2019/07/basic-optimize.gif\"><img loading=\"lazy\" data-attachment-id=\"1583\" data-permalink=\"https://bigishdata.com/2019/07/28/optimizing-a-daily-fantasy-sports-nba-lineup-knapsack-numpy-and-giannis/basic-optimize/\" data-orig-file=\"https://bigishdata.files.wordpress.com/2019/07/basic-optimize.gif\" data-orig-size=\"490,492\" data-comments-opened=\"1\" data-image-meta=\"{\"aperture\":\"0\",\"credit\":\"\",\"camera\":\"\",\"caption\":\"\",\"created_timestamp\":\"0\",\"copyright\":\"\",\"focal_length\":\"0\",\"iso\":\"0\",\"shutter_speed\":\"0\",\"title\":\"\",\"orientation\":\"0\"}\" data-image-title=\"basic-optimize\" data-image-description=\"\" data-image-caption=\"\" data-medium-file=\"https://bigishdata.files.wordpress.com/2019/07/basic-optimize.gif?w=300\" data-large-file=\"https://bigishdata.files.wordpress.com/2019/07/basic-optimize.gif?w=490\" class=\"alignnone wp-image-1583\" src=\"https://bigishdata.files.wordpress.com/2019/07/basic-optimize.gif?w=398&#038;h=399\" alt=\"\" width=\"398\" height=\"399\" /></a></p>\n<h2>Brisk solution</h2>\n<p>After completing the first, most basic solution, it was time to move forward and write the solution which removes some of those loops by using numpy arrays.</p>\n<p><span id=\"more-1539\"></span></p>\n<p>I&#8217;ll start by trying to explain the big differences in how the  <code>combine_single_position</code> and <code>combine_multiple_position</code> functions work.</p>\n<ol>\n<li>create combined matrixes for the salaries, points, and player indexes of the two positions we&#8217;re combining</li>\n<li>find the indexes of those matricies where the cost is less than the cost we&#8217;re testing</li>\n<li>multiply that by the points matrix, which results in only having points where the cost lower than the test cost</li>\n<li>find the numpy index of the max points</li>\n<li>unravel those numpy index into x and y indexes</li>\n<li>select the data from the points, costs, player index matrices at those places and return those values.</li>\n</ol>\n<p>Like above, here&#8217;s the <a href=\"https://github.com/jackschultz/nba-optimize/blob/master/example_brisk_optimize.ipynb\" target=\"_blank\" rel=\"noopener\">Jupyter notebook</a> for it. Click that link and look at the damn thing please. If you go through and can understand this, it really shines a light on the process of how to quickly calculate the best option.</p>\n<p>In the end, it takes ~2.5 seconds to complete, which is a little under 20x quicker than the basic solution, but feels like much more than 20x considering 2 seconds compared 42 is huge.</p>\n<p><a href=\"https://bigishdata.files.wordpress.com/2019/07/brisk-optimize.gif\"><img loading=\"lazy\" data-attachment-id=\"1584\" data-permalink=\"https://bigishdata.com/2019/07/28/optimizing-a-daily-fantasy-sports-nba-lineup-knapsack-numpy-and-giannis/brisk-optimize/\" data-orig-file=\"https://bigishdata.files.wordpress.com/2019/07/brisk-optimize.gif\" data-orig-size=\"528,551\" data-comments-opened=\"1\" data-image-meta=\"{\"aperture\":\"0\",\"credit\":\"\",\"camera\":\"\",\"caption\":\"\",\"created_timestamp\":\"0\",\"copyright\":\"\",\"focal_length\":\"0\",\"iso\":\"0\",\"shutter_speed\":\"0\",\"title\":\"\",\"orientation\":\"0\"}\" data-image-title=\"brisk-optimize\" data-image-description=\"\" data-image-caption=\"\" data-medium-file=\"https://bigishdata.files.wordpress.com/2019/07/brisk-optimize.gif?w=287\" data-large-file=\"https://bigishdata.files.wordpress.com/2019/07/brisk-optimize.gif?w=528\" class=\"alignnone wp-image-1584\" src=\"https://bigishdata.files.wordpress.com/2019/07/brisk-optimize.gif?w=396&#038;h=413\" alt=\"\" width=\"396\" height=\"413\" /></a></p>\n<p>The two slower parts of this solution are because we&#8217;re still looping through all the costs and doing these calculations one at a time and also converting the values into NumPy arrays themselves. Check out the logs at the end of the gif! I ordered by the total time for each method and by far the slowest is the <code>np.array</code> function. It alone eats up ~1.2 seconds. Which means this is a much better solution, but still is slow because of how the data is structured. In the final solution below, I change how the data is stored, and remove all <code>for</code> loops.</p>\n<h2>Fast solution</h2>\n<p>After making the changes to what was slowing down the brisk solution, this fast solution is real fast.</p>\n<p>First step to faster was to solve the <code>np.array</code> casting slowdown, and we&#8217;re going to do that by changing the return values for the functions. In both solutions above, we used list comprehension to where we had an array of values that we had to parse to do the computation. For example, this was the return value of the merge function where these values were stored in another list.</p>\n<pre> return test_salary, top_inds, max_points, max_cost</pre>\n<p>When we wanted to do the next merge, we had to take the values out like this which is dumb and slow, and the explicitness is what was slowing it down. Again, this is the brisk solution, not the fast.</p>\n<pre>costs = np.array([cost for _,_,_,cost in pos1])\ncosts2 = np.array([cost for _,_,_,cost in pos2])\n\npoints = np.array([point for _,_,point,_ in pos1])\npoints2 = np.array([point for _,_,point,_ in pos2])\n\nids = np.array([ind for _,ind,_,_ in pos1])\nids2 = np.array([ind for _,ind,_,_ in pos2])</pre>\n<p>To get faster, we&#8217;re only going to deal with arrays of values that are always separate, but are kept together by the same indexes. For example, if we find the max number of points has the index 34, the associated indexes for this max value are in the same location in the array of data frame indexes. With that, this is how we get the data to be used. They&#8217;re <code>np.array</code>s already, and we can split them up way quicker.</p>\n<pre>_, ids, points, costs = pos1\n_, ids2, points2, costs2 = pos2</pre>\n<p><span style=\"font-style:inherit;\">Recall above in the brisk solution, when combining single positions, we use the <code>itertools.combinations</code> function to create the testable arrays. However, when we combine multiple position we take two arrays and turn them into a 2d matrix for each test value. Instead of that, we want to use itertools to perform a similar function to create uniquer pairs of data, but this time we use the <code>itertools.product</code> function to create the testable groups</span><span style=\"font-style:inherit;\">.</span></p>\n<p>Since we have the data in the same format for both combining a single position and combining multiple positions, the logic is the same for calculating the best values for each cost is the same, and we use a function called <code>restrict_and_merge</code> that takes care of the fuller math. Functions that perform the same math are very, very good to have.</p>\n<p>We&#8217;re still using <code>for</code> loops to do the math to find the best players whose salaries are less than the cost in the for loop. To solve this, we want to expand those cost, points, and index numpy data structures into another dimension, where there are values for a full 2d matrix of the costs. With those variables, of all the same dimensions, we can do single <code>full_costs <= full_cost_ranges</code> comparison, multiply <code>full_points</code> by that new matrix, find the top indexes by row, and then grab those values to return.</p>\n<p>To try to convince you to look at the <a href=\"https://github.com/jackschultz/nba-optimize/blob/master/example_fast_optimize.ipynb\" target=\"_blank\" rel=\"noopener\">Jupyter notebook example</a>, here&#8217;s a screenshot that shows this point about having the same dimensions.</p>\n<p><a href=\"https://bigishdata.files.wordpress.com/2019/07/screen-shot-2019-07-26-at-7.42.05-pm.png\"><img loading=\"lazy\" data-attachment-id=\"1600\" data-permalink=\"https://bigishdata.com/2019/07/28/optimizing-a-daily-fantasy-sports-nba-lineup-knapsack-numpy-and-giannis/screen-shot-2019-07-26-at-7-42-05-pm/\" data-orig-file=\"https://bigishdata.files.wordpress.com/2019/07/screen-shot-2019-07-26-at-7.42.05-pm.png\" data-orig-size=\"2014,518\" data-comments-opened=\"1\" data-image-meta=\"{\"aperture\":\"0\",\"credit\":\"\",\"camera\":\"\",\"caption\":\"\",\"created_timestamp\":\"0\",\"copyright\":\"\",\"focal_length\":\"0\",\"iso\":\"0\",\"shutter_speed\":\"0\",\"title\":\"\",\"orientation\":\"0\"}\" data-image-title=\"dimensions\" data-image-description=\"\" data-image-caption=\"\" data-medium-file=\"https://bigishdata.files.wordpress.com/2019/07/screen-shot-2019-07-26-at-7.42.05-pm.png?w=300\" data-large-file=\"https://bigishdata.files.wordpress.com/2019/07/screen-shot-2019-07-26-at-7.42.05-pm.png?w=584\" class=\"alignnone wp-image-1600\" src=\"https://bigishdata.files.wordpress.com/2019/07/screen-shot-2019-07-26-at-7.42.05-pm.png?w=477&#038;h=136\" alt=\"\" width=\"477\" height=\"136\" /></a></p>\n<p>Here&#8217;s a link to the <a href=\"https://github.com/jackschultz/nba-optimize/blob/master/fast_optimize.py\" target=\"_blank\" rel=\"noopener\">full file on github</a>.</p>\n<p>Gif time. This runs damn quick.</p>\n<p><a href=\"https://bigishdata.files.wordpress.com/2019/07/fast-optimize.gif\"><img loading=\"lazy\" data-attachment-id=\"1585\" data-permalink=\"https://bigishdata.com/2019/07/28/optimizing-a-daily-fantasy-sports-nba-lineup-knapsack-numpy-and-giannis/fast-optimize/\" data-orig-file=\"https://bigishdata.files.wordpress.com/2019/07/fast-optimize.gif\" data-orig-size=\"600,506\" data-comments-opened=\"1\" data-image-meta=\"{\"aperture\":\"0\",\"credit\":\"\",\"camera\":\"\",\"caption\":\"\",\"created_timestamp\":\"0\",\"copyright\":\"\",\"focal_length\":\"0\",\"iso\":\"0\",\"shutter_speed\":\"0\",\"title\":\"\",\"orientation\":\"0\"}\" data-image-title=\"fast-optimize\" data-image-description=\"\" data-image-caption=\"\" data-medium-file=\"https://bigishdata.files.wordpress.com/2019/07/fast-optimize.gif?w=300\" data-large-file=\"https://bigishdata.files.wordpress.com/2019/07/fast-optimize.gif?w=584\" class=\"alignnone wp-image-1585\" src=\"https://bigishdata.files.wordpress.com/2019/07/fast-optimize.gif?w=452&#038;h=384\" alt=\"\" width=\"452\" height=\"384\" /></a></p>\n<p>In the end, the only thing holding it back is calling <code>numpy.array</code> to cast the list returned by the by the <code>itertools.combinations</code> or <code>.product</code> calls. If this optimization problem was with more players, and I&#8217;m talking 1,000s to 100,000s of more players, we&#8217;d want to deal with it. But for this project – where people forecast each player’s fantasy points for a particular night and want to know the optimal lineup based on those projections – 0.045 seconds is absolutely quick enough.</p>\n<p><strong>Winners on 10/24/2019</strong></p>\n<p>This post is about how to optimize, but if you&#8217;re here looking for the answer of the best possible lineup of 10/24/2018, here it is:</p>\n<p>Stephen Curry PG 9300 61.3<br />\nCameron Payne PG 3700 36.0<br />\nKent Bazemore SG 6700 55.1<br />\nDamyean Dotson SG 4100 40.0<br />\nGiannis Antetokounmpo SF 11700 78.6<br />\nLance Stephenson SF 3900 47.6<br />\nDomantas Sabonis PF 4900 43.0<br />\nPJ Tucker PF 4500 32.6<br />\nJoel Embiid C 10400 68.8</p>\n<p>Combined player points: 463, 430.4 after dropping the lowest score<br />\nCombined player salary: $59,200</p>\n<h2>The Future</h2>\n<p>Thinking to what&#8217;s next, the absolute main thing people would want is to be able to optimize a lineup for that night given given their own projections. I&#8217;ve actually made somewhat of an interface locally where we can see the player&#8217;s values for a night, their average stats, and make selections to make optimal selections. One of the capabilities of this is for people to select players as keepers – meaning you can select players that you definitely do or do not want to be in your lineup, no matter the result of the optimization. For example, If the Bucks were playing the Celtics that night, pretty sure you&#8217;re going to want Khris Middleton on your team. Similarly, when Kawhi is load managing, you&#8217;re going to want to make sure he won&#8217;t get selected.</p>\n<p>Along these lines, if you want to win at DFS NBA, all you need to know is a good estimate of the minutes that people are going to play. This depends on things like load management, and who goes in and out of the rotation. If someone is going to get more minutes tonight than usual, they&#8217;re probably worth a pick. To make these picks, we make their projected points their predicted minutes played * average points per 36 which we can calculate. Further, because some of the winnings are top heavy, you can predict points by predicted minutes * std above average points per 36, meaning that you want guys who are playing more minutes but when they get going, they can get really hot.</p>\n<p>The final thing to say about this is that I used FanDuel because DraftKings, the other main betting site, has different rules. For them, there&#8217;s 1 PG, 1 SG, 1 G, 1 SF, 1 PF, 1 F, 1 C, and 1 Util (meaning any position). This difficulty in this is that we have to make sure nobody who went off on a night isn&#8217;t used in three positions. We could quickly test a lineup enforcing 3 PG, 1 SG, 1 SF, 1 PF, 1 F, 1 C, and then test 2 PG, 3 SG, 1 SF, 1 PF, 1 F, 1 C, etc, but that makes us need to check a certain number of position combos.</p>\n<p>So, if anyone wants me to do continue with other options, a web UI, and other site capabilities, let me know.</p>\n<h2>Other thoughts</h2>\n<p>I always have tons of different thoughts when writing these posts, but I try to do my best to keep all non essential information out of the main body. Let&#8217;s be real, people who read this just skim through the words, look at the code to either get inspiration or judge the writer, maybe look at the pictures or stare at the gifs, and that&#8217;s it. They don&#8217;t want to see random words if they don&#8217;t need to, they want technical.</p>\n<p>But I like writing about other parts, and some people like reading that too (hi mom), so I throw everything down here in bullet points.</p>\n<ul>\n<li>If someone wants to take that code sample I pasted here and put it in a Jupyter notebook to share with others, please do. Having people run the full code itself takes effort, but following a link, clicking play, and being able to see a dynamic example is much better. You&#8217;ll get all the credit too!</li>\n<li>Pandas is great. Like, really great. At first in the normal solution, I had it running at two minutes because I didn&#8217;t convert the csv file info into int and floats right away. I looked at the timing logs and saw that was the slowest part of the code, removed them, and it went three times faster. With Pandas, I don&#8217;t have to think about conversion. I don&#8217;t have to think about calling <code>next(reader)</code> if I don&#8217;t want the headings on a csv file. In fact, in the bigger solution I have, I use Pandas to run sql queries in the db where I stored all this data. Like I said, it&#8217;s great.</li>\n<li>In the <code>restrict_and_merge</code> function for the fast solution, I was originally using <code>np.tile</code> to expand the dimensions. I realized this was slowing us down the most by looking at the logs. Looking around, I found out that <code>np.tile</code> actually copies the numbers into memory which is a big slowdown. We don&#8217;t need that here since all we&#8217;re doing is copying the numbers. By using <code>np.broadcast_to</code>, we only tell <code>np</code> that we&#8217;re wanting to copy the same numbers to another dimension. I believe <code>np</code> then has a reference to that rather than taking up memory. That cut down the time from ~0.19 seconds to ~0.075, more than 10x quicker. I really, really wanted to include this paragraph in that section itself, but couldn&#8217;t convince myself to do that.</li>\n<li>I mentioned this at the top, but I have a bunch of different code that I&#8217;ve used to do things like get the data, store the data, and show the data. I used <code>requests</code> and <code>lxml</code> to get the data, postgres to store the data, and flask / vue.js to show and interact with the data. It&#8217;s written in python 2 actually, so I&#8217;d need to clean it up, upgrade to python 3, and a couple other things before being able to write about it.</li>\n</ul>\n",
  "wfw:commentRss": "https://bigishdata.com/2019/07/28/optimizing-a-daily-fantasy-sports-nba-lineup-knapsack-numpy-and-giannis/feed/",
  "slash:comments": 2,
  "media:content": [
    {
      "media:title": "jackschultz23"
    },
    "",
    "",
    "",
    "",
    "",
    "",
    ""
  ]
}