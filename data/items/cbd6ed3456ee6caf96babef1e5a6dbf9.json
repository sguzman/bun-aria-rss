{
  "title": "Hacker, Hack Thyself",
  "description": "<!--kg-card-begin: markdown--><p>We've read so many sad stories about communities that were fatally compromised or destroyed due to security exploits. We took that lesson to heart when we founded the <a href=\"https://discourse.org\">Discourse</a> project; we endeavor to build open source software that is secure and safe for communities by default, even if</p>",
  "link": "https://blog.codinghorror.com/hacker-hack-thyself/",
  "guid": "5988f60721f57d0019a2e12b",
  "dc:creator": "Jeff Atwood",
  "pubDate": "Fri, 02 Jun 2017 08:11:16 GMT",
  "content:encoded": "<!--kg-card-begin: markdown--><p>We've read so many sad stories about communities that were fatally compromised or destroyed due to security exploits. We took that lesson to heart when we founded the <a href=\"https://discourse.org\">Discourse</a> project; we endeavor to build open source software that is secure and safe for communities by default, even if there are thousands, or millions, of them out there.</p>\n<p>However, we also value <em>portability</em>, the ability to get your data into and out of Discourse at will. This is why Discourse, unlike other forum software, defaults to a Creative Commons license. As a basic user on any Discourse you can easily export and download all your posts right from your user page.</p>\n<p><img src=\"https://blog.codinghorror.com/content/images/2017/06/discourse-download-all.png\" alt=\"Discourse Download All Posts\" loading=\"lazy\"></p>\n<p>As a site owner, you can easily back up and restore your entire site database from the admin panel, right in your web browser. Automated weekly backups are set up for you out of the box, too. I'm not <a href=\"https://blog.codinghorror.com/international-backup-awareness-day/\">the world's foremost expert on backups</a> for nothing, man!</p>\n<p><img src=\"https://blog.codinghorror.com/content/images/2017/06/discourse-backups.png\" alt=\"Discourse database backup download\" loading=\"lazy\"></p>\n<p>Over the years, we've learned that balancing security and data portability can be tricky.  You bet your sweet ASCII a <strong>full database download</strong> is what hackers start working toward the minute they gain any kind of foothold in your system. It's the ultimate prize.</p>\n<p>To mitigate this threat, we've slowly tightened restrictions around Discourse backups in various ways:</p>\n<ul>\n<li>\n<p>Administrators have a minimum password length of 15 characters.</p>\n</li>\n<li>\n<p>Both backup creation and backup download administrator actions are formally logged.</p>\n</li>\n<li>\n<p>Backup download tokens are single use and emailed to the address of the administrator, to confirm that user has full control over the email address.</p>\n</li>\n</ul>\n<p>The name of the security game is defense in depth, so all these hardening steps help &#x2026; but we still need to <strong>assume that Internet Bad Guys will somehow get a copy of your database</strong>. And then what? Well, what's in the database?</p>\n<ul>\n<li>\n<p>Identity cookies</p>\n<p>Cookies are, of course, how the browser can tell who you are. Cookies are usually stored as hashes, rather than the actual cookie value, so having the hash doesn't let you impersonate the target user. Furthermore, most modern web frameworks rapidly cycle cookies, so they are only valid for a brief 10 to 15 minute window anyway.</p>\n</li>\n<li>\n<p>Email addresses</p>\n<p>Although users have reason to be concerned about their emails being exposed, very few people treat their email address as anything particularly precious these days.</p>\n</li>\n<li>\n<p>All posts and topic content</p>\n<p>Let's assume for the sake of argument that this is a fully public site and nobody was posting anything particularly sensitive there. So we're not worried, at least for now, about trade secrets or other privileged information being revealed, since they were all public posts anyway. If we were, that's a whole other blog post I can write at a later date.</p>\n</li>\n<li>\n<p>Password hashes</p>\n<p>What's left is <strong>the password hashes</strong>. And that's &#x2026; <a href=\"https://blog.codinghorror.com/speed-hashing/\">a serious problem indeed</a>.</p>\n</li>\n</ul>\n<p>Now that the attacker has your database, they can crack your password hashes with <a href=\"https://blog.codinghorror.com/your-password-is-too-damn-short/\">large scale offline attacks</a>, using the full resources of any cloud they can afford. And once they've cracked a particular password hash, <strong>they can log in as that user &#x2026; forever</strong>. Or at least until that user changes their password.</p>\n<blockquote>\n<p>&#x26A0;&#xFE0F; That's why, if you know (or even suspect!) your database was exposed, the very first thing you should do is reset everyone's password.</p>\n</blockquote>\n<p><img src=\"https://blog.codinghorror.com/content/images/2017/06/discourse-db-password-hashes.png\" alt=\"Discourse database password hashes\" loading=\"lazy\"></p>\n<p>But what if you <em>don't</em> know? Should you preemptively reset everyone's password every 30 days, like the world's worst bigco IT departments? That's downright user hostile, and leads to serious pathologies of its own. The reality is that you probably <em>won't</em> know when your database has been exposed, at least not until it's too late to do anything about it. So it's crucial to slow the attackers down, to give yourself time to deal with it and respond.</p>\n<p>Thus, the only real protection you can offer your users is just how resistant to attack your stored password hashes are. There are two factors that go into password hash strength:</p>\n<ol>\n<li>\n<p><strong>The hashing algorithm</strong>. As slow as possible, and ideally designed to be <em>especially</em> slow on GPUs for reasons that will become painfully obvious about 5 paragraphs from now.</p>\n</li>\n<li>\n<p><strong>The work factor</strong> or <strong>number of iterations</strong>. Set this as high as possible, without opening yourself up to a possible denial of service attack.</p>\n</li>\n</ol>\n<p>I've seen guidance that said you should set the overall work factor high enough that hashing a password takes at least 8ms on the target platform. It turns out <a href=\"https://samsaffron.com/\">Sam Saffron</a>, one of my Discourse co-founders, made a good call back in 2013 when he selected the NIST recommendation of <strong>PBKDF2-HMAC-SHA256</strong> and <strong>64k iterations</strong>. We measured, and that indeed takes roughly 8ms using our existing Ruby login code on our current (fairly high end, Skylake 4.0 Ghz) servers.</p>\n<p>But that was 4 years ago. Exactly how secure are our password hashes in the database today? Or 4 years from now, or 10 years from now? We're building open source software for the long haul, and we need to be sure we are making reasonable decisions that protect everyone. So in the spirit of <a href=\"https://blog.codinghorror.com/designing-for-evil/\">designing for evil</a>, it's time to put on our Darth Helmet and play the bad guy &#x2013; <strong>let's crack our own hashes!</strong></p>\n<p><img src=\"https://blog.codinghorror.com/content/images/2017/06/dark-helmet.jpg\" alt loading=\"lazy\"></p>\n<p>We're gonna use the biggest, baddest single GPU out there at the moment, <a href=\"https://gist.github.com/epixoip/a83d38f412b4737e99bbef804a270c40#gistcomment-2060753\">the GTX 1080 Ti</a>. As a point of reference, for PBKDF2-HMAC-SHA256 the 1080 achieves 1180 kH/s, whereas the 1080 Ti achieves 1640 kH/s. In a <em>single</em> video card generation the attack hash rate has increased nearly 40 percent. Ponder that.</p>\n<p>First, a tiny hello world test to see if things are working. I downloaded <a href=\"https://hashcat.net/hashcat/\">hashcat</a>. I logged into our demo at try.discourse.org and created a new account with the password <code>0234567890</code>; I checked the database, and this generated the following values in the hash and salt database columns for that new user:</p>\n<blockquote>\n<p>hash<br>\n<code>93LlpbKZKficWfV9jjQNOSp39MT0pDPtYx7/gBLl5jw=</code><br>\nsalt<br>\n<code>ZWVhZWQ4YjZmODU4Mzc0M2E2ZDRlNjBkNjY3YzE2ODA=</code></p>\n</blockquote>\n<p>Hashcat requires the following input file format: one line per hash, with the hash type, number of iterations, salt and hash (base64 encoded) separated by colons:</p>\n<pre><code>type   iter  salt                                         hash\nsha256:64000:ZWVhZWQ4YjZmODU4Mzc0M2E2ZDRlNjBkNjY3YzE2ODA=:93LlpbKZKficWfV9jjQNOSp39MT0pDPtYx7/gBLl5jw=\n</code></pre>\n<p>Let's hashcat it up and see if it works:</p>\n<p><code>./h64 -a 3 -m 10900 .\\one-hash.txt 0234567?d?d?d</code></p>\n<p>Note that this is an intentionally tiny amount of work, it's only guessing three digits. And sure enough, we cracked it fast! See the password there on the end? We got it.</p>\n<p><code>sha256:64000:ZWVhZWQ4YjZmODU4Mzc0M2E2ZDRlNjBkNjY3YzE2ODA=:93LlpbKZKficWfV9jjQNOSp39MT0pDPtYx7/gBLl5jw=:0234567890</code></p>\n<p>Now that we know it works, let's get down to business. But we'll start easy. How long does it take to brute force attack <strong>the easiest possible Discourse password, 8 numbers</strong> &#x2013; that's \"only\" 10<sup>8</sup> combinations, a little over one hundred million.</p>\n<pre><code>Hash.Type........: PBKDF2-HMAC-SHA256\nTime.Estimated...: Fri Jun 02 00:15:37 2017 (1 hour, 0 mins)\nGuess.Mask.......: ?d?d?d?d?d?d?d?d [8]\n</code></pre>\n<p>Even with a top of the line GPU that's &#x2026; OK, I guess. Remember this is just one hash we're testing against, so you'd need one hour per row (user) in the table. And I have more bad news for you: Discourse hasn't allowed 8 character passwords for <a href=\"https://blog.codinghorror.com/your-password-is-too-damn-short/\">quite some time now</a>. How long does it take if we try longer numeric passwords?</p>\n<pre><code>?d?d?d?d?d?d?d?d?d [9]\nFri Jun 02 10:34:42 2017 (11 hours, 18 mins)\n\n?d?d?d?d?d?d?d?d?d?d [10]\nTue Jun 06 17:25:19 2017 (4 days, 18 hours)\n\n?d?d?d?d?d?d?d?d?d?d?d [11]\nMon Jul 17 23:26:06 2017 (46 days, 0 hours)\n\n?d?d?d?d?d?d?d?d?d?d?d?d [12]\nTue Jul 31 23:58:30 2018 (1 year, 60 days)\n</code></pre>\n<p>But all digit passwords are easy mode, for babies! How about some <em>real</em> passwords that use at least lowercase letters, or lowercase + uppercase + digits?</p>\n<pre><code>Guess.Mask.......: ?l?l?l?l?l?l?l?l [8]\nTime.Estimated...: Mon Sep 04 10:06:00 2017 (94 days, 10 hours)\n\nGuess.Mask.......: ?1?1?1?1?1?1?1?1 [8] (-1 = ?l?u?d)\nTime.Estimated...: Sun Aug 02 09:29:48 2020 (3 years, 61 days)\n</code></pre>\n<p>A brute force try-every-single-letter-and-number attack is not looking so hot for us at this point, even with a high end GPU. But what if we divided the number by <strong>eight</strong> &#x2026; <a href=\"https://gist.github.com/epixoip/a83d38f412b4737e99bbef804a270c40\">by putting eight video cards in a single machine?</a> That's well within the reach of a small business budget or a wealthy individual. Unfortunately, dividing 38 months by 8 isn't such a dramatic reduction in the time to attack. Instead, let's talk about nation state attacks where they have the budget to throw <em>thousands</em> of these GPUs at the problem (1.1 days), maybe even <em>tens of thousands</em> (2.7 hours), then &#x2026; yes. Even allowing for 10 character password minimums, you are in serious trouble at that point.</p>\n<p><img src=\"https://blog.codinghorror.com/content/images/2017/06/8-gpu-cracking-rig.jpg\" alt loading=\"lazy\"></p>\n<p>If we want Discourse to be nation state attack resistant, clearly we'll need to do better. Hashcat has a handy benchmark mode, and <a href=\"https://docs.google.com/spreadsheets/d/1iwoMR5TBYAZ5eiSphkIQfIEfbrVvWW_tKwS4L1cYlaI/pubhtml?gid=0&single=true\">here's a sorted list of the strongest (slowest) hashes that Hashcat knows about</a> benchmarked on a rig with 8 Nvidia GTX 1080 GPUs. Of the things I recognize on that list, <strong>bcrypt</strong>, <strong>scrypt</strong> and <strong>PBKDF2-HMAC-SHA512</strong> stand out.</p>\n<p>My quick hashcat results gave me some confidence that we weren't doing anything terribly wrong with the Discourse password hashes stored in the database. But I wanted to be <em>completely sure</em>, so I hired someone with a background in security and penetration testing to, under a signed NDA, try cracking the password hashes of two live and very popular Discourse sites <a href=\"https://discourse.org/customers\">we currently host</a>.</p>\n<blockquote>\n<p>I was provided two sets of password hashes from two different Discourse communities, containing 5,909 and 6,088 hashes respectively. Both used the PBKDF2-HMAC-SHA256 algorithm with a work factor of 64k. Using hashcat, my Nvidia GTX 1080 Ti GPU generated these hashes at a rate of ~27,000/sec.</p>\n<p>Common to all discourse communities are various password requirements:</p>\n<ul>\n<li>All users must have a minimum password length of 10 characters.</li>\n<li>All administrators must have a minimum password length of 15 characters.</li>\n<li>Users cannot use any password matching a blacklist of the 10,000 most commonly used passwords.</li>\n<li>Users can choose to create a username and password or use various third party authentication mechanisms (Google, Facebook, Twitter, etc). If this option is selected, a secure random 32 character password is autogenerated. It is not possible to know whether any given password is human entered, or autogenerated.</li>\n</ul>\n<p>Using common password lists and masks, I cracked 39 of the 11,997 hashes in about three weeks, 25 from the &#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588; community and 14 from the &#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588; community.</p>\n</blockquote>\n<p>This is a security researcher who commonly runs these kinds of audits, so all of the attacks used <strong>wordlists</strong>, along with known effective patterns and <a href=\"https://hashcat.net/wiki/doku.php?id=mask_attack\">masks</a> derived from the researcher's previous password cracking experience, instead of raw brute force. That recovered the following passwords (and one duplicate):</p>\n<table>\n<tr>\n<td>\n<code>007007bond</code><br>\n<code>123password</code><br>\n<code>1qaz2wsx3e</code><br>\n<code>A3eilm2s2y</code><br>\n<code>Alexander12</code><br>\n<code>alexander18</code><br>\n<code>belladonna2</code><br>\n<code>Charlie123</code><br>\n<code>Chocolate1</code><br>\n<code>christopher8</code><br>\n<code>Elizabeth1</code><br>\n<code>Enterprise01</code><br>\n<code>Freedom123</code><br>\n<code>greengrass123</code><br>\n<code>hellothere01</code><br>\n<code>I123456789</code><br>\n<code>Iamawesome</code><br>\n<code>khristopher</code><br>\n<code>l1ghthouse</code><br>\n</td>\n<td>\n<code>l3tm3innow</code><br>\n<code>Neversaynever</code><br>\n<code>password1235</code><br>\n<code>pittsburgh1</code><br>\n<code>Playstation2</code><br>\n<code>Playstation3</code><br>\n<code>Qwerty1234</code><br>\n<code>Qwertyuiop1</code><br>\n<code>qwertyuiop1234567890</code><br>\n<code>Spartan117</code><br>\n<code>springfield0</code><br>\n<code>Starcraft2</code><br>\n<code>strawberry1</code><br>\n<code>Summertime</code><br>\n<code>Testing123</code><br>\n<code>testing1234</code><br>\n<code>thecakeisalie02</code><br>\n<code>Thirteen13</code><br>\n<code>Welcome123</code><br>\n</td>\n</tr>\n</table>\n<p>If we multiply this effort by 8, and double the amount of time allowed, it's conceivable that a <em>very</em> motivated attacker, or <a href=\"https://arstechnica.com/security/2013/10/how-the-bible-and-youtube-are-fueling-the-next-frontier-of-password-cracking/\">one with a sophisticated set of wordlists and masks</a>, could eventually recover 39 &#xD7; 16 = 624 passwords, or about <strong>five percent</strong> of the total users. That's reasonable, but higher than I would like. We absolutely plan to add a hash type table in future versions of Discourse, so we can switch to an even more secure (read: <a href=\"http://www.pxdojo.net/2015/08/what-i-learned-from-cracking-4000.html\">much slower</a>) password hashing scheme in the next year or two.</p>\n<pre><code>bcrypt $2*$, Blowfish (Unix)\n  20273 H/s\n\nscrypt\n  886.5 kH/s\n\nPBKDF2-HMAC-SHA512\n  542.6 kH/s \n\nPBKDF2-HMAC-SHA256\n 1646.7 kH/s \n</code></pre>\n<p>After this exercise, I now have a much deeper understanding of our worst case security scenario, a database compromise combined with a professional offline password hashing attack. I can also more confidently recommend and stand behind our engineering work in making Discourse secure for everyone. So if, like me, you're not entirely sure you are doing things securely, it's time to put those assumptions to the test. Don't wait around for hackers to attack you &#x2014; <strong>hacker, hack thyself!</strong></p>\n<table>  \n<tr><td class=\"welovecodinghorror\">[advertisement] At Stack Overflow, we put developers first. We already help you find answers to your tough coding questions; now let us help you <a href=\"http://careers.stackoverflow.com\" rel=\"nofollow\">find your next job</a>.</td></tr>  \n</table>  <!--kg-card-end: markdown-->"
}