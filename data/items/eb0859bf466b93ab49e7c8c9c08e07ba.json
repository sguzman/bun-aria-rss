{
  "id": "tag:blogger.com,1999:blog-5547907074344788039.post-7102520674124094162",
  "published": "2016-02-08T19:29:00.000-08:00",
  "updated": "2016-02-08T19:29:04.539-08:00",
  "title": "The role of model interpretability in data science",
  "content": "<br /><div>This is a cross post of a piece I posted on <a href=\"https://medium.com/@leapingllamas/the-role-of-model-interpretability-in-data-science-703918f64330#.8yfqfxkd2\">medium</a>&nbsp;(Feb 1, 2016):<br /><br />In data science, models can involve abstract features in high dimensional spaces, or they can be more concrete, in lower dimensions, and more readily understood by humans; that is, they are&nbsp;<em class=\"markup--em markup--p-em\" style=\"-webkit-font-feature-settings: 'liga' 1, 'salt' 1;\">interpretable</em>. What’s the role of interpretable models in data science, especially when working with less technical partners from the business? When, and why, should we favor model interpretability?<br /><br /></div><div>The key here is figuring out the audience. Who is going to use the model and to what purpose? Let’s take a simple but specific example. Last week, I was working on a typical cold-start predictive modeling problem for e-commerce: how do you predict initial sales for new products if you’ve never sold them before?<br /><br /></div><div>One common approach is to make the most of your existing data. For instance, you can estimate the effect of temporal features, such as launch month or day of week, using your historical data. One can also find similar products that you have sold, making the naïve assumption that the market will respond similarly to this new product, and create predictors based on their historical sales. In this case, I had access to a set of product attributes: frame measurements of&nbsp;<a data-href=\"https://www.warbyparker.com/\" href=\"https://www.warbyparker.com/\" rel=\"nofollow\">Warby Parker</a>&nbsp;glasses. The dataset also happened to contain a set of&nbsp;<a class=\"markup--anchor markup--p-anchor\" data-href=\"https://en.wikipedia.org/wiki/Principal_component_analysis\" href=\"https://en.wikipedia.org/wiki/Principal_component_analysis\" rel=\"nofollow\">principal components</a>&nbsp;for those measurements. (If you don’t understand what this means, don’t worry, that is the whole point of this story.) I created a model that contained both readily-understood temporal features and the more abstract principal component #3, “pc03,” which turned out to be a good predictor. However, I decided to rip out pc03 and replace it with the set of raw product attributes. I pruned the model with stepwise regression and was left with a model that had&nbsp;<em class=\"markup--em markup--p-em\">three</em>&nbsp;frame measurement variables instead of just one (pc03). Thus, the final model was more complex for no additional predictive power. However, it was the right approach from a business perspective. Why?<br /><br /></div><div>I wasn’t creating the model for my benefit. I was creating it for the benefit of the business, in particular, a team whose job it is to estimate demand and place purchase orders for initial inventory and ongoing replenishment. This team is skilled and knows the products, market, and our customers extremely well but they are not statisticians. This is a really tough task and they need help. Further, ultimately, they — not me — are on the hook for bad estimates. If they under-predict demand and we stock out, we lose those immediate sales and the lifetime value of any potential customers that go elsewhere. If they over-predict, we invest unnecessary CAPEX in purchasing the units, we incur increased warehouse costs, and we may be left with a pile of duds. Thus, the idea of my model is to serve as an additional voice to help them make their decisions. However, they need to trust and understand it, and therein lies the rub. They don’t know what principal component means. It is a very abstract concept. I can’t point to a pair of glasses and show them what it represents because it doesn’t exist like that. However, by restricting the model to actual physical features, features they know very well, they could indeed understand and trust the model. This final model had a very similar prediction error profile — i.e., the model was basically just as good — and it yielded some surprising insights for them. The three measurements the model retained were not the set that they had assumed&nbsp;<em class=\"markup--em markup--p-em\" style=\"-webkit-font-feature-settings: 'liga' 1, 'salt' 1;\">a priori</em>&nbsp;were most important.<br /><br /></div><div>This detailed example was meant to highlight a few reasons why a poorer, more complex but interpretable models might be favored:</div><ul><li>Interpretable models can be understood by less-technical (non data scientists) in the business and, importantly, they are often the decision makers. They need to understand and use the model, otherwise the work has no ultimate impact. My job as a data scientist is to maximize impact.</li><li>Interpretable models can yield simple direct insights, the sort that they can readily communicate to colleagues.</li><li>Interpretable models can help build up trust with those partners and, through repeat engagements, can lay foundations for more sophisticated approaches for the future.</li><li>In many cases, the interpretable model is similarly performant to a more complex model anyway. That is, you may not be losing much predictive power.</li></ul><div>My team often makes these tradeoffs, i.e., choosing an interpretable model when working in close partnership with a business team where we care more about understanding a system or the customer than pure predictive power. We may use classification trees as we can sit with the business owner and interpret the model together and, importantly, discuss the actionable insights which tie naturally to the decision points, the splits, in those trees. Or, in other cases, we may opt for&nbsp;<a class=\"markup--anchor markup--p-anchor\" data-href=\"https://en.wikipedia.org/wiki/Naive_Bayes_classifier\" href=\"https://en.wikipedia.org/wiki/Naive_Bayes_classifier\" rel=\"nofollow\">Naïve Bayes</a>&nbsp;over support vector classifiers, again because the terms of the model are readily understood and communicated.<br /><br /></div><div>In all these cases, it represents a calculated decision of how we maximize our impact as a data science team and an understanding of the actual tradeoffs,&nbsp;<em class=\"markup--em markup--p-em\" style=\"-webkit-font-feature-settings: 'liga' 1, 'salt' 1;\">if</em>&nbsp;there is a loss of performance.</div><div>Of course, those tradeoffs do not always land in favor of interpretable models. There are many cases where the best model, as determined by<a class=\"markup--anchor markup--p-anchor\" data-href=\"https://en.wikipedia.org/wiki/Root-mean-square_deviation\" href=\"https://en.wikipedia.org/wiki/Root-mean-square_deviation\" rel=\"nofollow\">RMSE</a>,&nbsp;<a class=\"markup--anchor markup--p-anchor\" data-href=\"https://en.wikipedia.org/wiki/F1_score\" href=\"https://en.wikipedia.org/wiki/F1_score\" rel=\"nofollow\">F-score</a>&nbsp;and so on, do and should win out irrespective of whether it is interpretable or not. In these cases, performance is more important than understanding. For instance,</div><ol><li>Show me the money! The goal is simply to maximize revenue. A hedge fund CEO is probably not going to be worried about how the algorithmic trading models work under the hood if they bring home the bacon.</li><li>There is an existing culture of trust and trail of evidence. Amazon has done recommenders well for years. They’ve proved themselves, earned the respect to use the very best models, whatever they are.</li><li>The goal is purely model performance for performance sake.&nbsp;<a class=\"markup--anchor markup--li-anchor\" data-href=\"https://www.kaggle.com/\" href=\"https://www.kaggle.com/\" rel=\"nofollow\">Kaggle</a>leaderboards are littered with overly-optimized and overly-complex leaners (although one could argue it is related to 1 through the prize money).</li><li>Non-financial stakes are high. I would want a machine-learned&nbsp;<a class=\"markup--anchor markup--li-anchor\" data-href=\"https://www.kaggle.com/c/second-annual-data-science-bowl\" href=\"https://www.kaggle.com/c/second-annual-data-science-bowl\" rel=\"nofollow\">heart disease detector</a>&nbsp;to do the best possible job as any&nbsp;<a class=\"markup--anchor markup--li-anchor\" data-href=\"https://en.wikipedia.org/wiki/Type_I_and_type_II_errors\" href=\"https://en.wikipedia.org/wiki/Type_I_and_type_II_errors\" rel=\"nofollow\">type II prediction error</a>&nbsp;could be devastating to the subject. Here, I believe, the&nbsp;<a class=\"markup--anchor markup--li-anchor\" data-href=\"https://en.wikipedia.org/wiki/Confusion_matrix\" href=\"https://en.wikipedia.org/wiki/Confusion_matrix\" rel=\"nofollow\">confusion matrix</a>&nbsp;performance outweighs a doctor’s need to understand fully how it works.</li></ol><div>When choosing a model, think carefully about what one is trying to achieve. Is it simply to minimize a metric, to understand system, or to make inroads to a more&nbsp;<a class=\"markup--anchor markup--p-anchor\" data-href=\"http://shop.oreilly.com/product/0636920035848.do\" href=\"http://shop.oreilly.com/product/0636920035848.do\" rel=\"nofollow\">data-driven culture</a>&nbsp;within the organization? A model’s total performance is the product of the model predictive performance times the probability that the model will be used. One needs to optimize for both.</div>",
  "link": [
    "",
    "",
    "",
    "",
    ""
  ],
  "author": {
    "name": "Carl Anderson",
    "uri": "http://www.blogger.com/profile/11930448254473684406",
    "email": "noreply@blogger.com",
    "gd:image": ""
  },
  "thr:total": 3
}