{
  "title": "Using regression trees for forecasting double-seasonal time series with trend in R",
  "description": "<p>After blogging break caused by writing research papers, I managed to secure time to write something new about time series forecasting. This time I want to share with you my experiences with seasonal-trend time series forecasting using simple regression trees. Classification and <strong>regression tree</strong> (or <a href=\"https://en.wikipedia.org/wiki/Decision_tree_learning\">decision tree</a>) is broadly used <strong>machine learning</strong> method for modeling. They are favorite because of these factors:</p>\n\n<ul>\n  <li>simple to understand (white box)</li>\n  <li>from a tree we can extract interpretable results and make simple decisions</li>\n  <li>they are helpful for exploratory analysis as binary structure of tree is simple to visualize</li>\n  <li>very good prediction accuracy performance</li>\n  <li>very fast</li>\n  <li>they can be simply tuned by ensemble learning techniques</li>\n</ul>\n\n<p>But! There is always some “but”, they poorly adapt when new unexpected situations (values) appears. In other words, they can not detect and adapt to change or <a href=\"https://en.wikipedia.org/wiki/Concept_drift\">concept drift</a> well (absolutely not). This is due to the fact that tree creates during learning just simple rules based on training data. Simple decision tree does not compute any regression coefficients like linear regression, so trend modeling is not possible. You would ask now, so why we are talking about time series forecasting with regression tree together, right? I will explain how to deal with it in more detail further in this post.</p>\n\n<p>You will learn in this post how to:</p>\n\n<ul>\n  <li>decompose double-seasonal time series</li>\n  <li>detrend time series</li>\n  <li>model and forecast <strong>double-seasonal time series</strong> with trend</li>\n  <li>use two types of simple <strong>regression trees</strong></li>\n  <li>set important hyperparameters related to regression tree</li>\n</ul>\n\n<h2 id=\"exploring-time-series-data-of-electricity-consumption\">Exploring time series data of electricity consumption</h2>\n\n<p>As in previous posts, I will use smart meter data of electricity consumption for demonstrating forecasting of seasonal time series. I created a new dataset of aggregated electricity load of consumers from an anonymous area. Time series data have the length of 17 weeks.</p>\n\n<p>Firstly, let’s scan all of the needed packages for data analysis, modeling and visualizing.</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-r\" data-lang=\"r\"><span class=\"n\">library</span><span class=\"p\">(</span><span class=\"n\">feather</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"c1\"># data import</span><span class=\"w\">\n</span><span class=\"n\">library</span><span class=\"p\">(</span><span class=\"n\">data.table</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"c1\"># data handle</span><span class=\"w\">\n</span><span class=\"n\">library</span><span class=\"p\">(</span><span class=\"n\">rpart</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"c1\"># decision tree method</span><span class=\"w\">\n</span><span class=\"n\">library</span><span class=\"p\">(</span><span class=\"n\">rpart.plot</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"c1\"># tree plot</span><span class=\"w\">\n</span><span class=\"n\">library</span><span class=\"p\">(</span><span class=\"n\">party</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"c1\"># decision tree method</span><span class=\"w\">\n</span><span class=\"n\">library</span><span class=\"p\">(</span><span class=\"n\">forecast</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"c1\"># forecasting methods</span><span class=\"w\">\n</span><span class=\"n\">library</span><span class=\"p\">(</span><span class=\"n\">ggplot2</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"c1\"># visualizations</span><span class=\"w\">\n</span><span class=\"n\">library</span><span class=\"p\">(</span><span class=\"n\">ggforce</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"c1\"># visualization tools</span><span class=\"w\">\n</span><span class=\"n\">library</span><span class=\"p\">(</span><span class=\"n\">plotly</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"c1\"># interactive visualizations</span><span class=\"w\">\n</span><span class=\"n\">library</span><span class=\"p\">(</span><span class=\"n\">grid</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"c1\"># visualizations</span><span class=\"w\">\n</span><span class=\"n\">library</span><span class=\"p\">(</span><span class=\"n\">animation</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"c1\"># gif</span></code></pre></figure>\n\n<p>Now read the mentioned time series data by <code class=\"language-plaintext highlighter-rouge\">read_feather</code> to one <code class=\"language-plaintext highlighter-rouge\">data.table</code>. The dataset can be found on <a href=\"https://github.com/PetoLau/petolau.github.io/tree/master/_rmd\">my github repo</a>, the name of the file is <em>DT_load_17weeks</em>.</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-r\" data-lang=\"r\"><span class=\"n\">DT</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">as.data.table</span><span class=\"p\">(</span><span class=\"n\">read_feather</span><span class=\"p\">(</span><span class=\"s2\">\"DT_load_17weeks\"</span><span class=\"p\">))</span></code></pre></figure>\n\n<p>And store information of the date and period of time series that is 48.</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-r\" data-lang=\"r\"><span class=\"n\">n_date</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">unique</span><span class=\"p\">(</span><span class=\"n\">DT</span><span class=\"p\">[,</span><span class=\"w\"> </span><span class=\"n\">date</span><span class=\"p\">])</span><span class=\"w\">\n</span><span class=\"n\">period</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"m\">48</span></code></pre></figure>\n\n<p>For data visualization needs, store my favorite ggplot theme settings by function <code class=\"language-plaintext highlighter-rouge\">theme</code>.</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-r\" data-lang=\"r\"><span class=\"n\">theme_ts</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">theme</span><span class=\"p\">(</span><span class=\"n\">panel.border</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">element_rect</span><span class=\"p\">(</span><span class=\"n\">fill</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kc\">NA</span><span class=\"p\">,</span><span class=\"w\"> \n                                              </span><span class=\"n\">colour</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"grey10\"</span><span class=\"p\">),</span><span class=\"w\">\n                  </span><span class=\"n\">panel.background</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">element_blank</span><span class=\"p\">(),</span><span class=\"w\">\n                  </span><span class=\"n\">panel.grid.minor</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">element_line</span><span class=\"p\">(</span><span class=\"n\">colour</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"grey85\"</span><span class=\"p\">),</span><span class=\"w\">\n                  </span><span class=\"n\">panel.grid.major</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">element_line</span><span class=\"p\">(</span><span class=\"n\">colour</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"grey85\"</span><span class=\"p\">),</span><span class=\"w\">\n                  </span><span class=\"n\">panel.grid.major.x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">element_line</span><span class=\"p\">(</span><span class=\"n\">colour</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"grey85\"</span><span class=\"p\">),</span><span class=\"w\">\n                  </span><span class=\"n\">axis.text</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">element_text</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"m\">13</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">face</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"bold\"</span><span class=\"p\">),</span><span class=\"w\">\n                  </span><span class=\"n\">axis.title</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">element_text</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"m\">15</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">face</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"bold\"</span><span class=\"p\">),</span><span class=\"w\">\n                  </span><span class=\"n\">plot.title</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">element_text</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"m\">16</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">face</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"bold\"</span><span class=\"p\">),</span><span class=\"w\">\n                  </span><span class=\"n\">strip.text</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">element_text</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"m\">16</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">face</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"bold\"</span><span class=\"p\">),</span><span class=\"w\">\n                  </span><span class=\"n\">strip.background</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">element_rect</span><span class=\"p\">(</span><span class=\"n\">colour</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"black\"</span><span class=\"p\">),</span><span class=\"w\">\n                  </span><span class=\"n\">legend.text</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">element_text</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"m\">15</span><span class=\"p\">),</span><span class=\"w\">\n                  </span><span class=\"n\">legend.title</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">element_text</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"m\">16</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">face</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"bold\"</span><span class=\"p\">),</span><span class=\"w\">\n                  </span><span class=\"n\">legend.background</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">element_rect</span><span class=\"p\">(</span><span class=\"n\">fill</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"white\"</span><span class=\"p\">),</span><span class=\"w\">\n                  </span><span class=\"n\">legend.key</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">element_rect</span><span class=\"p\">(</span><span class=\"n\">fill</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"white\"</span><span class=\"p\">))</span></code></pre></figure>\n\n<p>Now, pick some dates of the length 3 weeks from dataset to split data on the train and test part. Test set has the length of only one day because we will perform one day ahead forecast of electricity consumption.</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-r\" data-lang=\"r\"><span class=\"n\">data_train</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">DT</span><span class=\"p\">[</span><span class=\"n\">date</span><span class=\"w\"> </span><span class=\"o\">%in%</span><span class=\"w\"> </span><span class=\"n\">n_date</span><span class=\"p\">[</span><span class=\"m\">43</span><span class=\"o\">:</span><span class=\"m\">63</span><span class=\"p\">]]</span><span class=\"w\">\n</span><span class=\"n\">data_test</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">DT</span><span class=\"p\">[</span><span class=\"n\">date</span><span class=\"w\"> </span><span class=\"o\">%in%</span><span class=\"w\"> </span><span class=\"n\">n_date</span><span class=\"p\">[</span><span class=\"m\">64</span><span class=\"p\">]]</span></code></pre></figure>\n\n<p>Let’s plot the train set and corresponding average weekly values of electricity load.</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-r\" data-lang=\"r\"><span class=\"n\">averages</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">data.table</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nf\">rep</span><span class=\"p\">(</span><span class=\"n\">sapply</span><span class=\"p\">(</span><span class=\"m\">0</span><span class=\"o\">:</span><span class=\"m\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">function</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span><span class=\"w\">\n                        </span><span class=\"n\">mean</span><span class=\"p\">(</span><span class=\"n\">data_train</span><span class=\"p\">[((</span><span class=\"n\">i</span><span class=\"o\">*</span><span class=\"n\">period</span><span class=\"o\">*</span><span class=\"m\">7</span><span class=\"p\">)</span><span class=\"m\">+1</span><span class=\"p\">)</span><span class=\"o\">:</span><span class=\"p\">((</span><span class=\"n\">i</span><span class=\"m\">+1</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"n\">period</span><span class=\"o\">*</span><span class=\"m\">7</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"p\">])),</span><span class=\"w\">\n                        </span><span class=\"n\">each</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">period</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"m\">7</span><span class=\"p\">),</span><span class=\"w\">\n                       </span><span class=\"n\">date_time</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">data_train</span><span class=\"o\">$</span><span class=\"n\">date_time</span><span class=\"p\">)</span><span class=\"w\">\n \n</span><span class=\"n\">ggplot</span><span class=\"p\">(</span><span class=\"n\">data_train</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">aes</span><span class=\"p\">(</span><span class=\"n\">date_time</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\">\n  </span><span class=\"n\">geom_line</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\">\n  </span><span class=\"n\">geom_line</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">averages</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">aes</span><span class=\"p\">(</span><span class=\"n\">date_time</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"p\">),</span><span class=\"w\">\n            </span><span class=\"n\">linetype</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"m\">5</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">alpha</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"m\">0.75</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">size</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"m\">1.2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">color</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"firebrick2\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\">\n  </span><span class=\"n\">labs</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"Date\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"Load (kW)\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\">\n  </span><span class=\"n\">theme_ts</span></code></pre></figure>\n\n<p><img src=\"/images/post_5/unnamed-chunk-7-1.png\" alt=\"plot of chunk unnamed-chunk-7\" /></p>\n\n<p>We can see some trend increasing over time, maybe air conditioning is more used when gets hotter in summer. The double-seasonal (daily and weekly) character of time series is obvious.</p>\n\n<p>A very useful method for visualization and analysis of time series is <a href=\"https://www.otexts.org/fpp/6/5\">STL decomposition</a>.\nSTL decomposition is based on Loess regression, and it decomposes time series to three parts: seasonal, trend and remainder.\nWe will use results from the STL decomposition to model our data as well.\nI am using <code class=\"language-plaintext highlighter-rouge\">stl()</code> from <code class=\"language-plaintext highlighter-rouge\">stats</code> package and before computation we must define weekly seasonality to our time series object. Let’s look on results:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-r\" data-lang=\"r\"><span class=\"n\">data_ts</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">ts</span><span class=\"p\">(</span><span class=\"n\">data_train</span><span class=\"o\">$</span><span class=\"n\">value</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">freq</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">period</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"m\">7</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"n\">decomp_ts</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">stl</span><span class=\"p\">(</span><span class=\"n\">data_ts</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">s.window</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"periodic\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">robust</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kc\">TRUE</span><span class=\"p\">)</span><span class=\"o\">$</span><span class=\"n\">time.series</span><span class=\"w\">\n \n</span><span class=\"n\">decomp_stl</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">data.table</span><span class=\"p\">(</span><span class=\"n\">Load</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nf\">c</span><span class=\"p\">(</span><span class=\"n\">data_train</span><span class=\"o\">$</span><span class=\"n\">value</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nf\">as.numeric</span><span class=\"p\">(</span><span class=\"n\">decomp_ts</span><span class=\"p\">)),</span><span class=\"w\">\n                         </span><span class=\"n\">Date</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nf\">rep</span><span class=\"p\">(</span><span class=\"n\">data_train</span><span class=\"p\">[,</span><span class=\"n\">date_time</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">ncol</span><span class=\"p\">(</span><span class=\"n\">decomp_ts</span><span class=\"p\">)</span><span class=\"m\">+1</span><span class=\"p\">),</span><span class=\"w\">\n                         </span><span class=\"n\">Type</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">factor</span><span class=\"p\">(</span><span class=\"nf\">rep</span><span class=\"p\">(</span><span class=\"nf\">c</span><span class=\"p\">(</span><span class=\"s2\">\"original data\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">colnames</span><span class=\"p\">(</span><span class=\"n\">decomp_ts</span><span class=\"p\">)),</span><span class=\"w\">\n                                       </span><span class=\"n\">each</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">nrow</span><span class=\"p\">(</span><span class=\"n\">decomp_ts</span><span class=\"p\">)),</span><span class=\"w\">\n                                       </span><span class=\"n\">levels</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nf\">c</span><span class=\"p\">(</span><span class=\"s2\">\"original data\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">colnames</span><span class=\"p\">(</span><span class=\"n\">decomp_ts</span><span class=\"p\">))))</span><span class=\"w\">\n \n</span><span class=\"n\">ggplot</span><span class=\"p\">(</span><span class=\"n\">decomp_stl</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">aes</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Date</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Load</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\">\n  </span><span class=\"n\">geom_line</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> \n  </span><span class=\"n\">facet_grid</span><span class=\"p\">(</span><span class=\"n\">Type</span><span class=\"w\"> </span><span class=\"o\">~</span><span class=\"w\"> </span><span class=\"n\">.</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">scales</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"free_y\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">switch</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"y\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\">\n  </span><span class=\"n\">labs</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"Date\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kc\">NULL</span><span class=\"p\">,</span><span class=\"w\">\n       </span><span class=\"n\">title</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"Time Series Decomposition by STL\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\">\n  </span><span class=\"n\">theme_ts</span></code></pre></figure>\n\n<p><img src=\"/images/post_5/unnamed-chunk-8-1.png\" alt=\"plot of chunk unnamed-chunk-8\" /></p>\n\n<p>As was expected from the previous picture, we can see that there is “slight” trend increasing and decreasing (by around 100 kW so slightly large ;) ).\nRemainder part (noise) is very fluctuate and not seems like classical <a href=\"https://en.wikipedia.org/wiki/White_noise\">white noise</a> (we obviously missing additional information like weather and other unexpected situations).</p>\n\n<h2 id=\"constructing-features-to-model\">Constructing features to model</h2>\n\n<p>In this section I will do <strong>feature engineering</strong> for modeling double-seasonal <strong>time series</strong> with trend best as possible by just available historical values.</p>\n\n<p>Classical way to handle seasonality is to add seasonal features to a model as vectors of form \\( (1, \\dots, DailyPeriod, 1, …, DailyPeriod,…) \\) for daily season or \\( (1, \\dots, 1, 2, \\dots, 2, \\dots , 7, 1, \\dots) \\)  for weekly season. I used it this way in my previous <a href=\"https://petolau.github.io/Analyzing-double-seasonal-time-series-with-GAM-in-R/\">post about GAM</a> and somehow similar also with <a href=\"https://petolau.github.io/Forecast-double-seasonal-time-series-with-multiple-linear-regression-in-R/\">multiple linear regression</a>.</p>\n\n<p>A better way to model seasonal variables (features) with <strong>nonlinear regression</strong> methods like <strong>tree</strong> is to transform it to <a href=\"https://en.wikipedia.org/wiki/Fourier_transform\">Fourier terms</a> (sinus and cosine). It is more effective to tree models and also other nonlinear machine learning methods. I will explain why it is like that further of this post.</p>\n\n<p>Fourier daily signals (terms) are defined as:</p>\n\n\\[\\left( \\sin\\left(\\frac{2\\pi jt}{48}\\right),~\\cos\\left(\\frac{2\\pi jt}{48}\\right) \\right)_{j=1}^{ds} ,\\]\n\n<p>where \\( ds \\) is number of daily seasonality Fourier pairs and Fourier weekly terms are defines as:</p>\n\n\\[\\left( \\sin\\left(\\frac{2\\pi jt}{7}\\right),~\\cos\\left(\\frac{2\\pi jt}{7}\\right) \\right)_{j=1}^{ws} ,\\]\n\n<p>where \\( ws \\) is a number of weekly seasonality Fourier pairs.</p>\n\n<p>Another great feature (most of the times most powerful) is a lag of original time series. We can use lag by one day, one week, etc…\nThe lag of time series can be preprocessed by removing noise or trend for example by STL decomposition method to ensure stability.</p>\n\n<p>As was earlier mentioned, regression trees can’t predict trend because they logically make rules and predict future values only by rules made by training set.\nTherefore original time series that inputs to regression tree as dependent variable must be <a href=\"https://en.wiktionary.org/wiki/detrending\">detrended</a> (removing the trend part of the time series). The acquired trend part then can be forecasted by for example <a href=\"https://en.wikipedia.org/wiki/Autoregressive_integrated_moving_average\">ARIMA</a> model.</p>\n\n<p>Let’s go to constructing mentioned features and trend forecasting.</p>\n\n<p>Double-seasonal Fourier terms can be simply extracted by <code class=\"language-plaintext highlighter-rouge\">fourier</code> function from <code class=\"language-plaintext highlighter-rouge\">forecast</code> package.\nFirstly, we must create multiple seasonal object with function <code class=\"language-plaintext highlighter-rouge\">msts</code>.</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-r\" data-lang=\"r\"><span class=\"n\">data_msts</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">msts</span><span class=\"p\">(</span><span class=\"n\">data_train</span><span class=\"o\">$</span><span class=\"n\">value</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">seasonal.periods</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nf\">c</span><span class=\"p\">(</span><span class=\"n\">period</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">period</span><span class=\"o\">*</span><span class=\"m\">7</span><span class=\"p\">))</span></code></pre></figure>\n\n<p>Now use <code class=\"language-plaintext highlighter-rouge\">fourier</code> function using two conditions for a number of K terms.\nSet K for example just to 2.</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-r\" data-lang=\"r\"><span class=\"n\">K</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"m\">2</span><span class=\"w\">\n</span><span class=\"n\">fuur</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">fourier</span><span class=\"p\">(</span><span class=\"n\">data_msts</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">K</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nf\">c</span><span class=\"p\">(</span><span class=\"n\">K</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">K</span><span class=\"p\">))</span></code></pre></figure>\n\n<p>It made 2 pairs (sine and cosine) of daily and weekly seasonal signals.\nIf we compare it with approach described in previous posts, so simple periodic vectors, it looks like this:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-r\" data-lang=\"r\"><span class=\"n\">Daily</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"nf\">rep</span><span class=\"p\">(</span><span class=\"m\">1</span><span class=\"o\">:</span><span class=\"n\">period</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"m\">21</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"c1\"># simple daily vector</span><span class=\"w\">\n</span><span class=\"n\">Weekly</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">data_train</span><span class=\"p\">[,</span><span class=\"w\"> </span><span class=\"n\">week_num</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"c1\"># simple weekly vector</span><span class=\"w\">\n \n</span><span class=\"n\">data_fuur_simple</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">data.table</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nf\">c</span><span class=\"p\">(</span><span class=\"n\">scale</span><span class=\"p\">(</span><span class=\"n\">Daily</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">fuur</span><span class=\"p\">[,</span><span class=\"m\">2</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">scale</span><span class=\"p\">(</span><span class=\"n\">Weekly</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">fuur</span><span class=\"p\">[,</span><span class=\"m\">6</span><span class=\"p\">]),</span><span class=\"w\">\n                               </span><span class=\"n\">date</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nf\">rep</span><span class=\"p\">(</span><span class=\"n\">data_train</span><span class=\"o\">$</span><span class=\"n\">date_time</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"m\">4</span><span class=\"p\">),</span><span class=\"w\">\n                               </span><span class=\"n\">method</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nf\">rep</span><span class=\"p\">(</span><span class=\"nf\">c</span><span class=\"p\">(</span><span class=\"s2\">\"simple-daily\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">\"four-daily\"</span><span class=\"p\">,</span><span class=\"w\">\n                                              </span><span class=\"s2\">\"simple-weekly\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">\"four-weekly\"</span><span class=\"p\">),</span><span class=\"w\">\n                                            </span><span class=\"n\">each</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">nrow</span><span class=\"p\">(</span><span class=\"n\">fuur</span><span class=\"p\">)),</span><span class=\"w\">\n                               </span><span class=\"n\">type</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nf\">rep</span><span class=\"p\">(</span><span class=\"nf\">c</span><span class=\"p\">(</span><span class=\"s2\">\"Daily season\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">\"Weekly season\"</span><span class=\"p\">),</span><span class=\"w\">\n                                          </span><span class=\"n\">each</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">nrow</span><span class=\"p\">(</span><span class=\"n\">fuur</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"m\">2</span><span class=\"p\">))</span><span class=\"w\">\n \n</span><span class=\"n\">ggplot</span><span class=\"p\">(</span><span class=\"n\">data_fuur_simple</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">aes</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">date</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">color</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">method</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\">\n  </span><span class=\"n\">geom_line</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"m\">1.2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">alpha</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"m\">0.7</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> \n  </span><span class=\"n\">facet_grid</span><span class=\"p\">(</span><span class=\"n\">type</span><span class=\"w\"> </span><span class=\"o\">~</span><span class=\"w\"> </span><span class=\"n\">.</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">scales</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"free_y\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">switch</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"y\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\">\n  </span><span class=\"n\">labs</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"Date\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kc\">NULL</span><span class=\"p\">,</span><span class=\"w\">\n       </span><span class=\"n\">title</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"Features Comparison\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\">\n  </span><span class=\"n\">theme_ts</span></code></pre></figure>\n\n<p><img src=\"/images/post_5/unnamed-chunk-11-1.png\" alt=\"plot of chunk unnamed-chunk-11\" /></p>\n\n<p>where <em>four-daily</em> is the Fourier term for daily season, <em>simple-daily</em> is the simple feature for daily season, <em>four-weekly</em> is the Fourier term for weekly season, and <em>simple-weekly</em> is the simple feature for weekly season. The <strong>advantage</strong> of <strong>Fourier terms</strong> is that there is much more closeness between ending and starting of a day or a week, which is more natural.</p>\n\n<p>Now, let’s use data from STL decomposition to forecast trend part of time series. I will use <code class=\"language-plaintext highlighter-rouge\">auto.arima</code> procedure from the <code class=\"language-plaintext highlighter-rouge\">forecast</code> package to perform this.</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-r\" data-lang=\"r\"><span class=\"n\">trend_part</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">ts</span><span class=\"p\">(</span><span class=\"n\">decomp_ts</span><span class=\"p\">[,</span><span class=\"m\">2</span><span class=\"p\">])</span><span class=\"w\">\n</span><span class=\"n\">trend_fit</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">auto.arima</span><span class=\"p\">(</span><span class=\"n\">trend_part</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"n\">trend_for</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">forecast</span><span class=\"p\">(</span><span class=\"n\">trend_fit</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">period</span><span class=\"p\">)</span><span class=\"o\">$</span><span class=\"n\">mean</span></code></pre></figure>\n\n<p>Let’s plot it:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-r\" data-lang=\"r\"><span class=\"n\">trend_data</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">data.table</span><span class=\"p\">(</span><span class=\"n\">Load</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nf\">c</span><span class=\"p\">(</span><span class=\"n\">decomp_ts</span><span class=\"p\">[,</span><span class=\"m\">2</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">trend_for</span><span class=\"p\">),</span><span class=\"w\">\n                         </span><span class=\"n\">Date</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nf\">c</span><span class=\"p\">(</span><span class=\"n\">data_train</span><span class=\"o\">$</span><span class=\"n\">date_time</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">data_test</span><span class=\"o\">$</span><span class=\"n\">date_time</span><span class=\"p\">),</span><span class=\"w\">\n                         </span><span class=\"n\">Type</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nf\">c</span><span class=\"p\">(</span><span class=\"nf\">rep</span><span class=\"p\">(</span><span class=\"s2\">\"Real\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">nrow</span><span class=\"p\">(</span><span class=\"n\">data_train</span><span class=\"p\">)),</span><span class=\"w\"> </span><span class=\"nf\">rep</span><span class=\"p\">(</span><span class=\"s2\">\"Forecast\"</span><span class=\"p\">,</span><span class=\"w\">\n                                                                     </span><span class=\"n\">nrow</span><span class=\"p\">(</span><span class=\"n\">data_test</span><span class=\"p\">))))</span><span class=\"w\">\n \n</span><span class=\"n\">ggplot</span><span class=\"p\">(</span><span class=\"n\">trend_data</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">aes</span><span class=\"p\">(</span><span class=\"n\">Date</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Load</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">color</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Type</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\">\n  </span><span class=\"n\">geom_line</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"m\">1.2</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\">\n  </span><span class=\"n\">labs</span><span class=\"p\">(</span><span class=\"n\">title</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">paste</span><span class=\"p\">(</span><span class=\"n\">trend_fit</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\">\n  </span><span class=\"n\">theme_ts</span></code></pre></figure>\n\n<p><img src=\"/images/post_5/unnamed-chunk-13-1.png\" alt=\"plot of chunk unnamed-chunk-13\" /></p>\n\n<p>Function <code class=\"language-plaintext highlighter-rouge\">auto.arima</code> chose ARIMA(0,2,0) model as best for trend forecasting.</p>\n\n<p>Next, make the final feature to the model (lag) and construct train matrix (model matrix).\nI am creating lag by one day and just taking seasonal part from STL decomposition (for having smooth lag time series feature).</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-r\" data-lang=\"r\"><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">nrow</span><span class=\"p\">(</span><span class=\"n\">data_train</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"n\">window</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"n\">period</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"m\">1</span><span class=\"w\"> </span><span class=\"c1\"># number of days in train set minus lag</span><span class=\"w\">\n \n</span><span class=\"n\">new_load</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">rowSums</span><span class=\"p\">(</span><span class=\"n\">decomp_ts</span><span class=\"p\">[,</span><span class=\"w\"> </span><span class=\"nf\">c</span><span class=\"p\">(</span><span class=\"m\">1</span><span class=\"p\">,</span><span class=\"m\">3</span><span class=\"p\">)])</span><span class=\"w\"> </span><span class=\"c1\"># detrended load</span><span class=\"w\">\n</span><span class=\"n\">lag_seas</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">decomp_ts</span><span class=\"p\">[</span><span class=\"m\">1</span><span class=\"o\">:</span><span class=\"p\">(</span><span class=\"n\">period</span><span class=\"o\">*</span><span class=\"n\">window</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"m\">1</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"c1\"># seasonal part of time series as lag feature</span><span class=\"w\">\n \n</span><span class=\"n\">matrix_train</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">data.table</span><span class=\"p\">(</span><span class=\"n\">Load</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">tail</span><span class=\"p\">(</span><span class=\"n\">new_load</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">window</span><span class=\"o\">*</span><span class=\"n\">period</span><span class=\"p\">),</span><span class=\"w\">\n                           </span><span class=\"n\">fuur</span><span class=\"p\">[(</span><span class=\"n\">period</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"m\">1</span><span class=\"p\">)</span><span class=\"o\">:</span><span class=\"n\">N</span><span class=\"p\">,],</span><span class=\"w\">\n                           </span><span class=\"n\">Lag</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">lag_seas</span><span class=\"p\">)</span></code></pre></figure>\n\n<p>The accuracy of forecast (or fitted values of a model) will be measured by MAPE, let’s defined it:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-r\" data-lang=\"r\"><span class=\"n\">mape</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"k\">function</span><span class=\"p\">(</span><span class=\"n\">real</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">pred</span><span class=\"p\">){</span><span class=\"w\">\n  </span><span class=\"nf\">return</span><span class=\"p\">(</span><span class=\"m\">100</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">mean</span><span class=\"p\">(</span><span class=\"nf\">abs</span><span class=\"p\">((</span><span class=\"n\">real</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">pred</span><span class=\"p\">)</span><span class=\"o\">/</span><span class=\"n\">real</span><span class=\"p\">)))</span><span class=\"w\"> </span><span class=\"c1\"># MAPE - Mean Absolute Percentage Error</span><span class=\"w\">\n</span><span class=\"p\">}</span></code></pre></figure>\n\n<h2 id=\"rpart-cart-tree\">RPART (CART) tree</h2>\n\n<p>In the next two sections, I will describe two <strong>regression tree</strong> methods. The first is <strong>RPART</strong>, or CART (Classification and Regression Trees), the second will be CTREE. RPART is recursive partitioning type of binary tree for classification or regression tasks. It performs a search over all possible splits by maximizing an information measure of node impurity, selecting the covariate showing the best split.</p>\n\n<p>I’m using <code class=\"language-plaintext highlighter-rouge\">rpart</code> implementation from the same named package. Let’s go forward to modeling and try default settings of <code class=\"language-plaintext highlighter-rouge\">rpart</code> function:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-r\" data-lang=\"r\"><span class=\"n\">tree_1</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">rpart</span><span class=\"p\">(</span><span class=\"n\">Load</span><span class=\"w\"> </span><span class=\"o\">~</span><span class=\"w\"> </span><span class=\"n\">.</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">matrix_train</span><span class=\"p\">)</span></code></pre></figure>\n\n<p>It makes many interesting outputs to check, for example we can see a table of nodes and corresponding errors by <code class=\"language-plaintext highlighter-rouge\">printcp(tree_1)</code> or see a detailed summary of created nodes by <code class=\"language-plaintext highlighter-rouge\">summary(tree_1)</code>. We will check variable importance and number of created splits:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-r\" data-lang=\"r\"><span class=\"n\">tree_1</span><span class=\"o\">$</span><span class=\"n\">variable.importance</span></code></pre></figure>\n\n<figure class=\"highlight\"><pre><code class=\"language-text\" data-lang=\"text\">##       Lag     C2-48    C1-336     S1-48     C1-48    S1-336    C2-336 \n## 100504751  45918330  44310331  36245736  32359598  27831258  25385506 \n##    S2-336     S2-48 \n##  15156041   7595266</code></pre></figure>\n\n<figure class=\"highlight\"><pre><code class=\"language-r\" data-lang=\"r\"><span class=\"n\">paste</span><span class=\"p\">(</span><span class=\"s2\">\"Number of splits: \"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">tree_1</span><span class=\"o\">$</span><span class=\"n\">cptable</span><span class=\"p\">[</span><span class=\"nf\">dim</span><span class=\"p\">(</span><span class=\"n\">tree_1</span><span class=\"o\">$</span><span class=\"n\">cptable</span><span class=\"p\">)[</span><span class=\"m\">1</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"s2\">\"nsplit\"</span><span class=\"p\">])</span></code></pre></figure>\n\n<figure class=\"highlight\"><pre><code class=\"language-text\" data-lang=\"text\">## [1] \"Number of splits:  10\"</code></pre></figure>\n\n<p>We can see that most important variables are Lag and cosine forms of the daily and weekly season. The number of splits is 10, ehm, is it enough for time series of length 1008 values?</p>\n\n<p>Let’s plot created rules with fancy <code class=\"language-plaintext highlighter-rouge\">rpart.plot</code> function from the same named package:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-r\" data-lang=\"r\"><span class=\"n\">rpart.plot</span><span class=\"p\">(</span><span class=\"n\">tree_1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">digits</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"m\">2</span><span class=\"p\">,</span><span class=\"w\"> \n           </span><span class=\"n\">box.palette</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">viridis</span><span class=\"o\">::</span><span class=\"n\">viridis</span><span class=\"p\">(</span><span class=\"m\">10</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">option</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"D\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">begin</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"m\">0.85</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">end</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"m\">0</span><span class=\"p\">),</span><span class=\"w\"> \n           </span><span class=\"n\">shadow.col</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"grey65\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">col</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"grey99\"</span><span class=\"p\">)</span></code></pre></figure>\n\n<p><img src=\"/images/post_5/unnamed-chunk-18-1.png\" alt=\"plot of chunk unnamed-chunk-18\" /></p>\n\n<p>We can see values, rules, and percentage of values split each time. Pretty simple and interpretable.</p>\n\n<p>Now plot fitted values to see results of the <code class=\"language-plaintext highlighter-rouge\">tree_1</code> model.</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-r\" data-lang=\"r\"><span class=\"n\">datas</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">data.table</span><span class=\"p\">(</span><span class=\"n\">Load</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nf\">c</span><span class=\"p\">(</span><span class=\"n\">matrix_train</span><span class=\"o\">$</span><span class=\"n\">Load</span><span class=\"p\">,</span><span class=\"w\">\n                             </span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">tree_1</span><span class=\"p\">)),</span><span class=\"w\">\n                    </span><span class=\"n\">Time</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nf\">rep</span><span class=\"p\">(</span><span class=\"m\">1</span><span class=\"o\">:</span><span class=\"nf\">length</span><span class=\"p\">(</span><span class=\"n\">matrix_train</span><span class=\"o\">$</span><span class=\"n\">Load</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"m\">2</span><span class=\"p\">),</span><span class=\"w\">\n                    </span><span class=\"n\">Type</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nf\">rep</span><span class=\"p\">(</span><span class=\"nf\">c</span><span class=\"p\">(</span><span class=\"s2\">\"Real\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">\"RPART\"</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">each</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nf\">length</span><span class=\"p\">(</span><span class=\"n\">matrix_train</span><span class=\"o\">$</span><span class=\"n\">Load</span><span class=\"p\">)))</span><span class=\"w\">\n \n</span><span class=\"n\">ggplot</span><span class=\"p\">(</span><span class=\"n\">datas</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">aes</span><span class=\"p\">(</span><span class=\"n\">Time</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Load</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">color</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Type</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\">\n  </span><span class=\"n\">geom_line</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"m\">0.8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">alpha</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"m\">0.75</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\">\n  </span><span class=\"n\">labs</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"Detrended load\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">title</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"Fitted values from RPART tree\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\">\n  </span><span class=\"n\">theme_ts</span></code></pre></figure>\n\n<p><img src=\"/images/post_5/unnamed-chunk-19-1.png\" alt=\"plot of chunk unnamed-chunk-19\" /></p>\n\n<p>And see the error of fitted values against real values.</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-r\" data-lang=\"r\"><span class=\"n\">mape</span><span class=\"p\">(</span><span class=\"n\">matrix_train</span><span class=\"o\">$</span><span class=\"n\">Load</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">tree_1</span><span class=\"p\">))</span></code></pre></figure>\n\n<figure class=\"highlight\"><pre><code class=\"language-text\" data-lang=\"text\">## [1] 180.6669</code></pre></figure>\n\n<p>Whups. It’s a little bit simple (rectangular) and not really accurate, but it’s logical result from a simple tree model.\nThe key to achieving better results and have more accurate fit is to set manually control hyperparameters of rpart.\nCheck <code class=\"language-plaintext highlighter-rouge\">?rpart.control</code> to get more information.\nThe “hack” is to change cp (complexity) parameter to very low to produce more splits (nodes). The <code class=\"language-plaintext highlighter-rouge\">cp</code> is a threshold deciding if each branch fulfills conditions for further processing, so only nodes with fitness larger than factor cp are processed. Other important parameters are the minimum number of observations in needed in a node to split (<code class=\"language-plaintext highlighter-rouge\">minsplit</code>) and the maximal depth of a tree (<code class=\"language-plaintext highlighter-rouge\">maxdepth</code>).\nSet the <code class=\"language-plaintext highlighter-rouge\">minsplit</code> to 2 and set the <code class=\"language-plaintext highlighter-rouge\">maxdepth</code> to its maximal value - 30.</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-r\" data-lang=\"r\"><span class=\"n\">tree_2</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">rpart</span><span class=\"p\">(</span><span class=\"n\">Load</span><span class=\"w\"> </span><span class=\"o\">~</span><span class=\"w\"> </span><span class=\"n\">.</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">matrix_train</span><span class=\"p\">,</span><span class=\"w\">\n                </span><span class=\"n\">control</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">rpart.control</span><span class=\"p\">(</span><span class=\"n\">minsplit</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"m\">2</span><span class=\"p\">,</span><span class=\"w\">\n                                        </span><span class=\"n\">maxdepth</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"m\">30</span><span class=\"p\">,</span><span class=\"w\">\n                                        </span><span class=\"n\">cp</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"m\">0.000001</span><span class=\"p\">))</span></code></pre></figure>\n\n<p>Now make simple plot to see depth of the created tree…</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-r\" data-lang=\"r\"><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">tree_2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">compress</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kc\">TRUE</span><span class=\"p\">)</span></code></pre></figure>\n\n<p><img src=\"/images/post_5/unnamed-chunk-22-1.png\" alt=\"plot of chunk unnamed-chunk-22\" /></p>\n\n<p>That’s little bit impressive difference than previous one, isn’t it?\nCheck also number of splits.</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-r\" data-lang=\"r\"><span class=\"n\">tree_2</span><span class=\"o\">$</span><span class=\"n\">cptable</span><span class=\"p\">[</span><span class=\"nf\">dim</span><span class=\"p\">(</span><span class=\"n\">tree_2</span><span class=\"o\">$</span><span class=\"n\">cptable</span><span class=\"p\">)[</span><span class=\"m\">1</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"s2\">\"nsplit\"</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"c1\"># Number of splits</span></code></pre></figure>\n\n<figure class=\"highlight\"><pre><code class=\"language-text\" data-lang=\"text\">## [1] 600</code></pre></figure>\n\n<p>600 is higher than 10 :)</p>\n\n<p>Let’s plot fitted values from the model <code class=\"language-plaintext highlighter-rouge\">tree_2</code>:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-r\" data-lang=\"r\"><span class=\"n\">datas</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">data.table</span><span class=\"p\">(</span><span class=\"n\">Load</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nf\">c</span><span class=\"p\">(</span><span class=\"n\">matrix_train</span><span class=\"o\">$</span><span class=\"n\">Load</span><span class=\"p\">,</span><span class=\"w\">\n                             </span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">tree_2</span><span class=\"p\">)),</span><span class=\"w\">\n                    </span><span class=\"n\">Time</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nf\">rep</span><span class=\"p\">(</span><span class=\"m\">1</span><span class=\"o\">:</span><span class=\"nf\">length</span><span class=\"p\">(</span><span class=\"n\">matrix_train</span><span class=\"o\">$</span><span class=\"n\">Load</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"m\">2</span><span class=\"p\">),</span><span class=\"w\">\n                    </span><span class=\"n\">Type</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nf\">rep</span><span class=\"p\">(</span><span class=\"nf\">c</span><span class=\"p\">(</span><span class=\"s2\">\"Real\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">\"RPART\"</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">each</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nf\">length</span><span class=\"p\">(</span><span class=\"n\">matrix_train</span><span class=\"o\">$</span><span class=\"n\">Load</span><span class=\"p\">)))</span><span class=\"w\">\n \n</span><span class=\"n\">ggplot</span><span class=\"p\">(</span><span class=\"n\">datas</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">aes</span><span class=\"p\">(</span><span class=\"n\">Time</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Load</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">color</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Type</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\">\n  </span><span class=\"n\">geom_line</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"m\">0.8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">alpha</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"m\">0.75</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\">\n  </span><span class=\"n\">labs</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"Detrended load\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">title</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"Fitted values from RPART\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\">\n  </span><span class=\"n\">theme_ts</span></code></pre></figure>\n\n<p><img src=\"/images/post_5/unnamed-chunk-24-1.png\" alt=\"plot of chunk unnamed-chunk-24\" /></p>\n\n<p>And see the error of fitted values against real values.</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-r\" data-lang=\"r\"><span class=\"n\">mape</span><span class=\"p\">(</span><span class=\"n\">matrix_train</span><span class=\"o\">$</span><span class=\"n\">Load</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">tree_2</span><span class=\"p\">))</span></code></pre></figure>\n\n<figure class=\"highlight\"><pre><code class=\"language-text\" data-lang=\"text\">## [1] 16.0639</code></pre></figure>\n\n<p>Much better, but obviously the model can be overfitted now.</p>\n\n<p>Add together everything that we got till now, so forecast load one day ahead.\nLet’s create testing data matrix:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-r\" data-lang=\"r\"><span class=\"n\">test_lag</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">decomp_ts</span><span class=\"p\">[((</span><span class=\"n\">period</span><span class=\"o\">*</span><span class=\"n\">window</span><span class=\"p\">)</span><span class=\"m\">+1</span><span class=\"p\">)</span><span class=\"o\">:</span><span class=\"n\">N</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"m\">1</span><span class=\"p\">]</span><span class=\"w\">\n</span><span class=\"n\">fuur_test</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">fourier</span><span class=\"p\">(</span><span class=\"n\">data_msts</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">K</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nf\">c</span><span class=\"p\">(</span><span class=\"n\">K</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">K</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">period</span><span class=\"p\">)</span><span class=\"w\">\n \n</span><span class=\"n\">matrix_test</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">data.table</span><span class=\"p\">(</span><span class=\"n\">fuur_test</span><span class=\"p\">,</span><span class=\"w\">\n                          </span><span class=\"n\">Lag</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">test_lag</span><span class=\"p\">)</span></code></pre></figure>\n\n<p>Predict detrended time series part with <code class=\"language-plaintext highlighter-rouge\">tree_2</code> model + add the trend part of time series forecasted by ARIMA model.</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-r\" data-lang=\"r\"><span class=\"n\">for_rpart</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">tree_2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">matrix_test</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">trend_for</span></code></pre></figure>\n\n<p>Let’s plot the results and compare it with real values from <code class=\"language-plaintext highlighter-rouge\">data_test</code>.</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-r\" data-lang=\"r\"><span class=\"n\">data_for</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">data.table</span><span class=\"p\">(</span><span class=\"n\">Load</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nf\">c</span><span class=\"p\">(</span><span class=\"n\">data_train</span><span class=\"o\">$</span><span class=\"n\">value</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">data_test</span><span class=\"o\">$</span><span class=\"n\">value</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">for_rpart</span><span class=\"p\">),</span><span class=\"w\">\n                       </span><span class=\"n\">Date</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nf\">c</span><span class=\"p\">(</span><span class=\"n\">data_train</span><span class=\"o\">$</span><span class=\"n\">date_time</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nf\">rep</span><span class=\"p\">(</span><span class=\"n\">data_test</span><span class=\"o\">$</span><span class=\"n\">date_time</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"m\">2</span><span class=\"p\">)),</span><span class=\"w\">\n                       </span><span class=\"n\">Type</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nf\">c</span><span class=\"p\">(</span><span class=\"nf\">rep</span><span class=\"p\">(</span><span class=\"s2\">\"Train data\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">nrow</span><span class=\"p\">(</span><span class=\"n\">data_train</span><span class=\"p\">)),</span><span class=\"w\">\n                                </span><span class=\"nf\">rep</span><span class=\"p\">(</span><span class=\"s2\">\"Test data\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">nrow</span><span class=\"p\">(</span><span class=\"n\">data_test</span><span class=\"p\">)),</span><span class=\"w\">\n                                </span><span class=\"nf\">rep</span><span class=\"p\">(</span><span class=\"s2\">\"Forecast\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">nrow</span><span class=\"p\">(</span><span class=\"n\">data_test</span><span class=\"p\">))))</span><span class=\"w\">\n \n</span><span class=\"n\">ggplot</span><span class=\"p\">(</span><span class=\"n\">data_for</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">aes</span><span class=\"p\">(</span><span class=\"n\">Date</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Load</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">color</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Type</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\">\n  </span><span class=\"n\">geom_line</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"m\">0.8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">alpha</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"m\">0.75</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\">\n  </span><span class=\"n\">facet_zoom</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Date</span><span class=\"w\"> </span><span class=\"o\">%in%</span><span class=\"w\"> </span><span class=\"n\">data_test</span><span class=\"o\">$</span><span class=\"n\">date_time</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">zoom.size</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"m\">1.2</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\">\n  </span><span class=\"n\">labs</span><span class=\"p\">(</span><span class=\"n\">title</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"Forecast from RPART\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\">\n  </span><span class=\"n\">theme_ts</span></code></pre></figure>\n\n<p><img src=\"/images/post_5/unnamed-chunk-28-1.png\" alt=\"plot of chunk unnamed-chunk-28\" /></p>\n\n<p>Not bad. For clarity, compare forecasting results with model without separate trend forecasting and detrending.</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-r\" data-lang=\"r\"><span class=\"n\">matrix_train_sim</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">data.table</span><span class=\"p\">(</span><span class=\"n\">Load</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">tail</span><span class=\"p\">(</span><span class=\"n\">data_train</span><span class=\"o\">$</span><span class=\"n\">value</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">window</span><span class=\"o\">*</span><span class=\"n\">period</span><span class=\"p\">),</span><span class=\"w\">\n                           </span><span class=\"n\">fuur</span><span class=\"p\">[(</span><span class=\"n\">period</span><span class=\"m\">+1</span><span class=\"p\">)</span><span class=\"o\">:</span><span class=\"n\">N</span><span class=\"p\">,],</span><span class=\"w\">\n                           </span><span class=\"n\">Lag</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">lag_seas</span><span class=\"p\">)</span><span class=\"w\">\n \n</span><span class=\"n\">tree_sim</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">rpart</span><span class=\"p\">(</span><span class=\"n\">Load</span><span class=\"w\"> </span><span class=\"o\">~</span><span class=\"w\"> </span><span class=\"n\">.</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">matrix_train_sim</span><span class=\"p\">,</span><span class=\"w\">\n                  </span><span class=\"n\">control</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">rpart.control</span><span class=\"p\">(</span><span class=\"n\">minsplit</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"m\">2</span><span class=\"p\">,</span><span class=\"w\">\n                                          </span><span class=\"n\">maxdepth</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"m\">30</span><span class=\"p\">,</span><span class=\"w\">\n                                          </span><span class=\"n\">cp</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"m\">0.000001</span><span class=\"p\">))</span><span class=\"w\">\n \n</span><span class=\"n\">for_rpart_sim</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">tree_sim</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">matrix_test</span><span class=\"p\">)</span><span class=\"w\">\n \n</span><span class=\"n\">data_for</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">data.table</span><span class=\"p\">(</span><span class=\"n\">Load</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nf\">c</span><span class=\"p\">(</span><span class=\"n\">data_train</span><span class=\"o\">$</span><span class=\"n\">value</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">data_test</span><span class=\"o\">$</span><span class=\"n\">value</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">for_rpart</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">for_rpart_sim</span><span class=\"p\">),</span><span class=\"w\">\n                       </span><span class=\"n\">Date</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nf\">c</span><span class=\"p\">(</span><span class=\"n\">data_train</span><span class=\"o\">$</span><span class=\"n\">date_time</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nf\">rep</span><span class=\"p\">(</span><span class=\"n\">data_test</span><span class=\"o\">$</span><span class=\"n\">date_time</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"m\">3</span><span class=\"p\">)),</span><span class=\"w\">\n                       </span><span class=\"n\">Type</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nf\">c</span><span class=\"p\">(</span><span class=\"nf\">rep</span><span class=\"p\">(</span><span class=\"s2\">\"Train data\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">nrow</span><span class=\"p\">(</span><span class=\"n\">data_train</span><span class=\"p\">)),</span><span class=\"w\">\n                                </span><span class=\"nf\">rep</span><span class=\"p\">(</span><span class=\"s2\">\"Test data\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">nrow</span><span class=\"p\">(</span><span class=\"n\">data_test</span><span class=\"p\">)),</span><span class=\"w\">\n                                </span><span class=\"nf\">rep</span><span class=\"p\">(</span><span class=\"s2\">\"Forecast with trend\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">nrow</span><span class=\"p\">(</span><span class=\"n\">data_test</span><span class=\"p\">)),</span><span class=\"w\">\n                                </span><span class=\"nf\">rep</span><span class=\"p\">(</span><span class=\"s2\">\"Forecast simple\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">nrow</span><span class=\"p\">(</span><span class=\"n\">data_test</span><span class=\"p\">))))</span><span class=\"w\">\n \n</span><span class=\"n\">ggplot</span><span class=\"p\">(</span><span class=\"n\">data_for</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">aes</span><span class=\"p\">(</span><span class=\"n\">Date</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Load</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">color</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Type</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">linetype</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Type</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\">\n  </span><span class=\"n\">geom_line</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"m\">0.8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">alpha</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"m\">0.7</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\">\n  </span><span class=\"n\">facet_zoom</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Date</span><span class=\"w\"> </span><span class=\"o\">%in%</span><span class=\"w\"> </span><span class=\"n\">data_test</span><span class=\"o\">$</span><span class=\"n\">date_time</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">zoom.size</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"m\">1.2</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\">\n  </span><span class=\"n\">labs</span><span class=\"p\">(</span><span class=\"n\">title</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"Forecasts from RPARTs with and without trend forecasting\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\">\n  </span><span class=\"n\">scale_linetype_manual</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nf\">c</span><span class=\"p\">(</span><span class=\"m\">5</span><span class=\"p\">,</span><span class=\"m\">6</span><span class=\"p\">,</span><span class=\"m\">1</span><span class=\"p\">,</span><span class=\"m\">1</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\">\n  </span><span class=\"n\">theme_ts</span></code></pre></figure>\n\n<p><img src=\"/images/post_5/unnamed-chunk-29-1.png\" alt=\"plot of chunk unnamed-chunk-29\" /></p>\n\n<p>We can see that RPART model without trend manipulation has higher values of the forecast.\nEvaluate results with MAPE forecasting measure.</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-r\" data-lang=\"r\"><span class=\"n\">mape</span><span class=\"p\">(</span><span class=\"n\">data_test</span><span class=\"o\">$</span><span class=\"n\">value</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">for_rpart</span><span class=\"p\">)</span></code></pre></figure>\n\n<figure class=\"highlight\"><pre><code class=\"language-text\" data-lang=\"text\">## [1] 3.727473</code></pre></figure>\n\n<figure class=\"highlight\"><pre><code class=\"language-r\" data-lang=\"r\"><span class=\"n\">mape</span><span class=\"p\">(</span><span class=\"n\">data_test</span><span class=\"o\">$</span><span class=\"n\">value</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">for_rpart_sim</span><span class=\"p\">)</span></code></pre></figure>\n\n<figure class=\"highlight\"><pre><code class=\"language-text\" data-lang=\"text\">## [1] 6.976259</code></pre></figure>\n\n<p>We can see the large difference in MAPE. So detrending original time series and forecasting separately trend part really works, but not generalize the result now. You can read more about RPART method in its great <a href=\"https://cran.r-project.org/web/packages/rpart/vignettes/longintro.pdf\">package vignette</a>.</p>\n\n<h2 id=\"ctree\">CTREE</h2>\n\n<p>The second simple regression tree method that will be used is <strong>CTREE</strong>. Conditional inference trees (CTREE) is a statistical approach to recursive partitioning, which takes into account the distributional properties of the data. CTREE performs multiple test procedures that are applied to determine whether no significant association between any of the feature and the response (load in the our case) can be stated and the recursion needs to stop.\nIn <strong>R</strong> CTREE is implemented in the package <code class=\"language-plaintext highlighter-rouge\">party</code> in the function <code class=\"language-plaintext highlighter-rouge\">ctree</code>.</p>\n\n<p>Let’s try fit simple <code class=\"language-plaintext highlighter-rouge\">ctree</code> with a default values.</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-r\" data-lang=\"r\"><span class=\"n\">ctree_1</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">ctree</span><span class=\"p\">(</span><span class=\"n\">Load</span><span class=\"w\"> </span><span class=\"o\">~</span><span class=\"w\"> </span><span class=\"n\">.</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">matrix_train</span><span class=\"p\">)</span></code></pre></figure>\n\n<p>Constructed tree can be again simply plotted by <code class=\"language-plaintext highlighter-rouge\">plot</code> function, but it made many splits so it’s disarranged.</p>\n\n<p>Let’s plot fitted values from <code class=\"language-plaintext highlighter-rouge\">ctree_1</code> model.</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-r\" data-lang=\"r\"><span class=\"n\">datas</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">data.table</span><span class=\"p\">(</span><span class=\"n\">Load</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nf\">c</span><span class=\"p\">(</span><span class=\"n\">matrix_train</span><span class=\"o\">$</span><span class=\"n\">Load</span><span class=\"p\">,</span><span class=\"w\">\n                             </span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">ctree_1</span><span class=\"p\">)),</span><span class=\"w\">\n                    </span><span class=\"n\">Time</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nf\">rep</span><span class=\"p\">(</span><span class=\"m\">1</span><span class=\"o\">:</span><span class=\"nf\">length</span><span class=\"p\">(</span><span class=\"n\">matrix_train</span><span class=\"o\">$</span><span class=\"n\">Load</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"m\">2</span><span class=\"p\">),</span><span class=\"w\">\n                    </span><span class=\"n\">Type</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nf\">rep</span><span class=\"p\">(</span><span class=\"nf\">c</span><span class=\"p\">(</span><span class=\"s2\">\"Real\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">\"CTREE\"</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">each</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nf\">length</span><span class=\"p\">(</span><span class=\"n\">matrix_train</span><span class=\"o\">$</span><span class=\"n\">Load</span><span class=\"p\">)))</span><span class=\"w\">\n \n</span><span class=\"n\">ggplot</span><span class=\"p\">(</span><span class=\"n\">datas</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">aes</span><span class=\"p\">(</span><span class=\"n\">Time</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Load</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">color</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Type</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\">\n  </span><span class=\"n\">geom_line</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"m\">0.8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">alpha</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"m\">0.75</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\">\n  </span><span class=\"n\">labs</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"Detrended load\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">title</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"Fitted values from CTREE\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\">\n  </span><span class=\"n\">theme_ts</span></code></pre></figure>\n\n<p><img src=\"/images/post_5/unnamed-chunk-32-1.png\" alt=\"plot of chunk unnamed-chunk-32\" /></p>\n\n<p>And see the error of fitted values against real values.</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-r\" data-lang=\"r\"><span class=\"n\">mape</span><span class=\"p\">(</span><span class=\"n\">matrix_train</span><span class=\"o\">$</span><span class=\"n\">Load</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">ctree_1</span><span class=\"p\">))</span></code></pre></figure>\n\n<figure class=\"highlight\"><pre><code class=\"language-text\" data-lang=\"text\">## [1] 87.85983</code></pre></figure>\n\n<p>Actually, this is pretty nice, but again, it can be tuned.</p>\n\n<p>For available hyperparameters tuning check <code class=\"language-plaintext highlighter-rouge\">?ctree_control</code>. I changed hyperparameters <code class=\"language-plaintext highlighter-rouge\">minsplit</code> and <code class=\"language-plaintext highlighter-rouge\">minbucket</code> that have similar meaning like the cp parameter in RPART. The <code class=\"language-plaintext highlighter-rouge\">mincriterion</code> can be tuned also, and it is significance level (1 - p-value) that must be exceeded in order to implement a split. Let’s plot results.</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-r\" data-lang=\"r\"><span class=\"n\">ctree_2</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">ctree</span><span class=\"p\">(</span><span class=\"n\">Load</span><span class=\"w\"> </span><span class=\"o\">~</span><span class=\"w\"> </span><span class=\"n\">.</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">matrix_train</span><span class=\"p\">,</span><span class=\"w\">\n                        </span><span class=\"n\">controls</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">party</span><span class=\"o\">::</span><span class=\"n\">ctree_control</span><span class=\"p\">(</span><span class=\"n\">teststat</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"quad\"</span><span class=\"p\">,</span><span class=\"w\"> \n                                                        </span><span class=\"n\">testtype</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"Teststatistic\"</span><span class=\"p\">,</span><span class=\"w\"> \n                                                        </span><span class=\"n\">mincriterion</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"m\">0.925</span><span class=\"p\">,</span><span class=\"w\">\n                                                        </span><span class=\"n\">minsplit</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"m\">1</span><span class=\"p\">,</span><span class=\"w\">\n                                                        </span><span class=\"n\">minbucket</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"m\">1</span><span class=\"p\">))</span><span class=\"w\">\n \n</span><span class=\"n\">datas</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">data.table</span><span class=\"p\">(</span><span class=\"n\">Load</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nf\">c</span><span class=\"p\">(</span><span class=\"n\">matrix_train</span><span class=\"o\">$</span><span class=\"n\">Load</span><span class=\"p\">,</span><span class=\"w\">\n                             </span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">ctree_2</span><span class=\"p\">)),</span><span class=\"w\">\n                    </span><span class=\"n\">Time</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nf\">rep</span><span class=\"p\">(</span><span class=\"m\">1</span><span class=\"o\">:</span><span class=\"nf\">length</span><span class=\"p\">(</span><span class=\"n\">matrix_train</span><span class=\"o\">$</span><span class=\"n\">Load</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"m\">2</span><span class=\"p\">),</span><span class=\"w\">\n                    </span><span class=\"n\">Type</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nf\">rep</span><span class=\"p\">(</span><span class=\"nf\">c</span><span class=\"p\">(</span><span class=\"s2\">\"Real\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">\"CTREE\"</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">each</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nf\">length</span><span class=\"p\">(</span><span class=\"n\">matrix_train</span><span class=\"o\">$</span><span class=\"n\">Load</span><span class=\"p\">)))</span><span class=\"w\">\n \n</span><span class=\"n\">ggplot</span><span class=\"p\">(</span><span class=\"n\">datas</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">aes</span><span class=\"p\">(</span><span class=\"n\">Time</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Load</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">color</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Type</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\">\n  </span><span class=\"n\">geom_line</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"m\">0.8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">alpha</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"m\">0.75</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\">\n  </span><span class=\"n\">labs</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"Detrended load\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">title</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"Fitted values from CTREE\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\">\n  </span><span class=\"n\">theme_ts</span></code></pre></figure>\n\n<p><img src=\"/images/post_5/unnamed-chunk-34-1.png\" alt=\"plot of chunk unnamed-chunk-34\" /></p>\n\n<p>And see the error of fitted values against real values.</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-r\" data-lang=\"r\"><span class=\"n\">mape</span><span class=\"p\">(</span><span class=\"n\">matrix_train</span><span class=\"o\">$</span><span class=\"n\">Load</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">ctree_2</span><span class=\"p\">))</span></code></pre></figure>\n\n<figure class=\"highlight\"><pre><code class=\"language-text\" data-lang=\"text\">## [1] 39.70532</code></pre></figure>\n\n<p>It’s better. Now forecast values with <code class=\"language-plaintext highlighter-rouge\">ctree_2</code> model.</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-r\" data-lang=\"r\"><span class=\"n\">for_ctree</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">ctree_2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">matrix_test</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">trend_for</span></code></pre></figure>\n\n<p>And compare CTREE with RPART model.</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-r\" data-lang=\"r\"><span class=\"n\">data_for</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">data.table</span><span class=\"p\">(</span><span class=\"n\">Load</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nf\">c</span><span class=\"p\">(</span><span class=\"n\">data_train</span><span class=\"o\">$</span><span class=\"n\">value</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">data_test</span><span class=\"o\">$</span><span class=\"n\">value</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">for_rpart</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">for_ctree</span><span class=\"p\">),</span><span class=\"w\">\n                       </span><span class=\"n\">Date</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nf\">c</span><span class=\"p\">(</span><span class=\"n\">data_train</span><span class=\"o\">$</span><span class=\"n\">date_time</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nf\">rep</span><span class=\"p\">(</span><span class=\"n\">data_test</span><span class=\"o\">$</span><span class=\"n\">date_time</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"m\">3</span><span class=\"p\">)),</span><span class=\"w\">\n                       </span><span class=\"n\">Type</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nf\">c</span><span class=\"p\">(</span><span class=\"nf\">rep</span><span class=\"p\">(</span><span class=\"s2\">\"Train data\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">nrow</span><span class=\"p\">(</span><span class=\"n\">data_train</span><span class=\"p\">)),</span><span class=\"w\">\n                                </span><span class=\"nf\">rep</span><span class=\"p\">(</span><span class=\"s2\">\"Test data\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">nrow</span><span class=\"p\">(</span><span class=\"n\">data_test</span><span class=\"p\">)),</span><span class=\"w\">\n                                </span><span class=\"nf\">rep</span><span class=\"p\">(</span><span class=\"s2\">\"RPART\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">nrow</span><span class=\"p\">(</span><span class=\"n\">data_test</span><span class=\"p\">)),</span><span class=\"w\">\n                                </span><span class=\"nf\">rep</span><span class=\"p\">(</span><span class=\"s2\">\"CTREE\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">nrow</span><span class=\"p\">(</span><span class=\"n\">data_test</span><span class=\"p\">))))</span><span class=\"w\">\n \n</span><span class=\"n\">ggplot</span><span class=\"p\">(</span><span class=\"n\">data_for</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">aes</span><span class=\"p\">(</span><span class=\"n\">Date</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Load</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">color</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Type</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">linetype</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Type</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\">\n  </span><span class=\"n\">geom_line</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"m\">0.8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">alpha</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"m\">0.7</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\">\n  </span><span class=\"n\">facet_zoom</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Date</span><span class=\"w\"> </span><span class=\"o\">%in%</span><span class=\"w\"> </span><span class=\"n\">data_test</span><span class=\"o\">$</span><span class=\"n\">date_time</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">zoom.size</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"m\">1.2</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\">\n  </span><span class=\"n\">labs</span><span class=\"p\">(</span><span class=\"n\">title</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"Forecasts from RPART and CTREE models\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\">\n  </span><span class=\"n\">scale_linetype_manual</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nf\">c</span><span class=\"p\">(</span><span class=\"m\">5</span><span class=\"p\">,</span><span class=\"m\">6</span><span class=\"p\">,</span><span class=\"m\">1</span><span class=\"p\">,</span><span class=\"m\">1</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\">\n  </span><span class=\"n\">theme_ts</span></code></pre></figure>\n\n<p><img src=\"/images/post_5/unnamed-chunk-37-1.png\" alt=\"plot of chunk unnamed-chunk-37\" /></p>\n\n<figure class=\"highlight\"><pre><code class=\"language-r\" data-lang=\"r\"><span class=\"n\">mape</span><span class=\"p\">(</span><span class=\"n\">data_test</span><span class=\"o\">$</span><span class=\"n\">value</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">for_rpart</span><span class=\"p\">)</span></code></pre></figure>\n\n<figure class=\"highlight\"><pre><code class=\"language-text\" data-lang=\"text\">## [1] 3.727473</code></pre></figure>\n\n<figure class=\"highlight\"><pre><code class=\"language-r\" data-lang=\"r\"><span class=\"n\">mape</span><span class=\"p\">(</span><span class=\"n\">data_test</span><span class=\"o\">$</span><span class=\"n\">value</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">for_ctree</span><span class=\"p\">)</span></code></pre></figure>\n\n<figure class=\"highlight\"><pre><code class=\"language-text\" data-lang=\"text\">## [1] 4.020834</code></pre></figure>\n\n<p>Slightly better MAPE value with RPART, but again now it can not be anything to generalize. You can read more about CTREE method in its great <a href=\"https://cran.r-project.org/web/packages/party/vignettes/party.pdf\">package vignette</a>.\nTry to forecast future values with all available electricity load data with sliding window approach (window of the length of three weeks) for a period of more than three months (98 days).</p>\n\n<h2 id=\"comparison\">Comparison</h2>\n\n<p>Define functions that produce forecasts, so add up everything that we learned so far.</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-r\" data-lang=\"r\"><span class=\"n\">RpartTrend</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"k\">function</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">set_of_date</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">K</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">period</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"m\">48</span><span class=\"p\">){</span><span class=\"w\">\n  \n  </span><span class=\"n\">data_train</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"n\">date</span><span class=\"w\"> </span><span class=\"o\">%in%</span><span class=\"w\"> </span><span class=\"n\">set_of_date</span><span class=\"p\">]</span><span class=\"w\">\n  \n  </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">nrow</span><span class=\"p\">(</span><span class=\"n\">data_train</span><span class=\"p\">)</span><span class=\"w\">\n  </span><span class=\"n\">window</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"n\">period</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"m\">1</span><span class=\"w\">\n  \n  </span><span class=\"n\">data_ts</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">msts</span><span class=\"p\">(</span><span class=\"n\">data_train</span><span class=\"o\">$</span><span class=\"n\">value</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">seasonal.periods</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nf\">c</span><span class=\"p\">(</span><span class=\"n\">period</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">period</span><span class=\"o\">*</span><span class=\"m\">7</span><span class=\"p\">))</span><span class=\"w\">\n  \n  </span><span class=\"n\">fuur</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">fourier</span><span class=\"p\">(</span><span class=\"n\">data_ts</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">K</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nf\">c</span><span class=\"p\">(</span><span class=\"n\">K</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">K</span><span class=\"p\">))</span><span class=\"w\">\n  </span><span class=\"n\">fuur_test</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">as.data.frame</span><span class=\"p\">(</span><span class=\"n\">fourier</span><span class=\"p\">(</span><span class=\"n\">data_ts</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">K</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nf\">c</span><span class=\"p\">(</span><span class=\"n\">K</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">K</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">period</span><span class=\"p\">))</span><span class=\"w\">\n  \n  </span><span class=\"n\">data_ts</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">ts</span><span class=\"p\">(</span><span class=\"n\">data_train</span><span class=\"o\">$</span><span class=\"n\">value</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">freq</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">period</span><span class=\"o\">*</span><span class=\"m\">7</span><span class=\"p\">)</span><span class=\"w\">\n  </span><span class=\"n\">decomp_ts</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">stl</span><span class=\"p\">(</span><span class=\"n\">data_ts</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">s.window</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"periodic\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">robust</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kc\">TRUE</span><span class=\"p\">)</span><span class=\"w\">\n  </span><span class=\"n\">new_load</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">rowSums</span><span class=\"p\">(</span><span class=\"n\">decomp_ts</span><span class=\"o\">$</span><span class=\"n\">time.series</span><span class=\"p\">[,</span><span class=\"w\"> </span><span class=\"nf\">c</span><span class=\"p\">(</span><span class=\"m\">1</span><span class=\"p\">,</span><span class=\"m\">3</span><span class=\"p\">)])</span><span class=\"w\">\n  </span><span class=\"n\">trend_part</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">ts</span><span class=\"p\">(</span><span class=\"n\">decomp_ts</span><span class=\"o\">$</span><span class=\"n\">time.series</span><span class=\"p\">[,</span><span class=\"m\">2</span><span class=\"p\">])</span><span class=\"w\">\n  \n  </span><span class=\"n\">trend_fit</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">auto.arima</span><span class=\"p\">(</span><span class=\"n\">trend_part</span><span class=\"p\">)</span><span class=\"w\">\n  </span><span class=\"n\">trend_for</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">as.vector</span><span class=\"p\">(</span><span class=\"n\">forecast</span><span class=\"p\">(</span><span class=\"n\">trend_fit</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">period</span><span class=\"p\">)</span><span class=\"o\">$</span><span class=\"n\">mean</span><span class=\"p\">)</span><span class=\"w\">\n  \n  </span><span class=\"n\">lag_seas</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">decomp_ts</span><span class=\"o\">$</span><span class=\"n\">time.series</span><span class=\"p\">[</span><span class=\"m\">1</span><span class=\"o\">:</span><span class=\"p\">(</span><span class=\"n\">period</span><span class=\"o\">*</span><span class=\"n\">window</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"m\">1</span><span class=\"p\">]</span><span class=\"w\">\n  \n  </span><span class=\"n\">matrix_train</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">data.table</span><span class=\"p\">(</span><span class=\"n\">Load</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">tail</span><span class=\"p\">(</span><span class=\"n\">new_load</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">window</span><span class=\"o\">*</span><span class=\"n\">period</span><span class=\"p\">),</span><span class=\"w\">\n                             </span><span class=\"n\">fuur</span><span class=\"p\">[(</span><span class=\"n\">period</span><span class=\"m\">+1</span><span class=\"p\">)</span><span class=\"o\">:</span><span class=\"n\">N</span><span class=\"p\">,],</span><span class=\"w\">\n                             </span><span class=\"n\">Lag</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">lag_seas</span><span class=\"p\">)</span><span class=\"w\">\n  \n  </span><span class=\"n\">tree_1</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">rpart</span><span class=\"p\">(</span><span class=\"n\">Load</span><span class=\"w\"> </span><span class=\"o\">~</span><span class=\"w\"> </span><span class=\"n\">.</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">matrix_train</span><span class=\"p\">,</span><span class=\"w\">\n                  </span><span class=\"n\">control</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">rpart.control</span><span class=\"p\">(</span><span class=\"n\">minsplit</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"m\">2</span><span class=\"p\">,</span><span class=\"w\">\n                                          </span><span class=\"n\">maxdepth</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"m\">30</span><span class=\"p\">,</span><span class=\"w\">\n                                          </span><span class=\"n\">cp</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"m\">0.000001</span><span class=\"p\">))</span><span class=\"w\">\n  \n  </span><span class=\"n\">test_lag</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">decomp_ts</span><span class=\"o\">$</span><span class=\"n\">time.series</span><span class=\"p\">[((</span><span class=\"n\">period</span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"n\">window</span><span class=\"p\">))</span><span class=\"m\">+1</span><span class=\"p\">)</span><span class=\"o\">:</span><span class=\"n\">N</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"m\">1</span><span class=\"p\">]</span><span class=\"w\">\n  \n  </span><span class=\"n\">matrix_test</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">data.table</span><span class=\"p\">(</span><span class=\"n\">fuur_test</span><span class=\"p\">,</span><span class=\"w\">\n                            </span><span class=\"n\">Lag</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">test_lag</span><span class=\"p\">)</span><span class=\"w\">\n  \n  </span><span class=\"c1\"># prediction</span><span class=\"w\">\n  </span><span class=\"n\">pred_tree</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">tree_1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">matrix_test</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">trend_for</span><span class=\"w\">\n  \n  </span><span class=\"nf\">return</span><span class=\"p\">(</span><span class=\"n\">as.vector</span><span class=\"p\">(</span><span class=\"n\">pred_tree</span><span class=\"p\">))</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n \n</span><span class=\"n\">CtreeTrend</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"k\">function</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">set_of_date</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">K</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">period</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"m\">48</span><span class=\"p\">){</span><span class=\"w\">\n  \n  </span><span class=\"c1\"># subsetting the dataset by dates</span><span class=\"w\">\n  </span><span class=\"n\">data_train</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"n\">date</span><span class=\"w\"> </span><span class=\"o\">%in%</span><span class=\"w\"> </span><span class=\"n\">set_of_date</span><span class=\"p\">]</span><span class=\"w\">\n \n  </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">nrow</span><span class=\"p\">(</span><span class=\"n\">data_train</span><span class=\"p\">)</span><span class=\"w\">\n  </span><span class=\"n\">window</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"n\">period</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"m\">1</span><span class=\"w\">\n  \n  </span><span class=\"n\">data_ts</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">msts</span><span class=\"p\">(</span><span class=\"n\">data_train</span><span class=\"o\">$</span><span class=\"n\">value</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">seasonal.periods</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nf\">c</span><span class=\"p\">(</span><span class=\"n\">period</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">period</span><span class=\"o\">*</span><span class=\"m\">7</span><span class=\"p\">))</span><span class=\"w\">\n  \n  </span><span class=\"n\">fuur</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">fourier</span><span class=\"p\">(</span><span class=\"n\">data_ts</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">K</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nf\">c</span><span class=\"p\">(</span><span class=\"n\">K</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">K</span><span class=\"p\">))</span><span class=\"w\">\n  </span><span class=\"n\">fuur_test</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">as.data.frame</span><span class=\"p\">(</span><span class=\"n\">fourier</span><span class=\"p\">(</span><span class=\"n\">data_ts</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">K</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nf\">c</span><span class=\"p\">(</span><span class=\"n\">K</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">K</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">period</span><span class=\"p\">))</span><span class=\"w\">\n  \n  </span><span class=\"n\">data_ts</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">ts</span><span class=\"p\">(</span><span class=\"n\">data_train</span><span class=\"o\">$</span><span class=\"n\">value</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">freq</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">period</span><span class=\"o\">*</span><span class=\"m\">7</span><span class=\"p\">)</span><span class=\"w\">\n  </span><span class=\"n\">decomp_ts</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">stl</span><span class=\"p\">(</span><span class=\"n\">data_ts</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">s.window</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"periodic\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">robust</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kc\">TRUE</span><span class=\"p\">)</span><span class=\"w\">\n  </span><span class=\"n\">new_load</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">rowSums</span><span class=\"p\">(</span><span class=\"n\">decomp_ts</span><span class=\"o\">$</span><span class=\"n\">time.series</span><span class=\"p\">[,</span><span class=\"w\"> </span><span class=\"nf\">c</span><span class=\"p\">(</span><span class=\"m\">1</span><span class=\"p\">,</span><span class=\"m\">3</span><span class=\"p\">)])</span><span class=\"w\">\n  </span><span class=\"n\">trend_part</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">ts</span><span class=\"p\">(</span><span class=\"n\">decomp_ts</span><span class=\"o\">$</span><span class=\"n\">time.series</span><span class=\"p\">[,</span><span class=\"m\">2</span><span class=\"p\">])</span><span class=\"w\">\n  \n  </span><span class=\"n\">trend_fit</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">auto.arima</span><span class=\"p\">(</span><span class=\"n\">trend_part</span><span class=\"p\">)</span><span class=\"w\">\n  </span><span class=\"n\">trend_for</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">as.vector</span><span class=\"p\">(</span><span class=\"n\">forecast</span><span class=\"p\">(</span><span class=\"n\">trend_fit</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">period</span><span class=\"p\">)</span><span class=\"o\">$</span><span class=\"n\">mean</span><span class=\"p\">)</span><span class=\"w\">\n  \n  </span><span class=\"n\">lag_seas</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">decomp_ts</span><span class=\"o\">$</span><span class=\"n\">time.series</span><span class=\"p\">[</span><span class=\"m\">1</span><span class=\"o\">:</span><span class=\"p\">(</span><span class=\"n\">period</span><span class=\"o\">*</span><span class=\"n\">window</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"m\">1</span><span class=\"p\">]</span><span class=\"w\">\n  \n  </span><span class=\"n\">matrix_train</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">data.table</span><span class=\"p\">(</span><span class=\"n\">Load</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">tail</span><span class=\"p\">(</span><span class=\"n\">new_load</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">window</span><span class=\"o\">*</span><span class=\"n\">period</span><span class=\"p\">),</span><span class=\"w\">\n                             </span><span class=\"n\">fuur</span><span class=\"p\">[(</span><span class=\"n\">period</span><span class=\"m\">+1</span><span class=\"p\">)</span><span class=\"o\">:</span><span class=\"n\">N</span><span class=\"p\">,],</span><span class=\"w\">\n                             </span><span class=\"n\">Lag</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">lag_seas</span><span class=\"p\">)</span><span class=\"w\">\n  \n  </span><span class=\"n\">tree_2</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">party</span><span class=\"o\">::</span><span class=\"n\">ctree</span><span class=\"p\">(</span><span class=\"n\">Load</span><span class=\"w\"> </span><span class=\"o\">~</span><span class=\"w\"> </span><span class=\"n\">.</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">matrix_train</span><span class=\"p\">,</span><span class=\"w\">\n                         </span><span class=\"n\">controls</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">party</span><span class=\"o\">::</span><span class=\"n\">ctree_control</span><span class=\"p\">(</span><span class=\"n\">teststat</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"quad\"</span><span class=\"p\">,</span><span class=\"w\">\n                                                         </span><span class=\"n\">testtype</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"Teststatistic\"</span><span class=\"p\">,</span><span class=\"w\">\n                                                         </span><span class=\"n\">mincriterion</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"m\">0.925</span><span class=\"p\">,</span><span class=\"w\">\n                                                         </span><span class=\"n\">minsplit</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"m\">1</span><span class=\"p\">,</span><span class=\"w\">\n                                                         </span><span class=\"n\">minbucket</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"m\">1</span><span class=\"p\">))</span><span class=\"w\">\n  \n  </span><span class=\"n\">test_lag</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">decomp_ts</span><span class=\"o\">$</span><span class=\"n\">time.series</span><span class=\"p\">[((</span><span class=\"n\">period</span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"n\">window</span><span class=\"p\">))</span><span class=\"m\">+1</span><span class=\"p\">)</span><span class=\"o\">:</span><span class=\"n\">N</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"m\">1</span><span class=\"p\">]</span><span class=\"w\">\n  \n  </span><span class=\"n\">matrix_test</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">data.table</span><span class=\"p\">(</span><span class=\"n\">fuur_test</span><span class=\"p\">,</span><span class=\"w\">\n                            </span><span class=\"n\">Lag</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">test_lag</span><span class=\"p\">)</span><span class=\"w\">\n  \n  </span><span class=\"n\">pred_tree</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">tree_2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">matrix_test</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">trend_for</span><span class=\"w\">\n  \n  </span><span class=\"nf\">return</span><span class=\"p\">(</span><span class=\"n\">as.vector</span><span class=\"p\">(</span><span class=\"n\">pred_tree</span><span class=\"p\">))</span><span class=\"w\">\n</span><span class=\"p\">}</span></code></pre></figure>\n\n<p>I created <code class=\"language-plaintext highlighter-rouge\">plotly</code> boxplots graph of MAPE values from four models - CTREE simple, CTREE with detrending, RPART simple and RPART with detrending. Whole evaluation can be seen in the script that is stored in <a href=\"https://github.com/PetoLau/petolau.github.io/tree/master/_Rscripts\">my GitHub repository</a>.</p>\n\n<div class=\"wrapper\"> \n<iframe width=\"820\" height=\"450\" frameborder=\"0\" scrolling=\"no\" src=\"//plot.ly/~PetoLau2/56.embed\"></iframe>\n</div>\n\n<p>We can see that <strong>detrending time series</strong> of electricity consumption improves the accuracy of the forecast with the combination of both <strong>regression tree</strong> methods - <strong>RPART</strong> and <strong>CTREE</strong>. My approach works as expected.</p>\n\n<p>The habit of my posts is that animation must appear. So, I prepared for you two animations (animated dashboards) using <code class=\"language-plaintext highlighter-rouge\">animation</code>, <code class=\"language-plaintext highlighter-rouge\">grid</code>, <code class=\"language-plaintext highlighter-rouge\">ggplot</code> and <code class=\"language-plaintext highlighter-rouge\">ggforce</code> (for zooming) packages that visualize results of forecasting.</p>\n\n<p><img src=\"/images/post_5/trendRPART.gif\" alt=\"\" /></p>\n\n<p><img src=\"/images/post_5/trendCtree.gif\" alt=\"\" /></p>\n\n<p>We can see that in many days it is almost perfect forecast, but on some days it has some potential for improving.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>In this post, I showed you how to solve <strong>trend</strong> appearance in <strong>seasonal time series</strong> with using a <strong>regression tree</strong> model. <strong>Detrending time series</strong> for regression tree methods is a important (must) procedure due to the character of decision trees. The trend part of a time series was acquired by STL decomposition and separately forecasted by a simple ARIMA model. I evaluated this approach on the dataset from smart meters measurements of electricity consumption. The regression (decision) tree is a great technique for getting simple and interpretable results in very fast computational time.</p>\n\n<p>In the future post, I will focus on enhancing the predictive performance of simple regression tree methods by ensemble learning methods like Bagging, Random Forest, and similar.</p>",
  "pubDate": "Tue, 22 Aug 2017 00:00:00 +0000",
  "link": "https://petolau.github.io/Regression-trees-for-forecasting-time-series-in-R/",
  "guid": "https://petolau.github.io/Regression-trees-for-forecasting-time-series-in-R/"
}