{
  "id": "tag:blogger.com,1999:blog-1176949257541686127.post-2552432823877555157",
  "published": "2022-08-08T11:55:00.003-04:00",
  "updated": "2022-08-08T11:59:54.215-04:00",
  "category": [
    "",
    "",
    ""
  ],
  "title": "How Hash-Based Safe Browsing Works in Google Chrome",
  "content": "</i></p>By Rohit Bhatia, Mollie Bates, Google Chrome Security</i></p> <p>There are various threats a user faces when browsing the web. Users may be tricked into sharing sensitive information like their passwords with a misleading or fake website, also called phishing. They may also be led into installing malicious software on their machines, called malware, which can collect personal data and also hold it for ransom. Google Chrome, henceforth called Chrome, enables its users to protect themselves from such threats on the internet. When Chrome users browse the web with Safe Browsing protections, Chrome uses the Safe Browsing service from Google to identify and ward off various threats. </p><p>Safe Browsing works in different ways depending on the user's preferences. In the most common case, Chrome uses the privacy-conscious <a href=\"https://developers.google.com/safe-browsing/v4/update-api\">Update API</a> (Application Programming Interface) from the Safe Browsing service. <a href=\"https://www.google.com/url?q=https://security.googleblog.com/2020/05/enhanced-safe-browsing-protection-now.html&amp;sa=D&amp;source=docs&amp;ust=1659535320580416&amp;usg=AOvVaw1N9HMoW55mmIVlhzcWnz_0\">This API</a> was developed with user privacy in mind and ensures Google gets as little information about the user's browsing history as possible. If the user has opted-in to \"<a href=\"https://support.google.com/chrome/answer/9890866\">Enhanced Protection</a>\" (covered in an <a href=\"https://security.googleblog.com/2020/05/enhanced-safe-browsing-protection-now.html\">earlier post</a>) or \"<a href=\"https://support.google.com/chrome/answer/9116376\">Make Searches and Browsing Better</a>\", Chrome shares limited additional data with Safe Browsing only to further improve user protection. </p><p>This post describes how Chrome implements the Update API, with appropriate pointers to the technical implementation and details about the privacy-conscious aspects of the Update API. This should be useful for users to understand how Safe Browsing protects them, and for interested developers to browse through and understand the implementation. We will cover the APIs used for Enhanced Protection users in a future post. </p><h3>Threats on the Internet</h3>  <p>When a user navigates to a webpage on the internet, their browser fetches objects hosted on the internet. These objects include the structure of the webpage (HTML), the styling (CSS), dynamic behavior in the browser (Javascript), images, downloads initiated by the navigation, and other webpages embedded in the main webpage. These objects, also called resources, have a web address which is called their URL (Uniform Resource Locator). Further, URLs may redirect to other URLs when being loaded. Each of these URLs can potentially host threats such as phishing websites, malware, unwanted downloads, malicious software, unfair billing practices, and more. Chrome with Safe Browsing checks all URLs, redirects or included resources, to identify such threats and protect users. </p><h3>Safe Browsing Lists</h3>  <p>Safe Browsing provides a list for each threat it protects users against on the internet. A full catalog of lists that are used in Chrome can be found by visiting <code>chrome://safe-browsing/#tab-db-manager</code> on desktop platforms. </p><p>A list does not contain unsafe web addresses, also referred to as URLs, in entirety; it would be prohibitively expensive to keep all of them in a device’s limited memory. Instead it maps a URL, which can be very long, through a cryptographic hash function (SHA-256), to a unique fixed size string. This distinct fixed size string, called a hash, allows a list to be stored efficiently in limited memory. The Update API handles URLs only in the form of hashes and is also called hash-based API in this post. </p><p>Further, a list does not store hashes in entirety either, as even that would be too memory intensive. Instead, barring a case where data is not shared with Google and the list is small, it contains prefixes of the hashes. We refer to the original hash as a full hash, and a hash prefix as a partial hash.<br /><br />A list is updated following the Update API’s <a href=\"https://developers.google.com/safe-browsing/v4/request-frequency\">request frequency</a> section. Chrome also follows a back-off mode in case of an unsuccessful response. These updates happen roughly every 30 minutes, following the minimum wait duration set by the server in the list update response. </p><p>For those interested in browsing relevant source code, here’s where to look: </p><h3>Source Code</h3>  <ol> <li><a href=\"https://source.chromium.org/chromium/chromium/src/+/master:components/safe_browsing/core/browser/db/v4_local_database_manager.cc;l=61;drc=c4d0e9c06b437234e8fb297ce3273dad1891e8d4\">GetListInfos()</a> contains all the lists, along with their associated threat types, the platforms they are used on, and their file names on disk.  </li><li><a href=\"https://source.chromium.org/chromium/chromium/src/+/master:components/safe_browsing/core/browser/db/v4_store.h;l=33;drc=c4d0e9c06b437234e8fb297ce3273dad1891e8d4\">HashPrefixMap</a> shows how the lists are stored and maintained. They are grouped by the size of prefixes, and appended together to allow quick binary search based lookups. </li></ol><h3>How is hash-based URL lookup done</h3>  <p>As an example of a Safe Browsing list, let's say that we have one for malware, containing partial hashes of URLs known to host malware. These partial hashes are generally 4 bytes long, but for illustrative purposes, we show only 2 bytes. </p>   <pre class=\"prettyprint\">['036b', '1a02', 'bac8', 'bb90']<br /></pre>  <p>Whenever Chrome needs to check the reputation of a resource with the Update API, for example when navigating to a URL, it <strong>does not share the raw URL (or any piece of it)</strong> with Safe Browsing to perform the lookup. Instead, Chrome uses full hashes of the URL (and some combinations) to look up the partial hashes in the locally maintained Safe Browsing list. Chrome sends only these matched partial hashes to the Safe Browsing service. This ensures that Chrome provides these protections while respecting the user’s privacy. This hash-based lookup happens in three steps in Chrome:  </p><h3>Step 1: Generate URL Combinations and Full Hashes</h3>  <p>When Google blocks URLs that host potentially unsafe resources by placing them on a Safe Browsing list, the malicious actor can host the resource on a different URL. A malicious actor can cycle through various subdomains to generate new URLs. Safe Browsing uses host suffixes to identify malicious domains that host malware in their subdomains. Similarly, malicious actors can also cycle through various subpaths to generate new URLs. So Safe Browsing also uses path prefixes to identify websites that host malware at various subpaths. This prevents malicious actors from cycling through subdomains or paths for new malicious URLs, allowing robust and efficient identification of threats.<br /><br /></p><p>To incorporate these host suffixes and path prefixes, Chrome first computes the full hashes of the URL and some patterns derived from the URL. Following Safe Browsing API's <a href=\"https://developers.google.com/safe-browsing/v4/urls-hashing\">URLs and Hashing</a> specification, Chrome computes the full hashes of URL combinations by following these steps: </p><ol> <li>First, Chrome converts the URL into a canonical format, as defined in the specification.  </li><li>Then, Chrome generates up to 5 host suffixes/variants for the URL.  </li><li>Then, Chrome generates up to 6 path prefixes/variants for the URL.  </li><li>Then, for the combined 30 host suffixes and path prefixes combinations, Chrome generates the full hash for each combination. </li></ol><h3>Source Code</h3>  <ol> <li><a href=\"https://source.chromium.org/chromium/chromium/src/+/master:components/safe_browsing/core/browser/db/v4_local_database_manager.cc;l=433;drc=c4d0e9c06b437234e8fb297ce3273dad1891e8d4\">V4LocalDatabaseManager::CheckBrowseURL</a> is an example which performs a hash-based lookup.  </li><li><a href=\"https://source.chromium.org/chromium/chromium/src/+/master:components/safe_browsing/core/browser/db/v4_protocol_manager_util.cc;l=371;drc=ecfeecdc62ce1aca4675742b67ac439ff988f225\">V4ProtocolManagerUtil::UrlToFullHashes</a> creates the various URL combinations for a URL, and computes their full hashes. </li></ol><h3>Example</h3>  <p>For instance, let's say that a user is trying to visit <code>https://evil.example.com/blah#frag</code>. The canonical url is <code>https://evil.example.com/blah</code>. The host suffixes to be tried are <code>evil.example.com</code>, and <code>example.com</code>. The path prefixes are <code>/</code> and <code>/blah</code>. The four combined URL combinations are <code>evil.example.com/</code>, <code>evil.example.com/blah</code>, <code>example.com/</code>, and <code>example.com/blah</code>. </p>   <pre class=\"prettyprint\">url_combinations = [\"evil.example.com/\", \"evil.example.com/blah\",\"example.com/\", \"example.com/blah\"]<br />full_hashes = ['1a02…28', 'bb90…9f', '7a9e…67', 'bac8…fa']<br /></pre>  <h3>Step 2: Search Partial Hashes in Local Lists</h3>  <p>Chrome then checks the full hashes of the URL combinations against the locally maintained Safe Browsing lists. These lists, which contain partial hashes, do not provide a decisive malicious verdict, but can quickly identify if the URL is considered not malicious. If the full hash of the URL does not match any of the partial hashes from the local lists, the URL is considered safe and Chrome proceeds to load it. This happens for more than 99% of the URLs checked. </p><h3>Source Code</h3>  <ol> <li><a href=\"https://source.chromium.org/chromium/chromium/src/+/master:components/safe_browsing/core/browser/db/v4_local_database_manager.cc;l=783;drc=ecfeecdc62ce1aca4675742b67ac439ff988f225\">V4LocalDatabaseManager::GetPrefixMatches</a> gets the matching partial hashes for the full hashes of the URL and its combinations. </li></ol><h3>Example</h3>  <p>Chrome finds that three full hashes <code>1a02…28</code>, <code>bb90…9f</code>, and <code>bac8…fa</code> match local partial hashes. We note that this is for demonstration purposes, and a match here is rare.</p>  <p></p><h3><span id=\"docs-internal-guid-82f4de32-7fff-e845-074f-be79fa07c0d1\" style=\"font-weight: normal;\"><span style=\"font-family: Arial; font-size: 13pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;\"><span style=\"border: none; display: inline-block; height: 624px; overflow: hidden; width: 624px;\"><img height=\"624\" src=\"https://lh3.googleusercontent.com/8ZcL0YugCY2d24_K3O6Jsewt3iaPkzNJ_LwQIsGfWNDdarXWMjKjtAjxWnNAnIEvhHitFyLRGQXp-4_Z3jAc2Q_IX68UFA8f6WI4PaKg4EbEsMov-OJdVsMXN8nxpfEEcKc3H7aYnZ6PkHluQEnv0U8Sh36QFvaNQLBZTlVSSM4dmwCKu6vVACwnpDOmHw\" style=\"margin-left: 0px; margin-top: 0px;\" width=\"624\" /></span></span></span></h3><h3>Step 3: Fetch Matching Full Hashes</h3>  <p>Next, Chrome sends <strong>only</strong> the matching partial hash (not the full URL or any particular part of the URL, or even their full hashes), to the Safe Browsing service's <code><a href=\"https://developers.google.com/safe-browsing/v4/update-api#example-fullHashesfind\">fullHashes.find</a></code> method. In response, it receives the full hashes of all malicious URLs for which the full hash begins with one of the partial hashes sent by Chrome. Chrome checks the fetched full hashes with the generated full hashes of the URL combinations. If any match is found, it identifies the URL with various threats and their severities inferred from the matched full hashes.  </p><h3>Source Code</h3>  <ol> <li><a href=\"https://source.chromium.org/chromium/chromium/src/+/master:components/safe_browsing/core/browser/db/v4_get_hash_protocol_manager.cc;l=270;drc=ecfeecdc62ce1aca4675742b67ac439ff988f225\">V4GetHashProtocolManager::GetFullHashes</a> performs the lookup for the full hashes for the matched partial hashes.  </li></ol><h3>Example</h3>  <p>Chrome sends the matched partial hashes 1a02, bb90, and bac8 to fetch the full hashes. The server returns full hashes that match these partial hashes, <code>1a02…28, bb90…ce,</code> and <code>bac8…01</code>. Chrome finds that one of the full hashes matches with the full hash of the URL combination being checked, and identifies the malicious URL as hosting malware. </p><h3>Conclusion</h3>  <p>Safe Browsing protects Chrome users from various malicious threats on the internet. While providing these protections, Chrome faces challenges such as constraints in memory capacity, network bandwidth usage, and a dynamic threat landscape. Chrome is also mindful of the users’ privacy choices, and shares little data with Google. </p><p>In a follow up post, we will cover the more advanced protections Chrome provides to its users who have opted in to “Enhanced Protection”. </p><p></p>",
  "link": [
    "",
    "",
    "",
    "",
    ""
  ],
  "author": {
    "name": "Edward Fernandez",
    "uri": "http://www.blogger.com/profile/03784424747198152685",
    "email": "noreply@blogger.com",
    "gd:image": ""
  },
  "media:thumbnail": "",
  "thr:total": 0
}