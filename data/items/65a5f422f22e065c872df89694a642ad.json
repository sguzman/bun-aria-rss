{
  "title": "Practicing the principle of least privilege with Cloud Build and Artifact Registry",
  "link": "https://cloud.google.com/blog/topics/developers-practitioners/practicing-principle-least-privilege-cloud-build-and-artifact-registry/",
  "description": "<html><head></head><body><div class=\"block-paragraph\"><div class=\"rich-text\"><p>People often use Cloud Build and Artifact Registry in tandem to build and store software artifacts - these include container images, to be sure, but also OS packages and language specific packages. </p><p>Consider a venn diagram where these same users are also users who use the Google Cloud project as a shared, multi-tenant environment. Because a project is a logical encapsulation for services like Cloud Build and Artifact Registry, administrators of these services want to apply the principle of least privilege in most cases. </p><p>Of the numerous benefits from practicing this, reducing the blast radius of misconfigurations or malicious users is perhaps most important. </p><p>Users and teams should be able to use Cloud Build and Artifact Registry safely - without the ability to disrupt or damage one another.</p><p>With per-trigger service accounts in Cloud Build and per-repository permissions in Artifact Registry, let's walk through how we can make this possible.</p><h3>The before times </h3><p>Let's consider the default scenario - before we apply the principle of least privilege. In this scenario, we have a Cloud Build trigger connected to a repository. </p><p>When an event happens in your source code repository (like merging changes into the main branch), this trigger is, well, triggered, and it kicks off a build in Cloud Build to build an artifact and subsequently push that artifact to Artifact Registry.</p></div></div><div class=\"block-image_full_width\"><div class=\"article-module h-c-page\"><div class=\"h-c-grid\"><figure class=\"article-image--large h-c-grid__col h-c-grid__col--6 h-c-grid__col--offset-3 \"><img alt=\"Cloud Build and Artifact Registry Workflow\" src=\"https://storage.googleapis.com/gweb-cloudblog-publish/images/image3_ow7VTTL.max-1000x1000.png\"/><figcaption class=\"article-image__caption \"><div class=\"rich-text\"><p>Fig. 1 - A common workflow involving Cloud Build and Artifact Registry</p></div></figcaption></figure></div></div></div><div class=\"block-paragraph\"><div class=\"rich-text\"><p>But what are the implications of permissions in this workflow? Well, let's take a look at the permissions scheme. Left unspecified, a trigger will execute a build with the <a href=\"https://cloud.google.com/build/docs/cloud-build-service-account\">Cloud Build default service account</a>. Of the several <a href=\"https://cloud.google.com/build/docs/cloud-build-service-account#default_permissions_of_service_account\">permissions</a> granted by default to this service account are Artifact Registry permissions at the project level. </p></div></div><div class=\"block-image_full_width\"><div class=\"article-module h-c-page\"><div class=\"h-c-grid\"><figure class=\"article-image--large h-c-grid__col h-c-grid__col--6 h-c-grid__col--offset-3 \"><img alt=\"Workflow Permissions\" src=\"https://storage.googleapis.com/gweb-cloudblog-publish/images/image5_qLTJGid.max-1000x1000.png\"/><figcaption class=\"article-image__caption \"><div class=\"rich-text\"><p>Fig. 2 - The permissions scheme of the workflow in Fig. 1</p></div></figcaption></figure></div></div></div><div class=\"block-paragraph\"><div class=\"rich-text\"><p>Builds, unless specified otherwise, will run using this service account as its identity. This means those builds can interact with any artifact repository in Artifact Registry within that Google Cloud project. So let's see how we can set this up!</p><h3>Putting it into practice</h3><p></p><p>In this scenario, we're going to walk through how you might set up the below workflow, in which we have a Cloud Build build trigger connected to a <a href=\"https://github.com\" target=\"_blank\">GitHub</a> repository. In order to follow along, you'll need to have a repository set up and connected to Cloud Build - instructions can be found <a href=\"https://cloud.google.com/build/docs/automating-builds/github/connect-repo-github\">here</a>, and you'll need to replace variable names with your own values.</p><p>This build trigger will kick off a build in response to any changes to the main branch in that repository. The build itself will build a container image and push it to Artifact Registry.</p><p>The key implementation detail here is that every build from this trigger will use a bespoke service account that only has permissions to a specific repository in Artifact Registry.</p></div></div><div class=\"block-image_full_width\"><div class=\"article-module h-c-page\"><div class=\"h-c-grid\"><figure class=\"article-image--large h-c-grid__col h-c-grid__col--6 h-c-grid__col--offset-3 \"><img alt=\"Permissions - Least privilege\" src=\"https://storage.googleapis.com/gweb-cloudblog-publish/images/image2_VoqgAcy.max-1000x1000.png\"/><figcaption class=\"article-image__caption \"><div class=\"rich-text\"><p>Fig. 3 - The permissions scheme of the workflow with principle of least privilege</p></div></figcaption></figure></div></div></div><div class=\"block-paragraph\"><div class=\"rich-text\"><p>Let's start by creating an Artifact Registry repository for container images for a fictional team, Team A.</p></div></div><div class=\"block-code\"><dl><dt>code_block</dt><dd>[StructValue([(u'code', u'gcloud artifacts repositories create ${TEAM_A_REPOSITORY} \\\\\\r\\n--repository-format=docker \\\\\\r\\n--location=${REGION}'), (u'language', u''), (u'caption', &lt;wagtail.wagtailcore.rich_text.RichText object at 0x3e7646deeb10&gt;)])]</dd></dl></div><div class=\"block-paragraph\"><div class=\"rich-text\"><p>Then we'll create a service account for Team A.</p></div></div><div class=\"block-code\"><dl><dt>code_block</dt><dd>[StructValue([(u'code', u'gcloud iam service-accounts create ${TEAM_A_SA} \\\\\\r\\n--display-name=$TEAM_A_SA_NAME'), (u'language', u''), (u'caption', &lt;wagtail.wagtailcore.rich_text.RichText object at 0x3e7646e355d0&gt;)])]</dd></dl></div><div class=\"block-paragraph\"><div class=\"rich-text\"><p>And now the fun part. We can create an IAM role binding between this service account and the aforementioned Artifact Registry repository; below is an example of how you would do this with gcloud:</p></div></div><div class=\"block-code\"><dl><dt>code_block</dt><dd>[StructValue([(u'code', u'gcloud artifacts repositories add-iam-policy-binding ${TEAM_A_REPOSITORY} --location $REGION --member=\"serviceAccount:${TEAM_A_SA}@${PROJECT_ID}.iam.gserviceaccount.com\" --role=roles/artifactregistry.writer'), (u'language', u''), (u'caption', &lt;wagtail.wagtailcore.rich_text.RichText object at 0x3e7646e35650&gt;)])]</dd></dl></div><div class=\"block-paragraph\"><div class=\"rich-text\"><p>What this effectively does is it gives the service account permissions that come with the <code>artifactregistry.writer</code> role, but only for a specific Artifact Registry repository.</p><p>Now, for many moons, Cloud Build has already allowed for users to provide a specific service account for use in their build specification - for manually executed builds. You can see an example of this in the following build spec:</p></div></div><div class=\"block-code\"><dl><dt>code_block</dt><dd>[StructValue([(u'code', u\"steps:\\r\\n- name: 'bash'\\r\\n args: ['echo', 'Hello world!']\\r\\nlogsBucket: 'LOGS_BUCKET_LOCATION'\\r\\n# provide your specific service account below\\r\\nserviceAccount: 'projects/PROJECT_ID/serviceAccounts/${TEAM_A_SA}\\r\\noptions:\\r\\n logging: GCS_ONLY\"), (u'language', u''), (u'caption', &lt;wagtail.wagtailcore.rich_text.RichText object at 0x3e76477cf810&gt;)])]</dd></dl></div><div class=\"block-paragraph\"><div class=\"rich-text\"><p>But, for many teams, automating the execution of builds and incorporating it with how code and configuration flows through their teams and systems is a must. Triggers in Cloud Build are how folks achieve this! </p><p>When creating a trigger in Cloud Build, you can either connect it to a source code repository or set up your own webhook. Whatever the source may be, triggers depend on systems beyond the reach of permissions we can control in our Google Cloud project using Identity and Access Management. </p><p>Let's now consider what could happen when we do not apply the principle of least privilege when using build triggers with a Git repository.</p><p>What risk are we trying to mitigate?</p><p>The Supply Chain Levels for Software Artifacts (SLSA) security framework details potential threats in the software supply chain - essentially the process of how your code is written, tested, built, deployed, and run.  </p></div></div><div class=\"block-image_full_width\"><div class=\"article-module h-c-page\"><div class=\"h-c-grid\"><figure class=\"article-image--large h-c-grid__col h-c-grid__col--6 h-c-grid__col--offset-3 \"><img alt=\"Threats in software supply chain\" src=\"https://storage.googleapis.com/gweb-cloudblog-publish/images/image4_s7m7Irk.max-1000x1000.png\"/><figcaption class=\"article-image__caption \"><div class=\"rich-text\"><p>Fig. 4 - Threats in the software supply chain identified in the SLSA framework</p></div></figcaption></figure></div></div></div><div class=\"block-paragraph\"><div class=\"rich-text\"><p>With a trigger taking action to start a build based on a compromised source repo, as seen in threat B, we can see how this effect may compound in effect downstream. If builds run based on actions in a compromised repo, we have multiple threats now in play that follow.</p><p>By minimizing the permissions that these builds have, we reduce the scope of impact that a compromised source repo can have. This walkthrough specifically looks at minimizing the effects of having a compromised package repo in threat G. </p><p>In this example we are building out, if the source repo is compromised, only packages in the specific Artifact Registry repository created will be affected; this is because our service account associated with the trigger only has permissions to that one repository.</p><p>Creating a trigger to run builds with a bespoke service account requires only one additional parameter; when using gcloud for example, you would specify the <code>–-service-account</code> parameter as follows:</p></div></div><div class=\"block-code\"><dl><dt>code_block</dt><dd>[StructValue([(u'code', u'gcloud beta builds triggers create github \\\\\\r\\n--name=team-a-build \\\\\\r\\n--region=${REGION} \\\\\\r\\n--repo-name=${TEAM_A_REPO} \\\\\\r\\n--repo-owner=${TEAM_A_REPO_OWNER} \\\\\\r\\n--pull-request-pattern=main \\\\\\r\\n--build-config=cloudbuild.yaml \\\\\\r\\n--service-account=projects/${PROJECT_ID}/serviceAccounts/${TEAM_A_SA}@${PROJECT_ID}.iam.gserviceaccount.com'), (u'language', u''), (u'caption', &lt;wagtail.wagtailcore.rich_text.RichText object at 0x3e76477cfb10&gt;)])]</dd></dl></div><div class=\"block-paragraph\"><div class=\"rich-text\"><p><code>TEAM_A_REPO</code> will be the GitHub repository you created and connected to Cloud Build earlier, <code>TEAM_A_REPO_OWNER</code> will be the GitHub username of the repository owner, and <code>TEAM_A_SA</code> will be the service account we created earlier. Aside from that, all you'll need is a <code>cloudbuild.yaml</code> manifest in that repository, and your trigger will be set! </p><br/><p>With this trigger set up, you can now test the scope of permissions your builds that run based on this trigger have, verifying that they only have permission to work with the <code>TEAM_A_REPOSITORY</code> in Artifact Registry.</p><h3>In conclusion</h3><p>Configuring minimal permissions for build triggers is only one part of the bigger picture, but a great step to take no matter where you are in your journey of securing your software supply chain. </p><p>To learn more, we recommend taking a deeper dive into the <a href=\"https://slsa.dev/\" target=\"_blank\">SLSA security framework</a> and <a href=\"https://cloud.google.com/software-supply-chain-security/docs/sds/overview\">Software Delivery Shield</a> - Google Cloud's fully managed, end-to-end solution that enhances software supply chain security across the entire software development life cycle from development, supply, and CI/CD to runtimes. Or if you're just getting started, check out <a href=\"https://console.cloud.google.com/?walkthrough_id=build--cloud_build_quickstart\">this</a> tutorial on Cloud Build and <a href=\"https://console.cloud.google.com/?walkthrough_id=artifact_registry_docker_quickstart\">this</a> tutorial on Artifact Registry!</p></div></div><div class=\"block-related_article_tout\"><div class=\"uni-related-article-tout h-c-page\"><section class=\"h-c-grid\"><a class=\"uni-related-article-tout__wrapper h-c-grid__col h-c-grid__col--8 h-c-grid__col-m--6 h-c-grid__col-l--6 h-c-grid__col--offset-2 h-c-grid__col-m--offset-3 h-c-grid__col-l--offset-3 uni-click-tracker\" data-analytics='{\n                       \"event\": \"page interaction\",\n                       \"category\": \"article lead\",\n                       \"action\": \"related article - inline\",\n                       \"label\": \"article: {slug}\"\n                     }' href=\"https://gweb-cloudblog-publish.appspot.com/products/devops-sre/cloud-build-private-pools-offers-cicd-for-private-networks/\"><div class=\"uni-related-article-tout__inner-wrapper\"><p class=\"uni-related-article-tout__eyebrow h-c-eyebrow\">Related Article</p><div class=\"uni-related-article-tout__content-wrapper\"><div class=\"uni-related-article-tout__image-wrapper\"><div class=\"uni-related-article-tout__image\" style=\"background-image: url('https://storage.googleapis.com/gweb-cloudblog-publish/images/devops.max-500x500.jpeg')\"></div></div><div class=\"uni-related-article-tout__content\"><h4 class=\"uni-related-article-tout__header h-has-bottom-margin\">Introducing Cloud Build private pools: Secure CI/CD for private networks</h4><p class=\"uni-related-article-tout__body\">With new private pools, you can use Google Cloud’s hosted Cloud Build CI/CD service on resources in your private network or in other clouds.</p><div class=\"cta module-cta h-c-copy uni-related-article-tout__cta muted\"><span class=\"nowrap\">Read Article<svg class=\"icon h-c-icon\" role=\"presentation\"><use xlink:href=\"#mi-arrow-forward\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"></use></svg></span></div></div></div></div></a></section></div></div></body></html>",
  "pubDate": "Thu, 03 Nov 2022 13:00:00 -0000",
  "guid": "https://cloud.google.com/blog/topics/developers-practitioners/practicing-principle-least-privilege-cloud-build-and-artifact-registry/",
  "category": [
    "Application Development",
    "Google Cloud",
    "Developers & Practitioners"
  ],
  "media:content": "",
  "og": {
    "type": "article",
    "title": "Practicing the principle of least privilege with Cloud Build and Artifact Registry",
    "description": "How to use Cloud Build's support for per-trigger service accounts to apply the principle of least privilege to builds that push images to Artifact Registry.",
    "image": "https://storage.googleapis.com/gweb-cloudblog-publish/images/Screen_Shot_2022-11-01_at_3.39.21_PM.max-600x600.png",
    "site_name": "Google",
    "url": "https://cloud.google.com/blog/topics/developers-practitioners/practicing-principle-least-privilege-cloud-build-and-artifact-registry/"
  },
  "author": {
    "name": "Anthony Bushong",
    "title": "Developer Relations Engineer",
    "department": "",
    "company": ""
  }
}