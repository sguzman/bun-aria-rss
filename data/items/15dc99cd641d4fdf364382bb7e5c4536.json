{
  "title": "There is no longer any such thing as Computer Security",
  "description": "<!--kg-card-begin: markdown--><p>Remember \"cybersecurity\"?</p>\n<p><img src=\"https://blog.codinghorror.com/content/images/2018/09/its-cybersecurity-yay.jpg\" alt=\"its-cybersecurity-yay\" loading=\"lazy\"></p>\n<p>Mysterious hooded computer guys doing mysterious hooded computer guy .. things! Who knows what kind of naughty digital mischief they might be up to?</p>\n<p>Unfortunately, we now live in a world where this kind of digital mischief is literally rewriting the world's history. For proof</p>",
  "link": "https://blog.codinghorror.com/there-is-no-longer-any-such-thing-as-computer-security/",
  "guid": "5ba48d62c848a600beccf034",
  "dc:creator": "Jeff Atwood",
  "pubDate": "Fri, 21 Sep 2018 09:50:53 GMT",
  "content:encoded": "<!--kg-card-begin: markdown--><p>Remember \"cybersecurity\"?</p>\n<p><img src=\"https://blog.codinghorror.com/content/images/2018/09/its-cybersecurity-yay.jpg\" alt=\"its-cybersecurity-yay\" loading=\"lazy\"></p>\n<p>Mysterious hooded computer guys doing mysterious hooded computer guy .. things! Who knows what kind of naughty digital mischief they might be up to?</p>\n<p>Unfortunately, we now live in a world where this kind of digital mischief is literally rewriting the world's history. For proof of that, you need look no further than this single email that was sent March 19th, 2016.</p>\n<p><img src=\"https://blog.codinghorror.com/content/images/2018/09/podesta-hack-email-text.png\" alt=\"podesta-hack-email-text\" loading=\"lazy\"></p>\n<p>If you don't recognize what this is, it is a <a href=\"https://blog.codinghorror.com/phishing-the-forever-hack/\">phishing email</a>.</p>\n<p><a href=\"https://blog.codinghorror.com/phishing-the-forever-hack/\"><img src=\"https://blog.codinghorror.com/content/images/2018/09/phishing-guy.jpg\" alt=\"phishing-guy\" loading=\"lazy\"></a></p>\n<p>This is by now a very, very famous phishing email, arguably the most famous of all time. But let's consider <a href=\"https://www.apnews.com/dea73efc01594839957c3c9a6c962b8a\">how this email even got sent to its target in the first place</a>:</p>\n<ul>\n<li>\n<p>An attacker slurped up lists of any public emails of 2008 political campaign staffers.</p>\n</li>\n<li>\n<p>One 2008 staffer was <em>also</em> hired for the 2016 political campaign</p>\n</li>\n<li>\n<p>That particular staffer had non-public campaign emails in their address book, and one of them was a powerful key campaign member with an extensive email history.</p>\n</li>\n</ul>\n<p>On successful phish leads to an even wider address book attack net down the line. Once they gain access to a person's inbox, they use it to prepare to their next attack. They'll harvest existing email addresses, subject lines, content, and attachments to construct plausible looking boobytrapped emails and mail them to all of <em>their</em> contacts. How sophisticated and targeted to a particular person this effort is determines whether it's so-called \"spear\" phishing or not.</p>\n<p><img src=\"https://blog.codinghorror.com/content/images/2018/09/phishing-vs-spear-phishing.png\" alt=\"phishing-vs-spear-phishing\" loading=\"lazy\"></p>\n<p>In this case is it was not at all targeted. This is a remarkably unsophisticated, absolutely generic routine phishing attack. There is zero focused attack effort on display here. But note the target did <em>not</em> immediately click the link in the email!</p>\n<p><img src=\"https://blog.codinghorror.com/content/images/2018/09/podesta-hack-email-link-1.png\" alt=\"podesta-hack-email-link-1\" loading=\"lazy\"></p>\n<p>Instead, he did exactly what you'd want a person to do in this scenario: <strong>he emailed IT support and asked if this email was valid.</strong> But IT made <a href=\"https://www.nytimes.com/2016/12/13/us/politics/russia-hack-election-dnc.html\">a fatal mistake in their response</a>.</p>\n<p><img src=\"https://blog.codinghorror.com/content/images/2018/09/podesta-it-support-response.png\" alt=\"podesta-it-support-response\" loading=\"lazy\"></p>\n<p>Do you see it? Here's the kicker:</p>\n<blockquote>\n<p>Mr. Delavan, in an interview, said that his bad advice was a result of a typo: He knew this was a phishing attack, as the campaign was getting dozens of them. He said <strong>he had meant to type that it was an &#x201C;illegitimate&#x201D; email, an error that he said has plagued him ever since.</strong></p>\n</blockquote>\n<p>One word. He got <em>one</em> word wrong. But what a word to get wrong, and in the first sentence! The email did provide the proper Google address to reset your password. But the lede was already buried since the first sentence said \"legitimate\"; the phishing link in that email was then clicked. And the rest is literally history.</p>\n<p>What's even funnier (well, in the way of gallows humor, I guess) is that public stats were left enabled for that bit.ly tracking link, so you can see exactly what crazy domain that \"Google login page\" resolved to, and that it was clicked exactly twice, on the same day it was mailed.</p>\n<p><img src=\"https://blog.codinghorror.com/content/images/2018/09/bitly-podesta-tracking-link.png\" alt=\"bitly-podesta-tracking-link\" loading=\"lazy\"></p>\n<p>As I said, these were not exactly sophisticated attackers. So yeah, in <em>theory</em> an attentive user could pay attention to the browser's address bar and notice that after clicking the link, they arrived at</p>\n<p><code>http://myaccount.google.com-securitysettingpage.tk/security/signinoptions/password</code></p>\n<p>instead of</p>\n<p><code>https://myaccount.google.com/security</code></p>\n<p>Note that the phishing URL is carefully constructed so the most \"correct\" part is at the front, and weirdness is sandwiched in the middle. Unless you're paying very close attention and your address bar is long enough to expose the full URL, it's &#x2026; tricky. See this 10 second video for a dramatic example.</p>\n<blockquote class=\"twitter-tweet\" data-lang=\"en\"><p lang=\"en\" dir=\"ltr\">Quick phishing demo. Would you fall for something like this? <a href=\"https://t.co/phONMKHBle\">pic.twitter.com/phONMKHBle</a></p>&#x2014; Mustafa Al-Bassam (@musalbas) <a href=\"https://twitter.com/musalbas/status/1038919152826757122?ref_src=twsrc%5Etfw\">September 9, 2018</a></blockquote>\n<script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<p>(And if you think that one's good, check out <a href=\"https://twitter.com/tomscott/status/812265182646927361\">this one</a>. Don't forget all the unicode look-alike trickery you can pull, too.)</p>\n<p>I originally wrote this post as a presentation for the Berkeley Computer Science Club back in March, and at that time I gathered a list of public phishing pages I found on the web.</p>\n<p><code>nightlifesofl.com</code><br>\n<code>ehizaza-limited.com</code><br>\n<code>tcgoogle.com</code><br>\n<code>appsgoogie.com</code><br>\n<code>security-facabook.com</code></p>\n<p>Of those five examples from 6 months ago, one is completely gone, one loads just fine, and three present an appropriately scary red interstitial warning page that strongly advises you not to visit the page you're trying to visit, courtesy of Google's <a href=\"https://developers.google.com/safe-browsing/\">safe browsing API</a>. But of course this kind of shared blacklist domain name protection will be completely useless on any fresh phishing site. (Don't even get me started on how <a href=\"https://blog.codinghorror.com/blacklists-dont-work/\">blacklists have never really worked</a> anyway.)</p>\n<p><img src=\"https://blog.codinghorror.com/content/images/2018/09/google-login-phishing-page.png\" alt=\"google-login-phishing-page\" loading=\"lazy\"></p>\n<p>It doesn't exactly require a PhD degree in computer science to phish someone:</p>\n<ul>\n<li>Buy a crazy long, realistic looking domain name.</li>\n<li>Point it to a cloud server somewhere.</li>\n<li>Get a free HTTPS certificate courtesy of <a href=\"https://blog.codinghorror.com/lets-encrypt-everything/\">our friends at Let's Encrypt</a>.</li>\n<li>Build a realistic copy of a login page that silently transmits everything you type in those login fields to you &#x2013; perhaps even in real time, as the target types.</li>\n<li>Harvest email addresses and mass mail a plausible looking phishing email with your URL.</li>\n</ul>\n<p>I want to emphasize that although clearly mistakes were made in this specific situation, none of the people involved here were amateurs. They had training and experience. They were working with IT and security professionals. Furthermore, they <a href=\"https://www.apnews.com/dea73efc01594839957c3c9a6c962b8a\">knew digital attacks were incoming</a>.</p>\n<blockquote>\n<p>The &#x2026; campaign was no easy target; several former employees said the organization put particular stress on digital safety.</p>\n<p>Work emails were protected by two-factor authentication, a technique that uses a second passcode to keep accounts secure. Most messages were deleted after 30 days and staff went through phishing drills. Security awareness even followed the campaigners into the bathroom, where someone put a picture of a toothbrush under the words: &#x201C;You shouldn&#x2019;t share your passwords either.&#x201D;</p>\n</blockquote>\n<p>The campaign itself used two factor auth extensively, which is why personal gmail accounts were targeted, because they were less protected.</p>\n<p>The key takeaway here is that <strong>it's basically impossible, statistically speaking, to prevent your organization from being phished.</strong></p>\n<p>Or is it?</p>\n<p><a href=\"https://techsolidarity.org\"><img src=\"https://blog.codinghorror.com/content/images/2018/09/techsolidarity-logo.png\" alt=\"techsolidarity-logo\" loading=\"lazy\"></a></p>\n<p>Nobody is doing better work in this space right now than Maciej Ceglowski and Tech Solidarity. Their list of <a href=\"https://techsolidarity.org/resources/basic_security.htm\">basic security precautions for non-profits and journalists</a> is pure gold and has been vetted by many industry professionals with security credentials that are actually impressive, unlike mine. Everyone should read this list very closely, point by point.</p>\n<p>Everyone?</p>\n<p>Computers, courtesy of smartphones, are <a href=\"https://blog.codinghorror.com/can-software-make-you-less-racist/\">now such a pervasive part of average life for average people</a> that <strong>there is no longer any such thing as \"computer security\". There is only <em>security</em>.</strong> In other words, these are normal security practices <em>everyone</em> should be familiar with. Not just computer geeks. Not just political activists and politicians. Not just journalists and nonprofits.</p>\n<video poster=\"/content/images/2018/09/gary-oldman-everyone-poster.jpg\" preload=\"none\" controls style=\"max-width:100%\">\n<source src=\"http://discourse-cdn.codinghorror.com/uploads/default/original/3X/2/4/2483fdc1eb5585ebd550bba1614d229da2f2987c.mp4\">\n</video>\n<p><em>Everyone.</em></p>\n<p>It is a fair bit of reading, so because I know you are just as lazy as I am, and I am <em>epically</em> lazy, let me summarize what I view as the three important takeaways from the hard work Tech Solidarity put into <a href=\"https://techsolidarity.org/resources.html\">these resources</a>. These three short sentences are the 60 second summary of what you want to do, and what you want to share with others so <em>they</em> do, too.</p>\n<p><strong>1) Enable Two Factor authentication through an app, and <em>not SMS</em>, everywhere you can.</strong></p>\n<p><img src=\"https://blog.codinghorror.com/content/images/2018/09/google-2fa-1.png\" alt=\"google-2fa-1\" loading=\"lazy\"></p>\n<p>Logging in with only a password, now matter how long and unique you attempt to make that password, will never be enough. A password is what you know; you need to add the second factor of something you <em>have</em> (or something you <em>are</em>) to achieve significant additional security. SMS can famously <a href=\"https://www.wired.com/story/phone-numbers-indentification-authentication/\">be intercepted, social engineered, or sim-jacked all too easily</a>. If it's SMS, it's not secure, <em>period</em>. So install an authenticator app, and use it, at least for your most important credentials such as your email account and your bank.</p>\n<p>Have I mentioned that Discourse <a href=\"https://blog.discourse.org/2018/05/discourse-2-0-released/\">added two factor authentication support in version 2.0</a>, and our just released 2.1 adds printed backup codes, too? There are two paths forward: you can <em>talk</em> about the solution, or you can <em>build</em> the solution. I'm trying to do both to the best of my ability. Look for the 2FA auth option in your user preferences on your favorite Discourse instance. It's there for you.</p>\n<p>(This is also a company policy at Discourse; if you work here, <em>you 2FA everything all the time</em>. No other login option exists.)</p>\n<p><strong>2) Make all your passwords 11 characters or more.</strong></p>\n<p>It's a <a href=\"https://blog.codinghorror.com/hacker-hack-thyself/\">long story</a>, but anything under 11 characters <a href=\"https://blog.codinghorror.com/your-password-is-too-damn-short/\">is basically the same as having no password at all</a> these days. I personally recommend at least 14 characters, maybe even 16. But this won't be a problem for you, because...</p>\n<p><strong>3) Use a password manager.</strong></p>\n<p>If you use a password manager, you can simultaneously avoid the pernicious danger of password re-use and <a href=\"https://blog.codinghorror.com/password-rules-are-bullshit/\">the difficulty of coming up with unique and random passwords</a> all the time. It is my hope in the long run that cloud based password management gets deeply built into Android, iOS, OSX, and Windows so that people don't need to run a weird melange of third party apps to achieve this essential task. Password management is foundational and should not be the province of third parties on principle, because you never outsource a core competency.</p>\n<p><strong>Bonus rule! For the particularly at-risk, get and use a U2F key.</strong></p>\n<p>In the long term, two factor through an app isn't quite secure enough due to the very real (and growing) specter of real-time phishing. Authentication apps offer timed keys that expire after a minute or two, but if the attacker can get you to type an authentication key and relay it to the target site fast enough, they can still log in as you. If you need ultimate protection, <a href=\"https://en.wikipedia.org/wiki/Universal_2nd_Factor\">look into U2F keys</a>.</p>\n<p><img src=\"https://blog.codinghorror.com/content/images/2018/09/u2f-keys.jpg\" alt=\"u2f-keys\" loading=\"lazy\"></p>\n<p>I believe U2F support is still too immature at the moment, particularly on mobile, for this to be practical for the average person right now. But if you do happen to fall into those groups that will be under attack, you <em>absolutely</em> want to set up U2F keys where you can today. They're cheap, and the good news is that  they <em>literally make phishing impossible</em> at last. Given that Google had <a href=\"https://krebsonsecurity.com/2018/07/google-security-keys-neutralized-employee-phishing/\">100% company wide success against phishing with U2F</a>, we know this works.</p>\n<p>In today's world, computers are now so omnipresent that there is no longer any such thing as cybersecurity, online security, or computer security &#x2013; there's only <em>security</em>. You either have it, or you don't. If you follow and share these three rules, hopefully you too can have a modicum of security today.</p>\n<!--kg-card-end: markdown-->"
}