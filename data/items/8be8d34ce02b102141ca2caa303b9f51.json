{
  "title": "Dask Release 0.15.0",
  "link": "",
  "updated": "2017-06-15T00:00:00+00:00",
  "id": "https://mrocklin.github.io/blog/work/2017/06/15/dask-0.15.0",
  "content": "<p><em>This work is supported by <a href=\"http://continuum.io\">Continuum Analytics</a>\nand the Data Driven Discovery Initiative from the <a href=\"https://www.moore.org/\">Moore\nFoundation</a>.</em></p>\n\n<p>I’m pleased to announce the release of Dask version 0.15.0.  This release\ncontains performance and stability enhancements as well as some breaking\nchanges.  This blogpost outlines notable changes since the last release on May\n5th.</p>\n\n<p>As always you can conda install Dask:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>conda install dask distributed\n</code></pre></div></div>\n\n<p>or pip install from PyPI</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>pip install dask[complete] --upgrade\n</code></pre></div></div>\n\n<p>Conda packages are available both on the defaults and conda-forge channels.</p>\n\n<p>Full changelogs are available here:</p>\n\n<ul>\n  <li><a href=\"https://github.com/dask/dask/blob/master/docs/source/changelog.rst\">dask/dask</a></li>\n  <li><a href=\"https://github.com/dask/distributed/blob/master/docs/source/changelog.rst\">dask/distributed</a></li>\n</ul>\n\n<p>Some notable changes follow.</p>\n\n<h2 id=\"numpy-ufuncs-operate-as-daskarray-ufuncs\">NumPy ufuncs operate as Dask.array ufuncs</h2>\n\n<p>Thanks to recent changes in NumPy 1.13.0, NumPy ufuncs now operate as\nDask.array ufuncs.  Previously they would convert their arguments into Numpy\narrays and then operate concretely.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"nn\">dask.array</span> <span class=\"k\">as</span> <span class=\"n\">da</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"n\">np</span>\n\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">da</span><span class=\"p\">.</span><span class=\"n\">arange</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">chunks</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,))</span>\n\n<span class=\"c1\"># Before\n</span><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"n\">negative</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"n\">array</span><span class=\"p\">([</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">9</span><span class=\"p\">])</span>\n\n<span class=\"c1\"># Now\n</span><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"n\">negative</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"n\">dask</span><span class=\"p\">.</span><span class=\"n\">array</span><span class=\"o\">&lt;</span><span class=\"n\">negative</span><span class=\"p\">,</span> <span class=\"n\">shape</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,),</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">int64</span><span class=\"p\">,</span> <span class=\"n\">chunksize</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,)</span><span class=\"o\">&gt;</span>\n</code></pre></div></div>\n\n<p>To celebrate this change we’ve also improved support for more of the NumPy\nufunc and reduction API, such as support for out parameters.  This means that a\nnon-trivial subset of the actual NumPy API works directly out-of-the box with\ndask.arrays.  This makes it easier to write code that seamlessly works with\neither array type.</p>\n\n<p><em>Note: the ufunc feature requires that you update NumPy to 1.13.0 or later.\nPackages are available through PyPI and conda on the defaults and conda-forge\nchannels.</em></p>\n\n<ul>\n  <li><a href=\"https://github.com/numpy/numpy/pull/8247\">numpy/numpy #8247</a></li>\n  <li><a href=\"https://github.com/dask/dask/pull/2438\">dask/dask #2438</a></li>\n</ul>\n\n<h2 id=\"asynchronous-clients\">Asynchronous Clients</h2>\n\n<p>The Dask.distributed API is capable of operating within a Tornado or Asyncio\nevent loop, which can be useful when integrating with other concurrent systems\nlike web servers or when building some more advanced algorithms in machine\nlearning and other fields.  The API to do this used to be somewhat hidden and\nonly known to a few and used underscores to signify that methods were\nasynchronous.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># Before\n</span><span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">Client</span><span class=\"p\">(</span><span class=\"n\">start</span><span class=\"o\">=</span><span class=\"bp\">False</span><span class=\"p\">)</span>\n<span class=\"k\">await</span> <span class=\"n\">client</span><span class=\"p\">.</span><span class=\"n\">_start</span><span class=\"p\">()</span>\n\n<span class=\"n\">future</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"p\">.</span><span class=\"n\">submit</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">)</span>\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">client</span><span class=\"p\">.</span><span class=\"n\">_gather</span><span class=\"p\">(</span><span class=\"n\">future</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>These methods are still around, but the process of starting the client has\nchanged and we now recommend using the fully public methods even in\nasynchronous situations (these used to block).</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># Now\n</span><span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">Client</span><span class=\"p\">(</span><span class=\"n\">asynchronous</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n\n<span class=\"n\">future</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"p\">.</span><span class=\"n\">submit</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">)</span>\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">client</span><span class=\"p\">.</span><span class=\"n\">gather</span><span class=\"p\">(</span><span class=\"n\">future</span><span class=\"p\">)</span>  <span class=\"c1\"># no longer use the underscore\n</span></code></pre></div></div>\n\n<p>You can also await futures directly:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">future</span>\n</code></pre></div></div>\n\n<p>You can use <code class=\"language-plaintext highlighter-rouge\">yield</code> instead of <code class=\"language-plaintext highlighter-rouge\">await</code> if you prefer Python 2.</p>\n\n<p>More information is available at <a href=\"https://distributed.readthedocs.org/en/latest/asynchronous.html\">https://distributed.readthedocs.org/en/latest/asynchronous.html</a>.</p>\n\n<h2 id=\"single-threaded-scheduler-moves-from-daskasync-to-dasklocal\">Single-threaded scheduler moves from dask.async to dask.local</h2>\n\n<p>The single-machine scheduler used to live in the <code class=\"language-plaintext highlighter-rouge\">dask.async</code> module.  With\n<code class=\"language-plaintext highlighter-rouge\">async</code> becoming a keyword since Python 3.5 we’re forced to rename this.  You\ncan now find the code in <code class=\"language-plaintext highlighter-rouge\">dask.local</code>.  This will particularly affect anyone\nwho was using the single-threaded scheduler, previously known as\n<code class=\"language-plaintext highlighter-rouge\">dask.async.get_sync</code>.  The term <code class=\"language-plaintext highlighter-rouge\">dask.get</code> can be used to reliably refer to\nthe single-threaded base scheduler across versions.</p>\n\n<ul>\n  <li><a href=\"https://github.com/dask/dask/issues/1834\">dask/dask #1834</a></li>\n  <li><a href=\"https://github.com/dask/dask/pull/2318\">dask/dask #2318</a></li>\n</ul>\n\n<h2 id=\"retired-the-distributedcollections-module\">Retired the distributed.collections module</h2>\n\n<p>Early blogposts referred to functions like <code class=\"language-plaintext highlighter-rouge\">futures_to_dask_array</code> which\nresided in the <code class=\"language-plaintext highlighter-rouge\">distributed.collections</code> module.  These have since been\nentirely replaced by better interactions between Futures and Delayed objects.\nThis module has been removed entirely.</p>\n\n<h2 id=\"always-create-new-directories-with-the-local-directory-flag\">Always create new directories with the –local-directory flag</h2>\n\n<p>Dask workers create a directory where they can place temporary files.\nTypically this goes into your operating system’s temporary directory (<code class=\"language-plaintext highlighter-rouge\">/tmp</code> on\nLinux and Mac).</p>\n\n<p>Some users on network file systems specify this directory explicitly with the\n<code class=\"language-plaintext highlighter-rouge\">dask-worker ... --local-directory</code> option, pointing to some other better place\nlike a local SSD drive.  Previously Dask would dump files into the provided\ndirectory.  Now it will create a new subdirectory and place files there.  This\ntends to be much more convenient for users on network file systems.</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>$ dask-worker scheduler-address:8786 --local-directory /scratch\n$ ls /scratch\nworker-1234/\n$ ls /scratch/worker-1234/\nuser-script.py disk-storage/ ...\n</code></pre></div></div>\n\n<h2 id=\"bagmap-no-longer-automatically-expands-tuples\">Bag.map no longer automatically expands tuples</h2>\n\n<p>Previously the <code class=\"language-plaintext highlighter-rouge\">map</code> method would inspect functions and automatically expand\ntuples to fill arguments:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"nn\">dask.bag</span> <span class=\"k\">as</span> <span class=\"n\">db</span>\n<span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">db</span><span class=\"p\">.</span><span class=\"n\">from_sequence</span><span class=\"p\">([(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">)])</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">b</span><span class=\"p\">.</span><span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"k\">return</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"n\">y</span><span class=\"p\">).</span><span class=\"n\">compute</span><span class=\"p\">()</span>\n<span class=\"p\">[</span><span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">22</span><span class=\"p\">,</span> <span class=\"mi\">33</span><span class=\"p\">]</span>\n</code></pre></div></div>\n\n<p>While convenient, this behavior gave rise to corner cases and stopped us from\nbeing able to support multi-bag mapping functions.  It has since been removed.\nAs an advantage though, you can now map two co-partitioned bags together.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">db</span><span class=\"p\">.</span><span class=\"n\">from_sequence</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">])</span>\n<span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">db</span><span class=\"p\">.</span><span class=\"n\">from_sequence</span><span class=\"p\">([</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">])</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">db</span><span class=\"p\">.</span><span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">).</span><span class=\"n\">compute</span><span class=\"p\">()</span>\n<span class=\"p\">[</span><span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">22</span><span class=\"p\">,</span> <span class=\"mi\">33</span><span class=\"p\">]</span>\n</code></pre></div></div>\n\n<ul>\n  <li><a href=\"https://github.com/dask/dask/pull/2339\">dask/dask #2339</a></li>\n</ul>\n\n<h2 id=\"styling\">Styling</h2>\n\n<p>Clients and Futures have nicer HTML reprs that show up in the Jupyter notebook.</p>\n\n<p><img src=\"https://mrocklin.github.io/blog/images/dask-client-future-html-repr.png\" width=\"100%\" /></p>\n\n<p>And the dashboard stays a decent width and has a new navigation bar with links\nto other dashboard pages.  This template is now consistently applied to all\ndashboard pages.</p>\n\n<p><img src=\"https://mrocklin.github.io/blog/images/dask-navbar.png\" width=\"100%\" /></p>\n\n<ul>\n  <li><a href=\"https://github.com/dask/dask/pull/2339\">dask/distributed #1136</a></li>\n  <li><a href=\"https://github.com/dask/distributed/pull/1126\">dask/distributed #1126</a></li>\n  <li><a href=\"https://github.com/dask/distributed/pull/1141\">dask/distributed #1141</a></li>\n</ul>\n\n<h2 id=\"multi-client-coordination\">Multi-client coordination</h2>\n\n<p>More primitives to help coordinate between multiple clients on the same cluster\nhave been added.  These include\n<a href=\"http://distributed.readthedocs.io/en/latest/api.html#distributed.Queue\">Queues</a>\nand shared\n<a href=\"http://distributed.readthedocs.io/en/latest/api.html#distributed.Variable\">Variables</a>\nfor futures.</p>\n\n<h2 id=\"joblib-performance-through-pre-scattering\">Joblib performance through pre-scattering</h2>\n\n<p>When using Dask to power <a href=\"https://pythonhosted.org/joblib/\">Joblib</a>\ncomputations (such as occur in Scikit-Learn) with the <code class=\"language-plaintext highlighter-rouge\">joblib.parallel_backend</code>\ncontext manager, you can now pre-scatter select data to all workers.  This can\nsignificantly speed up some scikit-learn computations by reducing repeated data\ntransfer.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"nn\">distributed.joblib</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.externals.joblib</span> <span class=\"kn\">import</span> <span class=\"n\">parallel_backend</span>\n\n<span class=\"c1\"># Serialize the training data only once to each worker\n</span><span class=\"k\">with</span> <span class=\"n\">parallel_backend</span><span class=\"p\">(</span><span class=\"s\">'dask.distributed'</span><span class=\"p\">,</span> <span class=\"n\">scheduler_host</span><span class=\"o\">=</span><span class=\"s\">'localhost:8786'</span><span class=\"p\">,</span>\n                      <span class=\"n\">scatter</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">digits</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">digits</span><span class=\"p\">.</span><span class=\"n\">target</span><span class=\"p\">]):</span>\n      <span class=\"n\">search</span><span class=\"p\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">digits</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">digits</span><span class=\"p\">.</span><span class=\"n\">target</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<ul>\n  <li><a href=\"https://github.com/dask/distributed/pull/1022\">dask/distributed #1022</a></li>\n</ul>\n\n<h2 id=\"other-array-improvements\">Other Array Improvements</h2>\n\n<ul>\n  <li>Filled out the dask.array.fft module</li>\n  <li>Added a basic dask.array.stats module with functions like <code class=\"language-plaintext highlighter-rouge\">chisquare</code></li>\n  <li>Support the <code class=\"language-plaintext highlighter-rouge\">@</code> matrix multiply operator</li>\n</ul>\n\n<h2 id=\"general-performance-and-stability\">General performance and stability</h2>\n\n<p>As usual, a number of bugs were identified and resolved and a number of\nperformance optimizations were implemented.  Thank you to all users and\ndevelopers who continue to help identify and implement areas for improvement.\nUsers should generally have a smoother experience.</p>\n\n<h2 id=\"removed-zmq-networking-backend\">Removed ZMQ networking backend</h2>\n\n<p>We have removed the experimental ZeroMQ networking backend.  This was not\nparticularly useful in practice.  However it was very effective in serving as\nan example while we were making our network communication layer pluggable with\ndifferent protocols.</p>\n\n<ul>\n  <li><a href=\"https://github.com/dask/distributed/pull/1160\">dask/distributed #1160</a></li>\n</ul>\n\n<h2 id=\"related-releases\">Related Releases</h2>\n\n<p>The following related projects have also been released recently and may be\nworth updating:</p>\n\n<ul>\n  <li>NumPy 1.13.0</li>\n  <li>Pandas 0.20.2</li>\n  <li>Bokeh 0.12.6</li>\n  <li>Fastparquet 0.1.0</li>\n  <li>S3FS 0.1.1</li>\n  <li>Cloudpickle 0.3.1 (pip)</li>\n  <li>lz4 0.10.0 (pip)</li>\n</ul>\n\n<h2 id=\"acknowledgements\">Acknowledgements</h2>\n\n<p>The following people contributed to the dask/dask repository since the 0.14.3 release\non May 5th:</p>\n\n<ul>\n  <li>Antoine Pitrou</li>\n  <li>Elliott Sales de Andrade</li>\n  <li>Ghislain Antony Vaillant</li>\n  <li>John A Kirkham</li>\n  <li>Jim Crist</li>\n  <li>Joseph Crail</li>\n  <li>Juan Nunez-Iglesias</li>\n  <li>Julien Lhermitte</li>\n  <li>Martin Durant</li>\n  <li>Matthew Rocklin</li>\n  <li>Samantha Hughes</li>\n  <li>Tom Augspurger</li>\n</ul>\n\n<p>The following people contributed to the dask/distributed repository since the\n1.16.2 release on May 5th:</p>\n\n<ul>\n  <li>A. Jesse Jiryu Davis</li>\n  <li>Antoine Pitrou</li>\n  <li>Brett Naul</li>\n  <li>Eugene Van den Bulke</li>\n  <li>Fabian Keller</li>\n  <li>Jim Crist</li>\n  <li>Krisztián Szűcs</li>\n  <li>Matthew Rocklin</li>\n  <li>Simon Perkins</li>\n  <li>Thomas Arildsen</li>\n  <li>Viacheslav Ostroukh</li>\n</ul>"
}