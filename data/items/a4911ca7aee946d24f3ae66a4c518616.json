{
  "title": "Introducing PyToolz",
  "link": "",
  "updated": "2013-10-17T00:00:00+00:00",
  "id": "https://mrocklin.github.io/blog/work/2013/10/17/Introducing-PyToolz",
  "content": "<p>The PyToolz project extends <code class=\"language-plaintext highlighter-rouge\">itertools</code> and <code class=\"language-plaintext highlighter-rouge\">functools</code> to provide a set of\nstandard functions for iterators, functions, and dictionaries.</p>\n\n<p><strong>tl;dr</strong> – PyToolz provides good functions for core data structures.  These functions work together well.  Here is a partial API:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>groupby, unique, isiterable, intersection, frequencies,\nget, concat, isdistinct, interleave, accumulate\nfirst, second, nth, take, drop, rest, last,\nmemoize, curry, compose, merge, assoc\n</code></pre></div></div>\n\n<h2 id=\"why\">Why?</h2>\n\n<p>Two years ago I started playing with functional programming.  One powerful\nfeature of functional languages oddly stuck out as having very little to do\nwith FP in general.  In particular modern functional languages often have\nreally killer standard libraries for dealing with iterators,\nfunctions, and dictionaries.  This standard function set doesn’t depend on\nmacros, monads, or any other mind bending language feature understandable only\nto LISP-ers or Haskell-ites.  This feature only requires higher order\nfunctions and lazy iterators, both of which Python does quite well.</p>\n\n<p>This is well known.  The libraries <code class=\"language-plaintext highlighter-rouge\">itertools</code> and <code class=\"language-plaintext highlighter-rouge\">functools</code> are supposed to\nfill this niche in the Python ecosystem.  Personally I’ve found these libraries\nto be useful but often incomplete (although the Python 3 versions are\nshowing signs of improvement.)  To fill these gaps we started hacking together\nthe libraries <code class=\"language-plaintext highlighter-rouge\">itertoolz</code> and <code class=\"language-plaintext highlighter-rouge\">functoolz</code> which were modeled largely after the\n<a href=\"http://clojure.org/cheatsheet\">Clojure standard library</a>.  These projects were\neventually merged into a single codebase, named <code class=\"language-plaintext highlighter-rouge\">toolz</code> which is available for\nyour hacking pleasure at\n<a href=\"http://github.com/pytoolz/toolz/\">http://github.com/pytoolz/toolz/</a>.</p>\n\n<h2 id=\"official\">Official</h2>\n\n<p>The official description of Toolz from <a href=\"http://toolz.readthedocs.org/\">the\ndocs</a> is as follows:</p>\n\n<p>The Toolz project provides a set of utility functions for iterators, functions,\nand dictionaries.  These functions are designed to interoperate well, forming\nthe building blocks of common data analytic operations.  They extend the\nstandard libraries <code class=\"language-plaintext highlighter-rouge\">itertools</code> and <code class=\"language-plaintext highlighter-rouge\">functools</code> and borrow heavily from the\nstandard libraries of contemporary functional languages.</p>\n\n<p>Toolz provides a suite of functions which have the following virtues:</p>\n\n<ul>\n  <li><strong>Composable:</strong> They interoperate due to their use of core data structures.</li>\n  <li><strong>Pure:</strong>  They don’t change their inputs or rely on external state.</li>\n  <li><strong>Lazy:</strong>  They don’t run until absolutely necessary, allowing them to\nsupport      large streaming data sets.</li>\n</ul>\n\n<p>This gives developers the power to write <em>powerful</em> programs to solve <em>complex\nproblems</em> with relatively <em>simple code</em> which is <em>easy to understand</em> without\nsacrificing <em>performance</em>.  Toolz enables this approach, commonly associated\nwith functional programming, within a natural Pythonic style suitable for most\ndevelopers.</p>\n\n<p>This project follows in the footsteps of the popular projects <code class=\"language-plaintext highlighter-rouge\">Underscore.js</code>\nfor JavaScript and and <code class=\"language-plaintext highlighter-rouge\">Enumerable</code> for Ruby.</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<p>Word counting is a common example used to show off data processing libraries.\nThe Python version that leverages <code class=\"language-plaintext highlighter-rouge\">toolz</code> demonstrates how the algorithm can be\ndeconstructed into the three operations of splitting, stemming, and frequency\ncounting:</p>\n\n<figure class=\"highlight\">\n  <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">toolz</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">def</span> <span class=\"nf\">stem</span><span class=\"p\">(</span><span class=\"n\">word</span><span class=\"p\">):</span>\n<span class=\"p\">...</span> <span class=\"s\">\"\"\" Stem word to primitive form \"\"\"</span>\n<span class=\"p\">...</span>     <span class=\"k\">return</span> <span class=\"n\">word</span><span class=\"p\">.</span><span class=\"n\">lower</span><span class=\"p\">().</span><span class=\"n\">rstrip</span><span class=\"p\">(</span><span class=\"s\">\",.!:;'-</span><span class=\"se\">\\\"</span><span class=\"s\">\"</span><span class=\"p\">).</span><span class=\"n\">lstrip</span><span class=\"p\">(</span><span class=\"s\">\"'</span><span class=\"se\">\\\"</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">wordcount</span> <span class=\"o\">=</span> <span class=\"n\">compose</span><span class=\"p\">(</span><span class=\"n\">frequencies</span><span class=\"p\">,</span> <span class=\"n\">partial</span><span class=\"p\">(</span><span class=\"nb\">map</span><span class=\"p\">,</span> <span class=\"n\">stem</span><span class=\"p\">),</span> <span class=\"nb\">str</span><span class=\"p\">.</span><span class=\"n\">split</span><span class=\"p\">)</span>  <span class=\"c1\"># Function\n</span><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">sentence</span> <span class=\"o\">=</span> <span class=\"s\">\"This cat jumped over this other cat!\"</span>                <span class=\"c1\"># Data\n</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">wordcount</span><span class=\"p\">(</span><span class=\"n\">sentence</span><span class=\"p\">)</span>\n<span class=\"p\">{</span><span class=\"s\">'this'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s\">'cat'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s\">'jumped'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s\">'over'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s\">'other'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">}</span></code></pre>\n</figure>\n\n<p>There are many solutions to the wordcounting problem.  What I like\nabout this solution is that it breaks down the wordcounting problem into a\ncomposition of three fundamental operations.</p>\n\n<ol>\n  <li>Splitting a text into words  –  (<code class=\"language-plaintext highlighter-rouge\">str.split</code>)</li>\n  <li>Stemming those words to a base form so that <code class=\"language-plaintext highlighter-rouge\">'Hello!'</code> is the same as <code class=\"language-plaintext highlighter-rouge\">'hello'</code>  –  (<code class=\"language-plaintext highlighter-rouge\">partial(map, stem)</code>)</li>\n  <li>Counting occurrences of each base word  – (<code class=\"language-plaintext highlighter-rouge\">frequencies</code>)</li>\n</ol>\n\n<p><code class=\"language-plaintext highlighter-rouge\">Toolz</code> provides both common operations for iterators (like <code class=\"language-plaintext highlighter-rouge\">frequencies</code> for\ncounting occurrences) and common operations for functions (like <code class=\"language-plaintext highlighter-rouge\">compose</code> for\nfunction composition).  Using these together, programmers can describe a\nnumber of data analytic solutions clearly and concisely.</p>\n\n<p>Here is another example performing analytics on the following directed graph</p>\n\n<p><img src=\"https://mrocklin.github.io/blog/images/toolz-example-graph.png\" width=\"40%\" align=\"center\" /></p>\n\n<figure class=\"highlight\">\n  <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">toolz.curried</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"n\">g</span> <span class=\"o\">=</span> <span class=\"s\">'abcdefg'</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">edges</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">),</span>\n<span class=\"p\">...</span>          <span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">f</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">f</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">g</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">g</span><span class=\"p\">)]</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># Nodes\n</span><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">concat</span><span class=\"p\">(</span><span class=\"n\">edges</span><span class=\"p\">))</span>\n<span class=\"p\">{</span><span class=\"s\">'a'</span><span class=\"p\">,</span> <span class=\"s\">'b'</span><span class=\"p\">,</span> <span class=\"s\">'c'</span><span class=\"p\">,</span> <span class=\"s\">'d'</span><span class=\"p\">,</span> <span class=\"s\">'e'</span><span class=\"p\">,</span> <span class=\"s\">'f'</span><span class=\"p\">,</span> <span class=\"s\">'g'</span><span class=\"p\">}</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># Out degree\n</span><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">countby</span><span class=\"p\">(</span><span class=\"n\">first</span><span class=\"p\">,</span> <span class=\"n\">edges</span><span class=\"p\">)</span>\n<span class=\"p\">{</span><span class=\"s\">'a'</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s\">'b'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s\">'d'</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"s\">'e'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s\">'f'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">}</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># In degree\n</span><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">countby</span><span class=\"p\">(</span><span class=\"n\">second</span><span class=\"p\">,</span> <span class=\"n\">edges</span><span class=\"p\">)</span>\n<span class=\"p\">{</span><span class=\"s\">'a'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s\">'b'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s\">'c'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s\">'d'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s\">'e'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s\">'f'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s\">'g'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">}</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># Out neighbors\n</span><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">valmap</span><span class=\"p\">(</span><span class=\"n\">compose</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">,</span> <span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"n\">second</span><span class=\"p\">)),</span>\n<span class=\"p\">...</span>        <span class=\"n\">groupby</span><span class=\"p\">(</span><span class=\"n\">first</span><span class=\"p\">,</span> <span class=\"n\">edges</span><span class=\"p\">))</span>\n<span class=\"p\">{</span><span class=\"s\">'a'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">'b'</span><span class=\"p\">,</span> <span class=\"s\">'c'</span><span class=\"p\">,</span> <span class=\"s\">'d'</span><span class=\"p\">],</span>\n <span class=\"s\">'b'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">'a'</span><span class=\"p\">],</span>\n <span class=\"s\">'d'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">'a'</span><span class=\"p\">,</span> <span class=\"s\">'e'</span><span class=\"p\">,</span> <span class=\"s\">'f'</span><span class=\"p\">,</span> <span class=\"s\">'g'</span><span class=\"p\">],</span>\n <span class=\"s\">'e'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">'f'</span><span class=\"p\">,</span> <span class=\"s\">'g'</span><span class=\"p\">],</span>\n <span class=\"s\">'f'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">'d'</span><span class=\"p\">]}</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># In neighbors\n</span><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">valmap</span><span class=\"p\">(</span><span class=\"n\">compose</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">,</span> <span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"n\">first</span><span class=\"p\">)),</span>\n<span class=\"p\">...</span>        <span class=\"n\">groupby</span><span class=\"p\">(</span><span class=\"n\">second</span><span class=\"p\">,</span> <span class=\"n\">edges</span><span class=\"p\">))</span>\n<span class=\"p\">{</span><span class=\"s\">'a'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">'b'</span><span class=\"p\">,</span> <span class=\"s\">'d'</span><span class=\"p\">],</span>\n <span class=\"s\">'b'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">'a'</span><span class=\"p\">],</span>\n <span class=\"s\">'c'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">'a'</span><span class=\"p\">],</span>\n <span class=\"s\">'d'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">'a'</span><span class=\"p\">,</span> <span class=\"s\">'f'</span><span class=\"p\">],</span>\n <span class=\"s\">'e'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">'d'</span><span class=\"p\">],</span>\n <span class=\"s\">'f'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">'e'</span><span class=\"p\">,</span> <span class=\"s\">'d'</span><span class=\"p\">],</span>\n <span class=\"s\">'g'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">'d'</span><span class=\"p\">,</span> <span class=\"s\">'e'</span><span class=\"p\">]}</span></code></pre>\n</figure>\n\n<p>Learning a small set of higher order functions like <code class=\"language-plaintext highlighter-rouge\">groupby</code>, <code class=\"language-plaintext highlighter-rouge\">map</code>, and\n<code class=\"language-plaintext highlighter-rouge\">valmap</code> gives a surprising amount of leverage over this kind of data.\nAdditionally the streaming nature of many (but not all) of the algorithms\nallows <code class=\"language-plaintext highlighter-rouge\">toolz</code> to perform well even on datasets that do not fit comfortably\ninto memory.</p>\n\n<p>I routinely process large network datasets at my work and find <code class=\"language-plaintext highlighter-rouge\">toolz</code> to be\ninvaluable in this context.</p>\n\n<h2 id=\"for-more-information\">For More Information</h2>\n\n<ul>\n  <li>\n    <p>Documentation is available at <a href=\"http://toolz.readthedocs.org/en/latest/\">http://toolz.readthedocs.org/</a></p>\n  </li>\n  <li>\n    <p>BSD licensed source code is available at <a href=\"http://github.com/pytoolz/toolz/\">http://github.com/pytoolz/toolz/</a></p>\n  </li>\n  <li>\n    <p>The API is thoroughly documented at <a href=\"http://toolz.readthedocs.org/en/latest/api.html\">http://toolz.readthedocs.org/en/latest/api.html</a></p>\n  </li>\n  <li>\n    <p><code class=\"language-plaintext highlighter-rouge\">toolz</code> is <code class=\"language-plaintext highlighter-rouge\">pip/easy_install</code>able.  It supports Python 2.6-3.3 and depends only on the standard library.</p>\n  </li>\n</ul>"
}