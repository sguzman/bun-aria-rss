{
  "title": "sqlite-utils: a nice way to import data into SQLite for analysis",
  "link": "",
  "updated": "2022-05-12T09:35:06+00:00",
  "id": "https://jvns.ca/blog/2022/05/12/sqlite-utils--a-nice-way-to-import-data-into-sqlite/",
  "content": "\n\n<p>Hello! This is a quick post about a nice tool I found recently called <a href=\"https://sqlite-utils.datasette.io\">sqlite-utils</a>, from the <a href=\"https://jvns.ca/#cool-computer-tools---features---ideas\">tools category</a>.</p>\n\n<p>Recently I wanted to do some basic data analysis using data from my Shopify\nstore. So I figured I&rsquo;d query the Shopify API and import my data into SQLite,\nand then I could make queries to get the graphs I want.</p>\n\n<p>But this seemed like a lot of boring work, like I&rsquo;d have to write a\nschema and write a Python program. So I hunted around for a solution, and I\nfound <code>sqlite-utils</code>, a tool designed to make it easy to import arbitrary data\ninto SQLite to do data analysis on the data.</p>\n\n<h3 id=\"sqlite-utils-automatically-generates-a-schema\">sqlite-utils automatically generates a schema</h3>\n\n<p>The Shopify data has about a billion fields and I really did not want to type\nout a schema for it. <code>sqlite-utils</code> solves this problem: if I have an array of\nJSON orders, I can create a new SQLite table with that data in it like this:</p>\n\n<pre><code>import sqlite_utils\n\norders = ... # (some code to get the `orders` array here)\n\ndb = sqlite_utils.Database('orders.db')\ndb['shopify_orders'].insert_all(orders)\n</code></pre>\n\n<h3 id=\"you-can-alter-the-schema-if-there-are-new-fields-with-alter\">you can alter the schema if there are new fields (with <code>alter</code>)</h3>\n\n<p>Next, I ran into a problem where on the 5th page of downloads, the JSON\ncontained a new field that I hadn&rsquo;t seen before.</p>\n\n<p>Luckily, <code>sqlite-utils</code> thought of that: there&rsquo;s an <code>alter</code> flag which will\nupdate the table&rsquo;s schema to include the new fields.  ```</p>\n\n<p>Here&rsquo;s what the code for that looks like</p>\n\n<pre><code>db['shopify_orders'].insert_all(orders, alter=True)\n</code></pre>\n\n<h3 id=\"you-can-deduplicate-existing-rows-with-upsert\">you can deduplicate existing rows (with <code>upsert</code>)</h3>\n\n<p>Next I ran into a problem where sometimes when doing a sync, I&rsquo;d download data\nfrom the API where some of it was new and some wasn&rsquo;t.</p>\n\n<p>So I wanted to do an &ldquo;upsert&rdquo; where it only created new rows if the item didn&rsquo;t\nalready exist. <code>sqlite-utils</code> also thought of this, and there&rsquo;s an <code>upsert</code>\nmethod.</p>\n\n<p>For this to work you have to specify the primary key. For me that was\n<code>pk=\"id\"</code>. Here&rsquo;s what my final code looks like:</p>\n\n<pre><code>db['shopify_orders'].upsert_all(\n    orders,\n    pk=\"id\",\n    alter=True\n)\n</code></pre>\n\n<h3 id=\"there-s-also-a-command-line-tool\">there&rsquo;s also a command line tool</h3>\n\n<p>I&rsquo;ve talked about using <code>sqlite-utils</code> as a library so far, but there&rsquo;s also a\ncommand line tool which is really useful.</p>\n\n<p>For example, this inserts the data from a <code>plants.csv</code> into a <code>plants</code> table:</p>\n\n<pre><code>sqlite-utils insert plants.db plants plants.csv --csv\n</code></pre>\n\n<h3 id=\"format-conversions\">format conversions</h3>\n\n<p>I haven&rsquo;t tried this yet, but here&rsquo;s a cool example from the help docs of how\nyou can do format conversions, like converting a string to a float:</p>\n\n<pre><code>sqlite-utils insert plants.db plants plants.csv --csv --convert '\nreturn {\n  \"name\": row[\"name\"].upper(),\n  \"latitude\": float(row[\"latitude\"]),\n  \"longitude\": float(row[\"longitude\"]),\n}'\n</code></pre>\n\n<p>This seems really useful for CSVs, where by default it&rsquo;ll often interpret numeric\ndata as strings if you don&rsquo;t do this conversions.</p>\n\n<h3 id=\"metabase-seems-nice-too\">metabase seems nice too</h3>\n\n<p>Once I had all the data in SQLite, I needed a way to draw graphs with it. I\nwanted some dashboards, so I ended up using <a href=\"https://www.metabase.com/\">Metabase</a>, an open source business\nintelligence tool. I found it very straightforward and it seems like a really\neasy way to turn SQL queries into graphs.</p>\n\n<p>This whole setup (sqlite-utils + metabase + SQL) feels a lot easier to use than\nmy previous setup, where I had a custom Flask website that used plotly and\npandas to draw graphs.</p>\n\n<h3 id=\"that-s-all\">that&rsquo;s all!</h3>\n\n<p>I was really delighted by <code>sqlite-utils</code>, it was super easy to use and it did\neverything I wanted.</p>\n"
}