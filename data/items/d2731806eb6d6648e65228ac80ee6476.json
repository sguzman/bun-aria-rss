{
  "title": "To Flourish or to Perish",
  "link": "",
  "published": "2021-01-03T00:00:00-08:00",
  "updated": "2021-01-03T00:00:00-08:00",
  "author": {
    "name": "Dustin McIntosh"
  },
  "id": "tag:efavdb.com,2021-01-03:/to-flourish-or-to-perish",
  "summary": "<p>In this post, I explore some basic math behind the World Wandering Dudes framework previously introduced in <a href=\"https://www.efavdb.com/world-wandering-dudes\">this post</a>.</p>\n<p>To briefly reintroduce the system: imagine a field, a 2-D square lattice of <span class=\"math\">\\(M\\)</span> sites with food distributed randomly at a density <span class=\"math\">\\(\\rho_{food}\\)</span>.  Creatures wander across the field taking <span class=\"math\">\\(N …</span></p>",
  "content": "<p>In this post, I explore some basic math behind the World Wandering Dudes framework previously introduced in <a href=\"https://www.efavdb.com/world-wandering-dudes\">this post</a>.</p>\n<p>To briefly reintroduce the system: imagine a field, a 2-D square lattice of <span class=\"math\">\\(M\\)</span> sites with food distributed randomly at a density <span class=\"math\">\\(\\rho_{food}\\)</span>.  Creatures wander across the field taking <span class=\"math\">\\(N\\)</span> steps per day via random walk, gathering any food they come across.  At the end of each day, if a creature has no food it dies, if a creature has exactly 1 food it survives, and if a creature has 2 or more food it survives and reproduces.  The food will then resprout at random&nbsp;locations.</p>\n<p>For the purposes of this post, to make the modeling simpler, we introduce the following&nbsp;properties:</p>\n<ul>\n<li>\n<p>All food spoils at the end of each day before resprouting - creatures cannot store it and it does not accumulate on the&nbsp;field.</p>\n</li>\n<li>\n<p>All creatures teleport to a random field position at the end of each day, preventing creatures from consistently competing for food with their&nbsp;children.</p>\n</li>\n<li>\n<p>Periodic boundary conditions on the field with <span class=\"math\">\\(M \\gg N\\)</span> such that creatures do not wander “around the world” within a single&nbsp;day.</p>\n</li>\n</ul>\n<p>First, let’s imagine a single creature alone on the field. After taking <span class=\"math\">\\(N\\)</span> steps, the creature will explore <span class=\"math\">\\(N_{unique}\\)</span> unique sites on the lattice, where <span class=\"math\">\\(\\langle N_{unique} \\rangle \\sim N^\\beta\\)</span>, with <span class=\"math\">\\(\\beta \\approx 0.87\\)</span> (see <a href=\"https://www.efavdb.com/random-walk-scaling\">this post</a> for more details). The number of food that this creature will gather by the end of the day is <span class=\"math\">\\(x \\sim \\text{Binom}(N_{unique}, \\rho_{food})\\)</span>. We’ll represent the probability the creature gets <span class=\"math\">\\(x\\)</span> food&nbsp;as</p>\n<div class=\"math\">\\begin{eqnarray} \\tag{1} \\label{binom}\np_x = {N_{unique} \\choose x} {\\rho_{food}}^x (1-\\rho_{food})^{N_{unique}-x}. \\\\\n\\end{eqnarray}</div>\n<p>For very small <span class=\"math\">\\(N\\)</span>, <span class=\"math\">\\(p_0\\)</span> is large and <span class=\"math\">\\(p_{2+} = 1 - p_0 - p_1\\)</span> is small - the creature is likely to perish without reproducing.  The larger <span class=\"math\">\\(N\\)</span>, the larger <span class=\"math\">\\(N_{unique}\\)</span>, resulting in smaller <span class=\"math\">\\(p_0\\)</span> and larger <span class=\"math\">\\(p_{2+}\\)</span>. There is a specific <span class=\"math\">\\(N\\)</span> for which <span class=\"math\">\\(p_0 = p_{2+}\\)</span> - at this critical point <span class=\"math\">\\(N_c\\)</span>, the creature is equally likely to reproduce and to die. For <span class=\"math\">\\(\\rho_{food} = 0.03\\)</span>, the relevant probabilities along with this critical point are plotted&nbsp;below.</p>\n<p align=\"center\">\n     <img src=\"images/binomial_random_walk.png\">\n</p>\n\n<p>A couple of interesting&nbsp;notes:</p>\n<ul>\n<li>\n<p>At <span class=\"math\">\\(N_c\\)</span>, the creature is most likely to get exactly 1 food and barely survive, it dies or reproduces with equal probability <span class=\"math\">\\(\\approx 0.315 &lt; 1/3\\)</span>.</p>\n</li>\n<li>\n<p><span class=\"math\">\\(N_{unique, c} &gt; 1/\\rho_{food}\\)</span> - the creature must be, on average, gathering more than 1 food in order for it to not die&nbsp;off.</p>\n</li>\n</ul>\n<p>We can reproduce <span class=\"math\">\\(N_c\\)</span> from the simulation framework as well.  We ran numerous simulations, holding <span class=\"math\">\\(\\rho_{food} = 0.03\\)</span> constant and varying <span class=\"math\">\\(N\\)</span> for a few creatures (code <a href=\"https://github.com/dustinmcintosh/world_wandering_dudes/blob/master/scripts/lifetime_study.py\">here</a>). For each <span class=\"math\">\\(N\\)</span>, we plot the fraction of simulations that still had creatures after 200&nbsp;days:</p>\n<p align=\"center\">\n     <img src=\"images/frac_survive.png\">\n</p>\n\n<p>For sufficiently large fields, the transition from long-term survival to population collapse is sharp at <span class=\"math\">\\(N_c(\\rho_{food} = 0.03) \\approx 72\\)</span> as predicted by the binomial probabilities above, creatures that walk longer than this survive and multiply, creatures that walk shorter, die off.  Smaller fields show propensity for population collapse at even higher <span class=\"math\">\\(N\\)</span> which can be attributed to inherent instability of relatively small populations (<span class=\"math\">\\(n &lt; 10\\)</span> or&nbsp;so).</p>\n<p>We can extend this understanding to a population of <span class=\"math\">\\(n\\)</span> creatures: Based on the rules outlined at the beginning of the post, the number of creatures on day <span class=\"math\">\\(i+1\\)</span>, <span class=\"math\">\\(n_{i+1}\\)</span>, will&nbsp;be:</p>\n<div class=\"math\">\\begin{eqnarray} \\tag{2} \\label{dt}\nn_{i+1} = n_{i} - n_{i}(x=0) + n_{i}(x \\geq 2), \\\\\n\\end{eqnarray}</div>\n<p>where <span class=\"math\">\\(n_{i}(x=j)\\)</span> is the number of creatures getting <span class=\"math\">\\(j\\)</span> food in the previous day (creatures tomorrow = creatures today - deaths today + births today).  In equilibrium, <span class=\"math\">\\(\\langle n_{i+1} \\rangle = \\langle n_i \\rangle\\)</span>, implying <span class=\"math\">\\(\\langle n_{i}(x=0) \\rangle = \\langle n_{i}(x&gt;=2) \\rangle\\)</span> (births=deaths).  With well-separated creatures, we’ll&nbsp;find</p>\n<div class=\"math\">\\begin{eqnarray}\n\\langle n_{i}(x=0) \\rangle &amp;=&amp; \\langle n_{i} \\rangle p_0 \\\\\n\\langle n_{i}(x \\geq 2) \\rangle &amp;=&amp; \\langle n_{i} \\rangle p_{2+}. \\tag{3} \\label{birthdeath}\n\\end{eqnarray}</div>\n<p>Again, equilibrium is only achieved at <span class=\"math\">\\(p_0 = p_{2+}\\)</span> as discussed&nbsp;above.</p>\n<p>However, if the creatures are thriving, they will multiply to the point that they are no longer in isolation and start to “steal” each other&#8217;s food.  This will then curb the population’s growth. To explore this, for simulations with creatures that survived their first 200 days, we look at the average number of creatures on the field from day 100 to 200 (to isolate the equilibrium condition).  We plot <span class=\"math\">\\(\\langle n \\rangle / \\rho_{food} M\\)</span> (average creatures as a fraction of the daily food sprout&nbsp;rate):</p>\n<p align=\"center\">\n     <img src=\"images/equil_n.png\">\n</p>\n\n<p>The trend generally makes sense, creatures with longer walks gather more food and can maintain larger populations. Near the critical point <span class=\"math\">\\(N_c\\)</span>, the stable populations are very low relative to the amount of food on the field, but they are stable (for sufficiently large fields).  In this case, interactions between creatures are rare occurrences, but there are enough to keep the population from growing at the very slow rate that it would if all its creatures were in isolation (<span class=\"math\">\\(p_{2+}\\)</span> is only marginally larger here than <span class=\"math\">\\(p_0\\)</span>).</p>\n<p>The remainder of this post is a discussion of the theoretical line in the figure&nbsp;above.</p>\n<p>In order to approximate the impact of creature food “stealing” on the equilibrium population level, we must return to equations (\\ref{birthdeath}) and add a term to account for these interactions to each.  Some creatures that would have otherwise reproduced will lose this ability due to displaced food.  Likewise, some creatures that would have barely survived will die.  As an approximation, we’ll only model the impact on creatures that would have gotten exactly 1 (or 2) food as these creatures are the most at risk of losing the ability to survive (or reproduce) as a result of food displacement.  The probability of the average creature having an interaction with one of the other creatures scales as <span class=\"math\">\\(    n_{i} (\\langle N_{unique} \\rangle/M)\\)</span> (the number of other creatures times their relative footprint on the field), So, we can modify equations (\\ref{birthdeath}), reducing births and supplementing&nbsp;deaths:</p>\n<div class=\"math\">\\begin{eqnarray}\n\\langle n_{i}(x=0) \\rangle &amp;=&amp; \\langle n_{i} \\rangle  (p_0 + p_1 \\frac{A \\langle N_{unique} \\rangle}{M} \\langle n_{i} \\rangle) \\\\\n\\langle n_{i}(x \\geq 2) \\rangle &amp;=&amp; \\langle n_{i} \\rangle (p_{2+} - p_2 \\frac{A \\langle N_{unique} \\rangle}{M} \\langle n_{i} \\rangle) , \\tag{4} \\label{birthdeathint}\n\\end{eqnarray}</div>\n<p>where <span class=\"math\">\\(A\\)</span> is some constant of proportionality having to do with some of the geometry of the system and the fraction of food displaced as a result of the average&nbsp;interaction.</p>\n<p>Again, equilibrium will be reached when the two quantities in equations (\\ref{birthdeathint}) are equal, which leads to a unique solution for the average number of creatures at&nbsp;equilibrium:</p>\n<div class=\"math\">\\begin{eqnarray} \\tag{5} \\label{equilN}\n\\frac{\\langle n_{i} \\rangle}{\\rho_{food} M} = \\frac{1}{A \\rho_{food}}\\frac{p_{2+}-p_0}{p_1 + p_2}.\n\\end{eqnarray}</div>\n<p>The line in the figure above is for <span class=\"math\">\\(A = 3/4\\)</span>, which was a fit by eye. Not shown here, but we have confirmed that this prediction (with <span class=\"math\">\\(A = 3/4\\)</span>) works reasonbly well for other values of <span class=\"math\">\\(\\rho_{food}\\)</span> as&nbsp;well.</p>\n<p>This discussed model has some&nbsp;limitations:</p>\n<ul>\n<li>\n<p>It considers only creatures with exactly 1(2) food to be at risk of dying (failing to reproduce) as a result of interactions, while actually creatures that get 3+ food without interactions have a chance to have enough stolen to not reproduce or even to not even&nbsp;survive.</p>\n</li>\n<li>\n<p>It fails to consider 3+ -body interactions (a creature with a trajectory overlapping with 2 or more other&nbsp;creatures).</p>\n</li>\n<li>\n<p>It neglects the distribution of <span class=\"math\">\\(N_{unique}\\)</span>, essentially mapping <span class=\"math\">\\(N_{unique} \\rightarrow \\langle N_{unique} \\rangle\\)</span>.</p>\n</li>\n</ul>\n<p>The model is thus not correct, but simple and captures the core of the problem. It reminds me vaguely of the Flory approximation in polymer physics (see discussion <a href=\"https://ethz.ch/content/dam/ethz/special-interest/mavt/process-engineering/macro-dam/documents/NetworkGels_Lecture6.pdf\">here</a>).</p>\n<script type=\"text/javascript\">if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {\n    var align = \"center\",\n        indent = \"0em\",\n        linebreak = \"false\";\n\n    if (false) {\n        align = (screen.width < 768) ? \"left\" : align;\n        indent = (screen.width < 768) ? \"0em\" : indent;\n        linebreak = (screen.width < 768) ? 'true' : linebreak;\n    }\n\n    var mathjaxscript = document.createElement('script');\n    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';\n    mathjaxscript.type = 'text/javascript';\n    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';\n\n    var configscript = document.createElement('script');\n    configscript.type = 'text/x-mathjax-config';\n    configscript[(window.opera ? \"innerHTML\" : \"text\")] =\n        \"MathJax.Hub.Config({\" +\n        \"    config: ['MMLorHTML.js'],\" +\n        \"    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" +\n        \"    jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" +\n        \"    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" +\n        \"    displayAlign: '\"+ align +\"',\" +\n        \"    displayIndent: '\"+ indent +\"',\" +\n        \"    showMathMenu: true,\" +\n        \"    messageStyle: 'normal',\" +\n        \"    tex2jax: { \" +\n        \"        inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" +\n        \"        displayMath: [ ['$$','$$'] ],\" +\n        \"        processEscapes: true,\" +\n        \"        preview: 'TeX',\" +\n        \"    }, \" +\n        \"    'HTML-CSS': { \" +\n        \"        availableFonts: ['STIX', 'TeX'],\" +\n        \"        preferredFont: 'STIX',\" +\n        \"        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" +\n        \"        linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" +\n        \"    }, \" +\n        \"}); \" +\n        \"if ('default' !== 'default') {\" +\n            \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" +\n                \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" +\n                \"VARIANT['normal'].fonts.unshift('MathJax_default');\" +\n                \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" +\n                \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" +\n                \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" +\n            \"});\" +\n            \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" +\n                \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" +\n                \"VARIANT['normal'].fonts.unshift('MathJax_default');\" +\n                \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" +\n                \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" +\n                \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" +\n            \"});\" +\n        \"}\";\n\n    (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript);\n    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);\n}\n</script>",
  "category": [
    "",
    "",
    "",
    ""
  ]
}