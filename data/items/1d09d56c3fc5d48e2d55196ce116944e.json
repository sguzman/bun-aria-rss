{
  "title": "BRUNO: A Deep Recurrent Model for Exchangeable Data",
  "description": "<!--more-->\n\n<p>This post gives a short overview of our recent NeurIPS paper:</p>\n\n<p><a href=\"https://arxiv.org/abs/1802.07535\">BRUNO: A Deep Recurrent Model for Exchangeable Data</a> <br />by I. Korshunova, J. Degrave, F. Huszár, Y. Gal, A. Gretton, and J. Dambre</p>\n\n<p>where we presented a <em>provably exchangeable</em> model whose:</p>\n\n<ul>\n  <li>predictive distribution \\(p(x_n \\mid x_{1:n-1})\\) is tractable to evaluate and can be sampled from with a linear complexity in the number of data points we condition on</li>\n  <li>training does not require variational approximations</li>\n  <li>memory complexity is constant thanks to its recurrent nature, i.e. after an observation \\(x_i\\) is processed, it can be discarded from memory.</li>\n</ul>\n\n<h2 id=\"motivation\">Motivation</h2>\n\n<p>We will present two ways to motivate why BRUNO is an interesting model.</p>\n\n<h3 id=\"1-exchangeability-and-bayesian-computations\">1. Exchangeability and Bayesian computations</h3>\n\n<p>We started from a problem posed in <a href=\"https://www.inference.vc/exchangeable-processes-via-neural-networks/\">this inFERENCe blog post</a>: is it possible to design an exchangeable RNN? <a href=\"https://www.inference.vc/\">Ferenc</a> explains it very well so please go ahead and read his post. Below we will briefly repeat main definitions and how exchangeability is connected to Bayesian inference.</p>\n\n<p>A sequence of random variables \\(x_1, x_2, x_3, \\dots\\) is said to be exchangeable if for all \\(n\\) and all permutations \\(\\pi\\)</p>\n\n\\[p(x_1,\\dots , x_n) = p(x_{\\pi(1)}, \\dots, x_{\\pi(n)}),\\]\n\n<p>meaning that the joint probability remains the same under any permutation of the sequence. <!---So the order in which you observe the sequence does not change the probability of the sequence.--></p>\n\n<p>Obviously, i.i.d. random variables are exchangeable. However, the converse is false: exchangeable random variables can be correlated.</p>\n\n<blockquote>\n  <p>One textbook example of an exchangeable sequence is a sequence of variables \\(x_1,\\dots , x_n\\), which jointly have a multivariate normal distribution \\(\\mathcal{N}_n(\\mathbf 0, \\mathbf \\Sigma)\\) with a <em>compound symmetry</em> – or we will simply call it <em>exchangeable</em> – covariance structure:</p>\n\n\\[\\mathbf \\Sigma = \\begin{pmatrix}\n    v &amp; \\rho &amp; \\ldots &amp; \\rho &amp; \\rho \\\\\n    \\rho &amp; v &amp; \\ldots &amp; \\rho &amp; \\rho \\\\\n    \\vdots &amp; \\vdots &amp; \\ldots &amp; \\vdots &amp; \\vdots \\\\\n    \\rho &amp; \\rho &amp; \\ldots &amp; v &amp; \\rho \\\\\n    \\rho &amp; \\rho &amp; \\ldots &amp; \\rho &amp; v\n\\end{pmatrix},\\]\n\n  <p>where \\(0 \\le \\rho &lt; v\\).</p>\n</blockquote>\n\n<p><strong>De Finetti’s theorem</strong> states that every exchangeable process (an infinite sequence of random variables) satisfies the following:</p>\n\n\\[p(x_1,\\dots,x_n)= \\int p(\\theta) \\prod_{i=1}^n{p(x_i|\\theta)d\\theta}, \\quad\\quad\\quad(1)\\]\n\n<p>where \\(\\theta\\) is some parameter conditioned on which \\(x_i\\)’s become i.i.d.</p>\n\n<blockquote>\n  <p>In the Gaussian example above, one can show that \\(x_1,\\dots, x_n\\) are i.i.d. with \\(x_i \\sim \\mathcal N (\\theta, v − \\rho)\\) conditioned on \\(\\theta \\sim \\mathcal N (0, \\rho)\\).</p>\n</blockquote>\n\n<p>By conditioning both sides of Eq.1 on \\(x_{1:n-1}\\), de Finetti’s theorem can be written in terms of predictive distributions:</p>\n\n\\[p(x_n \\mid x_{1:n-1})= \\int p(x_{n}\\mid \\theta)p(\\theta \\mid x_{1:n-1})d\\theta.\\]\n\n<p>This is exactly the posterior predictive distribution, where we marginalised the likelihood of \\(x_n\\) given \\(\\theta\\) with respect to the posterior distribution of \\(\\theta\\). A possible interpretation of this result can be the following: having a predictive distribution from an exchangeable process is implicitly the same as doing an exact inference in <em>some</em> Bayesian model. Thus, if we have an exchangeable process, we might not know what the corresponding Bayesian model is, but we can be sure it exists. This is important since in what follows we will lose track of the Bayesian model, but by maintaining the exchangeability property, we can be sure that there is one.</p>\n\n<h3 id=\"2-meta-learning\">2. Meta-learning</h3>\n\n<p>Besides of the Bayesian beauty, there are practical reasons for why we want to model exchangeable sequences. Many meta-learning problems can be framed as modelling unordered sets of objects which have some characteristic in common. For instance, in few-shot generative modelling, one might want to generate images that are somehow similar to the ones we already have. More examples are to follow in the experiments part of this post.</p>\n\n<h2 id=\"bruno-model\">BRUNO model</h2>\n\n<p>Remember the example where \\(x_1,\\dots , x_n \\sim \\mathcal{N}_n(\\mathbf 0, \\mathbf \\Sigma)\\) and \\(\\mathbf \\Sigma\\) has an exchangeable structure? Essentially, this defines a very basic Gaussian process (GP) where its kernel is restricted to be exchangeable. As shown in the paper, this simplicity allows <strong>(a)</strong> to derive recursive updates for the parameters of predictive distributions, and <strong>(b)</strong> to scale the process as \\(O(N)\\) instead of \\(O(N^3)\\) as in a common case.</p>\n\n<p>While this clearly is an exchangeable model, it is way too simple to model complex observations, say when every \\(x_i\\) is an image. Thus, we need some deep learning power. Namely, we are looking for a mapping \\(\\,f: \\mathcal{X} \\rightarrow \\mathcal{Z}\\) from an intricate space \\(\\mathcal{X} \\in \\mathbb R^D\\) to a simple latent space \\(\\mathcal{Z} \\in \\mathbb R^D\\). Then in this simple space, one could indeed make use of exchangeable GPs. Such a mapping, however, has to be bijective (that’s why both \\(\\mathcal X\\) and \\(\\mathcal Z\\) have to live in \\(\\mathbb R^D\\)). This would guarantee that exchangeable GP in space \\(\\mathcal{Z}\\) corresponds to some exchangeable process in space \\(\\mathcal{X}\\) and the whole Bayesian reasoning of de Finetti holds for sequences in \\(\\mathcal{X}\\).</p>\n\n<p>Luckily, there is a family of invertible neural nets architectures called <a href=\"https://arxiv.org/abs/1505.05770\">Normalizing Flows</a> that are used to transform simple densities \\(p(z)\\) into complex densities \\(p(x)\\) or the other way around. For our purpose, <a href=\"https://arxiv.org/abs/1605.08803\">Real NVP</a> suited most since <strong>(a)</strong> its inverse mapping \\(\\,f^{-1}(\\mathbf z)\\) is fast to compute, which is useful when generating samples <sup id=\"fnref:1\" role=\"doc-noteref\"><a href=\"#fn:1\" class=\"footnote\" rel=\"footnote\">1</a></sup>, and <strong>(b)</strong> computing the Jacobian \\(\\partial f(\\mathbf x)/ \\partial \\mathbf x\\) is also fast, so we can quicky evaluate \\(p(\\mathbf x)\\) from \\(p(\\mathbf z)\\) using the change of variable formula:</p>\n\n\\[p(\\mathbf x) = p(\\mathbf z) \\Bigg| \\det \\frac{\\partial f(\\mathbf x)}{\\partial \\mathbf x}\\Bigg|.\\]\n\n<p>Essentially, those are all the ingredients! A powerful bijection \\(f: \\mathcal{X} \\rightarrow \\mathcal{Z}\\) plus \\(D\\) independent exchangeable GPs <sup id=\"fnref:2\" role=\"doc-noteref\"><a href=\"#fn:2\" class=\"footnote\" rel=\"footnote\">2</a></sup> in the latent space \\(\\mathcal Z\\)  make a nice exchangeable model which we called BRUNO: <strong>B</strong>ayesian <strong>R</strong>ec<strong>U</strong>rrent <strong>N</strong>eural m<strong>O</strong>del (TBH, we just wanted to name it after Bruno de Finetti). Here is a schematic:</p>\n\n<p><img src=\"/img/bruno/schematic_gp.png\" alt=\"\" /></p>\n\n<p>Because we have the predictive probabilities at every step, we can train BRUNO using MLE, where we maximise the likelihood of the inputs with respect to the Real NVP parameters and parameters of GPs kernels: \\(\\rho\\) and \\(v\\) for every of the \\(D\\) latent dimensions.</p>\n\n<p>We train BRUNO on a dataset of i.i.d. sequences \\(\\{(\\mathbf x_1, \\mathbf x_2, .., \\mathbf x_n)_i\\}_{i=1..M}\\), where we assume that observations within a sequence are exchangeable. This assumption proved reasonable for sequences where observations belong to the same class. In this case, BRUNO should learn some class-specific visual features and also learn that those are correlated across the sequence. It appears to work well for the tasks of few-shot generation and classification, which we will look into next.</p>\n\n<!---You can see this optimization process as the model looking for the features  in an image which allow it to generalize across sequences of images. Rather than a regular Real NVP, which is looking for a mapping to normalize the data, here the Real NVP is looking for features which correlate across the sequence and estimates the parameters for the variance and the correlation of those features. So this Real NVP has a harder task to fulfill than to just be a bijection between two distributions.-->\n\n<h2 id=\"experiments\">Experiments</h2>\n\n<p><a href=\"https://github.com/brendenlake/omniglot\">Omniglot</a> has become a standard dataset for testing few-shot learning algorithms. It is commonly referred to as the “transpose” of MNIST since it has a large number of character classes with only 20 examples per class. So if we train BRUNO on the same-class sequences from Omniglot’s train set, we can easily test its few-shot performance on the unseen characters.</p>\n\n<p>Below are a few examples of generated samples conditionally on an input sequence of unseen characters. The cool thing about BRUNO is that it doesn’t need any retraining on classes it has never seen. We just need to feed BRUNO a test sequence of an arbitrary length and get our <em>n</em>-shot generated images as a result of sampling from a conditional distribution \\(p(\\mathbf x_{n+1} \\mid \\mathbf x_{1:n})\\).</p>\n\n<table>\n  <tbody>\n    <tr>\n      <td><img src=\"/img/bruno/sample_test_197_0.png\" alt=\"\" /></td>\n      <td><img src=\"/img/bruno/sample_test_382_0.png\" alt=\"\" /></td>\n    </tr>\n    <tr>\n      <td><img src=\"/img/bruno/sample_test_168_0.png\" alt=\"\" /></td>\n      <td><img src=\"/img/bruno/sample_test_323_0.png\" alt=\"\" /></td>\n    </tr>\n  </tbody>\n</table>\n\n<p><sup> In each subplot, an input sequence is shown in the top row and samples are in the bottom 4 rows. Every column with samples contains 4 samples from the predictive distribution conditioned on the input images up to and including that column. That is, the 1st column shows samples from the prior \\(p(\\mathbf x)\\) when no input image is given; the 2nd column shows samples from \\(p(\\mathbf x \\mid \\mathbf x_1)\\) where \\(\\mathbf x_1\\) is the 1st input image in the top row and so on.</sup></p>\n\n<hr />\n\n<p>We can use the very same model for image classification in a <em>n</em>-shot, <em>k</em>-way setup. From the test accuracies below, we see that BRUNO is doing okay, but not as good as <a href=\"https://arxiv.org/pdf/1606.04080.pdf\">Matching Nets</a>. That’s no surprise since BRUNO was trained as a generative model and may have wasted a lot of statistical power on modelling aspects of the data which are irrelevant for the classification task. However, if we now finetune BRUNO with a discriminative objective, i.e. maximising the likelihood of correct labels in few-shot classification episodes, its performance becomes a lot better.</p>\n\n<table>\n  <thead>\n    <tr>\n      <th>Model</th>\n      <th style=\"text-align: center\">n=1,k=5</th>\n      <th style=\"text-align: center\">n=5,k=5</th>\n      <th style=\"text-align: center\">n=1,k=20</th>\n      <th style=\"text-align: center\">n=5,k=20</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><a href=\"https://arxiv.org/pdf/1606.04080.pdf\">Matching Nets</a></td>\n      <td style=\"text-align: center\">98.1%</td>\n      <td style=\"text-align: center\">98.9%</td>\n      <td style=\"text-align: center\">93.8%</td>\n      <td style=\"text-align: center\">98.5%</td>\n    </tr>\n    <tr>\n      <td>BRUNO</td>\n      <td style=\"text-align: center\">86.3%</td>\n      <td style=\"text-align: center\">95.6%</td>\n      <td style=\"text-align: center\">69.2%</td>\n      <td style=\"text-align: center\">87.7%</td>\n    </tr>\n    <tr>\n      <td>BRUNO finetuned</td>\n      <td style=\"text-align: center\">97.1%</td>\n      <td style=\"text-align: center\">99.4%</td>\n      <td style=\"text-align: center\">91.3%</td>\n      <td style=\"text-align: center\">97.8%</td>\n    </tr>\n    <tr>\n      <td> </td>\n      <td style=\"text-align: center\"> </td>\n      <td style=\"text-align: center\"> </td>\n      <td style=\"text-align: center\"> </td>\n      <td style=\"text-align: center\"> </td>\n    </tr>\n  </tbody>\n</table>\n\n<p>Another application for BRUNO can be set anomaly detection in a stream of incoming data. To give an example, we trained BRUNO on <em>even</em> MNIST digits and tested on <em>odd</em> digits <sup id=\"fnref:3\" role=\"doc-noteref\"><a href=\"#fn:3\" class=\"footnote\" rel=\"footnote\">3</a></sup>. Below is a plot of how the probabilistic score \\(\\frac{p(\\mathbf x \\mid \\mathbf x_{1:n})}{p(\\mathbf x)}\\) evolves when we feed a stream of images into BRUNO, and we see that it picks up the weird looking ones. So if you ever need a low-compute and low-memory app for set anomaly detection that works on inputs it wasn’t trained on, BRUNO might be a way to go.</p>\n\n<center><img src=\"/img/bruno/anomaly.png\" width=\"500\" /></center>\n\n<p><sup>Evolution of the score as the model sees more images from a sequence of digit <code class=\"language-plaintext highlighter-rouge\">1</code> with one image of digit <code class=\"language-plaintext highlighter-rouge\">7</code>. Identified outliers are marked with vertical lines and plotted on the right in  the order from top to bottom. Note that the model was trained only on images of even digits.</sup></p>\n\n<hr />\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>Exchangeability has recently started gaining more attention in deep learning community and hopefully will go a long way. Some relevant papers include <a href=\"https://arxiv.org/abs/1703.06114\">Deep Sets</a>, <a href=\"https://arxiv.org/abs/1606.02185\">Neural Statistician</a> and <a href=\"https://arxiv.org/abs/1807.01613\">Neural Processes</a>. Compared to them, BRUNO has a bit different flavour: it is an exchangeable process with an intricate analytic form <sup id=\"fnref:4\" role=\"doc-noteref\"><a href=\"#fn:4\" class=\"footnote\" rel=\"footnote\">4</a></sup> defined in the space of high dimensional, complex observations, e.g. images. However, because of a \\(\\mathcal GP\\) + Real NVP construction, this processs is easy to work with and it performs well in practice, so we hope somebody will find it useful.</p>\n\n<h3 id=\"code\">Code</h3>\n\n<p>Our code is available on github: <a href=\"https://github.com/IraKorshunova/bruno\">github.com/IraKorshunova/bruno</a></p>\n\n<h3 id=\"notes\">Notes</h3>\n\n<div class=\"footnotes\" role=\"doc-endnotes\">\n  <ol>\n    <li id=\"fn:1\" role=\"doc-endnote\">\n      <p>If you can be patient with sampling, then autoregressive models such as <a href=\"https://arxiv.org/abs/1705.07057\">MAF</a> might perform better. We haven’t tried them since Real NVP was already doing well. Neither we’ve tried <a href=\"https://arxiv.org/abs/1807.03039\">Glow</a> or continuous  normalizing flows like <a href=\"https://arxiv.org/abs/1810.01367\">FFJORD</a>, which are likely to be much better. <a href=\"#fnref:1\" class=\"reversefootnote\" role=\"doc-backlink\">&#8617;</a></p>\n    </li>\n    <li id=\"fn:2\" role=\"doc-endnote\">\n      <p>We actually used Student-t process (TP), which is a generalisation of a GP. There is not much difference and both seem to work, though we found TPs easier to train. <a href=\"#fnref:2\" class=\"reversefootnote\" role=\"doc-backlink\">&#8617;</a></p>\n    </li>\n    <li id=\"fn:3\" role=\"doc-endnote\">\n      <p>In all our experiments we used image data, however BRUNO can be used with any other data modality. It all depends on whether one uses convolutions or dense layers inside of Real NVP. <a href=\"#fnref:3\" class=\"reversefootnote\" role=\"doc-backlink\">&#8617;</a></p>\n    </li>\n    <li id=\"fn:4\" role=\"doc-endnote\">\n      <p>If we somehow get an analytic form of Jacobians from a tensorflow graph, then it would be possible to recover the form of distributions in \\(\\mathcal X\\). Likely, it wouldn’t help us much. <a href=\"#fnref:4\" class=\"reversefootnote\" role=\"doc-backlink\">&#8617;</a></p>\n    </li>\n  </ol>\n</div>",
  "pubDate": "Mon, 17 Sep 2018 12:00:00 +0000",
  "link": "http://irakorshunova.github.io/blog/bruno",
  "guid": "http://irakorshunova.github.io/blog/bruno"
}