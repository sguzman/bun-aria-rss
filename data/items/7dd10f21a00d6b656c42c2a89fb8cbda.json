{
  "title": "Intelligent document processing with AWS AI services in the insurance industry: Part 1",
  "link": "https://aws.amazon.com/blogs/machine-learning/part-1-intelligent-document-processing-with-aws-ai-services-in-the-insurance-industry/",
  "dc:creator": "Chinmayee Rane",
  "pubDate": "Thu, 03 Nov 2022 19:04:26 +0000",
  "category": [
    "Amazon Comprehend",
    "Amazon Comprehend Medical",
    "Amazon Machine Learning",
    "Amazon Textract",
    "Artificial Intelligence",
    "Intermediate (200)"
  ],
  "guid": "6f30150a718204796d09af8ea1531a1aa0ffaaba",
  "description": "The goal of intelligent document processing (IDP) is to help your organization make faster and more accurate decisions by applying AI to process your paperwork. This two-part series highlights the AWS AI technologies that insurance companies can use to speed up their business processes. These AI technologies can be used across insurance use cases such […]",
  "content:encoded": "<p>The goal of intelligent document processing (IDP) is to help your organization make faster and more accurate decisions by applying AI to process your paperwork. This two-part series highlights the AWS AI technologies that insurance companies can use to speed up their business processes. These AI technologies can be used across insurance use cases such as claims, underwriting, customer correspondence, contracts, or handling disputes resolutions. This series focuses on a claims processing use case in the insurance industry; for more information about the fundamental concepts of the AWS IDP solution, refer to the following <a href=\"https://aws.amazon.com/blogs/machine-learning/part-1-intelligent-document-processing-with-aws-ai-services/\">two-part series</a>.</p> \n<p>Claims processing consists of multiple checkpoints in a workflow that is required to review, verify authenticity, and determine the correct financial responsibility to adjudicate a claim. Insurance companies go through these checkpoints for claims before adjudication of the claims. If a claim successfully goes through all these checkpoints without issues, the insurance company approves it and processes any payment. However, they may require additional supporting information to adjudicate a claim. This claims processing process is often manual, making it expensive, error-prone, and time-consuming. Insurance customers can automate this process using AWS AI services to automate the document processing pipeline for claims processing.</p> \n<p>In this two-part series, we take you through how you can automate and intelligently process documents at scale using AWS AI services for an insurance claims processing use case.</p> \n<table style=\"border-color: #ff9900;height: 140px\" border=\"2px\" width=\"718\" cellpadding=\"10px\"> \n <tbody> \n  <tr> \n   <td><strong>Intelligent document processing with AWS AI and Analytics services in the insurance industry</strong><p></p> \n    <ul> \n     <li><strong>Part 1: Classification and extraction of documents</strong></li> \n     <li><a href=\"https://aws.amazon.com/blogs/machine-learning/part-2-intelligent-document-processing-with-aws-ai-and-analytics-services-in-the-insurance-industry/\" target=\"_blank\" rel=\"noopener\">Part 2: Data enrichment and insights</a></li> \n    </ul> </td> \n  </tr> \n </tbody> \n</table> \n<h2>Solution overview</h2> \n<p>The following diagram represents each stage that we typically see in an IDP pipeline. We walk through each of these stages and how they connect to the steps involved in a claims application process, starting from when an application is submitted, to investigating and closing the application. In this post, we cover the technical details of the data capture, classification, and extraction stages. In <a href=\"https://aws.amazon.com/blogs/machine-learning/part-2-intellige%E2%80%A6surance-industry/\">Part 2</a>, we expand the document extraction stage and continue to document enrichment, review and verification, and extend the solution to provide analytics and visualizations for a claims fraud use case.</p> \n<p><img loading=\"lazy\" class=\"alignnone wp-image-43818\" src=\"https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2022/10/05/insurance-phases-idp.png\" alt=\"The different phases of intelligent document processing in insurance industry\" width=\"800\" height=\"221\"></p> \n<p>The following architecture diagram shows the different AWS services used during the phases of the IDP pipeline according to different stages of a claims processing application.</p> \n<p><img loading=\"lazy\" class=\"alignnone wp-image-43819\" src=\"https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2022/10/05/IDP_Insurance_Architecture.png\" alt=\"IDP architecture diagram\" width=\"800\" height=\"514\"></p> \n<p>The solution uses the following key services:</p> \n<ul> \n <li><a href=\"https://aws.amazon.com/textract/\">Amazon Textract</a> is a machine learning (ML) service that automatically extracts text, handwriting, and data from scanned documents. It goes beyond simple optical character recognition (OCR) to identify, understand, and extract data from forms and tables. Amazon Textract uses ML to read and process any type of document, accurately extracting text, handwriting, tables, and other data with no manual effort.</li> \n <li><a href=\"https://aws.amazon.com/comprehend/\">Amazon Comprehend</a> is a natural language processing (NLP) service that uses ML to extract insights from text. Amazon Comprehend can detect entities such as person, location, date, quantity, and more. It can also detect the dominant language, personally identifiable information (PII) information, and classify documents into their relevant class.</li> \n <li><a href=\"https://aws.amazon.com/augmented-ai/\">Amazon Augmented AI</a> (Amazon A2I) is an ML service that makes it easy to build the workflows required for human review. Amazon A2I brings human review to all developers, removing the undifferentiated heavy lifting associated with building human review systems or managing large numbers of human reviewers. Amazon A2I integrates both with <a href=\"https://docs.aws.amazon.com/textract/latest/dg/a2i-textract.html\">Amazon Textract</a> and <a href=\"https://github.com/aws-samples/amazon-a2i-sample-jupyter-notebooks/blob/master/Amazon Augmented AI (A2I) and Comprehend DetectSentiment.ipynb\">Amazon Comprehend</a> to provide the ability to introduce human review or validation within the IDP workflow.</li> \n</ul> \n<h2>Prerequisites</h2> \n<p>In the following sections, we walk through the different services relating to the first three phases of the architecture, i.e., the data capture, classification and extraction phases.</p> \n<p>Refer to our <a href=\"https://github.com/aws-samples/aws-ai-intelligent-document-processing/tree/main/industry/insurance\">GitHub repository</a> for full code samples along with the document samples in the claims processing packet.</p> \n<h2>Data capture phase</h2> \n<p>Claims and its supporting documents can come through various channels, such as fax, email, an admin portal, and more. You can store these documents in a highly scalable and durable storage like <a href=\"https://aws.amazon.com/s3/\">Amazon Simple Storage Service</a> (Amazon S3). These documents can be of various types, such as PDF, JPEG, PNG, TIFF, and more. Documents can come in various formats and layouts, and can come from different channels to the data store.</p> \n<h2>Classification phase</h2> \n<p>In the document classification stage, we can combine Amazon Comprehend with Amazon Textract to convert text to document context to classify the documents that are stored in the data capture stage. We can then use custom classification in Amazon Comprehend to organize documents into classes that we defined in the claims processing packet. Custom classification is also helpful for automating the document verification process and identifying any missing documents from the packet. There are two steps in custom classification, as shown in the architecture diagram:</p> \n<ol> \n <li>Extract text using Amazon Textract from all the documents in the data storage to prepare training data for the custom classifier.</li> \n <li>Train an Amazon Comprehend custom classification model (also called a <em>document</em> <em>classifier</em>) to recognize the classes of interest based on the text content.</li> \n</ol> \n<p><img loading=\"lazy\" class=\"alignnone wp-image-43916\" src=\"https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2022/10/06/Insurance_doc_classify.png\" alt=\"Document classification of insurance claims packet\" width=\"800\" height=\"370\"></p> \n<p>After the Amazon Comprehend custom classification model is trained, we can use the real-time endpoint to classify documents. Amazon Comprehend returns all classes of documents with a confidence score linked to each class in an array of key-value pairs (<code>Doc_name</code> – <code>Confidence_score</code>). We recommend going through the detailed document classification sample code on <a href=\"https://github.com/aws-samples/aws-ai-intelligent-document-processing/blob/main/industry/insurance/01-document-classification.ipynb\">GitHub</a>.</p> \n<h2>Extraction phase</h2> \n<p>In the extraction phase, we extract data from documents using Amazon Textract and Amazon Comprehend. For this post, use the following sample documents in the claims processing packet: a Center of Medicaid and Medicare Services (CMS)-1500 claim form, driver’s license and insurance ID, and invoice.</p> \n<h3>Extract data from a CMS-1500 claim form</h3> \n<p>The CMS-1500 form is the standard claim form used by a non-institutional provider or supplier to bill Medicare carriers.</p> \n<p>It’s important to process the CMS-1500 form accurately, otherwise it can slow down the claims process or delay payment by the carrier. With the Amazon Textract <code>AnalyzeDocument</code> API, we can speed up the extraction process with higher accuracy to extract text from documents in order to understand further insights within the claim form. The following is sample document of a CMS-1500 claim form.</p> \n<p><img loading=\"lazy\" class=\"alignnone wp-image-43919 size-full\" src=\"https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2022/10/06/CMS1500.png\" alt=\"A CMS1500 Claim form\" width=\"2550\" height=\"3300\"></p> \n<p>We now use the <code>AnalyzeDocument</code> API to extract two <code>FeatureTypes</code>, <code>FORMS</code> and <code>TABLES</code>, from the document:</p> \n<div class=\"hide-language\"> \n <pre><code class=\"lang-python\">from IPython.display import display, JSON\nform_resp = textract.analyze_document(Document={'S3Object':{\"Bucket\": data_bucket, \"Name\": cms_key}}, FeatureTypes=['FORMS', 'TABLES'])\n\n# print tables\nprint(get_string(textract_json=form_resp, output_type=[Textract_Pretty_Print.TABLES], table_format=Pretty_Print_Table_Format.fancy_grid))\n\n# using our constructed helper function - values returned as a dictionary\n\ndisplay(JSON(getformkeyvalue(form_resp), root=\"Claim Form\"))\n</code></pre> \n</div> \n<p>The following results have been shortened for better readability. For more detailed information, see our <a href=\"https://github.com/aws-samples/aws-ai-intelligent-document-processing/blob/main/industry/insurance/02-document-extraction.ipynb\">GitHub repo.</a></p> \n<p>The <code>FORMS</code> extraction is identified as key-value pairs.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2022/10/18/img1-intelligent-document-processing-1.jpg\"><img loading=\"lazy\" class=\"alignnone wp-image-44372 size-full\" style=\"margin: 10px 0px 10px 0px;border: 1px solid #CCCCCC\" src=\"https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2022/10/18/img1-intelligent-document-processing-1.jpg\" alt=\"\" width=\"500\" height=\"413\"></a></p> \n<p>The <code>TABLES</code> extraction contains cells, merged cells, and column headers within a detected table in the claim form.</p> \n<p><img loading=\"lazy\" class=\"alignnone wp-image-43922 size-full\" src=\"https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2022/10/06/ML-10224-TableExtraction.png\" alt=\"Tables extraction from CMS1500 form\" width=\"1460\" height=\"582\"></p> \n<h3>Extract data from ID documents</h3> \n<p>For identity documents like an insurance ID, which can have different layouts, we can use the Amazon Textract <code>AnalyzeDocument</code> API. We use the <code>FeatureType</code> <code>FORMS</code> as the configuration for the <code>AnalyzeDocument</code> API to extract the key-value pairs from the insurance ID (see the following sample):</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2022/10/18/insurance_card-1.png\"><img loading=\"lazy\" class=\"wp-image-44370 size-full aligncenter\" src=\"https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2022/10/18/insurance_card-1.png\" alt=\"\" width=\"500\" height=\"343\"></a></p> \n<p>Run the following code:</p> \n<div class=\"hide-language\"> \n <pre><code class=\"lang-python\">ins_form_resp = textract.analyze_document(Document={'S3Object':{\"Bucket\": data_bucket, \"Name\": ins_card_key}}, FeatureTypes=['FORMS'])\n\n# using our constructed helper function - values returned as a dictionary\n\ndisplay(JSON(getformkeyvalue(ins_form_resp), root=\"Insurance card\"))\n</code></pre> \n</div> \n<p>We get the key-value pairs in the result array, as shown in the following screenshot.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2022/10/18/Screen-Shot-2022-10-06-at-5.26.36-PM-1.png\"><img loading=\"lazy\" class=\"alignnone wp-image-44369 size-full\" style=\"margin: 10px 0px 10px 0px;border: 1px solid #CCCCCC\" src=\"https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2022/10/18/Screen-Shot-2022-10-06-at-5.26.36-PM-1.png\" alt=\"\" width=\"300\" height=\"221\"></a></p> \n<p>For ID documents like a US driver’s license or US passport, Amazon Textract provides specialized support to automatically extract key terms without the need for templates or formats, unlike what we saw earlier for the insurance ID example. With the <code>AnalyzeID</code> API, businesses can quickly and accurately extract information from ID documents that have different templates or formats. The <code>AnalyzeID</code> API returns two categories of data types:</p> \n<ul> \n <li>Key-value pairs available on the ID such as date of birth, date of issue, ID number, class, and restrictions</li> \n <li>Implied fields on the document that may not have explicit keys associated with them, such as name, address, and issuer</li> \n</ul> \n<p>We use the following sample US driver’s license from our claims processing packet.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2022/10/18/ML-10224-DriversLicense-2.png\"><img loading=\"lazy\" class=\"alignnone wp-image-44368 size-full\" src=\"https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2022/10/18/ML-10224-DriversLicense-2.png\" alt=\"\" width=\"500\" height=\"316\"></a></p> \n<p>Run the following code:</p> \n<div class=\"hide-language\"> \n <pre><code class=\"lang-python\">ID_resp = textract.analyze_id(DocumentPages=[{'S3Object':{\"Bucket\": data_bucket, \"Name\": key}}])</code></pre> \n</div> \n<div class=\"hide-language\"> \n <pre><code class=\"lang-python\"># once again using the textract response parser\nfrom trp.trp2_analyzeid import TAnalyzeIdDocument, TAnalyzeIdDocumentSchema\n\nt_doc = TAnalyzeIdDocumentSchema().load(ID_resp)\n\nlist_of_results = t_doc.get_values_as_list()\nprint(tabulate([x[1:3] for x in list_of_results]))\n</code></pre> \n</div> \n<p>The following screenshot shows our result.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2022/10/18/Screen-Shot-2022-10-06-at-5.38.23-PM-1.png\"><img loading=\"lazy\" class=\"alignnone wp-image-44367 size-full\" style=\"margin: 10px 0px 10px 0px;border: 1px solid #CCCCCC\" src=\"https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2022/10/18/Screen-Shot-2022-10-06-at-5.38.23-PM-1.png\" alt=\"\" width=\"500\" height=\"553\"></a></p> \n<p>From the results screenshot, you can observe that certain keys are presented that were not in the driver’s license itself. For example, <code>Veteran</code> is not a key found in the license; however, it’s a pre-populated key-value that <code>AnalyzeID</code> supports, due to the differences found in licenses between states.</p> \n<h3>Extract data from invoices and receipts</h3> \n<p>Similar to the <code>AnalyzeID</code> API, the <a href=\"https://docs.aws.amazon.com/textract/latest/dg/invoices-receipts.html\"><code>AnalyzeExpense</code></a> API provides specialized support for invoices and receipts to extract relevant information such as vendor name, subtotal and total amounts, and more from any format of invoice documents. You don’t need any template or configuration for extraction. Amazon Textract uses ML to understand the context of ambiguous invoices as well as receipts.</p> \n<p>The following is a sample medical insurance invoice.</p> \n<p><img loading=\"lazy\" class=\"alignnone wp-image-43927 size-full\" src=\"https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2022/10/06/insurance_invoice.png\" alt=\"A sample of insurance invoice\" width=\"1275\" height=\"1650\"></p> \n<p>We use the <code>AnalyzeExpense</code> API to see a list of standardized fields. Fields that aren’t recognized as standard fields are categorized as <code>OTHER</code>:</p> \n<div class=\"hide-language\"> \n <pre><code class=\"lang-python\">expense_resp = textract.analyze_expense(Document={'S3Object':{\"Bucket\": data_bucket, \"Name\": invc_key}})\n\n# print invoice summary\n\nprint(get_expensesummary_string(textract_json=expense_resp, table_format=Pretty_Print_Table_Format.fancy_grid))\n\n# print invoice line items\n\nprint(get_expenselineitemgroups_string(textract_json=expense_resp, table_format=Pretty_Print_Table_Format.fancy_grid))\n</code></pre> \n</div> \n<p>We get the following list of fields as key-value pairs (see screenshot on the left) and the entire row of individual line items purchased (see screenshot on the right) in the results.</p> \n<table> \n <tbody> \n  <tr> \n   <td><a href=\"https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2022/10/18/ML-10224-KVExtraction-1.png\"><img loading=\"lazy\" class=\"alignnone wp-image-44366 size-full\" src=\"https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2022/10/18/ML-10224-KVExtraction-1.png\" alt=\"\" width=\"500\" height=\"708\"></a></td> \n   <td><a href=\"https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2022/10/18/Screen-Shot-2022-09-01-at-9.46.01-AM-2.png\"><img loading=\"lazy\" class=\"alignnone wp-image-44365 size-full\" src=\"https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2022/10/18/Screen-Shot-2022-09-01-at-9.46.01-AM-2.png\" alt=\"\" width=\"500\" height=\"123\"></a></td> \n  </tr> \n </tbody> \n</table> \n<h2>Conclusion</h2> \n<p>In this post, we showcased the common challenges in claims processing, and how we can use AWS AI services to automate an intelligent document processing pipeline to automatically adjudicate a claim. We saw how to classify documents into various document classes using an Amazon Comprehend custom classifier, and how to use Amazon Textract to extract unstructured, semi-structured, structured, and specialized document types.</p> \n<p>In <a href=\"https://aws.amazon.com/blogs/machine-learning/part-2-intellige%E2%80%A6surance-industry/\">Part 2</a>, we expand on the extraction phase with Amazon Textract. We also use Amazon Comprehend pre-defined entities and custom entities to enrich the data, and show how to extend the IDP pipeline to integrate with analytics and visualization services for further processing.</p> \n<p>We recommend reviewing the security sections of the <a href=\"https://docs.aws.amazon.com/textract/latest/dg/security.html\">Amazon Textract,</a> <a href=\"https://docs.aws.amazon.com/comprehend/latest/dg/comp-security.html\">Amazon Comprehend,</a> and <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/a2i-permissions-security.html\">Amazon A2I</a> documentation and following the guidelines provided. To learn more about the pricing of the solution, review the pricing details of <a href=\"https://aws.amazon.com/textract/pricing/\">Amazon Textract,</a> <a href=\"https://aws.amazon.com/comprehend/pricing/\">Amazon Comprehend</a>, and <a href=\"https://aws.amazon.com/augmented-ai/pricing/\">Amazon A2I</a>.</p> \n<hr> \n<h3>About the Authors</h3> \n<p style=\"clear: both\"><strong><a href=\"https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2022/08/02/chinrane-1.png\"><img loading=\"lazy\" class=\"size-full wp-image-40413 alignleft\" src=\"https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2022/08/02/chinrane-1.png\" alt=\"\" width=\"100\" height=\"127\"></a></strong><strong>Chinmayee Rane</strong> is an AI/ML Specialist Solutions Architect at Amazon Web Services. She is passionate about applied mathematics and machine learning. She focuses on designing intelligent document processing solutions for AWS customers. Outside of work, she enjoys salsa and bachata dancing.</p> \n<p style=\"clear: both\"><strong><a href=\"https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2022/08/02/sonalsah-1.png\"><br> <img loading=\"lazy\" class=\"size-full wp-image-40412 alignleft\" src=\"https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2022/08/02/sonalsah-1.png\" alt=\"\" width=\"100\" height=\"130\"></a></strong><strong>Sonali Sahu</strong> is leading the Intelligent Document Processing AI/ML Solutions Architect team at Amazon Web Services. She is a passionate technophile and enjoys working with customers to solve complex problems using innovation. Her core area of focus is artificial intelligence and machine learning for intelligent document processing.</p> \n<p style=\"clear: both\"><strong><a href=\"https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2022/10/07/timcon.png\" data-wp-editing=\"1\"><br> <img loading=\"lazy\" class=\"wp-image-43948 alignleft\" src=\"https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2022/10/07/timcon.png\" alt=\"\" width=\"100\" height=\"100\"></a></strong><strong>Tim Condello</strong> is a Senior AI/ML Specialist Solutions Architect at Amazon Web Services. His focus is natural language processing and computer vision. Tim enjoys taking customer ideas and turning them into scalable solutions.</p>"
}