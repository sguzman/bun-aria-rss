{
  "title": "Introductory Machine Learning Terminology with Food",
  "link": "https://www.becomingadatascientist.com/2017/07/17/introductory-machine-learning-terminology-with-food/",
  "comments": "https://www.becomingadatascientist.com/2017/07/17/introductory-machine-learning-terminology-with-food/#comments",
  "pubDate": "Tue, 18 Jul 2017 02:48:16 +0000",
  "dc:creator": "Renee",
  "category": [
    "resources",
    "candy",
    "data science",
    "food",
    "learning",
    "machine learning for beginners"
  ],
  "guid": "https://www.becomingadatascientist.com/?p=1454",
  "description": "I was just pondering some ways to discuss machine learning terminology in a way that would be accessible to beginners, and figured I'd share my semi-thought-out ideas here. I'm sure this has been done before, but here are some common machine learning terms couched in the language of cooking and food. Feedback welcome!\n\n<strong>Machine Learning Algorithm</strong>\n\nA machine learning algorithm is a list of instructions to guide a computer to analyze some data to find patterns, and works much like a cooking recipe. You put some data in (ingredients), do some stuff to it (preparation and cooking), and then evaluate how the results compare to what you were hoping to accomplish (photo in your cookbook and expectations of taste).",
  "content:encoded": "<p>I was just pondering some ways to discuss machine learning terminology in a way that would be accessible to beginners, and figured I&#8217;d share my semi-thought-out ideas here. I&#8217;m sure this has been done before, but here are some common machine learning terms couched in the language of cooking and food. Feedback welcome!</p>\n<p><strong>Machine Learning Algorithm</strong></p>\n<p>A machine learning algorithm is a list of instructions to guide a computer to analyze some data to find patterns, and works much like a cooking recipe. You put some data in (ingredients), do some stuff to it (preparation and cooking), and then evaluate how the results compare to what you were hoping to accomplish (photo in your cookbook and expectations of taste).</p>\n<p><strong>Input Columns (Features) -> Ingredients</strong></p>\n<p>Features are basically columns in your spreadsheet that you choose to input into an algorithm, and they&#8217;re like ingredients in a recipe. If you&#8217;re going to make cookies, you&#8217;ll need some ingredients like eggs, flour, and chocolate. These ingredients get stirred together and then baked, and the output is a (hopefully) edible cookie. </p>\n<p><strong>Feature Engineering -> Ingredient Prep</strong></p>\n<p>Some ingredients, like eggs, aren&#8217;t added to the recipe as-is. You have to crack the egg, sometimes separate the whites from the yolk, and maybe beat the egg before adding it to your recipe. The same goes for the features, or columns in your spreadsheet. For instance, you might have a column that contains categorical values in text form, and some algorithms will require you to first transform that column into a bunch of yes/no columns that &#8220;encode&#8221; the feature into binary values. If, for instance, you have category values listed in your original column like &#8220;category A&#8221;, &#8220;category B&#8221;, and &#8220;category C&#8221;, you might convert the 1 column to 3 columns &#8211; one for each category &#8211; and instead of the spreadsheet cells containing words, they now contain a 1 or a 0 in each category column indicating &#8220;yes&#8221; or &#8220;no&#8221; for each category. An algorithm that couldn&#8217;t understand the phrase &#8220;category A&#8221;, can now understand it as a value of &#8220;1&#8221; in the Category A column.</p>\n<p><strong>Number of Input Rows / Volume of Data -> Batch Size</strong></p>\n<p>Changing the number of rows of data in your spreadsheet (each row containing a bunch of &#8220;features&#8221; &#8211; or columns) is like scaling the measure of ingredients in your recipe. If you want a double batch of cookies, you can add twice as much of each ingredient into your bowl, and get twice the cookie dough. If you only have half of the amount of flour called for by the recipe, you can halve all of the other ingredients to get half of a batch. You have to beware of modifying how many rows of data you input into your algorithm, though. Like in cooking, adding or removing rows can sometimes have an unexpected effect on the output. If you split a bowl of cookie dough in half, but almost all of the chocolate chips end up in one half and almost none are in the other half, you won&#8217;t get two identical batches of cookies! The distribution of values contained in the rows of data you input into your machine learning algorithm impacts the resulting model.</p>\n<p><strong>Clean CSV -> Pre-prepared meal kit</strong></p>\n<p>In data science courses, you often start assignments with a pre-cleaned spreadsheet. This is like receiving a meal kit delivered to your door. You get the correct amount of each ingredient, and they are often already prepared or just need a little chopping. This is great for learning, but don&#8217;t be surprised when you get to a real-world scenario and you are expected to shop for the ingredients, hope they are available for purchase at your local store, make some substitutes, and then figure out how each ingredient you bought needs to be transformed in order for the recipe to work! It makes sense to start out as a short-order cook before you learn the skills and art to being a chef, so there&#8217;s nothing wrong with using &#8220;meal kits&#8221; to start out!</p>\n<p><strong>Type of Model/Algorithm -> Cooking method</strong></p>\n<p>Now that you have all of your ingredients prepared, what do you do with them? If you&#8217;re cooking, that batter could be baked into a cake, or fried into a donut. If you&#8217;re doing data science, your spreadsheet could be run through a variety of algorithms to generate different types of models, to see how each turns out. This is called &#8220;model selection&#8221;. You might use linear regression or a decision tree, for instance. Just like with cooking, different &#8220;ingredients&#8221; (features) work better with certain cooking styles (types of models). And some people &#8211; machine learning researchers &#8211; are exploring entirely new methods of &#8220;cooking&#8221;!</p>\n<p><strong>Model Parameters -> Cooking settings</strong></p>\n<p>Now that you&#8217;ve chosen to bake your cookies, at what temperature do you bake them at? And for how long? This depends on what you are trying to optimize for. Do the people eating the cookies like them more caramelized and don&#8217;t mind them being a little burnt around the edges? Or do they like them soft with no dark spots? Some of that is affected by the ingredients you put in, but it&#8217;s important to find a good oven temperature and cooking time combination. In machine learning, this is called &#8220;parameter tuning&#8221; or &#8220;hyperparameter optimization&#8221;. There are methods for working through different combinations of parameters (settings) to find the best one for the outcome you want to achieve. Note that if you change the ingredients (features), the settings that worked with your last batch of dough may not be the best for your new one. And a good temperature for frying might not be a good temperature for baking!</p>\n<p>Also note that I mentioned you have to choose what to optimize for. If you have an audience that has different cookie preferences, you can tweak your model toward one or the other, or try to balance between the two. There are always human choices made in &#8220;machine learning&#8221;, and every choice is a trade-off! (same goes for choosing which rows and columns to input into your model, not just parameters)</p>\n<p><strong>Output Features / Target Variable -> Ideal Cooked Food Outcome</strong></p>\n<p>We talked about input features (ingredients), but why are we doing all this &#8220;cooking&#8221;? We&#8217;re trying to achieve some sort of target, which we mentioned a bit earlier when talking about parameter tuning. How do we know what target we&#8217;re trying to hit? In supervised machine learning, you have some rows where the output is known, so you can train your model. This is like having a photo of the finished product in a cookbook, and having tasted what a good outcome of the recipe tastes like. You have a target toward which you are trying to optimize. If you say it is &#8220;too salty&#8221;, you&#8217;re comparing the saltiness of your result to some ideal saltiness. That ideal is the &#8220;target&#8221;, and in supervised machine learning, is encoded in the &#8220;output feature&#8221; &#8211; a column in your spreadsheet that contains a value for each row that identifies how that row should be categorized by the resulting model, or what number the algorithm should generate.</p>\n<p><strong>Model Evaluation -> Tasting/Looking at Result, Comparing to Recipe Expectations</strong></p>\n<p>Once you&#8217;ve run your features through a model (cooked your ingredients with a particular method and settings), you need to evaluate how well the results turned out. In cooking, you&#8217;ll often have some taste-testers and you can also compare how the final plated dish looks when compared to the photo in the cookbook. As mentioned before, you can optimize for different things. You might make a dish that looks beautiful &#8211; exactly like the photo! &#8211; but tastes horrible. (Maybe they staged the photo with fake food and no one can make it look like that with the given recipe!)</p>\n<p>So, if your &#8220;evaluation metric&#8221; of taste is way off, you go back and tweak your ingredients (features), ingredient prep (feature engineering), parameters (oven settings), and batch size (volume of data and which rows are included) until your outcome meets your chosen ideal. Or, if you think the outcome is just fine, it might be the taste testers (metrics) that need rethinking!</p>\n<p>&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8211;</p>\n<p><em><strong>Types of machine learning algorithms.</strong></em></p>\n<p>These next few examples get away from the &#8220;recipe&#8221; example I&#8217;ve been using so far, but still use food to attempt to explain the concepts.</p>\n<p>Imagine that you have a big bowl of trail mix. Your job is to teach a child to separate the trail mix into its components. This is like taking a big spreadsheet of data, and figuring out how to group the rows into categories. Each piece in the trail mix corresponds to one row in your spreadsheet.</p>\n<p>You notice that the bowl of trail mix contains nuts, candy, and pieces of cereal. You point out each ingredient to the child, explaining &#8220;see, this is a peanut, a type of nut&#8221;, &#8220;this is an M&#038;M, a type of candy&#8221;, tell the child to separate them out into piles, and walk away. (Don&#8217;t be surprised if some of your &#8220;data&#8221; is missing after this project!)</p>\n<p><strong>CLASSIFICATION</strong></p>\n<p>You come back and see that the child has created two piles: One has peanuts, cashews, and almonds in it. The other has M&#038;Ms, chex, cheerios, and raisins in it. This child understood the task as a classification task, and acted as a &#8220;nut or not&#8221; classifier! He heard you describing the items as nuts, candy, or cereal, ignored the specifics, and decided to do a simple separation into 2 piles: one with nuts, one with non-nuts. </p>\n<p>I could go into detail here about confusion matrices and evaluating this child&#8217;s performance, categorizing true positives (nuts correctly identified as nuts), false positives (non-nuts identified as nuts), true negatives (non-nuts identified as non-nuts), and false negatives (nuts identified as non-nuts), but getting into the details of these measures would make this article way longer than it needs to be, and I&#8217;m just trying to cover the high-level types of algorithms.</p>\n<p>This &#8220;nut classification&#8221; algorithm worked because the child identified features of the items that made certain pieces nut-like (hard, brown, salty), and features that made them non-nut-like, and categorized them into piles based on how nut-like they were.</p>\n<p>Even though you left the child unsupervised during this process, the type of machine learning is called &#8220;<strong>supervised learning</strong>&#8220;, because you first told the kid what each item was, so he had &#8220;labels&#8221; for what was a nut and what was not a nut, to learn which features went with each classification.</p>\n<p><strong>CLUSTERING</strong></p>\n<p>You call over another child. You decide not to tell her anything about the items in the bowl, but tell her that she needs to divide the items in the bowl into piles, hoping she&#8217;ll separate them into nuts, candy, and &#8220;other&#8221;, but not telling her that. You want her to do more than just the &#8220;nut or not&#8221; that the first kid did, so you tell her to divide them into at least 3 groups. <strong>Because you didn&#8217;t tell her information about how to categorize each item in the bowl, this is an example of &#8220;unsupervised learning&#8221;</strong> (even if you watch her do it).</p>\n<p>She stares at the bowl for a while, and you leave her alone to do the task. When you come back, there are 3 piles. One has nuts, raisins, cereal, and brown M&#038;Ms in it, and then there is a pile for each color of M&#038;Ms! She has &#8220;clustered&#8221; the items based on color similarity. She gave you more than 3 groups, but since you didn&#8217;t label the items, she picked color as what made the items most similar to one another. So you got a large brown pile that contained most of what was in the bowl (since most of the trail mix was brown), then small piles of blue, red, orange, yellow, and green M&#038;Ms.</p>\n<p><strong>REGRESSION</strong></p>\n<p>You decide to try the same exercise and call over a third child. This time, you just tell the kid to organize the bowl however she wants, and watch from a distance. To your dismay, she is licking every piece! You rush over and see that she has lined up all of the pieces on the ground. Most of the M&#038;Ms are toward one side of the line, and as you go down toward the other end of the line, you see mostly nuts and cereal. &#8220;What were you licking them for?,&#8221; you say. &#8220;Well duh, I had to see how sweet they each were!&#8221; she replies. She has sorted them in one dimension &#8211; testing only for sweetness, and ordering every piece into a line based on how sweet it was. </p>\n<p>This isn&#8217;t the best example of regression &#8211; but the point is that you got a value as an output &#8211; sweetness level &#8211; as opposed to a category. It&#8217;s possible to use this sweetness level to then create categories &#8211; like creating a &#8220;candy&#8221; category by picking a certain sweetness level, and saying that anything above that is candy.</p>\n<p>If you are given a new piece of trail mix, you could compare it to trail mix in the already-licked line, and probably make a good guess about how sweet it is based on how much it looks like the pieces in a particular part of the line.</p>\n<p><em>I hope this helps clarify some machine learning terminology for people who like food metaphors! Add your own food-machine learning metaphors or ask questions in the comments!</em></p>\n",
  "wfw:commentRss": "https://www.becomingadatascientist.com/2017/07/17/introductory-machine-learning-terminology-with-food/feed/",
  "slash:comments": 1
}