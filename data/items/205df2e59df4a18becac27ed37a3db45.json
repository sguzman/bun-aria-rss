{
  "guid": "tag:blogger.com,1999:blog-6300367579216018061.post-9019768780095380158",
  "pubDate": "Wed, 30 Apr 2014 23:14:00 +0000",
  "atom:updated": "2015-03-01T11:48:14.947-08:00",
  "category": [
    "analytics",
    "big data",
    "data import",
    "data science",
    "github",
    "heroku scheduler",
    "meetup",
    "neo4j",
    "node.js",
    "open source software",
    "reporting"
  ],
  "title": "Building a Neo4j Reporting Service Part II",
  "description": "<style>blockquote {   border-left: 5px solid #EEEEEE;   margin: 0 0 20px;   padding: 0 0 0 15px; } </style> <br /><blockquote class=\"tr_bq\">It is a capital mistake to theorize before one has data. Insensibly one begins to twist facts to suit theories, instead of theories to suit facts.<br /><br /><cite>Sir Arthur Conan Doyle, Author of Sherlock Holmes stories</cite></blockquote><table cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"float: right; margin-left: 1em; text-align: right;\"><tbody><tr><td style=\"text-align: center;\"><a href=\"https://raw.githubusercontent.com/kbastani/meetup-analytics/master/docs/images/Neo4j_data_graph_db.png\" imageanchor=\"1\" style=\"clear: right; margin-bottom: 1em; margin-left: auto; margin-right: auto;\"><img border=\"0\" height=\"180\" src=\"https://raw.githubusercontent.com/kbastani/meetup-analytics/master/docs/images/Neo4j_data_graph_db.png\" width=\"320\" /></a></td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\">A Subgraph From Neo4j's Browser</td></tr></tbody></table>Just as Sir Arthur Conan Doyle's character, Sherlock Holmes, manically collects facts and evidence to prove theories, we find ourselves doing much of the same today except on a much larger scale<b>â€”</b>&nbsp;web scale. The web is an ever growing expanse of facts and evidence. It is at our disposal to observe without much of a challenge, but to store it and retrieve it in a way that answers the big questions, that's challenging.<br /><br />Continuing on from <a href=\"http://www.kennybastani.com/2014/04/building-graph-based-analytics-platform-part-1.html\" target=\"_blank\">Building a Graph-based Reporting Platform: Part I</a>, I posed some questions related to understanding how to build great community experiences around Neo4j using Meetup.com for local events. I presented an idea to use Neo4j to build a platform that could help us understand the demand for presenting compelling content at events.<br /><br />Compelling content is at the core of great community experiences. That content fuels the conversations between people, ideas begin to flow, and innovation is born.<br /><br />My idea was to build an open-source platform that would poll public APIs, translate collected data into a graph, and store it in a graph database to be analyzed, queried, and visualized over time. The first component of this architecture is the <a href=\"https://github.com/neo4j-meetups-reporting/wiki#data-import-scheduler\" target=\"_blank\">Data Import Scheduler</a>, which this post describes in detail.<br /><br /><h2><span style=\"font-size: large;\">Polling Data From Public APIs</span></h2><div>Let's start out by answering a basic question.</div><div><br /></div><blockquote class=\"tr_bq\">What does the data import scheduler do?</blockquote>The analytics data import scheduler is a Node.js process that can be hosted for free on Heroku and is responsible for collecting time-based statistics from a public API. In this case, the Meetup.com REST API exposes a set of methods that provide a momentary snapshot into the number of members that a group has at the time of the request. The data import scheduler polls this endpoint once a day to retrieve Meetup group statistics to later be used for time-based analysis from our graph database, <a href=\"http://www.neo4j.com/\" target=\"_blank\">Neo4j</a>.<br /><br />As illustrated in the diagram below, the Node.js application wakes up once a day and checks in with the Meetup.com REST API.<br /><br /><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"https://raw.githubusercontent.com/kbastani/meetup-analytics/master/docs/images/Graph-based%20Analytics%20Platform%20-%20Import%20Scheduler%20Diagram.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" height=\"430\" src=\"https://raw.githubusercontent.com/kbastani/meetup-analytics/master/docs/images/Graph-based%20Analytics%20Platform%20-%20Import%20Scheduler%20Diagram.png\" width=\"640\" /></a></div><br />The scheduler process polls Meetup.com's REST API daily. An HTTP GET request is dispatched for each city we're tracking, returning a JSON formatted response for groups in those cities. The JSON data for each group is then translated into a subgraph, formatted as <a href=\"http://docs.neo4j.org/chunked/stable/cypher-query-lang.html\" target=\"_blank\">Neo4j's Cypher query language</a>. The Cypher query is then sent as a transaction to Neo4j and updates a snapshot of the group's stats for that day.<br /><br /><h2><span style=\"font-size: large;\">Importing a Meetup Group's Subgraph</span></h2>The image below is a visualization of a Meetup group's subgraph, translated from JSON data polled on an arbitrary date.<br /><br /><table align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: center;\"><tbody><tr><td style=\"text-align: center;\"><a href=\"https://raw.githubusercontent.com/kbastani/meetup-analytics/master/docs/images/data-import-scheduler-model-slice.png\" imageanchor=\"1\" style=\"margin-left: auto; margin-right: auto;\"><img border=\"0\" height=\"470\" src=\"https://raw.githubusercontent.com/kbastani/meetup-analytics/master/docs/images/data-import-scheduler-model-slice.png\" width=\"640\" /></a></td></tr><tr><td class=\"tr-caption\"><i>Graph Database - San Francisco</i>&nbsp;on 4/28/2014</td></tr></tbody></table><br />We see that the group has a set of topic nodes, which may already exist within the database. The subgraph must be merged into the larger graph without duplicating any nodes. Using Cypher's <a href=\"http://docs.neo4j.org/chunked/stable/query-merge.html\" target=\"_blank\">MERGE</a> clause we can get or create nodes, which is useful for expanding our graph's connected data. Each topic will collect more groups as new subgraphs are merged for daily imports. The same is also true for both day and location nodes.<br /><br />After a few days of scheduled imports, a group's subgraph begins to take shape. As day nodes are connected to the previous day's node, membership statistics are connected.<br /><br /><div class=\"separator\" style=\"clear: both; text-align: center;\"></div><table align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: center;\"><tbody><tr><td style=\"text-align: center;\"><a href=\"https://raw.githubusercontent.com/kbastani/meetup-analytics/master/docs/images/data-import-scheduler-model.png\" imageanchor=\"1\" style=\"margin-left: auto; margin-right: auto;\"><img alt=\"Neo4j Data Import Model\" border=\"0\" height=\"281\" src=\"https://raw.githubusercontent.com/kbastani/meetup-analytics/master/docs/images/data-import-scheduler-model.png\" title=\"Data import model\" width=\"640\" /></a></td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\">A Meetup Group Statistics Subgraph, 4/23 to 4/28</td></tr></tbody></table><br />The data import scheduler application is open-source and <a href=\"http://www.github.com/neo4j-contrib/neo4j-meetups-reporting\" target=\"_blank\">available on GitHub</a>. Also, <a href=\"http://www.github.com/neo4j-contrib/neo4j-meetups-reporting/wiki\" target=\"_blank\">full documentation</a> is available to help you get started with customizing your own graph-based reporting platform.<br /><br />All analysis on the temporal stats collected from the data import scheduler is performed within the <a href=\"https://github.com/neo4j-contrib/neo4j-meetups-reporting/wiki#rest-api\" target=\"_blank\">REST API module of the reporting platform</a>. It also safely exposes the graph database to a front-end web dashboard, consumed from client-side JavaScript. The REST API uses&nbsp;<a href=\"https://github.com/neo4j-contrib/neo4j-meetups-reporting/wiki#the-swagger-project\">Swagger</a>, which is a&nbsp;specification and complete framework for describing, producing, consuming, and visualizing RESTful web services.<br /><br /><ul><li><a href=\"http://www.kennybastani.com/2014/04/building-graph-based-analytics-platform-part-1.html\" target=\"_blank\">Building a Graph-based Reporting Platform: Part I</a></li><li><a href=\"http://meetup-analytics-api.herokuapp.com/\" target=\"_blank\">Meetup Analytics API Demo</a></li><li><a href=\"http://meetup-analytics-dashboard.herokuapp.com/\" target=\"_blank\">Meetup Analytics Web Dashboard Demo</a></li><li><a href=\"http://www.github.com/neo4j-contrib/neo4j-meetups-reporting\" target=\"_blank\">Meetup Reporting GitHub Repository</a></li></ul>",
  "enclosure": "",
  "link": "https://www.kennybastani.com/2014/04/building-graph-based-analytics-platform-part-2.html",
  "author": "noreply@blogger.com (Kenny Bastani)",
  "thr:total": 0
}