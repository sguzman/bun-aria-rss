{
  "id": "tag:blogger.com,1999:blog-15045980.post-2440733433273689335",
  "published": "2020-08-19T09:04:00.000-07:00",
  "updated": "2020-08-19T09:04:17.279-07:00",
  "category": [
    "",
    ""
  ],
  "title": "Testing on the Toilet: Avoid Hardcoding Values for Better Libraries",
  "content": "<i><span style=\"font-family: times;\">This article was adapted from a Google <a href=\"http://googletesting.blogspot.com/2007/01/introducing-testing-on-toilet.html\">Testing on the Toilet</a> (TotT) episode. You can download a <a href=\"https://docs.google.com/document/d/1YPg8KK1w-fsKCYupdVkE9MvDezlaSYSfASGKW46GKrw/edit?usp=sharing\">printer-friendly version</a> of this TotT episode and post it in your office.</span></i><div><br /></div><div><span style=\"font-family: times;\">By Adel Saoud</span></div><div><br /></div><div><br /></div><div><span style=\"font-family: times;\">You may have been in a situation where you're using a value that always remains the same, so you define a constant. This can be a good practice as it removes magic values and improves code readability. But be mindful that <span style=\"color: #800180; font-weight: bold;\">hardcoding values can make usability and potential refactoring significantly harder</span>.</span></div><div><br /></div><div><span style=\"font-family: times;\">Consider the following function that relies on hardcoded values:</span></div> <div style=\"overflow-x: auto;\"><table class=\"my-bordered-table\" style=\"width: 613px;\"><tbody><tr><td style=\"background-color: #f4cccc; vertical-align: top; width: 607px;\"><pre style=\"background-color: #f4cccc; border: 0px; color: black; margin: 0px; padding-bottom: 0px; padding-left: 0px; padding-top: 0px;\"><span face=\"\" style=\"font-family: consolas, &quot;courier new&quot;, courier, monospace;\"><span style=\"color: #1155cc;\">// Declared in the module.</span><br />constexpr int <span style=\"font-weight: bold;\">kThumbnailSizes</span>[] = {480, 576, 720};<br /><br /><span style=\"color: #1155cc;\">// Returns thumbnails of various sizes for the given image.</span><br />std::vector&lt;Image&gt; GetThumbnails(const Image&amp; image) {<br />  std::vector&lt;Image&gt; thumbnails;<br />  for (const int size : <span style=\"font-weight: bold;\">kThumbnailSizes</span>) {<br />    thumbnails.push_back(ResizeImage(image, size));<br />  }<br />  return thumbnails;<br />}</span></pre></td></tr></tbody></table></div><br /><br /><div><span style=\"color: #800180; font-family: times; font-weight: bold;\">Using hardcoded values can make your code:</span></div><div><ul style=\"text-align: left;\"><li><span style=\"font-family: times;\"><span style=\"color: #800180; font-weight: bold;\">Less predictable:</span> The caller might not expect the function to be relying on hardcoded values outside its parameters; a user of the function shouldn’t need to read the function’s code to know that. Also, it is difficult to predict the product/resource/performance implications of changing these hardcoded values.</span></li><li><span style=\"font-family: times;\"><span style=\"color: #800180; font-weight: bold;\">Less reusable:</span> The caller is not able to call the function with different values and is stuck with the hardcoded values. If the caller doesn’t need all these sizes or needs a different size, the function has to be forked or refactored to avoid aforementioned complications with existing callers.</span></li></ul><div><br /></div></div><div><span style=\"font-family: times;\"><span style=\"color: #800180; font-weight: bold;\">When designing a library, prefer to pass required values, such as through a function call or a constructor</span>. The code above can be improved as follows:</span></div> <div style=\"overflow-x: auto;\"><table class=\"my-bordered-table\" style=\"width: 613px;\"><tbody><tr><td style=\"background-color: #d9ead3; vertical-align: top; width: 607px;\"><pre style=\"background-color: #d9ead3; border: 0px; color: black; margin: 0px; padding-bottom: 0px; padding-left: 0px; padding-top: 0px;\"><span face=\"\" style=\"font-family: consolas, &quot;courier new&quot;, courier, monospace;\">std::vector&lt;Image&gt; GetThumbnails(const Image&amp; image, <span style=\"font-weight: bold;\">absl::Span&lt;const int&gt; sizes</span>) {<br />  std::vector&lt;Image&gt; thumbnails;<br />  for (const int size : <span style=\"font-weight: bold;\">sizes</span>) {<br />    thumbnails.push_back(ResizeImage(image, size));<br />  }<br />  return thumbnails;<br />}</span></pre></td></tr></tbody></table><br /></div><div style=\"overflow-x: auto;\"><br /></div><div style=\"overflow-x: auto;\"><span style=\"font-family: times;\"><span style=\"color: #800180; font-weight: bold;\">If most of the callers use the same value for a certain parameter, make your code configurable so that this value doesn't need to be duplicated by each caller.</span> For example, you can define a public constant that contains a commonly used value, or use default arguments in languages that support this feature (e.g. C++ or Python).</span></div> <div style=\"overflow-x: auto;\"><table class=\"my-bordered-table\" style=\"width: 613px;\"><tbody><tr><td style=\"background-color: #c9daf8; vertical-align: top; width: 607px;\"><pre style=\"background-color: #c9daf8; border: 0px; color: black; margin: 0px; padding-bottom: 0px; padding-left: 0px; padding-top: 0px;\"><span face=\"\" style=\"font-family: consolas, &quot;courier new&quot;, courier, monospace;\"><span style=\"color: #0f9d58;\">// Declared in the public header.</span><br />inline constexpr int <span style=\"font-weight: bold;\">kDefaultThumbnailSizes</span>[] = {480, 576, 720};<br /><br /><span style=\"color: #0f9d58;\">// Default argument allows the function to be used without specifying a size.</span><br />std::vector&lt;Image&gt; GetThumbnails(const Image&amp; image,<br />                                 absl::Span&lt;const int&gt; sizes = <span style=\"font-weight: bold;\">kDefaultThumbnailSizes</span>);</span></pre></td></tr></tbody></table></div>",
  "link": [
    "",
    "",
    "",
    "",
    ""
  ],
  "author": {
    "name": "Google Testing Bloggers",
    "uri": "http://www.blogger.com/profile/03153388556673050910",
    "email": "noreply@blogger.com",
    "gd:image": ""
  },
  "thr:total": 7
}