{
  "id": "tag:blogger.com,1999:blog-37798047.post-7497953035384868701",
  "published": "2021-04-21T17:27:00.001-04:00",
  "updated": "2021-04-21T17:27:21.203-04:00",
  "title": "Ethics: University of Minnesota's hostile patches",
  "content": "<p>The University of Minnesota (UMN) got into trouble this week for doing a study where they have submitted deliberately vulnerable patches into open-source projects, in order to test whether hostile actors can do this to hack things. After a UMN researcher submitted a crappy patch to the Linux Kernel, kernel maintainers decided to rip out all recent UMN patches.</p><p>Both things can be true:</p><p></p><ul style=\"text-align: left;\"><li>Their study was an important contribution to the field of cybersecurity.</li><li>Their study was unethical.</li></ul><div>It's like Nazi medical research on victims in concentration camps, or U.S. military research on unwitting soldiers. The research can simultaneously be wildly unethical but at the same time produce useful knowledge.</div><div><br /></div><div>I'd agree that <a href=\"https://github.com/QiushiWu/QiushiWu.github.io/blob/main/papers/OpenSourceInsecurity.pdf\">their paper</a>&nbsp;is useful. I would not be able to immediately recognize their patches as adding a vulnerability -- and I'm an expert at such things.</div><div><br /></div><div>In addition, the sorts of bugs it exploits shows a way forward in the evolution of programming languages. It's not clear that a \"safe\" language like Rust would be the answer. Linux kernel programming requires tracking resources in ways that Rust would consider inherently \"unsafe\". Instead, the C language needs to evolve with better safety features and better static analysis. Specifically, we need to be able to annotate the parameters and return statements from functions. For example, if a pointer can't be NULL, then it needs to be documented as a non-nullable pointer. (Imagine if pointers could be <i>signed</i>&nbsp;and <i>unsigned</i>, meaning, can sometimes be NULL or never be NULL).</div><div><br /></div><div>So I'm glad this paper exists. As a researcher, I'll likely cite it in the future. As a programmer, I'll be more vigilant in the future. In my own open-source projects, I should probably review some previous pull requests that I've accepted, since many of them have been the same crappy quality of simply adding a (probably) unnecessary NULL-pointer check.</div><div><br /></div><div>The next question is whether this is ethical. Well, the paper claims to have sign-off from their university's IRB -- their <a href=\"https://en.wikipedia.org/wiki/Institutional_review_board\">Institutional Review Board</a> that reviews the ethics of experiments. Universities created IRBs to deal with the fact that many medical experiments were done on either unwilling or unwitting subjects, such as the Tuskegee Syphilis Study. All medical research must have IRB sign-off these days.</div><div><br /></div><div>However, I think IRB sign-off for computer security research is stupid. Things like masscanning of the entire Internet are undecidable with traditional ethics. I regularly scan every device on the IPv4 Internet, including your own home router. If you paid attention to the packets your firewall drops, some of them would be from me. Some consider this a gross violation of basic ethics and get very upset that I'm scanning their computer. Others consider this to be the expected consequence of the end-to-end nature of the public Internet, that there's an inherent social contract that you must be prepared to receive any packet from anywhere. Kerckhoff's Principle from the 1800s suggests that core ethic of cybersecurity is exposure to such things rather than trying to cover them up.</div><div><br /></div><div>The point isn't to argue whether masscanning is ethical. The point is to argue that it's undecided, and that your IRB isn't going to be able to answer the question better than anybody else.</div><div><br /></div><div>But here's the thing about masscanning: I'm honest and transparent about it. My very first scan of the entire Internet came with a tweet \"BTW, this is me scanning the entire Internet\".</div><div><br /></div><div>A lot of ethical questions in other fields comes down to honesty. If you have to lie about it or cover it up, then there's a good chance it's unethical.</div><div><br /></div><div>For example, the west suffers a lot of cyberattacks from Russia and China. Therefore, as a lone wolf actor capable of hacking them back, is it ethical to do so? The easy answer is that when discovered, would you say \"yes, I did that, and I'm proud of it\", or would you lie about it? I admit this is a difficult question, because it's posed in terms of whether you'd want to evade the disapproval from other people, when the reality is that you might not want to get <a href=\"https://en.wikipedia.org/wiki/Poisoning_of_Alexei_Navalny\">novichoked</a> by Putin.</div><div><br /></div><div>The above research is based on a lie. Lying has consequences.</div><div><br /></div><div>The natural consequence here is that now that UMN did that study, none of the patches they submit can be trusted. It's not just this one&nbsp;<a href=\"https://lore.kernel.org/linux-nfs/20210407001658.2208535-1-pakki001@umn.edu/\">submitted patch</a>. The kernel maintainers are taking&nbsp;<a href=\"https://lore.kernel.org/lkml/20210421130105.1226686-1-gregkh@linuxfoundation.org/\">scorched earth response</a>, reverting all recent patches from the university and banning future patches from them. It may be a little hysterical, but at the same time, this is a new situation that no existing policy covers.</div><div><br /></div><div>I partly disagree with the kernel maintainer's <a href=\"https://lore.kernel.org/linux-nfs/YH%2FfM%2FTsbmcZzwnX@kroah.com/\">conclusion</a> that the patches \"obviously were _NOT_ created by a static analysis tool\". This is exactly the sort of noise static analyzers have produced in the past. I reviewed the <a href=\"https://elixir.bootlin.com/linux/latest/source/net/sunrpc/auth_gss/auth_gss.c#L385\">source file</a> for how a static analyzer might come to this conclusion, and found it's exactly the sort of thing it might produce.</div><div><br /></div><div>But at the same time, it's obviously noise and bad output. If the researcher were developing a static analyzer tool, they should understand that this is crap noise and bad output from the static analyzer. They should not be submitting low-quality patches like this one. The main concern that researchers need to focus on for static analysis isn't increasing detection of vulns, but decreasing noise.</div><div><br /></div><div>In other words, the debate here is whether the researcher is incompetent or dishonest. Given that UMN has practiced dishonesty in the past, it's legitimate to believe they are doing so again. Indeed, \"static analysis\" research might also include research in automated ways to find subversive bugs. One might create a static analyzer to search code for ways to insert a NULL pointer check to add a vuln.</div><div><br /></div><div>Now incompetence is actually a fine thing. That's the point of research, is to learn things. Starting fresh without all the preconceptions of old work is also useful. That researcher has problems today, but a year or two from now they'll be an ultra-competent expert in their field. That's how one achieves competence -- making mistakes, lots of them.</div><div><br /></div><div>But either way, the Linux kernel maintainer response of \"we are not part of your research project\" is a valid. These patches are crap, regardless of which research project they are pursuing (static analyzer or malicious patch submissions).</div><div><br /></div><div><br /></div><div><b>Conclusion</b></div><div><b><br /></b></div><div>I think the UMN research into bad-faith patches is useful to the community. I reject the idea that their IRB, which is focused on biomedical ethics rather than cybersecurity ethics, would be useful here. Indeed, it's done the reverse: IRB approval has tainted the entire university with the problem rather than limiting the fallout to just the researchers that could've been disavowed.</div><div><br /></div><div>The natural consequence of being dishonest is that people can't trust you. In cybersecurity, trust is hard to win and easy to lose -- and UMN lost it. The researchers should have understand that \"dishonesty\" was going to be a problem.</div><div><br /></div><div>I'm not sure there is a way to ethically be dishonest, so I'm not sure how such useful research can be done without the researchers or sponsors being tainted by it. I just know that \"dishonesty\" is an easily recognizable issue in cybersecurity that needs to be avoided. If anybody knows how to be ethically dishonest, I'd like to hear it.</div><div><br /></div><div><b>Update:</b>&nbsp;This person proposes a way this research could be conducted to ethically be dishonest:</div><blockquote class=\"twitter-tweet\"><p dir=\"ltr\" lang=\"en\">By asking the top boss if it's okay if you lie to their team, a la an authorized penetration test.<br /><br />In this case that might still not be ethical, because while the top guy can answer for the /project/ he can't answer for the other /people/, who are volunteers and not employees.</p>â€” Random of Eddie (@random_eddie) <a href=\"https://twitter.com/random_eddie/status/1384979654256308225?ref_src=twsrc%5Etfw\">April 21, 2021</a></blockquote> <script async=\"\" charset=\"utf-8\" src=\"https://platform.twitter.com/widgets.js\"></script>",
  "link": [
    "",
    "",
    "",
    "",
    ""
  ],
  "author": {
    "name": "Robert Graham",
    "uri": "http://www.blogger.com/profile/09879238874208877740",
    "email": "noreply@blogger.com",
    "gd:image": ""
  },
  "thr:total": 1
}