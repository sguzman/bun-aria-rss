{
  "title": "A O(n log n) NA-friendly time series \"as of\" using array operations",
  "link": "",
  "published": "2012-05-04T00:00:00-07:00",
  "updated": "2012-05-04T00:00:00-07:00",
  "author": {
    "name": "Wes McKinney"
  },
  "id": "tag:wesmckinney.com,2012-05-04:/blog/a-on-log-n-na-friendly-as-of-array-operations/",
  "summary": "<p>In time series data, it's fairly common to need to compute the last known value \"as of\" a particular date. However, missing data is the norm, so it's a touch more complicated than doing a simple binary search. Here is an implementation using array operations that takes these things into â€¦</p>",
  "content": "<p>In time series data, it's fairly common to need to compute the last known value \"as of\" a particular date. However, missing data is the norm, so it's a touch more complicated than doing a simple binary search. Here is an implementation using array operations that takes these things into account:</p>\n<div class=\"github\"><pre><span></span><code><span class=\"k\">def</span> <span class=\"nf\">asof_locs</span><span class=\"p\">(</span><span class=\"n\">stamps</span><span class=\"p\">,</span> <span class=\"n\">where</span><span class=\"p\">,</span> <span class=\"n\">mask</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Parameters</span>\n<span class=\"sd\">    ----------</span>\n<span class=\"sd\">    stamps : array of timestamps</span>\n<span class=\"sd\">    where : array of timestamps</span>\n<span class=\"sd\">        Values to determine the &quot;as of&quot; for</span>\n<span class=\"sd\">    mask : array of booleans where data is not NA</span>\n\n<span class=\"sd\">    Returns</span>\n<span class=\"sd\">    -------</span>\n<span class=\"sd\">    locs : array of ints</span>\n<span class=\"sd\">        Locations of each &quot;as of&quot; value, -1 for NA</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"n\">locs</span> <span class=\"o\">=</span> <span class=\"n\">stamps</span><span class=\"p\">[</span><span class=\"n\">mask</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">searchsorted</span><span class=\"p\">(</span><span class=\"n\">where</span><span class=\"p\">,</span> <span class=\"n\">side</span><span class=\"o\">=</span><span class=\"s1\">&#39;right&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">locs</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span><span class=\"n\">locs</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">locs</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">arange</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">stamps</span><span class=\"p\">))[</span><span class=\"n\">mask</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">locs</span><span class=\"p\">)</span>\n\n    <span class=\"n\">first</span> <span class=\"o\">=</span> <span class=\"n\">mask</span><span class=\"o\">.</span><span class=\"n\">argmax</span><span class=\"p\">()</span>\n    <span class=\"n\">result</span><span class=\"p\">[(</span><span class=\"n\">locs</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span> <span class=\"p\">(</span><span class=\"n\">where</span> <span class=\"o\">&lt;</span> <span class=\"n\">stamps</span><span class=\"p\">[</span><span class=\"n\">first</span><span class=\"p\">])]</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">result</span>\n</code></pre></div>\n\n<p>Some algorithmic notes. First, let's run this through <code>line_profiler</code> on a large time series to see where time is being taken up:</p>\n<div class=\"github\"><pre><span></span><code><span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">9</span><span class=\"p\">]:</span> <span class=\"n\">rng</span> <span class=\"o\">=</span> <span class=\"n\">date_range</span><span class=\"p\">(</span><span class=\"s1\">&#39;1/1/2000&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;6/1/2000&#39;</span><span class=\"p\">,</span> <span class=\"n\">freq</span><span class=\"o\">=</span><span class=\"s1\">&#39;10s&#39;</span><span class=\"p\">)</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">]:</span> <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">Series</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">randn</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">rng</span><span class=\"p\">)),</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"n\">rng</span><span class=\"p\">)</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">11</span><span class=\"p\">]:</span> <span class=\"n\">rng</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">11</span><span class=\"p\">]:</span>\n<span class=\"o\">&lt;</span><span class=\"k\">class</span> <span class=\"err\">&#39;</span><span class=\"nc\">pandas</span><span class=\"o\">.</span><span class=\"n\">tseries</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"o\">.</span><span class=\"n\">DatetimeIndex</span><span class=\"s1\">&#39;&gt;</span>\n<span class=\"p\">[</span><span class=\"mi\">2000</span><span class=\"o\">-</span><span class=\"mi\">01</span><span class=\"o\">-</span><span class=\"mi\">01</span> <span class=\"mi\">00</span><span class=\"p\">:</span><span class=\"mi\">00</span><span class=\"p\">:</span><span class=\"mi\">00</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"mi\">2000</span><span class=\"o\">-</span><span class=\"mi\">06</span><span class=\"o\">-</span><span class=\"mi\">01</span> <span class=\"mi\">00</span><span class=\"p\">:</span><span class=\"mi\">00</span><span class=\"p\">:</span><span class=\"mi\">00</span><span class=\"p\">]</span>\n<span class=\"n\">Length</span><span class=\"p\">:</span> <span class=\"mi\">1313281</span><span class=\"p\">,</span> <span class=\"n\">Freq</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"n\">S</span><span class=\"p\">,</span> <span class=\"n\">Timezone</span><span class=\"p\">:</span> <span class=\"kc\">None</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">12</span><span class=\"p\">]:</span> <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">resample</span><span class=\"p\">(</span><span class=\"s1\">&#39;s&#39;</span><span class=\"p\">)</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">13</span><span class=\"p\">]:</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">13</span><span class=\"p\">]:</span> <span class=\"mi\">13132801</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">24</span><span class=\"p\">]:</span> <span class=\"n\">mask</span> <span class=\"o\">=</span> <span class=\"n\">notnull</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">25</span><span class=\"p\">]:</span> <span class=\"n\">lprun</span> <span class=\"o\">-</span><span class=\"n\">f</span> <span class=\"n\">asof_locs</span> <span class=\"n\">asof_locs</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">::</span><span class=\"mi\">5</span><span class=\"p\">],</span> <span class=\"n\">mask</span><span class=\"p\">)</span>\n<span class=\"n\">Timer</span> <span class=\"n\">unit</span><span class=\"p\">:</span> <span class=\"mf\">1e-06</span> <span class=\"n\">s</span>\n\n<span class=\"n\">File</span><span class=\"p\">:</span> <span class=\"n\">foo</span><span class=\"o\">.</span><span class=\"n\">py</span>\n<span class=\"n\">Function</span><span class=\"p\">:</span> <span class=\"n\">asof_locs</span> <span class=\"n\">at</span> <span class=\"n\">line</span> <span class=\"mi\">3</span>\n<span class=\"n\">Total</span> <span class=\"n\">time</span><span class=\"p\">:</span> <span class=\"mf\">0.793543</span> <span class=\"n\">s</span>\n\n<span class=\"n\">Line</span> <span class=\"c1\">#   % Time  Line Contents</span>\n<span class=\"o\">==============================================================</span>\n     <span class=\"mi\">3</span>           <span class=\"k\">def</span> <span class=\"nf\">asof_locs</span><span class=\"p\">(</span><span class=\"n\">stamps</span><span class=\"p\">,</span> <span class=\"n\">where</span><span class=\"p\">,</span> <span class=\"n\">mask</span><span class=\"p\">):</span>\n     <span class=\"mi\">4</span>               <span class=\"s2\">&quot;&quot;&quot;</span>\n<span class=\"s2\">     5               Parameters</span>\n<span class=\"s2\">     6               ----------</span>\n<span class=\"s2\">     7               stamps : array of timestamps</span>\n<span class=\"s2\">     8               where : array of timestamps</span>\n<span class=\"s2\">     9                   Values to determine the &quot;as of&quot; for</span>\n<span class=\"s2\">    10               mask : array of booleans where data is NA</span>\n<span class=\"s2\">    11</span>\n<span class=\"s2\">    12               Returns</span>\n<span class=\"s2\">    13               -------</span>\n<span class=\"s2\">    14               locs : array of ints</span>\n<span class=\"s2\">    15                   Locations of each &quot;as of&quot; value, -1 for NA</span>\n<span class=\"s2\">    16               &quot;&quot;&quot;</span>\n    <span class=\"mi\">17</span>    <span class=\"mf\">63.3</span>       <span class=\"n\">locs</span> <span class=\"o\">=</span> <span class=\"n\">stamps</span><span class=\"p\">[</span><span class=\"n\">mask</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">searchsorted</span><span class=\"p\">(</span><span class=\"n\">where</span><span class=\"p\">,</span> <span class=\"n\">side</span><span class=\"o\">=</span><span class=\"s1\">&#39;right&#39;</span><span class=\"p\">)</span>\n    <span class=\"mi\">18</span>     <span class=\"mf\">8.3</span>       <span class=\"n\">locs</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span><span class=\"n\">locs</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">locs</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"mi\">19</span>\n    <span class=\"mi\">20</span>    <span class=\"mf\">23.3</span>       <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">arange</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">stamps</span><span class=\"p\">))[</span><span class=\"n\">mask</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">locs</span><span class=\"p\">)</span>\n    <span class=\"mi\">21</span>\n    <span class=\"mi\">22</span>     <span class=\"mf\">1.6</span>       <span class=\"n\">first</span> <span class=\"o\">=</span> <span class=\"n\">mask</span><span class=\"o\">.</span><span class=\"n\">argmax</span><span class=\"p\">()</span>\n    <span class=\"mi\">23</span>     <span class=\"mf\">3.6</span>       <span class=\"n\">result</span><span class=\"p\">[(</span><span class=\"n\">locs</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span> <span class=\"p\">(</span><span class=\"n\">where</span> <span class=\"o\">&lt;</span> <span class=\"n\">stamps</span><span class=\"p\">[</span><span class=\"n\">first</span><span class=\"p\">])]</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span>\n    <span class=\"mi\">24</span>\n    <span class=\"mi\">25</span>     <span class=\"mf\">0.0</span>       <span class=\"k\">return</span> <span class=\"n\">result</span>\n</code></pre></div>\n\n<p>The main trickiness here is this step:</p>\n<div class=\"github\"><pre><span></span><code><span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">arange</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">stamps</span><span class=\"p\">))[</span><span class=\"n\">mask</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">locs</span><span class=\"p\">)</span>\n</code></pre></div>\n\n<p>Since the indices returned by <code>searchsorted</code> are relative to the <em>filtered</em> values, you need to remap to what would have been the indices in the original array, and this does exactly that. Lastly, you might be interested in breaking up <code>stamps[mask].searchsorted(where, side='right')</code> to see how much time is spend in <code>stamps[mask]</code> versus <code>searchsorted</code>:</p>\n<div class=\"github\"><pre><span></span><code><span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">28</span><span class=\"p\">]:</span> <span class=\"n\">timeit</span> <span class=\"n\">stamps</span><span class=\"p\">[</span><span class=\"n\">mask</span><span class=\"p\">]</span>\n<span class=\"mi\">10</span> <span class=\"n\">loops</span><span class=\"p\">,</span> <span class=\"n\">best</span> <span class=\"n\">of</span> <span class=\"mi\">3</span><span class=\"p\">:</span> <span class=\"mi\">127</span> <span class=\"n\">ms</span> <span class=\"n\">per</span> <span class=\"n\">loop</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">29</span><span class=\"p\">]:</span> <span class=\"n\">filt</span> <span class=\"o\">=</span> <span class=\"n\">stamps</span><span class=\"p\">[</span><span class=\"n\">mask</span><span class=\"p\">]</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">31</span><span class=\"p\">]:</span> <span class=\"n\">timeit</span> <span class=\"n\">filt</span><span class=\"o\">.</span><span class=\"n\">searchsorted</span><span class=\"p\">(</span><span class=\"n\">where</span><span class=\"p\">)</span>\n<span class=\"mi\">1</span> <span class=\"n\">loops</span><span class=\"p\">,</span> <span class=\"n\">best</span> <span class=\"n\">of</span> <span class=\"mi\">3</span><span class=\"p\">:</span> <span class=\"mi\">345</span> <span class=\"n\">ms</span> <span class=\"n\">per</span> <span class=\"n\">loop</span>\n</code></pre></div>\n\n<p>So, this could definitely be sped up by a factor or 2 or more by doing the whole operation in C or Cython, but it's nice to be able to express it concisely and speedily with array operations.</p>"
}