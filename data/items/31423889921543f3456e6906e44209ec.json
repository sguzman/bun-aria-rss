{
  "title": "Using Julia As A \"Glue\" Language",
  "description": "<p>While much of the focus in the Julia community has been on the performance aspects of Julia relative to other scientific computing languages, Julia is also perfectly suited to ‘glue’ together multiple data sources/languages. In this blog post, I will cover how to create an interactive plot using <a title=\"Gadfly.jl documentation\" href=\"http://dcjones.github.io/Gadfly.jl/\" target=\"_blank\">Gadfly.jl</a>, by first preparing the data using Hadoop and <a title=\"Teradata Aster\" href=\"http://www.asterdata.com/\" target=\"_blank\">Teradata Aster</a> via <a title=\"Julia ODBC\" href=\"https://github.com/quinnj/ODBC.jl\" target=\"_blank\">ODBC.jl</a>.</p>",
  "pubDate": "Tue, 24 Jun 2014 08:57:31 +0000",
  "link": "http://randyzwitch.com/julia-odbc-jl/",
  "guid": "http://randyzwitch.com/julia-odbc-jl/",
  "content": "<p>While much of the focus in the Julia community has been on the performance aspects of Julia relative to other scientific computing languages, Julia is also perfectly suited to ‘glue’ together multiple data sources/languages. In this blog post, I will cover how to create an interactive plot using <a title=\"Gadfly.jl documentation\" href=\"http://dcjones.github.io/Gadfly.jl/\" target=\"_blank\">Gadfly.jl</a>, by first preparing the data using Hadoop and <a title=\"Teradata Aster\" href=\"http://www.asterdata.com/\" target=\"_blank\">Teradata Aster</a> via <a title=\"Julia ODBC\" href=\"https://github.com/quinnj/ODBC.jl\" target=\"_blank\">ODBC.jl</a>.</p>\n\n<p>The example problem I am going to solve is calculating and visualizing the number of airplanes by hour in the air at any given time in the U.S. for the year 1987. Because of the structure and storage of the underlying data, I will need to write some custom Hive code, upload the data to Teradata Aster via a command-line utility, re-calculate the number of flights per hour using a built-in Aster function, then using Julia to visualize the data.</p>\n\n<h2 id=\"step-1-getting-data-from-hadoop\">Step 1: Getting Data From Hadoop</h2>\n\n<p>In a prior set of <a title=\"Getting Started Using Hadoop, Part 3: Loading Data\" href=\"http://randyzwitch.com/uploading-data-hadoop-amazon-ec2-cloudera-part-3/\" target=\"_blank\">blog posts</a>, I talked about loading the <a title=\"Airline dataset\" href=\"http://stat-computing.org/dataexpo/2009/\" target=\"_blank\">airline dataset</a> into Hadoop, then <a title=\"Getting Started With Hadoop, Final: Analysis Using Hive &amp; Pig\" href=\"http://randyzwitch.com/getting-started-hadoop-hive-pig/\" target=\"_blank\">analyzing the dataset using Hive or Pig</a>. Using ODBC.jl, we can use Hive via Julia to submit our queries. The hardest part of setting up this process is making sure that you have the appropriate Hive drivers for your Hadoop cluster and credentials (which isn’t covered here). Once you have your DSN set up, running Hive queries is as easy as the following:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-julia\" data-lang=\"julia\"><table class=\"rouge-table\"><tbody><tr><td class=\"gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n</pre></td><td class=\"code\"><pre><span class=\"k\">using</span> <span class=\"n\">ODBC</span>\n\n<span class=\"c\">#Connect to Hadoop cluster via Hive (pre-defined Windows DSN in ODBC Manager)</span>\n<span class=\"n\">hiveconn</span> <span class=\"o\">=</span> <span class=\"n\">ODBC</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"x\">(</span><span class=\"s\">\"Production hiveserver2\"</span><span class=\"x\">;</span> <span class=\"n\">usr</span><span class=\"o\">=</span><span class=\"s\">\"your-user-name\"</span><span class=\"x\">,</span> <span class=\"n\">pwd</span><span class=\"o\">=</span><span class=\"s\">\"your-password-here\"</span><span class=\"x\">)</span>\n\n<span class=\"c\">#Clean data, return results directly to file</span>\n<span class=\"c\">#Data returned with have origin of flight, flight takeoff, flight landing and elapsed time</span>\n<span class=\"n\">hive_query_string</span> <span class=\"o\">=</span>\n<span class=\"s\">\"select\norigin,\nfrom_unixtime(flight_takeoff_datetime_origin) as flight_takeoff_datetime_origin,\nfrom_unixtime(flight_takeoff_datetime_origin + (actualelapsedtime * 60)) as flight_landing_datetime_origin,\nactualelapsedtime\nfrom\n(select\norigin,\nunix_timestamp(CONCAT(year,</span><span class=\"se\">\\\"</span><span class=\"s\">-</span><span class=\"se\">\\\"</span><span class=\"s\">, month, </span><span class=\"se\">\\\"</span><span class=\"s\">-</span><span class=\"se\">\\\"</span><span class=\"s\">, dayofmonth, </span><span class=\"se\">\\\"</span><span class=\"s\"> </span><span class=\"se\">\\\"</span><span class=\"s\">, SUBSTR(LPAD(deptime, 4, 0), 1, 2), </span><span class=\"se\">\\\"</span><span class=\"s\">:</span><span class=\"se\">\\\"</span><span class=\"s\">, SUBSTR(LPAD(deptime, 4, 0), 3, 4), </span><span class=\"se\">\\\"</span><span class=\"s\">:</span><span class=\"se\">\\\"</span><span class=\"s\">, </span><span class=\"se\">\\\"</span><span class=\"s\">00</span><span class=\"se\">\\\"</span><span class=\"s\">))  as flight_takeoff_datetime_origin,\nactualelapsedtime\nfrom vw_airline\nwhere year = 1987 and actualelapsedtime &gt; 0) inner_query;\"</span>\n\n<span class=\"c\">#Run query, save results directly to file</span>\n<span class=\"n\">query</span><span class=\"x\">(</span><span class=\"n\">hive_query_string</span><span class=\"x\">,</span> <span class=\"n\">hiveconn</span><span class=\"x\">;</span><span class=\"n\">output</span><span class=\"o\">=</span><span class=\"s\">\"C:</span><span class=\"se\">\\\\</span><span class=\"s\">airline_times.csv\"</span><span class=\"x\">,</span><span class=\"n\">delim</span><span class=\"o\">=</span><span class=\"sc\">','</span><span class=\"x\">)</span>\n</pre></td></tr></tbody></table></code></pre></figure>\n\n<p>In this code, I’ve written my query as a Julia string, to keep my code easily modifiable. Then, I pass the Julia string object to the <code class=\"language-plaintext highlighter-rouge\">query()</code> function, along with my ODBC <code class=\"language-plaintext highlighter-rouge\">connection</code> object. This query runs on Hadoop through Hive, then streams the result directly to my local hard drive, making this a very RAM efficient (though I/O inefficient!) operation.</p>\n\n<h2 id=\"step-2-shelling-out-to-load-data-to-aster\">Step 2: Shelling Out To Load Data To Aster</h2>\n\n<p>Once I created the file with my Hadoop results in it, I now have a decision point: I can either A) do the rest of the analysis in Julia or B) use a different tool for my calculations. Because this is a toy example, I’m going to use Teradata Aster to do my calculations, which provides a convenient function called <code class=\"language-plaintext highlighter-rouge\">burst()</code> to regularize timestamps into fixed intervals. But before I can use Aster to ‘burst’ my data, I first need to upload it to the database.</p>\n\n<p>While I could loop over the data within Julia and insert each record one at a time, Teradata provides a command-line utility to upload data in parallel. Running command-line scripts from within Julia is as easy as using the <code class=\"language-plaintext highlighter-rouge\">run()</code> command, with each command surrounded in backticks:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-julia\" data-lang=\"julia\"><table class=\"rouge-table\"><tbody><tr><td class=\"gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n</pre></td><td class=\"code\"><pre><span class=\"c\">#Connect to Aster (pre-defined Windows DSN in ODBC Manager)</span>\n<span class=\"n\">asterconn</span> <span class=\"o\">=</span> <span class=\"n\">ODBC</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"x\">(</span><span class=\"s\">\"aster01\"</span><span class=\"x\">;</span> <span class=\"n\">usr</span><span class=\"o\">=</span><span class=\"s\">\"your-user-name\"</span><span class=\"x\">,</span> <span class=\"n\">pwd</span><span class=\"o\">=</span><span class=\"s\">\"your-password\"</span><span class=\"x\">)</span>\n\n<span class=\"c\">#Create table to hold airline results</span>\n<span class=\"n\">create_airline_table_statement</span> <span class=\"o\">=</span>\n<span class=\"s\">\"create table ebi_temp.airline\n(origin varchar,\nflight_takeoff_datetime_origin timestamp,\nflight_landing_datetime_origin timestamp,\nactualelapsedtime int,\npartition key (origin))\"</span>\n\n<span class=\"c\">#Execute query</span>\n<span class=\"n\">query</span><span class=\"x\">(</span><span class=\"n\">create_airline_table_statement</span><span class=\"x\">,</span> <span class=\"n\">asterconn</span><span class=\"x\">)</span>\n\n<span class=\"c\">#Create airport table</span>\n<span class=\"c\">#Data downloaded from http://openflights.org/data.html</span>\n<span class=\"n\">create_airport_table_statement</span> <span class=\"o\">=</span>\n<span class=\"s\">\"create table ebi_temp.airport\n(airport_id int,\nname varchar,\ncity varchar,\ncountry varchar,\nIATAFAA varchar,\nICAO varchar,\nlatitude float,\nlongitude float,\naltitude int,\ntimezone float,\ndst varchar,\npartition key (country))\"</span>\n\n<span class=\"c\">#Execute query</span>\n<span class=\"n\">query</span><span class=\"x\">(</span><span class=\"n\">create_airport_table_statement</span><span class=\"x\">,</span> <span class=\"n\">asterconn</span><span class=\"x\">)</span>\n\n<span class=\"c\">#Upload data via run() command</span>\n<span class=\"c\">#ncluster_loader utility already on Windows PATH</span>\n<span class=\"n\">run</span><span class=\"x\">(</span><span class=\"sb\">`ncluster_loader -h 192.168.1.1 -U your-user-name -w your-password -d aster01 -c --skip-rows=1 --el-enabled --el-table e_dist_error_2 --el-schema temp temp.airline C:\\\\airline_times.csv`</span><span class=\"x\">)</span>\n\n<span class=\"n\">run</span><span class=\"x\">(</span><span class=\"sb\">`ncluster_loader -h 192.168.1.1 -U your-user-name -w your-password -d aster01 -c --el-enabled --el-table e_dist_error_2 --el-schema temp temp.airport C:\\\\airports.dat`</span><span class=\"x\">)</span>\n</pre></td></tr></tbody></table></code></pre></figure>\n\n<p>While I could’ve run this at the command-line, having all of this within an IJulia Notebook keeps all my work together, should I need to re-run this in the future.</p>\n\n<h2 id=\"step-3-using-aster-for-calculations\">Step 3: Using Aster For Calculations</h2>\n\n<p>With my data now loaded in Aster, I can normalize the timestamps to UTC, then ‘burst’ the data into regular time intervals. Again, all of this can be done via ODBC from within Julia:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-julia\" data-lang=\"julia\"><table class=\"rouge-table\"><tbody><tr><td class=\"gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n</pre></td><td class=\"code\"><pre><span class=\"c\">#Normalize timestamps from local time to UTC time</span>\n<span class=\"n\">aster_view_string</span> <span class=\"o\">=</span> <span class=\"s\">\"\ncreate view temp.vw_airline_times_utc as\nselect\nrow_number() over(order by flight_takeoff_datetime_origin) as unique_flight_number,\norigin,\nflight_takeoff_datetime_origin,\nflight_landing_datetime_origin,\nflight_takeoff_datetime_origin - (INTERVAL '1 hour' * timezone) as flight_takeoff_datetime_utc,\nflight_landing_datetime_origin - (INTERVAL '1 hour' * timezone) as flight_landing_datetime_utc,\ntimezone\nfrom temp.airline\nleft join temp.airport on (airline.origin = airport.iatafaa);\"</span>\n\n<span class=\"c\">#Execute query</span>\n<span class=\"n\">query</span><span class=\"x\">(</span><span class=\"n\">aster_view_string</span><span class=\"x\">,</span> <span class=\"n\">asterconn</span><span class=\"x\">)</span>\n\n<span class=\"c\">#Teradata Aster SQL-H functionality, accessed via ODBC query</span>\n<span class=\"n\">burst_query_string</span> <span class=\"o\">=</span>\n<span class=\"s\">\"create table temp.airline_burst_hour distribute by hash (origin) as\nSELECT\n*,\n</span><span class=\"se\">\\\"</span><span class=\"s\">INTERVAL_START</span><span class=\"se\">\\\"</span><span class=\"s\">::date as calendar_date,\nextract(HOUR from </span><span class=\"se\">\\\"</span><span class=\"s\">INTERVAL_START</span><span class=\"se\">\\\"</span><span class=\"s\">) as hour_utc\nFROM BURST(\n     ON (select\n        unique_flight_number,\n        origin,\n        flight_takeoff_datetime_utc,\n        flight_landing_datetime_utc\n        FROM temp.vw_airline_times_utc\n)\n     START_COLUMN('flight_takeoff_datetime_utc')\n     END_COLUMN('flight_landing_datetime_utc')\n     BURST_INTERVAL('3600')\n);\"</span>\n\n<span class=\"c\">#Execute query</span>\n<span class=\"n\">query</span><span class=\"x\">(</span><span class=\"n\">burst_query_string</span><span class=\"x\">,</span> <span class=\"n\">asterconn</span><span class=\"x\">)</span>\n</pre></td></tr></tbody></table></code></pre></figure>\n\n<p>Since it might not be clear what I’m doing here, the <code class=\"language-plaintext highlighter-rouge\">burst()</code> function in Aster takes a row of data with a start and end timestamp, and (potentially) returns multiple rows which normalize the time between the timestamps. If you’re familiar with pandas in Python, it’s a similar functionality to <code class=\"language-plaintext highlighter-rouge\">resample</code> on a series of timestamps.</p>\n\n<h2 id=\"step-4-download-smaller-data-into-julia-visualize\">Step 4: Download Smaller Data Into Julia, Visualize</h2>\n\n<p>Now that the data has been processed from Hadoop to Aster through a series of queries, we now have a much smaller dataset that can be loaded into RAM and processed by Julia:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-julia\" data-lang=\"julia\"><table class=\"rouge-table\"><tbody><tr><td class=\"gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n</pre></td><td class=\"code\"><pre><span class=\"c\">#Calculate the number of flights per hour per day</span>\n<span class=\"n\">flights_query</span> <span class=\"o\">=</span> <span class=\"s\">\"\nselect\ncalendar_date,\nhour_utc,\nsum(1) as num_flights\nfrom temp.airline_burst_hour\ngroup by 1,2\norder by 1,2;\"</span>\n\n<span class=\"c\">#Bring results into Julia DataFrame</span>\n<span class=\"n\">flights_per_day</span> <span class=\"o\">=</span> <span class=\"n\">query</span><span class=\"x\">(</span><span class=\"n\">flights_query</span><span class=\"x\">,</span> <span class=\"n\">asterconn</span><span class=\"x\">)</span>\n\n<span class=\"k\">using</span> <span class=\"n\">Gadfly</span>\n\n<span class=\"c\">#Create boxplot, with one box plot per hour</span>\n<span class=\"n\">set_default_plot_size</span><span class=\"x\">(</span><span class=\"mi\">20</span><span class=\"n\">cm</span><span class=\"x\">,</span> <span class=\"mi\">12</span><span class=\"n\">cm</span><span class=\"x\">)</span>\n<span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">plot</span><span class=\"x\">(</span><span class=\"n\">flights_per_day</span> <span class=\"x\">,</span> <span class=\"n\">x</span><span class=\"o\">=</span><span class=\"s\">\"hour_utc\"</span><span class=\"x\">,</span> <span class=\"n\">y</span><span class=\"o\">=</span><span class=\"s\">\"num_flights\"</span><span class=\"x\">,</span>\n            <span class=\"n\">Guide</span><span class=\"o\">.</span><span class=\"n\">xlabel</span><span class=\"x\">(</span><span class=\"s\">\"Hour UTC\"</span><span class=\"x\">),</span>\n            <span class=\"n\">Guide</span><span class=\"o\">.</span><span class=\"n\">ylabel</span><span class=\"x\">(</span><span class=\"s\">\"Flights In Air\"</span><span class=\"x\">),</span>\n            <span class=\"n\">Guide</span><span class=\"o\">.</span><span class=\"n\">title</span><span class=\"x\">(</span><span class=\"s\">\"Number of Flights In Air To/From U.S. By Hour - 1987\"</span><span class=\"x\">),</span>\n            <span class=\"n\">Scale</span><span class=\"o\">.</span><span class=\"n\">y_continuous</span><span class=\"x\">(</span><span class=\"n\">minvalue</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"x\">,</span> <span class=\"n\">maxvalue</span><span class=\"o\">=</span><span class=\"mi\">4000</span><span class=\"x\">),</span>\n            <span class=\"n\">Geom</span><span class=\"o\">.</span><span class=\"n\">boxplot</span><span class=\"x\">)</span>\n</pre></td></tr></tbody></table></code></pre></figure>\n\n<p>The Gadfly code above produces the following plot:</p>\n\n<p><img src=\"/assets/img/airline_plot.png\" alt=\"gadfly\" /></p>\n\n<p>Since this chart is in UTC, it might not be obvious what the interpretation is of the trend. Because the airline dataset represents flights either leaving or returning to the United States, there are many fewer planes in the air overnight and the early morning hours (UTC 7-10, 2-5am Eastern). During the hours when the airports are open, there appears to be a limit of roughly 2500 planes per hour in the sky.</p>\n\n<h2 id=\"why-not-do-all-of-this-in-julia\">Why Not Do All Of This In Julia?</h2>\n\n<p>At this point, you might be tempted to wonder why go through all of this effort? Couldn’t this all be done in Julia?</p>\n\n<p>Yes, you probably could do all of this work in Julia with a sufficiently large amount of RAM. As a proof-of-concept, I hope I’ve shown that there is much more to Julia than micro-benchmarking Julia’s speed relative to other scientific programming languages. You’ll notice that in none of my code have I used any type annotations, as none would really make sense (nor would they improve performance).  And although this is a toy example purposely using multiple systems, I much more frequently use Julia in this manner at work than doing linear algebra or machine learning.</p>\n\n<p>So next time you’re tempted to use Python or R or shell scripting or whatever, consider Julia as well. Julia is just as at-home as a scripting language as a scientific computing language.</p>"
}