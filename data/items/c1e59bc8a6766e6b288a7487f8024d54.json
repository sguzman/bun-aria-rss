{
  "title": "How to deal with annoying medium sized data inside a Shiny app",
  "link": "https://www.r-bloggers.com/2022/10/how-to-deal-with-annoying-medium-sized-data-inside-a-shiny-app/",
  "dc:creator": "Econometrics and Free Software",
  "pubDate": "Mon, 31 Oct 2022 00:00:00 +0000",
  "category": "R bloggers",
  "guid": "https://www.brodrigues.co/blog/2022-10-31-optim_shiny/",
  "description": "<div style = \"width:60%; display: inline-block; float:left; \">\n<p>This blog post is taken from a chapter of my ebook on building reproducible analytical pipelines, which you can<br />\nread here<br />\nIf you want to follow along, you can start by downloading the data I use<br />\nhere.<br />\nThis is a smaller dataset made from the one yo...</p></div>\n<div style = \"width: 40%; display: inline-block; float:right;\"></div>\n<div style=\"clear: both;\"></div>\n<strong>Continue reading</strong>: <a href=\"https://www.r-bloggers.com/2022/10/how-to-deal-with-annoying-medium-sized-data-inside-a-shiny-app/\">How to deal with annoying medium sized data inside a Shiny app</a>",
  "content:encoded": "<!-- \n<div style=\"min-height: 30px;\">\n[social4i size=\"small\" align=\"align-left\"]\n</div>\n-->\n\n<div style=\"border: 1px solid; background: none repeat scroll 0 0 #EDEDED; margin: 1px; font-size: 12px;\">\n[This article was first published on  <strong><a href=\"https://www.brodrigues.co/blog/2022-10-31-optim_shiny/\"> Econometrics and Free Software</a></strong>, and kindly contributed to <a href=\"https://www.r-bloggers.com/\" rel=\"nofollow\">R-bloggers</a>].  (You can report issue about the content on this page <a href=\"https://www.r-bloggers.com/contact-us/\">here</a>)\n<hr>Want to share your content on R-bloggers?<a href=\"https://www.r-bloggers.com/add-your-blog/\" rel=\"nofollow\"> click here</a> if you have a blog, or <a href=\"http://r-posts.com/\" rel=\"nofollow\"> here</a> if you don't.\n</div>\n<div style=\"text-align:center;\">\n<p><video width=\"450\" controls>\n<source src=\"https://www.brodrigues.co/img/deja_vu.mp4\" type=\"video/mp4\">\n</video></p>\n</div>\n<p><em>This blog post is taken from a chapter of my ebook on building reproducible analytical pipelines, which you can\nread <a href=\"https://rap4mads.eu/\" rel=\"nofollow\" target=\"_blank\">here</a></em></p>\n<p>If you want to follow along, you can start by downloading the data I use\n<a href=\"https://mega.nz/file/l1IxHYIT#mZkeQOVpMc9XymMNtDY687sHEZHoIvDcUOm-4AwK6OI\" rel=\"nofollow\" target=\"_blank\">here</a>.\nThis is a smaller dataset made from the one you can get\n<a href=\"https://dataverse.harvard.edu/dataset.xhtml?persistentId=doi:10.7910/DVN/HG7NV7\" rel=\"nofollow\" target=\"_blank\">here</a>.</p>\n<p>Uncompressed it’ll be a 2.4GB file. Not big data in any sense, but big enough to be annoying to\nhandle without the use of some optimization strategies (I’ve seen such data described as medium\nsized data before.).</p>\n<p>One such strategy is only letting the computations run once the user gives the green light by\nclicking on an action button. The next obvious strategy is to use packages that are optimized for\nspeed. It turns out that the functions we have seen until now (note from the author: <em>the functions\nwe have seen until now</em> if you’re on of my students that’s sitting in the course where I teach\nthis), from packages like <code>{dplyr}</code> and the like, are not the fastest. Their ease of use and\nexpressiveness come at a speed cost. So we will need to switch to something faster. We will do the\nsame to read in the data.</p>\n<p>This faster solution is the <code>{arrow}</code> package, which is an interface to the\n<a href=\"https://arrow.apache.org/faq/\" rel=\"nofollow\" target=\"_blank\">Arrow software developed by Apache</a>.</p>\n<p>The final strategy is to enable caching in the app.</p>\n<p>So first, install the <code>{arrow}</code> package by running <code>install.packages(\"arrow\")</code>. This will compile\n<code>libarrow</code> from source on Linux and might take some time, so perhaps go grab a coffee. One other\noperating systems, I guess that a binary version gets installed.</p>\n<p>Before building the app, let me perform a very simple benchmark. The script below reads in the data,\nthen performs some aggregations. This is done using standard <code>{tidyverse}</code> functions, but also\nusing <code>{arrow}</code>:</p>\n<pre>start_tidy <- Sys.time()\n  # {vroom} is able to read in larger files than {readr}\n  # I could not get this file into R using readr::read_csv\n  # my RAM would get maxed out\n  air <- vroom::vroom(\"data/combined\")\n\n  mean_dep_delay <- air |>\n    dplyr::group_by(Year, Month, DayofMonth) |>\n    dplyr::summarise(mean_delay = mean(DepDelay, na.rm = TRUE))\nend_tidy <- Sys.time()\n\ntime_tidy <- end_tidy - start_tidy\n\n\nstart_arrow <- Sys.time()\n  air <- arrow::open_dataset(\"data/combined\", format = \"csv\")\n\n  mean_dep_delay <- air |>\n    dplyr::group_by(Year, Month, DayofMonth) |>\n    dplyr::summarise(mean_delay = mean(DepDelay, na.rm = TRUE))\nend_arrow <- Sys.time()\n\nend_tidy - start_tidy\nend_arrow - start_arrow</pre>\n<p>The “tidy” approach took 17 seconds, while the arrow approach took 6 seconds. This is an impressive\nimprovement, but put yourself in the shoes of a user who has to wait 6 seconds for each query. That\nwould get very annoying, very quickly. So the other strategy that we will use is to provide some visual\ncue that computations are running, and then we will go one step further and use caching of results\nin the Shiny app.</p>\n<p>But before we continue, you may be confused by the code above. After all, I told you before that\nfunctions from <code>{dplyr}</code> and the like were not the fastest, and yet, I am using them in the arrow\napproach as well, and they now run almost 3 times as fast. What’s going on? What’s happening here,\nis that the <code>air</code> object that we read using <code>arrow::open_dataset</code> is not a dataframe, but an <code>arrow</code>\ndataset. These are special, and work in a different way. But that’s not what’s important: what’s important\nis that the <code>{dplyr}</code> api can be used to work with these <code>arrow</code> datasets. This means that functions\nfrom <code>{dplyr}</code> change the way they work depending on the type of the object their dealing with.\nIf it’s a good old regular data frame, some C++ code gets called to perform the computations. If it’s\nan <code>arrow</code> dataset, <code>libarrow</code> and its black magic get called instead to perform the computations.\nIf you’re familiar with the concept of\n<a href=\"https://en.wikipedia.org/wiki/Polymorphism_(computer_science)\" rel=\"nofollow\" target=\"_blank\">polymorphism</a> this is it\n(think of <code>+</code> in Python: <code>1+1</code> returns <code>2</code>, <code>\"a\"+\"b\"</code> returns <code>\"a+b\"</code>. A different computation\ngets performed depending on the type of the function’s inputs).</p>\n<p>Let’s now build a basic version of the app, only\nusing <code>{arrow}</code> functions for speed. This is the global file:</p>\n<pre>library(arrow)\nlibrary(dplyr)\nlibrary(rlang)\nlibrary(DT)\n\nair <- arrow::open_dataset(\"data/combined\", format = \"csv\")</pre>\n<p>The ui will be quite simple:</p>\n<pre>ui <- function(request){\n  fluidPage(\n\n    titlePanel(\"Air On Time data\"),\n\n    sidebarLayout(\n\n      sidebarPanel(\n        selectizeInput(\"group_by_selected\", \"Variables to group by:\",\n                       choices = c(\"Year\", \"Month\", \"DayofMonth\", \"Origin\", \"Dest\"),\n                       multiple = TRUE,\n                       selected = c(\"Year\", \"Month\"),\n                       options = list(\n                         plugins = list(\"remove_button\"),\n                         create = TRUE,\n                         persist = FALSE # keep created choices in dropdown\n                       )\n                       ),\n        hr(),\n        selectizeInput(\"var_to_average\", \"Select variable to average by groups:\",\n                       choices = c(\"ArrDelay\", \"DepDelay\", \"Distance\"),\n                       multiple = FALSE,\n                       selected = \"DepDelay\",\n                       ),\n        hr(),\n        actionButton(inputId = \"run_aggregation\",\n                     label = \"Click here to run aggregation\"),\n        hr(),\n        bookmarkButton()\n      ),\n\n      mainPanel(\n        DTOutput(\"result\")\n      )\n    )\n  )\n\n}</pre>\n<p>And finally the server:</p>\n<pre>server <- function(session, input, output) {\n\n  # Numbers get crunched only when the user clicks on the action button\n  grouped_data <- eventReactive(input$run_aggregation, {\n    air %>%\n      group_by(!!!syms(input$group_by_selected)) %>%\n      summarise(result = mean(!!sym(input$var_to_average),\n                              na.rm = TRUE)) %>%\n      as.data.frame()\n  })\n\n  output$result <- renderDT({\n    grouped_data()\n  })\n\n}</pre>\n<p>Because <code>group_by()</code> and <code>mean()</code> expect bare variable names, I convert them from strings to\nsymbols using <code>rlang::syms()</code> and <code>rlang::sym()</code>. The difference between the two is that\n<code>rlang::syms()</code> is required when a list of strings gets passed down to the function (remember\nthat the user must select several variables to group by), and this is also why <code>!!!</code> are needed\n(to unquote the list of symbols). Finally, the computed data must be converted back to a\ndata frame using <code>as.data.frame()</code>. This is actually when the computations happen. <code>{arrow}</code> collects\nall the aggregations but does not perform anything until absolutely required. Let’s see the app\nin action:</p>\n<div style=\"text-align:center;\">\n<video width=\"450\" controls>\n<source src=\"https://www.brodrigues.co/img/shiny_3.mp4\" type=\"video/mp4\">\n</video>\n</div>\n<p>As you can see, in terms of User Experience (UX) this is quite poor. When the user clicks on the button\nnothing seems to be going on for several seconds, until the table appears. Then, when the user\nchanges some options and clicks again on the action button, it looks like the app is crashing.</p>\n<p>Let’s add some visual cues to indicate to the user that something is happening when the button gets\nclicked. For this, we are going to use the <code>{shinycssloaders}</code> package:</p>\n<pre>install.packages(\"shinycssloaders\")</pre>\n<p>and simply change the ui to this (and don’t forget to load <code>{shinycssloaders}</code> in the global script!):</p>\n<pre>ui <- function(request){\n  fluidPage(\n\n    titlePanel(\"Air On Time data\"),\n\n    sidebarLayout(\n\n      sidebarPanel(\n        selectizeInput(\"group_by_selected\", \"Variables to group by:\",\n                       choices = c(\"Year\", \"Month\", \"DayofMonth\", \"Origin\", \"Dest\"),\n                       multiple = TRUE,\n                       selected = c(\"Year\", \"Month\"),\n                       options = list(\n                         plugins = list(\"remove_button\"),\n                         create = TRUE,\n                         persist = FALSE # keep created choices in dropdown\n                       )\n                       ),\n        hr(),\n        selectizeInput(\"var_to_average\", \"Select variable to average by groups:\",\n                       choices = c(\"ArrDelay\", \"DepDelay\", \"Distance\"),\n                       multiple = FALSE,\n                       selected = \"DepDelay\",\n                       ),\n        hr(),\n        actionButton(inputId = \"run_aggregation\",\n                     label = \"Click here to run aggregation\"),\n        hr(),\n        bookmarkButton()\n      ),\n\n      mainPanel(\n        # We add a tabsetPanel with two tabs. The first tab show the plot made using ggplot\n        # the second tab shows the plot using g2r\n        DTOutput(\"result\") |>\n          withSpinner()\n      )\n    )\n  )\n\n}</pre>\n<p>The only difference with before is that now the <code>DTOutput()</code> right at the end gets passed down\nto <code>withSpinner()</code>. There are several spinners that you can choose, but let’s simply use the\ndefault one. This is how the app looks now:</p>\n<div style=\"text-align:center;\">\n<video width=\"450\" controls>\n<source src=\"https://www.brodrigues.co/img/shiny_4.mp4\" type=\"video/mp4\">\n</video>\n</div>\n<p>Now the user gets a visual cue that something is happening. This makes waiting more bearable,\nbut even better than waiting with a spinner is no waiting at all. For this, we are going to enable caching\nof results. There are several ways that you can cache results inside your app. You can enable\nthe cache on a per-user and per-session basis, or only on a per-user basis. But I think that\nin our case here, the ideal caching strategy is to keep the cache persistent, and available\nacross sessions. This means that each computation done by any user will get cached and available\nto any other user. In order to achieve this, you simply have to install the <code>{cachem}</code> packages\nadd the following lines to the global script:</p>\n<pre>shinyOptions(cache = cachem::cache_disk(\"./app-cache\",\n                                        max_age = Inf))</pre>\n<p>By setting the <code>max_age</code> argument to <code>Inf</code>, the cache will never get pruned. The maximum size\nof the cache, by default is 1GB. You can of course increase it.</p>\n<p>Now, you must also edit the server file like so:</p>\n<pre>server <- function(session, input, output) {\n\n  # Numbers get crunched only when the user clicks on the action button\n  grouped_data <- reactive({\n    air %>%\n      group_by(!!!syms(input$group_by_selected)) %>%\n      summarise(result = mean(!!sym(input$var_to_average),\n                              na.rm = TRUE)) %>%\n      as.data.frame()\n  }) %>%\n    bindCache(input$group_by_selected,\n              input$var_to_average) %>%\n    bindEvent(input$run_aggregation)\n\n  output$result <- renderDT({\n    grouped_data()\n  })\n\n}</pre>\n<p>We’ve had to change <code>eventReactive()</code> to <code>reactive()</code>, just like in the app where we don’t use an\naction button to run computations (note of the author: in the ebook, there is an example of an app\nwith this action button. This is what I’m referring to here). Then, we pass the reactive object to\n<code>bindCache()</code>. <code>bindCache()</code> also takes the <code>inputs</code> as arguments. These are used to generate cache\nkeys to retrieve the correct objects from cache. Finally, we pass all this to <code>bindEvent()</code>. This\nfunction takes the input referencing the action button. This is how we can now bind the\ncomputations to the button once again. Let’s test our app now. You will notice that the first time\nwe choose certain options, the computations will take time, as before. But if we perform the same\ncomputations again, then the results will be shown instantly:</p>\n<div style=\"text-align:center;\">\n<video width=\"450\" controls>\n<source src=\"https://www.brodrigues.co/img/shiny_5.mp4\" type=\"video/mp4\">\n</video>\n</div>\n<p>As you can see, once I go back to a computation that was done in the past, the table appears\ninstantly. At the end of the video I open a terminal and navigate to the directory of the app,\nand show you the cache. There are several <code>.Rds</code> objects, these are the final data frames that\nget computed by the app. If the user wants to rerun a previous computation, the correct data frame\ngets retrieved, making it look like the computation happened instantly, and with another added\nbenefit: as discussed above, the cache is persistent between sessions, so even if the user\ncloses the browser and comes back later, the cache is still there, and other users will also\nbenefit from the cache.</p>\n<p>\nHope you enjoyed! If you found this blog post useful, you might want to follow\nme on <a href=\"https://fosstodon.org/@brodriguesco\" rel=\"nofollow\" target=\"_blank\">Mastodon</a> or <a href=\"https://www.twitter.com/brodriguesco\" rel=\"nofollow\" target=\"_blank\">twitter</a> for blog post updates and\n<a href=\"https://www.buymeacoffee.com/brodriguesco\" rel=\"nofollow\" target=\"_blank\">buy me an espresso</a> or <a href=\"https://www.paypal.me/brodriguesco\" rel=\"nofollow\" target=\"_blank\">paypal.me</a>, or buy my ebook on <a href=\"https://leanpub.com/modern_tidyverse\" rel=\"nofollow\" target=\"_blank\">Leanpub</a>.\nYou can also watch my videos on <a href=\"https://www.youtube.com/c/BrunoRodrigues1988/\" rel=\"nofollow\" target=\"_blank\">youtube</a>.\nSo much content for you to consoom!\n</p>\n<style>.bmc-button img{width: 27px !important;margin-bottom: 1px !important;box-shadow: none !important;border: none !important;vertical-align: middle !important;}.bmc-button{line-height: 36px !important;height:37px !important;text-decoration: none !important;display:inline-flex !important;color:#ffffff !important;background-color:#272b30 !important;border-radius: 3px !important;border: 1px solid transparent !important;padding: 1px 9px !important;font-size: 22px !important;letter-spacing:0.6px !important;box-shadow: 0px 1px 2px rgba(190, 190, 190, 0.5) !important;-webkit-box-shadow: 0px 1px 2px 2px rgba(190, 190, 190, 0.5) !important;margin: 0 auto !important;font-family:'Cookie', cursive !important;-webkit-box-sizing: border-box !important;box-sizing: border-box !important;-o-transition: 0.3s all linear !important;-webkit-transition: 0.3s all linear !important;-moz-transition: 0.3s all linear !important;-ms-transition: 0.3s all linear !important;transition: 0.3s all linear !important;}.bmc-button:hover, .bmc-button:active, .bmc-button:focus {-webkit-box-shadow: 0px 1px 2px 2px rgba(190, 190, 190, 0.5) !important;text-decoration: none !important;box-shadow: 0px 1px 2px 2px rgba(190, 190, 190, 0.5) !important;opacity: 0.85 !important;color:#82518c !important;}</style>\n<p>\n<link href=\"https://fonts.googleapis.com/css?family=Cookie\" rel=\"stylesheet\"><a class=\"bmc-button\" href=\"https://www.buymeacoffee.com/brodriguesco\" rel=\"nofollow\" target=\"_blank\"><img src=\"https://www.buymeacoffee.com/assets/img/BMC-btn-logo.svg\" alt=\"Buy me an Espresso\"><span style=\"margin-left:5px\">Buy me an Espresso</span></a>\n</p>\n</div>\n\n<div style=\"border: 1px solid; background: none repeat scroll 0 0 #EDEDED; margin: 1px; font-size: 13px;\">\n<div style=\"text-align: center;\">To <strong>leave a comment</strong> for the author, please follow the link and comment on their blog: <strong><a href=\"https://www.brodrigues.co/blog/2022-10-31-optim_shiny/\"> Econometrics and Free Software</a></strong>.</div>\n<hr />\n<a href=\"https://www.r-bloggers.com/\" rel=\"nofollow\">R-bloggers.com</a> offers <strong><a href=\"https://feedburner.google.com/fb/a/mailverify?uri=RBloggers\" rel=\"nofollow\">daily e-mail updates</a></strong> about <a title=\"The R Project for Statistical Computing\" href=\"https://www.r-project.org/\" rel=\"nofollow\">R</a> news and tutorials about <a title=\"R tutorials\" href=\"https://www.r-bloggers.com/how-to-learn-r-2/\" rel=\"nofollow\">learning R</a> and many other topics. <a title=\"Data science jobs\" href=\"https://www.r-users.com/\" rel=\"nofollow\">Click here if you're looking to post or find an R/data-science job</a>.\n\n<hr>Want to share your content on R-bloggers?<a href=\"https://www.r-bloggers.com/add-your-blog/\" rel=\"nofollow\"> click here</a> if you have a blog, or <a href=\"http://r-posts.com/\" rel=\"nofollow\"> here</a> if you don't.\n</div><strong>Continue reading</strong>: <a href=\"https://www.r-bloggers.com/2022/10/how-to-deal-with-annoying-medium-sized-data-inside-a-shiny-app/\">How to deal with annoying medium sized data inside a Shiny app</a>",
  "enclosure": [
    "",
    "",
    "",
    ""
  ],
  "post-id": 334049
}