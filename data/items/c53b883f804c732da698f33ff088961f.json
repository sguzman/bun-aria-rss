{
  "title": "Agnez, analytics for deep learning research",
  "link": "http://edersantana.github.io/articles/agnez/",
  "pubDate": "Thu, 24 Dec 2015 13:00:00 -0500",
  "guid": "http://edersantana.github.io/articles/agnez/",
  "author": "",
  "description": "<p>Machine learning is about writing programs with parameters that are learned from\ndata. But writing the base\narchitecture that will be learned requires intuition, inspection, trial, and\nerror, all elements that can be enhanced with high quality visualization\nand analytics tools.</p>\n<p><span class=\"more\"></span></p>\n<p>Building visualization and analytics tools to assist deep learning (and machine\nlearning in general) development was what motivated my brother <a href=\"http://edersantana.github.io/articles/agnez/tiag0santana.github.io\">Tiago\nSantana</a> and I to start\n<a href=\"http://github.com/AgnezIO\">Agnez</a>, a\ncollection of visualization tools for deep learning.\nModels used for deep learning can be seen a business where the architecture and\nhyperparameters are the business choices and the accuracy or error in the test\nset a measure of business success. Keeping that metaphor in mind we looked for\ncompanies such as Keen IO and projects such as the \n<a href=\"http://edersantana.github.io/articles/agnez/www.automaticstatistician.com\">Automatic Statistician</a> for\ninspiration to build research analytics and visualization tools. </p>\n<p>Here we will describe our approach to serve the visualizations as a web app\nusing <a href=\"http://edersantana.github.io/articles/agnez/feathersjs.com\">Feathers.js</a> in the backend and <a href=\"http://edersantana.github.io/articles/agnez/github.com/keenlabs/dashboards\">Keen Dashboards</a>\nin the frontend. For generating the graphs we are using a temporary solution\nbased on <a href=\"http://edersantana.github.io/articles/agnez/mpld3.github.io\">mpld3</a> that converts Matplotlib graphs to D3. The\nfull code is on <a href=\"http://edersantana.github.io/articles/agnez/github.com/AgnezIO/minimal-app\">minimal-app</a> repository.\nA schematic diagram of our architecture is shown in the figure below.</p>\n<p><img src=\"/articles/agnez/drawing2.png\" alt=\"Figure 1\"></p>\n<p>We wanted to generate beautifully organized dashboards and we noticed that Keen Dashboards\nalready lifted most of the design weight. But as an originally Python developer,\nI suggested to keep\nMatplotlib’s subplot arrangement and \nflexibility without needing to rewrite html ourselves. An elegant solution to this\nproblem would be to generate the dashboards dynamically using a REST API. We chose to develop\nthe API with Feathers.js,\na thin wrapper around Express.js for building real time REST\nAPIs with Node.js. This is what we needed to start a simple to use and general API for\nhandling, storing and plotting model analytics.\nIn coffeescript and using NeDB as the database, our\nFeathers app is simply:</p>\n<pre><code class=\"lang-coffeescript\">feathers = <span class=\"built_in\">require</span> <span class=\"string\">'feathers'</span>\nmongodb = <span class=\"built_in\">require</span>(<span class=\"string\">'feathers-mongodb'</span>)\nmemory = mongodb {\n  <span class=\"attribute\">db</span>: <span class=\"string\">'edermempy'</span>\n  <span class=\"attribute\">collection</span>: <span class=\"string\">'values'</span>\n}\n\nbodyParser = <span class=\"built_in\">require</span> <span class=\"string\">'body-parser'</span>\napp = feathers()\n\napp.configure feathers.rest()\n  .configure feathers.socketio()\n  .use bodyParser.json()\n  .use <span class=\"string\">'/values'</span>, memory\n  .use <span class=\"string\">'/'</span>, feathers.static(__dirname)\n  .listen <span class=\"number\">3000</span>\n\n<span class=\"built_in\">console</span>.log <span class=\"string\">'App listening on port 3000\nconsole.log '</span>Index at<span class=\"string\">', __dirname+'</span><span class=\"regexp\">/static/</span><span class=\"string\">'</span>\n</code></pre>\n<p>All the hard work is handled by <a href=\"http://edersantana.github.io/articles/agnez/\">feathers-nedb</a> CRUD and <a href=\"http://edersantana.github.io/articles/agnez/\">feathers-client</a> that\nuses socket.io to update the browser client in real time. The machine\nlearning client training our model with Python sends POST\nrequests to the server. These requests trigger events in the server that\nupdates the browser page. For this simple demo, our Python client will send html\nstrings generated with mpld3 and a gif. When training a deep learning model the\nhtml string would be graphs of cost functions, accuracy, weight norms and other\nuseful analytics. As we mentioned this is a simple temporary solution for\nillustration purposes, it would be more general to use a native D3 chart,\npatch the graphs in the browser side and only send numbers from the machine\nlearning side. Nevertheless, deep learning epochs, or passes through the\ntraining datasets, usually\ntake a few seconds (or even minutes and hours depending on how large the training dataset is)\nand sending html strings does not add a considerable overhead.</p>\n<p>The index.html is pretty minimal since everything will be generated dynamically\nwhen we send data using the API. We start with a simple <code>&lt;div id=dashboard&gt;</code>\nand add new Bootstrap rows later. <code>script.coffee</code> in the server has a basic\nKeen Dashboard cell as follows:</p>\n<pre><code class=\"lang-coffeescript\">String.prototype.format = <span class=\"function\">-&gt;</span>\n  args = arguments\n  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.replace <span class=\"regexp\">/{(\\d+)}/g</span>, <span class=\"function\"><span class=\"params\">(match, number)</span> -&gt;</span>\n    <span class=\"keyword\">return</span> <span class=\"keyword\">if</span> <span class=\"keyword\">typeof</span> args[number] <span class=\"keyword\">isnt</span> <span class=\"string\">'undefined'</span> <span class=\"keyword\">then</span> args[number] <span class=\"keyword\">else</span> match\n\ncellstr = <span class=\"string\">\"\"\"\n  &lt;div class=\"col-sm-6\"&gt;\n    &lt;div class=\"chart-wrapper\"&gt;\n      &lt;div class=\"chart-title\" id=title{1}&gt;\n        {0} \n      &lt;/div&gt;\n      &lt;div class=\"chart-stage\" id=\"grid{1}\"&gt;\n        {2} \n      &lt;/div&gt;\n      &lt;div class=\"chart-notes\" id=\"description{1}\"&gt;\n        {3} \n      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n\"\"\"</span>\n</code></pre>\n<p>With this code we can fill the placeholders using a Python inspired syntax:\n<code>&quot;dat {0} is {1}&quot;.format &quot;string&quot;, &quot;cool&quot;</code> which returns <code>&quot;dat string is cool&quot;</code>.\nWhen creating a new cell, we simply append the filled string to <code>#dashboard</code>‘s html.\nWhen the html string or an image URL is patched,\nwe update that dashboard cell using the snippet below:</p>\n<pre><code class=\"lang-coffeescript\">values.<span class=\"literal\">on</span> <span class=\"string\">'patched'</span>, <span class=\"function\"><span class=\"params\">(val)</span> -&gt;</span>\n  <span class=\"built_in\">console</span>.log <span class=\"string\">'patching'</span>, val.name\n  $grid = $ <span class=\"string\">\"#grid<span class=\"subst\">#{val.pos}</span>\"</span>\n  $title = $ <span class=\"string\">\"#title<span class=\"subst\">#{val.pos}</span>\"</span>\n  $description = $ <span class=\"string\">\"#description<span class=\"subst\">#{val.pos}</span>\"</span>\n\n  $title.html val.name\n  $description.html val.description\n  <span class=\"keyword\">if</span> val.type <span class=\"keyword\">is</span> <span class=\"string\">\"html\"</span>\n    $grid.html val.value\n  <span class=\"keyword\">if</span> val.type <span class=\"keyword\">is</span> <span class=\"string\">\"img\"</span>\n    $grid.html <span class=\"string\">\"&lt;img src='<span class=\"subst\">#{val.value}</span>'&gt;\"</span>\n</code></pre>\n<p>To test the app, we use the Python script ahead.</p>\n<pre><code class=\"lang-python\"><span class=\"comment\"># Remember that we are using feathers database CRUD</span>\n\n<span class=\"comment\"># Allocate cell space in the dashboard by calling the CREATE method </span>\nurl = <span class=\"string\">\"./images/main_img.gif\"</span>\nr = requests.post(<span class=\"string\">\"http://localhost:3000/values\"</span>,\n                  json={<span class=\"string\">'name'</span>: <span class=\"string\">''</span>, <span class=\"string\">'type'</span>: <span class=\"string\">'html'</span>, <span class=\"string\">'value'</span>: [], <span class=\"string\">'pos'</span>: <span class=\"number\">0</span>,\n                        <span class=\"string\">'description'</span>: <span class=\"string\">''</span>})\nid0 = json.loads(r.text)[<span class=\"string\">\"_id\"</span>]\nr = requests.post(<span class=\"string\">\"http://localhost:3000/values\"</span>,\n                  json={<span class=\"string\">'name'</span>: <span class=\"string\">''</span>, <span class=\"string\">'type'</span>: <span class=\"string\">'img'</span>, <span class=\"string\">'value'</span>: [], <span class=\"string\">'pos'</span>: <span class=\"number\">1</span>,\n                        <span class=\"string\">'description'</span>: <span class=\"string\">''</span>})\nid1 = json.loads(r.text)[<span class=\"string\">\"_id\"</span>]\nfig = plt.figure()\nnumbers = []\n\n<span class=\"comment\"># Update the cell html calling the PATCH method</span>\n<span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">100</span>):\n    time.sleep(<span class=\"number\">2</span>) <span class=\"comment\"># simulate wait time of an epoch</span>\n    plt.clf()\n    numbers.append(random.random()) <span class=\"comment\"># new value</span>\n    plt.plot(numbers)\n    <span class=\"keyword\">if</span> len(numbers) &gt; <span class=\"number\">20</span>:\n        <span class=\"keyword\">del</span> numbers[<span class=\"number\">0</span>] <span class=\"comment\"># delete old values</span>\n    html = mpld3.fig_to_html(fig) <span class=\"comment\"># convert matplotlib to d3</span>\n    <span class=\"comment\"># PATCH requests</span>\n    r = requests.patch(<span class=\"string\">\"http://localhost:3000/values/\"</span> + str(id0),\n                       json={<span class=\"string\">'name'</span>: <span class=\"string\">'test1'</span>, <span class=\"string\">'type'</span>: <span class=\"string\">'html'</span>, <span class=\"string\">'value'</span>: html,\n                             <span class=\"string\">'pos'</span>: <span class=\"number\">0</span>, <span class=\"string\">'description'</span>: <span class=\"string\">'simple test'</span>})\n    r = requests.patch(<span class=\"string\">\"http://localhost:3000/values/\"</span> + str(id1),\n                       json={<span class=\"string\">'name'</span>: <span class=\"string\">'test2'</span>, <span class=\"string\">'type'</span>: <span class=\"string\">'img'</span>, <span class=\"string\">'value'</span>: url,\n                             <span class=\"string\">'pos'</span>: <span class=\"number\">1</span>, <span class=\"string\">'description'</span>: <span class=\"string\">'simple image'</span>})\n    <span class=\"keyword\">print</span> r\n</code></pre>\n<p>Note that since REST APIs are universal, we could send pictures and graphs with any\nother language. In the next iteration of this app, using native D3 charts\ngenerated in the browser side we\nwill make even easier to serve visualizations in a way that is language agnostic to the\nmachine learning side (Lua and C++ are also popular for deep learning). </p>\n<p>For those interested in playing with this code, from the source root directory run</p>\n<pre><code class=\"lang-shell\">coffee app.coffee\n</code></pre>\n<p>to start up the app and run</p>\n<pre><code class=\"lang-shell\">python test.py\n</code></pre>\n<p>to send data using the API. We can see the results at <a href=\"http://localhost:3000\">http://localhost:3000</a>\nand <a href=\"http://localhost:3000/values\">https://localhost:3000/values</a></p>\n<p>If you are training a deep learning model with Keras you can run the app and\nuse the Keras callbacks we provide, as in this\n<a href=\"https://github.com/AgnezIO/agnez/blob/master/examples/MNIST.ipynb\">example</a>.</p>\n<p>Since Agnez is an young project, we are expecting it evolve quickly. Help,\nsuggestions and feedback are welcome.</p>"
}