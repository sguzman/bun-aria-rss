{
  "title": "Try Caffe pre-installed on a VirtualBox image",
  "link": "",
  "published": "2016-03-22T15:02:00-07:00",
  "updated": "2016-03-22T15:02:00-07:00",
  "author": {
    "name": "Cathy Yeh"
  },
  "id": "tag:efavdb.com,2016-03-22:/caffe-virtualbox",
  "summary": "<p>A previous <a href=\"http://efavdb.github.io/deep-learning-with-jupyter-on-aws\">post</a> showed beginners how to try out deep learning libraries&nbsp;by</p>\n<ol>\n<li>using an Amazon Machine Image (<span class=\"caps\">AMI</span>) pre-installed with deep learning&nbsp;libraries</li>\n<li>setting up a Jupyter notebook server to play with said&nbsp;libraries</li>\n</ol>\n<p>If you have VirtualBox and <a href=\"https://www.vagrantup.com/\">Vagrant</a>, you can follow a similar procedure on your own …</p>",
  "content": "<p>A previous <a href=\"http://efavdb.github.io/deep-learning-with-jupyter-on-aws\">post</a> showed beginners how to try out deep learning libraries&nbsp;by</p>\n<ol>\n<li>using an Amazon Machine Image (<span class=\"caps\">AMI</span>) pre-installed with deep learning&nbsp;libraries</li>\n<li>setting up a Jupyter notebook server to play with said&nbsp;libraries</li>\n</ol>\n<p>If you have VirtualBox and <a href=\"https://www.vagrantup.com/\">Vagrant</a>, you can follow a similar procedure on your own computer. The advantage is that you can develop locally, then deploy on an expensive <span class=\"caps\">AWS</span> <span class=\"caps\">EC2</span> gpu instance when your scripts are&nbsp;ready.</p>\n<p>For example, <a href=\"http://caffe.berkeleyvision.org/\">Caffe</a>, the machine vision framework, allows you to seamlessly transition between cpu- and gpu-mode, and is available as a <a href=\"https://atlas.hashicorp.com/malthejorgensen/boxes/caffe-deeplearning\">vagrant box</a> running Ubuntu 14.04 (<a href=\"#virtualization\">**</a>64-bit), with Caffe&nbsp;pre-installed.</p>\n<p>To add the box, type on the command line:\n<code>vagrant box add malthejorgensen/caffe-deeplearning</code></p>\n<p>If you don&#8217;t already have VirtualBox and Vagrant installed, you can find instructions online, or look at my <a href=\"#vagrant_install\">dotfiles</a> to get an&nbsp;idea.</p>\n<hr>\n<h2>Gotchas</h2>\n<h3><span class=\"caps\">SSH</span> authentication&nbsp;failure</h3>\n<p>For me, the box had the wrong public key in <code>/home/vagrant/.ssh/authorized_keys file</code>, which gave me “authentication failure” upon starting up the box with <code>vagrant up</code>. This was fixed&nbsp;by:</p>\n<p>Manually ssh into the box: <code>vagrant ssh</code>.</p>\n<p>Then type (key taken from <a href=\"https://raw.githubusercontent.com/mitchellh/vagrant/master/keys/vagrant.pub\">here</a>):</p>\n<div class=\"highlight\"><pre><span></span><span class=\"nb\">echo</span> <span class=\"s2\">&quot;ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEA6NF8iallvQVp22WDkTkyrtvp9eWW6A8YVr+kz4TjGYe7gHzIw+niNltGEFHzD8+v1I2YJ6oXevct1YeS0o9HZyN1Q9qgCgzUFtdOKLv6IedplqoPkcmF0aYet2PkEDo3MlTBckFXPITAMzF8dJSIFo9D8HfdOV0IAdx4O7PtixWKn5y2hMNG0zQPyUecp4pzC6kivAIhyfHilFR61RGL+GPXQ2MWZWFYbAGjyiYJnAmCP3NOTd0jMZEnDkbUvxhMmBYSdETk1rRgm+R4LOzFUGaHqHDLKLX+FIPKcF96hrucXzcWyLbIbEgE98OHlnVYCzRdK8jlqm8tehUc9c9WhQ== vagrant insecure public key&quot;</span> &gt; ~/.ssh/authorized_keys\n</pre></div>\n\n\n<p>Log out of the box, reload the box with <code>vagrant reload</code>, and hopefully the ssh authentication error is&nbsp;fixed.</p>\n<h3>Jupyter notebook&nbsp;server</h3>\n<p>By default, the box has a notebook server on port 8003 that starts up from the /home/vagrant/caffe/examples directory, to be used in conjunction with port forwarding set in the Vagrant file:\n<code>config.vm.network \"forwarded_port\", guest: 8003, host: 8003</code>\nWith the default setup, go to <code>http://localhost:8003</code> in your browser to access&nbsp;/home/vagrant/caffe/examples.</p>\n<p>The default server setup limits access to only /home/vagrant/caffe/examples, so I prefer to set up my own configuration of the jupyter notebook server on port 8888 (allowing port forwarding of port 8888 in the Vagrantfile as well) and then start up the server from /home/vagrant, or wherever I&#8217;m working. To do&nbsp;this,</p>\n<p>Log in to the box: <code>vagrant ssh</code></p>\n<p>Then create the notebook config file <code>~/.jupyter/jupyter_notebook_config.py</code> containing the following&nbsp;lines:</p>\n<div class=\"highlight\"><pre><span></span><span class=\"err\">c.NotebookApp.ip = &#39;*&#39;</span>\n<span class=\"err\">c.NotebookApp.open_browser = False</span>\n<span class=\"err\">c.NotebookApp.port = 8888</span>\n</pre></div>\n\n\n<h3>Vagrantfile</h3>\n<p>Here&#8217;s the vagrant file that worked for&nbsp;me:</p>\n<hr>\n<ul>\n<li>Scripts to <a href=\"https://github.com/frangipane/.dotfiles/blob/master/install/apt-get.sh\">install Virtualbox</a> (line 31 and onwards) and <a href=\"https://github.com/frangipane/.dotfiles/blob/master/install/install-vagrant.sh\">install Vagrant</a>.</li>\n</ul>\n<p>** This is a 64-bit box, so you need to have Intel <span class=\"caps\">VT</span>-x enabled in your <span class=\"caps\">BIOS</span>.</p>",
  "category": [
    "",
    "",
    "",
    "",
    ""
  ]
}