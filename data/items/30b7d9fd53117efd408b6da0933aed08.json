{
  "title": "e019: Let's `Clone` a `Cow`",
  "link": "https://newrustacean.com/show_notes/e019/",
  "description": "<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"generator\" content=\"pandoc\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\">\n  <title></title>\n  <style type=\"text/css\">code{white-space: pre;}</style>\n  <!--[if lt IE 9]>\n    <script src=\"//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js\"></script>\n  <![endif]-->\n</head>\n<body>\n<p>The final pieces of the story for (single-threaded) memory management in Rust.</p>\n<h2 id=\"notes\">Notes</h2>\n<p>Sometimes, we actually <em>do</em> need to copy types. Wouldn't it be nice if Rust gave us a convenient way to do that when it's convenient, or when the cost is low enough that the ergonomic tradeoffs are worth it? Well, perhaps unsurprisingly, it does! The <code>Copy</code> and <code>Clone</code> traits, plus the <code>Cow</code> type, give us everything we need!</p>\n<h2 id=\"links\">Links</h2>\n<ul>\n<li><p><a href=\"https://underhanded.rs/\">underhanded.rs</a></p></li>\n<li><p>The typess</p>\n<ul>\n<li><p><a href=\"https://doc.rust-lang.org/stable/std/marker/trait.Copy.html\"><code>std::marker::Copy</code></a></p>\n<ul>\n<li><p><a href=\"https://doc.rust-lang.org/book/ownership.html#copy-types\">\"<code>Copy</code> types\" in the book</a></p></li>\n<li><p><a href=\"http://rust-lang.github.io/book/ch04-01-what-is-ownership.html#stack-only-data-copy\">\"Stack-Only Data: Copy\" in the new book</a></p></li>\n<li><p><a href=\"https://doc.rust-lang.org/reference.html#moved-and-copied-types\">7.2.0.2 Moved and copied types</a>:</p>\n<blockquote>\n<p>When a local variable is used as an rvalue, the variable will be copied if its type implements <code>Copy</code>. All others are moved.</p>\n</blockquote></li>\n<li><p><a href=\"http://rust-lang.github.io/book/ch10-02-traits.html#fixing-the-largest-function-with-trait-bounds\">Extended example in \"Traits\" section of new book</a></p></li>\n</ul></li>\n<li><p><a href=\"https://doc.rust-lang.org/stable/std/clone/trait.Clone.html\"><code>std::clone::Clone</code></a></p></li>\n<li><p><a href=\"https://doc.rust-lang.org/stable/std/borrow/enum.Cow.html\"><code>std::borrow::Cow</code></a></p></li>\n</ul></li>\n<li><p>Default implementations</p>\n<ul>\n<li><p><a href=\"https://doc.rust-lang.org/book/traits.html#default-methods\">discussion in the current book</a></p></li>\n<li><p><a href=\"http://rust-lang.github.io/book/ch10-02-traits.html#default-implementations\">discussion in the new book</a></p></li>\n</ul></li>\n<li><p>Supertraits</p>\n<ul>\n<li><p>from the discussion in the reference (<a href=\"https://doc.rust-lang.org/reference.html#traits\">6.1.9 Traits</a>):</p>\n<blockquote>\n<p>Traits may inherit from other traits.... The syntax <code>Circle : Shape</code> means that types that implement <code>Circle</code> must also have an implementation for <code>Shape</code>. Multiple supertraits are separated by <code>+</code>, trait <code>Circle : Shape + PartialEq { }</code>. In an implementation of <code>Circle</code> for a given type <code>T</code>, methods can refer to <code>Shape</code> methods, since the typechecker checks that any type with an implementation of <code>Circle</code> also has an implementation of <code>Shape</code>...</p>\n</blockquote></li>\n<li><p><a href=\"https://doc.rust-lang.org/book/traits.html#inheritance\">discussion of trait \"inheritance\" in the book</a></p></li>\n<li><p><a href=\"http://rust-lang.github.io/book/ch19-00-advanced-features.html\">discussion of trait super- and subtyping in the new book</a> (note: still to-be-written at the time this episode was published)</p></li>\n</ul></li>\n<li><p>Marker traits</p>\n<ul>\n<li><p><a href=\"https://doc.rust-lang.org/stable/std/marker/\"><code>std::marker</code></a></p></li>\n<li><p>in the reference: <a href=\"https://doc.rust-lang.org/reference.html#special-traits\">9 Special Traits</a></p></li>\n</ul></li>\n<li><p>Previous episodes on traits:</p>\n<ul>\n<li><p><a href=\"https://www.newrustacean.com/show_notes/e008/\">e008: Just like something else</a></p></li>\n<li><p><a href=\"https://www.newrustacean.com/show_notes/e009/\">e009: Composing a Rustic tune</a></p></li>\n</ul></li>\n</ul>\n<h2 id=\"sponsors\">Sponsors</h2>\n<ul>\n<li>Aleksey Pirogov</li>\n<li>Andreas Fischer</li>\n<li>Andrew Thompson</li>\n<li>Austin LeSure</li>\n<li>Ben Whitley</li>\n<li><a href=\"https://charlieegan3.com\">Charlie Egan</a></li>\n<li><a href=\"http://red-oxide.org/\">Chris Palmer</a></li>\n<li><a href=\"http://blog.cgiffard.com\">Christopher Giffard</a></li>\n<li><a href=\"https://twitter.com/daniel_collin\">Daniel Collin</a></li>\n<li><a href=\"https://twitter.com/derekmorr\">Derek Morr</a></li>\n<li><a href=\"https://github.com/Limeth\">Jakub \"Limeth\" Hlusi훾ka</a></li>\n<li>Jordan Henderson</li>\n<li><a href=\"https://de.linkedin.com/in/juppm\">Jupp M체ller</a></li>\n<li>Keith Gray</li>\n<li>Lachlan Collins</li>\n<li>Luca Schmid</li>\n<li>Matt Rudder</li>\n<li>Matthew Piziak</li>\n<li><a href=\"https://twitter.com/maxjacobson\">Max Jacobson</a></li>\n<li>Micael Bergeron</li>\n<li>Ovidiu Curcan</li>\n<li><a href=\"https://pascalhertleif.de/\">Pascal Hertleif</a></li>\n<li>Peter Tillemans</li>\n<li>Philipp Keller</li>\n<li>Ralph Giles (\"rillian\")</li>\n<li>Raph Levien</li>\n<li>reddraggone9</li>\n<li>Steven Murawski</li>\n<li>Stuart Hinson</li>\n<li>Tyler Harper</li>\n<li>Vesa Kaihlavirta</li>\n<li>Vlad Bezden</li>\n<li><a href=\"http://willroe.me\">William Roe</a></li>\n<li>Zaki</li>\n</ul>\n<p>(Thanks to the couple people donating who opted out of the reward tier, as well. You know who you are!)</p>\n<h3 id=\"become-a-sponsor\">Become a sponsor</h3>\n<ul>\n<li><a href=\"https://www.patreon.com/newrustacean\" rel=\"payment\">Patreon</a></li>\n<li><a href=\"https://venmo.com/chriskrycho\">Venmo</a></li>\n<li><a href=\"https://www.dwolla.com/hub/chriskrycho\">Dwolla</a></li>\n<li><a href=\"https://cash.me/$chriskrycho\">Cash.me</a></li>\n<li><a href=\"https://flattr.com/profile/chriskrycho\">Flattr</a></li>\n<li><a href=\"https://paypal.me/chriskrycho\">PayPal.me</a></li>\n</ul>\n<h2 id=\"contact\">Contact</h2>\n<ul>\n<li>New Rustacean:\n<ul>\n<li>Twitter: <a href=\"https://www.twitter.com/newrustacean\">@newrustacean</a></li>\n<li>Email: <a href=\"mailto:hello@newrustacean.com\">hello@newrustacean.com</a></li>\n</ul></li>\n<li>Chris Krycho\n<ul>\n<li>GitHub: <a href=\"https://github.com/chriskrycho\">chriskrycho</a></li>\n<li>Twitter: <a href=\"https://www.twitter.com/chriskrycho\">@chriskrycho</a></li>\n</ul></li>\n</ul>\n</body>\n</html>\n",
  "pubDate": "Tue, 28 Feb 2017 15:20:00 -0700",
  "enclosure": "",
  "guid": "A39AA3AC-EF1B-41B4-A0A1-F76676A74B1F",
  "itunes:author": "Chris Krycho",
  "itunes:summary": "The final pieces of the story for (single-threaded) memory management in Rust. Notes ----- Sometimes, we actually do need to copy types. Wouldn't it be nice if Rust gave us a convenient way to do that when it's convenient, or when the cost is low enough that the ergonomic tradeoffs are worth it? Well, perhaps unsurprisingly, it does! The Copy and Clone traits, plus the Cow type, give us everything we need! Sponsors -------- - Aleksey Pirogov - Andreas Fischer - Andrew Thompson - Austin LeSure - Ben Whitley - Charlie Egan - Chris Palmer - Christopher Giffard - Daniel Collin - Derek Morr - Jakub \"Limeth\" Hlusi훾ka - Jordan Henderson - Jupp M체ller - Keith Gray - Lachlan Collins - Luca Schmid - Matt Rudder - Matthew Piziak - [Max Jacobson] - Micael Bergeron - Ovidiu Curcan - Pascal Hertleif - Peter Tillemans - Philipp Keller - Ralph Giles (\"rillian\") - Raph Levien - reddraggone9 - Steven Murawski - Stuart Hinson - Tyler Harper - Vesa Kaihlavirta - Vlad Bezden - William Roe - Zaki (Thanks to the couple people donating who opted out of the reward tier, as well. You know who you are!) ### Become a sponsor - Patreon.com/newrustacean - Venmo.com/chriskrycho - Dwolla](https://www.dwolla.com/hub/chriskrycho - Cash.me/$chriskrycho - Flattr.com/profile/chriskrycho - PayPal.me/chriskrycho Contact ------- - New Rustacean: + Twitter: @newrustacean + Email: hello@newrustacean.com - Chris Krycho + GitHub: chriskrycho + Twitter: @chriskrycho",
  "itunes:duration": "18:11",
  "itunes:episodeType": "full"
}