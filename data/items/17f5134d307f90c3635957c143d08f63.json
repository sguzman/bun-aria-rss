{
  "id": "tag:drsimonj.svbtle.com,2014:Post/ggsem-plot-sem-models-with-ggplot2",
  "published": "2017-10-02T04:13:26-07:00",
  "updated": "2017-10-02T04:13:26-07:00",
  "link": "",
  "title": "ggplot2 SEM models with tidygraph and ggraph",
  "content": "<p><a href=\"https://twitter.com/drsimonj\" rel=\"nofollow\">@drsimonj</a> here to share a ggplot2-based function for plotting path analysis/structural equation models (SEM) fitted with <a href=\"http://lavaan.ugent.be/index.html\" rel=\"nofollow\">Yves Rosseel’s lavaan package</a>.</p>\n<h2 id=\"background_2\">Background <a class=\"head_anchor\" href=\"#background_2\" rel=\"nofollow\">#</a>\n</h2>\n<p>SEM and its related methods (path analysis, confirmatory factor analysis, etc.) can be visualized as Directed Acyclic Graphs with nodes representing variables (observed or latent), and edges representing the specified relationships between them. For this reason, we will use <a href=\"https://twitter.com/thomasp85\" rel=\"nofollow\">Thomas Lin Pedersen’s</a> <a href=\"https://github.com/thomasp85/tidygraph\" rel=\"nofollow\">tidygraph</a> and <a href=\"https://github.com/thomasp85/ggraph\" rel=\"nofollow\">ggraph</a> packages. These packages work together to work with relational structures in a tidy format and plot them using ggplot2.</p>\n<h2 id=\"the-function_2\">The function <a class=\"head_anchor\" href=\"#the-function_2\" rel=\"nofollow\">#</a>\n</h2>\n<p>Below is a function <code class=\"prettyprint\">ggsem()</code>, which takes a fitted lavaan object and returns a ggplot2 object representing the nodes, edges, and parameter values. It handles regression paths, correlations, latent factors, and factor loadings.</p>\n\n<pre><code class=\"prettyprint lang-r\">library(tidyverse)\nlibrary(tidygraph)\nlibrary(ggraph)\nlibrary(lavaan)\n</code></pre>\n\n<pre><code class=\"prettyprint lang-r\"># Plot a fitted lavaan object\nggsem &lt;- function(fit, layout = \"sugiyama\") {\n\n  # Extract standardized parameters\n  params &lt;- lavaan::standardizedSolution(fit)\n\n  # Edge properties\n  param_edges &lt;- params %&gt;% \n    filter(op %in% c(\"=~\", \"~\", \"~~\"), lhs != rhs, pvalue &lt; .10) %&gt;%\n    transmute(to = lhs,\n              from = rhs,\n              val = est.std,\n              type = dplyr::case_when(\n                op == \"=~\" ~ \"loading\",\n                op == \"~\"  ~ \"regression\",\n                op == \"~~\" ~ \"correlation\",\n                TRUE ~ NA_character_))\n\n  # Identify latent variables for nodes\n  latent_nodes &lt;- param_edges %&gt;% \n    filter(type == \"loading\") %&gt;% \n    distinct(to) %&gt;% \n    transmute(metric = to, latent = TRUE)\n\n  # Node properties\n  param_nodes &lt;- params %&gt;% \n    filter(lhs == rhs) %&gt;% \n    transmute(metric = lhs, e = est.std) %&gt;% \n    left_join(latent_nodes) %&gt;% \n    mutate(latent = if_else(is.na(latent), FALSE, latent))\n\n  # Complete Graph Object\n  param_graph &lt;- tidygraph::tbl_graph(param_nodes, param_edges)\n\n  # Plot\n  ggraph(param_graph, layout = layout) +\n    # Latent factor Nodes\n    geom_node_point(aes(alpha = as.numeric(latent)),\n                                     shape = 16, size = 5) +\n    geom_node_point(aes(alpha = as.numeric(latent)),\n                                     shape = 16, size = 4, color = \"white\") +\n    # Observed Nodes\n    geom_node_point(aes(alpha = as.numeric(!latent)),\n                                     shape = 15, size = 5) +\n    geom_node_point(aes(alpha = as.numeric(!latent)),\n                                     shape = 15, size = 4, color = \"white\") +\n    # Regression Paths (and text)\n    geom_edge_link(aes(color = val, label = round(val, 2),\n                       alpha = as.numeric(type == \"regression\")),\n                   linetype = 1, angle_calc = \"along\", vjust = -.5,\n                   arrow = arrow(20, unit(.3, \"cm\"), type = \"closed\")) +\n    # Factor Loadings (no text)\n    geom_edge_link(aes(color = val, alpha = as.numeric(type == \"loading\")),\n                   linetype = 3, angle_calc = \"along\",\n                   arrow = arrow(20, unit(.3, \"cm\"), ends = \"first\", type = \"closed\")) +\n    # Correlation Paths (no text)\n    geom_edge_link(aes(color = val, alpha = as.numeric(type == \"correlation\")),\n                   linetype = 2, angle_calc = \"along\",\n                   arrow = arrow(20, unit(.3, \"cm\"), type = \"closed\", ends = \"both\")) +\n    # Node names\n    geom_node_text(aes(label = metric),\n                   nudge_y = .25, hjust = \"inward\") +\n    # Node residual error\n    geom_node_text(aes(label = sprintf(\"%.2f\", e)),\n                   nudge_y = -.1, size = 3) +\n    # Scales and themes\n    scale_alpha(guide = FALSE, range = c(0, 1)) +\n    scale_edge_alpha(guide = FALSE, range = c(0, 1)) +\n    scale_edge_colour_gradient2(guide = FALSE, low = \"red\", mid = \"darkgray\", high = \"green\") +\n    scale_edge_linetype(guide = FALSE) +\n    scale_size(guide = FALSE) +\n    theme_graph()\n}\n</code></pre>\n\n<p>To test this function, we’ll use the five, standardized variables from the <code class=\"prettyprint\">diamonds</code> data set:</p>\n\n<pre><code class=\"prettyprint lang-r\">d &lt;- ggplot2::diamonds %&gt;% \n  select(x, y, z, carat, price) %&gt;% \n  mutate_all(funs((. - mean(.)) / sd(.)))\n</code></pre>\n<h2 id=\"path-analysis_2\">Path Analysis <a class=\"head_anchor\" href=\"#path-analysis_2\" rel=\"nofollow\">#</a>\n</h2>\n<p>Let’s define a simple path model where diamond price is predicted by its carats, in turn, predicted by its x-axis length.</p>\n\n<pre><code class=\"prettyprint lang-r\">model &lt;- ({\"\n    price ~ carat\n    carat ~ x\n\"})\n\nfit &lt;- sem(model, data = d)\n\nggsem(fit)\n</code></pre>\n\n<p><a href=\"https://svbtleusercontent.com/de9ti6iymjqha.png\" rel=\"nofollow\"><img src=\"https://svbtleusercontent.com/de9ti6iymjqha_small.png\" alt=\"init-example-1.png\"></a></p>\n<h2 id=\"correlations_2\">Correlations <a class=\"head_anchor\" href=\"#correlations_2\" rel=\"nofollow\">#</a>\n</h2>\n<p>We can also extend the model to include the y-axis length, which we assume to correlate with the x-axis length.</p>\n\n<pre><code class=\"prettyprint lang-r\">model &lt;- ({\"\n    price ~ carat\n    carat ~ x + y\n    x ~~ y\n\"})\n\nfit &lt;- sem(model, data = d)\n\nggsem(fit)\n</code></pre>\n\n<p><a href=\"https://svbtleusercontent.com/ioveug8ncip9w.png\" rel=\"nofollow\"><img src=\"https://svbtleusercontent.com/ioveug8ncip9w_small.png\" alt=\"unnamed-chunk-6-1.png\"></a></p>\n<h2 id=\"latent-factors_2\">Latent Factors <a class=\"head_anchor\" href=\"#latent-factors_2\" rel=\"nofollow\">#</a>\n</h2>\n<p>We will now model the x, y, and z lengths as a latent “size” factor, which predicts carat</p>\n\n<pre><code class=\"prettyprint lang-r\">model &lt;- ({\"\n    size =~ x + y + z\n\n    price ~ carat\n    carat ~ size\n\"})\n\nfit &lt;- sem(model, data = d)\n\nggsem(fit)\n</code></pre>\n\n<p><a href=\"https://svbtleusercontent.com/zdsiogcd3wuh8q.png\" rel=\"nofollow\"><img src=\"https://svbtleusercontent.com/zdsiogcd3wuh8q_small.png\" alt=\"unnamed-chunk-7-1.png\"></a></p>\n\n<p>To compare, here we model “size” as a common underlying factor of carat and price:</p>\n\n<pre><code class=\"prettyprint lang-r\">model &lt;- ({\"\n    size =~ x + y + z\n\n    carat ~ size\n    price ~ size\n\n    price ~~ 0*carat\n\"})\n\nfit &lt;- sem(model, data = d)\n\nggsem(fit)\n</code></pre>\n\n<p><a href=\"https://svbtleusercontent.com/mvqrwty6plzg7q.png\" rel=\"nofollow\"><img src=\"https://svbtleusercontent.com/mvqrwty6plzg7q_small.png\" alt=\"unnamed-chunk-8-1.png\"></a></p>\n<h2 id=\"color-for-strength-and-sign_2\">Color for strength and sign <a class=\"head_anchor\" href=\"#color-for-strength-and-sign_2\" rel=\"nofollow\">#</a>\n</h2>\n<p>Edges are also colored based on parameter strength and sign. For example, let’s reverse score price and see how this appears:</p>\n\n<pre><code class=\"prettyprint lang-r\">d_rev &lt;- d %&gt;% \n  mutate(price = max(price) - price)\n\nfit &lt;- sem(model, data = d_rev)\n\nggsem(fit)\n</code></pre>\n\n<p><a href=\"https://svbtleusercontent.com/4iwnacvdus3jew.png\" rel=\"nofollow\"><img src=\"https://svbtleusercontent.com/4iwnacvdus3jew_small.png\" alt=\"unnamed-chunk-9-1.png\"></a></p>\n<h2 id=\"back-to-ggplot2_2\">Back to ggplot2 <a class=\"head_anchor\" href=\"#back-to-ggplot2_2\" rel=\"nofollow\">#</a>\n</h2>\n<p>By using ggraph, we can extend <code class=\"prettyprint\">ggsem()</code> with any ggplot2 syntax. For example, it’s easy to add a title:</p>\n\n<pre><code class=\"prettyprint lang-r\">ggsem(fit) +\n    ggtitle(\"SEM of the diamond data set\",\n            subtitle = \"Latent variable size as common cause of carat and price\")\n</code></pre>\n\n<p><a href=\"https://svbtleusercontent.com/b3ixk5eig3ayg.png\" rel=\"nofollow\"><img src=\"https://svbtleusercontent.com/b3ixk5eig3ayg_small.png\" alt=\"unnamed-chunk-11-1.png\"></a></p>\n\n<p>And, of course, you can always tweak the <code class=\"prettyprint\">ggsem()</code> function itself to achieve the desired result!</p>\n<h2 id=\"a-note-about-semplot_2\">A note about semPlot <a class=\"head_anchor\" href=\"#a-note-about-semplot_2\" rel=\"nofollow\">#</a>\n</h2>\n<p>For those who know about it, you might be asking why all this is necessary when we have <a href=\"http://sachaepskamp.com/semPlot\" rel=\"nofollow\">Sacha Epskamp’s</a> awesome <a href=\"http://sachaepskamp.com/semPlot\" rel=\"nofollow\">semPlot</a> package? There are likely many cases where semPlot will do a better job of laying out the nodes and edges.</p>\n\n<p>For me, there were two reasons. One was a practical business reason. In my work, we operate using a shared R package library. Compared to semPlot, tidygraph and ggraph solve a broader range of relevant problems for us and are, therefore, available in our shared library. I can use semPlot locally, but prefer to work with packages that help me to collaborate faster at work. The other reason was control over aesthetics. semPlot is amazing, but it doesn’t allow for the sort of control over the graph aesthetics that tidygraph and ggraph provide.</p>\n<h2 id=\"sign-off_2\">Sign off <a class=\"head_anchor\" href=\"#sign-off_2\" rel=\"nofollow\">#</a>\n</h2>\n<p>Thanks for reading and I hope this was useful for you.</p>\n\n<p>For updates of recent blog posts, follow <a href=\"https://twitter.com/drsimonj\" rel=\"nofollow\">@drsimonj</a> on Twitter, or email me at <a href=\"mailto:drsimonjackson@gmail.com\" rel=\"nofollow\">drsimonjackson@gmail.com</a> to get in touch.</p>\n\n<p>If you’d like the code that produced this blog, check out the <a href=\"https://github.com/drsimonj/blogR\" rel=\"nofollow\">blogR GitHub repository</a>.</p>"
}