{
  "title": "Speed Up With Microsoft",
  "link": "https://itsalocke.com/blog/speed-up-with-microsoft/",
  "pubDate": "Thu, 04 Oct 2018 13:19:59 +0100",
  "guid": "https://itsalocke.com/blog/speed-up-with-microsoft/",
  "description": "<p>People use R for lots of reasons: &ldquo;It&rsquo;s great for the models I need&rdquo;, &ldquo;I\nlike the functional approach&rdquo;, &ldquo;It&rsquo;s the tool I&rsquo;m most comfortable\nwith&rdquo;.</p>\n\n<p>People don&rsquo;t use R for these reasons: &ldquo;I have a favourite processor\ncore, I don&rsquo;t want to use the others&rdquo;, &ldquo;I love how my memory needs to\nfit all my data&rdquo;.</p>\n\n<p>What if I told you that you didn&rsquo;t need to worry about that any more?</p>\n\n<h2 id=\"multi-threaded-r\">Multi-threaded R</h2>\n\n<p>Microsoft have their own version of <code>R</code> called <a href=\"https://docs.microsoft.com/en-us/machine-learning-server/r-client/what-is-microsoft-r-client\">Microsoft R\nClient</a>.\nIt has a bunch of high-tech, whiz-bang features, but we&rsquo;re going to\nfocus on one: multi-threading calculations. Vanilla <code>R</code> is single\nthreaded.This means any calculations are done sequentially, in order,\none at a time. However, this isn&rsquo;t using the ability of most modern,\ndomestic laptops. To get setup with Microsoft R Client, <a href=\"https://docs.microsoft.com/en-us/machine-learning-server/r-client/install-on-windows\">follow the\ninstall\ninstructions</a>.\nOnce you&rsquo;ve got Microsoft R Client installed, you will need to make sure\nit&rsquo;s the version of <code>R</code> that is active in your session. If you are using\nRStudio this is easy to do by going to\n<code>Tools &gt; Global Options &gt; General &gt; R Version</code>.</p>\n\n<p><img src=\"../img/R-options-rclient.PNG\" alt=\"\" /></p>\n\n<p>You will probably be asked to Restart R Studio, so close it and open\nback up, then we can run the code.</p>\n\n<pre><code>R version 3.4.3 (2017-11-30) -- &quot;Kite-Eating Tree&quot;\nCopyright (C) 2017 The R Foundation for Statistical Computing\nPlatform: x86_64-w64-mingw32/x64 (64-bit)\n\nR is free software and comes with ABSOLUTELY NO WARRANTY.\nYou are welcome to redistribute it under certain conditions.\nType 'license()' or 'licence()' for distribution details.\n\nR is a collaborative project with many contributors.\nType 'contributors()' for more information and\n'citation()' on how to cite R or R packages in publications.\n\nType 'demo()' for some demos, 'help()' for on-line help, or\n'help.start()' for an HTML browser interface to help.\nType 'q()' to quit R.\n\nMicrosoft R Open 3.4.3\nThe enhanced R distribution from Microsoft\nMicrosoft packages Copyright (C) 2018 Microsoft\n\nLoading Microsoft R Client packages, version 3.4.3.0097. \nMicrosoft R Client limits some functions to available memory.\nSee: https://go.microsoft.com/fwlink/?linkid=799476 for information\nabout additional features.\n\nType 'readme()' for release notes, privacy() for privacy policy, or\n'RevoLicense()' for licensing information.\n\nUsing the Intel MKL for parallel mathematical computing(using 2 cores).\nDefault CRAN mirror snapshot taken on 2018-01-01.\nSee: https://mran.microsoft.com/.\n</code></pre>\n\n<p>This message will pop up, and it&rsquo;s worth noting as it&rsquo;s got some\ninformation in it that you might need to think about:</p>\n\n<ul>\n<li>It&rsquo;s worth noting that right now Microsoft r Client is lagging\nbehind the current <code>R</code> version, and is based on version 3.4 of <code>R</code>,\nnot 3.5. This will mean your default package libraries will not be\nshared between the installations if you are running <code>R</code> 3.5.</li>\n<li>It&rsquo;s using a snapshot of <code>CRAN</code> called <code>MRAN</code> to source packages by\ndefault. 90% of the time it will operate just as you expect, but\nbecause it takes a &lsquo;snapshot&rsquo; of packages, newer features and\nchanges that have hit <code>CRAN</code> may not be in the version of the\npackage you are grabbing.\n\n<ul>\n<li><code>RevoScaleR</code> and probably the <code>ggplot2</code> and <code>dplyr</code> packages\nwill likely be installed for you already as default in Microsoft\nR Client. The other two you will probably have to install\nyourself.</li>\n</ul></li>\n<li>Intel MKL will have scanned your system on install and attempted to\nwork out how many cores your processor has. Here it&rsquo;s identified 2\non my old Lenovo Yoga. This is where the speed boost will come from.</li>\n</ul>\n\n<!-- -->\n\n<pre><code>knitr::opts_chunk$set(echo = TRUE)\nlibrary(microbenchmark)\nlibrary(RevoScaleR)\nlibrary(ggplot2)\nlibrary(lockeutils)\ntheme_set(theme_ld() + theme(axis.title.x = element_text(vjust = -1)))\nlibrary(dplyr)\n</code></pre>\n\n<h3 id=\"test-data\">Test Data</h3>\n\n<p>Here we make a set of example data, 3 data frame of random numbers with\nvarious &lsquo;normal&rsquo; distributions. The data frames are of different\nlengths: 500,000 , 1,000,000 and 5,000,000.</p>\n\n<pre><code>set.seed(9000)\nsample_df = function(n){\n  data.frame(\n    col_1 = c(rnorm(n, mean = 11, sd = 0.5)), \n    col_2 = c(rnorm(n, mean = 6, sd = 1)), \n    col_3 = c(rnorm(n, mean = 3, sd = 0.75))\n  )\n}\n\ndf_500k &lt;- sample_df(500000)\ndf_1m &lt;- sample_df(1000000)\ndf_5m &lt;- sample_df(5000000)\n</code></pre>\n\n<h3 id=\"benchmarking\">Benchmarking</h3>\n\n<p>Running benchmarks in <code>R</code> is easy with the microbenchmark package. The\npackage tries to be as accurate as possible in measuring the time for\neach of it&rsquo;s runs, and also allows you to easily compare different\napproaches and specify the amount of repeats. I&rsquo;ve decided to test each\nof the 3 data sets in each of 2 different linear modelling functions,\ngiving 6 different groups of results. Each group will be run 10 times\nfor a total set of 60 runs.</p>\n\n<pre><code>res &lt;- microbenchmark(\n  lm_50k = lm(col_1 ~ col_2 + col_3, data = df_500k),\n  rxLM_50k = rxLinMod(col_1 ~ col_2 + col_3, data = df_500k, reportProgress = 0),\n  lm_1m = lm(col_1 ~ col_2 + col_3, data = df_1m),\n  rxLM_1m = rxLinMod(col_1 ~ col_2 + col_3, data = df_1m, reportProgress = 0),\n  lm_5m = lm(col_1 ~ col_2 + col_3, data = df_5m),\n  rxLM_5m = rxLinMod(col_1 ~ col_2 + col_3, data = df_5m, reportProgress = 0),\n  times = 10\n  )\n</code></pre>\n\n<h3 id=\"results\">Results</h3>\n\n<p>The <code>res</code> object is of class <code>microbenchmark</code>, and has a plotting method\nthat can be used via <code>ggplot2::autoplot()</code>.</p>\n\n<pre><code>autoplot(res) +  \n  labs(title = &quot;Violin plot of model run durations&quot;, \n       subtitle = &quot;`rxLinMod()` vs `lm()`&quot;,\n       caption = &quot;Microsoft R Client 3.4.3, 2 cores&quot;)\n</code></pre>\n\n<p><img src=\"../img/plot-1.png\" alt=\"\" /></p>\n\n<p>In each of these tests, we can see that the <code>RevoScaleR::rxLinMod()</code>\nfunctions outperforms the base <code>lm()</code> by a large margin. Note the log\nscale for <code>Time [milliseconds]</code>!</p>\n\n<pre><code>knitr::kable(summary(res))\n</code></pre>\n\n<table>\n<thead>\n<tr class=\"header\">\n<th align=\"left\">expr</th>\n<th align=\"right\">min</th>\n<th align=\"right\">lq</th>\n<th align=\"right\">mean</th>\n<th align=\"right\">median</th>\n<th align=\"right\">uq</th>\n<th align=\"right\">max</th>\n<th align=\"right\">neval</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td align=\"left\">lm_50k</td>\n<td align=\"right\">1106.2070</td>\n<td align=\"right\">1141.3168</td>\n<td align=\"right\">1740.0966</td>\n<td align=\"right\">1340.5601</td>\n<td align=\"right\">1474.8239</td>\n<td align=\"right\">4679.1277</td>\n<td align=\"right\">10</td>\n</tr>\n<tr class=\"even\">\n<td align=\"left\">rxLM_50k</td>\n<td align=\"right\">115.3501</td>\n<td align=\"right\">120.7544</td>\n<td align=\"right\">137.2811</td>\n<td align=\"right\">136.9788</td>\n<td align=\"right\">147.7357</td>\n<td align=\"right\">171.9592</td>\n<td align=\"right\">10</td>\n</tr>\n<tr class=\"odd\">\n<td align=\"left\">lm_1m</td>\n<td align=\"right\">2203.7005</td>\n<td align=\"right\">2890.8738</td>\n<td align=\"right\">3018.6052</td>\n<td align=\"right\">3072.3086</td>\n<td align=\"right\">3340.6342</td>\n<td align=\"right\">3934.8914</td>\n<td align=\"right\">10</td>\n</tr>\n<tr class=\"even\">\n<td align=\"left\">rxLM_1m</td>\n<td align=\"right\">184.8220</td>\n<td align=\"right\">199.1018</td>\n<td align=\"right\">223.0184</td>\n<td align=\"right\">214.2320</td>\n<td align=\"right\">223.2292</td>\n<td align=\"right\">307.1239</td>\n<td align=\"right\">10</td>\n</tr>\n<tr class=\"odd\">\n<td align=\"left\">lm_5m</td>\n<td align=\"right\">14897.7473</td>\n<td align=\"right\">15450.7170</td>\n<td align=\"right\">16295.3558</td>\n<td align=\"right\">16183.4236</td>\n<td align=\"right\">16720.8177</td>\n<td align=\"right\">18837.9140</td>\n<td align=\"right\">10</td>\n</tr>\n<tr class=\"even\">\n<td align=\"left\">rxLM_5m</td>\n<td align=\"right\">704.0234</td>\n<td align=\"right\">805.8069</td>\n<td align=\"right\">1108.2574</td>\n<td align=\"right\">965.9696</td>\n<td align=\"right\">1044.1400</td>\n<td align=\"right\">2084.2737</td>\n<td align=\"right\">10</td>\n</tr>\n</tbody>\n</table>\n\n<h3 id=\"but-how\">But how?</h3>\n\n<p>It does this because the <em>Microsoft R Client</em> uses <em>Intel MKL for\nparallel mathematical computing</em>. This allows the <code>RevoScaleR</code> package\nto implement a &lsquo;parallelised algorithm&rsquo; to solve the linear regression\nusing the BLAS and LAPACK FORTRAN libraries. <a href=\"https://mran.microsoft.com/documents/rro/multithread\">More technical details are\navilable in the\ndocs</a>.</p>\n\n<h2 id=\"what-about-the-out-of-memory-part\">What about the out of memory part?</h2>\n\n<p><code>RevoScaleR</code> and Microsoft R Client can help with that, though the\nsolution requires a little more involvement. The short version is that\nit can leverage <em>distributed data sources</em> as a backend, such as spark,\nhadoop and sqlserver. this allows the data to be spread across many\n<em>compute nodes</em> that are managed by software called &lsquo;Microsoft Machine\nLearning Server`. <a href=\"https://docs.microsoft.com/en-us/machine-learning-server/r/concept-what-is-revoscaler\">This is a good overview of the\nideas</a>\non the main site, which also holds all the documentation.</p>\n\n<h2 id=\"would-you-like-to-know-more\">Would you like to know more?</h2>\n\n<p>Locke Data have are developing course going into depth with this\ntechnology from an <code>R</code> context and <a href=\"../../training/onlinetraining/\">are releasing it at the end of\nOctober</a>. Please come and join us\n(virtually!) for some hands-on learning and detailed tutorials.</p>"
}