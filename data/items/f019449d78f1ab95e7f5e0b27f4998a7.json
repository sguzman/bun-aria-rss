{
  "title": "Five Hard-Won Lessons Using Hive",
  "description": "<p><em>EDIT, 9/8/2016: Hive has come a long way in the two years since I’ve written this. While some of the code snippets might still work, it’s likely the case that this information is so out-of-date to be nothing more than a reflection of working with Hadoop in 2014.</em></p>",
  "pubDate": "Thu, 12 Jun 2014 13:01:18 +0000",
  "link": "http://randyzwitch.com/hive-five-hard-won-lessons/",
  "guid": "http://randyzwitch.com/hive-five-hard-won-lessons/",
  "content": "<p><em>EDIT, 9/8/2016: Hive has come a long way in the two years since I’ve written this. While some of the code snippets might still work, it’s likely the case that this information is so out-of-date to be nothing more than a reflection of working with Hadoop in 2014.</em></p>\n\n<p>I’ve been spending a ton of time lately on the data <em>engineering</em> side of ‘data science’, so I’ve been writing a lot of Hive queries. Hive is a great tool for querying large amounts of data, without having to know very much about the underpinnings of Hadoop. Unfortunately, there are a lot of things about Hive (version 0.12 and before) that aren’t quite the same as SQL and have caused me a bunch of frustration; here they are, in no particular order.</p>\n\n<h2 id=\"1-set-hive-temp-directory-tosame-as-final-output-directory\">1. Set Hive Temp directory To Same As Final Output Directory</h2>\n\n<p>When doing a “Create Table As” (CTAS) statement in Hive, <a title=\"Hive scratch directory\" href=\"http://doc.mapr.com/display/MapR/Hive#Hive-HiveScratchDirectory\" target=\"_blank\">Hive allocates temp space for the Map and Reduce portions of the job</a>. If you’re not lucky, the temp space for the job will be somewhere different than where your table actually ends up being saved, resulting in TWO I/O operations instead of just one. This can lead to a painful delay in when your Hive job says it is finished vs. when the table becomes available (one time, I saw a 30 hour delay writing 5TB of data).</p>\n\n<p>If your Hive jobs seem to hang after the Job Tracker says they are complete, try this setting at the beginning of your session:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-shell\" data-lang=\"shell\"><span class=\"nb\">set </span>hive.optimize.insert.dest.volume<span class=\"o\">=</span><span class=\"nb\">true</span><span class=\"p\">;</span></code></pre></figure>\n\n<h2 id=\"2column-aliasing-in-group-byorder-by\">2. Column Aliasing In Group By/Order By</h2>\n\n<p>Not sure why this isn’t a default, but if you want to be able to reference your column names by position (i.e. <code class=\"language-plaintext highlighter-rouge\">group by 1,2</code>) instead of by name (i.e. <code class=\"language-plaintext highlighter-rouge\">group by name, age</code>), then run this at the beginning of your session:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-shell\" data-lang=\"shell\"><span class=\"nb\">set </span>hive.groupby.orderby.position.alias<span class=\"o\">=</span><span class=\"nb\">true</span><span class=\"p\">;</span></code></pre></figure>\n\n<h2 id=\"3-be-aware-of-predicate-push-down-rules\">3. Be Aware Of Predicate Push-Down Rules</h2>\n\n<p>In Hive, you can get great performance gains if you A) partition your table by commonly used columns/business concepts (i.e. Day, State, Market, etc.) and B) you use the partitions in a <code class=\"language-plaintext highlighter-rouge\">WHERE</code> clause. These are known as <a href=\"https://cwiki.apache.org/confluence/display/Hive/LanguageManual+Select#LanguageManualSelect-PartitionBasedQueries\">partition-based queries</a>. Otherwise, if you don’t use a partition in your <code class=\"language-plaintext highlighter-rouge\">WHERE</code> clause, you will get a full table scan.</p>\n\n<p>Unfortunately, when doing an OUTER JOIN, Hive will sometimes ignore the fact that your <code class=\"language-plaintext highlighter-rouge\">WHERE</code> clause is on a partition and do a full table scan anyway. In order to get Hive to <a href=\"https://cwiki.apache.org/confluence/display/Hive/OuterJoinBehavior#OuterJoinBehavior-PredicatePushdownRules\">push your predicate down</a> and avoid a full table scan, put your predicate on the <code class=\"language-plaintext highlighter-rouge\">JOIN</code> instead of the <code class=\"language-plaintext highlighter-rouge\">WHERE</code> clause:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-sql\" data-lang=\"sql\"><table class=\"rouge-table\"><tbody><tr><td class=\"gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n</pre></td><td class=\"code\"><pre><span class=\"c1\">--#### Assume sales Hive table partitioned by day_id ####--</span>\n\n<span class=\"c1\">--Full Table Scan</span>\n<span class=\"k\">select</span>\n<span class=\"n\">employees</span><span class=\"p\">.</span><span class=\"n\">id</span><span class=\"p\">,</span>\n<span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">sales</span>\n<span class=\"k\">from</span> <span class=\"n\">employees</span>\n<span class=\"k\">left</span> <span class=\"k\">join</span> <span class=\"n\">sales</span> <span class=\"k\">on</span> <span class=\"p\">(</span><span class=\"n\">employees</span><span class=\"p\">.</span><span class=\"n\">id</span> <span class=\"o\">=</span> <span class=\"n\">sales</span><span class=\"p\">.</span><span class=\"n\">employee_id</span><span class=\"p\">)</span>\n<span class=\"k\">where</span> <span class=\"n\">day_id</span> <span class=\"k\">between</span> <span class=\"s1\">'2014-03-01'</span> <span class=\"k\">and</span> <span class=\"s1\">'2014-05-31'</span><span class=\"p\">;</span>\n\n<span class=\"c1\">--Partitioned-based query</span>\n<span class=\"k\">select</span>\n<span class=\"n\">employees</span><span class=\"p\">.</span><span class=\"n\">id</span><span class=\"p\">,</span>\n<span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">sales</span>\n<span class=\"k\">from</span> <span class=\"n\">employees</span>\n<span class=\"k\">left</span> <span class=\"k\">join</span> <span class=\"n\">sales</span> <span class=\"k\">on</span> <span class=\"p\">(</span><span class=\"n\">employees</span><span class=\"p\">.</span><span class=\"n\">id</span> <span class=\"o\">=</span> <span class=\"n\">sales</span><span class=\"p\">.</span><span class=\"n\">employee_id</span> <span class=\"k\">and</span> <span class=\"n\">sales</span><span class=\"p\">.</span><span class=\"n\">day_id</span> <span class=\"k\">between</span> <span class=\"s1\">'2014-03-01'</span> <span class=\"k\">and</span> <span class=\"s1\">'2014-05-31'</span><span class=\"p\">);</span>\n</pre></td></tr></tbody></table></code></pre></figure>\n\n<p>If you don’t want to think about the different rules, you can generally put your limiting clauses inside your <code class=\"language-plaintext highlighter-rouge\">JOIN</code> clause instead of on your <code class=\"language-plaintext highlighter-rouge\">WHERE</code> clause. It <em>should</em> just be a matter of preference (until your query performance indicates it isn’t!)</p>\n\n<h2 id=\"4-calculate-and-append-percentiles-using-cross-join\">4. Calculate And Append Percentiles Using CROSS JOIN</h2>\n\n<p>Suppose you want to calculate the top 10% of your customers by sales. If you try to do the following, Hive will complain about needing a <code class=\"language-plaintext highlighter-rouge\">GROUP BY</code>, because <code class=\"language-plaintext highlighter-rouge\">percentile_approx()</code> is a summary function:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-sql\" data-lang=\"sql\"><table class=\"rouge-table\"><tbody><tr><td class=\"gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n</pre></td><td class=\"code\"><pre><span class=\"c1\">--Hive expects that you want to calculate your percentiles by account_number and sales</span>\n<span class=\"c1\">--This code will generate an error about a missing GROUP BY statement</span>\n<span class=\"k\">select</span>\n<span class=\"n\">account_number</span><span class=\"p\">,</span>\n<span class=\"n\">sales</span><span class=\"p\">,</span>\n<span class=\"k\">CASE</span> <span class=\"k\">WHEN</span> <span class=\"n\">sales</span> <span class=\"o\">&gt;</span> <span class=\"n\">percentile_approx</span><span class=\"p\">(</span><span class=\"n\">sales</span><span class=\"p\">,</span> <span class=\"p\">.</span><span class=\"mi\">9</span><span class=\"p\">)</span> <span class=\"k\">THEN</span> <span class=\"mi\">1</span> <span class=\"k\">ELSE</span> <span class=\"mi\">0</span> <span class=\"k\">END</span> <span class=\"k\">as</span> <span class=\"n\">top10pct_sales</span>\n</pre></td></tr></tbody></table></code></pre></figure>\n\n<p>To get around the the need for a <code class=\"language-plaintext highlighter-rouge\">GROUP BY</code>, we can use a <code class=\"language-plaintext highlighter-rouge\">CROSS JOIN</code>. A <code class=\"language-plaintext highlighter-rouge\">CROSS JOIN</code> is another name for a Cartesian Join, meaning all of the rows from the first table will be joined to ALL of the rows of the second table. Because the subquery only returns one row, the <code class=\"language-plaintext highlighter-rouge\">CROSS JOIN</code> provides the desired affect of joining the percentile values back to the original table while keeping the same number of rows from the original table. Generally, you don’t want to do a <code class=\"language-plaintext highlighter-rouge\">CROSS JOIN</code> (because relational data generally is joined on a key), but this is a good use case.</p>\n\n<h2 id=\"5-calculating-a-histogram\">5.  Calculating a Histogram</h2>\n\n<p>Creating a histogram using Hive should be as simple as calling the <a href=\"https://cwiki.apache.org/confluence/display/Hive/StatisticsAndDataMining#StatisticsAndDataMining-histogram_numeric():Estimatingfrequencydistributions\"><code class=\"language-plaintext highlighter-rouge\">histogram_numeric()</code></a> function. However, the syntax and results of this function are just plain weird. To create a histogram, you can run the following:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-sql\" data-lang=\"sql\"><table class=\"rouge-table\"><tbody><tr><td class=\"gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n</pre></td><td class=\"code\"><pre><span class=\"k\">select</span>\n<span class=\"n\">histogram_numeric</span><span class=\"p\">(</span><span class=\"n\">salary</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">salary_hist</span>\n<span class=\"k\">from</span>\n<span class=\"n\">sample_08</span><span class=\"p\">;</span>\n\n<span class=\"c1\">--Results</span>\n<span class=\"p\">[</span><span class=\"err\">{</span><span class=\"nv\">\"x\"</span><span class=\"p\">:</span><span class=\"mi\">23507</span><span class=\"p\">.</span><span class=\"mi\">68627450983</span><span class=\"p\">,</span><span class=\"nv\">\"y\"</span><span class=\"p\">:</span><span class=\"mi\">255</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"err\">}</span><span class=\"p\">,</span><span class=\"err\">{</span><span class=\"nv\">\"x\"</span><span class=\"p\">:</span><span class=\"mi\">31881</span><span class=\"p\">.</span><span class=\"mi\">7647058824</span><span class=\"p\">,</span><span class=\"nv\">\"y\"</span><span class=\"p\">:</span><span class=\"mi\">340</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"err\">}</span><span class=\"p\">,</span><span class=\"err\">{</span><span class=\"nv\">\"x\"</span><span class=\"p\">:</span><span class=\"mi\">39824</span><span class=\"p\">.</span><span class=\"mi\">11498257844</span><span class=\"p\">,</span><span class=\"nv\">\"y\"</span><span class=\"p\">:</span><span class=\"mi\">287</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"err\">}</span><span class=\"p\">,</span><span class=\"err\">{</span><span class=\"nv\">\"x\"</span><span class=\"p\">:</span><span class=\"mi\">47615</span><span class=\"p\">.</span><span class=\"mi\">58011049725</span><span class=\"p\">,</span><span class=\"nv\">\"y\"</span><span class=\"p\">:</span><span class=\"mi\">181</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"err\">}</span><span class=\"p\">,</span><span class=\"err\">{</span><span class=\"nv\">\"x\"</span><span class=\"p\">:</span><span class=\"mi\">55667</span><span class=\"p\">.</span><span class=\"mi\">01219512195</span><span class=\"p\">,</span><span class=\"nv\">\"y\"</span><span class=\"p\">:</span><span class=\"mi\">164</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"err\">}</span><span class=\"p\">,</span><span class=\"err\">{</span><span class=\"nv\">\"x\"</span><span class=\"p\">:</span><span class=\"mi\">59952</span><span class=\"p\">.</span><span class=\"mi\">499999999985</span><span class=\"p\">,</span><span class=\"nv\">\"y\"</span><span class=\"p\">:</span><span class=\"mi\">8</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"err\">}</span><span class=\"p\">,</span><span class=\"err\">{</span><span class=\"nv\">\"x\"</span><span class=\"p\">:</span><span class=\"mi\">66034</span><span class=\"p\">.</span><span class=\"mi\">67153284674</span><span class=\"p\">,</span><span class=\"nv\">\"y\"</span><span class=\"p\">:</span><span class=\"mi\">137</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"err\">}</span><span class=\"p\">,</span><span class=\"err\">{</span><span class=\"nv\">\"x\"</span><span class=\"p\">:</span><span class=\"mi\">75642</span><span class=\"p\">.</span><span class=\"mi\">31707317074</span><span class=\"p\">,</span><span class=\"nv\">\"y\"</span><span class=\"p\">:</span><span class=\"mi\">82</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"err\">}</span><span class=\"p\">,</span><span class=\"err\">{</span><span class=\"nv\">\"x\"</span><span class=\"p\">:</span><span class=\"mi\">82496</span><span class=\"p\">.</span><span class=\"mi\">13636363638</span><span class=\"p\">,</span><span class=\"nv\">\"y\"</span><span class=\"p\">:</span><span class=\"mi\">44</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"err\">}</span><span class=\"p\">,</span><span class=\"err\">{</span><span class=\"nv\">\"x\"</span><span class=\"p\">:</span><span class=\"mi\">91431</span><span class=\"p\">.</span><span class=\"mi\">66666666667</span><span class=\"p\">,</span><span class=\"nv\">\"y\"</span><span class=\"p\">:</span><span class=\"mi\">60</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"err\">}</span><span class=\"p\">,</span><span class=\"err\">{</span><span class=\"nv\">\"x\"</span><span class=\"p\">:</span><span class=\"mi\">100665</span><span class=\"p\">.</span><span class=\"mi\">71428571428</span><span class=\"p\">,</span><span class=\"nv\">\"y\"</span><span class=\"p\">:</span><span class=\"mi\">21</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"err\">}</span><span class=\"p\">,</span><span class=\"err\">{</span><span class=\"nv\">\"x\"</span><span class=\"p\">:</span><span class=\"mi\">107326</span><span class=\"p\">.</span><span class=\"mi\">66666666667</span><span class=\"p\">,</span><span class=\"nv\">\"y\"</span><span class=\"p\">:</span><span class=\"mi\">15</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"err\">}</span><span class=\"p\">,</span><span class=\"err\">{</span><span class=\"nv\">\"x\"</span><span class=\"p\">:</span><span class=\"mi\">121248</span><span class=\"p\">.</span><span class=\"mi\">74999999999</span><span class=\"p\">,</span><span class=\"nv\">\"y\"</span><span class=\"p\">:</span><span class=\"mi\">16</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"err\">}</span><span class=\"p\">,</span><span class=\"err\">{</span><span class=\"nv\">\"x\"</span><span class=\"p\">:</span><span class=\"mi\">142070</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"nv\">\"y\"</span><span class=\"p\">:</span><span class=\"mi\">2</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"err\">}</span><span class=\"p\">,</span><span class=\"err\">{</span><span class=\"nv\">\"x\"</span><span class=\"p\">:</span><span class=\"mi\">153896</span><span class=\"p\">.</span><span class=\"mi\">6666666667</span><span class=\"p\">,</span><span class=\"nv\">\"y\"</span><span class=\"p\">:</span><span class=\"mi\">6</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"err\">}</span><span class=\"p\">,</span><span class=\"err\">{</span><span class=\"nv\">\"x\"</span><span class=\"p\">:</span><span class=\"mi\">162310</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"nv\">\"y\"</span><span class=\"p\">:</span><span class=\"mi\">6</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"err\">}</span><span class=\"p\">,</span><span class=\"err\">{</span><span class=\"nv\">\"x\"</span><span class=\"p\">:</span><span class=\"mi\">169810</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"nv\">\"y\"</span><span class=\"p\">:</span><span class=\"mi\">2</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"err\">}</span><span class=\"p\">,</span><span class=\"err\">{</span><span class=\"nv\">\"x\"</span><span class=\"p\">:</span><span class=\"mi\">176740</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"nv\">\"y\"</span><span class=\"p\">:</span><span class=\"mi\">2</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"err\">}</span><span class=\"p\">,</span><span class=\"err\">{</span><span class=\"nv\">\"x\"</span><span class=\"p\">:</span><span class=\"mi\">193925</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"nv\">\"y\"</span><span class=\"p\">:</span><span class=\"mi\">8</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"err\">}</span><span class=\"p\">,</span><span class=\"err\">{</span><span class=\"nv\">\"x\"</span><span class=\"p\">:</span><span class=\"mi\">206770</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"nv\">\"y\"</span><span class=\"p\">:</span><span class=\"mi\">2</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"err\">}</span><span class=\"p\">]</span>\n</pre></td></tr></tbody></table></code></pre></figure>\n\n<p>The results of this query comes back as a list, which is very un-SQL like! To get the data as a table, we can use <code class=\"language-plaintext highlighter-rouge\">LATERAL VIEW</code> and <code class=\"language-plaintext highlighter-rouge\">EXPLODE</code>:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-sql\" data-lang=\"sql\"><table class=\"rouge-table\"><tbody><tr><td class=\"gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n</pre></td><td class=\"code\"><pre><span class=\"k\">SELECT</span>\n   <span class=\"k\">CAST</span><span class=\"p\">(</span><span class=\"n\">hist</span><span class=\"p\">.</span><span class=\"n\">x</span> <span class=\"k\">as</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">bin_center</span><span class=\"p\">,</span>\n   <span class=\"k\">CAST</span><span class=\"p\">(</span><span class=\"n\">hist</span><span class=\"p\">.</span><span class=\"n\">y</span> <span class=\"k\">as</span> <span class=\"nb\">bigint</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">bin_height</span>\n<span class=\"k\">FROM</span> <span class=\"p\">(</span><span class=\"k\">select</span>\n      <span class=\"n\">histogram_numeric</span><span class=\"p\">(</span><span class=\"n\">salary</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">salary_hist</span>\n      <span class=\"k\">from</span>\n      <span class=\"n\">sample_08</span><span class=\"p\">)</span> <span class=\"n\">a</span>\n<span class=\"k\">LATERAL</span> <span class=\"k\">VIEW</span> <span class=\"n\">explode</span><span class=\"p\">(</span><span class=\"n\">salary_hist</span><span class=\"p\">)</span> <span class=\"n\">exploded_table</span> <span class=\"k\">as</span> <span class=\"n\">hist</span><span class=\"p\">;</span>\n\n<span class=\"c1\">--Results</span>\n\t<span class=\"n\">bin_center</span>\t<span class=\"n\">bin_height</span>\n<span class=\"mi\">0</span>\t<span class=\"mi\">23507</span>\t<span class=\"mi\">255</span>\n<span class=\"mi\">1</span>\t<span class=\"mi\">31881</span>\t<span class=\"mi\">340</span>\n<span class=\"mi\">2</span>\t<span class=\"mi\">39824</span>\t<span class=\"mi\">287</span>\n<span class=\"mi\">3</span>\t<span class=\"mi\">47615</span>\t<span class=\"mi\">181</span>\n<span class=\"mi\">4</span>\t<span class=\"mi\">55667</span>\t<span class=\"mi\">164</span>\n<span class=\"mi\">5</span>\t<span class=\"mi\">59952</span>\t<span class=\"mi\">8</span>\n<span class=\"mi\">6</span>\t<span class=\"mi\">66034</span>\t<span class=\"mi\">137</span>\n<span class=\"mi\">7</span>\t<span class=\"mi\">75642</span>\t<span class=\"mi\">82</span>\n<span class=\"mi\">8</span>\t<span class=\"mi\">82496</span>\t<span class=\"mi\">44</span>\n<span class=\"mi\">9</span>\t<span class=\"mi\">91431</span>\t<span class=\"mi\">60</span>\n<span class=\"mi\">10</span>\t<span class=\"mi\">100665</span>\t<span class=\"mi\">21</span>\n<span class=\"mi\">11</span>\t<span class=\"mi\">107326</span>\t<span class=\"mi\">15</span>\n<span class=\"mi\">12</span>\t<span class=\"mi\">121248</span>\t<span class=\"mi\">16</span>\n<span class=\"mi\">13</span>\t<span class=\"mi\">142070</span>\t<span class=\"mi\">2</span>\n<span class=\"mi\">14</span>\t<span class=\"mi\">153896</span>\t<span class=\"mi\">6</span>\n<span class=\"mi\">15</span>\t<span class=\"mi\">162310</span>\t<span class=\"mi\">6</span>\n<span class=\"mi\">16</span>\t<span class=\"mi\">169810</span>\t<span class=\"mi\">2</span>\n<span class=\"mi\">17</span>\t<span class=\"mi\">176740</span>\t<span class=\"mi\">2</span>\n<span class=\"mi\">18</span>\t<span class=\"mi\">193925</span>\t<span class=\"mi\">8</span>\n<span class=\"mi\">19</span>\t<span class=\"mi\">206770</span>\t<span class=\"mi\">2</span>\n</pre></td></tr></tbody></table></code></pre></figure>\n\n<p>However, now that we have a table of data, it’s still not clear how to create a histogram, as the <em>center of variable-width bins</em> is what is returned by Hive. The <a href=\"https://cwiki.apache.org/confluence/display/Hive/StatisticsAndDataMining#StatisticsAndDataMining-histogram_numeric():Estimatingfrequencydistributions\">Hive documentation for <code class=\"language-plaintext highlighter-rouge\">histogram_numeric()</code></a> references Gnuplot, Excel, Mathematica and MATLAB, which I can only assume can deal with plotting the centers?  Eventually I’ll figure out how to deal with this using R or Python, but for now, I just use the table as a quick gauge of what the data looks like.</p>"
}