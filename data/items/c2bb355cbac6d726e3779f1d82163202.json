{
  "title": "Tidyverse 'Starts_with' in M/Power Query",
  "link": "https://itsalocke.com/blog/tidyverse-starts_with-in-m/power-query/",
  "pubDate": "Mon, 08 Oct 2018 15:13:39 +0100",
  "guid": "https://itsalocke.com/blog/tidyverse-starts_with-in-m/power-query/",
  "description": "<p>As a heavy <code>R</code> and <code>Tidyverse</code> user, I&rsquo;ve been playing with Microsofts <code>m</code>/Power Query language included in Excel and PowerBI from that perspective, looking for the functions to make my life easier, developing small code pipelines for my processing and trying to get a smooth, clear and maintainable data manipulation process in place.</p>\n\n<h2 id=\"the-problem\">The Problem</h2>\n\n<p>In PowerBI I have data generated from an API call to HubSpot, which deliveres a <code>json</code> which is flattened as the first step of the process into a table with hundreds of columns. These columns have a pretty regular naming convention, in a form similar to this:</p>\n\n<pre><code>client_notified_timestamp\nclient_notified_source\nclient_notified_sourceid\nclient_notified_value\nclient_responded_timestamp\nclient_responded_source\nclient_responded_sourceid\nclient_responded_value\n</code></pre>\n\n<p>The general rule is that the variable is encoded in the first part of the column name string, and that the columns with <code>[variable]_value</code> hold the actual value while the other three columns (<code>[variable]_source</code>, <code>[variable]_sourceid</code> and <code>[variable]_timestamp</code>) contain metadata we don&rsquo;t really need here.</p>\n\n<h2 id=\"the-target\">The Target</h2>\n\n<p>If I was using R to do this job (which <em>technically</em> I could, but was not possible because of the context the PowerBI file is going to be used in), I could use tidyverse to do this pretty simply:</p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-r\" data-lang=\"r\">dataset <span style=\"color:#f92672\">%&gt;%</span>\n    select(<span style=\"color:#66d9ef\">c</span>(<span style=\"color:#f92672\">-</span>ends_with(<span style=\"color:#e6db74\">&#34;_source&#34;</span>),<span style=\"color:#f92672\">-</span>ends_with(<span style=\"color:#e6db74\">&#34;_sourceid&#34;</span>)))</code></pre></div>\n<p>Anything that ends with <code>&quot;_source&quot;</code> or <code>&quot;_sourceid&quot;</code> gets dropped, everything else remains. A nice compact, maintainable and clear expression of a &lsquo;rule&rsquo; of processing.</p>\n\n<h2 id=\"the-solution\">The Solution</h2>\n\n<p>This is the solution I used:</p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-m\" data-lang=\"m\">let\n    Source = ...,\n    rawData = Source{[tableId=&#34;myData&#34;]}[Data],\n    removeSources = Table.RemoveColumns(rawData, List.Select(Table.ColumnNames(rawData), each Text.EndsWith(_, &#34;Source ID&#34;) or Text.EndsWith(_, &#34;Source&#34;)))\nin\n    removeSources</code></pre></div>\n<p>This code block sources <code>rawData</code> and &lsquo;lists&rsquo; the columns matching my requirements (<code>&quot;_source&quot;</code> and <code>&quot;_sourceid&quot;</code>) using the logical condition <code>each Text.EndsWith(_, &quot;Source ID&quot;) or Text.EndsWith(_, &quot;Source&quot;)</code> on the column names returned from <code>Table.ColumnNames(rawData)</code> feeding into <code>List.Select(...)</code>. This list is the second argument to the function <code>Table.RemoveColumns(...)</code>, which is operating on the <code>rawData</code> again, to finally return only the columns I want.</p>\n\n<h2 id=\"the-observations\">The Observations</h2>\n\n<p>This generally suits the requirements: <em>relatively</em> readable functions, multiple logical conditions operating on the column names that &lsquo;select&rsquo; which I want returned in the next step.</p>\n\n<p>It is admittedly a little more verbose than the <code>R</code> I had in mind, and right now I&rsquo;m not sure if that&rsquo;s me or just the language. There is some repetition in specifying <code>rawData</code> in multiple places, which I haven&rsquo;t found a shorthand for if there is one. Parts of it seem only &lsquo;functional-ish&rsquo;? The construction of <code>each Text.EndsWith(_, &quot;Source ID&quot;) or Text.EndsWith(_, &quot;Source&quot;))</code> is pretty object-oriented. Without wanting to sound insulting maybe <code>m</code> is only &lsquo;semi-functional&rsquo; in the technical definition of the term?</p>\n\n<h2 id=\"the-caveat\">The Caveat</h2>\n\n<p>This is the first <code>m</code> code I&rsquo;ve really written and my knee-jerk first impressions. I&rsquo;m sure there is a lot more to this language that I have yet to understand and maybe even come to appreciate.</p>\n\n<h2 id=\"the-conclusion\">The Conclusion</h2>\n\n<p>Despite these observations I wouldn&rsquo;t discount the potential of <code>m</code>/Power Query. While many Microsoft tools let you use R baked in, it&rsquo;s only baked in to the point where you can guarantee <code>R</code> is installed on the machine, and it&rsquo;s an undeniable fact of data that we have to work with Excel and Power BI in many situations. I&rsquo;m actually quite looking forward to working with this not-quite-familar &lsquo;functional-ish data language&rsquo; in the future. When it&rsquo;s the tool for the job at least :)</p>"
}