{
  "id": "yt:video:Ey5OFPkxF_w",
  "yt:videoId": "Ey5OFPkxF_w",
  "yt:channelId": "UCAvGvvEemkeX8hurdPXr7hA",
  "title": "Haskell: Why and How the External STG Interpreter is Useful (Csaba Hruska)",
  "link": "",
  "author": {
    "name": "Skills Matter (Incorporating YOW! Conferences)",
    "uri": "https://www.youtube.com/channel/UCAvGvvEemkeX8hurdPXr7hA"
  },
  "published": "2021-12-07T20:21:30+00:00",
  "updated": "2022-07-22T16:08:35+00:00",
  "media:group": {
    "media:title": "Haskell: Why and How the External STG Interpreter is Useful (Csaba Hruska)",
    "media:content": "",
    "media:thumbnail": "",
    "media:description": "The external STG interpreter is a from scratch implementation of the STG machine in Haskell. Currently it supports almost all GHC primops and RTS features. It can run real world Haskell programs that were compiled with GHC Whole Program Compiler (GHC-WPC). GHC-WPC is a GHC fork that exports the whole program STG IR.\n\nThe external STG interpreter is an excellent tool to study the runtime behaviour of Haskell programs, i.e. it can run/interpret GHC or Pandoc. The implementation of the interpreter is in plain simple Haskell, so it makes compiler backend and tooling development approachable for everyone. It already has a programmable debugger which supports step-by-step evaluation, breakpoints and execution region based inspection. It also can export the whole program memory state and call-graphs to files for further investigation. These features makes it easy to find a memory leak or to identify a performance bottleneck in a large real world Haskell application.\n\nhttps://github.com/grin-compiler/ghc-whole-program-compiler-project\n\n(This talk was recorded at Thursday's Matter online meetup on 2 December 2021.)\n\nYou can reproduce the demo part if you follow the description here: https://github.com/grin-compiler/ext-stg-interpreter-presentation-demos",
    "media:community": {
      "media:starRating": "",
      "media:statistics": ""
    }
  }
}