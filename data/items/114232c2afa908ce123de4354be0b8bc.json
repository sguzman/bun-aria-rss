{
  "guid": "tag:blogger.com,1999:blog-6300367579216018061.post-363020128279112356",
  "pubDate": "Thu, 19 Sep 2019 16:36:00 +0000",
  "atom:updated": "2019-09-19T13:42:33.447-07:00",
  "category": [
    "design",
    "google cloud",
    "google cloud natural language",
    "graph algorithms",
    "graph data modeling",
    "graph processing",
    "neo4j",
    "PageRank",
    "twitter"
  ],
  "title": "Sentiment Analysis on Twitter Data Using Neo4j and Google Cloud",
  "description": "<style>.hljs-title, .hljs-id, .scss .hljs-preprocessor {    font-weight: 400 !important; } .hljs-class .hljs-title, .hljs-type, .vhdl .hljs-literal, .tex .hljs-command {    font-weight: 400 !important; } .hljs-keyword, .css .rule .hljs-keyword, .hljs-winutils, .nginx .hljs-title, .hljs-subst, .hljs-request, .hljs-status {    font-weight: 400 !important; } .sect1{padding-bottom:0!important} .sect1+.sect1{border:0!important} .conum[data-value]{display:inline-block;color:#fff!important;background-color:rgba(0,0,0,.8);-webkit-border-radius:100px;border-radius:100px;text-align:center;font-size:.75em;width:1.67em;height:1.67em;line-height:1.67em;font-family:\"Open Sans\",\"DejaVu Sans\",sans-serif;font-style:normal;font-weight:bold} .conum[data-value] *{color:#fff!important} .conum[data-value]+b{display:none} .conum[data-value]:after{content:attr(data-value)} .fa-caret-up {     color: green;     text-shadow: 1px 1px 1px #ccc;     font-size: 1.75em !important; }  .fa-caret-down {     color: red;     text-shadow: 1px 1px 1px #ccc;     font-size: 1.75em !important; }  .fa-minus {     color: #999;     text-shadow: 1px 1px 1px #ccc;     font-size: 1em !important; }  .fa-plus {     font-size: 1em !important;     color: green;     text-shadow: 1px 1px 1px #ccc; }   @media screen and (min-width: 768px) { .table-responsive { font-size: 0.8em; max-width: 50em; } }  @media screen and (max-width: 768px) {     .table-responsive {     font-size: 0.65em; } }  .table-responsive th, .table-responsive tr, .table-responsive td { padding: 4px 4px 4px 4px !important; } p {     margin-bottom: 1.25em !important; line-height: 1.4; } li p { line-height: 1.4 !important; margin: 0 !important; } .blog-post-asciidoc .content img {  max-height: none;  width: 100% !important; } .admonitionblock > table {     background: rgba(0, 0, 0, 0) none repeat scroll 0 0;     border: 0 none;     border-collapse: separate;     width: 100%; } table {     background: #fff none repeat scroll 0 0;     border: 1px solid #dedede;     margin-bottom: 1.25em; } pre .conum[data-value]{position:relative;top:-.125em} b.conum *{color:inherit!important} .conum:not([data-value]):empty{display:none} .hdlist>table,.colist>table{border:0;background:none} .hdlist>table>tbody>tr,.colist>table>tbody>tr{background:none} td.hdlist1{padding-right:.75em;font-weight:bold} td.hdlist1,td.hdlist2{vertical-align:top} .literalblock+.colist,.listingblock+.colist{margin-top:-.5em} .colist>table tr>td:first-of-type{padding:0 .75em;line-height:1} .colist>table tr>td:last-of-type{padding:.25em 0} h1,h2,h3,#toctitle,.sidebarblock>.content>.title,h3,h4,h6{font-family:\"Open Sans\",sans-serif;font-style:normal;text-rendering:optimizeLegibility;margin-top:1em;margin-bottom:.5em;} .blog-post-asciidoc p{margin-bottom:1.25rem} @media only screen and (min-width:768px){.sect1{padding-bottom:1.25em}}.sect1+.sect1{border-top:1px solid #efefed} pre, pre > code {     -moz-osx-font-smoothing: auto;     color: rgba(0, 0, 0, 0.9);     font-family: monospace,monospace;     font-weight: 400;     line-height: 1.45;     text-rendering: optimizelegibility; } .blog-post-asciidoc code,kbd,pre,samp{font-size:.9em;font-weight:400;} .blog-post-asciidoc .admonitionblock>table{border-collapse:separate;border:0;background:none;width:100%} .blog-post-asciidoc .admonitionblock>table td.icon{text-align:center;width:80px} .blog-post-asciidoc .admonitionblock>table td.icon img{max-width:none} .blog-post-asciidoc .admonitionblock>table td.icon .title{font-weight:bold;font-family:\"Open Sans\",\"DejaVu Sans\",sans-serif;text-transform:uppercase} .blog-post-asciidoc .admonitionblock>table td.content{padding-left:1.125em;padding-right:1.25em;border-left:1px solid #ddddd8;color:rgba(0,0,0,.6)} .blog-post-asciidoc .admonitionblock>table td.content>:last-child>:last-child{margin-bottom:0} .blog-post-asciidoc .admonitionblock td.icon [class^=\"fa icon-\"]{font-size:2.5em;text-shadow:1px 1px 2px rgba(0,0,0,.5);cursor:default} .blog-post-asciidoc .admonitionblock td.icon .icon-note:before{content:\"\\f05a\";color:#19407c} .blog-post-asciidoc .admonitionblock td.icon .icon-tip:before{content:\"\\f0eb\";text-shadow:1px 1px 2px rgba(155,155,0,.8);color:#111} .blog-post-asciidoc .admonitionblock td.icon .icon-warning:before{content:\"\\f071\";color:#bf6900} .blog-post-asciidoc .admonitionblock td.icon .icon-caution:before{content:\"\\f06d\";color:#bf3400} .blog-post-asciidoc .admonitionblock td.icon .icon-important:before{content:\"\\f06a\";color:#bf0000} #personDataTable td {     vertical-align: middle; } .rank-col {     text-align: center; } #personDataTable img {     max-width: 35px;     padding: 0; } .table-responsive {     font-weight: 400; } .table > thead > tr > th {     border-bottom: 2px solid #ddd;     font-weight: 400;     padding: 8px !important;     vertical-align: bottom; } .table-responsive {     font-family: Helvetica,sans-serif; } .exampleblock pre {     margin-top: auto; } .exampleblock .content {     margin-top: auto; } blockquote {     border-left: 5px solid #eee;     color: #666;     font-size: 16px;     margin: 0;     padding: 10px 20px; } .attribution {     font-size: small;     text-align: right; } .table-responsive p { margin: 0 !important; } p.tableblock {   font-size: 14px;   margin: 0 !important; } table.tableblock { max-width: 100%; border-collapse: separate; } table.tableblock td > .paragraph:last-child p > p:last-child, table.tableblock th > p:last-child, table.tableblock td > p:last-child { margin-bottom: 0; }  table.tableblock, th.tableblock, td.tableblock { border: 0 solid #dddddd; }  table.grid-all th.tableblock, table.grid-all td.tableblock { border-width: 0 1px 1px 0; }  table.grid-all tfoot > tr > th.tableblock, table.grid-all tfoot > tr > td.tableblock { border-width: 1px 1px 0 0; }  table.grid-cols th.tableblock, table.grid-cols td.tableblock { border-width: 0 1px 0 0; }  table.grid-all * > tr > .tableblock:last-child, table.grid-cols * > tr > .tableblock:last-child { border-right-width: 0; }  table.grid-rows th.tableblock, table.grid-rows td.tableblock { border-width: 0 0 1px 0; }  table.grid-all tbody > tr:last-child > th.tableblock, table.grid-all tbody > tr:last-child > td.tableblock, table.grid-all thead:last-child > tr > th.tableblock, table.grid-rows tbody > tr:last-child > th.tableblock, table.grid-rows tbody > tr:last-child > td.tableblock, table.grid-rows thead:last-child > tr > th.tableblock { border-bottom-width: 0; }  table.grid-rows tfoot > tr > th.tableblock, table.grid-rows tfoot > tr > td.tableblock { border-width: 1px 0 0 0; }  table.frame-all { border-width: 1px; }  table.frame-sides { border-width: 0 1px; }  table.frame-topbot { border-width: 1px 0; }  th.halign-left, td.halign-left { text-align: left; }  th.halign-right, td.halign-right { text-align: right; }  th.halign-center, td.halign-center { text-align: center; }  th.valign-top, td.valign-top { vertical-align: top; }  th.valign-bottom, td.valign-bottom { vertical-align: bottom; }  th.valign-middle, td.valign-middle { vertical-align: middle; }  table thead th, table tfoot th { font-weight: bold; }  tbody tr th { display: table-cell; line-height: 1.4; background: whitesmoke; }  tbody tr th, tbody tr th p, tfoot tr th, tfoot tr th p { color: #222222; font-weight: bold; }  p.tableblock > code:only-child { background: none; padding: 0; }  table tr.even, table tr.alt, table tr:nth-of-type(2n) {     background: #f9f9f9 none repeat scroll 0 0; } div.table-responsive {  border: 0; }  .sql p {  font-family: courier; } .big{font-size:larger} .small{font-size:smaller} .underline{text-decoration:underline} .overline{text-decoration:overline} .line-through{text-decoration:line-through} .aqua{color:#00bfbf} .aqua-background{background:#00fafa} .black{color:#000} .black-background{background:#000} .blue{color:#0000bf} .blue-background{background:#0000fa} .fuchsia{color:#bf00bf} .fuchsia-background{background:#fa00fa} .gray{color:#606060} .gray-background{background:#7d7d7d} .green{color:#006000} .green-background{background:#007d00} .lime{color:#00bf00} .lime-background{background:#00fa00} .maroon{color:#600000} .maroon-background{background:#7d0000} .navy{color:#000060} .navy-background{background:#00007d} .olive{color:#606000} .olive-background{background:#7d7d00} .purple{color:#600060} .purple-background{background:#7d007d} .red{color:#bf0000} .red-background{background:#fa0000} .silver{color:#909090} .silver-background{background:#bcbcbc} .teal{color:#006060} .teal-background{background:#007d7d} .white{color:#bfbfbf} .white-background{background:#fafafa} .yellow{color:#bfbf00} .yellow-background{background:#fafa00} span.icon>.fa{cursor:default} a span.icon>.fa{cursor:inherit} .admonitionblock td.icon [class^=\"fa icon-\"]{font-size:2.5em;text-shadow:1px 1px 2px rgba(0,0,0,.5);cursor:default} .admonitionblock td.icon .icon-note::before{content:\"\\f05a\";color:#19407c} .admonitionblock td.icon .icon-tip::before{content:\"\\f0eb\";text-shadow:1px 1px 2px rgba(155,155,0,.8);color:#111} .admonitionblock td.icon .icon-warning::before{content:\"\\f071\";color:#bf6900} .admonitionblock td.icon .icon-caution::before{content:\"\\f06d\";color:#bf3400} .admonitionblock td.icon .icon-important::before{content:\"\\f06a\";color:#bf0000} .conum[data-value]{display:inline-block;color:#fff!important;background:rgba(0,0,0,.8);-webkit-border-radius:100px;border-radius:100px;text-align:center;font-size:.75em;width:1.67em;height:1.67em;line-height:1.67em;font-family:\"Open Sans\",\"DejaVu Sans\",sans-serif;font-style:normal;font-weight:bold} .conum[data-value] *{color:#fff!important} .conum[data-value]+b{display:none} .conum[data-value]::after{content:attr(data-value)} </style><div class=\"blog-post-asciidoc\" id=\"wrapper\">        <div class=\"article\">          <div id=\"preamble\"><div class=\"sectionbody\"><div id=\"__asciidoctor-preview-1__\" class=\"paragraph\"><p>In this blog post, we&#8217;re going to walk through designing a <a href=\"https://blog.acolyer.org/2015/05/26/pregel-a-system-for-large-scale-graph-processing/\" target=\"_blank\" rel=\"noopener\">graph processing algorithm</a> on top of <a href=\"https://neo4j.com/developer/graph-database/\" target=\"_blank\" rel=\"noopener\">Neo4j</a> that discovers the influence and sentiment of tweets in your Twitter network.</p></div><div id=\"__asciidoctor-preview-2__\" class=\"admonitionblock tip\"><table><tr><td class=\"icon\"><i class=\"fa icon-tip\" title=\"Tip\"></i></td><td class=\"content\">The source code for this reference application is open source. You can find the  <a href=\"https://github.com/kbastani/sentiment-analysis-twitter-microservices-example\" target=\"_blank\" rel=\"noopener\">GitHub project here</a>. </td></tr></table></div></div></div><div class=\"sect1\"><h2 id=\"_graph_data_modeling\">Graph Data Modeling</h2><div class=\"sectionbody\"><div id=\"__asciidoctor-preview-3__\" class=\"paragraph\"><p>The first thing we&#8217;ll need to do is to design a data model for analyzing the sentiments and influences of users on Twitter. This example iterates from an <a href=\"https://www.kennybastani.com/2016/01/spring-boot-graph-processing-microservices.html\" target=\"_blank\" rel=\"noopener\">earlier graph processing example</a> described in another blog post. I recommend taking a look at that post to better understand the concepts I talk about in this one.</p></div><div id=\"__asciidoctor-preview-4__\" class=\"paragraph\"><p>The diagram below is the <a href=\"https://www.youtube.com/watch?v=3w_ih8_9rVY\" target=\"_blank\" rel=\"noopener\">graph data model</a> that we will use to import, analyze, and query data from Twitter.</p></div><div class=\"imageblock\" style=\"display: block;\"><div class=\"content\" style=\"text-align: center;\"><img alt=\"Twitter graph data model\" src=\"https://i.imgur.com/U1eK3vi.png\" style=\"max-width: 50em; margin: auto !important;\" width=\"100%\"/></div></div><div id=\"__asciidoctor-preview-6__\" class=\"paragraph\"><p>In the diagram above, the following relationships are described.</p></div><div id=\"__asciidoctor-preview-7__\" class=\"ulist\"><ul><li id=\"__asciidoctor-preview-8__\"><p><code>Users</code> follow other <code>users</code></p></li><li id=\"__asciidoctor-preview-9__\"><p><code>Users</code> create <code>tweets</code></p></li><li id=\"__asciidoctor-preview-10__\"><p><code>Tweets</code> contain <code>phrases</code></p></li><li id=\"__asciidoctor-preview-11__\"><p><code>Phrases</code> are categorized into <code>topics</code></p></li></ul></div></div></div><div class=\"sect1\"><h2 id=\"_twitter_user_ranking\">Twitter User Ranking</h2><div class=\"sectionbody\"><div id=\"__asciidoctor-preview-12__\" class=\"paragraph\"><p>For this first blog post we&#8217;re going to focus on generating a rank of influential Twitter users in my social network that tells me which topics a user tweets about.</p></div><div class=\"imageblock\" style=\"display: block;\"><div class=\"content\" style=\"text-align: center;\"><img alt=\"Twitter influencer ranking with topic\" src=\"https://i.imgur.com/tq5Pqzo.png\" style=\"max-width: 50em; margin: auto !important;\" width=\"100%\"/></div></div><div id=\"__asciidoctor-preview-14__\" class=\"paragraph\"><p>The screenshot above is from the results of a <a href=\"https://neo4j.com/developer/cypher-query-language/\" target=\"_blank\" rel=\"noopener\">Neo4j cypher query</a>. Here we find a list of Twitter users that were discovered using a <a href=\"https://en.wikipedia.org/wiki/Web_crawler\" target=\"_blank\" rel=\"noopener\">crawling algorithm</a> based on <a href=\"https://en.wikipedia.org/wiki/PageRank\" target=\"_blank\" rel=\"noopener\">PageRank</a>. This output is similar to the dashboard that was created in an earlier blog post, but adds in a top category, top phrase, and a sentiment score.</p></div><a name='more'></a><div id=\"__asciidoctor-preview-15__\" class=\"paragraph\"><p>Let&#8217;s figure out how graph processing on Neo4j is used to generate this ranking of users.</p></div></div></div><div class=\"sect1\"><h2 id=\"_natural_language_processing\">Natural Language Processing</h2><div class=\"sectionbody\"><div id=\"__asciidoctor-preview-16__\" class=\"paragraph\"><p>We&#8217;re going to use <a href=\"https://en.wikipedia.org/wiki/Sentiment_analysis\">sentiment analysis</a> to enhance the graph data model described earlier. We will use <a href=\"https://cloud.google.com/natural-language/\" target=\"_blank\" rel=\"noopener\">Google Cloud&#8217;s Natural Language API</a> to do this.  Every time a user&#8217;s tweet is fetched from the Twitter API, its text is submitted to multiple Natural Language API endpoints, which enhances data in our graph data model.</p></div><div id=\"__asciidoctor-preview-17__\" class=\"paragraph\"><p>The diagram below is an example pathway between a <code>User</code> and a <code>Topic</code>.</p></div><div class=\"imageblock\" style=\"display: block;\"><div class=\"content\" style=\"text-align: center;\"><img alt=\"Twitter graph pathway from user to topic\" src=\"https://i.imgur.com/LkdSk6p.png\" style=\"max-width: 50em; margin: auto !important;\" width=\"100%\"/></div></div><div id=\"__asciidoctor-preview-19__\" class=\"paragraph\"><p>The Twitter crawling algorithm in our application iteratively imports a set of tweets from each ranked user. We&#8217;ll lean on the Google Cloud&#8217;s Natural Language API to help us structure the semantic relationships between users, tweets, phrases, and topics.</p></div><div class=\"sect2\"><h3 id=\"_sentiment_analysis\">Sentiment analysis</h3><div id=\"__asciidoctor-preview-20__\" class=\"paragraph\"><p>The first Google Cloud Natural Language API we&#8217;ll use is the <em>sentiment analysis</em> endpoint. The sentiment analysis API endpoint is described in the Google Cloud developer documentation, and is explained below.</p></div><div id=\"__asciidoctor-preview-21__\" class=\"quoteblock\"><blockquote><div id=\"__asciidoctor-preview-22__\" class=\"paragraph\"><p><a href=\"https://cloud.google.com/natural-language/docs/analyzing-sentiment\" target=\"_blank\" rel=\"noopener\"><em>Sentiment analysis</em></a> inspects the given text and identifies the prevailing emotional opinion within the text, especially to determine a writer&#8217;s attitude as positive, negative, or neutral.</p></div></blockquote></div><div class=\"imageblock\" style=\"display: block;\"><div class=\"content\" style=\"text-align: center;\"><img alt=\"Twitter graph sentiment analysis data model\" src=\"https://i.imgur.com/ziSiCzw.png\" style=\"max-width: 50em; margin: auto !important;\" width=\"100%\"/></div></div><div id=\"__asciidoctor-preview-24__\" class=\"paragraph\"><p>The sentiment analysis endpoint allows us to add a sentiment score on each <code>Tweet</code>. The next step is to extract phrases, shown in the diagram above, and to fetch the sentiment score in relation to a tweet&#8217;s text.</p></div></div><div class=\"sect2\"><h3 id=\"_entity_sentiment_analysis\">Entity sentiment analysis</h3><div id=\"__asciidoctor-preview-25__\" class=\"paragraph\"><p>Entity sentiment analysis is a Cloud Natural Language endpoint that provides us with a collection of phrases and their sentiment scores in context to a tweet&#8217;s text.</p></div><div id=\"__asciidoctor-preview-26__\" class=\"quoteblock\"><blockquote><div id=\"__asciidoctor-preview-27__\" class=\"paragraph\"><p><a href=\"https://cloud.google.com/natural-language/docs/analyzing-entity-sentiment\" target=\"_blank\" rel=\"noopener\"><em>Entity sentiment analysis</em></a> inspects the given text for known entities (proper nouns and common nouns), returns information about those entities, and identifies the prevailing emotional opinion of the entity within the text, especially to determine a writer&#8217;s attitude toward the entity as positive, negative, or neutral.</p></div></blockquote></div><div class=\"imageblock\" style=\"display: block;\"><div class=\"content\" style=\"text-align: center;\"><img alt=\"Twitter graph entity sentiment analysis data model\" src=\"https://i.imgur.com/cCISagY.png\" style=\"max-width: 50em; margin: auto !important;\" width=\"100%\"/></div></div><div id=\"__asciidoctor-preview-29__\" class=\"paragraph\"><p>Here we can see that the entity sentiment analysis endpoint will return back a collection of phrases. The endpoint provides a sentiment score for each phrase in context to the text it was extracted from. We store this calculation in the relationship that connects a <code>Tweet</code> to a <code>Phrase</code>, as shown in the diagram above.</p></div></div><div class=\"sect2\"><h3 id=\"_content_classification\">Content classification</h3><div id=\"__asciidoctor-preview-30__\" class=\"paragraph\"><p>Content classification is an API provided by GCP that will allow you to provide a string of text as a document, and be returned a set of categories that classifies the content.</p></div><div id=\"__asciidoctor-preview-31__\" class=\"quoteblock\"><blockquote><div id=\"__asciidoctor-preview-32__\" class=\"paragraph\"><p><a href=\"https://cloud.google.com/natural-language/docs/classifying-text\" target=\"_blank\" rel=\"noopener\"><em>Content classification</em></a> analyzes text content and returns a content category for the content.</p></div></blockquote></div><div id=\"__asciidoctor-preview-33__\" class=\"paragraph\"><p>The diagram below shows how a <code>Tweet</code> contains certain phrases that share a topic, and can be linked back to a <code>User</code>.</p></div><div class=\"imageblock\" style=\"display: block;\"><div class=\"content\" style=\"text-align: center;\"><img alt=\"Twitter graph content classification topic data model\" src=\"https://i.imgur.com/6yJTJuE.png\" style=\"max-width: 50em; margin: auto !important;\" width=\"100%\"/></div></div><div id=\"__asciidoctor-preview-35__\" class=\"paragraph\"><p>Categorizing a group of tweets into a set of topics is a difficult proposition. More so, the computation required to categorically segment topics is cost prohibitive. Tweets, by themselves, do not always contain enough text to meaningfully classify their content. Meanings also vary widely in context to the audience and author of a tweet.</p></div><div id=\"__asciidoctor-preview-36__\" class=\"paragraph\"><p>To generate an index of topics for groups of tweets, we can use PageRank scoring on phrases mentioned in imported tweets. By doing this, we can group together batches of tweets for the top ranked phrases. Further, this allows us to ask questions related to a user&#8217;s sentiment for particular topics, in addition to phrases.</p></div><div id=\"__asciidoctor-preview-37__\" class=\"paragraph\"><p>For example, the crawling algorithm will schedule an analysis on the phrases <code>metrics</code>, <code>database</code>, and <code>serverless</code>. For each of these terms, we&#8217;ll select each <code>Tweet</code> and join together the text into a single document. The resulting document contains much more text that will be useful for content classification on Google Cloud.</p></div><div id=\"__asciidoctor-preview-38__\" class=\"paragraph\"><p>In the next section I&#8217;ll describe how PageRank is used to optimize the crawling algorithm&#8217;s import and analysis of Twitter data.</p></div></div></div></div><div class=\"sect1\"><h2 id=\"_graph_processing\">Graph Processing</h2><div class=\"sectionbody\"><div id=\"__asciidoctor-preview-39__\" class=\"paragraph\"><p>How do you find the most influential users in your Twitter network without having access to all of the data? To do this, we need to iteratively rank and then discover profiles using the PageRank algorithm.</p></div><div class=\"sect2\"><h3 id=\"_user_rank\">User Rank</h3><div id=\"__asciidoctor-preview-40__\" class=\"paragraph\"><p>The diagram below describes the follower graph of relationships between <code>Users</code>.</p></div><div class=\"imageblock\" style=\"display: block;\"><div class=\"content\" style=\"text-align: center;\"><img alt=\"Twitter graph user follows PageRank example\" src=\"https://i.imgur.com/UwNsBPQ.png\" style=\"max-width: 50em; margin: auto !important;\" width=\"100%\"/></div></div><div id=\"__asciidoctor-preview-42__\" class=\"paragraph\"><p>On a scheduled interval, PageRank will be run on this subgraph. The result will be used to select the next highest ranked user that has not yet been imported. By doing this, we can walk towards more influential sources of content. The added benefit is that we only focus on importing follower and friend relationships from the most influential users. This allows us to hop towards the influential center of gravity of tweets in a network without importing retweets or favorites.</p></div></div><div class=\"sect2\"><h3 id=\"_phrase_rank\">Phrase Rank</h3><div id=\"__asciidoctor-preview-43__\" class=\"paragraph\"><p>The diagram below describes the semantic relationships between <code>Tweets</code> and <code>Phrases</code>.</p></div><div class=\"imageblock\" style=\"display: block;\"><div class=\"content\" style=\"text-align: center;\"><img alt=\"Twitter graph phrase PageRank example\" src=\"https://i.imgur.com/P4W2kAN.png\" style=\"max-width: 50em; margin: auto !important;\" width=\"100%\"/></div></div><div id=\"__asciidoctor-preview-45__\" class=\"paragraph\"><p>On a scheduled interval, PageRank is calculated on the phrases of this subgraph. The results are used to classify groups of <code>Tweets</code>, as shown in the example below.</p></div><div class=\"imageblock\" style=\"display: block;\"><div class=\"content\" style=\"text-align: center;\"><img alt=\"Twitter graph infer topic example\" src=\"https://i.imgur.com/72XPhnm.png\" style=\"max-width: 50em; margin: auto !important;\" width=\"100%\"/></div></div></div></div></div><div class=\"sect1\"><h2 id=\"_answering_questions_with_neo4j\">Answering Questions with Neo4j</h2><div class=\"sectionbody\"><div id=\"__asciidoctor-preview-47__\" class=\"paragraph\"><p>In this first blog post we&#8217;re going to keep things relatively short by focusing on answering questions using the graph data model. In later blog posts, I will focus more on operations and application development with <a href=\"https://spring.io/projects/spring-boot\" target=\"_blank\" rel=\"noopener\">Spring Boot</a>.</p></div><div id=\"__asciidoctor-preview-48__\" class=\"paragraph\"><p>In the next sections I&#8217;ll summarize some of the queries that I formulated to answer questions related to <a href=\"https://en.wikipedia.org/wiki/Emotional_contagion\" target=\"_blank\" rel=\"noopener\">emotional contagion</a>, <a href=\"https://en.wikipedia.org/wiki/Social_influence\" target=\"_blank\" rel=\"noopener\">influence</a>, and <a href=\"https://en.wikipedia.org/wiki/Meme\" target=\"_blank\" rel=\"noopener\">memes</a>.</p></div><div class=\"sect2\"><h3 id=\"_ranking_users_by_topic_and_influence\">Ranking users by topic and influence</h3><div id=\"__asciidoctor-preview-49__\" class=\"paragraph\"><p>One of the queries that I wanted to create was for a ranking dashboard based on topic and sentiment. It took me numerous iterations to come up with a Neo4j Cypher query that accurately extracts the most relevant category and phrase for each ranked user.</p></div><div class=\"imageblock\" style=\"display: block;\"><div class=\"content\" style=\"text-align: center;\"><img alt=\"Twitter user ranking with topic example\" src=\"https://i.imgur.com/tq5Pqzo.png\" style=\"max-width: 50em; margin: auto !important;\" width=\"100%\"/></div></div><div id=\"__asciidoctor-preview-51__\" class=\"paragraph\"><p>In the screenshot above, I run a Cypher query in the Neo4j browser to infer the top phrase and category for a user&#8217;s tweets. Since I follow all of these users, I can honestly say that the query is fairly accurate. I will dive deeper into this subject in a later blog post.</p></div></div></div></div><div class=\"sect1\"><h2 id=\"_diving_into_the_meme_pool\">Diving into the meme pool</h2><div class=\"sectionbody\"><div id=\"__asciidoctor-preview-52__\" class=\"paragraph\"><p>Next, I&#8217;ll explain some of my recent tweets, which I posted over the course of building this application.</p></div><blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">I built a sentiment analysis tool that can learn stuff by reading tweets. It figured out what a container is.<br><br>Well, kind of. 😁 <a href=\"https://t.co/tRiHexLoL9\">pic.twitter.com/tRiHexLoL9</a></p>&mdash; Kenny Bastani (@kennybastani) <a href=\"https://twitter.com/kennybastani/status/1170709276811284480?ref_src=twsrc%5Etfw\">September 8, 2019</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script><div id=\"__asciidoctor-preview-54__\" class=\"paragraph\"><p>In the tweet above, I was excited to discover a graph visualization that demonstrated how <a href=\"https://en.wikipedia.org/wiki/LXC\" target=\"_blank\" rel=\"noopener\">Linux containers</a> were related to different phrases. I call this Neo4j Cypher query: a <em>meme graph</em>.</p></div><div id=\"__asciidoctor-preview-55__\" class=\"paragraph\"><p><em>Memes</em> are patterns or templates in natural language text that evolve and change over time. Twitter users will post variations of a meme, which will contain variable and static parts. The variable parts of a meme are limited to a subset of possible terms. To discover a meme in the Twitter graph, I can query for <code>phrases</code> that have multiple connections to <code>tweets</code>. By traversing tweets and their extracted phrases, I discovered potential memes by matching cycles and loops in entity relationships.</p></div><div class=\"imageblock\" style=\"display: block;\"><div class=\"content\" style=\"text-align: center;\"><img alt=\"Twitter meme graph Neo4j screenshot\" src=\"https://i.imgur.com/1oF0bJj.png\" style=\"max-width: 50em; margin: auto !important;\" width=\"100%\"/></div></div><div id=\"__asciidoctor-preview-57__\" class=\"paragraph\"><p>In the screenshot above, you&#8217;ll see a flow of looped connections between tweets and phrases. I&#8217;ve set a criteria on the results so that only phrases mentioned twice in the same tweet are displayed. This proved to be a really clever way to determine the most relevant phrases in the network. As it turns out, people do not often use the same phrase more than once in the same tweet. Which means, that for the users who do, they are conveying something of topical importance.</p></div><div id=\"__asciidoctor-preview-58__\" class=\"paragraph\"><p>Memes seem to tell a story about a network of users on Twitter.</p></div><div class=\"sect3\"><h4 id=\"_visualizing_the_emotion_of_words\">Visualizing the emotion of words</h4><div id=\"__asciidoctor-preview-59__\" class=\"paragraph\"><p>Next, I&#8217;ve decided to utilize the sentiment scoring from Google Cloud Natural Language to generate a visualization of popular phrases in their emotional context.</p></div><blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">I used graph algorithms and sentiment analysis to infer and predict the &quot;emotional feels 🤷‍♂️&quot; for 20,000+ phrases &amp; mentions in my Twitter network.<br><br>Blue/green phrases: 🙂<br>Yellow phrases: 😶<br>Orange/red phrases: ☹️ <a href=\"https://t.co/ADbprmeZne\">pic.twitter.com/ADbprmeZne</a></p>&mdash; Kenny Bastani (@kennybastani) <a href=\"https://twitter.com/kennybastani/status/1171910575066157057?ref_src=twsrc%5Etfw\">September 11, 2019</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script><div id=\"__asciidoctor-preview-61__\" class=\"paragraph\"><p>The tweet referenced above is a ranked extract of phrases that are colored and sized depending on their emotional context. Simply, I exported the graph of phrases and tweets into a visualization tool named <a href=\"https://gephi.org/\" target=\"_blank\" rel=\"noopener\">Gephi</a>. Gephi has a set of features that you can use to rank and visualize graph datasets. For me, this was a good proof of concept for understanding whether or not sentiment analysis could be used to infer the larger emotional context of important phrases in my Twitter network.</p></div></div><div class=\"sect3\"><h4 id=\"_visualizing_the_virulence_of_words\">Visualizing the virulence of words</h4><div id=\"__asciidoctor-preview-62__\" class=\"paragraph\"><p>While putting together this blog post, I wanted to focus on determining how viral text could spread emotions. It turns out, there are <a href=\"https://www.pnas.org/content/pnas/111/24/8788.full.pdf\" target=\"_blank\" rel=\"noopener\">academic papers</a> that prove that emotional contagion can spread in social networks. This will be the topic of future blog posts, but I wanted to end this blog post with a quote from the father of memes, <a href=\"https://en.wikipedia.org/wiki/Richard_Dawkins\" target=\"_blank\" rel=\"noopener\">Richard Dawkins</a>.</p></div><blockquote class=\"twitter-tweet\" data-dnt=\"true\"><p lang=\"en\" dir=\"ltr\">The shape of viral text on Twitter. 🦠🦠🦠 <a href=\"https://t.co/QeRSb78ZmI\">pic.twitter.com/QeRSb78ZmI</a></p>&mdash; Kenny Bastani (@kennybastani) <a href=\"https://twitter.com/kennybastani/status/1173207206503878656?ref_src=twsrc%5Etfw\">September 15, 2019</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script><div id=\"__asciidoctor-preview-64__\" class=\"paragraph\"><p>The most interesting thing I discovered from the data so far was related to memes. It turns out, that people construct and use memes to easily deliver meaningful information on Twitter without knowing. Memes serve as a template where static and variable parts of text provide a familiar backbone for understanding many different aspects of the intended meaning of a tweet. There are the memes we, of course, know and intend to use. There are also memes that we often use that convey meaning but are not intentional, and are not obvious.</p></div><div id=\"__asciidoctor-preview-65__\" class=\"paragraph\"><p>The shape of the connected data appears to also show that <a href=\"https://en.wikipedia.org/wiki/Pattern_formation\" target=\"_blank\" rel=\"noopener\">biological patterns</a> evolve from the variations of memes that connect tweets and phrases together. This was first predicted by Dawkins, in his book <a href=\"https://en.wikipedia.org/wiki/The_Selfish_Gene\" target=\"_blank\" rel=\"noopener\">The Selfish Gene</a>, where he coins the term <em>meme</em>.</p></div><div id=\"__asciidoctor-preview-66__\" class=\"quoteblock\"><blockquote>I believe that, given the right conditions, replicators automatically band together to create systems, or machines, that carry them around and work to favour their continued replication. </blockquote><div class=\"attribution\">&#8212; Richard Dawkins<br><cite>The Selfish Gene (1976)</cite></div></div><div id=\"__asciidoctor-preview-67__\" class=\"paragraph\"><p>There is an interesting body of work behind this idea, thanks to Dawkins. But we should ask, why would there be biologically mimetic patterns in the graph structure that I queried?</p></div><div id=\"__asciidoctor-preview-68__\" class=\"paragraph\"><p>Because memes use natural selection to reproduce and evolve in the same way that biological organisms do, using genes. Both mechanisms are based on the translation and expression of information in the form of graphs, which Dawkins first wrote about over 40 years ago. Information is at the core of gene expression into molecular proteins, with organisms as the driver. Information is also at the core of language&#8217;s expression into meaningful behavior, with emotion as the driver.</p></div><div id=\"__asciidoctor-preview-69__\" class=\"quoteblock\"><blockquote>With only a little imagination we can see the gene as sitting at the centre of a radiating web of extended phenotypic power. And an object in the world is the centre of a converging web of influences from many genes sitting in many organisms. The long reach of the gene knows no obvious boundaries. The whole world is criss-crossed with causal arrows joining genes to phenotypic effects, far and near. </blockquote><div class=\"attribution\">&#8212; Richard Dawkins<br><cite>The Selfish Gene (1976)</cite></div></div><div id=\"__asciidoctor-preview-70__\" class=\"paragraph\"><p>These are the final words of Dawkin&#8217;s book. No world-wide web as we know it today had yet existed in 1976. No Twitter existed. I did not exist. And today, we find ourselves diving into the meme pool and doing so without a full understanding how our brains work. So, what do you think? What is influencing your behavior on Twitter?</p></div></div></div></div><div class=\"sect1\"><h2 id=\"_summary\">Summary</h2><div class=\"sectionbody\"><div id=\"__asciidoctor-preview-71__\" class=\"paragraph\"><p>In this blog post I&#8217;ve introduced you to a graph data model for analyzing the influences and sentiments of users on Twitter. To better understand the code behind the architecture, I recommend reading a previously posted tutorial that describes the predecessor to this blog post.</p></div><div id=\"__asciidoctor-preview-72__\" class=\"paragraph\"><p>In an upcoming blog post we will focus on building a news feed that balances the negative and positive content of popular tweets, using Spring Boot. We&#8217;ll also focus on a feature for understanding how emotional content balances a user&#8217;s behavior over time. I&#8217;ll also focus more on explaining the operational implications of running and scaling the Twitter crawling algorithm and Neo4j.</p></div><div class=\"sect2\"><h3 id=\"_running_the_example\">Running the example</h3><div id=\"__asciidoctor-preview-73__\" class=\"paragraph\"><p>The code for this blog post is free and openly available, but is still in active flux—as I design towards a more meaningful community project. I highly recommend <a href=\"https://github.com/kbastani/sentiment-analysis-twitter-microservices-example/blob/master/twitter-rank-crawler/src/main/java/org/kbastani/processor/RankProcessor.java\" target=\"_blank\" rel=\"noopener\">exploring the code</a> that is commented in the <a href=\"https://github.com/kbastani/sentiment-analysis-twitter-microservices-example/tree/master/twitter-rank-crawler\" target=\"_blank\" rel=\"noopener\"><em>Twitter Rank Crawler</em> service</a>.</p></div><div id=\"__asciidoctor-preview-74__\" class=\"paragraph\"><p>Feel free to post questions here or on the GitHub issue tracker. I&#8217;ve included the directions on running the sample application <a href=\"https://github.com/kbastani/sentiment-analysis-twitter-microservices-example\" target=\"_blank\" rel=\"noopener\">in the GitHub repository</a> for this example.</p></div></div></div></div>        </div>      </div>",
  "enclosure": "",
  "link": "https://www.kennybastani.com/2019/09/sentiment-analysis-on-twitter-data.html",
  "author": "noreply@blogger.com (Kenny Bastani)",
  "thr:total": 0
}