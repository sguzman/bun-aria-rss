{
  "id": "tag:blogger.com,1999:blog-15418143.post-6547994887448818346",
  "published": "2016-12-16T00:13:00.000-05:00",
  "updated": "2016-12-16T03:55:19.368-05:00",
  "category": [
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    ""
  ],
  "title": "Nuts and Bolts of Building Deep Learning Applications: Ng @ NIPS2016",
  "content": "You might go to a cutting-edge machine learning research conference like NIPS hoping to find some mathematical insight that will help you take your deep learning system's performance to the next level. Unfortunately, as Andrew Ng reiterated to a live crowd of 1,000+ attendees this past Monday, there is no secret AI equation that will let you escape your machine learning woes. All you need is some <b><i>rigor</i></b>, and much of what Ng covered is his remarkable NIPS 2016 presentation titled \"<i>The Nuts and Bolts of Building Applications using Deep Learning</i>\" is not rocket science. Today we'll dissect the lecture and Ng's key takeaways. Let's begin.<br /><div><br /></div><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"https://3.bp.blogspot.com/-uA-shnpwkcQ/WFNia2-WVGI/AAAAAAAAPSM/L4K304x-7dwhNEhJ7RpLxNRXKczap6PSQCLcB/s1600/nuts_and_bolts_andrew_ng.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" height=\"258\" src=\"https://3.bp.blogspot.com/-uA-shnpwkcQ/WFNia2-WVGI/AAAAAAAAPSM/L4K304x-7dwhNEhJ7RpLxNRXKczap6PSQCLcB/s400/nuts_and_bolts_andrew_ng.png\" width=\"400\" /></a></div><div class=\"separator\" style=\"clear: both; text-align: center;\"><b>Figure 1.</b> Andrew Ng delivers a powerful message at NIPS 2016.</div><div><br /></div><div><b><br /></b></div><div><b>Andrew Ng and the Lecture</b></div><div>Andrew Ng's lecture at NIPS 2016 in Barcelona was phenomenal -- truly one of the best presentations I have seen in a long time. In a juxtaposition of two influential presentation styles, the <i>CEO-style</i> and the <i>Professor-style</i>, Andrew Ng mesmerized the audience for two hours. Andrew Ng's wisdom from managing large scale AI projects at Baidu, Google, and Stanford really shows. In his talk, Ng spoke to the audience and discussed one of they key challenges facing most of the NIPS audience -- <i>how do you make your deep learning systems better</i>? Rather than showing off new research findings from his cutting-edge projects, Andrew Ng presented a simple recipe for analyzing and debugging today's large scale systems. With no need for equations, a handful of diagrams, and several checklists, Andrew Ng delivered a two-whiteboards-in-front-of-a-video-camera lecture, something you would expect at a group research meeting. However, Ng made sure to not delve into Research-y areas, likely to make your brain fire on all cylinders, but making you and your company very little dollars in the foreseeable future.</div><div><br /></div><div><div><b>Money-making deep learning vs Idea-generating deep learning</b></div><div>Andrew Ng highlighted the fact that while NIPS is a research conference, many of the newly generated ideas are simply ideas, not yet battle-tested vehicles for converting mathematical acumen into dollars. The bread and butter of money-making deep learning&nbsp;is&nbsp;supervised learning with recurrent neural networks such as LSTMs in second place. Research areas such as Generative Adversarial Networks (GANs), Deep Reinforcement Learning (Deep RL), and just about anything branding itself as unsupervised learning, are simply Research, with a capital R. These ideas are likely to influence the next 10 years of Deep Learning research, so it is wise to focus on publishing and tinkering if you really love such open-ended Research endeavours. Applied deep learning research is much more about&nbsp;taming&nbsp;your problem (understanding the inputs and outputs), casting the problem as a supervised learning problem, and hammering it with ample data and ample experiments.</div></div><div><b><br /></b></div><div><blockquote class=\"tr_bq\"><b>\"It takes surprisingly long time to grok bias and variance deeply, but people that understand bias and variance deeply are often able to drive very rapid progress.\"&nbsp;</b></blockquote><blockquote class=\"tr_bq\"><i>--Andrew Ng&nbsp;</i></blockquote></div><div><br /></div><div><b><br /></b></div><div><b>The 5-step method of building better systems</b></div><div>Most issues in applied deep learning come from a training-data / testing-data mismatch. In some scenarios this issue just doesn't come up, but you'd be surprised how often applied machine learning projects use training data (which is easy to collect and annotate) that is different from the target application. Andrew Ng's discussion is centered around the basic idea of bias-variance tradeoff. You want a classifier with a good ability to fit the data (low bias is good) that also generalizes to unseen examples (low variance is good). Too often, applied machine learning projects running as scale forget this critical dichotomy. Here are the four numbers you should always report:</div><div><ul><li>Training set error</li><li>Testing set error</li><li>Dev (aka Validation) set error</li><li>Train-Dev (aka Train-Val) set error</li></ul><div><br /></div></div><div>Andrew Ng suggests following the following recipe:</div><div><br /></div><div><br /></div><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"https://3.bp.blogspot.com/-duzBNDYdDGA/WFNtNi0DcNI/AAAAAAAAPSc/AHuvDXl6EhAgweD6IxGAbqOBK5qM_W05QCLcB/s1600/nuts-and-bolts-checklist.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" height=\"300\" src=\"https://3.bp.blogspot.com/-duzBNDYdDGA/WFNtNi0DcNI/AAAAAAAAPSc/AHuvDXl6EhAgweD6IxGAbqOBK5qM_W05QCLcB/s400/nuts-and-bolts-checklist.png\" width=\"400\" /></a></div><div class=\"separator\" style=\"clear: both; text-align: center;\"><b>Figure 2. </b>Andrew Ng's \"Applied Bias-Variance for Deep Learning Flowchart\"</div><div class=\"separator\" style=\"clear: both; text-align: center;\">for building better deep learning systems.</div><div><br /></div><div><br /></div><div>Take all of your data, split it into 60% for training and 40% for testing. Use half of the test set for evaluation purposes only, and the other half for development (aka validation). Now take the training set, leave out a little chunk, and call it the training-dev data. This 4-way split isn't always necessary, but consider the worse case where you start with two separate sets of data, and not just one: a large set of training data and a smaller set of test data. You'll still want to split the testing into validation and testing, but also consider leaving out a small chunk of the training data for the training-validation. By reporting the data on the training set vs the training-validation set, you measure the \"variance.\"<br /><br /><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"https://2.bp.blogspot.com/-kGCFHEtvSCc/WFNydTfCWwI/AAAAAAAAPSs/Zt-8Hxy0b6AhSKQLW8eVC2YmH7LOL2pyQCLcB/s1600/bias-variance-andrew-ng.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" height=\"267\" src=\"https://2.bp.blogspot.com/-kGCFHEtvSCc/WFNydTfCWwI/AAAAAAAAPSs/Zt-8Hxy0b6AhSKQLW8eVC2YmH7LOL2pyQCLcB/s400/bias-variance-andrew-ng.png\" width=\"400\" /></a></div><div class=\"separator\" style=\"clear: both; text-align: center;\"><b>Figure 3. </b>Human-level vs Training vs Training-dev vs Dev vs Test.&nbsp;</div><div class=\"separator\" style=\"clear: both; text-align: center;\">Taken from Andrew Ng's 2016 talk.</div><br /></div><div><br /></div><div>In addition to these four accuracies, you might want to report the human-level accuracy, for a total of 5 quantities to report. The difference between human-level and training set performance is the Bias. The difference between the training set and the training-dev set is the Variance. The difference between the training-dev and dev sets is the train-test mismatch, which is much more common in real-world applications that you'd think. And finally, the difference between the dev and test sets measures how overfitting.<br /><br />Nowhere in Andrew Ng's presentation does he mention how to use unsupervised learning, but he does include a brief discussion about \"Synthesis.\" Such synthesis ideas are all about blending pre-existing data or using a rendering engine to augment your training set.<br /><br /><b>Conclusion</b><br />If you want to lose weight, gain muscle, and improve your overall physical appearance, there is no magical protein shake and no magical bicep-building exercise. The fundamentals such as reduced caloric intake, getting adequate sleep, cardiovascular exercise, and core strength exercises like squats and bench presses will get you there. In this sense, fitness is just like machine learning -- there is no secret sauce. I guess that makes <i>Andrew Ng the Arnold Schwarzenegger of Machine Learning</i>.<br /><br />What you are most likely missing in your life is the rigor of reporting a handful of useful numbers such as performance on the 4 main data splits (see Figure 3). Analyzing these numbers will let you know if you need more data or better models, and will ultimately let you hone in your expertise on the conceptual bottleneck in your system (see Figure 2).<br /><br />With a prolific research track record that never ceases to amaze, we all know Andrew Ng as one hell of an applied machine learning researcher. But the new Andrew Ng is not just another data-nerd. His personality is bigger than ever -- more confident, more entertaining, and his experience with a large number of academic and industrial projects makes him much wiser. With enlightening lectures as \"The Nuts and Bolts of Building Applications with Deep Learning\" Andrew Ng is likely to be an individual whose future keynotes you might not want to miss.</div><div><br /><b>Appendix</b><br />You can watch a September 27th, 2016 version of the <a href=\"https://www.youtube.com/watch?v=F1ka6a13S9I\">Andrew Ng Nuts and Bolts of Applying Deep Learning Lecture on YouTube</a>, which he delivered at the Deep Learning School. If you are working on machine learning problems in a startup, then definitely give the video a watch. I will update the video link once/if the newer NIPS 2016 version shows up online.<br /><br />You can also check out <a href=\"https://kevinzakka.github.io/2016/09/26/applying-deep-learning/\">Kevin Zakka's blog post</a> for ample illustrations and writeup corresponding to Andrew Ng's entire talk.</div><div><br /></div><div><br /></div><div><br /></div><div><br /></div><div><br /></div><div><div></div></div>",
  "link": [
    "",
    "",
    "",
    "",
    ""
  ],
  "author": {
    "name": "Tomasz Malisiewicz",
    "uri": "http://www.blogger.com/profile/17507234774392358321",
    "email": "noreply@blogger.com",
    "gd:image": ""
  },
  "media:thumbnail": "",
  "thr:total": 0
}