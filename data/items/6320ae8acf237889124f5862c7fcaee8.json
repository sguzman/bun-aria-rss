{
  "title": "Blogging with IPython in Octopress",
  "link": "",
  "published": "2012-10-04T18:40:00-07:00",
  "updated": "2012-10-04T18:40:00-07:00",
  "author": {
    "name": "Jake VanderPlas"
  },
  "id": "tag:jakevdp.github.io,2012-10-04:blog/2012/10/04/blogging-with-ipython/",
  "summary": "<p>A few weeks ago, Fernando Perez, the creator of IPython, wrote a <a href=\"http://blog.fperez.org/2012/09/blogging-with-ipython-notebook.html\">post</a> about blogging with IPython notebooks.  I decided to take a stab at making this work in Octopress.</p>\n<p>I started by following Fernando's outline:  I first went to <a href=\"http://github.com/ipython/nbconvert\">http://github.com/ipython/nbconvert</a> and obtained the current version of the notebook converter.  Running <code>nbconvert.py -f blogger-html filename.ipynb</code> produces a separate html and header file with the notebook content.  I inserted the stylesheet info into my header (in octopress, the default location is <code>source/_includes/custom/head.html</code>) and copied the html directly into my post.</p>\n<p>I immediately encountered a problem.  <code>nbconvert</code> uses global CSS classes and style markups, and some of these (notably the \"hightlight\" class and the <code>&lt;pre&gt;</code> tag formatting) conflict with styles defined in my octopress theme.  The result was that every post in my blog ended up looking like an ugly hybrid of octopress and an ipython notebook.  Not very nice.</p>\n<p>So I did some surgery.  Admittedly, this is a terrible hack, but the following code takes the files output by nbconvert, slices them up, and creates a specific set of CSS classes for the notebook markup, such that there's no longer a conflict with the native octopress styles\n(you can download this script <a href=\"http://jakevdp.github.com/downloads/code/convert_notebook.py\">here</a>):</p>",
  "category": [
    "",
    "",
    ""
  ]
}