{
  "title": "How To Write, Deploy, and Interact with Ethereum Smart Contracts on a Private Blockchain",
  "link": "https://bigishdata.com/2017/12/15/how-to-write-deploy-and-interact-with-ethereum-smart-contracts-on-a-private-blockchain/",
  "comments": "https://bigishdata.com/2017/12/15/how-to-write-deploy-and-interact-with-ethereum-smart-contracts-on-a-private-blockchain/#comments",
  "dc:creator": "Jack Schultz",
  "pubDate": "Fri, 15 Dec 2017 14:21:16 +0000",
  "category": [
    "Blockchains",
    "blockchain",
    "Ethereum",
    "Smart Contracts"
  ],
  "guid": "http://bigishdata.com/?p=971",
  "description": "Here are the rules: if you read this post all the way through, you have to deploy a smart contract on your private Ethereum blockchain yourself. I give you all the code I used here in Github so you have &#8230; <a href=\"https://bigishdata.com/2017/12/15/how-to-write-deploy-and-interact-with-ethereum-smart-contracts-on-a-private-blockchain/\">Continue reading <span class=\"meta-nav\">&#8594;</span></a>",
  "content:encoded": "<p>Here are the rules: if you read this post all the way through, you have to deploy a smart contract on your private Ethereum blockchain yourself. I give you all the code I used here in Github so you have no excuses not to.</p>\n<p>But if you don&#8217;t follow the rules and you only want to read, hopefully this helps give a perspective of starting with nothing and ending with a blockchain app.</p>\n<p>By the end, you&#8217;ll have started a local private Ethereum blockchain, connected two different nodes as peers, written and compiled a smart contract, and have a web interface that allows users to ask questions, deploy the questions on the blockchain, and then lets the users answer.</p>\n<p>If you&#8217;re confused, run into an error, or want to say something else, go ahead an write a comment, get in <a href=\"https://bigishdata.com/contact/\">contact</a>, or say something on <a href=\"https://twitter.com/jack_schultz\">Twitter</a>.</p>\n<p>Oh, and here&#8217;s <a href=\"https://github.com/jackschultz/privEth/\">the Github repo</a>, so go ahead and fork  it (if you don&#8217;t want to copy paste all the code here) and then if you make updates you want to share, I&#8217;ll throw this in the README.</p>\n<h3>Private Blockchain Creation</h3>\n<p>To create a single node, we need the following <code>genesis.json</code>, which represents the initial block on the private blockchain.</p>\n<pre>//genesis.json\n{\n \"alloc\": {},\n \"config\": {\n   \"chainID\": 72,\n   \"homesteadBlock\": 0,\n   \"eip155Block\": 0,\n   \"eip158Block\": 0\n },\n \"nonce\": \"0x0000000000000000\",\n \"difficulty\": \"0x4000\",\n \"mixhash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n \"coinbase\": \"0x0000000000000000000000000000000000000000\",\n \"timestamp\": \"0x00\",\n \"parentHash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n \"extraData\": \"0x11bbe8db4e347b4e8c937c1c8370e4b5ed33adb3db69cbdb7a38e1e50b1b82fa\",\n \"gasLimit\": \"0xffffffff\"\n}</pre>\n<p>If you want a somewhat full explanation of the fields, look at <a href=\"https://ethereum.stackexchange.com/questions/2376/what-does-each-genesis-json-parameter-mean/2377#2377\">this Stack Overflow answer</a>. The big ones in our case here are <code>difficulty</code> being low, because we don&#8217;t want to have to wait long for blocks to be mined on our test network, and then <code>gasLimit</code> being high to allow the amount of work that can be done by a node in the block to be able to process every transaction.</p>\n<p>Go ahead and open a terminal, make sure <code>geth</code> <a href=\"https://geth.ethereum.org/downloads/\">is installed in whatever way works for your OS</a>, and then <code>cd</code> into the folder that you have your <code>genesis.json</code> file saved. Running run the following command will initialize the blockchain for this node.</p>\n<p><code>$ geth --datadir \"/Users/USERNAME/Library/PrivEth\" init genesis.json</code></p>\n<p><strong>&#8211;datadir</strong> specifies where we want the all the data for the blockchain to be located. On a mac, the default is ~/Library/Ethereum. Since we have multiple nodes running, we can’t have them sharing the same data folder, so we’re going to specify. Linux and Windows machines have different <a href=\"https://github.com/ethereum/go-ethereum/wiki/Backup-&-restore#data-directory\">default datadirs</a>, so take a look at those to see in general where they should be located.</p>\n<p>After running this init command with the <code>genesis.json</code> file we want to use, go checkout that <code>--datadir</code> directory. You’ll see a bunch of files, so feel free to poke around. Not necessary right now, but you&#8217;ll want to look around there eventually.</p>\n<p>For this to be a blockchain, we need more than one node. For blockchains to become peers, we need them to have the same genesis file. So we’re going to run the same command as above, from the same directory, but this time with a different <code>datadir</code>.</p>\n<p><code>geth --datadir \"/Users/USERNAME/Library/PrivEth2\" init genesis.json</code></p>\n<p>With all the code here, we&#8217;re going to be working in the same directory. The code is the same, but with the command line options, we&#8217;ll be able to separate these processes by the command line arguments.</p>\n<div data-shortcode=\"caption\" id=\"attachment_977\" style=\"width: 600px\" class=\"wp-caption alignnone\"><a href=\"https://bigishdata.files.wordpress.com/2017/12/eth-init.png\"><img loading=\"lazy\" aria-describedby=\"caption-attachment-977\" data-attachment-id=\"977\" data-permalink=\"https://bigishdata.com/2017/12/15/how-to-write-deploy-and-interact-with-ethereum-smart-contracts-on-a-private-blockchain/eth-init/\" data-orig-file=\"https://bigishdata.files.wordpress.com/2017/12/eth-init.png\" data-orig-size=\"2824,556\" data-comments-opened=\"1\" data-image-meta=\"{\"aperture\":\"0\",\"credit\":\"\",\"camera\":\"\",\"caption\":\"\",\"created_timestamp\":\"0\",\"copyright\":\"\",\"focal_length\":\"0\",\"iso\":\"0\",\"shutter_speed\":\"0\",\"title\":\"\",\"orientation\":\"0\"}\" data-image-title=\"eth-init\" data-image-description=\"\" data-image-caption=\"<p>Initializing the chain for both nodes.</p>\n\" data-medium-file=\"https://bigishdata.files.wordpress.com/2017/12/eth-init.png?w=300\" data-large-file=\"https://bigishdata.files.wordpress.com/2017/12/eth-init.png?w=584\" class=\" wp-image-977\" src=\"https://bigishdata.files.wordpress.com/2017/12/eth-init.png?w=590&#038;h=116\" alt=\"\" width=\"590\" height=\"116\" srcset=\"https://bigishdata.files.wordpress.com/2017/12/eth-init.png?w=590&h=116 590w, https://bigishdata.files.wordpress.com/2017/12/eth-init.png?w=1180&h=232 1180w, https://bigishdata.files.wordpress.com/2017/12/eth-init.png?w=150&h=30 150w, https://bigishdata.files.wordpress.com/2017/12/eth-init.png?w=300&h=59 300w, https://bigishdata.files.wordpress.com/2017/12/eth-init.png?w=768&h=151 768w, https://bigishdata.files.wordpress.com/2017/12/eth-init.png?w=1024&h=202 1024w\" sizes=\"(max-width: 590px) 100vw, 590px\" /></a><p id=\"caption-attachment-977\" class=\"wp-caption-text\">Initializing the chain for both nodes.</p></div>\n<p>When running <code>geth</code> with a different <code>--datadir</code>, you’ll be running separate nodes no matter where you ran the command from. Just remember to specify the <code>--datadir</code> each time so it doesn’t fall back to default. Also note that I changed the names for these <code>datadirs</code>, so watch out if you see different names in the screenshots.</p>\n<h3>Opening the Consoles</h3>\n<p>So far, we&#8217;ve done three things. 1) Created a <code>genesis.json</code> file in a working directory of your choosing, 2) picked a directory to store the blockchain for one node and initialized the first block, and 3) picked a different directory to store the blockchain for the other node. Very little code and a few commands.</p>\n<p><span id=\"more-971\"></span></p>\n<p><span style=\"font-size:1rem;\">The next step to be able to log into the geth console for each node. The console will start the geth process and run it, but also give us a way to run some web3 commands in the terminal.</span></p>\n<pre>geth --datadir \"/Users/jackschultz/Library/EthPrivLocal\" --networkid 72 --port 30301 --nodiscover console</pre>\n<p>There are a couple more options here.</p>\n<p><strong>&#8211;networkid</strong> is similar to in the <code>genesis.json</code> file, where all we want here is to make sure we&#8217;re not using network ids 1-4.</p>\n<p><strong>&#8211;port</strong> specifies which port our .ipc file will be using. That&#8217;s the way we&#8217;ll connect with the database using the web3.js library. The default port is 30303, so we&#8217;ll keep it in that area, but this is our first node, so 30301 it is.</p>\n<p><strong>&#8211;nodiscover</strong> tells <code>geth</code> to not look for peers initially. This is actually important in our case. This is a private network. We don&#8217;t want nodes to try to connect to other nodes without me specifying, and we don&#8217;t want these nodes to be discovered without us telling them.</p>\n<p>With the first <code>geth</code> node running, run the same command in a different terminal with the second <code>--datadir</code> and and different <code>--port</code> you&#8217;ll have nodes running.</p>\n<div data-shortcode=\"caption\" id=\"attachment_978\" style=\"width: 569px\" class=\"wp-caption alignnone\"><a href=\"https://bigishdata.files.wordpress.com/2017/12/eth-console.png\"><img loading=\"lazy\" aria-describedby=\"caption-attachment-978\" data-attachment-id=\"978\" data-permalink=\"https://bigishdata.com/2017/12/15/how-to-write-deploy-and-interact-with-ethereum-smart-contracts-on-a-private-blockchain/eth-console/\" data-orig-file=\"https://bigishdata.files.wordpress.com/2017/12/eth-console.png\" data-orig-size=\"2820,1102\" data-comments-opened=\"1\" data-image-meta=\"{\"aperture\":\"0\",\"credit\":\"\",\"camera\":\"\",\"caption\":\"\",\"created_timestamp\":\"0\",\"copyright\":\"\",\"focal_length\":\"0\",\"iso\":\"0\",\"shutter_speed\":\"0\",\"title\":\"\",\"orientation\":\"0\"}\" data-image-title=\"eth-console\" data-image-description=\"\" data-image-caption=\"<p>Starting the consoles.</p>\n\" data-medium-file=\"https://bigishdata.files.wordpress.com/2017/12/eth-console.png?w=300\" data-large-file=\"https://bigishdata.files.wordpress.com/2017/12/eth-console.png?w=584\" class=\" wp-image-978\" src=\"https://bigishdata.files.wordpress.com/2017/12/eth-console.png?w=559&#038;h=218\" alt=\"\" width=\"559\" height=\"218\" srcset=\"https://bigishdata.files.wordpress.com/2017/12/eth-console.png?w=559&h=218 559w, https://bigishdata.files.wordpress.com/2017/12/eth-console.png?w=1116&h=436 1116w, https://bigishdata.files.wordpress.com/2017/12/eth-console.png?w=150&h=59 150w, https://bigishdata.files.wordpress.com/2017/12/eth-console.png?w=300&h=117 300w, https://bigishdata.files.wordpress.com/2017/12/eth-console.png?w=768&h=300 768w, https://bigishdata.files.wordpress.com/2017/12/eth-console.png?w=1024&h=400 1024w\" sizes=\"(max-width: 559px) 100vw, 559px\" /></a><p id=\"caption-attachment-978\" class=\"wp-caption-text\">Starting the consoles.</p></div>\n<h3>Creating Initial Coinbase Account for Each Node</h3>\n<p>When you have the console running from the command above, we want to create our main <code>coinbase</code> account. If you&#8217;re curious, I used the passphrase &#8216;passphrase&#8217;. You&#8217;ll see we need that in our Node app down the road.</p>\n<pre>> personal.listAccounts\n[]\n> personal.newAccount()\nPassphrase:\nRepeat passphrase:\n0x538341f72db4b64e320e6c7c698499ca68a6880c\n> personal.listAccounts\n[ \"0x538341f72db4b64e320e6c7c698499ca68a6880c\" ]</pre>\n<p>Run the same commands in the other node&#8217;s console as well.</p>\n<div data-shortcode=\"caption\" id=\"attachment_979\" style=\"width: 601px\" class=\"wp-caption alignnone\"><a href=\"https://bigishdata.files.wordpress.com/2017/12/eth-create-new-account.png\"><img loading=\"lazy\" aria-describedby=\"caption-attachment-979\" data-attachment-id=\"979\" data-permalink=\"https://bigishdata.com/2017/12/15/how-to-write-deploy-and-interact-with-ethereum-smart-contracts-on-a-private-blockchain/eth-create-new-account/\" data-orig-file=\"https://bigishdata.files.wordpress.com/2017/12/eth-create-new-account.png\" data-orig-size=\"1992,434\" data-comments-opened=\"1\" data-image-meta=\"{\"aperture\":\"0\",\"credit\":\"\",\"camera\":\"\",\"caption\":\"\",\"created_timestamp\":\"0\",\"copyright\":\"\",\"focal_length\":\"0\",\"iso\":\"0\",\"shutter_speed\":\"0\",\"title\":\"\",\"orientation\":\"0\"}\" data-image-title=\"eth-create-new-account\" data-image-description=\"\" data-image-caption=\"<p>Create that new account.</p>\n\" data-medium-file=\"https://bigishdata.files.wordpress.com/2017/12/eth-create-new-account.png?w=300\" data-large-file=\"https://bigishdata.files.wordpress.com/2017/12/eth-create-new-account.png?w=584\" class=\" wp-image-979\" src=\"https://bigishdata.files.wordpress.com/2017/12/eth-create-new-account.png?w=591&#038;h=128\" alt=\"\" width=\"591\" height=\"128\" srcset=\"https://bigishdata.files.wordpress.com/2017/12/eth-create-new-account.png?w=588&h=128 588w, https://bigishdata.files.wordpress.com/2017/12/eth-create-new-account.png?w=1175&h=256 1175w, https://bigishdata.files.wordpress.com/2017/12/eth-create-new-account.png?w=150&h=33 150w, https://bigishdata.files.wordpress.com/2017/12/eth-create-new-account.png?w=300&h=65 300w, https://bigishdata.files.wordpress.com/2017/12/eth-create-new-account.png?w=768&h=167 768w, https://bigishdata.files.wordpress.com/2017/12/eth-create-new-account.png?w=1024&h=223 1024w\" sizes=\"(max-width: 591px) 100vw, 591px\" /></a><p id=\"caption-attachment-979\" class=\"wp-caption-text\">Create that new account.</p></div>\n<p>Since this is the first account this node has created, you&#8217;ll see it&#8217;s also listed in</p>\n<pre>> eth.coinbase\n0x538341f72db4b64e320e6c7c698499ca68a6880c</pre>\n<p>Another piece of information you can grab on the console is by running</p>\n<pre>> personal.listWallets\n[{\n    accounts: [{\n        address: \"0x538341f72db4b64e320e6c7c698499ca68a6880c\",\n        url: \"keystore:///Users/jackschultz/Library/EthPrivLocal/keystore/UTC--2017-12-09T16-21-48.056824000Z--538341f72db4b64e320e6c7c698499ca68a6880c\"\n    }],\n    status: \"Locked\",\n    url: \"keystore:///Users/jackschultz/Library/EthPrivLocal/keystore/UTC--2017-12-09T16-21-48.056824000Z--538341f72db4b64e320e6c7c698499ca68a6880c\"\n}]</pre>\n<p>There you’ll see more information about the accounts instead of only the address. You’ll also see where that account information is stored, and it’ll be in the <code>--datadir</code> you specified. So if you&#8217;re still curious how the data is stored in your filesystem, go checkout the directory now.</p>\n<h3>Connecting Nodes as Peers</h3>\n<p>We have multiple nodes running, and we’ll need to connect them as peers. First we’ll check to see if we have peers.</p>\n<pre>> admin.peers\n[]</pre>\n<p>So sad. This is what we expected where we started the console on a non 1-4 network id and the <code>nodiscover</code> flag. This means that we need to tell each node to connect to the other node with a specific command. The way we do this is by sharing the <code>enode</code> address.</p>\n<pre>> admin.nodeInfo.enode\n\"enode://13b835d68917bd4970502b53d8125db1e124b466f6473361c558ea481e31ce4197843ec7d8684011b15ce63def5eeb73982d04425af3a0b6f3437a030878c8a9@[::]:30301?discport=0\"</pre>\n<p>This is the <code>enode</code> information that <code>geth</code> uses to connect to different nodes where they’re able to share information about transactions and successful mining.</p>\n<p>To connect the nodes using this url, we want to call the function <code>addPeer</code>.</p>\n<p>If we copy the return value of the <code>admin.nodeInfo.enode</code> from one of the nodes, run the following command in the other node.</p>\n<pre>> admin.addPeer(\"enode://13b835d68917bd4970502b53d8125db1e124b466f6473361c558ea481e31ce4197843ec7d8684011b15ce63def5eeb73982d04425af3a0b6f3437a030878c8a9@[::]:30301?discport=0\")</pre>\n<p>This tells one node how to get to the other node, will ask the other node to link up, and they’ll both become each other’s peers. To check, run the admin.peers command on both nodes and you’ll see they’re together. Something like:</p>\n<pre>> admin.peers\n[{\n    caps: [\"eth/63\"],\n    id: \"99bf59fe629dbea3cb3da94be4a6cff625c40da21dfffacddc4f723661aa1aa77cd4fb7921eb437b0d5e9333c01ed57bfc0d433b9f718a2c95287d3542f2e9a8\",\n    name: \"Geth/v1.7.1-stable-05101641/darwin-amd64/go1.9.1\",\n    network: {\n        localAddress: \"[::1]:30301\",\n        remoteAddress: \"[::1]:50042\"\n    },\n    protocols: {\n        eth: {\n            difficulty: 935232,\n            head: \"0x8dd2dc7968328c8bbd5aacc53f87e590a469e5bde3945bee0f6ae13392503d17\",\n            version: 63\n        }\n    }\n}]</pre>\n<p>To add the peer, you only need to tell one node to connect to the other node so check the other node and you&#8217;ll see output like this.</p>\n<div data-shortcode=\"caption\" id=\"attachment_980\" style=\"width: 587px\" class=\"wp-caption alignnone\"><a href=\"https://bigishdata.files.wordpress.com/2017/12/eth-add-peers.png\"><img loading=\"lazy\" aria-describedby=\"caption-attachment-980\" data-attachment-id=\"980\" data-permalink=\"https://bigishdata.com/2017/12/15/how-to-write-deploy-and-interact-with-ethereum-smart-contracts-on-a-private-blockchain/eth-add-peers/\" data-orig-file=\"https://bigishdata.files.wordpress.com/2017/12/eth-add-peers.png\" data-orig-size=\"2828,880\" data-comments-opened=\"1\" data-image-meta=\"{\"aperture\":\"0\",\"credit\":\"\",\"camera\":\"\",\"caption\":\"\",\"created_timestamp\":\"0\",\"copyright\":\"\",\"focal_length\":\"0\",\"iso\":\"0\",\"shutter_speed\":\"0\",\"title\":\"\",\"orientation\":\"0\"}\" data-image-title=\"eth-add-peers\" data-image-description=\"\" data-image-caption=\"<p>Peers on peers.</p>\n\" data-medium-file=\"https://bigishdata.files.wordpress.com/2017/12/eth-add-peers.png?w=300\" data-large-file=\"https://bigishdata.files.wordpress.com/2017/12/eth-add-peers.png?w=584\" class=\" wp-image-980\" src=\"https://bigishdata.files.wordpress.com/2017/12/eth-add-peers.png?w=577&#038;h=179\" alt=\"\" width=\"577\" height=\"179\" srcset=\"https://bigishdata.files.wordpress.com/2017/12/eth-add-peers.png?w=575&h=179 575w, https://bigishdata.files.wordpress.com/2017/12/eth-add-peers.png?w=1150&h=358 1150w, https://bigishdata.files.wordpress.com/2017/12/eth-add-peers.png?w=150&h=47 150w, https://bigishdata.files.wordpress.com/2017/12/eth-add-peers.png?w=300&h=93 300w, https://bigishdata.files.wordpress.com/2017/12/eth-add-peers.png?w=768&h=239 768w, https://bigishdata.files.wordpress.com/2017/12/eth-add-peers.png?w=1024&h=319 1024w\" sizes=\"(max-width: 577px) 100vw, 577px\" /></a><p id=\"caption-attachment-980\" class=\"wp-caption-text\">Peers on peers.</p></div>\n<h3>Checking Balances and Mining</h3>\n<p>Now that the nodes are connected, we&#8217;re not in the realm of money. Before we mine, we want to check the balances of our main account.</p>\n<pre>> eth.getBalance(eth.coinbase)\n0\n></pre>\n<p>Again, so sad. Since we didn&#8217;t allocate ethers to this account on the genesis block, we need to start mining to get some for these accounts.</p>\n<p>When in the console, we run <code>miner.start()</code> for the node to start mining, and then <code>miner.stop()</code> for it to stop. When mining, not only are we looking to see how many ethers the accounts get, we also want to watch the interaction of two nodes that are peers.</p>\n<p>In the picture below, you&#8217;ll see I checked the balance of each main accounts for both nodes. Then on node 1, I started the mining, let it run for ~5 seconds, and then stopped the mining after 7 full blocks. I check the balance on that side and have 35 ether, where the number in the console represents Wei. On the other node, you&#8217;ll see that it received information of the 7 blocks that were mined from node 1.</p>\n<div data-shortcode=\"caption\" id=\"attachment_981\" style=\"width: 480px\" class=\"wp-caption alignnone\"><a href=\"https://bigishdata.files.wordpress.com/2017/12/eth-beginning-mining.png\"><img loading=\"lazy\" aria-describedby=\"caption-attachment-981\" data-attachment-id=\"981\" data-permalink=\"https://bigishdata.com/2017/12/15/how-to-write-deploy-and-interact-with-ethereum-smart-contracts-on-a-private-blockchain/eth-beginning-mining/\" data-orig-file=\"https://bigishdata.files.wordpress.com/2017/12/eth-beginning-mining.png\" data-orig-size=\"2824,1128\" data-comments-opened=\"1\" data-image-meta=\"{\"aperture\":\"0\",\"credit\":\"\",\"camera\":\"\",\"caption\":\"\",\"created_timestamp\":\"0\",\"copyright\":\"\",\"focal_length\":\"0\",\"iso\":\"0\",\"shutter_speed\":\"0\",\"title\":\"\",\"orientation\":\"0\"}\" data-image-title=\"eth-beginning-mining\" data-image-description=\"\" data-image-caption=\"<p>Beginning to mine.</p>\n\" data-medium-file=\"https://bigishdata.files.wordpress.com/2017/12/eth-beginning-mining.png?w=300\" data-large-file=\"https://bigishdata.files.wordpress.com/2017/12/eth-beginning-mining.png?w=584\" class=\" wp-image-981\" src=\"https://bigishdata.files.wordpress.com/2017/12/eth-beginning-mining.png?w=470&#038;h=188\" alt=\"\" width=\"470\" height=\"188\" srcset=\"https://bigishdata.files.wordpress.com/2017/12/eth-beginning-mining.png?w=470&h=188 470w, https://bigishdata.files.wordpress.com/2017/12/eth-beginning-mining.png?w=940&h=376 940w, https://bigishdata.files.wordpress.com/2017/12/eth-beginning-mining.png?w=150&h=60 150w, https://bigishdata.files.wordpress.com/2017/12/eth-beginning-mining.png?w=300&h=120 300w, https://bigishdata.files.wordpress.com/2017/12/eth-beginning-mining.png?w=768&h=307 768w\" sizes=\"(max-width: 470px) 100vw, 470px\" /></a><p id=\"caption-attachment-981\" class=\"wp-caption-text\">Beginning to mine.</p></div>\n<h3>Transactions</h3>\n<p>Working with smart contracts requires special transactions, but before getting that far, we want to know how to create transactions that send ether to the other account.</p>\n<p>On one node, let&#8217;s take the <code>coinbase</code> account and unlock it.</p>\n<pre>> coinbaseAddress = eth.coinbase\n> personal.unlockAccount(coinbaseAddress)\nUnlock account 0x554585d7c4e5b5569158c33684657772c0d0b7e1\nPassphrase:\nTrue</pre>\n<p>Now copy the address from the other node&#8217;s <code>coinbase</code> account, and back in the node with the unlocked account,</p>\n<pre>> hisAddress = \"0x846774a81e8e48379c6283a3aa92e9036017172a\"</pre>\n<p>After this, the sendTransaction command is somewhat simple.</p>\n<pre>> eth.sendTransaction({from: eth.coinbase, to: hisAddress, value: 100000000})\nINFO [12-09|10:29:36] Submitted transaction fullhash=0x776689315d837b5f0d9220dc7c0e7315ef45907e188684a6609fde8fcd97dd57 recipient=0x846774A81E8E48379C6283a3Aa92E9036017172A\n\"0x776689315d837b5f0d9220dc7c0e7315ef45907e188684a6609fde8fcd97dd57\"</pre>\n<p>One other thing to note, and something that you&#8217;ll be decently confused with a lot, is why these numbers for value are huge in terms of zeros. This is because values are represented in Wei, so we don&#8217;t have to deal with floating point numbers which could cause issues on different systems. This will come into play with <code>gas</code> that we&#8217;ll need to start specifying for contract deployment and transactions.</p>\n<p>If you&#8217;re wondering how few ether we&#8217;re sending with that value,</p>\n<pre>> web3.fromWei(100000000, 'ether')\n\"0.0000000001\"</pre>\n<p>To get the transaction to send, and to see the difference in balances, we need to start the miner in a node, and then stop it after a block is mined. Now check the balances to see the change</p>\n<pre>> miner.start()\n...............\n> miner.stop()\n> web3.eth.getBalance(eth.coinbase)\n59999999999900000000\n> web3.eth.getBalance(hisAddress)\n100000000</pre>\n<p>Alright, check out this giant picture below. Again, node 1 is on the left, node 2 on the right. So I first check balances for each coinbase account on each node. The on node 1, I copy node 2&#8217;s address, send the transaction, and then logging from the node that it has received a submitted transaction. Then I start the mining. You&#8217;ll see that node 8 has <code>txs=1</code> meaning it&#8217;s mined a transaction into that block. After a few more blocks, I stop the mining. I check the balance of node 1&#8217;s account. We have 12 blocks with rewards of 5 ether each, but then gave away 100000000 Wei.</p>\n<p>Now, I go back to node 2, check the balance of its <code>coinbase</code> account and see that it&#8217;s 0. Then I remembered I restarted the console for node 1 and didn&#8217;t set the two nodes back as peers. So I print the <code>enode</code> of node 1, add that as a peer for node 2. You&#8217;ll see right after adding the peer, node 2 receives the blocks it missed, including 1 transaction. Then I check the balance again and it knows it has 100000000 Wei.</p>\n<div data-shortcode=\"caption\" id=\"attachment_982\" style=\"width: 598px\" class=\"wp-caption alignnone\"><a href=\"https://bigishdata.files.wordpress.com/2017/12/eth-sendtransaction.png\"><img loading=\"lazy\" aria-describedby=\"caption-attachment-982\" data-attachment-id=\"982\" data-permalink=\"https://bigishdata.com/2017/12/15/how-to-write-deploy-and-interact-with-ethereum-smart-contracts-on-a-private-blockchain/eth-sendtransaction/\" data-orig-file=\"https://bigishdata.files.wordpress.com/2017/12/eth-sendtransaction.png\" data-orig-size=\"2830,1394\" data-comments-opened=\"1\" data-image-meta=\"{\"aperture\":\"0\",\"credit\":\"\",\"camera\":\"\",\"caption\":\"\",\"created_timestamp\":\"0\",\"copyright\":\"\",\"focal_length\":\"0\",\"iso\":\"0\",\"shutter_speed\":\"0\",\"title\":\"\",\"orientation\":\"0\"}\" data-image-title=\"eth-sendTransaction\" data-image-description=\"\" data-image-caption=\"<p>This is how to send ether locally.</p>\n\" data-medium-file=\"https://bigishdata.files.wordpress.com/2017/12/eth-sendtransaction.png?w=300\" data-large-file=\"https://bigishdata.files.wordpress.com/2017/12/eth-sendtransaction.png?w=584\" class=\" wp-image-982\" src=\"https://bigishdata.files.wordpress.com/2017/12/eth-sendtransaction.png?w=588&#038;h=290\" alt=\"\" width=\"588\" height=\"290\" srcset=\"https://bigishdata.files.wordpress.com/2017/12/eth-sendtransaction.png?w=588&h=290 588w, https://bigishdata.files.wordpress.com/2017/12/eth-sendtransaction.png?w=1176&h=580 1176w, https://bigishdata.files.wordpress.com/2017/12/eth-sendtransaction.png?w=150&h=74 150w, https://bigishdata.files.wordpress.com/2017/12/eth-sendtransaction.png?w=300&h=148 300w, https://bigishdata.files.wordpress.com/2017/12/eth-sendtransaction.png?w=768&h=378 768w, https://bigishdata.files.wordpress.com/2017/12/eth-sendtransaction.png?w=1024&h=504 1024w\" sizes=\"(max-width: 588px) 100vw, 588px\" /></a><p id=\"caption-attachment-982\" class=\"wp-caption-text\">This is how to send ether locally.</p></div>\n<h3>Intermission</h3>\n<p>At this point, we&#8217;re about half done! We&#8217;ve worked in a terminal having a private Ethereum blockchain running locally, two nodes that have accounts, are peers with each other, and can send transactions back and forth.</p>\n<p>That&#8217;s pretty good, so if you want to take a second to calm down and get a slightly better understanding, go ahead. But at some point, we want to move on.</p>\n<h3>Write a Contract on Remix</h3>\n<p>Moving on! With the <code>geth</code> nodes running, the next step is getting into contracts.</p>\n<p>When writing posts like this, it takes a long time to pick a simple yet worthwhile example. And that was the case for me when trying to pick a type of contract to use. The one I decided to throw in here is one where people are able to answer yes / no, or true / false questions.</p>\n<p>The final v1 code for the Solidity contract is below. A few notes before you look at it.</p>\n<ul>\n<li>We&#8217;re just using global variables in this case for the question, who asked it, who has answered it, and the values for the answers. Solidity also has structs where we could store the data, but we&#8217;re talking about deployment and not Solidity, so not going too in depth with that.</li>\n<li>I&#8217;m using <code>uint</code>s to store the yes / no answers instead of <code>bool</code>s. In Solidity, if I have a mapping that links addresses to a <code>bool</code>, the default is FALSE. For a <code>uint</code>, the default is zero. This lets us have the three states we need. I could have used an <code>enum</code> here, but like I said, we&#8217;re staying simple.</li>\n<li>The answerQuestion method is somewhat complicated in the logic and all the if statements. Go through it if you want to get a sense of how we&#8217;re adjusting the variables.</li>\n<li>We have a get function that returns all the information we want to show the status of the contract on the page. We could split it up to return different information separately, but might as well throw it together to not have to make multiple queries.</li>\n<li>Not only are there other ways to store this data in the contract, there are tons of other ways to write this! For example we could have a list of all the accounts that voted true or false and then loop through those to see if they&#8217;ve answered yet.</li>\n</ul>\n<pre>pragma solidity ^0.4.0;\ncontract Questions {\n\n  //global variables that aren't in a struct\n  mapping(address => uint) public answers; //integer where 0 means hasn't answered, 1 means yes, 2 means no\n  string question;\n  address asker;\n  uint trues;\n  uint falses;\n\n  /// __init__\n  function Questions(string _question) public {\n    asker = msg.sender;\n    question = _question;\n  }\n  \n  //We need a way to validate whether or not they've answered before.\n  //The default of a mapping is \n  function answerQuestion (bool _answer) public {\n    if (answers[msg.sender] == 0 && _answer) { //haven't answered yet\n      answers[msg.sender] = 1; //they vote true\n      trues += 1;\n    }\n    else if (answers[msg.sender] == 0 && !_answer) {\n      answers[msg.sender] = 2; //falsity\n      falses += 1;\n    }\n    else if (answers[msg.sender] == 2 && _answer) { // false switching to true\n      answers[msg.sender] = 1; //true\n      trues += 1;\n      falses -= 1;\n    }\n    else if (answers[msg.sender] == 1 && !_answer) { // true switching to false\n      answers[msg.sender] = 2; //falsity\n      trues -= 1;\n      falses += 1;\n    }\n  }\n \n  function getQuestion() public constant returns (string, uint, uint, uint) {\n    return (question, trues, falses, answers[msg.sender]);\n  }\n}</pre>\n<p>I store this contract in contracts/Question.sol, but instead of doing the compiling locally, I use <a href=\"https://remix.ethereum.org\">Remix</a> which handles a bunch of things, in terms of tons of errors and warnings of the code, as well as compiling the required information.</p>\n<p>To see the compiling information, on the upper right &#8220;compile&#8221; tab, click the details button and you&#8217;ll see a bunch of information pop up. The data we&#8217;re looking for is the byteCode and ABI. Right below that is the web3 deploy information which is exactly what we&#8217;re going to mimic! But rather than having giant strings on a single line, we&#8217;re going to import the information from a json file. Gotta keep that data separate.</p>\n<pre>//childContractv1.json\n{\n  \"abi\": [{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"answers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getQuestion\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_answer\",\"type\":\"bool\"}],\"name\":\"answerQuestion\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_question\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}],\n  \"byteCode\": \"0x6060604052341561000f57600080fd5b6040516106d23803806106d28339810160405280805182019190505033600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060019080519060200190610082929190610089565b505061012e565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106100ca57805160ff19168380011785556100f8565b828001600101855582156100f8579182015b828111156100f75782518255916020019190600101906100dc565b5b5090506101059190610109565b5090565b61012b91905b8082111561012757600081600090555060010161010f565b5090565b90565b6105958061013d6000396000f300606060405260043610610057576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680635e9618e71461005c578063eff38f92146100a9578063f9e049611461014c575b600080fd5b341561006757600080fd5b610093600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610171565b6040518082815260200191505060405180910390f35b34156100b457600080fd5b6100bc610189565b6040518080602001858152602001848152602001838152602001828103825286818151815260200191508051906020019080838360005b8381101561010e5780820151818401526020810190506100f3565b50505050905090810190601f16801561013b5780820380516001836020036101000a031916815260200191505b509550505050505060405180910390f35b341561015757600080fd5b61016f60048080351515906020019091905050610287565b005b60006020528060005260406000206000915090505481565b610191610555565b600080600060016003546004546000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200............................600460008282540392505081905550610550565b60016000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541480156104e3575080155b1561054f5760026000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600160036000828254039250508190555060016004600082825401925050819055505b5b5b5b50565b6020604051908101604052806000815250905600a165627a7a7230582043defebf8fa91b1cd010927004a7ff4816a1040b9cabd4ddd22122a9816742ff0029\"\n}</pre>\n<p>Go ahead and straight copy this file, but I&#8217;d say go to Remix and work with the compiler they have there so you can get a feel for that as well. Quick thing to mention is for the <code>byteCode</code>, you need to make sure that string starts with &#8220;0x&#8221;. When you copy the byte code field from Remix you only get the numbers.</p>\n<h3>NodeJS Time</h3>\n<p>From above, every time I said node, I meant the <code>geth</code> / blockchain node. Here, we&#8217;ll be seeing the word &#8220;node&#8221; again, but when you see the capital N, we mean NodeJS.</p>\n<p>We have the v1 contract compiled and stored in a file. Now we need to get a Node instance running. There are four endpoints we&#8217;re going to have.</p>\n<ul>\n<li>GET &#8216;/&#8217; which will have a form to ask a new question,</li>\n<li>POST &#8216;/questions/new&#8217; which deploys the new question contract on the blockchain,</li>\n<li>GET &#8216;/questions?address=0xXXXX&#8230;&#8217; which will show the question with the current answers and a form to send or update your answer, and</li>\n<li>POST &#8216;/questions?address=0xXXXX&#8230;&#8217; which handles the answering.</li>\n</ul>\n<p><strong>Deploying Question</strong></p>\n<p>Preface, before going into blockchains <a href=\"https://twitter.com/jack_schultz/status/917409196970250240\">I hadn&#8217;t used Node in forever</a>, so some of the syntax and practices might be off here. For the code, I&#8217;ll go through the three endpoints that talk to the blockchain. The first is a post request to deploy a new question. I threw the code that&#8217;s needed to connect to your locally running <code>geth</code> as well.</p>\n<pre>const Web3 = require('web3');\nconst net = require('net');\nconst compiledContract = require('./contracts/contractv1');\n\nweb3IPC = '/Users/jackschultz/Library/PrivEth/geth.ipc';\nlet web3 = new Web3(web3IPC, net);\n\nconst byteCode = compiledContract.byteCode;\nconst QuestionContract = new web3.eth.Contract(compiledContract.abi);\n\nweb3.eth.getCoinbase(function(err, cba) {\n coinbaseAddress = cba;\n console.log(coinbaseAddress);\n});\nconst coinbasePassphrase = 'passphrase';\n\napp.post('/', (req, res) => {\n  const question = req.body.question;\n  web3.eth.personal.unlockAccount(coinbaseAddress, coinbasePassphrase, function(err, uares) {\n    QuestionContract.deploy({data: byteCode, arguments: }).send({from: coinbaseAddress, gas: 2000000})\n     .on('receipt', function (receipt) {\n         console.log(\"Contract Address: \" + receipt.contractAddress);\n         res.redirect('/questions?address=' + receipt.contractAddress);\n    });\n  });\n});</pre>\n<p>When we hit the endpoint, the first step, after grabbing the request from the body, is to unlock the account that we&#8217;re deploying from. This is necessary so we&#8217;re not impersonating someone else. Once we get the callback, we&#8217;re going to deploy the contract where the data of the transaction is the entire byteCode, and then we pass in the question string for the init function in the contract. We specify we&#8217;re sending it from the <code>coinbase</code> address, and saying that we&#8217;re investing 2000000 Wei (which is 0.000000000002 ether if you&#8217;re wondering how small it is).</p>\n<p>There are <a href=\"https://web3js.readthedocs.io/en/1.0/web3-eth-contract.html#deploy\">more than a few callbacks we can use here</a>, but the only one we&#8217;re interested in right now is the &#8216;receipt&#8217;, where we&#8217;re given the contract&#8217;s address after it&#8217;s been mined. In terms of UI, the way this is written is that the page will hang, waiting for the contract to be mined, before redirecting to the question&#8217;s page. This probably isn&#8217;t a good idea at all for a wide use DAPP because mining blocks on the public Ethereum averages ~14.5 seconds. But here on our private blockchain, we set the difficulty to be so low that blocks are mined very quickly, so it isn&#8217;t an issue.</p>\n<p><strong>Viewing Question</strong></p>\n<p>Now that we have a question that exists, we want to go ahead and view it! We use the <code>web3.utils.isAddress</code> function to verify that the address is not only a valid hex string, but also verifies that the check sum is valid which makes sure it&#8217;s an existing address.</p>\n<p>Then our <code>getQuestion</code> method returns a result that&#8217;s a dictionary of the return values. In our case, that&#8217;s the question, the number of trues, number of falses, and also whether or not the person running the node has answered the question yet.</p>\n<pre>app.get('/questions', function(req, res) {\n  const contractAddress = req.query.address;\n  if (web3.utils.isAddress(contractAddress)) {\n    QuestionContract.options.address = contractAddress;\n      const info = QuestionContract.methods.getQuestion().call(function(err, gqres) {\n      //using number strings to get the data from the method      \n      const question = gqres['0'];\n      const trues = gqres['1'];\n      const falses = gqres['2'];\n      const currentAnswerInt = parseInt(gqres['3'], 10);\n      data = {contractAddress: contractAddress, question: question, currentAnswerInt: currentAnswerInt, trues: trues, falses: falses};\n      res.render('question', data);\n    });\n  }\n  else {\n    res.status(404).send(\"No question with that address.\");\n  }\n});</pre>\n<p><strong>Answering the Question</strong></p>\n<p>When we post to that question url, we go through much of the same process of validating the input, validating the address, and then calling the <code>answerQuestion</code> method with the required parameters. Along with the question creation function, we&#8217;re going to have the browser hang until the block with the update transaction is mined.</p>\n<pre>app.post('/questions', function(req, res) {\n  const contractAddress = req.query.address;\n  const answerValue = req.body.answer == 'true' ? true : false;\n  if (web3.utils.isAddress(contractAddress)) {\n    web3.eth.personal.unlockAccount(coinbaseAddress, coinbasePassphrase, function(err, uares) {\n      QuestionContract.options.address = contractAddress;\n      QuestionContract.methods.answerQuestion(answerValue).send({from: coinbaseAddress, gas: 2000000})\n        .on('receipt', function (receipt) {\n          console.log(`Question with address ${contractAddress} updated.`);\n          res.redirect('/questions?address=' + contractAddress);\n        }\n      );\n    });\n  }\n});</pre>\n<p><strong>HTML</strong></p>\n<p>As for the HTML, I&#8217;m not going to bother posting it here because it&#8217;s quite simple. I didn&#8217;t bother to use a css template because it doesn&#8217;t matter in a backend post like this. You&#8217;ll see screenshots of the basic interface below while I talk about running the code.</p>\n<p><strong>Running The Code</strong></p>\n<p>Now all the code is out there. You have four tabs on the console open. Two are running geth</p>\n<pre>geth --datadir /Users/jackschultz/Library/PrivEth --networkid 40 --port 30301 --nodiscover console</pre>\n<pre>geth --datadir /Users/jackschultz/Library/PrivEth2 --networkid 40 --port 30302 --nodiscover console</pre>\n<p>and the other two are running the Node apps, connected to separate <code>geth</code> processes, and running on different localhost ports. I added <a href=\"https://github.com/lorenwest/node-config\">config files</a>, named them primary and secondary to point to the ipc and port that Node should run on.</p>\n<pre>NODE_ENV=primary node app.js</pre>\n<pre>NODE_ENV=secondary node app.js</pre>\n<p>I threw in some pictures here so people reading can know more about what I&#8217;m seeing on my screen. On that, lets go to the browser and start interacting. First up is going to the home page where you can ask a question.</p>\n<div data-shortcode=\"caption\" id=\"attachment_990\" style=\"width: 403px\" class=\"wp-caption alignnone\"><a href=\"https://bigishdata.files.wordpress.com/2017/12/screen-shot-2017-12-14-at-7-26-22-pm.png\"><img loading=\"lazy\" aria-describedby=\"caption-attachment-990\" data-attachment-id=\"990\" data-permalink=\"https://bigishdata.com/2017/12/15/how-to-write-deploy-and-interact-with-ethereum-smart-contracts-on-a-private-blockchain/screen-shot-2017-12-14-at-7-26-22-pm/\" data-orig-file=\"https://bigishdata.files.wordpress.com/2017/12/screen-shot-2017-12-14-at-7-26-22-pm.png\" data-orig-size=\"1056,718\" data-comments-opened=\"1\" data-image-meta=\"{\"aperture\":\"0\",\"credit\":\"\",\"camera\":\"\",\"caption\":\"\",\"created_timestamp\":\"0\",\"copyright\":\"\",\"focal_length\":\"0\",\"iso\":\"0\",\"shutter_speed\":\"0\",\"title\":\"\",\"orientation\":\"0\"}\" data-image-title=\"Screen Shot 2017-12-14 at 7.26.22 PM\" data-image-description=\"\" data-image-caption=\"<p>Will they??</p>\n\" data-medium-file=\"https://bigishdata.files.wordpress.com/2017/12/screen-shot-2017-12-14-at-7-26-22-pm.png?w=300\" data-large-file=\"https://bigishdata.files.wordpress.com/2017/12/screen-shot-2017-12-14-at-7-26-22-pm.png?w=584\" class=\" wp-image-990\" src=\"https://bigishdata.files.wordpress.com/2017/12/screen-shot-2017-12-14-at-7-26-22-pm.png?w=393&#038;h=267\" alt=\"\" width=\"393\" height=\"267\" srcset=\"https://bigishdata.files.wordpress.com/2017/12/screen-shot-2017-12-14-at-7-26-22-pm.png?w=393&h=267 393w, https://bigishdata.files.wordpress.com/2017/12/screen-shot-2017-12-14-at-7-26-22-pm.png?w=786&h=534 786w, https://bigishdata.files.wordpress.com/2017/12/screen-shot-2017-12-14-at-7-26-22-pm.png?w=150&h=102 150w, https://bigishdata.files.wordpress.com/2017/12/screen-shot-2017-12-14-at-7-26-22-pm.png?w=300&h=204 300w, https://bigishdata.files.wordpress.com/2017/12/screen-shot-2017-12-14-at-7-26-22-pm.png?w=768&h=522 768w\" sizes=\"(max-width: 393px) 100vw, 393px\" /></a><p id=\"caption-attachment-990\" class=\"wp-caption-text\">Will they??</p></div>\n<p>Then when you hit the submit button, you&#8217;ll see the logging from the Node app, in the geth console you&#8217;ll start the miner and then stop it after the block with this transaction is complete.</p>\n<div data-shortcode=\"caption\" id=\"attachment_991\" style=\"width: 413px\" class=\"wp-caption alignnone\"><a href=\"https://bigishdata.files.wordpress.com/2017/12/screen-shot-2017-12-14-at-7-25-31-pm.png\"><img loading=\"lazy\" aria-describedby=\"caption-attachment-991\" data-attachment-id=\"991\" data-permalink=\"https://bigishdata.com/2017/12/15/how-to-write-deploy-and-interact-with-ethereum-smart-contracts-on-a-private-blockchain/screen-shot-2017-12-14-at-7-25-31-pm/\" data-orig-file=\"https://bigishdata.files.wordpress.com/2017/12/screen-shot-2017-12-14-at-7-25-31-pm.png\" data-orig-size=\"2640,1560\" data-comments-opened=\"1\" data-image-meta=\"{\"aperture\":\"0\",\"credit\":\"\",\"camera\":\"\",\"caption\":\"\",\"created_timestamp\":\"0\",\"copyright\":\"\",\"focal_length\":\"0\",\"iso\":\"0\",\"shutter_speed\":\"0\",\"title\":\"\",\"orientation\":\"0\"}\" data-image-title=\"Screen Shot 2017-12-14 at 7.25.31 PM\" data-image-description=\"\" data-image-caption=\"<p>We gotta answer soon.</p>\n\" data-medium-file=\"https://bigishdata.files.wordpress.com/2017/12/screen-shot-2017-12-14-at-7-25-31-pm.png?w=300\" data-large-file=\"https://bigishdata.files.wordpress.com/2017/12/screen-shot-2017-12-14-at-7-25-31-pm.png?w=584\" class=\" wp-image-991\" src=\"https://bigishdata.files.wordpress.com/2017/12/screen-shot-2017-12-14-at-7-25-31-pm.png?w=403&#038;h=238\" alt=\"\" width=\"403\" height=\"238\" srcset=\"https://bigishdata.files.wordpress.com/2017/12/screen-shot-2017-12-14-at-7-25-31-pm.png?w=403&h=238 403w, https://bigishdata.files.wordpress.com/2017/12/screen-shot-2017-12-14-at-7-25-31-pm.png?w=806&h=476 806w, https://bigishdata.files.wordpress.com/2017/12/screen-shot-2017-12-14-at-7-25-31-pm.png?w=150&h=89 150w, https://bigishdata.files.wordpress.com/2017/12/screen-shot-2017-12-14-at-7-25-31-pm.png?w=300&h=177 300w, https://bigishdata.files.wordpress.com/2017/12/screen-shot-2017-12-14-at-7-25-31-pm.png?w=768&h=454 768w\" sizes=\"(max-width: 403px) 100vw, 403px\" /></a><p id=\"caption-attachment-991\" class=\"wp-caption-text\">Almost time to answer.</p></div>\n<p>To answer, you&#8217;ll submit the form, then start and stop the mining. When you&#8217;re doing this yourself, a fun thing to do is start the miner before submitting the answer form so you can get a sense of how quickly blocks are mined with this small level of difficulty defined in the genesis block.</p>\n<p>Check out the terminal below. In the top Node terminal you&#8217;ll see some logging about validating the address, and then logging when we&#8217;re redirected to the same page but with updated information. In the <code>geth</code> console, you can see when the transaction was submitted, along with which block the transaction was mined on.</p>\n<div data-shortcode=\"caption\" id=\"attachment_992\" style=\"width: 463px\" class=\"wp-caption alignnone\"><a href=\"https://bigishdata.files.wordpress.com/2017/12/screen-shot-2017-12-14-at-7-31-08-pm.png\"><img loading=\"lazy\" aria-describedby=\"caption-attachment-992\" data-attachment-id=\"992\" data-permalink=\"https://bigishdata.com/2017/12/15/how-to-write-deploy-and-interact-with-ethereum-smart-contracts-on-a-private-blockchain/screen-shot-2017-12-14-at-7-31-08-pm/\" data-orig-file=\"https://bigishdata.files.wordpress.com/2017/12/screen-shot-2017-12-14-at-7-31-08-pm.png\" data-orig-size=\"2710,1560\" data-comments-opened=\"1\" data-image-meta=\"{\"aperture\":\"0\",\"credit\":\"\",\"camera\":\"\",\"caption\":\"\",\"created_timestamp\":\"0\",\"copyright\":\"\",\"focal_length\":\"0\",\"iso\":\"0\",\"shutter_speed\":\"0\",\"title\":\"\",\"orientation\":\"0\"}\" data-image-title=\"Answering\" data-image-description=\"\" data-image-caption=\"<p>Obviously they will.</p>\n\" data-medium-file=\"https://bigishdata.files.wordpress.com/2017/12/screen-shot-2017-12-14-at-7-31-08-pm.png?w=300\" data-large-file=\"https://bigishdata.files.wordpress.com/2017/12/screen-shot-2017-12-14-at-7-31-08-pm.png?w=584\" class=\" wp-image-992\" src=\"https://bigishdata.files.wordpress.com/2017/12/screen-shot-2017-12-14-at-7-31-08-pm.png?w=453&#038;h=261\" alt=\"\" width=\"453\" height=\"261\" srcset=\"https://bigishdata.files.wordpress.com/2017/12/screen-shot-2017-12-14-at-7-31-08-pm.png?w=453&h=261 453w, https://bigishdata.files.wordpress.com/2017/12/screen-shot-2017-12-14-at-7-31-08-pm.png?w=906&h=522 906w, https://bigishdata.files.wordpress.com/2017/12/screen-shot-2017-12-14-at-7-31-08-pm.png?w=150&h=86 150w, https://bigishdata.files.wordpress.com/2017/12/screen-shot-2017-12-14-at-7-31-08-pm.png?w=300&h=173 300w, https://bigishdata.files.wordpress.com/2017/12/screen-shot-2017-12-14-at-7-31-08-pm.png?w=768&h=442 768w\" sizes=\"(max-width: 453px) 100vw, 453px\" /></a><p id=\"caption-attachment-992\" class=\"wp-caption-text\">Obviously they will.</p></div>\n<p>Now that we answered the question from the primary node, let&#8217;s check out the secondary one.</p>\n<p>On the right side of the picture, you&#8217;ll see the top two terminals showing the Node and <code>geth</code> interactions, and then on the bottom is the primary <code>geth</code> which you can see that it received blocks with a transaction in it because the two <code>geth</code> nodes are peers. After the question was answered by the node on port 4002, I reloaded the page on port 4001 and we can see the result.</p>\n<div data-shortcode=\"caption\" id=\"attachment_994\" style=\"width: 564px\" class=\"wp-caption alignnone\"><a href=\"https://bigishdata.files.wordpress.com/2017/12/screen-shot-2017-12-14-at-7-38-32-pm.png\"><img loading=\"lazy\" aria-describedby=\"caption-attachment-994\" data-attachment-id=\"994\" data-permalink=\"https://bigishdata.com/2017/12/15/how-to-write-deploy-and-interact-with-ethereum-smart-contracts-on-a-private-blockchain/screen-shot-2017-12-14-at-7-38-32-pm/\" data-orig-file=\"https://bigishdata.files.wordpress.com/2017/12/screen-shot-2017-12-14-at-7-38-32-pm.png\" data-orig-size=\"2876,1512\" data-comments-opened=\"1\" data-image-meta=\"{\"aperture\":\"0\",\"credit\":\"\",\"camera\":\"\",\"caption\":\"\",\"created_timestamp\":\"0\",\"copyright\":\"\",\"focal_length\":\"0\",\"iso\":\"0\",\"shutter_speed\":\"0\",\"title\":\"\",\"orientation\":\"0\"}\" data-image-title=\"Screen Shot 2017-12-14 at 7.38.32 PM\" data-image-description=\"\" data-image-caption=\"<p>Of course they will.</p>\n\" data-medium-file=\"https://bigishdata.files.wordpress.com/2017/12/screen-shot-2017-12-14-at-7-38-32-pm.png?w=300\" data-large-file=\"https://bigishdata.files.wordpress.com/2017/12/screen-shot-2017-12-14-at-7-38-32-pm.png?w=584\" class=\"wp-image-994 \" src=\"https://bigishdata.files.wordpress.com/2017/12/screen-shot-2017-12-14-at-7-38-32-pm.png?w=554&#038;h=292\" alt=\"\" width=\"554\" height=\"292\" srcset=\"https://bigishdata.files.wordpress.com/2017/12/screen-shot-2017-12-14-at-7-38-32-pm.png?w=554&h=292 554w, https://bigishdata.files.wordpress.com/2017/12/screen-shot-2017-12-14-at-7-38-32-pm.png?w=1108&h=584 1108w, https://bigishdata.files.wordpress.com/2017/12/screen-shot-2017-12-14-at-7-38-32-pm.png?w=150&h=79 150w, https://bigishdata.files.wordpress.com/2017/12/screen-shot-2017-12-14-at-7-38-32-pm.png?w=300&h=158 300w, https://bigishdata.files.wordpress.com/2017/12/screen-shot-2017-12-14-at-7-38-32-pm.png?w=768&h=404 768w, https://bigishdata.files.wordpress.com/2017/12/screen-shot-2017-12-14-at-7-38-32-pm.png?w=1024&h=538 1024w\" sizes=\"(max-width: 554px) 100vw, 554px\" /></a><p id=\"caption-attachment-994\" class=\"wp-caption-text\">Of course they will.</p></div>\n<p>Just to show that we can switch back to false, I changed the answer from port 4002 to false (which is wrong, cause the Bucks are definitely going to make the playoffs), and then you can see the console logging the information of what went through.</p>\n<div data-shortcode=\"caption\" id=\"attachment_995\" style=\"width: 562px\" class=\"wp-caption alignnone\"><a href=\"https://bigishdata.files.wordpress.com/2017/12/screen-shot-2017-12-14-at-7-41-10-pm.png\"><img loading=\"lazy\" aria-describedby=\"caption-attachment-995\" data-attachment-id=\"995\" data-permalink=\"https://bigishdata.com/2017/12/15/how-to-write-deploy-and-interact-with-ethereum-smart-contracts-on-a-private-blockchain/screen-shot-2017-12-14-at-7-41-10-pm/\" data-orig-file=\"https://bigishdata.files.wordpress.com/2017/12/screen-shot-2017-12-14-at-7-41-10-pm.png\" data-orig-size=\"2874,1508\" data-comments-opened=\"1\" data-image-meta=\"{\"aperture\":\"0\",\"credit\":\"\",\"camera\":\"\",\"caption\":\"\",\"created_timestamp\":\"0\",\"copyright\":\"\",\"focal_length\":\"0\",\"iso\":\"0\",\"shutter_speed\":\"0\",\"title\":\"\",\"orientation\":\"0\"}\" data-image-title=\"Screen Shot 2017-12-14 at 7.41.10 PM\" data-image-description=\"\" data-image-caption=\"<p>I changed my answer back to true after taking this screenshot.</p>\n\" data-medium-file=\"https://bigishdata.files.wordpress.com/2017/12/screen-shot-2017-12-14-at-7-41-10-pm.png?w=300\" data-large-file=\"https://bigishdata.files.wordpress.com/2017/12/screen-shot-2017-12-14-at-7-41-10-pm.png?w=584\" class=\" wp-image-995\" src=\"https://bigishdata.files.wordpress.com/2017/12/screen-shot-2017-12-14-at-7-41-10-pm.png?w=552&#038;h=289\" alt=\"\" width=\"552\" height=\"289\" srcset=\"https://bigishdata.files.wordpress.com/2017/12/screen-shot-2017-12-14-at-7-41-10-pm.png?w=552&h=289 552w, https://bigishdata.files.wordpress.com/2017/12/screen-shot-2017-12-14-at-7-41-10-pm.png?w=1102&h=578 1102w, https://bigishdata.files.wordpress.com/2017/12/screen-shot-2017-12-14-at-7-41-10-pm.png?w=150&h=79 150w, https://bigishdata.files.wordpress.com/2017/12/screen-shot-2017-12-14-at-7-41-10-pm.png?w=300&h=157 300w, https://bigishdata.files.wordpress.com/2017/12/screen-shot-2017-12-14-at-7-41-10-pm.png?w=768&h=403 768w, https://bigishdata.files.wordpress.com/2017/12/screen-shot-2017-12-14-at-7-41-10-pm.png?w=1024&h=537 1024w\" sizes=\"(max-width: 552px) 100vw, 552px\" /></a><p id=\"caption-attachment-995\" class=\"wp-caption-text\">I changed my answer back to true after taking this screenshot.</p></div>\n<h3>Conclusion</h3>\n<p>If you&#8217;ve gotten this far and have the code running yourself, big cong. <span style=\"font-size:1rem;\">Like most of these posts, this is much longer than I had initially imagined it being. The goal with this is to go through and explain all the steps of a smart contract rather than somewhere in the middle.</span></p>\n<p>Like above, if you have feedback of any kind, get in touch &#8212; comments, <a href=\"https://bigishdata.com/contact/\">contact</a>, or <a href=\"https://twitter.com/jack_schultz\">twitter</a>.</p>\n",
  "wfw:commentRss": "https://bigishdata.com/2017/12/15/how-to-write-deploy-and-interact-with-ethereum-smart-contracts-on-a-private-blockchain/feed/",
  "slash:comments": 1,
  "media:content": [
    {
      "media:title": "jackschultz23"
    },
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    ""
  ]
}