{
  "title": "Automated exploratory data analysis and model operationalization framework with a human in the loop",
  "link": "https://aws.amazon.com/blogs/machine-learning/automated-exploratory-data-analysis-and-model-operationalization-framework-with-a-human-in-the-loop/",
  "dc:creator": "Shikhar Kwatra",
  "pubDate": "Tue, 01 Nov 2022 17:00:59 +0000",
  "category": [
    "Advanced (300)",
    "Amazon SageMaker",
    "Artificial Intelligence",
    "AWS Step Functions",
    "Serverless",
    "Technical How-to"
  ],
  "guid": "ebb863b215367dc76899de9b3ce37d21f0c0d95e",
  "description": "Identifying, collecting, and transforming data is the foundation for machine learning (ML). According to a Forbes survey, there is widespread consensus among ML practitioners that data preparation accounts for approximately 80% of the time spent in developing a viable ML model. In addition, many of our customers face several challenges during the model operationalization phase […]",
  "content:encoded": "<p>Identifying, collecting, and transforming data is the foundation for machine learning (ML). According to a <a href=\"https://www.forbes.com/sites/gilpress/2016/03/23/data-preparation-most-time-consuming-least-enjoyable-data-science-task-survey-says/?sh=2fb540636f63\" target=\"_blank\" rel=\"noopener noreferrer\">Forbes survey</a>, there is widespread consensus among ML practitioners that data preparation accounts for approximately 80% of the time spent in developing a viable ML model.</p> \n<p>In addition, many of our customers face several challenges during the model operationalization phase to accelerate the journey from model conceptualization to productionization. Quite often, models are built and deployed using poor-quality, under-representative data samples, which leads to more iterations and more manual effort in data inspection, which in turn makes the process more time consuming and cumbersome.</p> \n<p>Because your models are only as good as your training data, expert data scientists and practitioners spend an enormous time understanding the data and generating valuable insights prior to building the models. If we view our ML models as an analogy to cooking a meal, the importance of high-quality data for an advanced ML system is similar to the relationship between high-quality ingredients and a successful meal. Therefore, before rushing into building the models, make sure you’re spending enough time getting high-quality data and extracting relevant insights.</p> \n<p>The tools and technologies to assist with data preprocessing have been growing over the years. Now we have low-code and no-code tools like <a href=\"https://aws.amazon.com/sagemaker/data-wrangler/?sagemaker-data-wrangler-whats-new.sort-by=item.additionalFields.postDateTime&amp;sagemaker-data-wrangler-whats-new.sort-order=desc\" target=\"_blank\" rel=\"noopener noreferrer\">Amazon SageMaker Data Wrangler</a>, <a href=\"https://aws.amazon.com/glue/features/databrew/\" target=\"_blank\" rel=\"noopener noreferrer\">AWS Glue DataBrew</a>, and <a href=\"https://aws.amazon.com/sagemaker/canvas/?sagemaker-data-wrangler-whats-new.sort-by=item.additionalFields.postDateTime&amp;sagemaker-data-wrangler-whats-new.sort-order=desc\" target=\"_blank\" rel=\"noopener noreferrer\">Amazon SageMaker Canvas</a> to assist with data feature engineering.</p> \n<p>However, a lot of these processes are still currently done manually by a data engineer or analyst who analyzes the data using these tools. If their the knowledge of the tools is limited, the insights generated prior to building the models won’t do justice to all the steps that can be performed. Additionally, we won’t be able to make an informed decision post-analysis of those insights prior to building the ML models. For instance, the models can turn out to be biased due to lack of detailed insights that you received using AWS Glue or Canvas, and you end up spending a lot of time and resources building the model training pipeline, to eventually receive an unsatisfactory prediction.</p> \n<p>In this post, we introduce a novel intelligent framework for data and model operationalization that provides automated data transformations and optimal model deployment. This solution can accelerate accurate and timely inspection of data and model quality checks, and facilitate the productivity of distinguished data and ML teams across your organization.</p> \n<h2>Overview of solution</h2> \n<p>Our solution demonstrates an automated end-to-end approach to perform exploratory data analysis (EDA) with a human in the loop to determine the model quality thresholds and approve the optimal and qualified data to be pushed into <a href=\"https://aws.amazon.com/sagemaker/pipelines/\" target=\"_blank\" rel=\"noopener noreferrer\">Amazon SageMaker Pipelines</a> in order to push the final data into <a href=\"https://aws.amazon.com/sagemaker/feature-store/?sagemaker-data-wrangler-whats-new.sort-by=item.additionalFields.postDateTime&amp;sagemaker-data-wrangler-whats-new.sort-order=desc\" target=\"_blank\" rel=\"noopener noreferrer\">Amazon SageMaker Feature Store</a>, thereby speeding up the executional framework.</p> \n<p>Furthermore, the approach includes deploying the best candidate model and creating the model endpoint on the transformed dataset that was automatically processed as new data arrives in the framework.</p> \n<p>The following diagram illustrates the initial setup for the data preprocessing step prior to automating the workflow.</p> \n<p><img loading=\"lazy\" class=\"alignnone size-full wp-image-44651\" style=\"margin: 10px 0px 10px 0px;border: 1px solid #CCCCCC\" src=\"https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2022/10/21/wrangler_image.png\" alt=\"\" width=\"1946\" height=\"1328\"></p> \n<p>This step comprises the data flow initiation to process the raw data stored in an <a href=\"https://aws.amazon.com/s3/\" target=\"_blank\" rel=\"noopener noreferrer\">Amazon Simple Storage Service</a> (Amazon S3) bucket. A sequence of steps in the Data Wrangler UI are created to perform feature engineering on the data (also referred to as a <em>recipe</em>). The data flow recipe consists of preprocessing steps along with a bias report, multicollinearity report, and model quality analysis.</p> \n<p>Then, an <a href=\"https://sagemaker.readthedocs.io/en/stable/amazon_sagemaker_processing.html\" target=\"_blank\" rel=\"noopener noreferrer\">Amazon SageMaker Processing</a> job is run to save the flow to Amazon S3 and store the transformed features into Feature Store for reusable purposes.</p> \n<p>After the flow has been created, which includes the recipe of instructions to be run on the data pertaining to the use case, the goal is to automate the process of creating the flow on any new incoming data, and initiate the process of extracting model quality insights using Data Wrangler. Then, the information regarding the transformations performed on the new data is parsed to an authorized user to inspect the data quality, and the pipeline waits for approval to run the model building and deployment step automatically.</p> \n<p>The following architecture showcases the end-to-end automation of data transformation followed by human in the loop approval to facilitate the steps of model training and deployment.</p> \n<p><img loading=\"lazy\" class=\"alignnone size-full wp-image-44652\" style=\"margin: 10px 0px 10px 0px;border: 1px solid #CCCCCC\" src=\"https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2022/10/21/mlopsimage.png\" alt=\"\" width=\"2566\" height=\"1586\"></p> \n<p>The steps consist of an end-to-end orchestration for automated data transformation and optimal model deployment (with a human in the loop) using the following sequence of steps:</p> \n<ol> \n <li>A new object is uploaded into the S3 bucket (in our case, our training data).</li> \n <li>An <a href=\"https://aws.amazon.com/lambda/\" target=\"_blank\" rel=\"noopener noreferrer\">AWS Lambda</a> function is triggered when the object is uploaded in Amazon S3, which invokes <a href=\"https://aws.amazon.com/step-functions/?step-functions.sort-by=item.additionalFields.postDateTime&amp;step-functions.sort-order=desc\" target=\"_blank\" rel=\"noopener noreferrer\">AWS Step Functions</a> and notifies the authorized user via a registered email.The following steps occur within the Step Functions orchestration:</li> \n <li>The Data Wrangler Flow Creation Lambda function fetches the Data Wrangler flow and processes the new data to be ingested into the Data Wrangler flow. It creates a new flow, which, when imported into the Data Wrangler UI, includes all the transformations, along with a model quality report and bias report. The function saves this latest flow in a new destination bucket.</li> \n <li>The User Callback Approval Lambda function sends a trigger notification via <a href=\"https://aws.amazon.com/sns/\" target=\"_blank\" rel=\"noopener noreferrer\">Amazon Simple Notification Service</a> (Amazon SNS) to the registered persona via email to review the analyzed flow created on new unseen data information. In the email, the user has the option to accept or reject the data quality outcome and feature engineering flow.</li> \n <li>The next step is based on the approver’s decision: \n  <ol type=\"a\"> \n   <li>If the human in the loop approved the changes, the Lambda function initiates the SageMaker pipeline in the next state.</li> \n   <li>If the human in the loop rejected the changes, the Lambda function doesn’t initiate the pipeline, and allows the user to look into the steps within the flow to perform additional feature engineering.</li> \n  </ol> </li> \n <li>The SageMaker Pipeline Execution Lambda function runs the SageMaker pipeline to create a SageMaker Processing job, which stores the feature engineered data in Feature Store. Another pipeline is created in parallel to save the transformed data to Amazon S3 as a CSV file.</li> \n <li>The AutoML Model Job Creation and Deployment Lambda function initiates an <a href=\"https://aws.amazon.com/sagemaker/autopilot/\" target=\"_blank\" rel=\"noopener noreferrer\">Amazon SageMaker Autopilot</a> job to build and deploy the best candidate model and create a model endpoint, which authorized users can invoke for inference.</li> \n</ol> \n<p>A Data Wrangler flow is available in our <a href=\"https://github.com/aws-samples/automated-exploratory-data-with-model-operationalization\" target=\"_blank\" rel=\"noopener noreferrer\">code repository</a> that includes a sequence of steps to run on the dataset. We use Data Wrangler within our <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/studio.html\" target=\"_blank\" rel=\"noopener noreferrer\">Amazon SageMaker Studio</a> IDE, which can simplify the process of data preparation and feature engineering, and complete each step of the data preparation workflow, including data selection, cleansing, exploration, and visualization from a single visual interface.</p> \n<h2>Dataset</h2> \n<p>To demonstrate the orchestrated workflow, we use an example dataset regarding diabetic patient readmission. This data contains historical representations of patient and hospital outcomes, wherein the goal involves building an ML model to predict hospital readmission. The model has to predict whether the high-risk diabetic patients are likely to be readmitted to the hospital after a previous encounter within 30 days or after 30 days. Because this use case deals with multiple outcomes, this is a multi-class classification ML problem. You can try out the approach with this example and experiment with additional data transformations following similar steps with your own datasets.</p> \n<p>The sample dataset we use in this post is a sampled version of the <a href=\"https://archive.ics.uci.edu/ml/datasets/diabetes+130-us+hospitals+for+years+1999-2008\" target=\"_blank\" rel=\"noopener noreferrer\">Diabetes 130-US hospitals for years 1999-2008 Data Set</a> (Beata Strack, Jonathan P. DeShazo, Chris Gennings, Juan L. Olmo, Sebastian Ventura, Krzysztof J. Cios, and John N. Clore, “Impact of HbA1c Measurement on Hospital Readmission Rates: Analysis of 70,000 Clinical Database Patient Records,” BioMed Research International, vol. 2014, Article ID 781670, 11 pages, 2014.). It contains historical data including over 15 features with patient and hospital outcomes. The dataset contains approximately 69,500 rows. The following table summarizes the data schema.</p> \n<table border=\"1px\"> \n <tbody> \n  <tr style=\"background-color: #000000\"> \n   <td><span style=\"color: #ffffff\">Column Name</span></td> \n   <td><span style=\"color: #ffffff\">Data Type</span></td> \n   <td><span style=\"color: #ffffff\">Data Description</span></td> \n  </tr> \n  <tr> \n   <td><code>race</code></td> \n   <td>STRING</td> \n   <td>Caucasian, Asian, African American, or Hispanic.</td> \n  </tr> \n  <tr> \n   <td><code>time_in_hospital</code></td> \n   <td>INT</td> \n   <td>Number of days between admission and discharge (length of stay).</td> \n  </tr> \n  <tr> \n   <td><code>number_outpatient</code></td> \n   <td>INT</td> \n   <td>Number of outpatient visits of the patient in a given year before the encounter.</td> \n  </tr> \n  <tr> \n   <td><code>number_inpatient</code></td> \n   <td>INT</td> \n   <td>Number of inpatient visits of the patient in a given year before the encounter.</td> \n  </tr> \n  <tr> \n   <td><code>number_emergency</code></td> \n   <td>INT</td> \n   <td>Number of emergency visits of the patient in a given year before the encounter.</td> \n  </tr> \n  <tr> \n   <td><code>number_diagnoses</code></td> \n   <td>INT</td> \n   <td>Number of diagnoses entered in the system.</td> \n  </tr> \n  <tr> \n   <td><code>num_procedures</code></td> \n   <td>INT</td> \n   <td>Number of procedures (other than lab tests) performed during the encounter.</td> \n  </tr> \n  <tr> \n   <td><code>num_medications</code></td> \n   <td>INT</td> \n   <td>Number of distinct generic medicines administrated during the encounter.</td> \n  </tr> \n  <tr> \n   <td><code>num_lab_procedures</code></td> \n   <td>INT</td> \n   <td>Number of lab tests performed during the encounter.</td> \n  </tr> \n  <tr> \n   <td><code>max_glu_serum</code></td> \n   <td>STRING</td> \n   <td>The range of result or if the test wasn’t taken. Values include &gt;200, &gt;300, normal, and none (if not measured).</td> \n  </tr> \n  <tr> \n   <td><code>gender</code></td> \n   <td>STRING</td> \n   <td>Values include Male, Female and Unknown/Invalid.</td> \n  </tr> \n  <tr> \n   <td><code>diabetes_med</code></td> \n   <td>INT</td> \n   <td>Indicates if any diabetes medication was prescribed.</td> \n  </tr> \n  <tr> \n   <td><code>change</code></td> \n   <td>STRING</td> \n   <td>Indicates if there was a change in diabetes medications (ether dosage or generic name). Values are change or no change.</td> \n  </tr> \n  <tr> \n   <td><code>age</code></td> \n   <td>INT</td> \n   <td>Age of patient at the time of encounter.</td> \n  </tr> \n  <tr> \n   <td><code>a1c_result</code></td> \n   <td>STRING</td> \n   <td>Indicates the range of the result of blood sugar levels. Values include &gt;8, &gt;7, normal, and none.</td> \n  </tr> \n  <tr> \n   <td><code>readmitted</code></td> \n   <td>STRING</td> \n   <td>Days to inpatient readmission. Values include &lt;30 if patient was readmitted in less than 30 days, &gt;30 if patient was readmitted after 30 days of encounter, and no for no record of readmission.</td> \n  </tr> \n </tbody> \n</table> \n<h2>Prerequisites</h2> \n<p>This walkthrough includes the following prerequisites:</p> \n<ul> \n <li>An <a href=\"https://signin.aws.amazon.com/signin?redirect_uri=https%3A%2F%2Fportal.aws.amazon.com%2Fbilling%2Fsignup%2Fresume&amp;client_id=signup\" target=\"_blank\" rel=\"noopener noreferrer\">AWS account</a></li> \n <li>A Studio domain managed policy <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_manage-attach-detach.html#add-policies-console\" target=\"_blank\" rel=\"noopener noreferrer\">attached</a> to the <a href=\"http://aws.amazon.com/iam\" target=\"_blank\" rel=\"noopener noreferrer\">AWS Identity and Access Management</a> (IAM) execution role. For instructions on assigning permissions to the role, refer to <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/api-permissions-reference.html\" target=\"_blank\" rel=\"noopener noreferrer\">Amazon SageMaker API Permissions: Actions, Permissions, and Resources Reference</a>. In this case, you need to assign permissions as allocated to <a href=\"https://aws.amazon.com/augmented-ai/\" target=\"_blank\" rel=\"noopener noreferrer\">Amazon Augmented AI</a> (Amazon A2I). For more information, refer to <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/security_iam_id-based-policy-examples.html\" target=\"_blank\" rel=\"noopener noreferrer\">Amazon SageMaker Identity-Based Policy Examples</a>.</li> \n <li>An S3 bucket. For instructions, refer to <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/userguide/create-bucket-overview.html\" target=\"_blank\" rel=\"noopener noreferrer\">Creating a bucket</a>.</li> \n <li>For this post, you use the <a href=\"https://aws.amazon.com/cdk/\" target=\"_blank\" rel=\"noopener noreferrer\">AWS Cloud Development Kit</a> (AWS CDK) using Python. Follow the instructions in <a href=\"https://docs.aws.amazon.com/cdk/v2/guide/getting_started.html\" target=\"_blank\" rel=\"noopener noreferrer\">Getting Started for AWS CDK</a> to set up your local environment setup and bootstrap your development account.</li> \n</ul> \n<h2>Upload the historical dataset to Amazon S3</h2> \n<p>The first step is to <a href=\"https://static.us-east-1.prod.workshops.aws/public/49a3db3c-09fe-4b34-b089-22361819a7d6/static/datasets/diabetic-readmission.csv\" target=\"_blank\" rel=\"noopener noreferrer\">download the sample dataset</a> and upload it into an S3 bucket. In our case, our training data (diabetic-readmission.csv) is uploaded.</p> \n<h2>Data Wrangler initial flow</h2> \n<p>Prior to automating the Step Functions workflow, we need to perform a sequence of data transformations to create a data flow.</p> \n<p>If you want to create the Data Wrangler steps manually, refer to the readme in the <a href=\"https://github.com/aws-samples/automated-exploratory-data-with-model-operationalization\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub repo</a>.</p> \n<p>To import the flow to automate the Data Wrangler steps, complete the following steps:</p> \n<ol> \n <li>Download the flow from the <a href=\"https://github.com/aws-samples/automated-exploratory-data-with-model-operationalization/blob/main/HealthCareUncleanWrangler.flow\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub repo</a> and save it in your system.</li> \n <li>Open Studio and import the Data Wrangler flow.You need to update the location of where it needs to import the latest dataset. In your case, this is the bucket you defined with the respective prefix.</li> \n <li style=\"text-align: left\">Choose the plus sign next to <strong>Source</strong> and choose <strong>Edit dataset</strong>.<br> <a href=\"https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2022/10/25/edit_data-1.png\"><img loading=\"lazy\" class=\"alignnone wp-image-44849 size-full\" style=\"margin: 10px 0px 10px 0px;border: 1px solid #CCCCCC\" src=\"https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2022/10/25/edit_data-1.png\" alt=\"\" width=\"600\" height=\"648\"></a></li> \n <li>Point to the S3 location of the dataset you downloaded.<br> <img loading=\"lazy\" class=\"alignnone size-full wp-image-44676\" style=\"margin: 10px 0px 10px 0px;border: 1px solid #CCCCCC\" src=\"https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2022/10/21/s3_point.png\" alt=\"s3-pointer\" width=\"1652\" height=\"1638\"></li> \n <li>Inspect all the steps in the transformation and make sure they align with the sequence steps.<br> <img loading=\"lazy\" class=\"alignnone size-full wp-image-44677\" style=\"margin: 10px 0px 10px 0px;border: 1px solid #CCCCCC\" src=\"https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2022/10/21/wrangled-steps.png\" alt=\"wrangled-steps\" width=\"1456\" height=\"1030\"><img loading=\"lazy\" class=\"alignnone size-full wp-image-44678\" style=\"margin: 10px 0px 10px 0px;border: 1px solid #CCCCCC\" src=\"https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2022/10/21/datainfo.png\" alt=\"dataset\" width=\"2104\" height=\"1280\"></li> \n</ol> \n<h2>Save data flow to Feature Store</h2> \n<p>To save the data flow to Feature Store, complete the following steps:</p> \n<ol> \n <li>Choose the plus sign next to <strong>Steps</strong> and choose <strong>Export to</strong>.<br> <img loading=\"lazy\" class=\"alignnone size-full wp-image-44680\" style=\"margin: 10px 0px 10px 0px;border: 1px solid #CCCCCC\" src=\"https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2022/10/21/savetofeaturestore.png\" alt=\"save-to-featurestore\" width=\"2740\" height=\"1178\"></li> \n <li>Choose <strong>SageMaker Feature Store (via Jupyter Notebook)</strong>.<br> SageMaker generates a Jupyter notebook for you and opens it in a new tab in Studio. This notebook contains everything you need to run the transformations over our historical dataset and ingest the resulting features into Feature Store.This notebook uses Feature Store to create a <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/feature-store-create-feature-group.html\" target=\"_blank\" rel=\"noopener noreferrer\">feature group</a>, runs your Data Wrangler flow on the entire dataset using a SageMaker processing job, and ingests the processed data to Feature Store.<img loading=\"lazy\" class=\"alignnone size-full wp-image-44679\" style=\"margin: 10px 0px 10px 0px;border: 1px solid #CCCCCC\" src=\"https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2022/10/21/codeimage.png\" alt=\"code-feature-store\" width=\"2758\" height=\"556\"></li> \n <li>Choose the kernel <strong>Python 3 (Data Science)</strong> on the newly opened notebook tab.</li> \n <li>Read through and explore the Jupyter notebook.</li> \n <li>In the <strong>Create Feature Group</strong> section of the generated notebook, update the following fields for the event time and record identifier with the column names we created in the previous Data Wrangler step: \n  <div class=\"hide-language\"> \n   <pre><code class=\"lang-code\">record_identifier_name = \"Record_id\" \nevent_time_feature_name = \"EventTime\"</code></pre> \n  </div> </li> \n <li>Choose <strong>Run</strong> and then choose <strong>Run All Cells</strong>.<br> <img loading=\"lazy\" class=\"alignnone size-full wp-image-44681\" style=\"margin: 10px 0px 10px 0px;border: 1px solid #CCCCCC\" src=\"https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2022/10/21/recordID.png\" alt=\"record-id\" width=\"2748\" height=\"354\"></li> \n <li>Enter <code>flow_name = \"HealthCareUncleanWrangler\"</code>.</li> \n <li>Run the following cells to create your feature group name.<br> <img loading=\"lazy\" class=\"alignnone size-full wp-image-44682\" style=\"margin: 10px 0px 10px 0px;border: 1px solid #CCCCCC\" src=\"https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2022/10/21/featuregroupcode.png\" alt=\"featuregroup-code\" width=\"2754\" height=\"1422\">After running a few more cells in the code, the feature group is successfully created.</li> \n <li>Now that the feature group is created, you use a processing job to process your data at scale and ingest the transformed data into this feature group.<br> If we keep the default bucket location, the flow will be saved in a SageMaker bucket located in the specific Region where you launched your SageMaker domain.<img loading=\"lazy\" class=\"alignnone size-full wp-image-44683\" style=\"margin: 10px 0px 10px 0px;border: 1px solid #CCCCCC\" src=\"https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2022/10/21/uploadflowtos3.png\" alt=\"uploadflowtos3\" width=\"2756\" height=\"1098\">With <code>Feature_store_offline_S3_uri</code>, Feature Store writes the data in the <code>OfflineStore</code> of a <code>FeatureGroup</code> to an Amazon S3 location owned by you.Wait for the processing job to finish. If it finishes successfully, your feature group should be populated with the transformed feature values. In addition, the raw parameters used by the processing job are printed.It takes 10–15 minutes to run the processing job to create and run the Data Wrangler flow on the entire dataset and save the output flow in the respective bucket within the SageMaker session.</li> \n <li>Next, run the <code>FeatureStoreAutomation.ipynb</code> notebook by importing it in Studio from GitHub and running all the cells. Follow the instructions in the notebook.</li> \n <li>Copy the following variables from the Data Wrangler generated output from the previous step and add them to the cell in the notebook: \n  <div class=\"hide-language\"> \n   <pre><code class=\"lang-python\">feature_group_name = \"<span style=\"color: #ff0000\">&lt;FEATURE GROUP NAME&gt;</span>\"\noutput_name = \"<span style=\"color: #ff0000\">&lt;OUTPUT NAME&gt;</span>\"\nflow_uri='<span style=\"color: #ff0000\">&lt;FLOW URI&gt;</span>'</code></pre> \n  </div> </li> \n <li>Run the rest of the code following the instructions in the notebook to create a SageMaker pipeline to automate the storing of features to Feature Store in the feature group that you created.</li> \n <li>Next, similar to the previous step in the Data Wrangler export option, choose the plus sign and choose <strong>Export to</strong>.</li> \n <li>Choose<strong> SageMaker Pipelines (via Jupyter Notebook)</strong>.</li> \n <li>Run all the cells to create a CSV flow as an output to be stored to Amazon S3.That pipeline name is invoked in a Lambda function later to automate the pipeline on a new flow.</li> \n <li>Within the code, whenever you see the following instance count, change <code>instance_count</code> to 1: \n  <div class=\"hide-language\"> \n   <pre><code class=\"lang-python\"># Processing Job Instance count and instance type.\ninstance_count = 2</code></pre> \n  </div> </li> \n <li>Otherwise, your account may hit the service quota limits of running an m5.4x large instance for processing jobs being run within the notebook. You have to request an increase in service quota if you want more instances to run the job.</li> \n <li>As you walk through the pipeline code, navigate to <strong>Create SageMaker Pipeline</strong>, where you define the pipeline steps.</li> \n <li>In the <strong>Output Amazon S3 settings</strong> cell, change the location of the Amazon S3 output path to the following code (commenting the output prefix): \n  <div class=\"hide-language\"> \n   <pre><code class=\"lang-python\">#S3_output_prefix = f\"export-{flow_export_name}/output\" \nS3_output_path = f\"S3://{bucket}/WrangledOutput\"</code></pre> \n  </div> </li> \n <li>Locate the following code: \n  <div class=\"hide-language\"> \n   <pre><code class=\"lang-python\">from SageMaker.workflow.parameters import ParameterString\nfrom SageMaker.workflow.functions import Join\n\nparameters = []\nfor name, val in parameter_overrides.items():\nparameters.append(\nParameterString(\nname=name,\ndefault_value=json.dumps({name: val}),\n)\n)</code></pre> \n  </div> </li> \n <li>Replace it with the following: \n  <div class=\"hide-language\"> \n   <pre><code class=\"lang-python\">from SageMaker.workflow.steps import ProcessingStep\n\ndata_wrangler_step = ProcessingStep(\n    name=\"DataWranglerProcessingStep\",\n    processor=processor,\n    inputs=[flow_input] + data_sources, \n    outputs=[processing_job_output],\n    job_arguments=[f\"--output-config '{json.dumps(output_config)}'\"],\n)\n</code></pre> \n  </div> </li> \n <li>Remove the following cell: \n  <div class=\"hide-language\"> \n   <pre><code class=\"lang-python\">from SageMaker.workflow.steps import ProcessingStep\n\ndata_wrangler_step = ProcessingStep(\n    name=\"DataWranglerProcessingStep\",\n    processor=processor,\n    inputs=[flow_input] + data_sources, \n    outputs=[processing_job_output],\n    job_arguments=[f\"--output-config '{json.dumps(output_config)}'\"] \n        + [f\"--refit-trained-params '{json.dumps(refit_trained_params)}'\"]\n        + [Join(on=\"\", values=[\"--parameter-override '\", param, \"'\"]) for param in parameters],\n)\n</code></pre> \n  </div> </li> \n <li>Continue running the next steps until you reach the <strong>Define a Pipeline of Parameters</strong> section with the following code. Append the last line <code>input_flow</code> to the code segment: \n  <div class=\"hide-language\"> \n   <pre><code class=\"lang-python\">from SageMaker.workflow.parameters import (\nParameterInteger,\nParameterString,\n)\n# Define Pipeline Parameters\ninstance_type = ParameterString(name=\"InstanceType\", default_value=\"ml.m5.4xlarge\")\ninstance_count = ParameterInteger(name=\"InstanceCount\", default_value=1)\n<strong>input_flow= ParameterString(name='InputFlow', default_value='S3://placeholder-bucket/placeholder.flow')</strong></code></pre> \n  </div> </li> \n <li>Also, add the <code>input_flow</code> as an additional parameter to the next cell: \n  <div class=\"hide-language\"> \n   <pre><code class=\"lang-python\">pipeline = Pipeline(\n    name=pipeline_name,\n    parameters=[instance_type, instance_count, input_flow],\n    steps=pipeline_steps,\n    SageMaker_session=sess\n)</code></pre> \n  </div> </li> \n <li>In the section <strong>Submit the pipeline to SageMaker and start execution</strong>, locate the following cell: \n  <div class=\"hide-language\"> \n   <pre><code class=\"lang-python\">pipeline.upsert(role_arn=iam_role)\nexecution = pipeline.start(\n    parameters={\n        key: json.dumps({key: val})\n        for key, val in parameter_overrides.items()\n    }\n)</code></pre> \n  </div> </li> \n <li>Replace it with the following code: \n  <div class=\"hide-language\"> \n   <pre><code class=\"lang-python\">pipeline.upsert(role_arn=iam_role)\nexecution = pipeline.start()</code></pre> \n  </div> </li> \n <li>Copy the name of the pipeline you just saved.<br> This will be your <code>S3_Pipeline_Name</code> value that is added as the environment variable stored in <code>DataWrangler Flow Creation</code>Lambda Function.</li> \n <li>Replace <code>S3_Pipeline_Name</code> with the name of the pipeline that you just created after running the preceding notebook.<br> Now, when a new object is uploaded in Amazon S3, a SageMaker pipeline runs the processing job of creating the Data Wrangler flow on the entire dataset and stores the transformed dataset in Amazon S3 as a CSV file. This object is used in the next step (the Step Functions workflow) for model training and endpoint deployment.We have created and stored a transformed dataset in Amazon S3 by running the preceding notebook. We also created a feature group in Feature Store for storing the respective transformed features for later reuse.</li> \n <li>Update both pipeline names in the Data Wrangler Flow Creation Lambda function (created with the AWS CDK) for the Amazon S3 pipeline and Feature Store pipeline.</li> \n</ol> \n<h2>Step Functions orchestration workflow</h2> \n<p>Now that we have created the processing job, we need to run these processing jobs on any incoming data that arrives in Amazon S3. We initiate the data transformation automatically, notify the authorized user of the new flow created, and wait for the approver to approve the changes based on data and model quality insights. Then, the Step Functions callback action is triggered to initiate the SageMaker pipeline and start the model training and optimal model deployment endpoint in the environment.</p> \n<p>The Step Functions workflow includes a series of Lambda functions to run the overall orchestration. The Step Functions state machine, S3 bucket, <a href=\"https://aws.amazon.com/api-gateway/\" target=\"_blank\" rel=\"noopener noreferrer\">Amazon API Gateway</a> resources, and Lambda function codes are stored in the <a href=\"https://github.com/aws-samples/automated-exploratory-data-with-model-operationalization/\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub repo</a>.</p> \n<p>The following figure illustrates our Step Function workflow.</p> \n<p><img loading=\"lazy\" class=\"alignnone size-full wp-image-44691\" style=\"margin: 10px 0px 10px 0px;border: 1px solid #CCCCCC\" src=\"https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2022/10/21/stepfunction.png\" alt=\"stepfunction\" width=\"1602\" height=\"1472\"></p> \n<p>Run the AWS CDK code located in GitHub to automatically set up the stack containing the components needed to run the automated EDA and model operationalization framework. After setting up the AWS CDK environment, run the following command in the terminal:</p> \n<div class=\"hide-language\"> \n <pre><code class=\"lang-python\">cdk deploy --parameters EmailID=enter_email_id --parameters DataBucketName=enter_unique_s3bucket_name</code></pre> \n</div> \n<p>Create a healthcare folder in the bucket you named via your AWS CDK script. Then upload <code>flow-healthcarediabetesunclean.csv</code> to the folder and let the automation happen!</p> \n<p>In the following sections, we walk through each step in the Step Functions workflow in more detail.</p> \n<h3>Data Wrangler Flow Creation</h3> \n<p>As new data is uploaded into the S3 bucket, a Lambda function is invoked to trigger the Step Functions workflow. The Data Wrangler Flow Creation Lambda function fetches the Data Wrangler flow. It runs the processing job to create a new Data Wrangler flow (which includes data transformations, model quality report, bias report, and so on) on the ingested dataset and pushes the new flow to the designated S3 bucket.</p> \n<p>This Lambda function parses the information to the User Callback Approval Lambda function and sends the trigger notification via Amazon SNS to the registered email with the location of the designated bucket where the flow has been saved.</p> \n<h3>User Callback Approval</h3> \n<p>The User Callback Approval step initiates the Lambda function that receives the updated flow information and sends a notification to the authorized user with the approval/rejection link to approve or reject the new flow. The user can review the analyzed flow created on the unseen data by downloading the flow from the S3 bucket and uploading it in the Data Wrangler UI.</p> \n<p>After the user reviews the flow, they can go back to the email to approve the changes.</p> \n<h3>Manual Approval Choice</h3> \n<p>This Lambda function is waiting for the authorized user to approve or reject the flow.</p> \n<p>If the answer received is yes (the user approved the flow), the SageMaker Pipeline Execution Lambda function initiates the SageMaker pipeline for storing the transformed features in Feature Store. Another SageMaker pipeline is initiated in parallel to save the transformed features CSV to Amazon S3, which is used by the next state (the AutoML Model Job Creation &amp; Model Deployment Lambda function) for model training and deployment.</p> \n<p>If the answer received is no (the user rejected the flow), the Lambda function doesn’t initiate the pipeline to run the flow. The user can look into the steps within the flow to perform additional feature engineering. Later, the user can rerun the entire sequence after adding additional data transformation steps in the flow.</p> \n<h3>SageMaker Pipeline Execution</h3> \n<p>This step initiates a Lambda function that runs the SageMaker pipeline to store the feature engineered data in Feature Store. Another pipeline in parallel saves the transformed data to Amazon S3.</p> \n<p>You can monitor the two pipelines in Studio by navigating to the <strong>Pipelines</strong> page.</p> \n<p><img loading=\"lazy\" class=\"alignnone size-full wp-image-44684\" style=\"margin: 10px 0px 10px 0px;border: 1px solid #CCCCCC\" src=\"https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2022/10/21/pipelinemonitor.png\" alt=\"pipeline-monitor\" width=\"1006\" height=\"646\"></p> \n<p>You can choose the graph to inspect the input, output, logs, and information.</p> \n<p><img loading=\"lazy\" class=\"alignnone size-full wp-image-44685\" style=\"margin: 10px 0px 10px 0px;border: 1px solid #CCCCCC\" src=\"https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2022/10/21/readmissionhealthcarefeaturestore.png\" alt=\"readmissionhealthcarefeaturestore\" width=\"958\" height=\"566\"></p> \n<p>Similarly, you can inspect the information of the other pipeline, which saves the transformed features CSV to Amazon S3.</p> \n<p><img loading=\"lazy\" class=\"alignnone size-full wp-image-44686\" style=\"margin: 10px 0px 10px 0px;border: 1px solid #CCCCCC\" src=\"https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2022/10/21/datawranglerprocessingstep.png\" alt=\"datawranglerprocessingstep\" width=\"972\" height=\"586\"></p> \n<h3>AutoML Model Job Creation &amp; Model Deployment</h3> \n<p>This step initiates a Lambda function that starts an Autopilot job to ingest the CSV from the previous Lambda function, and build and deploy the best candidate model. This step creates a model endpoint that can be invoked by authorized users. When the AutoML job is complete, you can navigate to Studio, choose <strong>Experiment and trials</strong>, and view the information associated with your job.</p> \n<p><img loading=\"lazy\" class=\"alignnone size-full wp-image-44687\" style=\"margin: 10px 0px 10px 0px;border: 1px solid #CCCCCC\" src=\"https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2022/10/21/experimenttrials.png\" alt=\"experiment-trials\" width=\"2346\" height=\"1138\"></p> \n<p>As all of these steps are run, the SageMaker dashboard reflects the processing job, batch transform job, training job, and hyperparameter tuning job that are being created in the process and the creation of the endpoint that can be invoked when the overall process is complete.</p> \n<p><img loading=\"lazy\" class=\"alignnone size-full wp-image-44688\" style=\"margin: 10px 0px 10px 0px;border: 1px solid #CCCCCC\" src=\"https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2022/10/21/sagemakerdashboard.png\" alt=\"sagemaker-dashboard\" width=\"2044\" height=\"780\"></p> \n<h2>Clean up</h2> \n<p>To avoid ongoing charges, make sure to delete the SageMaker endpoint and stop all the notebooks running in Studio, including the Data Wrangler instances. Also, delete the output data in Amazon S3 you created while running the orchestration workflow via Step Functions. You have to delete the data in the S3 buckets before you can delete the buckets.</p> \n<h2>Conclusion</h2> \n<p>In this post, we demonstrated an end-to-end approach to perform automated data transformation with a human in the loop to determine model quality thresholds and approve the optimal qualified data to be pushed to a SageMaker pipeline to push the final data into Feature Store, thereby speeding up the executional framework. Furthermore, the approach includes deploying the best candidate model and creating the model endpoint on the final feature engineered data that was automatically processed when new data arrives.</p> \n<h2>References</h2> \n<p>For further information about Data Wrangler, Feature Store, SageMaker pipelines, Autopilot, and Step Functions, we recommend the following resources:</p> \n<ul> \n <li><a href=\"https://aws.amazon.com/blogs/aws/amazon-sagemaker-pipelines-brings-devops-to-machine-learning-projects/\">Amazon SageMaker Pipelines Brings DevOps Capabilities to your Machine Learning Projects</a></li> \n <li><a href=\"https://docs.aws.amazon.com/step-functions/latest/dg/sample-preprocess-feature-transform.html\" target=\"_blank\" rel=\"noopener noreferrer\">Step Functions for feature transformation</a></li> \n <li><a href=\"https://aws.amazon.com/blogs/aws/introducing-amazon-sagemaker-data-wrangler-a-visual-interface-to-prepare-data-for-machine-learning/\" target=\"_blank\" rel=\"noopener noreferrer\">Introducing SageMaker Data Wrangler, a Visual Interface to Prepare Data for Machine Learning</a></li> \n <li><a href=\"https://aws.amazon.com/blogs/machine-learning/building-machine-learning-workflows-with-amazon-sagemaker-processing-jobs-and-aws-step-functions/\" target=\"_blank\" rel=\"noopener noreferrer\">Building machine learning workflows with Amazon SageMaker Processing jobs and AWS Step Functions</a></li> \n <li><a href=\"https://aws.amazon.com/blogs/machine-learning/unified-data-preparation-and-model-training-with-amazon-sagemaker-data-wrangler-and-amazon-sagemaker-autopilot/\" target=\"_blank\" rel=\"noopener noreferrer\">Unified data preparation and model training with Amazon SageMaker Data Wrangler and Amazon SageMaker Autopilot</a></li> \n</ul> \n<hr> \n<h3>About the Author(s)</h3> \n<p style=\"clear: both\"><a href=\"https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2022/10/25/shikhar-300x297-1.png\"><img loading=\"lazy\" class=\"size-full wp-image-44845 alignleft\" src=\"https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2022/10/25/shikhar-300x297-1.png\" alt=\"\" width=\"100\" height=\"99\"></a><a href=\"https://www.linkedin.com/in/shikharkwatra/\" target=\"_blank\" rel=\"noopener noreferrer\"><strong>Shikhar Kwatra</strong></a> is an AI/ML Specialist Solutions Architect at Amazon Web Services, working with a leading Global System Integrator. He has earned the title of one of the Youngest Indian Master Inventors with over 400 patents in the AI/ML and IoT domains. He has over 8 years of industry experience from startups to large-scale enterprises, from IoT Research Engineer, Data Scientist, to Data &amp; AI Architect. Shikhar aids in architecting, building, and maintaining cost-efficient, scalable cloud environments for organizations and supports GSI partners in building strategic industry solutions on AWS.</p> \n<p style=\"clear: both\"><strong><a href=\"https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2022/10/25/sachin-227x300-1.png\"><img loading=\"lazy\" class=\"size-full wp-image-44844 alignleft\" src=\"https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2022/10/25/sachin-227x300-1.png\" alt=\"\" width=\"100\" height=\"132\"></a>Sachin Thakkar</strong> is a Senior Solutions Architect at Amazon Web Services, working with a leading Global System Integrator (GSI). He brings over 22 years of experience as an IT Architect and as Technology Consultant for large institutions. His focus area is on data and analytics. Sachin provides architectural guidance and supports GSI partners in building strategic industry solutions on AWS.</p>"
}