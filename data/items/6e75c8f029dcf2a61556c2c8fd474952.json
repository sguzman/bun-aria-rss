{
  "id": "tag:blogger.com,1999:blog-1176949257541686127.post-3845543190783835216",
  "published": "2022-03-10T13:33:00.003-05:00",
  "updated": "2022-03-23T13:03:26.249-04:00",
  "title": "What's up with in-the-wild exploits? Plus, what we're doing about it.",
  "content": "<span class=\"byline-author\">Posted by Adrian Taylor, Chrome Security Team</span><p>If you are a regular reader of our <a href=\"https://chromereleases.googleblog.com/search/label/Stable%20updates\">Chrome release blog</a>, you may have noticed that phrases like 'exploit for CVE-1234-567 exists in the wild' have been appearing more often recently. In this post we'll explore why there seems to be such an increase in exploits, and clarify some misconceptions in the process. We'll then share how Chrome is continuing to make it harder for attackers to achieve their goals. </p><p><strong>How things work today </strong></p><p>While the increase may initially seem concerning, it’s important to understand the reason behind this trend. If it's because there are many more exploits in the wild, it could point to a worrying trend. On the other hand, if we’re simply gaining more visibility into exploitation by attackers, it's actually a good thing! It’s good because it means we can respond by providing bug fixes to our users faster, and we can learn more about how real attackers operate. </p><p>So, which is it? It’s likely a little of both. </p><p>Our colleagues at Project Zero <a href=\"https://docs.google.com/spreadsheets/d/1lkNJ0uQwbeC1ZTRrxdtuPLCIl7mlUreoKfSIgajnSyY/edit#gid=1123292625\">publicly track all known in-the-wild “zero day” bugs</a>. Here’s what they’ve reported for browsers: </p><div class=\"separator\" style=\"clear: both;\"><a href=\"https://blogger.googleusercontent.com/img/a/AVvXsEiQB-OawbmqsOQaigkJxRchRxwzNGb5sIZlPiYo1378oNW_CIq_ze7MkasyAohYGNQZS59-wmbQY5Q36CS5RjRG5pLRE1ko51GOYhY29oWZhxp6gXLHPPHKu9uk55yzcQ2LRjR45MeAs-dR8o8SKSq_5oEtL9Is_gcy994qKzZG72U9CtFIVup05Spnpw\" style=\"display: block; padding: 1em 0px; text-align: center;\"><img alt=\"\" border=\"0\" data-original-height=\"339\" data-original-width=\"555\" src=\"https://blogger.googleusercontent.com/img/a/AVvXsEiQB-OawbmqsOQaigkJxRchRxwzNGb5sIZlPiYo1378oNW_CIq_ze7MkasyAohYGNQZS59-wmbQY5Q36CS5RjRG5pLRE1ko51GOYhY29oWZhxp6gXLHPPHKu9uk55yzcQ2LRjR45MeAs-dR8o8SKSq_5oEtL9Is_gcy994qKzZG72U9CtFIVup05Spnpw\" /></a></div><p>First, we don’t believe there was <em>no</em> exploitation of Chromium based browsers between 2015 and 2018. We recognize that we don’t have full view into active exploitation, and just because we didn’t detect any zero-days during those years, doesn’t mean exploitation didn’t happen. Available exploitation data suffers from sampling bias. </p><p>Teams like Google’s <a href=\"https://blog.google/threat-analysis-group/how-we-protect-users-0-day-attacks/\">Threat Analysis Group</a> are also becoming increasingly sophisticated in their efforts to protect users by discovering zero-days and in-the-wild attacks. A good example is <a href=\"https://www.youtube.com/watch?v=g09EvzVsDbk\">a bug in our Portals feature</a> that we fixed last fall. This bug was discovered by a team member in Switzerland and reported to Chrome through our bug tracker. While Chrome normally keeps each web page locked away in a box called the “renderer sandbox,” this bug allowed the code to break out, potentially allowing attackers to steal information. Working across multiple time zones and teams, it took the team three days to come up with a fix and roll it out, as detailed in our video on the process:    </p><div class=\"separator\" style=\"clear: both; text-align: center;\"><br /></div><div class=\"separator\" style=\"clear: both; text-align: center;\"><iframe class=\"BLOG_video_class\" allowfullscreen=\"\" youtube-src-id=\"VN-3-ov8uMM\" width=\"600\" height=\"498\" src=\"https://www.youtube.com/embed/VN-3-ov8uMM\"></iframe></div><p><strong>Why so many exploits? </strong></p><p>There are a number of factors at play, from changes in vendor and attacker behavior, to changes in the software itself. Here are four in particular that we've been discussing and exploring as a team. </p><p>First, we believe we’re seeing more bugs thanks to vendor transparency. Historically, many browser makers didn’t announce that a bug was being exploited in the wild, even if they knew it was happening. Today, most major browser makers have increased transparency via publishing details in release communications, and that may account for more publicly tracked “in the wild” exploitation. These efforts have been spearheaded by both browser security teams and dedicated research groups, such as <a href=\"https://googleprojectzero.blogspot.com/\">Project Zero.</a></p><p>Second, we believe we’re seeing more exploits due to evolved attacker focus. There are two reasons to suspect attackers might be choosing to attack Chrome more than they did in the past. </p><ul> <li><strong>Flash deprecation</strong>: In 2015 and 2016, Flash was a primary exploitation target. Chrome gradually made Flash a less attractive target for attackers <a href=\"https://www.chromium.org/flash-roadmap/\">(for instance requiring user clicks to activate Flash content)</a> before finally removing it in Chrome 88 in January last year. As Flash is no longer available, attackers have had to switch to a harder target: the browser itself.  </li><li><strong>Chromium popularity</strong>: Attackers go for the most popular target. In early 2020, Edge switched to using the Chromium rendering engine. If attackers can find a bug in Chromium, they can now attack a greater percentage of users. </li></ul><p>Third, some attacks that could previously be accomplished with a single bug now require multiple bugs. Before 2015, only a single in-the-wild bug was required to steal a user’s secrets from other websites, because multiple web pages lived together in a single <a href=\"https://www.chromium.org/developers/design-documents/multi-process-architecture\">renderer process</a>. If an attacker could compromise the renderer process belonging to a malicious website that a user visited, they might have been able to access the credentials for some other more sensitive website. </p><p>With Chrome’s multiyear <a href=\"https://www.chromium.org/Home/chromium-security/site-isolation\">Site Isolation</a> project largely complete, a single bug is almost never sufficient to do anything really bad. Attackers often need to <em>chain </em>at least two bugs: first, to compromise the renderer process, and second, to jump into the privileged Chrome browser process or directly into the device operating system. Sometimes multiple bugs are needed to achieve one or both of these steps. </p><p>So, to achieve the same result, an attacker generally now has to use more bugs than they previously did. For exactly the same level of attacker success, we’d see more in-the-wild bugs reported over time, as we add more layers of defense that the attacker needs to bypass. </p><p>Fourth, there’s simply the fact that <em>software has bugs</em>. Some fraction of those bugs are exploitable. Browsers increasingly mirror the complexity of operating systems — providing access to your peripherals, filesystem, 3D rendering, GPUs — and more complexity means more bugs. </p><p>Ultimately, we believe data is an important part of the story, but the absolute number of exploited bugs isn't a sufficient measure of security risk. Since some security bugs are inevitable, how a software vendor architects their software (so that the impact of any single bug is limited) and responds to critical security bugs is often much more important than the specifics of any single bug. </p><p><strong>How Chrome is raising the bar</strong></p><p>The Chrome team works hard to both detect and fix bugs before releases and get bug fixes out to users as quickly as possible. We’re proud of <a href=\"https://googleprojectzero.blogspot.com/2022/02/a-walk-through-project-zero-metrics.html\">our record at fixing serious bugs quickly</a>, <em>and</em> we are continually working to do better. </p><p>For example, one area of concern for us is the risk of n-day attacks: that is, exploitation of bugs we’ve already fixed, where the fixes are visible in our open-source code repositories. We have greatly reduced our “patch gap” from 35 days in Chrome 76 to an average of 18 days in subsequent milestones, and we expect this to reduce slightly further with <a href=\"https://blog.chromium.org/2021/03/speeding-up-release-cycle.html\">Chrome’s faster release cycle</a>.  </p><p>Irrespective of how quickly bugs are fixed, any in-the-wild exploitation is bad. Chrome is working hard to make it expensive and difficult for attackers to achieve their goals. </p><p>Some examples of the projects ongoing: </p><ul> <li>We continue to strengthen Site Isolation, <a href=\"https://security.googleblog.com/2021/07/protecting-more-with-site-isolation.html\">especially on Android</a>.  </li><li><a href=\"https://docs.google.com/document/d/1FM4fQmIhEqPG8uGp5o9A-mnPB5BOeScZYpkHjo0KKA8/edit#heading=h.fg3qxf1x0p2q\">The V8 heap sandbox</a> will prevent attackers using JavaScript just-in-time (JIT) compilation bugs to compromise the renderer process. This will require attackers to add a <em>third</em> bug to these exploit chains, which means increased security, but could increase the amount of in-the-wild exploits reported.   </li><li>The <a href=\"https://www.youtube.com/watch?v=gevcleRHRZ4\">MiraclePtr and *Scan</a> projects aim to prevent exploitability of many of our largest class of browser process bugs, called “use-after-free”. We will be applying similar systematic solutions to other classes of bugs over time.  </li><li>Since “memory safety” bugs account for 70% of the exploitable security bugs, we aim to write new parts of Chrome in <a href=\"https://security.googleblog.com/2021/09/an-update-on-memory-safety-in-chrome.html\">memory-safe languages</a>.  </li><li>We continue to work on post-exploitation mitigations such as <a href=\"https://www.intel.com/content/www/us/en/developer/articles/technical/technical-look-control-flow-enforcement-technology.html\">CET</a> and <a href=\"https://docs.microsoft.com/en-us/windows/win32/secbp/control-flow-guard\">CFG</a>. </li></ul><p>We are well past the stage of having “easy wins” when it comes to raising the bar for security. All of these are long term projects with significant engineering challenges. But as we've shown with Site Isolation, Chrome isn't afraid of making long term investments in major security engineering projects. One of the major challenges is performance: all of these technologies (except memory safe languages) could risk slowing the browser. Expect a series of blog posts over the coming months as we explore performance vs. security trade-offs. These decisions are <em>really hard</em>: we do not want to make Chrome slower for billions of people, especially as this disproportionately hits users with slower devices – we strive to make Chrome secure for all our users, not just those with the high end systems. </p><p><strong>How you can help</strong></p><p>Above all: if Chrome is reminding you to update, please do! </p><p>If you’re an enterprise IT professional, keep your users up-to-date by keeping auto-update on, and familiarize yourself with <a href=\"https://chromeenterprise.google/browser/security/\">the added enterprise policies and controls </a>that you can apply to Chrome within your organization. We strongly advise not focusing on zero-days when making decisions about updates, but instead to assume any Chrome security bug is under exploitation as an n-day. </p><p>If you're a security researcher, you can report bugs you find to the <a href=\"https://g.co/chrome/vrp\">Chrome Vulnerability Rewards Program</a> — and thanks for helping us make Chrome safer for everyone! </p>",
  "link": [
    "",
    "",
    "",
    "",
    ""
  ],
  "author": {
    "name": "Google",
    "uri": "http://www.blogger.com/profile/11822708545141062574",
    "email": "noreply@blogger.com",
    "gd:image": ""
  },
  "media:thumbnail": "",
  "thr:total": 0
}