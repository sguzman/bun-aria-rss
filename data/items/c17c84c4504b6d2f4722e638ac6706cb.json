{
  "title": "A Roadmap for Rich Scientific Data Structures in Python",
  "link": "",
  "published": "2011-07-21T00:00:00-07:00",
  "updated": "2011-07-21T00:00:00-07:00",
  "author": {
    "name": "Wes McKinney"
  },
  "id": "tag:wesmckinney.com,2011-07-21:/blog/a-roadmap-for-rich-scientific-data-structures-in-python/",
  "summary": "<p><a href=\"http://news.ycombinator.org/item?id=2790762 \" title=\"HN\" target=\"_blank\">Discussion thread on Hacker News</a></p>\n<p>So, this post is a bit of a brain dump on rich data structures in Python and what needs to happen in the very near future. I care about them for statistical computing (I want to build a statistical computing environment that trounces R) and …</p>",
  "content": "<p><a href=\"http://news.ycombinator.org/item?id=2790762 \" title=\"HN\" target=\"_blank\">Discussion thread on Hacker News</a></p>\n<p>So, this post is a bit of a brain dump on rich data structures in Python and what needs to happen in the very near future. I care about them for statistical computing (I want to build a statistical computing environment that trounces R) and financial data analysis (all evidence leads me to believe that Python is the best all-around tool for the finance space). Other people in the scientific Python community want them for numerous other applications: geophysics, neuroscience, etc. It's really hard to make everyone happy with a single solution. But the current state of affairs has me rather anxious. And I'd like to explain why. For a really quick summary on some of the work I've been doing, here's my SciPy 2010 talk slides:</p>\n<iframe src=\"//www.slideshare.net/slideshow/embed_code/key/BCN6Qeo0KC26ol\" width=\"425\" height=\"355\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\" style=\"border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;\" allowfullscreen> </iframe>\n<div style=\"margin-bottom:5px\"> <strong> <a href=\"//www.slideshare.net/wesm/data-structures-for-statistical-computing-in-python\" title=\"Data Structures for Statistical Computing in Python\" target=\"_blank\">Data Structures for Statistical Computing in Python</a> </strong> from <strong><a href=\"//www.slideshare.net/wesm\" target=\"_blank\">Wes McKinney</a></strong> </div>\n\n<h3>Data structures with metadata, the backstory</h3>\n<p>In the wake of <a title=\"SciPy 2011\" href=\"http://conference.scipy.org/scipy2011/index.php\" target=\"_blank\">SciPy 2011</a> I've been thinking a lot about the way forward from here in terms of building rich Pythonic data structures for statistics and many, many other fields. By <strong>rich</strong> I mean: is not just a NumPy <a title=\"ndarray\" href=\"http://docs.scipy.org/doc/numpy/reference/arrays.ndarray.html\" target=\"_blank\">ndarray</a>, contains <em>metadata</em> (however we define metadata) and has operations which depend on the metadata, and in general does far more than <a title=\"structured arrays\" href=\"http://docs.scipy.org/doc/numpy/user/basics.rec.html\" target=\"_blank\">structured arrays</a> currently do for you. This touches on a great many topics and features that people want (partial list):</p>\n<ul>\n<li>Manipulating heterogeneously-typed (what I loosely call \"mixed type\") data</li>\n<li>Size mutability: can add easily add \"columns\" or otherwise N-1-dimensional hyperslices without necessarily copying data</li>\n<li>Metadata about what each axis <em>represents</em>: axis=3 is less meaningful than axis='temperature'</li>\n<li>Metadata about axis labels (ticks)</li>\n<li>Label / tick-based data alignment / reshaping, either automatic or explicit</li>\n<li>Label / tick-based (fancy) indexing, both setting and getting</li>\n<li>Hierarchical columns</li>\n<li>Robust handling of missing / NA data (a là R)</li>\n<li>Tons of operations needing heterogeneous data and metadata: group by,\n    filtering, sorting, selection / querying, reindexing (reshaping to conform\n    to a new set of labels), axis selection based on names, etc. etc.</li>\n</ul>\n<p>The list goes on and on. I could write a 50-page manuscript on the exact\nspecification of what exact functionality is desired on each of the above\nbullet points. What I do know is that after using a rich data structure like\nthe ones in <a title=\"pandas\" href=\"http://pandas.sourceforge.net\"\ntarget=\"_blank\">pandas</a>, it's very, very hard to go back to using vanilla\nndarrays. To wit, R users coming to Python they have a similar experience: the\nlack of data.frame and all the functions which operate on data.frames is a\ngigantic loss of functionality. When I work with MATLAB and R users (especially\nin the finance industry) and get them up and running with pandas, I get a lot\nof \"where was this tool all my life?\". It's just that much better. In fact,\nusers can get by with only a very rudimentary understanding of NumPy if the\ndata structures are good enough; I think this is highly desirable. Even for\npurely interactive data analysis (forget operations which actually utilize the\nmetadata), isn't this much better:</p>\n<div class=\"github\"><pre><span></span><code>In [4]: data.corr()\nOut[4]:\n       AAPL     GOOG     MSFT     YHOO\nAAPL   1        0.5724   0.4714   0.3447\nGOOG   0.5724   1        0.5231   0.3409\nMSFT   0.4714   0.5231   1        0.3012\nYHOO   0.3447   0.3409   0.3012   1\n</code></pre></div>\n\n<p>than this:</p>\n<div class=\"github\"><pre><span></span><code>In [11]: np.corrcoef(data.T)\nOut[11]:\narray([[ 1.    ,  0.5724,  0.4714,  0.3447],\n       [ 0.5724,  1.    ,  0.5231,  0.3409],\n       [ 0.4714,  0.5231,  1.    ,  0.3012],\n       [ 0.3447,  0.3409,  0.3012,  1.    ]])\n</code></pre></div>\n\n<p>Of course if data were a structured ndarray you would be completely up a creek\n(most NumPy functions <strong>do not</strong> play well with structured arrays). But that's\nanother topic.</p>\n<p>But anyway, to the point of why I'm writing: we have a ton of really talented people with real problems to solve, and lots of great ideas about how to solve them. Last year at SciPy 2010 in Austin we had a Birds of a Feather session led by the venerable <a title=\"Fernando Pérez\" href=\"http://fperez.org/\" target=\"_blank\">Fernando Pérez</a> and myself to talk about the <a title=\"datarray\" href=\"http://pypi.python.org/pypi/datarray/0.0.5\" target=\"_blank\">datarray</a> project, pandas, <a title=\"tabular\" href=\"http://pypi.python.org/pypi/tabular\" target=\"_blank\">tabular</a>, <a title=\"larry\" href=\"http://pypi.python.org/pypi/la\" target=\"_blank\">larry</a>, and other various ideas about data structures that people have kicked around. The topic is important enough that <a title=\"Enthought\" href=\"http://enthought.com/\" target=\"_blank\">Enthought</a> hosted a gathering this past May in Austin, the <a title=\"DataArray Summit\" href=\"http://inscight.org/2011/05/18/episode_13/\" target=\"_blank\">DataArray Summit</a>, to talk about these issues and figure out where to go from here. It was a great meeting and we hashed out in gory detail many of the problem areas that we'd like to solve with a richer data structure. So that's a bit of the backstory.</p>\n<p>But even given all these great discussions and work being done, we have a really fundamental problem:</p>\n<h1>Fragmentation is killing us</h1>\n<p>There, I said it =) All us NumPy ninjas can navigated the fragmented, incohesive collection of data structures and tools, but it's confusing as hell for new and existing users. NumPy alone is not good enough for a lot of people (statisticians, financial data analysts, etc.), but they're left with a confusing choice between pandas, larry, datarray, or something else. Also, these tools have largely not been integrated with any other tools because of the community's collective commitment anxiety. We talk, hem and haw, and wring our hands. And still no integration. I don't mean to complain: I just deeply care about making the scientific Python stack the <strong>most powerful data analysis stack to ever exist</strong>. Seriously. And I can't do it alone. And I don't want to make unilateral decisions and shove anything down anyone's throat. We've started working on integration of pandas in <a title=\"statsmodels\" href=\"http://statsmodels.sourceforge.net/\" target=\"_blank\">statsmodels</a> (which is already going to make a really huge difference), but we need to collectively get our proverbial sh*t together. And soon.</p>\n<h2>My work on pandas lately and why it matters</h2>\n<p>On my end, in the 2 months since the DataArray summit, I decided to put my PhD on hold and focus more seriously on Python development, statistics / statsmodels, pandas, and other projects I care deeply about. So I've easily invested more time in pandas in the last 2 months than in the previous 2 years. This included heavily redesigned internals (which I've extremely pleased with) and tackling various other thorny internal issues which had long been an annoyance for me and an external source of criticism by end users (like, \"why are there 2 2-dimensional data structures, DataFrame and DataMatrix?\" The answer is that the internal implementation was different, with different performance characteristics depending on use). I'm also trying to clear out my extensive backlog of wishlist features (lots of blog articles to come on these). What's happened is that I started prototyping a new data structure which I'm calling <strong>NDFrame</strong> which I think is really going to be a big deal. Basically, the <strong>NDFrame</strong> is a by-product of the redesigned internal data structure (currently called <strong>BlockManager</strong>) backing DataFrame and friends. I can and should write an entire post about <strong>BlockManager</strong> and exactly what it needs to accomplish, but the short story is that BlockManager:</p>\n<ul>\n<li>Stores an arbitrary collection of homogeneously-typed N-dimensional NumPy ndarray objects (I call these <strong>Block</strong> objects or simple blocks)</li>\n<li>Has axis labels and is capable of reshaping the \"blocks\" to a new set of labels</li>\n<li>Is capable of  <em>consolidating</em> blocks (gluing them together) having the same dtype</li>\n<li>Knows how to appropriately introduce missing data, and upcast dtypes (int, bool) when the missing data marker (NaN, currently. Crossing my fingers for a good <a title=\"Missing data NEP\" href=\"https://github.com/m-paradox/numpy/blob/missingdata/doc/neps/missing-data.rst\" target=\"_blank\">NA implementation</a>!) needs to be introduced</li>\n<li>Can deal with single \"item\" type casts (ha, try to do that with structured arrays!)</li>\n<li>Can accept new blocks without copying data</li>\n</ul>\n<p>Maybe this is too abstract for some people. As illustration, here's literally\nwhat's going on inside DataFrame now after all my latest hacking:</p>\n<div class=\"github\"><pre><span></span><code><span class=\"n\">In</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">40</span><span class=\"p\">]</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">df</span><span class=\"w\"></span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">40</span><span class=\"p\">]</span><span class=\"o\">:</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">b</span><span class=\"w\">         </span><span class=\"n\">a</span><span class=\"w\">         </span><span class=\"n\">c</span><span class=\"w\">       </span><span class=\"n\">e</span><span class=\"w\">   </span><span class=\"n\">f</span><span class=\"w\"></span>\n<span class=\"mi\">0</span><span class=\"w\">   </span><span class=\"mf\">1.213</span><span class=\"w\">     </span><span class=\"mf\">1.507</span><span class=\"w\">     </span><span class=\"n\">True</span><span class=\"w\">    </span><span class=\"mi\">1</span><span class=\"w\">   </span><span class=\"n\">a</span><span class=\"w\"></span>\n<span class=\"mi\">1</span><span class=\"w\">  </span><span class=\"mf\">-0.6765</span><span class=\"w\">    </span><span class=\"mf\">0.06237</span><span class=\"w\">   </span><span class=\"n\">True</span><span class=\"w\">    </span><span class=\"mi\">1</span><span class=\"w\">   </span><span class=\"n\">b</span><span class=\"w\"></span>\n<span class=\"mi\">2</span><span class=\"w\">   </span><span class=\"mf\">0.3126</span><span class=\"w\">   </span><span class=\"mf\">-0.2575</span><span class=\"w\">    </span><span class=\"n\">False</span><span class=\"w\">   </span><span class=\"mi\">1</span><span class=\"w\">   </span><span class=\"n\">c</span><span class=\"w\"></span>\n<span class=\"mi\">3</span><span class=\"w\">   </span><span class=\"mf\">0.1505</span><span class=\"w\">    </span><span class=\"mf\">0.2242</span><span class=\"w\">    </span><span class=\"n\">True</span><span class=\"w\">    </span><span class=\"mi\">1</span><span class=\"w\">   </span><span class=\"n\">d</span><span class=\"w\"></span>\n<span class=\"mi\">4</span><span class=\"w\">  </span><span class=\"mf\">-0.7952</span><span class=\"w\">    </span><span class=\"mf\">0.2909</span><span class=\"w\">    </span><span class=\"n\">True</span><span class=\"w\">    </span><span class=\"mi\">1</span><span class=\"w\">   </span><span class=\"n\">e</span><span class=\"w\"></span>\n<span class=\"mi\">5</span><span class=\"w\">   </span><span class=\"mf\">1.341</span><span class=\"w\">    </span><span class=\"mf\">-0.9712</span><span class=\"w\">    </span><span class=\"n\">False</span><span class=\"w\">   </span><span class=\"mi\">2</span><span class=\"w\">   </span><span class=\"n\">f</span><span class=\"w\"></span>\n<span class=\"mi\">6</span><span class=\"w\">   </span><span class=\"mf\">0.01121</span><span class=\"w\">   </span><span class=\"mf\">1.654</span><span class=\"w\">     </span><span class=\"n\">True</span><span class=\"w\">    </span><span class=\"mi\">2</span><span class=\"w\">   </span><span class=\"n\">g</span><span class=\"w\"></span>\n<span class=\"mi\">7</span><span class=\"w\">  </span><span class=\"mf\">-0.173</span><span class=\"w\">    </span><span class=\"mf\">-1.385</span><span class=\"w\">     </span><span class=\"n\">False</span><span class=\"w\">   </span><span class=\"mi\">2</span><span class=\"w\">   </span><span class=\"n\">h</span><span class=\"w\"></span>\n<span class=\"mi\">8</span><span class=\"w\">   </span><span class=\"mf\">0.1637</span><span class=\"w\">   </span><span class=\"mf\">-0.898</span><span class=\"w\">     </span><span class=\"n\">False</span><span class=\"w\">   </span><span class=\"mi\">2</span><span class=\"w\">   </span><span class=\"n\">i</span><span class=\"w\"></span>\n<span class=\"mi\">9</span><span class=\"w\">   </span><span class=\"mf\">0.5979</span><span class=\"w\">   </span><span class=\"mf\">-1.035</span><span class=\"w\">     </span><span class=\"n\">False</span><span class=\"w\">   </span><span class=\"mi\">2</span><span class=\"w\">   </span><span class=\"n\">j</span><span class=\"w\"></span>\n\n<span class=\"n\">In</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">41</span><span class=\"p\">]</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">df</span><span class=\"p\">.</span><span class=\"n\">_data</span><span class=\"w\"></span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">41</span><span class=\"p\">]</span><span class=\"o\">:</span><span class=\"w\"></span>\n<span class=\"n\">BlockManager</span><span class=\"w\"></span>\n<span class=\"nl\">Items</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"n\">Axis</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"mi\">9</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"nl\">FloatBlock</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">dtype</span><span class=\"w\"> </span><span class=\"n\">float64</span><span class=\"w\"></span>\n<span class=\"nl\">BoolBlock</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">c</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">dtype</span><span class=\"w\"> </span><span class=\"kt\">bool</span><span class=\"w\"></span>\n<span class=\"nl\">IntBlock</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">e</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">dtype</span><span class=\"w\"> </span><span class=\"n\">int64</span><span class=\"w\"></span>\n<span class=\"nl\">ObjectBlock</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">f</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">dtype</span><span class=\"w\"> </span><span class=\"n\">object</span><span class=\"w\"></span>\n</code></pre></div>\n\n<p>The user would of course never be intended to look at this, it's purely internal. But for example things like this are OK to do:</p>\n<div class=\"github\"><pre><span></span><code><span class=\"n\">In</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">42</span><span class=\"p\">]</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">df</span><span class=\"p\">[</span><span class=\"sc\">&#39;e&#39;</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">df</span><span class=\"p\">[</span><span class=\"sc\">&#39;e&#39;</span><span class=\"p\">].</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"kt\">float</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"n\">In</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">43</span><span class=\"p\">]</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">df</span><span class=\"p\">.</span><span class=\"n\">_data</span><span class=\"w\"></span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">43</span><span class=\"p\">]</span><span class=\"o\">:</span><span class=\"w\"></span>\n<span class=\"n\">BlockManager</span><span class=\"w\"></span>\n<span class=\"nl\">Items</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"n\">Axis</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"mi\">9</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"nl\">FloatBlock</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">dtype</span><span class=\"w\"> </span><span class=\"n\">float64</span><span class=\"w\"></span>\n<span class=\"nl\">BoolBlock</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">c</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">dtype</span><span class=\"w\"> </span><span class=\"kt\">bool</span><span class=\"w\"></span>\n<span class=\"nl\">ObjectBlock</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">f</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">dtype</span><span class=\"w\"> </span><span class=\"n\">object</span><span class=\"w\"></span>\n<span class=\"nl\">FloatBlock</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">e</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">dtype</span><span class=\"w\"> </span><span class=\"n\">float64</span><span class=\"w\"></span>\n</code></pre></div>\n\n<p>Since in that case there are now multiple float blocks, they can be explicitly consolidated, but if you use DataFrame many operations will cause it to happen automatically (which is highly desirable, especially when you have <em>only</em> one dtype, for doing row-oriented operations):</p>\n<div class=\"github\"><pre><span></span><code><span class=\"ow\">In</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">44</span><span class=\"o\">]</span><span class=\"err\">:</span><span class=\"w\"> </span><span class=\"n\">df</span><span class=\"p\">.</span><span class=\"n\">_data</span><span class=\"p\">.</span><span class=\"n\">consolidate</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"k\">Out</span><span class=\"o\">[</span><span class=\"n\">44</span><span class=\"o\">]</span><span class=\"err\">:</span><span class=\"w\"></span>\n<span class=\"n\">BlockManager</span><span class=\"w\"></span>\n<span class=\"nl\">Items</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">b a c e f</span><span class=\"o\">]</span><span class=\"w\"></span>\n<span class=\"n\">Axis</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"err\">:</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">0 1 2 3 4 5 6 7 8 9</span><span class=\"o\">]</span><span class=\"w\"></span>\n<span class=\"nl\">BoolBlock</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">c</span><span class=\"o\">]</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">dtype</span><span class=\"w\"> </span><span class=\"n\">bool</span><span class=\"w\"></span>\n<span class=\"nl\">FloatBlock</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">b a e</span><span class=\"o\">]</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">dtype</span><span class=\"w\"> </span><span class=\"n\">float64</span><span class=\"w\"></span>\n<span class=\"nl\">ObjectBlock</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">f</span><span class=\"o\">]</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">dtype</span><span class=\"w\"> </span><span class=\"k\">object</span><span class=\"w\"></span>\n</code></pre></div>\n\n<p>Now, this is a pretty abstract business. Here's my point: when I started thinking about <strong>NDFrame</strong>, a user-facing n-dimensional data structure backed by <strong>BlockManager</strong>, I realized that what I am going to build is a <strong>nearly strict superset</strong> of the functionality provided by every other rich data structure I know of. I made a picture of the feature overlap, and note that <strong>arrows loosely mean: \"can be used to implement\"</strong>:</p>\n<p><img class=\"aligncenter\" src=\"https://wesmckinney.com/images/datastructure_venn.png\" alt=\"Data Structure Features Venn Diagram\" /></p>\n<p>For example, I need to write generic fancy indexing on the NDFrame, a task largely tackled by DataArray. So rather than reinvent the wheel, I should just co-opt that code (love that BSD license), but then I've effectively created a fork (nooooo!). I think having all these different libraries (and leaving users the confusing choice between them) is kind of nuts. Ideally DataArray (homogeneous) should just be a part of pandas (and I'm not opposed to changing the name, though it has stronger branding and far more users than datarray or larry). But once we've gone down that route, <a title=\"larry\" href=\"http://pypi.python.org/pypi/la\" target=\"_blank\">larry</a> is just a DataArray (homogeneous) with automatic data alignment. We're all doing the exact same kinds of things. So why not have one library?</p>\n<h2 style=\"text-align: center;\">\n  Remember: the real world is heterogeneously-typed\n</h2>\n\n<h3>Some other casual (and potentially controversial) observations</h3>\n<p>Here's just a dumping ground of various thoughts I have on this and related topics:</p>\n<ul>\n<li>The NumPy type hierarchy (int8, int16, int32, int64, uint8, uint16, &#8230;) isn't that important to me. R and MATLAB don't really have a type hierarchy and it doesn't seem to pose a problem. So I haven't gone down the road of creating Block objects mapping onto the NumPy type hierarchy. If someone wants to do it without complicating the end-user pandas experience, be my guest</li>\n<li>Tying yourself to the ndarray is too restrictive. This is a major problem with DataArray and larry; they don't do mixed-type data. So if you want to build something that competes with R you have failed before you have even begun by using a homogeneous-only data structure. Remember, DataFrame can be homogeneous whenever it wants to and getting the underlying ndarray is just a few keystrokes.<ul>\n<li>Structured arrays are probably not the answer. Size mutability (ability to add columns) and the ability to change dtypes are actually a big deal. As is the ability to do row-oriented computations, broadcasting, and all the things that structured arrays are (currently) unable to do. They are a darned convenient way of serializing / deserializing data, though. But memory layout and all that is far, far less important to me than usability / user interface / experience</ul></li>\n</ul>\n</li>\n</ul>"
}