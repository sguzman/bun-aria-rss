{
  "title": "Interview 1::Part 2 – Sean Griffin",
  "link": "https://newrustacean.com/show_notes/interview/_1/part_2/",
  "description": "<p>Sean Griffin on type systems and hopes for Rust's future</p>\n<h2>Notes</h2>\n<p>Chris chats with Sean Griffin about the tradeoffs between mental overhead and type safety, the expressiveness of different type systems, and some of the places where Rust currently falls down.</p>\n<h3>Corrigenda</h3>\n<p>Sean noted he could be wrong about <code>IEnumerable<T></code> not having a <code>Sum</code> method in C♯, and post-show research indicated that he was (it's possible it was added after he had stopped doing .NET work, of course). See the <a href=\"https://msdn.microsoft.com/library/bb919210(v=vs.90).aspx\">documentation</a> for details on how <code>IEnumerable<T>.Sum</code> it behaves in C♯ if you're curious.</p>\n<p>As a related note, I (Chris) have done a little bit of digging on C♯ in the interval and it's fair to say that while a lot of the \"ceremony\" involved in writing C♯ is annoying, it's much more than just a \"slightly nicer Java\", and indeed is a much nicer language than my previous, limited exposure had led me to believe. It's no Rust or F♯, but its type system is substantially more capable than Java's.</p>\n<table><thead><tr></tr></thead><tbody><tr></tr></tbody></table><h2>Links</h2>\n<ul>\n<li>fmap\n<ul>\n<li><a href=\"https://robots.thoughtbot.com/functional-swift-for-dealing-with-optional-values\">Discussion of <code>fmap</code> with <code>Optional</code> in Swift</a></li>\n<li><a href=\"http://learnyouahaskell.com/functors-applicative-functors-and-monoids\">In Haskell</a></li>\n</ul>\n</li>\n<li>Rust:\n<ul>\n<li><a href=\"https://doc.rust-lang.org/book/trait-objects.html\">Trait objects</a></li>\n<li><a href=\"https://github.com/rust-lang/rfcs/pull/1210\">Specialization RFC</a>\n<ul>\n<li><a href=\"https://github.com/rust-lang/rust/issues/31844\">Implementation</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"https://github.com/sgrif/diesel\">Diesel</a></li>\n</ul>\n<table><thead><tr></tr></thead><tbody><tr></tr></tbody></table><h2>Sponsors</h2>\n<ul>\n<li>Aleksey Pirogov</li>\n<li>Chris Palmer</li>\n<li><a href=\"https://twitter.com/derekmorr\">Derek Morr</a></li>\n<li>Hamza Sheikh</li>\n<li>Leif Arne Storset</li>\n<li>Luca Schmid</li>\n<li>Micael Bergeron</li>\n<li>Ralph Giles (\"rillian\")</li>\n<li>reddraggone9</li>\n<li>Ryan Ollos</li>\n<li><a href=\"http://willroe.me\">William Roe</a></li>\n</ul>\n<h3>Become a sponsor</h3>\n<ul>\n<li><a href=\"https://www.patreon.com/newrustacean\" rel=\"payment\">Patreon</a></li>\n<li><a href=\"https://venmo.com/chriskrycho\">Venmo</a></li>\n<li><a href=\"https://www.dwolla.com/hub/chriskrycho\">Dwolla</a></li>\n<li><a href=\"https://cash.me/$chriskrycho\">Cash.me</a></li>\n</ul>\n<h2>Follow</h2>\n<ul>\n<li>New Rustacean:\n<ul>\n<li>Twitter: <a href=\"https://www.twitter.com/newrustacean\">@newrustacean</a></li>\n<li>Email: <a href=\"mailto:hello@newrustacean.com\">hello@newrustacean.com</a></li>\n</ul>\n</li>\n<li>Chris Krycho\n<ul>\n<li>GitHub: <a href=\"https://github.com/chriskrycho\">chriskrycho</a></li>\n<li>Twitter: <a href=\"https://www.twitter.com/chriskrycho\">@chriskrycho</a></li>\n</ul>\n</li>\n</ul>\n",
  "pubDate": "Thu, 25 Feb 2016 06:30:00 -0700",
  "enclosure": "",
  "guid": "EF51E282-74DB-4F9F-8952-DBF70B1F8B2E",
  "itunes:author": "Chris Krycho",
  "itunes:summary": "Sean Griffin on type systems and hopes for Rust's future Notes ----- Chris chats with Sean Griffin about the tradeoffs between mental overhead and type safety, the expressiveness of different type systems, and some of the places where Rust currently falls down. ### Corrigenda Sean noted he could be wrong about `IEnumerable<T>` not having a `Sum` method in C♯, and post-show research indicated that he was (it's possible it was added after he had stopped doing .NET work, of course). See the [documentation][c1] for details on how `IEnumerable<T>.Sum` it behaves in C♯ if you're curious. As a related note, I (Chris) have done a little bit of digging on C♯ in the interval and it's fair to say that while a lot of the \"ceremony\" involved in writing C♯ is annoying, it's much more than just a \"slightly nicer Java\", and indeed is a much nicer language than my previous, limited exposure had led me to believe. It's no Rust or F♯, but its type system is substantially more capable than Java's. [c1]: https://msdn.microsoft.com/library/bb919210(v=vs.90).aspx Links ----- - fmap + [Discussion of `fmap` with `Optional` in Swift][l1] + [In Haskell][l2] - Rust: + [Trait objects][l3] + [Specialization RFC][l4] * [Implementation][l5] - [Diesel][l6] [l1]: https://robots.thoughtbot.com/functional-swift-for-dealing-with-optional-values [l2]: http://learnyouahaskell.com/functors-applicative-functors-and-monoids [l3]: https://doc.rust-lang.org/book/trait-objects.html [l4]: https://github.com/rust-lang/rfcs/pull/1210 [l5]: https://github.com/rust-lang/rust/issues/31844 [l6]: https://github.com/sgrif/diesel Sponsors -------- - Aleksey Pirogov - Chris Palmer - [Derek Morr][s3] - Hamza Sheikh - Leif Arne Storset - Luca Schmid - Micael Bergeron - Ralph Giles (\"rillian\") - reddraggone9 - Ryan Ollos - [William Roe][s11] [s3]: https://twitter.com/derekmorr [s11]: http://willroe.me ### Become a sponsor - Patreon - [Venmo](https://venmo.com/chriskrycho) - [Dwolla](https://www.dwolla.com/hub/chriskrycho) - [Cash.me](https://cash.me/$chriskrycho) Follow ------ - New Rustacean: + Twitter: [@newrustacean](https://www.twitter.com/newrustacean) + Email: [hello@newrustacean.com](mailto:hello@newrustacean.com) - Chris Krycho + GitHub: [chriskrycho](https://github.com/chriskrycho) + Twitter: [@chriskrycho](https://www.twitter.com/chriskrycho)",
  "itunes:duration": "22:14",
  "itunes:episodeType": "full"
}