{
  "title": "Compiling DataFrame code is harder than it looks",
  "link": "",
  "published": "2016-03-16T10:00:00-07:00",
  "updated": "2016-03-16T10:00:00-07:00",
  "author": {
    "name": "Wes McKinney"
  },
  "id": "tag:wesmckinney.com,2016-03-16:/blog/compiling-dataframe-code/",
  "summary": "<p>Many people have asked me about the proliferation of DataFrame APIs like Spark\nDataFrames, Ibis, Blaze, and others.</p>\n<p>As it turns out, executing pandas-like code in a scalable environment is a\ndifficult compiler engineering problem to enable composable, imperative Python\nor R code to be translated into a SQL or Spark/MapReduce-like representation. I\nshow an example of what I mean and some work that I've done to create a better\n\"pandas compiler\" with <a href=\"http://blog.ibis-project.org/\">Ibis</a>.</p>",
  "content": "<p>Many people have asked me about the proliferation of DataFrame APIs like Spark\nDataFrames, Ibis, Blaze, and others.</p>\n<p>As it turns out, executing pandas-like code in a scalable environment is a\ndifficult compiler engineering problem to enable composable, imperative Python\nor R code to be translated into a SQL or Spark/MapReduce-like representation. I\nshow an example of what I mean and some work that I've done to create a better\n\"pandas compiler\" with <a href=\"http://blog.ibis-project.org/\">Ibis</a>.</p>\n\n\n<h2>An example: comparing group statistics in a pandas DataFrame</h2>\n<p>Recently, I did an <a href=\"http://wesmckinney.com/blog/pandas-and-apache-arrow/\">exploration of data access performance</a> between various\npandas data access layers, plus Impala and Spark's Python data connectors. You\ncan <a href=\"https://gist.github.com/wesm/0cb5531b1c2e346a0007\">check out the notebook</a> for more detail on that.</p>\n<p>I used a 1 million row DataFrame containing a <code>group</code> column with 10 distinct\nmembers:</p>\n<div class=\"github\"><pre><span></span><code>&gt;&gt;&gt; df.head()\n        group     data0     data1     data2     data3     data4     data5  \\\n0  TfRkhylmdW  0.228651  0.210756  0.641575 -0.344733  1.638046 -0.303868\n1  TfRkhylmdW  1.506601 -0.930793  0.845281  0.221403 -1.109430 -0.394028\n2  TfRkhylmdW -0.837084 -1.158718 -0.575112 -0.525921 -1.781424  0.195840\n3  TfRkhylmdW -0.431981  0.435873  0.271507  0.069608 -0.196484  1.398288\n4  TfRkhylmdW -0.545770 -0.770385  0.668840 -0.217988 -1.002836 -0.955667\n\n      data6     data7     data8     data9\n0  2.433933 -0.405197 -0.881002 -1.088624\n1 -0.746023  0.037859 -1.532666  0.670006\n2  0.891318  0.586914  0.367560  1.178054\n3 -0.397724 -0.954943 -0.008938  0.461496\n4 -0.453982  0.675734 -0.246444  0.328300\n\n&gt;&gt;&gt; df.group.unique()\narray([&#39;TfRkhylmdW&#39;, &#39;JTI2rP8Cfa&#39;, &#39;kBkTSZ1jKi&#39;, &#39;wCbbZozpYj&#39;,\n       &#39;cUuU3BEHLT&#39;, &#39;2TVBX9dbMC&#39;, &#39;KoVkXOwDNU&#39;, &#39;oIiFClyLfS&#39;,\n       &#39;MTnSnfhRpa&#39;, &#39;ySERnFpICC&#39;], dtype=object)\n</code></pre></div>\n\n<p>I was working on Ibis recently, and I looked at the pandas code to compare the\naverage in two groups:</p>\n<div class=\"github\"><pre><span></span><code><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">m1</span> <span class=\"o\">=</span> <span class=\"n\">df</span><span class=\"p\">[</span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">group</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;TfRkhylmdW&#39;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">data0</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">m2</span> <span class=\"o\">=</span> <span class=\"n\">df</span><span class=\"p\">[</span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">group</span> <span class=\"o\">!=</span> <span class=\"s1\">&#39;TfRkhylmdW&#39;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">data0</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">m1</span> <span class=\"o\">/</span> <span class=\"n\">m2</span> <span class=\"o\">-</span> <span class=\"mi\">1</span>\n<span class=\"o\">-</span><span class=\"mf\">0.53366108239890431</span>\n</code></pre></div>\n\n<p>So then I looked at how to make this work in Ibis in a scalable way inside a\nSQL-on-Hadoop engine like Impala. After writing the CSV file to HDFS in Parquet\nformat, I eventually improved the Ibis compiler to work identically:</p>\n<div class=\"github\"><pre><span></span><code><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">db</span> <span class=\"o\">=</span> <span class=\"n\">con</span><span class=\"o\">.</span><span class=\"n\">database</span><span class=\"p\">(</span><span class=\"s1\">&#39;hs2_perf_test&#39;</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">idf</span> <span class=\"o\">=</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">csv_as_parquet</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">m1</span> <span class=\"o\">=</span> <span class=\"n\">idf</span><span class=\"p\">[</span><span class=\"n\">idf</span><span class=\"o\">.</span><span class=\"n\">group</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;TfRkhylmdW&#39;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">data0</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">m2</span> <span class=\"o\">=</span> <span class=\"n\">idf</span><span class=\"p\">[</span><span class=\"n\">idf</span><span class=\"o\">.</span><span class=\"n\">group</span> <span class=\"o\">!=</span> <span class=\"s1\">&#39;TfRkhylmdW&#39;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">data0</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">m1</span> <span class=\"o\">/</span> <span class=\"n\">m2</span> <span class=\"o\">-</span> <span class=\"mi\">1</span>\n<span class=\"o\">-</span><span class=\"mf\">0.53366108239885268</span>\n</code></pre></div>\n\n<p>This isn't that easy to do in a single query. The SQL that gets generated by\nIbis under the hood is:</p>\n<div class=\"github\"><pre><span></span><code><span class=\"k\">SELECT</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">t0</span><span class=\"p\">.</span><span class=\"o\">`</span><span class=\"n\">mean</span><span class=\"o\">`</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"n\">t1</span><span class=\"p\">.</span><span class=\"o\">`</span><span class=\"n\">mean</span><span class=\"o\">`</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"k\">AS</span><span class=\"w\"> </span><span class=\"o\">`</span><span class=\"n\">tmp</span><span class=\"o\">`</span><span class=\"w\"></span>\n<span class=\"k\">FROM</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">SELECT</span><span class=\"w\"> </span><span class=\"k\">avg</span><span class=\"p\">(</span><span class=\"o\">`</span><span class=\"n\">data0</span><span class=\"o\">`</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">AS</span><span class=\"w\"> </span><span class=\"o\">`</span><span class=\"n\">mean</span><span class=\"o\">`</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">FROM</span><span class=\"w\"> </span><span class=\"n\">hs2_perf_test</span><span class=\"p\">.</span><span class=\"o\">`</span><span class=\"n\">csv_as_parquet</span><span class=\"o\">`</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">WHERE</span><span class=\"w\"> </span><span class=\"o\">`</span><span class=\"k\">group</span><span class=\"o\">`</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s1\">&#39;TfRkhylmdW&#39;</span><span class=\"w\"></span>\n<span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">t0</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">CROSS</span><span class=\"w\"> </span><span class=\"k\">JOIN</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">SELECT</span><span class=\"w\"> </span><span class=\"k\">avg</span><span class=\"p\">(</span><span class=\"o\">`</span><span class=\"n\">data0</span><span class=\"o\">`</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">AS</span><span class=\"w\"> </span><span class=\"o\">`</span><span class=\"n\">mean</span><span class=\"o\">`</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">FROM</span><span class=\"w\"> </span><span class=\"n\">hs2_perf_test</span><span class=\"p\">.</span><span class=\"o\">`</span><span class=\"n\">csv_as_parquet</span><span class=\"o\">`</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">WHERE</span><span class=\"w\"> </span><span class=\"o\">`</span><span class=\"k\">group</span><span class=\"o\">`</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"s1\">&#39;TfRkhylmdW&#39;</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">t1</span><span class=\"w\"></span>\n</code></pre></div>\n\n<h3>Looking more closely at Spark DataFrames</h3>\n<p>After doing some of this arduous static analysis of pandas expressions to get\nthis working, I was curious if Spark DataFrames were solving these problems in\na way I could learn from.</p>\n<p>First off, I found that executing simple scalar aggregates with Spark\nDataFrames requires forming an explicit SQL-like aggregation:</p>\n<div class=\"github\"><pre><span></span><code><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">pyspark.sql.functions</span> <span class=\"k\">as</span> <span class=\"nn\">F</span>\n<span class=\"o\">...</span> <span class=\"n\">sdf</span> <span class=\"o\">=</span> <span class=\"n\">sqlContext</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"s1\">&#39;parquet&#39;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"s1\">&#39;csv_parquet/&#39;</span><span class=\"p\">)</span>\n<span class=\"o\">...</span> <span class=\"n\">g</span> <span class=\"o\">=</span> <span class=\"n\">sdf</span><span class=\"p\">[</span><span class=\"s1\">&#39;group&#39;</span><span class=\"p\">]</span>\n<span class=\"o\">...</span> <span class=\"n\">m1</span> <span class=\"o\">=</span> <span class=\"n\">F</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">(</span><span class=\"n\">sdf</span><span class=\"p\">[</span><span class=\"n\">g</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;TfRkhylmdW&#39;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">data0</span><span class=\"p\">)</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">sdf</span><span class=\"o\">.</span><span class=\"n\">agg</span><span class=\"p\">(</span><span class=\"n\">m1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n<span class=\"o\">+--------------------+</span>\n<span class=\"o\">|</span>          <span class=\"n\">avg</span><span class=\"p\">(</span><span class=\"n\">data0</span><span class=\"p\">)</span><span class=\"o\">|</span>\n<span class=\"o\">+--------------------+</span>\n<span class=\"o\">|</span><span class=\"mf\">7.856687420596779E-4</span><span class=\"o\">|</span>\n<span class=\"o\">+--------------------+</span>\n</code></pre></div>\n\n<p>But, computing the percent difference I was after (from above) did not work\nlike I expected or raise an error that I was doing something wrong:</p>\n<div class=\"github\"><pre><span></span><code><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">m1</span> <span class=\"o\">=</span> <span class=\"n\">F</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">(</span><span class=\"n\">sdf</span><span class=\"p\">[</span><span class=\"n\">g</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;TfRkhylmdW&#39;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">data0</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">m2</span> <span class=\"o\">=</span> <span class=\"n\">F</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">(</span><span class=\"n\">sdf</span><span class=\"p\">[</span><span class=\"n\">g</span> <span class=\"o\">!=</span> <span class=\"s1\">&#39;TfRkhylmdW&#39;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">data0</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">pct_diff</span> <span class=\"o\">=</span> <span class=\"n\">m1</span> <span class=\"o\">/</span> <span class=\"n\">m2</span> <span class=\"o\">-</span> <span class=\"mi\">1</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">sdf</span><span class=\"o\">.</span><span class=\"n\">agg</span><span class=\"p\">(</span><span class=\"n\">pct_diff</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n<span class=\"o\">+-------------------------------+</span>\n<span class=\"o\">|</span><span class=\"p\">((</span><span class=\"n\">avg</span><span class=\"p\">(</span><span class=\"n\">data0</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"n\">avg</span><span class=\"p\">(</span><span class=\"n\">data0</span><span class=\"p\">))</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">|</span>\n<span class=\"o\">+-------------------------------+</span>\n<span class=\"o\">|</span>                            <span class=\"mf\">0.0</span><span class=\"o\">|</span>\n<span class=\"o\">+-------------------------------+</span>\n</code></pre></div>\n\n<p>I also tried some other things:</p>\n<div class=\"github\"><pre><span></span><code><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">sdf</span><span class=\"o\">.</span><span class=\"n\">agg</span><span class=\"p\">(</span><span class=\"n\">m1</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"n\">sdf</span><span class=\"o\">.</span><span class=\"n\">agg</span><span class=\"p\">(</span><span class=\"n\">m2</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mi\">1</span>\n<span class=\"o\">---------------------------------------------------------------------------</span>\n<span class=\"ne\">TypeError</span>                                 <span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">)</span>\n<span class=\"n\">ipython</span><span class=\"o\">-</span><span class=\"nb\">input</span><span class=\"o\">-</span><span class=\"mi\">7</span><span class=\"o\">-</span><span class=\"n\">f7c47a6faad3</span> <span class=\"ow\">in</span> <span class=\"n\">module</span><span class=\"p\">()</span>\n<span class=\"o\">----&gt;</span> <span class=\"mi\">1</span> <span class=\"n\">sdf</span><span class=\"o\">.</span><span class=\"n\">agg</span><span class=\"p\">(</span><span class=\"n\">m1</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"n\">sdf</span><span class=\"o\">.</span><span class=\"n\">agg</span><span class=\"p\">(</span><span class=\"n\">m2</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mi\">1</span>\n\n<span class=\"ne\">TypeError</span><span class=\"p\">:</span> <span class=\"n\">unsupported</span> <span class=\"n\">operand</span> <span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"o\">/</span><span class=\"p\">:</span> <span class=\"s1\">&#39;DataFrame&#39;</span> <span class=\"ow\">and</span> <span class=\"s1\">&#39;DataFrame&#39;</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">sdf</span><span class=\"o\">.</span><span class=\"n\">agg</span><span class=\"p\">(</span><span class=\"n\">m1</span><span class=\"o\">.</span><span class=\"n\">alias</span><span class=\"p\">(</span><span class=\"s1\">&#39;m1&#39;</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">m1</span> <span class=\"o\">/</span> <span class=\"n\">sdf</span><span class=\"o\">.</span><span class=\"n\">agg</span><span class=\"p\">(</span><span class=\"n\">m2</span><span class=\"o\">.</span><span class=\"n\">alias</span><span class=\"p\">(</span><span class=\"s1\">&#39;m2&#39;</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">m2</span> <span class=\"o\">-</span> <span class=\"mi\">1</span>\n<span class=\"n\">Column</span><span class=\"o\">%</span><span class=\"n\">lt</span><span class=\"p\">;((</span><span class=\"n\">m1</span> <span class=\"o\">/</span> <span class=\"n\">m2</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">%</span><span class=\"n\">gt</span><span class=\"p\">;</span>\n</code></pre></div>\n\n<p>To get the answer you're looking for, you would either need to form the\ncross-join yourself or run multiple queries (perhaps calling <code>toPandas</code> on the\nresults), neither of which is ideal from a usability perspective.</p>\n<h3>Afterthoughts</h3>\n<p>I've approached Ibis development from the perspective of pandas users and\nworking to enable as much of the pandas API to behave as expected in a scalable\nHadoop environment. I also wanted to make sure that all (or nearly all) SQL\n<a href=\"http://docs.ibis-project.org/sql.html\">could be portably rewritten</a> in Ibis using the pandas-like API style.</p>\n<p>In my view, Spark DataFrames have approached the problem differently: providing\na DataFrame-like API for Spark SQL. But at the moment, you are still writing\nSQL.</p>\n<p>Through the <a href=\"http://arrow.apache.org\">Apache Arrow project</a>, we'll be working to enable not only code\nthat <em>can</em> be compiled to SQL, but also arbitrary user-defined Python code to\nbe run in a performant way inside systems like Spark and Impala.</p>"
}