{
  "title": "Write Complex Parallel Algorithms",
  "link": "",
  "updated": "2015-06-26T00:00:00+00:00",
  "id": "https://mrocklin.github.io/blog/work/2015/06/26/Complex-Graphs",
  "content": "<p><em>This work is supported by <a href=\"http://continuum.io\">Continuum Analytics</a>\nand the <a href=\"http://www.darpa.mil/program/XDATA\">XDATA Program</a>\nas part of the <a href=\"http://blaze.pydata.org\">Blaze Project</a></em></p>\n\n<p><strong>tl;dr: We discuss the use of complex dask graphs for non-trivial algorithms.\nWe show off an on-disk parallel SVD.</strong></p>\n\n<h2 id=\"most-parallel-computation-is-simple\">Most Parallel Computation is Simple</h2>\n\n<p>Most parallel workloads today are fairly trivial:</p>\n\n<figure class=\"highlight\">\n  <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">dask.bag</span> <span class=\"k\">as</span> <span class=\"n\">db</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">db</span><span class=\"p\">.</span><span class=\"n\">from_s3</span><span class=\"p\">(</span><span class=\"s\">'githubarchive-data'</span><span class=\"p\">,</span> <span class=\"s\">'2015-01-01-*.json.gz'</span><span class=\"p\">)</span>\n          <span class=\"p\">.</span><span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"n\">json</span><span class=\"p\">.</span><span class=\"n\">loads</span><span class=\"p\">)</span>\n          <span class=\"p\">.</span><span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">d</span><span class=\"p\">:</span> <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"s\">'type'</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s\">'PushEvent'</span><span class=\"p\">)</span>\n          <span class=\"p\">.</span><span class=\"n\">count</span><span class=\"p\">()</span></code></pre>\n</figure>\n\n<p>Graphs for these computations look like the following:</p>\n\n<p><a href=\"https://mrocklin.github.io/blog/images/dask-bag-embarassing.png\">\n<img src=\"https://mrocklin.github.io/blog/images/dask-bag-embarassing.png\" width=\"70%\" alt=\"Embarrassingly parallel dask graph\" /></a></p>\n\n<p>This is great; these are simple problems to solve efficiently in parallel.\nGenerally these simple computations occur at the <em>beginning</em> of our analyses.</p>\n\n<h2 id=\"sophisticated-algorithms-can-be-complex\">Sophisticated Algorithms can be Complex</h2>\n\n<p>Later in our analyses we want more complex algorithms for statistics\n, machine learning, etc..  Often this stage fits\ncomfortably in memory, so we don’t worry about parallelism and can use\n<code class=\"language-plaintext highlighter-rouge\">statsmodels</code> or <code class=\"language-plaintext highlighter-rouge\">scikit-learn</code> on the gigabyte result we’ve gleaned from\nterabytes of data.</p>\n\n<p>However, if our reduced result is still large then we need to think about\nsophisticated parallel algorithms.  This is fresh space with lots of exciting\nacademic and software work.</p>\n\n<h2 id=\"example-parallel-stable-out-of-core-svd\">Example: Parallel, Stable, Out-of-Core SVD</h2>\n\n<p>I’d like to show off work by <a href=\"http://www.marianotepper.com.ar/\">Mariano Tepper</a>,\nwho is responsible for <code class=\"language-plaintext highlighter-rouge\">dask.array.linalg</code>.  In particular he has a couple of\nwonderful algorithms for the\n<a href=\"https://en.wikipedia.org/wiki/Singular_value_decomposition\">Singular Value Decomposition (SVD)</a>\n(also strongly related to <a href=\"https://en.wikipedia.org/wiki/Principal_component_analysis\">Principal Components Analysis (PCA)</a>.)\nReally I just want to show off this pretty graph.</p>\n\n<figure class=\"highlight\">\n  <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">dask.array</span> <span class=\"k\">as</span> <span class=\"n\">da</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">da</span><span class=\"p\">.</span><span class=\"n\">ones</span><span class=\"p\">((</span><span class=\"mi\">5000</span><span class=\"p\">,</span> <span class=\"mi\">1000</span><span class=\"p\">),</span> <span class=\"n\">chunks</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1000</span><span class=\"p\">,</span> <span class=\"mi\">1000</span><span class=\"p\">))</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">u</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"n\">da</span><span class=\"p\">.</span><span class=\"n\">linalg</span><span class=\"p\">.</span><span class=\"n\">svd</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span></code></pre>\n</figure>\n\n<p><a href=\"https://mrocklin.github.io/blog/images/dask-svd.png\">\n<img src=\"https://mrocklin.github.io/blog/images/dask-svd.png\" width=\"60%\" alt=\"Parallel SVD dask graph\" /></a></p>\n\n<p>This algorithm computes the exact SVD (up to numerical precision) of a large\ntall-and-skinny matrix in parallel in many small chunks.  This allows it to\noperate out-of-core (from disk) and use multiple cores in parallel.  At the\nbottom we see the construction of our trivial array of ones, followed by many\ncalls to <code class=\"language-plaintext highlighter-rouge\">np.linalg.qr</code> on each of the blocks.  Then there is a lot of\nrearranging of various pieces as they are stacked, multiplied, and undergo more\nrounds of <code class=\"language-plaintext highlighter-rouge\">np.linalg.qr</code> and <code class=\"language-plaintext highlighter-rouge\">np.linalg.svd</code>.  The resulting arrays are\navailable in many chunks at the top and second-from-top rows.</p>\n\n<p>The <a href=\"http://dask.pydata.org/en/latest/spec.html\">dask dict</a> for one of these\narrays, <code class=\"language-plaintext highlighter-rouge\">s</code>, looks like the following:</p>\n\n<figure class=\"highlight\">\n  <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">dask</span>\n<span class=\"p\">{(</span><span class=\"s\">'x'</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">):</span> <span class=\"p\">(</span><span class=\"n\">np</span><span class=\"p\">.</span><span class=\"n\">ones</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mi\">1000</span><span class=\"p\">,</span> <span class=\"mi\">1000</span><span class=\"p\">)),</span>\n <span class=\"p\">(</span><span class=\"s\">'x'</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">):</span> <span class=\"p\">(</span><span class=\"n\">np</span><span class=\"p\">.</span><span class=\"n\">ones</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mi\">1000</span><span class=\"p\">,</span> <span class=\"mi\">1000</span><span class=\"p\">)),</span>\n <span class=\"p\">(</span><span class=\"s\">'x'</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">):</span> <span class=\"p\">(</span><span class=\"n\">np</span><span class=\"p\">.</span><span class=\"n\">ones</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mi\">1000</span><span class=\"p\">,</span> <span class=\"mi\">1000</span><span class=\"p\">)),</span>\n <span class=\"p\">(</span><span class=\"s\">'x'</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">):</span> <span class=\"p\">(</span><span class=\"n\">np</span><span class=\"p\">.</span><span class=\"n\">ones</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mi\">1000</span><span class=\"p\">,</span> <span class=\"mi\">1000</span><span class=\"p\">)),</span>\n <span class=\"p\">(</span><span class=\"s\">'x'</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">):</span> <span class=\"p\">(</span><span class=\"n\">np</span><span class=\"p\">.</span><span class=\"n\">ones</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mi\">1000</span><span class=\"p\">,</span> <span class=\"mi\">1000</span><span class=\"p\">)),</span>\n <span class=\"p\">(</span><span class=\"s\">'tsqr_2_QR_st1'</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">):</span> <span class=\"p\">(</span><span class=\"n\">np</span><span class=\"p\">.</span><span class=\"n\">linalg</span><span class=\"p\">.</span><span class=\"n\">qr</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"s\">'x'</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)),</span>\n <span class=\"p\">(</span><span class=\"s\">'tsqr_2_QR_st1'</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">):</span> <span class=\"p\">(</span><span class=\"n\">np</span><span class=\"p\">.</span><span class=\"n\">linalg</span><span class=\"p\">.</span><span class=\"n\">qr</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"s\">'x'</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)),</span>\n <span class=\"p\">(</span><span class=\"s\">'tsqr_2_QR_st1'</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">):</span> <span class=\"p\">(</span><span class=\"n\">np</span><span class=\"p\">.</span><span class=\"n\">linalg</span><span class=\"p\">.</span><span class=\"n\">qr</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"s\">'x'</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)),</span>\n <span class=\"p\">(</span><span class=\"s\">'tsqr_2_QR_st1'</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">):</span> <span class=\"p\">(</span><span class=\"n\">np</span><span class=\"p\">.</span><span class=\"n\">linalg</span><span class=\"p\">.</span><span class=\"n\">qr</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"s\">'x'</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)),</span>\n <span class=\"p\">(</span><span class=\"s\">'tsqr_2_QR_st1'</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">):</span> <span class=\"p\">(</span><span class=\"n\">np</span><span class=\"p\">.</span><span class=\"n\">linalg</span><span class=\"p\">.</span><span class=\"n\">qr</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"s\">'x'</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)),</span>\n <span class=\"p\">(</span><span class=\"s\">'tsqr_2_R'</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">):</span> <span class=\"p\">(</span><span class=\"n\">operator</span><span class=\"p\">.</span><span class=\"n\">getitem</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"s\">'tsqr_2_QR_st2'</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"mi\">1</span><span class=\"p\">),</span>\n <span class=\"p\">(</span><span class=\"s\">'tsqr_2_R_st1'</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">):</span> <span class=\"p\">(</span><span class=\"n\">operator</span><span class=\"p\">.</span><span class=\"n\">getitem</span><span class=\"p\">,(</span><span class=\"s\">'tsqr_2_QR_st1'</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"mi\">1</span><span class=\"p\">),</span>\n <span class=\"p\">(</span><span class=\"s\">'tsqr_2_R_st1'</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">):</span> <span class=\"p\">(</span><span class=\"n\">operator</span><span class=\"p\">.</span><span class=\"n\">getitem</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"s\">'tsqr_2_QR_st1'</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"mi\">1</span><span class=\"p\">),</span>\n <span class=\"p\">(</span><span class=\"s\">'tsqr_2_R_st1'</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">):</span> <span class=\"p\">(</span><span class=\"n\">operator</span><span class=\"p\">.</span><span class=\"n\">getitem</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"s\">'tsqr_2_QR_st1'</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"mi\">1</span><span class=\"p\">),</span>\n <span class=\"p\">(</span><span class=\"s\">'tsqr_2_R_st1'</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">):</span> <span class=\"p\">(</span><span class=\"n\">operator</span><span class=\"p\">.</span><span class=\"n\">getitem</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"s\">'tsqr_2_QR_st1'</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"mi\">1</span><span class=\"p\">),</span>\n <span class=\"p\">(</span><span class=\"s\">'tsqr_2_R_st1'</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">):</span> <span class=\"p\">(</span><span class=\"n\">operator</span><span class=\"p\">.</span><span class=\"n\">getitem</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"s\">'tsqr_2_QR_st1'</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"mi\">1</span><span class=\"p\">),</span>\n <span class=\"p\">(</span><span class=\"s\">'tsqr_2_R_st1_stacked'</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">):</span> <span class=\"p\">(</span><span class=\"n\">np</span><span class=\"p\">.</span><span class=\"n\">vstack</span><span class=\"p\">,</span>\n                                   <span class=\"p\">[(</span><span class=\"s\">'tsqr_2_R_st1'</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span>\n                                    <span class=\"p\">(</span><span class=\"s\">'tsqr_2_R_st1'</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span>\n                                    <span class=\"p\">(</span><span class=\"s\">'tsqr_2_R_st1'</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span>\n                                    <span class=\"p\">(</span><span class=\"s\">'tsqr_2_R_st1'</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span>\n                                    <span class=\"p\">(</span><span class=\"s\">'tsqr_2_R_st1'</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)])),</span>\n <span class=\"p\">(</span><span class=\"s\">'tsqr_2_QR_st2'</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">):</span> <span class=\"p\">(</span><span class=\"n\">np</span><span class=\"p\">.</span><span class=\"n\">linalg</span><span class=\"p\">.</span><span class=\"n\">qr</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"s\">'tsqr_2_R_st1_stacked'</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)),</span>\n <span class=\"p\">(</span><span class=\"s\">'tsqr_2_SVD_st2'</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">):</span> <span class=\"p\">(</span><span class=\"n\">np</span><span class=\"p\">.</span><span class=\"n\">linalg</span><span class=\"p\">.</span><span class=\"n\">svd</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"s\">'tsqr_2_R'</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)),</span>\n <span class=\"p\">(</span><span class=\"s\">'tsqr_2_S'</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">):</span> <span class=\"p\">(</span><span class=\"n\">operator</span><span class=\"p\">.</span><span class=\"n\">getitem</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"s\">'tsqr_2_SVD_st2'</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"mi\">1</span><span class=\"p\">)}</span></code></pre>\n</figure>\n\n<p>So to write complex parallel algorithms we write down dictionaries of tuples of\nfunctions.</p>\n\n<p>The dask schedulers take care of executing this graph in parallel using\nmultiple threads.  Here is a profile result of a larger computation on a\n30000x1000 array:</p>\n\n<iframe src=\"https://mrocklin.github.io/blog/images/svd.profile.html\" marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\" width=\"800\" height=\"300\"></iframe>\n\n<h2 id=\"low-barrier-to-entry\">Low Barrier to Entry</h2>\n\n<p>Looking at this graph you may think “Wow, Mariano is awesome” and indeed he is.\nHowever, he is more an expert at linear algebra than at Python programming.\nDask graphs (just dictionaries) are simple enough that a domain expert was able\nto look at them say “Yeah, I can do that” and write down the very complex\nalgorithms associated to his domain, leaving the execution of those algorithms\nup to the dask schedulers.</p>\n\n<p>You can see the source code that generates the above graphs\n<a href=\"https://github.com/ContinuumIO/dask/blob/master/dask/array/linalg.py\">on GitHub</a>.</p>\n\n<p><a href=\"https://mrocklin.github.io/blog/images/dask-svd-random.png\">\n<img src=\"https://mrocklin.github.io/blog/images/dask-svd-random.png\" align=\"right\" alt=\"Approximate SVD dask graph\" width=\"40%\" /></a></p>\n\n<h2 id=\"randomized-parallel-out-of-core-svd\">Randomized Parallel Out-of-Core SVD</h2>\n\n<p>A few weeks ago\n<a href=\"https://github.com/ContinuumIO/dask/issues/265\">a genomics researcher asked</a>\nfor an approximate/randomized variant to SVD.\nMariano had <a href=\"https://github.com/ContinuumIO/dask/pull/280\">a solution</a>\nup in a few days.</p>\n\n<figure class=\"highlight\">\n  <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">dask.array</span> <span class=\"k\">as</span> <span class=\"n\">da</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">da</span><span class=\"p\">.</span><span class=\"n\">ones</span><span class=\"p\">((</span><span class=\"mi\">5000</span><span class=\"p\">,</span> <span class=\"mi\">1000</span><span class=\"p\">),</span> <span class=\"n\">chunks</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1000</span><span class=\"p\">,</span> <span class=\"mi\">1000</span><span class=\"p\">))</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">u</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"n\">da</span><span class=\"p\">.</span><span class=\"n\">linalg</span><span class=\"p\">.</span><span class=\"n\">svd_compressed</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"n\">n_power_iter</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span></code></pre>\n</figure>\n\n<p>I’ll omit the full dict for obvious space reasons.</p>\n\n<h2 id=\"final-thoughts\">Final Thoughts</h2>\n\n<p>Dask graphs let us express parallel algorithms with very little extra\ncomplexity.  There are no special objects or frameworks to learn, just\n<a href=\"http://dask.pydata.org/en/latest/spec.html\">dictionaries of tuples of functions</a>.\nThis allows domain experts to write sophisticated algorithms without fancy code\ngetting in their way.</p>"
}