{
  "title": "Managing managed libraries with Scala and Eclipse",
  "link": "",
  "id": "http://brooksandrew.github.io/simpleblog/articles/managing-managed-dependencies-with-scala-and-eclipse",
  "published": "2015-12-29T00:00:00+00:00",
  "updated": "2015-12-29T00:00:00+00:00",
  "author": {
    "name": "andrew brooks",
    "uri": "http://brooksandrew.github.io/simpleblog",
    "email": "andrewbrooksct@gmail.com"
  },
  "content": "<h3 id=\"my-story-skip-for-the-real-answer\">My story [skip for the real answer]</h3>\n\n<p>I have become increasingly intrigued with the functional programming paradigm and its implementation in Scala.  I’m thoroughly enjoying working my way through Scala creator <a href=\"https://www.coursera.org/course/progfun\">Martin Odersky’s coursera course</a> which I highly recommend to anyone from “timid and interested” to “hardcore.”  As a data scientist with a statistics and economics background, I code every day in languages like R and Python wrangling data, implementing machine learning algorithms, tapping APIs and building data tools for data scientists.  However, I don’t build [professional-grade] software.  Ive never taken a formal computer science course in college/grad school or learned Java.  Admittedly, I’ve felt overwhelmed at times by so many new concepts and tools with the course.  I’m simultaneously figuring out Scala, Java, sbt, eclipse, functional and object oriented paradigms.</p>\n\n<p>As a learner poking my head in the field, I find it refreshing reading stories from fellow newcomers battling similar problems, even if they appear trivial in hindsight.  I also find it most effective teaching material when you still remember how you learned it.  Thus, this post and [likely, yet currently unwritten] subsequent Scala posts will be experimental learning notes rather than wisdom and tested best practices.</p>\n\n<h3 id=\"managed-vs-unmanaged-dependencies\">Managed vs Unmanaged dependencies</h3>\n\n<p>One of the stumbling blocks I encountered on my first Scala project was a simple one: working with external libraries with sbt and Eclipse.  I started using unmanaged dependencies (downloading some jar files and pointing Eclipse to them) which worked well, until I encountered a library which had further dependencies – I was working with <a href=\"https://github.com/json4s/json4s\">json4s</a>.  More on <a href=\"http://www.scala-sbt.org/0.13/tutorial/Library-Dependencies.html\">unmanaged vs managed dependencies here</a>.  Managed dependencies have the advantage of being, well, managed.  You simply specify a library with a version and <a href=\"https://ant.apache.org/ivy/\">Ivy</a> (a tool similar to Maven) will go out on the web and download it along with any dependencies.</p>\n\n<p>My issue was I initially couldn’t get Eclipse to actually go out and download my dependencies.  As evidenced by <a href=\"http://stackoverflow.com/questions/9070336/how-to-have-eclipse-recognize-dependencies-from-sbt\">this StackOverflow post</a>, there are probably many ways to achieve this.  The piece I was missing was using sbt in the Terminal while Eclipse was running to actually download the libraries.</p>\n\n<h3 id=\"make-eclipse-recognize-managed-dependencies\">Make Eclipse recognize managed dependencies</h3>\n\n<p>Here’s a step-by-step process</p>\n\n<h5 id=\"step-1-create-a-buildsbt-file\">Step 1: Create a build.sbt file</h5>\n\n<p>Create <strong>build.sbt</strong> in the root project directory.  For example, my <strong>build.sbt</strong> looks like this:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-scala\" data-lang=\"scala\"><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"s\">\"billscraper\"</span>\n\n<span class=\"n\">scalaVersion</span> <span class=\"o\">:=</span> <span class=\"s\">\"2.11.5\"</span>\n\n<span class=\"n\">libraryDependencies</span> <span class=\"o\">++=</span> <span class=\"nc\">Seq</span><span class=\"o\">(</span> \n  <span class=\"s\">\"org.json4s\"</span> <span class=\"o\">%%</span> <span class=\"s\">\"json4s-native\"</span> <span class=\"o\">%</span> <span class=\"s\">\"3.2.11\"</span><span class=\"o\">,</span>\n  <span class=\"s\">\"org.json4s\"</span> <span class=\"o\">%%</span> <span class=\"s\">\"json4s\"</span> <span class=\"o\">%</span> <span class=\"s\">\"3.2.11\"</span><span class=\"o\">,</span>\n  <span class=\"s\">\"io.spray\"</span> <span class=\"o\">%%</span> <span class=\"s\">\"spray-json\"</span> <span class=\"o\">%</span> <span class=\"s\">\"1.3.2\"</span><span class=\"o\">,</span>\n  <span class=\"s\">\"org.scalanlp\"</span> <span class=\"o\">%%</span> <span class=\"s\">\"breeze\"</span> <span class=\"o\">%</span> <span class=\"s\">\"0.11.2\"</span>\n<span class=\"o\">)</span></code></pre></figure>\n\n<h5 id=\"step-2-open-the-terminal\">Step 2: Open the Terminal</h5>\n\n<p>Assuming you’re on mac, type the following in the Terminal:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-bash\" data-lang=\"bash\"><span class=\"o\">&gt;</span> sbt\n<span class=\"o\">&gt;</span> eclipse</code></pre></figure>\n\n<p>You should see a bunch of jar files downloading… something like this:</p>\n\n<p><a data-flickr-embed=\"true\" href=\"https://farm2.staticflickr.com/1535/24025973066_8bcbcbdda5.jpg\" title=\"downloading dependencies in sbt\"><img src=\"https://farm2.staticflickr.com/1535/24025973066_8bcbcbdda5.jpg\" width=\"467\" height=\"318\" alt=\"Screen Shot 2015-12-29 at 4.31.14 PM\" /></a></p>\n\n<h5 id=\"step-3-refresh-project-in-eclipse\">Step 3: Refresh project in Eclipse</h5>\n\n<p>Now in Eclipse refresh your project by clicking F5, or right click on the project in the Package Explorer tab and click “Refresh”</p>\n\n<h5 id=\"step-4-check-that-it-worked\">Step 4: Check that it worked</h5>\n\n<p>Now to check that libraries have downloaded and Eclipse has recognized them.</p>\n\n<p>In Eclipse, right click on the project in the Package Explorer tab<br />\n    =&gt; click “Build Path”<br />\n    =&gt; click “Configure Build Path”<br />\n    =&gt; click “Libraries” (icon with a stack of books)</p>\n\n<p>Here you should see the libraries from build.sbt and all their dependencies.  Now you should be good to go – import what you need from these libraries in your Scala code.</p>\n\n<p><a data-flickr-embed=\"true\" href=\"https://farm2.staticflickr.com/1689/23944025972_bcf7686627_b.jpg\" title=\"downloading libraries with sbt\"><img src=\"https://farm2.staticflickr.com/1689/23944025972_bcf7686627_b.jpg\" width=\"1024\" height=\"498\" alt=\"Screen Shot 2015-12-29 at 4.38.29 PM\" /></a></p>\n\n<h3 id=\"my-environment\">My environment</h3>\n\n<p>I configured my environment as recommended by the <a href=\"https://www.coursera.org/course/progfun\">Functional Programming Principles in Scala course</a>:</p>\n\n<ul>\n  <li>Mac - OSX Yosemite 10.10</li>\n  <li>Scala IDE build of Eclipse SDK 4.2.0</li>\n  <li>sbt 0.13.9</li>\n</ul>\n\n<!-- Links -->\n\n\n  <p><a href=\"http://brooksandrew.github.io/simpleblog/articles/managing-managed-dependencies-with-scala-and-eclipse/\">Managing managed libraries with Scala and Eclipse</a> was originally published by andrew brooks at <a href=\"http://brooksandrew.github.io/simpleblog\">andrew brooks</a> on December 29, 2015.</p>"
}