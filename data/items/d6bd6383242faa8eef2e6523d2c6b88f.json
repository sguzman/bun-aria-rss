{
  "id": "tag:blogger.com,1999:blog-8474926331452026626.post-2508264082683271000",
  "published": "2022-09-13T14:18:00.001-07:00",
  "updated": "2022-10-21T06:31:22.191-07:00",
  "category": [
    "",
    "",
    "",
    ""
  ],
  "title": "LOLNeRF: Learn from One Look",
  "content": "<span class=\"byline-author\">Posted by Daniel Rebain, Student Researcher, and Mark Matthews, Senior Software Engineer, Google Research, Perception Team</span> <p>An important aspect of human vision is our ability to comprehend 3D shape from the 2D images we observe. Achieving this kind of understanding with computer vision systems has been a fundamental challenge in the field. Many successful approaches rely on <em>multi-view</em> data, where two or more images of the same scene are available from different perspectives, which makes it much easier to infer the 3D shape of objects in the images. </p><a name='more'></a><p>There are, however, many situations where it would be useful to know 3D structure from a single image, but this problem is generally difficult or impossible to solve. For example, it isn’t necessarily possible to tell the difference between an image of an <em>actual</em> beach and an image of a flat poster of the same beach. However it is possible to estimate 3D structure based on what kind of 3D objects occur commonly and what similar structures look like from different perspectives. </p><p>In <a href=\"https://ubc-vision.github.io/lolnerf/\">“LOLNeRF: Learn from One Look”</a>, presented at <a href=\"https://cvpr2022.thecvf.com/\">CVPR 2022</a>, we propose a framework that learns to model 3D structure and appearance from collections of <em>single-view</em> images. LOLNeRF learns the typical 3D structure of a class of objects, such as cars, human faces or cats, but only from <em>single views</em> of any one object, never the same object twice. We build our approach by combining <em><a href=\"https://arxiv.org/abs/1707.05776\">Generative Latent Optimization</a></em> (GLO) and <em><a href=\"https://arxiv.org/abs/2003.08934\">neural radiance fields</a></em> (NeRF) to achieve state-of-the-art results for novel view synthesis and competitive results for depth estimation. </p>     <table align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto;\"><tbody><tr><td style=\"text-align: center;\"><a href=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEi_SG6q9CCEhSwhjXb7eBXXBiBBZNs6o2nE7paWjh5ThWpwSkhbANHxYfgx2w6c1C93C_p_GerQNgQXvbfTo9f6-vu0wcdyy0-EL2vdntANkpLQIKAw2A0Yw6ZLCoGHk36AXT1Oy9XliJG-Y8g0DFswTzy-90GtuI7r2G9aKe-9FVvXJKzhhMwBlI2OTA/s1280/image3.png\" imageanchor=\"1\" style=\"margin-left: auto; margin-right: auto;\"><img border=\"0\" data-original-height=\"422\" data-original-width=\"1280\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEi_SG6q9CCEhSwhjXb7eBXXBiBBZNs6o2nE7paWjh5ThWpwSkhbANHxYfgx2w6c1C93C_p_GerQNgQXvbfTo9f6-vu0wcdyy0-EL2vdntANkpLQIKAw2A0Yw6ZLCoGHk36AXT1Oy9XliJG-Y8g0DFswTzy-90GtuI7r2G9aKe-9FVvXJKzhhMwBlI2OTA/s16000/image3.png\" /></a></td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\">We learn a 3D object model by reconstructing a large collection of single-view images using a neural network conditioned on latent vectors, <em>z</em> (<b>left</b>). This allows for a 3D model to be lifted from the image, and rendered from novel viewpoints. Holding the camera fixed, we can interpolate or sample novel identities (<b>right</b>).</td></tr></tbody></table>  <p><b>Combining GLO and NeRF</b><br/>GLO is a general method that learns to reconstruct a dataset (such as a set of 2D images) by co-learning a neural network (decoder) and table of codes (latents) that is also an input to the decoder. Each of these latent codes re-creates a single element (such as an image) from the dataset. Because the latent codes have fewer dimensions than the data elements themselves, the network is forced to <em>generalize</em>, learning common structure in the data (such as the general shape of dog snouts). </p><p>NeRF is a technique that is very good at reconstructing a static 3D object from 2D images. It represents an object with a neural network that outputs color and density for each point in 3D space. Color and density values are accumulated along <a href=\"https://en.wikipedia.org/wiki/Line_(geometry)#Ray\">rays</a>, one ray for each pixel in a 2D image. <a href=\"https://www.youtube.com/watch?v=JuH79E8rdKc&amp;t=8s\">These are then combined</a> using standard computer graphics volume rendering to compute a final pixel color. Importantly, all these operations are <a href=\"https://en.wikipedia.org/wiki/Differentiable_function\">differentiable</a>, allowing for end-to-end supervision. By enforcing that each rendered pixel (of the 3D representation) matches the color of ground truth (2D) pixels, the neural network creates a 3D representation that can be rendered from any viewpoint.  </p><p>We combine NeRF with GLO by assigning each object a latent code and concatenating it with standard NeRF inputs, giving it the ability to reconstruct <em>multiple</em> objects. Following GLO, we co-optimize these latent codes along with network weights during training to reconstruct the input images. Unlike standard NeRF, which requires multiple views of the same object, we supervise our method with only <em>single views</em> of any one object (but multiple examples of that type of object). Because NeRF is inherently 3D, we can then render the object from arbitrary viewpoints. Combining NeRF with GLO gives it the ability to learn common 3D structure <em>across instances</em> from only single views while still retaining the ability to recreate specific instances of the dataset. </p><p><b>Camera Estimation</b><br/>In order for NeRF to work, it needs to know the exact camera location, relative to the object, for each image. Unless this was measured when the image was taken, it is generally unknown. Instead, we use the <a href=\"https://google.github.io/mediapipe/solutions/face_mesh.html\">MediaPipe Face Mesh</a> to extract five landmark locations from the images. Each of these 2D predictions correspond to a semantically consistent point on the object (e.g., the tip of the nose or corners of the eyes). We can then derive a set of canonical 3D locations for the semantic points, along with estimates of the camera poses for each image, such that the projection of the canonical points into the images is as consistent as possible with the 2D landmarks. </p>    <table align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto;\"><tbody><tr><td style=\"text-align: center;\"><a href=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjLCIFNh7CJaU9hs0zwHA74_TVh7V8p-8XqA_3GLFtsc0aoCuCpwJuXLQNGmMwNQJJJ3LzjA9xwjEOtTsLRfePql74lcRruDbNA9_ZZ_c7oUbhir5BPcsooSootQWZSwFRjU-JT7sT88o0he59oQVQE7PWhR8phi7b3Ue6bwOFWjSEUFH9FM2Q61M2WBQ/s1280/image1.png\" imageanchor=\"1\" style=\"margin-left: auto; margin-right: auto;\"><img border=\"0\" data-original-height=\"488\" data-original-width=\"1280\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjLCIFNh7CJaU9hs0zwHA74_TVh7V8p-8XqA_3GLFtsc0aoCuCpwJuXLQNGmMwNQJJJ3LzjA9xwjEOtTsLRfePql74lcRruDbNA9_ZZ_c7oUbhir5BPcsooSootQWZSwFRjU-JT7sT88o0he59oQVQE7PWhR8phi7b3Ue6bwOFWjSEUFH9FM2Q61M2WBQ/s16000/image1.png\" /></a></td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\">We train a per-image table of latent codes alongside a NeRF model. Output is subject to per-ray RGB, mask and hardness losses. Cameras are derived from a fit of predicted landmarks to canonical 3D keypoints.</td></tr></tbody></table>     <table align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto;\"><tbody><tr><td style=\"text-align: center;\"><a href=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhLec8X8kyx4B9n4jxlKctxlFRTfIARw4RBLAEb2pPQFiAINSppY_iv8mHtQTpBJPxS-cbgOvGF0RelF_8UTnHkW8MGv5PDRG6tjVl3aWFQQEXxpN4TcbqKo1g_VXeZt9NXC9NoR9otrlbPySVxmKqK6tg7w8uNWuQN53mhhc2F0OXsCRFCoEeCAuIxhg/s1999/image4.png\" imageanchor=\"1\" style=\"margin-left: auto; margin-right: auto;\"><img border=\"0\" data-original-height=\"500\" data-original-width=\"1999\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhLec8X8kyx4B9n4jxlKctxlFRTfIARw4RBLAEb2pPQFiAINSppY_iv8mHtQTpBJPxS-cbgOvGF0RelF_8UTnHkW8MGv5PDRG6tjVl3aWFQQEXxpN4TcbqKo1g_VXeZt9NXC9NoR9otrlbPySVxmKqK6tg7w8uNWuQN53mhhc2F0OXsCRFCoEeCAuIxhg/s16000/image4.png\" /></a></td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\">Example MediaPipe landmarks and <a href=\"https://ai.googleblog.com/2019/05/announcing-open-images-v5-and-iccv-2019.html\">segmentation masks</a> (images from <a href=\"https://mmlab.ie.cuhk.edu.hk/projects/CelebA.html\">CelebA</a>).</td></tr></tbody></table>        <p><b>Hard Surface and Mask Losses</b><br/>Standard NeRF is effective for accurately reproducing the images, but in our single-view case, it tends to produce images that look blurry when viewed off-axis. To address this, we introduce a novel <em>hard surface</em> loss, which encourages the density to adopt sharp transitions from exterior to interior regions, reducing blurring. This essentially tells the network to create “solid” surfaces, and not semi-transparent ones like clouds.  </p><p>We also obtained better results by splitting the network into separate foreground and background networks. We supervised this separation with a mask from the <a href=\"https://google.github.io/mediapipe/solutions/selfie_segmentation.html\">MediaPipe Selfie Segmenter</a> and a loss to encourage network specialization. This allows the foreground network to specialize only on the object of interest, and not get “distracted” by the background, increasing its quality. </p><p><b>Results</b><br/>We surprisingly found that fitting only five key points gave accurate enough camera estimates to train a model for cats, dogs, or human faces. This means that given only a single view of your beloved cats Schnitzel, Widget and friends, you can create a new image from any other angle. </p>   <table align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto;\"><tbody><tr><td style=\"text-align: center;\"><a href=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjby12a56iNW74Rhgi3Ezl3d4XS5IzkTWqwb2ChbW6dKjrmPHue9pt6Cfv6FfydeAHGz4MqpSSe5zU4kitKtg6Tcz3WM_StsPqnHhCmgrxWC6wzO72W8yWSq3h9w_6AXw33qJbrXB8DtDBjBB4dcNAVWWHzw1EyvvPoX1Lk9ghScesusOrQrFhQ0NTGng/s1024/image2.gif\" imageanchor=\"1\" style=\"margin-left: auto; margin-right: auto;\"><img border=\"0\" data-original-height=\"512\" data-original-width=\"1024\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjby12a56iNW74Rhgi3Ezl3d4XS5IzkTWqwb2ChbW6dKjrmPHue9pt6Cfv6FfydeAHGz4MqpSSe5zU4kitKtg6Tcz3WM_StsPqnHhCmgrxWC6wzO72W8yWSq3h9w_6AXw33qJbrXB8DtDBjBB4dcNAVWWHzw1EyvvPoX1Lk9ghScesusOrQrFhQ0NTGng/s16000/image2.gif\" /></a></td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\"><b>Top</b>: example cat images from <a href=\"https://github.com/clovaai/stargan-v2\">AFHQ</a>. <b>Bottom</b>: A synthesis of novel 3D views created by LOLNeRF.</td></tr></tbody></table><p><b>Conclusion</b><br/>We’ve developed a technique that is effective at discovering 3D structure from single 2D images. We see great potential in LOLNeRF for a variety of applications and are currently investigating potential use-cases.  </p>    <table align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto;\"><tbody><tr><td style=\"text-align: center;\"><a href=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjQaRH3ZtCh7_1YSriewIh5xGGz4ZjXqxoI4S77F5zkJ_Fy4vlREUOt88l3Bug9JvagFO1OjpoB3mf2sFhc5wMmzDSrj4-0_v5SUUnUJuBmYNBeG-dYRhC3m1qTe0AVtDHRQw0uEiSqVtmYkoeTbyJ8wWTHcOrw41hs7jveVnFZu8SVQ4eKu8GTMUCShw/s1024/image5.gif\" imageanchor=\"1\" style=\"margin-left: auto; margin-right: auto;\"><img border=\"0\" data-original-height=\"256\" data-original-width=\"1024\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjQaRH3ZtCh7_1YSriewIh5xGGz4ZjXqxoI4S77F5zkJ_Fy4vlREUOt88l3Bug9JvagFO1OjpoB3mf2sFhc5wMmzDSrj4-0_v5SUUnUJuBmYNBeG-dYRhC3m1qTe0AVtDHRQw0uEiSqVtmYkoeTbyJ8wWTHcOrw41hs7jveVnFZu8SVQ4eKu8GTMUCShw/s16000/image5.gif\" /></a></td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\">Interpolation of feline identities from linear interpolation of learned latent codes for different examples in <a href=\"https://github.com/clovaai/stargan-v2\">AFHQ</a>.</td></tr></tbody></table>   <p><b>Code Release</b><br/>We acknowledge the potential for misuse and importance of acting responsibly. To that end, we will only release the code for reproducibility purposes, but will not release any trained generative models. </p><p><b>Acknowledgements</b><br/><em>We would like to thank Andrea Tagliasacchi, Kwang Moo Yi, Viral Carpenter, David Fleet, Danica Matthews, Florian Schroff, Hartwig Adam and Dmitry Lagun for continuous help in building this technology.</em></p>",
  "link": [
    "",
    "",
    "",
    "",
    ""
  ],
  "author": {
    "name": "Google AI",
    "uri": "http://www.blogger.com/profile/12098626514775266161",
    "email": "noreply@blogger.com",
    "gd:image": ""
  },
  "media:thumbnail": "",
  "thr:total": 0
}