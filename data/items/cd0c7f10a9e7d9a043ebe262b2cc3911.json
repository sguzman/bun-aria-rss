{
  "title": "Dask Release 0.19.0",
  "link": "",
  "updated": "2018-09-05T00:00:00+00:00",
  "id": "https://mrocklin.github.io/blog/work/2018/09/05/dask-0.19.0",
  "content": "<p><em>This work is supported by <a href=\"http://anaconda.com\">Anaconda Inc.</a></em></p>\n\n<p>I’m pleased to announce the release of Dask version 0.19.0.  This is a major\nrelease with bug fixes and new features.  The last release was 0.18.2 on July\n23rd.  This blogpost outlines notable changes since the last release blogpost\nfor 0.18.0 on June 14th.</p>\n\n<p>You can conda install Dask:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>conda install dask\n</code></pre></div></div>\n\n<p>or pip install from PyPI:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>pip install dask[complete] --upgrade\n</code></pre></div></div>\n\n<p>Full changelogs are available here:</p>\n\n<ul>\n  <li><a href=\"https://github.com/dask/dask/blob/master/docs/source/changelog.rst\">dask/dask</a></li>\n  <li><a href=\"https://github.com/dask/distributed/blob/master/docs/source/changelog.rst\">dask/distributed</a></li>\n</ul>\n\n<h2 id=\"notable-changes\">Notable Changes</h2>\n\n<p>A ton of work has happened over the past two months, but most of the changes\nare small and diffuse.  Stability, feature parity with upstream libraries (like\nNumpy and Pandas), and performance have all significantly improved, but in ways\nthat are difficult to condense into blogpost form.</p>\n\n<p>That being said, here are a few of the more exciting changes in the new\nrelease.</p>\n\n<h3 id=\"python-versions\">Python Versions</h3>\n\n<p>We’ve dropped official support for Python 3.4 and added official support for\nPython 3.7.</p>\n\n<h3 id=\"deploy-on-hadoop-clusters\">Deploy on Hadoop Clusters</h3>\n\n<p>Over the past few months <a href=\"https://jcrist.github.io/\">Jim Crist</a> has bulit a\nsuite of tools to deploy applications on YARN, the primary cluster manager used\nin Hadoop clusters.</p>\n\n<ul>\n  <li><a href=\"https://conda.github.io/conda-pack/\">Conda-pack</a>: packs up Conda\nenvironments for redistribution to distributed clusters, especially when\nPython or Conda may not be present.</li>\n  <li><a href=\"https://jcrist.github.io/skein/\">Skein</a>: easily launches and manages YARN\napplications from non-JVM systems</li>\n  <li><a href=\"https://dask-yarn.readthedocs.io/en/latest/\">Dask-Yarn</a>: a thin library\naround Skein to launch and manage Dask clusters</li>\n</ul>\n\n<p>Jim has written about Skein and Dask-Yarn in two recent blogposts:</p>\n\n<ul>\n  <li><a href=\"https://jcrist.github.io/dask-on-yarn\">jcrist.github.io/dask-on-yarn</a></li>\n  <li><a href=\"https://jcrist.github.io/introducing-skein.html\">jcrist.github.io/introducing-skein.html</a></li>\n</ul>\n\n<h3 id=\"implement-actors\">Implement Actors</h3>\n\n<p>Some advanced workloads want to directly manage and mutate state on workers.  A\ntask-based framework like Dask can be forced into this kind of workload using\nlong-running-tasks, but it’s an uncomfortable experience.</p>\n\n<p>To address this we’ve added an experimental Actors framework to Dask alongside\nthe standard task-scheduling system.  This provides reduced latencies, removes\nscheduling overhead, and provides the ability to directly mutate state on a\nworker, but loses niceties like resilience and diagnostics.\nThe idea to adopt Actors was shamelessly stolen from the <a href=\"http://ray.readthedocs.io/en/latest/\">Ray Project</a> :)</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">Counter</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">increment</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">n</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">n</span>\n\n<span class=\"n\">counter</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"p\">.</span><span class=\"n\">submit</span><span class=\"p\">(</span><span class=\"n\">Counter</span><span class=\"p\">,</span> <span class=\"n\">actor</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">).</span><span class=\"n\">result</span><span class=\"p\">()</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">future</span> <span class=\"o\">=</span> <span class=\"n\">counter</span><span class=\"p\">.</span><span class=\"n\">increment</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">future</span><span class=\"p\">.</span><span class=\"n\">result</span><span class=\"p\">()</span>\n<span class=\"mi\">1</span>\n</code></pre></div></div>\n\n<p>You can read more about actors in the <a href=\"https://distributed.readthedocs.io/en/latest/actors.html\">Actors documentation</a>.</p>\n\n<h3 id=\"dashboard-improvements\">Dashboard improvements</h3>\n\n<p>The Dask dashboard is a critical tool to understand distributed performance.\nThere are a few accessibility issues that trip up beginning users that we’ve\naddressed in this release.</p>\n\n<h4 id=\"save-task-stream-plots\">Save task stream plots</h4>\n\n<p>You can now save a task stream record by wrapping a computation in the\n<code class=\"language-plaintext highlighter-rouge\">get_task_stream</code> context manager.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">dask.distributed</span> <span class=\"kn\">import</span> <span class=\"n\">Client</span><span class=\"p\">,</span> <span class=\"n\">get_task_stream</span>\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">Client</span><span class=\"p\">(</span><span class=\"n\">processes</span><span class=\"o\">=</span><span class=\"bp\">False</span><span class=\"p\">)</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">dask</span>\n<span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">dask</span><span class=\"p\">.</span><span class=\"n\">datasets</span><span class=\"p\">.</span><span class=\"n\">timeseries</span><span class=\"p\">()</span>\n\n<span class=\"k\">with</span> <span class=\"n\">get_task_stream</span><span class=\"p\">(</span><span class=\"n\">plot</span><span class=\"o\">=</span><span class=\"s\">'save'</span><span class=\"p\">,</span> <span class=\"n\">filename</span><span class=\"o\">=</span><span class=\"s\">'my-task-stream.html'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">ts</span><span class=\"p\">:</span>\n    <span class=\"n\">df</span><span class=\"p\">.</span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">std</span><span class=\"p\">().</span><span class=\"n\">compute</span><span class=\"p\">()</span>\n</code></pre></div></div>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">ts</span><span class=\"p\">.</span><span class=\"n\">data</span>\n<span class=\"p\">[{</span><span class=\"s\">'key'</span><span class=\"p\">:</span> <span class=\"s\">\"('make-timeseries-edc372a35b317f328bf2bb5e636ae038', 0)\"</span><span class=\"p\">,</span>\n  <span class=\"s\">'nbytes'</span><span class=\"p\">:</span> <span class=\"mi\">8175440</span><span class=\"p\">,</span>\n  <span class=\"s\">'startstops'</span><span class=\"p\">:</span> <span class=\"p\">[(</span><span class=\"s\">'compute'</span><span class=\"p\">,</span> <span class=\"mf\">1535661384.2876947</span><span class=\"p\">,</span> <span class=\"mf\">1535661384.3366017</span><span class=\"p\">)],</span>\n  <span class=\"s\">'status'</span><span class=\"p\">:</span> <span class=\"s\">'OK'</span><span class=\"p\">,</span>\n  <span class=\"s\">'thread'</span><span class=\"p\">:</span> <span class=\"mi\">139754603898624</span><span class=\"p\">,</span>\n  <span class=\"s\">'worker'</span><span class=\"p\">:</span> <span class=\"s\">'inproc://192.168.50.100/15417/2'</span><span class=\"p\">},</span>\n\n  <span class=\"p\">...</span>\n</code></pre></div></div>\n\n<p>This gives you the start and stop time of every task on every worker done\nduring that time.  It also saves that data as an HTML file that you can share\nwith others.  This is very valuable for communicating performance issues within\na team.  I typically upload the HTML file as a gist and then share it with\nrawgit.com</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>$ gist my-task-stream.html\nhttps://gist.github.com/f48a121bf03c869ec586a036296ece1a\n</code></pre></div></div>\n\n<iframe src=\"https://rawgit.com/mrocklin/f48a121bf03c869ec586a036296ece1a/raw/d2c1a83d5dc62996eeabca495d5284e324d71d0c/my-task-stream.html\" width=\"800\" height=\"400\"></iframe>\n\n<h4 id=\"robust-to-different-screen-sizes\">Robust to different screen sizes</h4>\n\n<p>The Dashboard’s layout was designed to be used on a single screen, side-by-side\nwith a Jupyter notebook.  This is how many Dask developers operate when working\non a laptop, however it is not how many users operate for one of two reasons:</p>\n\n<ol>\n  <li>They are working in an office setting where they have several screens</li>\n  <li>They are new to Dask and uncomfortable splitting their screen into two\nhalves</li>\n</ol>\n\n<p>In these cases the styling of the dashboard becomes odd.  Fortunately, <a href=\"https://github.com/canavandl\">Luke\nCanavan</a> and <a href=\"https://github.com/dsludwig\">Derek\nLudwig</a> recently improved the CSS for the\ndashboard considerably, allowing it to switch between narrow and wide screens.\nHere is a snapshot.</p>\n\n<p><a href=\"https://mrocklin.github.io/blog/images/dashboard-widescreen.png\"><img src=\"https://mrocklin.github.io/blog/images/dashboard-widescreen.png\" width=\"70%\" /></a></p>\n\n<h4 id=\"jupyter-lab-extension\">Jupyter Lab Extension</h4>\n\n<p>You can now embed Dashboard panes directly within Jupyter Lab using the newly\nupdated <a href=\"https://github.com/dask/dask-labextension/\">dask-labextension</a>.</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>jupyter labextension install dask-labextension\n</code></pre></div></div>\n\n<p>This allows you to layout your own dashboard directly within JupyterLab.  You\ncan combine plots from different pages, control their sizing, and so on.  You\nwill need to provide the address of the dashboard server\n(<code class=\"language-plaintext highlighter-rouge\">http://localhost:8787</code> by default on local machines) but after that\neverything should persist between sessions.  Now when I open up JupyterLab and\nstart up a Dask Client, I get this:</p>\n\n<p><a href=\"https://mrocklin.github.io/blog/images/dashboard-jupyterlab.png\"><img src=\"https://mrocklin.github.io/blog/images/dashboard-jupyterlab.png\" width=\"70%\" /></a></p>\n\n<p>Thanks to <a href=\"https://github.com/ian-r-rose\">Ian Rose</a> for doing most of the work\nhere.</p>\n\n<h2 id=\"outreach\">Outreach</h2>\n\n<h3 id=\"dask-stories\">Dask Stories</h3>\n\n<p>People who use Dask have been writing about their experiences at <a href=\"https://dask-stories.readthedocs.io/en/latest/\">Dask\nStories</a>.  In the last couple\nmonths the following people have written about and contributed their experience:</p>\n\n<ol>\n  <li><a href=\"https://dask-stories.readthedocs.io/en/latest/sidewalk-labs.html\">Civic Modelling at Sidewalk Labs</a> by <a href=\"https://github.com/bnaul\">Brett Naul</a></li>\n  <li><a href=\"https://dask-stories.readthedocs.io/en/latest/mosquito-sequencing.html\">Genome Sequencing for Mosquitoes</a> by <a href=\"http://alimanfoo.github.io/about/\">Alistair Miles</a></li>\n  <li><a href=\"https://dask-stories.readthedocs.io/en/latest/fullspectrum.html\">Lending and Banking at Full Spectrum</a> by <a href=\"https://www.linkedin.com/in/hussainsultan/\">Hussain Sultan</a></li>\n  <li><a href=\"https://dask-stories.readthedocs.io/en/latest/icecube-cosmic-rays.html\">Detecting Cosmic Rays at IceCube</a> by <a href=\"https://github.com/jrbourbeau\">James Bourbeau</a></li>\n  <li><a href=\"https://dask-stories.readthedocs.io/en/latest/pangeo.html\">Large Data Earth Science at Pangeo</a> by <a href=\"http://rabernat.github.io/\">Ryan Abernathey</a></li>\n  <li><a href=\"https://dask-stories.readthedocs.io/en/latest/hydrologic-modeling.html\">Hydrological Modelling at the National Center for Atmospheric Research</a> by <a href=\"http://joehamman.com/about/\">Joe Hamman</a></li>\n  <li><a href=\"https://dask-stories.readthedocs.io/en/latest/network-modeling.html\">Mobile Networks Modeling</a> by <a href=\"https://www.linkedin.com/in/lalwanisameer/\">Sameer Lalwani</a></li>\n  <li><a href=\"https://dask-stories.readthedocs.io/en/latest/satellite-imagery.html\">Satellite Imagery Processing at the Space Science and Engineering Center</a> by <a href=\"http://github.com/djhoese\">David Hoese</a></li>\n</ol>\n\n<p>These stories help people understand where Dask is and is not applicable, and\nprovide useful context around how it gets used in practice.  We welcome further\ncontributions to this project.  It’s very valuable to the broader community.</p>\n\n<h3 id=\"dask-examples\">Dask Examples</h3>\n\n<p>The <a href=\"https://github.com/dask/dask-examples\">Dask-Examples repository</a> maintains\neasy-to-run examples using Dask on a small machine, suitable for an entry-level\nlaptop or for a small cloud instance.  These are hosted on\n<a href=\"https://mybinder.org\">mybinder.org</a> and are integrated into our documentation.\nA number of new examples have arisen recently, particularly in machine\nlearning.  We encourage people to try them out by clicking the link below.</p>\n\n<p><a href=\"https://mybinder.org/v2/gh/dask/dask-examples/master\"><img src=\"https://mybinder.org/badge.svg\" alt=\"Binder\" /></a></p>\n\n<h2 id=\"other-projects\">Other Projects</h2>\n\n<ul>\n  <li>\n    <p>The <a href=\"https://dask-image.readthedocs.io/en/latest/\">dask-image</a> project was\nrecently released.  It includes a number of image processing routines around\ndask arrays.</p>\n\n    <p>This project is mostly maintained by <a href=\"https://github.com/jakirkham\">John Kirkham</a>.</p>\n  </li>\n  <li>\n    <p><a href=\"https://dask-ml.readthedocs.io/en/latest/\">Dask-ML</a> saw a recent bugfix release</p>\n  </li>\n  <li>\n    <p>The <a href=\"http://epistasislab.github.io/tpot/\">TPOT</a> library for automated\nmachine learning recently published a new release that adds Dask support to\nparallelize their model training.  More information is available on the\n<a href=\"http://epistasislab.github.io/tpot/using/#parallel-training-with-dask\">TPOT documentation</a></p>\n  </li>\n</ul>\n\n<h2 id=\"acknowledgements\">Acknowledgements</h2>\n\n<p>Since June 14th, the following people have contributed to the following repositories:</p>\n\n<p>The core Dask repository for parallel algorithms:</p>\n\n<ul>\n  <li>Anderson Banihirwe</li>\n  <li>Andre Thrill</li>\n  <li>Aurélien Ponte</li>\n  <li>Christoph Moehl</li>\n  <li>Cloves Almeida</li>\n  <li>Daniel Rothenberg</li>\n  <li>Danilo Horta</li>\n  <li>Davis Bennett</li>\n  <li>Elliott Sales de Andrade</li>\n  <li>Eric Bonfadini</li>\n  <li>GPistre</li>\n  <li>George Sakkis</li>\n  <li>Guido Imperiale</li>\n  <li>Hans Moritz Günther</li>\n  <li>Henrique Ribeiro</li>\n  <li>Hugo</li>\n  <li>Irina Truong</li>\n  <li>Itamar Turner-Trauring</li>\n  <li>Jacob Tomlinson</li>\n  <li>James Bourbeau</li>\n  <li>Jan Margeta</li>\n  <li>Javad</li>\n  <li>Jeremy Chen</li>\n  <li>Jim Crist</li>\n  <li>Joe Hamman</li>\n  <li>John Kirkham</li>\n  <li>John Mrziglod</li>\n  <li>Julia Signell</li>\n  <li>Marco Rossi</li>\n  <li>Mark Harfouche</li>\n  <li>Martin Durant</li>\n  <li>Matt Lee</li>\n  <li>Matthew Rocklin</li>\n  <li>Mike Neish</li>\n  <li>Robert Sare</li>\n  <li>Scott Sievert</li>\n  <li>Stephan Hoyer</li>\n  <li>Tobias de Jong</li>\n  <li>Tom Augspurger</li>\n  <li>WZY</li>\n  <li>Yu Feng</li>\n  <li>Yuval Langer</li>\n  <li>minebogy</li>\n  <li>nmiles2718</li>\n  <li>rtobar</li>\n</ul>\n\n<p>The dask/distributed repository for distributed computing:</p>\n\n<ul>\n  <li>Anderson Banihirwe</li>\n  <li>Aurélien Ponte</li>\n  <li>Bartosz Marcinkowski</li>\n  <li>Dave Hirschfeld</li>\n  <li>Derek Ludwig</li>\n  <li>Dror Birkman</li>\n  <li>Guillaume EB</li>\n  <li>Jacob Tomlinson</li>\n  <li>Joe Hamman</li>\n  <li>John Kirkham</li>\n  <li>Loïc Estève</li>\n  <li>Luke Canavan</li>\n  <li>Marius van Niekerk</li>\n  <li>Martin Durant</li>\n  <li>Matt Nicolls</li>\n  <li>Matthew Rocklin</li>\n  <li>Mike DePalatis</li>\n  <li>Olivier Grisel</li>\n  <li>Phil Tooley</li>\n  <li>Ray Bell</li>\n  <li>Tom Augspurger</li>\n  <li>Yu Feng</li>\n</ul>\n\n<p>The dask/dask-examples repository for easy-to-run examples:</p>\n\n<ul>\n  <li>Albert DeFusco</li>\n  <li>Dan Vatterott</li>\n  <li>Guillaume EB</li>\n  <li>Matthew Rocklin</li>\n  <li>Scott Sievert</li>\n  <li>Tom Augspurger</li>\n  <li>mholtzscher</li>\n</ul>"
}