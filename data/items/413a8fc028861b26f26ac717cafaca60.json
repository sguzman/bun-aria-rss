{
  "title": "When Traditional Programming Meets Machine Learning",
  "link": "http://ramok.tech/2017/11/05/when-traditional-programming-meets-machine-learning/",
  "dc:creator": "Klevis Ramo",
  "pubDate": "Sun, 05 Nov 2017 21:53:41 +0000",
  "category": [
    "Algorithm&Data Structure",
    "Machine Learning",
    "Recommender System",
    "Algorithm and Data Structure",
    "Autocomplete",
    "Autocomplete suggestions",
    "autocomplete using tries",
    "autocomplete with trie",
    "autocomplete with tries",
    "Book Recommender",
    "Book System Recommender",
    "collaboration filtering",
    "java machine learning",
    "java recommender system",
    "machine learning",
    "Prefix Tree",
    "Tree Data Structure",
    "Tries"
  ],
  "guid": "http://ramok.tech/?p=787",
  "description": "In this post we are going to develop an autocomplete component for large data sets using Tries Data Structure and Collaborating Filtering to choose best book titles suggestions to users. It is interesting to notice that both &#8220;Algorithm&Data Structure&#8221; and &#8220;Machine Learning&#8221; are working together towards the final solution. Full code and working application are provided together with results. &#160; &#8230; <a href=\"http://ramok.tech/2017/11/05/when-traditional-programming-meets-machine-learning/\" class=\"more-link\">Continue reading<span class=\"screen-reader-text\"> \"When Traditional Programming Meets Machine Learning\"</span></a>",
  "content:encoded": "<p>In this post we are going to develop an <strong>autocomplete</strong> component for large data sets using <a href=\"https://de.wikipedia.org/wiki/Trie\">Tries</a> Data Structure and <a href=\"http://ramok.tech/2017/10/30/recommender-system/\"><strong>Collaborating Filtering</strong></a> to choose best book titles suggestions to users. It is interesting to notice that both &#8220;Algorithm&Data Structure&#8221; and &#8220;Machine Learning&#8221; are working together towards the final solution. Full <a href=\"https://github.com/klevis/booksRecommenderWithAutocomplete\">code </a>and <a href=\"https://drive.google.com/open?id=1RId4k0UU8uLtwguOZXCfsDUuqrsqgvLe\">working application</a> are provided together with results.</p>\n<p>&nbsp;</p>\n<h2>Problem Formulation</h2>\n<p>What we want to build from high level perspective is an autocomplete field that when we type some characters it suggests book titles that start with those characters.</p>\n<ul>\n<li>From <strong>GUI</strong> perspective what is required is a <strong>TextField </strong>or <strong>ComboBox </strong>that displays a list of options which are provided by some <strong>service</strong> like<em> findTitlesThatStartWith(chars [] ch)</em>. Fortunately there are already existing GUI components out there in <a href=\"http://www.algosome.com/articles/java-jcombobox-autocomplete.html\">SWING</a>(also <a href=\"https://jqueryui.com/autocomplete/\"><em>java script</em> or <em>jQuery</em></a>). For this post building GUI Autocomplete Components is not the focus although it may be sometimes be great challenge to build them.</li>\n<li>On the other hand implementing <em>findTitlesThatStartWith(chars [] ch) </em>is of more interest as it gives an opportunity to optimize what is offered to the customers from data perspective. There could a long list starting with particular characters and we can return only a limited number of titles. And that short list need to make sense from a user perspective as much as possible.</li>\n</ul>\n<p>There are various options:</p>\n<ul>\n<li style=\"list-style-type: none;\">\n<ul>\n<li style=\"list-style-type: none;\">\n<ol>\n<li>Sort the list by some criteria(alphabetic order) and return only Top 10(or any number that make sense).</li>\n<li>Keep a counter on how many times words are chosen by users. And only show Top 10 titles with highest counter.</li>\n<li>Show Top 10 most rated titles by users.</li>\n<li><span style=\"text-decoration: underline;\">Show Top 10 that are the most interest to the current user preferences.</span></li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>Once we clarified on high level <strong>what</strong> service will return is time to explore <strong>how</strong> it will search for the titles in fairly <span style=\"text-decoration: underline;\">large collections of titles</span>.</li>\n</ul>\n<p>Again there are various options:</p>\n<ul>\n<li>We search all the list/array and for each title we see if starts with those characters or not:</li>\n</ul>\n<pre>for (String title : allTitles) {\n    if(title.startsWith(charsEnteredByUser)){\n        options.add(title);\n    }\n}</pre>\n<p>If <strong>N</strong> is the size of the list and <em>k<strong> </strong></em>the length of the words we need <em><strong>θ</strong></em><em><strong>(N*k) </strong></em>time to search<em><strong>.</strong></em> Inserting a new title takes <em>constant time(<strong>θ</strong>(1))</em> although adding new films happens fairly rarely.</p>\n<ul>\n<li>Since this is a search problem HashTable may come as option because of their very fast constant time access and insert(<em><strong>θ</strong></em><em><strong>(1)</strong></em>). Unfortunately HashTables can only look up for entirely word match and not a prefix match(titles that start with&#8230;).</li>\n<li>Similarly we may think of Binary Tree(well balanced) as it give us <em><strong>θ</strong><strong>(log(N), N size of all titles</strong></em> time complexity in searching and inserting. Again Binary Tree are not helpful because they cannot find a prefix match but rather exact match.</li>\n<li>Fortunately there is already exiting a Data Structure ready for finding prefix matches : <strong><a href=\"https://en.wikipedia.org/wiki/Trie\">Prefix Tree or Tries</a>. </strong>The great thing about this data structures is that with a small modification it gives you search time complexity <em><strong>θ</strong></em><em><strong>(k)</strong> </em>where <em><strong>k</strong></em> is the length of the prefix. Yes there is a catch, you may need a lot more storage.</li>\n</ul>\n<h2>Tries</h2>\n<p>In this section we will explore how Tries can help with searching for a prefix match in a list of titles(words). Tries are fairly easy to understand once you get how the words are inserted:</p>\n<p><img decoding=\"async\" loading=\"lazy\" class=\"aligncenter size-full wp-image-829\" src=\"https://i0.wp.com/ramok.tech/wp-content/uploads/2017/11/2017-11-03_23h35_05.gif?resize=840%2C573\" alt=\"\" width=\"840\" height=\"573\" data-recalc-dims=\"1\" /></p>\n<p style=\"text-align: center;\"><em>So basically we insert word&#8217;s characters in a separate nodes when characters are not already existing and re using existing ones. We mark also the end of each word with a special sign so later on we know when a full word is reached.</em></p>\n<p>Lets see how we can search with titles starting with &#8220;<strong>te&#8221;:</strong></p>\n<p><img decoding=\"async\" loading=\"lazy\" class=\"aligncenter size-full wp-image-833\" src=\"https://i0.wp.com/ramok.tech/wp-content/uploads/2017/11/2017-11-04_00h12_35.gif?resize=840%2C573\" alt=\"\" width=\"840\" height=\"573\" data-recalc-dims=\"1\" /></p>\n<p style=\"text-align: center;\"><em>When searching we first start from the root and look up on immediate children&#8217;s for our first character<strong>(t) </strong>match</em><em><strong>.</strong> When node matching character is found we treat it as the root so we continue to look up in direct children&#8217;s for next character<strong>(e)</strong> match. This logic continues until there are no more characters left on prefix. If that is the case than all the suggestion list is the sub-tree below our last node match. So we simply traverse all the sub-tree and add words when the end of the word sign is reached.</em></p>\n<p>You may think : Not so fast the complexity there is not <em><strong>θ</strong></em><em><strong>(k)</strong> </em>where <em><strong>k</strong></em> is the length of the prefix! Indeed the complexity is rather <em><strong>θ</strong></em><em><strong>(k+M)</strong> </em>where <em><strong>k</strong></em> is the length of the prefix and <em><strong>M </strong></em>is the size of the suggestion list or the sub &#8211; tree under the last node match(immediate children are kept on HashTable so constant time is need to look up for character match). Anyway we need to traverse the sub &#8211; tree to collect the suggestion words /titles and therefore if this list results big it can considerably slow down the algorithm. Of course is better than <em><strong>θ</strong></em><em><strong>(k*N) </strong></em>here <em><strong>k</strong></em> is the length of the prefix<em><strong> </strong></em>and <em><strong>N </strong></em>the size of the all list but still can we do better?</p>\n<p>Well we can slightly augment nodes to have store more information than just the character as below:</p>\n<p><img decoding=\"async\" loading=\"lazy\" class=\"alignnone size-full wp-image-900\" src=\"https://i0.wp.com/ramok.tech/wp-content/uploads/2017/11/2017-11-04_22h02_38.gif?resize=840%2C573\" alt=\"2017-11-04_22h02_38\" width=\"840\" height=\"573\" data-recalc-dims=\"1\" /></p>\n<p style=\"text-align: center;\">As we notice by now we store in each node beside the character also the word we are inserting(in practice a reference to the word).Step by step each node will have a list of words that passed on the path.</p>\n<p>This modification can greatly help to avoid going down all the sub-tree under the last matched node since the node now already have the list of the words which the sub- tree contains. Lets see below how the search would look now:</p>\n<p><img decoding=\"async\" loading=\"lazy\" class=\"alignnone size-full wp-image-911\" src=\"https://i0.wp.com/ramok.tech/wp-content/uploads/2017/11/2017-11-04_22h16_25.gif?resize=840%2C573\" alt=\"2017-11-04_22h16_25\" width=\"840\" height=\"573\" data-recalc-dims=\"1\" /></p>\n<p style=\"text-align: center;\"><em>The difference with this solution is that when we reached the last node that node already has ready the list of words starting with the prefix. So there is no need for sub-tree traversal therefore the complexity is now <span style=\"text-decoration: underline;\"><strong>θ</strong><strong>(k)</strong> where <strong>k</strong> is the length of the prefix</span>.</em></p>\n<h3>Final Change</h3>\n<p>There is a final small trick and the algorithm is ready to be implemented. Titles usually are sentences rather than a single word. It will not be very useful if we search only the beginning of the title because for example a lot of title start with : &#8220;<strong>The</strong> &#8230;&#8221;(The walking dead) therefore we will miss those suggestion if user search with something more meaningful than &#8220;<strong>The&#8221;</strong>.</p>\n<p><em>The solution is easy we just insert each of the words separately in the tree but also save all Sentence of Title to the node suggestion list.  </em>In this way we can search with middle words(walking) and in same time be able to suggest all title.</p>\n<p>The code is fairly easy(50 lines) so please feel free to have a look <a href=\"https://github.com/klevis/booksRecommenderWithAutocomplete/blob/master/src/main/java/ramo/klevis/trie/Trie.java\">Trie</a> and <a href=\"https://github.com/klevis/booksRecommenderWithAutocomplete/blob/master/src/main/test/ramo/klevis/trie/TrieTest.java\">TrieTest</a>.</p>\n<h2><span id=\"Recommender_System\" class=\"ez-toc-section\">Recommender System</span></h2>\n<p>We have only a limit number of suggestion so when it comes to what suggestions to show to the user I think the best answer is: what is more relevant or more close to user interests. This leads us to 4(was underlined anyway :)) and therefore to Recommender Systems.</p>\n<p>A recommender system suggests to users information based on their preference trend on the data. The main advantage of this systems is that it learns automatically as it knows more from users preferences. So basically more the users interact with the system(users likes/clicks particular books, movies) better suggestion(more close to user interest) is the system going to make them. On <a href=\"http://ramok.tech/2017/10/30/recommender-system/\">previous post</a> we explained in details how this is achieved using <a href=\"http://ramok.tech/2017/10/30/recommender-system/#Insight\">Collaborative Filtering Algorithm</a>. Also an <a href=\"http://ramok.tech/2017/10/30/recommender-system/#Application\">Application </a>was build for suggesting Movies based on user ratings. In this post we are going to implement same algorithm for suggesting <strong>books</strong> instead of movies.</p>\n<h2>Data</h2>\n<p>Thanks to this <a href=\"http://www2.informatik.uni-freiburg.de/~cziegler/BX/\">source</a> for providing enough data to build a meaniful algorithm:</p>\n<blockquote><p>&#8220;<a href=\"http://www2.informatik.uni-freiburg.de/~dbis/Publications/05/WWW05.html\">Improving Recommendation Lists Through Topic Diversification</a>,</p>\n<div class=\"normal\" align=\"justify\">\n<p>Cai-Nicolas Ziegler, Sean M. McNee, Joseph A. Konstan, Georg Lausen; <em>Proceedings of the 14th International World Wide Web Conference (WWW &#8217;05),</em> May 10-14, 2005, Chiba, Japan. <em>To appear.</em></p>\n<p>Download:<b> [ </b><a href=\"http://www2.informatik.uni-freiburg.de/~cziegler/BX/WWW-2005-Preprint.pdf\">PDF Pre-Print</a><b> ]</b></p>\n</div>\n<p>&#8220;</p></blockquote>\n<p>The data set is quite big approx. around 271.000 books, 1.1 million of ratings and 279.000 of users..</p>\n<h2>Application</h2>\n<p><a href=\"https://drive.google.com/open?id=1RId4k0UU8uLtwguOZXCfsDUuqrsqgvLe\">Application </a>can be <a href=\"https://drive.google.com/open?id=1RId4k0UU8uLtwguOZXCfsDUuqrsqgvLe\">downloaded </a>and executed without any knowledge of java beside JAVA has to be installed on your computer.We can run the <a href=\"https://drive.google.com/open?id=1RId4k0UU8uLtwguOZXCfsDUuqrsqgvLe\">application </a>from <a href=\"https://github.com/klevis/booksRecommenderWithAutocomplete\">source </a>by simply executing the <strong>RUN</strong> class or if you do not fill to open it with IDE just run <span style=\"text-decoration: underline;\"><em><strong>mvn clean install exec:java.</strong></em></span></p>\n<p>You can try it by rating first some books(!<u>please notice that if books are not rated first no suggestion are made</u>) and than search in the field for autocomplete suggestions.Feel free to play around(50 features do not take much to train) and notice how algorithm adapts in accordance with your preference changes. For 50 genres it may take to 30 seconds maximum to give you suggestion with predicted rating and the error of the algorithm or Mean Squared Error. You can as well increase the ratings data size till <strong><span data-fr-verified=\"true\">1.149.000</span></strong>but please be aware of the slow down of the training process</p>\n<p><a href=\"https://drive.google.com/open?id=1RId4k0UU8uLtwguOZXCfsDUuqrsqgvLe\">Application </a>was build using Swing as GUI and <a href=\"http://ramok.tech/2017/09/08/fraud-detection-with-java-and-spark-mlib/#Spark_and_MLib\">Spark MLib</a> for the Collaboration Filtering Algorithm and after running you the below screen will show up:</p>\n<p><img decoding=\"async\" loading=\"lazy\" class=\"alignnone size-full wp-image-984\" src=\"https://i0.wp.com/ramok.tech/wp-content/uploads/2017/11/2017-11-05_22h36_00.jpg?resize=655%2C393\" alt=\"2017-11-05_22h36_00\" width=\"655\" height=\"393\" srcset=\"https://i0.wp.com/ramok.tech/wp-content/uploads/2017/11/2017-11-05_22h36_00.jpg?w=655 655w, https://i0.wp.com/ramok.tech/wp-content/uploads/2017/11/2017-11-05_22h36_00.jpg?resize=300%2C180 300w\" sizes=\"(max-width: 709px) 85vw, (max-width: 909px) 67vw, (max-width: 984px) 61vw, (max-width: 1362px) 45vw, 600px\" data-recalc-dims=\"1\" /></p>\n",
  "post-id": 787
}