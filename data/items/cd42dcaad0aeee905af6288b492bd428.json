{
  "title": "e002: Something borrowed, something… moved?",
  "link": "https://newrustacean.com/show_notes/e002/",
  "description": "<p>Something borrowed, something… moved?</p>\n<p><strong>Subject:</strong> The <code>struct</code> data type constructor, and the basics of Rust’s “ownership” concept and “borrowing” and “moving”.</p>\n<h1 id=\"followsupport\">Follow/Support</h1>\n<ul>\n<li>New Rustacean:\n<ul>\n<li>Twitter: <a href=\"https://www.twitter.com/newrustacean\">@newrustacean</a></li>\n<li>App.net: <a href=\"https://alpha.app.net/newrustacean\">@newrustacean</a></li>\n<li><a href=\"https://www.patreon.com/newrustacean\" rel=\"payment\">Patreon</a></li>\n<li>Email: <a href=\"mailto:hello@newrustacean.com\">hello@newrustacean.com</a></li>\n</ul></li>\n<li>Chris Krycho\n<ul>\n<li>Twitter: <a href=\"https://www.twitter.com/chriskrycho\">@chriskrycho</a></li>\n<li>App.net: <a href=\"https://alpha.app.net/chriskrycho\">@chriskrycho</a></li>\n</ul></li>\n</ul>\n<h1 id=\"notes\">Notes</h1>\n<p>Today’s episode discusses, and the associated source code demonstrates, a few basic behaviors of structs… including borrowing!</p>\n<p>After taking a short look at one of Rust’s basic approaches to creating new types, we dive into a <em>fairly</em> thorough overview of how borrowing works in fairly run-of-the-mill Rust code. This is a basic introduction, and as such I’m not getting into things like heap-allocated memory (<code>Box</code>) or dealing with <code>move</code> semantics with threads or closures. (I haven’t actually figured those out well enough yet to write something like this for them!)</p>\n<p>As usual, you’ll want to have the <a href=\"/src/show_notes/e002.rs.html\"><code>src</code></a> open to see what I’m doing with the components documented below.</p>\n<h1 id=\"links\">Links</h1>\n<ul>\n<li><code>rustfmt</code> – a tool for formatting Rust code\n<ul>\n<li><a href=\"https://github.com/nrc/rustfmt\">repo</a></li>\n<li><a href=\"http://www.ncameron.org/blog/rustfmt-ing-rust/\">“rustfmt-ing Rust`</a></li>\n<li><a href=\"https://www.reddit.com/r/rust/comments/3nt2vm/rustfmting_rust_please_help_me_rustfmt_the_rust/\">Reddit discussion</a></li>\n</ul></li>\n<li>RFC for incremental compilation\n<ul>\n<li><a href=\"https://github.com/nikomatsakis/rfcs/blob/incremental-compilation/text/0000-incremental-compilation.md\">Text of the RFC</a></li>\n<li><a href=\"https://github.com/rust-lang/rfcs/pull/1298\">GitHub pull request</a></li>\n</ul></li>\n</ul>\n",
  "pubDate": "Sun, 11 Oct 2015 20:24:16 -0600",
  "enclosure": "",
  "guid": "03DD0BB6-9615-420A-A43B-B6EB0BBCD1C4",
  "itunes:author": "Chris Krycho",
  "itunes:subtitle": "Borrow a `struct` for a while. Then give it back, or keep it for yourself!",
  "itunes:summary": "Something borrowed, something… moved? * Date: October 12, 2015 * Subject: The struct data type constructor, and the basics of Rust’s “ownership” concept and “borrowing” and “moving”. * Audio: * M4A * MP3 * Ogg Follow/Support * New Rustacean: * Twitter: @newrustacean * App.net: @newrustacean * Patreon * Email: hello@newrustacean.com * Chris Krycho * Twitter: @chriskrycho * App.net: @chriskrycho Notes Today’s episode discusses, and the associated source code demonstrates, a few basic behaviors of structs… including borrowing! After taking a short look at one of Rust’s basic approaches to creating new types, we dive into a fairly thorough overview of how borrowing works in fairly run-of-the-mill Rust code. This is a basic introduction, and as such I’m not getting into things like heap-allocated memory (Box) or dealing with move semantics with threads or closures. (I haven’t actually figured those out well enough yet to write something like this for them!) As usual, you’ll want to have the src open to see what I’m doing with the components documented below. Links * rustfmt – a tool for formatting Rust code * repo * “rustfmt-ing Rust` * Reddit discussion * RFC for incremental compilation * Text of the RFC * GitHub pull request",
  "itunes:duration": "17:12",
  "itunes:episodeType": "full"
}