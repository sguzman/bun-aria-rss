{
  "id": "tag:blogger.com,1999:blog-8474926331452026626.post-6099606360064831644",
  "published": "2022-09-21T12:27:00.003-07:00",
  "updated": "2022-10-22T20:05:08.679-07:00",
  "category": [
    "",
    "",
    ""
  ],
  "title": "View Synthesis with Transformers",
  "content": "<span class=\"byline-author\">Posted by Carlos Esteves and Ameesh Makadia, Research Scientists, Google Research</span> <p>A long-standing problem in the intersection of computer vision and computer graphics, <a href=\"https://en.wikipedia.org/wiki/View_synthesis\">view synthesis</a> is the task of creating new views of a scene from multiple pictures of that scene. This has received increased attention [<a href=\"https://dellaert.github.io/NeRF/\">1</a>, <a href=\"https://dellaert.github.io/NeRF21/\">2</a>, <a href=\"https://dellaert.github.io/NeRF22/\">3</a>] since <a href=\"https://www.matthewtancik.com/nerf\">the introduction of neural radiance fields</a> (NeRF). The problem is challenging because to accurately synthesize new views of a scene, a model needs to capture many types of information — its detailed 3D structure, materials, and illumination —  from a small set of reference images.  </p><a name='more'></a><p>In this post, we present recently published deep learning models for view synthesis. In “<a href=\"https://light-field-neural-rendering.github.io/\">Light Field Neural Rendering</a>” (LFNR), presented at <a href=\"https://cvpr2022.thecvf.com/\">CVPR 2022</a>, we address the challenge of accurately reproducing view-dependent effects by using <a href=\"https://ai.googleblog.com/2017/08/transformer-novel-neural-network.html\">transformers</a> that learn to combine reference pixel colors. Then in “<a href=\"https://mohammedsuhail.net/gen_patch_neural_rendering/\">Generalizable Patch-Based Neural Rendering</a>” (GPNR), to be presented at <a href=\"https://eccv2022.ecva.net/\">ECCV 2022</a>, we address the challenge of generalizing to unseen scenes by using a sequence of transformers with canonicalized positional encoding that can be trained on a set of scenes to synthesize views of new scenes. These models have some unique features. They perform image-based rendering, combining colors and features from the reference images to render novel views. They are purely transformer-based, operating on sets of image patches, and they leverage a <a href=\"https://en.wikipedia.org/wiki/Light_field#The_4D_light_field\">4D light field</a> representation for positional encoding, which helps to model view-dependent effects. </p><table align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto;\"><tbody><tr><td style=\"text-align: center;\"><a href=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgkJzGICK0DKkQBjC-O0ts_iqk-W3qo90RcUbJl9xOA4NIpzqRHiDx1C8C3KV0ylyBR3cPwgvoW1I9s3y2OW1VdGVArKtWDaIDaxmLFSRoOo66YcMVA9Df7Tj9_zaR2fZplryCBphBKgTtDRegu6POYDiyMy_waqgL3_37KTFeMGjCD7R-U7jT0boYong/s960/image6.png\" style=\"margin-left: auto; margin-right: auto;\"><img border=\"0\" data-original-height=\"444\" data-original-width=\"960\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgkJzGICK0DKkQBjC-O0ts_iqk-W3qo90RcUbJl9xOA4NIpzqRHiDx1C8C3KV0ylyBR3cPwgvoW1I9s3y2OW1VdGVArKtWDaIDaxmLFSRoOo66YcMVA9Df7Tj9_zaR2fZplryCBphBKgTtDRegu6POYDiyMy_waqgL3_37KTFeMGjCD7R-U7jT0boYong/s16000/image6.png\" /></a></td></tr></tbody></table> <table align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto;\"><tbody><tr><td style=\"text-align: center;\"><a href=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEj6wR1MX9K5D3v-kOvSAzBwV4x7Ex3q_nqTIXgrrspTcgez4gGqdeR5MeQYZn2h6FX8WPet_zxok41c4qEtTnFvZzOpufJcO8PZARqeRpBWxoTpTuOmgTPtiefzceefdvu52VxRC9AxUtlxbQEMnxUa_IS4raPaXH8uyB3APcTiiWKH2cEinApucd2Y4A/s504/image5.gif\" style=\"margin-left: auto; margin-right: auto;\"><img border=\"0\" data-original-height=\"288\" data-original-width=\"504\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEj6wR1MX9K5D3v-kOvSAzBwV4x7Ex3q_nqTIXgrrspTcgez4gGqdeR5MeQYZn2h6FX8WPet_zxok41c4qEtTnFvZzOpufJcO8PZARqeRpBWxoTpTuOmgTPtiefzceefdvu52VxRC9AxUtlxbQEMnxUa_IS4raPaXH8uyB3APcTiiWKH2cEinApucd2Y4A/s16000/image5.gif\" /></a></td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\">We train deep learning models that are able to produce new views of a scene given a few images of it. These models are particularly effective when handling view-dependent effects like the refractions and translucency on the test tubes. This animation is compressed; see the original-quality renderings <a href=\"https://light-field-neural-rendering.github.io/static/videos/shiny_lab.mp4\">here</a>. Source: Lab scene from the <a href=\"https://nex-mpi.github.io/\">NeX/Shiny</a> dataset.</td></tr></tbody></table> <h2>Overview</h2><p>The input to the models consists of a set of reference images and their camera parameters (focal length, position, and orientation in space), along with the coordinates of the target <a href=\"https://en.wikipedia.org/wiki/Line_(geometry)#Ray\">ray</a> whose color we want to determine. To produce a new image, we start from the camera parameters of the input images, obtain the coordinates of the target rays (each corresponding to a pixel), and query the model for each.  </p><p>Instead of processing each reference image completely, we look only at the regions that are likely to influence the target pixel. These regions are determined via <a href=\"https://en.wikipedia.org/wiki/Epipolar_geometry\">epipolar geometry</a>, which maps each target pixel to a line on each reference frame. For robustness, we take small regions around a number of points on the epipolar line, resulting in the set of patches that will actually be processed by the model. The transformers then act on this set of patches to obtain the color of the target pixel.  </p><p>Transformers are especially useful in this setting since their self-attention mechanism naturally takes sets as inputs, and the attention weights themselves can be used to combine reference view colors and features to predict the output pixel colors. These transformers follow the architecture introduced in <a href=\"https://github.com/google-research/vision_transformer\">ViT</a>. </p> <table align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto;\"><tbody><tr><td style=\"text-align: center;\"><a href=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhjGFUDAhjY-yJytdfcPFABdtwKgq_BwD7rSib6T_3Y6IY8jOm6S7ZLOdr_9gX8W7oj6bFKBvL8H7h9QVCJ1Kdw75UPv2Ekubh-TpiGhqOCf7e4fXuC0sQscp8KNn6hCuHNFd7e1ih-OpyXp2mf338pS-h2Qw5zqRIo4ZJYvgrVJ4PLC-umaEVDgIUZVg/s1050/image4.gif\" style=\"margin-left: auto; margin-right: auto;\"><img border=\"0\" data-original-height=\"417\" data-original-width=\"1050\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhjGFUDAhjY-yJytdfcPFABdtwKgq_BwD7rSib6T_3Y6IY8jOm6S7ZLOdr_9gX8W7oj6bFKBvL8H7h9QVCJ1Kdw75UPv2Ekubh-TpiGhqOCf7e4fXuC0sQscp8KNn6hCuHNFd7e1ih-OpyXp2mf338pS-h2Qw5zqRIo4ZJYvgrVJ4PLC-umaEVDgIUZVg/s16000/image4.gif\" /></a></td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\">To predict the color of one pixel, the models take a set of patches extracted around the epipolar line of each reference view. Image source: <a href=\"https://bmild.github.io/llff/index.html\">LLFF</a> dataset.</td></tr></tbody></table> <h2>Light Field Neural Rendering</h2><p>In <a href=\"https://light-field-neural-rendering.github.io/\">Light Field Neural Rendering</a> (LFNR), we use a sequence of two transformers to map the set of patches to the target pixel color. The first transformer aggregates information along each epipolar line, and the second along each reference image. We can interpret the first transformer as finding potential correspondences of the target pixel on each reference frame, and the second as reasoning about occlusion and view-dependent effects, which are common challenges of image-based rendering. </p>    <table align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto;\"><tbody><tr><td style=\"text-align: center;\"><a href=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEi6stcn8aiJ2QXdr4PLJo68S11D5ycKYVf9CJ9yOtjoZbAcl5crn_7SmKNOl3f_zsa04pXF3Q8VXyGaS6vVk8ZmHn1-gWjOaLlJ8MlS6wnZm58sSee-uyCTzN6t2gjG0roaoWBbPIdDC8tuSGBD9zMKNVpKq04-iRSVfslAz2HD7RXrqttKM8Chf28zSw/s1999/image8.png\" style=\"margin-left: auto; margin-right: auto;\"><img border=\"0\" data-original-height=\"584\" data-original-width=\"1999\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEi6stcn8aiJ2QXdr4PLJo68S11D5ycKYVf9CJ9yOtjoZbAcl5crn_7SmKNOl3f_zsa04pXF3Q8VXyGaS6vVk8ZmHn1-gWjOaLlJ8MlS6wnZm58sSee-uyCTzN6t2gjG0roaoWBbPIdDC8tuSGBD9zMKNVpKq04-iRSVfslAz2HD7RXrqttKM8Chf28zSw/s16000/image8.png\" /></a></td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\">LFNR uses a sequence of two transformers to map a set of patches extracted along epipolar lines to the target pixel color.</td></tr></tbody></table>   <p>LFNR improved the state-of-the-art on the most popular view synthesis benchmarks (Blender and Real Forward-Facing scenes from <a href=\"https://www.matthewtancik.com/nerf\">NeRF</a> and Shiny from <a href=\"https://nex-mpi.github.io/\">NeX</a>) with margins as large as 5dB <a href=\"https://en.wikipedia.org/wiki/Peak_signal-to-noise_ratio\">peak signal-to-noise ratio</a> (PSNR). This corresponds to a reduction of the pixel-wise error by a factor of 1.8x. We show qualitative results on challenging scenes from the <a href=\"https://nex-mpi.github.io/\">Shiny</a> dataset below: </p>    <table align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto;\"><tbody><tr><td style=\"text-align: center;\"><a href=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgJ4SRa5sepHJhmbySIqPmalNVkIBwrGTxaoIPVFiOXt_muv4Q8ZDjd8fnnTaEw0iqAu2pb4HzPKFElNytafFAdXlCdFtaDq2WK3fbXrYbKK7YxAGKZcVx6AwUTsJgFxWlC95SQ-v6FowCxYsI-pK34zq-xqq8xgokz1K1jAKl4JNeGvp4sBG2PVOazfw/s504/image9.gif\" style=\"margin-left: auto; margin-right: auto;\"><img border=\"0\" data-original-height=\"288\" data-original-width=\"504\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgJ4SRa5sepHJhmbySIqPmalNVkIBwrGTxaoIPVFiOXt_muv4Q8ZDjd8fnnTaEw0iqAu2pb4HzPKFElNytafFAdXlCdFtaDq2WK3fbXrYbKK7YxAGKZcVx6AwUTsJgFxWlC95SQ-v6FowCxYsI-pK34zq-xqq8xgokz1K1jAKl4JNeGvp4sBG2PVOazfw/s16000/image9.gif\" /></a></td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\">LFNR reproduces challenging view-dependent effects like the rainbow and reflections on the CD, reflections, refractions and translucency on the bottles. This animation is compressed; see the original quality renderings <a href=\"https://light-field-neural-rendering.github.io/static/videos/shiny_cd.mp4\">here</a>. Source: CD scene from the <a href=\"https://nex-mpi.github.io/\">NeX/Shiny</a> dataset.</td></tr></tbody></table>   <table align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto;\"><tbody><tr><td style=\"text-align: center;\"><a href=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEheYJQqMchzPTvb4mtom8VmoYtE91IB7Q47qygzupMAHvhp5lDyUEsyKlTx5567vlT32M4EV2JiZ9ERt_A-InkESptwHeteVcapgSjoPC8dTKpGtURFvk51UxjfiI_q5fdBGVNPBB1Kl2i333JU-nBLjJhsuij9q7c0saaXN_DGTbkbYL_3xbypGTQ3tA/s1402/image1.png\" style=\"margin-left: auto; margin-right: auto;\"><img border=\"0\" data-original-height=\"422\" data-original-width=\"1402\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEheYJQqMchzPTvb4mtom8VmoYtE91IB7Q47qygzupMAHvhp5lDyUEsyKlTx5567vlT32M4EV2JiZ9ERt_A-InkESptwHeteVcapgSjoPC8dTKpGtURFvk51UxjfiI_q5fdBGVNPBB1Kl2i333JU-nBLjJhsuij9q7c0saaXN_DGTbkbYL_3xbypGTQ3tA/s16000/image1.png\" /></a></td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\">Prior methods such as <a href=\"https://nex-mpi.github.io/\">NeX</a> and <a href=\"https://www.matthewtancik.com/nerf\">NeRF</a> fail to reproduce view-dependent effects like the translucency and refractions in the test tubes on the Lab scene from the <a href=\"https://nex-mpi.github.io/\">NeX/Shiny</a> dataset. See also our video of this scene at the top of the post and the original quality outputs <a href=\"https://light-field-neural-rendering.github.io/static/videos/shiny_lab.mp4\">here</a>.</td></tr></tbody></table> <h2>Generalizing to New Scenes</h2><p>One limitation of LFNR is that the first transformer collapses the information along each epipolar line independently for each reference image. This means that it decides which information to preserve based only on the output ray coordinates and patches from each reference image, which works well when training on a single scene (as most neural rendering methods do), but it does not generalize across scenes. Generalizable methods are important because they can be applied to new scenes without needing to retrain. </p><p>We overcome this limitation of LFNR in <a href=\"https://mohammedsuhail.net/gen_patch_neural_rendering/\">Generalizable Patch-Based Neural Rendering</a> (GPNR). We add a transformer that runs before the other two and exchanges information between points at the same depth over all reference images. For example, this first transformer looks at the columns of the patches from the park bench shown above and can use cues like the flower that appears at corresponding depths in two views, which indicates a potential match. Another key idea of this work is to canonicalize the positional encoding based on the target ray, because to generalize across scenes, it is necessary to represent quantities in relative and not absolute frames of reference. The animation below shows an overview of the model.  </p>   <table align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto;\"><tbody><tr><td style=\"text-align: center;\"><a href=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgl_5a5VpgxxOOSrFjTOv4IIFMgSTCnzxda-l9XVzac4sXBWdIUrmi921QTlj0ZQggGxNW7kpYbFulLie1Hy7umjVmaxQoi9YtZnIPL_XnFqvQF9OU_wT7WyYyJLcNCbYmTu1TEZe7D5dzAOb_WFpz2KIoENs_Wv_loRm6LK68mHm-TNO76JsrXJeydlQ/s960/image3.gif\" style=\"margin-left: auto; margin-right: auto;\"><img border=\"0\" data-original-height=\"540\" data-original-width=\"960\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgl_5a5VpgxxOOSrFjTOv4IIFMgSTCnzxda-l9XVzac4sXBWdIUrmi921QTlj0ZQggGxNW7kpYbFulLie1Hy7umjVmaxQoi9YtZnIPL_XnFqvQF9OU_wT7WyYyJLcNCbYmTu1TEZe7D5dzAOb_WFpz2KIoENs_Wv_loRm6LK68mHm-TNO76JsrXJeydlQ/s16000/image3.gif\" /></a></td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\">GPNR consists of a sequence of three transformers that map a set of patches extracted along epipolar lines to a pixel color. Image patches are mapped via the linear projection layer to initial features (shown as blue and green boxes). Then those features are successively refined and aggregated by the model, resulting in the final feature/color represented by the gray rectangle. Park bench image source: <a href=\"https://bmild.github.io/llff/index.html\">LLFF</a> dataset.</td></tr></tbody></table>   <p>To evaluate the generalization performance, we train GPNR on a set of scenes and test it on new scenes. GPNR improved the state-of-the-art on several benchmarks (following <a href=\"https://ibrnet.github.io/\">IBRNet</a> and <a href=\"https://apchenstu.github.io/mvsnerf/\">MVSNeRF</a> protocols) by 0.5–1.0 dB on average. On the <a href=\"https://ibrnet.github.io/\">IBRNet</a> benchmark, GPNR outperforms the baselines while using only 11% of the training scenes. The results below show new views of unseen scenes rendered with no fine-tuning.  </p>   <table align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto;\"><tbody><tr><td style=\"text-align: center;\"><a href=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEj9puTw4NAnf8DUJcCCv2LSvAQu6kmIMsOK-bkCSKtDV0WeqKpwoJmvXolP1ibzHQ8u_VqVVikaOz1S2Z2PBO5SpLowKSRdDvxf3_QN1JD1pTHLXnGcepNeflOvsofeLMGWoF3iIMfupMcDvplslsRU1G-JrHGZHLSgbRTbDwq5ZGZpRGLx27jFqB1z8Q/s576/image2.gif\" style=\"margin-left: auto; margin-right: auto;\"><img border=\"0\" data-original-height=\"437\" data-original-width=\"576\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEj9puTw4NAnf8DUJcCCv2LSvAQu6kmIMsOK-bkCSKtDV0WeqKpwoJmvXolP1ibzHQ8u_VqVVikaOz1S2Z2PBO5SpLowKSRdDvxf3_QN1JD1pTHLXnGcepNeflOvsofeLMGWoF3iIMfupMcDvplslsRU1G-JrHGZHLSgbRTbDwq5ZGZpRGLx27jFqB1z8Q/s16000/image2.gif\" /></a></td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\">GPNR-generated views of held-out scenes, without any fine tuning. This animation is compressed; see the original quality renderings <a href=\"https://mohammedsuhail.net/gen_patch_neural_rendering/img/combined_results.mp4\">here</a>. Source: <a href=\"https://ibrnet.github.io/\">IBRNet</a> collected dataset. </td></tr></tbody></table>   <table align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto;\"><tbody><tr><td style=\"text-align: center;\"><a href=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhKN1tnJDaafkhry535hVj4XZr4QVgcwebkox-YLImsrYSBcharQlzjgpp81SGwTTprQR6t4W2rJa4AvuRixFk5MYQavaXGmI0xBgQjKOOfJ1bIon1xEfzyjrt8FA5NL14pGU5o5M61XNvBHxIBoiL2jBdh9t1MMnHqcYTU1DocsH6HACg0TOnuktUp2Q/s1772/image7.png\" style=\"margin-left: auto; margin-right: auto;\"><img border=\"0\" data-original-height=\"363\" data-original-width=\"1772\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhKN1tnJDaafkhry535hVj4XZr4QVgcwebkox-YLImsrYSBcharQlzjgpp81SGwTTprQR6t4W2rJa4AvuRixFk5MYQavaXGmI0xBgQjKOOfJ1bIon1xEfzyjrt8FA5NL14pGU5o5M61XNvBHxIBoiL2jBdh9t1MMnHqcYTU1DocsH6HACg0TOnuktUp2Q/s16000/image7.png\" /></a></td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\">Details of GPNR-generated views on held-out scenes from <a href=\"https://nex-mpi.github.io/\">NeX/Shiny</a> (<b>left</b>) and <a href=\"https://bmild.github.io/llff/index.html\">LLFF</a> (<b>right</b>), without any fine tuning. GPNR reproduces more accurately the details on the leaf and the refractions through the lens when compared against <a href=\"https://ibrnet.github.io/\">IBRNet</a>.</td></tr></tbody></table> <h2>Future Work</h2><p>One limitation of most neural rendering methods, including ours, is that they require camera poses for each input image. Poses are not easy to obtain and typically come from offline optimization methods that can be slow, limiting possible applications, such as those on mobile devices. Research on jointly learning view synthesis and input poses is a promising future direction. Another limitation of our models is that they are computationally expensive to train. There is an active line of research on faster transformers which might help improve our models’ efficiency. For the papers, more results, and open-source code, you can check out the projects pages for \"<a href=\"https://light-field-neural-rendering.github.io/\">Light Field Neural Rendering</a>\" and \"<a href=\"https://mohammedsuhail.net/gen_patch_neural_rendering/\">Generalizable Patch-Based Neural Rendering</a>\". </p><div style=\"line-height:40%;\">    <br></div><h2>Potential Misuse</h2><p>In our research, we aim to accurately reproduce an existing scene using images from that scene, so there is little room to generate fake or non-existing scenes. Our models assume static scenes, so synthesizing moving objects, such as people, will not work. </p><div style=\"line-height:40%;\">    <br></div><h2>Acknowledgments</h2><p><em>All the hard work was done by our amazing intern – <a href=\"https://mohammedsuhail.net/\">Mohammed Suhail</a> – a PhD student at UBC, in collaboration with <a href=\"https://machc.github.io/\">Carlos Esteves</a> and <a href=\"http://www.ameeshmakadia.com/\">Ameesh Makadia</a> from Google Research, and <a href=\"https://www.cs.ubc.ca/~lsigal/\">Leonid Sigal</a> from UBC. We are thankful to Corinna Cortes for supporting and encouraging this project.</em></p><p><em>Our work is inspired by <a href=\"https://www.matthewtancik.com/nerf\">NeRF</a>, which sparked the recent interest in view synthesis, and <a href=\"https://ibrnet.github.io/\">IBRNet</a>, which first considered generalization to new scenes. Our light ray positional encoding is inspired by the seminal paper <a href=\"https://graphics.stanford.edu/papers/light/\">Light Field Rendering</a> and our use of transformers follow <a href=\"https://github.com/google-research/vision_transformer\">ViT</a>.  </em></p><p><em>Video results are from scenes from <a href=\"https://bmild.github.io/llff/index.html\">LLFF</a>, <a href=\"https://nex-mpi.github.io/\">Shiny</a>, and <a href=\"https://ibrnet.github.io/\">IBRNet</a> collected datasets.</em></p>",
  "link": [
    "",
    "",
    "",
    "",
    ""
  ],
  "author": {
    "name": "Google AI",
    "uri": "http://www.blogger.com/profile/12098626514775266161",
    "email": "noreply@blogger.com",
    "gd:image": ""
  },
  "media:thumbnail": "",
  "thr:total": 0
}