{
  "title": "Games and Puzzles as Multicomputational Systems",
  "link": "https://writings.stephenwolfram.com/2022/06/games-and-puzzles-as-multicomputational-systems/",
  "comments": "https://writings.stephenwolfram.com/2022/06/games-and-puzzles-as-multicomputational-systems/#comments",
  "pubDate": "Wed, 08 Jun 2022 20:17:38 +0000",
  "dc:creator": "Mark Long",
  "category": [
    "Computational Science",
    "Computational Thinking",
    "Mathematics",
    "New Kind of Science",
    "Physics",
    "Ruliology"
  ],
  "guid": "https://writings.stephenwolfram.com/?p=37124",
  "description": "<span class=\"thumbnail\"><img width=\"128\" height=\"108\" src=\"https://content.wolfram.com/uploads/sites/43/2022/06/icon-games.png\" class=\"attachment-thumbnail size-thumbnail wp-post-image\" alt=\"\" /></span>",
  "content:encoded": "<span class=\"thumbnail\"><img width=\"128\" height=\"108\" src=\"https://content.wolfram.com/uploads/sites/43/2022/06/icon-games.png\" class=\"attachment-thumbnail size-thumbnail wp-post-image\" alt=\"\" /></span><p><!--margin img--></p>\n<style>\nh2.bookpost{display:block;}\nimg.bookpost{padding-top:20px}\n</style>\n<p><img class=\"aligncenter\" title=\"Games and Puzzles as Multicomputational Systems\" src=\"https://content.wolfram.com/uploads/sites/43/2022/06/multiway-hero-final-2.png\" alt=\"Games and Puzzles as Multicomputational Systems\" width=\"650\" height=390\" /></p>\n<h2 id='humanizing-multicomputational-processes'>Humanizing Multicomputational Processes</h2>\n<p>Multicomputation is one of the core ideas of the <a href='https://www.wolframphysics.org/' target=_blank rel=noopener>Wolfram Physics Project</a>—and in particular is at the heart of our <a href='https://writings.stephenwolfram.com/2020/04/finally-we-may-have-a-path-to-the-fundamental-theory-of-physics-and-its-beautiful/#the-inevitability-of-quantum-mechanics'>emerging understanding of quantum mechanics</a>. But how can one get an intuition for what is initially the rather abstract <a href='https://writings.stephenwolfram.com/2021/09/multicomputation-a-fourth-paradigm-for-theoretical-science/'>idea of multicomputation</a>? A good approach, I believe, is to see it in action in familiar systems and situations. And I explore here what seems like a particularly good example: games and puzzles.<span id=\"more-37124\"></span></p>\n<p>One might not imagine that something as everyday as well-known games and puzzles would have any connection to the formalism for something like quantum mechanics. But the idea of multicomputation provides a link. And indeed one can view the very possibility of being able to have “interesting” games and puzzles as being related to a core phenomenon of multicomputation: <a href='https://www.wolframphysics.org/bulletins/2022/06/multicomputational-irreducibility/' target=_blank rel=noopener>multicomputational irreducibility</a>.</p>\n<p>In an ordinary computational system each state of the system has a unique successor, and ultimately there is a single thread of time that defines a process of computation. But in a multicomputational system the key idea is that states can have multiple successors—and tracing their behavior defines a whole multiway graph of branching and merging threads of time. And the point is that this is directly related to how one can think about typical games and puzzles.</p>\n<p>Given a particular state of a game or puzzle, a player must typically decide what to do next. And where the idea of multicomputation comes in is that there are usually several choices that they can make. In any particular instance of the game, they’ll make a particular choice. But the point of the multicomputational paradigm is to look globally at the consequences of all possible choices—and to produce a <a href='https://www.wolframscience.com/nks/p204--multiway-systems/'>multiway graph</a> that represents them.</p>\n<p>The notion of making what we call a multiway graph has actually existed—usually under the name of “game graphs”—for games and puzzles for a <a href='https://writings.stephenwolfram.com/2021/09/multicomputation-a-fourth-paradigm-for-theoretical-science/#some-backstory'>bit more than a hundred years</a>. But with the multicomputational paradigm there are now some more general concepts that can be applied to these constructs. And in turn understanding the relation to games and puzzles has the potential to provide a new level of intuition and familiarity about multiway graphs.</p>\n<p>My particular goal here is to investigate—fairly systematically—a sequence of well-known games and puzzles using the general methods we’ve been developing for studying multicomputational systems. As is typical in investigations that connect with everyday things, we’ll encounter all sorts of specific details. And while these may not immediately seem relevant to larger-scale discussions, they are important in our effort to provide a realistic and relatable picture of actual games and puzzles—and in allowing the connections we make with multicomputation to be on a solid foundation.</p>\n<p>It’s worth mentioning that the possibility of relating games and puzzles to physics is basically something that wouldn’t make sense without our Physics Project. For games and puzzles are normally at some fundamental level discrete—especially in the way that they involve discrete branching of possibilities. And if one assumes physics is fundamentally continuous, there’s no reason to expect a connection. But a key idea of our Physics Project is that the physical world is at the lowest level discrete—like games and puzzles. And what’s more, our Physics Project posits that physics—like games and puzzles—has discrete possibilities to explore.</p>\n<p>At the outset each of the games and puzzles I discuss here may seem rather different in their structure and operation. But what we’ll see is that when viewed in a multicomputational way, there is remarkable—and almost monotonous—uniformity across our different examples. I won’t comment too much on the significance of what we see until the end, when I’ll begin to discuss how various important multicomputational phenomena may play out in the context of games and puzzles. And how the very difficulty of conceptualizing multicomputation in straightforward human terms is what fundamentally leads to the engaging character of games and puzzles.</p>\n<h2 id='tic-tac-toe'>Tic-Tac-Toe</h2>\n<p>Consider a simplified version of tic-tac-toe (AKA “noughts and crosses”) played on a 2×2 board. Assume X plays first. Then one can represent the <a href='https://www.wolframscience.com/nks/notes-5-6--game-systems/'>possible moves by the graph</a>:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722tttimg1.png\" alt='' title='' width='315' height='102' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722tttimg1_copy.txt\">\n\t\t\t\t\t<span class='close' id='1ttt_out'>&#10005</span></p>\n<pre class='text' id='1ttt_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>On the next turn one gets:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722tttimg2.png\" alt='' title='' width='555' height='162' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722tttimg2_copy.txt\">\n\t\t\t\t\t<span class='close' id='2ttt_out'>&#10005</span></p>\n<pre class='text' id='2ttt_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>So far this graph is a simple tree. But if we play another turn we’ll see that different branches can merge, and “playing until the board is full” we get a multiway graph—or &#8220;game graph”—of the form: </p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722tttimg3.png\" alt='' title='' width='551' height='290' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722tttimg3_copy.txt\">\n\t\t\t\t\t<span class='close' id='3ttt_out'>&#10005</span></p>\n<pre class='text' id='3ttt_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>Every path through this graph represents a possible complete game:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722tttimg4.png\" alt='' title='' width='409' height='44' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722tttimg4_copy.txt\">\n\t\t\t\t\t<span class='close' id='4ttt_out'>&#10005</span></p>\n<pre class='text' id='4ttt_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>In our setup so far, the total number of board configurations that can ever be reached in any game (i.e. the total number of nodes in the graph) is 35, while the total number of possible complete games (i.e. the number of possible paths from the root of the graph) is 24.</p>\n<p>If one renders the graph in 3D one can see that it has a very regular structure:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722tttimg5.png\" alt='' title='' width='514' height='416' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722tttimg5_copy.txt\">\n\t\t\t\t\t<span class='close' id='5ttt_out'>&#10005</span></p>\n<pre class='text' id='5ttt_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>And now if we define “winning” 2×2 tic-tac-toe as having two identical elements in a horizontal row, then we can annotate the multiway graph to indicate wins—removing cases where the “game is already over”:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722tttimg6.png\" alt='' title='' width='565' height='297' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722tttimg6_copy.txt\">\n\t\t\t\t\t<span class='close' id='6ttt_out'>&#10005</span></p>\n<pre class='text' id='6ttt_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>Much of the core structure of the multiway graph is actually already evident even in the seemingly trivial case of “one-player tic-tac-toe”, in which one is simply progressively filling in squares on the board:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722tttimg7.png\" alt='' title='' width='369' height='270' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722tttimg7_copy.txt\">\n\t\t\t\t\t<span class='close' id='7ttt_out'>&#10005</span></p>\n<pre class='text' id='7ttt_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>But what makes this not completely trivial is the existence of distinct paths that lead to equivalent states. Rendered differently the graph (which has 2<sup>4</sup> = 16 nodes and 4! = 24 “game paths”) has an obvious 4D hypercube form (where now we have dropped the explicit X’s in each cell):</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722tttimg9.png\" alt='' title='' width='319' height='270' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722tttimg9_copy.txt\">\n\t\t\t\t\t<span class='close' id='9ttt_out'>&#10005</span></p>\n<pre class='text' id='9ttt_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>For a 3×3 board the graph is a 9D hypercube with 2<sup>9</sup> = 512 nodes and 9! = 362880 “game paths”, or in “move-layered” form:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722tttimg11.png\" alt='' title='' width='476' height='233' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722tttimg11_copy.txt\">\n\t\t\t\t\t<span class='close' id='11ttt_out'>&#10005</span></p>\n<pre class='text' id='11ttt_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>This basic structure is already visible in “1-player 1D tic-tac-toe” in which the multiway graph for a “length-<em>n</em>” board just corresponds to an <em>n</em>-dimensional hypercube:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722tttimg12.png\" alt='' title='' width='568' height='188' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722tttimg12_copy.txt\">\n\t\t\t\t\t<span class='close' id='12ttt_out'>&#10005</span></p>\n<pre class='text' id='12ttt_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>The total number of distinct board configurations in this case is just 2<sup><em>n</em></sup>, and the number of distinct “games” is <em>n</em>!. At move <em>t</em> the number of distinct board configurations (i.e. states) is <tt><a href='https://reference.wolfram.com/language/ref/Binomial.html'>Binomial</a></tt><tt>[n, t]</tt>.</p>\n<p>With 2 players the graphs become slightly more complicated:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722tttimg14.png\" alt='' title='' width='563' height='450' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722tttimg14_copy.txt\">\n\t\t\t\t\t<span class='close' id='14ttt_out'>&#10005</span></p>\n<pre class='text' id='14ttt_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>The<a href='https://oeis.org/A005773' target=_blank rel=noopener> total number of states</a> in these graphs is </p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722tttimg15.png\" alt='' title='' width='388' height='19' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722tttimg15_copy.txt\">\n\t\t\t\t\t<span class='close' id='15ttt_out'>&#10005</span></p>\n<pre class='text' id='15ttt_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>which is asymptotically <img style=\"margin-bottom: -10px\" loading='lazy' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722tttimg16A.png\" width= '31' height='' />. (Note that for <em>n </em>= 4 the result is the same as for the 2×2 board discussed above.) At move <em>t</em> the number of distinct states is given by</p>\n<table >\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722tttimg17.png\" alt='' title='' width='404' height='21' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722tttimg17_copy.txt\">\n\t\t\t\t\t<span class='close' id='17ttt_out'>&#10005</span></p>\n<pre class='text' id='17ttt_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722tttimg18.png\" alt='' title='' width='610' height='296' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722tttimg18_copy.txt\">\n\t\t\t\t\t<span class='close' id='18ttt_out'>&#10005</span></p>\n<pre class='text' id='18ttt_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>OK, so what about standard 2-player 3×3 tic-tac-toe? Its multiway graph begins:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722tttimg19.png\" alt='' title='' width='425' height='124' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722tttimg19_copy.txt\">\n\t\t\t\t\t<span class='close' id='19ttt_out'>&#10005</span></p>\n<pre class='text' id='19ttt_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>After 2 steps (i.e. one move by X and one by O) the graph is still a tree (with the initial state now at the center):</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722tttimg20.png\" alt='' title='' width='396' height='197' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722tttimg20_copy.txt\">\n\t\t\t\t\t<span class='close' id='20ttt_out'>&#10005</span></p>\n<pre class='text' id='20ttt_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>After 3 steps there is starting to be merging:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722tttimg21.png\" alt='' title='' width='396' height='203' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722tttimg21_copy.txt\">\n\t\t\t\t\t<span class='close' id='21ttt_out'>&#10005</span></p>\n<pre class='text' id='21ttt_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>And continuing for all 9 moves the full layered graph—with 6046 states—is:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722tttimg22.png\" alt='' title='' width='488' height='253' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722tttimg22_copy.txt\">\n\t\t\t\t\t<span class='close' id='22ttt_out'>&#10005</span></p>\n<pre class='text' id='22ttt_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>At the level of this graph, the results are exactly the same as for a 2-player 1D version with a total of 9 squares. But for actual 2D 3×3 tic-tac-toe there is an additional element to the story: the concept of winning a game, and thereby terminating it. With the usual rules, a game is considered won when a player gets a horizontal, vertical or diagonal line of three squares, as in for example:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722tttimg23.png\" alt='' title='' width='515' height='96' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722tttimg23_copy.txt\">\n\t\t\t\t\t<span class='close' id='23ttt_out'>&#10005</span></p>\n<pre class='text' id='23ttt_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>Whenever a “win state” such as these is reached, the game is considered over, so that subsequent states in the multiway graph are pruned, and what was previously a 6046-node graph becomes a 5478-node graph</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722tttimg24.png\" alt='' title='' width='447' height='227' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722tttimg24_copy.txt\">\n\t\t\t\t\t<span class='close' id='24ttt_out'>&#10005</span></p>\n<pre class='text' id='24ttt_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>with examples of the 568 pruned states including (where the “win” that terminated the game is marked):</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722tttimg25.png\" alt='' title='' width='509' height='44' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722tttimg25_copy.txt\">\n\t\t\t\t\t<span class='close' id='25ttt_out'>&#10005</span></p>\n<pre class='text' id='25ttt_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>Wins can occur at different steps: anywhere from 5 to 9. The total numbers of distinct wins are as follows</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722tttimg26.png\" alt='' title='' width='425' height='75' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722tttimg26_copy.txt\">\n\t\t\t\t\t<span class='close' id='26ttt_out'>&#10005</span></p>\n<pre class='text' id='26ttt_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>(yielding 626 wins at any step for X and 316 for O).</p>\n<p>One can’t explicitly tell that a game has ended in a draw until every square has been filled in—and there are ultimately only 16 final “draw configurations” that can be reached:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722tttimg27.png\" alt='' title='' width='465' height='96' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722tttimg27_copy.txt\">\n\t\t\t\t\t<span class='close' id='27ttt_out'>&#10005</span></p>\n<pre class='text' id='27ttt_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>We can annotate the full (“game-over-pruned”) multiway graph, indicating win and draw states:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722tttimg28.png\" alt='' title='' width='542' height='281' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722tttimg28_copy.txt\">\n\t\t\t\t\t<span class='close' id='28ttt_out'>&#10005</span></p>\n<pre class='text' id='28ttt_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>To study this further, let’s start by looking at a subgraph that includes only “end games” starting with a board that already has 4 squares filled in:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722tttimg29.png\" alt='' title='' width='570' height='296' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722tttimg29_copy.txt\">\n\t\t\t\t\t<span class='close' id='29ttt_out'>&#10005</span></p>\n<pre class='text' id='29ttt_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>We see here that from our initial board</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722tttimg30.png\" alt='' title='' width='329' height='41' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722tttimg30_copy.txt\">\n\t\t\t\t\t<span class='close' id='30ttt_out'>&#10005</span></p>\n<pre class='text' id='30ttt_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>it’s possible to get a final win for both X and O:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722tttimg31.png\" alt='' title='' width='459' height='44' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722tttimg31_copy.txt\">\n\t\t\t\t\t<span class='close' id='31ttt_out'>&#10005</span></p>\n<pre class='text' id='31ttt_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>But in many of these cases the outcome is already basically determined a step or more before the actual win occurs—in the sense that unless a given player “makes a mistake” they will always be able to force a win. </p>\n<p>So, for example, if it is X&#8217;s turn and the state is</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722tttimg32.png\" alt='' title='' width='329' height='41' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722tttimg32_copy.txt\">\n\t\t\t\t\t<span class='close' id='32ttt_out'>&#10005</span></p>\n<pre class='text' id='32ttt_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>then X is guaranteed to win if they play as follows:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722tttimg33.png\" alt='' title='' width='329' height='41' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722tttimg33_copy.txt\">\n\t\t\t\t\t<span class='close' id='33ttt_out'>&#10005</span></p>\n<pre class='text' id='33ttt_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>We can represent the “pre-forcing” of wins by coloring subgraphs (or in effect “light cones”) in the multiway graph:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722tttimg34.png\" alt='' title='' width='572' height='300' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722tttimg34_copy.txt\">\n\t\t\t\t\t<span class='close' id='34ttt_out'>&#10005</span></p>\n<pre class='text' id='34ttt_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>At the very beginning of the game, when X makes the first move, nothing is yet forced. But after just one move, it’s already possible to get to configurations where X can always force a win:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722tttimg35.png\" alt='' title='' width='478' height='474' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722tttimg35_copy.txt\">\n\t\t\t\t\t<span class='close' id='35ttt_out'>&#10005</span></p>\n<pre class='text' id='35ttt_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>Starting from a state obtained after 1 step, we can see that after 2 steps there are configurations where O can force a win:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722tttimg36.png\" alt='' title='' width='568' height='470' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722tttimg36_copy.txt\">\n\t\t\t\t\t<span class='close' id='36ttt_out'>&#10005</span></p>\n<pre class='text' id='36ttt_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>Going to more moves leads to more “forced-win” configurations:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722tttimg37.png\" alt='' title='' width='575' height='282' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722tttimg37_copy.txt\">\n\t\t\t\t\t<span class='close' id='37ttt_out'>&#10005</span></p>\n<pre class='text' id='37ttt_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>Annotating the whole multiway graph we get:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722tttimg38.png\" alt='' title='' width='565' height='293' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722tttimg38_copy.txt\">\n\t\t\t\t\t<span class='close' id='38ttt_out'>&#10005</span></p>\n<pre class='text' id='38ttt_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>We can think of this graph as a representation of the “solution” to the game: given any state the coloring in the graph tells us which player can force a win from that state, and the graph defines what moves they can make to do so. </p>\n<p>Here’s a summary of possible game states at each move:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722tttimg39A.png\" alt='' title='' width='565' height='' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722tttimg39_copy.txt\">\n\t\t\t\t\t<span class='close' id='39ttt_out'>&#10005</span></p>\n<pre class='text' id='39ttt_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722tttimg40.png\" alt='' title='' width='607' height='236' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722tttimg40_copy.txt\">\n\t\t\t\t\t<span class='close' id='40ttt_out'>&#10005</span></p>\n<pre class='text' id='40ttt_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>Here we’re just counting the number of possible states of various kinds at each step. But is there a way to think about these states as somehow being laid out in “game state space”? <a href='https://www.wolframphysics.org/technical-introduction/the-updating-process-for-string-substitution-systems/the-concept-of-branchial-graphs/' target=_blank rel=noopener>Branchial graphs</a> provide a potential way to do this. The basic branchial graph at a particular step is obtained by joining pairs of states that share a common ancestor on the step before. For the case of 2-player 2×2 tic-tac-toe the branchial graphs we get on successive steps are as follows:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722tttimg41.png\" alt='' title='' width='570' height='168' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722tttimg41_copy.txt\">\n\t\t\t\t\t<span class='close' id='41ttt_out'>&#10005</span></p>\n<pre class='text' id='41ttt_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>Things get more complicated for ordinary 3×3 tic-tac-toe. But since the multiway graph for the first two steps is a pure tree, the branchial graphs at these steps still have a rather trivial structure:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722tttimg42.png\" alt='' title='' width='506' height='315' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722tttimg42_copy.txt\">\n\t\t\t\t\t<span class='close' id='42ttt_out'>&#10005</span></p>\n<pre class='text' id='42ttt_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>In general the number of connected components on successive steps is as follows</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722tttimg43.png\" alt='' title='' width='545' height='79' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722tttimg43_copy.txt\">\n\t\t\t\t\t<span class='close' id='43ttt_out'>&#10005</span></p>\n<pre class='text' id='43ttt_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>and these are broken down across different graph structures as follows:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722tttimg44.png\" alt='' title='' width='562' height='322' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722tttimg44_copy.txt\">\n\t\t\t\t\t<span class='close' id='44ttt_out'>&#10005</span></p>\n<pre class='text' id='44ttt_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>Here in more detail are the forms of some typical components of branchial graphs achieved at particular steps: </p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722tttimg45.png\" alt='' title='' width='578' height='260' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722tttimg45_copy.txt\">\n\t\t\t\t\t<span class='close' id='45ttt_out'>&#10005</span></p>\n<pre class='text' id='45ttt_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>Within the branchial graph at a particular step, there can be different numbers of wins in different components:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722tttimg46.png\" alt='' title='' width='567' height='564' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722tttimg46_copy.txt\">\n\t\t\t\t\t<span class='close' id='46ttt_out'>&#10005</span></p>\n<pre class='text' id='46ttt_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>It’s notable that the wins are quite broadly distributed across branchial graphs. And this is in a sense why tic-tac-toe is not (more) trivial. If just by knowing what component of the branchial graph one was in one could immediately know the outcome, there would be even less “suspense” in the game. But with broad distribution across branchial space, “knowing roughly where you are” doesn’t help much in determining whether you’re going to win. </p>\n<p>So far we’ve always been talking about what states can be reached, but not “how often” they’re reached. Imagine that rather than playing a specific game, we instead at each step just make every possible move with equal probability. The setup for tic-tac-toe is symmetrical enough that for most of the game the probability of every possible configuration at a given step is equal. But as soon as there start to be “wins”, and there is a “cone” of “game-over-pruned” states, then the remaining states no longer have equal probabilities. </p>\n<p>For standard 3×3 tic-tac-toe this happens after 7 moves, where there are two classes of states, that occur with slightly different probabilities:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722tttimg47.png\" alt='' title='' width='566' height='119' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722tttimg47_copy.txt\">\n\t\t\t\t\t<span class='close' id='47ttt_out'>&#10005</span></p>\n<pre class='text' id='47ttt_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>At the end of the game, there are several classes of final states with different probabilities:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722tttimg48.png\" alt='' title='' width='566' height='299' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722tttimg48_copy.txt\">\n\t\t\t\t\t<span class='close' id='48ttt_out'>&#10005</span></p>\n<pre class='text' id='48ttt_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>And what this means for the probabilities of different outcomes of the game is as follows:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722tttimg49.png\" alt='' title='' width='483' height='135' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722tttimg49_copy.txt\">\n\t\t\t\t\t<span class='close' id='49ttt_out'>&#10005</span></p>\n<pre class='text' id='49ttt_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>Not surprisingly, the player who plays first has an advantage in winning. Perhaps more surprising is that in this kind of “strategyless” play, ties are comparatively uncommon—even though if one player actively tries to block the other, they often force a tie.</p>\n<p>We’ve looked at “classic tic-tac-toe” and a few specific variants. But there are ultimately all sorts of possible variants. And a convenient general way to represent the “board” for any tic-tac-toe-like game is just to give a “flattened” list of values—with 0 representing a blank position, and <em>i</em> representing a symbol added by player <em>i</em>.</p>\n<p>In standard “2D representation” one might have a board like</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722tttimg50.png\" alt='' title='' width='384' height='41' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722tttimg50_copy.txt\">\n\t\t\t\t\t<span class='close' id='50ttt_out'>&#10005</span></p>\n<pre class='text' id='50ttt_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>which in flattened form would be:</p>\n<table >\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722tttimg51.png\" alt='' title='' width='144' height='19' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722tttimg51_copy.txt\">\n\t\t\t\t\t<span class='close' id='51ttt_out'>&#10005</span></p>\n<pre class='text' id='51ttt_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>Typical winning patterns can then be represented</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722tttimg52.png\" alt='' title='' width='506' height='177' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722tttimg52_copy.txt\">\n\t\t\t\t\t<span class='close' id='52ttt_out'>&#10005</span></p>\n<pre class='text' id='52ttt_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>where in each case we have framed the relevant “winning symbols”, and then given their positions in the flattened list. In ordinary tic-tac-toe it’s clear that the positions of “winning symbols” must always form an arithmetic progression. And it seems as if a good way to generalize tic-tac-toe is always to define a win for <em>i</em> to be associated with the presence of <em>i</em> symbols at positions that form an arithmetic progression of a certain length <em>s</em>. For ordinary tic-tac-toe <em>s </em>= 3, but for generalizations it could have other values.</p>\n<p>Consider now the case of a length-5 list (i.e. 5-position “1D board”). The complete multiway graph is as follows, with “winning states” that contain arithmetic progressions of length <em>s </em>= 3 highlighted:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722tttimg53.png\" alt='' title='' width='578' height='289' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722tttimg53_copy.txt\">\n\t\t\t\t\t<span class='close' id='53ttt_out'>&#10005</span></p>\n<pre class='text' id='53ttt_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>In a more symmetrical rendering this is:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722tttimg54.png\" alt='' title='' width='462' height='297' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722tttimg54_copy.txt\">\n\t\t\t\t\t<span class='close' id='54ttt_out'>&#10005</span></p>\n<pre class='text' id='54ttt_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>Here’s the analogous result for a 7-position board, and 2 players:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722tttimg55.png\" alt='' title='' width='568' height='296' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722tttimg55_copy.txt\">\n\t\t\t\t\t<span class='close' id='55ttt_out'>&#10005</span></p>\n<pre class='text' id='55ttt_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>For each size of board <em>n</em>, we can compute the total number of winning states for any given player, as well as the total number of states altogether. The result when winning is based on arithmetic progressions of length 3 (i.e. <em>s</em> = 3) is:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722tttimg56.png\" alt='' title='' width='561' height='147' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722tttimg56_copy.txt\">\n\t\t\t\t\t<span class='close' id='56ttt_out'>&#10005</span></p>\n<pre class='text' id='56ttt_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>The 2-player <em>n</em> = 9 (= 3×3) case here is similar to ordinary tic-tac-toe, but not the same. In particular, states like</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722tttimg57.png\" alt='' title='' width='372' height='54' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722tttimg57_copy.txt\">\n\t\t\t\t\t<span class='close' id='57ttt_out'>&#10005</span></p>\n<pre class='text' id='57ttt_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>are considered wins for X in the flattened setup, but not in ordinary tic-tac-toe.</p>\n<p>If we increase the length of progression needed in order to declare a win, say to <em>s</em> = 4, we get:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722tttimg58.png\" alt='' title='' width='573' height='159' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722tttimg58_copy.txt\">\n\t\t\t\t\t<span class='close' id='58ttt_out'>&#10005</span></p>\n<pre class='text' id='58ttt_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>The total number of game states is unchanged, but—as expected—there are “fewer ways to win”.</p>\n<p>But let’s say we have boards that are completely filled in. For small board sizes there may well not be an arithmetic progression of positions for any player—so that the game has to be considered a tie—as we see in this <em>n </em>= 5 case:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722tttimg59.png\" alt='' title='' width='443' height='219' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722tttimg59_copy.txt\">\n\t\t\t\t\t<span class='close' id='59ttt_out'>&#10005</span></p>\n<pre class='text' id='59ttt_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>But it is a <a href='https://www.wolframscience.com/nks/notes-10-3--inevitable-regularities-and-ramsey-theory/'>result related to Ramsey theory that it turns out</a> that for <em>n</em> ≥ 9, it’s inevitable that there will be an “arithmetic progression win” for at least one of the players—so that there is never a tie—as these examples illustrate:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722tttimg60.png\" alt='' title='' width='467' height='202' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722tttimg60_copy.txt\">\n\t\t\t\t\t<span class='close' id='60ttt_out'>&#10005</span></p>\n<pre class='text' id='60ttt_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>&nbsp;</p>\n<h2 id='walks-and-their-multiway-graphs'>Walks and Their Multiway Graphs</h2>\n<p>A game like tic-tac-toe effectively involves at each step moving to one of several possible new board configurations—which we can think of as being at different “places” in “game state space”. But what if instead of board configurations we just consider our states to be positions on a lattice such as</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy'class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722walksimg1.png\" alt='' title='' width='350' height='104' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722walksimg1_copy.txt\">\n\t\t\t\t\t<span class='close' id='1walks_out'>&#10005</span></p>\n<pre class='text' id='1walks_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>and then we look at possible walks, that at each step can, in this case, go one unit in any of 4 directions?</p>\n<p>Starting at a particular point, the multiway graph after 1 step is just</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy'class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722walksimg2.png\" alt='' title='' width='490' height='100' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722walksimg2_copy.txt\">\n\t\t\t\t\t<span class='close' id='2walks_out'>&#10005</span></p>\n<pre class='text' id='2walks_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>where we have laid out this graph so that the “states” are placed at their geometrical positions on the lattice. </p>\n<p>After 2 steps we get:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy'class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722walksimg3.png\" alt='' title='' width='490' height='165' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722walksimg3_copy.txt\">\n\t\t\t\t\t<span class='close' id='3walks_out'>&#10005</span></p>\n<pre class='text' id='3walks_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>And in general the structure of the multiway graph just “recapitulates” the structure of the lattice:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy'class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722walksimg4.png\" alt='' title='' width='490' height='226' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722walksimg4_copy.txt\">\n\t\t\t\t\t<span class='close' id='4walks_out'>&#10005</span></p>\n<pre class='text' id='4walks_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>We can think of the paths in the multiway graph as representing all possible random walks of a certain length in the lattice. We can lay the graph out in 3D, with the vertical position representing the first step at which a given point can be reached:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy'class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722walksimg5.png\" alt='' title='' width='537' height='178' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722walksimg5_copy.txt\">\n\t\t\t\t\t<span class='close' id='5walks_out'>&#10005</span></p>\n<pre class='text' id='5walks_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>We can also lay out the graph more like we laid out multiway graphs for tic-tac-toe:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy'class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722walksimg6.png\" alt='' title='' width='476' height='137' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722walksimg6_copy.txt\">\n\t\t\t\t\t<span class='close' id='6walks_out'>&#10005</span></p>\n<pre class='text' id='6walks_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>One feature of these “random-walk” multiway graphs is that they contain loops, that record the possibility of “returning to places one’s already been”. And this is different from what happens for example in tic-tac-toe, in which at each step one is just adding an element to the board, and it’s never possible to go back.</p>\n<p>But we can set up a similar “never-go-back rule” for walks, by considering “<a href='https://www.wolframscience.com/nks/notes-7-6--self-avoiding-random-walks/'>self-avoiding walks</a>” in which any point that’s been visited can never be visited again. Let’s consider first the very trivial lattice:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy'class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722walksimg7.png\" alt='' title='' width='350' height='39' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722walksimg7_copy.txt\">\n\t\t\t\t\t<span class='close' id='7walks_out'>&#10005</span></p>\n<pre class='text' id='7walks_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>Now indicate the “current place we’ve reached” by a blue dot, and the places we’ve visited before by red dots—and start from one corner: </p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy'class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722walksimg8.png\" alt='' title='' width='241' height='210' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722walksimg8_copy.txt\">\n\t\t\t\t\t<span class='close' id='8walks_out'>&#10005</span></p>\n<pre class='text' id='8walks_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>There are only two possible walks here, one going clockwise, the other counterclockwise. Allowing one to start in each possible position yields a slightly more complicated multiway graph:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy'class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722walksimg9.png\" alt='' title='' width='377' height='158' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722walksimg9_copy.txt\">\n\t\t\t\t\t<span class='close' id='9walks_out'>&#10005</span></p>\n<pre class='text' id='9walks_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>With a 2×3 grid we get</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy'class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722walksimg10A.png\" alt='' title='' width='238' height='' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722walksimg10_copy.txt\">\n\t\t\t\t\t<span class='close' id='10walks_out'>&#10005</span></p>\n<pre class='text' id='10walks_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>while with a 3×3 grid we get:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy'class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722walksimg11.png\" alt='' title='' width='570' height='279' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722walksimg11_copy.txt\">\n\t\t\t\t\t<span class='close' id='11walks_out'>&#10005</span></p>\n<pre class='text' id='11walks_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>Starting in the center, and with a different layout for the multiway graph, we get:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy'class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722walksimg12.png\" alt='' title='' width='376' height='376' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722walksimg12_copy.txt\">\n\t\t\t\t\t<span class='close' id='12walks_out'>&#10005</span></p>\n<pre class='text' id='12walks_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>Note the presence of large “holes”, in which paths on each side basically “get to the same place” in “opposite ways”. Note that of the 2304 possible ways to have 1 blue dot and up to 8 red ones, this actual multiway graph reaches only 57. (Starting from the corner reaches 75 and from all possible initial positions 438.)</p>\n<p>With a 4×4 lattice (starting the walker in the corner) the multiway graph has the form</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy'class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722walksimg13.png\" alt='' title='' width='537' height='322' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722walksimg13_copy.txt\">\n\t\t\t\t\t<span class='close' id='13walks_out'>&#10005</span></p>\n<pre class='text' id='13walks_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>or in an alternative layout</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy'class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722walksimg14.png\" alt='' title='' width='461' height='238' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722walksimg14_copy.txt\">\n\t\t\t\t\t<span class='close' id='14walks_out'>&#10005</span></p>\n<pre class='text' id='14walks_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>where now 1677 states out of 524,288 are eventually visited, and the number of new states visited at each step (i.e. the number of nodes in successive layers in the graph) is:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy'class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722walksimg15.png\" alt='' title='' width='563' height='98' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722walksimg15_copy.txt\">\n\t\t\t\t\t<span class='close' id='15walks_out'>&#10005</span></p>\n<pre class='text' id='15walks_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>For a 5×5 grid 89,961 states are reached, distributed across steps according to:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy'class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722walksimg16.png\" alt='' title='' width='563' height='97' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722walksimg16_copy.txt\">\n\t\t\t\t\t<span class='close' id='16walks_out'>&#10005</span></p>\n<pre class='text' id='16walks_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>(For a grid with <em>n</em> vertices, there are a total of <em>n</em> 2<sup><em>n</em>–1</sup> possible states, but the number actually reached is always much smaller.)</p>\n<p>In talking about walks, an obvious question to ask is about mazes. Consider the maze:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy'class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722walksimg18.png\" alt='' title='' width='552' height='204' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722walksimg18_copy.txt\">\n\t\t\t\t\t<span class='close' id='18walks_out'>&#10005</span></p>\n<pre class='text' id='18walks_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>As far as traversing this maze is concerned, it is equivalent to “walking” on the graph</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy'class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722walksimg19.png\" alt='' title='' width='204' height='203' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722walksimg19_copy.txt\">\n\t\t\t\t\t<span class='close' id='19walks_out'>&#10005</span></p>\n<pre class='text' id='19walks_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>which in another embedding is just</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy'class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722walksimg20.png\" alt='' title='' width='514' height='450' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722walksimg20_copy.txt\">\n\t\t\t\t\t<span class='close' id='20walks_out'>&#10005</span></p>\n<pre class='text' id='20walks_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>But just as before, the multiway graph that represents all possible walks essentially just “recapitulates” this graph. And that means that “solving” the maze can in a sense equally be thought of as finding a path directly in the maze graph, or in the multiway graph:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy'class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722walksimg21.png\" alt='' title='' width='583' height='293' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722walksimg21_copy.txt\">\n\t\t\t\t\t<span class='close' id='21walks_out'>&#10005</span></p>\n<pre class='text' id='21walks_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>&nbsp;</p>\n<h2 id='the-icosian-game-&#038;-some-relatives'>The Icosian Game &#038; Some Relatives</h2>\n<p>Our discussion of self-avoiding walks turns out to be immediately related to the “<a href='https://mathworld.wolfram.com/IcosianGame.html'>Icosian game</a>” of William Rowan Hamilton from 1857 (which is somewhat related to the early computer game <em><a href='https://en.wikipedia.org/wiki/Hunt_the_Wumpus' target=_blank rel=noopener>Hunt the Wumpus</a></em>):</p>\n<p>\t<a href=\"https://twitter.com/Library_RIA/status/956476613096591360/photo/1\" target=\"_blank\" rel=\"noopener\"><img loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722icosianimg1.png\" alt='The Icosian game' title='The Icosian game' width='524' height='263' /></A></p>\n<p>The object of the “game” (or, more properly, puzzle) is to find a path (yes, a Hamiltonian path) around the icosahedron graph that visits every node (and returns back to where it started from). And once again we can construct a multiway graph that represents all possible sequences of “moves” in the game.</p>\n<p>Let’s start with the simpler case of an underlying tetrahedron graph:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722icosianrelativeimg2.png\" alt='' title='' width='350' height='69' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722icosianrelativeimg2_copy.txt\">\n\t\t\t\t\t<span class='close' id='2_out'>&#10005</span></p>\n<pre class='text' id='2_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>From this we get the multiway graph:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722icosianrelativeimg3.png\" alt='' title='' width='251' height='247' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722icosianrelativeimg3_copy.txt\">\n\t\t\t\t\t<span class='close' id='3_out'>&#10005</span></p>\n<pre class='text' id='3_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>The “combined multiway graph” from all possible starting positions on the tetrahedron graph gives a <a href='https://www.wolframalpha.com/input?i=truncated+cuboctahedron'>truncated cuboctahedron</a> multiway graph:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722icosianrelativeimg4.png\" alt='' title='' width='538' height='311' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722icosianrelativeimg4_copy.txt\">\n\t\t\t\t\t<span class='close' id='4_out'>&#10005</span></p>\n<pre class='text' id='4_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>And following this graph we see that from any initial state it’s always possible to reach a state where every node in the tetrahedron graph has been visited. In fact, because the tetrahedron graph is a complete graph it’s even guaranteed that the last node in the sequence will be “adjacent” to the starting node—so that one has formed a Hamiltonian cycle and solved the puzzle. </p>\n<p>Things are less trivial for the cube graph:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722icosianrelativeimg5.png\" alt='' title='' width='476' height='74' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722icosianrelativeimg5_copy.txt\">\n\t\t\t\t\t<span class='close' id='5_out'>&#10005</span></p>\n<pre class='text' id='5_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>The multiway graph (starting from a particular state) in this case is:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722icosianrelativeimg6.png\" alt='' title='' width='578' height='299' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722icosianrelativeimg6_copy.txt\">\n\t\t\t\t\t<span class='close' id='6_out'>&#10005</span></p>\n<pre class='text' id='6_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>Now there are 13 configurations where no further moves are possible: </p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722icosianrelativeimg7.png\" alt='' title='' width='524' height='36' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722icosianrelativeimg7_copy.txt\">\n\t\t\t\t\t<span class='close' id='7_out'>&#10005</span></p>\n<pre class='text' id='7_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>In some of these, one’s effectively “boxed in” with no adjacent node to visit. In others, all the nodes have been filled in. But only 3 ultimately achieve a true Hamiltonian cycle that ends adjacent to the starting node:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722icosianrelativeimg8.png\" alt='' title='' width='461' height='44' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722icosianrelativeimg8_copy.txt\">\n\t\t\t\t\t<span class='close' id='8_out'>&#10005</span></p>\n<pre class='text' id='8_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>It turns out that one can reach each of these states through 4 distinct paths from the root of the multiway graph. An example of such a path is: </p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722icosianrelativeimg9.png\" alt='' title='' width='566' height='65' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722icosianrelativeimg9_copy.txt\">\n\t\t\t\t\t<span class='close' id='9_out'>&#10005</span></p>\n<pre class='text' id='9_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>We can summarize this path as a Hamiltonian circuit of the original cube graph:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722icosianrelativeimg10.png\" alt='' title='' width='528' height='83' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722icosianrelativeimg10_copy.txt\">\n\t\t\t\t\t<span class='close' id='10_out'>&#10005</span></p>\n<pre class='text' id='10_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>In the multiway graph, the 12 “winning paths” are</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722icosianrelativeimg11.png\" alt='' title='' width='513' height='200' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722icosianrelativeimg11_copy.txt\">\n\t\t\t\t\t<span class='close' id='11_out'>&#10005</span></p>\n<pre class='text' id='11_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>In a different rendering this becomes</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722icosianrelativeimg12.png\" alt='' title='' width='521' height='339' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722icosianrelativeimg12_copy.txt\">\n\t\t\t\t\t<span class='close' id='12_out'>&#10005</span></p>\n<pre class='text' id='12_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>and keeping only “winning paths” the subgraph of the multiway graph has the symmetrical form:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722icosianrelativeimg13.png\" alt='' title='' width='562' height='164' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722icosianrelativeimg13_copy.txt\">\n\t\t\t\t\t<span class='close' id='13_out'>&#10005</span></p>\n<pre class='text' id='13_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>The actual Hamiltonian circuits through the underlying cube graph corresponding to these winning paths are:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722icosianrelativeimg14.png\" alt='' title='' width='458' height='316' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722icosianrelativeimg14_copy.txt\">\n\t\t\t\t\t<span class='close' id='14_out'>&#10005</span></p>\n<pre class='text' id='14_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>For the dodecahedral graph (i.e. the original Icosian game), the multiway graph is larger and more complicated. It begins</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722icosianrelativeimg15.png\" alt='' title='' width='620' height='189' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722icosianrelativeimg15_copy.txt\">\n\t\t\t\t\t<span class='close' id='15_out'>&#10005</span></p>\n<pre class='text' id='15_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>and has its first merge after 11 steps (and 529 in all), and ends up with a total of 11,093 nodes—of which 2446 are “end states” where no further move is possible. This shows the number of end (below) and non-end (above) states at each successive step: </p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722icosianrelativeimg16.png\" alt='' title='' width='576' height='133' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722icosianrelativeimg16_copy.txt\">\n\t\t\t\t\t<span class='close' id='16_out'>&#10005</span></p>\n<pre class='text' id='16_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>The successive fractions of “on-track-to-succeed” states are as follows, indicating that the puzzle is in a sense harder at the beginning than at the end:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722icosianrelativeimg17.png\" alt='' title='' width='576' height='125' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722icosianrelativeimg17_copy.txt\">\n\t\t\t\t\t<span class='close' id='17_out'>&#10005</span></p>\n<pre class='text' id='17_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>There are 13 “end states” which fill in every position of the underlying dodecahedral graph, with 3 of these corresponding to Hamiltonian cycles:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722icosianrelativeimg18.png\" alt='' title='' width='534' height='52' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722icosianrelativeimg18_copy.txt\">\n\t\t\t\t\t<span class='close' id='18_out'>&#10005</span></p>\n<pre class='text' id='18_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>The total number of paths from the root of the multiway graph leading to end states (in effect the total number of ways to try to solve the puzzle) is 3120. Of these, 60 lead to the 3 Hamiltonian cycle end states. An example of one of these “winning paths” is:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722icosianrelativeimg19.png\" alt='' title='' width='568' height='71' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722icosianrelativeimg19_copy.txt\">\n\t\t\t\t\t<span class='close' id='19_out'>&#10005</span></p>\n<pre class='text' id='19_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>Examples of underlying Hamiltonian cycles corresponding to each of the 3 Hamiltonian cycle end states are:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722icosianrelativeimg20.png\" alt='' title='' width='501' height='121' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722icosianrelativeimg20_copy.txt\">\n\t\t\t\t\t<span class='close' id='20_out'>&#10005</span></p>\n<pre class='text' id='20_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>And this now shows all 60 paths through the multiway graph that reach Hamiltonian cycle end states—and thus correspond to solutions to the puzzle:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722icosianrelativeimg21.png\" alt='' title='' width='610' height='522' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722icosianrelativeimg21_copy.txt\">\n\t\t\t\t\t<span class='close' id='21_out'>&#10005</span></p>\n<pre class='text' id='21_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>In effect, solving the puzzle consists in successfully finding these paths out of all the possibilities in the multiway graph. In practice, though—much as in theorem-proving, for example—there are considerably more efficient ways to find “winning paths” than to look directly at all possibilities in the multiway graph (e.g. <a href='https://reference.wolfram.com/language/ref/FindHamiltonianCycle.html'><tt>FindHamiltonianCycle</tt></a> in <a href='https://www.wolfram.com/language/'>Wolfram Language</a>). But for our purpose of understanding games and puzzles in a multicomputational framework, it’s useful to see how solutions to this puzzle lay out in the multiway graph.</p>\n<p>The Icosian game from Hamilton was what launched the idea of Hamiltonian cycles on graphs. But already in 1736 <a href='https://www.wolframalpha.com/input?i=Leonhard+Euler'>Leonhard Euler</a> had discussed what are now called Eulerian cycles in connection with the <a href='https://mathworld.wolfram.com/KoenigsbergBridgeProblem.html'>puzzle of the Bridges of Königsberg</a>. In modern terms, we can state the puzzle as the problem of finding a path that visits once and only once all the edges in the graph (in which the “double bridges” from the original puzzle have been disambiguated by extra nodes):</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722icosianrelativeimg22.png\" alt='' title='' width='364' height='72' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722icosianrelativeimg22A_copy.txt\">\n\t\t\t\t\t<span class='close' id='22A_out'>&#10005</span></p>\n<pre class='text' id='22A_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>We can create a multiway graph that represents all possible paths starting from a particular vertex:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722icosianrelativeimg23.png\" alt='' title='' width='578' height='300' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722icosianrelativeimg23A_copy.txt\">\n\t\t\t\t\t<span class='close' id='23A_out'>&#10005</span></p>\n<pre class='text' id='23A_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>But now we see that the end states here are</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722icosianrelativeimg24.png\" alt='' title='' width='497' height='127' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722icosianrelativeimg24A_copy.txt\">\n\t\t\t\t\t<span class='close' id='24A_out'>&#10005</span></p>\n<pre class='text' id='24A_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>and since none of them have visited every edge, there is no Eulerian circuit here. To completely resolve the puzzle we need to make a multiway graph in which we start from all possible underlying vertices. The result is a disconnected multiway graph whose end states again never visit every edge in the underlying graph (as one can tell from the fact that the number of “levels” in each subgraph is less than 10):</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722icosianrelativeimg25.png\" alt='' title='' width='573' height='168' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722icosianrelativeimg25A_copy.txt\">\n\t\t\t\t\t<span class='close' id='25A_out'>&#10005</span></p>\n<pre class='text' id='25A_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>&nbsp;</p>\n<h2 id='the-geography-game'>The Geography Game</h2>\n<p>In the Geography Game one has a collection of words (say place names) and then one attempts to “string the words together”, with the last letter of one word being the same as the first letter of the next. The game typically ends when nobody can come up with a word that works and hasn’t been used before. </p>\n<p>Usually in practice the game is played with multiple players. But one can perfectly well consider a version with just one player. And as an example let’s take our “words” to be the abbreviations for the states in the US. Then we can make a graph of what can follow what:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy'class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722geographyimg1.png\" alt='' title='' width='563' height='409' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722geographyimg1_copy.txt\">\n\t\t\t\t\t<span class='close' id='1geography_out'>&#10005</span></p>\n<pre class='text' id='1geography_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>Let’s at first ignore the question of whether a state has “already been used”. Then, starting, say, from Massachusetts (MA), we can construct the beginning of a multiway graph that gives us all possible sequences:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy'class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722geographyimg2.png\" alt='' title='' width='541' height='293' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722geographyimg2_copy.txt\">\n\t\t\t\t\t<span class='close' id='2geography_out'>&#10005</span></p>\n<pre class='text' id='2geography_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>After 10 steps the graph is</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy'class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722geographyimg3.png\" alt='' title='' width='525' height='228' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722geographyimg3_copy.txt\">\n\t\t\t\t\t<span class='close' id='3geography_out'>&#10005</span></p>\n<pre class='text' id='3geography_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>or in a different rendering:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy'class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722geographyimg4.png\" alt='' title='' width='531' height='254' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722geographyimg4_copy.txt\">\n\t\t\t\t\t<span class='close' id='4geography_out'>&#10005</span></p>\n<pre class='text' id='4geography_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>This shows the total number of paths as a function of length through this graph, assuming one doesn’t allow any state to be repeated:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy'class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722geographyimg5.png\" alt='' title='' width='491' height='149' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722geographyimg5_copy.txt\">\n\t\t\t\t\t<span class='close' id='5geography_out'>&#10005</span></p>\n<pre class='text' id='5geography_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>The maximum length of path is 23—and there are 256 such paths, 88 ending with TX and 168 ending with AZ. A few sample such paths are</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy'class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722geographyimg6.png\" alt='' title='' width='572' height='178' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722geographyimg6_copy.txt\">\n\t\t\t\t\t<span class='close' id='6geography_out'>&#10005</span></p>\n<pre class='text' id='6geography_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>and all these paths can be represented by what amounts to a finite state machine:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy'class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722geographyimg7.png\" alt='' title='' width='519' height='311' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722geographyimg7_copy.txt\">\n\t\t\t\t\t<span class='close' id='7geography_out'>&#10005</span></p>\n<pre class='text' id='7geography_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>By the way, the starting state that leads to the longest path is MN—which achieves length 24 in 2336 different ways, with possible endings being AZ, DE, KY and TX. A few samples are:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy'class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722geographyimg8.png\" alt='' title='' width='563' height='163' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722geographyimg8_copy.txt\">\n\t\t\t\t\t<span class='close' id='8geography_out'>&#10005</span></p>\n<pre class='text' id='8geography_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>Drawing these paths in the first few steps of the multiway graph starting from MN we get:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy'class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722geographyimg9.png\" alt='' title='' width='491' height='339' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722geographyimg9_copy.txt\">\n\t\t\t\t\t<span class='close' id='9geography_out'>&#10005</span></p>\n<pre class='text' id='9geography_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>&nbsp;</p>\n<h2 id='groups-and-(simplified)-rubik&rsquo;s-cubes'>Groups and (Simplified) Rubik&rsquo;s Cubes</h2>\n<p>We’ve talked about puzzles that effectively involve walks on graphs. A particularly famous example of a puzzle that can be thought about in this way is the Rubik’s Cube. The graph in question is then the Cayley graph for the group formed by the transformations that can be applied to the cube. </p>\n<p>As a very simple analog, we can consider the symmetry group of the square, <em>D</em><sub>4</sub>, based on the operations of reflection and 90° rotation. We generate the Cayley graph just like a multiway graph: by applying each operation at each step. And in this example the Cayley graph is:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722rubikimg2.png\" alt='' title='' width='495' height='233' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722rubikimg2_copy.txt\">\n\t\t\t\t\t<span class='close' id='2rubik_out'>&#10005</span></p>\n<pre class='text' id='2rubik_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>This graph is small enough that it is straightforward to see how to get from any configuration to any other. But while this Cayley graph has 8 nodes and maximum path length from any one node to any other of 3, the <a href='https://mathworld.wolfram.com/RubiksGroup.html'>Cayley graph for the Rubik&#8217;s Cube</a> has <img loading='lazy' style=\"margin-bottom: -5px\" src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722rubikimg3A.png\" width= '435' height='' /> nodes and a <a href='https://mathworld.wolfram.com/GodsNumber.html'>maximum shortest path length of 20</a>. </p>\n<p>To get some sense of the structure of an object like this, we can consider the very simplified case of a “2×2×2 cube”—colored only on its corners—in which each face can be rotated by 90°:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722rubikimg4.png\" alt='' title='' width='204' height='102' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722rubikimg4_copy.txt\">\n\t\t\t\t\t<span class='close' id='4rubik_out'>&#10005</span></p>\n<pre class='text' id='4rubik_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>The first step in the multiway graph—starting from the configuration above—is then (note that the edges in the graph are not directed, since the underlying transformations are always reversible):</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722rubikimg5.png\" alt='' title='' width='453' height='375' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722rubikimg5_copy.txt\">\n\t\t\t\t\t<span class='close' id='5rubik_out'>&#10005</span></p>\n<pre class='text' id='5rubik_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>Going another step gives:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722rubikimg6.png\" alt='' title='' width='453' height='350' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722rubikimg6_copy.txt\">\n\t\t\t\t\t<span class='close' id='6rubik_out'>&#10005</span></p>\n<pre class='text' id='6rubik_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>The complete multiway graph (which is also the Cayley graph for the group—which turns out to be <em>S</em><sub>8</sub>—generated by the transformations) has 8! = 40,320 nodes (and 483,840 edges). Starting from a state (i.e. node in the Cayley graph) the number of new states reached at successive steps is:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722rubikimg8.png\" alt='' title='' width='336' height='19' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722rubikimg8_copy.txt\">\n\t\t\t\t\t<span class='close' id='8rubik_out'>&#10005</span></p>\n<pre class='text' id='8rubik_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>The maximum shortest paths in the graph consist of 8 steps; an example is:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722rubikimg9.png\" alt='' title='' width='568' height='47' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722rubikimg9_copy.txt\">\n\t\t\t\t\t<span class='close' id='9rubik_out'>&#10005</span></p>\n<pre class='text' id='9rubik_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>Between these particular two endpoints there are actually 3216 “geodesic” paths—which spread out quite far in the multiway graph </p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722rubikimg11.png\" alt='' title='' width='631' height='' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722rubikimg11A_copy.txt\">\n\t\t\t\t\t<span class='close' id='11rubik_out'>&#10005</span></p>\n<pre class='text' id='11rubik_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>Picking out only geodesic paths we see there are many ways to get from one configuration of the cube to one of its “antipodes”:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722rubikimg10.png\" alt='' title='' width='572' height='310' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722rubikimg10_copy.txt\">\n\t\t\t\t\t<span class='close' id='10rubik_out'>&#10005</span></p>\n<pre class='text' id='10rubik_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>&nbsp;</p>\n<h2 id='peg-solitaire'>Peg Solitaire</h2>\n<p>Whereas something like tic-tac-toe involves progressively filling in a board, a large class of puzzles that have been used since at least the 1600s involve basically removing pegs from a board. The typical rules involve pegs being able to jump over a single intermediate peg into a hole, with the intermediate peg then being removed. The goal is to end up with just a single peg on the board. </p>\n<p>Here’s a very simple example based on a T arrangement of pegs: </p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img  loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722pegimg1.png\" alt='' title='' width='478' height='68' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722pegimg1_copy.txt\">\n\t\t\t\t\t<span class='close' id='1peg_out'>&#10005</span></p>\n<pre class='text' id='1peg_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>In this case, there’s only one way to “solve the puzzle”. But in general there’s a multiway graph:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img  loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722pegimg2.png\" alt='' title='' width='416' height='450' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722pegimg2_copy.txt\">\n\t\t\t\t\t<span class='close' id='2peg_out'>&#10005</span></p>\n<pre class='text' id='2peg_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>A more complicated example is the “Tricky Triangle” (AKA the “<a href='https://shop.crackerbarrel.com/toys-games/games/travel-games/peg-game/606154' target=_blank rel=noopener>Cracker Barrel puzzle</a>”). Its multiway graph begins:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img  loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722pegimg3.png\" alt='' title='' width='568' height='311' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722pegimg3_copy.txt\">\n\t\t\t\t\t<span class='close' id='3peg_out'>&#10005</span></p>\n<pre class='text' id='3peg_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>After another couple of steps it becomes:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img  loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722pegimg4.png\" alt='' title='' width='574' height='298' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722pegimg4_copy.txt\">\n\t\t\t\t\t<span class='close' id='4peg_out'>&#10005</span></p>\n<pre class='text' id='4peg_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>There are a total of 3016 states in the final multiway graph, of which 118 are “dead-end” configurations from which no further moves are possible. The “earliest” of these dead-end configurations are:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img  loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722pegimg5.png\" alt='' title='' width='511' height='191' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722pegimg5_copy.txt\">\n\t\t\t\t\t<span class='close' id='5peg_out'>&#10005</span></p>\n<pre class='text' id='5peg_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>There are just 4 “winning states” that can be reached, and the “end games” that lead to them are:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img  loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722pegimg6.png\" alt='' title='' width='583' height='360' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722pegimg6_copy.txt\">\n\t\t\t\t\t<span class='close' id='6peg_out'>&#10005</span></p>\n<pre class='text' id='6peg_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>Starting from the initial configuration, the number of possible states reached at each step is given as follows, where the states that can lead to winning configurations is shown in yellow: </p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img  loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722pegimg7A.png\" alt='' title='' width='303' height='' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722pegimg7_copy.txt\">\n\t\t\t\t\t<span class='close' id='7peg_out'>&#10005</span></p>\n<pre class='text' id='7peg_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>This shows the complete multiway graph, with “winning paths” highlighted:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img  loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722pegimg8.png\" alt='' title='' width='568' height='294' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722pegimg8_copy.txt\">\n\t\t\t\t\t<span class='close' id='8peg_out'>&#10005</span></p>\n<pre class='text' id='8peg_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>At successive steps, the fraction of states that can lead to a winning state is as follows:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img  loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722pegimg9.png\" alt='' title='' width='449' height='97' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722pegimg9_copy.txt\">\n\t\t\t\t\t<span class='close' id='9peg_out'>&#10005</span></p>\n<pre class='text' id='9peg_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>The branchial graphs are highly connected, implying that in a sense the puzzle remains “well mixed” and “unpredictable” until the very end:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img  loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722pegimg10.png\" alt='' title='' width='568' height='137' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722pegimg10_copy.txt\">\n\t\t\t\t\t<span class='close' id='10peg_out'>&#10005</span></p>\n<pre class='text' id='10peg_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>&nbsp;</p>\n<h2 id='checkers'>Checkers</h2>\n<p>Peg solitaire is a one-player “game”. Checkers (AKA draughts) is a two-player game with a somewhat similar setup. “Black” and “red” pieces move diagonally in different directions on a board, “taking” each other by jumping over when they are adjacent.</p>\n<p>Let’s consider the rather minimal example of a 4×4 board. The basic set of possible moves for “black” and “red” is defined by the graphs (note that a 4×4 board is too small to support “multiple jumps”):</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060723checkerimg1.png\" alt='' title='' width='529' height='158' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060723checkerimg1_copy.txt\">\n\t\t\t\t\t<span class='close' id='1checker_out'>&#10005</span></p>\n<pre class='text' id='1checker_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>With this setup we can immediately start to generate a multiway graph, based on alternating black and red moves:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060723checkerimg2.png\" alt='' title='' width='578' height='179' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060723checkerimg2_copy.txt\">\n\t\t\t\t\t<span class='close' id='2checker_out'>&#10005</span></p>\n<pre class='text' id='2checker_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>With the rules as defined so far, the full 161-node multiway graph is:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060723checkerimg3.png\" alt='' title='' width='578' height='394' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060723checkerimg3_copy.txt\">\n\t\t\t\t\t<span class='close' id='3checker_out'>&#10005</span></p>\n<pre class='text' id='3checker_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>It’s not completely clear what it means to “win” in this simple 4×4 case. But one possibility is to say that it happens when the other player can’t do anything at their next move. This corresponds to “dead ends” in the multiway graph. There are 26 of these, of which only 3 occur when it is red’s move next, and the rest all occur when it is black’s move:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060723checkerimg4.png\" alt='' title='' width='566' height='119' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060723checkerimg4_copy.txt\">\n\t\t\t\t\t<span class='close' id='4checker_out'>&#10005</span></p>\n<pre class='text' id='4checker_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>As before, any particular checkers game corresponds to a path in the multiway graph from the root to one of these end states. If we look at branchial graphs in this case, we find that they have many disconnected pieces, indicating that there are many largely independent “game paths” for this simple game&#8212;so there is not much “mixing” of outcomes: </p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060723checkerimg5.png\" alt='' title='' width='495' height='150' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060723checkerimg5_copy.txt\">\n\t\t\t\t\t<span class='close' id='5checker_out'>&#10005</span></p>\n<pre class='text' id='5checker_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060723checkerimg6.png\" alt='' title='' width='486' height='200' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060723checkerimg6_copy.txt\">\n\t\t\t\t\t<span class='close' id='6checker_out'>&#10005</span></p>\n<pre class='text' id='6checker_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>The rules we’ve used so far don’t account for what amounts to the second level of rules for checkers: the fact that when a piece reaches the other side of the board it becomes a “king” that’s allowed to move backwards as well as forwards. Even with a single piece and single player this already generates a multiway graph—notably now with loops:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060723checkerimg7.png\" alt='' title='' width='517' height='188' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060723checkerimg7_copy.txt\">\n\t\t\t\t\t<span class='close' id='7checker_out'>&#10005</span></p>\n<pre class='text' id='7checker_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>or in an alternative layout (with explicitly undirected edges):</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060723checkerimg8.png\" alt='' title='' width='287' height='218' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060723checkerimg8_copy.txt\">\n\t\t\t\t\t<span class='close' id='8checker_out'>&#10005</span></p>\n<pre class='text' id='8checker_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>With two pieces (and two players taking turns) the “kings” multiway graph begins:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060723checkerimg9A.png\" alt='' title='' width='520' height='' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060723checkerimg9_copy.txt\">\n\t\t\t\t\t<span class='close' id='9checker_out'>&#10005</span></p>\n<pre class='text' id='9checker_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>With this initial configuration, but without backward motion, the whole multiway graph is just:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060723checkerimg10.png\" alt='' title='' width='425' height='303' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060723checkerimg10_copy.txt\">\n\t\t\t\t\t<span class='close' id='10checker_out'>&#10005</span></p>\n<pre class='text' id='10checker_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>The full “kings” multiway graph in this case also only has 62 nodes—but includes all sorts of loops (though with this few pieces and black playing first it’s inevitable that any win will be for black):</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060723checkerimg11.png\" alt='' title='' width='575' height='300' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060723checkerimg11_copy.txt\">\n\t\t\t\t\t<span class='close' id='11checker_out'>&#10005</span></p>\n<pre class='text' id='11checker_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>What about the ordinary + kings multiway graph from our original initial conditions? The combined graph has 161 nodes from the “pre-king” phase, and 4302 from the “post-king” phase—giving the final form:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060723checkerimg12.png\" alt='' title='' width='541' height='387' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060723checkerimg12_copy.txt\">\n\t\t\t\t\t<span class='close' id='12checker_out'>&#10005</span></p>\n<pre class='text' id='12checker_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>&nbsp;</p>\n<h2 id='(very-simplified)-go'>(Very Simplified) Go</h2>\n<p>The full game of Go is sophisticated and its multiway graph in any realistic case is far too big for us to generate at all explicitly (though one can certainly wonder if there are meaningful “continuum limit” results). However, to get some flavor of Go we can consider a vastly simplified version in which black and white “stones” are progressively placed on nodes of a graph, and the game is considered “won” if one player has successfully surrounded a connected collection of the other player’s stones. </p>\n<p>Imagine that we start with a blank “board” consisting of a 2×2 square of positions, then on a sequence of “turns” add black and white stones in all possible ways. The resulting multiway graph is:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722goimg1.png\" alt='' title='' width='575' height='225' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722goimg1_copy.txt\">\n\t\t\t\t\t<span class='close' id='1go_out'>&#10005</span></p>\n<pre class='text' id='1go_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>Every state that has no successor here is a win for either black or white. The “black wins” (with the surrounded stone highlighted) are</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722goimg2.png\" alt='' title='' width='440' height='44' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722goimg2_copy.txt\">\n\t\t\t\t\t<span class='close' id='2go_out'>&#10005</span></p>\n<pre class='text' id='2go_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>while the “white wins” are:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722goimg3.png\" alt='' title='' width='440' height='44' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722goimg3_copy.txt\">\n\t\t\t\t\t<span class='close' id='3go_out'>&#10005</span></p>\n<pre class='text' id='3go_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>At this level what we have is basically equivalent to 2×2 tic-tac-toe, albeit with a “diagonal” win condition. With a 3×2 “board”, the first two steps in the multiway graph are:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722goimg4.png\" alt='' title='' width='577' height='161' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722goimg4_copy.txt\">\n\t\t\t\t\t<span class='close' id='4go_out'>&#10005</span></p>\n<pre class='text' id='4go_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>The final multiway graph is:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722goimg5.png\" alt='' title='' width='542' height='196' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722goimg5_copy.txt\">\n\t\t\t\t\t<span class='close' id='5go_out'>&#10005</span></p>\n<pre class='text' id='5go_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>The graph has 235 nodes, of which 24 are wins for white, and 34 for black:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722goimg6.png\" alt='' title='' width='593' height='137' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722goimg6_copy.txt\">\n\t\t\t\t\t<span class='close' id='6go_out'>&#10005</span></p>\n<pre class='text' id='6go_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>The successive branchial graphs in this case are (with wins for black and white indicated):</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722goimg7.png\" alt='' title='' width='515' height='330' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722goimg7_copy.txt\">\n\t\t\t\t\t<span class='close' id='7go_out'>&#10005</span></p>\n<pre class='text' id='7go_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>For a 3×3 “board” the multiway graph has 5172 states, with 604 being wins for white and 684 being wins for black.</p>\n<h2 id='nim'>Nim</h2>\n<p>As another example of a simple game, we’ll now consider Nim. In Nim, there are <em>k</em> piles of objects, and at each step <em>p</em> players alternate in removing as many objects as they want from whatever single pile they choose. The loser of the game is the player who is forced to have 0 objects in all the piles.</p>\n<p>Starting off with 2 piles each containing 2 objects, one can construct a multiway graph for the game:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722nimimg1.png\" alt='' title='' width='273' height='272' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722nimimg1_copy.txt\">\n\t\t\t\t\t<span class='close' id='1nim_out'>&#10005</span></p>\n<pre class='text' id='1nim_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>With 3 piles this becomes:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722nimimg2.png\" alt='' title='' width='577' height='316' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722nimimg2_copy.txt\">\n\t\t\t\t\t<span class='close' id='2nim_out'>&#10005</span></p>\n<pre class='text' id='2nim_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>These graphs show all the different possible moves that relate different configurations of the piles. However, they do not indicate which player moves when. Adding this we get in the 22 case</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722nimimg3.png\" alt='' title='' width='376' height='263' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722nimimg3_copy.txt\">\n\t\t\t\t\t<span class='close' id='3nim_out'>&#10005</span></p>\n<pre class='text' id='3nim_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>and in the 222 case:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722nimimg4.png\" alt='' title='' width='578' height='308' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722nimimg4_copy.txt\">\n\t\t\t\t\t<span class='close' id='4nim_out'>&#10005</span></p>\n<pre class='text' id='4nim_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>Even though these graphs look somewhat complicated, it turns out there is a very straightforward criterion for when a particular state has the property that its “opponent” can force a lose: just take the list of numbers and see if <tt><a href=\"https://reference.wolfram.com/language/ref/Apply.html\">Apply</a>[<a href=\"https://reference.wolfram.com/language/ref/BitXor.html\">BitXor</a>, list]</tt> is 0. Highlighting when this occurs we get:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722nimimg5.png\" alt='' title='' width='575' height='221' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722nimimg5_copy.txt\">\n\t\t\t\t\t<span class='close' id='5nim_out'>&#10005</span></p>\n<pre class='text' id='5nim_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>It turns that for Nim, the sequence of branchial graphs we get have a rather regular structure. In the 22 case, with the same highlighting as before, we get:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722nimimg6.png\" alt='' title='' width='574' height='109' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722nimimg6_copy.txt\">\n\t\t\t\t\t<span class='close' id='6nim_out'>&#10005</span></p>\n<pre class='text' id='6nim_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>In the 222 case the sequence of branchial graphs becomes:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722nimimg7.png\" alt='' title='' width='568' height='81' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722nimimg7_copy.txt\">\n\t\t\t\t\t<span class='close' id='7nim_out'>&#10005</span></p>\n<pre class='text' id='7nim_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>Here are results for some other cases:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722nimimg8.png\" alt='' title='' width='584' height='186' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722nimimg8_copy.txt\">\n\t\t\t\t\t<span class='close' id='8nim_out'>&#10005</span></p>\n<pre class='text' id='8nim_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>&nbsp;</p>\n<h2 id='sliding-block-puzzles'>Sliding Block Puzzles</h2>\n<p>They go under many names—with many different kinds of theming. But many puzzles are ultimately sliding block puzzles. A simple example might ask to go from</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722slidingimg1.png\" alt='' title='' width='394' height='44' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722slidingimg1_copy.txt\">\n\t\t\t\t\t<span class='close' id='1sliding_out'>&#10005</span></p>\n<pre class='text' id='1sliding_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>by sliding blocks into the empty (darker) square. A solution to this is:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722slidingimg2.png\" alt='' title='' width='455' height='41' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722slidingimg2_copy.txt\">\n\t\t\t\t\t<span class='close' id='2sliding_out'>&#10005</span></p>\n<pre class='text' id='2sliding_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>One can use a multiway graph to represent all possible transformations:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722slidingimg3.png\" alt='' title='' width='375' height='322' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722slidingimg3_copy.txt\">\n\t\t\t\t\t<span class='close' id='3sliding_out'>&#10005</span></p>\n<pre class='text' id='3sliding_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>(Note that only 12 of the 4! = 24 possible configurations of the blocks appear here; a configuration like <img loading='lazy' style=\"margin-bottom: -15px\" class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw050722slidingblock1.png\" alt='' title='' width='43' height='' /> cannot be reached.)</p>\n<p>Since blocks can always be “slid both ways” every edge in a sliding-block-puzzle multiway graph has an inverse—so going forward we’ll just draw these multiway graphs as undirected.</p>\n<p>Here are some simple cases:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722slidingimg4.png\" alt='' title='' width='569' height='193' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722slidingimg4_copy.txt\">\n\t\t\t\t\t<span class='close' id='4sliding_out'>&#10005</span></p>\n<pre class='text' id='4sliding_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722slidingimg5.png\" alt='' title='' width='508' height='223' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722slidingimg5_copy.txt\">\n\t\t\t\t\t<span class='close' id='5sliding_out'>&#10005</span></p>\n<pre class='text' id='5sliding_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>With a 3×2 board, things quickly get more complicated: </p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722slidingimg6.png\" alt='' title='' width='481' height='199' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722slidingimg6_copy.txt\">\n\t\t\t\t\t<span class='close' id='6sliding_out'>&#10005</span></p>\n<pre class='text' id='6sliding_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>Rendered in 3D this becomes:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722slidingimg7.png\" alt='' title='' width='356' height='141' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722slidingimg7_copy.txt\">\n\t\t\t\t\t<span class='close' id='7sliding_out'>&#10005</span></p>\n<pre class='text' id='7sliding_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>When all the blocks are distinct, one tends to get multiway graphs with a kind of spherical structure:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722slidingimg8.png\" alt='' title='' width='497' height='529' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722slidingimg8_copy.txt\">\n\t\t\t\t\t<span class='close' id='8sliding_out'>&#10005</span></p>\n<pre class='text' id='8sliding_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>(Note that in the first three cases here, it’s possible to reach all 30, 120, 360 conceivable arrangements of the blocks, while in the last case one can only reach “even permutations” of the blocks, or 360 of the 720 conceivable arrangements.)</p>\n<p>This shows how one gets from <img loading='lazy' style=\"margin-bottom: -15px\" class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw050722slidingblock2.png\" alt='' title='' width='52' height='' /> to <img loading='lazy' style=\"margin-bottom: -15px\" class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw050722slidingblock3.png\" alt='' title='' width='52' height='' />:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722slidingimg9.png\" alt='' title='' width='453' height='306' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722slidingimg9_copy.txt\">\n\t\t\t\t\t<span class='close' id='9sliding_out'>&#10005</span></p>\n<pre class='text' id='9sliding_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>With many identical blocks one tends to build up a simple lattice:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722slidingimg10.png\" alt='' title='' width='533' height='183' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722slidingimg10_copy.txt\">\n\t\t\t\t\t<span class='close' id='10sliding_out'>&#10005</span></p>\n<pre class='text' id='10sliding_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>Making one block different basically just “adds decoration”:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722slidingimg11A.png\" alt='' title='' width='496' height='' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722slidingimg11A_copy.txt\">\n\t\t\t\t\t<span class='close' id='11slidingA_out'>&#10005</span></p>\n<pre class='text' id='11slidingA_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>As the number of “1” and “2” blocks becomes closer to equal, the structure fills in:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722slidingimg12.png\" alt='' title='' width='573' height='451' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722slidingimg12_copy.txt\">\n\t\t\t\t\t<span class='close' id='12sliding_out'>&#10005</span></p>\n<pre class='text' id='12sliding_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>Adding a third type of block rapidly leads to a very complicated structure:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722slidingimg13.png\" alt='' title='' width='568' height='215' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722slidingimg13_copy.txt\">\n\t\t\t\t\t<span class='close' id='13sliding_out'>&#10005</span></p>\n<pre class='text' id='13sliding_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>This summarizes a few of the graphs obtained:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722slidingimg14.png\" alt='' title='' width='462' height='131' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722slidingimg14_copy.txt\">\n\t\t\t\t\t<span class='close' id='14sliding_out'>&#10005</span></p>\n<pre class='text' id='14sliding_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722slidingimg15.png\" alt='' title='' width='462' height='131' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722slidingimg15_copy.txt\">\n\t\t\t\t\t<span class='close' id='15sliding_out'>&#10005</span></p>\n<pre class='text' id='15sliding_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>&nbsp;</p>\n<h2 id='towers-of-hanoi,-etc.'>Towers of Hanoi, etc.</h2>\n<p>Another well-known puzzle is the Towers of Hanoi. And once again we can construct a multiway graph for it. Starting with all disks on the left peg the first step in the multiway graph is:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722hanoiimg1.png\" alt='' title='' width='506' height='127' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722hanoiimg1_copy.txt\">\n\t\t\t\t\t<span class='close' id='1hanoi_out'>&#10005</span></p>\n<pre class='text' id='1hanoi_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>Going two steps we get:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722hanoiimg2.png\" alt='' title='' width='506' height='175' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722hanoiimg2_copy.txt\">\n\t\t\t\t\t<span class='close' id='2hanoi_out'>&#10005</span></p>\n<pre class='text' id='2hanoi_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>The complete multiway graph is then (showing undirected edges in place of pairs of directed edges):</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722hanoiimg3.png\" alt='' title='' width='527' height='433' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722hanoiimg3_copy.txt\">\n\t\t\t\t\t<span class='close' id='3hanoi_out'>&#10005</span></p>\n<pre class='text' id='3hanoi_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>It is rather easy to see how the recursive structure of this multiway graph builds up. Here’s the “base case” of 2 disks (and 3 pegs):</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722hanoiimg4.png\" alt='' title='' width='438' height='284' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722hanoiimg4_copy.txt\">\n\t\t\t\t\t<span class='close' id='4hanoi_out'>&#10005</span></p>\n<pre class='text' id='4hanoi_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>And as each disk is added, the number of nodes in the multiway graph increases by a factor of 3—yielding for example with 4 disks (and still 3 pegs):</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722hanoiimg5.png\" alt='' title='' width='376' height='327' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722hanoiimg5_copy.txt\">\n\t\t\t\t\t<span class='close' id='5hanoi_out'>&#10005</span></p>\n<pre class='text' id='5hanoi_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>With 4 pegs, things at first look more complicated, even with 2 disks:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722hanoiimg6.png\" alt='' title='' width='484' height='265' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722hanoiimg6_copy.txt\">\n\t\t\t\t\t<span class='close' id='6hanoi_out'>&#10005</span></p>\n<pre class='text' id='6hanoi_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>In a 3D rendering, more structure begins to emerge:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722hanoiimg7.png\" alt='' title='' width='366' height='286' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722hanoiimg7_copy.txt\">\n\t\t\t\t\t<span class='close' id='7hanoi_out'>&#10005</span></p>\n<pre class='text' id='7hanoi_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>And here are the results for 3, 4 and 5 disks—with the “points of the ears” corresponding to states where all the disks are on a single peg:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722hanoiimg8.png\" alt='' title='' width='565' height='215' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722hanoiimg8_copy.txt\">\n\t\t\t\t\t<span class='close' id='8hanoi_out'>&#10005</span></p>\n<pre class='text' id='8hanoi_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>With 3 pegs, the shortest “solution to the puzzle”—of moving all disks from one peg to another—goes along the “side” of the multiway graph, and for <em>n</em> pegs is of length 2<sup><em>n</em></sup> – 1:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722hanoiimg10.png\" alt='' title='' width='408' height='252' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722hanoiimg10_copy.txt\">\n\t\t\t\t\t<span class='close' id='10hanoi_out'>&#10005</span></p>\n<pre class='text' id='10hanoi_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>With 4 pegs, there is no longer a unique “geodesic path”:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722hanoiimg11.png\" alt='' title='' width='565' height='215' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722hanoiimg11_copy.txt\">\n\t\t\t\t\t<span class='close' id='11hanoi_out'>&#10005</span></p>\n<pre class='text' id='11hanoi_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>(And the sequence of path lengths for successive numbers of pegs is</p>\n<table >\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722hanoiimg12.png\" alt='' title='' width='328' height='25' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722hanoiimg12_copy.txt\">\n\t\t\t\t\t<span class='close' id='12hanoi_out'>&#10005</span></p>\n<pre class='text' id='12hanoi_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>or a little below <img loading='lazy' class='' style=\"margin-bottom: -1px\" src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722hanoiimg18.png\" alt='' title='' width='39' height='' /> for a large number of pegs <em>n</em>.)</p>\n<p>What about branchial graphs? For the standard 3-disk 3-peg case we have</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722hanoiimg14.png\" alt='' title='' width='565' height='426' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722hanoiimg14_copy.txt\">\n\t\t\t\t\t<span class='close' id='14hanoi_out'>&#10005</span></p>\n<pre class='text' id='14hanoi_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>where successive “time slices” are assumed to be obtained by looking at successive vertical levels in the rendering of the multiway graph above. </p>\n<p>For 4 disks one essentially gets “more of the same”:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722hanoiimg15.png\" alt='' title='' width='555' height='161' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722hanoiimg15_copy.txt\">\n\t\t\t\t\t<span class='close' id='15hanoi_out'>&#10005</span></p>\n<pre class='text' id='15hanoi_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>With 4 pegs things become slightly more complicated:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722hanoiimg16.png\" alt='' title='' width='447' height='263' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722hanoiimg16_copy.txt\">\n\t\t\t\t\t<span class='close' id='16hanoi_out'>&#10005</span></p>\n<pre class='text' id='16hanoi_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>And the trend continues for 5 pegs:</p>\n<table class='InCell'>\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img loading='lazy' class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722hanoiimg17.png\" alt='' title='' width='589' height='199' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722hanoiimg17_copy.txt\">\n\t\t\t\t\t<span class='close' id='17hanoi_out'>&#10005</span></p>\n<pre class='text' id='17hanoi_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>&nbsp;</p>\n<h2 id='multicomputational-implications-&#038;-interpretation'>Multicomputational Implications &#038; Interpretation </h2>\n<p>We’ve now gone through many examples of games and puzzles. And in each case we’ve explored the multiway graphs that encapsulate the whole spectrum of their possible behavior. So what do we conclude? The most obvious point is that when games and puzzles seem to us difficult—and potentially “interesting”—it’s some kind of reflection of apparent complexity in the multiway graph. Or, put another way, it’s when we find the multiway graph somehow “difficult to decode” that we get a rich and engaging game or puzzle.</p>\n<p>In any particular instance of playing a game we’re basically following a specific path (that in analogy to physics we can call a “timelike path”) through the multiway graph (or “game graph”) for the game. And at some level we might just make the global statement that the game graph represents all such paths. But what the <a href='https://writings.stephenwolfram.com/2021/09/multicomputation-a-fourth-paradigm-for-theoretical-science/'>multicomputational paradigm</a> suggests is that there are also more local statements that we can usefully make. In particular, at every step along a timelike path we can look “transversally” in the multiway graph, and see the “instantaneous branchial graph” that represents the “entanglement” of our path with “nearby paths”.</p>\n<p>Figuring out “what move to make next” is then in a sense about deciding in “what direction” in branchial space to go. And what makes a game difficult is that we can’t readily predict what happens as we “<a href='https://writings.stephenwolfram.com/2022/03/on-the-concept-of-motion/#motion-beyond-physical-space:-the-branchial-case'>travel through branchial space</a>”. There’s a certain analogy here to the concept of <a href='https://www.wolframscience.com/nks/p737--computational-irreducibility/'>computational irreducibility</a>. Going from one state to another along some timelike path, computational irreducibility implies that even though we may know the underlying rules, we can’t readily predict their consequences—because it can require an irreducible amount of computation to figure out what their consequences will be after many steps. </p>\n<p>Predicting “across branchial space” is a related, but slightly different phenomenon, that one can describe as “<a href='https://www.wolframphysics.org/bulletins/2022/06/multicomputational-irreducibility/' target=_blank rel=noopener>multicomputational irreducibility</a>”. It’s not about the difficulty of working out a particular path of computation, but instead about the difficulty of seeing how many entangled paths interact.</p>\n<p>When one plays a game, it’s common to talk about “how many moves ahead one can see”. And in our terms here, this is basically about asking how “far out in branchial space” we can readily get. As <a href='https://writings.stephenwolfram.com/2021/03/what-is-consciousness-some-new-perspectives-from-our-physics-project/'>computationally bounded entities</a>, we have a certain “reach” in branchial space. And the game is “difficult for us” if that reach isn’t sufficient to be able to get to something like a “winning position”. </p>\n<p>There’s another point here, though. What counts as “winning” in a game is typically reaching some particular places or regions in the multiway graph. But the definition of these places or regions is typically something very computationally bounded (“just see if there’s a line of X’s”, etc.). It’s a certain “observation” of the system, that extracts just a particular (computationally bounded) sampling of the complete state. And then what’s key is that this sampling doesn’t manage to “decode the multicomputational irreducibility”. </p>\n<p>There’s an analogy here to thermodynamics. The fact that in thermodynamics we perceive “heat” and “entropy increase” is a consequence of the fact that our (coarse-grained) measurements can’t <a href='https://www.wolframscience.com/nks/p441--irreversibility-and-the-second-law-of-thermodynamics/'>&#8220;decode&#8221; the computationally irreducible process</a> that leads to the particular states generated in the system. Similarly, the fact we perceive it to be “hard to figure out how to win a game” is a consequence of the fact that our criterion for winning isn’t able to “look inside the playing of the game” and “decode what’s going on” to the point where it’s in effect just selecting one particular, straightforward path. Instead it’s a question of going through the multicomputationally irreducible process of playing the game, and in effect “seeing where it lands” relative to the observation of winning. </p>\n<p>There’s also an analogy here to quantum mechanics. Tracing through many possible paths of playing a game is like following many threads of history in quantum mechanics, and the criterion of winning is like a quantum measurement that selects certain threads. In our <a href='https://www.wolframphysics.org/' target=_blank rel=noopener>Physics Project</a> we imagine that we as observers are extended in branchial space, “knitting together” different threads of history through our belief in our own single thread of experience. In games, the analog of our belief in a single thread of experience is presumably in effect that “all that matters is who wins or loses; it doesn’t matter how the game is played inside”. </p>\n<p>To make a closer analogy with quantum mechanics one can start thinking about combining different chunks of “multiway game play”, and trying to work out a calculus for how those chunks fit together.</p>\n<p>The games we’ve discussed here are all in a sense pure “games of skill”. But in games where there’s also an element of chance we can think of this as causing what is otherwise a single path in the multiway graph to “fuzz out” into a bundle of paths, and what is otherwise a single point in branchial space to become a whole extended region.</p>\n<p>In studying different specific games and puzzles, we’ve often had to look at rather simplified cases in order to get multiway graphs of manageable size. But if we look at very large multiway graphs, are there perhaps overall regularities that will emerge? Is there potentially some kind of “continuum limit” for game graphs?</p>\n<p>It’ll almost inevitably be the case that if we look in “enough detail” we’ll see all sorts of multicomputational irreducibility in action. But in our Physics Project—and indeed in the multicomputational paradigm in general—a key issue is that relevant observers don’t see that level of detail. And much like the emergence of thermodynamics or the gas laws from underlying molecular dynamics, the very existence of underlying computational irreducibility inevitably leads to simple laws for what the observer can perceive.</p>\n<p>So what is the analog of “the observer” for a game? For at least some purposes it can be thought of as basically the “win” criteria. So now the question arises: if we look only at these criteria, can we derive the analog of “laws of physics”, insensitive to all the multicomputationally irreducible details underneath?</p>\n<p>There’s much more to figure out about this, but perhaps one place to start is to look at the large-scale structure of branchial space—and the multiway graph—in various games. And one basic impression in many different games is that—while the character of branchial graphs may change between “different stages” in the game—across a single branchial graph there tends to be a certain uniformity. If one looks at the details there may be plenty of multicomputational irreducibility. But at some kind of “perceptible level” different parts of the graph may seem similar. And this suggests that the “local impression of the game” will tend to be similar at a particular stage even when quite different moves have been made, that take one to quite different parts of the “game space” defined by the branchial graph.</p>\n<p>But while there may be similarity between different parts of the branchial graph, what we’ve seen is that in some games and puzzles the branchial graph breaks up into multiple disconnected regions. And what this reflects is the presence of distinct “conserved sectors” in a game—regions of game space that players can get into, but are then stuck with (at least for a certain time), much as in spacetime <a href='https://www.wolframphysics.org/bulletins/2020/05/event-horizons-singularities-and-other-exotic-spacetime-phenomena/' target=_blank rel=noopener>event horizons can prevent transport</a> between different regions of physical space. </p>\n<p>Another (related) effect that we notice in some games and puzzles but not others is large “holes” in the multiway graph: places where between two points in the graph there are multiple “distant” paths. When the multiway graph is densely connected, there’ll typically always be a way to “fix any mistake” by rerouting through nearby paths. But when there is a hole it is a sign that one can end up getting “committed” to one course of action rather than another, and it will be many steps before it’s possible to get to the same place as the other course of action would have reached. </p>\n<p>If we assume that at some level all we ultimately “observe” in the multiway graph is the kind of coarse-graining that corresponds to assessing winning or losing then inevitably we’ll be dealing with a distribution of possible paths. Without “holes” these paths can be close together, and may seem obviously similar. But when there’s a hole there can be different paths that are far apart. And the fact there can be distant paths that are “part of the same distribution” can then potentially be thought of as something like a quantum superposition effect. </p>\n<p>Are there analogs of general relativity and the path integral in games? To formulate this with clarity we’d have to define more carefully the character of “game space”. Presumably there’ll be the analog of a <a href='https://www.wolframphysics.org/technical-introduction/the-updating-process-for-string-substitution-systems/typical-causal-graphs/' target=_blank rel=noopener>causal graph</a>. And presumably there’ll also be an <a href='https://writings.stephenwolfram.com/2020/04/finally-we-may-have-a-path-to-the-fundamental-theory-of-physics-and-its-beautiful/#what-is-energy-what-is-mass'>analog of energy</a> in game space, associated with the “density of activity” at different places in game space. Then the analog of the phenomenon of gravity will be something like that the best game plays (i.e. the geodesic paths through the game graph) will tend to be deflected by the presence of high densities of activity. In other words, if there are lots of things to do when a game is in a certain state, good game plays will tend to be “pulled towards that state”. And at some level this isn’t surprising: when there’s high density of activity in the game graph, there will tend to be more options about what to do, so it’s more likely that one will be able to “do a good game play” if one goes through there.</p>\n<p>So far we didn’t explicitly talk about <a href='https://www.wolframscience.com/nks/notes-10-12--games-between-programs/'>strategies for games</a>. But in our multicomputational framework a strategy has a fairly definite interpretation: it is a place in <a href='https://writings.stephenwolfram.com/2021/11/the-concept-of-the-ruliad/'>rulial space</a>, where in effect one’s assuming a certain set of rules about how to construct the multiway graph. In other words, given a strategy one is choosing some edges in the multiway graph (or some possible events in the associated multiway causal graph), and dropping others. </p>\n<p>In general it can be hard to talk about the “space of possible strategies”—because it’s like talking about the “space of possible programs”. But this is precisely what rulial space lets us talk about. What exact “geometry” the “space of strategies” has will depend on how we choose to coordinatize rulial space. But once again there will tend to be a certain level of coarse-graining achieved by looking only at the kinds of things one discusses in game theory—and at this level we can expect that all sorts of standard “structural” game-theoretic results will generically hold.</p>\n<h2 id='personal-notes'>Personal Notes</h2>\n<p>Even as a kid I was never particularly into playing games or doing puzzles. And maybe it’s a sign I was always a bit too much of a scientist. Because just picking specific moves always seemed to me too arbitrary. To get my interest I needed a bigger picture, more of a coherent intellectual story. But now, in a sense, that’s just what the multicomputational approach to games and puzzles that I discuss here is bringing to us. Yes, it’s very “humanizing” to be able think about making particular moves. But the multicomputational approach immediately gives one a coherent global view that, at least to me, is intellectually much more satisfying.</p>\n<p>The explorations I’ve discussed here can be thought of as originating from a single note in<em> </em><em><a href='https://www.wolframscience.com/nks/'>A New Kind of Science</a></em>. In <a href='https://www.wolframscience.com/nks/chap-5--two-dimensions-and-beyond/'>Chapter 5</a> of <em>A New Kind of Science</em> I had a <a href='https://www.wolframscience.com/nks/p204--multiway-systems/'>section where I first introduced multiway systems</a>. And as the very <a href='https://www.wolframscience.com/nks/notes-5-6--game-systems/'>last note for that section I discussed &#8220;Game systems&#8221;</a>:</p>\n<table >\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722finaltwoimg1.png\" alt='Game systems' title='Game systems' width='564' height='181' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722finaltwoimg1_copy.txt\">\n\t\t\t\t\t<span class='close' id='1_out'>&#10005</span></p>\n<pre class='text' id='1_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>I did the research for this in the 1990s—and indeed I now find a notebook from 1998 about tic-tac-toe with some of the same results derived here</p>\n<table >\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722finaltwoimg2A.png\" alt='Tic-tac-toe ListPlot' title='Tic-tac-toe ListPlot' width='377' height='' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722finaltwoimg2_copy.txt\">\n\t\t\t\t\t<span class='close' id='2_out'>&#10005</span></p>\n<pre class='text' id='2_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>together with a curious-looking graphical representation of the tic-tac-toe game graph:</p>\n<table >\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722finaltwoimg3A.png\" alt='Tic-tac-toe game graph' title='Tic-tac-toe game graph' width='385' height='' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722finaltwoimg3_copy.txt\">\n\t\t\t\t\t<span class='close' id='3_out'>&#10005</span></p>\n<pre class='text' id='3_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>But back at that time I didn’t conclude much from the game graphs I generated; they just seemed large and complicated. Twenty years passed and I didn’t think much more about this. But then in 2017 <a href='https://www.christopherwolfram.com/' target=_blank rel=noopener>my son Christopher</a> was playing with a puzzle called Rush Hour:</p>\n<p>\t<a href=\"https://en.wikipedia.org/wiki/Rush_Hour_(puzzle)#/media/File:Rush_Hour_sliding_block_puzzle.jpg\" target=\"_blank\" rel=\"noreferrer noopener\"><img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722finaltwoimg4.png\" alt='Rush Hour game' title='Rush Hour game' width='301' height='161' /></a></p>\n<p>And perhaps in a sign of familial tendency he decided <a href='https://christopherwolfram.com/projects/rush-hour/' target=_blank rel=noopener>to construct its game graph</a>—coming up with what to me seemed like a very surprising result:</p>\n<table >\n<tbody>\n<tr>\n<td colspan='1' rowspan='1' class='Input'>\n<div>\n\t\t\t\t\t<img class='' src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722finaltwoimg5.png\" alt='Rush Hour game graph' title='Rush Hour game graph' width='272' height='238' />\n\t\t\t\t</div>\n<div class='IFL' data-src=\"https://content.wolfram.com/uploads/sites/43/2022/06/sw060722finaltwoimg5_copy.txt\">\n\t\t\t\t\t<span class='close' id='5_out'>&#10005</span></p>\n<pre class='text' id='5_out_text'></pre>\n</p></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>At the time I didn’t try to understand the structure one has here—but I still “filed this away” as evidence that game graphs can have “visible large-scale structure”. </p>\n<p>A couple of years later—in late 2019—our <a href='https://writings.stephenwolfram.com/2020/04/how-we-got-here-the-backstory-of-the-wolfram-physics-project/'>Physics Project was underway</a> and we’d realized that there are deep relations between quantum mechanics and multiway graphs. Quantum mechanics had always seemed like something mysterious—the abstract result of pure mathematical formalism. But seeing the connection to multiway systems began to suggest that one might actually be able to “understand quantum mechanics” as something that could “mechanically arise” from some concrete underlying structure.</p>\n<p>I started to think about finding ways to explain quantum mechanics at an intuitive level. And for that I needed a familiar analogy: something everyday that one could connect to multiway systems. I immediately thought about games. And in <a href='https://www.wolframphysics.org/archives/index?i=2020' target=_blank rel=noopener>September 2020 I decided to take a look</a> at games to explore this analogy in more detail. I quickly analyzed games like tic-tac-toe and Nim—as well as simple sliding block puzzles and the Towers of Hanoi. But I wanted to explore more games and puzzles. And I had <a href='https://writings.stephenwolfram.com/all-by-date/'>other projects to do</a>, so the multicomputational analysis of games and puzzles got set aside. The Towers of Hanoi reappeared earlier this year, when I <a href='https://writings.stephenwolfram.com/2022/03/the-physicalization-of-metamathematics-and-its-implications-for-the-foundations-of-mathematics/#the-topology-of-proof-space'>used it as an example of generating a proof-like multiway graph</a>, in connection with my study of the <a href='https://writings.stephenwolfram.com/2022/03/the-physicalization-of-metamathematics-and-its-implications-for-the-foundations-of-mathematics/'>physicalization of metamathematics</a>. And finally, a few weeks ago I decided it was time to write down what I knew so far about games and puzzles—and produce what’s here.</p>\n<h2 id='thanks' style='font-size:1.2rem'>Thanks</h2>\n<p style='font-size:90%'>Thanks to Brad Klee and Ed Pegg for extensive help in the final stages of the analysis given here—as well as to Christopher Wolfram for inspiration in 2017, and help in 2020.</p>\n",
  "wfw:commentRss": "https://writings.stephenwolfram.com/2022/06/games-and-puzzles-as-multicomputational-systems/feed/",
  "slash:comments": 1
}