{
  "title": "Argo vs Airflow vs Prefect: How Are They Different",
  "link": "https://neptune.ai/blog/argo-vs-airflow-vs-prefect-differences",
  "dc:creator": "Nilesh Barla",
  "pubDate": "Fri, 04 Nov 2022 09:04:34 +0000",
  "category": [
    "Machine Learning Tools",
    "model management"
  ],
  "guid": "https://neptune.ai/?p=72250",
  "description": "<p>We live at a stage where ML and DL software are everywhere. New startups and various other companies are adapting and integrating AI systems into their new and already existing workflows to be much more productive and efficient. These systems reduce manual tasks and deliver smart and intelligent solutions. Although they are quite proficient in [&#8230;]</p>\n<p>The post <a rel=\"nofollow\" href=\"https://neptune.ai/blog/argo-vs-airflow-vs-prefect-differences\">Argo vs Airflow vs Prefect: How Are They Different</a> appeared first on <a rel=\"nofollow\" href=\"https://neptune.ai\">neptune.ai</a>.</p>\n",
  "content:encoded": "\n<p>We live at a stage where ML and DL software are everywhere. New startups and various other companies are adapting and integrating AI systems into their new and already existing workflows to be much more productive and efficient. These systems reduce manual tasks and deliver smart and intelligent solutions. Although they are quite proficient in what they do, all AI systems have different modules that must be brought together to build an operational and effective product.&nbsp;</p>\n\n\n\n<p>These systems can be broadly divided into five phases, keeping in mind that these phases contain various additional and repetitive tasks:</p>\n\n\n<div class=\"case-study-numbered-list\">\n    <h2></h2>\n    <ul>\n                    <li><span>1</span>Data collection </li>\n                    <li><span>2</span>Feature engineering</li>\n                    <li><span>3</span>Modeling (which includes training, validation, testing, and inference)</li>\n                    <li><span>4</span>Deployment </li>\n                    <li><span>5</span>Monitoring</li>\n            </ul>\n</div>\n\n\n\n<p>Executing these phases individually can take a lot of time and continuous human effort. These phases must be synchronized and sequentially orchestrated in order to get the best out of them. This can be achieved by <strong>task orchestration tools</strong> that enable ML practitioners to effortlessly bring together and orchestrate different phases of an AI system.</p>\n\n\n<div id=\"block_a590483c437b08259999f8b6675fb640\" class=\"separator separator-15\"></div>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-large is-resized\"><img data-attachment-id=\"72252\" data-permalink=\"https://neptune.ai/argo-vs-airflow-vs-prefect-1\" data-orig-file=\"https://i0.wp.com/neptune.ai/wp-content/uploads/argo-vs-airflow-vs-prefect-1.png?fit=1443%2C1600&ssl=1\" data-orig-size=\"1443,1600\" data-comments-opened=\"0\" data-image-meta=\"{\"aperture\":\"0\",\"credit\":\"\",\"camera\":\"\",\"caption\":\"\",\"created_timestamp\":\"0\",\"copyright\":\"\",\"focal_length\":\"0\",\"iso\":\"0\",\"shutter_speed\":\"0\",\"title\":\"\",\"orientation\":\"0\"}\" data-image-title=\"argo-vs-airflow-vs-prefect-1\" data-image-description=\"\" data-image-caption=\"\" data-medium-file=\"https://i0.wp.com/neptune.ai/wp-content/uploads/argo-vs-airflow-vs-prefect-1.png?fit=271%2C300&ssl=1\" data-large-file=\"https://i0.wp.com/neptune.ai/wp-content/uploads/argo-vs-airflow-vs-prefect-1.png?fit=924%2C1024&ssl=1\" decoding=\"async\" src=\"https://i0.wp.com/neptune.ai/wp-content/uploads/argo-vs-airflow-vs-prefect-1.png?resize=693%2C768&#038;ssl=1\" alt=\"Phases of AI systems\" class=\"wp-image-72252\" width=\"693\" height=\"768\" data-recalc-dims=\"1\" /><figcaption class=\"wp-element-caption\"><em>Phases of AI systems | <a href=\"https://www.datarevenue.com/en-blog/what-we-are-loving-about-prefect\" target=\"_blank\" rel=\"noreferrer noopener nofollow\">Source</a></em></figcaption></figure></div>\n\n<div id=\"block_85ff0a448aeeb70a2a8cdd832cd74858\" class=\"separator separator-10\"></div>\n\n\n\n<p>In this article, we will explore:</p>\n\n\n<div class=\"case-study-numbered-list\">\n    <h2></h2>\n    <ul>\n                    <li><span>1</span>What task orchestration tools are?</li>\n                    <li><span>2</span>Three different tools that can help ML practitioners to orchestrate their workflow.</li>\n                    <li><span>3</span>Comparison of the three tools</li>\n                    <li><span>4</span>Which tool to use and when?</li>\n            </ul>\n</div>\n\n\n\n<h2>Task orchestration tools: What they are and how are they useful?</h2>\n\n\n\n<p>Orchestration tools enable various tasks in MLOps to be organized and sequentially executed. These tools have the capability to orchestrate different tasks at a given period. One of the key properties of these tools is the distribution of tasks. Most of the tools leverage what is known as the DAG or Directed Acyclic Graph, which you will often come across in this article. A DAG is a graph representation of the tasks that need to be executed.&nbsp;</p>\n\n\n<div id=\"block_85ff0a448aeeb70a2a8cdd832cd74858\" class=\"separator separator-10\"></div>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-large is-resized\"><img data-attachment-id=\"72253\" data-permalink=\"https://neptune.ai/argo-vs-airflow-vs-prefect-2\" data-orig-file=\"https://i0.wp.com/neptune.ai/wp-content/uploads/argo-vs-airflow-vs-prefect-2.png?fit=1472%2C1334&ssl=1\" data-orig-size=\"1472,1334\" data-comments-opened=\"0\" data-image-meta=\"{\"aperture\":\"0\",\"credit\":\"\",\"camera\":\"\",\"caption\":\"\",\"created_timestamp\":\"0\",\"copyright\":\"\",\"focal_length\":\"0\",\"iso\":\"0\",\"shutter_speed\":\"0\",\"title\":\"\",\"orientation\":\"0\"}\" data-image-title=\"argo-vs-airflow-vs-prefect-2\" data-image-description=\"\" data-image-caption=\"\" data-medium-file=\"https://i0.wp.com/neptune.ai/wp-content/uploads/argo-vs-airflow-vs-prefect-2.png?fit=300%2C272&ssl=1\" data-large-file=\"https://i0.wp.com/neptune.ai/wp-content/uploads/argo-vs-airflow-vs-prefect-2.png?fit=1024%2C928&ssl=1\" decoding=\"async\" src=\"https://i0.wp.com/neptune.ai/wp-content/uploads/argo-vs-airflow-vs-prefect-2.png?resize=768%2C696&#038;ssl=1\" alt=\"Explanation of DAG\" class=\"wp-image-72253\" width=\"768\" height=\"696\" data-recalc-dims=\"1\" /><figcaption class=\"wp-element-caption\"><em>Graphic explanation of DAG | <a href=\"https://www.datarevenue.com/en-blog/airflow-vs-luigi-vs-argo-vs-mlflow-vs-kubeflow\" target=\"_blank\" rel=\"noreferrer noopener nofollow\">Source</a>&nbsp;</em></figcaption></figure></div>\n\n<div id=\"block_85ff0a448aeeb70a2a8cdd832cd74858\" class=\"separator separator-10\"></div>\n\n\n\n<p>DAG enables tasks in a pipeline to be distributed parallelly to various other modules for processing, this offers efficiency. See the image above. DAG also enables tasks to be sequentially sound or arranged for proper execution and timely results.</p>\n\n\n\n<p>Another important property that these tools have is adaptability to agile environments. This allows ML practitioners to incorporate various other tools that can be used to monitor, deploy, analyze and preprocess, test, infer, et cetera. If an orchestration tool can orchestrate various tasks from different tools, then it can be considered a good tool. But this is not the case every time, some of the tools are strictly contained within their derived environments, which does not bode well for users trying to integrate any third-party applications.&nbsp;</p>\n\n\n\n<p>In this article, we will explore three tools – <a href=\"https://argoproj.github.io/\" target=\"_blank\" rel=\"noreferrer noopener nofollow\">Argo</a>, <a href=\"https://airflow.apache.org/\" target=\"_blank\" rel=\"noreferrer noopener nofollow\">Airflow</a>, and <a href=\"https://www.prefect.io/\" target=\"_blank\" rel=\"noreferrer noopener nofollow\">Prefect</a>, that incorporate these two properties and various others as well.&nbsp;</p>\n\n\n\n<h2>TL;DR comparison table&nbsp;</h2>\n\n\n\n<p>Here is a table inspired by <a href=\"https://medium.com/arthur-engineering/picking-a-kubernetes-orchestrator-airflow-argo-and-prefect-83539ecc69b\" target=\"_blank\" rel=\"noreferrer noopener nofollow\">Ian McGraw&#8217;s article</a>, which provides an overview of what these tools offer for orchestration and how they differ from each other in these aspects.</p>\n\n\n<div id=\"block_1f2b87c2de136cd7e7f6f69de21adf08\" class=\"separator separator-15\"></div>\n\n\n<div class=\"medium-table\">\n        <div class=\"mt-row heading\">\n            <div class=\"mt-col\" style=\"width: 8%\">\n                    </div>\n            <div class=\"mt-col\" style=\"width: 23%\">\n            Features        </div>\n            <div class=\"mt-col\" style=\"width: 23%\">\n            Argo        </div>\n            <div class=\"mt-col\" style=\"width: 23%\">\n            Airflow        </div>\n            <div class=\"mt-col\" style=\"width: 23%\">\n            Prefect        </div>\n        </div>\n    \n            <div class=\"mt-row\">\n                            <div class=\"mt-col\" style=\"width: 8%\">\n                                                                <p><strong>1.</strong></p>\n                                    </div>\n                            <div class=\"mt-col\" style=\"width: 23%\">\n                                        <span class=\"column-name\">\n                        Features:\n                    </span>\n                                                                <p>Fault-tolerant scheduling</p>\n                                    </div>\n                            <div class=\"mt-col\" style=\"width: 23%\">\n                                        <span class=\"column-name\">\n                        Argo:\n                    </span>\n                                                                                            <img decoding=\"async\" src=\"https://neptune.ai/wp-content/themes/neptune-experience/img/unchecked.svg\"/>\n                                                            </div>\n                            <div class=\"mt-col\" style=\"width: 23%\">\n                                        <span class=\"column-name\">\n                        Airflow:\n                    </span>\n                                                                                            <img decoding=\"async\" src=\"https://neptune.ai/wp-content/themes/neptune-experience/img/checked.svg\"/>\n                                                            </div>\n                            <div class=\"mt-col\" style=\"width: 23%\">\n                                        <span class=\"column-name\">\n                        Prefect:\n                    </span>\n                                                                                            <img decoding=\"async\" src=\"https://neptune.ai/wp-content/themes/neptune-experience/img/checked.svg\"/>\n                                                            </div>\n                    </div>\n            <div class=\"mt-row\">\n                            <div class=\"mt-col\" style=\"width: 8%\">\n                                                                <p><strong>2.</strong></p>\n                                    </div>\n                            <div class=\"mt-col\" style=\"width: 23%\">\n                                        <span class=\"column-name\">\n                        Features:\n                    </span>\n                                                                <p>UI Support</p>\n                                    </div>\n                            <div class=\"mt-col\" style=\"width: 23%\">\n                                        <span class=\"column-name\">\n                        Argo:\n                    </span>\n                                                                                            <img decoding=\"async\" src=\"https://neptune.ai/wp-content/themes/neptune-experience/img/checked.svg\"/>\n                                                            </div>\n                            <div class=\"mt-col\" style=\"width: 23%\">\n                                        <span class=\"column-name\">\n                        Airflow:\n                    </span>\n                                                                                            <img decoding=\"async\" src=\"https://neptune.ai/wp-content/themes/neptune-experience/img/checked.svg\"/>\n                                                            </div>\n                            <div class=\"mt-col\" style=\"width: 23%\">\n                                        <span class=\"column-name\">\n                        Prefect:\n                    </span>\n                                                                                            <img decoding=\"async\" src=\"https://neptune.ai/wp-content/themes/neptune-experience/img/checked.svg\"/>\n                                                            </div>\n                    </div>\n            <div class=\"mt-row\">\n                            <div class=\"mt-col\" style=\"width: 8%\">\n                                                                <p><strong>3.</strong></p>\n                                    </div>\n                            <div class=\"mt-col\" style=\"width: 23%\">\n                                        <span class=\"column-name\">\n                        Features:\n                    </span>\n                                                                <p>Workflow definitionlanguage</p>\n                                    </div>\n                            <div class=\"mt-col\" style=\"width: 23%\">\n                                        <span class=\"column-name\">\n                        Argo:\n                    </span>\n                                                                <p>YAML</p>\n                                    </div>\n                            <div class=\"mt-col\" style=\"width: 23%\">\n                                        <span class=\"column-name\">\n                        Airflow:\n                    </span>\n                                                                <p>Python</p>\n                                    </div>\n                            <div class=\"mt-col\" style=\"width: 23%\">\n                                        <span class=\"column-name\">\n                        Prefect:\n                    </span>\n                                                                <p>Pytchon</p>\n                                    </div>\n                    </div>\n            <div class=\"mt-row\">\n                            <div class=\"mt-col\" style=\"width: 8%\">\n                                                                <p><strong>4.</strong></p>\n                                    </div>\n                            <div class=\"mt-col\" style=\"width: 23%\">\n                                        <span class=\"column-name\">\n                        Features:\n                    </span>\n                                                                <p>3rd partyintegration</p>\n                                    </div>\n                            <div class=\"mt-col\" style=\"width: 23%\">\n                                        <span class=\"column-name\">\n                        Argo:\n                    </span>\n                                                                <p>Since Argo is container-based it doesn’t come with pre-installed 3rd party systems.</p>\n                                    </div>\n                            <div class=\"mt-col\" style=\"width: 23%\">\n                                        <span class=\"column-name\">\n                        Airflow:\n                    </span>\n                                                                <p>Supports various 3rd party integration</p>\n                                    </div>\n                            <div class=\"mt-col\" style=\"width: 23%\">\n                                        <span class=\"column-name\">\n                        Prefect:\n                    </span>\n                                                                <p>Supports various 3rd party integration</p>\n                                    </div>\n                    </div>\n            <div class=\"mt-row\">\n                            <div class=\"mt-col\" style=\"width: 8%\">\n                                                                <p><strong>5.</strong></p>\n                                    </div>\n                            <div class=\"mt-col\" style=\"width: 23%\">\n                                        <span class=\"column-name\">\n                        Features:\n                    </span>\n                                                                <p>Workflows</p>\n                                    </div>\n                            <div class=\"mt-col\" style=\"width: 23%\">\n                                        <span class=\"column-name\">\n                        Argo:\n                    </span>\n                                                                <p>Dynamic workflow</p>\n                                    </div>\n                            <div class=\"mt-col\" style=\"width: 23%\">\n                                        <span class=\"column-name\">\n                        Airflow:\n                    </span>\n                                                                <p>Static workflow</p>\n                                    </div>\n                            <div class=\"mt-col\" style=\"width: 23%\">\n                                        <span class=\"column-name\">\n                        Prefect:\n                    </span>\n                                                                <p>Dynamic workflow</p>\n                                    </div>\n                    </div>\n            <div class=\"mt-row\">\n                            <div class=\"mt-col\" style=\"width: 8%\">\n                                                                <p><strong>6.</strong></p>\n                                    </div>\n                            <div class=\"mt-col\" style=\"width: 23%\">\n                                        <span class=\"column-name\">\n                        Features:\n                    </span>\n                                                                <p>Accessibility</p>\n                                    </div>\n                            <div class=\"mt-col\" style=\"width: 23%\">\n                                        <span class=\"column-name\">\n                        Argo:\n                    </span>\n                                                                <p>Open-sourced</p>\n                                    </div>\n                            <div class=\"mt-col\" style=\"width: 23%\">\n                                        <span class=\"column-name\">\n                        Airflow:\n                    </span>\n                                                                <p>Open-source</p>\n                                    </div>\n                            <div class=\"mt-col\" style=\"width: 23%\">\n                                        <span class=\"column-name\">\n                        Prefect:\n                    </span>\n                                                                <p>Hybrid (Open-sourced and subscription-based)</p>\n                                    </div>\n                    </div>\n            <div class=\"mt-row\">\n                            <div class=\"mt-col\" style=\"width: 8%\">\n                                                                <p><strong>7.</strong></p>\n                                    </div>\n                            <div class=\"mt-col\" style=\"width: 23%\">\n                                        <span class=\"column-name\">\n                        Features:\n                    </span>\n                                                                <p>Parametrized workflows</p>\n                                    </div>\n                            <div class=\"mt-col\" style=\"width: 23%\">\n                                        <span class=\"column-name\">\n                        Argo:\n                    </span>\n                                                                <p>Have an extensive parameter-passing syntax.</p>\n                                    </div>\n                            <div class=\"mt-col\" style=\"width: 23%\">\n                                        <span class=\"column-name\">\n                        Airflow:\n                    </span>\n                                                                <p>Does not has a mechanism to pass parameter.</p>\n                                    </div>\n                            <div class=\"mt-col\" style=\"width: 23%\">\n                                        <span class=\"column-name\">\n                        Prefect:\n                    </span>\n                                                                <p>Supports parameters as first-class object</p>\n                                    </div>\n                    </div>\n            <div class=\"mt-row\">\n                            <div class=\"mt-col\" style=\"width: 8%\">\n                                                                <p><strong>8.</strong></p>\n                                    </div>\n                            <div class=\"mt-col\" style=\"width: 23%\">\n                                        <span class=\"column-name\">\n                        Features:\n                    </span>\n                                                                <p>Kubernetes support</p>\n                                    </div>\n                            <div class=\"mt-col\" style=\"width: 23%\">\n                                        <span class=\"column-name\">\n                        Argo:\n                    </span>\n                                                                                            <img decoding=\"async\" src=\"https://neptune.ai/wp-content/themes/neptune-experience/img/checked.svg\"/>\n                                                            </div>\n                            <div class=\"mt-col\" style=\"width: 23%\">\n                                        <span class=\"column-name\">\n                        Airflow:\n                    </span>\n                                                                                            <img decoding=\"async\" src=\"https://neptune.ai/wp-content/themes/neptune-experience/img/unchecked.svg\"/>\n                                                            </div>\n                            <div class=\"mt-col\" style=\"width: 23%\">\n                                        <span class=\"column-name\">\n                        Prefect:\n                    </span>\n                                                                                            <img decoding=\"async\" src=\"https://neptune.ai/wp-content/themes/neptune-experience/img/checked.svg\"/>\n                                                            </div>\n                    </div>\n            <div class=\"mt-row\">\n                            <div class=\"mt-col\" style=\"width: 8%\">\n                                                                <p><strong>9.</strong></p>\n                                    </div>\n                            <div class=\"mt-col\" style=\"width: 23%\">\n                                        <span class=\"column-name\">\n                        Features:\n                    </span>\n                                                                <p>Scalability</p>\n                                    </div>\n                            <div class=\"mt-col\" style=\"width: 23%\">\n                                        <span class=\"column-name\">\n                        Argo:\n                    </span>\n                                                                <p>Highly Parallel</p>\n                                    </div>\n                            <div class=\"mt-col\" style=\"width: 23%\">\n                                        <span class=\"column-name\">\n                        Airflow:\n                    </span>\n                                                                <p>Horizontal scalable</p>\n                                    </div>\n                            <div class=\"mt-col\" style=\"width: 23%\">\n                                        <span class=\"column-name\">\n                        Prefect:\n                    </span>\n                                                                <p>Parallel when using Kubernetes</p>\n                                    </div>\n                    </div>\n            <div class=\"mt-row\">\n                            <div class=\"mt-col\" style=\"width: 8%\">\n                                                                <p><strong>10.</strong></p>\n                                    </div>\n                            <div class=\"mt-col\" style=\"width: 23%\">\n                                        <span class=\"column-name\">\n                        Features:\n                    </span>\n                                                                <p>Community Support</p>\n                                    </div>\n                            <div class=\"mt-col\" style=\"width: 23%\">\n                                        <span class=\"column-name\">\n                        Argo:\n                    </span>\n                                                                <p>Large</p>\n                                    </div>\n                            <div class=\"mt-col\" style=\"width: 23%\">\n                                        <span class=\"column-name\">\n                        Airflow:\n                    </span>\n                                                                <p>Large</p>\n                                    </div>\n                            <div class=\"mt-col\" style=\"width: 23%\">\n                                        <span class=\"column-name\">\n                        Prefect:\n                    </span>\n                                                                <p>Medium</p>\n                                    </div>\n                    </div>\n            <div class=\"mt-row\">\n                            <div class=\"mt-col\" style=\"width: 8%\">\n                                                                <p><strong>11.</strong></p>\n                                    </div>\n                            <div class=\"mt-col\" style=\"width: 23%\">\n                                        <span class=\"column-name\">\n                        Features:\n                    </span>\n                                                                <p>State storage</p>\n                                    </div>\n                            <div class=\"mt-col\" style=\"width: 23%\">\n                                        <span class=\"column-name\">\n                        Argo:\n                    </span>\n                                                                <p>All states are stored within the Kubernetes workflow</p>\n                                    </div>\n                            <div class=\"mt-col\" style=\"width: 23%\">\n                                        <span class=\"column-name\">\n                        Airflow:\n                    </span>\n                                                                <p>Postgres DB</p>\n                                    </div>\n                            <div class=\"mt-col\" style=\"width: 23%\">\n                                        <span class=\"column-name\">\n                        Prefect:\n                    </span>\n                                                                <p>Postgres DB</p>\n                                    </div>\n                    </div>\n            <div class=\"mt-row\">\n                            <div class=\"mt-col\" style=\"width: 8%\">\n                                                                <p><strong>12.</strong></p>\n                                    </div>\n                            <div class=\"mt-col\" style=\"width: 23%\">\n                                        <span class=\"column-name\">\n                        Features:\n                    </span>\n                                                                <p>Ease of deployment</p>\n                                    </div>\n                            <div class=\"mt-col\" style=\"width: 23%\">\n                                        <span class=\"column-name\">\n                        Argo:\n                    </span>\n                                                                <p>Medium</p>\n                                    </div>\n                            <div class=\"mt-col\" style=\"width: 23%\">\n                                        <span class=\"column-name\">\n                        Airflow:\n                    </span>\n                                                                <p>Medium</p>\n                                    </div>\n                            <div class=\"mt-col\" style=\"width: 23%\">\n                                        <span class=\"column-name\">\n                        Prefect:\n                    </span>\n                                                                <p>Difficult</p>\n                                    </div>\n                    </div>\n            <div class=\"mt-row\">\n                            <div class=\"mt-col\" style=\"width: 8%\">\n                                                                <p><strong>13.</strong></p>\n                                    </div>\n                            <div class=\"mt-col\" style=\"width: 23%\">\n                                        <span class=\"column-name\">\n                        Features:\n                    </span>\n                                                                <p>Event-driven workflows</p>\n                                    </div>\n                            <div class=\"mt-col\" style=\"width: 23%\">\n                                        <span class=\"column-name\">\n                        Argo:\n                    </span>\n                                                                                            <img decoding=\"async\" src=\"https://neptune.ai/wp-content/themes/neptune-experience/img/checked.svg\"/>\n                                                            </div>\n                            <div class=\"mt-col\" style=\"width: 23%\">\n                                        <span class=\"column-name\">\n                        Airflow:\n                    </span>\n                                                                                            <img decoding=\"async\" src=\"https://neptune.ai/wp-content/themes/neptune-experience/img/unchecked.svg\"/>\n                                                            </div>\n                            <div class=\"mt-col\" style=\"width: 23%\">\n                                        <span class=\"column-name\">\n                        Prefect:\n                    </span>\n                                                                                            <img decoding=\"async\" src=\"https://neptune.ai/wp-content/themes/neptune-experience/img/checked.svg\"/>\n                                                            </div>\n                    </div>\n            <div class=\"mt-row\">\n                            <div class=\"mt-col\" style=\"width: 8%\">\n                                                                <p><strong>14.</strong></p>\n                                    </div>\n                            <div class=\"mt-col\" style=\"width: 23%\">\n                                        <span class=\"column-name\">\n                        Features:\n                    </span>\n                                                                <p>Scripts in DAG definition</p>\n                                    </div>\n                            <div class=\"mt-col\" style=\"width: 23%\">\n                                        <span class=\"column-name\">\n                        Argo:\n                    </span>\n                                                                <p>Argo uses text scripts to pass in containers.</p>\n                                    </div>\n                            <div class=\"mt-col\" style=\"width: 23%\">\n                                        <span class=\"column-name\">\n                        Airflow:\n                    </span>\n                                                                <p>Airflow uses Python-based DAG definition language.</p>\n                                    </div>\n                            <div class=\"mt-col\" style=\"width: 23%\">\n                                        <span class=\"column-name\">\n                        Prefect:\n                    </span>\n                                                                <p>Perfect uses functional flow a Python-based API.</p>\n                                    </div>\n                    </div>\n            <div class=\"mt-row\">\n                            <div class=\"mt-col\" style=\"width: 8%\">\n                                                                <p><strong>15.</strong></p>\n                                    </div>\n                            <div class=\"mt-col\" style=\"width: 23%\">\n                                        <span class=\"column-name\">\n                        Features:\n                    </span>\n                                                                <p>Use Cases</p>\n                                    </div>\n                            <div class=\"mt-col\" style=\"width: 23%\">\n                                        <span class=\"column-name\">\n                        Argo:\n                    </span>\n                                                                <p>&#8211; CI/CD- Data Processing- Infrastructure  Automation- Machine Learning- Stream Processing</p>\n                                    </div>\n                            <div class=\"mt-col\" style=\"width: 23%\">\n                                        <span class=\"column-name\">\n                        Airflow:\n                    </span>\n                                                                <p>&#8211; ELT &#8211; ML Workflow- ML Automation</p>\n                                    </div>\n                            <div class=\"mt-col\" style=\"width: 23%\">\n                                        <span class=\"column-name\">\n                        Prefect:\n                    </span>\n                                                                <p>&#8211; Automating Data Workflow (ELT)- ML Workflow and Orchestration- CI/CD</p>\n                                    </div>\n                    </div>\n    </div>\n\n\n<div id=\"block_93515cae6659e5256211b6b628c5a42c\" class=\"separator separator-25\"></div>\n\n\n\n<p>Now let’s explore each of these tools in more detail under three primary categories:&nbsp;</p>\n\n\n<div class=\"case-study-numbered-list\">\n    <h2></h2>\n    <ul>\n                    <li><span>1</span>Core concepts</li>\n                    <li><span>2</span>Features they offer</li>\n                    <li><span>3</span>Why use it?</li>\n            </ul>\n</div>\n\n\n\n<h2>Core concepts</h2>\n\n\n\n<p>All three tools are built on a set of concepts or principles around which they function. Argo is, for instance, built around two concepts: <strong>Workflow </strong>and<strong> Templates</strong>. Both of these make the backbone of its system. Likewise, Airflow is built around <strong>Webserver, Scheduler, Executor, </strong>and<strong> Database,</strong> while Prefect is built around <strong>Flows </strong>and<strong> Task</strong>. Now it is important for us to know what these concepts mean, what they offer, and how it is beneficial to us.</p>\n\n\n\n<p>Before going into the details, here is a brief summary of the concepts.&nbsp;</p>\n\n\n<div id=\"block_ab3f951667ba5e0c119448e7302b333a\" class=\"separator separator-20\"></div>\n\n\n<div class=\"medium-table\">\n        <div class=\"mt-row heading\">\n            <div class=\"mt-col\" style=\"width: 15%\">\n                    </div>\n            <div class=\"mt-col\" style=\"width: 85%\">\n            Properties of the Concepts        </div>\n        </div>\n    \n            <div class=\"mt-row\">\n                            <div class=\"mt-col\" style=\"width: 15%\">\n                                                                <p><strong>Argo</strong></p>\n                                    </div>\n                            <div class=\"mt-col\" style=\"width: 85%\">\n                                        <span class=\"column-name\">\n                        Properties of the Concepts:\n                    </span>\n                                                                <p>It has two concepts <strong>Workflow</strong>, and <strong>Templates</strong>. Essentially the Workflow is the config YAML file. It provides structure and robustness to the workflow as they use DAGs to manage the workflows. On the other hand, templates are the functions that need to be executed. <br data-rich-text-line-break=\"true\" />They are both static and dynamic meaning that you can modify steps on the go.</p>\n                                    </div>\n                    </div>\n            <div class=\"mt-row\">\n                            <div class=\"mt-col\" style=\"width: 15%\">\n                                                                <p><strong>Airflow</strong></p>\n                                    </div>\n                            <div class=\"mt-col\" style=\"width: 85%\">\n                                        <span class=\"column-name\">\n                        Properties of the Concepts:\n                    </span>\n                                                                <p>It has four concepts Webserver, Scheduler, Executor, and Database. They basically divide the whole process into different segments and these concepts act as major components to automate the whole process. This allows the workflow to be efficient since each component relies on the other, in this way it is easy to find and report bugs and errors. Furthermore, monitoring is quite easy.<br />\nThough Airflow uses DAGs it is not dynamic but only static.</p>\n                                    </div>\n                    </div>\n            <div class=\"mt-row\">\n                            <div class=\"mt-col\" style=\"width: 15%\">\n                                                                <p><strong>Prefect</strong></p>\n                                    </div>\n                            <div class=\"mt-col\" style=\"width: 85%\">\n                                        <span class=\"column-name\">\n                        Properties of the Concepts:\n                    </span>\n                                                                <p>It leverages two concepts Flows and Tasks. Prefect uses DAGs that are defined as flow object which uses Python. In Prefect, flow objects can be created using Python which provides flexibility and robustness to define complex pipelines.<br />\nTasks are like templates in Argo which are used to define a specific function that needs to be executed. Again, it uses Python for this.<br />\nBecause Prefect uses Python as its main programming language it is easy to work with.</p>\n                                    </div>\n                    </div>\n    </div>\n\n\n<div id=\"block_f234d26439284ef4f7d43b9cdaa2d453\" class=\"separator separator-5\"></div>\n\n\n\n<p class=\"has-text-align-center has-small-font-size\"><em>Summary of the concepts</em></p>\n\n\n<div id=\"block_1f2b87c2de136cd7e7f6f69de21adf08\" class=\"separator separator-15\"></div>\n\n\n\n<p>Now, let’s understand these concepts in detail.&nbsp;</p>\n\n\n\n<h3>Argo&nbsp;</h3>\n\n\n\n<p>Argo uses two core concepts:</p>\n\n\n<div class=\"custom-point-list\">\n<ol>\n<li>Workflow</li>\n\n\n\n<li>Templates</li>\n</ol>\n</div>\n\n\n<h4>Workflow</h4>\n\n\n\n<p>In Argo, the workflow happens to be the most integral component of the whole system. It has two important functions:&nbsp;</p>\n\n\n<div class=\"custom-point-list\">\n<ol>\n<li>It defines the tasks that need to be executed.</li>\n\n\n\n<li>It stores the state of the tasks, which means that it serves as both a static and a dynamic object.</li>\n</ol>\n</div>\n\n\n<p>Workflow is defined in the workflow.spec configuration file. It is a YAML file that consists of a list of <strong>templates</strong> and <strong>entry points</strong>. The Workflow can be considered as a file that hosts different templates. These templates define the function that needs to be executed.&nbsp;</p>\n\n\n\n<p>As mentioned earlier that Argo leverages the <strong>Kubernetes</strong> engine for workflow synchronization, and the configuration file uses the same syntax as Kubernetes. The workflow YAML file has the following dictionaries or objects:</p>\n\n\n<div class=\"custom-point-list\">\n<ol>\n<li>apiVersion: This is where you define the name of the doc or API.</li>\n\n\n\n<li>kind: It defines the type of Kubernetes object that needs to be created. For instance, if you want to deploy an app you can use <strong>Deployment </strong>as one of a kind, at other times you can use service. But in this case, we will use <strong>Workflow</strong>.</li>\n\n\n\n<li>metadata: It enables us to define unique properties for that object, that could be a name, UUID, et cetera.&nbsp;</li>\n\n\n\n<li>spec: It enables us to define specifications concerning the Workflow. These specifications would be entry points and templates.&nbsp;</li>\n\n\n\n<li>templates: This is where we can define the tasks. The template can contain the docker image and various other scripts.&nbsp;</li>\n</ol>\n</div>\n\n\n<h4>Templates&nbsp;</h4>\n\n\n\n<p>In Argo, there are two types of templates which again are sub-classified into 6 types. The two major types are <strong>definition </strong>and <strong>invocators.&nbsp;</strong></p>\n\n\n\n<h5>Definition</h5>\n\n\n\n<p>This template, as the name suggests, defines the type of task in a Docker container. The Definition itself is divided into four categories:</p>\n\n\n<div class=\"custom-point-list\">\n<ol>\n<li><strong>Container</strong>: It enables users to schedule the workflow in a container. Since the application is containerized in Kubernetes, the steps defined in the YAML file are identical. It is also one of the most used templates.</li>\n</ol>\n</div>\n\n\n<pre class=\"hljs\" style=\"display: block; overflow-x: auto; padding: 0.5em; color: rgb(51, 51, 51); background: rgb(248, 248, 248);\"><span class=\"hljs-comment\" style=\"color: rgb(153, 153, 136); font-style: italic;\">#source: https://argoproj.github.io/argo-workflows/workflow-concepts/</span>\n- name: whalesay\n    container:\n      image: docker/whalesay\n      command: [cowsay]\n      args: [<span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">\"hello world\"</span>]</pre>\n\n\n<div class=\"custom-point-list\">\n<ol start=\"2\">\n<li><strong>Script</strong>: If you want a wrapper around a container, then the script template is perfect. The script template is similar in structure to the container template but adds a source field. The field allows you to define a script in place. You can define any variable or command based on your requirements. Once defined, the script will be saved into a file, and it will be executed for you as an Argo variable.</li>\n</ol>\n</div>\n\n\n<pre class=\"hljs\" style=\"display: block; overflow-x: auto; padding: 0.5em; color: rgb(51, 51, 51); background: rgb(248, 248, 248);\"><span class=\"hljs-comment\" style=\"color: rgb(153, 153, 136); font-style: italic;\">#source: https://argoproj.github.io/argo-workflows/workflow-concepts/</span>\n - name: gen-random-int\n    script:\n      image: python:alpine3<span class=\"hljs-number\" style=\"color: teal;\">.6</span>\n      command: [python]\n      source: <span class=\"hljs-keyword\" style=\"color: rgb(51, 51, 51); font-weight: 700;\">import</span> random\n       \n        \ti = random.randint(<span class=\"hljs-number\" style=\"color: teal;\">1</span>, <span class=\"hljs-number\" style=\"color: teal;\">100</span>)\n        \t  \tprint(i)\n</pre>\n\n\n<div class=\"custom-point-list\">\n<ol start=\"3\">\n<li><strong>Resource</strong>: It allows you to perform operations like get, create, apply, delete et cetera on the K8 cluster directly.</li>\n</ol>\n</div>\n\n\n<pre class=\"hljs\" style=\"display: block; overflow-x: auto; padding: 0.5em; color: rgb(51, 51, 51); background: rgb(248, 248, 248);\"><span class=\"hljs-comment\" style=\"color: rgb(153, 153, 136); font-style: italic;\">#source: https://argoproj.github.io/argo-workflows/workflow-concepts/</span>\n- name: k8s-owner-reference\n    resource:\n      action: create\n      manifest: |\n        apiVersion: v1\n        kind: ConfigMap\n        metadata:\n          generateName: owned-eg-\n        data:\n          some: value</pre>\n\n\n<div class=\"custom-point-list\">\n<ol start=\"4\">\n<li><strong>Suspend</strong>: It basically introduces a time dimension to the workflow. It can suspend the execution of the workflow for a defined duration or till the workflow is resumed manually.&nbsp;</li>\n</ol>\n</div>\n\n\n<pre class=\"hljs\" style=\"display: block; overflow-x: auto; padding: 0.5em; color: rgb(51, 51, 51); background: rgb(248, 248, 248);\"><span class=\"hljs-comment\" style=\"color: rgb(153, 153, 136); font-style: italic;\">#source: https://argoproj.github.io/argo-workflows/workflow-concepts/ </span>\n - name: delay\n    suspend:\n      duration: <span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">\"20s\"</span></pre>\n\n\n\n<h5>Invocators</h5>\n\n\n\n<p>Once the templates are defined, they can be invoked or called on demand by other templates called invocators. These invocators are more of controllers templates that can control the execution of defined templates.&nbsp;</p>\n\n\n\n<p>There are two types of invocator templates:</p>\n\n\n<div class=\"custom-point-list\">\n<ol>\n<li><strong>Steps: </strong>It basically allows you to define the tasks in steps. All YAML files are enabled with the ‘steps’ template.&nbsp;</li>\n\n\n\n<li><strong>Directed acyclic graph</strong>: Argo enables its users to manage steps with multiple dependencies in their workflow. This allows parallel execution of different workflows in their respective containers. These types of workflows are managed using a directed acyclic graph or DAG. For instance, if you are working on image segmentation and generation for medical purposes then you can create a pipeline that:<div class=\"custom-point-list\">\n<ul>\n<li>Processes the images.</li>\n\n\n\n<li>Distributes the images (or dataset) to the respective DL models for image segmentation and generation pipeline.</li>\n\n\n\n<li>Continuously predicts segmentation masks and updates the dataset storage with new images after proper inspection.&nbsp;</li>\n</ul>\n</div></li>\n</ol>\n</div>\n\n\n<h3>Airflow</h3>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-large\"><img data-attachment-id=\"72254\" data-permalink=\"https://neptune.ai/argo-vs-airflow-vs-prefect-3\" data-orig-file=\"https://i0.wp.com/neptune.ai/wp-content/uploads/argo-vs-airflow-vs-prefect-3.png?fit=1036%2C331&ssl=1\" data-orig-size=\"1036,331\" data-comments-opened=\"0\" data-image-meta=\"{\"aperture\":\"0\",\"credit\":\"\",\"camera\":\"\",\"caption\":\"\",\"created_timestamp\":\"0\",\"copyright\":\"\",\"focal_length\":\"0\",\"iso\":\"0\",\"shutter_speed\":\"0\",\"title\":\"\",\"orientation\":\"0\"}\" data-image-title=\"argo-vs-airflow-vs-prefect-3\" data-image-description=\"\" data-image-caption=\"\" data-medium-file=\"https://i0.wp.com/neptune.ai/wp-content/uploads/argo-vs-airflow-vs-prefect-3.png?fit=300%2C96&ssl=1\" data-large-file=\"https://i0.wp.com/neptune.ai/wp-content/uploads/argo-vs-airflow-vs-prefect-3.png?fit=1024%2C327&ssl=1\" decoding=\"async\" width=\"1024\" height=\"327\" src=\"https://i0.wp.com/neptune.ai/wp-content/uploads/argo-vs-airflow-vs-prefect-3.png?resize=1024%2C327&#038;ssl=1\" alt=\"Feature Pipeline- Airflow\" class=\"wp-image-72254\" data-recalc-dims=\"1\"/><figcaption class=\"wp-element-caption\"><em>Feature Pipeline | <a href=\"https://towardsdatascience.com/mlops-with-a-feature-store-816cfa5966e9\" target=\"_blank\" rel=\"noreferrer noopener nofollow\">Source</a></em></figcaption></figure></div>\n\n<div id=\"block_4e3b4877214e5a7513f2a72872ccbe27\" class=\"separator separator-10\"></div>\n\n\n\n<p>Apache Airflow consists of four main components:</p>\n\n\n<div class=\"custom-point-list\">\n<ol>\n<li>Webserver</li>\n\n\n\n<li>Scheduler</li>\n\n\n\n<li>Executor</li>\n\n\n\n<li>Database</li>\n</ol>\n</div>\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-full is-resized\"><img data-attachment-id=\"72255\" data-permalink=\"https://neptune.ai/argo-vs-airflow-vs-prefect-4\" data-orig-file=\"https://i0.wp.com/neptune.ai/wp-content/uploads/argo-vs-airflow-vs-prefect-4.png?fit=744%2C484&ssl=1\" data-orig-size=\"744,484\" data-comments-opened=\"0\" data-image-meta=\"{\"aperture\":\"0\",\"credit\":\"\",\"camera\":\"\",\"caption\":\"\",\"created_timestamp\":\"0\",\"copyright\":\"\",\"focal_length\":\"0\",\"iso\":\"0\",\"shutter_speed\":\"0\",\"title\":\"\",\"orientation\":\"0\"}\" data-image-title=\"argo-vs-airflow-vs-prefect-4\" data-image-description=\"\" data-image-caption=\"\" data-medium-file=\"https://i0.wp.com/neptune.ai/wp-content/uploads/argo-vs-airflow-vs-prefect-4.png?fit=300%2C195&ssl=1\" data-large-file=\"https://i0.wp.com/neptune.ai/wp-content/uploads/argo-vs-airflow-vs-prefect-4.png?fit=744%2C484&ssl=1\" decoding=\"async\" src=\"https://i0.wp.com/neptune.ai/wp-content/uploads/argo-vs-airflow-vs-prefect-4.png?resize=744%2C484&#038;ssl=1\" alt=\"Main components of Apache Airflow\" class=\"wp-image-72255\" width=\"744\" height=\"484\" data-recalc-dims=\"1\" /><figcaption class=\"wp-element-caption\"><em> Four main components of Apache Airflow | <a href=\"https://airflow.apache.org/docs/apache-airflow/stable/concepts/overview.html\" target=\"_blank\" rel=\"noreferrer noopener nofollow\">Source</a></em></figcaption></figure></div>\n\n\n<h3>Webserver</h3>\n\n\n\n<p>It provides the user with UI for inspecting, triggering, and debugging all DAGs and tasks. It essentially serves as the entry point for Airflow. The Webserver leverages Python-Flask to manage all the requests made by the user. It also renders the state metadata from the database and displays the same to the UI.</p>\n\n\n\n<h3>Scheduler</h3>\n\n\n\n<p>It monitors and manages all the tasks and DAGs. It examines the state of the tasks by querying the database to decide the order of the task that needs to be executed. The aim of the scheduler is then to resolve dependencies and submit the task instance to the executor once the dependencies are taken care of.</p>\n\n\n\n<h3>Executor</h3>\n\n\n\n<p>It runs the task instances which are ready to run. It executes all the tasks as scheduled by the scheduler. There are four types of executors:</p>\n\n\n<div class=\"custom-point-list\">\n<ol>\n<li>Sequential Executor</li>\n\n\n\n<li>Local Executor</li>\n\n\n\n<li>Celery Executor</li>\n\n\n\n<li>Kubernetes Executor</li>\n</ol>\n</div>\n\n\n<h3>Metadata Database</h3>\n\n\n\n<p>It stores the state of the tasks and DAGs that can be used by the scheduler for proper scheduling of the tasks instance. It is worth noting that Airflow uses SQLAlchemy and Object Relational Mapping (ORM) to store the information.&nbsp;</p>\n\n\n\n<h3>Prefect</h3>\n\n\n\n<p>Prefect uses two core concepts:&nbsp;</p>\n\n\n<div class=\"custom-point-list\">\n<ol>\n<li>Flows</li>\n\n\n\n<li>Tasks</li>\n</ol>\n</div>\n\n\n<h4>Flows</h4>\n\n\n\n<p>In Prefect, flows are the Python objects that can be interacted with. Here DAG is defined as flow objects. See the image below.&nbsp;</p>\n\n\n<div id=\"block_a590483c437b08259999f8b6675fb640\" class=\"separator separator-15\"></div>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-large\"><img data-attachment-id=\"72256\" data-permalink=\"https://neptune.ai/argo-vs-airflow-vs-prefect-5\" data-orig-file=\"https://i0.wp.com/neptune.ai/wp-content/uploads/argo-vs-airflow-vs-prefect-5.png?fit=1600%2C269&ssl=1\" data-orig-size=\"1600,269\" data-comments-opened=\"0\" data-image-meta=\"{\"aperture\":\"0\",\"credit\":\"\",\"camera\":\"\",\"caption\":\"\",\"created_timestamp\":\"0\",\"copyright\":\"\",\"focal_length\":\"0\",\"iso\":\"0\",\"shutter_speed\":\"0\",\"title\":\"\",\"orientation\":\"0\"}\" data-image-title=\"argo-vs-airflow-vs-prefect-5\" data-image-description=\"\" data-image-caption=\"\" data-medium-file=\"https://i0.wp.com/neptune.ai/wp-content/uploads/argo-vs-airflow-vs-prefect-5.png?fit=300%2C50&ssl=1\" data-large-file=\"https://i0.wp.com/neptune.ai/wp-content/uploads/argo-vs-airflow-vs-prefect-5.png?fit=1024%2C172&ssl=1\" decoding=\"async\" width=\"1024\" height=\"172\" src=\"https://i0.wp.com/neptune.ai/wp-content/uploads/argo-vs-airflow-vs-prefect-5.png?resize=1024%2C172&#038;ssl=1\" alt=\"DAG defined as flow objects \" class=\"wp-image-72256\" data-recalc-dims=\"1\"/><figcaption class=\"wp-element-caption\"><em> DAG defined as flow objects | <a href=\"https://spell.ml/blog/orchestrating-spell-model-pipelines-using-prefect-YU3rsBEAACEAmRxp\" target=\"_blank\" rel=\"noreferrer noopener nofollow\">Source</a></em></figcaption></figure></div>\n\n<div id=\"block_f234d26439284ef4f7d43b9cdaa2d453\" class=\"separator separator-5\"></div>\n\n\n\n<p>Flow can be imported and can be used as a decorator, @flow, for any given function. Flows take an existing function and transform it into a Prefect flow function, with the following advantages:</p>\n\n\n<div class=\"custom-point-list\">\n<ul>\n<li>The function can be monitored and governed as it is now reported to the API.</li>\n\n\n\n<li>The activity of the function can be tracked and displayed in the UI.</li>\n\n\n\n<li>Inputs given to the function can be validated.</li>\n\n\n\n<li>Various workflow features like retries, distributed execution et cetera can be added to the function.<em>&nbsp;</em></li>\n\n\n\n<li>Timeouts can be enforced to prevent unintentional long-running workflows&nbsp;</li>\n</ul>\n</div>\n\n\n<p>Here is a code block depicting the implementation of a flow object.</p>\n\n\n\n<pre class=\"hljs\" style=\"display: block; overflow-x: auto; padding: 0.5em; color: rgb(51, 51, 51); background: rgb(248, 248, 248);\"><span class=\"hljs-comment\" style=\"color: rgb(153, 153, 136); font-style: italic;\">#Source: https://github.com/PrefectHQ/prefect</span>\n<span class=\"hljs-keyword\" style=\"color: rgb(51, 51, 51); font-weight: 700;\">from</span> prefect <span class=\"hljs-keyword\" style=\"color: rgb(51, 51, 51); font-weight: 700;\">import</span> flow\n\n<span class=\"hljs-meta\" style=\"font-weight: 700; color: rgb(153, 153, 153);\">@flow(name=\"GitHub Stars\")</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: rgb(51, 51, 51); font-weight: 700;\">def</span> <span class=\"hljs-title\" style=\"color: rgb(153, 0, 0); font-weight: 700;\">github_stars</span><span class=\"hljs-params\">(repos: List[str])</span>:</span>\n    <span class=\"hljs-keyword\" style=\"color: rgb(51, 51, 51); font-weight: 700;\">for</span> repo <span class=\"hljs-keyword\" style=\"color: rgb(51, 51, 51); font-weight: 700;\">in</span> repos:\n        get_stars(repo)\n</pre>\n\n\n\n<p>In the code above, the function has been transformed into a flow which is named as “GitHub Stars”. This function is now within the constraints of Prefect orchestration laws.&nbsp;</p>\n\n\n\n<p>Now it must be noted that all workflows must be defined within the flow function. Likewise, all tasks must be called within the flow (function). Keep in mind that when a flow is executed, it is known as a <em>flow run</em>.&nbsp;</p>\n\n\n\n<h5>Tasks</h5>\n\n\n\n<p>Tasks can be defined as specific work that needs to be executed, for instance, the addition of two numbers. In another word, tasks take an input, perform an operation and yield an output. Like flow, tasks can be imported and can be used as a decorator, @task, for a function. Once used for a function, it essentially wraps the function within the Prefect workflow and has similar advantages to the flow. For instance, it can automatically log information about task runs, such as runtime, tags, and final state.&nbsp;</p>\n\n\n\n<p>The code below demonstrates how a task is defined:&nbsp;</p>\n\n\n\n<pre class=\"hljs\" style=\"display: block; overflow-x: auto; padding: 0.5em; color: rgb(51, 51, 51); background: rgb(248, 248, 248);\"><span class=\"hljs-comment\" style=\"color: rgb(153, 153, 136); font-style: italic;\">#Source: https://github.com/PrefectHQ/prefect</span>\n\n<span class=\"hljs-meta\" style=\"font-weight: 700; color: rgb(153, 153, 153);\">@task(retries=3)</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: rgb(51, 51, 51); font-weight: 700;\">def</span> <span class=\"hljs-title\" style=\"color: rgb(153, 0, 0); font-weight: 700;\">get_stars</span><span class=\"hljs-params\">(repo: str)</span>:</span>\n    url = f<span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">\"https://api.github.com/repos/{repo}\"</span>\n    count = httpx.get(url).json()[<span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">\"stargazers_count\"</span>]\n    print(f<span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">\"{repo} has {count} stars!\"</span>)\n\n<span class=\"hljs-comment\" style=\"color: rgb(153, 153, 136); font-style: italic;\"># run the flow!</span>\ngithub_stars([<span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">\"PrefectHQ/Prefect\"</span>])</pre>\n\n\n\n<p>To sum up, the flow looks for any task that is defined within its body, and once found it then creates a computational graph in the same order. It then creates dependencies between the tasks whenever the output of one task instance is used to yield output by another.&nbsp;</p>\n\n\n\n<h2>Features</h2>\n\n\n\n<p>All three provide more or less the same features, but some features are better than others, and it also boils down to users&#8217; adaptability. Just like in the previous section, let’s begin with a summary of the features.&nbsp;</p>\n\n\n<div class=\"medium-table\">\n        <div class=\"mt-row heading\">\n            <div class=\"mt-col\" style=\"width: 15%\">\n                    </div>\n            <div class=\"mt-col\" style=\"width: 28.33%\">\n            Argo        </div>\n            <div class=\"mt-col\" style=\"width: 28.33%\">\n            Airflow        </div>\n            <div class=\"mt-col\" style=\"width: 28.33%\">\n            Prefect        </div>\n        </div>\n    \n            <div class=\"mt-row\">\n                            <div class=\"mt-col\" style=\"width: 15%\">\n                                                                <p><strong>User Interface</strong></p>\n                                    </div>\n                            <div class=\"mt-col\" style=\"width: 28.33%\">\n                                        <span class=\"column-name\">\n                        Argo:\n                    </span>\n                                                                <p>It has a complete view of the workflow. You can define workflow straight from the UI.</p>\n                                    </div>\n                            <div class=\"mt-col\" style=\"width: 28.33%\">\n                                        <span class=\"column-name\">\n                        Airflow:\n                    </span>\n                                                                <p>Workflow is very well-maintained as it provides a number of different views.</p>\n                                    </div>\n                            <div class=\"mt-col\" style=\"width: 28.33%\">\n                                        <span class=\"column-name\">\n                        Prefect:\n                    </span>\n                                                                <p>Prefect is similar to Airflow.</p>\n                                    </div>\n                    </div>\n            <div class=\"mt-row\">\n                            <div class=\"mt-col\" style=\"width: 15%\">\n                                                                <p><strong>Deployment Style </strong></p>\n                                    </div>\n                            <div class=\"mt-col\" style=\"width: 28.33%\">\n                                        <span class=\"column-name\">\n                        Argo:\n                    </span>\n                                                                <p>Supports only Kubernetes-supported environments such as AWS and other S3-compatible services.</p>\n                                    </div>\n                            <div class=\"mt-col\" style=\"width: 28.33%\">\n                                        <span class=\"column-name\">\n                        Airflow:\n                    </span>\n                                                                <p>Supports Kubernetes-supported environment as well as other third-party environments.</p>\n                                    </div>\n                            <div class=\"mt-col\" style=\"width: 28.33%\">\n                                        <span class=\"column-name\">\n                        Prefect:\n                    </span>\n                                                                <p>Same as Airflow</p>\n                                    </div>\n                    </div>\n            <div class=\"mt-row\">\n                            <div class=\"mt-col\" style=\"width: 15%\">\n                                                                <p><strong>Scalability</strong></p>\n                                    </div>\n                            <div class=\"mt-col\" style=\"width: 28.33%\">\n                                        <span class=\"column-name\">\n                        Argo:\n                    </span>\n                                                                <p>Parallel</p>\n                                    </div>\n                            <div class=\"mt-col\" style=\"width: 28.33%\">\n                                        <span class=\"column-name\">\n                        Airflow:\n                    </span>\n                                                                <p>Horizontal</p>\n                                    </div>\n                            <div class=\"mt-col\" style=\"width: 28.33%\">\n                                        <span class=\"column-name\">\n                        Prefect:\n                    </span>\n                                                                <p>Parallel</p>\n                                    </div>\n                    </div>\n            <div class=\"mt-row\">\n                            <div class=\"mt-col\" style=\"width: 15%\">\n                                                                <p><strong>Accessibility</strong></p>\n                                    </div>\n                            <div class=\"mt-col\" style=\"width: 28.33%\">\n                                        <span class=\"column-name\">\n                        Argo:\n                    </span>\n                                                                <p>Open-sourced</p>\n                                    </div>\n                            <div class=\"mt-col\" style=\"width: 28.33%\">\n                                        <span class=\"column-name\">\n                        Airflow:\n                    </span>\n                                                                <p>Open-source</p>\n                                    </div>\n                            <div class=\"mt-col\" style=\"width: 28.33%\">\n                                        <span class=\"column-name\">\n                        Prefect:\n                    </span>\n                                                                <p>Open-sourced and subscription-based</p>\n                                    </div>\n                    </div>\n            <div class=\"mt-row\">\n                            <div class=\"mt-col\" style=\"width: 15%\">\n                                                                <p><strong>Flexibility</strong></p>\n                                    </div>\n                            <div class=\"mt-col\" style=\"width: 28.33%\">\n                                        <span class=\"column-name\">\n                        Argo:\n                    </span>\n                                                                <p>Rigid</p>\n                                    </div>\n                            <div class=\"mt-col\" style=\"width: 28.33%\">\n                                        <span class=\"column-name\">\n                        Airflow:\n                    </span>\n                                                                <p>Rigid and Complicated</p>\n                                    </div>\n                            <div class=\"mt-col\" style=\"width: 28.33%\">\n                                        <span class=\"column-name\">\n                        Prefect:\n                    </span>\n                                                                <p>Flexible</p>\n                                    </div>\n                    </div>\n    </div>\n\n\n\n<p class=\"has-text-align-center has-small-font-size\"><em>Comparison of the features</em></p>\n\n\n\n<p>Let’s start this section by exploring the User Interface.&nbsp;</p>\n\n\n\n<h3>User Interface</h3>\n\n\n\n<h4>Argo</h4>\n\n\n\n<p>For ease of use, Argo Workflow provides a web-based UI to define workflows and templates. The UI enables various purposes like:</p>\n\n\n<div class=\"custom-point-list\">\n<ul>\n<li>Artifact visualization&nbsp;</li>\n\n\n\n<li>Using generated charts to compare Machine Learning pipelines</li>\n\n\n\n<li>Visualizing results&nbsp;</li>\n\n\n\n<li>Debugging</li>\n\n\n\n<li>It can also be used to define workflows</li>\n</ul>\n</div>\n\n<div id=\"block_4e3b4877214e5a7513f2a72872ccbe27\" class=\"separator separator-10\"></div>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-large\"><img data-attachment-id=\"72257\" data-permalink=\"https://neptune.ai/argo-vs-airflow-vs-prefect-6\" data-orig-file=\"https://i0.wp.com/neptune.ai/wp-content/uploads/argo-vs-airflow-vs-prefect-6.png?fit=1276%2C751&ssl=1\" data-orig-size=\"1276,751\" data-comments-opened=\"0\" data-image-meta=\"{\"aperture\":\"0\",\"credit\":\"\",\"camera\":\"\",\"caption\":\"\",\"created_timestamp\":\"0\",\"copyright\":\"\",\"focal_length\":\"0\",\"iso\":\"0\",\"shutter_speed\":\"0\",\"title\":\"\",\"orientation\":\"0\"}\" data-image-title=\"argo-vs-airflow-vs-prefect-6\" data-image-description=\"\" data-image-caption=\"\" data-medium-file=\"https://i0.wp.com/neptune.ai/wp-content/uploads/argo-vs-airflow-vs-prefect-6.png?fit=300%2C177&ssl=1\" data-large-file=\"https://i0.wp.com/neptune.ai/wp-content/uploads/argo-vs-airflow-vs-prefect-6.png?fit=1024%2C603&ssl=1\" decoding=\"async\" width=\"1024\" height=\"603\" src=\"https://i0.wp.com/neptune.ai/wp-content/uploads/argo-vs-airflow-vs-prefect-6.png?resize=1024%2C603&#038;ssl=1\" alt=\"Argo user interface\" class=\"wp-image-72257\" data-recalc-dims=\"1\"/><figcaption class=\"wp-element-caption\"><em>Argo UI | <a href=\"https://github.com/argoproj/argo-workflows\" target=\"_blank\" rel=\"noreferrer noopener nofollow\">Source</a></em></figcaption></figure></div>\n\n\n<h4>Airflow</h4>\n\n\n\n<p>Airflow UI provides a clean and efficient design that enables the user to interact with the Airflow server allowing them to <strong>monitor</strong> and <strong>troubleshoot</strong> the entire pipeline. It also allows editing the state of the task in the database and manipulating the behaviour of DAGs and tasks.&nbsp;</p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-large\"><img data-attachment-id=\"72258\" data-permalink=\"https://neptune.ai/argo-vs-airflow-vs-prefect-7\" data-orig-file=\"https://i0.wp.com/neptune.ai/wp-content/uploads/argo-vs-airflow-vs-prefect-7.png?fit=1999%2C1203&ssl=1\" data-orig-size=\"1999,1203\" data-comments-opened=\"0\" data-image-meta=\"{\"aperture\":\"0\",\"credit\":\"\",\"camera\":\"\",\"caption\":\"\",\"created_timestamp\":\"0\",\"copyright\":\"\",\"focal_length\":\"0\",\"iso\":\"0\",\"shutter_speed\":\"0\",\"title\":\"\",\"orientation\":\"0\"}\" data-image-title=\"argo-vs-airflow-vs-prefect-7\" data-image-description=\"\" data-image-caption=\"\" data-medium-file=\"https://i0.wp.com/neptune.ai/wp-content/uploads/argo-vs-airflow-vs-prefect-7.png?fit=300%2C181&ssl=1\" data-large-file=\"https://i0.wp.com/neptune.ai/wp-content/uploads/argo-vs-airflow-vs-prefect-7.png?fit=1024%2C616&ssl=1\" decoding=\"async\" width=\"1024\" height=\"616\" src=\"https://i0.wp.com/neptune.ai/wp-content/uploads/argo-vs-airflow-vs-prefect-7.png?resize=1024%2C616&#038;ssl=1\" alt=\"Airflow user interface\" class=\"wp-image-72258\" data-recalc-dims=\"1\"/><figcaption class=\"wp-element-caption\"><em>Airflow UI | <a href=\"https://airflow.apache.org/docs/apache-airflow/stable/ui.html#\" target=\"_blank\" rel=\"noreferrer noopener nofollow\">Source</a></em></figcaption></figure></div>\n\n\n<p>The Airflow UI also provides various views for its users, they include:</p>\n\n\n<div class=\"custom-point-list\">\n<ul>\n<li>DAGs View</li>\n\n\n\n<li>Datasets View</li>\n\n\n\n<li>Grid View</li>\n\n\n\n<li>Graph View</li>\n\n\n\n<li>Calendar View</li>\n\n\n\n<li>Variable View</li>\n\n\n\n<li>Gantt View</li>\n\n\n\n<li>Task Duration</li>\n\n\n\n<li>Code View</li>\n</ul>\n</div>\n\n\n<h4>Prefect</h4>\n\n\n\n<p>Prefect like Airflow provides an overview of all the tasks, which helps you visualize all your workflow, tasks, and DAGs. It provides two ways to access UI:</p>\n\n\n<div class=\"custom-point-list\">\n<ol>\n<li><strong>Prefect Cloud</strong>: It is hosted on the cloud, which enables you to configure your personal accounts and workspaces.&nbsp;</li>\n\n\n\n<li><strong>Prefect Orion UI</strong>: It is hosted locally, and it is also open-sourced. You cannot configure it the way you can with Prefect cloud.&nbsp;</li>\n</ol>\n</div>\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-large\"><img data-attachment-id=\"72259\" data-permalink=\"https://neptune.ai/argo-vs-airflow-vs-prefect-8\" data-orig-file=\"https://i0.wp.com/neptune.ai/wp-content/uploads/argo-vs-airflow-vs-prefect-8.png?fit=1280%2C552&ssl=1\" data-orig-size=\"1280,552\" data-comments-opened=\"0\" data-image-meta=\"{\"aperture\":\"0\",\"credit\":\"\",\"camera\":\"\",\"caption\":\"\",\"created_timestamp\":\"0\",\"copyright\":\"\",\"focal_length\":\"0\",\"iso\":\"0\",\"shutter_speed\":\"0\",\"title\":\"\",\"orientation\":\"0\"}\" data-image-title=\"argo-vs-airflow-vs-prefect-8\" data-image-description=\"\" data-image-caption=\"\" data-medium-file=\"https://i0.wp.com/neptune.ai/wp-content/uploads/argo-vs-airflow-vs-prefect-8.png?fit=300%2C129&ssl=1\" data-large-file=\"https://i0.wp.com/neptune.ai/wp-content/uploads/argo-vs-airflow-vs-prefect-8.png?fit=1024%2C442&ssl=1\" decoding=\"async\" width=\"1024\" height=\"442\" src=\"https://i0.wp.com/neptune.ai/wp-content/uploads/argo-vs-airflow-vs-prefect-8.png?resize=1024%2C442&#038;ssl=1\" alt=\"Prefect user interface\" class=\"wp-image-72259\" data-recalc-dims=\"1\"/><figcaption class=\"wp-element-caption\"><em>Prefect UI | <a href=\"https://docs.prefect.io/ui/overview/\" target=\"_blank\" rel=\"noreferrer noopener nofollow\">Source</a></em></figcaption></figure></div>\n\n\n<p>Some additional features of Prefect UI:</p>\n\n\n<div class=\"custom-point-list\">\n<ul>\n<li>Displaying run summaries</li>\n\n\n\n<li>Displaying flow details that are deployed</li>\n\n\n\n<li>Scheduled flow&nbsp;</li>\n\n\n\n<li>Warnings notification for late and failed runs</li>\n\n\n\n<li>Details information of tasks and workflows</li>\n\n\n\n<li>Task dependency visualization and Radar flow</li>\n\n\n\n<li>Logs details</li>\n</ul>\n</div>\n\n\n<h3>Deployment Style</h3>\n\n\n\n<h4>Argo</h4>\n\n\n\n<p>It is a native Kubernetes workflow engine which means it:</p>\n\n\n<div class=\"case-study-numbered-list\">\n    <h2></h2>\n    <ul>\n                    <li><span>1</span>Runs on containers.</li>\n                    <li><span>2</span>Runs on Kubernetes-supported pods.</li>\n                    <li><span>3</span>Easy to deploy and scale.</li>\n            </ul>\n</div>\n\n\n\n<p>On the downside:</p>\n\n\n<div class=\"custom-point-list\">\n<ul>\n<li>Implementation is hard since it uses configurational language (YAML).</li>\n</ul>\n</div>\n\n\n<h4>Airflow</h4>\n\n\n<div class=\"case-study-numbered-list\">\n    <h2></h2>\n    <ul>\n                    <li><span>1</span>Supports Kubernetes as well as other third–party integrations.</li>\n                    <li><span>2</span>It runs on containers as well. </li>\n                    <li><span>3</span>Implementation is easy.</li>\n            </ul>\n</div>\n\n\n\n<p>The downside of Airflow is:</p>\n\n\n<div class=\"custom-point-list\">\n<ul>\n<li>It is not parallel scalable.</li>\n\n\n\n<li>Deployment needs extra effort, which depends upon the cloud facility you choose.&nbsp;</li>\n</ul>\n</div>\n\n\n<h4>Prefect</h4>\n\n\n\n<p>Lastly, Prefect is a combination of both Argo and Airflow:</p>\n\n\n<div class=\"case-study-numbered-list\">\n    <h2></h2>\n    <ul>\n                    <li><span>1</span>It can run on Containers and Kubernetes pods.</li>\n                    <li><span>2</span>It is highly parallel and efficient.</li>\n                    <li><span>3</span>It supports fault-tolerant scheduling.</li>\n                    <li><span>4</span>Easy to deploy.</li>\n                    <li><span>5</span>It also supports third-party integrations.</li>\n            </ul>\n</div>\n\n\n\n<p>When it comes to the downside:</p>\n\n\n<div class=\"custom-point-list\">\n<ul>\n<li>It does not support open-source deployment with Kubernetes.&nbsp;</li>\n\n\n\n<li>Deployment is difficult.&nbsp;</li>\n</ul>\n</div>\n\n\n<h3>Scalability</h3>\n\n\n\n<p>When it comes to scalability, Argo and Prefect are highly parallel, which makes them efficient and especially Prefect because it can leverage different third-party integrations support, making it the best of the three.&nbsp;</p>\n\n\n\n<p>Airflow, on the other, is horizontally scalable i.e., the number of active workers is equal to maximum task parallelism.&nbsp;</p>\n\n\n\n<h3>Accessibility</h3>\n\n\n\n<p>All three are open-sourced, but Prefect also comes with a <a href=\"https://www.prefect.io/pricing/\" target=\"_blank\" rel=\"noreferrer noopener nofollow\">subscription-based</a> service.&nbsp;</p>\n\n\n\n<h3>Flexibility</h3>\n\n\n\n<p>Argo and Airflow aren’t that flexible when compared with Prefect as the former is Kubernetes-native it is confined in that environment, making it rigid, while the latter is complicated as it requires a well-defined and structured template, making itself not very well suited to an agile environment.&nbsp;</p>\n\n\n\n<p>Prefect, on the other hand, enables you to create dynamic dataflow in native Python, which does not require you to use DAG. All Python functions can be transformed to Prefect Flow and Task. This ensures flexibility.</p>\n\n\n\n<h2>Why use these tools?</h2>\n\n\n\n<p>So far, I’ve compared the basic concepts and features that these tools possess. Now let me give reasons as to why you can use any of these tools in your project.&nbsp;&nbsp;</p>\n\n\n\n<h3>Argo</h3>\n\n\n\n<p>Here are some of the reasons why you should use Argo:</p>\n\n\n<div class=\"case-study-numbered-list\">\n    <h2></h2>\n    <ul>\n                    <li><span>1</span>The Kubernetes native workflow tool enables you to run each step in its own Kubernetes pod.</li>\n                    <li><span>2</span>Easy to scale because it can be executed parallelly. </li>\n                    <li><span>3</span>Workflow templates offer reusability.</li>\n                    <li><span>4</span>Similarly, artifact integrations are also reusable. </li>\n                    <li><span>5</span>DAG is dynamic for each run of the workflow. </li>\n                    <li><span>6</span>Low Latency Scheduler.</li>\n                    <li><span>7</span>Event-Driven Workflows.</li>\n            </ul>\n</div>\n\n\n\n<h3>Airflow</h3>\n\n\n\n<p>Reasons for you to use Airflow:</p>\n\n\n<div class=\"case-study-numbered-list\">\n    <h2></h2>\n    <ul>\n                    <li><span>1</span>It enables users to connect with various technologies.</li>\n                    <li><span>2</span>It offers rich scheduling and easy-to-define pipelines. </li>\n                    <li><span>3</span>Pythonic integration is another reason to use Airflow. </li>\n                    <li><span>4</span>You can create custom components as per your requirements.</li>\n                    <li><span>5</span>Allows rollback to the previous version as workflows are stored.</li>\n                    <li><span>6</span>Has a well-defined UI.</li>\n                    <li><span>7</span>Multiple users can write a workflow for a given project, i.e. it is shareable. </li>\n            </ul>\n</div>\n\n\n\n<h3>Prefect</h3>\n\n\n\n<p>Prefect is one of the well-planned orchestration tools for MLops. It is Python-native and requires you to put effort into the engineering side of things. One of the areas where Prefect shines is in data processing and pipeline. It can be used to fetch the data, apply the necessary transformation, and monitor and orchestrate necessary tasks.</p>\n\n\n\n<p>When it comes to tasks related to machine learning, it can be used to automate the entire data flow.&nbsp;</p>\n\n\n\n<p>Some other reasons to use Prefect are:</p>\n\n\n<div class=\"case-study-numbered-list\">\n    <h2></h2>\n    <ul>\n                    <li><span>1</span>Provides excellent security as it keeps your data and codes private.  </li>\n                    <li><span>2</span>Enhanced UI and notification feature which directly comes to your email or Slack.</li>\n                    <li><span>3</span>It can be used with Kubernetes and Docker. </li>\n                    <li><span>4</span>Efficient parallel processing of tasks.</li>\n                    <li><span>5</span>Dynamic workflow.</li>\n                    <li><span>6</span>Allows many third-party integrations.</li>\n                    <li><span>7</span>Prefect uses GraphQL API, enabling it to trigger workflow on demand. </li>\n            </ul>\n</div>\n\n\n\n<h2>How to decide?</h2>\n\n\n\n<p>Choosing the right tool for your project depends on what you want and what you already have. But I can surely put some criteria that can help you decide which tool will be appropriate for you. You can use –</p>\n\n\n\n<h3>Argo</h3>\n\n\n<div class=\"custom-point-list\">\n<ul>\n<li>If you want to set up a workflow based on Kubernetes.</li>\n\n\n\n<li>If you want to define your workflow as DAGs.</li>\n\n\n\n<li>If your dataset is huge and model training requires highly parallel and distributed training.&nbsp;</li>\n\n\n\n<li>If your task is complex.</li>\n\n\n\n<li>If you are well-versed in YAML files. Even if you are not, learning YAML is not difficult.</li>\n\n\n\n<li>If you want to use a cloud platform like GCD or AWS, which is Kubernetes enabled.&nbsp;</li>\n</ul>\n</div>\n\n\n<h3>Airflow</h3>\n\n\n<div class=\"custom-point-list\">\n<ul>\n<li>If you want to incorporate a lot of other 3rd party technology like Jenkins, Airbyte, Amazon, Cassandra, Docker, et cetera. Check the <a href=\"https://airflow.apache.org/docs/apache-airflow-providers/core-extensions/index.html\" target=\"_blank\" rel=\"noreferrer noopener nofollow\">list of supported third-party extensions</a>.</li>\n\n\n\n<li>If you want to use Python to define the workflow.</li>\n\n\n\n<li>If you want to define your workflow as DAGs.</li>\n\n\n\n<li>If your workflow is static.</li>\n\n\n\n<li>If you want a mature tool because Airflow is quite old.&nbsp;</li>\n\n\n\n<li>If you want to run tasks on schedule.</li>\n</ul>\n</div>\n\n\n<h3>Prefect</h3>\n\n\n<div class=\"custom-point-list\">\n<ul>\n<li>If you want to incorporate a lot of other 3rd party technology.</li>\n\n\n\n<li>If you want to use Python to define the workflow.</li>\n\n\n\n<li>If your workflow is dynamic.</li>\n\n\n\n<li>If you want to run tasks on schedule.</li>\n\n\n\n<li>If you want something light and modern.</li>\n</ul>\n</div>\n\n\n<p>I found a thread on <a href=\"https://www.reddit.com/r/dataengineering/comments/oqbiiu/airflow_vs_prefect/\" target=\"_blank\" rel=\"noreferrer noopener nofollow\">Reddit</a> concerning the use of Airflow and Prefect. Maybe this can give you some additional information as to which tool to use.</p>\n\n\n\n<p>“…The pros of Airflow are that it&#8217;s an established and popular project. This means it&#8217;s much easier to find someone who has done a random blog that answers your question. Another pro is that it&#8217;s much easier to hire someone with Airflow experience than Prefect experience. The cons are that Airflow&#8217;s age is showing, in that it wasn&#8217;t really designed for the kind of<em> dynamic workflows that exist within modern data environments</em>. If your company is going to be pushing the limits in terms of <em>computation or complexity, I&#8217;d highly suggest looking at Prefect.</em> Additionally, unless you go through Astronomer, if you can&#8217;t find an answer to a question you have about Airflow, you have to go through their fairly inactive slack chat.</p>\n\n\n\n<p>The pros of Prefect are that it&#8217;s much more modern in its assumptions about what you&#8217;re doing and what it needs to do. It has an extensive API that allows you to programmatically control executions or otherwise interact with the scheduler, which I believe Airflow has only recently implemented out of beta in their 2.0 release. Prior to this, it was recommended not to use the API in production, which often leads to hacky workarounds. In addition, Prefect allows for a much more dynamic execution model with some of its concepts by determining the DAG that gets executed at runtime and then handing off the computation/optimization to other systems (namely Dask) to actually execute the tasks. I believe this is a much smarter approach, as I&#8217;ve seen workflows get more and more dynamic over the years.</p>\n\n\n\n<p>If my company had neither Airflow nor Prefect in place already, I&#8217;d opt for Prefect. I believe it allows for much better modularization of code (which can then be tested more aggressively / thoroughly), which I already think is worth its weight in gold for data-driven companies that rely on having well-curated data in place to make automated product decisions. You can achieve something similar with Airflow, but you really need to go out of your way to make something like that happen, whereas in Prefect it kind of naturally comes out.”&nbsp;</p>\n\n\n\n<p>Here is a useful chart illustrating the popularity of different orchestration tools based on GitHub stars.</p>\n\n\n<div id=\"block_1f2b87c2de136cd7e7f6f69de21adf08\" class=\"separator separator-15\"></div>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-large\"><img data-attachment-id=\"72260\" data-permalink=\"https://neptune.ai/argo-vs-airflow-vs-prefect-9\" data-orig-file=\"https://i0.wp.com/neptune.ai/wp-content/uploads/argo-vs-airflow-vs-prefect-9.png?fit=1472%2C1030&ssl=1\" data-orig-size=\"1472,1030\" data-comments-opened=\"0\" data-image-meta=\"{\"aperture\":\"0\",\"credit\":\"\",\"camera\":\"\",\"caption\":\"\",\"created_timestamp\":\"0\",\"copyright\":\"\",\"focal_length\":\"0\",\"iso\":\"0\",\"shutter_speed\":\"0\",\"title\":\"\",\"orientation\":\"0\"}\" data-image-title=\"argo-vs-airflow-vs-prefect-9\" data-image-description=\"\" data-image-caption=\"\" data-medium-file=\"https://i0.wp.com/neptune.ai/wp-content/uploads/argo-vs-airflow-vs-prefect-9.png?fit=300%2C210&ssl=1\" data-large-file=\"https://i0.wp.com/neptune.ai/wp-content/uploads/argo-vs-airflow-vs-prefect-9.png?fit=1024%2C717&ssl=1\" decoding=\"async\" width=\"1024\" height=\"717\" src=\"https://i0.wp.com/neptune.ai/wp-content/uploads/argo-vs-airflow-vs-prefect-9.png?resize=1024%2C717&#038;ssl=1\" alt=\"Chart illustrating the popularity of different orchestration tools\" class=\"wp-image-72260\" data-recalc-dims=\"1\"/><figcaption class=\"wp-element-caption\"><em>The popularity of different orchestration tools based on GitHub stars | <a href=\"https://www.datarevenue.com/en-blog/airflow-vs-luigi-vs-argo-vs-mlflow-vs-kubeflow\" target=\"_blank\" rel=\"noreferrer noopener nofollow\">Source</a></em></figcaption></figure></div>\n\n\n<h2>Conclusion</h2>\n\n\n\n<p>In this article, we discussed and compared the three popular tools for task orchestration, namely Argo, Airflow, and Prefect. My main aim was to help you understand these tools on the basis of three important factors i.e. Core concepts, Features offered, and why you should use them. The article also compared the three tools on some of the important features they offer, which could help you make the decision of choosing the most appropriate tool for your project.</p>\n\n\n\n<p>I hope this article was informative and gave you a better understanding of these tools.&nbsp;</p>\n\n\n\n<p>Thanks!!!&nbsp;</p>\n\n\n\n<h3>References</h3>\n\n\n<div class=\"custom-point-list\">\n<ol>\n<li><a href=\"https://github.com/argoproj/argo-workflows\" target=\"_blank\" rel=\"noreferrer noopener nofollow\">https://github.com/argoproj/argo-workflows</a>&nbsp;</li>\n\n\n\n<li><a href=\"https://argoproj.github.io/\" target=\"_blank\" rel=\"noreferrer noopener nofollow\">https://argoproj.github.io/</a>&nbsp;</li>\n\n\n\n<li><a href=\"https://codefresh.io/learn/argo-workflows/\" target=\"_blank\" rel=\"noreferrer noopener nofollow\">https://codefresh.io/learn/argo-workflows/</a>&nbsp;</li>\n\n\n\n<li><a href=\"https://hazelcast.com/glossary/directed-acyclic-graph/\" target=\"_blank\" rel=\"noreferrer noopener nofollow\">https://hazelcast.com/glossary/directed-acyclic-graph/</a></li>\n\n\n\n<li><a href=\"https://towardsdatascience.com/mlops-with-a-feature-store-816cfa5966e9\" target=\"_blank\" rel=\"noreferrer noopener nofollow\">https://towardsdatascience.com/mlops-with-a-feature-store-816cfa5966e9</a>&nbsp;</li>\n\n\n\n<li><a href=\"https://medium.com/arthur-engineering/picking-a-kubernetes-orchestrator-airflow-argo-and-prefect-83539ecc69b\" target=\"_blank\" rel=\"noreferrer noopener nofollow\">https://medium.com/arthur-engineering/picking-a-kubernetes-orchestrator-airflow-argo-and-prefect-83539ecc69b</a></li>\n\n\n\n<li><a href=\"https://argoproj.github.io/argo-workflows/artifact-visualization/#artifact-types\" target=\"_blank\" rel=\"noreferrer noopener nofollow\">https://argoproj.github.io/argo-workflows/artifact-visualization/#artifact-types</a>&nbsp;</li>\n\n\n\n<li><a href=\"https://airflow.apache.org/docs/apache-airflow/stable/concepts/overview.html\" target=\"_blank\" rel=\"noreferrer noopener nofollow\">https://airflow.apache.org/docs/apache-airflow/stable/concepts/overview.html</a>&nbsp;</li>\n\n\n\n<li><a href=\"https://spell.ml/blog/orchestrating-spell-model-pipelines-using-prefect-YU3rsBEAACEAmRxp\" target=\"_blank\" rel=\"noreferrer noopener nofollow\">https://spell.ml/blog/orchestrating-spell-model-pipelines-using-prefect-YU3rsBEAACEAmRxp</a>&nbsp;</li>\n\n\n\n<li><a href=\"https://github.com/PrefectHQ/prefect\" target=\"_blank\" rel=\"noreferrer noopener nofollow\">https://github.com/PrefectHQ/prefect</a></li>\n\n\n\n<li><a href=\"https://www.datarevenue.com/en-blog/airflow-vs-luigi-vs-argo-vs-mlflow-vs-kubeflow\" target=\"_blank\" rel=\"noreferrer noopener nofollow\">https://www.datarevenue.com/en-blog/airflow-vs-luigi-vs-argo-vs-mlflow-vs-kubeflow</a>&nbsp;</li>\n\n\n\n<li><a href=\"https://hevodata.com/learn/argo-vs-airflow/#w6\" target=\"_blank\" rel=\"noreferrer noopener nofollow\">https://hevodata.com/learn/argo-vs-airflow/#w6</a>&nbsp;</li>\n\n\n\n<li><a href=\"https://www.datarevenue.com/en-blog/what-we-are-loving-about-prefect\" target=\"_blank\" rel=\"noreferrer noopener nofollow\">https://www.datarevenue.com/en-blog/what-we-are-loving-about-prefect</a>&nbsp;</li>\n\n\n\n<li><a href=\"https://github.com/PrefectHQ/prefect\" target=\"_blank\" rel=\"noreferrer noopener nofollow\">https://github.com/PrefectHQ/prefect</a>&nbsp;</li>\n\n\n\n<li><a href=\"https://docs.prefect.io/\" target=\"_blank\" rel=\"noreferrer noopener nofollow\">https://docs.prefect.io/</a>&nbsp;</li>\n\n\n\n<li><a href=\"https://medium.com/the-prefect-blog/introducing-the-artifacts-api-b9e5972db043\" target=\"_blank\" rel=\"noreferrer noopener nofollow\">https://medium.com/the-prefect-blog/introducing-the-artifacts-api-b9e5972db043</a>&nbsp;</li>\n\n\n\n<li><a href=\"https://medium.com/the-prefect-blog/orchestrate-your-data-science-project-with-prefect-2-0-4118418fd7ce\" target=\"_blank\" rel=\"noreferrer noopener nofollow\">https://medium.com/the-prefect-blog/orchestrate-your-data-science-project-with-prefect-2-0-4118418fd7ce</a>&nbsp;</li>\n\n\n\n<li><a href=\"https://www.reddit.com/r/dataengineering/comments/oqbiiu/airflow_vs_prefect/\" target=\"_blank\" rel=\"noreferrer noopener nofollow\">https://www.reddit.com/r/dataengineering/comments/oqbiiu/airflow_vs_prefect/</a></li>\n</ol>\n</div>\n\n\n\n<div id=\"author-box-new-format-block_604218f9077b8\" class=\"article__footer article__author\">\n  <div class=\"article__authorImage\">\n          <img width=\"193\" height=\"193\" src=\"https://i0.wp.com/neptune.ai/wp-content/uploads/Nilesh-Barla.png?fit=193%2C193&ssl=1\" class=\"article__authorImage-img\" alt=\"Nilesh Barla\" decoding=\"async\" data-attachment-id=\"35510\" data-permalink=\"https://neptune.ai/blog/representation-learning-with-autoencoder/attachment/nilesh-barla\" data-orig-file=\"https://i0.wp.com/neptune.ai/wp-content/uploads/Nilesh-Barla.png?fit=193%2C193&ssl=1\" data-orig-size=\"193,193\" data-comments-opened=\"0\" data-image-meta=\"{\"aperture\":\"0\",\"credit\":\"\",\"camera\":\"\",\"caption\":\"\",\"created_timestamp\":\"0\",\"copyright\":\"\",\"focal_length\":\"0\",\"iso\":\"0\",\"shutter_speed\":\"0\",\"title\":\"\",\"orientation\":\"0\"}\" data-image-title=\"Nilesh Barla\" data-image-description=\"\" data-image-caption=\"\" data-medium-file=\"https://i0.wp.com/neptune.ai/wp-content/uploads/Nilesh-Barla.png?fit=193%2C193&ssl=1\" data-large-file=\"https://i0.wp.com/neptune.ai/wp-content/uploads/Nilesh-Barla.png?fit=193%2C193&ssl=1\" />      </div>\n\n  <div class=\"article__authorContent\">\n          <h3 class=\"article__authorContent-name\">Nilesh Barla</h3>\n    \n          <p class=\"article__authorContent-text\">I am the founder of a recent startup perceptronai.net which aims to provide solutions in medical and material science through our deep learning algorithms. I also read and think a lot. And sometimes I put them in a form of a painting or a piece of music. And when I need to catch a breath I go for a run.</p>\n    \n          <ul class=\"article__authorSocial\">\n        <li class=\"article__authorSocial-single article__authorSocial-name\">Follow me on</li>\n                  <li class=\"article__authorSocial-single\"><a href=\"https://twitter.com/nielspace07\" class=\"article__authorSocial-tw\" target=\"_blank\"></a></li>\n        \n                  <li class=\"article__authorSocial-single\"><a href=\"https://www.linkedin.com/in/nielspace/?originalSubdomain=in\" class=\"article__authorSocial-lk\" target=\"_blank\"></a></li>\n        \n              </ul>\n    \n  </div>\n</div>\n\n\n<div class=\"is-layout-flow wp-block-group\"><div class=\"wp-block-group__inner-container\">\n<hr class=\"wp-block-separator has-css-opacity\"/>\n\n\n\n<p class=\"has-text-color\" style=\"color:#4455a6\"><strong>READ NEXT</strong></p>\n\n\n\n<h2>MLOps: What It Is, Why it Matters, and How To Implement It</h2>\n\n\n\n<p class=\"has-small-font-size\">13 mins read | Prince Canuma | Posted January 14, 2021</p>\n\n\n<div id=\"block_5ffc75def9f8e\" class=\"separator separator-10\"></div>\n\n\n\n<p>According to techjury, every person created at least 1.7 MB of data per second in 2020. For data scientists like you and me, that is like early Christmas because there are so many theories/ideas to explore, experiment with, and many discoveries to be made and models to be developed. </p>\n\n\n\n<p>But if we want to be serious and actually have those models touch real-life business problems and real people, we have to deal with the essentials like:</p>\n\n\n<div class=\"custom-point-list\">\n<ul><li>acquiring & cleaning large amounts of data;</li><li>setting up tracking and versioning for experiments and model training runs;</li><li>setting up the deployment and monitoring pipelines for the models that do get to production.&nbsp;</li></ul>\n</div>\n\n\n<p>And we need to find a way to scale our ML operations to the needs of the business and/or users of our ML models.</p>\n\n\n\n<p>There were similar issues in the past when we needed to scale conventional software systems so that more people can use them. DevOps’ solution was a set of practices for developing, testing, deploying, and operating large-scale software systems. With DevOps, development cycles became shorter, deployment velocity increased, and system releases became auditable and dependable.</p>\n\n\n\n<p>That brings us to&nbsp;<strong>MLOps</strong>. It was born at the intersection of&nbsp;<strong>DevOps</strong>,&nbsp;<strong>Data Engineering,</strong>&nbsp;and&nbsp;<strong>Machine Learning</strong>, and it’s a similar concept to DevOps<strong>,&nbsp;</strong>but the execution is different. ML systems are experimental in nature and have more components that are significantly more complex to build and operate.</p>\n\n\n\n<p>Let’s dig in!</p>\n\n\n<a class=\"button continous-post blue-filled\" href=\"/blog/mlops\" target=\"_blank\">\n    Continue reading -></a>\n\n\n\n<hr class=\"wp-block-separator has-css-opacity\"/>\n</div></div>\n<p>The post <a rel=\"nofollow\" href=\"https://neptune.ai/blog/argo-vs-airflow-vs-prefect-differences\">Argo vs Airflow vs Prefect: How Are They Different</a> appeared first on <a rel=\"nofollow\" href=\"https://neptune.ai\">neptune.ai</a>.</p>\n",
  "post-id": 72250
}