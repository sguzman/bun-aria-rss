{
  "title": "The Unreasonable Effectiveness of Random Forests",
  "link": "https://medium.com/rants-on-machine-learning/the-unreasonable-effectiveness-of-random-forests-f33c3ce28883?source=rss-55388a733bf9------2",
  "guid": "https://medium.com/p/f33c3ce28883",
  "category": [
    "data-science",
    "machine-learning",
    "statistics"
  ],
  "dc:creator": "Ahmed El Deeb",
  "pubDate": "Thu, 18 Jun 2015 01:12:08 GMT",
  "atom:updated": "2015-06-18T01:12:08.490Z",
  "content:encoded": "<p>It’s very common for machine learning practitioners to have favorite algorithms. It’s a bit irrational, since no algorithm strictly dominates in all applications, the performance of ML algorithms varies wildly depending on the application and the dimensionality of the dataset. And even for a given problem and a given dataset, any single model will likely be beaten by an ensemble of diverse models trained by diverse algorithms anyway. But people have favorites nevertheless. Some like SVMs for the elegance of their formulation or the quality of the available implementations, some like decision rules for their simplicity and interpretability, and some are crazy about neural networks for their flexibility.</p><p>My favorite out-of-the-box algorithm is (as you might have guessed) the Random Forest, and it’s the second modeling technique I typically try on any given data set (after a linear model).</p><h4>Here’s why:</h4><ul><li><strong>Random Forests require almost no input preparation.</strong> They can handle binary features, categorical features, numerical features without any need for scaling.</li><li><strong>Random Forests perform implicit feature selection</strong> and provide a pretty good indicator of feature importance.</li><li><strong>Random Forests are very quick to train.</strong> It’s a stroke of brilliance when a performance optimization happens to enhance model precision, or vice versa. The random feature sub-setting that aims at diversifying individual trees, is at the same time a great performance optimization! Tuning down the fraction of features that is considered at any given node can let you easily work on datasets with thousands of features. (The same is applicable for row sampling if your dataset has lots of rows)</li><li><strong>Random Forests are pretty tough to beat.</strong> Although you can typically find a model that beats RFs for any given dataset (typically a neural net or some boosting algorithm), it’s never by much, and it usually takes much longer to build and tune said model than it took to build the Random Forest. This is why they make for excellent benchmark models.</li><li><strong>It’s really hard to build a bad Random Forest!</strong> Since random forests are not very sensitive to the specific hyper-parameters used, they don’t require a lot of tweaking and fiddling to get a decent model, just use a large number of trees and things won’t go terribly awry. Most Random Forest implementations have sensible defaults for the rest of the parameters.</li><li><strong>Versatility.</strong> Random Forest are applicable to a wide variety of modeling tasks, they work well for regression tasks, work very well for classification taks(and even produce decently calibrated probability scores), and even though I’ve never tried it myself, they can be used for <a href=\"http://www.stat.berkeley.edu/~breiman/RandomForests/cc_home.htm#cluster\">cluster</a> <a href=\"http://labs.genetics.ucla.edu/horvath/RFclustering/RFclustering/RandomForestHorvath.pdf\">analysis</a>.</li><li><strong>Simplicity.</strong> If not of the resulting model, then of the learning algorithm itself. The basic RF learning algorithm can be written in a few lines of code. There’s a certain irony about that. But a sense of elegance as well.</li><li><strong>Lots of excellent, free, and open-source implementations.</strong> You can find a good implementation in almost all major ML libraries and toolkits. <a href=\"http://cran.r-project.org/web/packages/randomForest/index.html\">R</a>, <a href=\"http://scikit-learn.org/stable/modules/ensemble.html#random-forests\">scikit-learn</a> and <a href=\"http://www.cs.waikato.ac.nz/ml/weka/\">Weka</a> jump to mind for having exceptionally good implementations.</li><li>As if all of that is not enough, <strong>Random Forests can be easily grown in parallel.</strong> The same cannot be said about boosted models or large neural networks.</li></ul><p>This beautiful visualization from <a href=\"http://scikit-learn.org/stable/auto_examples/ensemble/plot_forest_iris.html\"><strong>scikit-learn</strong></a> illustrates the modelling capacity of a decision forest:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*I8K0qBQ9QeppYjrFgbcoCw.png\" /><figcaption>Visualization from <a href=\"http://scikit-learn.org/\">scikit-learn.org</a> illustrating decision boundaries and modeling capacity of a single decision tree, a random forest and some other techniques.</figcaption></figure><h4>Drawbacks?</h4><ul><li>The main drawback of Random Forests is the model size. You could easily end up with a forest that takes hundreds of megabytes of memory and is slow to evaluate.</li><li>Another point that some might find a concern is that random forest models are black boxes that are very hard to interpret.</li></ul><h4>Some References:</h4><p>Here’s a <a href=\"http://oz.berkeley.edu/~breiman/randomforest2001.pdf\">paper</a> by <strong>Leo Breiman</strong>, the inventor of the algorithms describing random forests.</p><p>Here’s another amazing <a href=\"http://lowrank.net/nikos/pubs/empirical.pdf\">paper</a> by <strong>Rich Caruana</strong> et al. evaluating several supervised learning algorithms on many different datasets.</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=f33c3ce28883\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/rants-on-machine-learning/the-unreasonable-effectiveness-of-random-forests-f33c3ce28883\">The Unreasonable Effectiveness of Random Forests</a> was originally published in <a href=\"https://medium.com/rants-on-machine-learning\">Rants on Machine Learning</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"
}