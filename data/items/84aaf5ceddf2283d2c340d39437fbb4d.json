{
  "title": "Celebrate tiny learning milestones",
  "link": "",
  "updated": "2022-03-13T09:27:58+00:00",
  "id": "https://jvns.ca/blog/2022/03/13/celebrate-tiny-learning-milestones/",
  "content": "\n\n<p>Hello! Today I want to talk about &ndash; how do you know you&rsquo;re getting better at programming?</p>\n\n<p>One obvious approach is:</p>\n\n<ol>\n<li>make goals</li>\n<li>periodically check if you achieved those goals</li>\n<li>if you did, celebrate</li>\n</ol>\n\n<h3 id=\"i-kind-of-hate-goals\">I kind of hate goals</h3>\n\n<p>Goals can be useful, but a lot of the time I actually find them stressful and\nnot that helpful. For example, here are a few goals I wrote down for myself 9\nyears ago:</p>\n\n<ul>\n<li>write a nontrivial amount of C code that works and is used by actual people</li>\n<li>contribute to an open source project in C</li>\n<li>learn C++</li>\n</ul>\n\n<p>9 years later, I have done 0 of those things. With the &ldquo;goal&rdquo; framing, it&rsquo;s to\nthink of this as a bad thing! Like, I wanted to learn C++ and I didn&rsquo;t! I still\ncan&rsquo;t write C comfortably! Oh no! I guess I failed!</p>\n\n<p>I find this framing depressing and unhelpful. In reality, I didn&rsquo;t have any real\nreason to learn C++ then and I still don&rsquo;t now. So it makes sense that I\nhaven&rsquo;t learned it.</p>\n\n<p>Instead of goals, I like to think about <strong>tiny milestones</strong>.</p>\n\n<h3 id=\"what-s-a-milestone\">what&rsquo;s a milestone?</h3>\n\n<p>Usually when we talk about milestones we mean something big that only happens every few years, like &ldquo;I graduated from university&rdquo;.</p>\n\n<p>But in this post I want to talk about milestones in the sense of its etymology\n&ndash; <strong>stones</strong> placed every <strong>mile</strong> on a highway, so that you can track your\nprogress along a path.</p>\n\n<p>These happen much more often &ndash; maybe you used a new tool for the first time,\nor you fixed a new type of bug that you&rsquo;ve never seen before, or you learned\nabout a new concept!</p>\n\n<h3 id=\"a-few-of-my-tiny-c-milestones\">a few of my tiny C milestones</h3>\n\n<p>Here are a few examples of tiny milestones from the last 9 years that are\nspiritually related to my original &ldquo;learn C/C++&rdquo; goals.</p>\n\n<p>I&rsquo;m pretty sure that each of these individually took less than a week, though\nall together they took many years and a lot of them would have been impossible\nfor me at the beginning.</p>\n\n<ul>\n<li>wrote a tiny Linux kernel module that does almost nothing</li>\n<li>learned about <code>strace</code></li>\n<li>wrote a very basic shell in C with a friend</li>\n<li>learned how ELF binaries are organized (symbols, sections, etc)</li>\n<li>learned how to use <code>gdb</code> to inspect a C program&rsquo;s memory</li>\n<li>learned a little about how how <code>gdb</code> actually works internally (using DWARF)</li>\n<li>learned the diffence between static and dynamic linking</li>\n<li>learned how to look at how a program is linked with <code>ldd</code> or <code>file</code></li>\n<li>(years later) debugged a problem that was caused by dynamic linking</li>\n<li>implemented a buffer overflow exploit using <code>gdb</code> and <code>strace</code> (for a CTF)</li>\n<li>got a core dump for a crashing C++ program and managed to get a stack trace out of it</li>\n<li>learned about the RAII pattern (though in Rust, not C++)</li>\n<li>learned what a few basic x86 assembly instructions mean (<code>mov</code>, etc)</li>\n<li>pair programmed with a friend who already knew x86 assembly on implementing one Advent of Code problem (Day 1) in x86 assembly</li>\n<li>in general I&rsquo;m comfortable writing very basic C programs as long as they\ndon&rsquo;t have to do anything fancy like &ldquo;memory management&rdquo;</li>\n</ul>\n\n<p>And there were even some major milestones, like I wrote a <a href=\"https://github.com/rbspy/rbspy\">Ruby profiler</a> in Rust in 2018.</p>\n\n<p>When I think about it this way, I feel really good about my skills! I&rsquo;ve\nlearned all kinds of stuff related to systems programming, it just happened in\na different way than I originally expected.</p>\n\n<h3 id=\"fixing-a-bug-can-be-a-milestone\">fixing a bug can be a milestone</h3>\n\n<p>Every time I solve a bug that I couldn&rsquo;t have solved before, I think of it as a\ntiny milestone. For example, I&rsquo;ve been trying to get better at CSS. One big\npart of that for me is diving deeper into CSS bugs I encounter instead of\ngiving up.</p>\n\n<p>Last year, I was having a problem with a flexbox. It was something that I\nvaguely felt had happened to me before but that I&rsquo;d never been able to fix, and\nit made me feel like I didn&rsquo;t understand how flexbox worked.</p>\n\n<p>But instead of just finding a workaround, I decided to try to understand what was actually happening. And I\nended up finding a blog post that explained what was happening &ndash; <a href=\"https://weblog.west-wind.com/posts/2016/feb/15/flexbox-containers-pre-tags-and-managing-overflow\">Flexbox Containers, PRE tags and managing Overflow</a>.\nAnd that was really the cause of my bug!</p>\n\n<h3 id=\"changing-goals-isn-t-a-bad-thing\">changing goals isn&rsquo;t a bad thing</h3>\n\n<p>The reason I still haven&rsquo;t learned C isn&rsquo;t that I suck or that C is impossible\nto learn. It&rsquo;s just that learning how to write C well was never actually\nsomething I had a real reason to do.</p>\n\n<p>Instead I learned Rust and Go and <code>strace</code> and <code>gdb</code> and about C structs and\nsymbols and the call stack and the heap and lots of other things. (as an aside, I loved this paper <a href=\"https://www.humprog.org/~stephen/research/papers/kell17some-preprint.pdf\">Some were meant for C</a>\nabout how why C is still so important)</p>\n\n<p>And that worked great! So I think it&rsquo;s much more healthy to be flexible about\nyour goals and to celebrate the milestones you do end up getting to instead of\nfeeling bad about goals that you &ldquo;failed&rdquo; at.</p>\n\n<h3 id=\"you-can-learn-a-lot-by-accident\">you can learn a lot by &ldquo;accident&rdquo;</h3>\n\n<p>Most of my tiny milestones came up naturally because I had a project I wanted\nto do or a bug I needed to solve. So I didn&rsquo;t need to explicitly plan for them,\nthey just kind of happened along the way because I kept doing projects that\nchallenged me.</p>\n\n<h3 id=\"celebrate-your-tiny-milestones\">celebrate your tiny milestones</h3>\n\n<p>It&rsquo;s really helpful for me to <strong>celebrate</strong> tiny milestones like this. I celebrate\na lot by writing blog posts &ndash; I wrote the above list mostly by looking at my\nlist of old blog posts for things I&rsquo;d written about related to C.</p>\n\n<p>If you don&rsquo;t blog (it&rsquo;s definitely not for everyone!), it can be helpful to write down\nthis kind of thing in your <a href=\"https://jvns.ca/blog/brag-documents/\">brag document</a> instead.</p>\n\n<p>But I do think it&rsquo;s important to celebrate these milestones <em>somewhere</em>. It\ngives me a real sense that I&rsquo;m making progress and it helps me stay motivated\nto keep learning about the thing.</p>\n"
}