<?xml version="1.0" encoding="UTF-8" standalone="no"?><?xml-stylesheet href="http://www.blogger.com/styles/atom.css" type="text/css"?><feed xmlns="http://www.w3.org/2005/Atom" xmlns:blogger="http://schemas.google.com/blogger/2008" xmlns:gd="http://schemas.google.com/g/2005" xmlns:georss="http://www.georss.org/georss" xmlns:openSearch="http://a9.com/-/spec/opensearchrss/1.0/" xmlns:thr="http://purl.org/syndication/thread/1.0"><id>tag:blogger.com,1999:blog-1176949257541686127</id><updated>2022-10-30T01:46:18.552-04:00</updated><category term="android security"/><category term="Security"/><category term="android"/><category term="Open Source"/><category term="chrome"/><category term="chrome security"/><category term="privacy"/><category term="vulnerabilities"/><category term="pha family highlights"/><category term="rust"/><category term="#sharethemicincyber"/><category term="C++"/><category term="Titan M2"/><category term="app security"/><category term="diversity"/><category term="google play"/><category term="pixel"/><category term="supply chain"/><category term="#supplychain #security #opensource"/><category term="CTF"/><category term="Gboard"/><category term="Rowhammer"/><category term="VDP"/><category term="android tr"/><category term="big data"/><category term="biometrics"/><category term="blackhat"/><category term="encryption"/><category term="federated learning"/><category term="fuzzing"/><category term="google play protect"/><category term="hacking"/><category term="interoperability"/><category term="kubernetes"/><category term="linux kernel"/><category term="memory safety"/><category term="private compute core"/><category term="security rewards program"/><category term="sigstore"/><category term="spyware"/><category term="targeted spyware"/><category term="tensor"/><category term="workshop"/><title type="text">Google Online Security Blog</title><subtitle type="html">The latest news and insights from Google on security and safety on the Internet.</subtitle><link href="http://security.googleblog.com/feeds/posts/default" rel="http://schemas.google.com/g/2005#feed" type="application/atom+xml"/><link href="http://www.blogger.com/feeds/1176949257541686127/posts/default?redirect=false" rel="self" type="application/atom+xml"/><link href="http://security.googleblog.com/" rel="alternate" type="text/html"/><link href="http://pubsubhubbub.appspot.com/" rel="hub"/><link href="http://www.blogger.com/feeds/1176949257541686127/posts/default?start-index=26&amp;max-results=25&amp;redirect=false" rel="next" type="application/atom+xml"/><author><name>Edward Fernandez</name><uri>http://www.blogger.com/profile/03784424747198152685</uri><email>noreply@blogger.com</email><gd:image height="16" rel="http://schemas.google.com/g/2005#thumbnail" src="https://img1.blogblog.com/img/b16-rounded.gif" width="16"/></author><generator uri="http://www.blogger.com" version="7.00">Blogger</generator><openSearch:totalResults>492</openSearch:totalResults><openSearch:startIndex>1</openSearch:startIndex><openSearch:itemsPerPage>25</openSearch:itemsPerPage><entry><id>tag:blogger.com,1999:blog-1176949257541686127.post-1350669566602288553</id><published>2022-10-20T13:01:00.000-04:00</published><updated>2022-10-20T13:01:02.521-04:00</updated><title type="text">Announcing GUAC, a great pairing with SLSA (and SBOM)!</title><content type="html">&lt;span class="byline-author"&gt;Posted by Brandon Lum, Mihai Maruseac, Isaac Hepworth, Google Open Source Security Team &lt;/span&gt;&lt;p&gt;Supply chain security is at the fore of the industry’s collective consciousness. We’ve recently seen a significant &lt;a href="https://www.sonatype.com/press-releases/sonatype-finds-700-average-increase-in-open-source-supply-chain-attacks"&gt;rise in software supply chain attacks&lt;/a&gt;, a Log4j vulnerability of catastrophic severity and breadth, and even an &lt;a href="https://www.whitehouse.gov/briefing-room/presidential-actions/2021/05/12/executive-order-on-improving-the-nations-cybersecurity/"&gt;Executive Order on Cybersecurity&lt;/a&gt;.  &lt;/p&gt;&lt;p&gt;It is against this background that Google is seeking contributors to a new open source project called GUAC (pronounced like the dip). GUAC, or Graph for Understanding Artifact Composition, is in the early stages yet is &lt;strong&gt;poised to change how the industry understands software supply chains&lt;/strong&gt;. GUAC addresses a need created by the burgeoning efforts across the ecosystem to generate software build, security, and dependency metadata. True to Google’s mission to organize and make the world’s information universally accessible and useful, GUAC is meant to democratize the availability of this security information by making it freely accessible and useful for every organization, not just those with enterprise-scale security and IT funding.  &lt;/p&gt;&lt;p&gt;Thanks to community collaboration in groups such as &lt;a href="https://openssf.org/"&gt;OpenSSF&lt;/a&gt;, &lt;a href="http://slsa.dev"&gt;SLSA&lt;/a&gt;, &lt;a href="http://spdx.dev"&gt;SPDX&lt;/a&gt;, &lt;a href="https://cyclonedx.org/"&gt;CycloneDX&lt;/a&gt;, and others, organizations increasingly have ready access to: &lt;/p&gt;&lt;ul&gt; &lt;li&gt;Software Bills of Materials (SBOMs) (with &lt;a href="https://github.com/opensbom-generator/spdx-sbom-generator"&gt;SPDX-SBOM-Generator&lt;/a&gt;, &lt;a href="https://github.com/anchore/syft"&gt;Syft&lt;/a&gt;, &lt;a href="https://github.com/kubernetes-sigs/bom"&gt;kubernetes bom tool&lt;/a&gt;)  &lt;/li&gt;&lt;li&gt;signed attestations about how software was built (e.g. &lt;a href="https://slsa.dev/"&gt;SLSA&lt;/a&gt; with &lt;a href="https://slsa.dev/blog/2022/08/slsa-github-workflows-generic-ga"&gt;SLSA3 Github Actions Builder, Google Cloud Build&lt;/a&gt;)  &lt;/li&gt;&lt;li&gt;vulnerability databases that aggregate information across ecosystems and make vulnerabilities more discoverable and actionable (e.g. &lt;a href="https://osv.dev/"&gt;OSV.dev&lt;/a&gt;, &lt;a href="https://globalsecuritydatabase.org/"&gt;Global Security Database (GSD)&lt;/a&gt;).   &lt;/li&gt;&lt;/ul&gt;&lt;p&gt;These data are useful on their own, but it’s difficult to combine and synthesize the information for a more comprehensive view. The documents are scattered across different databases and producers, are attached to different ecosystem entities, and cannot be easily aggregated to answer higher-level questions about an organization’s software assets. &lt;/p&gt;&lt;p&gt;To help address this issue we’ve teamed up with Kusari, Purdue University, and Citi to create GUAC, a free tool to bring together many different sources of software security metadata. We’re excited to share the project’s proof of concept, which lets you query a small dataset of software metadata including SLSA provenance, SBOMs, and &lt;a href="https://securityscorecards.dev/"&gt;OpenSSF Scorecards&lt;/a&gt;.   &lt;/p&gt;&lt;h1&gt;What is GUAC&lt;/h1&gt;  &lt;p&gt;Graph for Understanding Artifact Composition (GUAC) aggregates software security metadata into a high fidelity graph database—normalizing entity identities and mapping standard relationships between them. Querying this graph can drive higher-level organizational outcomes such as audit, policy, risk management, and even developer assistance. &lt;/p&gt;&lt;p&gt;Conceptually, GUAC occupies the “aggregation and synthesis” layer of the software supply chain transparency logical model: &lt;/p&gt;&lt;div class="separator" style="clear: both;"&gt;&lt;a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhmDzAO2_-eCS88hfdrax64UfGbRlaPYT23jAvuag6L7JOP5yJ81iKqnp5YULhE9ghit94LbE99ZDe89vysWGrNbpIGiJquBM_stGfocTVYSL9YMj641uVqNa7wDoVfFuSLCk40PRzyQ-Lwyspu4YUiuqiM1Y5Ed9QG37i4cw1qcTJIJetRhp63FCgU8A/s1600/GUAC%20image%201%20.png" style="display: block; padding: 1em 0px; text-align: center;"&gt;&lt;img alt="" border="0" data-original-height="802" data-original-width="1044" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhmDzAO2_-eCS88hfdrax64UfGbRlaPYT23jAvuag6L7JOP5yJ81iKqnp5YULhE9ghit94LbE99ZDe89vysWGrNbpIGiJquBM_stGfocTVYSL9YMj641uVqNa7wDoVfFuSLCk40PRzyQ-Lwyspu4YUiuqiM1Y5Ed9QG37i4cw1qcTJIJetRhp63FCgU8A/s1600/GUAC%20image%201%20.png" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;p&gt;GUAC has four major areas of functionality: &lt;/p&gt;&lt;ol style="text-align: left;"&gt; &lt;li&gt;&lt;strong&gt;Collection&lt;/strong&gt;&lt;br /&gt;GUAC can be configured to connect to a variety of sources of software security metadata. Some sources may be open and public (e.g., OSV); some may be first-party (e.g., an organization’s internal repositories); some may be proprietary third-party (e.g., from data vendors). &lt;br /&gt; &lt;/li&gt;&lt;li&gt;&lt;strong&gt;Ingestion&lt;/strong&gt;&lt;br /&gt;From its upstream data sources GUAC imports data on artifacts, projects, resources, vulnerabilities, repositories, and even developers.&lt;br /&gt; &lt;/li&gt;&lt;li&gt;&lt;strong&gt;Collation&lt;/strong&gt;&lt;br /&gt;Having ingested raw metadata from disparate upstream sources, GUAC assembles it into a coherent graph by normalizing entity identifiers, traversing the dependency tree, and reifying implicit entity relationships, e.g., project → developer; vulnerability → software version; artifact → source repo, and so on.&lt;br /&gt; &lt;/li&gt;&lt;li&gt;&lt;strong&gt;Query&lt;/strong&gt;&lt;br /&gt;Against an assembled graph one may query for metadata attached to, or related to, entities within the graph. Querying for a given artifact may return its SBOM, provenance, build chain, project scorecard, vulnerabilities, and recent lifecycle events — and those for its transitive dependencies. &lt;div class="separator" style="clear: both;"&gt;&lt;a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgeBVObufbFPQFpDBXRdcLpLr9CpmZRINhr0d6iemWDlm-NZTGRymZ5wYTgAEOSS1IFKp1xlz8tibS3BQKVwQ63r08Yj-yIcbOwEec7MjgvGQPqFqVik3-VOJw5qZc0vcmPgiHKw87SLx2q6-McEW-LL5zFdCGAH3s-24qBD0Vh8C-Pi0UYDizzSxF14w/s1600/GUAC%20image%202.png" style="display: block; padding: 1em 0px; text-align: center;"&gt;&lt;img alt="" border="0" data-original-height="854" data-original-width="1360" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgeBVObufbFPQFpDBXRdcLpLr9CpmZRINhr0d6iemWDlm-NZTGRymZ5wYTgAEOSS1IFKp1xlz8tibS3BQKVwQ63r08Yj-yIcbOwEec7MjgvGQPqFqVik3-VOJw5qZc0vcmPgiHKw87SLx2q6-McEW-LL5zFdCGAH3s-24qBD0Vh8C-Pi0UYDizzSxF14w/s1600/GUAC%20image%202.png" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;p&gt;A CISO or compliance officer in an organization wants to be able to reason about the risk of their organization. An open source organization like the Open Source Security Foundation wants to identify critical libraries to maintain and secure. Developers need richer and more trustworthy intelligence about the dependencies in their projects. &lt;/p&gt;&lt;p&gt;The good news is, increasingly one finds the upstream supply chain already enriched with attestations and metadata to power higher-level reasoning and insights. The bad news is that it is difficult or impossible today for software consumers, operators, and administrators to gather this data into a unified view across their software assets. &lt;/p&gt;&lt;p&gt;To understand something complex like the blast radius of a vulnerability, one needs to trace the relationship between a component and everything else in the portfolio—a task that could span thousands of metadata documents across hundreds of sources. In the open source ecosystem, the number of documents could reach into the millions. &lt;/p&gt;&lt;p&gt;GUAC aggregates and synthesizes software security metadata at scale and makes it meaningful and actionable. With GUAC in hand, we will be able to answer questions at three important stages of software supply chain security: &lt;/p&gt;&lt;ul&gt; &lt;li&gt;&lt;strong&gt;Proactive&lt;/strong&gt;, e.g.,  &lt;ul&gt;  &lt;li&gt;What are the most used critical components in my software supply chain ecosystem?    &lt;/li&gt;&lt;li&gt;Where are the weak points in my overall security posture?   &lt;/li&gt;&lt;li&gt;How do I prevent supply chain compromises before they happen?   &lt;/li&gt;&lt;li&gt;Where am I exposed to risky dependencies? &lt;/li&gt;  &lt;/ul&gt; &lt;/li&gt;&lt;li&gt;&lt;strong&gt;Operational&lt;/strong&gt;, e.g.,  &lt;ul&gt;  &lt;li&gt;Is there evidence that the application I’m about to deploy meets organization policy?   &lt;/li&gt;&lt;li&gt;Do all binaries in production trace back to a securely managed repository? &lt;/li&gt;  &lt;/ul&gt; &lt;/li&gt;&lt;li&gt;&lt;strong&gt;Reactive&lt;/strong&gt;, e.g.,  &lt;ul&gt;  &lt;li&gt;Which parts of my organization’s inventory is affected by new vulnerability X?   &lt;/li&gt;&lt;li&gt;A suspicious project lifecycle event has occurred. Where is risk introduced to my organization?   &lt;/li&gt;&lt;li&gt;An open source project is being deprecated. How am I affected?&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;&lt;div class="separator" style="clear: both;"&gt;&lt;a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEispPLuVOA_GxcT5Twn81VVbMksuIX_xEvksTLzCPxqPs26Yt14--Kn9ZpeAEsMpdBhgovvF_BEhPrYYnctzv2zQTFGbgRDvO0qTkapXRlVtrWIUOq21Kyr7Ffw2LAEuBfQXIjZfb9XrtYBzcigK4h-3LPr_Wk2HpxkCgC_exw7XOX_vFKqYR8yYPNCyg/s1600/GUAC%203.png" style="display: block; padding: 1em 0px; text-align: center;"&gt;&lt;img alt="" border="0" data-original-height="616" data-original-width="1262" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEispPLuVOA_GxcT5Twn81VVbMksuIX_xEvksTLzCPxqPs26Yt14--Kn9ZpeAEsMpdBhgovvF_BEhPrYYnctzv2zQTFGbgRDvO0qTkapXRlVtrWIUOq21Kyr7Ffw2LAEuBfQXIjZfb9XrtYBzcigK4h-3LPr_Wk2HpxkCgC_exw7XOX_vFKqYR8yYPNCyg/s1600/GUAC%203.png" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;&lt;blockquote style="border: none; margin: 0 0 0 40px; padding: 0px;"&gt;&lt;h1 style="text-align: left;"&gt;Get Involved&lt;/h1&gt;&lt;/blockquote&gt;&lt;blockquote style="border: none; margin: 0 0 0 40px; padding: 0px;"&gt;&lt;p style="text-align: left;"&gt;&lt;a href="https://github.com/guacsec/guac"&gt;GUAC is an Open Source project on Github&lt;/a&gt;, and we are excited to get more folks involved and contributing (read the &lt;a href="https://github.com/guacsec/guac/blob/main/CONTRIBUTING.md"&gt;contributor guide&lt;/a&gt; to get started)! The project is still in its early stages, with a &lt;a href="https://github.com/guacsec/guac/blob/main/SETUP.md"&gt;proof of concept&lt;/a&gt; that can ingest SLSA, SBOM, and Scorecard documents and support simple queries and exploration of software metadata. The next efforts will focus on scaling the current capabilities and adding new document types for ingestion. We welcome help and contributions of code or documentation.  &lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote style="border: none; margin: 0 0 0 40px; padding: 0px;"&gt;&lt;p style="text-align: left;"&gt;Since the project will be consuming documents from many different sources and formats, we have put together a group of “Technical Advisory Members'' to help advise the project. These members include representation from companies and groups such as SPDX, CycloneDX Anchore, Aquasec, IBM, Intel, and &lt;a href="https://github.com/guacsec/guac/blob/main/TECHNICAL_ADVISORY_MEMBERS"&gt;many more&lt;/a&gt;. If you’re interested in participating as a contributor or advisor representing end users’ needs—or the sources of metadata GUAC consumes—you can register your interest in the relevant &lt;a href="https://github.com/guacsec/guac/issues/1"&gt;GitHub issue&lt;/a&gt;. &lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote style="border: none; margin: 0 0 0 40px; padding: 0px;"&gt;&lt;p style="text-align: left;"&gt;The GUAC team will be showcasing the project at Kubecon NA 2022 next week. Come by our &lt;a href="https://sched.co/182Jr"&gt;session&lt;/a&gt; if you’ll be there and have a chat with us—we’d be happy to talk in person or virtually!&lt;/p&gt;&lt;/blockquote&gt;</content><link href="http://security.googleblog.com/feeds/1350669566602288553/comments/default" rel="replies" title="Post Comments" type="application/atom+xml"/><link href="http://www.blogger.com/comment.g?blogID=1176949257541686127&amp;postID=1350669566602288553&amp;isPopup=true" rel="replies" title="0 Comments" type="text/html"/><link href="http://www.blogger.com/feeds/1176949257541686127/posts/default/1350669566602288553" rel="edit" type="application/atom+xml"/><link href="http://www.blogger.com/feeds/1176949257541686127/posts/default/1350669566602288553" rel="self" type="application/atom+xml"/><link href="http://security.googleblog.com/2022/10/announcing-guac-great-pairing-with-slsa.html" rel="alternate" title="Announcing GUAC, a great pairing with SLSA (and SBOM)!" type="text/html"/><author><name>Google</name><uri>http://www.blogger.com/profile/11822708545141062574</uri><email>noreply@blogger.com</email><gd:image height="16" rel="http://schemas.google.com/g/2005#thumbnail" src="https://img1.blogblog.com/img/b16-rounded.gif" width="16"/></author><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" height="72" url="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhmDzAO2_-eCS88hfdrax64UfGbRlaPYT23jAvuag6L7JOP5yJ81iKqnp5YULhE9ghit94LbE99ZDe89vysWGrNbpIGiJquBM_stGfocTVYSL9YMj641uVqNa7wDoVfFuSLCk40PRzyQ-Lwyspu4YUiuqiM1Y5Ed9QG37i4cw1qcTJIJetRhp63FCgU8A/s72-c/GUAC%20image%201%20.png" width="72"/><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1176949257541686127.post-7505887328979081747</id><published>2022-10-12T08:00:00.000-04:00</published><updated>2022-10-12T08:00:03.637-04:00</updated><title type="text">Security of Passkeys in the Google Password Manager</title><content type="html">&lt;span class="byline-author"&gt;Posted by Arnar Birgisson, Software Engineer&lt;/span&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;span id="docs-internal-guid-7794b4f7-7fff-3167-50a2-eb159cc4d1af"&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 10pt; margin-top: 0pt;"&gt;&lt;span face="Roboto, sans-serif" style="font-size: 12pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;We are excited to announce passkey support on Android and Chrome for developers to test today, with general availability following later this year. In this post we cover details on how passkeys stored in the &lt;a href="https://passwords.google.com/"&gt;Google Password Manager&lt;/a&gt; are kept secure. See our &lt;/span&gt;&lt;a href="https://android-developers.googleblog.com/2022/10/bringing-passkeys-to-android-and-chrome.html" style="text-decoration-line: none;"&gt;&lt;span face="Roboto, sans-serif" style="color: #1155cc; font-size: 12pt; font-variant-east-asian: normal; font-variant-numeric: normal; text-decoration-line: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;"&gt;post on the Android Developers Blog&lt;/span&gt;&lt;/a&gt;&lt;span face="Roboto, sans-serif" style="font-size: 12pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt; for a more general overview.&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 10pt; margin-top: 0pt;"&gt;&lt;span face="Roboto, sans-serif" style="font-size: 12pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Passkeys are a safer and more secure alternative to passwords. They also replace the need for traditional 2nd factor authentication methods such as text message, app based one-time codes or push-based approvals. Passkeys use public-key cryptography so that data breaches of service providers don't result in a compromise of passkey-protected accounts, and are based on industry standard APIs and protocols to ensure they are not subject to phishing attacks.&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 10pt; margin-top: 0pt;"&gt;&lt;span face="Roboto, sans-serif" style="font-size: 12pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Passkeys are the result of an industry-wide effort. They combine secure authentication standards created within the FIDO Alliance and the W3C Web Authentication working group with a common terminology and user experience across different platforms, recoverability against device loss, and a common integration path for developers. Passkeys are supported in Android and other leading industry client OS platforms.&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 10pt; margin-top: 0pt;"&gt;&lt;span face="Roboto, sans-serif" style="font-size: 12pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;A single passkey identifies a particular user account on some online service. A user has different passkeys for different services. The user's operating systems, or software similar to today's password managers, provide user-friendly management of passkeys. From the user's point of view, using passkeys is very similar to using saved passwords, but with significantly better security.&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 10pt; margin-top: 0pt;"&gt;&lt;span face="Roboto, sans-serif" style="font-size: 12pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;The main ingredient of a passkey is a cryptographic private key. In most cases, this private key lives only on the user's own devices, such as laptops or mobile phones. When a passkey is created, only its corresponding public key is stored by the online service. During login, the service uses the public key to verify a signature from the private key. This can only come from one of the user's devices. Additionally, the user is also required to unlock their device or credential store for this to happen, preventing sign-ins from e.g. a stolen phone.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 10pt; margin-top: 0pt;"&gt;&lt;span face="Roboto, sans-serif" style="font-size: 12pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;To address the common case of device loss or upgrade, a key feature enabled by passkeys is that the same private key can exist on multiple devices. This happens through platform-provided synchronization and backup.&lt;/span&gt;&lt;/p&gt;&lt;h3 dir="ltr" style="line-height: 1.38; margin-bottom: 4pt; margin-top: 14pt;"&gt;&lt;span face="Roboto, sans-serif" style="font-size: 16pt; font-variant-east-asian: normal; font-variant-numeric: normal; font-weight: 400; vertical-align: baseline; white-space: pre-wrap;"&gt;Passkeys in the Google Password Manager&lt;/span&gt;&lt;/h3&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 10pt; margin-top: 0pt;"&gt;&lt;span face="Roboto, sans-serif" style="font-size: 12pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;On Android, the Google Password Manager provides backup and sync of passkeys. This means that if a user sets up two Android devices with the same Google Account, passkeys created on one device are available on the other. This applies both to the case where a user has multiple devices simultaneously, for example a phone and a tablet, and the more common case where a user upgrades e.g. from an old Android phone to a new one.&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 10pt; margin-top: 0pt;"&gt;&lt;span face="Roboto, sans-serif" style="font-size: 12pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Passkeys in the Google Password Manager are &lt;/span&gt;&lt;span face="Roboto, sans-serif" style="font-size: 12pt; font-variant-east-asian: normal; font-variant-numeric: normal; font-weight: 700; vertical-align: baseline; white-space: pre-wrap;"&gt;always &lt;/span&gt;&lt;span face="Roboto, sans-serif" style="font-size: 12pt; font-style: italic; font-variant-east-asian: normal; font-variant-numeric: normal; font-weight: 700; vertical-align: baseline; white-space: pre-wrap;"&gt;end-to-end encrypted&lt;/span&gt;&lt;span face="Roboto, sans-serif" style="font-size: 12pt; font-style: italic; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;:&lt;/span&gt;&lt;span face="Roboto, sans-serif" style="font-size: 12pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt; When a passkey is backed up, its private key is uploaded only in its encrypted form using an encryption key that is only accessible on the user's own devices. This protects passkeys against Google itself, or e.g. a malicious attacker inside Google. Without access to the private key, such an attacker cannot use the passkey to sign in to its corresponding online account.&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 10pt; margin-top: 0pt;"&gt;&lt;span face="Roboto, sans-serif" style="font-size: 12pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Additionally, passkey private keys are encrypted at rest on the user's devices, with a hardware-protected encryption key.&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 10pt; margin-top: 0pt;"&gt;&lt;span face="Roboto, sans-serif" style="font-size: 12pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Creating or using passkeys stored in the Google Password Manager requires a screen lock to be set up. This prevents others from using a passkey even if they have access to the user's device, but is also necessary to facilitate the end-to-end encryption and safe recovery in the case of device loss.&lt;/span&gt;&lt;/p&gt;&lt;h3 dir="ltr" style="line-height: 1.38; margin-bottom: 4pt; margin-top: 14pt;"&gt;&lt;span face="Roboto, sans-serif" style="font-size: 16pt; font-variant-east-asian: normal; font-variant-numeric: normal; font-weight: 400; vertical-align: baseline; white-space: pre-wrap;"&gt;Recovering access or adding new devices&lt;/span&gt;&lt;/h3&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 10pt; margin-top: 0pt;"&gt;&lt;span face="Roboto, sans-serif" style="font-size: 12pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;When a user sets up a new Android device by transferring data from an older device, existing end-to-end encryption keys are securely transferred to the new device. In some cases, for example, when the older device was lost or damaged, users may need to recover the end-to-end encryption keys from a secure online backup.&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 10pt; margin-top: 0pt;"&gt;&lt;span face="Roboto, sans-serif" style="font-size: 12pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;To recover the end-to-end encryption key, the user must provide the lock screen PIN, password, or pattern of another existing device that had access to those keys. Note, that restoring passkeys on a new device requires &lt;/span&gt;&lt;span face="Roboto, sans-serif" style="font-size: 12pt; font-variant-east-asian: normal; font-variant-numeric: normal; font-weight: 700; vertical-align: baseline; white-space: pre-wrap;"&gt;both&lt;/span&gt;&lt;span face="Roboto, sans-serif" style="font-size: 12pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt; being signed in to the Google Account and an existing device's screen lock.&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 10pt; margin-top: 0pt;"&gt;&lt;span face="Roboto, sans-serif" style="font-size: 12pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Since screen lock PINs and patterns, in particular, are short, the recovery mechanism provides protection against brute-force guessing. After a small number of consecutive, incorrect attempts to provide the screen lock of an existing device, it can no longer be used. This number is always 10 or less, but for safety reasons we may block attempts before that number is reached. Screen locks of other existing devices may still be used.&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 10pt; margin-top: 0pt;"&gt;&lt;span face="Roboto, sans-serif" style="font-size: 12pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;If the maximum number of attempts is reached for all existing devices on file, e.g. when a malicious actor tries to brute force guess, the user may still be able to recover if they still have access to one of the existing devices and knows its screen lock. By signing in to the existing device and changing its screen lock PIN, password or pattern, the count of invalid recovery attempts is reset. End-to-end encryption keys can then be recovered on the new device by entering the new screen lock of the existing device.&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 10pt; margin-top: 0pt;"&gt;&lt;span face="Roboto, sans-serif" style="font-size: 12pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Screen lock PINs, passwords or patterns themselves are not known to Google. The data that allows Google to verify correct input of a device's screen lock is stored on Google's servers in secure hardware enclaves and cannot be read by Google or any other entity. The secure hardware also enforces the limits on maximum guesses, which cannot exceed 10 attempts, even by an internal attack. This protects the screen lock information, even from Google.&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 10pt; margin-top: 0pt;"&gt;&lt;span face="Roboto, sans-serif" style="font-size: 12pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;When the screen lock is removed from a device, the previously configured screen lock may still be used for recovery of end-to-end encryption keys on other devices for a period of time up to 64 days. If a user believes their screen lock is compromised, the safer option is to configure a different screen lock (e.g. a different PIN). This disables the previous screen lock as a recovery factor immediately, as long as the user is online and signed in on the device.&lt;/span&gt;&lt;/p&gt;&lt;h3 dir="ltr" style="line-height: 1.38; margin-bottom: 4pt; margin-top: 14pt;"&gt;&lt;span face="Roboto, sans-serif" style="font-size: 16pt; font-variant-east-asian: normal; font-variant-numeric: normal; font-weight: 400; vertical-align: baseline; white-space: pre-wrap;"&gt;Recovery user experience&lt;/span&gt;&lt;/h3&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 10pt; margin-top: 0pt;"&gt;&lt;span face="Roboto, sans-serif" style="font-size: 12pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;If end-to-end encryption keys were not transferred during device setup, the recovery process happens automatically the first time a passkey is created or used on the new device. In most cases, this only happens once on each new device.&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 10pt; margin-top: 0pt;"&gt;&lt;span face="Roboto, sans-serif" style="font-size: 12pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;From the user's point of view, this means that when using a passkey for the first time on the new device, they will be asked for an existing device's screen lock in order to restore the end-to-end encryption keys, and then for the current device's screen lock or biometric, which is required every time a passkey is used.&lt;/span&gt;&lt;/p&gt;&lt;h3 dir="ltr" style="line-height: 1.38; margin-bottom: 4pt; margin-top: 14pt;"&gt;&lt;span face="Roboto, sans-serif" style="font-size: 16pt; font-variant-east-asian: normal; font-variant-numeric: normal; font-weight: 400; vertical-align: baseline; white-space: pre-wrap;"&gt;Passkeys and device-bound private keys&lt;/span&gt;&lt;/h3&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 10pt; margin-top: 0pt;"&gt;&lt;span face="Roboto, sans-serif" style="font-size: 12pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Passkeys are an instance of &lt;/span&gt;&lt;a href="https://fidoalliance.org/white-paper-multi-device-fido-credentials/" style="text-decoration-line: none;"&gt;&lt;span face="Roboto, sans-serif" style="color: #1155cc; font-size: 12pt; font-variant-east-asian: normal; font-variant-numeric: normal; text-decoration-line: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;"&gt;FIDO multi-device credentials&lt;/span&gt;&lt;/a&gt;&lt;span face="Roboto, sans-serif" style="font-size: 12pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;. Google recognizes that in certain deployment scenarios, relying parties may still require signals about the strong device binding that traditional FIDO credentials provide, while taking advantage of the recoverability and usability of passkeys.&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 10pt; margin-top: 0pt;"&gt;&lt;span face="Roboto, sans-serif" style="font-size: 12pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;To address this, passkeys on Android support the proposed &lt;/span&gt;&lt;a href="https://pr-preview.s3.amazonaws.com/w3c/webauthn/pull/1663.html#sctn-device-publickey-extension" style="text-decoration-line: none;"&gt;&lt;span face="Roboto, sans-serif" style="color: #1155cc; font-size: 12pt; font-variant-east-asian: normal; font-variant-numeric: normal; text-decoration-line: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;"&gt;Device-bound Public Key WebAuthn extension&lt;/span&gt;&lt;/a&gt;&lt;span face="Roboto, sans-serif" style="font-size: 12pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt; (&lt;/span&gt;&lt;span face="Roboto, sans-serif" style="font-size: 12pt; font-style: italic; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;devicePubKey)&lt;/span&gt;&lt;span face="Roboto, sans-serif" style="font-size: 12pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;. If this extension is requested when creating or using passkeys on Android, relying parties will receive two signatures in the result: One from the passkey private key, which may exist on multiple devices, and an additional signature from a second private key that only exists on the current device. This &lt;/span&gt;&lt;span face="Roboto, sans-serif" style="font-size: 12pt; font-style: italic; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;device-bound private key&lt;/span&gt;&lt;span face="Roboto, sans-serif" style="font-size: 12pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt; is unique to the passkey in question, and each response includes a copy of the corresponding device-bound public key.&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 10pt; margin-top: 0pt;"&gt;&lt;span face="Roboto, sans-serif" style="font-size: 12pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Observing two passkey signatures with the same device-bound public key is a strong signal that the signatures are generated by the same device. On the other hand, if a relying party observes a device-bound public key it has not seen before, this may indicate that the passkey has been synced to a new device.&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 10pt; margin-top: 0pt;"&gt;&lt;span face="Roboto, sans-serif" style="font-size: 12pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;On Android, device-bound private keys are generated in the device's trusted execution environment (TEE), via the &lt;/span&gt;&lt;a href="https://source.android.com/docs/security/features/keystore" style="text-decoration-line: none;"&gt;&lt;span face="Roboto, sans-serif" style="color: #1155cc; font-size: 12pt; font-variant-east-asian: normal; font-variant-numeric: normal; text-decoration-line: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;"&gt;Android Keystore API&lt;/span&gt;&lt;/a&gt;&lt;span face="Roboto, sans-serif" style="font-size: 12pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;. This provides hardware-backed protections against exfiltration of the device-bound private keys to other devices. Device-bound private keys are not backed up, so e.g. when a device is factory reset and restored from a prior backup, its device-bound key pairs will be different.&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 10pt; margin-top: 0pt;"&gt;&lt;span face="Roboto, sans-serif" style="font-size: 12pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;The device-bound key pair is created and stored on-demand. That means relying parties can request the devicePubKey extension when getting a signature from an existing passkey, even if devicePubKey was not requested when the passkey was created.&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;/div&gt;</content><link href="http://security.googleblog.com/feeds/7505887328979081747/comments/default" rel="replies" title="Post Comments" type="application/atom+xml"/><link href="http://www.blogger.com/comment.g?blogID=1176949257541686127&amp;postID=7505887328979081747&amp;isPopup=true" rel="replies" title="0 Comments" type="text/html"/><link href="http://www.blogger.com/feeds/1176949257541686127/posts/default/7505887328979081747" rel="edit" type="application/atom+xml"/><link href="http://www.blogger.com/feeds/1176949257541686127/posts/default/7505887328979081747" rel="self" type="application/atom+xml"/><link href="http://security.googleblog.com/2022/10/SecurityofPasskeysintheGooglePasswordManager.html" rel="alternate" title="Security of Passkeys in the Google Password Manager" type="text/html"/><author><name>Kimberly Samra</name><uri>http://www.blogger.com/profile/17209446531010386292</uri><email>noreply@blogger.com</email><gd:image height="16" rel="http://schemas.google.com/g/2005#thumbnail" src="https://img1.blogblog.com/img/b16-rounded.gif" width="16"/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1176949257541686127.post-8888529176620158656</id><published>2022-10-11T13:01:00.004-04:00</published><updated>2022-10-11T19:22:42.718-04:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="android security"/><category scheme="http://www.blogger.com/atom/ns#" term="pixel"/><category scheme="http://www.blogger.com/atom/ns#" term="Titan M2"/><title type="text">Google Pixel 7 and Pixel 7 Pro: The next evolution in mobile security</title><content type="html">&lt;span class="byline-author"&gt;Dave Kleidermacher, Jesse Seed, Brandon Barbello, Sherif Hanna, Eugene Liderman, Android, Pixel, and Silicon Security Teams&lt;/span&gt; &lt;p&gt;Every day, billions of people around the world trust Google products to enrich their lives and provide helpful features –  across mobile devices, smart home devices, health and fitness devices, and more. We keep more people safe online than anyone else in the world, with products that are secure by default, private by design and that put you in control. As our advancements in knowledge and computing grow to deliver more help across contexts, locations and languages, our unwavering commitment to protecting your information remains. &lt;/p&gt;&lt;p&gt;That’s why Pixel phones are designed from the ground up to help protect you and your sensitive data while keeping you in control. We’re taking our industry-leading approach to security and privacy to the next level with Google Pixel 7 and Pixel 7 Pro, our most secure and private phones yet, which were recently recognized as the highest rated for security when tested among other smartphones by a third-party global research firm.&lt;sup id="fnref1"&gt;&lt;a href="#fn1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;  &lt;/p&gt;&lt;p&gt;Pixel phones also get better every few months with Feature Drops that provide the latest product updates, tips and tricks from Google. And Pixel 7 and Pixel 7 Pro users will receive at least five years of security updates&lt;sup id="fnref2"&gt;&lt;a href="#fn2" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt;, so your Pixel gets even more secure over time. &lt;/p&gt;&lt;p&gt;&lt;strong&gt;Your protection, built into Pixel&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Your digital life and most sensitive information lives on your phone: financial information, passwords, personal data, photos – you name it. With Google Tensor G2 and our custom Titan M2 security chip, Pixel 7 and Pixel 7 Pro have multiple layers of hardware security to help keep you and your personal information safe. We take a comprehensive, end-to-end approach to security with verifiable protections at each layer - the network, application, operating system and multiple layers on the silicon itself. If you use Pixel for your business, this approach helps protect your company data, too.  &lt;/p&gt;&lt;p&gt;&lt;div class="separator" style="clear: both;"&gt;&lt;a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEggAnSsDEwcnzxZ_CBRosEw8rzu5l27OQXjqQ3yS0bQ96h0Gt-4OKxF9e81zd0NSHDoPwRxOHj3L0CFamDm_3ROfLsQQw-zvHEWfO2UyOyAWep-sQJqkVkc2ThW-gSdpn4cqbyiXWR0PciKdTL8sBFUM0jVBq-Neo9FK32TyiFfaE9MjyKjAqiNLPdcBQ/s1600/google_de22_thumbnails_tensor_light_1156x578.png" style="display: block; padding: 1em 0; text-align: center; "&gt;&lt;img alt="" border="0" data-original-height="578" data-original-width="1156" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEggAnSsDEwcnzxZ_CBRosEw8rzu5l27OQXjqQ3yS0bQ96h0Gt-4OKxF9e81zd0NSHDoPwRxOHj3L0CFamDm_3ROfLsQQw-zvHEWfO2UyOyAWep-sQJqkVkc2ThW-gSdpn4cqbyiXWR0PciKdTL8sBFUM0jVBq-Neo9FK32TyiFfaE9MjyKjAqiNLPdcBQ/s1600/google_de22_thumbnails_tensor_light_1156x578.png"/&gt;&lt;/a&gt;&lt;/div&gt; &lt;/p&gt;&lt;p&gt;Google Tensor G2 is Pixel’s newest powerful processor custom built with Google AI, and makes Pixel 7 faster, more efficient and secure&lt;sup id="fnref3"&gt;&lt;a href="#fn3" rel="footnote"&gt;3&lt;/a&gt;&lt;/sup&gt;. Every aspect of Tensor G2 was designed to improve Pixel's performance and efficiency for great battery life, amazing photos and videos.  &lt;/p&gt;&lt;p&gt;Tensor’s built-in security core works with our Titan M2 security chip to keep your personal information, PINs and passwords safe. Titan family chips are also used to protect Google Cloud data centers and Chromebooks, so the same hardware that protects Google servers also secures your sensitive information stored on Pixel.  &lt;/p&gt;&lt;p&gt;And, in a first for Google, Titan M2 hardware has now been certified under Common Criteria PP0084: the international gold standard for hardware security components also used for identity, SIM cards, and bankcard security chips.&lt;sup id="fnref4"&gt;&lt;a href="#fn4" rel="footnote"&gt;4&lt;/a&gt;&lt;/sup&gt; This means that the Titan M2 hardware meets the same rigorous protection guidelines trusted by banks, carriers, and governments.  &lt;/p&gt;&lt;p&gt;To achieve the certification we went through rigorous third party lab testing by SGS Brightsight, a leading international security lab, and received certification against CC PP0084 with AVA_VAN.5 for the Titan M2 hardware and cryptography library from the Netherlands scheme for Certification in the Area of IT Security (NSCIB).  Of all those numbers and acronyms the part we’re most proud of is that Titan hardware passed the highest level of vulnerability assessment (AVA_VAN.5) - the truest measure of resilience to advanced, methodical attacks. &lt;/p&gt;&lt;p&gt;This process took us more than three years to complete. The certification not only requires chip hardware to resist invasive penetration testing, but also mandates audits of the chip design and manufacturing process itself.  The benefit for consumers? The now certified Titan M2 chip makes your phone even more resilient to sophisticated attacks.&lt;sup id="fnref5"&gt;&lt;a href="#fn5" rel="footnote"&gt;5&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Private by design&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Evolving our security and privacy standards to our fast-paced world requires new approaches as well. Earlier this year at I/O, we &lt;a href="https://blog.google/technology/safety-security/how-we-make-every-day-safer-with-google/"&gt;introduced Protected Computing&lt;/a&gt;, a toolkit of technologies that transforms how, when, and where personal data is processed to protect your privacy and security. Our approach focuses on: &lt;/p&gt;&lt;ol&gt; &lt;li&gt;Minimizing your data footprint, by shrinking the amount of personally identifiable data altogether  &lt;li&gt;De-identifying data, with a range of anonymization techniques so it’s not linked to you  &lt;li&gt;Restricting data access using technologies like end-to-end encryption and secure enclaves.  &lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Many elements of Protected Computing can be found on the new Pixel 7: &lt;/p&gt;&lt;p&gt;On Android, Private Compute Core keeps your information and AI-driven personalizations private with on-device processing. Data from features like Now Playing, Live Caption and Smart Reply in Messages are all processed on device and are never sent to Google to maintain your privacy.  And even your device backups to the cloud are &lt;a href="https://security.googleblog.com/2018/10/google-and-android-have-your-back-by.html"&gt;end-to-end encrypted&lt;/a&gt; using Titan in the cloud.&lt;sup id="fnref6"&gt;&lt;a href="#fn6" rel="footnote"&gt;6&lt;/a&gt;&lt;/sup&gt;   &lt;/p&gt;&lt;p&gt;With Google Tensor G2, Pixel’s advanced privacy protection also now covers audio data from events like cough and snore detection on Pixel 7.&lt;sup id="fnref7"&gt;&lt;a href="#fn7" rel="footnote"&gt;7&lt;/a&gt;&lt;/sup&gt; Audio data from cough and snore detection is never stored by or sent to Google to maintain your privacy.  &lt;/p&gt;&lt;p&gt;On Pixel 7, Tensor G2 helps safeguard your system with the &lt;a href="https://source.android.com/docs/core/virtualization"&gt;Android Virtualization Framework&lt;/a&gt;, unlocking improved security protections like enabling system update integrity checking to occur on-the-fly, reducing boot time after an update.  &lt;/p&gt;&lt;p&gt;&lt;strong&gt;Extra protection when you’re online&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Helping to keep you safe when you use your phone to browse the web and use apps is also critical. This is where a Virtual Private Network (VPN) comes in. A VPN helps protect your online activity from anyone who might try to access it by encrypting your network traffic to turn it into an unreadable format, and masking your original IP address. Typically, if you want a VPN on your phone, you need to get one from a third party. &lt;/p&gt;&lt;p&gt;To ensure more people have access to enhanced security, later this year, Pixel 7 and Pixel 7 Pro owners will be able to use VPN by Google One, at no extra cost.&lt;sup id="fnref8"&gt;&lt;a href="#fn8" rel="footnote"&gt;8&lt;/a&gt;&lt;/sup&gt; &lt;a href="https://one.google.com/about/vpn/howitworks"&gt;VPN by Google One&lt;/a&gt; is verifiably private, and will allow you to tap into Google’s world-class security for peace of mind when you connect online. With VPN by Google One, Pixel helps protect your online activity at a network level. Think of it like an extra layer of protection for your online security.  &lt;/p&gt;&lt;p&gt;VPN by Google One creates a high-performance secure connection to the web so your browsing and app data is sent and received via an encrypted pathway. A few simple taps will activate the VPN to help keep your network traffic private from internet providers and hackers, giving you peace of mind when using cellular data, home Wi-Fi, and especially when connected to public networks, like a café or airport Wi-Fi. No need to worry about online intruders, hackers, or unsecure networks.  &lt;/p&gt;&lt;p&gt; &lt;div class="separator" style="clear: both;"&gt;&lt;a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEixLYAdyddPs0T4MgNq-Zgxlat6JywluvS4ucFjzwW_Mx8L6dFJUZNxL9Bql9VUcqiVp4zKCjbvyM9ziy2haRc3dqERPlTgptnQRcjrc5mHadFXpl1EE7LmwehMFIobdGb1GTvKyCAexBZKFKUu9wQyTsL1tvieNiyJANodD7mrwqfZOD9lOSbqAf3WKA/s1600/image_P7P_VPN.jpg" style="display: block; padding: 1em 0; text-align: center; "&gt;&lt;img alt="" border="0" data-original-height="3049" data-original-width="4572" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEixLYAdyddPs0T4MgNq-Zgxlat6JywluvS4ucFjzwW_Mx8L6dFJUZNxL9Bql9VUcqiVp4zKCjbvyM9ziy2haRc3dqERPlTgptnQRcjrc5mHadFXpl1EE7LmwehMFIobdGb1GTvKyCAexBZKFKUu9wQyTsL1tvieNiyJANodD7mrwqfZOD9lOSbqAf3WKA/s1600/image_P7P_VPN.jpg"/&gt;&lt;/a&gt;&lt;/div&gt;      &lt;/p&gt;&lt;p&gt;Unlike traditional VPN services, VPN by Google One uses Protected Computing to technically make it impossible for anyone at a network level, even VPN by Google One, to link your online traffic with your account or identity. VPN by Google One will be available at no extra cost as long as your phone continues to receive security updates. &lt;a href="https://support.google.com/googleone/answer/7582172?hl=en&amp;amp;co=GENIE.Platform%3DAndroid" target="_blank"&gt;See here&lt;/a&gt; to learn more about VPN by Google One. &lt;/p&gt;&lt;p&gt;&lt;strong&gt;More protection and privacy with Android 13&lt;/strong&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;Pixel 7 and Pixel 7 Pro have built-in anti-phishing protections from Android that scan for potential threats from phone calls, text messages and emails, and more anti-phishing protections enabled out-of-the-box than smartphones from leading competitors.&lt;sup id="fnref9"&gt;&lt;a href="#fn9" rel="footnote"&gt;9&lt;/a&gt;&lt;/sup&gt; In fact, Messages alone protects consumers against &lt;a href="https://security.googleblog.com/2022/05/io-2022-android-13-security-and-privacy.html"&gt;1.5 billion spam messages per month&lt;/a&gt;. &lt;/p&gt;&lt;p&gt;Android also resets permissions for apps you haven’t used for an extended time. In a typical month, Android automatically resets more than 3 billion permissions affecting more than 1 billion installed apps. Similarly, if you use clipboard on Android 13, your history is automatically deleted after a period of time. This blocks apps running in the foreground from seeing old information that you previously copied. &lt;/p&gt;&lt;p&gt;&lt;strong&gt;You’re in control&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;Core to your safety is knowing that you’re in control. You always have control over your settings and devices across all of our products. With Android 13, coming soon through a Feature Drop, Pixel 7 and Pixel 7 Pro will give you additional ways to stay in control of your privacy and what you share with first and third-party apps. With Quick Settings, you can act on security issues as they arise, or review which apps are running in the background and easily stop them. You’ll have a single destination for reviewing your security and privacy settings, risk levels and information, making it easier to manage your safety status.  &lt;/p&gt;&lt;p&gt; &lt;div class="separator" style="clear: both;"&gt;&lt;a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhszhPW14qxBvA6-0E1zSIx5L8GXiJqPswYsEHbBnt0mIm8UlVC8SKjhAnPFtxTUThZ3rXF5QSi6F1adzLi5LtD2EzuyO3lkbDRdAXZ-xw4kA9ZedcHc5SJSWQGqUzA0VtUGeANLhaJrGOBw8_yBCTJg6cd6lFbfSqwdnoeopl-b_fxNEMrqPTTRiztZQ/s944/Security%20and%20privacy%20settings%20%281%29.gif" style="display: block; padding: 1em 0; text-align: center; "&gt;&lt;img alt="" border="0" height="400" data-original-height="944" data-original-width="447" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhszhPW14qxBvA6-0E1zSIx5L8GXiJqPswYsEHbBnt0mIm8UlVC8SKjhAnPFtxTUThZ3rXF5QSi6F1adzLi5LtD2EzuyO3lkbDRdAXZ-xw4kA9ZedcHc5SJSWQGqUzA0VtUGeANLhaJrGOBw8_yBCTJg6cd6lFbfSqwdnoeopl-b_fxNEMrqPTTRiztZQ/s400/Security%20and%20privacy%20settings%20%281%29.gif"/&gt;&lt;/a&gt;&lt;/div&gt;   &lt;/p&gt;&lt;p&gt;With this new experience, you can review actionable steps to improve your safety status, like revoking a permission or app. This page will also have new action cards to notify you of any safety risks and provide timely recommendations on how to enhance your privacy. And with a single tap, you can grant or remove permissions to data that you don’t want to share with compatible apps. This will be coming soon first to Pixel devices later this year, and other Android phones soon after. &lt;/p&gt;&lt;p&gt;&lt;strong&gt;Verifiably secure &lt;/strong&gt;&lt;/p&gt;&lt;p&gt;As computing extends to more devices and use cases, Google is committed to innovating in security and being transparent about the processes that we take to get there. We are leading the industry in verifiable security by not only having products that are tested against real-world threats (like advanced spam, phishing and malware attacks), but also in publishing the results of penetration tests, security audits, and industry certifications across our &lt;a href="https://g.co/pixel/certifications"&gt;Pixel&lt;/a&gt; and &lt;a href="https://support.google.com/product-documentation/answer/10231940"&gt;Nest&lt;/a&gt; products. &lt;/p&gt;&lt;p&gt;Another way to verify our security is through our Android and Google Devices Security Reward Program where we reward security researchers who find vulnerabilities across products, including Pixel, Nest and Fitbit. Last year on Android, we &lt;a href="https://security.googleblog.com/2022/02/vulnerability-reward-program-2021-year.html"&gt;awarded nearly $3 million dollars&lt;/a&gt;, creating a valuable feedback loop between us and the security research community and, most importantly, helping us keep our users safe.           &lt;/p&gt;&lt;p&gt;To learn more about Pixel 7 and Pixel 7 Pro, check out the &lt;a href="https://store.google.com/category/phones?hl=en-US"&gt;Google Store&lt;/a&gt;. &lt;/p&gt; &lt;!-- Footnotes themselves at the bottom. --&gt; &lt;h2&gt;Notes&lt;/h2&gt;&lt;div class="footnotes"&gt;&lt;hr&gt;&lt;ol&gt;&lt;li id="fn1"&gt;&lt;p&gt;     Based on third-party global research firm. Evaluation considered features that may not be available in all countries. See &lt;a href="https://omdia.tech.informa.com/commissioned-research/articles/mobile-device-security-2022-annual-buyers-scorecard-assessing-the-security-of-leading-mobile-devices"&gt;here&lt;/a&gt; for more information. &amp;nbsp;&lt;a href="#fnref1" rev="footnote"&gt;&amp;#8617;&lt;/a&gt;&lt;li id="fn2"&gt;&lt;p&gt;     &lt;sup&gt; &lt;/sup&gt;Android version updates and feature drops for at least 3 years from when the device first became available on the Google Store in the US. Android security updates for at least 5 years from when the device first became available on the Google Store in the US. See g.co/pixel/updates for details.&amp;nbsp;&lt;a href="#fnref2" rev="footnote"&gt;&amp;#8617;&lt;/a&gt;&lt;li id="fn3"&gt;&lt;p&gt;     Compared to Pixel 6. Speed and efficiency claims based on internal testing on pre-production devices. &amp;nbsp;&lt;a href="#fnref3" rev="footnote"&gt;&amp;#8617;&lt;/a&gt;&lt;li id="fn4"&gt;&lt;p&gt;     Common Criteria certification for hardware and cryptographic library (CC PP0084 EAL4+, AVA_VAN.5 and ALC_DVS.2). See g.co/pixel/certifications for details.&amp;nbsp;&lt;a href="#fnref4" rev="footnote"&gt;&amp;#8617;&lt;/a&gt;&lt;li id="fn5"&gt;&lt;p&gt;     Compared to Pixel 5a and earlier Pixel phones. &amp;nbsp;&lt;a href="#fnref5" rev="footnote"&gt;&amp;#8617;&lt;/a&gt;&lt;li id="fn6"&gt;&lt;p&gt;     Excludes MMS attachments and Google Photos.&amp;nbsp;&lt;a href="#fnref6" rev="footnote"&gt;&amp;#8617;&lt;/a&gt;&lt;li id="fn7"&gt;&lt;p&gt;     &lt;strong&gt; &lt;/strong&gt;Not intended to diagnose, cure, mitigate, prevent or treat any disease or condition. Consult your healthcare professional if you have questions about your health. See g.co/pixel/digitalwellbeing for more information. &amp;nbsp;&lt;a href="#fnref7" rev="footnote"&gt;&amp;#8617;&lt;/a&gt;&lt;li id="fn8"&gt;&lt;p&gt;     Coming soon. Restrictions apply. Some data is not transmitted through VPN. Not available in all countries. All other Google One membership benefits sold separately. This VPN offer does not impact price or benefits of Google One  Premium plan. Use of VPN may increase data costs depending on your plan. See g.co/pixel/vpn for details.&amp;nbsp;&lt;a href="#fnref8" rev="footnote"&gt;&amp;#8617;&lt;/a&gt;&lt;li id="fn9"&gt;&lt;p&gt;     Based on third-party research funded by Google LLC in June 2022. Evaluation based on no-cost smartphone features enabled by default. Some features may not be available in all countries. See &lt;a href="https://www.leviathansecurity.com/media/5fajnujsa8tzkdf5sznnw0utdvqd9g-tgwn4-pp73e"&gt;here&lt;/a&gt; for more information.&amp;nbsp;&lt;a href="#fnref9" rev="footnote"&gt;&amp;#8617;&lt;/a&gt; &lt;/ol&gt;&lt;/div&gt;</content><link href="http://security.googleblog.com/feeds/8888529176620158656/comments/default" rel="replies" title="Post Comments" type="application/atom+xml"/><link href="http://www.blogger.com/comment.g?blogID=1176949257541686127&amp;postID=8888529176620158656&amp;isPopup=true" rel="replies" title="0 Comments" type="text/html"/><link href="http://www.blogger.com/feeds/1176949257541686127/posts/default/8888529176620158656" rel="edit" type="application/atom+xml"/><link href="http://www.blogger.com/feeds/1176949257541686127/posts/default/8888529176620158656" rel="self" type="application/atom+xml"/><link href="http://security.googleblog.com/2022/10/google-pixel-7-and-pixel-7-pro-next.html" rel="alternate" title="Google Pixel 7 and Pixel 7 Pro: The next evolution in mobile security" type="text/html"/><author><name>Edward Fernandez</name><uri>http://www.blogger.com/profile/03784424747198152685</uri><email>noreply@blogger.com</email><gd:image height="16" rel="http://schemas.google.com/g/2005#thumbnail" src="https://img1.blogblog.com/img/b16-rounded.gif" width="16"/></author><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" height="72" url="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEggAnSsDEwcnzxZ_CBRosEw8rzu5l27OQXjqQ3yS0bQ96h0Gt-4OKxF9e81zd0NSHDoPwRxOHj3L0CFamDm_3ROfLsQQw-zvHEWfO2UyOyAWep-sQJqkVkc2ThW-gSdpn4cqbyiXWR0PciKdTL8sBFUM0jVBq-Neo9FK32TyiFfaE9MjyKjAqiNLPdcBQ/s72-c/google_de22_thumbnails_tensor_light_1156x578.png" width="72"/><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1176949257541686127.post-3294366029953017136</id><published>2022-09-13T12:59:00.000-04:00</published><updated>2022-09-13T12:59:14.644-04:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="chrome"/><category scheme="http://www.blogger.com/atom/ns#" term="chrome security"/><title type="text">Use-after-freedom: MiraclePtr</title><content type="html">&lt;span class="byline-author"&gt; Posted by Adrian Taylor, Bartek Nowierski and Kentaro Hara on behalf of the MiraclePtr team&lt;/span&gt; &lt;p&gt;Memory safety bugs are the most numerous category of Chrome security issues and we’re continuing to &lt;a href="https://security.googleblog.com/2021/09/an-update-on-memory-safety-in-chrome.html"&gt;investigate many solutions&lt;/a&gt; – both in C++ and in new programming languages. The most common type of memory safety bug is the “use-after-free”. We &lt;a href="https://security.googleblog.com/2022/05/retrofitting-temporal-memory-safety-on-c.html"&gt;recently posted about&lt;/a&gt; an exciting series of technologies designed to prevent these. Those technologies (collectively, *Scan, pronounced “star scan”) are very powerful but likely require hardware support for sufficient performance. &lt;/p&gt;&lt;p&gt;Today we’re going to talk about a different approach to solving the same type of bugs. &lt;/p&gt;&lt;p&gt;It’s hard, if not impossible, to avoid use-after-frees in a non-trivial codebase. It’s rarely a mistake by a single programmer. Instead, one programmer makes reasonable assumptions about how a bit of code will work, then a later change invalidates those assumptions. Suddenly, the data isn’t valid as long as the original programmer expected, and an exploitable bug results. &lt;/p&gt;&lt;p&gt;These bugs have real consequences. For example, according to Google Threat Analysis Group, a &lt;a href="https://crbug.com/1296150"&gt;use-after-free in the ChromeHTML engine&lt;/a&gt; was &lt;a href="https://blog.google/threat-analysis-group/countering-threats-north-korea/"&gt;exploited this year&lt;/a&gt; by North Korea. &lt;/p&gt;&lt;p&gt;Half of the known exploitable bugs in Chrome are use-after-frees:  &lt;div class="separator" style="clear: both;"&gt;&lt;a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjol0tDHrKfloO3-RsAhVwMGPRBFmg8FmM2nMbHfA4kPTHu4PVaoqFAkdKXkE63ePSIC4U4rH8pMSa8FfLYY-0CdahMPzcP_GqoILj0bBtquIwVuf-oLRpnZqe6cNBgTHv6LPnM_l1YrkqPHote0DMbIkYy7BZjDiZITG2u05T9YoxV6OqhnonD1TlY9g/s512/bug%20types.png" style="display: block; padding: 1em 0; text-align: center; "&gt;&lt;img alt="" border="0" width="600" data-original-height="317" data-original-width="512" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjol0tDHrKfloO3-RsAhVwMGPRBFmg8FmM2nMbHfA4kPTHu4PVaoqFAkdKXkE63ePSIC4U4rH8pMSa8FfLYY-0CdahMPzcP_GqoILj0bBtquIwVuf-oLRpnZqe6cNBgTHv6LPnM_l1YrkqPHote0DMbIkYy7BZjDiZITG2u05T9YoxV6OqhnonD1TlY9g/s600/bug%20types.png"/&gt;&lt;/a&gt;&lt;/div&gt; &lt;p&gt;&lt;strong&gt;Diving Deeper: Not All Use-After-Free Bugs Are Equal&lt;/strong&gt;  &lt;/p&gt;&lt;p&gt;Chrome has a &lt;a href="https://www.chromium.org/developers/design-documents/multi-process-architecture/"&gt;multi-process architecture&lt;/a&gt;, partly to ensure that web content is isolated into a sandboxed “renderer” process where little harm can occur. An attacker therefore usually needs to find and exploit &lt;em&gt;two&lt;/em&gt; vulnerabilities - one to achieve code execution in the renderer process, and another bug to break out of the sandbox. &lt;/p&gt;&lt;p&gt;The first stage is often the easier one. The attacker has lots of influence in the renderer process. It’s easy to arrange memory in a specific way, and the renderer process acts upon many different kinds of web content, giving a large “attack surface” that could potentially be exploited. &lt;/p&gt;&lt;p&gt;The second stage, escaping the renderer sandbox, is trickier. Attackers have two options how to do this: &lt;/p&gt;&lt;ol&gt; &lt;li&gt;They can exploit a bug in the underlying operating system (OS) through the limited interfaces available inside Chrome’s sandbox.  &lt;li&gt;Or, they can exploit a bug in a more powerful, privileged part of Chrome - like the “browser” process. This process coordinates all the other bits of Chrome, so fundamentally &lt;em&gt;has&lt;/em&gt; to be all-powerful. &lt;/li&gt;&lt;/ol&gt;&lt;p&gt;We imagine the attackers squeezing through the narrow part of a funnel:  &lt;div class="separator" style="clear: both;"&gt;&lt;a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjrD_PVCwSIrVn0tVWBs7b0PueDknbg8BrwznIfKHmYqgNFlGuVupFVZaPMSO9uoj4QawGujzyOS42-Nsemdl9AXD3gOaUFeqnBkhVd0Aem99UK5C9bt6trfnF_4UplnWFdXUrXfM-P4QvnZq81lrsz8o7M6QLZaKzSSLm7_ni10BPT2xaLSyhITCHE9A/s1600/Screenshot%202022-09-13%207.28.31%20AM.png" style="display: block; padding: 1em 0; text-align: center; "&gt;&lt;img alt="" border="0" data-original-height="405" data-original-width="646" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjrD_PVCwSIrVn0tVWBs7b0PueDknbg8BrwznIfKHmYqgNFlGuVupFVZaPMSO9uoj4QawGujzyOS42-Nsemdl9AXD3gOaUFeqnBkhVd0Aem99UK5C9bt6trfnF_4UplnWFdXUrXfM-P4QvnZq81lrsz8o7M6QLZaKzSSLm7_ni10BPT2xaLSyhITCHE9A/s1600/Screenshot%202022-09-13%207.28.31%20AM.png"/&gt;&lt;/a&gt;&lt;/div&gt; If we can reduce the size of the narrow part of the funnel, we will make it as hard as possible for attackers to assemble a full exploit chain. We can reduce the size of the orange slice by removing access to more OS interfaces within the renderer process sandbox, and we’re continuously working on that. The MiraclePtr project aims to reduce the size of the blue slice. &lt;/p&gt;&lt;p&gt;Here’s a sample of 100 recent high severity Chrome security bugs that made it to the stable channel, divided by root cause and by the process they affect. &lt;/p&gt;&lt;p&gt; &lt;div class="separator" style="clear: both;"&gt;&lt;a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjNa-V0mokSe10I_waRxQNuH_GNg6kqPyAszlWZ2EqMIgiySJcLWQ_FQQYSCl5dnF-u7acqGaqNE1bKXKJGG9b2GKKzIDMrKQWPhJWdp-0Te2HZYOecDVpLJXamMCzdO8ErcezDkFly1D19YlPrPHDHDf01O8GisMqoCOnfsAK8jWl9W8_JeUDJglHLNw/s512/bugs%20chart%202.png" style="display: block; padding: 1em 0; text-align: center; "&gt;&lt;img alt="" border="0" width="600" data-original-height="317" data-original-width="512" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjNa-V0mokSe10I_waRxQNuH_GNg6kqPyAszlWZ2EqMIgiySJcLWQ_FQQYSCl5dnF-u7acqGaqNE1bKXKJGG9b2GKKzIDMrKQWPhJWdp-0Te2HZYOecDVpLJXamMCzdO8ErcezDkFly1D19YlPrPHDHDf01O8GisMqoCOnfsAK8jWl9W8_JeUDJglHLNw/s600/bugs%20chart%202.png"/&gt;&lt;/a&gt;&lt;/div&gt;&lt;/p&gt;&lt;p&gt;You might notice: &lt;/p&gt;&lt;ul&gt; &lt;li&gt;This doesn’t quite add up to 100 - that’s because a few bugs were in other processes beyond the renderer or browser.  &lt;li&gt;We claimed that the browser process is the more difficult part to exploit, yet there are more potentially-exploitable bugs! That may be so, but we believe they are typically harder to exploit because the attacker has less control over memory layout. &lt;/li&gt;&lt;/ul&gt;&lt;p&gt;As you can see, the biggest category of bugs in each process is: V8 in the renderer process (JavaScript engine logic bugs - &lt;a href="https://docs.google.com/document/d/1FM4fQmIhEqPG8uGp5o9A-mnPB5BOeScZYpkHjo0KKA8/edit"&gt;work in progress&lt;/a&gt;) and use-after-free bugs in the browser process. If we can make that “thin” bit thinner still by removing some of those use-after-free bugs, we make the whole job of Chrome exploitation markedly harder. &lt;/p&gt;&lt;p&gt;&lt;strong&gt;MiraclePtr: Preventing Exploitation of Use-After-Free Bugs&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;This is where &lt;a href="https://docs.google.com/document/d/1pnnOAIz_DMWDI4oIOFoMAqLnf_MZ2GsrJNb_dbQ3ZBg/edit"&gt;MiraclePtr&lt;/a&gt; comes in. It is a technology to prevent exploitation of use-after-free bugs. Unlike aforementioned *Scan technologies that offer a non-invasive approach to this problem, MiraclePtr relies on rewriting the codebase to use a new smart pointer type, &lt;a href="https://chromium.googlesource.com/chromium/src/+/main/base/memory/raw_ptr.md"&gt;raw_ptr&amp;lt;T&gt;&lt;/a&gt;. There are multiple ways to implement MiraclePtr. We came up with &lt;a href="https://docs.google.com/document/d/1qsPh8Bcrma7S-5fobbCkBkXWaAijXOnorEqvIIGKzc0/edit"&gt;~10 algorithms&lt;/a&gt; and compared the pros and cons. After analyzing their performance overhead, memory overhead, security protection guarantees, developer ergonomics, etc., we concluded that BackupRefPtr was the most promising solution. &lt;/p&gt;&lt;p&gt;&lt;div class="separator" style="clear: both;"&gt;&lt;a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhqjNDqH-vs-iOJi4MZ8xgPNPFQin31tNdn0Ixh2w9wEKgTWB0KDsRBFg47IRrLsZ1BMSFAY0a1rmCUf5ETwzhUicglI4S9Lq6ue9h0UiK9vXX5WF6ZPVdEFSvDMGQOsLJ6MI0ZlyRbMCkd58hLxNBOy5FobolQUuyj7o6gYA2lZFDLt9QO_VLTpLJ1cA/s512/raw1.png" style="display: block; padding: 1em 0; text-align: center; "&gt;&lt;img alt="" border="0" width="200" data-original-height="484" data-original-width="512" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhqjNDqH-vs-iOJi4MZ8xgPNPFQin31tNdn0Ixh2w9wEKgTWB0KDsRBFg47IRrLsZ1BMSFAY0a1rmCUf5ETwzhUicglI4S9Lq6ue9h0UiK9vXX5WF6ZPVdEFSvDMGQOsLJ6MI0ZlyRbMCkd58hLxNBOy5FobolQUuyj7o6gYA2lZFDLt9QO_VLTpLJ1cA/s200/raw1.png"/&gt;&lt;/a&gt;&lt;/div&gt;      The BackupRefPtr algorithm is based on reference counting. It uses support of Chrome's own heap allocator, &lt;a href="https://chromium.googlesource.com/chromium/src/+/main/base/allocator/partition_allocator/PartitionAlloc.md"&gt;PartitionAlloc&lt;/a&gt;, which carves out a little extra space for a hidden reference count for each allocation. raw_ptr&amp;lt;T&gt; increments or decrements the reference count when it’s constructed, destroyed or modified. When the application calls free/delete and the reference count is greater than 0, PartitionAlloc quarantines that memory region instead of immediately releasing it. The memory region is then only made available for reuse once the reference count reaches 0. Quarantined memory is poisoned to further reduce the likelihood that use-after-free accesses will result in exploitable conditions, and in hope that future accesses lead to an easy-to-debug crash, turning these security issues into less-dangerous ones. &lt;/p&gt;   &lt;pre class="prettyprint"&gt;class A { ... };&lt;br /&gt;class B {&lt;br /&gt;  B(A* a) : a_(a) {}&lt;br /&gt;  void doSomething() { a_-&gt;doSomething(); }&lt;br /&gt;  raw_ptr&amp;lt;A&gt; a_;  // MiraclePtr&lt;br /&gt;};&lt;br /&gt;&lt;br /&gt;std::unique_ptr&amp;lt;A&gt; a = std::make_unique&amp;lt;A&gt;();&lt;br /&gt;std::unique_ptr&amp;lt;B&gt; b = std::make_unique&amp;lt;B&gt;(a.get());&lt;br /&gt;[…]&lt;br /&gt;a = nullptr;  // The free is delayed because the MiraclePtr is still pointing to the object.&lt;br /&gt;b-&gt;doSomething();  // Use-after-free is neutralized.&lt;/pre&gt;  &lt;p&gt;We successfully &lt;a href="https://chromium-review.googlesource.com/c/chromium/src/+/3305132"&gt;rewrote more than 15,000 raw pointers&lt;/a&gt; in the Chrome codebase into raw_ptr&amp;lt;T&gt;, then enabled BackupRefPtr for the browser process on Windows and Android (both 64 bit and 32 bit) in Chrome 102 Stable. We anticipate that MiraclePtr meaningfully reduces the browser process attack surface of Chrome by protecting ~50% of use-after-free issues against exploitation. We are now working on enabling BackupRefPtr in the network, utility and GPU processes, and for other platforms. In the end state, our goal is to enable BackupRefPtr on &lt;em&gt;all&lt;/em&gt; platforms because that ensures that a given pointer is protected for &lt;em&gt;all&lt;/em&gt; users of Chrome. &lt;/p&gt;&lt;p&gt;&lt;strong&gt;Balancing Security and Performance&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;There is no free lunch, however. This security protection comes at a cost, which we have carefully weighed in our decision making.  &lt;/p&gt;&lt;p&gt;Unsurprisingly, the main cost is memory. Luckily, related investments into PartitionAlloc over the past year led to 10-25% total memory savings, depending on usage patterns and platforms. So we were able to spend some of those savings on security: MiraclePtr increased the memory usage of the browser process 4.5-6.5% on Windows and 3.5-5% on Android&lt;sup&gt;1&lt;/sup&gt;, still well below their previous levels. While we were worried about quarantined memory, in practice this is a tiny fraction (0.01%) of the browser process usage. By far the bigger culprit is the additional memory needed to store the reference count. One might think that adding 4 bytes to each allocation wouldn’t be a big deal. However, there are many small allocations in Chrome, so even the 4B overhead is not negligible. PartitionAlloc also uses pre-defined bucket sizes, so this extra 4B pushes certain allocations (particularly power-of-2 sized) into a larger bucket, e.g. 4096B-&gt;5120B. &lt;/p&gt;&lt;p&gt;We also considered the performance cost. Adding an atomic increment/decrement on common operations such as pointer assignment has unavoidable overhead. Having excluded a number of performance-critical pointers, we drove this overhead down until we could gain back the same margin through other performance optimizations. On Windows, no statistically significant performance regressions were observed on most of our top-level performance metrics like Largest Contentful Paint, First Input Delay, etc. The only adverse change there&lt;sup&gt;1&lt;/sup&gt; is an increase of the main thread contention (~7%). On Android&lt;sup&gt;1&lt;/sup&gt;, in addition to a similar increase in the main thread contention (~6%), there were small regressions in First Input Delay (~1%), Input Delay (~3%) and First Contentful Paint (~0.5%). We don't anticipate these regressions to have a noticeable impact on user experience, and are confident that they are strongly outweighed by the additional safety for our users.  &lt;/p&gt;&lt;p&gt;We should emphasize that MiraclePtr currently protects only class/struct pointer fields, to minimize the overhead. As future work, we are exploring options to expand the pointer coverage to on-stack pointers so that we can protect against more use-after-free bugs. &lt;/p&gt;&lt;p&gt;Note that the primary goal of MiraclePtr is to prevent exploitation of use-after-free bugs. Although it wasn’t designed for diagnosability, it already helped us find and fix a number of bugs that were previously undetected. We have ongoing efforts to make MiraclePtr crash reports even more informative and actionable. &lt;/p&gt;&lt;p&gt;&lt;strong&gt;Continue to Provide Us Feedback&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Last but not least, we’d like to encourage security researchers to continue to report issues through the &lt;a href="https://g.co/ChromeBugRewards"&gt;Chrome Vulnerability Reward Program&lt;/a&gt;, even if those issues are mitigated by MiraclePtr. We still need to make MiraclePtr available to all users, collect more data on its impact through reported issues, and further refine our processes and tooling. Until that is done, we will not consider MiraclePtr when determining the severity of a bug or the reward amount. &lt;/p&gt;&lt;p&gt;&lt;sup&gt;1&lt;/sup&gt; Measured in Chrome 99. &lt;/p&gt;</content><link href="http://security.googleblog.com/feeds/3294366029953017136/comments/default" rel="replies" title="Post Comments" type="application/atom+xml"/><link href="http://www.blogger.com/comment.g?blogID=1176949257541686127&amp;postID=3294366029953017136&amp;isPopup=true" rel="replies" title="0 Comments" type="text/html"/><link href="http://www.blogger.com/feeds/1176949257541686127/posts/default/3294366029953017136" rel="edit" type="application/atom+xml"/><link href="http://www.blogger.com/feeds/1176949257541686127/posts/default/3294366029953017136" rel="self" type="application/atom+xml"/><link href="http://security.googleblog.com/2022/09/use-after-freedom-miracleptr.html" rel="alternate" title="Use-after-freedom: MiraclePtr" type="text/html"/><author><name>Edward Fernandez</name><uri>http://www.blogger.com/profile/03784424747198152685</uri><email>noreply@blogger.com</email><gd:image height="16" rel="http://schemas.google.com/g/2005#thumbnail" src="https://img1.blogblog.com/img/b16-rounded.gif" width="16"/></author><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" height="72" url="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjol0tDHrKfloO3-RsAhVwMGPRBFmg8FmM2nMbHfA4kPTHu4PVaoqFAkdKXkE63ePSIC4U4rH8pMSa8FfLYY-0CdahMPzcP_GqoILj0bBtquIwVuf-oLRpnZqe6cNBgTHv6LPnM_l1YrkqPHote0DMbIkYy7BZjDiZITG2u05T9YoxV6OqhnonD1TlY9g/s72-c/bug%20types.png" width="72"/><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1176949257541686127.post-2389034929342282972</id><published>2022-09-08T12:00:00.000-04:00</published><updated>2022-09-08T12:00:15.540-04:00</updated><title type="text">Fuzzing beyond memory corruption: Finding broader classes of vulnerabilities automatically</title><content type="html">&lt;span class="byline-author"&gt;Posted by Jonathan Metzman, Dongge Liu and Oliver Chang, Google Open Source Security Team&lt;/span&gt; &lt;p&gt;Recently, &lt;a href="https://google.github.io/oss-fuzz/"&gt;OSS-Fuzz&lt;/a&gt;—our community fuzzing service that regularly checks &lt;a href="https://github.com/google/oss-fuzz/tree/5675ec6958b74ebba5612b72dfe919c59e92d1df/projects"&gt;700 critical open source projects&lt;/a&gt; for bugs—detected a &lt;a href="https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=49053"&gt;serious vulnerability&lt;/a&gt; (CVE-2022-3008): a bug in the &lt;code&gt;&lt;a href="https://github.com/syoyo/tinygltf"&gt;TinyGLTF&lt;/a&gt;&lt;/code&gt; project that could have allowed attackers to execute malicious code in projects using &lt;code&gt;TinyGLTF&lt;/code&gt; as a dependency.   &lt;p&gt;The bug was soon &lt;a href="https://github.com/syoyo/tinygltf/commit/52ff00a38447f06a17eab1caa2cf0730a119c751"&gt;patched&lt;/a&gt;, but the wider significance remains: OSS-Fuzz caught a trivially exploitable command injection vulnerability. This discovery shows that &lt;a href="https://github.com/google/fuzzing/blob/master/docs/why-fuzz.md#introduction"&gt;fuzzing&lt;/a&gt;, a type of testing once primarily known for detecting memory corruption vulnerabilities in C/C++ code, has considerable untapped potential to find broader classes of vulnerabilities. Though the TinyGLTF library is written in C++, this vulnerability is easily applicable to all programming languages and confirms that fuzzing is a beneficial and necessary testing method for all software projects. &lt;/p&gt;&lt;h2&gt;Fuzzing as a public service&lt;/h2&gt;  &lt;p&gt;OSS-Fuzz was launched in 2016 in response to the &lt;a href="https://heartbleed.com/"&gt;Heartbleed&lt;/a&gt; vulnerability, discovered in one of the most popular open source projects for encrypting web traffic. The vulnerability had the potential to affect almost every internet user, yet was caused by a relatively simple memory buffer overflow bug that could have been detected by fuzzing—that is, by running the code on randomized inputs to intentionally cause unexpected behaviors or crashes that signal bugs. At the time, though, fuzzing was not widely used and was cumbersome for developers, requiring extensive manual effort.  &lt;/p&gt;&lt;p&gt;Google created OSS-Fuzz to fill this gap: it's a free service that runs fuzzers for open source projects and privately alerts developers to the bugs detected. Since its launch, OSS-Fuzz has become a critical service for the open source community, helping get &lt;a href="https://bugs.chromium.org/p/oss-fuzz/issues/list?q=type%3Dbug-security%20status%3Averified%2Cfixed%20label%3Aclusterfuzz&amp;can=1"&gt;more than 8,000 security vulnerabilities&lt;/a&gt; and more than &lt;a href="https://bugs.chromium.org/p/oss-fuzz/issues/list?q=type%3Dbug%20status%3Averified%2Cfixed%20label%3Aclusterfuzz&amp;can=1"&gt;26,000 other bugs&lt;/a&gt; in open source projects fixed. With time, OSS-Fuzz has grown beyond C/C++ to detect problems in memory-safe languages such as Go, Rust, and Python. &lt;/p&gt;&lt;p&gt;Google Cloud’s &lt;a href="https://cloud.google.com/blog/products/identity-security/introducing-assured-open-source-software-service"&gt;Assured Open Source Software Service&lt;/a&gt;, which provides organizations a secure and curated set of open source dependencies, relies on OSS-Fuzz as a foundational layer of security scanning. OSS-Fuzz is also the basis for free fuzzing tools for the community, such as &lt;a href="https://google.github.io/clusterfuzzlite/"&gt;ClusterFuzzLite&lt;/a&gt;, which gives developers a streamlined way to fuzz both open source and proprietary code before committing changes to their projects. All of these efforts are part of Google’s &lt;a href="https://blog.google/technology/safety-security/why-were-committing-10-billion-to-advance-cybersecurity/"&gt;$10B commitment to improving cybersecurity&lt;/a&gt; and continued work to &lt;a href="https://blog.google/technology/safety-security/shared-success-in-building-a-safer-open-source-community/"&gt;make open source software more secure&lt;/a&gt; for everyone.  &lt;/p&gt;&lt;h2&gt;New classes of vulnerabilities &lt;/h2&gt;  &lt;p&gt;Last December, OSS-Fuzz &lt;a href="https://security.googleblog.com/2021/12/improving-oss-fuzz-and-jazzer-to-catch.html"&gt;announced an effort to improve our bug detectors&lt;/a&gt; (known as &lt;em&gt;sanitizers&lt;/em&gt;) to find more classes of vulnerabilities, by &lt;a href="https://security.googleblog.com/2021/12/improving-oss-fuzz-and-jazzer-to-catch.html"&gt;first showing that fuzzing can find Log4Shell&lt;/a&gt;. The &lt;code&gt;TinyGLTF&lt;/code&gt; bug was found using one of those new sanitizers, &lt;code&gt;&lt;a href="https://github.com/google/oss-fuzz/tree/5675ec6958b74ebba5612b72dfe919c59e92d1df/infra/experimental/SystemSan"&gt;SystemSan&lt;/a&gt;&lt;/code&gt;, which was developed specifically to find bugs that can be exploited to execute arbitrary commands in any programming language. This &lt;a href="https://github.com/syoyo/tinygltf/issues/368"&gt;vulnerability&lt;/a&gt; shows that it was possible to inject backticks into the input glTF file format and allow commands to be executed during parsing.      &lt;pre class="prettyprint"&gt;# Craft an input that exploits the vulnerability to insert a string to poc&lt;br /&gt;$ echo '{"images":[{"uri":"a`echo iamhere &gt; poc`"}], "asset":{"version":""}}' &gt; payload.gltf&lt;br /&gt;# Execute the vulnerable program with the input&lt;br /&gt;$ ./loader_exampler payload.gltf&lt;br /&gt;# The string was inserted to poc, proving the vulnerability was successfully exploited&lt;br /&gt;$ cat poc&lt;br /&gt;iamhere&lt;/pre&gt;  &lt;p&gt;&lt;em&gt;A proof of exploit in &lt;code&gt;TinyGLTF&lt;/code&gt;, extended from the input found by OSS-Fuzz with &lt;code&gt;SystemSan&lt;/code&gt;. The culprit was the use of the &lt;a href="https://github.com/syoyo/tinygltf/blob/0fa56e239c77cc864dc248842e8887d985cf8e3f/tiny_gltf.h#L2640"&gt;“wordexp”&lt;/a&gt; function to expand file paths. &lt;/em&gt; &lt;p&gt;&lt;code&gt;SystemSan&lt;/code&gt; uses &lt;code&gt;&lt;a href="https://man7.org/linux/man-pages/man2/ptrace.2.html#:~:text=The%20ptrace()%20system%20call,debugging%20and%20system%20call%20tracing."&gt;ptrace&lt;/a&gt;&lt;/code&gt;, and is built in a language-independent and highly extensible way to allow new bug detectors to be added easily. For example, we’ve built &lt;a href="https://github.com/google/oss-fuzz/tree/5675ec6958b74ebba5612b72dfe919c59e92d1df/infra/experimental/SystemSan/PoEs"&gt;proofs of concept&lt;/a&gt; to detect issues in JavaScript and Python libraries, and an external contributor recently added support for detecting &lt;a href="https://github.com/google/oss-fuzz/pull/8009"&gt;arbitrary file access&lt;/a&gt; (e.g. through &lt;a href="https://owasp.org/www-community/attacks/Path_Traversal"&gt;path traversal&lt;/a&gt;).  &lt;p&gt;OSS-Fuzz has also continued to work with &lt;a href="https://www.code-intelligence.com/"&gt;Code Intelligence&lt;/a&gt; to improve Java fuzzing by integrating over 50 additional Java projects into OSS-Fuzz and developing &lt;a href="https://github.com/CodeIntelligenceTesting/jazzer/tree/main/sanitizers/src/main/java/com/code_intelligence/jazzer/sanitizers"&gt;sanitizers for detecting Java-specific issues&lt;/a&gt; such as deserialization and LDAP injection vulnerabilities. A number of these types of vulnerabilities have been found already and are pending disclosure.  &lt;/p&gt;&lt;h2&gt;Rewards for getting involved&lt;/h2&gt;  &lt;p&gt;Want to get involved with making fuzzing more widely used and get rewarded? There are two ways:  &lt;/p&gt;&lt;ol&gt; &lt;li&gt;Integrate a new sanitizer into OSS-Fuzz (or fuzzing engines like &lt;a href="https://github.com/CodeIntelligenceTesting/jazzer/tree/main/sanitizers/src/main/java/com/code_intelligence/jazzer/sanitizers"&gt;Jazzer&lt;/a&gt;) to detect more classes of bugs. We will pay &lt;strong&gt;$11,337&lt;/strong&gt; for integrations that find at least 2 new vulnerabilities in OSS-Fuzz projects.  &lt;li&gt;Integrate a new project into OSS-Fuzz. We currently support projects written in C/C++, Rust, Go, Swift, Python, and JVM-based languages; Javascript is coming soon. This is part of our existing OSS-Fuzz integration rewards.  &lt;/li&gt;&lt;/ol&gt;&lt;p&gt;To apply for these rewards, see the &lt;a href="https://google.github.io/oss-fuzz/getting-started/integration-rewards/"&gt;OSS-Fuzz integration reward program&lt;/a&gt;.  &lt;/p&gt;&lt;p&gt;Fuzzing still has a lot of unexplored potential in discovering more classes of vulnerabilities. Through our combined efforts we hope to take this effective testing method to the next level and enable more of the open source community to enjoy the benefits of fuzzing.  &lt;/p&gt;</content><link href="http://security.googleblog.com/feeds/2389034929342282972/comments/default" rel="replies" title="Post Comments" type="application/atom+xml"/><link href="http://www.blogger.com/comment.g?blogID=1176949257541686127&amp;postID=2389034929342282972&amp;isPopup=true" rel="replies" title="0 Comments" type="text/html"/><link href="http://www.blogger.com/feeds/1176949257541686127/posts/default/2389034929342282972" rel="edit" type="application/atom+xml"/><link href="http://www.blogger.com/feeds/1176949257541686127/posts/default/2389034929342282972" rel="self" type="application/atom+xml"/><link href="http://security.googleblog.com/2022/09/fuzzing-beyond-memory-corruption.html" rel="alternate" title="Fuzzing beyond memory corruption: Finding broader classes of vulnerabilities automatically" type="text/html"/><author><name>Google</name><uri>http://www.blogger.com/profile/11822708545141062574</uri><email>noreply@blogger.com</email><gd:image height="16" rel="http://schemas.google.com/g/2005#thumbnail" src="https://img1.blogblog.com/img/b16-rounded.gif" width="16"/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1176949257541686127.post-7191398098933223089</id><published>2022-08-30T07:01:00.005-04:00</published><updated>2022-08-30T12:49:29.367-04:00</updated><title type="text">Announcing Google’s Open Source Software Vulnerability Rewards Program </title><content type="html">&lt;span class="byline-author"&gt;Posted by Francis Perron, Open Source Security Technical Program Manager, and Krzysztof Kotowicz, Information Security Engineer&amp;nbsp;&lt;/span&gt;&lt;div&gt;&lt;span id="docs-internal-guid-d7aea1e1-7fff-2a0e-42f1-b5f7a46a298d"&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Today, we are launching Google’s &lt;/span&gt;&lt;a href="https://bughunters.google.com/about/rules/6521337925468160/google-open-source-software-vulnerability-reward-program-rules" style="text-decoration-line: none;"&gt;&lt;span style="color: #1155cc; font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; text-decoration-line: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;"&gt;Open Source Software Vulnerability Rewards Program (OSS VRP)&lt;/span&gt;&lt;/a&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt; to reward discoveries of vulnerabilities in Google’s open source projects. As the maintainer of major projects such as &lt;/span&gt;&lt;a href="https://github.com/golang" style="text-decoration-line: none;"&gt;&lt;span style="color: #1155cc; font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; text-decoration-line: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;"&gt;Golang&lt;/span&gt;&lt;/a&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;, &lt;/span&gt;&lt;a href="https://github.com/angular" style="text-decoration-line: none;"&gt;&lt;span style="color: #1155cc; font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; text-decoration-line: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;"&gt;Angular&lt;/span&gt;&lt;/a&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;, and &lt;/span&gt;&lt;a href="https://fuchsia.dev" style="text-decoration-line: none;"&gt;&lt;span style="color: #1155cc; font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; text-decoration-line: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;"&gt;Fuchsia&lt;/span&gt;&lt;/a&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;, Google is among the largest &lt;/span&gt;&lt;a href="https://opensource.googleblog.com/2020/08/open-source-by-numbers-at-google.html" style="text-decoration-line: none;"&gt;&lt;span style="color: #1155cc; font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; text-decoration-line: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;"&gt;contributors and users of open source&lt;/span&gt;&lt;/a&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt; in the world. With the addition of Google’s OSS VRP to our family of &lt;/span&gt;&lt;a href="https://bughunters.google.com/" style="text-decoration-line: none;"&gt;&lt;span style="color: #1155cc; font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; text-decoration-line: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;"&gt;Vulnerability Reward Programs (VRPs)&lt;/span&gt;&lt;/a&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;, researchers can now be rewarded for finding bugs that could potentially impact the entire open source ecosystem.&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Google has been committed to supporting security researchers and bug hunters for over a decade. The original VRP program, established to compensate and thank those who help make Google’s code more secure, was one of the first in the world and is now approaching its &lt;/span&gt;&lt;a href="https://security.googleblog.com/2021/07/a-new-chapter-for-googles-vulnerability.html" style="text-decoration-line: none;"&gt;&lt;span style="color: #1155cc; font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; text-decoration-line: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;"&gt;12th anniversary&lt;/span&gt;&lt;/a&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;. Over time, our VRP lineup has &lt;/span&gt;&lt;a href="https://bughunters.google.com/about/rules" style="text-decoration-line: none;"&gt;&lt;span style="color: #1155cc; font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; text-decoration-line: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;"&gt;expanded&lt;/span&gt;&lt;/a&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt; to include programs focused on Chrome, Android, and other areas. Collectively, these programs have rewarded more than 13,000 submissions, totaling over $38M paid.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;The addition of this new program addresses the ever more prevalent reality of rising supply chain compromises. Last year saw a &lt;/span&gt;&lt;a href="https://www.sonatype.com/hubfs/Q3%202021-State%20of%20the%20Software%20Supply%20Chain-Report/SSSC-Report-2021_0913_PM_2.pdf?hsLang=en-us" style="text-decoration-line: none;"&gt;&lt;span style="color: #1155cc; font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; text-decoration-line: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;"&gt;650% year-over-year increase&lt;/span&gt;&lt;/a&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt; in attacks targeting the open source supply chain, including headliner incidents like Codecov and the Log4j vulnerability that showed the destructive potential of a single open source vulnerability. Google's OSS VRP is part of our &lt;/span&gt;&lt;a href="https://blog.google/technology/safety-security/why-were-committing-10-billion-to-advance-cybersecurity/" style="text-decoration-line: none;"&gt;&lt;span style="color: #1155cc; font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; text-decoration-line: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;"&gt;$10B commitment to improving cybersecurity&lt;/span&gt;&lt;/a&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;, including securing the supply chain against these types of attacks for both Google’s users and open source consumers worldwide.&lt;/span&gt;&lt;/p&gt;&lt;h1 dir="ltr" style="line-height: 1.38; margin-bottom: 6pt; margin-top: 20pt;"&gt;&lt;span style="font-family: Arial; font-size: 20pt; font-variant-east-asian: normal; font-variant-numeric: normal; font-weight: 400; vertical-align: baseline; white-space: pre-wrap;"&gt;How it works&lt;/span&gt;&lt;/h1&gt;&lt;h2 dir="ltr" style="line-height: 1.38; margin-bottom: 6pt; margin-top: 18pt;"&gt;&lt;span style="font-family: Arial; font-size: 16pt; font-variant-east-asian: normal; font-variant-numeric: normal; font-weight: 400; vertical-align: baseline; white-space: pre-wrap;"&gt;Projects&lt;/span&gt;&lt;/h2&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Google's OSS VRP encourages researchers to report vulnerabilities with the greatest real, and potential, impact on open source software under the Google portfolio. The program focuses on:&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;&lt;ul style="margin-bottom: 0px; margin-top: 0px; padding-inline-start: 48px;"&gt;&lt;li aria-level="1" dir="ltr" style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; list-style-type: disc; vertical-align: baseline; white-space: pre;"&gt;&lt;p dir="ltr" role="presentation" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;All up-to-date versions of open source software (including repository settings) stored in the public repositories of Google-owned GitHub organizations (eg. &lt;/span&gt;&lt;a href="https://github.com/google" style="text-decoration-line: none;"&gt;&lt;span style="color: #1155cc; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; text-decoration-line: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;"&gt;Google&lt;/span&gt;&lt;/a&gt;&lt;span style="font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;, &lt;/span&gt;&lt;a href="https://github.com/googleapis/" style="text-decoration-line: none;"&gt;&lt;span style="color: #1155cc; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; text-decoration-line: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;"&gt;GoogleAPIs&lt;/span&gt;&lt;/a&gt;&lt;span style="font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;, &lt;/span&gt;&lt;a href="https://github.com/GoogleCloudPlatform" style="text-decoration-line: none;"&gt;&lt;span style="color: #1155cc; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; text-decoration-line: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;"&gt;GoogleCloudPlatform&lt;/span&gt;&lt;/a&gt;&lt;span style="font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;, …).&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;ul style="margin-bottom: 0px; margin-top: 0px; padding-inline-start: 48px;"&gt;&lt;li aria-level="1" dir="ltr" style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; list-style-type: disc; vertical-align: baseline; white-space: pre;"&gt;&lt;p dir="ltr" role="presentation" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Those projects’ third-party dependencies (with prior notification to the affected dependency required before submission to Google’s OSS VRP).&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;p dir="ltr" style="line-height: 1.2; margin-bottom: 10pt; margin-top: 0pt;"&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;The top awards will go to vulnerabilities found in the most sensitive projects: &lt;/span&gt;&lt;a href="https://github.com/bazelbuild" style="text-decoration-line: none;"&gt;&lt;span face="Roboto, sans-serif" style="color: #1155cc; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; text-decoration-line: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;"&gt;Bazel&lt;/span&gt;&lt;/a&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;, &lt;/span&gt;&lt;a href="https://github.com/angular" style="text-decoration-line: none;"&gt;&lt;span face="Roboto, sans-serif" style="color: #1155cc; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; text-decoration-line: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;"&gt;Angular&lt;/span&gt;&lt;/a&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;, &lt;/span&gt;&lt;a href="https://github.com/golang" style="text-decoration-line: none;"&gt;&lt;span face="Roboto, sans-serif" style="color: #1155cc; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; text-decoration-line: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;"&gt;Golang&lt;/span&gt;&lt;/a&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;, &lt;/span&gt;&lt;a href="https://github.com/protocolbuffers" style="text-decoration-line: none;"&gt;&lt;span face="Roboto, sans-serif" style="color: #1155cc; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; text-decoration-line: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;"&gt;Protocol buffers&lt;/span&gt;&lt;/a&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;, and &lt;/span&gt;&lt;a href="https://fuchsia.dev" style="text-decoration-line: none;"&gt;&lt;span face="Roboto, sans-serif" style="color: #1155cc; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; text-decoration-line: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;"&gt;Fuchsia&lt;/span&gt;&lt;/a&gt;&lt;span face="Roboto, sans-serif" style="color: #424242; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;. &lt;/span&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;After the initial rollout we plan to expand this list. Be sure to check back to see what’s been added.&lt;/span&gt;&lt;/p&gt;&lt;h2 dir="ltr" style="line-height: 1.38; margin-bottom: 6pt; margin-top: 18pt;"&gt;&lt;span style="font-family: Arial; font-size: 16pt; font-variant-east-asian: normal; font-variant-numeric: normal; font-weight: 400; vertical-align: baseline; white-space: pre-wrap;"&gt;Vulnerabilities&amp;nbsp;&lt;/span&gt;&lt;/h2&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;To focus efforts on discoveries that have the greatest impact on the supply chain, we welcome submissions of:&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;&lt;ul style="margin-bottom: 0px; margin-top: 0px; padding-inline-start: 48px;"&gt;&lt;li aria-level="1" dir="ltr" style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; list-style-type: disc; vertical-align: baseline; white-space: pre;"&gt;&lt;p dir="ltr" role="presentation" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Vulnerabilities that lead to supply chain compromise&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li aria-level="1" dir="ltr" style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; list-style-type: disc; vertical-align: baseline; white-space: pre;"&gt;&lt;p dir="ltr" role="presentation" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Design issues that cause product vulnerabilities&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li aria-level="1" dir="ltr" style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; list-style-type: disc; vertical-align: baseline; white-space: pre;"&gt;&lt;p dir="ltr" role="presentation" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Other security issues such as sensitive or leaked credentials, weak passwords, or insecure installations&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Depending on the severity of the vulnerability and the project’s importance, rewards will range &lt;/span&gt;&lt;span style="background-color: white; font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;from $100 to $31,337. The l&lt;/span&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;arger amounts will also go to unusual or particularly interesting vulnerabilities, so creativity is encouraged.&lt;/span&gt;&lt;/p&gt;&lt;h1 dir="ltr" style="line-height: 1.38; margin-bottom: 6pt; margin-top: 20pt;"&gt;&lt;span style="font-family: Arial; font-size: 20pt; font-variant-east-asian: normal; font-variant-numeric: normal; font-weight: 400; vertical-align: baseline; white-space: pre-wrap;"&gt;Getting involved&lt;/span&gt;&lt;/h1&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Before you start, please see the &lt;/span&gt;&lt;a href="https://bughunters.google.com/about/rules/6521337925468160/google-open-source-software-vulnerability-reward-program-rules" style="text-decoration-line: none;"&gt;&lt;span style="color: #1155cc; font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; text-decoration-line: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;"&gt;program rules&lt;/span&gt;&lt;/a&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt; for more information about out-of-scope projects and vulnerabilities, then get hacking and let us know what you find. If your submission is particular&lt;/span&gt;&lt;span style="background-color: white; font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;ly unusual, we’ll reach out and work with you directly for triaging and response. In addition to a reward, you can receive public recognition for your cont&lt;/span&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;ribution. You can also opt to donate your reward to charity at double the original amount.&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Not sure whether a bug you’ve found is right for Google’s OSS VRP? Don’t worry, if needed, we’ll route your submission to a different VRP that will give you the highest possible payout. We also encourage you to check out our &lt;/span&gt;&lt;a href="https://bughunters.google.com/about/rules/4928084514701312/patch-rewards-program-rules" style="text-decoration-line: none;"&gt;&lt;span style="color: #1155cc; font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; text-decoration-line: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;"&gt;Patch Rewards program&lt;/span&gt;&lt;/a&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;, which rewards security improvements to Google’s open source projects (for example, up to $20K for &lt;/span&gt;&lt;a href="https://google.github.io/oss-fuzz/getting-started/integration-rewards/" style="text-decoration-line: none;"&gt;&lt;span style="color: #1155cc; font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; text-decoration-line: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;"&gt;fuzzing integrations in OSS-Fuzz&lt;/span&gt;&lt;/a&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;).&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;h1 dir="ltr" style="line-height: 1.38; margin-bottom: 6pt; margin-top: 20pt;"&gt;&lt;span style="font-family: Arial; font-size: 20pt; font-variant-east-asian: normal; font-variant-numeric: normal; font-weight: 400; vertical-align: baseline; white-space: pre-wrap;"&gt;Appreciation for the open source community&lt;/span&gt;&lt;/h1&gt;&lt;br /&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Google is proud to both support and be a part of the open source software community. Through our existing bug bounty programs, we’ve rewarded bug hunters from over 84 countries and look forward to increasing that number through this new VRP. The community has continuously surprised us with its creativity and determination, and we cannot wait to see what new bugs and discoveries you have in store. Together, we can help improve the security of the open source ecosystem.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Give it a try, and happy bug hunting!&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;div&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;/span&gt;&lt;/div&gt;</content><link href="http://security.googleblog.com/feeds/7191398098933223089/comments/default" rel="replies" title="Post Comments" type="application/atom+xml"/><link href="http://www.blogger.com/comment.g?blogID=1176949257541686127&amp;postID=7191398098933223089&amp;isPopup=true" rel="replies" title="0 Comments" type="text/html"/><link href="http://www.blogger.com/feeds/1176949257541686127/posts/default/7191398098933223089" rel="edit" type="application/atom+xml"/><link href="http://www.blogger.com/feeds/1176949257541686127/posts/default/7191398098933223089" rel="self" type="application/atom+xml"/><link href="http://security.googleblog.com/2023/08/Announcing-Googles-Open-Source-Software-Vulnerability-Rewards-Program .html" rel="alternate" title="Announcing Google’s Open Source Software Vulnerability Rewards Program " type="text/html"/><author><name>Kimberly Samra</name><uri>http://www.blogger.com/profile/17209446531010386292</uri><email>noreply@blogger.com</email><gd:image height="16" rel="http://schemas.google.com/g/2005#thumbnail" src="https://img1.blogblog.com/img/b16-rounded.gif" width="16"/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1176949257541686127.post-6054475588313755959</id><published>2022-08-24T13:14:00.010-04:00</published><updated>2022-09-18T01:16:40.787-04:00</updated><title type="text">Announcing the Open Sourcing of Paranoid's Library</title><content type="html">&lt;span id="docs-internal-guid-59f8978a-7fff-3a36-60bb-fcc73e2abdc9"&gt;&lt;h2 dir="ltr" style="line-height: 1.38; margin-bottom: 10pt; margin-top: 18pt; text-align: justify;"&gt;&lt;span style="text-align: left;"&gt;&lt;span style="color: #666666;"&gt;&lt;span style="font-size: 14px; font-weight: 400;"&gt;Posted by Pedro Barbosa, Security Engineer, and&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #666666;"&gt;&lt;span style="font-size: 14px; font-weight: 400;"&gt;Daniel Bleichenbacher, Software Engineer&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 10pt; margin-top: 0pt; text-align: justify;"&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Paranoid is a project to detect well-known weaknesses in large amounts of crypto artifacts, like public keys and digital signatures. On August 3rd 2022 &lt;/span&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;we open sourced the library &lt;/span&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;containing the checks that we implemented so far (&lt;/span&gt;&lt;a href="https://github.com/google/paranoid_crypto" style="text-decoration-line: none;"&gt;&lt;span style="color: #1155cc; font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; text-decoration-line: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;"&gt;https://github.com/google/paranoid_crypto&lt;/span&gt;&lt;/a&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;). The library is developed and maintained by members of the Google Security Team, but it is not an officially supported Google product.&lt;/span&gt;&lt;/p&gt;&lt;h3 dir="ltr" style="line-height: 1.38; margin-bottom: 10pt; margin-top: 13pt; text-align: justify;"&gt;&lt;span style="font-family: Arial; font-size: 14pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Why the Project?&lt;/span&gt;&lt;/h3&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 10pt; margin-top: 0pt; text-align: justify;"&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Crypto artifacts may be generated by systems with implementations unknown to us; we refer to them as “black boxes.” An artifact may be generated by a black-box if, for example, it was not generated by one of our own tools (such as &lt;/span&gt;&lt;a href="https://github.com/google/tink" style="text-decoration-line: none;"&gt;&lt;span style="color: #1155cc; font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; text-decoration-line: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;"&gt;Tink&lt;/span&gt;&lt;/a&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;), or by a library that we can inspect and test using &lt;/span&gt;&lt;a href="https://github.com/google/wycheproof" style="text-decoration-line: none;"&gt;&lt;span style="color: #1155cc; font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; text-decoration-line: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;"&gt;Wycheproof&lt;/span&gt;&lt;/a&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;. Unfortunately, sometimes we end up relying on black-box generated artifacts (e.g. generated by proprietary &lt;/span&gt;&lt;a href="https://en.wikipedia.org/wiki/Hardware_security_module" style="text-decoration-line: none;"&gt;&lt;span style="color: #1155cc; font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; text-decoration-line: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;"&gt;HSMs&lt;/span&gt;&lt;/a&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;).&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 10pt; margin-top: 0pt; text-align: justify;"&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;After the disclosure of the &lt;/span&gt;&lt;a href="https://en.wikipedia.org/wiki/ROCA_vulnerability" style="text-decoration-line: none;"&gt;&lt;span style="color: #1155cc; font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; text-decoration-line: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;"&gt;ROCA vulnerability&lt;/span&gt;&lt;/a&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;, we wondered what other weaknesses may exist in crypto artifacts generated by black boxes, and what we could do to detect and mitigate them. We then started working on this project in 2019 and created a library to perform checks against large amounts of crypto artifacts.&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 10pt; margin-top: 0pt; text-align: justify;"&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;The library contains implementations and optimizations of existing work found in the literature. The literature shows that the generation of artifacts is flawed in some cases - below are examples of publications the library is based on.&lt;/span&gt;&lt;/p&gt;&lt;ul style="margin-bottom: 0px; margin-top: 0px; padding-inline-start: 48px;"&gt;&lt;li aria-level="1" dir="ltr" style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; list-style-type: disc; vertical-align: baseline; white-space: pre;"&gt;&lt;p dir="ltr" role="presentation" style="line-height: 1.38; margin-bottom: 10pt; margin-top: 0pt;"&gt;&lt;a href="https://eprint.iacr.org/2012/064" style="text-decoration-line: none;"&gt;&lt;span style="color: #1155cc; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; text-decoration-line: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;"&gt;Arjen K. Lenstra, James P. Hughes, Maxime Augier, Joppe W. Bos, Thorsten Kleinjung, and Christophe Wachter. (2012). &lt;/span&gt;&lt;span style="color: #1155cc; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; font-weight: 700; text-decoration-line: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;"&gt;Ron was wrong, Whit is right&lt;/span&gt;&lt;span style="color: #1155cc; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; text-decoration-line: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;"&gt;. Cryptology ePrint Archive, Paper 2012/064&lt;/span&gt;&lt;/a&gt;&lt;span style="font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li aria-level="1" dir="ltr" style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; list-style-type: disc; vertical-align: baseline; white-space: pre;"&gt;&lt;p dir="ltr" role="presentation" style="line-height: 1.38; margin-bottom: 10pt; margin-top: 0pt;"&gt;&lt;a href="https://www.usenix.org/conference/usenixsecurity12/technical-sessions/presentation/heninger" style="text-decoration-line: none;"&gt;&lt;span style="color: #1155cc; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; text-decoration-line: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;"&gt;Nadia Heninger, Zakir Durumeric, Eric Wustrow, and J. Alex Halderman. (2012). &lt;/span&gt;&lt;span style="color: #1155cc; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; font-weight: 700; text-decoration-line: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;"&gt;Mining Your Ps and Qs: Detection of Widespread Weak Keys in Network Devices&lt;/span&gt;&lt;span style="color: #1155cc; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; text-decoration-line: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;"&gt;. USENIX Associations&lt;/span&gt;&lt;/a&gt;&lt;span style="font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li aria-level="1" dir="ltr" style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; list-style-type: disc; vertical-align: baseline; white-space: pre;"&gt;&lt;p dir="ltr" role="presentation" style="line-height: 1.38; margin-bottom: 10pt; margin-top: 0pt;"&gt;&lt;a href="https://eprint.iacr.org/2013/599" style="text-decoration-line: none;"&gt;&lt;span style="color: #1155cc; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; text-decoration-line: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;"&gt;Daniel J. Bernstein, Yun-An Chang, Chen-Mou Cheng, Li-Ping Chou, Nadia Heninger, Tanja Lange, and Nicko van Someren. (2013). &lt;/span&gt;&lt;span style="color: #1155cc; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; font-weight: 700; text-decoration-line: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;"&gt;Factoring RSA keys from certified smart cards: Coppersmith in the wild&lt;/span&gt;&lt;span style="color: #1155cc; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; text-decoration-line: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;"&gt;. Cryptology ePrint Archive, Paper 2013/599&lt;/span&gt;&lt;/a&gt;&lt;span style="font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li aria-level="1" dir="ltr" style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; list-style-type: disc; vertical-align: baseline; white-space: pre;"&gt;&lt;p dir="ltr" role="presentation" style="line-height: 1.38; margin-bottom: 10pt; margin-top: 0pt;"&gt;&lt;a href="https://eprint.iacr.org/2019/023" style="text-decoration-line: none;"&gt;&lt;span style="color: #1155cc; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; text-decoration-line: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;"&gt;Joachim Breitner and Nadia Heninger. (2019). &lt;/span&gt;&lt;span style="color: #1155cc; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; font-weight: 700; text-decoration-line: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;"&gt;Biased Nonce Sense: Lattice Attacks against Weak ECDSA Signatures in Cryptocurrencies&lt;/span&gt;&lt;span style="color: #1155cc; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; text-decoration-line: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;"&gt;. Cryptology ePrint Archive, Paper 2019/023&lt;/span&gt;&lt;/a&gt;&lt;span style="font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 10pt; margin-top: 13pt; text-align: justify;"&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;As a recent example, CVE-2022-26320 &lt;/span&gt;&lt;a href="https://fermatattack.secvuln.info/" style="text-decoration-line: none;"&gt;&lt;span style="color: #1155cc; font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; text-decoration-line: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;"&gt;found by Hanno Böck&lt;/span&gt;&lt;/a&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;, confirmed the importance of checking for known weaknesses. Paranoid has already found similar weak keys independently (via the CheckFermat test). We also believe the project has potential to detect new vulnerabilities since we typically attempt to generalize detections as much as we can.&lt;/span&gt;&lt;/p&gt;&lt;h3 dir="ltr" style="line-height: 1.38; margin-bottom: 10pt; margin-top: 13pt; text-align: justify;"&gt;&lt;span style="font-family: Arial; font-size: 14pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Call for Contributions&lt;/span&gt;&lt;/h3&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 10pt; margin-top: 13pt; text-align: justify;"&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;The goal of open sourcing the library is to increase transparency, allow other ecosystems to use it (such as Certificate Authorities - CAs that need to run similar checks &lt;/span&gt;&lt;a href="https://github.com/cabforum/servercert/blob/main/docs/BR.md#6113-subscriber-key-pair-generation" style="text-decoration-line: none;"&gt;&lt;span style="color: #1155cc; font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; text-decoration-line: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;"&gt;to meet compliance&lt;/span&gt;&lt;/a&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;), and receive contributions from external researchers. By doing so, &lt;/span&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;we’re making a call for contributions&lt;/span&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;, in hopes that after researchers find and report crypto vulnerabilities, the checks are added into the library. This way, Google and the rest of the world can respond quickly to new threats.&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 10pt; margin-top: 13pt; text-align: justify;"&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Note, the project is intended to be light in its use of computational resources. The checks must be fast enough to run against large numbers of artifacts and must make sense in real world production context. Projects with less restrictions, such as &lt;/span&gt;&lt;a href="https://github.com/RsaCtfTool/RsaCtfTool" style="text-decoration-line: none;"&gt;&lt;span style="color: #1155cc; font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; text-decoration-line: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;"&gt;RsaCtfTool&lt;/span&gt;&lt;/a&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;, may be more appropriate for different use cases.&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 10pt; margin-top: 13pt; text-align: justify;"&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;In addition to contributions of new checks, improvements to those that already exist are also welcome. By analyzing the released source one can see some problems that are still open. For example, for ECDSA signatures in which the secrets are generated using &lt;/span&gt;&lt;a href="https://github.com/google/paranoid_crypto/blob/main/docs/ecdsa_signature_tests.md#checklcgnoncejavautilrandom" style="text-decoration-line: none;"&gt;&lt;span style="color: #1155cc; font-family: Arial; font-size: 11pt; font-style: italic; font-variant-east-asian: normal; font-variant-numeric: normal; text-decoration-line: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;"&gt;java.util.random&lt;/span&gt;&lt;/a&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;, we have a precomputed model that is able to detect this vulnerability given two signatures over &lt;/span&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-style: italic; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;secp256r1&lt;/span&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt; in most cases. However, for larger curves such as &lt;/span&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-style: italic; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;secp384r1&lt;/span&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;, we have not been able to precompute a model with significant success.&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 10pt; margin-top: 13pt; text-align: justify;"&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;In addition to ECDSA signatures, we also implemented checks for RSA and EC public keys, and general (pseudo) random bit streams. For the latter, we were able to build some improvements on the NIST SP 800-22 test suite and to include &lt;/span&gt;&lt;a href="https://github.com/google/paranoid_crypto/blob/main/docs/randomness_tests.md" style="text-decoration-line: none;"&gt;&lt;span style="color: #1155cc; font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; text-decoration-line: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;"&gt;additional tests&lt;/span&gt;&lt;/a&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt; using lattice reduction techniques.&lt;/span&gt;&lt;/p&gt;&lt;h3 dir="ltr" style="line-height: 1.38; margin-bottom: 10pt; margin-top: 13pt; text-align: justify;"&gt;&lt;span style="font-family: Arial; font-size: 14pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Preliminary results&lt;/span&gt;&lt;/h3&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 10pt; margin-top: 13pt; text-align: justify;"&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Similar to other published works, we have been analyzing the crypto artifacts from &lt;/span&gt;&lt;a href="https://certificate.transparency.dev/" style="text-decoration-line: none;"&gt;&lt;span style="color: #1155cc; font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; text-decoration-line: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;"&gt;Certificate Transparency&lt;/span&gt;&lt;/a&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt; (CT), which logs issued website certificates since 2013 with the goal of making them transparent and verifiable. Its database contains more than 7 billion certificates.&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 10pt; margin-top: 13pt; text-align: justify;"&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;For the checks of EC public keys and ECDSA signatures, so far, we have not found any weak artifacts in CT. For the RSA public key checks with severities high or critical, we have the following results:&lt;/span&gt;&lt;/p&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://blogger.googleusercontent.com/img/a/AVvXsEgWqAWbi-RH6micd0K4F7JWkXIh8AC1QEuDhvU0H4KnVucLpml61rVR0OyUCJd4cL1hNf17jZcjwwYVNpzAzZD1PeDoEYtotfltGBOOTFt_ND03cqmDkolKHbYQARIMCZ843zAdH3TGQR0M46gW8gEqbCSjd3N7Hixsw-APCZUeJHueHzYRFQAtg2gsHg" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img alt="" data-original-height="345" data-original-width="633" height="358" src="https://blogger.googleusercontent.com/img/a/AVvXsEgWqAWbi-RH6micd0K4F7JWkXIh8AC1QEuDhvU0H4KnVucLpml61rVR0OyUCJd4cL1hNf17jZcjwwYVNpzAzZD1PeDoEYtotfltGBOOTFt_ND03cqmDkolKHbYQARIMCZ843zAdH3TGQR0M46gW8gEqbCSjd3N7Hixsw-APCZUeJHueHzYRFQAtg2gsHg=w659-h358" width="659" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 10pt; margin-top: 13pt; text-align: justify;"&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Some of these certificates were already expired or revoked. For the ones that were still active (most of the CheckGCD ones), we immediately reported them to the CAs to be revoked. Reporting weak certificates is important to keep the internet secure, as stated by the policies of the CAs. The Let's Encrypt policy, for example, is defined &lt;/span&gt;&lt;a href="https://letsencrypt.org/documents/isrg-cps-v4.0/#4.9.3-procedure-for-revocation-request" style="text-decoration-line: none;"&gt;&lt;span style="color: #1155cc; font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; text-decoration-line: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;"&gt;here&lt;/span&gt;&lt;/a&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;. In another example, &lt;/span&gt;&lt;a href="https://www.digicert.com/faq/certificate-revocation.htm" style="text-decoration-line: none;"&gt;&lt;span style="color: #1155cc; font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; text-decoration-line: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;"&gt;Digicert states&lt;/span&gt;&lt;/a&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;:&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 10pt; margin-left: 36pt; margin-top: 13pt; text-align: justify;"&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-style: italic; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Certificate revocation and certificate problem reporting are an important part of online trust. Certificate revocation is used to prevent the use of certificates with compromised private keys, reduce the threat of malicious websites, and address system-wide attacks and vulnerabilities. As a member of the online community, you play an important role in helping maintain online trust by requesting certificate revocations when needed.&lt;/span&gt;&lt;/p&gt;&lt;h3 dir="ltr" style="line-height: 1.38; margin-bottom: 10pt; margin-top: 13pt; text-align: justify;"&gt;&lt;span style="font-family: Arial; font-size: 14pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;What is next?&lt;/span&gt;&lt;/h3&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 10pt; margin-top: 13pt; text-align: justify;"&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;We plan to continue analyzing Certificate Transparency, and now with the help of external contributions, we will continue the implementation of new checks and optimization of those existing.&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 10pt; margin-top: 13pt; text-align: justify;"&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; text-align: left; vertical-align: baseline; white-space: pre-wrap;"&gt;We are also closely watching the &lt;/span&gt;&lt;a href="https://csrc.nist.gov/Projects/post-quantum-cryptography" style="text-align: left; text-decoration-line: none;"&gt;&lt;span style="color: #1155cc; font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; text-decoration-line: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;"&gt;NIST Post-Quantum Cryptography Standardization Process&lt;/span&gt;&lt;/a&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; text-align: left; vertical-align: baseline; white-space: pre-wrap;"&gt; for new algorithms that make sense to implement checks. New crypto implementations carry the possibility of new bugs, and it is important that Paranoid is able to detect them.&lt;/span&gt;&lt;/p&gt;&lt;h3 dir="ltr" style="line-height: 1.38; margin-bottom: 10pt; margin-top: 13pt; text-align: justify;"&gt;&lt;br /&gt;&lt;/h3&gt;&lt;/span&gt;</content><link href="http://security.googleblog.com/feeds/6054475588313755959/comments/default" rel="replies" title="Post Comments" type="application/atom+xml"/><link href="http://www.blogger.com/comment.g?blogID=1176949257541686127&amp;postID=6054475588313755959&amp;isPopup=true" rel="replies" title="0 Comments" type="text/html"/><link href="http://www.blogger.com/feeds/1176949257541686127/posts/default/6054475588313755959" rel="edit" type="application/atom+xml"/><link href="http://www.blogger.com/feeds/1176949257541686127/posts/default/6054475588313755959" rel="self" type="application/atom+xml"/><link href="http://security.googleblog.com/2022/08/announcing-open-sourcing-of-paranoids.html" rel="alternate" title="Announcing the Open Sourcing of Paranoid's Library" type="text/html"/><author><name>Kimberly Samra</name><uri>http://www.blogger.com/profile/17209446531010386292</uri><email>noreply@blogger.com</email><gd:image height="16" rel="http://schemas.google.com/g/2005#thumbnail" src="https://img1.blogblog.com/img/b16-rounded.gif" width="16"/></author><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" height="72" url="https://blogger.googleusercontent.com/img/a/AVvXsEgWqAWbi-RH6micd0K4F7JWkXIh8AC1QEuDhvU0H4KnVucLpml61rVR0OyUCJd4cL1hNf17jZcjwwYVNpzAzZD1PeDoEYtotfltGBOOTFt_ND03cqmDkolKHbYQARIMCZ843zAdH3TGQR0M46gW8gEqbCSjd3N7Hixsw-APCZUeJHueHzYRFQAtg2gsHg=s72-w659-h358-c" width="72"/><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1176949257541686127.post-7841336313532345750</id><published>2022-08-10T12:00:00.012-04:00</published><updated>2022-08-10T12:00:24.853-04:00</updated><title type="text">Making Linux Kernel Exploit Cooking Harder</title><content type="html">&lt;div&gt;&lt;span face="Roboto, sans-serif" style="color: #666666; font-size: 14px;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;span face="Roboto, sans-serif" style="color: #666666; font-size: 14px;"&gt;Posted by Eduardo Vela, Exploit Critic&lt;/span&gt;&lt;div&gt;&lt;span face="Roboto, sans-serif" style="color: #666666; font-size: 14px;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span id="docs-internal-guid-10832b78-7fff-ed5f-9442-8075fa0dc1b8"&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt; text-align: center;"&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;span style="border: none; display: inline-block; height: 271px; overflow: hidden; width: 271px;"&gt;&lt;img height="271" src="https://lh5.googleusercontent.com/T3zZ5toP4XW1dvHIjYCh6bPqCxbkS4InKpIT7yD2kEY0MGRpgrzNnU6SRHAWAB_dKfzy3ac09_6Bnzd2HwVhGBjsaEP0fISZtAVS3fNaXcQvps1vjTvOugnvDTu-5PPbwzUltQz_6rUO3gJRQM2fcfEq6qc3k57q1H02Ok4lPo71Q-Vb7wtC21X3jhudWX8" style="margin-left: 0px; margin-top: 0px;" width="271" /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt; text-align: center;"&gt;&lt;span style="font-family: Arial; font-size: 9pt; font-style: italic; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Cover of the medieval cookbook. Title in large letters kernel Exploits. Adorned. Featuring a small penguin. 15th century. Color. High quality picture. Private collection. Detailed.&lt;/span&gt;&lt;/p&gt;&lt;div&gt;&lt;span style="font-family: Arial; font-size: 9pt; font-style: italic; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span face="Roboto, sans-serif" style="color: #666666; font-size: 14px;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span face="Roboto, sans-serif" style="color: #666666; font-size: 14px;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;The Linux kernel is a key component for the security of the Internet. Google uses Linux in almost everything, from the computers our employees use, to the products people around the world use daily like Chromebooks, Android on phones, cars, and TVs, and workloads on Google Cloud. Because of this, we have heavily invested in Linux’s security - and today, we’re announcing how we’re building on those investments and increasing our rewards.&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;In 2020, we &lt;/span&gt;&lt;a href="https://security.googleblog.com/2020/05/expanding-our-work-with-open-source.html" style="text-decoration-line: none;"&gt;&lt;span style="color: #1155cc; font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; text-decoration-line: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;"&gt;launched&lt;/span&gt;&lt;/a&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt; an open-source Kubernetes-based Capture-the-Flag (CTF) project called, &lt;/span&gt;&lt;a href="https://github.com/google/kctf" style="text-decoration-line: none;"&gt;&lt;span style="color: #1155cc; font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; text-decoration-line: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;"&gt;kCTF&lt;/span&gt;&lt;/a&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;. The kCTF &lt;/span&gt;&lt;a href="https://www.google.com/about/appsecurity/reward-program/index.html" style="text-decoration-line: none;"&gt;&lt;span style="color: #1155cc; font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; text-decoration-line: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;"&gt;Vulnerability Rewards Program (VRP)&lt;/span&gt;&lt;/a&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt; lets researchers connect to our &lt;/span&gt;&lt;a href="https://cloud.google.com/kubernetes-engine" style="text-decoration-line: none;"&gt;&lt;span style="color: #1155cc; font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; text-decoration-line: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;"&gt;Google Kubernetes Engine (GKE)&lt;/span&gt;&lt;/a&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt; instances, and if they can hack it, they get a flag, and are potentially rewarded. All of GKE and its dependencies are in scope, but every flag caught so far has been a container breakout through a Linux kernel vulnerability. We’ve learned that finding and exploiting heap memory corruption vulnerabilities in the Linux kernel could be made a lot harder. Unfortunately, security mitigations are often hard to quantify, however, we think we’ve found a way to do so concretely going forward.&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;When we launched kCTF, we hoped to build a community of Linux kernel exploitation hackers. This worked well and allowed the community to &lt;/span&gt;&lt;a href="https://docs.google.com/document/d/1a9uUAISBzw3ur1aLQqKc5JOQLaJYiOP5pe_B4xCT1KA/edit#" style="text-decoration-line: none;"&gt;&lt;span style="color: #1155cc; font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; font-weight: 700; text-decoration-line: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;"&gt;learn from&lt;/span&gt;&lt;/a&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt; several members of the security community like &lt;/span&gt;&lt;a href="https://twitter.com/Markak_/status/1470599501522030593" style="text-decoration-line: none;"&gt;&lt;span style="color: #1155cc; font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; text-decoration-line: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;"&gt;Markak&lt;/span&gt;&lt;/a&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;, &lt;/span&gt;&lt;a href="https://mobile.twitter.com/starlabs_sg/status/1540285452225155072" style="text-decoration-line: none;"&gt;&lt;span style="color: #1155cc; font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; text-decoration-line: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;"&gt;starlabs&lt;/span&gt;&lt;/a&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;, &lt;/span&gt;&lt;a href="https://twitter.com/cor_ctf/status/1486022971034529794" style="text-decoration-line: none;"&gt;&lt;span style="color: #1155cc; font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; text-decoration-line: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;"&gt;Crusaders of Rust&lt;/span&gt;&lt;/a&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;, &lt;/span&gt;&lt;a href="https://syst3mfailure.io/" style="text-decoration-line: none;"&gt;&lt;span style="color: #1155cc; font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; text-decoration-line: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;"&gt;d3v17&lt;/span&gt;&lt;/a&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;, slipper@pangu, valis, &lt;/span&gt;&lt;a href="https://twitter.com/ky1ebot/status/1520499757252153344" style="text-decoration-line: none;"&gt;&lt;span style="color: #1155cc; font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; text-decoration-line: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;"&gt;kylebot&lt;/span&gt;&lt;/a&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;, &lt;/span&gt;&lt;a href="https://twitter.com/pqlqpql/status/1510108201483710467" style="text-decoration-line: none;"&gt;&lt;span style="color: #1155cc; font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; text-decoration-line: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;"&gt;pqlqpql and Awarau&lt;/span&gt;&lt;/a&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;.&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Now, we’re making updates to the kCTF program. First, we are indefinitely extending the increased reward amounts we &lt;/span&gt;&lt;a href="https://security.googleblog.com/2022/02/roses-are-red-violets-are-blue-giving.html" style="text-decoration-line: none;"&gt;&lt;span style="color: #1155cc; font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; text-decoration-line: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;"&gt;announced&lt;/span&gt;&lt;/a&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt; earlier this year, meaning we’ll continue to pay $20,000 - $91,337 USD for vulnerabilities on our lab kCTF deployment to reward the important work being done to understand and improve kernel security. This is in addition to our existing &lt;/span&gt;&lt;a href="https://bughunters.google.com/about/patch-rewards" style="text-decoration-line: none;"&gt;&lt;span style="color: #1155cc; font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; text-decoration-line: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;"&gt;patch rewards&lt;/span&gt;&lt;/a&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt; for proactive security improvements.&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Second, we’re launching &lt;/span&gt;&lt;a href="https://google.github.io/kctf/vrp.html#new-mitigations" style="text-decoration-line: none;"&gt;&lt;span style="color: #1155cc; font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; font-weight: 700; text-decoration-line: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;"&gt;new instances&lt;/span&gt;&lt;/a&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt; with additional rewards to evaluate the latest Linux kernel stable image as well as new experimental mitigations in a custom kernel we've built. Rather than simply learning about the current state of the stable kernels, the new instances will be used to ask the community to help us evaluate the value of both our latest and more experimental security mitigations.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Today, we are starting with a set of mitigations we believe will make most of the vulnerabilities (9/10 vulns and 10/13 exploits) we received this past year more difficult to exploit. For new exploits of vulnerabilities submitted which also compromise the latest Linux kernel, we will pay an additional $21,000 USD. For those which compromise our custom Linux kernel with our experimental mitigations, the reward will be another $21,000 USD (if they are clearly bypassing the mitigations we are testing). This brings the total rewards up to a maximum of $133,337 USD. We hope this will allow us to learn more about how hard (or easy) it is to bypass our experimental mitigations.&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;The &lt;/span&gt;&lt;a href="https://github.com/thejh/linux/blob/slub-virtual/MITIGATION_README" style="text-decoration-line: none;"&gt;&lt;span style="color: #1155cc; font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; text-decoration-line: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;"&gt;mitigations&lt;/span&gt;&lt;/a&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt; we've built attempt to tackle the following exploit primitives:&lt;/span&gt;&lt;/p&gt;&lt;ul style="margin-bottom: 0px; margin-top: 0px; padding-inline-start: 48px;"&gt;&lt;li aria-level="1" dir="ltr" style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; list-style-type: disc; vertical-align: baseline; white-space: pre;"&gt;&lt;p dir="ltr" role="presentation" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Out-of-bounds write on slab&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li aria-level="1" dir="ltr" style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; list-style-type: disc; vertical-align: baseline; white-space: pre;"&gt;&lt;p dir="ltr" role="presentation" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Cross-cache attacks&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li aria-level="1" dir="ltr" style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; list-style-type: disc; vertical-align: baseline; white-space: pre;"&gt;&lt;p dir="ltr" role="presentation" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Elastic objects&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li aria-level="1" dir="ltr" style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; list-style-type: disc; vertical-align: baseline; white-space: pre;"&gt;&lt;p dir="ltr" role="presentation" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Freelist corruption&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;With the kCTF VRP program, we are building a pipeline to analyze, experiment, measure and build security mitigations to make the Linux kernel as safe as we can with the help of the security community. We hope that, over time, we will be able to make security mitigations that make exploitation of Linux kernel vulnerabilities as hard as possible.&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;</content><link href="http://security.googleblog.com/feeds/7841336313532345750/comments/default" rel="replies" title="Post Comments" type="application/atom+xml"/><link href="http://www.blogger.com/comment.g?blogID=1176949257541686127&amp;postID=7841336313532345750&amp;isPopup=true" rel="replies" title="0 Comments" type="text/html"/><link href="http://www.blogger.com/feeds/1176949257541686127/posts/default/7841336313532345750" rel="edit" type="application/atom+xml"/><link href="http://www.blogger.com/feeds/1176949257541686127/posts/default/7841336313532345750" rel="self" type="application/atom+xml"/><link href="http://security.googleblog.com/2022/08/making-linux-kernel-exploit-cooking.html" rel="alternate" title="Making Linux Kernel Exploit Cooking Harder" type="text/html"/><author><name>Kimberly Samra</name><uri>http://www.blogger.com/profile/17209446531010386292</uri><email>noreply@blogger.com</email><gd:image height="16" rel="http://schemas.google.com/g/2005#thumbnail" src="https://img1.blogblog.com/img/b16-rounded.gif" width="16"/></author><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" height="72" url="https://lh5.googleusercontent.com/T3zZ5toP4XW1dvHIjYCh6bPqCxbkS4InKpIT7yD2kEY0MGRpgrzNnU6SRHAWAB_dKfzy3ac09_6Bnzd2HwVhGBjsaEP0fISZtAVS3fNaXcQvps1vjTvOugnvDTu-5PPbwzUltQz_6rUO3gJRQM2fcfEq6qc3k57q1H02Ok4lPo71Q-Vb7wtC21X3jhudWX8=s72-c" width="72"/><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1176949257541686127.post-2552432823877555157</id><published>2022-08-08T11:55:00.003-04:00</published><updated>2022-08-08T11:59:54.215-04:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="chrome"/><category scheme="http://www.blogger.com/atom/ns#" term="chrome security"/><category scheme="http://www.blogger.com/atom/ns#" term="privacy"/><title type="text">How Hash-Based Safe Browsing Works in Google Chrome</title><content type="html">&lt;/i&gt;&lt;/p&gt;By Rohit Bhatia, Mollie Bates, Google Chrome Security&lt;/i&gt;&lt;/p&gt; &lt;p&gt;There are various threats a user faces when browsing the web. Users may be tricked into sharing sensitive information like their passwords with a misleading or fake website, also called phishing. They may also be led into installing malicious software on their machines, called malware, which can collect personal data and also hold it for ransom. Google Chrome, henceforth called Chrome, enables its users to protect themselves from such threats on the internet. When Chrome users browse the web with Safe Browsing protections, Chrome uses the Safe Browsing service from Google to identify and ward off various threats. &lt;/p&gt;&lt;p&gt;Safe Browsing works in different ways depending on the user's preferences. In the most common case, Chrome uses the privacy-conscious &lt;a href="https://developers.google.com/safe-browsing/v4/update-api"&gt;Update API&lt;/a&gt; (Application Programming Interface) from the Safe Browsing service. &lt;a href="https://www.google.com/url?q=https://security.googleblog.com/2020/05/enhanced-safe-browsing-protection-now.html&amp;amp;sa=D&amp;amp;source=docs&amp;amp;ust=1659535320580416&amp;amp;usg=AOvVaw1N9HMoW55mmIVlhzcWnz_0"&gt;This API&lt;/a&gt; was developed with user privacy in mind and ensures Google gets as little information about the user's browsing history as possible. If the user has opted-in to "&lt;a href="https://support.google.com/chrome/answer/9890866"&gt;Enhanced Protection&lt;/a&gt;" (covered in an &lt;a href="https://security.googleblog.com/2020/05/enhanced-safe-browsing-protection-now.html"&gt;earlier post&lt;/a&gt;) or "&lt;a href="https://support.google.com/chrome/answer/9116376"&gt;Make Searches and Browsing Better&lt;/a&gt;", Chrome shares limited additional data with Safe Browsing only to further improve user protection. &lt;/p&gt;&lt;p&gt;This post describes how Chrome implements the Update API, with appropriate pointers to the technical implementation and details about the privacy-conscious aspects of the Update API. This should be useful for users to understand how Safe Browsing protects them, and for interested developers to browse through and understand the implementation. We will cover the APIs used for Enhanced Protection users in a future post. &lt;/p&gt;&lt;h3&gt;Threats on the Internet&lt;/h3&gt;  &lt;p&gt;When a user navigates to a webpage on the internet, their browser fetches objects hosted on the internet. These objects include the structure of the webpage (HTML), the styling (CSS), dynamic behavior in the browser (Javascript), images, downloads initiated by the navigation, and other webpages embedded in the main webpage. These objects, also called resources, have a web address which is called their URL (Uniform Resource Locator). Further, URLs may redirect to other URLs when being loaded. Each of these URLs can potentially host threats such as phishing websites, malware, unwanted downloads, malicious software, unfair billing practices, and more. Chrome with Safe Browsing checks all URLs, redirects or included resources, to identify such threats and protect users. &lt;/p&gt;&lt;h3&gt;Safe Browsing Lists&lt;/h3&gt;  &lt;p&gt;Safe Browsing provides a list for each threat it protects users against on the internet. A full catalog of lists that are used in Chrome can be found by visiting &lt;code&gt;chrome://safe-browsing/#tab-db-manager&lt;/code&gt; on desktop platforms. &lt;/p&gt;&lt;p&gt;A list does not contain unsafe web addresses, also referred to as URLs, in entirety; it would be prohibitively expensive to keep all of them in a device’s limited memory. Instead it maps a URL, which can be very long, through a cryptographic hash function (SHA-256), to a unique fixed size string. This distinct fixed size string, called a hash, allows a list to be stored efficiently in limited memory. The Update API handles URLs only in the form of hashes and is also called hash-based API in this post. &lt;/p&gt;&lt;p&gt;Further, a list does not store hashes in entirety either, as even that would be too memory intensive. Instead, barring a case where data is not shared with Google and the list is small, it contains prefixes of the hashes. We refer to the original hash as a full hash, and a hash prefix as a partial hash.&lt;br /&gt;&lt;br /&gt;A list is updated following the Update API’s &lt;a href="https://developers.google.com/safe-browsing/v4/request-frequency"&gt;request frequency&lt;/a&gt; section. Chrome also follows a back-off mode in case of an unsuccessful response. These updates happen roughly every 30 minutes, following the minimum wait duration set by the server in the list update response. &lt;/p&gt;&lt;p&gt;For those interested in browsing relevant source code, here’s where to look: &lt;/p&gt;&lt;h3&gt;Source Code&lt;/h3&gt;  &lt;ol&gt; &lt;li&gt;&lt;a href="https://source.chromium.org/chromium/chromium/src/+/master:components/safe_browsing/core/browser/db/v4_local_database_manager.cc;l=61;drc=c4d0e9c06b437234e8fb297ce3273dad1891e8d4"&gt;GetListInfos()&lt;/a&gt; contains all the lists, along with their associated threat types, the platforms they are used on, and their file names on disk.  &lt;/li&gt;&lt;li&gt;&lt;a href="https://source.chromium.org/chromium/chromium/src/+/master:components/safe_browsing/core/browser/db/v4_store.h;l=33;drc=c4d0e9c06b437234e8fb297ce3273dad1891e8d4"&gt;HashPrefixMap&lt;/a&gt; shows how the lists are stored and maintained. They are grouped by the size of prefixes, and appended together to allow quick binary search based lookups. &lt;/li&gt;&lt;/ol&gt;&lt;h3&gt;How is hash-based URL lookup done&lt;/h3&gt;  &lt;p&gt;As an example of a Safe Browsing list, let's say that we have one for malware, containing partial hashes of URLs known to host malware. These partial hashes are generally 4 bytes long, but for illustrative purposes, we show only 2 bytes. &lt;/p&gt;   &lt;pre class="prettyprint"&gt;['036b', '1a02', 'bac8', 'bb90']&lt;br /&gt;&lt;/pre&gt;  &lt;p&gt;Whenever Chrome needs to check the reputation of a resource with the Update API, for example when navigating to a URL, it &lt;strong&gt;does not share the raw URL (or any piece of it)&lt;/strong&gt; with Safe Browsing to perform the lookup. Instead, Chrome uses full hashes of the URL (and some combinations) to look up the partial hashes in the locally maintained Safe Browsing list. Chrome sends only these matched partial hashes to the Safe Browsing service. This ensures that Chrome provides these protections while respecting the user’s privacy. This hash-based lookup happens in three steps in Chrome:  &lt;/p&gt;&lt;h3&gt;Step 1: Generate URL Combinations and Full Hashes&lt;/h3&gt;  &lt;p&gt;When Google blocks URLs that host potentially unsafe resources by placing them on a Safe Browsing list, the malicious actor can host the resource on a different URL. A malicious actor can cycle through various subdomains to generate new URLs. Safe Browsing uses host suffixes to identify malicious domains that host malware in their subdomains. Similarly, malicious actors can also cycle through various subpaths to generate new URLs. So Safe Browsing also uses path prefixes to identify websites that host malware at various subpaths. This prevents malicious actors from cycling through subdomains or paths for new malicious URLs, allowing robust and efficient identification of threats.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;To incorporate these host suffixes and path prefixes, Chrome first computes the full hashes of the URL and some patterns derived from the URL. Following Safe Browsing API's &lt;a href="https://developers.google.com/safe-browsing/v4/urls-hashing"&gt;URLs and Hashing&lt;/a&gt; specification, Chrome computes the full hashes of URL combinations by following these steps: &lt;/p&gt;&lt;ol&gt; &lt;li&gt;First, Chrome converts the URL into a canonical format, as defined in the specification.  &lt;/li&gt;&lt;li&gt;Then, Chrome generates up to 5 host suffixes/variants for the URL.  &lt;/li&gt;&lt;li&gt;Then, Chrome generates up to 6 path prefixes/variants for the URL.  &lt;/li&gt;&lt;li&gt;Then, for the combined 30 host suffixes and path prefixes combinations, Chrome generates the full hash for each combination. &lt;/li&gt;&lt;/ol&gt;&lt;h3&gt;Source Code&lt;/h3&gt;  &lt;ol&gt; &lt;li&gt;&lt;a href="https://source.chromium.org/chromium/chromium/src/+/master:components/safe_browsing/core/browser/db/v4_local_database_manager.cc;l=433;drc=c4d0e9c06b437234e8fb297ce3273dad1891e8d4"&gt;V4LocalDatabaseManager::CheckBrowseURL&lt;/a&gt; is an example which performs a hash-based lookup.  &lt;/li&gt;&lt;li&gt;&lt;a href="https://source.chromium.org/chromium/chromium/src/+/master:components/safe_browsing/core/browser/db/v4_protocol_manager_util.cc;l=371;drc=ecfeecdc62ce1aca4675742b67ac439ff988f225"&gt;V4ProtocolManagerUtil::UrlToFullHashes&lt;/a&gt; creates the various URL combinations for a URL, and computes their full hashes. &lt;/li&gt;&lt;/ol&gt;&lt;h3&gt;Example&lt;/h3&gt;  &lt;p&gt;For instance, let's say that a user is trying to visit &lt;code&gt;https://evil.example.com/blah#frag&lt;/code&gt;. The canonical url is &lt;code&gt;https://evil.example.com/blah&lt;/code&gt;. The host suffixes to be tried are &lt;code&gt;evil.example.com&lt;/code&gt;, and &lt;code&gt;example.com&lt;/code&gt;. The path prefixes are &lt;code&gt;/&lt;/code&gt; and &lt;code&gt;/blah&lt;/code&gt;. The four combined URL combinations are &lt;code&gt;evil.example.com/&lt;/code&gt;, &lt;code&gt;evil.example.com/blah&lt;/code&gt;, &lt;code&gt;example.com/&lt;/code&gt;, and &lt;code&gt;example.com/blah&lt;/code&gt;. &lt;/p&gt;   &lt;pre class="prettyprint"&gt;url_combinations = ["evil.example.com/", "evil.example.com/blah","example.com/", "example.com/blah"]&lt;br /&gt;full_hashes = ['1a02…28', 'bb90…9f', '7a9e…67', 'bac8…fa']&lt;br /&gt;&lt;/pre&gt;  &lt;h3&gt;Step 2: Search Partial Hashes in Local Lists&lt;/h3&gt;  &lt;p&gt;Chrome then checks the full hashes of the URL combinations against the locally maintained Safe Browsing lists. These lists, which contain partial hashes, do not provide a decisive malicious verdict, but can quickly identify if the URL is considered not malicious. If the full hash of the URL does not match any of the partial hashes from the local lists, the URL is considered safe and Chrome proceeds to load it. This happens for more than 99% of the URLs checked. &lt;/p&gt;&lt;h3&gt;Source Code&lt;/h3&gt;  &lt;ol&gt; &lt;li&gt;&lt;a href="https://source.chromium.org/chromium/chromium/src/+/master:components/safe_browsing/core/browser/db/v4_local_database_manager.cc;l=783;drc=ecfeecdc62ce1aca4675742b67ac439ff988f225"&gt;V4LocalDatabaseManager::GetPrefixMatches&lt;/a&gt; gets the matching partial hashes for the full hashes of the URL and its combinations. &lt;/li&gt;&lt;/ol&gt;&lt;h3&gt;Example&lt;/h3&gt;  &lt;p&gt;Chrome finds that three full hashes &lt;code&gt;1a02…28&lt;/code&gt;, &lt;code&gt;bb90…9f&lt;/code&gt;, and &lt;code&gt;bac8…fa&lt;/code&gt; match local partial hashes. We note that this is for demonstration purposes, and a match here is rare.&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;&lt;h3&gt;&lt;span id="docs-internal-guid-82f4de32-7fff-e845-074f-be79fa07c0d1" style="font-weight: normal;"&gt;&lt;span style="font-family: Arial; font-size: 13pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;span style="border: none; display: inline-block; height: 624px; overflow: hidden; width: 624px;"&gt;&lt;img height="624" src="https://lh3.googleusercontent.com/8ZcL0YugCY2d24_K3O6Jsewt3iaPkzNJ_LwQIsGfWNDdarXWMjKjtAjxWnNAnIEvhHitFyLRGQXp-4_Z3jAc2Q_IX68UFA8f6WI4PaKg4EbEsMov-OJdVsMXN8nxpfEEcKc3H7aYnZ6PkHluQEnv0U8Sh36QFvaNQLBZTlVSSM4dmwCKu6vVACwnpDOmHw" style="margin-left: 0px; margin-top: 0px;" width="624" /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;&lt;h3&gt;Step 3: Fetch Matching Full Hashes&lt;/h3&gt;  &lt;p&gt;Next, Chrome sends &lt;strong&gt;only&lt;/strong&gt; the matching partial hash (not the full URL or any particular part of the URL, or even their full hashes), to the Safe Browsing service's &lt;code&gt;&lt;a href="https://developers.google.com/safe-browsing/v4/update-api#example-fullHashesfind"&gt;fullHashes.find&lt;/a&gt;&lt;/code&gt; method. In response, it receives the full hashes of all malicious URLs for which the full hash begins with one of the partial hashes sent by Chrome. Chrome checks the fetched full hashes with the generated full hashes of the URL combinations. If any match is found, it identifies the URL with various threats and their severities inferred from the matched full hashes.  &lt;/p&gt;&lt;h3&gt;Source Code&lt;/h3&gt;  &lt;ol&gt; &lt;li&gt;&lt;a href="https://source.chromium.org/chromium/chromium/src/+/master:components/safe_browsing/core/browser/db/v4_get_hash_protocol_manager.cc;l=270;drc=ecfeecdc62ce1aca4675742b67ac439ff988f225"&gt;V4GetHashProtocolManager::GetFullHashes&lt;/a&gt; performs the lookup for the full hashes for the matched partial hashes.  &lt;/li&gt;&lt;/ol&gt;&lt;h3&gt;Example&lt;/h3&gt;  &lt;p&gt;Chrome sends the matched partial hashes 1a02, bb90, and bac8 to fetch the full hashes. The server returns full hashes that match these partial hashes, &lt;code&gt;1a02…28, bb90…ce,&lt;/code&gt; and &lt;code&gt;bac8…01&lt;/code&gt;. Chrome finds that one of the full hashes matches with the full hash of the URL combination being checked, and identifies the malicious URL as hosting malware. &lt;/p&gt;&lt;h3&gt;Conclusion&lt;/h3&gt;  &lt;p&gt;Safe Browsing protects Chrome users from various malicious threats on the internet. While providing these protections, Chrome faces challenges such as constraints in memory capacity, network bandwidth usage, and a dynamic threat landscape. Chrome is also mindful of the users’ privacy choices, and shares little data with Google. &lt;/p&gt;&lt;p&gt;In a follow up post, we will cover the more advanced protections Chrome provides to its users who have opted in to “Enhanced Protection”. &lt;/p&gt;&lt;p&gt;&lt;/p&gt;</content><link href="http://security.googleblog.com/feeds/2552432823877555157/comments/default" rel="replies" title="Post Comments" type="application/atom+xml"/><link href="http://www.blogger.com/comment.g?blogID=1176949257541686127&amp;postID=2552432823877555157&amp;isPopup=true" rel="replies" title="0 Comments" type="text/html"/><link href="http://www.blogger.com/feeds/1176949257541686127/posts/default/2552432823877555157" rel="edit" type="application/atom+xml"/><link href="http://www.blogger.com/feeds/1176949257541686127/posts/default/2552432823877555157" rel="self" type="application/atom+xml"/><link href="http://security.googleblog.com/2022/08/how-hash-based-safe-browsing-works-in.html" rel="alternate" title="How Hash-Based Safe Browsing Works in Google Chrome" type="text/html"/><author><name>Edward Fernandez</name><uri>http://www.blogger.com/profile/03784424747198152685</uri><email>noreply@blogger.com</email><gd:image height="16" rel="http://schemas.google.com/g/2005#thumbnail" src="https://img1.blogblog.com/img/b16-rounded.gif" width="16"/></author><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" height="72" url="https://lh3.googleusercontent.com/8ZcL0YugCY2d24_K3O6Jsewt3iaPkzNJ_LwQIsGfWNDdarXWMjKjtAjxWnNAnIEvhHitFyLRGQXp-4_Z3jAc2Q_IX68UFA8f6WI4PaKg4EbEsMov-OJdVsMXN8nxpfEEcKc3H7aYnZ6PkHluQEnv0U8Sh36QFvaNQLBZTlVSSM4dmwCKu6vVACwnpDOmHw=s72-c" width="72"/><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1176949257541686127.post-2263910864248439853</id><published>2022-07-19T12:59:00.001-04:00</published><updated>2022-07-19T14:04:59.621-04:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="android"/><category scheme="http://www.blogger.com/atom/ns#" term="android security"/><title type="text">DNS-over-HTTP/3 in Android</title><content type="html">&lt;p&gt;&lt;i&gt;Posted by Matthew Maurer and Mike Yu, Android team&lt;/i&gt;&lt;/p&gt; &lt;p&gt;  To help keep Android users’ DNS queries private, Android supports encrypted   DNS. In addition to existing support for DNS-over-TLS, Android now supports   DNS-over-HTTP/3 which has a number of improvements over DNS-over-TLS. &lt;/p&gt;&lt;p&gt;  Most network connections begin with a DNS lookup. While transport security may   be applied to the connection itself, that DNS lookup has traditionally not   been private by default: the base DNS protocol is raw UDP with no encryption.   While the internet has migrated to TLS over time, DNS has a bootstrapping   problem. Certificate verification relies on the domain of the other party,   which requires either DNS itself, or moves the problem to DHCP (which may be   maliciously controlled). This issue is mitigated by central resolvers like   Google, Cloudflare, OpenDNS and Quad9, which allow devices to configure a   single DNS resolver locally for every network, overriding what is offered   through DHCP. &lt;/p&gt;&lt;p&gt;  In Android 9.0, we   &lt;a href="https://android-developers.googleblog.com/2018/04/dns-over-tls-support-in-android-p.html"&gt;announced&lt;/a&gt;  the Private DNS feature, which uses   &lt;a href="https://tools.ietf.org/html/rfc8310"&gt;DNS-over-TLS&lt;/a&gt; (DoT) to   protect DNS queries when enabled and supported by the server. Unfortunately,   DoT incurs overhead for every DNS request. An alternative encrypted DNS   protocol,   &lt;a href="https://tools.ietf.org/html/rfc8484"&gt;DNS-over-HTTPS&lt;/a&gt; (DoH), is   rapidly gaining traction within the industry as DoH has already been deployed   by most public DNS operators, including the   &lt;a href="https://developers.cloudflare.com/1.1.1.1/dns-over-https/cloudflared-proxy/"&gt;Cloudflare Resolver&lt;/a&gt;  and   &lt;a href="https://developers.google.com/speed/public-dns/docs/doh/"&gt;Google Public DNS&lt;/a&gt;. While using HTTPS alone will not reduce the overhead significantly, HTTP/3   uses &lt;a href="https://datatracker.ietf.org/doc/html/rfc9000"&gt;QUIC&lt;/a&gt;, a   transport that efficiently multiplexes multiple streams over UDP using a   single TLS session with session resumption. All of these features are crucial   to efficient operation on mobile devices. &lt;/p&gt;&lt;p&gt;  DNS-over-HTTP/3 (DoH3) support was released as part of a   &lt;a href="https://source.android.com/devices/architecture/modular-system"&gt;Google Play system update&lt;/a&gt;, so by the time you’re reading this, Android devices from Android 11   onwards&lt;sup id="fnref1"&gt;&lt;a href="#fn1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt; will use   DoH3 instead of DoT for well-known&lt;sup id="fnref2"&gt;&lt;a href="#fn2" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt;  DNS servers which support it. Which DNS service you are using is unaffected by   this change; only the transport will be upgraded. In the future, we aim to   support   &lt;a href="https://datatracker.ietf.org/doc/draft-ietf-add-ddr/"&gt;DDR&lt;/a&gt; which   will allow us to dynamically select the correct configuration for any server.   This feature should decrease the performance impact of encrypted DNS. &lt;/p&gt;&lt;h2&gt;Performance&lt;/h2&gt; &lt;p&gt;  DNS-over-HTTP/3 avoids several problems that can occur with DNS-over-TLS   operation: &lt;/p&gt;&lt;ul&gt;  &lt;li&gt;    As DoT operates on a single stream of requests and responses,     &lt;a href="https://www.dit.upm.es/~fcuadrado/publication/imc-19-doh/imc-19-doh.pdf"&gt;many&lt;/a&gt;    server implementations suffer from     &lt;a href="https://en.wikipedia.org/wiki/Head-of-line_blocking"&gt;head-of-line blocking&lt;/a&gt;&lt;sup id="fnref3"&gt;&lt;a href="#fn3" rel="footnote"&gt;3&lt;/a&gt;&lt;/sup&gt;. This means that if the request at the front of the line takes a while to     resolve (possibly because a recursive resolution is necessary), responses     for subsequent requests that would have otherwise been resolved quickly are     blocked waiting on that first request. DoH3 by comparison runs each request     over a separate     &lt;a href="https://tools.ietf.org/id/draft-ietf-quic-transport-24.html#rfc.section.2"&gt;logical stream&lt;/a&gt;, which means implementations will resolve requests out-of-order by     default.   &lt;/li&gt;  &lt;li&gt;    Mobile devices change networks frequently as the user moves around. With     DoT, these events require a full renegotiation of the connection. By     contrast, the QUIC transport HTTP/3 is based on can resume a suspended     connection in a single RTT.   &lt;/li&gt;  &lt;li&gt;    DoT intends for many queries to use the same connection to amortize the cost     of TCP and TLS handshakes at the start. Unfortunately, in practice several     factors (such as network disconnects or server TCP connection management)     make these connections less long-lived than we might like. Once a connection     is closed, establishing the connection again requires at least 1 RTT.     &lt;p&gt;      In unreliable networks, DoH3 may even outperform traditional DNS. While       unintuitive, this is because the flow control mechanisms in QUIC can alert       either party that packets weren’t received. In traditional DNS, the       timeout for a query needs to be based on expected time for the entire       query, not just for the resolver to receive the packet.     &lt;/p&gt;    &lt;p&gt;&lt;/p&gt;&lt;div class="separator" style="clear: both;"&gt;&lt;a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgNr6mnniVosUy4Qn1ogtfiDF7et400HsodQ06Ku8cZSAKpENH1-YqbjrIdJWo78j-YAXmM19hMbmk4rozArKUaYKli6kM1UENf-GQRwR0Y4cORrt8mDLJghZTYqk53WiiF8k1wuXrwLTeYoN4rrjeaC_bGxoru5A9W803WvokCAxLb1_iEMW_wzSLwFw/s1600/Screenshot%202022-07-19%207.39.02%20AM.png" style="display: block; padding: 1em 0px; text-align: center;"&gt;&lt;img alt="" border="0" data-original-height="381" data-original-width="710" height="297" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgNr6mnniVosUy4Qn1ogtfiDF7et400HsodQ06Ku8cZSAKpENH1-YqbjrIdJWo78j-YAXmM19hMbmk4rozArKUaYKli6kM1UENf-GQRwR0Y4cORrt8mDLJghZTYqk53WiiF8k1wuXrwLTeYoN4rrjeaC_bGxoru5A9W803WvokCAxLb1_iEMW_wzSLwFw/w553-h297/Screenshot%202022-07-19%207.39.02%20AM.png" width="553" /&gt;&lt;/a&gt;&lt;/div&gt;    &lt;/li&gt;&lt;/ul&gt;     &lt;p&gt;&lt;/p&gt;    &lt;p&gt;      Field measurements during the initial limited rollout of this feature show       that DoH3 significantly improves on DoT’s performance. For successful       queries, our studies showed that replacing DoT with DoH3 reduces median       query time by 24%, and 95th percentile query time by 44%. While it might       seem suspect that the reported data is conditioned on successful queries,       both DoT and DoH3 resolve 97% of queries successfully, so their metrics       are directly comparable. UDP resolves only 83% of queries successfully. As       a result, UDP latency is not directly comparable to TLS/HTTP3 latency       because non-connection-oriented protocols have a different notion of what       a "query" is. We have still included it for rough comparison.     &lt;/p&gt;    &lt;h2&gt;Memory Safety&lt;/h2&gt;     &lt;p&gt;      The DNS resolver processes input that could potentially be controlled by       an attacker, both from the network and from apps on the device. To reduce       the risk of security vulnerabilities, we chose to use a memory safe       language for the implementation.     &lt;/p&gt;    &lt;p&gt;      Fortunately, we’ve been adding       &lt;a href="https://security.googleblog.com/2021/04/rust-in-android-platform.html"&gt;Rust support&lt;/a&gt;      to the Android platform. This effort is intended exactly for cases like       this — system level features which need to be performant or low level       (both in this case) and which would carry risk to implement in C++. While       we’ve previously launched Keystore 2.0, this represents our first foray       into Rust in Mainline Modules. Cloudflare maintains an HTTP/3 library       called &lt;a href="https://github.com/cloudflare/quiche"&gt;quiche&lt;/a&gt;, which       fits our use case well, as it has a memory-safe implementation, few       dependencies, and a small code size. Quiche also       &lt;a href="https://github.com/cloudflare/quiche#calling-quiche-from-cc"&gt;supports use directly from C++&lt;/a&gt;. We considered this, but even the request dispatching service had       sufficient complexity that we chose to implement that portion in Rust as       well.     &lt;/p&gt;    &lt;p&gt;      We built the query engine using the       &lt;a href="https://github.com/tokio-rs/tokio"&gt;Tokio&lt;/a&gt; async framework to       simultaneously handle new requests, incoming packet events, control       signals, and timers. In C++, this would likely have required multiple       threads or a carefully crafted event loop. By leveraging asynchronous in       Rust, this occurs on a single thread with minimal locking&lt;sup id="fnref4"&gt;&lt;a href="#fn4" rel="footnote"&gt;4&lt;/a&gt;&lt;/sup&gt;. The DoH3 implementation is 1,640 lines and uses a single runtime       thread. By comparison, DoT takes 1,680 lines while managing less and using       up to 4 threads per DoT server in use.     &lt;/p&gt;    &lt;h2&gt;Safety and Performance — Together at Last&lt;/h2&gt;     &lt;p&gt;      With the introduction of Rust, we are able to improve both security and       the performance at the same time. Likewise, QUIC allows us to improve       network performance and privacy simultaneously. Finally, Mainline ensures       that such improvements are able to make their way to more Android users       sooner.     &lt;/p&gt;    &lt;h2&gt;Acknowledgements&lt;/h2&gt;     &lt;p&gt;      Special thanks to Luke Huang who greatly contributed to the development of       this feature, and Lorenzo Colitti for his in-depth review of the technical       aspects of this post.     &lt;/p&gt;    &lt;hr /&gt;    &lt;p&gt;&lt;/p&gt;    &lt;p&gt;&lt;/p&gt;    &lt;p&gt;&lt;/p&gt; &lt;h3&gt;&lt;/h3&gt;&lt;div class="footnotes"&gt;&lt;ol style="text-align: left;"&gt;&lt;li id="fn1"&gt;&lt;p&gt;&lt;i&gt;     Some Android 10 devices which adopted Google Play system updates early will also receive this feature.&amp;nbsp;&lt;a href="#fnref1" rev="footnote"&gt;↩&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;&lt;/li&gt;&lt;li id="fn2"&gt;&lt;p&gt;&lt;i&gt;     Google DNS and Cloudflare DNS at launch, others may be added in the future.&amp;nbsp;&lt;a href="#fnref2" rev="footnote"&gt;↩&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;&lt;/li&gt;&lt;li id="fn3"&gt; &lt;p&gt;&lt;i&gt;     DoT can be implemented in a way that avoids this problem, as the client must accept server responses out of order. However, in practice most servers do not implement this reordering.&amp;nbsp;&lt;a href="#fnref3" rev="footnote"&gt;↩&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;&lt;/li&gt;&lt;li id="fn4"&gt;&lt;p&gt;&lt;i&gt;     There is a lock used for the SSL context which is accessed once per DNS server, and another on the FFI when issuing a request. The FFI lock could be removed with changes to the C++ side, but has remained because it is low contention.&amp;nbsp;&lt;a href="#fnref4" rev="footnote"&gt;↩&lt;/a&gt;&lt;/i&gt; &lt;/p&gt;&lt;/li&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/ol&gt;&lt;/div&gt;</content><link href="http://security.googleblog.com/feeds/2263910864248439853/comments/default" rel="replies" title="Post Comments" type="application/atom+xml"/><link href="http://www.blogger.com/comment.g?blogID=1176949257541686127&amp;postID=2263910864248439853&amp;isPopup=true" rel="replies" title="0 Comments" type="text/html"/><link href="http://www.blogger.com/feeds/1176949257541686127/posts/default/2263910864248439853" rel="edit" type="application/atom+xml"/><link href="http://www.blogger.com/feeds/1176949257541686127/posts/default/2263910864248439853" rel="self" type="application/atom+xml"/><link href="http://security.googleblog.com/2022/07/dns-over-http3-in-android.html" rel="alternate" title="DNS-over-HTTP/3 in Android" type="text/html"/><author><name>Edward Fernandez</name><uri>http://www.blogger.com/profile/03784424747198152685</uri><email>noreply@blogger.com</email><gd:image height="16" rel="http://schemas.google.com/g/2005#thumbnail" src="https://img1.blogblog.com/img/b16-rounded.gif" width="16"/></author><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" height="72" url="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgNr6mnniVosUy4Qn1ogtfiDF7et400HsodQ06Ku8cZSAKpENH1-YqbjrIdJWo78j-YAXmM19hMbmk4rozArKUaYKli6kM1UENf-GQRwR0Y4cORrt8mDLJghZTYqk53WiiF8k1wuXrwLTeYoN4rrjeaC_bGxoru5A9W803WvokCAxLb1_iEMW_wzSLwFw/s72-w553-h297-c/Screenshot%202022-07-19%207.39.02%20AM.png" width="72"/><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1176949257541686127.post-5008300794821907643</id><published>2022-06-21T12:00:00.003-04:00</published><updated>2022-08-23T15:28:25.121-04:00</updated><title type="text"> Game on! The 2022 Google CTF is here.</title><content type="html">&lt;span class="byline-author"&gt;Posted by Jan Keller, Technical Entertainment Manager, Bug Hunters&amp;nbsp;&lt;/span&gt;&lt;div&gt;&lt;span class="byline-author"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiFwGEaQ3m4y9ZRNGBkH52UYeopkT5s7CuBV_mRAIcPLkUrDVsy8c_1sN3ktjlTSiRsVEAmMaCLNdDUlWeKNyDJ88n-Vn3uqJGu1eUojU5_qqxejHl23nR4omhzZ0wrNj8DtxTQysT0Nlg6MMd0uRmffkVNVPiUB2MD-IGoAsP6N0dRsbulBPem356ucQ/s242/Screen%20Shot%202022-08-23%20at%2012.25.53%20PM.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="201" data-original-width="242" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiFwGEaQ3m4y9ZRNGBkH52UYeopkT5s7CuBV_mRAIcPLkUrDVsy8c_1sN3ktjlTSiRsVEAmMaCLNdDUlWeKNyDJ88n-Vn3uqJGu1eUojU5_qqxejHl23nR4omhzZ0wrNj8DtxTQysT0Nlg6MMd0uRmffkVNVPiUB2MD-IGoAsP6N0dRsbulBPem356ucQ/s16000/Screen%20Shot%202022-08-23%20at%2012.25.53%20PM.png" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div style="text-align: center;"&gt;&lt;br /&gt;&lt;/div&gt;Are you ready to put your hacking skills to the test? It’s Google CTF time!&lt;br /&gt;&lt;br /&gt;The competition kicks off on July 1 2022 6:00 PM UTC and runs through July 3 2022 6:00 PM UTC. Registration is now open at http://goo.gle/ctf.&lt;br /&gt;&lt;br /&gt;In true old Google CTF fashion, the top 8 teams will qualify for our &lt;a href="https://capturetheflag.withgoogle.com/hackceler8#about"&gt;Hackceler8&lt;/a&gt; speedrunning meets CTFs competition. The prize pool stands similar to previous years at more than $40,000.&lt;/div&gt;&lt;div&gt;&lt;span class="byline-author"&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjkpdnP0f6kOh_Fe4KfJG1SrrrVCqK2ZagTb6BIwlca9JUMSH-qrrtsjVpX8X_WF42Qk5YzsHe-ImGAYfHu-HuH98IkeEid8NCDt2BaZpgx4uoqudHi8OVt-Dx0LchuLpmLqrKkG0szt42c_zFKN39ejZPJDUUH40_qdvmfiMcvJk6luAu_kctIKZWnpg/s621/Screen%20Shot%202022-08-23%20at%2012.26.55%20PM.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="152" data-original-width="621" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjkpdnP0f6kOh_Fe4KfJG1SrrrVCqK2ZagTb6BIwlca9JUMSH-qrrtsjVpX8X_WF42Qk5YzsHe-ImGAYfHu-HuH98IkeEid8NCDt2BaZpgx4uoqudHi8OVt-Dx0LchuLpmLqrKkG0szt42c_zFKN39ejZPJDUUH40_qdvmfiMcvJk6luAu_kctIKZWnpg/s16000/Screen%20Shot%202022-08-23%20at%2012.26.55%20PM.png" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt; text-align: center;"&gt;&lt;br /&gt;&lt;/p&gt;&lt;/span&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;We can’t wait to see whether PPP will be able to defend their crown. For those of you looking to satisfy your late-night hacking hunger: past year's challenges, including Hackceler8 2021 matches, are open-sourced &lt;a href="https://github.com/google/google-ctf"&gt;here&lt;/a&gt;. On top of that there are &lt;a href="https://www.youtube.com/results?search_query=hackceler8"&gt;hours of Hackceler8 2020 videos&lt;/a&gt; to watch!&lt;br /&gt;&lt;br /&gt;If you are just starting out in this space, last year’s &lt;a href="https://capturetheflag.withgoogle.com/beginners-quest"&gt;Beginner’s Quest&lt;/a&gt; is a great resource to get started. For later in the year, we have something mysterious planned - stay tuned to find out more!&lt;span class="byline-author"&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgImTtTPAf04cE88o_n0jfHEobWGuq7qL5cksUm0N-SYjYv6sfynNbDbtr3bK4FqLSs-A_obMFo9wMxmmUMduEmfhr7CgoMEs2cWTBGQ36p_hrJSKsUsQP2nOqVm3RX4vDQxAOje7O0CP6F5NAeG1-zbapxv3R42cWRLe0UkShLtxyMSDLBTn_xjfPZbA/s160/Screen%20Shot%202022-08-23%20at%2012.27.47%20PM.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="160" data-original-width="158" height="160" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgImTtTPAf04cE88o_n0jfHEobWGuq7qL5cksUm0N-SYjYv6sfynNbDbtr3bK4FqLSs-A_obMFo9wMxmmUMduEmfhr7CgoMEs2cWTBGQ36p_hrJSKsUsQP2nOqVm3RX4vDQxAOje7O0CP6F5NAeG1-zbapxv3R42cWRLe0UkShLtxyMSDLBTn_xjfPZbA/s1600/Screen%20Shot%202022-08-23%20at%2012.27.47%20PM.png" width="158" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/span&gt;Whether you’re a seasoned CTF player or just curious about cyber security and ethical hacking, we want you to join us. Sign up to expand your skill set, meet new friends in the security community, and even watch the pros in action. For the latest announcements, see &lt;a href="http://g.co/ctf"&gt;g.co/ctf&lt;/a&gt;, &lt;a href="https://groups.google.com/forum/?nomobile=true#!forum/google-ctf/join"&gt;subscribe to our mailing list&lt;/a&gt;, or follow us on &lt;a href="http://twitter.com/googlevrp"&gt;@GoogleVRP&lt;/a&gt;. Interested in bug hunting for Google? Check out &lt;a href="http://bughunters.google.com"&gt;bughunters.google.com&lt;/a&gt;. See you there!&lt;/div&gt;</content><link href="http://security.googleblog.com/feeds/5008300794821907643/comments/default" rel="replies" title="Post Comments" type="application/atom+xml"/><link href="http://www.blogger.com/comment.g?blogID=1176949257541686127&amp;postID=5008300794821907643&amp;isPopup=true" rel="replies" title="0 Comments" type="text/html"/><link href="http://www.blogger.com/feeds/1176949257541686127/posts/default/5008300794821907643" rel="edit" type="application/atom+xml"/><link href="http://www.blogger.com/feeds/1176949257541686127/posts/default/5008300794821907643" rel="self" type="application/atom+xml"/><link href="http://security.googleblog.com/2022/06/game-on-2022-google-ctf-is-here.html" rel="alternate" title=" Game on! The 2022 Google CTF is here." type="text/html"/><author><name>Unknown</name><email>noreply@blogger.com</email><gd:image height="16" rel="http://schemas.google.com/g/2005#thumbnail" src="https://img1.blogblog.com/img/b16-rounded.gif" width="16"/></author><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" height="72" url="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiFwGEaQ3m4y9ZRNGBkH52UYeopkT5s7CuBV_mRAIcPLkUrDVsy8c_1sN3ktjlTSiRsVEAmMaCLNdDUlWeKNyDJ88n-Vn3uqJGu1eUojU5_qqxejHl23nR4omhzZ0wrNj8DtxTQysT0Nlg6MMd0uRmffkVNVPiUB2MD-IGoAsP6N0dRsbulBPem356ucQ/s72-c/Screen%20Shot%202022-08-23%20at%2012.25.53%20PM.png" width="72"/><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1176949257541686127.post-3440666132002116520</id><published>2022-06-14T12:00:00.002-04:00</published><updated>2022-06-14T14:35:33.130-04:00</updated><title type="text">SBOM in Action: finding vulnerabilities with a Software Bill of Materials</title><content type="html">&lt;span class="byline-author"&gt;Posted by Brandon Lum and Oliver Chang, Google Open Source Security Team&lt;br /&gt;&lt;/span&gt;&lt;div&gt;&lt;span class="byline-author"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;br /&gt;The past year has seen an industry-wide effort to embrace Software Bills of Materials (&lt;a href="https://www.ntia.gov/SBOM"&gt;SBOMs&lt;/a&gt;)—a list of all the components, libraries, and modules that are required to build a piece of software. In the wake of the &lt;a href="https://cloud.google.com/public-sector/us-federal-cyber-security"&gt;2021 Executive Order on Cybersecurity&lt;/a&gt;, these ingredient labels for software became popular as a way to understand what’s in the software we all consume. The guiding idea is that it’s impossible to judge the risks of particular software without knowing all of its components—including those produced by others. This increased interest in SBOMs saw another boost after the National Institute of Standards and Technology (NIST) released its &lt;a href="https://csrc.nist.gov/Projects/ssdf"&gt;Secure Software Development Framework&lt;/a&gt;, which requires SBOM information to be available for software. But now that the industry is &lt;a href="https://www.linuxfoundation.org/blog/spdx-its-already-in-use-for-global-software-bill-of-materials-sbom-and-supply-chain-security/"&gt;making progress on methods&lt;/a&gt; to generate and share SBOMs, what do we do with them?&lt;br /&gt;&lt;br /&gt;Generating an SBOM is only one half of the story. Once an SBOM is available for a given piece of software, it needs to be mapped onto a list of known vulnerabilities to know which components could pose a threat. By connecting these two sources of information, consumers will know not just what’s in their software, but also its risks and whether they need to remediate any issues.&lt;br /&gt;&lt;br /&gt;In this blog post, we demonstrate the process of taking an SBOM from a large and &lt;a href="https://github.com/ossf/criticality_score"&gt;critical&lt;/a&gt; project—Kubernetes—and using an open source tool to identify the vulnerabilities it contains. Our example’s success shows that we don’t need to wait for SBOM generation to reach full maturity before we begin mapping SBOMs to common vulnerability databases. With just a few updates from SBOM creators to address current limitations in connecting the two sources of data, this process is poised to become easily within reach of the average software consumer.&lt;br /&gt; &lt;br /&gt;&lt;b&gt;&lt;span style="font-size: large;"&gt;OSV: Connecting SBOMs to vulnerabilities&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;The following example uses Kubernetes, a major project that makes its SBOM available using the Software Package Data Exchange (SPDX) format—an international open standard (ISO) for communicating SBOM information. The same idea should apply to any project that makes its SBOM available, and for projects that don’t, you can generate your own SBOM using the same &lt;a href="https://github.com/kubernetes-sigs/bom"&gt;bom&lt;/a&gt; tool Kubernetes created.&lt;br /&gt;&lt;br /&gt;We have chosen to map the SBOM to the &lt;a href="https://osv.dev/"&gt;Open Source Vulnerabilities (OSV) database&lt;/a&gt;, which describes vulnerabilities in a format that was specifically designed to map to open source package versions or commit hashes. The OSV database excels here as it provides a standardized format and aggregates information across multiple ecosystems (e.g., Python, Golang, Rust) and databases (e.g., &lt;a href="https://github.com/advisories"&gt;Github Advisory Database (GHSA)&lt;/a&gt;, &lt;a href="https://github.com/cloudsecurityalliance/gsd-database"&gt;Global Security Database (GSD)&lt;/a&gt;).&lt;br /&gt;&lt;br /&gt;To connect the SBOM to the database, we’ll use the SPDX &lt;a href="https://github.com/spdx/spdx-to-osv/"&gt;spdx-to-osv&lt;/a&gt; tool. This open source tool takes in an SPDX SBOM document, queries the OSV database of vulnerabilities, and returns an enumeration of vulnerabilities present in the software’s declared components.&lt;br /&gt;Example: Kubernetes’ SBOM&lt;br /&gt;&lt;br /&gt;The first step is to download Kubernetes’ SBOM, which is &lt;a href="https://sbom.k8s.io/v1.21.3/source"&gt;publicly available&lt;/a&gt; and contains information on the project, dependencies, versions, and licenses. Anyone can download it with a simple curl command:&lt;br /&gt;&lt;br /&gt;&lt;span id="docs-internal-guid-3c33721c-7fff-ba04-0e32-c0ff5e3deca0"&gt;&lt;div align="left" dir="ltr" style="margin-left: 0pt;"&gt;&lt;table style="border-collapse: collapse; border: none;"&gt;&lt;colgroup&gt;&lt;/colgroup&gt;&lt;tbody&gt;&lt;tr style="height: 0pt;"&gt;&lt;td style="background-color: #fafafa; border-bottom: solid #e0e0e0 1pt; border-left: solid #e0e0e0 1pt; border-right: solid #e0e0e0 1pt; border-top: solid #e0e0e0 1pt; overflow-wrap: break-word; overflow: hidden; padding: 5pt 5pt 5pt 5pt; vertical-align: top;"&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: transparent; color: #0f9d58; font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;# Download the Kubernetes SPDX source document&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: transparent; color: #666666; font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;$ curl -L https://sbom.k8s.io/v1.21.3/source &amp;gt; k8s-1.21.3-source.spdx&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/span&gt;&lt;br /&gt;The next step is to use the SPDX &lt;a href="https://github.com/spdx/spdx-to-osv/"&gt;spdx-to-osv&lt;/a&gt; tool to connect the Kubernetes’ SBOM to the OSV database:&lt;br /&gt;&lt;br /&gt;&lt;span id="docs-internal-guid-ec65eb90-7fff-2a4d-3f25-20c20c435989"&gt;&lt;div align="left" dir="ltr" style="margin-left: 0pt;"&gt;&lt;table style="border-collapse: collapse; border: none;"&gt;&lt;colgroup&gt;&lt;/colgroup&gt;&lt;tbody&gt;&lt;tr style="height: 0pt;"&gt;&lt;td style="background-color: #fafafa; border-bottom: solid #e0e0e0 1pt; border-left: solid #e0e0e0 1pt; border-right: solid #e0e0e0 1pt; border-top: solid #e0e0e0 1pt; overflow-wrap: break-word; overflow: hidden; padding: 5pt 5pt 5pt 5pt; vertical-align: top;"&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: transparent; color: #0f9d58; font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;# Run the spdx-to-osv tool, taking the information from the SPDX SBOM and mapping it to OSV vulnerabilities&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: transparent; color: #616161; font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;$ java -jar ./target/spdx-to-osv-0.0.4-SNAPSHOT-jar-with-dependencies.jar -I k8s-1.21.3-source.spdx -O out-k8s.1.21.3.json&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: transparent; color: #0f9d58; font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;# Show the output OSV vulnerabilities of the spdx-to-osv tool&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: transparent; color: #616161; font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;$ cat out-k8s.1.21.3.json&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: transparent; color: #616161; font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;…&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: transparent; color: #616161; font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;{&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: transparent; color: #616161; font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;"id": "GHSA-w73w-5m7g-f7qc",&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: transparent; color: #616161; font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;"published": "2021-05-18T21:08:21Z",&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: transparent; color: #616161; font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;"modified": "2021-06-28T21:32:34Z",&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: transparent; color: #616161; font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;"aliases": [&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: transparent; color: #616161; font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"CVE-2020-26160"&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: transparent; color: #616161; font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;],&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: transparent; color: #616161; font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;"summary": "Authorization bypass in github.com/dgrijalva/jwt-go",&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: transparent; color: #616161; font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;"details": "jwt-go allows attackers to bypass intended access restrictions in situations with []string{} for m[\"aud\"] (which is allowed by the specification). Because the type assertion fails, \"\" is the value of aud. This is a security problem if the JWT token is presented to a service that lacks its own audience check. There is no patch available and users of jwt-go are advised to migrate to [golang-jwt](https://github.com/golang-jwt/jwt) at version 3.2.1",&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: transparent; color: #616161; font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;"affected": [&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: transparent; color: #616161; font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: transparent; color: #616161; font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"package": {&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: transparent; color: #616161; font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"name": "github.com/dgrijalva/jwt-go",&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: transparent; color: #616161; font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"ecosystem": "Go",&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: transparent; color: #616161; font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"purl": "pkg:golang/github.com/dgrijalva/jwt-go"&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: transparent; color: #616161; font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;},&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: transparent; color: #616161; font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;…&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;The output of the tool shows that v1.21.3 of Kubernetes contains the &lt;a href="https://osv.dev/vulnerability/GO-2020-0017"&gt;CVE-2020-26160&lt;/a&gt; vulnerability. This information can be helpful to determine if any additional action is required to manage the risk of operating this software. For example, if an organization is using v1.21.3 of Kubernetes, measures can be taken to trigger company policy to update the deployment, which will protect the organization against attacks exploiting this vulnerability.&lt;div&gt;&lt;br /&gt;&lt;span style="font-size: large;"&gt;&lt;b&gt;Suggestions for SBOM tooling improvements&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;To get the spdx-to-osv tool to work we had to make some minor changes to disambiguate the information provided in the SBOM:&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;In the current implementation of the bom tool, the version was included as part of the package name (gopkg.in/square/go-jose.v2@v2.2.2). We needed to trim the suffix to match the SPDX format, which has a different field for version number.&lt;/li&gt;&lt;/ul&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;The SBOM created by the bom tool does not specify an ecosystem. Without an ecosystem, it's impossible to reliably disambiguate which library or package is affected in an automated way. Vulnerability scanners could return false positives if one ecosystem was affected but not others. It would be more helpful if the SBOM differentiated between different library and package versions.&lt;/li&gt;&lt;/ul&gt;These are relatively minor hurdles, though, and we were able to successfully run the tool with only small manual adjustments. To make the process easier in the future, we have the following recommendation for improving SBOM generation tooling:&lt;br /&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;SBOM tooling creators should add a reference using an identification scheme such as &lt;a href="https://github.com/package-url/purl-spec"&gt;Purl&lt;/a&gt; for all packages included in the software. This type of identification scheme both specifies the ecosystem and also makes package identification easier, since the scheme is more resilient to small deviations in package descriptors like the suffix example above.  SPDX supports this via &lt;a href="https://spdx.github.io/spdx-spec/external-repository-identifiers/#f35-purl"&gt;external references to Purl&lt;/a&gt; and other package identification schemas.&lt;/li&gt;&lt;/ul&gt;&lt;span style="font-size: large;"&gt;&lt;b&gt;SBOM in the future&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;It’s clear that we’re getting very close to achieving the original goal of SBOMs: using them to help manage the risk of vulnerabilities in software. Our example queried the OSV database, but we will soon see the same success in mapping SBOM data to other vulnerability databases and even using them with new standards like &lt;a href="https://www.ntia.gov/files/ntia/publications/vex_one-page_summary.pdf"&gt;VEX&lt;/a&gt;, which provides additional context around whether vulnerabilities in software have been mitigated. &lt;br /&gt;&lt;br /&gt;Continuing on this path of widespread SBOM adoption and tooling refinement, we will hopefully soon be able to not only request and download SBOMs for every piece of software, but also use them to understand the vulnerabilities affecting any software we consume. This example is a peek into a possible future of what SBOMs can offer when we bridge the gap to connect them with vulnerability databases: a new normal of worrying less about the risks in the software we use.&lt;div&gt;&amp;nbsp; &lt;br /&gt;&lt;i&gt;A special thanks to Gary O’Neall of Source Auditor for creating the &lt;a href="https://github.com/spdx/spdx-to-osv"&gt;spdx-to-osv&lt;/a&gt; tool and contributing to this blog post.&lt;/i&gt;&lt;/div&gt;&lt;/div&gt;</content><link href="http://security.googleblog.com/feeds/3440666132002116520/comments/default" rel="replies" title="Post Comments" type="application/atom+xml"/><link href="http://www.blogger.com/comment.g?blogID=1176949257541686127&amp;postID=3440666132002116520&amp;isPopup=true" rel="replies" title="0 Comments" type="text/html"/><link href="http://www.blogger.com/feeds/1176949257541686127/posts/default/3440666132002116520" rel="edit" type="application/atom+xml"/><link href="http://www.blogger.com/feeds/1176949257541686127/posts/default/3440666132002116520" rel="self" type="application/atom+xml"/><link href="http://security.googleblog.com/2022/06/sbom-in-action-finding-vulnerabilities.html" rel="alternate" title="SBOM in Action: finding vulnerabilities with a Software Bill of Materials" type="text/html"/><author><name>Unknown</name><email>noreply@blogger.com</email><gd:image height="16" rel="http://schemas.google.com/g/2005#thumbnail" src="https://img1.blogblog.com/img/b16-rounded.gif" width="16"/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1176949257541686127.post-8414781811962840090</id><published>2022-06-03T15:03:00.002-04:00</published><updated>2022-06-03T15:10:41.523-04:00</updated><title type="text">Announcing the winners of the 2021 GCP VRP Prize </title><content type="html">&lt;span class="byline-author"&gt;Posted by Harshvardhan Sharma, Information Security Engineer, Google&amp;nbsp;&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;2021 was another &lt;a href="https://security.googleblog.com/2022/02/vulnerability-reward-program-2021-year.html"&gt;record-breaking year&lt;/a&gt; for our Vulnerability Rewards Program (VRP). We paid a total of $8.7 million in rewards, our highest amount yet. 2021 saw some amazing work from the security research community. It is worth noting that a significant portion of the reports we received were for findings in &lt;a href="http://cloud.google.com"&gt;Google Cloud Platform (GCP)&lt;/a&gt; products. It is heartening to see an increasing number of talented researchers getting involved in cloud security.&lt;br /&gt;&lt;br /&gt;We first &lt;a href="https://security.googleblog.com/2019/08/awarding-google-cloud-vulnerability.html"&gt;announced&lt;/a&gt; the GCP VRP Prize in 2019 to encourage security researchers to focus on the security of GCP, in turn helping us make GCP more secure for our users, customers, and the internet at large. Even 3 years into the program, the submissions we are getting never cease to amaze us. After careful evaluation of the submissions, we are excited to announce the 2021 winners:&lt;br /&gt;&lt;br /&gt;&lt;b&gt;First Prize&lt;/b&gt;, $133,337: Sebastian Lutz for the report and write-up &lt;a href="https://www.seblu.de/2021/12/iap-bypass.html"&gt;Bypassing Identity-Aware Proxy&lt;/a&gt;. Sebastian's excellent write-up outlines how he found a bug in Identity-Aware Proxy (IAP) which an attacker could have exploited to gain access to a user's IAP-protected resources by making them visit an attacker-controlled URL and stealing their IAP auth token.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Second Prize&lt;/b&gt;, $73,331: Imre Rad for the report and write-up &lt;a href="https://github.com/irsl/gcp-dhcp-takeover-code-exec"&gt;GCE VM takeover via DHCP flood&lt;/a&gt;. The flaw described in the write-up would have allowed an attacker to gain access to a Google Compute Engine VM by sending malicious DHCP packets to the VM and impersonating the GCE metadata server.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Third Prize&lt;/b&gt;, $73,331: Mike Brancato for the report and write-up &lt;a href="https://mbrancato.github.io/2021/12/28/rce-dataflow.html"&gt;Remote Code Execution in Google Cloud Dataflow&lt;/a&gt;. Mike's write-up describes how he discovered that Dataflow nodes were exposing an unauthenticated Java JMX port and how an attacker could have exploited this to run arbitrary commands on the VM under some configurations.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Fourth Prize&lt;/b&gt;, $31,337: Imre Rad for the write-up &lt;a href="https://irsl.medium.com/the-speckle-umbrella-story-part-2-fcc0193614ea"&gt;The Speckle Umbrella story — part 2&lt;/a&gt; which details multiple vulnerabilities that Imre found in Cloud SQL.&lt;br /&gt;&lt;br /&gt;&lt;i&gt;(Remember, you can make multiple submissions for the GCP VRP Prize and be eligible for more than one prize!)&lt;/i&gt;&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Fifth Prize&lt;/b&gt;, $1,001: Anthony Weems for the report and write-up &lt;a href="https://lf.lc/vrp/203177829/"&gt;Remote code execution in Managed Anthos Service Mesh control plane&lt;/a&gt;. Anthony found a bug in Managed Anthos Service Mesh and came up with a clever exploit to execute arbitrary commands authenticated as a Google-managed per-project service account.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Sixth Prize&lt;/b&gt;, $1,000: Ademar Nowasky Junior for the report and write-up &lt;a href="https://docs.google.com/document/d/1-TTCS6fS6kvFUkoJmX4Udr-czQ79lSUVXiWsiAED_bs/edit#"&gt;Command Injection in Google Cloud Shell&lt;/a&gt;. Ademar found a way to bypass some of the validation checks done by Cloud Shell. This would have allowed an attacker to run arbitrary commands in a user's Cloud Shell session by making them visit a maliciously crafted link.&lt;br /&gt;&lt;br /&gt;Congratulations to all the winners!&lt;br /&gt;&lt;br /&gt;Here's a video that with more details about each of the winning submissions:&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;iframe allowfullscreen="" class="BLOG_video_class" height="338" src="https://www.youtube.com/embed/GvO2Xtx8p9w" width="588" youtube-src-id="GvO2Xtx8p9w"&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;br /&gt;&lt;div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;h2 style="text-align: left;"&gt;&lt;b&gt;New Details About 2022 GCP VRP&lt;/b&gt;&lt;/h2&gt;&lt;br /&gt;We will pay out a total of $313,337 to the top seven submissions in the 2022 edition of the GCP VRP Prize. Individual prize amounts will be as follows:&lt;br /&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;1st prize: $133,337&lt;/li&gt;&lt;li&gt;2nd prize: $73,331&lt;/li&gt;&lt;li&gt;3rd prize: $31,337&lt;/li&gt;&lt;li&gt;4th prize: $31,311&lt;/li&gt;&lt;li&gt;5th prize: $17,311&lt;/li&gt;&lt;li&gt;6th prize: $13,373&lt;/li&gt;&lt;li&gt;7th prize: $13,337&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;If you are a security researcher, here's how you can enter the competition for the GCP VRP Prize 2022:&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Find a vulnerability in a GCP product (check out &lt;a href="https://cloud.google.com/free/docs/gcp-free-tier"&gt;Google Cloud Free Program&lt;/a&gt; to get started).&lt;/li&gt;&lt;li&gt;Report it to &lt;a href="http://bughunters.google.com"&gt;bughunters.google.com&lt;/a&gt;. Your bug needs to be awarded a financial reward  to be eligible for the GCP VRP Prize (the GCP VRP Prize money will be in addition to what you received for your bug!).&lt;/li&gt;&lt;li&gt;Create a public write-up describing your vulnerability report. One of the goals behind the GCP VRP Prize is to promote open research into cloud security.&lt;/li&gt;&lt;li&gt;Submit it &lt;a href="https://docs.google.com/forms/d/e/1FAIpQLSebVBNu4_1s4b1dmGv5Kc3T_D_lOAH6rQ6ZY3_ncFzcswe9LA/viewform?usp=sf_link"&gt;here&lt;/a&gt;.&lt;/li&gt;&lt;/ul&gt;Make sure to submit your VRP reports and write-ups before &lt;b&gt;January 15, 2023 at 23:59 PT.&lt;/b&gt; VRP reports which were submitted in preceding years but fixed only in 2022 are also eligible. You can check out the official rules for the prize &lt;a href="https://static.googleusercontent.com/media/www.google.com/en//about/appsecurity/reward-program/GCP_PRIZE_2022.pdf"&gt;here&lt;/a&gt;. Good luck!&lt;div&gt;&lt;span id="docs-internal-guid-d4fc47ae-7fff-fd30-c46c-6ba8772382b7"&gt;&lt;div&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content><link href="http://security.googleblog.com/feeds/8414781811962840090/comments/default" rel="replies" title="Post Comments" type="application/atom+xml"/><link href="http://www.blogger.com/comment.g?blogID=1176949257541686127&amp;postID=8414781811962840090&amp;isPopup=true" rel="replies" title="0 Comments" type="text/html"/><link href="http://www.blogger.com/feeds/1176949257541686127/posts/default/8414781811962840090" rel="edit" type="application/atom+xml"/><link href="http://www.blogger.com/feeds/1176949257541686127/posts/default/8414781811962840090" rel="self" type="application/atom+xml"/><link href="http://security.googleblog.com/2022/06/announcing-winners-of-2021-gcp-vrp-prize.html" rel="alternate" title="Announcing the winners of the 2021 GCP VRP Prize " type="text/html"/><author><name>Unknown</name><email>noreply@blogger.com</email><gd:image height="16" rel="http://schemas.google.com/g/2005#thumbnail" src="https://img1.blogblog.com/img/b16-rounded.gif" width="16"/></author><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" height="72" url="https://img.youtube.com/vi/GvO2Xtx8p9w/default.jpg" width="72"/><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1176949257541686127.post-7982685643647482755</id><published>2022-05-26T13:00:00.003-04:00</published><updated>2022-05-27T12:54:50.035-04:00</updated><title type="text">Retrofitting Temporal Memory Safety on C++</title><content type="html">&lt;span class="byline-author" style="font-family: arial;"&gt;Posted by Anton Bikineev, Michael Lippautz and Hannes Payer, Chrome security team&lt;/span&gt;&lt;div&gt;&lt;span style="font-family: arial;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span id="docs-internal-guid-9135c3bd-7fff-1c0b-7c5e-9ac1373ed3ec"&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: arial;"&gt;&lt;a href="https://security.googleblog.com/2021/09/an-update-on-memory-safety-in-chrome.html" style="text-decoration-line: none;"&gt;&lt;span style="color: #1155cc; font-variant-east-asian: normal; font-variant-numeric: normal; text-decoration-line: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;"&gt;Memory safety in Chrome&lt;/span&gt;&lt;/a&gt;&lt;span style="font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt; is an ever-ongoing effort to protect our users. We are constantly experimenting with different technologies to stay ahead of malicious actors. In this spirit, this post is about our journey of using heap scanning technologies to improve memory safety of C++.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;span style="font-family: arial;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;span style="font-family: arial;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;span style="font-family: arial;"&gt;Let’s start at the beginning though. Throughout the lifetime of an application its state is generally represented in memory. Temporal memory safety refers to the problem of guaranteeing that memory is always accessed with the most up to date information of its structure, its type. C++ unfortunately does not provide such guarantees. While there is appetite for different languages than C++ with stronger memory safety guarantees, large codebases such as Chromium will use C++ for the foreseeable future.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;span style="font-family: arial;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;span style="font-family: arial;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;div align="left" dir="ltr" style="margin-left: 0pt;"&gt;&lt;table style="border-collapse: collapse; border: none;"&gt;&lt;colgroup&gt;&lt;/colgroup&gt;&lt;tbody&gt;&lt;tr style="height: 0pt;"&gt;&lt;td style="background-color: #fafafa; border-bottom: solid #e0e0e0 1pt; border-color: rgb(224, 224, 224); border-left: solid #e0e0e0 1pt; border-right: solid #e0e0e0 1pt; border-style: solid; border-top: solid #e0e0e0 1pt; border-width: 1pt; overflow-wrap: break-word; overflow: hidden; padding: 5pt; vertical-align: top;"&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: arial;"&gt;&lt;span style="background-color: transparent; color: #9c27b0; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;auto&lt;/span&gt;&lt;span style="background-color: transparent; color: #616161; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;*&lt;/span&gt;&lt;span style="background-color: transparent; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt; foo &lt;/span&gt;&lt;span style="background-color: transparent; color: #616161; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;=&lt;/span&gt;&lt;span style="background-color: transparent; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt; &lt;/span&gt;&lt;span style="background-color: transparent; color: #9c27b0; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;new&lt;/span&gt;&lt;span style="background-color: transparent; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt; &lt;/span&gt;&lt;span style="background-color: transparent; color: #3367d6; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Foo&lt;/span&gt;&lt;span style="background-color: transparent; color: #616161; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;();&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: arial;"&gt;&lt;span style="background-color: transparent; color: #9c27b0; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;delete&lt;/span&gt;&lt;span style="background-color: transparent; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt; foo&lt;/span&gt;&lt;span style="background-color: transparent; color: #616161; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: transparent; color: #455a64; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;span style="font-family: arial;"&gt;// The memory location pointed to by foo is not representing&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: transparent; color: #455a64; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;span style="font-family: arial;"&gt;// a Foo object anymore, as the object has been deleted (freed).&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: arial;"&gt;&lt;span style="background-color: transparent; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;foo&lt;/span&gt;&lt;span style="background-color: transparent; color: #616161; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;-&amp;gt;&lt;/span&gt;&lt;span style="background-color: transparent; color: #3367d6; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Process&lt;/span&gt;&lt;span style="background-color: transparent; color: #616161; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;();&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;span style="font-family: arial;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;span style="font-family: arial;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: arial;"&gt;&lt;span style="font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;In the example above, &lt;/span&gt;&lt;span style="color: #0d904f; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;foo&lt;/span&gt;&lt;span style="font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt; is used after its memory has been returned to the underlying system. The out-of-date pointer is called a &lt;/span&gt;&lt;a href="https://en.wikipedia.org/wiki/Dangling_pointer" style="text-decoration-line: none;"&gt;&lt;span style="color: #1155cc; font-variant-east-asian: normal; font-variant-numeric: normal; text-decoration-line: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;"&gt;dangling pointer&lt;/span&gt;&lt;/a&gt;&lt;span style="font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt; and any access through it results in a use-after-free (UAF) access. In the best case such errors result in well-defined crashes, in the worst case they cause subtle breakage that can be exploited by malicious actors.&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;span style="font-family: arial;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;span style="font-family: arial;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: arial;"&gt;&lt;span style="font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;UAFs are often hard to spot in larger codebases where ownership of objects is transferred between various components. The general problem is so widespread that to this date both industry and academia regularly come up with mitigation strategies. The examples are endless: C++ smart pointers of all kinds are used to better define and manage ownership on application level; static analysis in compilers is used to avoid compiling problematic code in the first place; where static analysis fails, dynamic tools such as &lt;/span&gt;&lt;a href="https://github.com/google/sanitizers" style="text-decoration-line: none;"&gt;&lt;span style="color: #1155cc; font-variant-east-asian: normal; font-variant-numeric: normal; text-decoration-line: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;"&gt;C++ sanitizers&lt;/span&gt;&lt;/a&gt;&lt;span style="font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt; can intercept accesses and catch problems on specific executions.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;span style="font-family: arial;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;span style="font-family: arial;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: arial;"&gt;&lt;span style="font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Chrome’s use of C++ is sadly no different here and the majority of &lt;/span&gt;&lt;a href="https://www.chromium.org/Home/chromium-security/memory-safety/" style="text-decoration-line: none;"&gt;&lt;span style="color: #1155cc; font-variant-east-asian: normal; font-variant-numeric: normal; text-decoration-line: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;"&gt;high-severity security bugs are UAF issues&lt;/span&gt;&lt;/a&gt;&lt;span style="font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;. In order to catch issues before they reach production, all of the aforementioned techniques are used. In addition to regular tests, fuzzers ensure that there’s always new input to work with for dynamic tools. Chrome even goes further and employs a C++ garbage collector called &lt;/span&gt;&lt;a href="https://v8.dev/blog/oilpan-library" style="text-decoration-line: none;"&gt;&lt;span style="color: #1155cc; font-variant-east-asian: normal; font-variant-numeric: normal; text-decoration-line: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;"&gt;Oilpan&lt;/span&gt;&lt;/a&gt;&lt;span style="font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt; which deviates from regular C++ semantics but provides temporal memory safety where used. Where such deviation is unreasonable, a new kind of smart pointer called &lt;/span&gt;&lt;a href="https://security.googleblog.com/2021/09/an-update-on-memory-safety-in-chrome.html" style="text-decoration-line: none;"&gt;&lt;span style="color: #1155cc; font-variant-east-asian: normal; font-variant-numeric: normal; text-decoration-line: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;"&gt;MiraclePtr&lt;/span&gt;&lt;/a&gt;&lt;span style="font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt; was introduced recently to deterministically crash on accesses to dangling pointers when used. Oilpan, MiraclePtr, and smart-pointer-based solutions require significant adoptions of the application code.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;span style="font-family: arial;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;span style="font-family: arial;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span id="docs-internal-guid-015887cf-7fff-a03f-886f-5af85eca1cac"&gt;&lt;span style="font-family: Arial; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Over the last decade, another approach has seen some success: memory quarantine. The basic idea is to put explicitly freed memory into quarantine and only make it available when a certain safety condition is reached. &lt;/span&gt;&lt;span style="background-color: white;"&gt;&lt;span style="font-family: Arial; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Microsoft has shipped versions of this mitigation in its browsers:&amp;nbsp; &lt;/span&gt;&lt;a href="https://www.trendmicro.com/en_us/research/14/g/mitigating-uaf-exploits-with-delay-free-for-internet-explorer.html" style="text-decoration-line: none;"&gt;&lt;span style="color: #1155cc; font-family: Arial; font-variant-east-asian: normal; font-variant-numeric: normal; text-decoration-line: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;"&gt;MemoryProtector&lt;/span&gt;&lt;/a&gt;&lt;span style="font-family: Arial; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt; in Internet Explorer in 2014 and its successor &lt;/span&gt;&lt;a href="https://securityintelligence.com/memgc-use-after-free-exploit-mitigation-in-edge-and-ie-on-windows-10/" style="text-decoration-line: none;"&gt;&lt;span style="color: #1155cc; font-family: Arial; font-variant-east-asian: normal; font-variant-numeric: normal; text-decoration-line: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;"&gt;MemGC&lt;/span&gt;&lt;/a&gt;&lt;span style="font-family: Arial; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt; in (pre-Chromium) Edge in 2015&lt;/span&gt;&lt;/span&gt;&lt;span style="font-family: Arial; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;span style="background-color: white;"&gt;.&lt;/span&gt; In the &lt;/span&gt;&lt;a href="https://a13xp0p0v.github.io/2020/11/30/slab-quarantine.html" style="text-decoration-line: none;"&gt;&lt;span style="color: #1155cc; font-family: Arial; font-variant-east-asian: normal; font-variant-numeric: normal; text-decoration-line: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;"&gt;Linux kernel&lt;/span&gt;&lt;/a&gt;&lt;span style="font-family: Arial; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt; a probabilistic approach was used where memory was eventually just recycled. And this approach has seen attention in academia in recent years with the &lt;/span&gt;&lt;a href="https://www.cst.cam.ac.uk/blog/tmj32/addressing-temporal-memory-safety" style="text-decoration-line: none;"&gt;&lt;span style="color: #1155cc; font-family: Arial; font-variant-east-asian: normal; font-variant-numeric: normal; text-decoration-line: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;"&gt;MarkUs paper&lt;/span&gt;&lt;/a&gt;&lt;span style="font-family: Arial; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;. The rest of this article summarizes our journey of experimenting with quarantines and heap scanning in Chrome.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;span style="font-family: arial;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;span style="font-family: arial;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;span style="font-family: arial;"&gt;(At this point, one may ask where pointer authentication fits into this picture – keep on reading!)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;h2 style="line-height: 1.38; margin-bottom: 6pt; margin-top: 20pt; text-align: left;"&gt;&lt;span style="font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;span style="font-family: arial; font-size: medium;"&gt;Quarantining and Heap Scanning, the Basics&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: arial;"&gt;&lt;span style="font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;The main idea behind assuring temporal safety with quarantining and heap scanning is to avoid reusing memory until it has been proven that there are no more (dangling) pointers referring to it. To avoid changing C++ user code or its semantics, the memory allocator providing &lt;/span&gt;&lt;span style="color: #0d904f; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;new&lt;/span&gt;&lt;span style="font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt; and &lt;/span&gt;&lt;span style="color: #0d904f; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;delete&lt;/span&gt;&lt;span style="font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt; is intercepted.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;/p&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiM6dIX-FTzCUjzGfiwkGYb0oh2rIqvkAlfx19Qai1_QglzTfQ6WwlBSWW7URKt8Q-51kcYRilKIn3Y135QhAI4GPyWIZDK1_oamMgrUgbbePOPBmOLlGsUXYTqedREIHMcAe6XCQ_xPDMdHLr60QS7NNlL03Htanoj4Y-Kp68OYwL7U99oFOsNtZER9g/s689/Screen%20Shot%202022-05-25%20at%204.04.55%20PM.png" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;span style="font-family: arial;"&gt;&lt;img border="0" data-original-height="283" data-original-width="689" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiM6dIX-FTzCUjzGfiwkGYb0oh2rIqvkAlfx19Qai1_QglzTfQ6WwlBSWW7URKt8Q-51kcYRilKIn3Y135QhAI4GPyWIZDK1_oamMgrUgbbePOPBmOLlGsUXYTqedREIHMcAe6XCQ_xPDMdHLr60QS7NNlL03Htanoj4Y-Kp68OYwL7U99oFOsNtZER9g/s16000/Screen%20Shot%202022-05-25%20at%204.04.55%20PM.png" /&gt;&lt;/span&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: arial;"&gt;&lt;span style="background-color: transparent; color: black; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"&gt;Upon invoking &lt;/span&gt;&lt;span style="background-color: transparent; color: #0d904f; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"&gt;delete&lt;/span&gt;&lt;span style="background-color: transparent; color: black; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"&gt;, the memory is actually put in a quarantine, where it is unavailable for being reused for subsequent &lt;/span&gt;&lt;span style="background-color: transparent; color: #0d904f; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"&gt;new&lt;/span&gt;&lt;span style="background-color: transparent; color: black; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"&gt; calls by the application. At some point a heap scan is triggered which scans the whole heap, much like a garbage collector, to find references to quarantined memory blocks. Blocks that have no incoming references from the regular application memory are transferred back to the allocator where they can be reused for subsequent allocations.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;b id="docs-internal-guid-35244d21-7fff-f94a-673f-e90c17fb662f" style="font-weight: normal;"&gt;&lt;span style="font-family: arial;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;b style="font-weight: normal;"&gt;&lt;span style="font-family: arial;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: transparent; color: black; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;span style="font-family: arial;"&gt;There are various hardening options which come with a performance cost:&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul style="margin-bottom: 0px; margin-top: 0px; padding-inline-start: 48px;"&gt;&lt;li aria-level="1" dir="ltr" style="background-color: transparent; color: black; font-style: normal; font-variant: normal; font-weight: 400; list-style-type: disc; text-decoration: none; vertical-align: baseline; white-space: pre;"&gt;&lt;p dir="ltr" role="presentation" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: transparent; color: black; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;span style="font-family: arial;"&gt;Overwrite the quarantined memory with special values (e.g. zero);&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li aria-level="1" dir="ltr" style="background-color: transparent; color: black; font-style: normal; font-variant: normal; font-weight: 400; list-style-type: disc; text-decoration: none; vertical-align: baseline; white-space: pre;"&gt;&lt;p dir="ltr" role="presentation" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: transparent; color: black; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;span style="font-family: arial;"&gt;Stop all application threads when the scan is running or scan the heap concurrently;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li aria-level="1" dir="ltr" style="background-color: transparent; color: black; font-style: normal; font-variant: normal; font-weight: 400; list-style-type: disc; text-decoration: none; vertical-align: baseline; white-space: pre;"&gt;&lt;p dir="ltr" role="presentation" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: transparent; color: black; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;span style="font-family: arial;"&gt;Intercept memory writes (e.g. by page protection) to catch pointer updates;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li aria-level="1" dir="ltr" style="background-color: transparent; color: black; font-style: normal; font-variant: normal; font-weight: 400; list-style-type: disc; text-decoration: none; vertical-align: baseline; white-space: pre;"&gt;&lt;p dir="ltr" role="presentation" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: transparent; color: black; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;span style="font-family: arial;"&gt;Scan memory word by word for possible pointers (conservative handling) or provide descriptors for objects (precise handling);&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li aria-level="1" dir="ltr" style="background-color: transparent; color: black; font-style: normal; font-variant: normal; font-weight: 400; list-style-type: disc; text-decoration: none; vertical-align: baseline; white-space: pre;"&gt;&lt;p dir="ltr" role="presentation" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: transparent; color: black; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;span style="font-family: arial;"&gt;Segregation of application memory in safe and unsafe partitions to opt-out certain objects which are either performance sensitive or can be statically proven as being safe to skip;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li aria-level="1" dir="ltr" style="background-color: transparent; color: black; font-style: normal; font-variant: normal; font-weight: 400; list-style-type: disc; text-decoration: none; vertical-align: baseline; white-space: pre;"&gt;&lt;p dir="ltr" role="presentation" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: transparent; color: black; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;span style="font-family: arial;"&gt;Scan the execution stack in addition to just scanning heap memory;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;b style="font-weight: normal;"&gt;&lt;span style="font-family: arial;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;b style="font-weight: normal;"&gt;&lt;span style="font-family: arial;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: arial;"&gt;&lt;span style="background-color: transparent; color: black; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"&gt;We call the collection of different versions of these algorithms &lt;/span&gt;&lt;span style="background-color: transparent; color: black; font-style: italic; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"&gt;StarScan&lt;/span&gt;&lt;span style="background-color: transparent; color: black; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"&gt; [stɑː skæn], or &lt;/span&gt;&lt;span style="background-color: transparent; color: black; font-style: italic; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"&gt;*Scan&lt;/span&gt;&lt;span style="background-color: transparent; color: black; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"&gt; for short.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;h3 style="line-height: 1.38; margin-bottom: 6pt; margin-top: 20pt; text-align: left;"&gt;&lt;span style="background-color: transparent; color: black; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;span style="font-family: arial; font-size: medium;"&gt;Reality Check&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: arial;"&gt;&lt;span style="background-color: transparent; color: black; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"&gt;We apply *Scan to the unmanaged parts of the renderer process and use &lt;/span&gt;&lt;a href="https://browserbench.org/Speedometer2.0/" style="text-decoration: none;"&gt;&lt;span style="background-color: transparent; color: #1155cc; font-style: normal; font-variant: normal; font-weight: 400; text-decoration-skip-ink: none; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;"&gt;Speedometer2&lt;/span&gt;&lt;/a&gt;&lt;span style="background-color: transparent; color: black; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"&gt; to evaluate the performance impact.&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: transparent; color: black; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;span style="font-family: arial;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: arial;"&gt;&lt;br /&gt;&lt;span style="font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;We have experimented with different versions of *Scan. To minimize performance overhead as much as possible though, we evaluate a configuration that uses a separate thread to scan the heap and avoids clearing of quarantined memory eagerly on &lt;/span&gt;&lt;span style="color: #0d904f; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;delete&lt;/span&gt;&lt;span style="font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt; but rather clears quarantined memory when running *Scan. We opt in all memory allocated with &lt;/span&gt;&lt;span style="color: #0d904f; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;new&lt;/span&gt;&lt;span style="font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt; and don’t discriminate between allocation sites and types for simplicity in the first implementation.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;span style="font-family: arial;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;b style="font-weight: normal;"&gt;&lt;/b&gt;&lt;/p&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;b style="font-weight: normal;"&gt;&lt;a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgwVWpuwqkZQyvHdyF4S9RmfuJGCIoIfkp1-8aYa8lX-PnltLxAtNx5oY4dB99wLDM-yhOl4U9eyCYQCJUHHtnhmwjKXM2ySLFJSVmFIkdtDg72-43ojxHXw0tNK6PqX6IGFLrbacDRQ8d5Av0Skj3neGblIFsfURKm3r_bVD38VYmos4dkLmPOJz5fDA/s663/Screen%20Shot%202022-05-25%20at%204.04.38%20PM.png" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;span style="font-family: arial;"&gt;&lt;img border="0" data-original-height="332" data-original-width="663" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgwVWpuwqkZQyvHdyF4S9RmfuJGCIoIfkp1-8aYa8lX-PnltLxAtNx5oY4dB99wLDM-yhOl4U9eyCYQCJUHHtnhmwjKXM2ySLFJSVmFIkdtDg72-43ojxHXw0tNK6PqX6IGFLrbacDRQ8d5Av0Skj3neGblIFsfURKm3r_bVD38VYmos4dkLmPOJz5fDA/s16000/Screen%20Shot%202022-05-25%20at%204.04.38%20PM.png" /&gt;&lt;/span&gt;&lt;/a&gt;&lt;/b&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: transparent; color: black; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;span style="font-family: arial;"&gt;Note that the proposed version of *Scan is not complete. Concretely, a malicious actor may exploit a race condition with the scanning thread by moving a dangling pointer from an unscanned to an already scanned memory region. Fixing this race condition requires keeping track of writes into blocks of already scanned memory, by e.g. using memory protection mechanisms to intercept those accesses, or stopping all application threads in safepoints from mutating the object graph altogether. Either way, solving this issue comes at a performance cost and exhibits an interesting performance and security trade-off. Note that this kind of attack is not generic and does not work for all UAF. Problems such as depicted in the introduction would not be prone to such attacks as the dangling pointer is not copied around.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;b id="docs-internal-guid-29824b38-7fff-ff42-0cbe-fd81c8c1fa02" style="font-weight: normal;"&gt;&lt;span style="font-family: arial;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;b style="font-weight: normal;"&gt;&lt;span style="font-family: arial;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: transparent; color: black; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;span style="font-family: arial;"&gt;Since the security benefits really depend on the granularity of such safepoints and we want to experiment with the fastest possible version, we disabled safepoints altogether.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;b style="font-weight: normal;"&gt;&lt;span style="font-family: arial;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;b style="font-weight: normal;"&gt;&lt;span style="font-family: arial;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: transparent; color: black; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;span style="font-family: arial;"&gt;Running our basic version on Speedometer2 regresses the total score by 8%. Bummer…&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;b style="font-weight: normal;"&gt;&lt;span style="font-family: arial;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;b style="font-weight: normal;"&gt;&lt;span style="font-family: arial;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: transparent; color: black; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;span style="font-family: arial;"&gt;Where does all this overhead come from? Unsurprisingly, heap scanning is memory bound and quite expensive as the entire user memory must be walked and examined for references by the scanning thread.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;b style="font-weight: normal;"&gt;&lt;span style="font-family: arial;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;b style="font-weight: normal;"&gt;&lt;span style="font-family: arial;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: transparent; color: black; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;span style="font-family: arial;"&gt;To reduce the regression we implemented various optimizations that improve the raw scanning speed. Naturally, the fastest way to scan memory is to not scan it at all and so we partitioned the heap into two classes: memory that can contain pointers and memory that we can statically prove to not contain pointers, e.g. strings. We avoid scanning memory that cannot contain any pointers. Note that such memory is still part of the quarantine, it is just not scanned.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;b style="font-weight: normal;"&gt;&lt;span style="font-family: arial;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;b style="font-weight: normal;"&gt;&lt;span style="font-family: arial;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: transparent; color: black; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;span style="font-family: arial;"&gt;We extended this mechanism to also cover allocations that serve as backing memory for other allocators, e.g., zone memory that is managed by V8 for the optimizing JavaScript compiler. Such zones are always discarded at once (c.f. region-based memory management) and temporal safety is established through other means in V8.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;b style="font-weight: normal;"&gt;&lt;span style="font-family: arial;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;b style="font-weight: normal;"&gt;&lt;span style="font-family: arial;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: transparent; color: black; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;span style="font-family: arial;"&gt;On top, we applied several micro optimizations to speed up and eliminate computations: we use helper tables for pointer filtering; rely on SIMD for the memory-bound scanning loop; and minimize the number of fetches and lock-prefixed instructions.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;b style="font-weight: normal;"&gt;&lt;span style="font-family: arial;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;b style="font-weight: normal;"&gt;&lt;span style="font-family: arial;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: arial;"&gt;&lt;span style="background-color: transparent; color: black; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"&gt;We also improve upon the initial scheduling algorithm that just starts a heap scan when reaching a certain limit by adjusting how much time we spent in scanning compared to actually executing the application code (c.f. mutator utilization in &lt;/span&gt;&lt;a href="https://dl.acm.org/doi/10.1145/604131.604155" style="text-decoration: none;"&gt;&lt;span style="background-color: transparent; color: #1155cc; font-style: normal; font-variant: normal; font-weight: 400; text-decoration-skip-ink: none; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;"&gt;garbage collection literature&lt;/span&gt;&lt;/a&gt;&lt;span style="background-color: transparent; color: black; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"&gt;).&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;b style="font-weight: normal;"&gt;&lt;span style="font-family: arial;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;b style="font-weight: normal;"&gt;&lt;span style="font-family: arial;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: transparent; color: black; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;span style="font-family: arial;"&gt;In the end, the algorithm is still memory bound and scanning remains a noticeably expensive procedure. The optimizations helped to reduce the Speedometer2 regression from 8% down to 2%.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;b style="font-weight: normal;"&gt;&lt;span style="font-family: arial;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;b style="font-weight: normal;"&gt;&lt;span style="font-family: arial;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: arial;"&gt;&lt;span style="background-color: transparent; color: black; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"&gt;While we improved raw scanning time, the fact that memory sits in a quarantine increases the overall working set of a process. To further quantify this overhead, we use a selected set of &lt;/span&gt;&lt;a href="https://chromium.googlesource.com/catapult/" style="text-decoration: none;"&gt;&lt;span style="background-color: transparent; color: #1155cc; font-style: normal; font-variant: normal; font-weight: 400; text-decoration-skip-ink: none; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;"&gt;Chrome’s real-world browsing benchmarks&lt;/span&gt;&lt;/a&gt;&lt;span style="background-color: transparent; color: black; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"&gt; to measure memory consumption. *Scan in the renderer process regresses memory consumption by about 12%. It’s this increase of the working set that leads to more memory being paged in which is noticeable on application fast paths.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: transparent; color: black; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;span style="font-family: arial;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;h3 style="line-height: 1.38; margin-bottom: 6pt; margin-top: 20pt; text-align: left;"&gt;&lt;span style="background-color: transparent; color: black; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;span style="font-family: arial; font-size: medium;"&gt;Hardware Memory Tagging to the Rescue&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: transparent; color: black; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;span style="font-family: arial;"&gt;MTE (Memory Tagging Extension) is a new extension on the ARM v8.5A architecture that helps with detecting errors in software memory use. These errors can be spatial errors (e.g. out-of-bounds accesses) or temporal errors (use-after-free). The extension works as follows. Every 16 bytes of memory are assigned a 4-bit tag. Pointers are also assigned a 4-bit tag. The allocator is responsible for returning a pointer with the same tag as the allocated memory. The load and store instructions verify that the pointer and memory tags match. In case the tags of the memory location and the pointer do not match a hardware exception is raised.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;b style="font-weight: normal;"&gt;&lt;span style="font-family: arial;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;b style="font-weight: normal;"&gt;&lt;span style="font-family: arial;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: transparent; color: black; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;span style="font-family: arial;"&gt;MTE doesn't offer a deterministic protection against use-after-free. Since the number of tag bits is finite there is a chance that the tag of the memory and the pointer match due to overflow. With 4 bits, only 16 reallocations are enough to have the tags match. A malicious actor may exploit the tag bit overflow to get a use-after-free by just waiting until the tag of a dangling pointer matches (again) the memory it is pointing to.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;b style="font-weight: normal;"&gt;&lt;span style="font-family: arial;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;b style="font-weight: normal;"&gt;&lt;span style="font-family: arial;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: arial;"&gt;&lt;span style="background-color: transparent; color: black; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"&gt;*Scan can be used to fix this problematic corner case. On each &lt;/span&gt;&lt;span style="background-color: transparent; color: #0d904f; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"&gt;delete&lt;/span&gt;&lt;span style="background-color: transparent; color: black; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"&gt; call the tag for the underlying memory block gets incremented by the MTE mechanism. Most of the time the block will be available for reallocation as the tag can be incremented within the 4-bit range. Stale pointers would refer to the old tag and thus reliably crash on dereference. Upon overflowing the tag, the object is then put into quarantine and processed by *Scan. Once the scan verifies that there are no more dangling pointers to this block of memory, it is returned back to the allocator. This reduces the number of scans and their accompanying cost by ~16x.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: arial;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: arial;"&gt;&lt;br /&gt;&lt;span style="font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;The following picture depicts this mechanism. The pointer to &lt;/span&gt;&lt;span style="color: #0d904f; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;foo&lt;/span&gt;&lt;span style="font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt; initially has a tag of &lt;/span&gt;&lt;span style="color: #0d904f; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;0x0E&lt;/span&gt;&lt;span style="font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt; which allows it to be incremented once again for allocating &lt;/span&gt;&lt;span style="color: #0d904f; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;bar&lt;/span&gt;&lt;span style="font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;. Upon invoking &lt;/span&gt;&lt;span style="color: #0d904f; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;delete&lt;/span&gt;&lt;span style="font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt; for &lt;/span&gt;&lt;span style="color: #0d904f; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;bar&lt;/span&gt;&lt;span style="font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt; the tag overflows and the memory is actually put into quarantine of *Scan.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;b style="font-weight: normal;"&gt;&lt;/b&gt;&lt;/p&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;b style="font-weight: normal;"&gt;&lt;a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgdWvx686y2bmL9QcET3V-H0z0m3OKSL2gdgWNRTHaOSwCOQZYn5GRbGGFD1p2XpIjnDzFdkXTzZQNlkWZKG32rBPuJC7geGm78zl9gcNgqNSKbdTEPPZn_0dHghu72R_RvIXO-TtwanTncw-zWD6Xzrqu70igMWk4pKIxYENbv7J7IAes8yWKIxA1DSA/s718/Screen%20Shot%202022-05-25%20at%204.10.32%20PM.png" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;span style="font-family: arial;"&gt;&lt;img border="0" data-original-height="403" data-original-width="718" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgdWvx686y2bmL9QcET3V-H0z0m3OKSL2gdgWNRTHaOSwCOQZYn5GRbGGFD1p2XpIjnDzFdkXTzZQNlkWZKG32rBPuJC7geGm78zl9gcNgqNSKbdTEPPZn_0dHghu72R_RvIXO-TtwanTncw-zWD6Xzrqu70igMWk4pKIxYENbv7J7IAes8yWKIxA1DSA/s16000/Screen%20Shot%202022-05-25%20at%204.10.32%20PM.png" /&gt;&lt;/span&gt;&lt;/a&gt;&lt;/b&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: transparent; color: black; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;span style="font-family: arial;"&gt;We got our hands on some actual hardware supporting MTE and redid the experiments in the renderer process. The results are promising as the regression on Speedometer was within noise and we only regressed memory footprint by around 1% on Chrome’s real-world browsing stories.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;b id="docs-internal-guid-ab9a89d3-7fff-51d9-aedf-1af2c0fdadeb" style="font-weight: normal;"&gt;&lt;span style="font-family: arial;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;b style="font-weight: normal;"&gt;&lt;span style="font-family: arial;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: arial;"&gt;&lt;span style="background-color: transparent; color: black; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"&gt;Is this some actual &lt;/span&gt;&lt;a href="https://en.wikipedia.org/wiki/No_free_lunch_theorem" style="text-decoration: none;"&gt;&lt;span style="background-color: transparent; color: #1155cc; font-style: normal; font-variant: normal; font-weight: 400; text-decoration-skip-ink: none; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;"&gt;free lunch&lt;/span&gt;&lt;/a&gt;&lt;span style="background-color: transparent; color: black; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"&gt;? Turns out that MTE comes with some cost which has already been paid for. Specifically, PartitionAlloc, which is Chrome’s underlying allocator, already performs the tag management operations for all MTE-enabled devices by default. Also, for security reasons, memory should really be zeroed eagerly. To quantify these costs, we ran experiments on an early hardware prototype that supports MTE in several configurations:&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;ol style="margin-bottom: 0px; margin-top: 0px; padding-inline-start: 48px;"&gt;&lt;li aria-level="1" dir="ltr" style="background-color: transparent; color: black; font-style: normal; font-variant: normal; font-weight: 400; list-style-type: upper-alpha; text-decoration: none; vertical-align: baseline; white-space: pre;"&gt;&lt;p dir="ltr" role="presentation" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: transparent; color: black; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;span style="font-family: arial;"&gt;MTE disabled and without zeroing memory;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li aria-level="1" dir="ltr" style="background-color: transparent; color: black; font-style: normal; font-variant: normal; font-weight: 400; list-style-type: upper-alpha; text-decoration: none; vertical-align: baseline; white-space: pre;"&gt;&lt;p dir="ltr" role="presentation" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: transparent; color: black; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;span style="font-family: arial;"&gt;MTE disabled but with zeroing memory;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li aria-level="1" dir="ltr" style="background-color: transparent; color: black; font-style: normal; font-variant: normal; font-weight: 400; list-style-type: upper-alpha; text-decoration: none; vertical-align: baseline; white-space: pre;"&gt;&lt;p dir="ltr" role="presentation" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: transparent; color: black; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;span style="font-family: arial;"&gt;MTE enabled without *Scan;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li aria-level="1" dir="ltr" style="background-color: transparent; color: black; font-style: normal; font-variant: normal; font-weight: 400; list-style-type: upper-alpha; text-decoration: none; vertical-align: baseline; white-space: pre;"&gt;&lt;p dir="ltr" role="presentation" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: transparent; color: black; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;span style="font-family: arial;"&gt;MTE enabled with *Scan;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;div&gt;&lt;span style="white-space: pre-wrap;"&gt;&lt;span style="font-family: arial;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="white-space: pre-wrap;"&gt;&lt;span style="font-family: arial;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: transparent; color: black; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;span style="font-family: arial;"&gt;(We are also aware that there’s synchronous and asynchronous MTE which also affects determinism and performance. For the sake of this experiment we kept using the asynchronous mode.)&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;/p&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEh2rv10lp0-NIMpgAbOrHwLfg0shW7xFwexpun9i6SiUAUifF9otfukKHTiF2MrKHdzLr8yaJO6KLf7G2Ry_q7Jz5gQpVs-JONo1VVJAC-3ijAEUl3wMxA5EXErgLo1ktsL2HuWDyzjw75GueO4sjhH7EpbVpkauF40fnw5ZS9ar_20TU3NG4yfI0eVCw/s588/Screen%20Shot%202022-05-25%20at%204.11.53%20PM.png" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;span style="font-family: arial;"&gt;&lt;img border="0" data-original-height="362" data-original-width="588" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEh2rv10lp0-NIMpgAbOrHwLfg0shW7xFwexpun9i6SiUAUifF9otfukKHTiF2MrKHdzLr8yaJO6KLf7G2Ry_q7Jz5gQpVs-JONo1VVJAC-3ijAEUl3wMxA5EXErgLo1ktsL2HuWDyzjw75GueO4sjhH7EpbVpkauF40fnw5ZS9ar_20TU3NG4yfI0eVCw/s16000/Screen%20Shot%202022-05-25%20at%204.11.53%20PM.png" /&gt;&lt;/span&gt;&lt;/a&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: transparent; color: black; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;span style="font-family: arial;"&gt;The results show that MTE and memory zeroing come with some cost which is around 2% on Speedometer2. Note that neither PartitionAlloc, nor hardware has been optimized for these scenarios yet. The experiment also shows that adding *Scan on top of MTE comes without measurable cost.&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: transparent; color: black; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;span style="font-family: arial;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;h3 style="line-height: 1.38; margin-bottom: 6pt; margin-top: 20pt; text-align: left;"&gt;&lt;span style="background-color: transparent; color: black; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;span style="font-family: arial; font-size: medium;"&gt;Conclusions&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: transparent; color: black; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;b&gt;&lt;span style="font-family: arial;"&gt;&lt;span id="docs-internal-guid-b5590543-7fff-7a13-cb64-60f5184d2884"&gt;&lt;/span&gt;&lt;/span&gt;&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: transparent; color: black; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;span style="font-family: arial;"&gt;C++ allows for writing high-performance applications but this comes at a price, security. Hardware memory tagging may fix some security pitfalls of C++, while still allowing high performance. We are looking forward to see a more broad adoption of hardware memory tagging in the future and suggest using *Scan on top of hardware memory tagging to fix temporary memory safety for C++. Both the used MTE hardware and the implementation of *Scan are prototypes and we expect that there is still room for performance optimizations.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;br /&gt;&lt;/p&gt;&lt;/span&gt;&lt;/div&gt;</content><link href="http://security.googleblog.com/feeds/7982685643647482755/comments/default" rel="replies" title="Post Comments" type="application/atom+xml"/><link href="http://www.blogger.com/comment.g?blogID=1176949257541686127&amp;postID=7982685643647482755&amp;isPopup=true" rel="replies" title="0 Comments" type="text/html"/><link href="http://www.blogger.com/feeds/1176949257541686127/posts/default/7982685643647482755" rel="edit" type="application/atom+xml"/><link href="http://www.blogger.com/feeds/1176949257541686127/posts/default/7982685643647482755" rel="self" type="application/atom+xml"/><link href="http://security.googleblog.com/2022/05/retrofitting-temporal-memory-safety-on-c.html" rel="alternate" title="Retrofitting Temporal Memory Safety on C++" type="text/html"/><author><name>Google</name><uri>http://www.blogger.com/profile/11822708545141062574</uri><email>noreply@blogger.com</email><gd:image height="16" rel="http://schemas.google.com/g/2005#thumbnail" src="https://img1.blogblog.com/img/b16-rounded.gif" width="16"/></author><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" height="72" url="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiM6dIX-FTzCUjzGfiwkGYb0oh2rIqvkAlfx19Qai1_QglzTfQ6WwlBSWW7URKt8Q-51kcYRilKIn3Y135QhAI4GPyWIZDK1_oamMgrUgbbePOPBmOLlGsUXYTqedREIHMcAe6XCQ_xPDMdHLr60QS7NNlL03Htanoj4Y-Kp68OYwL7U99oFOsNtZER9g/s72-c/Screen%20Shot%202022-05-25%20at%204.04.55%20PM.png" width="72"/><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1176949257541686127.post-4502032642401357362</id><published>2022-05-18T09:03:00.000-04:00</published><updated>2022-05-18T09:03:33.408-04:00</updated><title type="text"> Privileged pod escalations in Kubernetes and GKE</title><content type="html">&lt;span class="byline-author"&gt;Posted by GKE and Anthos Platform Security Teams&amp;nbsp;&lt;/span&gt;&lt;div&gt;&lt;span class="byline-author"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;At the KubeCon EU 2022 conference in Valencia, security researchers from Palo Alto Networks presented research findings on “trampoline pods”—pods with an elevated set of privileges required to do their job, but that could conceivably be used as a jumping off point to gain escalated privileges.&lt;br /&gt;&lt;br /&gt;The research mentions GKE, including how developers should look at the privileged pod problem today, what the GKE team is doing to minimize the use of privileged pods, and actions GKE users can take to protect their clusters.&lt;div&gt;&lt;br /&gt;&lt;span style="font-size: medium;"&gt;&lt;b&gt;Privileged pods within the context of GKE security&lt;br /&gt;&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;While privileged pods can pose a security issue, it’s important to look at them within the overall context of GKE security. To use a privileged pod as a “trampoline” in GKE, there is a major prerequisite – the attacker has to first execute a successful application compromise and container breakout attack. &lt;br /&gt;&lt;br /&gt;Because the use of privileged pods in an attack requires a first step such as a container breakout to be effective, let’s look at two areas:&lt;br /&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;features of GKE you can use to reduce the likelihood of a container breakout&lt;/li&gt;&lt;li&gt;steps the GKE team is taking to minimize the use of privileged pods and the privileges needed in them.&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-size: medium;"&gt;&lt;b&gt;Reducing container breakouts&lt;br /&gt;&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;There are a number of features in GKE along with some best practices that you can use to reduce the likelihood of a container breakout:&lt;br /&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Use &lt;a href="https://cloud.google.com/kubernetes-engine/docs/concepts/sandbox-pods"&gt;GKE Sandbox&lt;/a&gt; to strengthen the container security boundary. Over the last few months, GKE Sandbox has protected containers running it against several newly discovered &lt;a href="https://cloud.google.com/anthos/clusters/docs/security-bulletins"&gt;Linux kernel breakout CVEs&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;Adopt &lt;a href="https://cloud.google.com/kubernetes-engine/docs/concepts/autopilot-overview"&gt;GKE Autopilot&lt;/a&gt; for new clusters. Autopilot clusters have default policies that prevent host access through mechanisms like host path volumes and host network. The container runtime default seccomp profile is also &lt;a href="https://cloud.google.com/kubernetes-engine/docs/concepts/autopilot-overview#security-limitations"&gt;enabled by default on Autopilot&lt;/a&gt; which has prevented &lt;a href="https://cloud.google.com/anthos/clusters/docs/security-bulletins#gcp-2022-006"&gt;several&lt;/a&gt; &lt;a href="https://cloud.google.com/anthos/clusters/docs/security-bulletins#gcp-2022-002"&gt;breakouts&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;Subscribe to &lt;a href="https://cloud.google.com/kubernetes-engine/docs/concepts/release-channels"&gt;GKE Release Channels&lt;/a&gt; and use autoupgrade to keep nodes patched automatically against kernel vulnerabilities.&lt;/li&gt;&lt;li&gt;Run &lt;a href="https://cloud.google.com/kubernetes-engine/docs/concepts/node-images#cos"&gt;Google’s Container Optimized OS&lt;/a&gt;, the minimal and &lt;a href="https://cloud.google.com/container-optimized-os/docs/concepts/security"&gt;hardened&lt;/a&gt; container optimized OS that makes much of the disk read-only.&lt;/li&gt;&lt;li&gt;Incorporate &lt;a href="https://cloud.google.com/binary-authorization"&gt;binary authorization&lt;/a&gt; into your SDLC to require that containers admitted into the cluster are from trusted build systems and up-to-date on patching.&lt;/li&gt;&lt;li&gt;Use &lt;a href="https://cloud.google.com/security-command-center/docs/concepts-container-threat-detection-overview"&gt;Secure Command Center’s Container Threat Detection&lt;/a&gt; or supported third-party tools to detect the most common runtime attacks.&lt;/li&gt;&lt;/ul&gt;More information can be found in the &lt;a href="https://cloud.google.com/kubernetes-engine/docs/how-to/hardening-your-cluster"&gt;GKE Hardening Guide&lt;/a&gt;.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;span style="font-size: medium;"&gt;&lt;b&gt;How GKE is reducing the use of privileged pods.&lt;br /&gt;&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;While it’s not uncommon for customers to install privileged pods into their clusters, GKE works to minimize the privilege levels held by our system components, especially those that are enabled by default. However, there are limits as to how many privileges can be removed from certain features. For example, Anthos Config Management requires permissions to modify most Kubernetes objects to be able to create and manage those objects. &lt;br /&gt;&lt;br /&gt;Some other privileges are baked into the system, such as those held by Kubelet. Previously, we worked with the Kubernetes community to build the &lt;a href="https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/#noderestriction"&gt;Node Restriction&lt;/a&gt; and&lt;a href="https://kubernetes.io/docs/reference/access-authn-authz/node/"&gt; Node Authorizer&lt;/a&gt; features to limit Kubelet's access to highly sensitive objects, such as secrets, adding protection against an attacker with access to the Kubelet credentials. &lt;br /&gt;&lt;br /&gt;More recently, we have taken steps to reduce the number of privileged pods across GKE and have added additional documentation on privileges used in system pods as well as information on how to improve pod isolation. Below are the steps we’ve taken: &lt;br /&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;We have added &lt;a href="https://cloud.google.com/kubernetes-engine/docs/how-to/hardening-your-cluster#restrict_self_modify"&gt;an admission controller to GKE Autopilot and GKE Standard (on by default) and GKE/Anthos (opt-in)&lt;/a&gt; that stops attempts to run as a more privileged service account, which blocks a method of escalating privileges using privileged pods.&lt;/li&gt;&lt;li&gt;We created a permission scanning tool that identifies pods that have privileges that could be used for escalation, and we used that tool to perform an audit across GKE and Anthos.&lt;/li&gt;&lt;li&gt;The permission scanning tool is now integrated into our standard code review and testing processes to reduce the risk of introducing privileged pods into the system. As mentioned earlier, some features require privileges to perform their function.&lt;/li&gt;&lt;li&gt;We are using the audit results to reduce permissions available to pods. For example, we removed “update nodes and pods” permissions from anetd in GKE.&lt;/li&gt;&lt;li&gt;Where privileged pods are required for the operation of a feature, we’ve added additional documentation to illustrate that fact.&lt;/li&gt;&lt;li&gt;We added &lt;a href="https://cloud.google.com/kubernetes-engine/docs/how-to/isolate-workloads-dedicated-nodes"&gt;documentation &lt;/a&gt;that outlines how to isolate GKE-managed workloads in dedicated node pools when you’re unable to use GKE Sandbox to reduce the risk of privilege escalation attacks.&lt;/li&gt;&lt;/ol&gt;In addition to the measures above, we recommend users take advantage of tools that can scan RBAC settings to detect overprivileged pods used in their applications. As part of their presentation, the Palo Alto researchers announced an open source tool, called &lt;a href="https://github.com/PaloAltoNetworks/rbac-police"&gt;rbac-police&lt;/a&gt;, that can be used for the task. So, while it only takes a single overprivileged workload to trampoline to the cluster, there are a number of actions you can take to minimize the likelihood of the prerequisite container breakout and the number of privileges used by a pod.&lt;/div&gt;</content><link href="http://security.googleblog.com/feeds/4502032642401357362/comments/default" rel="replies" title="Post Comments" type="application/atom+xml"/><link href="http://www.blogger.com/comment.g?blogID=1176949257541686127&amp;postID=4502032642401357362&amp;isPopup=true" rel="replies" title="0 Comments" type="text/html"/><link href="http://www.blogger.com/feeds/1176949257541686127/posts/default/4502032642401357362" rel="edit" type="application/atom+xml"/><link href="http://www.blogger.com/feeds/1176949257541686127/posts/default/4502032642401357362" rel="self" type="application/atom+xml"/><link href="http://security.googleblog.com/2022/05/privileged-pod-escalations-in.html" rel="alternate" title=" Privileged pod escalations in Kubernetes and GKE" type="text/html"/><author><name>Unknown</name><email>noreply@blogger.com</email><gd:image height="16" rel="http://schemas.google.com/g/2005#thumbnail" src="https://img1.blogblog.com/img/b16-rounded.gif" width="16"/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1176949257541686127.post-8995948986177995487</id><published>2022-05-11T15:05:00.048-04:00</published><updated>2022-05-17T15:28:26.694-04:00</updated><title type="text">I/O 2022: Android 13 security and privacy (and more!)</title><content type="html">&lt;span class="byline-author"&gt;Posted by Eugene Liderman and Sara N-Marandi, Android Security and Privacy Team&lt;/span&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;iframe allowfullscreen="" class="BLOG_video_class" height="536" src="https://www.youtube.com/embed/BK3XSF7V704" width="643" youtube-src-id="BK3XSF7V704"&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;p&gt;Every year at I/O we share the latest on privacy and security features on Android. But we know some users like to go a level deeper in understanding how we’re making the latest release safer, and more private, while continuing to offer a seamless experience. So let’s dig into the tools we’re building to better secure your data, enhance your privacy and increase trust in the apps and experiences on your devices.  &lt;/p&gt;&lt;p&gt;&lt;strong&gt;Low latency, frictionless security&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Regardless of whether a smartphone is used for consumer or enterprise purposes, attestation is a key underpinning to ensure the integrity of the device and apps running on the device. Fundamentally, key attestation lets a developer bind a secret or designate data to a device. This is a strong assertion: "same user, same device" as long as the key is available, a cryptographic assertion of integrity can be made.  &lt;/p&gt;&lt;p&gt;With Android 13 we have migrated to a new model for the provisioning of attestation keys to Android devices which is known as Remote Key Provisioning (RKP). This new approach will strengthen device security by eliminating factory provisioning errors and providing key vulnerability recovery by moving to an architecture where Google takes more responsibility in the certificate management lifecycle for these attestation keys. You can learn more about RKP &lt;a href="https://android-developers.googleblog.com/2022/03/upgrading-android-attestation-remote.html"&gt;here&lt;/a&gt;. &lt;/p&gt;&lt;div class="separator" style="clear: both;"&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhl7PwFzAWGtrX9cfhfNOH_sRYe-Xz8IUhtCFPjXc6nQKL13f8oimenwvtbOCatj2qheFlO98xyEckfs3fOGwzQ2uau1GPgwPT6r1W8PY7tD37dYiQJ9UMKoFw9MvApUkPvV1vivnWolCbr343QV3hACB1-bWwi2nPgJAzsFOTlqaWHgSvcAZIzy5IMew/s1600/RKP.png" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="1600" data-original-width="1532" height="640" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhl7PwFzAWGtrX9cfhfNOH_sRYe-Xz8IUhtCFPjXc6nQKL13f8oimenwvtbOCatj2qheFlO98xyEckfs3fOGwzQ2uau1GPgwPT6r1W8PY7tD37dYiQJ9UMKoFw9MvApUkPvV1vivnWolCbr343QV3hACB1-bWwi2nPgJAzsFOTlqaWHgSvcAZIzy5IMew/w613-h640/RKP.png" width="613" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;We’re also making even more modules updatable directly through &lt;a href="https://support.google.com/product-documentation/answer/11462338"&gt;Google Play System Updates&lt;/a&gt; so we can automatically upgrade more system components and fix bugs, seamlessly, without you having to worry about it. We now have more than 30 components in Android that can be automatically updated through Google Play, including new modules in Android 13 for Bluetooth and ultra-wideband (UWB).  &lt;/p&gt;&lt;p&gt;Last year we &lt;a href="https://security.googleblog.com/2021/04/rust-in-android-platform.html"&gt;talked about&lt;/a&gt; how the majority of vulnerabilities in major operating systems are caused by undefined behavior in programming languages like C/C++. Rust is an alternative language that provides the efficiency and flexibility required in advanced systems programming (OS, networking) but Rust comes with the added boost of memory safety. We are happy to report that Rust is being adopted in security critical parts of Android, such as our key management components and networking stacks. &lt;/p&gt;&lt;p&gt;Hardening the platform doesn’t just stop with continual improvements with memory safety and expansion of anti-exploitation techniques. It also includes hardening our API surfaces to provide a more secure experience to our end users.  &lt;/p&gt;&lt;p&gt;In Android 13 we implemented numerous enhancements to help mitigate potential vulnerabilities that app developers may inadvertently introduce. This includes making &lt;a href="https://developer.android.com/about/versions/13/features#runtime-receivers"&gt;runtime receivers safer&lt;/a&gt; by allowing developers to specify whether a particular broadcast receiver in their app should be exported and visible to other apps on the device. On top of this, &lt;a href="https://developer.android.com/about/versions/13/behavior-changes-13#intent-filters"&gt;intent filters block non-matching intents&lt;/a&gt; which further hardens the app and its components.  &lt;/p&gt;&lt;p&gt;For enterprise customers who need to meet certain security certification requirements, we’ve updated our security logging reporting to add more coverage and consolidate security logs in one location. This is helpful for companies that need to meet standards like Common Criteria and is useful for partners such as management solutions providers who can review all security-related logs in one place. &lt;/p&gt;&lt;p&gt;&lt;strong&gt;Privacy on your terms&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Android 13 brings developers more ways to build privacy-centric apps. Apps can now implement a new Photo picker that allows the user to select &lt;a href="https://developer.android.com/about/versions/13/features/photopicker"&gt;the exact photos or videos&lt;/a&gt; they want to share without having to give another app access to their media library.  &lt;/p&gt;&lt;div class="separator" style="clear: both;"&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhVG6Q5j03b4kbb19uxYXxpbRREbPFl20RPIsDp_-m8eHZGp3zvyYcoxY63WlQzIoYQap8qpw1_A_mvujlprxDbcE1aqDSvfcSZihCi2WkheXOuU06ut6708TK0nEkW3mtXquTg8FpXP67IiD072UR-X5K2LuPqDpyysIdpktAGODo66VZ1_RownbMVQA/s1296/PhotoPicker.gif" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="1296" data-original-width="1080" height="640" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhVG6Q5j03b4kbb19uxYXxpbRREbPFl20RPIsDp_-m8eHZGp3zvyYcoxY63WlQzIoYQap8qpw1_A_mvujlprxDbcE1aqDSvfcSZihCi2WkheXOuU06ut6708TK0nEkW3mtXquTg8FpXP67IiD072UR-X5K2LuPqDpyysIdpktAGODo66VZ1_RownbMVQA/w533-h640/PhotoPicker.gif" width="533" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;With Android 13, we’re also reducing the number of apps that require your location to function using the nearby devices permission &lt;a href="https://android-developers.googleblog.com/2021/05/android-security-and-privacy-recap.html"&gt;introduced last year&lt;/a&gt;. For example, you won’t have to &lt;a href="https://developer.android.com/about/versions/13/features/nearby-wifi-devices-permission"&gt;turn on location to enable Wi-fi &lt;/a&gt;for certain apps and situations. We’ve also &lt;a href="https://developer.android.com/about/versions/13/behavior-changes-13#granular-media-permissions"&gt;changed&lt;/a&gt; how storage works, requiring developers to ask for separate permissions to access audio, image and video files.  &lt;/p&gt;&lt;p&gt;Previously, we’ve limited apps from accessing your clipboard in the background and alerted you when an app accessed it. With Android 13, we’re automatically deleting your clipboard history after a short period so apps are blocked from seeing old copied information.  &lt;/p&gt;&lt;p&gt;In Android 11, we began &lt;a href="https://developer.android.com/about/versions/11/privacy/permissions#auto-reset"&gt;automatically resetting permissions&lt;/a&gt; for apps you haven’t used for an extended period of time, and have since &lt;a href="https://android-developers.googleblog.com/2021/09/making-permissions-auto-reset-available.html"&gt;expanded the feature&lt;/a&gt; to devices running Android 6 and above. Since then, we’ve automatically reset over 5 billion permissions.  &lt;/p&gt;&lt;p&gt;In Android 13, app makers can go above and beyond in &lt;a href="https://developer.android.com/about/versions/13/features#developer-downgradable-permissions"&gt;removing permissions&lt;/a&gt; even more proactively on behalf of their users. Developers will be able to provide even more privacy by reducing the time their apps have access to unneeded permissions. &lt;/p&gt;&lt;p&gt;Finally, we know notifications are critical for many apps but are not always of equal importance to users. In Android 13, you’ll have more control over which apps you would like to get alerts from, as new apps on your device are &lt;a href="https://developer.android.com/about/versions/13/changes/notification-permission"&gt;required to ask you for permission&lt;/a&gt; by default before they can send you notifications. &lt;/p&gt;&lt;p&gt;&lt;strong&gt;Apps you can trust&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Most app developers build their apps using a variety of software development kits (SDKs) that bundle in pre-packaged functionality. While SDKs provide amazing functionality, app developers typically have little visibility or control over the SDK code or insight into their performance.  &lt;/p&gt;&lt;p&gt;We’re working with developers to make their apps more secure with a new &lt;a href="https://goo.gle/play-sdk"&gt;Google Play SDK Index&lt;/a&gt; that helps them see SDK safety and reliability signals before they build the code into their apps. This ensures we're helping everyone build a more secure and private app ecosystem.   &lt;/p&gt;&lt;p&gt;Last month, we also started rolling out &lt;a href="https://blog.google/products/google-play/data-safety/"&gt;a new Data safety section&lt;/a&gt; in Google Play to help you understand how apps plan to collect, share, and protect your data, before you install it. To instill even more trust in Play apps, we're enabling developers to have their apps independently validated against &lt;a href="https://github.com/OWASP/owasp-masvs"&gt;OWASP’s MASVS&lt;/a&gt;, a globally recognized standard for mobile app security.   &lt;/p&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEj3xQaTmfUanLNiXLrXItyinPvHLr7iU4GScRRpI2Pg9dXFmccOgBx6zZfOfFlyljdsKaH_wi_xCqrcHt_-IatiU1-jVxmiWO3ULI29tP-Wo9xddxABtIxlcJeRMZ7xQaMdvS5M5iwrTQUovG5Q_rJYF89y1DWdN4nH5c6MG8mppfZ04rdMksd3SJT4Wg/s8522/17530%20l%20Images%20for%20Android%20Security%20Blog_01.png" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="8522" data-original-width="7102" height="640" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEj3xQaTmfUanLNiXLrXItyinPvHLr7iU4GScRRpI2Pg9dXFmccOgBx6zZfOfFlyljdsKaH_wi_xCqrcHt_-IatiU1-jVxmiWO3ULI29tP-Wo9xddxABtIxlcJeRMZ7xQaMdvS5M5iwrTQUovG5Q_rJYF89y1DWdN4nH5c6MG8mppfZ04rdMksd3SJT4Wg/w533-h640/17530%20l%20Images%20for%20Android%20Security%20Blog_01.png" width="533" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;p&gt;We’re working with a small group of developers and authorized lab partners to evolve the &lt;a href="https://appdefensealliance.dev/masa"&gt;program&lt;/a&gt;. Developers who have completed this independent validation can showcase this on their Data safety section.   &lt;/p&gt;&lt;p&gt;&lt;strong&gt;Additional mobile security and safety&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;  &lt;/p&gt;&lt;p&gt;Just like our anti-malware protection Google Play, which now scans 125 billion apps a day, we believe spam and phishing detection should be built in. We’re proud to announce that in a recent &lt;a href="https://omdia.tech.informa.com/commissioned-research/articles/omdia-consumer-mobile-security-scorecard"&gt;analyst report&lt;/a&gt;, Messages was the highest rated built-in messaging app for anti-phishing and scams protection. &lt;/p&gt;&lt;p&gt;Messages is now also helping to protect you against 1.5 billion spam messages per month, so you can avoid both annoying texts and attempts to access your data. These phishing attempts are increasingly how bad actors are trying to get your information, by getting you to click on a link or download an app, so we are always looking for ways to offer another line of defense.  &lt;/p&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgUjFj-dm2HkOn1SxzGKpgfOUzW_qvQx4yKUJCRoT2U0pmLHwW2Z8g9L6dfvaTVuSndbPS_zNlxHXb2z1Nv0N-PdDaCwDIMdBNZlWeDGCoWtPyWXI5FNh-Jenw5aynMRhpjnG9S2_QUMtNjypdaCdn0HtnnS6t028QAAnyZIPoTX1YBae0UQlCLi7X_6w/s8522/17530%20l%20Images%20for%20Android%20Security%20Blog_02.png" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="8522" data-original-width="7102" height="640" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgUjFj-dm2HkOn1SxzGKpgfOUzW_qvQx4yKUJCRoT2U0pmLHwW2Z8g9L6dfvaTVuSndbPS_zNlxHXb2z1Nv0N-PdDaCwDIMdBNZlWeDGCoWtPyWXI5FNh-Jenw5aynMRhpjnG9S2_QUMtNjypdaCdn0HtnnS6t028QAAnyZIPoTX1YBae0UQlCLi7X_6w/w533-h640/17530%20l%20Images%20for%20Android%20Security%20Blog_02.png" width="533" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;p&gt;Last year, we introduced&amp;nbsp;&lt;a href="https://www.android.com/google-features-on-android/summer-2021/#summer-2021-end-to-end-contents"&gt;end-to-end encryption in Messages&amp;nbsp;&lt;/a&gt;to provide more security for your mobile conversations. Later this year, we’ll launch end-to-end encryption group conversations in beta to ensure your personal messages get even more protection.&lt;/p&gt;&lt;p&gt;As with a lot of features we build, we try to do it in an open and transparent way. In Android 11 we announced a new &lt;a href="https://security.googleblog.com/2020/10/privacy-preserving-features-in-mobile.html"&gt;platform feature&lt;/a&gt; that was backed by an &lt;a href="https://www.iso.org/standard/69084.html"&gt;ISO standard&lt;/a&gt; to enable the use of digital IDs on a smartphone in a privacy-preserving way. When you hand over your plastic license (or other credential) to someone for verification it’s all or nothing which means they have access to your full name, date of birth, address, and other personally identifiable information (PII). The mobile version of this allows for much more fine-grained control where the end user and/or app can select exactly what to share with the verifier. In addition, the verifier must declare whether they intend to retain the data returned. In addition, you can present certain details of your credentials, such as age, without revealing your identity.  &lt;/p&gt;&lt;p&gt;Over the last two Android releases we have been improving this API and making it easier for third-party organizations to leverage it for various digital identity use cases, such as driver’s licenses, student IDs, or corporate badges. We’re now announcing that Google Wallet uses Android &lt;a href="https://source.android.com/security/features/identity-credentials"&gt;Identity Credential&lt;/a&gt; to support digital IDs and driver’s licenses. We’re working with states in the US and governments around the world to bring digital IDs to Wallet later this year. You can learn more about all of the new enhancements in Google Wallet &lt;a href="https://blog.google/products/android/ask-a-techspert-google-wallet"&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Protected by Android&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;We don’t think your security and privacy should be hard to understand and control. Later this year, we’ll begin rolling out a new destination in settings on Android 13 devices that puts all your device security and data privacy front and center.   &lt;/p&gt;&lt;div class="separator" style="clear: both;"&gt;&lt;a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhMpxpS2sjJ4oxiTGhvyY1v6T1o5asTvjSkeyLP-bkc5ppCodXYaHYVeqfELNXAq-EY36dz-RQo9HWyn7nwFBK3RIAjqQA3a6gq8mhq1vJKRdVM0w170GD0s0awhCIBFMLP1D69ZpHkdLepfcFxM58sSry32BTG7jCwbiHG1Qeiwou0GZNhZY22g0srzA/s1600/single-image.png" style="display: block; padding: 1em 0px; text-align: center;"&gt;&lt;img border="0" data-original-height="2176" data-original-width="2476" height="562" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhMpxpS2sjJ4oxiTGhvyY1v6T1o5asTvjSkeyLP-bkc5ppCodXYaHYVeqfELNXAq-EY36dz-RQo9HWyn7nwFBK3RIAjqQA3a6gq8mhq1vJKRdVM0w170GD0s0awhCIBFMLP1D69ZpHkdLepfcFxM58sSry32BTG7jCwbiHG1Qeiwou0GZNhZY22g0srzA/w640-h562/single-image.png" width="640" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;p&gt;The new Security &amp;amp; Privacy settings page will give you a simple, color-coded way to understand your safety status and will offer clear and actionable guidance to improve it. The page will be anchored by new action cards that notify you of critical steps you should take to address any safety risks. In addition to notifications to warn you about issues, we’ll also provide timely recommendations on how to enhance your privacy.  &lt;/p&gt;&lt;p&gt;We know that to feel safe and in control of your data, you need to have a secure foundation you can count on. Because if your device isn’t secure, it’s not private either. We’re working hard to make sure you’re always protected by Android. Learn more about these protections on our &lt;a href="android.com/safety"&gt;website&lt;/a&gt;.  &lt;/p&gt;</content><link href="http://security.googleblog.com/feeds/8995948986177995487/comments/default" rel="replies" title="Post Comments" type="application/atom+xml"/><link href="http://www.blogger.com/comment.g?blogID=1176949257541686127&amp;postID=8995948986177995487&amp;isPopup=true" rel="replies" title="0 Comments" type="text/html"/><link href="http://www.blogger.com/feeds/1176949257541686127/posts/default/8995948986177995487" rel="edit" type="application/atom+xml"/><link href="http://www.blogger.com/feeds/1176949257541686127/posts/default/8995948986177995487" rel="self" type="application/atom+xml"/><link href="http://security.googleblog.com/2022/05/io-2022-android-13-security-and-privacy.html" rel="alternate" title="I/O 2022: Android 13 security and privacy (and more!)" type="text/html"/><author><name>Google</name><uri>http://www.blogger.com/profile/11822708545141062574</uri><email>noreply@blogger.com</email><gd:image height="16" rel="http://schemas.google.com/g/2005#thumbnail" src="https://img1.blogblog.com/img/b16-rounded.gif" width="16"/></author><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" height="72" url="https://img.youtube.com/vi/BK3XSF7V704/default.jpg" width="72"/><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1176949257541686127.post-2170097726716362650</id><published>2022-05-11T14:00:00.004-04:00</published><updated>2022-05-11T15:36:41.904-04:00</updated><title type="text">Taking on the Next Generation of Phishing Scams </title><content type="html">&lt;span class="byline-author"&gt;Posted by Daniel Margolis, Software Engineer, Google Account Security Team&lt;/span&gt;&amp;nbsp;&lt;br /&gt;&lt;br /&gt;Every year, security technologies improve: &lt;a href="https://www.google.com/chrome/security/"&gt;browsers get better&lt;/a&gt;, &lt;a href="https://transparencyreport.google.com/https/overview?hl=en"&gt;encryption becomes ubiquitous on the Web&lt;/a&gt;, authentication becomes stronger. But phishing persistently remains a threat (as shown by &lt;a href="https://www.techrepublic.com/article/phishing-attack-spoofs-us-department-of-labor-to-steal-account-credentials/"&gt;a recent phishing attack on the U.S. Department of Labor&lt;/a&gt;) because users retain the ability to log into their online accounts, often with a simple password, from anywhere in the world. It’s why today &lt;a href="https://blog.google/technology/safety-security/io-safer-with-google/"&gt;at I/O we announced&lt;/a&gt; new ways we’re reducing the risks of phishing by: scaling phishing protections to Google Docs, Sheets and Slides, continuing to auto enroll people in 2-Step Verification and more. This blog will deep dive into the method of phishing and how it has evolved today. &lt;br /&gt;&lt;br /&gt;As phishing adoption has grown, multi-factor authentication has become a particular focus for attackers. In some cases, attackers phish SMS codes directly, by following a legitimate "one-time passcode" (triggered by the attacker trying to log into the victim's account) with a spoofed message asking the victim to "reply back with the code you just received.” &lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;span id="docs-internal-guid-d336c65d-7fff-2523-0bc6-6857d58fddc2"&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;span style="border: none; display: inline-block; height: 261px; overflow: hidden; width: 598px;"&gt;&lt;img height="261" src="https://lh3.googleusercontent.com/3_JG4oFsxf0ckmkhGsng8MKKL6v7zp82C9X6BN61-cA-asXYu-k_ypFcNcyA3QM-baUy3jcsWWqaOsnThDOlrFGX7tPZpLnwZVSf19eCHLddK6EfBgAdZfipEWI7mT0loyJQxuuPdlj0ANjPtxS1nU6k5pja39cn34iQBzcZYOlP8C4GyFlXVVHuLKp1eg" style="margin-left: 0px; margin-top: 0px;" width="598" /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both;"&gt;&lt;span id="docs-internal-guid-e9f84392-7fff-27c5-459e-e465cf40d6ac"&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-left: 36pt; margin-top: 0pt;"&gt;&lt;i&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; font-weight: 700; vertical-align: baseline; white-space: pre-wrap;"&gt;Left: &lt;/span&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;legitimate Google SMS verification. &lt;/span&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; font-weight: 700; vertical-align: baseline; white-space: pre-wrap;"&gt;Right: &lt;/span&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;spoofed message asking victim to share verification code.&lt;/span&gt;&lt;/i&gt;&lt;/p&gt;&lt;br /&gt;In other cases, attackers have leveraged more sophisticated dynamic phishing pages to conduct relay attacks. In these attacks, a user thinks they're logging into the intended site, just as in a standard phishing attack. But instead of deploying a simple static phishing page that saves the victim's email and password when the victim tries to login, the phisher has deployed a web service that logs into the actual website at the same time the user is falling for the phishing page.&lt;br /&gt;&lt;br /&gt;The simplest approach is an almost off-the-shelf "reverse proxy" which acts as a "person in the middle", forwarding the victim's inputs to the legitimate page and sending the response from the legitimate page back to the victim's browser. &lt;/span&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both;"&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;span id="docs-internal-guid-117dac65-7fff-c183-8ef7-5d6fe6c12956"&gt;&lt;div style="text-align: center;"&gt;&lt;img height="282" src="https://lh4.googleusercontent.com/Udpuz-nCz_0KBw03t-cDZpTOuKykjFPeepnKIFQbLFZg4_zJtU31YADObLIfesVQbY3rQcO60cJhOHQUGHEeWif8bSyNBl9R7KyDg7llvLlNnWZ2RrLdU4Gb1SYkL1mP8ZuCb4d5a-MIoj1mSfdk92gYZEsOZUdHBOpgi26ybluj_iGzy0osmVFeYWu8XA=w640-h282" style="font-family: Arial; font-size: 11pt; margin-left: 0px; margin-top: 0px; white-space: pre-wrap;" width="640" /&gt;&lt;/div&gt;&lt;/span&gt;&lt;/div&gt;&lt;br /&gt;These attacks are especially challenging to prevent because additional authentication challenges shown to the attacker—like a prompt for an SMS code—are also relayed to the victim, and the victim's response is in turn relayed back to the real website. In this way, the attacker can count on their victim to solve any authentication challenge presented.&lt;br /&gt;&lt;br /&gt;Traditional multi-factor authentication with PIN codes can only do so much against these attacks, and authentication with smartphone approvals via a prompt — while more secure against SIM-swap attacks — is still vulnerable to this sort of real-time interception.&lt;br /&gt;&lt;br /&gt;&lt;div&gt;&lt;b&gt;The Solution Space&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;Over the past year, we've &lt;a href="https://blog.google/technology/safety-security/making-sign-safer-and-more-convenient/"&gt;started to automatically enable device-based two-factor authentication&lt;/a&gt; for our users. This authentication not only helps protect against traditional password compromise but, with technology improvements, we can also use it to help defend against these more sophisticated forms of phishing.&lt;br /&gt;&lt;br /&gt;Taking a broad view, most efforts to protect and defend against phishing fall into the following categories:&lt;/div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;&lt;a href="https://dev.chromium.org/Home/chromium-security/enamel"&gt;Browser UI improvements&lt;/a&gt; to help users identify authentic websites.&lt;/li&gt;&lt;li&gt;&lt;a href="https://support.google.com/accounts/answer/6208650?hl=en"&gt;Password managers&lt;/a&gt; that can validate the identity of the web page before logging in.&lt;/li&gt;&lt;li&gt;Phishing detection, both in &lt;a href="https://safety.google/gmail/"&gt;email&lt;/a&gt;—the most common delivery channel—and in the &lt;a href="https://safebrowsing.google.com/"&gt;browser&lt;/a&gt; itself, to warn users about suspicious web pages.&lt;/li&gt;&lt;li&gt;Preventing the person-in-the-middle attacks mentioned above by &lt;a href="https://security.googleblog.com/2019/04/better-protection-against-man-in-middle.html"&gt;preventing automated login attempts&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;Phishing-resistant authentication using &lt;a href="https://fidoalliance.org/how-fido-works/"&gt;FIDO&lt;/a&gt; with security keys or a Bluetooth connection to your phone.&lt;/li&gt;&lt;li&gt;Hardening the Google Prompt challenge to help users identify suspicious sign-in attempts, or to ask them to take additional steps that can defeat phishing (like navigating to a new web address, or to join the same wireless network as the computer they're logging into).&lt;/li&gt;&lt;/ul&gt;&lt;b&gt;&lt;br /&gt;Expanding phishing-resistant authentication to more users&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;Over the last decade we’ve been working hard with a number of industry partners on expanding phishing-resistant authentication mechanisms, as part of &lt;a href="https://fidoalliance.org/"&gt;FIDO Alliance&lt;/a&gt;. Through these efforts we introduced physical FIDO security keys, such as the &lt;a href="https://store.google.com/product/titan_security_key"&gt;Titan Security Key&lt;/a&gt;, which prevent phishing by verifying the identity of the website you're logging into. (This verification protects against the "person-in-the-middle"  phishing described above.) Recently, we &lt;a href="https://blog.google/technology/safety-security/one-step-closer-to-a-passwordless-future/"&gt;announced&lt;/a&gt; a major milestone with the FIDO Alliance, Apple and Microsoft by expanding our support for the FIDO Sign-in standards, helping to launch us into a truly passwordless, phishing-resistant future.&lt;br /&gt;&lt;br /&gt;Even though security keys work great, we don't expect everyone to add one to their keyring.&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="text-align: center;"&gt;&lt;span id="docs-internal-guid-07ca03a2-7fff-c86b-7b62-942de06fca4b"&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;span style="border: none; display: inline-block; height: 292px; overflow: hidden; width: 187px;"&gt;&lt;img height="292" src="https://lh5.googleusercontent.com/mfA6Tdirh69yBDEWZ8Rg_T2mJTJLkWRyPZ1P9gZ6e7IZsVC1fCSeDzxtesmgZPailMYzd4GHRJc5s0Lh2VPm8gg24tPWUJB5UDFCH2bcYBUHoPo6yPRAW3I-H3iu4FKi17XwIQlG-9MnxQ7yA9CrSt8uNobMG5USw3b1Dd_ef9-C8YZbmzXhx-0Irfnj8A" style="margin-left: 0px; margin-top: 0px;" width="187" /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;Instead, to make this level of security more accessible, we're building it into mobile phones. Unlike physical FIDO security keys that need to be connected to your device via USB, we use Bluetooth to ensure your phone is close to the device you're logging into. Like physical security keys, this helps prevent a distant attacker from tricking you into approving a sign-in on their browser, giving us an added layer of security against the kind of "person in the middle" attacks that can still work against SMS or Google Prompt.&lt;br /&gt;&lt;br /&gt;(&lt;a href="https://blog.google/technology/safety-security/security-myth-busting-and-spring-cleaning/"&gt;But don't worry&lt;/a&gt;: this doesn't allow computers within Bluetooth range to login as you—it only grants that approval to the computer you're logging into. And we only use this to verify that your phone is near the device you're logging into, so you only need to have Bluetooth on during login.)&lt;br /&gt;&lt;br /&gt;Over the next couple of months we’ll be rolling out this technology in more places, which you might notice as a request for you to enable Bluetooth while logging in, so we can perform this additional security check. If you've signed into your Google account on your Android phone, we can enroll your phone automatically—just like with Google Prompt—allowing us to give this added layer of security to many of our users without the need for any additional setup.&lt;br /&gt;&lt;br /&gt;But unfortunately this secure login doesn't work everywhere—for example, when logging into a computer that doesn't support Bluetooth, or a browser that doesn't support security keys. That's why, if we are to offer phishing-resistant security to everyone, we have to offer backups when security keys aren't available—and those backups must also be secure enough to prevent attackers from taking advantage of them.&lt;div&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/div&gt;&lt;b&gt;&lt;div&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/div&gt;Hardening existing challenges against phishin&lt;/b&gt;g&lt;br /&gt;&lt;br /&gt;Over the past few months, we've started experimenting with making our traditional Google Prompt challenges more phishing resistant.&lt;br /&gt;&lt;br /&gt;We already use different challenge experiences depending on the situation—for example, sometimes we ask the user to match a PIN code with what they're seeing on the screen in addition to clicking "allow" or "deny". This can help prevent static phishing pages from tricking you into approving a challenge.&lt;br /&gt;&lt;br /&gt;We've also begun experimenting with more involved challenges for higher-risk situations, including more prominent warnings when we see you logging in from a computer that we think might belong to a phisher, or asking you to join your phone to the same Wi-Fi network as the computer you're logging into so we can be sure the two are near each other. Similar to our use of Bluetooth for Security Keys, this prevents an attacker from tricking you into logging into a "person-in-the-middle" phishing page.&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span id="docs-internal-guid-8260b069-7fff-359e-1f66-97166e03f387"&gt;&lt;b&gt;Bringing it all together&lt;/b&gt;&lt;/span&gt;&lt;/div&gt;&lt;br /&gt;Of course, while all of these options dramatically increase account security, we also know that they can be a challenge for some of our users, which is why we're rolling them out gradually, as part of a risk-based approach that also focuses on usability. If we think an account is at a higher risk, or if we see abnormal behavior, we're more likely to use these additional security measures.&lt;br /&gt;&lt;br /&gt;Over time, as FIDO2 authentication becomes more widely available, we expect to be able to make it the default for many of our users, and to rely on stronger versions of our existing challenges like those described above to provide secure fallbacks.&lt;br /&gt;&lt;br /&gt;All these new tools in our toolbox—detecting browser automation to prevent "person in the middle" attacks, warning users in Chrome and Gmail, making the Google Prompt more secure, and automatically enabling Android phones as easy-to-use Security Keys—work together to allow us to better protect our users against phishing.&lt;br /&gt;&lt;br /&gt;Phishing attacks have long been seen as a persistent threat, but these recent developments give us the ability to really move the needle and help more of our users stay safer online.</content><link href="http://security.googleblog.com/feeds/2170097726716362650/comments/default" rel="replies" title="Post Comments" type="application/atom+xml"/><link href="http://www.blogger.com/comment.g?blogID=1176949257541686127&amp;postID=2170097726716362650&amp;isPopup=true" rel="replies" title="0 Comments" type="text/html"/><link href="http://www.blogger.com/feeds/1176949257541686127/posts/default/2170097726716362650" rel="edit" type="application/atom+xml"/><link href="http://www.blogger.com/feeds/1176949257541686127/posts/default/2170097726716362650" rel="self" type="application/atom+xml"/><link href="http://security.googleblog.com/2022/05/taking-on-next-generation-of-phishing.html" rel="alternate" title="Taking on the Next Generation of Phishing Scams " type="text/html"/><author><name>Unknown</name><email>noreply@blogger.com</email><gd:image height="16" rel="http://schemas.google.com/g/2005#thumbnail" src="https://img1.blogblog.com/img/b16-rounded.gif" width="16"/></author><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" height="72" url="https://lh3.googleusercontent.com/3_JG4oFsxf0ckmkhGsng8MKKL6v7zp82C9X6BN61-cA-asXYu-k_ypFcNcyA3QM-baUy3jcsWWqaOsnThDOlrFGX7tPZpLnwZVSf19eCHLddK6EfBgAdZfipEWI7mT0loyJQxuuPdlj0ANjPtxS1nU6k5pja39cn34iQBzcZYOlP8C4GyFlXVVHuLKp1eg=s72-c" width="72"/><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1176949257541686127.post-5264948080671210292</id><published>2022-04-28T12:05:00.008-04:00</published><updated>2022-04-28T12:21:24.709-04:00</updated><title type="text">The Package Analysis Project: Scalable detection of malicious open source packages </title><content type="html">&lt;span class="byline-author"&gt;Posted by Caleb Brown, Open Source Security Team&amp;nbsp;&lt;/span&gt;&lt;div&gt;&lt;span class="byline-author"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;Despite open source software’s essential role in all software built today, it’s far too easy for bad actors to circulate malicious packages that attack the systems and users running that software. Unlike mobile app stores that can scan for and reject malicious contributions, package repositories have limited resources to review the thousands of daily updates and must maintain an open model where anyone can freely contribute. As a result, malicious packages like &lt;a href="https://github.com/advisories/GHSA-pjwm-rvh2-c87w"&gt;ua-parser-js&lt;/a&gt;, and &lt;a href="https://snyk.io/blog/peacenotwar-malicious-npm-node-ipc-package-vulnerability/"&gt;node-ipc&lt;/a&gt; are regularly uploaded to popular repositories despite their best efforts, with sometimes devastating consequences for users. &lt;br /&gt;&lt;br /&gt;Google, a member of the &lt;a href="https://openssf.org/"&gt;Open Source Security Foundation&lt;/a&gt; (OpenSSF), is proud to support the OpenSSF’s &lt;a href="https://openssf.org/blog/2022/04/28/introducing-package-analysis-scanning-open-source-packages-for-malicious-behavior"&gt;Package Analysis project,&lt;/a&gt; which is a welcome step toward helping secure the open source packages we all depend on. The Package Analysis program performs dynamic analysis of all packages uploaded to popular open source repositories and catalogs the results in a BigQuery table. By detecting malicious activities and alerting consumers to suspicious behavior before they select packages, this program contributes to a more secure software supply chain and greater trust in open source software. The program also gives insight into the types of malicious packages that are most common at any given time, which can guide decisions about how to better protect the ecosystem. &lt;br /&gt;&lt;br /&gt;To better understand how the Package Analysis program is contributing to supply chain security, we analyzed the nearly 200 malicious packages it captured over a one-month period. Here’s what we discovered:&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;Results&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;All signals collected are published in our &lt;a href="https://console.cloud.google.com/bigquery?d=packages&amp;amp;p=ossf-malware-analysis&amp;amp;t=analysis&amp;amp;page=table"&gt;BigQuery table&lt;/a&gt;. Using simple queries on this table, we found around 200 meaningful results from the packages uploaded to NPM and PyPI in a period of just over a month. Here are some notable examples, with &lt;a href="https://github.com/ossf/package-analysis/blob/main/docs/case_studies.md"&gt;more available in the repository&lt;/a&gt;.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;PyPI: discordcmd&lt;/b&gt;&lt;/div&gt;&lt;div&gt;This Python package will attack the desktop client for Discord on Windows. It was found by spotting the unusual requests to raw.githubusercontent.com, Discord API, and ipinfo.io.&lt;br /&gt;&lt;br /&gt;First, it downloaded a backdoor from GitHub and installed it into the Discord electron client.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;span class="byline-author"&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;span style="border: none; display: inline-block; height: 221px; margin-left: 1em; margin-right: 1em; overflow: hidden; width: 594px;"&gt;&lt;img src="https://lh3.googleusercontent.com/teKmDM4L2ldfQKTo3zirXpxmNCoX8Gk_Km7qXkSdeo-SyywPq8v0XZDUOp7EhLKEhE7WzBIigkh9bFG1QAA4C6Q6WDcFNQ0-xq_A5NbixFQN45RQWEtDaAL3_p9MrzIQXDEpEzrmmIx-_KAX8c_irTw=s16000" style="margin-left: 0px; margin-top: 0px;" /&gt;&lt;/span&gt;&lt;/div&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;&lt;/span&gt;Next, it looked through various local databases for the user's Discord token.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;img src="https://lh3.googleusercontent.com/GPHIrBJV9GrH8Z7IkSya5J-2WlQQfbNxQxa8zZ4oJaKLCoE2cYzsbsKL3Q6iRyad073ZxFcvaTha6od1RzLjTt_j2CXqgLhlyysJjA6kMyHMkXCAMr7CqTa__4hrY1x1Bw8bLKujEYHubK5kyxnuXpk=s16000" style="font-size: 11pt; margin-left: 0px; margin-top: 0px; text-align: center; white-space: pre-wrap;" /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Finally, it grabbed the data associated with the token from the Discord API and exfiltrated it back to a Discord server controlled by the attacker.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;NPM: @roku-web-core/ajax&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;During install, this NPM package exfiltrates details of the machine it is running on and then opens a reverse shell, allowing the remote execution of commands.&lt;/div&gt;&lt;div&gt;&lt;span class="byline-author"&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;span style="border: none; display: inline-block; height: 325px; margin-left: 1em; margin-right: 1em; overflow: hidden; width: 468px;"&gt;&lt;img height="325" src="https://lh4.googleusercontent.com/1jd-N8kdkObZ6OIyMen3qt5XMcJHcWdaJV0qYWJr0sUtf4jEkzbHaT0MnRXIrxgd1AOANgx9_DD6wykDwQyTZU4zlosPUeQB853UADW7X0wlm9VclIzswAB4eMy0-sYM_BjMP4wzef84WiSjxM9XMkc" style="margin-left: 0px; margin-top: 0px;" width="468" /&gt;&lt;/span&gt;&lt;/div&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;&lt;/span&gt;This package was discovered from its requests to an attacker-controlled address.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;Dependency Confusion / Typosquatting&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The vast majority of the malicious packages we detected are dependency confusion and &lt;a href="https://www.darkreading.com/vulnerabilities-threats/beware-the-package-typosquatting-supply-chain-attack"&gt;typosquatting attacks&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;The packages we found usually contain a simple script that runs during an install and calls home with a few details about the host. These packages are most likely the work of security researchers looking for bug bounties, since most are not exfiltrating meaningful data except the name of the machine or a username, and they make no attempt to disguise their behavior.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;These dependency confusion attacks were discovered through the domains they used, such as burpcollaborator.net, pipedream.com, interact.sh, which are commonly used for reporting back attacks. The same domains appear across unrelated packages and have no apparent connection to the packages themselves. Many packages also used unusual version numbers that were high (e.g. v5.0.0, v99.10.9) for a package with no previous versions.&lt;span class="byline-author"&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;span style="border: none; display: inline-block; height: 113px; overflow: hidden; width: 624px;"&gt;&lt;img height="227.21782206542693" src="https://lh3.googleusercontent.com/v924Z887zD34PXzNOQCOyycHnJ5uOE0GGtLPEdxlca3r8wxoooNL8DU7Vqoq72S9tUq2QeOS-F54T0igpr1EXLjxQzjhnUWY5vGLq1LHK3nDkfEHBC97qQgvyNtmk9QXzPzFLThZpPeWYCLQQpKWJys" style="margin-left: -5.56433px; margin-top: -114.218px;" width="629.5643312101911" /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/span&gt;&lt;b&gt;Conclusions&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;The short time frame and low sophistication needed for finding the results above underscore the challenge facing open source package repositories. While many of the results above were likely the work of security researchers, any one of these packages could have done far more to hurt the unfortunate victims who installed them.&lt;br /&gt;&lt;br /&gt;These results show the clear need for more investment in vetting packages being published in order to keep users safe. This is a growing space, and having an open standard for reporting would help centralize analysis results and offer consumers a trusted place to assess the packages they’re considering using. Creating an open standard should also foster healthy competition, promote integration, and raise the overall security of open source packages.&lt;/div&gt;&lt;div&gt;&amp;nbsp; &lt;br /&gt;Over time we hope that the Package Analysis program will offer comprehensive knowledge about the behavior and capabilities of packages across open source software, and help guide the future efforts needed to make the ecosystem more secure for everyone. To get involved, please check out the &lt;a href="https://github.com/ossf/package-analysis"&gt;GitHub Project&lt;/a&gt; and &lt;a href="https://github.com/ossf/package-analysis/milestones"&gt;Milestones&lt;/a&gt; for opportunities to contribute. &lt;/div&gt;</content><link href="http://security.googleblog.com/feeds/5264948080671210292/comments/default" rel="replies" title="Post Comments" type="application/atom+xml"/><link href="http://www.blogger.com/comment.g?blogID=1176949257541686127&amp;postID=5264948080671210292&amp;isPopup=true" rel="replies" title="0 Comments" type="text/html"/><link href="http://www.blogger.com/feeds/1176949257541686127/posts/default/5264948080671210292" rel="edit" type="application/atom+xml"/><link href="http://www.blogger.com/feeds/1176949257541686127/posts/default/5264948080671210292" rel="self" type="application/atom+xml"/><link href="http://security.googleblog.com/2022/04/the-package-analysis-project-scalable.html" rel="alternate" title="The Package Analysis Project: Scalable detection of malicious open source packages " type="text/html"/><author><name>Unknown</name><email>noreply@blogger.com</email><gd:image height="16" rel="http://schemas.google.com/g/2005#thumbnail" src="https://img1.blogblog.com/img/b16-rounded.gif" width="16"/></author><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" height="72" url="https://lh3.googleusercontent.com/teKmDM4L2ldfQKTo3zirXpxmNCoX8Gk_Km7qXkSdeo-SyywPq8v0XZDUOp7EhLKEhE7WzBIigkh9bFG1QAA4C6Q6WDcFNQ0-xq_A5NbixFQN45RQWEtDaAL3_p9MrzIQXDEpEzrmmIx-_KAX8c_irTw=s72-c" width="72"/><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1176949257541686127.post-906768766717947517</id><published>2022-04-27T12:01:00.000-04:00</published><updated>2022-04-27T12:01:06.684-04:00</updated><title type="text">How we fought bad apps and developers in 2021</title><content type="html">&lt;span class="byline-author"&gt;Posted by Steve Kafka and Khawaja Shams, Android Security and Privacy Team&lt;/span&gt; &lt;p&gt;Providing a safe experience to billions of users continues to be one of the &lt;a href="https://android-developers.googleblog.com/2022/03/privacy-and-security-direction.html"&gt;highest priorities&lt;/a&gt; for Google Play. Last year we introduced multiple privacy focused features, enhanced our protections against bad apps and developers, and improved &lt;a href="https://en.wikipedia.org/wiki/Software_development_kit"&gt;SDK&lt;/a&gt; data safety. In addition, Google Play Protect continues to scan billions of installed apps each day across billions of devices to keep people safe from malware and unwanted software.  &lt;/p&gt;&lt;p&gt;  &lt;/p&gt;&lt;p&gt;We continue to enhance our machine learning systems and review processes, and in 2021 we blocked 1.2 million policy violating apps from being published on Google Play, preventing billions of harmful installations. We also continued in our efforts to combat malicious and spammy developers, banning 190k bad accounts in 2021. In addition, we have closed around 500k developer accounts that are inactive or abandoned. &lt;/p&gt;&lt;p&gt;In May we &lt;a href="https://android-developers.googleblog.com/2021/05/new-safety-section-in-google-play-will.html"&gt;announced&lt;/a&gt; our new Data safety section for Google Play where developers will be required to give users deeper insight into the privacy and security practices of the apps they download, and provide transparency into the data the app may collect and why. The Data safety section &lt;a href="https://blog.google/products/google-play/data-safety/"&gt;launched&lt;/a&gt; this week, and developers are required to complete this section for their apps by July 20th.  &lt;/p&gt;&lt;p&gt;We’ve also invested in making life easier for our developers. We added the &lt;a href="https://play.google.com/console/about/policystatus/"&gt;Policy and Programs&lt;/a&gt; section to Google Play Console to help developers manage all their app compliance issues in one central location. This includes the ability to appeal a decision and &lt;a href="https://support.google.com/googleplay/android-developer/answer/9842754?hl=en"&gt;track its status&lt;/a&gt; from this page. &lt;/p&gt;&lt;p&gt;In addition, we continued to partner with SDK developers to improve app safety, limit how user data is shared, and &lt;a href="https://support.google.com/googleplay/android-developer/answer/10358880"&gt;improve lines of communication with app developers&lt;/a&gt;. SDKs provide functionality for app developers, but it can sometimes be tricky to know when an SDK is safe to use. Last year, we engaged with SDK developers to build a safer Android and Google Play ecosystem. As a result of this work, SDK developers have improved the safety of SDKs used by hundreds of thousands of apps impacting billions of users. This remains a huge investment area for our team, and we will continue in our efforts to make SDKs safer across the ecosystem.  &lt;/p&gt;&lt;p&gt;&lt;strong&gt;Limiting access&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;The best way to ensure users' data stays safe is to limit access to it in the first place.  &lt;/p&gt;&lt;p&gt;As a result of new platform protections and &lt;a href="https://support.google.com/googleplay/android-developer/answer/10467955"&gt;policies&lt;/a&gt;, developer collaboration and education, 98% of apps migrating to Android 11 or higher have reduced their access to sensitive APIs and user data. We've also significantly reduced the unnecessary, dangerous, or disallowed use of &lt;a href="https://support.google.com/googleplay/android-developer/answer/10964491?hl=en#:~:text=Google%20Play%20permits%20the%20use,that%20they%20are%20accessibility%20tools."&gt;Accessibility APIs&lt;/a&gt; in apps migrating to Android 12, while preserving the functionality of legitimate use cases. &lt;/p&gt;&lt;p&gt;We also continued in our commitment to make Android a great place for families. Last year we disallowed the collection of Advertising ID (AAID) and other device identifiers from all users in apps solely targeting children, and gave all users the ability to delete their Advertising ID entirely, regardless of the app.  &lt;/p&gt;&lt;p&gt;&lt;strong&gt;Pixel enhancements&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;For Pixel users, we had even more great features to help keep you safe. Our new &lt;a href="https://security.googleblog.com/2021/10/pixel-6-setting-new-standard-for-mobile.html"&gt;Security hub&lt;/a&gt; helps protect your phone, apps, Google Account, and passwords by giving you a central view of your device’s current configuration. Security hub also provides recommendations to improve your security, helping you decide what settings best meet your needs.  &lt;/p&gt;&lt;p&gt;In addition, Pixels now use new machine learning models that improve the detection of malware in Google Play Protect. The detection runs on your Pixel, and uses a privacy preserving technology called federated analytics to discover bad apps. &lt;/p&gt;&lt;p&gt;Our global teams are dedicated to keeping our billions of users safe, and look forward to many exciting announcements in 2022. &lt;/p&gt;</content><link href="http://security.googleblog.com/feeds/906768766717947517/comments/default" rel="replies" title="Post Comments" type="application/atom+xml"/><link href="http://www.blogger.com/comment.g?blogID=1176949257541686127&amp;postID=906768766717947517&amp;isPopup=true" rel="replies" title="0 Comments" type="text/html"/><link href="http://www.blogger.com/feeds/1176949257541686127/posts/default/906768766717947517" rel="edit" type="application/atom+xml"/><link href="http://www.blogger.com/feeds/1176949257541686127/posts/default/906768766717947517" rel="self" type="application/atom+xml"/><link href="http://security.googleblog.com/2022/04/how-we-fought-bad-apps-and-developers.html" rel="alternate" title="How we fought bad apps and developers in 2021" type="text/html"/><author><name>Google</name><uri>http://www.blogger.com/profile/11822708545141062574</uri><email>noreply@blogger.com</email><gd:image height="16" rel="http://schemas.google.com/g/2005#thumbnail" src="https://img1.blogblog.com/img/b16-rounded.gif" width="16"/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1176949257541686127.post-2456668474452167313</id><published>2022-04-14T13:28:00.008-04:00</published><updated>2022-04-14T13:34:54.614-04:00</updated><title type="text">How to SLSA Part 3 - Putting it all together</title><content type="html">&lt;span class="byline-author"&gt;Posted by Tom Hennen, software engineer, BCID &amp;amp; GOSST&amp;nbsp;&lt;/span&gt;&lt;div&gt;&lt;span class="byline-author"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;br /&gt;In our last two posts (&lt;a href="https://security.googleblog.com/2022/04/how-to-slsa-part-1-basics.html"&gt;1&lt;/a&gt;,&lt;a href="https://security.googleblog.com/2022/04/how-to-slsa-part-2-details.html"&gt;2&lt;/a&gt;) we introduced a fictional example of Squirrel, Oppy, and Acme learning to SLSA and covered the basics and details of how they’d use SLSA for their organizations. Today we’ll close out the series by exploring how each organization pulls together the various solutions into a heterogeneous supply chain. &lt;br /&gt;&lt;br /&gt;As a reminder, Acme is trying to produce a container image that contains three artifacts:&lt;br /&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;The Squirrel package ‘foo’&lt;/li&gt;&lt;li&gt;The Oppy package ‘baz’&lt;/li&gt;&lt;li&gt;A custom executable, ‘bar’, written by Acme employees.&lt;/li&gt;&lt;/ol&gt;The process starts with ‘foo’ package authors triggering a build using GitHub Actions. This results in a new version of ‘foo’ (an artifact with hash ‘abc’) being pushed to the Squirrel repo along with its SLSA provenance (signed by Fulcio) and &lt;a href="https://github.com/in-toto/attestation/issues/47"&gt;source attestation&lt;/a&gt;. When Squirrel gets this push request it verifies the artifact against the specific policy for ‘foo’ which checks that it was built by GitHub Actions from the expected source repository. After the artifact passes the policy check a VSA is created and the new package, its original SLSA provenance, and the VSA are made public in the Squirrel repo, available to all users of package ‘foo’.&lt;br /&gt;&lt;br /&gt;Next the maintainers of the Oppy ‘baz’ package trigger a new build using the Oppy Autobuilder. This results in a new version of ‘baz’ (an artifact with hash ‘def’) being pushed to a public Oppy repo with the SLSA provenance (signed by their org-specific keys) published to Rekor. When the repo gets the push request it makes the artifact available to the public. The repo does not perform any verification at this time.&lt;br /&gt;&lt;br /&gt;An Acme employee then makes a change to their Dockerfile, sending it for review by their co-worker, who approves the change and merges the PR. This then causes the Acme builder to trigger a build. During this build:&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;bar is compiled from source code stored in the same source repo as the Dockerfile.&lt;/li&gt;&lt;li&gt;acorn install downloads ‘foo’ from the Squirrel repo, verifying the VSA, and recording the use of acorn://foo@abc and its VSA in the build.&lt;/li&gt;&lt;li&gt;acme_oppy_get install (a custom script made by Acme) downloads the latest version of the Oppy ‘baz’ package and queries its SLSA provenance and other attestations from Rekor. It then performs a full verification checking that it was built by ‘https://oppy.example/slsa/builder/v1’ and the publicized key. Once verification is complete it records the use of oppy://baz@def and the associated attestations in the build.&lt;/li&gt;&lt;li&gt;The build process assembles the SLSA provenance for the container by:&lt;/li&gt;&lt;ul&gt;&lt;li&gt;Recording the Acme git repo the bar source and Dockerfile came from, into &lt;a href="https://slsa.dev/provenance/v0.2#materials"&gt;materials&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;Copying the reported dependencies of acorn://foo@abc and oppy://baz@def into &lt;a href="https://slsa.dev/provenance/v0.2#materials"&gt;materials&lt;/a&gt; and adding their attestations to the output &lt;a href="https://github.com/in-toto/attestation/blob/main/spec/bundle.md"&gt;in-toto bundle&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;Recording the CI/CD entrypoint as the &lt;a href="https://slsa.dev/provenance/v0.2#invocation"&gt;invocation&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;Creating a signed &lt;a href="https://github.com/secure-systems-lab/dsse"&gt;DSSE&lt;/a&gt; with the SLSA provenance and adding it to the output &lt;a href="https://github.com/in-toto/attestation/blob/main/spec/bundle.md"&gt;in-toto bundle&lt;/a&gt;.&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;br /&gt;Once the container is ready for release the Acme verifier checks the SLSA provenance (and other data in the in-toto bundle) using the policy from their own policy repo and issues a VSA. The VSA and all associated attestations are then published to an internal Rekor instance. Acme can then create an &lt;a href="https://en.wikipedia.org/wiki/Software_bill_of_materials"&gt;SBOM&lt;/a&gt; for the container leveraging data about the build as stored in Rekor. Acme then publishes the container image, the VSA, and the SBOM on Dockerhub.&lt;br /&gt;&lt;br /&gt;Downstream users of this Acme container can then check the Acme issued VSA, and if there are any problems Acme can consult their internal Rekor instance to get more details on the build allowing Acme to trace all of their dependencies back to source code and the systems used to create them.&lt;br /&gt;Conclusion&lt;br /&gt;&lt;br /&gt;With SLSA implemented in the ways described in this series, downstream users are protected from many of &lt;a href="https://slsa.dev/spec/v0.1/threats"&gt;the threats affecting the software supply chain today&lt;/a&gt;. While users still need to trust certain parties, the number of systems requiring trust is much lower and users are in a much better position to investigate any issues that arise. &lt;br /&gt;&lt;br /&gt;We’d love to see the ideas in this series implemented, refuted, or used as a foundation to build even stronger solutions. We’d also love to hear some other methods on how to solve these issues. &lt;a href="https://github.com/slsa-framework/slsa#get-involved"&gt;Show us&lt;/a&gt; how you like to SLSA.&amp;nbsp;</content><link href="http://security.googleblog.com/feeds/2456668474452167313/comments/default" rel="replies" title="Post Comments" type="application/atom+xml"/><link href="http://www.blogger.com/comment.g?blogID=1176949257541686127&amp;postID=2456668474452167313&amp;isPopup=true" rel="replies" title="0 Comments" type="text/html"/><link href="http://www.blogger.com/feeds/1176949257541686127/posts/default/2456668474452167313" rel="edit" type="application/atom+xml"/><link href="http://www.blogger.com/feeds/1176949257541686127/posts/default/2456668474452167313" rel="self" type="application/atom+xml"/><link href="http://security.googleblog.com/2022/04/how-to-slsa-part-3-putting-it-all.html" rel="alternate" title="How to SLSA Part 3 - Putting it all together" type="text/html"/><author><name>Unknown</name><email>noreply@blogger.com</email><gd:image height="16" rel="http://schemas.google.com/g/2005#thumbnail" src="https://img1.blogblog.com/img/b16-rounded.gif" width="16"/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1176949257541686127.post-5612903452487693830</id><published>2022-04-13T12:00:00.002-04:00</published><updated>2022-04-13T12:35:03.233-04:00</updated><title type="text">How to SLSA Part 2 - The Details</title><content type="html">&lt;span class="byline-author"&gt;Posted by Tom&amp;nbsp; Hennen, software engineer, BCID &amp;amp; GOSST&amp;nbsp;&lt;/span&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;span id="docs-internal-guid-6dda854b-7fff-91c4-18ba-7c8c98353417"&gt;In &lt;a href="https://security.googleblog.com/2022/04/how-to-slsa-part-1-basics.html"&gt;our last post&lt;/a&gt; we introduced a fictional example of Squirrel, Oppy, and Acme learning to use SLSA and covered the basics of what their implementations might look like. Today we’ll cover the details: where to store attestations and policies, what policies should check, and how to handle key distribution and trust.&lt;br /&gt;&lt;/span&gt;&lt;h1 style="text-align: left;"&gt;&lt;span&gt;Attestation storage&lt;/span&gt;&lt;/h1&gt;&lt;span&gt;Attestations play a large role in SLSA and it’s essential that consumers of artifacts know where to find the attestations for those artifacts.&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;b&gt;Co-located in repo&lt;br /&gt;&lt;/b&gt;&lt;br /&gt;Attestations could be colocated in the repository that hosts the artifact. This is how Squirrel plans to store attestations for packages. They even want to add support to the Squirrel CLI (e.g. acorn get-attestations foo@1.2.3).&lt;br /&gt;&lt;br /&gt;Acme really likes this approach because the attestations are always available and it doesn’t introduce any new dependencies.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;Rekor&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;br /&gt;Meanwhile, Oppy plans to store attestations in &lt;a href="https://github.com/sigstore/rekor"&gt;Rekor&lt;/a&gt;. They like being able to direct users to an existing public instance while not having to maintain any new infrastructure themselves, and the in-depth defense the transparency log provides against tampering with the attestations.&lt;br /&gt;&lt;br /&gt;Though the latency of querying attestations from Rekor is likely too high for doing verification at time of use, Oppy isn’t too concerned since they expect users to query Rekor at install time.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Hybrid&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;A hybrid model is also available where the publisher stores the attestations in Rekor as well as co-located with the artifact in the repo—along with Rekor’s inclusion proof. This provides confidence the data was added to Rekor while providing the benefits of co-locating attestations in the repository.&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;h1 style="text-align: left;"&gt;&lt;span&gt;Policy content&lt;/span&gt;&lt;/h1&gt;&lt;span&gt;‘Policy’ refers to the rules used to determine if an artifact should be allowed for a use case.&lt;br /&gt;&lt;br /&gt;Policies often use the package name as a proxy for determining the use case. An example being, if you want to find the policy to apply you could look up the policy using the package name of the artifact you’re evaluating.&lt;br /&gt;&lt;br /&gt;Policy specifics may vary based on ease of use, availability of data, risk tolerance and more. Full verification needs more from policies than delegated verification does.&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;b&gt;Default policy&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;Default policies allow admission decisions without the need to create specific policies for each package. A default policy is a way of saying “anything that doesn’t have a more specific policy must comply with this policy”.&lt;br /&gt;&lt;br /&gt;Squirrel plans to eventually implement a default policy of “any package without a more specific policy will be accepted as long as it meets SLSA 3”, but they recognize that most packages don’t support this yet. Until they achieve critical mass they’ll have a default SLSA 0 policy (all artifacts are accepted).&lt;br /&gt;&lt;br /&gt;While Oppy is leaving verification to their users, they’ll suggest a default policy of “any package built by ‘https://oppy.example/slsa/builder/v1’”.&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;b&gt;Specific policy&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;Squirrel also plans to allow users to create policies for specific packages. For example, this policy requires that package ‘foo’ must have been built by GitHub Actions, from github.com/foo/acorn-foo, and be SLSA 4.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;br /&gt;&lt;div align="left" dir="ltr" style="margin-left: 0pt;"&gt;&lt;table style="border-collapse: collapse; border: none;"&gt;&lt;colgroup&gt;&lt;/colgroup&gt;&lt;tbody&gt;&lt;tr style="height: 0pt;"&gt;&lt;td style="background-color: #fafafa; border-bottom: solid #e0e0e0 1pt; border-color: rgb(224, 224, 224); border-left: solid #e0e0e0 1pt; border-right: solid #e0e0e0 1pt; border-style: solid; border-top: solid #e0e0e0 1pt; border-width: 1pt; overflow-wrap: break-word; overflow: hidden; padding: 5pt; vertical-align: top;"&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;scope&lt;/span&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; color: #616161; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;:&lt;/span&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt; &lt;/span&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; color: #0f9d58; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;'acorn://foo'&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;target_level&lt;/span&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; color: #616161; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;:&lt;/span&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt; SLSA_L4&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;allow_github_actions &lt;/span&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; color: #616161; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;{&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;workflow&lt;/span&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; color: #616161; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;:&lt;/span&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt; &lt;/span&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; color: #0f9d58; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;'https://github.com/gossts/slsa-acorn/.github/workflows/builder.yml@main'&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;source_repo&lt;/span&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; color: #616161; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;:&lt;/span&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt; &lt;/span&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; color: #0f9d58; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;'https://github.com/foo/acorn-foo.git'&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;allow_branch&lt;/span&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; color: #616161; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;:&lt;/span&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt; &lt;/span&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; color: #0f9d58; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;'main'&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; color: #616161; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;br /&gt;Squirrel will also allow packages to create SLSA 0 policies if they’re not using SLSA compliant infrastructure.&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt;&lt;div align="left" dir="ltr" style="margin-left: 0pt;"&gt;&lt;table style="border-collapse: collapse; border: none;"&gt;&lt;colgroup&gt;&lt;/colgroup&gt;&lt;tbody&gt;&lt;tr style="height: 0pt;"&gt;&lt;td style="background-color: #fafafa; border-bottom: solid #e0e0e0 1pt; border-color: rgb(224, 224, 224); border-left: solid #e0e0e0 1pt; border-right: solid #e0e0e0 1pt; border-style: solid; border-top: solid #e0e0e0 1pt; border-width: 1pt; overflow-wrap: break-word; overflow: hidden; padding: 5pt; vertical-align: top;"&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;scope&lt;/span&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; color: #616161; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;:&lt;/span&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt; &lt;/span&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; color: #0f9d58; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;'acorn://qux'&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;target_level&lt;/span&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; color: #616161; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;:&lt;/span&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt; SLSA_L0&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;b&gt;Policy auto generation&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;Squirrel has an enormous number of existing packages. It’s not feasible to get all those package maintainers to create specific policies themselves. Therefore, Squirrel plans to leverage &lt;a href="https://en.wikipedia.org/wiki/Process_mining"&gt;process mining&lt;/a&gt; to auto generate policies for packages based on the history of the package. E.g. “The last 10 times Squirrel package foo was published it was built by GitHub Actions from github.com/foo/acorn-foo, and met SLSA 4 (this is the policy above). Let’s create a policy that requires that and send it to the maintainers to review.”&lt;br /&gt;Policy add-ons&lt;br /&gt;&lt;br /&gt;Policy evaluation could do more than just evaluate the SLSA requirements. The same policies that check SLSA requirements are well placed to check other properties that are important to organizations like “was static analysis performed”, “are there any known CVEs in this artifact”, “was integration testing successful”, etc…&lt;br /&gt;&lt;br /&gt;Acme is really interested in some of these policy add-ons. They’d like to avoid the embarrassing situation of publishing a new container image with known CVEs. They’re not sure how to implement it yet but they’ll be on the lookout for tools that can help them do so.&lt;br /&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;b&gt;Delegated policies&lt;br /&gt;&lt;/b&gt;&lt;br /&gt;When using delegated verification there’s much less that actually needs to be checked and they can be hard-coded directly in tooling. A minimal delegated verification policy might be “allow if trusted-party verified this artifact (identified by digest) as &amp;lt;package name&amp;gt;”. This can be tightened further by adding requirements on the artifact &amp;amp; its dependencies SLSA levels (data which is available in the VSA). For example, “allow if trusted-party verified this artifact as &amp;lt;package name&amp;gt; at SLSA 3 and it doesn’t have any dependencies less than SLSA 2”.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;br /&gt;&lt;div align="left" dir="ltr" style="margin-left: 0pt;"&gt;&lt;table style="border-collapse: collapse; border: none;"&gt;&lt;colgroup&gt;&lt;/colgroup&gt;&lt;tbody&gt;&lt;tr style="height: 0pt;"&gt;&lt;td style="background-color: #fafafa; border-bottom: solid #e0e0e0 1pt; border-color: rgb(224, 224, 224); border-left: solid #e0e0e0 1pt; border-right: solid #e0e0e0 1pt; border-style: solid; border-top: solid #e0e0e0 1pt; border-width: 1pt; overflow-wrap: break-word; overflow: hidden; padding: 5pt; vertical-align: top;"&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; color: #455a64; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;# Delegated verification implicitly checks that the package name we're&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; color: #455a64; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;# checking matches the VSA's subject.name field.&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;allow_delegated_verification &lt;/span&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; color: #616161; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;{&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;trusted_verifier&lt;/span&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; color: #616161; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;:&lt;/span&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt; &lt;/span&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; color: #0f9d58; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;'https://delegatedverifier.com/slsa/v1'&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;minimum_level&lt;/span&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; color: #616161; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;:&lt;/span&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt; SLSA_L3&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;minimum_dependency_level&lt;/span&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; color: #616161; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;:&lt;/span&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt; SLSA_L2&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; color: #616161; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/span&gt;&lt;h1 style="text-align: left;"&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;Policy storage&lt;/span&gt;&lt;/h1&gt;&lt;span&gt;&lt;br /&gt;When using specific, non-default, policies verifiers need to know where to find the policy they need to evaluate.&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;b&gt;Co-located in repo&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;Squirrel plans to store specific policies as a property of the package in the repository. This makes them very easy for users and their tooling to find. It also allows the maintainer of the package to easily set the policy (they already have write permissions!).&lt;br /&gt;&lt;br /&gt;A potential downside is that the write permissions are the same as for the package itself. An attacker that compromises the developer’s credentials could also change the policy. This may not be as bad as it seems. Policies are human-readable so anyone paying attention would notice that package foo’s policy now says that it can be built from github.com/not-foo/acorn-foo. Squirrel plans to notify interested parties (including the maintainer!) when the policy changes, potentially letting them “sound the alarm” if anything nefarious happens.&lt;br /&gt;&lt;br /&gt;A similar approach is taken in a number of contact-change workflows. For example, when you change your address with your bank, the bank will send you an email (and a letter to the old address) letting you know the address has been changed. This type of notification would alert the maintainer to a potential compromise.&lt;br /&gt;&lt;br /&gt;Squirrel would also consider requiring a second person to review any policy changes for packages with over 10,000 users.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;br /&gt;&lt;b&gt;Public canonical Git repo&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;Another option might be to just create a canonical git repo (e.g. github.com/slsa-framework/slsa-acorn-policies) and let people publish proposed policies there. This has the advantage of using a separate ACL control mechanism from the package repository itself, but the disadvantages of being difficult to ensure the author of the policy is actually allowed to set the policy for that package and not scaling well as the repo grows.&lt;br /&gt;&lt;br /&gt;The approach outlined in policy auto generation could help here. Automation in the repo could just look at the last N releases of the package and determine if the proposed policy matches what’s actually been published. Proactive changes to the policy (like deciding to switch from GitHub Actions to CircleCI) would be harder to coordinate however.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;br /&gt;&lt;b&gt;Org specific repo&lt;br /&gt;&lt;/b&gt;&lt;br /&gt;Acme plans to establish their own org specific repo for policy storage. This gives them a single place to store all their policies, regardless of ecosystem type, and lets them provide more specific policies for packages provided by upstream repos. Since Oppy doesn’t have any plans to provide package-specific policies this gives Acme a place to store their own policies for Oppy packages (if they ever get around to it).&lt;br /&gt;&lt;br /&gt;Organizations can also use their policy repo to vet any upstream changes to policy and potentially add additional checks (e.g. “doesn’t have any known vulnerabilities”).&lt;br /&gt;&lt;/span&gt;&lt;h1 style="text-align: left;"&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;T&lt;/span&gt;rusted Verifier&lt;/h1&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;br /&gt;Acme wants to use delegated verification and that relies on having trusted verifiers to make decisions for downstream users. Who are these trusted verifiers?&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;b&gt;Public verifier&lt;br /&gt;&lt;/b&gt;&lt;br /&gt;A public repo is in a great position to act as a trusted verifier for their users. Users already trust these repos and they may already be doing verification on import.&lt;br /&gt;&lt;br /&gt;Squirrel plans to make use of this by making VSAs available for each artifact published, publicizing their verifier ID (i.e. ‘https://squirrel.example/slsa-verifier’) and the public key used to sign the VSAs. They even plan to build VSA verification directly into the Squirrel tooling, so that users can get SLSA protection by default.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;br /&gt;&lt;b&gt;Org-wide verifier&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;While Acme is happy to use Squirrel’s verifier (and the verification built into the tooling) they still need their own verifier so they can publish VSAs to Acme customers. So Acme plans to stand up their own verification service and publish their verifier ID (i.e. ‘https://acme.example/private-verifier’) and signing key. Acme customers can then verify the software they get from Acme.&lt;br /&gt;&lt;br /&gt;In the future Acme could require all software used throughout the company to be verified with this verifier (instead of relying on public verifiers). They’d do the verification and generate VSAs whenever artifacts are imported into their private Artifactory instance. They could then configure this ID/key pair for use throughout Acme and be confident that any software used has been verified according to Acme policy. That’s not Acme’s highest priority at the moment, but they like having this option open to them.&lt;/span&gt;&lt;h1 style="text-align: left;"&gt;&lt;span&gt;Key distribution &amp;amp; Trust&lt;/span&gt;&lt;/h1&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;Both full and delegated verification depend upon key distribution to the users doing the verification. Depending on the specifics and what’s getting verified this can be a difficult problem.&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;b&gt;Org-specific keys&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;When using delegated verification this could be the easiest case. Squirrel can just build the key they used for delegated verification directly into the Squirrel tooling. Acme can also fairly easily configure the use of their keys through the company using existing configuration control mechanisms.&lt;br /&gt;&lt;br /&gt;When using full verification this can be harder. If there are multiple builders that could be accepted the keys that sign the attestations need to be distributed to everyone that might use that builder. For Squirrel this would be really difficult since they plan to allow package maintainers to use whatever builder they want. How those keys get configured would be tricky just for Squirrel, and much more difficult if downstream Squirrel users wanted to do full verification of the Squirrel packages.&lt;br /&gt;&lt;br /&gt;The situation is easier, however, for Oppy. That’s because Oppy plans to only accept artifacts built by their autobuilder network. Oppy can configure this network to use a single (or small set) of keys and then publish those keys (and the SLSA level Oppy believes it meets) for downstream users.&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;b&gt;Fulcio&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;Squirrel plans to solve the problem of which keys they accept by leveraging Fulcio. Squirrel will build support for Fulcio root keys into their verifier and then express which Fulcio subject is allowed to sign attestations in the specific policy of each package. E.g. “Squirrel package ‘foo’ must have been built &amp;amp; signed by ‘spiffe://foobar.com/foo-builder, from github.com/foo/acorn-foo, and be SLSA 4”.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;br /&gt;&lt;div align="left" dir="ltr" style="margin-left: 0pt;"&gt;&lt;table style="border-collapse: collapse; border: none;"&gt;&lt;colgroup&gt;&lt;/colgroup&gt;&lt;tbody&gt;&lt;tr style="height: 0pt;"&gt;&lt;td style="background-color: #fafafa; border-bottom: solid #e0e0e0 1pt; border-color: rgb(224, 224, 224); border-left: solid #e0e0e0 1pt; border-right: solid #e0e0e0 1pt; border-style: solid; border-top: solid #e0e0e0 1pt; border-width: 1pt; overflow-wrap: break-word; overflow: hidden; padding: 5pt; vertical-align: top;"&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;scope&lt;/span&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; color: #616161; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;:&lt;/span&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt; &lt;/span&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; color: #0f9d58; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;'acorn://foo'&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;target_level&lt;/span&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; color: #616161; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;:&lt;/span&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt; SLSA_L4&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;allow_fulcio_builder &lt;/span&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; color: #616161; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;{&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;id&lt;/span&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; color: #616161; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;:&lt;/span&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt; &lt;/span&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; color: #0f9d58; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;'spiffe://foobar.com/foo-builder'&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;source_repo&lt;/span&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; color: #616161; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;:&lt;/span&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt; &lt;/span&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; color: #0f9d58; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;'https://github.com/foo/acorn-foo.git'&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;allow_branch&lt;/span&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; color: #616161; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;:&lt;/span&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt; &lt;/span&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; color: #0f9d58; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;'main'&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;allow_entrypoint&lt;/span&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; color: #616161; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;:&lt;/span&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt; &lt;/span&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; color: #0f9d58; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;'package.json'&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span face="Consolas, sans-serif" style="background-color: transparent; color: #616161; font-size: 10pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;}&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;b&gt;The Update Framework (TUF)&lt;br /&gt;&lt;/b&gt;&lt;br /&gt;The above methods could be further enhanced with &lt;a href="https://theupdateframework.io/"&gt;TUF&lt;/a&gt; to allow the secure maintenance of keys. TUF metadata could include all the SLSA keys, the build services and other entities they’re valid for, and the SLSA levels they’re qualified at. Oppy is considering using TUF to let verifiers securely fetch and update keys used by the Autobuilder network. Oppy would use a TUF delegation to indicate that these keys should only be used for the builder id ‘https://oppy.example/slsa/builder/v1’. Squirrel might do something similar to allow for updating the Fulcio key in its tooling.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;h1 style="text-align: left;"&gt;&lt;span&gt;Recording &amp;amp; verifying dependencies&lt;/span&gt;&lt;/h1&gt;&lt;span&gt;Acme wants to record and verify the dependencies that go into its container into the SLSA provenance. Acme would prefer that this functionality were just built-in their build service, but that feature isn’t available yet. Instead they’ll need to do something themselves. They have a few options at their disposal:&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;b&gt;Tool wrappers&lt;br /&gt;&lt;/b&gt;&lt;br /&gt;Since Oppy doesn’t build SLSA into it’s tooling Acme will create wrapper scripts for dependency import/installation that record and verify (using &lt;a href="https://github.com/sigstore/cosign"&gt;cosign&lt;/a&gt;) dependencies as they’re installed. Acme will update their build scripts to replace all instances of Oppy package installation with the wrapper script and then use the recorded results to help populate the &lt;a href="https://slsa.dev/provenance/v0.2#materials"&gt;materials&lt;/a&gt; section of the provenance.&lt;br /&gt;&lt;br /&gt;A downside is that this approach, if run in the build itself, is not guaranteed to be complete and cannot meet the “&lt;a href="https://slsa.dev/spec/v0.1/requirements#non-falsifiable"&gt;non-falsifiable&lt;/a&gt;” requirement (since the results reported by the wrapper could be falsified by the build process), relegating this approach to SLSA 2. Still, it allows Acme to make progress SLSA-fying their builds and provides a starting point for achieving higher SLSA levels.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;br /&gt;&lt;b&gt;Built into ecosystem tooling&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;Since Squirrel does build verification into their tooling, Acme can just use acorn install to verify the dependencies and record what was installed. Acme can use this information to populate the Squirrel packages installed in the materials section of the provenance and it can include the attestations of those dependencies in the in-toto bundle for their container image.&lt;br /&gt;&lt;br /&gt;As with tool wrappers, if this method is used in the build itself it cannot meet “non-falsifiable” requirement.&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;b&gt;Proxied verification&lt;br /&gt;&lt;/b&gt;&lt;br /&gt;Acme considered creating a proxy for their existing builder to proxy outbound connections. This proxy could verify everything fetched and use its logs to populate the provenance. Since this proxy is trusted it would be easier to meet “non-falsifiable” requirement. Unfortunately it’s also a lot of work for Acme so they’re going to defer this idea for now.&lt;br /&gt;&lt;/span&gt;&lt;h1 style="text-align: left;"&gt;&lt;span&gt;Next time&lt;/span&gt;&lt;/h1&gt;&lt;span&gt;In the first two parts of this series, we’ve covered the basics of getting started with SLSA and the details of policy and provenance storage, policy verification, and key handling. In our next post we’ll cover how Squirrel, Oppy, and Acme put this all together to protect a heterogeneous supply chain.&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;</content><link href="http://security.googleblog.com/feeds/5612903452487693830/comments/default" rel="replies" title="Post Comments" type="application/atom+xml"/><link href="http://www.blogger.com/comment.g?blogID=1176949257541686127&amp;postID=5612903452487693830&amp;isPopup=true" rel="replies" title="0 Comments" type="text/html"/><link href="http://www.blogger.com/feeds/1176949257541686127/posts/default/5612903452487693830" rel="edit" type="application/atom+xml"/><link href="http://www.blogger.com/feeds/1176949257541686127/posts/default/5612903452487693830" rel="self" type="application/atom+xml"/><link href="http://security.googleblog.com/2022/04/how-to-slsa-part-2-details.html" rel="alternate" title="How to SLSA Part 2 - The Details" type="text/html"/><author><name>Unknown</name><email>noreply@blogger.com</email><gd:image height="16" rel="http://schemas.google.com/g/2005#thumbnail" src="https://img1.blogblog.com/img/b16-rounded.gif" width="16"/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1176949257541686127.post-7341553905426522930</id><published>2022-04-12T12:00:00.002-04:00</published><updated>2022-04-13T12:30:56.491-04:00</updated><title type="text">How to SLSA Part 1 - The Basics</title><content type="html">&lt;span class="byline-author"&gt;Posted by Tom Hennen, Software Engineer, BCID &amp;amp; GOSST&amp;nbsp;&lt;/span&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;One of the great benefits of SLSA (&lt;a href="http://slsa.dev"&gt;Supply-chain Levels for Software Artifacts&lt;/a&gt;) is its flexibility. As an open source framework designed to improve the integrity of software packages and infrastructure, it is as applicable to small open source projects as to enterprise organizations. But with this flexibility can come a bewildering array of options for beginners—much like salsa dancing, someone just starting out might be left on the dance floor wondering how and where to jump in.&lt;br /&gt;&lt;br /&gt;Though it’s tempting to try to establish a single standard for how to use SLSA, it’s not possible: SLSA is not a line dance where everyone does the same moves, at the same time, to the same song. It’s a varied system with different styles, moves, and flourishes. The open source community, organizations, and consumers may all implement SLSA differently, but they can still work with each other.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;In this three-part series, we’ll explore how three fictional organizations would apply SLSA to meet their different needs. In doing so, we will answer some of the main questions that newcomers to SLSA have:&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;Part 1: The basics&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;How and when do you verify a package with SLSA?&lt;/li&gt;&lt;li&gt;How to handle artifacts without provenance?&lt;/li&gt;&lt;/ul&gt;Part 2: The details&lt;br /&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Where is the provenance stored?&lt;/li&gt;&lt;li&gt;Where is the appropriate policy stored and who should verify it?&lt;/li&gt;&lt;li&gt;What should the policies check?&lt;/li&gt;&lt;li&gt;How do you establish trust &amp;amp; distribute keys?&lt;/li&gt;&lt;/ul&gt;Part 3: Putting it all together&lt;ul style="text-align: left;"&gt;&lt;li&gt;What does a secure, heterogeneous supply chain look like?&lt;/li&gt;&lt;/ul&gt;&lt;h1 style="text-align: left;"&gt;The Situation&lt;/h1&gt;Our fictional example involves three organizations that want to use SLSA:&lt;br /&gt;&lt;br /&gt;Squirrel: a package manager with a large number of developers and users&lt;br /&gt;&lt;br /&gt;Oppy: an open source operating system with an enterprise distribution&lt;br /&gt;&lt;br /&gt;Acme: a mid sized enterprise. &lt;br /&gt;&lt;br /&gt;Squirrel wants to make SLSA as easy for their users as possible, even if that means abstracting some details away. Meanwhile, Oppy doesn’t want to abstract anything away from their users under the philosophy that they should explicitly understand exactly what they’re consuming.&lt;br /&gt;&lt;br /&gt;Acme is trying to produce a container image that contains three artifacts:&lt;br /&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;The Squirrel package ‘foo’&lt;/li&gt;&lt;li&gt;The Oppy package ‘baz’&lt;/li&gt;&lt;li&gt;A custom executable, ‘bar’, written by Acme employees&lt;/li&gt;&lt;/ol&gt;This series demonstrates one approach to using SLSA that lets Acme verify the Squirrel and Oppy packages ‘foo’ and ‘baz’ and its customers verify the container image. Though not every suggested solution is perfect, the solutions described can be a starting point for discussion and a foundation for new solutions.&lt;br /&gt;&lt;br /&gt;&lt;div&gt;&lt;h1 style="text-align: left;"&gt;Basics&lt;/h1&gt;In order to SLSA, Squirrel, Oppy, and Acme will all need SLSA capable build services. Squirrel wants to give their maintainers wide latitude to pick a builder service of their own. To support this, Squirrel will qualify some build services at specific SLSA levels (meaning they can produce artifacts up to that level). To start, Squirrel plans to qualify GitHub Actions using an approach &lt;a href="https://security.googleblog.com/2022/04/improving-software-supply-chain.html"&gt;like this&lt;/a&gt;, and hopes it can achieve SLSA 4 (pending the result of an independent audit). They’re also willing to qualify other build services as needed. Oppy on the other hand, doesn’t need to support arbitrary build services. They plan to have everyone use their Autobuilder network which they hope to qualify at SLSA 4 (they’ll conduct the audit/certification themselves). Finally, Acme plans to use Google Cloud Build which they’ll self-certify at SLSA 4 (pending the result of a Google-conducted audit).&lt;br /&gt;&lt;br /&gt;Squirrel, Oppy, and Acme will follow a similar qualification process for the source control systems they plan to support.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;h1 style="text-align: left;"&gt;Verification options&lt;/h1&gt;&lt;b&gt;Full verification&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;At some point, one or more of the organizations will need to do full verification of each artifact to determine if it is acceptable for a given use case. This is accomplished by checking if the artifact meets the appropriate policy.&lt;br /&gt;&lt;br /&gt;Typically, full verification would take place with &lt;a href="http://slsa.dev/provenance"&gt;SLSA provenance&lt;/a&gt;, &lt;a href="https://github.com/in-toto/attestation/issues/47"&gt;source attestations&lt;/a&gt;, and perhaps other specialized attestations (like &lt;a href="https://github.com/in-toto/attestation/issues/58"&gt;vulnerability scan results&lt;/a&gt;). While having to coordinate this data for all of its dependencies seems like a lot of work to Acme, they’re prepared to do full verification if Squirrel and Oppy are unable to.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;b&gt;Delegated verification&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;When Acme isn’t using full verification, they can instead use delegated verification where they check if an artifact is acceptable for a use case by checking if some other trusted party who performed a full verification (such as Squirrel or Oppy) believes the artifact is acceptable.&lt;br /&gt;&lt;br /&gt;Delegated verification is easier to perform quickly with limited data and network connectivity. It may also be easier for some users who value if someone they trust verified the artifact is good.&lt;br /&gt;&lt;br /&gt;Squirrel likes how easy delegated verification would make things for their users and plans to support it by creating a &lt;a href="https://slsa.dev/verification_summary/v0.1"&gt;Verification Summary Attestation (VSA)&lt;/a&gt; when they perform full verification.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;When to verify&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;Verification (full or delegated) could happen at a number of different times.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;On import to repo&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;Squirrel plans to perform full verification when an artifact is published to their repo. This will ensure that packages in the repo have met their corresponding policy. It’s also helpful because all the required data can be gathered when latency isn’t critical.&lt;br /&gt;&lt;br /&gt;If this were the only time verification is performed, it would put the repository's storage in the trusted computing base (TCB) of its users. Squirrel’s plans to use delegated verification (and issue VSAs) can prevent this. The signature on the VSA will prevent the artifacts from being tampered with while sitting in storage, even if they’re just SLSA 0. Downstream users will just need to verify the VSA.&lt;br /&gt;&lt;br /&gt;Acme also wants to do some sort of verification on the import to their internal repo since it simplifies their security story. They’re not quite sure what this will look like yet.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;On install&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;Acme also wants to do verification when an artifact is actually installed since it can remove a number of intermediaries from their TCB (their repo, the network, upstream storage systems).&lt;br /&gt;&lt;br /&gt;If they perform full verification at install then they must gather all the required information. That could be a lot of data, but it might be simplified by gathering the data from external sources and caching it in their internal repo. A larger problem is that it requires Acme to have established trust in all parties that produced that information (e.g. every builder of every package). For a complex supply chain that may be difficult.&lt;br /&gt;&lt;br /&gt;If Acme performs delegated verification, they only need the VSA for the packages being installed and to explicitly trust a handful of parties. This allows the complex full verification to be performed once while allowing all users of that package to perform a much simpler operation.&lt;br /&gt;&lt;br /&gt;Given these tradeoffs Acme prefers delegated verification at install time. Squirrel also really likes the idea and plans to build install time verification directly into the Squirrel tool.&lt;/div&gt;&lt;div&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;On use&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;Verification could also take place each time an artifact is actually used. In this model, latency and reliability are very important (a sudden increase in site traffic may necessitate a scaling operation launching many new jobs).&lt;br /&gt;&lt;br /&gt;Time of use verification allows the most context with which decisions can be made (“is this job allowed to run this code and is it free from vulns right now?”). It also allows policy changes to affect already built &amp;amp; installed software (which may or may not be desirable).&lt;br /&gt;&lt;br /&gt;Acme wants their users to be able to verify on use without too many dependencies so they plan to provide VSAs users can use to perform delegated verification when they start the container (perhaps using something like &lt;a href="https://kyverno.io/docs/writing-policies/verify-images/#verifying-image-attestations"&gt;Kyverno&lt;/a&gt;).&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;h1 style="text-align: left;"&gt;&lt;b&gt;How to handle artifacts without provenance?&lt;/b&gt;&lt;/h1&gt;Inevitably a build or system may require that an artifact without ‘original’ provenance is used. In these cases it may be desirable for the importer to generate provenance that details where it got this artifact. For example, this generated provenance shows that http://example.com/foo.tgz with sha256:abc was imported by ‘auto-importer’:&lt;br /&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://blogger.googleusercontent.com/img/a/AVvXsEhmAA5fBrS7Mhd_8uGzHUaOUCRED1TfAJSa7e2g7PijIWy42BY9pKsvNVYu5PJ1Zz_z9gRz5yqBbvWZeSJJyMAqH2QZs2aD2JkXw4DlFrTa2hL8FgFS014LBMryf9NqPsMjCg82QGYvlU632L6KsvfgibR9NP2qn489XX5LDagNYp4cRiIUKdwsqaP_pA" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img alt="" data-original-height="362" data-original-width="629" height="368" src="https://blogger.googleusercontent.com/img/a/AVvXsEhmAA5fBrS7Mhd_8uGzHUaOUCRED1TfAJSa7e2g7PijIWy42BY9pKsvNVYu5PJ1Zz_z9gRz5yqBbvWZeSJJyMAqH2QZs2aD2JkXw4DlFrTa2hL8FgFS014LBMryf9NqPsMjCg82QGYvlU632L6KsvfgibR9NP2qn489XX5LDagNYp4cRiIUKdwsqaP_pA=w640-h368" width="640" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;Such an artifact would likely not be accepted at higher SLSA levels, but the provenance can be used to: 1) prevent tampering with the artifact after it’s been imported and 2) be a data point for future analysis (e.g. should we prioritize asking for foo.tgz to be distributed with native SLSA provenance?).&lt;br /&gt;&lt;br /&gt;Acme might be interested in taking this approach at some point, but they don’t need it at the moment.&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;h1 style="text-align: left;"&gt;&lt;b&gt;Next time&lt;/b&gt;&lt;/h1&gt;In our next post we’ll cover specific approaches that can be used to answer questions like “where should attestations and policies be stored?” and “how do I trust the attestations that I receive?”&lt;/div&gt;</content><link href="http://security.googleblog.com/feeds/7341553905426522930/comments/default" rel="replies" title="Post Comments" type="application/atom+xml"/><link href="http://www.blogger.com/comment.g?blogID=1176949257541686127&amp;postID=7341553905426522930&amp;isPopup=true" rel="replies" title="0 Comments" type="text/html"/><link href="http://www.blogger.com/feeds/1176949257541686127/posts/default/7341553905426522930" rel="edit" type="application/atom+xml"/><link href="http://www.blogger.com/feeds/1176949257541686127/posts/default/7341553905426522930" rel="self" type="application/atom+xml"/><link href="http://security.googleblog.com/2022/04/how-to-slsa-part-1-basics.html" rel="alternate" title="How to SLSA Part 1 - The Basics" type="text/html"/><author><name>Unknown</name><email>noreply@blogger.com</email><gd:image height="16" rel="http://schemas.google.com/g/2005#thumbnail" src="https://img1.blogblog.com/img/b16-rounded.gif" width="16"/></author><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" height="72" url="https://blogger.googleusercontent.com/img/a/AVvXsEhmAA5fBrS7Mhd_8uGzHUaOUCRED1TfAJSa7e2g7PijIWy42BY9pKsvNVYu5PJ1Zz_z9gRz5yqBbvWZeSJJyMAqH2QZs2aD2JkXw4DlFrTa2hL8FgFS014LBMryf9NqPsMjCg82QGYvlU632L6KsvfgibR9NP2qn489XX5LDagNYp4cRiIUKdwsqaP_pA=s72-w640-h368-c" width="72"/><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1176949257541686127.post-4063859688883354856</id><published>2022-04-07T09:00:00.002-04:00</published><updated>2022-04-07T11:33:30.120-04:00</updated><title type="text">Improving software supply chain security with tamper-proof builds</title><content type="html">&lt;span class="byline-author"&gt;Posted by Asra Ali and Laurent Simon, Google Open Source Security Team (GOSST)&lt;/span&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;Many of the recent high-profile software attacks that have alarmed open-source users globally were consequences of supply chain integrity vulnerabilities: attackers gained control of a build server to &lt;a href="https://www.crowdstrike.com/blog/sunspot-malware-technical-analysis/"&gt;use malicious source files&lt;/a&gt;, &lt;a href="https://www.crowdstrike.com/blog/sunspot-malware-technical-analysis/"&gt;inject malicious artifacts&lt;/a&gt; into a compromised build platform, and bypass trusted builders to &lt;a href="https://about.codecov.io/apr-2021-post-mortem/"&gt;upload malicious artifacts&lt;/a&gt;. &lt;br /&gt;&lt;br /&gt;Each of these attacks could have been prevented if there were a way to detect that the delivered artifacts diverged from the expected origin of the software. But until now, generating verifiable information that described where, when, and how software artifacts were produced (information known as provenance) was difficult. This information allows users to trace artifacts verifiably back to the source and develop risk-based policies around what they consume. Currently, provenance generation is not widely supported, and solutions that do exist may require migrating build processes to services like &lt;a href="https://github.com/tektoncd/chains"&gt;Tekton Chains&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;This blog post describes a new method of generating non-forgeable provenance using &lt;a href="https://docs.github.com/en/actions/using-workflows"&gt;GitHub Actions workflows&lt;/a&gt; for isolation and &lt;a href="https://www.sigstore.dev/"&gt;Sigstore’s&lt;/a&gt; signing tools for authenticity. Using this approach, projects building on GitHub runners can achieve &lt;a href="https://slsa.dev/spec/v0.1/requirements"&gt;SLSA 3&lt;/a&gt; (the third of four progressive SLSA “levels”), which affirms to consumers that your artifacts are authentic and trustworthy. &lt;br /&gt;&lt;br /&gt;&lt;div&gt;&lt;h1 style="text-align: left;"&gt;&lt;b&gt;&lt;span style="font-size: large;"&gt;Provenance&lt;/span&gt;&lt;/b&gt;&lt;/h1&gt;&lt;br /&gt;&lt;a href="https://slsa.dev/"&gt;SLSA&lt;/a&gt; ("Supply-chain Levels for Software Artifacts”) is a framework to help improve the integrity of your project throughout its development cycle, allowing consumers to trace the final piece of software you release all the way back to the source. Achieving a high SLSA level helps to improve the trust that your artifacts are what you say they are.&lt;br /&gt;&lt;br /&gt;This blog post focuses on build provenance, which gives users important information about the build: who performed the release process? Was the build artifact protected against malicious tampering? Source provenance describes how the source code was protected, which we’ll cover in future blog posts, so stay tuned.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;h1 style="text-align: left;"&gt;&lt;b&gt;&lt;span style="font-size: large;"&gt;Go prototype to generate non-forgeable build provenance&lt;/span&gt;&lt;/b&gt;&lt;/h1&gt;&lt;br /&gt;To create tamperless evidence of the build and allow consumer verification, you need to:&lt;br /&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;Isolate the provenance generation from the build process;&lt;/li&gt;&lt;li&gt;Isolate against maintainers interfering in the workflow;&lt;/li&gt;&lt;li&gt;Provide a mechanism to identify the builder during provenance verification.&lt;/li&gt;&lt;/ol&gt;&lt;br /&gt;The full isolation described in the first two points allows consumers to trust that the provenance was faithfully recorded; entities that provide this guarantee are called trusted builders.&lt;br /&gt;&lt;br /&gt;Our &lt;a href="https://github.com/slsa-framework/slsa-github-generator-go"&gt;Go prototype&lt;/a&gt; solves all three challenges. It also includes running the build inside the trusted builder, which provides a strong guarantee that the build achieves SLSA 3’s &lt;a href="https://slsa.dev/spec/v0.1/requirements#ephemeral-environment"&gt;ephemeral&lt;/a&gt; and &lt;a href="https://slsa.dev/spec/v0.1/requirements#isolated"&gt;isolated&lt;/a&gt; requirement.&lt;h2 style="text-align: left;"&gt;&lt;/h2&gt;&lt;h1 style="text-align: left;"&gt;&lt;b&gt;&lt;span style="font-size: large;"&gt;How does it work?&lt;/span&gt;&lt;/b&gt;&lt;/h1&gt;&lt;/div&gt;&lt;div&gt;The following steps create the trusted builder that is necessary to generate provenance in isolation from the build and maintainer’s interference.&lt;br /&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;Step One: Create a reusable workflow on GitHub runners&lt;br /&gt;&lt;/b&gt;&lt;br /&gt;Leveraging GitHub’s &lt;a href="https://docs.github.com/en/actions/using-workflows/reusing-workflows"&gt;reusable workflows&lt;/a&gt; provides the isolation mechanism from both maintainers’ caller workflows and from the build process. Within the workflow, Github Actions creates &lt;a href="https://docs.github.com/en/actions/learn-github-actions/understanding-github-actions#the-components-of-github-actions"&gt;fresh instances of virtual machines (VMs), called runners, for each job&lt;/a&gt;. These separate VMs give the necessary isolation for a trusted builder, so that different VMs compile the project and generate and sign the SLSA provenance (see diagram below).&lt;br /&gt;&lt;br /&gt;Running the workflow on &lt;a href="https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners"&gt;GitHub-hosted runners&lt;/a&gt; gives the guarantee that the code run is in fact the intended workflow, which &lt;a href="https://docs.github.com/en/actions/hosting-your-own-runners/about-self-hosted-runners"&gt;self-hosted runners&lt;/a&gt; do not. This prototype relies on GitHub to run the exact code defined in the workflow.&lt;br /&gt;&lt;br /&gt;The reusable workflow also protects against possible interference from maintainers, who could otherwise try to define the workflow in a way that interferes with the builder. The only way to interact with a reusable workflow is through the input parameters it exposes to the calling workflow, which stops maintainers from altering information via &lt;a href="https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#env"&gt;environment variables&lt;/a&gt;, &lt;a href="https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idsteps"&gt;steps&lt;/a&gt;, &lt;a href="https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idservices"&gt;services&lt;/a&gt; and &lt;a href="https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#defaults"&gt;defaults&lt;/a&gt;. &lt;br /&gt;&lt;br /&gt;To protect against the possibility of one job (e.g. the build step) tampering with the other artifacts used by another job (the provenance step), this approach uses a trusted channel to protect the integrity of the data. We use &lt;a href="https://docs.github.com/en/actions/using-jobs/defining-outputs-for-jobs"&gt;job outputs&lt;/a&gt; to send hashes (due to size limitations) and then use the hashes to verify the binary received via the untrusted artifact registry. &lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;Step 2: Use OpenID Connect (OIDC) to prove the identity of the workflow to an external service (Sigstore)&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;OpenID Connect (OIDC) is a standard used across the web for identity providers (e.g., Google) to attest to the identity of a user for a third party. GitHub now &lt;a href="https://docs.github.com/en/actions/deployment/security-hardening-your-deployments/about-security-hardening-with-openid-connect"&gt;supports&lt;/a&gt; OIDC in their workflows. Each time a workflow is run, a runner can mint a unique &lt;a href="https://docs.github.com/en/actions/deployment/security-hardening-your-deployments/about-security-hardening-with-openid-connect#understanding-the-oidc-token"&gt;JWT token&lt;/a&gt; from GitHub’s OIDC provider. The token contains verifiable information of the workflow identity, including the caller repository, commit hash, trigger, and the current (reuseable) workflow path and reference. &lt;br /&gt;&lt;br /&gt;Using OIDC, the workflow proves its identity to &lt;a href="https://www.sigstore.dev/"&gt;Sigstore's&lt;/a&gt; Fulcio root Certificate Authority, which acts as an external verification service. Fulcio signs a short-lived certificate attesting to an ephemeral signing key generated in the runner and tying it to the workload identity. A record of signing the provenance is kept in Sigstore’s transparency log &lt;a href="https://github.com/sigstore/rekor"&gt;Rekor&lt;/a&gt;. Users can use the signing certificate as a trust anchor to verify that the provenance was authenticated and non-forgeable; it must have been created inside the trusted builder.&lt;h1 style="text-align: left;"&gt;&lt;span style="font-size: large;"&gt;&lt;b&gt;Verification&lt;/b&gt;&lt;/span&gt;&lt;/h1&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;The consumer can verify the artifact and its signed provenance with these steps:&lt;br /&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;Look up the corresponding Rekor log entry and verify the signature;&lt;/li&gt;&lt;li&gt;Verify the trusted builder identity by extracting it from the signing certificate;&lt;/li&gt;&lt;li&gt;Check that the provenance information matches the expected source and build.&lt;/li&gt;&lt;/ol&gt;See an &lt;a href="https://github.com/slsa-framework/slsa-github-generator-go"&gt;example in action&lt;/a&gt; in the official repository.&lt;br /&gt;&lt;br /&gt;Performing these steps guarantees to the consumer that the binary was produced in the trusted builder at a given commit hash attested to in the provenance. They can trust that the information in the provenance was non-forgeable, allowing them to trust the build “recipe” and trace their artifact verifiably back to the source.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;h1 style="text-align: left;"&gt;&lt;b&gt;&lt;span style="font-size: large;"&gt;Extra Bonus: Keyless signing&lt;/span&gt;&lt;/b&gt;&lt;/h1&gt;One extra benefit of this method is that maintainers don’t need to manage or distribute cryptographic keys for signing, avoiding the &lt;a href="https://caremad.io/posts/2013/07/packaging-signing-not-holy-grail/"&gt;notoriously difficult problem&lt;/a&gt; of key management. The OIDC protocol requires no hardcoded, long-term secrets be stored in GitHub's secrets, which sidesteps the potential problem of key mismanagement invalidating the SLSA provenance. Consumers simply use OIDC to verify that the binary artifact was built from a trusted builder that produced the expected provenance. &lt;br /&gt;&lt;h1 style="text-align: left;"&gt;&lt;b&gt;&lt;span style="font-size: large;"&gt;Next Steps&lt;/span&gt;&lt;/b&gt;&lt;/h1&gt;Utilizing the SLSA framework is a proven way for ensuring software supply-chain integrity at scale. This prototype shows  that achieving high SLSA levels is easier than ever thanks to the newest features of popular CI/CD systems and open-source tooling. Increased adoption of tamper-safe (SLSA 3+) build services will contribute to a stronger open-source ecosystem and help close one easily exploited gap in the current supply chain.&lt;br /&gt;&lt;br /&gt;We encourage testing and adoption and welcome any improvements to the project. Please share feedback, comments and suggestions at &lt;a href="https://github.com/slsa-framework/slsa-github-generator-go"&gt;slsa-github-generator-go&lt;/a&gt; and &lt;a href="https://github.com/slsa-framework/slsa-verifier"&gt;slsa-verifier&lt;/a&gt; project repositories. We will officially release v1 in a few weeks!&lt;br /&gt;&lt;br /&gt;In follow-up posts, we will demonstrate adding non-forgeable source provenance attesting to secure repository settings, and showcase the same techniques for other build toolchains and package managers, etc. Stay tuned!&lt;/div&gt;</content><link href="http://security.googleblog.com/feeds/4063859688883354856/comments/default" rel="replies" title="Post Comments" type="application/atom+xml"/><link href="http://www.blogger.com/comment.g?blogID=1176949257541686127&amp;postID=4063859688883354856&amp;isPopup=true" rel="replies" title="0 Comments" type="text/html"/><link href="http://www.blogger.com/feeds/1176949257541686127/posts/default/4063859688883354856" rel="edit" type="application/atom+xml"/><link href="http://www.blogger.com/feeds/1176949257541686127/posts/default/4063859688883354856" rel="self" type="application/atom+xml"/><link href="http://security.googleblog.com/2022/04/improving-software-supply-chain.html" rel="alternate" title="Improving software supply chain security with tamper-proof builds" type="text/html"/><author><name>Unknown</name><email>noreply@blogger.com</email><gd:image height="16" rel="http://schemas.google.com/g/2005#thumbnail" src="https://img1.blogblog.com/img/b16-rounded.gif" width="16"/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1176949257541686127.post-5716345963742339085</id><published>2022-04-05T09:00:00.006-04:00</published><updated>2022-04-05T10:48:50.720-04:00</updated><title type="text">Find and $eek! Increased rewards for Google Nest &amp; Fitbit devices</title><content type="html">&lt;span class="byline-author"&gt;Posted by Medha Jain, Program Manager, Devices &amp;amp; Services Security&amp;nbsp;&lt;/span&gt;&lt;div&gt;&lt;span class="byline-author"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;At Google, we constantly invest in security research to raise the bar for our devices, keeping our users safe and building their trust in our products. In 2021, we published &lt;a href="https://safety.google/nest/"&gt;Google Nest security commitments&lt;/a&gt;, in which we committed to engage with the research community to examine our products and services and report vulnerabilities.&lt;br /&gt;&lt;br /&gt;We are now looking to deepen this relationship and accelerate the path toward building more secure devices. Starting today, we will introduce a new vulnerability rewards structure for submissions impacting &lt;a href="https://store.google.com/category/connected_home?e=SharedFeatureEnablePolarisNavTest%3A%3ALaunch&amp;amp;hl=en-US"&gt;smart home&lt;/a&gt; (Google Nest) and &lt;a href="https://store.google.com/category/fitbit?e=SharedFeatureEnablePolarisNavTest%3A%3ALaunch&amp;amp;hl=en-US"&gt;wearables&lt;/a&gt; (Fitbit) devices through our &lt;a href="https://bughunters.google.com/about"&gt;Bug Hunters&lt;/a&gt; platform. &lt;br /&gt;&lt;br /&gt;&lt;b&gt;Bonus!&lt;/b&gt;&lt;div&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;We are paying higher rewards retroactively for eligible Google Nest and Fitbit devices reports submitted in 2021. And, starting today, for the next six months, will double the reward amount for all new eligible reports applicable to Google Nest &amp;amp; Fitbit devices in scope.&lt;br /&gt;&lt;br /&gt;We will continue to take reports on our web applications, services, and mobile apps at their existing reward levels. Please keep those coming! &lt;br /&gt;&lt;br /&gt;&lt;b&gt;An enhanced rewards program&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;Building on our previous programs to improve devices' embedded security posture, we’re bringing all our first-party devices under a single program, starting with Google Nest, Fitbit, and Pixel.&lt;br /&gt;This program extends the Android Security Reward Program, making it easier for researchers to submit a vulnerability in first-party devices and improving consistency across our severity assignments. Refer to the &lt;a href="https://bughunters.google.com/about/rules/6171833274204160/android-security-rewards-program-rules"&gt;Android and Google Devices Security Reward Program&lt;/a&gt; for more details.&lt;br /&gt;&lt;b&gt;&lt;br /&gt;What interests us?&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;We encourage researchers to report firmware, system software, and hardware vulnerabilities. Our wide diversity of platforms provides researchers with a smorgasbord of environments to explore. &lt;br /&gt;&lt;br /&gt;&lt;b&gt;What's next?&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;We will be at the &lt;a href="http://Hardwear.io"&gt;Hardwear.io&lt;/a&gt; conference this year! The VRP team is looking forward to meeting our security peers in person. We’ll be talking about the architecture of a couple of our devices, hoping to give security researchers a head start in finding vulnerabilities. We’ll have plenty of swag, too!&lt;br /&gt;&lt;br /&gt;We will continue to enhance the researchers' experience and participation. We intend to add training documentations and target areas that interest us as we grow the program.&lt;br /&gt;&lt;br /&gt;&lt;i&gt;A huge thanks to Sarah Jacobus, Adam Bacchus,  Ankur Chakraborty, Eduardo' Vela" &amp;lt;Nava&amp;gt;, Jay Cox, and Nic Watson.&lt;/i&gt;&lt;/div&gt;</content><link href="http://security.googleblog.com/feeds/5716345963742339085/comments/default" rel="replies" title="Post Comments" type="application/atom+xml"/><link href="http://www.blogger.com/comment.g?blogID=1176949257541686127&amp;postID=5716345963742339085&amp;isPopup=true" rel="replies" title="0 Comments" type="text/html"/><link href="http://www.blogger.com/feeds/1176949257541686127/posts/default/5716345963742339085" rel="edit" type="application/atom+xml"/><link href="http://www.blogger.com/feeds/1176949257541686127/posts/default/5716345963742339085" rel="self" type="application/atom+xml"/><link href="http://security.googleblog.com/2022/04/find-and-eek-increased-rewards-for.html" rel="alternate" title="Find and $eek! Increased rewards for Google Nest &amp; Fitbit devices" type="text/html"/><author><name>Unknown</name><email>noreply@blogger.com</email><gd:image height="16" rel="http://schemas.google.com/g/2005#thumbnail" src="https://img1.blogblog.com/img/b16-rounded.gif" width="16"/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1176949257541686127.post-3845543190783835216</id><published>2022-03-10T13:33:00.003-05:00</published><updated>2022-03-23T13:03:26.249-04:00</updated><title type="text">What's up with in-the-wild exploits? Plus, what we're doing about it.</title><content type="html">&lt;span class="byline-author"&gt;Posted by Adrian Taylor, Chrome Security Team&lt;/span&gt;&lt;p&gt;If you are a regular reader of our &lt;a href="https://chromereleases.googleblog.com/search/label/Stable%20updates"&gt;Chrome release blog&lt;/a&gt;, you may have noticed that phrases like 'exploit for CVE-1234-567 exists in the wild' have been appearing more often recently. In this post we'll explore why there seems to be such an increase in exploits, and clarify some misconceptions in the process. We'll then share how Chrome is continuing to make it harder for attackers to achieve their goals. &lt;/p&gt;&lt;p&gt;&lt;strong&gt;How things work today &lt;/strong&gt;&lt;/p&gt;&lt;p&gt;While the increase may initially seem concerning, it’s important to understand the reason behind this trend. If it's because there are many more exploits in the wild, it could point to a worrying trend. On the other hand, if we’re simply gaining more visibility into exploitation by attackers, it's actually a good thing! It’s good because it means we can respond by providing bug fixes to our users faster, and we can learn more about how real attackers operate. &lt;/p&gt;&lt;p&gt;So, which is it? It’s likely a little of both. &lt;/p&gt;&lt;p&gt;Our colleagues at Project Zero &lt;a href="https://docs.google.com/spreadsheets/d/1lkNJ0uQwbeC1ZTRrxdtuPLCIl7mlUreoKfSIgajnSyY/edit#gid=1123292625"&gt;publicly track all known in-the-wild “zero day” bugs&lt;/a&gt;. Here’s what they’ve reported for browsers: &lt;/p&gt;&lt;div class="separator" style="clear: both;"&gt;&lt;a href="https://blogger.googleusercontent.com/img/a/AVvXsEiQB-OawbmqsOQaigkJxRchRxwzNGb5sIZlPiYo1378oNW_CIq_ze7MkasyAohYGNQZS59-wmbQY5Q36CS5RjRG5pLRE1ko51GOYhY29oWZhxp6gXLHPPHKu9uk55yzcQ2LRjR45MeAs-dR8o8SKSq_5oEtL9Is_gcy994qKzZG72U9CtFIVup05Spnpw" style="display: block; padding: 1em 0px; text-align: center;"&gt;&lt;img alt="" border="0" data-original-height="339" data-original-width="555" src="https://blogger.googleusercontent.com/img/a/AVvXsEiQB-OawbmqsOQaigkJxRchRxwzNGb5sIZlPiYo1378oNW_CIq_ze7MkasyAohYGNQZS59-wmbQY5Q36CS5RjRG5pLRE1ko51GOYhY29oWZhxp6gXLHPPHKu9uk55yzcQ2LRjR45MeAs-dR8o8SKSq_5oEtL9Is_gcy994qKzZG72U9CtFIVup05Spnpw" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;p&gt;First, we don’t believe there was &lt;em&gt;no&lt;/em&gt; exploitation of Chromium based browsers between 2015 and 2018. We recognize that we don’t have full view into active exploitation, and just because we didn’t detect any zero-days during those years, doesn’t mean exploitation didn’t happen. Available exploitation data suffers from sampling bias. &lt;/p&gt;&lt;p&gt;Teams like Google’s &lt;a href="https://blog.google/threat-analysis-group/how-we-protect-users-0-day-attacks/"&gt;Threat Analysis Group&lt;/a&gt; are also becoming increasingly sophisticated in their efforts to protect users by discovering zero-days and in-the-wild attacks. A good example is &lt;a href="https://www.youtube.com/watch?v=g09EvzVsDbk"&gt;a bug in our Portals feature&lt;/a&gt; that we fixed last fall. This bug was discovered by a team member in Switzerland and reported to Chrome through our bug tracker. While Chrome normally keeps each web page locked away in a box called the “renderer sandbox,” this bug allowed the code to break out, potentially allowing attackers to steal information. Working across multiple time zones and teams, it took the team three days to come up with a fix and roll it out, as detailed in our video on the process:    &lt;/p&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;iframe class="BLOG_video_class" allowfullscreen="" youtube-src-id="VN-3-ov8uMM" width="600" height="498" src="https://www.youtube.com/embed/VN-3-ov8uMM"&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Why so many exploits? &lt;/strong&gt;&lt;/p&gt;&lt;p&gt;There are a number of factors at play, from changes in vendor and attacker behavior, to changes in the software itself. Here are four in particular that we've been discussing and exploring as a team. &lt;/p&gt;&lt;p&gt;First, we believe we’re seeing more bugs thanks to vendor transparency. Historically, many browser makers didn’t announce that a bug was being exploited in the wild, even if they knew it was happening. Today, most major browser makers have increased transparency via publishing details in release communications, and that may account for more publicly tracked “in the wild” exploitation. These efforts have been spearheaded by both browser security teams and dedicated research groups, such as &lt;a href="https://googleprojectzero.blogspot.com/"&gt;Project Zero.&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Second, we believe we’re seeing more exploits due to evolved attacker focus. There are two reasons to suspect attackers might be choosing to attack Chrome more than they did in the past. &lt;/p&gt;&lt;ul&gt; &lt;li&gt;&lt;strong&gt;Flash deprecation&lt;/strong&gt;: In 2015 and 2016, Flash was a primary exploitation target. Chrome gradually made Flash a less attractive target for attackers &lt;a href="https://www.chromium.org/flash-roadmap/"&gt;(for instance requiring user clicks to activate Flash content)&lt;/a&gt; before finally removing it in Chrome 88 in January last year. As Flash is no longer available, attackers have had to switch to a harder target: the browser itself.  &lt;/li&gt;&lt;li&gt;&lt;strong&gt;Chromium popularity&lt;/strong&gt;: Attackers go for the most popular target. In early 2020, Edge switched to using the Chromium rendering engine. If attackers can find a bug in Chromium, they can now attack a greater percentage of users. &lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Third, some attacks that could previously be accomplished with a single bug now require multiple bugs. Before 2015, only a single in-the-wild bug was required to steal a user’s secrets from other websites, because multiple web pages lived together in a single &lt;a href="https://www.chromium.org/developers/design-documents/multi-process-architecture"&gt;renderer process&lt;/a&gt;. If an attacker could compromise the renderer process belonging to a malicious website that a user visited, they might have been able to access the credentials for some other more sensitive website. &lt;/p&gt;&lt;p&gt;With Chrome’s multiyear &lt;a href="https://www.chromium.org/Home/chromium-security/site-isolation"&gt;Site Isolation&lt;/a&gt; project largely complete, a single bug is almost never sufficient to do anything really bad. Attackers often need to &lt;em&gt;chain &lt;/em&gt;at least two bugs: first, to compromise the renderer process, and second, to jump into the privileged Chrome browser process or directly into the device operating system. Sometimes multiple bugs are needed to achieve one or both of these steps. &lt;/p&gt;&lt;p&gt;So, to achieve the same result, an attacker generally now has to use more bugs than they previously did. For exactly the same level of attacker success, we’d see more in-the-wild bugs reported over time, as we add more layers of defense that the attacker needs to bypass. &lt;/p&gt;&lt;p&gt;Fourth, there’s simply the fact that &lt;em&gt;software has bugs&lt;/em&gt;. Some fraction of those bugs are exploitable. Browsers increasingly mirror the complexity of operating systems — providing access to your peripherals, filesystem, 3D rendering, GPUs — and more complexity means more bugs. &lt;/p&gt;&lt;p&gt;Ultimately, we believe data is an important part of the story, but the absolute number of exploited bugs isn't a sufficient measure of security risk. Since some security bugs are inevitable, how a software vendor architects their software (so that the impact of any single bug is limited) and responds to critical security bugs is often much more important than the specifics of any single bug. &lt;/p&gt;&lt;p&gt;&lt;strong&gt;How Chrome is raising the bar&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;The Chrome team works hard to both detect and fix bugs before releases and get bug fixes out to users as quickly as possible. We’re proud of &lt;a href="https://googleprojectzero.blogspot.com/2022/02/a-walk-through-project-zero-metrics.html"&gt;our record at fixing serious bugs quickly&lt;/a&gt;, &lt;em&gt;and&lt;/em&gt; we are continually working to do better. &lt;/p&gt;&lt;p&gt;For example, one area of concern for us is the risk of n-day attacks: that is, exploitation of bugs we’ve already fixed, where the fixes are visible in our open-source code repositories. We have greatly reduced our “patch gap” from 35 days in Chrome 76 to an average of 18 days in subsequent milestones, and we expect this to reduce slightly further with &lt;a href="https://blog.chromium.org/2021/03/speeding-up-release-cycle.html"&gt;Chrome’s faster release cycle&lt;/a&gt;.  &lt;/p&gt;&lt;p&gt;Irrespective of how quickly bugs are fixed, any in-the-wild exploitation is bad. Chrome is working hard to make it expensive and difficult for attackers to achieve their goals. &lt;/p&gt;&lt;p&gt;Some examples of the projects ongoing: &lt;/p&gt;&lt;ul&gt; &lt;li&gt;We continue to strengthen Site Isolation, &lt;a href="https://security.googleblog.com/2021/07/protecting-more-with-site-isolation.html"&gt;especially on Android&lt;/a&gt;.  &lt;/li&gt;&lt;li&gt;&lt;a href="https://docs.google.com/document/d/1FM4fQmIhEqPG8uGp5o9A-mnPB5BOeScZYpkHjo0KKA8/edit#heading=h.fg3qxf1x0p2q"&gt;The V8 heap sandbox&lt;/a&gt; will prevent attackers using JavaScript just-in-time (JIT) compilation bugs to compromise the renderer process. This will require attackers to add a &lt;em&gt;third&lt;/em&gt; bug to these exploit chains, which means increased security, but could increase the amount of in-the-wild exploits reported.   &lt;/li&gt;&lt;li&gt;The &lt;a href="https://www.youtube.com/watch?v=gevcleRHRZ4"&gt;MiraclePtr and *Scan&lt;/a&gt; projects aim to prevent exploitability of many of our largest class of browser process bugs, called “use-after-free”. We will be applying similar systematic solutions to other classes of bugs over time.  &lt;/li&gt;&lt;li&gt;Since “memory safety” bugs account for 70% of the exploitable security bugs, we aim to write new parts of Chrome in &lt;a href="https://security.googleblog.com/2021/09/an-update-on-memory-safety-in-chrome.html"&gt;memory-safe languages&lt;/a&gt;.  &lt;/li&gt;&lt;li&gt;We continue to work on post-exploitation mitigations such as &lt;a href="https://www.intel.com/content/www/us/en/developer/articles/technical/technical-look-control-flow-enforcement-technology.html"&gt;CET&lt;/a&gt; and &lt;a href="https://docs.microsoft.com/en-us/windows/win32/secbp/control-flow-guard"&gt;CFG&lt;/a&gt;. &lt;/li&gt;&lt;/ul&gt;&lt;p&gt;We are well past the stage of having “easy wins” when it comes to raising the bar for security. All of these are long term projects with significant engineering challenges. But as we've shown with Site Isolation, Chrome isn't afraid of making long term investments in major security engineering projects. One of the major challenges is performance: all of these technologies (except memory safe languages) could risk slowing the browser. Expect a series of blog posts over the coming months as we explore performance vs. security trade-offs. These decisions are &lt;em&gt;really hard&lt;/em&gt;: we do not want to make Chrome slower for billions of people, especially as this disproportionately hits users with slower devices – we strive to make Chrome secure for all our users, not just those with the high end systems. &lt;/p&gt;&lt;p&gt;&lt;strong&gt;How you can help&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Above all: if Chrome is reminding you to update, please do! &lt;/p&gt;&lt;p&gt;If you’re an enterprise IT professional, keep your users up-to-date by keeping auto-update on, and familiarize yourself with &lt;a href="https://chromeenterprise.google/browser/security/"&gt;the added enterprise policies and controls &lt;/a&gt;that you can apply to Chrome within your organization. We strongly advise not focusing on zero-days when making decisions about updates, but instead to assume any Chrome security bug is under exploitation as an n-day. &lt;/p&gt;&lt;p&gt;If you're a security researcher, you can report bugs you find to the &lt;a href="https://g.co/chrome/vrp"&gt;Chrome Vulnerability Rewards Program&lt;/a&gt; — and thanks for helping us make Chrome safer for everyone! &lt;/p&gt;</content><link href="http://security.googleblog.com/feeds/3845543190783835216/comments/default" rel="replies" title="Post Comments" type="application/atom+xml"/><link href="http://www.blogger.com/comment.g?blogID=1176949257541686127&amp;postID=3845543190783835216&amp;isPopup=true" rel="replies" title="0 Comments" type="text/html"/><link href="http://www.blogger.com/feeds/1176949257541686127/posts/default/3845543190783835216" rel="edit" type="application/atom+xml"/><link href="http://www.blogger.com/feeds/1176949257541686127/posts/default/3845543190783835216" rel="self" type="application/atom+xml"/><link href="http://security.googleblog.com/2022/03/whats-up-with-in-wild-exploits-plus.html" rel="alternate" title="What's up with in-the-wild exploits? Plus, what we're doing about it." type="text/html"/><author><name>Google</name><uri>http://www.blogger.com/profile/11822708545141062574</uri><email>noreply@blogger.com</email><gd:image height="16" rel="http://schemas.google.com/g/2005#thumbnail" src="https://img1.blogblog.com/img/b16-rounded.gif" width="16"/></author><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" height="72" url="https://blogger.googleusercontent.com/img/a/AVvXsEiQB-OawbmqsOQaigkJxRchRxwzNGb5sIZlPiYo1378oNW_CIq_ze7MkasyAohYGNQZS59-wmbQY5Q36CS5RjRG5pLRE1ko51GOYhY29oWZhxp6gXLHPPHKu9uk55yzcQ2LRjR45MeAs-dR8o8SKSq_5oEtL9Is_gcy994qKzZG72U9CtFIVup05Spnpw=s72-c" width="72"/><thr:total>0</thr:total></entry></feed>